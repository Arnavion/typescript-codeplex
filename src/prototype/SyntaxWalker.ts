class SyntaxWalker /*implements ISyntaxVisitor*/ {
    public walkToken(token: ISyntaxToken): void {
    }

    //public visitExternalModuleReference(node: ExternalModuleReferenceSyntax): void;
    //public visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): void;
    //public visitImportDeclaration(node: ImportDeclarationSyntax): void;
    //public visitClassDeclaration(node: ClassDeclarationSyntax): void;
    //public visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): void;
    //public visitExtendsClause(node: ExtendsClauseSyntax): void;
    //public visitImplementsClause(node: ImplementsClauseSyntax): void;
    //public visitModuleDeclaration(node: ModuleDeclarationSyntax): void;
    //public visitStatement(node: StatementSyntax): void;
    //public visitFunctionDeclaration(node: FunctionDeclarationSyntax): void;
    //public visitVariableStatement(node: VariableStatementSyntax): void;
    //public visitVariableDeclaration(node: VariableDeclarationSyntax): void;
    //public visitVariableDeclarator(node: VariableDeclaratorSyntax): void;
    //public visitEqualsValueClause(node: EqualsValueClauseSyntax): void;
    //public visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): void;
    //public visitThisExpression(node: ThisExpressionSyntax): void;
    //public visitLiteralExpression(node: LiteralExpressionSyntax): void;
    //public visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): void;
    //public visitOmittedExpression(node: OmittedExpressionSyntax): void;
    //public visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): void;
    //public visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpression): void;
    //public visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): void;
    //public visitIdentifierName(node: IdentifierNameSyntax): void;
    //public visitQualifiedName(node: QualifiedNameSyntax): void;
    //public visitConstructorType(node: ConstructorTypeSyntax): void;
    //public visitFunctionType(node: FunctionTypeSyntax): void;
    //public visitObjectType(node: ObjectTypeSyntax): void;
    //public visitArrayType(node: ArrayTypeSyntax): void;
    //public visitPredefinedType(node: PredefinedTypeSyntax): void;
    //public visitTypeAnnotation(node: TypeAnnotationSyntax): void;
    //public visitBlock(node: BlockSyntax): void;
    //public visitParameter(node: ParameterSyntax): void;
    //public visitMemberAccessExpression(node: MemberAccessExpressionSyntax): void;
    //public visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): void;
    //public visitElementAccessExpression(node: ElementAccessExpressionSyntax): void;
    //public visitInvocationExpression(node: InvocationExpressionSyntax): void;
    //public visitArgumentList(node: ArgumentListSyntax): void;
    //public visitBinaryExpression(node: BinaryExpressionSyntax): void;
    //public visitConditionalExpression(node: ConditionalExpressionSyntax): void;
    //public visitConstructSignature(node: ConstructSignatureSyntax): void;
    //public visitFunctionSignature(node: FunctionSignatureSyntax): void;
    //public visitIndexSignature(node: IndexSignatureSyntax): void;
    //public visitPropertySignature(node: PropertySignatureSyntax): void;
    //public visitParameterList(node: ParameterListSyntax): void;
    //public visitCallSignature(node: CallSignatureSyntax): void;
    //public visitElseClause(node: ElseClauseSyntax): void;
    //public visitIfStatement(node: IfStatementSyntax): void;
    //public visitExpressionStatement(node: ExpressionStatementSyntax): void;
    //public visitConstructorDeclaration(node: ConstructorDeclarationSyntax): void;
    //public visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): void;
    //public visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): void;
    //public visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): void;
    //public visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): void;
    //public visitThrowStatement(node: ThrowStatementSyntax): void;
    //public visitReturnStatement(node: ReturnStatementSyntax): void;
    //public visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): void;
    //public visitSwitchStatement(node: SwitchStatementSyntax): void;
    //public visitCaseSwitchClause(node: CaseSwitchClauseSyntax): void;
    //public visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): void;
    //public visitBreakStatement(node: BreakStatementSyntax): void;
    //public visitContinueStatement(node: ContinueStatementSyntax): void;
    //public visitForStatement(node: ForStatementSyntax): void;
    //public visitForInStatement(node: ForInStatementSyntax): void;
    //public visitWhileStatement(node: WhileStatementSyntax): void;
    //public visitWithStatement(node: WithStatementSyntax): void;
    //public visitEnumDeclaration(node: EnumDeclarationSyntax): void;
    //public visitCastExpression(node: CastExpressionSyntax): void;
    //public visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): void;
    //public visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): void;
    //public visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): void;
    //public visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): void;
    //public visitFunctionExpression(node: FunctionExpressionSyntax): void;
    //public visitEmptyStatement(node: EmptyStatementSyntax): void;
    //public visitSuperExpression(node: SuperExpressionSyntax): void;
    //public visitTryStatement(node: TryStatementSyntax): void;
    //public visitCatchClause(node: CatchClauseSyntax): void;
    //public visitFinallyClause(node: FinallyClauseSyntax): void;
    //public visitLabeledStatement(node: LabeledStatement): void;
    //public visitDoStatement(node: DoStatementSyntax): void;
    //public visitTypeOfExpression(node: TypeOfExpressionSyntax): void;
    //public visitDeleteExpression(node: DeleteExpressionSyntax): void;
    //public visitVoidExpression(node: VoidExpressionSyntax): void;
    //public visitDebuggerStatement(node: DebuggerStatementSyntax): void;
}