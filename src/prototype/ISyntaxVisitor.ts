///<reference path='References.ts' />

interface ISyntaxVisitor {
    visitExternalModuleReference(node: ExternalModuleReferenceSyntax): void;
    visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): void;
    visitImportDeclaration(node: ImportDeclarationSyntax): void;
    visitClassDeclaration(node: ClassDeclarationSyntax): void;
    visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): void;
    visitExtendsClause(node: ExtendsClauseSyntax): void;
    visitImplementsClause(node: ImplementsClauseSyntax): void;
    visitModuleDeclaration(node: ModuleDeclarationSyntax): void;
    visitStatement(node: StatementSyntax): void;
    visitFunctionDeclaration(node: FunctionDeclarationSyntax): void;
    visitVariableStatement(node: VariableStatementSyntax): void;
    visitVariableDeclaration(node: VariableDeclarationSyntax): void;
    visitVariableDeclarator(node: VariableDeclaratorSyntax): void;
    visitEqualsValueClause(node: EqualsValueClauseSyntax): void;
    visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): void;
    visitThisExpression(node: ThisExpressionSyntax): void;
    visitLiteralExpression(node: LiteralExpressionSyntax): void;
    visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): void;
    visitOmittedExpression(node: OmittedExpressionSyntax): void;
    visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): void;
    visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpression): void;
    visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): void;
    visitIdentifierName(node: IdentifierNameSyntax): void;
    visitQualifiedName(node: QualifiedNameSyntax): void;
    visitConstructorType(node: ConstructorTypeSyntax): void;
    visitFunctionType(node: FunctionTypeSyntax): void;
    visitObjectType(node: ObjectTypeSyntax): void;
    visitArrayType(node: ArrayTypeSyntax): void;
    visitPredefinedType(node: PredefinedTypeSyntax): void;
    visitTypeAnnotation(node: TypeAnnotationSyntax): void;
    visitBlock(node: BlockSyntax): void;
    visitParameter(node: ParameterSyntax): void;
    visitMemberAccessExpression(node: MemberAccessExpressionSyntax): void;
    visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): void;
    visitElementAccessExpression(node: ElementAccessExpressionSyntax): void;
    visitInvocationExpression(node: InvocationExpressionSyntax): void;
    visitArgumentList(node: ArgumentListSyntax): void;
    visitBinaryExpression(node: BinaryExpressionSyntax): void;
    visitConditionalExpression(node: ConditionalExpressionSyntax): void;
    visitConstructSignature(node: ConstructSignatureSyntax): void;
    visitFunctionSignature(node: FunctionSignatureSyntax): void;
    visitIndexSignature(node: IndexSignatureSyntax): void;
    visitPropertySignature(node: PropertySignatureSyntax): void;
    visitParameterList(node: ParameterListSyntax): void;
    visitCallSignature(node: CallSignatureSyntax): void;
    visitElseClause(node: ElseClauseSyntax): void;
    visitIfStatement(node: IfStatementSyntax): void;
    visitExpressionStatement(node: ExpressionStatementSyntax): void;
    visitConstructorDeclaration(node: ConstructorDeclarationSyntax): void;
    visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): void;
    visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): void;
    visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): void;
    visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): void;
    visitThrowStatement(node: ThrowStatementSyntax): void;
    visitReturnStatement(node: ReturnStatementSyntax): void;
    visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): void;
    visitSwitchStatement(node: SwitchStatementSyntax): void;
    visitCaseSwitchClause(node: CaseSwitchClauseSyntax): void;
    visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): void;
    visitBreakStatement(node: BreakStatementSyntax): void;
    visitContinueStatement(node: ContinueStatementSyntax): void;
    visitForStatement(node: ForStatementSyntax): void;
    visitForInStatement(node: ForInStatementSyntax): void;
    visitWhileStatement(node: WhileStatementSyntax): void;
    visitWithStatement(node: WithStatementSyntax): void;
    visitEnumDeclaration(node: EnumDeclarationSyntax): void;
    visitCastExpression(node: CastExpressionSyntax): void;
    visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): void;
    visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): void;
    visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): void;
    visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): void;
    visitFunctionExpression(node: FunctionExpressionSyntax): void;
    visitEmptyStatement(node: EmptyStatementSyntax): void;
    visitSuperExpression(node: SuperExpressionSyntax): void;
    visitTryStatement(node: TryStatementSyntax): void;
    visitCatchClause(node: CatchClauseSyntax): void;
    visitFinallyClause(node: FinallyClauseSyntax): void;
    visitLabeledStatement(node: LabeledStatement): void;
    visitDoStatement(node: DoStatementSyntax): void;
    visitTypeOfExpression(node: TypeOfExpressionSyntax): void;
    visitDeleteExpression(node: DeleteExpressionSyntax): void;
    visitVoidExpression(node: VoidExpressionSyntax): void;
    visitDebuggerStatement(node: DebuggerStatementSyntax): void;
}