var SyntaxRewriter = (function () {
    function SyntaxRewriter() { }
    SyntaxRewriter.prototype.visitToken = function (token) {
        return token;
    };
    SyntaxRewriter.prototype.visitNode = function (node) {
        return node === null ? null : node.accept(this);
    };
    SyntaxRewriter.prototype.visitList = function (list) {
        var newItems = null;
        for(var i = 0, n = list.count(); i < n; i++) {
            var item = list.syntaxNodeAt(i);
            var newItem = item.accept(this);
            if(item !== newItem && newItems === null) {
                newItems = [];
                for(var j = 0; j < i; j++) {
                    newItems.push(list.syntaxNodeAt(j));
                }
            }
            if(newItems) {
                newItems.push(newItem);
            }
        }
        Debug.assert(newItems === null || newItems.length === list.count());
        return newItems === null ? list : Syntax.list(newItems);
    };
    SyntaxRewriter.prototype.visitSeparatedList = function (list) {
        var newItems = null;
        for(var i = 0, n = list.count(); i < n; i++) {
            var item = list.itemAt(i);
            var newItem = item.isToken() ? this.visitToken(item) : this.visitNode(item);
            if(item !== newItem && newItems === null) {
                newItems = [];
                for(var j = 0; j < i; j++) {
                    newItems.push(list.itemAt(j));
                }
            }
            if(newItems) {
                newItems.push(newItem);
            }
        }
        Debug.assert(newItems === null || newItems.length === list.count());
        return newItems === null ? list : Syntax.separatedList(newItems);
    };
    SyntaxRewriter.prototype.visitSourceUnit = function (node) {
        return node.update(this.visitList(node.moduleElements()), this.visitToken(node.endOfFileToken()));
    };
    SyntaxRewriter.prototype.visitExternalModuleReference = function (node) {
        return node.update(this.visitToken(node.moduleKeyword()), this.visitToken(node.openParenToken()), this.visitToken(node.stringLiteral()), this.visitToken(node.closeParenToken()));
    };
    SyntaxRewriter.prototype.visitModuleNameModuleReference = function (node) {
        return node.withModuleName(this.visitNode(node.moduleName()));
    };
    SyntaxRewriter.prototype.visitImportDeclaration = function (node) {
        return node.update(this.visitToken(node.importKeyword()), this.visitToken(node.identifier()), this.visitToken(node.equalsToken()), this.visitNode(node.moduleReference()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitClassDeclaration = function (node) {
        return node.update(node.exportKeyword() === null ? null : this.visitToken(node.exportKeyword()), node.declareKeyword() === null ? null : this.visitToken(node.declareKeyword()), this.visitToken(node.classKeyword()), this.visitToken(node.identifier()), this.visitNode(node.extendsClause()), this.visitNode(node.implementsClause()), this.visitToken(node.openBraceToken()), this.visitList(node.classElements()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitInterfaceDeclaration = function (node) {
        return node.update(node.exportKeyword() === null ? null : this.visitToken(node.exportKeyword()), this.visitToken(node.interfaceKeyword()), this.visitToken(node.identifier()), this.visitNode(node.extendsClause()), this.visitNode(node.body()));
    };
    SyntaxRewriter.prototype.visitExtendsClause = function (node) {
        return node.update(this.visitToken(node.extendsKeyword()), this.visitSeparatedList(node.typeNames()));
    };
    SyntaxRewriter.prototype.visitImplementsClause = function (node) {
        return node.update(this.visitToken(node.implementsKeyword()), this.visitSeparatedList(node.typeNames()));
    };
    SyntaxRewriter.prototype.visitModuleDeclaration = function (node) {
        return node.update(node.exportKeyword() === null ? null : this.visitToken(node.exportKeyword()), node.declareKeyword() === null ? null : this.visitToken(node.declareKeyword()), this.visitToken(node.moduleKeyword()), this.visitNode(node.moduleName()), node.stringLiteral() === null ? null : this.visitToken(node.stringLiteral()), this.visitToken(node.openBraceToken()), this.visitList(node.moduleElements()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitFunctionDeclaration = function (node) {
        return node.update(node.exportKeyword() === null ? null : this.visitToken(node.exportKeyword()), node.declareKeyword() === null ? null : this.visitToken(node.declareKeyword()), this.visitToken(node.functionKeyword()), this.visitNode(node.functionSignature()), this.visitNode(node.block()), node.semicolonToken() === null ? null : this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitVariableStatement = function (node) {
        return node.update(node.exportKeyword() === null ? null : this.visitToken(node.exportKeyword()), node.declareKeyword() === null ? null : this.visitToken(node.declareKeyword()), this.visitNode(node.variableDeclaration()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitVariableDeclaration = function (node) {
        return node.update(this.visitToken(node.varKeyword()), this.visitSeparatedList(node.variableDeclarators()));
    };
    SyntaxRewriter.prototype.visitVariableDeclarator = function (node) {
        return node.update(this.visitToken(node.identifier()), this.visitNode(node.typeAnnotation()), this.visitNode(node.equalsValueClause()));
    };
    SyntaxRewriter.prototype.visitEqualsValueClause = function (node) {
        return node.update(this.visitToken(node.equalsToken()), this.visitNode(node.value()));
    };
    SyntaxRewriter.prototype.visitPrefixUnaryExpression = function (node) {
        return node.update(node.kind(), this.visitToken(node.operatorToken()), this.visitNode(node.operand()));
    };
    SyntaxRewriter.prototype.visitThisExpression = function (node) {
        return node.withThisKeyword(this.visitToken(node.thisKeyword()));
    };
    SyntaxRewriter.prototype.visitLiteralExpression = function (node) {
        return node.update(node.kind(), this.visitToken(node.literalToken()));
    };
    SyntaxRewriter.prototype.visitArrayLiteralExpression = function (node) {
        return node.update(this.visitToken(node.openBracketToken()), this.visitSeparatedList(node.expressions()), this.visitToken(node.closeBracketToken()));
    };
    SyntaxRewriter.prototype.visitOmittedExpression = function (node) {
        return node;
    };
    SyntaxRewriter.prototype.visitParenthesizedExpression = function (node) {
        return node.update(this.visitToken(node.openParenToken()), this.visitNode(node.expression()), this.visitToken(node.closeParenToken()));
    };
    SyntaxRewriter.prototype.visitSimpleArrowFunctionExpression = function (node) {
        return node.update(this.visitToken(node.identifier()), this.visitToken(node.equalsGreaterThanToken()), this.visitNode(node.body()));
    };
    SyntaxRewriter.prototype.visitParenthesizedArrowFunctionExpression = function (node) {
        return node.update(this.visitNode(node.callSignature()), this.visitToken(node.equalsGreaterThanToken()), this.visitNode(node.body()));
    };
    SyntaxRewriter.prototype.visitIdentifierName = function (node) {
        return node.withIdentifier(this.visitToken(node.identifier()));
    };
    SyntaxRewriter.prototype.visitQualifiedName = function (node) {
        return node.update(this.visitNode(node.left()), this.visitToken(node.dotToken()), this.visitNode(node.right()));
    };
    SyntaxRewriter.prototype.visitConstructorType = function (node) {
        return node.update(this.visitToken(node.newKeyword()), this.visitNode(node.parameterList()), this.visitToken(node.equalsGreaterThanToken()), this.visitNode(node.type()));
    };
    SyntaxRewriter.prototype.visitFunctionType = function (node) {
        return node.update(this.visitNode(node.parameterList()), this.visitToken(node.equalsGreaterThanToken()), this.visitNode(node.type()));
    };
    SyntaxRewriter.prototype.visitObjectType = function (node) {
        return node.update(this.visitToken(node.openBraceToken()), this.visitSeparatedList(node.typeMembers()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitArrayType = function (node) {
        return node.update(this.visitNode(node.type()), this.visitToken(node.openBracketToken()), this.visitToken(node.closeBracketToken()));
    };
    SyntaxRewriter.prototype.visitPredefinedType = function (node) {
        return node.withKeyword(this.visitToken(node.keyword()));
    };
    SyntaxRewriter.prototype.visitTypeAnnotation = function (node) {
        return node.update(this.visitToken(node.colonToken()), this.visitNode(node.type()));
    };
    SyntaxRewriter.prototype.visitBlock = function (node) {
        return node.update(this.visitToken(node.openBraceToken()), this.visitList(node.statements()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitParameter = function (node) {
        return node.update(node.dotDotDotToken() === null ? null : this.visitToken(node.dotDotDotToken()), node.publicOrPrivateKeyword() === null ? null : this.visitToken(node.publicOrPrivateKeyword()), this.visitToken(node.identifier()), node.questionToken() === null ? null : this.visitToken(node.questionToken()), this.visitNode(node.typeAnnotation()), this.visitNode(node.equalsValueClause()));
    };
    SyntaxRewriter.prototype.visitMemberAccessExpression = function (node) {
        return node.update(this.visitNode(node.expression()), this.visitToken(node.dotToken()), this.visitNode(node.identifierName()));
    };
    SyntaxRewriter.prototype.visitPostfixUnaryExpression = function (node) {
        return node.update(node.kind(), this.visitNode(node.operand()), this.visitToken(node.operatorToken()));
    };
    SyntaxRewriter.prototype.visitElementAccessExpression = function (node) {
        return node.update(this.visitNode(node.expression()), this.visitToken(node.openBracketToken()), this.visitNode(node.argumentExpression()), this.visitToken(node.closeBracketToken()));
    };
    SyntaxRewriter.prototype.visitInvocationExpression = function (node) {
        return node.update(this.visitNode(node.expression()), this.visitNode(node.argumentList()));
    };
    SyntaxRewriter.prototype.visitArgumentList = function (node) {
        return node.update(this.visitToken(node.openParenToken()), this.visitSeparatedList(node.arguments()), this.visitToken(node.closeParenToken()));
    };
    SyntaxRewriter.prototype.visitBinaryExpression = function (node) {
        return node.update(node.kind(), this.visitNode(node.left()), this.visitToken(node.operatorToken()), this.visitNode(node.right()));
    };
    SyntaxRewriter.prototype.visitConditionalExpression = function (node) {
        return node.update(this.visitNode(node.condition()), this.visitToken(node.questionToken()), this.visitNode(node.whenTrue()), this.visitToken(node.colonToken()), this.visitNode(node.whenFalse()));
    };
    SyntaxRewriter.prototype.visitConstructSignature = function (node) {
        return node.update(this.visitToken(node.newKeyword()), this.visitNode(node.parameterList()), this.visitNode(node.typeAnnotation()));
    };
    SyntaxRewriter.prototype.visitFunctionSignature = function (node) {
        return node.update(this.visitToken(node.identifier()), node.questionToken() === null ? null : this.visitToken(node.questionToken()), this.visitNode(node.parameterList()), this.visitNode(node.typeAnnotation()));
    };
    SyntaxRewriter.prototype.visitIndexSignature = function (node) {
        return node.update(this.visitToken(node.openBracketToken()), this.visitNode(node.parameter()), this.visitToken(node.closeBracketToken()), this.visitNode(node.typeAnnotation()));
    };
    SyntaxRewriter.prototype.visitPropertySignature = function (node) {
        return node.update(this.visitToken(node.identifier()), node.questionToken() === null ? null : this.visitToken(node.questionToken()), this.visitNode(node.typeAnnotation()));
    };
    SyntaxRewriter.prototype.visitParameterList = function (node) {
        return node.update(this.visitToken(node.openParenToken()), this.visitSeparatedList(node.parameters()), this.visitToken(node.closeParenToken()));
    };
    SyntaxRewriter.prototype.visitCallSignature = function (node) {
        return node.update(this.visitNode(node.parameterList()), this.visitNode(node.typeAnnotation()));
    };
    SyntaxRewriter.prototype.visitElseClause = function (node) {
        return node.update(this.visitToken(node.elseKeyword()), this.visitNode(node.statement()));
    };
    SyntaxRewriter.prototype.visitIfStatement = function (node) {
        return node.update(this.visitToken(node.ifKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.condition()), this.visitToken(node.closeParenToken()), this.visitNode(node.statement()), this.visitNode(node.elseClause()));
    };
    SyntaxRewriter.prototype.visitExpressionStatement = function (node) {
        return node.update(this.visitNode(node.expression()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitConstructorDeclaration = function (node) {
        return node.update(this.visitToken(node.constructorKeyword()), this.visitNode(node.parameterList()), this.visitNode(node.block()), node.semicolonToken() === null ? null : this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitMemberFunctionDeclaration = function (node) {
        return node.update(node.publicOrPrivateKeyword() === null ? null : this.visitToken(node.publicOrPrivateKeyword()), node.staticKeyword() === null ? null : this.visitToken(node.staticKeyword()), this.visitNode(node.functionSignature()), this.visitNode(node.block()), node.semicolonToken() === null ? null : this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitGetMemberAccessorDeclaration = function (node) {
        return node.update(node.publicOrPrivateKeyword() === null ? null : this.visitToken(node.publicOrPrivateKeyword()), node.staticKeyword() === null ? null : this.visitToken(node.staticKeyword()), this.visitToken(node.getKeyword()), this.visitToken(node.identifier()), this.visitNode(node.parameterList()), this.visitNode(node.typeAnnotation()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitSetMemberAccessorDeclaration = function (node) {
        return node.update(node.publicOrPrivateKeyword() === null ? null : this.visitToken(node.publicOrPrivateKeyword()), node.staticKeyword() === null ? null : this.visitToken(node.staticKeyword()), this.visitToken(node.setKeyword()), this.visitToken(node.identifier()), this.visitNode(node.parameterList()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitMemberVariableDeclaration = function (node) {
        return node.update(node.publicOrPrivateKeyword() === null ? null : this.visitToken(node.publicOrPrivateKeyword()), node.staticKeyword() === null ? null : this.visitToken(node.staticKeyword()), this.visitNode(node.variableDeclarator()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitThrowStatement = function (node) {
        return node.update(this.visitToken(node.throwKeyword()), this.visitNode(node.expression()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitReturnStatement = function (node) {
        return node.update(this.visitToken(node.returnKeyword()), this.visitNode(node.expression()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitObjectCreationExpression = function (node) {
        return node.update(this.visitToken(node.newKeyword()), this.visitNode(node.expression()), this.visitNode(node.argumentList()));
    };
    SyntaxRewriter.prototype.visitSwitchStatement = function (node) {
        return node.update(this.visitToken(node.switchKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.expression()), this.visitToken(node.closeParenToken()), this.visitToken(node.openBraceToken()), this.visitList(node.switchClauses()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitCaseSwitchClause = function (node) {
        return node.update(this.visitToken(node.caseKeyword()), this.visitNode(node.expression()), this.visitToken(node.colonToken()), this.visitList(node.statements()));
    };
    SyntaxRewriter.prototype.visitDefaultSwitchClause = function (node) {
        return node.update(this.visitToken(node.defaultKeyword()), this.visitToken(node.colonToken()), this.visitList(node.statements()));
    };
    SyntaxRewriter.prototype.visitBreakStatement = function (node) {
        return node.update(this.visitToken(node.breakKeyword()), node.identifier() === null ? null : this.visitToken(node.identifier()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitContinueStatement = function (node) {
        return node.update(this.visitToken(node.continueKeyword()), node.identifier() === null ? null : this.visitToken(node.identifier()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitForStatement = function (node) {
        return node.update(this.visitToken(node.forKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.variableDeclaration()), this.visitNode(node.initializer()), this.visitToken(node.firstSemicolonToken()), this.visitNode(node.condition()), this.visitToken(node.secondSemicolonToken()), this.visitNode(node.incrementor()), this.visitToken(node.closeParenToken()), this.visitNode(node.statement()));
    };
    SyntaxRewriter.prototype.visitForInStatement = function (node) {
        return node.update(this.visitToken(node.forKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.variableDeclaration()), this.visitNode(node.left()), this.visitToken(node.inKeyword()), this.visitNode(node.expression()), this.visitToken(node.closeParenToken()), this.visitNode(node.statement()));
    };
    SyntaxRewriter.prototype.visitWhileStatement = function (node) {
        return node.update(this.visitToken(node.whileKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.condition()), this.visitToken(node.closeParenToken()), this.visitNode(node.statement()));
    };
    SyntaxRewriter.prototype.visitWithStatement = function (node) {
        return node.update(this.visitToken(node.withKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.condition()), this.visitToken(node.closeParenToken()), this.visitNode(node.statement()));
    };
    SyntaxRewriter.prototype.visitEnumDeclaration = function (node) {
        return node.update(node.exportKeyword() === null ? null : this.visitToken(node.exportKeyword()), this.visitToken(node.enumKeyword()), this.visitToken(node.identifier()), this.visitToken(node.openBraceToken()), this.visitSeparatedList(node.variableDeclarators()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitCastExpression = function (node) {
        return node.update(this.visitToken(node.lessThanToken()), this.visitNode(node.type()), this.visitToken(node.greaterThanToken()), this.visitNode(node.expression()));
    };
    SyntaxRewriter.prototype.visitObjectLiteralExpression = function (node) {
        return node.update(this.visitToken(node.openBraceToken()), this.visitSeparatedList(node.propertyAssignments()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitSimplePropertyAssignment = function (node) {
        return node.update(this.visitToken(node.propertyName()), this.visitToken(node.colonToken()), this.visitNode(node.expression()));
    };
    SyntaxRewriter.prototype.visitGetAccessorPropertyAssignment = function (node) {
        return node.update(this.visitToken(node.getKeyword()), this.visitToken(node.propertyName()), this.visitToken(node.openParenToken()), this.visitToken(node.closeParenToken()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitSetAccessorPropertyAssignment = function (node) {
        return node.update(this.visitToken(node.setKeyword()), this.visitToken(node.propertyName()), this.visitToken(node.openParenToken()), this.visitToken(node.parameterName()), this.visitToken(node.closeParenToken()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitFunctionExpression = function (node) {
        return node.update(this.visitToken(node.functionKeyword()), node.identifier() === null ? null : this.visitToken(node.identifier()), this.visitNode(node.callSignature()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitEmptyStatement = function (node) {
        return node.withSemicolonToken(this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitSuperExpression = function (node) {
        return node.withSuperKeyword(this.visitToken(node.superKeyword()));
    };
    SyntaxRewriter.prototype.visitTryStatement = function (node) {
        return node.update(this.visitToken(node.tryKeyword()), this.visitNode(node.block()), this.visitNode(node.catchClause()), this.visitNode(node.finallyClause()));
    };
    SyntaxRewriter.prototype.visitCatchClause = function (node) {
        return node.update(this.visitToken(node.catchKeyword()), this.visitToken(node.openParenToken()), this.visitToken(node.identifier()), this.visitToken(node.closeParenToken()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitFinallyClause = function (node) {
        return node.update(this.visitToken(node.finallyKeyword()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitLabeledStatement = function (node) {
        return node.update(this.visitToken(node.identifier()), this.visitToken(node.colonToken()), this.visitNode(node.statement()));
    };
    SyntaxRewriter.prototype.visitDoStatement = function (node) {
        return node.update(this.visitToken(node.doKeyword()), this.visitNode(node.statement()), this.visitToken(node.whileKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.condition()), this.visitToken(node.closeParenToken()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitTypeOfExpression = function (node) {
        return node.update(this.visitToken(node.typeOfKeyword()), this.visitNode(node.expression()));
    };
    SyntaxRewriter.prototype.visitDeleteExpression = function (node) {
        return node.update(this.visitToken(node.deleteKeyword()), this.visitNode(node.expression()));
    };
    SyntaxRewriter.prototype.visitVoidExpression = function (node) {
        return node.update(this.visitToken(node.voidKeyword()), this.visitNode(node.expression()));
    };
    SyntaxRewriter.prototype.visitDebuggerStatement = function (node) {
        return node.update(this.visitToken(node.debuggerKeyword()), this.visitToken(node.semicolonToken()));
    };
    return SyntaxRewriter;
})();
var FormattingOptions = (function () {
    function FormattingOptions(useTabs, spacesPerTab, indentSpaces) {
        this.useTabs = useTabs;
        this.spacesPerTab = spacesPerTab;
        this.indentSpaces = indentSpaces;
    }
    FormattingOptions.defaultOptions = new FormattingOptions(false, 4, 4);
    return FormattingOptions;
})();
var SyntaxKind;
(function (SyntaxKind) {
    SyntaxKind._map = [];
    SyntaxKind._map[0] = "None";
    SyntaxKind.None = 0;
    SyntaxKind._map[1] = "List";
    SyntaxKind.List = 1;
    SyntaxKind._map[2] = "SeparatedList";
    SyntaxKind.SeparatedList = 2;
    SyntaxKind._map[3] = "TriviaList";
    SyntaxKind.TriviaList = 3;
    SyntaxKind._map[4] = "WhitespaceTrivia";
    SyntaxKind.WhitespaceTrivia = 4;
    SyntaxKind._map[5] = "NewLineTrivia";
    SyntaxKind.NewLineTrivia = 5;
    SyntaxKind._map[6] = "MultiLineCommentTrivia";
    SyntaxKind.MultiLineCommentTrivia = 6;
    SyntaxKind._map[7] = "SingleLineCommentTrivia";
    SyntaxKind.SingleLineCommentTrivia = 7;
    SyntaxKind._map[8] = "SkippedTextTrivia";
    SyntaxKind.SkippedTextTrivia = 8;
    SyntaxKind._map[9] = "IdentifierNameToken";
    SyntaxKind.IdentifierNameToken = 9;
    SyntaxKind._map[10] = "RegularExpressionLiteral";
    SyntaxKind.RegularExpressionLiteral = 10;
    SyntaxKind._map[11] = "NumericLiteral";
    SyntaxKind.NumericLiteral = 11;
    SyntaxKind._map[12] = "StringLiteral";
    SyntaxKind.StringLiteral = 12;
    SyntaxKind._map[13] = "BreakKeyword";
    SyntaxKind.BreakKeyword = 13;
    SyntaxKind._map[14] = "CaseKeyword";
    SyntaxKind.CaseKeyword = 14;
    SyntaxKind._map[15] = "CatchKeyword";
    SyntaxKind.CatchKeyword = 15;
    SyntaxKind._map[16] = "ContinueKeyword";
    SyntaxKind.ContinueKeyword = 16;
    SyntaxKind._map[17] = "DebuggerKeyword";
    SyntaxKind.DebuggerKeyword = 17;
    SyntaxKind._map[18] = "DefaultKeyword";
    SyntaxKind.DefaultKeyword = 18;
    SyntaxKind._map[19] = "DeleteKeyword";
    SyntaxKind.DeleteKeyword = 19;
    SyntaxKind._map[20] = "DoKeyword";
    SyntaxKind.DoKeyword = 20;
    SyntaxKind._map[21] = "ElseKeyword";
    SyntaxKind.ElseKeyword = 21;
    SyntaxKind._map[22] = "FalseKeyword";
    SyntaxKind.FalseKeyword = 22;
    SyntaxKind._map[23] = "FinallyKeyword";
    SyntaxKind.FinallyKeyword = 23;
    SyntaxKind._map[24] = "ForKeyword";
    SyntaxKind.ForKeyword = 24;
    SyntaxKind._map[25] = "FunctionKeyword";
    SyntaxKind.FunctionKeyword = 25;
    SyntaxKind._map[26] = "IfKeyword";
    SyntaxKind.IfKeyword = 26;
    SyntaxKind._map[27] = "InKeyword";
    SyntaxKind.InKeyword = 27;
    SyntaxKind._map[28] = "InstanceOfKeyword";
    SyntaxKind.InstanceOfKeyword = 28;
    SyntaxKind._map[29] = "NewKeyword";
    SyntaxKind.NewKeyword = 29;
    SyntaxKind._map[30] = "NullKeyword";
    SyntaxKind.NullKeyword = 30;
    SyntaxKind._map[31] = "ReturnKeyword";
    SyntaxKind.ReturnKeyword = 31;
    SyntaxKind._map[32] = "SwitchKeyword";
    SyntaxKind.SwitchKeyword = 32;
    SyntaxKind._map[33] = "ThisKeyword";
    SyntaxKind.ThisKeyword = 33;
    SyntaxKind._map[34] = "ThrowKeyword";
    SyntaxKind.ThrowKeyword = 34;
    SyntaxKind._map[35] = "TrueKeyword";
    SyntaxKind.TrueKeyword = 35;
    SyntaxKind._map[36] = "TryKeyword";
    SyntaxKind.TryKeyword = 36;
    SyntaxKind._map[37] = "TypeOfKeyword";
    SyntaxKind.TypeOfKeyword = 37;
    SyntaxKind._map[38] = "VarKeyword";
    SyntaxKind.VarKeyword = 38;
    SyntaxKind._map[39] = "VoidKeyword";
    SyntaxKind.VoidKeyword = 39;
    SyntaxKind._map[40] = "WhileKeyword";
    SyntaxKind.WhileKeyword = 40;
    SyntaxKind._map[41] = "WithKeyword";
    SyntaxKind.WithKeyword = 41;
    SyntaxKind._map[42] = "ClassKeyword";
    SyntaxKind.ClassKeyword = 42;
    SyntaxKind._map[43] = "ConstKeyword";
    SyntaxKind.ConstKeyword = 43;
    SyntaxKind._map[44] = "EnumKeyword";
    SyntaxKind.EnumKeyword = 44;
    SyntaxKind._map[45] = "ExportKeyword";
    SyntaxKind.ExportKeyword = 45;
    SyntaxKind._map[46] = "ExtendsKeyword";
    SyntaxKind.ExtendsKeyword = 46;
    SyntaxKind._map[47] = "ImportKeyword";
    SyntaxKind.ImportKeyword = 47;
    SyntaxKind._map[48] = "SuperKeyword";
    SyntaxKind.SuperKeyword = 48;
    SyntaxKind._map[49] = "ImplementsKeyword";
    SyntaxKind.ImplementsKeyword = 49;
    SyntaxKind._map[50] = "InterfaceKeyword";
    SyntaxKind.InterfaceKeyword = 50;
    SyntaxKind._map[51] = "LetKeyword";
    SyntaxKind.LetKeyword = 51;
    SyntaxKind._map[52] = "PackageKeyword";
    SyntaxKind.PackageKeyword = 52;
    SyntaxKind._map[53] = "PrivateKeyword";
    SyntaxKind.PrivateKeyword = 53;
    SyntaxKind._map[54] = "ProtectedKeyword";
    SyntaxKind.ProtectedKeyword = 54;
    SyntaxKind._map[55] = "PublicKeyword";
    SyntaxKind.PublicKeyword = 55;
    SyntaxKind._map[56] = "StaticKeyword";
    SyntaxKind.StaticKeyword = 56;
    SyntaxKind._map[57] = "YieldKeyword";
    SyntaxKind.YieldKeyword = 57;
    SyntaxKind._map[58] = "AnyKeyword";
    SyntaxKind.AnyKeyword = 58;
    SyntaxKind._map[59] = "BoolKeyword";
    SyntaxKind.BoolKeyword = 59;
    SyntaxKind._map[60] = "ConstructorKeyword";
    SyntaxKind.ConstructorKeyword = 60;
    SyntaxKind._map[61] = "DeclareKeyword";
    SyntaxKind.DeclareKeyword = 61;
    SyntaxKind._map[62] = "GetKeyword";
    SyntaxKind.GetKeyword = 62;
    SyntaxKind._map[63] = "ModuleKeyword";
    SyntaxKind.ModuleKeyword = 63;
    SyntaxKind._map[64] = "NumberKeyword";
    SyntaxKind.NumberKeyword = 64;
    SyntaxKind._map[65] = "SetKeyword";
    SyntaxKind.SetKeyword = 65;
    SyntaxKind._map[66] = "StringKeyword";
    SyntaxKind.StringKeyword = 66;
    SyntaxKind._map[67] = "OpenBraceToken";
    SyntaxKind.OpenBraceToken = 67;
    SyntaxKind._map[68] = "CloseBraceToken";
    SyntaxKind.CloseBraceToken = 68;
    SyntaxKind._map[69] = "OpenParenToken";
    SyntaxKind.OpenParenToken = 69;
    SyntaxKind._map[70] = "CloseParenToken";
    SyntaxKind.CloseParenToken = 70;
    SyntaxKind._map[71] = "OpenBracketToken";
    SyntaxKind.OpenBracketToken = 71;
    SyntaxKind._map[72] = "CloseBracketToken";
    SyntaxKind.CloseBracketToken = 72;
    SyntaxKind._map[73] = "DotToken";
    SyntaxKind.DotToken = 73;
    SyntaxKind._map[74] = "DotDotDotToken";
    SyntaxKind.DotDotDotToken = 74;
    SyntaxKind._map[75] = "SemicolonToken";
    SyntaxKind.SemicolonToken = 75;
    SyntaxKind._map[76] = "CommaToken";
    SyntaxKind.CommaToken = 76;
    SyntaxKind._map[77] = "LessThanToken";
    SyntaxKind.LessThanToken = 77;
    SyntaxKind._map[78] = "GreaterThanToken";
    SyntaxKind.GreaterThanToken = 78;
    SyntaxKind._map[79] = "LessThanEqualsToken";
    SyntaxKind.LessThanEqualsToken = 79;
    SyntaxKind._map[80] = "GreaterThanEqualsToken";
    SyntaxKind.GreaterThanEqualsToken = 80;
    SyntaxKind._map[81] = "EqualsEqualsToken";
    SyntaxKind.EqualsEqualsToken = 81;
    SyntaxKind._map[82] = "EqualsGreaterThanToken";
    SyntaxKind.EqualsGreaterThanToken = 82;
    SyntaxKind._map[83] = "ExclamationEqualsToken";
    SyntaxKind.ExclamationEqualsToken = 83;
    SyntaxKind._map[84] = "EqualsEqualsEqualsToken";
    SyntaxKind.EqualsEqualsEqualsToken = 84;
    SyntaxKind._map[85] = "ExclamationEqualsEqualsToken";
    SyntaxKind.ExclamationEqualsEqualsToken = 85;
    SyntaxKind._map[86] = "PlusToken";
    SyntaxKind.PlusToken = 86;
    SyntaxKind._map[87] = "MinusToken";
    SyntaxKind.MinusToken = 87;
    SyntaxKind._map[88] = "AsteriskToken";
    SyntaxKind.AsteriskToken = 88;
    SyntaxKind._map[89] = "PercentToken";
    SyntaxKind.PercentToken = 89;
    SyntaxKind._map[90] = "PlusPlusToken";
    SyntaxKind.PlusPlusToken = 90;
    SyntaxKind._map[91] = "MinusMinusToken";
    SyntaxKind.MinusMinusToken = 91;
    SyntaxKind._map[92] = "LessThanLessThanToken";
    SyntaxKind.LessThanLessThanToken = 92;
    SyntaxKind._map[93] = "GreaterThanGreaterThanToken";
    SyntaxKind.GreaterThanGreaterThanToken = 93;
    SyntaxKind._map[94] = "GreaterThanGreaterThanGreaterThanToken";
    SyntaxKind.GreaterThanGreaterThanGreaterThanToken = 94;
    SyntaxKind._map[95] = "AmpersandToken";
    SyntaxKind.AmpersandToken = 95;
    SyntaxKind._map[96] = "BarToken";
    SyntaxKind.BarToken = 96;
    SyntaxKind._map[97] = "CaretToken";
    SyntaxKind.CaretToken = 97;
    SyntaxKind._map[98] = "ExclamationToken";
    SyntaxKind.ExclamationToken = 98;
    SyntaxKind._map[99] = "TildeToken";
    SyntaxKind.TildeToken = 99;
    SyntaxKind._map[100] = "AmpersandAmpersandToken";
    SyntaxKind.AmpersandAmpersandToken = 100;
    SyntaxKind._map[101] = "BarBarToken";
    SyntaxKind.BarBarToken = 101;
    SyntaxKind._map[102] = "QuestionToken";
    SyntaxKind.QuestionToken = 102;
    SyntaxKind._map[103] = "ColonToken";
    SyntaxKind.ColonToken = 103;
    SyntaxKind._map[104] = "EqualsToken";
    SyntaxKind.EqualsToken = 104;
    SyntaxKind._map[105] = "PlusEqualsToken";
    SyntaxKind.PlusEqualsToken = 105;
    SyntaxKind._map[106] = "MinusEqualsToken";
    SyntaxKind.MinusEqualsToken = 106;
    SyntaxKind._map[107] = "AsteriskEqualsToken";
    SyntaxKind.AsteriskEqualsToken = 107;
    SyntaxKind._map[108] = "PercentEqualsToken";
    SyntaxKind.PercentEqualsToken = 108;
    SyntaxKind._map[109] = "LessThanLessThanEqualsToken";
    SyntaxKind.LessThanLessThanEqualsToken = 109;
    SyntaxKind._map[110] = "GreaterThanGreaterThanEqualsToken";
    SyntaxKind.GreaterThanGreaterThanEqualsToken = 110;
    SyntaxKind._map[111] = "GreaterThanGreaterThanGreaterThanEqualsToken";
    SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken = 111;
    SyntaxKind._map[112] = "AmpersandEqualsToken";
    SyntaxKind.AmpersandEqualsToken = 112;
    SyntaxKind._map[113] = "BarEqualsToken";
    SyntaxKind.BarEqualsToken = 113;
    SyntaxKind._map[114] = "CaretEqualsToken";
    SyntaxKind.CaretEqualsToken = 114;
    SyntaxKind._map[115] = "SlashToken";
    SyntaxKind.SlashToken = 115;
    SyntaxKind._map[116] = "SlashEqualsToken";
    SyntaxKind.SlashEqualsToken = 116;
    SyntaxKind._map[117] = "ErrorToken";
    SyntaxKind.ErrorToken = 117;
    SyntaxKind._map[118] = "EndOfFileToken";
    SyntaxKind.EndOfFileToken = 118;
    SyntaxKind._map[119] = "SourceUnit";
    SyntaxKind.SourceUnit = 119;
    SyntaxKind._map[120] = "IdentifierName";
    SyntaxKind.IdentifierName = 120;
    SyntaxKind._map[121] = "QualifiedName";
    SyntaxKind.QualifiedName = 121;
    SyntaxKind._map[122] = "ObjectType";
    SyntaxKind.ObjectType = 122;
    SyntaxKind._map[123] = "PredefinedType";
    SyntaxKind.PredefinedType = 123;
    SyntaxKind._map[124] = "FunctionType";
    SyntaxKind.FunctionType = 124;
    SyntaxKind._map[125] = "ArrayType";
    SyntaxKind.ArrayType = 125;
    SyntaxKind._map[126] = "ConstructorType";
    SyntaxKind.ConstructorType = 126;
    SyntaxKind._map[127] = "InterfaceDeclaration";
    SyntaxKind.InterfaceDeclaration = 127;
    SyntaxKind._map[128] = "FunctionDeclaration";
    SyntaxKind.FunctionDeclaration = 128;
    SyntaxKind._map[129] = "ModuleDeclaration";
    SyntaxKind.ModuleDeclaration = 129;
    SyntaxKind._map[130] = "ClassDeclaration";
    SyntaxKind.ClassDeclaration = 130;
    SyntaxKind._map[131] = "EnumDeclaration";
    SyntaxKind.EnumDeclaration = 131;
    SyntaxKind._map[132] = "ImportDeclaration";
    SyntaxKind.ImportDeclaration = 132;
    SyntaxKind._map[133] = "MemberFunctionDeclaration";
    SyntaxKind.MemberFunctionDeclaration = 133;
    SyntaxKind._map[134] = "MemberVariableDeclaration";
    SyntaxKind.MemberVariableDeclaration = 134;
    SyntaxKind._map[135] = "ConstructorDeclaration";
    SyntaxKind.ConstructorDeclaration = 135;
    SyntaxKind._map[136] = "GetMemberAccessorDeclaration";
    SyntaxKind.GetMemberAccessorDeclaration = 136;
    SyntaxKind._map[137] = "SetMemberAccessorDeclaration";
    SyntaxKind.SetMemberAccessorDeclaration = 137;
    SyntaxKind._map[138] = "Block";
    SyntaxKind.Block = 138;
    SyntaxKind._map[139] = "IfStatement";
    SyntaxKind.IfStatement = 139;
    SyntaxKind._map[140] = "VariableStatement";
    SyntaxKind.VariableStatement = 140;
    SyntaxKind._map[141] = "ExpressionStatement";
    SyntaxKind.ExpressionStatement = 141;
    SyntaxKind._map[142] = "ReturnStatement";
    SyntaxKind.ReturnStatement = 142;
    SyntaxKind._map[143] = "SwitchStatement";
    SyntaxKind.SwitchStatement = 143;
    SyntaxKind._map[144] = "BreakStatement";
    SyntaxKind.BreakStatement = 144;
    SyntaxKind._map[145] = "ContinueStatement";
    SyntaxKind.ContinueStatement = 145;
    SyntaxKind._map[146] = "ForStatement";
    SyntaxKind.ForStatement = 146;
    SyntaxKind._map[147] = "ForInStatement";
    SyntaxKind.ForInStatement = 147;
    SyntaxKind._map[148] = "EmptyStatement";
    SyntaxKind.EmptyStatement = 148;
    SyntaxKind._map[149] = "ThrowStatement";
    SyntaxKind.ThrowStatement = 149;
    SyntaxKind._map[150] = "WhileStatement";
    SyntaxKind.WhileStatement = 150;
    SyntaxKind._map[151] = "TryStatement";
    SyntaxKind.TryStatement = 151;
    SyntaxKind._map[152] = "LabeledStatement";
    SyntaxKind.LabeledStatement = 152;
    SyntaxKind._map[153] = "DoStatement";
    SyntaxKind.DoStatement = 153;
    SyntaxKind._map[154] = "DebuggerStatement";
    SyntaxKind.DebuggerStatement = 154;
    SyntaxKind._map[155] = "WithStatement";
    SyntaxKind.WithStatement = 155;
    SyntaxKind._map[156] = "PlusExpression";
    SyntaxKind.PlusExpression = 156;
    SyntaxKind._map[157] = "NegateExpression";
    SyntaxKind.NegateExpression = 157;
    SyntaxKind._map[158] = "BitwiseNotExpression";
    SyntaxKind.BitwiseNotExpression = 158;
    SyntaxKind._map[159] = "LogicalNotExpression";
    SyntaxKind.LogicalNotExpression = 159;
    SyntaxKind._map[160] = "PreIncrementExpression";
    SyntaxKind.PreIncrementExpression = 160;
    SyntaxKind._map[161] = "PreDecrementExpression";
    SyntaxKind.PreDecrementExpression = 161;
    SyntaxKind._map[162] = "DeleteExpression";
    SyntaxKind.DeleteExpression = 162;
    SyntaxKind._map[163] = "TypeOfExpression";
    SyntaxKind.TypeOfExpression = 163;
    SyntaxKind._map[164] = "VoidExpression";
    SyntaxKind.VoidExpression = 164;
    SyntaxKind._map[165] = "BooleanLiteralExpression";
    SyntaxKind.BooleanLiteralExpression = 165;
    SyntaxKind._map[166] = "NullLiteralExpression";
    SyntaxKind.NullLiteralExpression = 166;
    SyntaxKind._map[167] = "NumericLiteralExpression";
    SyntaxKind.NumericLiteralExpression = 167;
    SyntaxKind._map[168] = "RegularExpressionLiteralExpression";
    SyntaxKind.RegularExpressionLiteralExpression = 168;
    SyntaxKind._map[169] = "StringLiteralExpression";
    SyntaxKind.StringLiteralExpression = 169;
    SyntaxKind._map[170] = "CommaExpression";
    SyntaxKind.CommaExpression = 170;
    SyntaxKind._map[171] = "AssignmentExpression";
    SyntaxKind.AssignmentExpression = 171;
    SyntaxKind._map[172] = "AddAssignmentExpression";
    SyntaxKind.AddAssignmentExpression = 172;
    SyntaxKind._map[173] = "SubtractAssignmentExpression";
    SyntaxKind.SubtractAssignmentExpression = 173;
    SyntaxKind._map[174] = "MultiplyAssignmentExpression";
    SyntaxKind.MultiplyAssignmentExpression = 174;
    SyntaxKind._map[175] = "DivideAssignmentExpression";
    SyntaxKind.DivideAssignmentExpression = 175;
    SyntaxKind._map[176] = "ModuloAssignmentExpression";
    SyntaxKind.ModuloAssignmentExpression = 176;
    SyntaxKind._map[177] = "AndAssignmentExpression";
    SyntaxKind.AndAssignmentExpression = 177;
    SyntaxKind._map[178] = "ExclusiveOrAssignmentExpression";
    SyntaxKind.ExclusiveOrAssignmentExpression = 178;
    SyntaxKind._map[179] = "OrAssignmentExpression";
    SyntaxKind.OrAssignmentExpression = 179;
    SyntaxKind._map[180] = "LeftShiftAssignmentExpression";
    SyntaxKind.LeftShiftAssignmentExpression = 180;
    SyntaxKind._map[181] = "SignedRightShiftAssignmentExpression";
    SyntaxKind.SignedRightShiftAssignmentExpression = 181;
    SyntaxKind._map[182] = "UnsignedRightShiftAssignmentExpression";
    SyntaxKind.UnsignedRightShiftAssignmentExpression = 182;
    SyntaxKind._map[183] = "ConditionalExpression";
    SyntaxKind.ConditionalExpression = 183;
    SyntaxKind._map[184] = "LogicalOrExpression";
    SyntaxKind.LogicalOrExpression = 184;
    SyntaxKind._map[185] = "LogicalAndExpression";
    SyntaxKind.LogicalAndExpression = 185;
    SyntaxKind._map[186] = "BitwiseOrExpression";
    SyntaxKind.BitwiseOrExpression = 186;
    SyntaxKind._map[187] = "BitwiseExclusiveOrExpression";
    SyntaxKind.BitwiseExclusiveOrExpression = 187;
    SyntaxKind._map[188] = "BitwiseAndExpression";
    SyntaxKind.BitwiseAndExpression = 188;
    SyntaxKind._map[189] = "EqualsWithTypeConversionExpression";
    SyntaxKind.EqualsWithTypeConversionExpression = 189;
    SyntaxKind._map[190] = "NotEqualsWithTypeConversionExpression";
    SyntaxKind.NotEqualsWithTypeConversionExpression = 190;
    SyntaxKind._map[191] = "EqualsExpression";
    SyntaxKind.EqualsExpression = 191;
    SyntaxKind._map[192] = "NotEqualsExpression";
    SyntaxKind.NotEqualsExpression = 192;
    SyntaxKind._map[193] = "LessThanExpression";
    SyntaxKind.LessThanExpression = 193;
    SyntaxKind._map[194] = "GreaterThanExpression";
    SyntaxKind.GreaterThanExpression = 194;
    SyntaxKind._map[195] = "LessThanOrEqualExpression";
    SyntaxKind.LessThanOrEqualExpression = 195;
    SyntaxKind._map[196] = "GreaterThanOrEqualExpression";
    SyntaxKind.GreaterThanOrEqualExpression = 196;
    SyntaxKind._map[197] = "InstanceOfExpression";
    SyntaxKind.InstanceOfExpression = 197;
    SyntaxKind._map[198] = "InExpression";
    SyntaxKind.InExpression = 198;
    SyntaxKind._map[199] = "LeftShiftExpression";
    SyntaxKind.LeftShiftExpression = 199;
    SyntaxKind._map[200] = "SignedRightShiftExpression";
    SyntaxKind.SignedRightShiftExpression = 200;
    SyntaxKind._map[201] = "UnsignedRightShiftExpression";
    SyntaxKind.UnsignedRightShiftExpression = 201;
    SyntaxKind._map[202] = "MultiplyExpression";
    SyntaxKind.MultiplyExpression = 202;
    SyntaxKind._map[203] = "DivideExpression";
    SyntaxKind.DivideExpression = 203;
    SyntaxKind._map[204] = "ModuloExpression";
    SyntaxKind.ModuloExpression = 204;
    SyntaxKind._map[205] = "AddExpression";
    SyntaxKind.AddExpression = 205;
    SyntaxKind._map[206] = "SubtractExpression";
    SyntaxKind.SubtractExpression = 206;
    SyntaxKind._map[207] = "PostIncrementExpression";
    SyntaxKind.PostIncrementExpression = 207;
    SyntaxKind._map[208] = "PostDecrementExpression";
    SyntaxKind.PostDecrementExpression = 208;
    SyntaxKind._map[209] = "MemberAccessExpression";
    SyntaxKind.MemberAccessExpression = 209;
    SyntaxKind._map[210] = "InvocationExpression";
    SyntaxKind.InvocationExpression = 210;
    SyntaxKind._map[211] = "ThisExpression";
    SyntaxKind.ThisExpression = 211;
    SyntaxKind._map[212] = "ArrayLiteralExpression";
    SyntaxKind.ArrayLiteralExpression = 212;
    SyntaxKind._map[213] = "ObjectLiteralExpression";
    SyntaxKind.ObjectLiteralExpression = 213;
    SyntaxKind._map[214] = "ObjectCreationExpression";
    SyntaxKind.ObjectCreationExpression = 214;
    SyntaxKind._map[215] = "ParenthesizedExpression";
    SyntaxKind.ParenthesizedExpression = 215;
    SyntaxKind._map[216] = "ParenthesizedArrowFunctionExpression";
    SyntaxKind.ParenthesizedArrowFunctionExpression = 216;
    SyntaxKind._map[217] = "SimpleArrowFunctionExpression";
    SyntaxKind.SimpleArrowFunctionExpression = 217;
    SyntaxKind._map[218] = "CastExpression";
    SyntaxKind.CastExpression = 218;
    SyntaxKind._map[219] = "ElementAccessExpression";
    SyntaxKind.ElementAccessExpression = 219;
    SyntaxKind._map[220] = "FunctionExpression";
    SyntaxKind.FunctionExpression = 220;
    SyntaxKind._map[221] = "SuperExpression";
    SyntaxKind.SuperExpression = 221;
    SyntaxKind._map[222] = "OmittedExpression";
    SyntaxKind.OmittedExpression = 222;
    SyntaxKind._map[223] = "VariableDeclaration";
    SyntaxKind.VariableDeclaration = 223;
    SyntaxKind._map[224] = "VariableDeclarator";
    SyntaxKind.VariableDeclarator = 224;
    SyntaxKind._map[225] = "ParameterList";
    SyntaxKind.ParameterList = 225;
    SyntaxKind._map[226] = "ArgumentList";
    SyntaxKind.ArgumentList = 226;
    SyntaxKind._map[227] = "ImplementsClause";
    SyntaxKind.ImplementsClause = 227;
    SyntaxKind._map[228] = "ExtendsClause";
    SyntaxKind.ExtendsClause = 228;
    SyntaxKind._map[229] = "EqualsValueClause";
    SyntaxKind.EqualsValueClause = 229;
    SyntaxKind._map[230] = "CaseSwitchClause";
    SyntaxKind.CaseSwitchClause = 230;
    SyntaxKind._map[231] = "DefaultSwitchClause";
    SyntaxKind.DefaultSwitchClause = 231;
    SyntaxKind._map[232] = "ElseClause";
    SyntaxKind.ElseClause = 232;
    SyntaxKind._map[233] = "CatchClause";
    SyntaxKind.CatchClause = 233;
    SyntaxKind._map[234] = "FinallyClause";
    SyntaxKind.FinallyClause = 234;
    SyntaxKind._map[235] = "PropertySignature";
    SyntaxKind.PropertySignature = 235;
    SyntaxKind._map[236] = "CallSignature";
    SyntaxKind.CallSignature = 236;
    SyntaxKind._map[237] = "ConstructSignature";
    SyntaxKind.ConstructSignature = 237;
    SyntaxKind._map[238] = "IndexSignature";
    SyntaxKind.IndexSignature = 238;
    SyntaxKind._map[239] = "FunctionSignature";
    SyntaxKind.FunctionSignature = 239;
    SyntaxKind._map[240] = "Parameter";
    SyntaxKind.Parameter = 240;
    SyntaxKind._map[241] = "TypeAnnotation";
    SyntaxKind.TypeAnnotation = 241;
    SyntaxKind._map[242] = "SimplePropertyAssignment";
    SyntaxKind.SimplePropertyAssignment = 242;
    SyntaxKind._map[243] = "ExternalModuleReference";
    SyntaxKind.ExternalModuleReference = 243;
    SyntaxKind._map[244] = "ModuleNameModuleReference";
    SyntaxKind.ModuleNameModuleReference = 244;
    SyntaxKind._map[245] = "GetAccessorPropertyAssignment";
    SyntaxKind.GetAccessorPropertyAssignment = 245;
    SyntaxKind._map[246] = "SetAccessorPropertyAssignment";
    SyntaxKind.SetAccessorPropertyAssignment = 246;
    SyntaxKind.FirstStandardKeyword = SyntaxKind.BreakKeyword;
    SyntaxKind.LastStandardKeyword = SyntaxKind.WithKeyword;
    SyntaxKind.FirstFutureReservedKeyword = SyntaxKind.ClassKeyword;
    SyntaxKind.LastFutureReservedKeyword = SyntaxKind.SuperKeyword;
    SyntaxKind.FirstFutureReservedStrictKeyword = SyntaxKind.ImplementsKeyword;
    SyntaxKind.LastFutureReservedStrictKeyword = SyntaxKind.YieldKeyword;
    SyntaxKind.FirstTypeScriptKeyword = SyntaxKind.AnyKeyword;
    SyntaxKind.LastTypeScriptKeyword = SyntaxKind.StringKeyword;
    SyntaxKind.FirstKeyword = SyntaxKind.FirstStandardKeyword;
    SyntaxKind.LastKeyword = SyntaxKind.LastTypeScriptKeyword;
    SyntaxKind.FirstToken = SyntaxKind.IdentifierNameToken;
    SyntaxKind.LastToken = SyntaxKind.EndOfFileToken;
    SyntaxKind.FirstPunctuation = SyntaxKind.OpenBraceToken;
    SyntaxKind.LastPunctuation = SyntaxKind.SlashEqualsToken;
})(SyntaxKind || (SyntaxKind = {}));
var Errors = (function () {
    function Errors() { }
    Errors.argument = function argument(argument, message) {
        return new Error("Invalid argument: " + argument + "." + (message ? (" " + message) : ""));
    }
    Errors.argumentOutOfRange = function argumentOutOfRange(argument) {
        return new Error("Argument out of range: " + argument + ".");
    }
    Errors.argumentNull = function argumentNull(argument) {
        return new Error("Argument null: " + argument + ".");
    }
    Errors.abstract = function abstract() {
        return new Error("Operation not implemented properly by subclass.");
    }
    Errors.notYetImplemented = function notYetImplemented() {
        return new Error("Not yet implemented.");
    }
    Errors.invalidOperation = function invalidOperation(message) {
        return new Error(message ? ("Invalid operation: " + message) : "Invalid operation.");
    }
    return Errors;
})();
var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var SyntaxRealizer = (function (_super) {
    __extends(SyntaxRealizer, _super);
    function SyntaxRealizer() {
        _super.call(this);
    }
    SyntaxRealizer.prototype.visitToken = function (token) {
        return token.realize();
    };
    return SyntaxRealizer;
})(SyntaxRewriter);
var SyntaxTokenReplacer = (function (_super) {
    __extends(SyntaxTokenReplacer, _super);
    function SyntaxTokenReplacer(token1, token2) {
        _super.call(this);
        this.token1 = token1;
        this.token2 = token2;
    }
    SyntaxTokenReplacer.prototype.visitToken = function (token) {
        return token === this.token1 ? this.token2 : token;
    };
    return SyntaxTokenReplacer;
})(SyntaxRewriter);
var SyntaxNode = (function () {
    function SyntaxNode() { }
    SyntaxNode.prototype.isToken = function () {
        return false;
    };
    SyntaxNode.prototype.isNode = function () {
        return true;
    };
    SyntaxNode.prototype.isList = function () {
        return false;
    };
    SyntaxNode.prototype.isSeparatedList = function () {
        return false;
    };
    SyntaxNode.prototype.isTrivia = function () {
        return false;
    };
    SyntaxNode.prototype.isTriviaList = function () {
        return false;
    };
    SyntaxNode.prototype.kind = function () {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.isMissing = function () {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.firstToken = function () {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.lastToken = function () {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.leadingTrivia = function () {
        return this.firstToken().leadingTrivia();
    };
    SyntaxNode.prototype.trailingTrivia = function () {
        return this.lastToken().trailingTrivia();
    };
    SyntaxNode.prototype.toJSON = function (key) {
        var result = {
            kind: (SyntaxKind)._map[this.kind()]
        };
        for(var name in this) {
            var value = this[name];
            if(value && typeof value === 'object') {
                result[name] = value;
            }
        }
        return result;
    };
    SyntaxNode.prototype.accept = function (visitor) {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.realize = function () {
        return this.accept(new SyntaxRealizer());
    };
    SyntaxNode.prototype.collectTextElements = function (elements) {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.fullText = function () {
        var elements = [];
        this.collectTextElements(elements);
        return elements.join("");
    };
    SyntaxNode.prototype.fullWidth = function () {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.replaceToken = function (token1, token2) {
        return this.accept(new SyntaxTokenReplacer(token1, token2));
    };
    SyntaxNode.prototype.withLeadingTrivia = function (trivia) {
        return this.replaceToken(this.firstToken(), this.firstToken().withLeadingTrivia(trivia));
    };
    SyntaxNode.prototype.withTrailingTrivia = function (trivia) {
        return this.replaceToken(this.lastToken(), this.lastToken().withTrailingTrivia(trivia));
    };
    SyntaxNode.prototype.hasTrailingTrivia = function () {
        return this.lastToken().hasTrailingTrivia();
    };
    SyntaxNode.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return SyntaxNode;
})();
var IntegerUtilities = (function () {
    function IntegerUtilities() { }
    IntegerUtilities.integerDivide = function integerDivide(numerator, denominator) {
        return (numerator / denominator) >> 0;
    }
    IntegerUtilities.integerMultiplyLow32Bits = function integerMultiplyLow32Bits(n1, n2) {
        var n1Low16 = n1 & 65535;
        var n1High16 = n1 >>> 16;
        var n2Low16 = n2 & 65535;
        var n2High16 = n2 >>> 16;
        var resultLow32 = (((n1 & 4294901760) * n2) >>> 0) + (((n1 & 65535) * n2) >>> 0) >>> 0;
        return resultLow32;
    }
    IntegerUtilities.integerMultiplyHigh32Bits = function integerMultiplyHigh32Bits(n1, n2) {
        var n1Low16 = n1 & 65535;
        var n1High16 = n1 >>> 16;
        var n2Low16 = n2 & 65535;
        var n2High16 = n2 >>> 16;
        var resultHigh32 = n1High16 * n2High16 + ((((n1Low16 * n2Low16) >>> 17) + n1Low16 * n2High16) >>> 15);
        return resultHigh32;
    }
    return IntegerUtilities;
})();
var Debug = (function () {
    function Debug() { }
    Debug.assert = function assert(expression) {
        if(!expression) {
            throw new Error("Debug Failure. False expression.");
        }
    }
    return Debug;
})();
var SyntaxFacts = (function () {
    function SyntaxFacts() { }
    SyntaxFacts.textToKeywordKind = {
        "any": 58 /* AnyKeyword */ ,
        "bool": 59 /* BoolKeyword */ ,
        "break": 13 /* BreakKeyword */ ,
        "case": 14 /* CaseKeyword */ ,
        "catch": 15 /* CatchKeyword */ ,
        "class": 42 /* ClassKeyword */ ,
        "continue": 16 /* ContinueKeyword */ ,
        "const": 43 /* ConstKeyword */ ,
        "constructor": 60 /* ConstructorKeyword */ ,
        "debugger": 17 /* DebuggerKeyword */ ,
        "declare": 61 /* DeclareKeyword */ ,
        "default": 18 /* DefaultKeyword */ ,
        "delete": 19 /* DeleteKeyword */ ,
        "do": 20 /* DoKeyword */ ,
        "else": 21 /* ElseKeyword */ ,
        "enum": 44 /* EnumKeyword */ ,
        "export": 45 /* ExportKeyword */ ,
        "extends": 46 /* ExtendsKeyword */ ,
        "false": 22 /* FalseKeyword */ ,
        "finally": 23 /* FinallyKeyword */ ,
        "for": 24 /* ForKeyword */ ,
        "function": 25 /* FunctionKeyword */ ,
        "get": 62 /* GetKeyword */ ,
        "if": 26 /* IfKeyword */ ,
        "implements": 49 /* ImplementsKeyword */ ,
        "import": 47 /* ImportKeyword */ ,
        "in": 27 /* InKeyword */ ,
        "instanceof": 28 /* InstanceOfKeyword */ ,
        "interface": 50 /* InterfaceKeyword */ ,
        "let": 51 /* LetKeyword */ ,
        "module": 63 /* ModuleKeyword */ ,
        "new": 29 /* NewKeyword */ ,
        "null": 30 /* NullKeyword */ ,
        "number": 64 /* NumberKeyword */ ,
        "package": 52 /* PackageKeyword */ ,
        "private": 53 /* PrivateKeyword */ ,
        "protected": 54 /* ProtectedKeyword */ ,
        "public": 55 /* PublicKeyword */ ,
        "return": 31 /* ReturnKeyword */ ,
        "set": 65 /* SetKeyword */ ,
        "static": 56 /* StaticKeyword */ ,
        "string": 66 /* StringKeyword */ ,
        "super": 48 /* SuperKeyword */ ,
        "switch": 32 /* SwitchKeyword */ ,
        "this": 33 /* ThisKeyword */ ,
        "throw": 34 /* ThrowKeyword */ ,
        "true": 35 /* TrueKeyword */ ,
        "try": 36 /* TryKeyword */ ,
        "typeof": 37 /* TypeOfKeyword */ ,
        "var": 38 /* VarKeyword */ ,
        "void": 39 /* VoidKeyword */ ,
        "while": 40 /* WhileKeyword */ ,
        "with": 41 /* WithKeyword */ ,
        "yield": 57 /* YieldKeyword */ ,
        "{": 67 /* OpenBraceToken */ ,
        "}": 68 /* CloseBraceToken */ ,
        "(": 69 /* OpenParenToken */ ,
        ")": 70 /* CloseParenToken */ ,
        "[": 71 /* OpenBracketToken */ ,
        "]": 72 /* CloseBracketToken */ ,
        ".": 73 /* DotToken */ ,
        "...": 74 /* DotDotDotToken */ ,
        ";": 75 /* SemicolonToken */ ,
        ",": 76 /* CommaToken */ ,
        "<": 77 /* LessThanToken */ ,
        ">": 78 /* GreaterThanToken */ ,
        "<=": 79 /* LessThanEqualsToken */ ,
        ">=": 80 /* GreaterThanEqualsToken */ ,
        "==": 81 /* EqualsEqualsToken */ ,
        "=>": 82 /* EqualsGreaterThanToken */ ,
        "!=": 83 /* ExclamationEqualsToken */ ,
        "===": 84 /* EqualsEqualsEqualsToken */ ,
        "!==": 85 /* ExclamationEqualsEqualsToken */ ,
        "+": 86 /* PlusToken */ ,
        "-": 87 /* MinusToken */ ,
        "*": 88 /* AsteriskToken */ ,
        "%": 89 /* PercentToken */ ,
        "++": 90 /* PlusPlusToken */ ,
        "--": 91 /* MinusMinusToken */ ,
        "<<": 92 /* LessThanLessThanToken */ ,
        ">>": 93 /* GreaterThanGreaterThanToken */ ,
        ">>>": 94 /* GreaterThanGreaterThanGreaterThanToken */ ,
        "&": 95 /* AmpersandToken */ ,
        "|": 96 /* BarToken */ ,
        "^": 97 /* CaretToken */ ,
        "!": 98 /* ExclamationToken */ ,
        "~": 99 /* TildeToken */ ,
        "&&": 100 /* AmpersandAmpersandToken */ ,
        "||": 101 /* BarBarToken */ ,
        "?": 102 /* QuestionToken */ ,
        ":": 103 /* ColonToken */ ,
        "=": 104 /* EqualsToken */ ,
        "+=": 105 /* PlusEqualsToken */ ,
        "-=": 106 /* MinusEqualsToken */ ,
        "*=": 107 /* AsteriskEqualsToken */ ,
        "%=": 108 /* PercentEqualsToken */ ,
        "<<=": 109 /* LessThanLessThanEqualsToken */ ,
        ">>=": 110 /* GreaterThanGreaterThanEqualsToken */ ,
        ">>>=": 111 /* GreaterThanGreaterThanGreaterThanEqualsToken */ ,
        "&=": 112 /* AmpersandEqualsToken */ ,
        "|=": 113 /* BarEqualsToken */ ,
        "^=": 114 /* CaretEqualsToken */ ,
        "/": 115 /* SlashToken */ ,
        "/=": 116 /* SlashEqualsToken */ 
    };
    SyntaxFacts.kindToText = [];
    SyntaxFacts.initializeStaticData = function initializeStaticData() {
        if(SyntaxFacts.kindToText.length === 0) {
            for(var name in SyntaxFacts.textToKeywordKind) {
                if(SyntaxFacts.textToKeywordKind.hasOwnProperty(name)) {
                    Debug.assert(SyntaxFacts.kindToText[SyntaxFacts.textToKeywordKind[name]] === undefined);
                    SyntaxFacts.kindToText[SyntaxFacts.textToKeywordKind[name]] = name;
                }
            }
            SyntaxFacts.kindToText[60 /* ConstructorKeyword */ ] = "constructor";
        }
    }
    SyntaxFacts.getTokenKind = function getTokenKind(text) {
        if(SyntaxFacts.textToKeywordKind.hasOwnProperty(text)) {
            return SyntaxFacts.textToKeywordKind[text];
        }
        return 0 /* None */ ;
    }
    SyntaxFacts.getText = function getText(kind) {
        SyntaxFacts.initializeStaticData();
        var result = SyntaxFacts.kindToText[kind];
        return result !== undefined ? result : null;
    }
    SyntaxFacts.isTokenKind = function isTokenKind(kind) {
        return kind >= SyntaxKind.FirstToken && kind <= SyntaxKind.LastToken;
    }
    SyntaxFacts.isAnyKeyword = function isAnyKeyword(kind) {
        return kind >= SyntaxKind.FirstKeyword && kind <= SyntaxKind.LastKeyword;
    }
    SyntaxFacts.isStandardKeyword = function isStandardKeyword(kind) {
        return kind >= SyntaxKind.FirstStandardKeyword && kind <= SyntaxKind.LastStandardKeyword;
    }
    SyntaxFacts.isFutureReservedKeyword = function isFutureReservedKeyword(kind) {
        return kind >= SyntaxKind.FirstFutureReservedKeyword && kind <= SyntaxKind.LastFutureReservedKeyword;
    }
    SyntaxFacts.isFutureReservedStrictKeyword = function isFutureReservedStrictKeyword(kind) {
        return kind >= SyntaxKind.FirstFutureReservedStrictKeyword && kind <= SyntaxKind.LastFutureReservedStrictKeyword;
    }
    SyntaxFacts.isAnyPunctuation = function isAnyPunctuation(kind) {
        return kind >= SyntaxKind.FirstPunctuation && kind <= SyntaxKind.LastPunctuation;
    }
    SyntaxFacts.isPrefixUnaryExpressionOperatorToken = function isPrefixUnaryExpressionOperatorToken(tokenKind) {
        return SyntaxFacts.getPrefixUnaryExpression(tokenKind) !== 0 /* None */ ;
    }
    SyntaxFacts.getPrefixUnaryExpression = function getPrefixUnaryExpression(tokenKind) {
        switch(tokenKind) {
            case 86 /* PlusToken */ : {
                return 156 /* PlusExpression */ ;

            }
            case 87 /* MinusToken */ : {
                return 157 /* NegateExpression */ ;

            }
            case 99 /* TildeToken */ : {
                return 158 /* BitwiseNotExpression */ ;

            }
            case 98 /* ExclamationToken */ : {
                return 159 /* LogicalNotExpression */ ;

            }
            case 90 /* PlusPlusToken */ : {
                return 160 /* PreIncrementExpression */ ;

            }
            case 91 /* MinusMinusToken */ : {
                return 161 /* PreDecrementExpression */ ;

            }
            case 19 /* DeleteKeyword */ : {
                return 162 /* DeleteExpression */ ;

            }
            case 37 /* TypeOfKeyword */ : {
                return 163 /* TypeOfExpression */ ;

            }
            case 39 /* VoidKeyword */ : {
                return 164 /* VoidExpression */ ;

            }
            default: {
                return 0 /* None */ ;

            }
        }
    }
    SyntaxFacts.getPostfixUnaryExpressionFromOperatorToken = function getPostfixUnaryExpressionFromOperatorToken(tokenKind) {
        switch(tokenKind) {
            case 90 /* PlusPlusToken */ : {
                return 207 /* PostIncrementExpression */ ;

            }
            case 91 /* MinusMinusToken */ : {
                return 208 /* PostDecrementExpression */ ;

            }
            default: {
                return 0 /* None */ ;

            }
        }
    }
    SyntaxFacts.isBinaryExpressionOperatorToken = function isBinaryExpressionOperatorToken(tokenKind) {
        return SyntaxFacts.getBinaryExpressionFromOperatorToken(tokenKind) !== 0 /* None */ ;
    }
    SyntaxFacts.getBinaryExpressionFromOperatorToken = function getBinaryExpressionFromOperatorToken(tokenKind) {
        switch(tokenKind) {
            case 88 /* AsteriskToken */ : {
                return 202 /* MultiplyExpression */ ;

            }
            case 115 /* SlashToken */ : {
                return 203 /* DivideExpression */ ;

            }
            case 89 /* PercentToken */ : {
                return 204 /* ModuloExpression */ ;

            }
            case 86 /* PlusToken */ : {
                return 205 /* AddExpression */ ;

            }
            case 87 /* MinusToken */ : {
                return 206 /* SubtractExpression */ ;

            }
            case 92 /* LessThanLessThanToken */ : {
                return 199 /* LeftShiftExpression */ ;

            }
            case 93 /* GreaterThanGreaterThanToken */ : {
                return 200 /* SignedRightShiftExpression */ ;

            }
            case 94 /* GreaterThanGreaterThanGreaterThanToken */ : {
                return 201 /* UnsignedRightShiftExpression */ ;

            }
            case 77 /* LessThanToken */ : {
                return 193 /* LessThanExpression */ ;

            }
            case 78 /* GreaterThanToken */ : {
                return 194 /* GreaterThanExpression */ ;

            }
            case 79 /* LessThanEqualsToken */ : {
                return 195 /* LessThanOrEqualExpression */ ;

            }
            case 80 /* GreaterThanEqualsToken */ : {
                return 196 /* GreaterThanOrEqualExpression */ ;

            }
            case 28 /* InstanceOfKeyword */ : {
                return 197 /* InstanceOfExpression */ ;

            }
            case 27 /* InKeyword */ : {
                return 198 /* InExpression */ ;

            }
            case 81 /* EqualsEqualsToken */ : {
                return 189 /* EqualsWithTypeConversionExpression */ ;

            }
            case 83 /* ExclamationEqualsToken */ : {
                return 190 /* NotEqualsWithTypeConversionExpression */ ;

            }
            case 84 /* EqualsEqualsEqualsToken */ : {
                return 191 /* EqualsExpression */ ;

            }
            case 85 /* ExclamationEqualsEqualsToken */ : {
                return 192 /* NotEqualsExpression */ ;

            }
            case 95 /* AmpersandToken */ : {
                return 188 /* BitwiseAndExpression */ ;

            }
            case 97 /* CaretToken */ : {
                return 187 /* BitwiseExclusiveOrExpression */ ;

            }
            case 96 /* BarToken */ : {
                return 186 /* BitwiseOrExpression */ ;

            }
            case 100 /* AmpersandAmpersandToken */ : {
                return 185 /* LogicalAndExpression */ ;

            }
            case 101 /* BarBarToken */ : {
                return 184 /* LogicalOrExpression */ ;

            }
            case 113 /* BarEqualsToken */ : {
                return 179 /* OrAssignmentExpression */ ;

            }
            case 112 /* AmpersandEqualsToken */ : {
                return 177 /* AndAssignmentExpression */ ;

            }
            case 114 /* CaretEqualsToken */ : {
                return 178 /* ExclusiveOrAssignmentExpression */ ;

            }
            case 109 /* LessThanLessThanEqualsToken */ : {
                return 180 /* LeftShiftAssignmentExpression */ ;

            }
            case 110 /* GreaterThanGreaterThanEqualsToken */ : {
                return 181 /* SignedRightShiftAssignmentExpression */ ;

            }
            case 111 /* GreaterThanGreaterThanGreaterThanEqualsToken */ : {
                return 182 /* UnsignedRightShiftAssignmentExpression */ ;

            }
            case 105 /* PlusEqualsToken */ : {
                return 172 /* AddAssignmentExpression */ ;

            }
            case 106 /* MinusEqualsToken */ : {
                return 173 /* SubtractAssignmentExpression */ ;

            }
            case 107 /* AsteriskEqualsToken */ : {
                return 174 /* MultiplyAssignmentExpression */ ;

            }
            case 116 /* SlashEqualsToken */ : {
                return 175 /* DivideAssignmentExpression */ ;

            }
            case 108 /* PercentEqualsToken */ : {
                return 176 /* ModuloAssignmentExpression */ ;

            }
            case 104 /* EqualsToken */ : {
                return 171 /* AssignmentExpression */ ;

            }
            case 76 /* CommaToken */ : {
                return 170 /* CommaExpression */ ;

            }
            default: {
                return 0 /* None */ ;

            }
        }
    }
    return SyntaxFacts;
})();
var Syntax;
(function (Syntax) {
    function collectSeparatedListTextElements(elements, list) {
        for(var i = 0, n = list.count(); i < n; i++) {
            list.itemAt(i).collectTextElements(elements);
        }
    }
    var EmptySeparatedSyntaxList = (function () {
        function EmptySeparatedSyntaxList() { }
        EmptySeparatedSyntaxList.prototype.isToken = function () {
            return false;
        };
        EmptySeparatedSyntaxList.prototype.isNode = function () {
            return false;
        };
        EmptySeparatedSyntaxList.prototype.isList = function () {
            return false;
        };
        EmptySeparatedSyntaxList.prototype.isSeparatedList = function () {
            return true;
        };
        EmptySeparatedSyntaxList.prototype.isTrivia = function () {
            return false;
        };
        EmptySeparatedSyntaxList.prototype.isTriviaList = function () {
            return false;
        };
        EmptySeparatedSyntaxList.prototype.kind = function () {
            return 2 /* SeparatedList */ ;
        };
        EmptySeparatedSyntaxList.prototype.isMissing = function () {
            return true;
        };
        EmptySeparatedSyntaxList.prototype.toJSON = function (key) {
            return [];
        };
        EmptySeparatedSyntaxList.prototype.count = function () {
            return 0;
        };
        EmptySeparatedSyntaxList.prototype.syntaxNodeCount = function () {
            return 0;
        };
        EmptySeparatedSyntaxList.prototype.separatorCount = function () {
            return 0;
        };
        EmptySeparatedSyntaxList.prototype.itemAt = function (index) {
            throw Errors.argumentOutOfRange("index");
        };
        EmptySeparatedSyntaxList.prototype.syntaxNodeAt = function (index) {
            throw Errors.argumentOutOfRange("index");
        };
        EmptySeparatedSyntaxList.prototype.separatorAt = function (index) {
            throw Errors.argumentOutOfRange("index");
        };
        EmptySeparatedSyntaxList.prototype.collectTextElements = function (elements) {
            return collectSeparatedListTextElements(elements, this);
        };
        EmptySeparatedSyntaxList.prototype.firstToken = function () {
            return null;
        };
        EmptySeparatedSyntaxList.prototype.lastToken = function () {
            return null;
        };
        EmptySeparatedSyntaxList.prototype.fullWidth = function () {
            return 0;
        };
        EmptySeparatedSyntaxList.prototype.fullText = function () {
            return "";
        };
        EmptySeparatedSyntaxList.prototype.toArray = function () {
            return [];
        };
        EmptySeparatedSyntaxList.prototype.toSyntaxNodeArray = function () {
            return [];
        };
        EmptySeparatedSyntaxList.prototype.isTypeScriptSpecific = function () {
            return false;
        };
        return EmptySeparatedSyntaxList;
    })();    
    var SingletonSeparatedSyntaxList = (function () {
        function SingletonSeparatedSyntaxList(item) {
            this.item = item;
        }
        SingletonSeparatedSyntaxList.prototype.toJSON = function (key) {
            return [
                this.item
            ];
        };
        SingletonSeparatedSyntaxList.prototype.isToken = function () {
            return false;
        };
        SingletonSeparatedSyntaxList.prototype.isNode = function () {
            return false;
        };
        SingletonSeparatedSyntaxList.prototype.isList = function () {
            return false;
        };
        SingletonSeparatedSyntaxList.prototype.isSeparatedList = function () {
            return true;
        };
        SingletonSeparatedSyntaxList.prototype.isTrivia = function () {
            return false;
        };
        SingletonSeparatedSyntaxList.prototype.isTriviaList = function () {
            return false;
        };
        SingletonSeparatedSyntaxList.prototype.kind = function () {
            return 2 /* SeparatedList */ ;
        };
        SingletonSeparatedSyntaxList.prototype.isMissing = function () {
            return this.item.isMissing();
        };
        SingletonSeparatedSyntaxList.prototype.count = function () {
            return 1;
        };
        SingletonSeparatedSyntaxList.prototype.syntaxNodeCount = function () {
            return 1;
        };
        SingletonSeparatedSyntaxList.prototype.separatorCount = function () {
            return 0;
        };
        SingletonSeparatedSyntaxList.prototype.itemAt = function (index) {
            if(index !== 0) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.item;
        };
        SingletonSeparatedSyntaxList.prototype.syntaxNodeAt = function (index) {
            if(index !== 0) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.item;
        };
        SingletonSeparatedSyntaxList.prototype.separatorAt = function (index) {
            throw Errors.argumentOutOfRange("index");
        };
        SingletonSeparatedSyntaxList.prototype.collectTextElements = function (elements) {
            return collectSeparatedListTextElements(elements, this);
        };
        SingletonSeparatedSyntaxList.prototype.firstToken = function () {
            return this.item.firstToken();
        };
        SingletonSeparatedSyntaxList.prototype.lastToken = function () {
            return this.item.lastToken();
        };
        SingletonSeparatedSyntaxList.prototype.fullWidth = function () {
            return this.item.fullWidth();
        };
        SingletonSeparatedSyntaxList.prototype.fullText = function () {
            return this.item.fullText();
        };
        SingletonSeparatedSyntaxList.prototype.toArray = function () {
            return [
                this.item
            ];
        };
        SingletonSeparatedSyntaxList.prototype.toSyntaxNodeArray = function () {
            return [
                this.item
            ];
        };
        SingletonSeparatedSyntaxList.prototype.isTypeScriptSpecific = function () {
            return this.item.isTypeScriptSpecific();
        };
        return SingletonSeparatedSyntaxList;
    })();    
    var NormalSeparatedSyntaxList = (function () {
        function NormalSeparatedSyntaxList(elements) {
            this.elements = elements;
        }
        NormalSeparatedSyntaxList.prototype.isToken = function () {
            return false;
        };
        NormalSeparatedSyntaxList.prototype.isNode = function () {
            return false;
        };
        NormalSeparatedSyntaxList.prototype.isList = function () {
            return false;
        };
        NormalSeparatedSyntaxList.prototype.isSeparatedList = function () {
            return true;
        };
        NormalSeparatedSyntaxList.prototype.isTrivia = function () {
            return false;
        };
        NormalSeparatedSyntaxList.prototype.isTriviaList = function () {
            return false;
        };
        NormalSeparatedSyntaxList.prototype.kind = function () {
            return 2 /* SeparatedList */ ;
        };
        NormalSeparatedSyntaxList.prototype.toJSON = function (key) {
            return this.elements;
        };
        NormalSeparatedSyntaxList.prototype.isMissing = function () {
            for(var i = 0, n = this.elements.length; i < n; i++) {
                if(!this.elements[i].isMissing()) {
                    return false;
                }
            }
            return true;
        };
        NormalSeparatedSyntaxList.prototype.count = function () {
            return this.elements.length;
        };
        NormalSeparatedSyntaxList.prototype.syntaxNodeCount = function () {
            return IntegerUtilities.integerDivide(this.elements.length + 1, 2);
        };
        NormalSeparatedSyntaxList.prototype.separatorCount = function () {
            return IntegerUtilities.integerDivide(this.elements.length, 2);
        };
        NormalSeparatedSyntaxList.prototype.itemAt = function (index) {
            if(index < 0 || index >= this.elements.length) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.elements[index];
        };
        NormalSeparatedSyntaxList.prototype.syntaxNodeAt = function (index) {
            var value = index * 2;
            if(value < 0 || value >= this.elements.length) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.elements[value];
        };
        NormalSeparatedSyntaxList.prototype.separatorAt = function (index) {
            var value = index * 2 + 1;
            if(value < 0 || value >= this.elements.length) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.elements[value];
        };
        NormalSeparatedSyntaxList.prototype.collectTextElements = function (elements) {
            return collectSeparatedListTextElements(elements, this);
        };
        NormalSeparatedSyntaxList.prototype.firstToken = function () {
            var token;
            for(var i = 0, n = this.elements.length; i < n; i++) {
                if(i % 2 === 0) {
                    var node = this.elements[i];
                    token = node.firstToken();
                    if(token !== null) {
                        return token;
                    }
                } else {
                    token = this.elements[i];
                    if(token.width() > 0) {
                        return token;
                    }
                }
            }
            return null;
        };
        NormalSeparatedSyntaxList.prototype.lastToken = function () {
            var token;
            for(var i = this.elements.length - 1; i >= 0; i--) {
                if(i % 2 === 0) {
                    var node = this.elements[i];
                    token = node.lastToken();
                    if(token !== null) {
                        return token;
                    }
                } else {
                    token = this.elements[i];
                    if(token.width() > 0) {
                        return token;
                    }
                }
            }
            return null;
        };
        NormalSeparatedSyntaxList.prototype.fullWidth = function () {
            var width = 0;
            for(var i = 0, n = this.elements.length; i < n; i++) {
                width += this.elements[i].fullWidth();
            }
            return width;
        };
        NormalSeparatedSyntaxList.prototype.fullText = function () {
            var elements = [];
            this.collectTextElements(elements);
            return elements.join("");
        };
        NormalSeparatedSyntaxList.prototype.toArray = function () {
            return this.elements.slice(0);
        };
        NormalSeparatedSyntaxList.prototype.toSyntaxNodeArray = function () {
            var result = [];
            for(var i = 0, n = this.syntaxNodeCount(); i < n; i++) {
                result.push(this.syntaxNodeAt(i));
            }
            return result;
        };
        NormalSeparatedSyntaxList.prototype.isTypeScriptSpecific = function () {
            for(var i = 0, n = this.syntaxNodeCount(); i < n; i++) {
                if(this.syntaxNodeAt(i).isTypeScriptSpecific()) {
                    return true;
                }
            }
            return false;
        };
        return NormalSeparatedSyntaxList;
    })();    
    function separatedList(nodes) {
        return separatedListAndValidate(nodes, false);
    }
    Syntax.separatedList = separatedList;
    function separatedListAndValidate(nodes, validate) {
        if(nodes === undefined || nodes === null || nodes.length === 0) {
            return Syntax.emptySeparatedList;
        }
        if(validate) {
            for(var i = 0; i < nodes.length; i++) {
                var item = nodes[i];
                if(i % 2 === 0) {
                    Debug.assert(!SyntaxFacts.isTokenKind(item.kind()));
                } else {
                    Debug.assert(SyntaxFacts.isTokenKind(item.kind()));
                }
            }
        }
        if(nodes.length === 1) {
            Debug.assert(nodes[0].isNode());
            return new SingletonSeparatedSyntaxList(nodes[0]);
        }
        return new NormalSeparatedSyntaxList(nodes);
    }
    Syntax.separatedListAndValidate = separatedListAndValidate;
    Syntax.emptySeparatedList = new EmptySeparatedSyntaxList();
})(Syntax || (Syntax = {}));
var Syntax;
(function (Syntax) {
    function collectSyntaxListTextElements(elements, list) {
        for(var i = 0, n = list.count(); i < n; i++) {
            list.syntaxNodeAt(i).collectTextElements(elements);
        }
    }
    var EmptySyntaxList = (function () {
        function EmptySyntaxList() { }
        EmptySyntaxList.prototype.isToken = function () {
            return false;
        };
        EmptySyntaxList.prototype.isNode = function () {
            return false;
        };
        EmptySyntaxList.prototype.isList = function () {
            return true;
        };
        EmptySyntaxList.prototype.isSeparatedList = function () {
            return false;
        };
        EmptySyntaxList.prototype.isTrivia = function () {
            return false;
        };
        EmptySyntaxList.prototype.isTriviaList = function () {
            return false;
        };
        EmptySyntaxList.prototype.kind = function () {
            return 1 /* List */ ;
        };
        EmptySyntaxList.prototype.toJSON = function (key) {
            return [];
        };
        EmptySyntaxList.prototype.count = function () {
            return 0;
        };
        EmptySyntaxList.prototype.isMissing = function () {
            return true;
        };
        EmptySyntaxList.prototype.syntaxNodeAt = function (index) {
            throw Errors.argumentOutOfRange("index");
        };
        EmptySyntaxList.prototype.collectTextElements = function (elements) {
            return collectSyntaxListTextElements(elements, this);
        };
        EmptySyntaxList.prototype.toArray = function () {
            return [];
        };
        EmptySyntaxList.prototype.firstToken = function () {
            return null;
        };
        EmptySyntaxList.prototype.lastToken = function () {
            return null;
        };
        EmptySyntaxList.prototype.fullWidth = function () {
            return 0;
        };
        EmptySyntaxList.prototype.fullText = function () {
            return "";
        };
        EmptySyntaxList.prototype.isTypeScriptSpecific = function () {
            return false;
        };
        return EmptySyntaxList;
    })();    
    Syntax.emptyList = new EmptySyntaxList();
    var SingletonSyntaxList = (function () {
        function SingletonSyntaxList(item) {
            this._item = item;
        }
        SingletonSyntaxList.prototype.isToken = function () {
            return false;
        };
        SingletonSyntaxList.prototype.isNode = function () {
            return false;
        };
        SingletonSyntaxList.prototype.isList = function () {
            return true;
        };
        SingletonSyntaxList.prototype.isSeparatedList = function () {
            return false;
        };
        SingletonSyntaxList.prototype.isTrivia = function () {
            return false;
        };
        SingletonSyntaxList.prototype.isTriviaList = function () {
            return false;
        };
        SingletonSyntaxList.prototype.kind = function () {
            return 1 /* List */ ;
        };
        SingletonSyntaxList.prototype.isMissing = function () {
            return this._item.isMissing();
        };
        SingletonSyntaxList.prototype.toJSON = function (key) {
            return [
                this._item
            ];
        };
        SingletonSyntaxList.prototype.count = function () {
            return 1;
        };
        SingletonSyntaxList.prototype.syntaxNodeAt = function (index) {
            if(index !== 0) {
                throw Errors.argumentOutOfRange("index");
            }
            return this._item;
        };
        SingletonSyntaxList.prototype.collectTextElements = function (elements) {
            return collectSyntaxListTextElements(elements, this);
        };
        SingletonSyntaxList.prototype.toArray = function () {
            return [
                this._item
            ];
        };
        SingletonSyntaxList.prototype.firstToken = function () {
            return this._item.firstToken();
        };
        SingletonSyntaxList.prototype.lastToken = function () {
            return this._item.lastToken();
        };
        SingletonSyntaxList.prototype.fullWidth = function () {
            return this._item.fullWidth();
        };
        SingletonSyntaxList.prototype.fullText = function () {
            return this._item.fullText();
        };
        SingletonSyntaxList.prototype.isTypeScriptSpecific = function () {
            return this._item.isTypeScriptSpecific();
        };
        return SingletonSyntaxList;
    })();    
    var NormalSyntaxList = (function () {
        function NormalSyntaxList(nodes) {
            this.nodes = nodes;
        }
        NormalSyntaxList.prototype.isToken = function () {
            return false;
        };
        NormalSyntaxList.prototype.isNode = function () {
            return false;
        };
        NormalSyntaxList.prototype.isList = function () {
            return true;
        };
        NormalSyntaxList.prototype.isSeparatedList = function () {
            return false;
        };
        NormalSyntaxList.prototype.isTrivia = function () {
            return false;
        };
        NormalSyntaxList.prototype.isTriviaList = function () {
            return false;
        };
        NormalSyntaxList.prototype.kind = function () {
            return 1 /* List */ ;
        };
        NormalSyntaxList.prototype.isMissing = function () {
            for(var i = 0, n = this.nodes.length; i < n; i++) {
                if(!this.nodes[i].isMissing()) {
                    return false;
                }
            }
            return true;
        };
        NormalSyntaxList.prototype.toJSON = function (key) {
            return this.nodes;
        };
        NormalSyntaxList.prototype.count = function () {
            return this.nodes.length;
        };
        NormalSyntaxList.prototype.syntaxNodeAt = function (index) {
            if(index < 0 || index >= this.nodes.length) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.nodes[index];
        };
        NormalSyntaxList.prototype.collectTextElements = function (elements) {
            return collectSyntaxListTextElements(elements, this);
        };
        NormalSyntaxList.prototype.toArray = function () {
            return this.nodes.slice(0);
        };
        NormalSyntaxList.prototype.firstToken = function () {
            for(var i = 0, n = this.nodes.length; i < n; i++) {
                var token = this.nodes[i].firstToken();
                if(token !== null) {
                    return token;
                }
            }
            return null;
        };
        NormalSyntaxList.prototype.lastToken = function () {
            for(var i = this.nodes.length - 1; i >= 0; i--) {
                var token = this.nodes[i].lastToken();
                if(token !== null) {
                    return token;
                }
            }
            return null;
        };
        NormalSyntaxList.prototype.fullText = function () {
            var elements = [];
            this.collectTextElements(elements);
            return elements.join("");
        };
        NormalSyntaxList.prototype.fullWidth = function () {
            var width = 0;
            for(var i = 0, n = this.nodes.length; i < n; i++) {
                width += this.nodes[i].fullWidth();
            }
            return width;
        };
        NormalSyntaxList.prototype.isTypeScriptSpecific = function () {
            for(var i = 0, n = this.nodes.length; i < n; i++) {
                if(this.nodes[i].isTypeScriptSpecific()) {
                    return true;
                }
            }
            return false;
        };
        return NormalSyntaxList;
    })();    
    function list(nodes) {
        if(nodes === undefined || nodes === null || nodes.length === 0) {
            return Syntax.emptyList;
        }
        if(nodes.length === 1) {
            var item = nodes[0];
            return new SingletonSyntaxList(item);
        }
        return new NormalSyntaxList(nodes);
    }
    Syntax.list = list;
})(Syntax || (Syntax = {}));
var SourceUnitSyntax = (function (_super) {
    __extends(SourceUnitSyntax, _super);
    function SourceUnitSyntax(moduleElements, endOfFileToken) {
        _super.call(this);
        if(moduleElements === null) {
            throw Errors.argumentNull('moduleElements');
        }
        if(endOfFileToken.kind() !== 118 /* EndOfFileToken */ ) {
            throw Errors.argument('endOfFileToken');
        }
        this._moduleElements = moduleElements;
        this._endOfFileToken = endOfFileToken;
    }
    SourceUnitSyntax.create = function create(endOfFileToken) {
        return new SourceUnitSyntax(Syntax.emptyList, endOfFileToken);
    }
    SourceUnitSyntax.create1 = function create1(endOfFileToken) {
        return new SourceUnitSyntax(Syntax.emptyList, endOfFileToken);
    }
    SourceUnitSyntax.prototype.accept = function (visitor) {
        return visitor.visitSourceUnit(this);
    };
    SourceUnitSyntax.prototype.kind = function () {
        return 119 /* SourceUnit */ ;
    };
    SourceUnitSyntax.prototype.isMissing = function () {
        if(!this._moduleElements.isMissing()) {
            return false;
        }
        if(!this._endOfFileToken.isMissing()) {
            return false;
        }
        return true;
    };
    SourceUnitSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._moduleElements.firstToken()) !== null) {
            return token;
        }
        return this._endOfFileToken;
    };
    SourceUnitSyntax.prototype.lastToken = function () {
        return this._endOfFileToken;
    };
    SourceUnitSyntax.prototype.moduleElements = function () {
        return this._moduleElements;
    };
    SourceUnitSyntax.prototype.endOfFileToken = function () {
        return this._endOfFileToken;
    };
    SourceUnitSyntax.prototype.update = function (moduleElements, endOfFileToken) {
        if(this._moduleElements === moduleElements && this._endOfFileToken === endOfFileToken) {
            return this;
        }
        return new SourceUnitSyntax(moduleElements, endOfFileToken);
    };
    SourceUnitSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    SourceUnitSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    SourceUnitSyntax.prototype.withModuleElements = function (moduleElements) {
        return this.update(moduleElements, this._endOfFileToken);
    };
    SourceUnitSyntax.prototype.withModuleElement = function (moduleElement) {
        return this.withModuleElements(Syntax.list([
            moduleElement
        ]));
    };
    SourceUnitSyntax.prototype.withEndOfFileToken = function (endOfFileToken) {
        return this.update(this._moduleElements, endOfFileToken);
    };
    SourceUnitSyntax.prototype.collectTextElements = function (elements) {
        this._moduleElements.collectTextElements(elements);
        this._endOfFileToken.collectTextElements(elements);
    };
    SourceUnitSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._moduleElements.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return SourceUnitSyntax;
})(SyntaxNode);
var ModuleElementSyntax = (function (_super) {
    __extends(ModuleElementSyntax, _super);
    function ModuleElementSyntax() {
        _super.call(this);
    }
    ModuleElementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ModuleElementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ModuleElementSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return ModuleElementSyntax;
})(SyntaxNode);
var ModuleReferenceSyntax = (function (_super) {
    __extends(ModuleReferenceSyntax, _super);
    function ModuleReferenceSyntax() {
        _super.call(this);
    }
    ModuleReferenceSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ModuleReferenceSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ModuleReferenceSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ModuleReferenceSyntax;
})(SyntaxNode);
var ExternalModuleReferenceSyntax = (function (_super) {
    __extends(ExternalModuleReferenceSyntax, _super);
    function ExternalModuleReferenceSyntax(moduleKeyword, openParenToken, stringLiteral, closeParenToken) {
        _super.call(this);
        if(moduleKeyword.keywordKind() !== 63 /* ModuleKeyword */ ) {
            throw Errors.argument('moduleKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(stringLiteral.kind() !== 12 /* StringLiteral */ ) {
            throw Errors.argument('stringLiteral');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._moduleKeyword = moduleKeyword;
        this._openParenToken = openParenToken;
        this._stringLiteral = stringLiteral;
        this._closeParenToken = closeParenToken;
    }
    ExternalModuleReferenceSyntax.create1 = function create1(stringLiteral) {
        return new ExternalModuleReferenceSyntax(Syntax.token(63 /* ModuleKeyword */ ), Syntax.token(69 /* OpenParenToken */ ), stringLiteral, Syntax.token(70 /* CloseParenToken */ ));
    }
    ExternalModuleReferenceSyntax.prototype.accept = function (visitor) {
        return visitor.visitExternalModuleReference(this);
    };
    ExternalModuleReferenceSyntax.prototype.kind = function () {
        return 243 /* ExternalModuleReference */ ;
    };
    ExternalModuleReferenceSyntax.prototype.isMissing = function () {
        if(!this._moduleKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._stringLiteral.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        return true;
    };
    ExternalModuleReferenceSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._moduleKeyword.width() > 0) {
            return this._moduleKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._stringLiteral.width() > 0) {
            return this._stringLiteral;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        return null;
    };
    ExternalModuleReferenceSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._stringLiteral.width() > 0) {
            return this._stringLiteral;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._moduleKeyword.width() > 0) {
            return this._moduleKeyword;
        }
        return null;
    };
    ExternalModuleReferenceSyntax.prototype.moduleKeyword = function () {
        return this._moduleKeyword;
    };
    ExternalModuleReferenceSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    ExternalModuleReferenceSyntax.prototype.stringLiteral = function () {
        return this._stringLiteral;
    };
    ExternalModuleReferenceSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    ExternalModuleReferenceSyntax.prototype.update = function (moduleKeyword, openParenToken, stringLiteral, closeParenToken) {
        if(this._moduleKeyword === moduleKeyword && this._openParenToken === openParenToken && this._stringLiteral === stringLiteral && this._closeParenToken === closeParenToken) {
            return this;
        }
        return new ExternalModuleReferenceSyntax(moduleKeyword, openParenToken, stringLiteral, closeParenToken);
    };
    ExternalModuleReferenceSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ExternalModuleReferenceSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ExternalModuleReferenceSyntax.prototype.withModuleKeyword = function (moduleKeyword) {
        return this.update(moduleKeyword, this._openParenToken, this._stringLiteral, this._closeParenToken);
    };
    ExternalModuleReferenceSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._moduleKeyword, openParenToken, this._stringLiteral, this._closeParenToken);
    };
    ExternalModuleReferenceSyntax.prototype.withStringLiteral = function (stringLiteral) {
        return this.update(this._moduleKeyword, this._openParenToken, stringLiteral, this._closeParenToken);
    };
    ExternalModuleReferenceSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._moduleKeyword, this._openParenToken, this._stringLiteral, closeParenToken);
    };
    ExternalModuleReferenceSyntax.prototype.collectTextElements = function (elements) {
        this._moduleKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._stringLiteral.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
    };
    ExternalModuleReferenceSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ExternalModuleReferenceSyntax;
})(ModuleReferenceSyntax);
var ModuleNameModuleReferenceSyntax = (function (_super) {
    __extends(ModuleNameModuleReferenceSyntax, _super);
    function ModuleNameModuleReferenceSyntax(moduleName) {
        _super.call(this);
        if(moduleName === null) {
            throw Errors.argumentNull('moduleName');
        }
        this._moduleName = moduleName;
    }
    ModuleNameModuleReferenceSyntax.prototype.accept = function (visitor) {
        return visitor.visitModuleNameModuleReference(this);
    };
    ModuleNameModuleReferenceSyntax.prototype.kind = function () {
        return 244 /* ModuleNameModuleReference */ ;
    };
    ModuleNameModuleReferenceSyntax.prototype.isMissing = function () {
        if(!this._moduleName.isMissing()) {
            return false;
        }
        return true;
    };
    ModuleNameModuleReferenceSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._moduleName.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ModuleNameModuleReferenceSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._moduleName.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    ModuleNameModuleReferenceSyntax.prototype.moduleName = function () {
        return this._moduleName;
    };
    ModuleNameModuleReferenceSyntax.prototype.update = function (moduleName) {
        if(this._moduleName === moduleName) {
            return this;
        }
        return new ModuleNameModuleReferenceSyntax(moduleName);
    };
    ModuleNameModuleReferenceSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ModuleNameModuleReferenceSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ModuleNameModuleReferenceSyntax.prototype.withModuleName = function (moduleName) {
        return this.update(moduleName);
    };
    ModuleNameModuleReferenceSyntax.prototype.collectTextElements = function (elements) {
        this._moduleName.collectTextElements(elements);
    };
    ModuleNameModuleReferenceSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ModuleNameModuleReferenceSyntax;
})(ModuleReferenceSyntax);
var ImportDeclarationSyntax = (function (_super) {
    __extends(ImportDeclarationSyntax, _super);
    function ImportDeclarationSyntax(importKeyword, identifier, equalsToken, moduleReference, semicolonToken) {
        _super.call(this);
        if(moduleReference === null) {
            throw Errors.argumentNull('moduleReference');
        }
        if(importKeyword.keywordKind() !== 47 /* ImportKeyword */ ) {
            throw Errors.argument('importKeyword');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(equalsToken.kind() !== 104 /* EqualsToken */ ) {
            throw Errors.argument('equalsToken');
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._importKeyword = importKeyword;
        this._identifier = identifier;
        this._equalsToken = equalsToken;
        this._moduleReference = moduleReference;
        this._semicolonToken = semicolonToken;
    }
    ImportDeclarationSyntax.create1 = function create1(identifier, moduleReference) {
        return new ImportDeclarationSyntax(Syntax.token(47 /* ImportKeyword */ ), identifier, Syntax.token(104 /* EqualsToken */ ), moduleReference, Syntax.token(75 /* SemicolonToken */ ));
    }
    ImportDeclarationSyntax.prototype.accept = function (visitor) {
        return visitor.visitImportDeclaration(this);
    };
    ImportDeclarationSyntax.prototype.kind = function () {
        return 132 /* ImportDeclaration */ ;
    };
    ImportDeclarationSyntax.prototype.isMissing = function () {
        if(!this._importKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._equalsToken.isMissing()) {
            return false;
        }
        if(!this._moduleReference.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    ImportDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._importKeyword.width() > 0) {
            return this._importKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._equalsToken.width() > 0) {
            return this._equalsToken;
        }
        if((token = this._moduleReference.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    ImportDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if((token = this._moduleReference.lastToken()) !== null) {
            return token;
        }
        if(this._equalsToken.width() > 0) {
            return this._equalsToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._importKeyword.width() > 0) {
            return this._importKeyword;
        }
        return null;
    };
    ImportDeclarationSyntax.prototype.importKeyword = function () {
        return this._importKeyword;
    };
    ImportDeclarationSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    ImportDeclarationSyntax.prototype.equalsToken = function () {
        return this._equalsToken;
    };
    ImportDeclarationSyntax.prototype.moduleReference = function () {
        return this._moduleReference;
    };
    ImportDeclarationSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    ImportDeclarationSyntax.prototype.update = function (importKeyword, identifier, equalsToken, moduleReference, semicolonToken) {
        if(this._importKeyword === importKeyword && this._identifier === identifier && this._equalsToken === equalsToken && this._moduleReference === moduleReference && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new ImportDeclarationSyntax(importKeyword, identifier, equalsToken, moduleReference, semicolonToken);
    };
    ImportDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ImportDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ImportDeclarationSyntax.prototype.withImportKeyword = function (importKeyword) {
        return this.update(importKeyword, this._identifier, this._equalsToken, this._moduleReference, this._semicolonToken);
    };
    ImportDeclarationSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._importKeyword, identifier, this._equalsToken, this._moduleReference, this._semicolonToken);
    };
    ImportDeclarationSyntax.prototype.withEqualsToken = function (equalsToken) {
        return this.update(this._importKeyword, this._identifier, equalsToken, this._moduleReference, this._semicolonToken);
    };
    ImportDeclarationSyntax.prototype.withModuleReference = function (moduleReference) {
        return this.update(this._importKeyword, this._identifier, this._equalsToken, moduleReference, this._semicolonToken);
    };
    ImportDeclarationSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._importKeyword, this._identifier, this._equalsToken, this._moduleReference, semicolonToken);
    };
    ImportDeclarationSyntax.prototype.collectTextElements = function (elements) {
        this._importKeyword.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        this._equalsToken.collectTextElements(elements);
        this._moduleReference.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    ImportDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ImportDeclarationSyntax;
})(ModuleElementSyntax);
var ClassDeclarationSyntax = (function (_super) {
    __extends(ClassDeclarationSyntax, _super);
    function ClassDeclarationSyntax(exportKeyword, declareKeyword, classKeyword, identifier, extendsClause, implementsClause, openBraceToken, classElements, closeBraceToken) {
        _super.call(this);
        if(classElements === null) {
            throw Errors.argumentNull('classElements');
        }
        if(exportKeyword !== null) {
            if(exportKeyword.keywordKind() !== 45 /* ExportKeyword */ ) {
                throw Errors.argument('exportKeyword');
            }
        }
        if(declareKeyword !== null) {
            if(declareKeyword.keywordKind() !== 61 /* DeclareKeyword */ ) {
                throw Errors.argument('declareKeyword');
            }
        }
        if(classKeyword.keywordKind() !== 42 /* ClassKeyword */ ) {
            throw Errors.argument('classKeyword');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._exportKeyword = exportKeyword;
        this._declareKeyword = declareKeyword;
        this._classKeyword = classKeyword;
        this._identifier = identifier;
        this._extendsClause = extendsClause;
        this._implementsClause = implementsClause;
        this._openBraceToken = openBraceToken;
        this._classElements = classElements;
        this._closeBraceToken = closeBraceToken;
    }
    ClassDeclarationSyntax.create = function create(classKeyword, identifier, openBraceToken, closeBraceToken) {
        return new ClassDeclarationSyntax(null, null, classKeyword, identifier, null, null, openBraceToken, Syntax.emptyList, closeBraceToken);
    }
    ClassDeclarationSyntax.create1 = function create1(identifier) {
        return new ClassDeclarationSyntax(null, null, Syntax.token(42 /* ClassKeyword */ ), identifier, null, null, Syntax.token(67 /* OpenBraceToken */ ), Syntax.emptyList, Syntax.token(68 /* CloseBraceToken */ ));
    }
    ClassDeclarationSyntax.prototype.accept = function (visitor) {
        return visitor.visitClassDeclaration(this);
    };
    ClassDeclarationSyntax.prototype.kind = function () {
        return 130 /* ClassDeclaration */ ;
    };
    ClassDeclarationSyntax.prototype.isMissing = function () {
        if(this._exportKeyword !== null && !this._exportKeyword.isMissing()) {
            return false;
        }
        if(this._declareKeyword !== null && !this._declareKeyword.isMissing()) {
            return false;
        }
        if(!this._classKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(this._extendsClause !== null && !this._extendsClause.isMissing()) {
            return false;
        }
        if(this._implementsClause !== null && !this._implementsClause.isMissing()) {
            return false;
        }
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._classElements.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    ClassDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._classKeyword.width() > 0) {
            return this._classKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._extendsClause !== null && (token = this._extendsClause.firstToken()) !== null) {
            return token;
        }
        if(this._implementsClause !== null && (token = this._implementsClause.firstToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._classElements.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    ClassDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._classElements.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if(this._implementsClause !== null && (token = this._implementsClause.lastToken()) !== null) {
            return token;
        }
        if(this._extendsClause !== null && (token = this._extendsClause.lastToken()) !== null) {
            return token;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._classKeyword.width() > 0) {
            return this._classKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        return null;
    };
    ClassDeclarationSyntax.prototype.exportKeyword = function () {
        return this._exportKeyword;
    };
    ClassDeclarationSyntax.prototype.declareKeyword = function () {
        return this._declareKeyword;
    };
    ClassDeclarationSyntax.prototype.classKeyword = function () {
        return this._classKeyword;
    };
    ClassDeclarationSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    ClassDeclarationSyntax.prototype.extendsClause = function () {
        return this._extendsClause;
    };
    ClassDeclarationSyntax.prototype.implementsClause = function () {
        return this._implementsClause;
    };
    ClassDeclarationSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    ClassDeclarationSyntax.prototype.classElements = function () {
        return this._classElements;
    };
    ClassDeclarationSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    ClassDeclarationSyntax.prototype.update = function (exportKeyword, declareKeyword, classKeyword, identifier, extendsClause, implementsClause, openBraceToken, classElements, closeBraceToken) {
        if(this._exportKeyword === exportKeyword && this._declareKeyword === declareKeyword && this._classKeyword === classKeyword && this._identifier === identifier && this._extendsClause === extendsClause && this._implementsClause === implementsClause && this._openBraceToken === openBraceToken && this._classElements === classElements && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new ClassDeclarationSyntax(exportKeyword, declareKeyword, classKeyword, identifier, extendsClause, implementsClause, openBraceToken, classElements, closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ClassDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ClassDeclarationSyntax.prototype.withExportKeyword = function (exportKeyword) {
        return this.update(exportKeyword, this._declareKeyword, this._classKeyword, this._identifier, this._extendsClause, this._implementsClause, this._openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withDeclareKeyword = function (declareKeyword) {
        return this.update(this._exportKeyword, declareKeyword, this._classKeyword, this._identifier, this._extendsClause, this._implementsClause, this._openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withClassKeyword = function (classKeyword) {
        return this.update(this._exportKeyword, this._declareKeyword, classKeyword, this._identifier, this._extendsClause, this._implementsClause, this._openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._exportKeyword, this._declareKeyword, this._classKeyword, identifier, this._extendsClause, this._implementsClause, this._openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withExtendsClause = function (extendsClause) {
        return this.update(this._exportKeyword, this._declareKeyword, this._classKeyword, this._identifier, extendsClause, this._implementsClause, this._openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withImplementsClause = function (implementsClause) {
        return this.update(this._exportKeyword, this._declareKeyword, this._classKeyword, this._identifier, this._extendsClause, implementsClause, this._openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(this._exportKeyword, this._declareKeyword, this._classKeyword, this._identifier, this._extendsClause, this._implementsClause, openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withClassElements = function (classElements) {
        return this.update(this._exportKeyword, this._declareKeyword, this._classKeyword, this._identifier, this._extendsClause, this._implementsClause, this._openBraceToken, classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withClassElement = function (classElement) {
        return this.withClassElements(Syntax.list([
            classElement
        ]));
    };
    ClassDeclarationSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._exportKeyword, this._declareKeyword, this._classKeyword, this._identifier, this._extendsClause, this._implementsClause, this._openBraceToken, this._classElements, closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._exportKeyword !== null) {
            this._exportKeyword.collectTextElements(elements);
        }
        if(this._declareKeyword !== null) {
            this._declareKeyword.collectTextElements(elements);
        }
        this._classKeyword.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        if(this._extendsClause !== null) {
            this._extendsClause.collectTextElements(elements);
        }
        if(this._implementsClause !== null) {
            this._implementsClause.collectTextElements(elements);
        }
        this._openBraceToken.collectTextElements(elements);
        this._classElements.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    ClassDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ClassDeclarationSyntax;
})(ModuleElementSyntax);
var InterfaceDeclarationSyntax = (function (_super) {
    __extends(InterfaceDeclarationSyntax, _super);
    function InterfaceDeclarationSyntax(exportKeyword, interfaceKeyword, identifier, extendsClause, body) {
        _super.call(this);
        if(body === null) {
            throw Errors.argumentNull('body');
        }
        if(exportKeyword !== null) {
            if(exportKeyword.keywordKind() !== 45 /* ExportKeyword */ ) {
                throw Errors.argument('exportKeyword');
            }
        }
        if(interfaceKeyword.keywordKind() !== 50 /* InterfaceKeyword */ ) {
            throw Errors.argument('interfaceKeyword');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        this._exportKeyword = exportKeyword;
        this._interfaceKeyword = interfaceKeyword;
        this._identifier = identifier;
        this._extendsClause = extendsClause;
        this._body = body;
    }
    InterfaceDeclarationSyntax.create = function create(interfaceKeyword, identifier, body) {
        return new InterfaceDeclarationSyntax(null, interfaceKeyword, identifier, null, body);
    }
    InterfaceDeclarationSyntax.create1 = function create1(identifier) {
        return new InterfaceDeclarationSyntax(null, Syntax.token(50 /* InterfaceKeyword */ ), identifier, null, ObjectTypeSyntax.create1());
    }
    InterfaceDeclarationSyntax.prototype.accept = function (visitor) {
        return visitor.visitInterfaceDeclaration(this);
    };
    InterfaceDeclarationSyntax.prototype.kind = function () {
        return 127 /* InterfaceDeclaration */ ;
    };
    InterfaceDeclarationSyntax.prototype.isMissing = function () {
        if(this._exportKeyword !== null && !this._exportKeyword.isMissing()) {
            return false;
        }
        if(!this._interfaceKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(this._extendsClause !== null && !this._extendsClause.isMissing()) {
            return false;
        }
        if(!this._body.isMissing()) {
            return false;
        }
        return true;
    };
    InterfaceDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        if(this._interfaceKeyword.width() > 0) {
            return this._interfaceKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._extendsClause !== null && (token = this._extendsClause.firstToken()) !== null) {
            return token;
        }
        if((token = this._body.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    InterfaceDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._body.lastToken()) !== null) {
            return token;
        }
        if(this._extendsClause !== null && (token = this._extendsClause.lastToken()) !== null) {
            return token;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._interfaceKeyword.width() > 0) {
            return this._interfaceKeyword;
        }
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        return null;
    };
    InterfaceDeclarationSyntax.prototype.exportKeyword = function () {
        return this._exportKeyword;
    };
    InterfaceDeclarationSyntax.prototype.interfaceKeyword = function () {
        return this._interfaceKeyword;
    };
    InterfaceDeclarationSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    InterfaceDeclarationSyntax.prototype.extendsClause = function () {
        return this._extendsClause;
    };
    InterfaceDeclarationSyntax.prototype.body = function () {
        return this._body;
    };
    InterfaceDeclarationSyntax.prototype.update = function (exportKeyword, interfaceKeyword, identifier, extendsClause, body) {
        if(this._exportKeyword === exportKeyword && this._interfaceKeyword === interfaceKeyword && this._identifier === identifier && this._extendsClause === extendsClause && this._body === body) {
            return this;
        }
        return new InterfaceDeclarationSyntax(exportKeyword, interfaceKeyword, identifier, extendsClause, body);
    };
    InterfaceDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    InterfaceDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    InterfaceDeclarationSyntax.prototype.withExportKeyword = function (exportKeyword) {
        return this.update(exportKeyword, this._interfaceKeyword, this._identifier, this._extendsClause, this._body);
    };
    InterfaceDeclarationSyntax.prototype.withInterfaceKeyword = function (interfaceKeyword) {
        return this.update(this._exportKeyword, interfaceKeyword, this._identifier, this._extendsClause, this._body);
    };
    InterfaceDeclarationSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._exportKeyword, this._interfaceKeyword, identifier, this._extendsClause, this._body);
    };
    InterfaceDeclarationSyntax.prototype.withExtendsClause = function (extendsClause) {
        return this.update(this._exportKeyword, this._interfaceKeyword, this._identifier, extendsClause, this._body);
    };
    InterfaceDeclarationSyntax.prototype.withBody = function (body) {
        return this.update(this._exportKeyword, this._interfaceKeyword, this._identifier, this._extendsClause, body);
    };
    InterfaceDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._exportKeyword !== null) {
            this._exportKeyword.collectTextElements(elements);
        }
        this._interfaceKeyword.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        if(this._extendsClause !== null) {
            this._extendsClause.collectTextElements(elements);
        }
        this._body.collectTextElements(elements);
    };
    InterfaceDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return InterfaceDeclarationSyntax;
})(ModuleElementSyntax);
var ExtendsClauseSyntax = (function (_super) {
    __extends(ExtendsClauseSyntax, _super);
    function ExtendsClauseSyntax(extendsKeyword, typeNames) {
        _super.call(this);
        if(typeNames === null) {
            throw Errors.argumentNull('typeNames');
        }
        if(extendsKeyword.keywordKind() !== 46 /* ExtendsKeyword */ ) {
            throw Errors.argument('extendsKeyword');
        }
        this._extendsKeyword = extendsKeyword;
        this._typeNames = typeNames;
    }
    ExtendsClauseSyntax.create1 = function create1(typeNames) {
        return new ExtendsClauseSyntax(Syntax.token(46 /* ExtendsKeyword */ ), typeNames);
    }
    ExtendsClauseSyntax.prototype.accept = function (visitor) {
        return visitor.visitExtendsClause(this);
    };
    ExtendsClauseSyntax.prototype.kind = function () {
        return 228 /* ExtendsClause */ ;
    };
    ExtendsClauseSyntax.prototype.isMissing = function () {
        if(!this._extendsKeyword.isMissing()) {
            return false;
        }
        if(!this._typeNames.isMissing()) {
            return false;
        }
        return true;
    };
    ExtendsClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._extendsKeyword.width() > 0) {
            return this._extendsKeyword;
        }
        if((token = this._typeNames.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ExtendsClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._typeNames.lastToken()) !== null) {
            return token;
        }
        if(this._extendsKeyword.width() > 0) {
            return this._extendsKeyword;
        }
        return null;
    };
    ExtendsClauseSyntax.prototype.extendsKeyword = function () {
        return this._extendsKeyword;
    };
    ExtendsClauseSyntax.prototype.typeNames = function () {
        return this._typeNames;
    };
    ExtendsClauseSyntax.prototype.update = function (extendsKeyword, typeNames) {
        if(this._extendsKeyword === extendsKeyword && this._typeNames === typeNames) {
            return this;
        }
        return new ExtendsClauseSyntax(extendsKeyword, typeNames);
    };
    ExtendsClauseSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ExtendsClauseSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ExtendsClauseSyntax.prototype.withExtendsKeyword = function (extendsKeyword) {
        return this.update(extendsKeyword, this._typeNames);
    };
    ExtendsClauseSyntax.prototype.withTypeNames = function (typeNames) {
        return this.update(this._extendsKeyword, typeNames);
    };
    ExtendsClauseSyntax.prototype.withTypeName = function (typeName) {
        return this.withTypeNames(Syntax.separatedList([
            typeName
        ]));
    };
    ExtendsClauseSyntax.prototype.collectTextElements = function (elements) {
        this._extendsKeyword.collectTextElements(elements);
        this._typeNames.collectTextElements(elements);
    };
    ExtendsClauseSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ExtendsClauseSyntax;
})(SyntaxNode);
var ImplementsClauseSyntax = (function (_super) {
    __extends(ImplementsClauseSyntax, _super);
    function ImplementsClauseSyntax(implementsKeyword, typeNames) {
        _super.call(this);
        if(typeNames === null) {
            throw Errors.argumentNull('typeNames');
        }
        if(implementsKeyword.keywordKind() !== 49 /* ImplementsKeyword */ ) {
            throw Errors.argument('implementsKeyword');
        }
        this._implementsKeyword = implementsKeyword;
        this._typeNames = typeNames;
    }
    ImplementsClauseSyntax.create1 = function create1(typeNames) {
        return new ImplementsClauseSyntax(Syntax.token(49 /* ImplementsKeyword */ ), typeNames);
    }
    ImplementsClauseSyntax.prototype.accept = function (visitor) {
        return visitor.visitImplementsClause(this);
    };
    ImplementsClauseSyntax.prototype.kind = function () {
        return 227 /* ImplementsClause */ ;
    };
    ImplementsClauseSyntax.prototype.isMissing = function () {
        if(!this._implementsKeyword.isMissing()) {
            return false;
        }
        if(!this._typeNames.isMissing()) {
            return false;
        }
        return true;
    };
    ImplementsClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._implementsKeyword.width() > 0) {
            return this._implementsKeyword;
        }
        if((token = this._typeNames.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ImplementsClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._typeNames.lastToken()) !== null) {
            return token;
        }
        if(this._implementsKeyword.width() > 0) {
            return this._implementsKeyword;
        }
        return null;
    };
    ImplementsClauseSyntax.prototype.implementsKeyword = function () {
        return this._implementsKeyword;
    };
    ImplementsClauseSyntax.prototype.typeNames = function () {
        return this._typeNames;
    };
    ImplementsClauseSyntax.prototype.update = function (implementsKeyword, typeNames) {
        if(this._implementsKeyword === implementsKeyword && this._typeNames === typeNames) {
            return this;
        }
        return new ImplementsClauseSyntax(implementsKeyword, typeNames);
    };
    ImplementsClauseSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ImplementsClauseSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ImplementsClauseSyntax.prototype.withImplementsKeyword = function (implementsKeyword) {
        return this.update(implementsKeyword, this._typeNames);
    };
    ImplementsClauseSyntax.prototype.withTypeNames = function (typeNames) {
        return this.update(this._implementsKeyword, typeNames);
    };
    ImplementsClauseSyntax.prototype.withTypeName = function (typeName) {
        return this.withTypeNames(Syntax.separatedList([
            typeName
        ]));
    };
    ImplementsClauseSyntax.prototype.collectTextElements = function (elements) {
        this._implementsKeyword.collectTextElements(elements);
        this._typeNames.collectTextElements(elements);
    };
    ImplementsClauseSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ImplementsClauseSyntax;
})(SyntaxNode);
var ModuleDeclarationSyntax = (function (_super) {
    __extends(ModuleDeclarationSyntax, _super);
    function ModuleDeclarationSyntax(exportKeyword, declareKeyword, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken) {
        _super.call(this);
        if(moduleElements === null) {
            throw Errors.argumentNull('moduleElements');
        }
        if(exportKeyword !== null) {
            if(exportKeyword.keywordKind() !== 45 /* ExportKeyword */ ) {
                throw Errors.argument('exportKeyword');
            }
        }
        if(declareKeyword !== null) {
            if(declareKeyword.keywordKind() !== 61 /* DeclareKeyword */ ) {
                throw Errors.argument('declareKeyword');
            }
        }
        if(moduleKeyword.keywordKind() !== 63 /* ModuleKeyword */ ) {
            throw Errors.argument('moduleKeyword');
        }
        if(stringLiteral !== null) {
            if(stringLiteral.kind() !== 12 /* StringLiteral */ ) {
                throw Errors.argument('stringLiteral');
            }
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._exportKeyword = exportKeyword;
        this._declareKeyword = declareKeyword;
        this._moduleKeyword = moduleKeyword;
        this._moduleName = moduleName;
        this._stringLiteral = stringLiteral;
        this._openBraceToken = openBraceToken;
        this._moduleElements = moduleElements;
        this._closeBraceToken = closeBraceToken;
    }
    ModuleDeclarationSyntax.create = function create(moduleKeyword, openBraceToken, closeBraceToken) {
        return new ModuleDeclarationSyntax(null, null, moduleKeyword, null, null, openBraceToken, Syntax.emptyList, closeBraceToken);
    }
    ModuleDeclarationSyntax.create1 = function create1() {
        return new ModuleDeclarationSyntax(null, null, Syntax.token(63 /* ModuleKeyword */ ), null, null, Syntax.token(67 /* OpenBraceToken */ ), Syntax.emptyList, Syntax.token(68 /* CloseBraceToken */ ));
    }
    ModuleDeclarationSyntax.prototype.accept = function (visitor) {
        return visitor.visitModuleDeclaration(this);
    };
    ModuleDeclarationSyntax.prototype.kind = function () {
        return 129 /* ModuleDeclaration */ ;
    };
    ModuleDeclarationSyntax.prototype.isMissing = function () {
        if(this._exportKeyword !== null && !this._exportKeyword.isMissing()) {
            return false;
        }
        if(this._declareKeyword !== null && !this._declareKeyword.isMissing()) {
            return false;
        }
        if(!this._moduleKeyword.isMissing()) {
            return false;
        }
        if(this._moduleName !== null && !this._moduleName.isMissing()) {
            return false;
        }
        if(this._stringLiteral !== null && !this._stringLiteral.isMissing()) {
            return false;
        }
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._moduleElements.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    ModuleDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._moduleKeyword.width() > 0) {
            return this._moduleKeyword;
        }
        if(this._moduleName !== null && (token = this._moduleName.firstToken()) !== null) {
            return token;
        }
        if(this._stringLiteral !== null && this._stringLiteral.width() > 0) {
            return this._stringLiteral;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._moduleElements.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    ModuleDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._moduleElements.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if(this._stringLiteral !== null && this._stringLiteral.width() > 0) {
            return this._stringLiteral;
        }
        if(this._moduleName !== null && (token = this._moduleName.lastToken()) !== null) {
            return token;
        }
        if(this._moduleKeyword.width() > 0) {
            return this._moduleKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        return null;
    };
    ModuleDeclarationSyntax.prototype.exportKeyword = function () {
        return this._exportKeyword;
    };
    ModuleDeclarationSyntax.prototype.declareKeyword = function () {
        return this._declareKeyword;
    };
    ModuleDeclarationSyntax.prototype.moduleKeyword = function () {
        return this._moduleKeyword;
    };
    ModuleDeclarationSyntax.prototype.moduleName = function () {
        return this._moduleName;
    };
    ModuleDeclarationSyntax.prototype.stringLiteral = function () {
        return this._stringLiteral;
    };
    ModuleDeclarationSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    ModuleDeclarationSyntax.prototype.moduleElements = function () {
        return this._moduleElements;
    };
    ModuleDeclarationSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    ModuleDeclarationSyntax.prototype.update = function (exportKeyword, declareKeyword, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken) {
        if(this._exportKeyword === exportKeyword && this._declareKeyword === declareKeyword && this._moduleKeyword === moduleKeyword && this._moduleName === moduleName && this._stringLiteral === stringLiteral && this._openBraceToken === openBraceToken && this._moduleElements === moduleElements && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new ModuleDeclarationSyntax(exportKeyword, declareKeyword, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ModuleDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ModuleDeclarationSyntax.prototype.withExportKeyword = function (exportKeyword) {
        return this.update(exportKeyword, this._declareKeyword, this._moduleKeyword, this._moduleName, this._stringLiteral, this._openBraceToken, this._moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withDeclareKeyword = function (declareKeyword) {
        return this.update(this._exportKeyword, declareKeyword, this._moduleKeyword, this._moduleName, this._stringLiteral, this._openBraceToken, this._moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withModuleKeyword = function (moduleKeyword) {
        return this.update(this._exportKeyword, this._declareKeyword, moduleKeyword, this._moduleName, this._stringLiteral, this._openBraceToken, this._moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withModuleName = function (moduleName) {
        return this.update(this._exportKeyword, this._declareKeyword, this._moduleKeyword, moduleName, this._stringLiteral, this._openBraceToken, this._moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withStringLiteral = function (stringLiteral) {
        return this.update(this._exportKeyword, this._declareKeyword, this._moduleKeyword, this._moduleName, stringLiteral, this._openBraceToken, this._moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(this._exportKeyword, this._declareKeyword, this._moduleKeyword, this._moduleName, this._stringLiteral, openBraceToken, this._moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withModuleElements = function (moduleElements) {
        return this.update(this._exportKeyword, this._declareKeyword, this._moduleKeyword, this._moduleName, this._stringLiteral, this._openBraceToken, moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withModuleElement = function (moduleElement) {
        return this.withModuleElements(Syntax.list([
            moduleElement
        ]));
    };
    ModuleDeclarationSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._exportKeyword, this._declareKeyword, this._moduleKeyword, this._moduleName, this._stringLiteral, this._openBraceToken, this._moduleElements, closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._exportKeyword !== null) {
            this._exportKeyword.collectTextElements(elements);
        }
        if(this._declareKeyword !== null) {
            this._declareKeyword.collectTextElements(elements);
        }
        this._moduleKeyword.collectTextElements(elements);
        if(this._moduleName !== null) {
            this._moduleName.collectTextElements(elements);
        }
        if(this._stringLiteral !== null) {
            this._stringLiteral.collectTextElements(elements);
        }
        this._openBraceToken.collectTextElements(elements);
        this._moduleElements.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    ModuleDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ModuleDeclarationSyntax;
})(ModuleElementSyntax);
var StatementSyntax = (function (_super) {
    __extends(StatementSyntax, _super);
    function StatementSyntax() {
        _super.call(this);
    }
    StatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    StatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    StatementSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return StatementSyntax;
})(ModuleElementSyntax);
var FunctionDeclarationSyntax = (function (_super) {
    __extends(FunctionDeclarationSyntax, _super);
    function FunctionDeclarationSyntax(exportKeyword, declareKeyword, functionKeyword, functionSignature, block, semicolonToken) {
        _super.call(this);
        if(functionSignature === null) {
            throw Errors.argumentNull('functionSignature');
        }
        if(exportKeyword !== null) {
            if(exportKeyword.keywordKind() !== 45 /* ExportKeyword */ ) {
                throw Errors.argument('exportKeyword');
            }
        }
        if(declareKeyword !== null) {
            if(declareKeyword.keywordKind() !== 61 /* DeclareKeyword */ ) {
                throw Errors.argument('declareKeyword');
            }
        }
        if(functionKeyword.keywordKind() !== 25 /* FunctionKeyword */ ) {
            throw Errors.argument('functionKeyword');
        }
        if(semicolonToken !== null) {
            if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
                throw Errors.argument('semicolonToken');
            }
        }
        this._exportKeyword = exportKeyword;
        this._declareKeyword = declareKeyword;
        this._functionKeyword = functionKeyword;
        this._functionSignature = functionSignature;
        this._block = block;
        this._semicolonToken = semicolonToken;
    }
    FunctionDeclarationSyntax.create = function create(functionKeyword, functionSignature) {
        return new FunctionDeclarationSyntax(null, null, functionKeyword, functionSignature, null, null);
    }
    FunctionDeclarationSyntax.create1 = function create1(functionSignature) {
        return new FunctionDeclarationSyntax(null, null, Syntax.token(25 /* FunctionKeyword */ ), functionSignature, null, null);
    }
    FunctionDeclarationSyntax.prototype.accept = function (visitor) {
        return visitor.visitFunctionDeclaration(this);
    };
    FunctionDeclarationSyntax.prototype.kind = function () {
        return 128 /* FunctionDeclaration */ ;
    };
    FunctionDeclarationSyntax.prototype.isMissing = function () {
        if(this._exportKeyword !== null && !this._exportKeyword.isMissing()) {
            return false;
        }
        if(this._declareKeyword !== null && !this._declareKeyword.isMissing()) {
            return false;
        }
        if(!this._functionKeyword.isMissing()) {
            return false;
        }
        if(!this._functionSignature.isMissing()) {
            return false;
        }
        if(this._block !== null && !this._block.isMissing()) {
            return false;
        }
        if(this._semicolonToken !== null && !this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    FunctionDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._functionKeyword.width() > 0) {
            return this._functionKeyword;
        }
        if((token = this._functionSignature.firstToken()) !== null) {
            return token;
        }
        if(this._block !== null && (token = this._block.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken !== null && this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    FunctionDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken !== null && this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._block !== null && (token = this._block.lastToken()) !== null) {
            return token;
        }
        if((token = this._functionSignature.lastToken()) !== null) {
            return token;
        }
        if(this._functionKeyword.width() > 0) {
            return this._functionKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        return null;
    };
    FunctionDeclarationSyntax.prototype.exportKeyword = function () {
        return this._exportKeyword;
    };
    FunctionDeclarationSyntax.prototype.declareKeyword = function () {
        return this._declareKeyword;
    };
    FunctionDeclarationSyntax.prototype.functionKeyword = function () {
        return this._functionKeyword;
    };
    FunctionDeclarationSyntax.prototype.functionSignature = function () {
        return this._functionSignature;
    };
    FunctionDeclarationSyntax.prototype.block = function () {
        return this._block;
    };
    FunctionDeclarationSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    FunctionDeclarationSyntax.prototype.update = function (exportKeyword, declareKeyword, functionKeyword, functionSignature, block, semicolonToken) {
        if(this._exportKeyword === exportKeyword && this._declareKeyword === declareKeyword && this._functionKeyword === functionKeyword && this._functionSignature === functionSignature && this._block === block && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new FunctionDeclarationSyntax(exportKeyword, declareKeyword, functionKeyword, functionSignature, block, semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    FunctionDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    FunctionDeclarationSyntax.prototype.withExportKeyword = function (exportKeyword) {
        return this.update(exportKeyword, this._declareKeyword, this._functionKeyword, this._functionSignature, this._block, this._semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.withDeclareKeyword = function (declareKeyword) {
        return this.update(this._exportKeyword, declareKeyword, this._functionKeyword, this._functionSignature, this._block, this._semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.withFunctionKeyword = function (functionKeyword) {
        return this.update(this._exportKeyword, this._declareKeyword, functionKeyword, this._functionSignature, this._block, this._semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.withFunctionSignature = function (functionSignature) {
        return this.update(this._exportKeyword, this._declareKeyword, this._functionKeyword, functionSignature, this._block, this._semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.withBlock = function (block) {
        return this.update(this._exportKeyword, this._declareKeyword, this._functionKeyword, this._functionSignature, block, this._semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._exportKeyword, this._declareKeyword, this._functionKeyword, this._functionSignature, this._block, semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._exportKeyword !== null) {
            this._exportKeyword.collectTextElements(elements);
        }
        if(this._declareKeyword !== null) {
            this._declareKeyword.collectTextElements(elements);
        }
        this._functionKeyword.collectTextElements(elements);
        this._functionSignature.collectTextElements(elements);
        if(this._block !== null) {
            this._block.collectTextElements(elements);
        }
        if(this._semicolonToken !== null) {
            this._semicolonToken.collectTextElements(elements);
        }
    };
    FunctionDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._exportKeyword !== null) {
            return true;
        }
        if(this._declareKeyword !== null) {
            return true;
        }
        if(this._functionSignature.isTypeScriptSpecific()) {
            return true;
        }
        if(this._block !== null && this._block.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return FunctionDeclarationSyntax;
})(StatementSyntax);
var VariableStatementSyntax = (function (_super) {
    __extends(VariableStatementSyntax, _super);
    function VariableStatementSyntax(exportKeyword, declareKeyword, variableDeclaration, semicolonToken) {
        _super.call(this);
        if(variableDeclaration === null) {
            throw Errors.argumentNull('variableDeclaration');
        }
        if(exportKeyword !== null) {
            if(exportKeyword.keywordKind() !== 45 /* ExportKeyword */ ) {
                throw Errors.argument('exportKeyword');
            }
        }
        if(declareKeyword !== null) {
            if(declareKeyword.keywordKind() !== 61 /* DeclareKeyword */ ) {
                throw Errors.argument('declareKeyword');
            }
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._exportKeyword = exportKeyword;
        this._declareKeyword = declareKeyword;
        this._variableDeclaration = variableDeclaration;
        this._semicolonToken = semicolonToken;
    }
    VariableStatementSyntax.create = function create(variableDeclaration, semicolonToken) {
        return new VariableStatementSyntax(null, null, variableDeclaration, semicolonToken);
    }
    VariableStatementSyntax.create1 = function create1(variableDeclaration) {
        return new VariableStatementSyntax(null, null, variableDeclaration, Syntax.token(75 /* SemicolonToken */ ));
    }
    VariableStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitVariableStatement(this);
    };
    VariableStatementSyntax.prototype.kind = function () {
        return 140 /* VariableStatement */ ;
    };
    VariableStatementSyntax.prototype.isMissing = function () {
        if(this._exportKeyword !== null && !this._exportKeyword.isMissing()) {
            return false;
        }
        if(this._declareKeyword !== null && !this._declareKeyword.isMissing()) {
            return false;
        }
        if(!this._variableDeclaration.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    VariableStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if((token = this._variableDeclaration.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    VariableStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if((token = this._variableDeclaration.lastToken()) !== null) {
            return token;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        return null;
    };
    VariableStatementSyntax.prototype.exportKeyword = function () {
        return this._exportKeyword;
    };
    VariableStatementSyntax.prototype.declareKeyword = function () {
        return this._declareKeyword;
    };
    VariableStatementSyntax.prototype.variableDeclaration = function () {
        return this._variableDeclaration;
    };
    VariableStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    VariableStatementSyntax.prototype.update = function (exportKeyword, declareKeyword, variableDeclaration, semicolonToken) {
        if(this._exportKeyword === exportKeyword && this._declareKeyword === declareKeyword && this._variableDeclaration === variableDeclaration && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new VariableStatementSyntax(exportKeyword, declareKeyword, variableDeclaration, semicolonToken);
    };
    VariableStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    VariableStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    VariableStatementSyntax.prototype.withExportKeyword = function (exportKeyword) {
        return this.update(exportKeyword, this._declareKeyword, this._variableDeclaration, this._semicolonToken);
    };
    VariableStatementSyntax.prototype.withDeclareKeyword = function (declareKeyword) {
        return this.update(this._exportKeyword, declareKeyword, this._variableDeclaration, this._semicolonToken);
    };
    VariableStatementSyntax.prototype.withVariableDeclaration = function (variableDeclaration) {
        return this.update(this._exportKeyword, this._declareKeyword, variableDeclaration, this._semicolonToken);
    };
    VariableStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._exportKeyword, this._declareKeyword, this._variableDeclaration, semicolonToken);
    };
    VariableStatementSyntax.prototype.collectTextElements = function (elements) {
        if(this._exportKeyword !== null) {
            this._exportKeyword.collectTextElements(elements);
        }
        if(this._declareKeyword !== null) {
            this._declareKeyword.collectTextElements(elements);
        }
        this._variableDeclaration.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    VariableStatementSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._exportKeyword !== null) {
            return true;
        }
        if(this._declareKeyword !== null) {
            return true;
        }
        if(this._variableDeclaration.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return VariableStatementSyntax;
})(StatementSyntax);
var ExpressionSyntax = (function (_super) {
    __extends(ExpressionSyntax, _super);
    function ExpressionSyntax() {
        _super.call(this);
    }
    ExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return ExpressionSyntax;
})(SyntaxNode);
var UnaryExpressionSyntax = (function (_super) {
    __extends(UnaryExpressionSyntax, _super);
    function UnaryExpressionSyntax() {
        _super.call(this);
    }
    UnaryExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    UnaryExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    UnaryExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return UnaryExpressionSyntax;
})(ExpressionSyntax);
var VariableDeclarationSyntax = (function (_super) {
    __extends(VariableDeclarationSyntax, _super);
    function VariableDeclarationSyntax(varKeyword, variableDeclarators) {
        _super.call(this);
        if(variableDeclarators === null) {
            throw Errors.argumentNull('variableDeclarators');
        }
        if(varKeyword.keywordKind() !== 38 /* VarKeyword */ ) {
            throw Errors.argument('varKeyword');
        }
        this._varKeyword = varKeyword;
        this._variableDeclarators = variableDeclarators;
    }
    VariableDeclarationSyntax.create1 = function create1(variableDeclarators) {
        return new VariableDeclarationSyntax(Syntax.token(38 /* VarKeyword */ ), variableDeclarators);
    }
    VariableDeclarationSyntax.prototype.accept = function (visitor) {
        return visitor.visitVariableDeclaration(this);
    };
    VariableDeclarationSyntax.prototype.kind = function () {
        return 223 /* VariableDeclaration */ ;
    };
    VariableDeclarationSyntax.prototype.isMissing = function () {
        if(!this._varKeyword.isMissing()) {
            return false;
        }
        if(!this._variableDeclarators.isMissing()) {
            return false;
        }
        return true;
    };
    VariableDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._varKeyword.width() > 0) {
            return this._varKeyword;
        }
        if((token = this._variableDeclarators.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    VariableDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._variableDeclarators.lastToken()) !== null) {
            return token;
        }
        if(this._varKeyword.width() > 0) {
            return this._varKeyword;
        }
        return null;
    };
    VariableDeclarationSyntax.prototype.varKeyword = function () {
        return this._varKeyword;
    };
    VariableDeclarationSyntax.prototype.variableDeclarators = function () {
        return this._variableDeclarators;
    };
    VariableDeclarationSyntax.prototype.update = function (varKeyword, variableDeclarators) {
        if(this._varKeyword === varKeyword && this._variableDeclarators === variableDeclarators) {
            return this;
        }
        return new VariableDeclarationSyntax(varKeyword, variableDeclarators);
    };
    VariableDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    VariableDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    VariableDeclarationSyntax.prototype.withVarKeyword = function (varKeyword) {
        return this.update(varKeyword, this._variableDeclarators);
    };
    VariableDeclarationSyntax.prototype.withVariableDeclarators = function (variableDeclarators) {
        return this.update(this._varKeyword, variableDeclarators);
    };
    VariableDeclarationSyntax.prototype.withVariableDeclarator = function (variableDeclarator) {
        return this.withVariableDeclarators(Syntax.separatedList([
            variableDeclarator
        ]));
    };
    VariableDeclarationSyntax.prototype.collectTextElements = function (elements) {
        this._varKeyword.collectTextElements(elements);
        this._variableDeclarators.collectTextElements(elements);
    };
    VariableDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._variableDeclarators.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return VariableDeclarationSyntax;
})(SyntaxNode);
var VariableDeclaratorSyntax = (function (_super) {
    __extends(VariableDeclaratorSyntax, _super);
    function VariableDeclaratorSyntax(identifier, typeAnnotation, equalsValueClause) {
        _super.call(this);
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        this._identifier = identifier;
        this._typeAnnotation = typeAnnotation;
        this._equalsValueClause = equalsValueClause;
    }
    VariableDeclaratorSyntax.create = function create(identifier) {
        return new VariableDeclaratorSyntax(identifier, null, null);
    }
    VariableDeclaratorSyntax.create1 = function create1(identifier) {
        return new VariableDeclaratorSyntax(identifier, null, null);
    }
    VariableDeclaratorSyntax.prototype.accept = function (visitor) {
        return visitor.visitVariableDeclarator(this);
    };
    VariableDeclaratorSyntax.prototype.kind = function () {
        return 224 /* VariableDeclarator */ ;
    };
    VariableDeclaratorSyntax.prototype.isMissing = function () {
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        if(this._equalsValueClause !== null && !this._equalsValueClause.isMissing()) {
            return false;
        }
        return true;
    };
    VariableDeclaratorSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        if(this._equalsValueClause !== null && (token = this._equalsValueClause.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    VariableDeclaratorSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._equalsValueClause !== null && (token = this._equalsValueClause.lastToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    VariableDeclaratorSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    VariableDeclaratorSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    VariableDeclaratorSyntax.prototype.equalsValueClause = function () {
        return this._equalsValueClause;
    };
    VariableDeclaratorSyntax.prototype.update = function (identifier, typeAnnotation, equalsValueClause) {
        if(this._identifier === identifier && this._typeAnnotation === typeAnnotation && this._equalsValueClause === equalsValueClause) {
            return this;
        }
        return new VariableDeclaratorSyntax(identifier, typeAnnotation, equalsValueClause);
    };
    VariableDeclaratorSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    VariableDeclaratorSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    VariableDeclaratorSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(identifier, this._typeAnnotation, this._equalsValueClause);
    };
    VariableDeclaratorSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._identifier, typeAnnotation, this._equalsValueClause);
    };
    VariableDeclaratorSyntax.prototype.withEqualsValueClause = function (equalsValueClause) {
        return this.update(this._identifier, this._typeAnnotation, equalsValueClause);
    };
    VariableDeclaratorSyntax.prototype.collectTextElements = function (elements) {
        this._identifier.collectTextElements(elements);
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
        if(this._equalsValueClause !== null) {
            this._equalsValueClause.collectTextElements(elements);
        }
    };
    VariableDeclaratorSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._typeAnnotation !== null) {
            return true;
        }
        if(this._equalsValueClause !== null && this._equalsValueClause.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return VariableDeclaratorSyntax;
})(SyntaxNode);
var EqualsValueClauseSyntax = (function (_super) {
    __extends(EqualsValueClauseSyntax, _super);
    function EqualsValueClauseSyntax(equalsToken, value) {
        _super.call(this);
        if(value === null) {
            throw Errors.argumentNull('value');
        }
        if(equalsToken.kind() !== 104 /* EqualsToken */ ) {
            throw Errors.argument('equalsToken');
        }
        this._equalsToken = equalsToken;
        this._value = value;
    }
    EqualsValueClauseSyntax.create1 = function create1(value) {
        return new EqualsValueClauseSyntax(Syntax.token(104 /* EqualsToken */ ), value);
    }
    EqualsValueClauseSyntax.prototype.accept = function (visitor) {
        return visitor.visitEqualsValueClause(this);
    };
    EqualsValueClauseSyntax.prototype.kind = function () {
        return 229 /* EqualsValueClause */ ;
    };
    EqualsValueClauseSyntax.prototype.isMissing = function () {
        if(!this._equalsToken.isMissing()) {
            return false;
        }
        if(!this._value.isMissing()) {
            return false;
        }
        return true;
    };
    EqualsValueClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._equalsToken.width() > 0) {
            return this._equalsToken;
        }
        if((token = this._value.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    EqualsValueClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._value.lastToken()) !== null) {
            return token;
        }
        if(this._equalsToken.width() > 0) {
            return this._equalsToken;
        }
        return null;
    };
    EqualsValueClauseSyntax.prototype.equalsToken = function () {
        return this._equalsToken;
    };
    EqualsValueClauseSyntax.prototype.value = function () {
        return this._value;
    };
    EqualsValueClauseSyntax.prototype.update = function (equalsToken, value) {
        if(this._equalsToken === equalsToken && this._value === value) {
            return this;
        }
        return new EqualsValueClauseSyntax(equalsToken, value);
    };
    EqualsValueClauseSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    EqualsValueClauseSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    EqualsValueClauseSyntax.prototype.withEqualsToken = function (equalsToken) {
        return this.update(equalsToken, this._value);
    };
    EqualsValueClauseSyntax.prototype.withValue = function (value) {
        return this.update(this._equalsToken, value);
    };
    EqualsValueClauseSyntax.prototype.collectTextElements = function (elements) {
        this._equalsToken.collectTextElements(elements);
        this._value.collectTextElements(elements);
    };
    EqualsValueClauseSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._value.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return EqualsValueClauseSyntax;
})(SyntaxNode);
var PrefixUnaryExpressionSyntax = (function (_super) {
    __extends(PrefixUnaryExpressionSyntax, _super);
    function PrefixUnaryExpressionSyntax(kind, operatorToken, operand) {
        _super.call(this);
        if(kind === null) {
            throw Errors.argumentNull('kind');
        }
        if(operand === null) {
            throw Errors.argumentNull('operand');
        }
        switch(operatorToken.kind()) {
            case 90 /* PlusPlusToken */ :
            case 91 /* MinusMinusToken */ :
            case 86 /* PlusToken */ :
            case 87 /* MinusToken */ :
            case 99 /* TildeToken */ :
            case 98 /* ExclamationToken */ : {
                break;

            }
            default: {
                throw Errors.argument('operatorToken');

            }
        }
        this._kind = kind;
        this._operatorToken = operatorToken;
        this._operand = operand;
    }
    PrefixUnaryExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitPrefixUnaryExpression(this);
    };
    PrefixUnaryExpressionSyntax.prototype.isMissing = function () {
        if(!this._operatorToken.isMissing()) {
            return false;
        }
        if(!this._operand.isMissing()) {
            return false;
        }
        return true;
    };
    PrefixUnaryExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._operatorToken.width() > 0) {
            return this._operatorToken;
        }
        if((token = this._operand.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    PrefixUnaryExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._operand.lastToken()) !== null) {
            return token;
        }
        if(this._operatorToken.width() > 0) {
            return this._operatorToken;
        }
        return null;
    };
    PrefixUnaryExpressionSyntax.prototype.kind = function () {
        return this._kind;
    };
    PrefixUnaryExpressionSyntax.prototype.operatorToken = function () {
        return this._operatorToken;
    };
    PrefixUnaryExpressionSyntax.prototype.operand = function () {
        return this._operand;
    };
    PrefixUnaryExpressionSyntax.prototype.update = function (kind, operatorToken, operand) {
        if(this._kind === kind && this._operatorToken === operatorToken && this._operand === operand) {
            return this;
        }
        return new PrefixUnaryExpressionSyntax(kind, operatorToken, operand);
    };
    PrefixUnaryExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    PrefixUnaryExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    PrefixUnaryExpressionSyntax.prototype.withKind = function (kind) {
        return this.update(kind, this._operatorToken, this._operand);
    };
    PrefixUnaryExpressionSyntax.prototype.withOperatorToken = function (operatorToken) {
        return this.update(this._kind, operatorToken, this._operand);
    };
    PrefixUnaryExpressionSyntax.prototype.withOperand = function (operand) {
        return this.update(this._kind, this._operatorToken, operand);
    };
    PrefixUnaryExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._operatorToken.collectTextElements(elements);
        this._operand.collectTextElements(elements);
    };
    PrefixUnaryExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._operand.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return PrefixUnaryExpressionSyntax;
})(UnaryExpressionSyntax);
var ThisExpressionSyntax = (function (_super) {
    __extends(ThisExpressionSyntax, _super);
    function ThisExpressionSyntax(thisKeyword) {
        _super.call(this);
        if(thisKeyword.keywordKind() !== 33 /* ThisKeyword */ ) {
            throw Errors.argument('thisKeyword');
        }
        this._thisKeyword = thisKeyword;
    }
    ThisExpressionSyntax.create1 = function create1() {
        return new ThisExpressionSyntax(Syntax.token(33 /* ThisKeyword */ ));
    }
    ThisExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitThisExpression(this);
    };
    ThisExpressionSyntax.prototype.kind = function () {
        return 211 /* ThisExpression */ ;
    };
    ThisExpressionSyntax.prototype.isMissing = function () {
        if(!this._thisKeyword.isMissing()) {
            return false;
        }
        return true;
    };
    ThisExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._thisKeyword.width() > 0) {
            return this._thisKeyword;
        }
        return null;
    };
    ThisExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._thisKeyword.width() > 0) {
            return this._thisKeyword;
        }
        return null;
    };
    ThisExpressionSyntax.prototype.thisKeyword = function () {
        return this._thisKeyword;
    };
    ThisExpressionSyntax.prototype.update = function (thisKeyword) {
        if(this._thisKeyword === thisKeyword) {
            return this;
        }
        return new ThisExpressionSyntax(thisKeyword);
    };
    ThisExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ThisExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ThisExpressionSyntax.prototype.withThisKeyword = function (thisKeyword) {
        return this.update(thisKeyword);
    };
    ThisExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._thisKeyword.collectTextElements(elements);
    };
    ThisExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return ThisExpressionSyntax;
})(UnaryExpressionSyntax);
var LiteralExpressionSyntax = (function (_super) {
    __extends(LiteralExpressionSyntax, _super);
    function LiteralExpressionSyntax(kind, literalToken) {
        _super.call(this);
        if(kind === null) {
            throw Errors.argumentNull('kind');
        }
        switch(literalToken.kind()) {
            case 10 /* RegularExpressionLiteral */ :
            case 12 /* StringLiteral */ :
            case 11 /* NumericLiteral */ : {
                break;

            }
            case 9 /* IdentifierNameToken */ : {
                switch(literalToken.keywordKind()) {
                    case 22 /* FalseKeyword */ :
                    case 35 /* TrueKeyword */ :
                    case 30 /* NullKeyword */ : {
                        break;

                    }
                    default: {
                        throw Errors.argument('literalToken');

                    }
                }
                break;

            }
            default: {
                throw Errors.argument('literalToken');

            }
        }
        this._kind = kind;
        this._literalToken = literalToken;
    }
    LiteralExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitLiteralExpression(this);
    };
    LiteralExpressionSyntax.prototype.isMissing = function () {
        if(!this._literalToken.isMissing()) {
            return false;
        }
        return true;
    };
    LiteralExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._literalToken.width() > 0) {
            return this._literalToken;
        }
        return null;
    };
    LiteralExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._literalToken.width() > 0) {
            return this._literalToken;
        }
        return null;
    };
    LiteralExpressionSyntax.prototype.kind = function () {
        return this._kind;
    };
    LiteralExpressionSyntax.prototype.literalToken = function () {
        return this._literalToken;
    };
    LiteralExpressionSyntax.prototype.update = function (kind, literalToken) {
        if(this._kind === kind && this._literalToken === literalToken) {
            return this;
        }
        return new LiteralExpressionSyntax(kind, literalToken);
    };
    LiteralExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    LiteralExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    LiteralExpressionSyntax.prototype.withKind = function (kind) {
        return this.update(kind, this._literalToken);
    };
    LiteralExpressionSyntax.prototype.withLiteralToken = function (literalToken) {
        return this.update(this._kind, literalToken);
    };
    LiteralExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._literalToken.collectTextElements(elements);
    };
    LiteralExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return LiteralExpressionSyntax;
})(UnaryExpressionSyntax);
var ArrayLiteralExpressionSyntax = (function (_super) {
    __extends(ArrayLiteralExpressionSyntax, _super);
    function ArrayLiteralExpressionSyntax(openBracketToken, expressions, closeBracketToken) {
        _super.call(this);
        if(expressions === null) {
            throw Errors.argumentNull('expressions');
        }
        if(openBracketToken.kind() !== 71 /* OpenBracketToken */ ) {
            throw Errors.argument('openBracketToken');
        }
        if(closeBracketToken.kind() !== 72 /* CloseBracketToken */ ) {
            throw Errors.argument('closeBracketToken');
        }
        this._openBracketToken = openBracketToken;
        this._expressions = expressions;
        this._closeBracketToken = closeBracketToken;
    }
    ArrayLiteralExpressionSyntax.create = function create(openBracketToken, closeBracketToken) {
        return new ArrayLiteralExpressionSyntax(openBracketToken, Syntax.emptySeparatedList, closeBracketToken);
    }
    ArrayLiteralExpressionSyntax.create1 = function create1() {
        return new ArrayLiteralExpressionSyntax(Syntax.token(71 /* OpenBracketToken */ ), Syntax.emptySeparatedList, Syntax.token(72 /* CloseBracketToken */ ));
    }
    ArrayLiteralExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitArrayLiteralExpression(this);
    };
    ArrayLiteralExpressionSyntax.prototype.kind = function () {
        return 212 /* ArrayLiteralExpression */ ;
    };
    ArrayLiteralExpressionSyntax.prototype.isMissing = function () {
        if(!this._openBracketToken.isMissing()) {
            return false;
        }
        if(!this._expressions.isMissing()) {
            return false;
        }
        if(!this._closeBracketToken.isMissing()) {
            return false;
        }
        return true;
    };
    ArrayLiteralExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        if((token = this._expressions.firstToken()) !== null) {
            return token;
        }
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        return null;
    };
    ArrayLiteralExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        if((token = this._expressions.lastToken()) !== null) {
            return token;
        }
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        return null;
    };
    ArrayLiteralExpressionSyntax.prototype.openBracketToken = function () {
        return this._openBracketToken;
    };
    ArrayLiteralExpressionSyntax.prototype.expressions = function () {
        return this._expressions;
    };
    ArrayLiteralExpressionSyntax.prototype.closeBracketToken = function () {
        return this._closeBracketToken;
    };
    ArrayLiteralExpressionSyntax.prototype.update = function (openBracketToken, expressions, closeBracketToken) {
        if(this._openBracketToken === openBracketToken && this._expressions === expressions && this._closeBracketToken === closeBracketToken) {
            return this;
        }
        return new ArrayLiteralExpressionSyntax(openBracketToken, expressions, closeBracketToken);
    };
    ArrayLiteralExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ArrayLiteralExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ArrayLiteralExpressionSyntax.prototype.withOpenBracketToken = function (openBracketToken) {
        return this.update(openBracketToken, this._expressions, this._closeBracketToken);
    };
    ArrayLiteralExpressionSyntax.prototype.withExpressions = function (expressions) {
        return this.update(this._openBracketToken, expressions, this._closeBracketToken);
    };
    ArrayLiteralExpressionSyntax.prototype.withExpression = function (expression) {
        return this.withExpressions(Syntax.separatedList([
            expression
        ]));
    };
    ArrayLiteralExpressionSyntax.prototype.withCloseBracketToken = function (closeBracketToken) {
        return this.update(this._openBracketToken, this._expressions, closeBracketToken);
    };
    ArrayLiteralExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._openBracketToken.collectTextElements(elements);
        this._expressions.collectTextElements(elements);
        this._closeBracketToken.collectTextElements(elements);
    };
    ArrayLiteralExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expressions.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ArrayLiteralExpressionSyntax;
})(UnaryExpressionSyntax);
var OmittedExpressionSyntax = (function (_super) {
    __extends(OmittedExpressionSyntax, _super);
    function OmittedExpressionSyntax() {
        _super.call(this);
    }
    OmittedExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitOmittedExpression(this);
    };
    OmittedExpressionSyntax.prototype.kind = function () {
        return 222 /* OmittedExpression */ ;
    };
    OmittedExpressionSyntax.prototype.isMissing = function () {
        return true;
    };
    OmittedExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        return null;
    };
    OmittedExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        return null;
    };
    OmittedExpressionSyntax.prototype.update = function () {
        return this;
    };
    OmittedExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    OmittedExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    OmittedExpressionSyntax.prototype.collectTextElements = function (elements) {
    };
    OmittedExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return OmittedExpressionSyntax;
})(ExpressionSyntax);
var ParenthesizedExpressionSyntax = (function (_super) {
    __extends(ParenthesizedExpressionSyntax, _super);
    function ParenthesizedExpressionSyntax(openParenToken, expression, closeParenToken) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._openParenToken = openParenToken;
        this._expression = expression;
        this._closeParenToken = closeParenToken;
    }
    ParenthesizedExpressionSyntax.create1 = function create1(expression) {
        return new ParenthesizedExpressionSyntax(Syntax.token(69 /* OpenParenToken */ ), expression, Syntax.token(70 /* CloseParenToken */ ));
    }
    ParenthesizedExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitParenthesizedExpression(this);
    };
    ParenthesizedExpressionSyntax.prototype.kind = function () {
        return 215 /* ParenthesizedExpression */ ;
    };
    ParenthesizedExpressionSyntax.prototype.isMissing = function () {
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        return true;
    };
    ParenthesizedExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        return null;
    };
    ParenthesizedExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        return null;
    };
    ParenthesizedExpressionSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    ParenthesizedExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    ParenthesizedExpressionSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    ParenthesizedExpressionSyntax.prototype.update = function (openParenToken, expression, closeParenToken) {
        if(this._openParenToken === openParenToken && this._expression === expression && this._closeParenToken === closeParenToken) {
            return this;
        }
        return new ParenthesizedExpressionSyntax(openParenToken, expression, closeParenToken);
    };
    ParenthesizedExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ParenthesizedExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ParenthesizedExpressionSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(openParenToken, this._expression, this._closeParenToken);
    };
    ParenthesizedExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(this._openParenToken, expression, this._closeParenToken);
    };
    ParenthesizedExpressionSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._openParenToken, this._expression, closeParenToken);
    };
    ParenthesizedExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._openParenToken.collectTextElements(elements);
        this._expression.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
    };
    ParenthesizedExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ParenthesizedExpressionSyntax;
})(UnaryExpressionSyntax);
var ArrowFunctionExpressionSyntax = (function (_super) {
    __extends(ArrowFunctionExpressionSyntax, _super);
    function ArrowFunctionExpressionSyntax() {
        _super.call(this);
    }
    ArrowFunctionExpressionSyntax.prototype.equalsGreaterThanToken = function () {
        throw Errors.abstract();
    };
    ArrowFunctionExpressionSyntax.prototype.body = function () {
        throw Errors.abstract();
    };
    ArrowFunctionExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ArrowFunctionExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ArrowFunctionExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ArrowFunctionExpressionSyntax;
})(UnaryExpressionSyntax);
var SimpleArrowFunctionExpressionSyntax = (function (_super) {
    __extends(SimpleArrowFunctionExpressionSyntax, _super);
    function SimpleArrowFunctionExpressionSyntax(identifier, equalsGreaterThanToken, body) {
        _super.call(this);
        if(body === null) {
            throw Errors.argumentNull('body');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(equalsGreaterThanToken.kind() !== 82 /* EqualsGreaterThanToken */ ) {
            throw Errors.argument('equalsGreaterThanToken');
        }
        this._identifier = identifier;
        this._equalsGreaterThanToken = equalsGreaterThanToken;
        this._body = body;
    }
    SimpleArrowFunctionExpressionSyntax.create1 = function create1(identifier, body) {
        return new SimpleArrowFunctionExpressionSyntax(identifier, Syntax.token(82 /* EqualsGreaterThanToken */ ), body);
    }
    SimpleArrowFunctionExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitSimpleArrowFunctionExpression(this);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.kind = function () {
        return 217 /* SimpleArrowFunctionExpression */ ;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.isMissing = function () {
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._equalsGreaterThanToken.isMissing()) {
            return false;
        }
        if(!this._body.isMissing()) {
            return false;
        }
        return true;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._body.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._body.lastToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.equalsGreaterThanToken = function () {
        return this._equalsGreaterThanToken;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.body = function () {
        return this._body;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.update = function (identifier, equalsGreaterThanToken, body) {
        if(this._identifier === identifier && this._equalsGreaterThanToken === equalsGreaterThanToken && this._body === body) {
            return this;
        }
        return new SimpleArrowFunctionExpressionSyntax(identifier, equalsGreaterThanToken, body);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(identifier, this._equalsGreaterThanToken, this._body);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.withEqualsGreaterThanToken = function (equalsGreaterThanToken) {
        return this.update(this._identifier, equalsGreaterThanToken, this._body);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.withBody = function (body) {
        return this.update(this._identifier, this._equalsGreaterThanToken, body);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._identifier.collectTextElements(elements);
        this._equalsGreaterThanToken.collectTextElements(elements);
        this._body.collectTextElements(elements);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return SimpleArrowFunctionExpressionSyntax;
})(ArrowFunctionExpressionSyntax);
var ParenthesizedArrowFunctionExpressionSyntax = (function (_super) {
    __extends(ParenthesizedArrowFunctionExpressionSyntax, _super);
    function ParenthesizedArrowFunctionExpressionSyntax(callSignature, equalsGreaterThanToken, body) {
        _super.call(this);
        if(callSignature === null) {
            throw Errors.argumentNull('callSignature');
        }
        if(body === null) {
            throw Errors.argumentNull('body');
        }
        if(equalsGreaterThanToken.kind() !== 82 /* EqualsGreaterThanToken */ ) {
            throw Errors.argument('equalsGreaterThanToken');
        }
        this._callSignature = callSignature;
        this._equalsGreaterThanToken = equalsGreaterThanToken;
        this._body = body;
    }
    ParenthesizedArrowFunctionExpressionSyntax.create1 = function create1(body) {
        return new ParenthesizedArrowFunctionExpressionSyntax(CallSignatureSyntax.create1(), Syntax.token(82 /* EqualsGreaterThanToken */ ), body);
    }
    ParenthesizedArrowFunctionExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitParenthesizedArrowFunctionExpression(this);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.kind = function () {
        return 216 /* ParenthesizedArrowFunctionExpression */ ;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.isMissing = function () {
        if(!this._callSignature.isMissing()) {
            return false;
        }
        if(!this._equalsGreaterThanToken.isMissing()) {
            return false;
        }
        if(!this._body.isMissing()) {
            return false;
        }
        return true;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._callSignature.firstToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._body.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._body.lastToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._callSignature.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.callSignature = function () {
        return this._callSignature;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.equalsGreaterThanToken = function () {
        return this._equalsGreaterThanToken;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.body = function () {
        return this._body;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.update = function (callSignature, equalsGreaterThanToken, body) {
        if(this._callSignature === callSignature && this._equalsGreaterThanToken === equalsGreaterThanToken && this._body === body) {
            return this;
        }
        return new ParenthesizedArrowFunctionExpressionSyntax(callSignature, equalsGreaterThanToken, body);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.withCallSignature = function (callSignature) {
        return this.update(callSignature, this._equalsGreaterThanToken, this._body);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.withEqualsGreaterThanToken = function (equalsGreaterThanToken) {
        return this.update(this._callSignature, equalsGreaterThanToken, this._body);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.withBody = function (body) {
        return this.update(this._callSignature, this._equalsGreaterThanToken, body);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._callSignature.collectTextElements(elements);
        this._equalsGreaterThanToken.collectTextElements(elements);
        this._body.collectTextElements(elements);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ParenthesizedArrowFunctionExpressionSyntax;
})(ArrowFunctionExpressionSyntax);
var TypeSyntax = (function (_super) {
    __extends(TypeSyntax, _super);
    function TypeSyntax() {
        _super.call(this);
    }
    TypeSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    TypeSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    TypeSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return TypeSyntax;
})(UnaryExpressionSyntax);
var NameSyntax = (function (_super) {
    __extends(NameSyntax, _super);
    function NameSyntax() {
        _super.call(this);
    }
    NameSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    NameSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    NameSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return NameSyntax;
})(TypeSyntax);
var IdentifierNameSyntax = (function (_super) {
    __extends(IdentifierNameSyntax, _super);
    function IdentifierNameSyntax(identifier) {
        _super.call(this);
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        this._identifier = identifier;
    }
    IdentifierNameSyntax.prototype.accept = function (visitor) {
        return visitor.visitIdentifierName(this);
    };
    IdentifierNameSyntax.prototype.kind = function () {
        return 120 /* IdentifierName */ ;
    };
    IdentifierNameSyntax.prototype.isMissing = function () {
        if(!this._identifier.isMissing()) {
            return false;
        }
        return true;
    };
    IdentifierNameSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    IdentifierNameSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    IdentifierNameSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    IdentifierNameSyntax.prototype.update = function (identifier) {
        if(this._identifier === identifier) {
            return this;
        }
        return new IdentifierNameSyntax(identifier);
    };
    IdentifierNameSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    IdentifierNameSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    IdentifierNameSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(identifier);
    };
    IdentifierNameSyntax.prototype.collectTextElements = function (elements) {
        this._identifier.collectTextElements(elements);
    };
    IdentifierNameSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return IdentifierNameSyntax;
})(NameSyntax);
var QualifiedNameSyntax = (function (_super) {
    __extends(QualifiedNameSyntax, _super);
    function QualifiedNameSyntax(left, dotToken, right) {
        _super.call(this);
        if(left === null) {
            throw Errors.argumentNull('left');
        }
        if(right === null) {
            throw Errors.argumentNull('right');
        }
        if(dotToken.kind() !== 73 /* DotToken */ ) {
            throw Errors.argument('dotToken');
        }
        this._left = left;
        this._dotToken = dotToken;
        this._right = right;
    }
    QualifiedNameSyntax.create1 = function create1(left, right) {
        return new QualifiedNameSyntax(left, Syntax.token(73 /* DotToken */ ), right);
    }
    QualifiedNameSyntax.prototype.accept = function (visitor) {
        return visitor.visitQualifiedName(this);
    };
    QualifiedNameSyntax.prototype.kind = function () {
        return 121 /* QualifiedName */ ;
    };
    QualifiedNameSyntax.prototype.isMissing = function () {
        if(!this._left.isMissing()) {
            return false;
        }
        if(!this._dotToken.isMissing()) {
            return false;
        }
        if(!this._right.isMissing()) {
            return false;
        }
        return true;
    };
    QualifiedNameSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._left.firstToken()) !== null) {
            return token;
        }
        if(this._dotToken.width() > 0) {
            return this._dotToken;
        }
        if((token = this._right.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    QualifiedNameSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._right.lastToken()) !== null) {
            return token;
        }
        if(this._dotToken.width() > 0) {
            return this._dotToken;
        }
        if((token = this._left.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    QualifiedNameSyntax.prototype.left = function () {
        return this._left;
    };
    QualifiedNameSyntax.prototype.dotToken = function () {
        return this._dotToken;
    };
    QualifiedNameSyntax.prototype.right = function () {
        return this._right;
    };
    QualifiedNameSyntax.prototype.update = function (left, dotToken, right) {
        if(this._left === left && this._dotToken === dotToken && this._right === right) {
            return this;
        }
        return new QualifiedNameSyntax(left, dotToken, right);
    };
    QualifiedNameSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    QualifiedNameSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    QualifiedNameSyntax.prototype.withLeft = function (left) {
        return this.update(left, this._dotToken, this._right);
    };
    QualifiedNameSyntax.prototype.withDotToken = function (dotToken) {
        return this.update(this._left, dotToken, this._right);
    };
    QualifiedNameSyntax.prototype.withRight = function (right) {
        return this.update(this._left, this._dotToken, right);
    };
    QualifiedNameSyntax.prototype.collectTextElements = function (elements) {
        this._left.collectTextElements(elements);
        this._dotToken.collectTextElements(elements);
        this._right.collectTextElements(elements);
    };
    QualifiedNameSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._left.isTypeScriptSpecific()) {
            return true;
        }
        if(this._right.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return QualifiedNameSyntax;
})(NameSyntax);
var ConstructorTypeSyntax = (function (_super) {
    __extends(ConstructorTypeSyntax, _super);
    function ConstructorTypeSyntax(newKeyword, parameterList, equalsGreaterThanToken, type) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(type === null) {
            throw Errors.argumentNull('type');
        }
        if(newKeyword.keywordKind() !== 29 /* NewKeyword */ ) {
            throw Errors.argument('newKeyword');
        }
        if(equalsGreaterThanToken.kind() !== 82 /* EqualsGreaterThanToken */ ) {
            throw Errors.argument('equalsGreaterThanToken');
        }
        this._newKeyword = newKeyword;
        this._parameterList = parameterList;
        this._equalsGreaterThanToken = equalsGreaterThanToken;
        this._type = type;
    }
    ConstructorTypeSyntax.create1 = function create1(type) {
        return new ConstructorTypeSyntax(Syntax.token(29 /* NewKeyword */ ), ParameterListSyntax.create1(), Syntax.token(82 /* EqualsGreaterThanToken */ ), type);
    }
    ConstructorTypeSyntax.prototype.accept = function (visitor) {
        return visitor.visitConstructorType(this);
    };
    ConstructorTypeSyntax.prototype.kind = function () {
        return 126 /* ConstructorType */ ;
    };
    ConstructorTypeSyntax.prototype.isMissing = function () {
        if(!this._newKeyword.isMissing()) {
            return false;
        }
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(!this._equalsGreaterThanToken.isMissing()) {
            return false;
        }
        if(!this._type.isMissing()) {
            return false;
        }
        return true;
    };
    ConstructorTypeSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._newKeyword.width() > 0) {
            return this._newKeyword;
        }
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._type.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ConstructorTypeSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._type.lastToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        if(this._newKeyword.width() > 0) {
            return this._newKeyword;
        }
        return null;
    };
    ConstructorTypeSyntax.prototype.newKeyword = function () {
        return this._newKeyword;
    };
    ConstructorTypeSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    ConstructorTypeSyntax.prototype.equalsGreaterThanToken = function () {
        return this._equalsGreaterThanToken;
    };
    ConstructorTypeSyntax.prototype.type = function () {
        return this._type;
    };
    ConstructorTypeSyntax.prototype.update = function (newKeyword, parameterList, equalsGreaterThanToken, type) {
        if(this._newKeyword === newKeyword && this._parameterList === parameterList && this._equalsGreaterThanToken === equalsGreaterThanToken && this._type === type) {
            return this;
        }
        return new ConstructorTypeSyntax(newKeyword, parameterList, equalsGreaterThanToken, type);
    };
    ConstructorTypeSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ConstructorTypeSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ConstructorTypeSyntax.prototype.withNewKeyword = function (newKeyword) {
        return this.update(newKeyword, this._parameterList, this._equalsGreaterThanToken, this._type);
    };
    ConstructorTypeSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(this._newKeyword, parameterList, this._equalsGreaterThanToken, this._type);
    };
    ConstructorTypeSyntax.prototype.withEqualsGreaterThanToken = function (equalsGreaterThanToken) {
        return this.update(this._newKeyword, this._parameterList, equalsGreaterThanToken, this._type);
    };
    ConstructorTypeSyntax.prototype.withType = function (type) {
        return this.update(this._newKeyword, this._parameterList, this._equalsGreaterThanToken, type);
    };
    ConstructorTypeSyntax.prototype.collectTextElements = function (elements) {
        this._newKeyword.collectTextElements(elements);
        this._parameterList.collectTextElements(elements);
        this._equalsGreaterThanToken.collectTextElements(elements);
        this._type.collectTextElements(elements);
    };
    ConstructorTypeSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ConstructorTypeSyntax;
})(TypeSyntax);
var FunctionTypeSyntax = (function (_super) {
    __extends(FunctionTypeSyntax, _super);
    function FunctionTypeSyntax(parameterList, equalsGreaterThanToken, type) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(type === null) {
            throw Errors.argumentNull('type');
        }
        if(equalsGreaterThanToken.kind() !== 82 /* EqualsGreaterThanToken */ ) {
            throw Errors.argument('equalsGreaterThanToken');
        }
        this._parameterList = parameterList;
        this._equalsGreaterThanToken = equalsGreaterThanToken;
        this._type = type;
    }
    FunctionTypeSyntax.create1 = function create1(type) {
        return new FunctionTypeSyntax(ParameterListSyntax.create1(), Syntax.token(82 /* EqualsGreaterThanToken */ ), type);
    }
    FunctionTypeSyntax.prototype.accept = function (visitor) {
        return visitor.visitFunctionType(this);
    };
    FunctionTypeSyntax.prototype.kind = function () {
        return 124 /* FunctionType */ ;
    };
    FunctionTypeSyntax.prototype.isMissing = function () {
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(!this._equalsGreaterThanToken.isMissing()) {
            return false;
        }
        if(!this._type.isMissing()) {
            return false;
        }
        return true;
    };
    FunctionTypeSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._type.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    FunctionTypeSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._type.lastToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    FunctionTypeSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    FunctionTypeSyntax.prototype.equalsGreaterThanToken = function () {
        return this._equalsGreaterThanToken;
    };
    FunctionTypeSyntax.prototype.type = function () {
        return this._type;
    };
    FunctionTypeSyntax.prototype.update = function (parameterList, equalsGreaterThanToken, type) {
        if(this._parameterList === parameterList && this._equalsGreaterThanToken === equalsGreaterThanToken && this._type === type) {
            return this;
        }
        return new FunctionTypeSyntax(parameterList, equalsGreaterThanToken, type);
    };
    FunctionTypeSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    FunctionTypeSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    FunctionTypeSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(parameterList, this._equalsGreaterThanToken, this._type);
    };
    FunctionTypeSyntax.prototype.withEqualsGreaterThanToken = function (equalsGreaterThanToken) {
        return this.update(this._parameterList, equalsGreaterThanToken, this._type);
    };
    FunctionTypeSyntax.prototype.withType = function (type) {
        return this.update(this._parameterList, this._equalsGreaterThanToken, type);
    };
    FunctionTypeSyntax.prototype.collectTextElements = function (elements) {
        this._parameterList.collectTextElements(elements);
        this._equalsGreaterThanToken.collectTextElements(elements);
        this._type.collectTextElements(elements);
    };
    FunctionTypeSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return FunctionTypeSyntax;
})(TypeSyntax);
var ObjectTypeSyntax = (function (_super) {
    __extends(ObjectTypeSyntax, _super);
    function ObjectTypeSyntax(openBraceToken, typeMembers, closeBraceToken) {
        _super.call(this);
        if(typeMembers === null) {
            throw Errors.argumentNull('typeMembers');
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._openBraceToken = openBraceToken;
        this._typeMembers = typeMembers;
        this._closeBraceToken = closeBraceToken;
    }
    ObjectTypeSyntax.create = function create(openBraceToken, closeBraceToken) {
        return new ObjectTypeSyntax(openBraceToken, Syntax.emptySeparatedList, closeBraceToken);
    }
    ObjectTypeSyntax.create1 = function create1() {
        return new ObjectTypeSyntax(Syntax.token(67 /* OpenBraceToken */ ), Syntax.emptySeparatedList, Syntax.token(68 /* CloseBraceToken */ ));
    }
    ObjectTypeSyntax.prototype.accept = function (visitor) {
        return visitor.visitObjectType(this);
    };
    ObjectTypeSyntax.prototype.kind = function () {
        return 122 /* ObjectType */ ;
    };
    ObjectTypeSyntax.prototype.isMissing = function () {
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._typeMembers.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    ObjectTypeSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._typeMembers.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    ObjectTypeSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._typeMembers.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        return null;
    };
    ObjectTypeSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    ObjectTypeSyntax.prototype.typeMembers = function () {
        return this._typeMembers;
    };
    ObjectTypeSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    ObjectTypeSyntax.prototype.update = function (openBraceToken, typeMembers, closeBraceToken) {
        if(this._openBraceToken === openBraceToken && this._typeMembers === typeMembers && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new ObjectTypeSyntax(openBraceToken, typeMembers, closeBraceToken);
    };
    ObjectTypeSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ObjectTypeSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ObjectTypeSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(openBraceToken, this._typeMembers, this._closeBraceToken);
    };
    ObjectTypeSyntax.prototype.withTypeMembers = function (typeMembers) {
        return this.update(this._openBraceToken, typeMembers, this._closeBraceToken);
    };
    ObjectTypeSyntax.prototype.withTypeMember = function (typeMember) {
        return this.withTypeMembers(Syntax.separatedList([
            typeMember
        ]));
    };
    ObjectTypeSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._openBraceToken, this._typeMembers, closeBraceToken);
    };
    ObjectTypeSyntax.prototype.collectTextElements = function (elements) {
        this._openBraceToken.collectTextElements(elements);
        this._typeMembers.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    ObjectTypeSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ObjectTypeSyntax;
})(TypeSyntax);
var ArrayTypeSyntax = (function (_super) {
    __extends(ArrayTypeSyntax, _super);
    function ArrayTypeSyntax(type, openBracketToken, closeBracketToken) {
        _super.call(this);
        if(type === null) {
            throw Errors.argumentNull('type');
        }
        if(openBracketToken.kind() !== 71 /* OpenBracketToken */ ) {
            throw Errors.argument('openBracketToken');
        }
        if(closeBracketToken.kind() !== 72 /* CloseBracketToken */ ) {
            throw Errors.argument('closeBracketToken');
        }
        this._type = type;
        this._openBracketToken = openBracketToken;
        this._closeBracketToken = closeBracketToken;
    }
    ArrayTypeSyntax.create1 = function create1(type) {
        return new ArrayTypeSyntax(type, Syntax.token(71 /* OpenBracketToken */ ), Syntax.token(72 /* CloseBracketToken */ ));
    }
    ArrayTypeSyntax.prototype.accept = function (visitor) {
        return visitor.visitArrayType(this);
    };
    ArrayTypeSyntax.prototype.kind = function () {
        return 125 /* ArrayType */ ;
    };
    ArrayTypeSyntax.prototype.isMissing = function () {
        if(!this._type.isMissing()) {
            return false;
        }
        if(!this._openBracketToken.isMissing()) {
            return false;
        }
        if(!this._closeBracketToken.isMissing()) {
            return false;
        }
        return true;
    };
    ArrayTypeSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._type.firstToken()) !== null) {
            return token;
        }
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        return null;
    };
    ArrayTypeSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        if((token = this._type.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    ArrayTypeSyntax.prototype.type = function () {
        return this._type;
    };
    ArrayTypeSyntax.prototype.openBracketToken = function () {
        return this._openBracketToken;
    };
    ArrayTypeSyntax.prototype.closeBracketToken = function () {
        return this._closeBracketToken;
    };
    ArrayTypeSyntax.prototype.update = function (type, openBracketToken, closeBracketToken) {
        if(this._type === type && this._openBracketToken === openBracketToken && this._closeBracketToken === closeBracketToken) {
            return this;
        }
        return new ArrayTypeSyntax(type, openBracketToken, closeBracketToken);
    };
    ArrayTypeSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ArrayTypeSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ArrayTypeSyntax.prototype.withType = function (type) {
        return this.update(type, this._openBracketToken, this._closeBracketToken);
    };
    ArrayTypeSyntax.prototype.withOpenBracketToken = function (openBracketToken) {
        return this.update(this._type, openBracketToken, this._closeBracketToken);
    };
    ArrayTypeSyntax.prototype.withCloseBracketToken = function (closeBracketToken) {
        return this.update(this._type, this._openBracketToken, closeBracketToken);
    };
    ArrayTypeSyntax.prototype.collectTextElements = function (elements) {
        this._type.collectTextElements(elements);
        this._openBracketToken.collectTextElements(elements);
        this._closeBracketToken.collectTextElements(elements);
    };
    ArrayTypeSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ArrayTypeSyntax;
})(TypeSyntax);
var PredefinedTypeSyntax = (function (_super) {
    __extends(PredefinedTypeSyntax, _super);
    function PredefinedTypeSyntax(keyword) {
        _super.call(this);
        switch(keyword.keywordKind()) {
            case 58 /* AnyKeyword */ :
            case 59 /* BoolKeyword */ :
            case 64 /* NumberKeyword */ :
            case 66 /* StringKeyword */ :
            case 39 /* VoidKeyword */ : {
                break;

            }
            default: {
                throw Errors.argument('keyword');

            }
        }
        this._keyword = keyword;
    }
    PredefinedTypeSyntax.prototype.accept = function (visitor) {
        return visitor.visitPredefinedType(this);
    };
    PredefinedTypeSyntax.prototype.kind = function () {
        return 123 /* PredefinedType */ ;
    };
    PredefinedTypeSyntax.prototype.isMissing = function () {
        if(!this._keyword.isMissing()) {
            return false;
        }
        return true;
    };
    PredefinedTypeSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._keyword.width() > 0) {
            return this._keyword;
        }
        return null;
    };
    PredefinedTypeSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._keyword.width() > 0) {
            return this._keyword;
        }
        return null;
    };
    PredefinedTypeSyntax.prototype.keyword = function () {
        return this._keyword;
    };
    PredefinedTypeSyntax.prototype.update = function (keyword) {
        if(this._keyword === keyword) {
            return this;
        }
        return new PredefinedTypeSyntax(keyword);
    };
    PredefinedTypeSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    PredefinedTypeSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    PredefinedTypeSyntax.prototype.withKeyword = function (keyword) {
        return this.update(keyword);
    };
    PredefinedTypeSyntax.prototype.collectTextElements = function (elements) {
        this._keyword.collectTextElements(elements);
    };
    PredefinedTypeSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return PredefinedTypeSyntax;
})(TypeSyntax);
var TypeAnnotationSyntax = (function (_super) {
    __extends(TypeAnnotationSyntax, _super);
    function TypeAnnotationSyntax(colonToken, type) {
        _super.call(this);
        if(type === null) {
            throw Errors.argumentNull('type');
        }
        if(colonToken.kind() !== 103 /* ColonToken */ ) {
            throw Errors.argument('colonToken');
        }
        this._colonToken = colonToken;
        this._type = type;
    }
    TypeAnnotationSyntax.create1 = function create1(type) {
        return new TypeAnnotationSyntax(Syntax.token(103 /* ColonToken */ ), type);
    }
    TypeAnnotationSyntax.prototype.accept = function (visitor) {
        return visitor.visitTypeAnnotation(this);
    };
    TypeAnnotationSyntax.prototype.kind = function () {
        return 241 /* TypeAnnotation */ ;
    };
    TypeAnnotationSyntax.prototype.isMissing = function () {
        if(!this._colonToken.isMissing()) {
            return false;
        }
        if(!this._type.isMissing()) {
            return false;
        }
        return true;
    };
    TypeAnnotationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._type.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    TypeAnnotationSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._type.lastToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        return null;
    };
    TypeAnnotationSyntax.prototype.colonToken = function () {
        return this._colonToken;
    };
    TypeAnnotationSyntax.prototype.type = function () {
        return this._type;
    };
    TypeAnnotationSyntax.prototype.update = function (colonToken, type) {
        if(this._colonToken === colonToken && this._type === type) {
            return this;
        }
        return new TypeAnnotationSyntax(colonToken, type);
    };
    TypeAnnotationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    TypeAnnotationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    TypeAnnotationSyntax.prototype.withColonToken = function (colonToken) {
        return this.update(colonToken, this._type);
    };
    TypeAnnotationSyntax.prototype.withType = function (type) {
        return this.update(this._colonToken, type);
    };
    TypeAnnotationSyntax.prototype.collectTextElements = function (elements) {
        this._colonToken.collectTextElements(elements);
        this._type.collectTextElements(elements);
    };
    TypeAnnotationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return TypeAnnotationSyntax;
})(SyntaxNode);
var BlockSyntax = (function (_super) {
    __extends(BlockSyntax, _super);
    function BlockSyntax(openBraceToken, statements, closeBraceToken) {
        _super.call(this);
        if(statements === null) {
            throw Errors.argumentNull('statements');
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._openBraceToken = openBraceToken;
        this._statements = statements;
        this._closeBraceToken = closeBraceToken;
    }
    BlockSyntax.create = function create(openBraceToken, closeBraceToken) {
        return new BlockSyntax(openBraceToken, Syntax.emptyList, closeBraceToken);
    }
    BlockSyntax.create1 = function create1() {
        return new BlockSyntax(Syntax.token(67 /* OpenBraceToken */ ), Syntax.emptyList, Syntax.token(68 /* CloseBraceToken */ ));
    }
    BlockSyntax.prototype.accept = function (visitor) {
        return visitor.visitBlock(this);
    };
    BlockSyntax.prototype.kind = function () {
        return 138 /* Block */ ;
    };
    BlockSyntax.prototype.isMissing = function () {
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._statements.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    BlockSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._statements.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    BlockSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._statements.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        return null;
    };
    BlockSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    BlockSyntax.prototype.statements = function () {
        return this._statements;
    };
    BlockSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    BlockSyntax.prototype.update = function (openBraceToken, statements, closeBraceToken) {
        if(this._openBraceToken === openBraceToken && this._statements === statements && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new BlockSyntax(openBraceToken, statements, closeBraceToken);
    };
    BlockSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    BlockSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    BlockSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(openBraceToken, this._statements, this._closeBraceToken);
    };
    BlockSyntax.prototype.withStatements = function (statements) {
        return this.update(this._openBraceToken, statements, this._closeBraceToken);
    };
    BlockSyntax.prototype.withStatement = function (statement) {
        return this.withStatements(Syntax.list([
            statement
        ]));
    };
    BlockSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._openBraceToken, this._statements, closeBraceToken);
    };
    BlockSyntax.prototype.collectTextElements = function (elements) {
        this._openBraceToken.collectTextElements(elements);
        this._statements.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    BlockSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._statements.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return BlockSyntax;
})(StatementSyntax);
var ParameterSyntax = (function (_super) {
    __extends(ParameterSyntax, _super);
    function ParameterSyntax(dotDotDotToken, publicOrPrivateKeyword, identifier, questionToken, typeAnnotation, equalsValueClause) {
        _super.call(this);
        if(dotDotDotToken !== null) {
            if(dotDotDotToken.kind() !== 74 /* DotDotDotToken */ ) {
                throw Errors.argument('dotDotDotToken');
            }
        }
        if(publicOrPrivateKeyword !== null) {
            if(publicOrPrivateKeyword.keywordKind() !== 55 /* PublicKeyword */  && publicOrPrivateKeyword.keywordKind() !== 53 /* PrivateKeyword */ ) {
                throw Errors.argument('publicOrPrivateKeyword');
            }
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(questionToken !== null) {
            if(questionToken.kind() !== 102 /* QuestionToken */ ) {
                throw Errors.argument('questionToken');
            }
        }
        this._dotDotDotToken = dotDotDotToken;
        this._publicOrPrivateKeyword = publicOrPrivateKeyword;
        this._identifier = identifier;
        this._questionToken = questionToken;
        this._typeAnnotation = typeAnnotation;
        this._equalsValueClause = equalsValueClause;
    }
    ParameterSyntax.create = function create(identifier) {
        return new ParameterSyntax(null, null, identifier, null, null, null);
    }
    ParameterSyntax.create1 = function create1(identifier) {
        return new ParameterSyntax(null, null, identifier, null, null, null);
    }
    ParameterSyntax.prototype.accept = function (visitor) {
        return visitor.visitParameter(this);
    };
    ParameterSyntax.prototype.kind = function () {
        return 240 /* Parameter */ ;
    };
    ParameterSyntax.prototype.isMissing = function () {
        if(this._dotDotDotToken !== null && !this._dotDotDotToken.isMissing()) {
            return false;
        }
        if(this._publicOrPrivateKeyword !== null && !this._publicOrPrivateKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(this._questionToken !== null && !this._questionToken.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        if(this._equalsValueClause !== null && !this._equalsValueClause.isMissing()) {
            return false;
        }
        return true;
    };
    ParameterSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._dotDotDotToken !== null && this._dotDotDotToken.width() > 0) {
            return this._dotDotDotToken;
        }
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._questionToken !== null && this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        if(this._equalsValueClause !== null && (token = this._equalsValueClause.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ParameterSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._equalsValueClause !== null && (token = this._equalsValueClause.lastToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if(this._questionToken !== null && this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        if(this._dotDotDotToken !== null && this._dotDotDotToken.width() > 0) {
            return this._dotDotDotToken;
        }
        return null;
    };
    ParameterSyntax.prototype.dotDotDotToken = function () {
        return this._dotDotDotToken;
    };
    ParameterSyntax.prototype.publicOrPrivateKeyword = function () {
        return this._publicOrPrivateKeyword;
    };
    ParameterSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    ParameterSyntax.prototype.questionToken = function () {
        return this._questionToken;
    };
    ParameterSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    ParameterSyntax.prototype.equalsValueClause = function () {
        return this._equalsValueClause;
    };
    ParameterSyntax.prototype.update = function (dotDotDotToken, publicOrPrivateKeyword, identifier, questionToken, typeAnnotation, equalsValueClause) {
        if(this._dotDotDotToken === dotDotDotToken && this._publicOrPrivateKeyword === publicOrPrivateKeyword && this._identifier === identifier && this._questionToken === questionToken && this._typeAnnotation === typeAnnotation && this._equalsValueClause === equalsValueClause) {
            return this;
        }
        return new ParameterSyntax(dotDotDotToken, publicOrPrivateKeyword, identifier, questionToken, typeAnnotation, equalsValueClause);
    };
    ParameterSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ParameterSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ParameterSyntax.prototype.withDotDotDotToken = function (dotDotDotToken) {
        return this.update(dotDotDotToken, this._publicOrPrivateKeyword, this._identifier, this._questionToken, this._typeAnnotation, this._equalsValueClause);
    };
    ParameterSyntax.prototype.withPublicOrPrivateKeyword = function (publicOrPrivateKeyword) {
        return this.update(this._dotDotDotToken, publicOrPrivateKeyword, this._identifier, this._questionToken, this._typeAnnotation, this._equalsValueClause);
    };
    ParameterSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._dotDotDotToken, this._publicOrPrivateKeyword, identifier, this._questionToken, this._typeAnnotation, this._equalsValueClause);
    };
    ParameterSyntax.prototype.withQuestionToken = function (questionToken) {
        return this.update(this._dotDotDotToken, this._publicOrPrivateKeyword, this._identifier, questionToken, this._typeAnnotation, this._equalsValueClause);
    };
    ParameterSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._dotDotDotToken, this._publicOrPrivateKeyword, this._identifier, this._questionToken, typeAnnotation, this._equalsValueClause);
    };
    ParameterSyntax.prototype.withEqualsValueClause = function (equalsValueClause) {
        return this.update(this._dotDotDotToken, this._publicOrPrivateKeyword, this._identifier, this._questionToken, this._typeAnnotation, equalsValueClause);
    };
    ParameterSyntax.prototype.collectTextElements = function (elements) {
        if(this._dotDotDotToken !== null) {
            this._dotDotDotToken.collectTextElements(elements);
        }
        if(this._publicOrPrivateKeyword !== null) {
            this._publicOrPrivateKeyword.collectTextElements(elements);
        }
        this._identifier.collectTextElements(elements);
        if(this._questionToken !== null) {
            this._questionToken.collectTextElements(elements);
        }
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
        if(this._equalsValueClause !== null) {
            this._equalsValueClause.collectTextElements(elements);
        }
    };
    ParameterSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._dotDotDotToken !== null) {
            return true;
        }
        if(this._publicOrPrivateKeyword !== null) {
            return true;
        }
        if(this._questionToken !== null) {
            return true;
        }
        if(this._typeAnnotation !== null) {
            return true;
        }
        if(this._equalsValueClause !== null) {
            return true;
        }
        return false;
    };
    return ParameterSyntax;
})(SyntaxNode);
var MemberAccessExpressionSyntax = (function (_super) {
    __extends(MemberAccessExpressionSyntax, _super);
    function MemberAccessExpressionSyntax(expression, dotToken, identifierName) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(identifierName === null) {
            throw Errors.argumentNull('identifierName');
        }
        if(dotToken.kind() !== 73 /* DotToken */ ) {
            throw Errors.argument('dotToken');
        }
        this._expression = expression;
        this._dotToken = dotToken;
        this._identifierName = identifierName;
    }
    MemberAccessExpressionSyntax.create1 = function create1(expression, identifierName) {
        return new MemberAccessExpressionSyntax(expression, Syntax.token(73 /* DotToken */ ), identifierName);
    }
    MemberAccessExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitMemberAccessExpression(this);
    };
    MemberAccessExpressionSyntax.prototype.kind = function () {
        return 209 /* MemberAccessExpression */ ;
    };
    MemberAccessExpressionSyntax.prototype.isMissing = function () {
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._dotToken.isMissing()) {
            return false;
        }
        if(!this._identifierName.isMissing()) {
            return false;
        }
        return true;
    };
    MemberAccessExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._dotToken.width() > 0) {
            return this._dotToken;
        }
        if((token = this._identifierName.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    MemberAccessExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._identifierName.lastToken()) !== null) {
            return token;
        }
        if(this._dotToken.width() > 0) {
            return this._dotToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    MemberAccessExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    MemberAccessExpressionSyntax.prototype.dotToken = function () {
        return this._dotToken;
    };
    MemberAccessExpressionSyntax.prototype.identifierName = function () {
        return this._identifierName;
    };
    MemberAccessExpressionSyntax.prototype.update = function (expression, dotToken, identifierName) {
        if(this._expression === expression && this._dotToken === dotToken && this._identifierName === identifierName) {
            return this;
        }
        return new MemberAccessExpressionSyntax(expression, dotToken, identifierName);
    };
    MemberAccessExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    MemberAccessExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    MemberAccessExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(expression, this._dotToken, this._identifierName);
    };
    MemberAccessExpressionSyntax.prototype.withDotToken = function (dotToken) {
        return this.update(this._expression, dotToken, this._identifierName);
    };
    MemberAccessExpressionSyntax.prototype.withIdentifierName = function (identifierName) {
        return this.update(this._expression, this._dotToken, identifierName);
    };
    MemberAccessExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._expression.collectTextElements(elements);
        this._dotToken.collectTextElements(elements);
        this._identifierName.collectTextElements(elements);
    };
    MemberAccessExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        if(this._identifierName.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return MemberAccessExpressionSyntax;
})(UnaryExpressionSyntax);
var PostfixUnaryExpressionSyntax = (function (_super) {
    __extends(PostfixUnaryExpressionSyntax, _super);
    function PostfixUnaryExpressionSyntax(kind, operand, operatorToken) {
        _super.call(this);
        if(kind === null) {
            throw Errors.argumentNull('kind');
        }
        if(operand === null) {
            throw Errors.argumentNull('operand');
        }
        if(operatorToken.kind() !== 90 /* PlusPlusToken */  && operatorToken.kind() !== 91 /* MinusMinusToken */ ) {
            throw Errors.argument('operatorToken');
        }
        this._kind = kind;
        this._operand = operand;
        this._operatorToken = operatorToken;
    }
    PostfixUnaryExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitPostfixUnaryExpression(this);
    };
    PostfixUnaryExpressionSyntax.prototype.isMissing = function () {
        if(!this._operand.isMissing()) {
            return false;
        }
        if(!this._operatorToken.isMissing()) {
            return false;
        }
        return true;
    };
    PostfixUnaryExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._operand.firstToken()) !== null) {
            return token;
        }
        if(this._operatorToken.width() > 0) {
            return this._operatorToken;
        }
        return null;
    };
    PostfixUnaryExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._operatorToken.width() > 0) {
            return this._operatorToken;
        }
        if((token = this._operand.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    PostfixUnaryExpressionSyntax.prototype.kind = function () {
        return this._kind;
    };
    PostfixUnaryExpressionSyntax.prototype.operand = function () {
        return this._operand;
    };
    PostfixUnaryExpressionSyntax.prototype.operatorToken = function () {
        return this._operatorToken;
    };
    PostfixUnaryExpressionSyntax.prototype.update = function (kind, operand, operatorToken) {
        if(this._kind === kind && this._operand === operand && this._operatorToken === operatorToken) {
            return this;
        }
        return new PostfixUnaryExpressionSyntax(kind, operand, operatorToken);
    };
    PostfixUnaryExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    PostfixUnaryExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    PostfixUnaryExpressionSyntax.prototype.withKind = function (kind) {
        return this.update(kind, this._operand, this._operatorToken);
    };
    PostfixUnaryExpressionSyntax.prototype.withOperand = function (operand) {
        return this.update(this._kind, operand, this._operatorToken);
    };
    PostfixUnaryExpressionSyntax.prototype.withOperatorToken = function (operatorToken) {
        return this.update(this._kind, this._operand, operatorToken);
    };
    PostfixUnaryExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._operand.collectTextElements(elements);
        this._operatorToken.collectTextElements(elements);
    };
    PostfixUnaryExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._operand.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return PostfixUnaryExpressionSyntax;
})(UnaryExpressionSyntax);
var ElementAccessExpressionSyntax = (function (_super) {
    __extends(ElementAccessExpressionSyntax, _super);
    function ElementAccessExpressionSyntax(expression, openBracketToken, argumentExpression, closeBracketToken) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(argumentExpression === null) {
            throw Errors.argumentNull('argumentExpression');
        }
        if(openBracketToken.kind() !== 71 /* OpenBracketToken */ ) {
            throw Errors.argument('openBracketToken');
        }
        if(closeBracketToken.kind() !== 72 /* CloseBracketToken */ ) {
            throw Errors.argument('closeBracketToken');
        }
        this._expression = expression;
        this._openBracketToken = openBracketToken;
        this._argumentExpression = argumentExpression;
        this._closeBracketToken = closeBracketToken;
    }
    ElementAccessExpressionSyntax.create1 = function create1(expression, argumentExpression) {
        return new ElementAccessExpressionSyntax(expression, Syntax.token(71 /* OpenBracketToken */ ), argumentExpression, Syntax.token(72 /* CloseBracketToken */ ));
    }
    ElementAccessExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitElementAccessExpression(this);
    };
    ElementAccessExpressionSyntax.prototype.kind = function () {
        return 219 /* ElementAccessExpression */ ;
    };
    ElementAccessExpressionSyntax.prototype.isMissing = function () {
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._openBracketToken.isMissing()) {
            return false;
        }
        if(!this._argumentExpression.isMissing()) {
            return false;
        }
        if(!this._closeBracketToken.isMissing()) {
            return false;
        }
        return true;
    };
    ElementAccessExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        if((token = this._argumentExpression.firstToken()) !== null) {
            return token;
        }
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        return null;
    };
    ElementAccessExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        if((token = this._argumentExpression.lastToken()) !== null) {
            return token;
        }
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    ElementAccessExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    ElementAccessExpressionSyntax.prototype.openBracketToken = function () {
        return this._openBracketToken;
    };
    ElementAccessExpressionSyntax.prototype.argumentExpression = function () {
        return this._argumentExpression;
    };
    ElementAccessExpressionSyntax.prototype.closeBracketToken = function () {
        return this._closeBracketToken;
    };
    ElementAccessExpressionSyntax.prototype.update = function (expression, openBracketToken, argumentExpression, closeBracketToken) {
        if(this._expression === expression && this._openBracketToken === openBracketToken && this._argumentExpression === argumentExpression && this._closeBracketToken === closeBracketToken) {
            return this;
        }
        return new ElementAccessExpressionSyntax(expression, openBracketToken, argumentExpression, closeBracketToken);
    };
    ElementAccessExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ElementAccessExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ElementAccessExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(expression, this._openBracketToken, this._argumentExpression, this._closeBracketToken);
    };
    ElementAccessExpressionSyntax.prototype.withOpenBracketToken = function (openBracketToken) {
        return this.update(this._expression, openBracketToken, this._argumentExpression, this._closeBracketToken);
    };
    ElementAccessExpressionSyntax.prototype.withArgumentExpression = function (argumentExpression) {
        return this.update(this._expression, this._openBracketToken, argumentExpression, this._closeBracketToken);
    };
    ElementAccessExpressionSyntax.prototype.withCloseBracketToken = function (closeBracketToken) {
        return this.update(this._expression, this._openBracketToken, this._argumentExpression, closeBracketToken);
    };
    ElementAccessExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._expression.collectTextElements(elements);
        this._openBracketToken.collectTextElements(elements);
        this._argumentExpression.collectTextElements(elements);
        this._closeBracketToken.collectTextElements(elements);
    };
    ElementAccessExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        if(this._argumentExpression.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ElementAccessExpressionSyntax;
})(UnaryExpressionSyntax);
var InvocationExpressionSyntax = (function (_super) {
    __extends(InvocationExpressionSyntax, _super);
    function InvocationExpressionSyntax(expression, argumentList) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(argumentList === null) {
            throw Errors.argumentNull('argumentList');
        }
        this._expression = expression;
        this._argumentList = argumentList;
    }
    InvocationExpressionSyntax.create1 = function create1(expression) {
        return new InvocationExpressionSyntax(expression, ArgumentListSyntax.create1());
    }
    InvocationExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitInvocationExpression(this);
    };
    InvocationExpressionSyntax.prototype.kind = function () {
        return 210 /* InvocationExpression */ ;
    };
    InvocationExpressionSyntax.prototype.isMissing = function () {
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._argumentList.isMissing()) {
            return false;
        }
        return true;
    };
    InvocationExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if((token = this._argumentList.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    InvocationExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._argumentList.lastToken()) !== null) {
            return token;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    InvocationExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    InvocationExpressionSyntax.prototype.argumentList = function () {
        return this._argumentList;
    };
    InvocationExpressionSyntax.prototype.update = function (expression, argumentList) {
        if(this._expression === expression && this._argumentList === argumentList) {
            return this;
        }
        return new InvocationExpressionSyntax(expression, argumentList);
    };
    InvocationExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    InvocationExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    InvocationExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(expression, this._argumentList);
    };
    InvocationExpressionSyntax.prototype.withArgumentList = function (argumentList) {
        return this.update(this._expression, argumentList);
    };
    InvocationExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._expression.collectTextElements(elements);
        this._argumentList.collectTextElements(elements);
    };
    InvocationExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        if(this._argumentList.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return InvocationExpressionSyntax;
})(UnaryExpressionSyntax);
var ArgumentListSyntax = (function (_super) {
    __extends(ArgumentListSyntax, _super);
    function ArgumentListSyntax(openParenToken, arguments, closeParenToken) {
        _super.call(this);
        if(arguments === null) {
            throw Errors.argumentNull('arguments');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._openParenToken = openParenToken;
        this._arguments = arguments;
        this._closeParenToken = closeParenToken;
    }
    ArgumentListSyntax.create = function create(openParenToken, closeParenToken) {
        return new ArgumentListSyntax(openParenToken, Syntax.emptySeparatedList, closeParenToken);
    }
    ArgumentListSyntax.create1 = function create1() {
        return new ArgumentListSyntax(Syntax.token(69 /* OpenParenToken */ ), Syntax.emptySeparatedList, Syntax.token(70 /* CloseParenToken */ ));
    }
    ArgumentListSyntax.prototype.accept = function (visitor) {
        return visitor.visitArgumentList(this);
    };
    ArgumentListSyntax.prototype.kind = function () {
        return 226 /* ArgumentList */ ;
    };
    ArgumentListSyntax.prototype.isMissing = function () {
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._arguments.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        return true;
    };
    ArgumentListSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._arguments.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        return null;
    };
    ArgumentListSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._arguments.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        return null;
    };
    ArgumentListSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    ArgumentListSyntax.prototype.arguments = function () {
        return this._arguments;
    };
    ArgumentListSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    ArgumentListSyntax.prototype.update = function (openParenToken, _arguments, closeParenToken) {
        if(this._openParenToken === openParenToken && this._arguments === _arguments && this._closeParenToken === closeParenToken) {
            return this;
        }
        return new ArgumentListSyntax(openParenToken, _arguments, closeParenToken);
    };
    ArgumentListSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ArgumentListSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ArgumentListSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(openParenToken, this._arguments, this._closeParenToken);
    };
    ArgumentListSyntax.prototype.withArguments = function (_arguments) {
        return this.update(this._openParenToken, _arguments, this._closeParenToken);
    };
    ArgumentListSyntax.prototype.withArgument = function (_argument) {
        return this.withArguments(Syntax.separatedList([
            _argument
        ]));
    };
    ArgumentListSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._openParenToken, this._arguments, closeParenToken);
    };
    ArgumentListSyntax.prototype.collectTextElements = function (elements) {
        this._openParenToken.collectTextElements(elements);
        this._arguments.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
    };
    ArgumentListSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._arguments.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ArgumentListSyntax;
})(SyntaxNode);
var BinaryExpressionSyntax = (function (_super) {
    __extends(BinaryExpressionSyntax, _super);
    function BinaryExpressionSyntax(kind, left, operatorToken, right) {
        _super.call(this);
        if(kind === null) {
            throw Errors.argumentNull('kind');
        }
        if(left === null) {
            throw Errors.argumentNull('left');
        }
        if(right === null) {
            throw Errors.argumentNull('right');
        }
        switch(operatorToken.kind()) {
            case 88 /* AsteriskToken */ :
            case 115 /* SlashToken */ :
            case 89 /* PercentToken */ :
            case 86 /* PlusToken */ :
            case 87 /* MinusToken */ :
            case 92 /* LessThanLessThanToken */ :
            case 93 /* GreaterThanGreaterThanToken */ :
            case 94 /* GreaterThanGreaterThanGreaterThanToken */ :
            case 77 /* LessThanToken */ :
            case 78 /* GreaterThanToken */ :
            case 79 /* LessThanEqualsToken */ :
            case 80 /* GreaterThanEqualsToken */ :
            case 81 /* EqualsEqualsToken */ :
            case 83 /* ExclamationEqualsToken */ :
            case 84 /* EqualsEqualsEqualsToken */ :
            case 85 /* ExclamationEqualsEqualsToken */ :
            case 95 /* AmpersandToken */ :
            case 97 /* CaretToken */ :
            case 96 /* BarToken */ :
            case 100 /* AmpersandAmpersandToken */ :
            case 101 /* BarBarToken */ :
            case 113 /* BarEqualsToken */ :
            case 112 /* AmpersandEqualsToken */ :
            case 114 /* CaretEqualsToken */ :
            case 109 /* LessThanLessThanEqualsToken */ :
            case 110 /* GreaterThanGreaterThanEqualsToken */ :
            case 111 /* GreaterThanGreaterThanGreaterThanEqualsToken */ :
            case 105 /* PlusEqualsToken */ :
            case 106 /* MinusEqualsToken */ :
            case 107 /* AsteriskEqualsToken */ :
            case 116 /* SlashEqualsToken */ :
            case 108 /* PercentEqualsToken */ :
            case 104 /* EqualsToken */ :
            case 76 /* CommaToken */ : {
                break;

            }
            case 9 /* IdentifierNameToken */ : {
                if(operatorToken.keywordKind() !== 28 /* InstanceOfKeyword */  && operatorToken.keywordKind() !== 27 /* InKeyword */ ) {
                    throw Errors.argument('operatorToken');
                }
                break;

            }
            default: {
                throw Errors.argument('operatorToken');

            }
        }
        this._kind = kind;
        this._left = left;
        this._operatorToken = operatorToken;
        this._right = right;
    }
    BinaryExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitBinaryExpression(this);
    };
    BinaryExpressionSyntax.prototype.isMissing = function () {
        if(!this._left.isMissing()) {
            return false;
        }
        if(!this._operatorToken.isMissing()) {
            return false;
        }
        if(!this._right.isMissing()) {
            return false;
        }
        return true;
    };
    BinaryExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._left.firstToken()) !== null) {
            return token;
        }
        if(this._operatorToken.width() > 0) {
            return this._operatorToken;
        }
        if((token = this._right.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    BinaryExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._right.lastToken()) !== null) {
            return token;
        }
        if(this._operatorToken.width() > 0) {
            return this._operatorToken;
        }
        if((token = this._left.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    BinaryExpressionSyntax.prototype.kind = function () {
        return this._kind;
    };
    BinaryExpressionSyntax.prototype.left = function () {
        return this._left;
    };
    BinaryExpressionSyntax.prototype.operatorToken = function () {
        return this._operatorToken;
    };
    BinaryExpressionSyntax.prototype.right = function () {
        return this._right;
    };
    BinaryExpressionSyntax.prototype.update = function (kind, left, operatorToken, right) {
        if(this._kind === kind && this._left === left && this._operatorToken === operatorToken && this._right === right) {
            return this;
        }
        return new BinaryExpressionSyntax(kind, left, operatorToken, right);
    };
    BinaryExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    BinaryExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    BinaryExpressionSyntax.prototype.withKind = function (kind) {
        return this.update(kind, this._left, this._operatorToken, this._right);
    };
    BinaryExpressionSyntax.prototype.withLeft = function (left) {
        return this.update(this._kind, left, this._operatorToken, this._right);
    };
    BinaryExpressionSyntax.prototype.withOperatorToken = function (operatorToken) {
        return this.update(this._kind, this._left, operatorToken, this._right);
    };
    BinaryExpressionSyntax.prototype.withRight = function (right) {
        return this.update(this._kind, this._left, this._operatorToken, right);
    };
    BinaryExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._left.collectTextElements(elements);
        this._operatorToken.collectTextElements(elements);
        this._right.collectTextElements(elements);
    };
    BinaryExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._left.isTypeScriptSpecific()) {
            return true;
        }
        if(this._right.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return BinaryExpressionSyntax;
})(ExpressionSyntax);
var ConditionalExpressionSyntax = (function (_super) {
    __extends(ConditionalExpressionSyntax, _super);
    function ConditionalExpressionSyntax(condition, questionToken, whenTrue, colonToken, whenFalse) {
        _super.call(this);
        if(condition === null) {
            throw Errors.argumentNull('condition');
        }
        if(whenTrue === null) {
            throw Errors.argumentNull('whenTrue');
        }
        if(whenFalse === null) {
            throw Errors.argumentNull('whenFalse');
        }
        if(questionToken.kind() !== 102 /* QuestionToken */ ) {
            throw Errors.argument('questionToken');
        }
        if(colonToken.kind() !== 103 /* ColonToken */ ) {
            throw Errors.argument('colonToken');
        }
        this._condition = condition;
        this._questionToken = questionToken;
        this._whenTrue = whenTrue;
        this._colonToken = colonToken;
        this._whenFalse = whenFalse;
    }
    ConditionalExpressionSyntax.create1 = function create1(condition, whenTrue, whenFalse) {
        return new ConditionalExpressionSyntax(condition, Syntax.token(102 /* QuestionToken */ ), whenTrue, Syntax.token(103 /* ColonToken */ ), whenFalse);
    }
    ConditionalExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitConditionalExpression(this);
    };
    ConditionalExpressionSyntax.prototype.kind = function () {
        return 183 /* ConditionalExpression */ ;
    };
    ConditionalExpressionSyntax.prototype.isMissing = function () {
        if(!this._condition.isMissing()) {
            return false;
        }
        if(!this._questionToken.isMissing()) {
            return false;
        }
        if(!this._whenTrue.isMissing()) {
            return false;
        }
        if(!this._colonToken.isMissing()) {
            return false;
        }
        if(!this._whenFalse.isMissing()) {
            return false;
        }
        return true;
    };
    ConditionalExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._condition.firstToken()) !== null) {
            return token;
        }
        if(this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if((token = this._whenTrue.firstToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._whenFalse.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ConditionalExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._whenFalse.lastToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._whenTrue.lastToken()) !== null) {
            return token;
        }
        if(this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if((token = this._condition.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    ConditionalExpressionSyntax.prototype.condition = function () {
        return this._condition;
    };
    ConditionalExpressionSyntax.prototype.questionToken = function () {
        return this._questionToken;
    };
    ConditionalExpressionSyntax.prototype.whenTrue = function () {
        return this._whenTrue;
    };
    ConditionalExpressionSyntax.prototype.colonToken = function () {
        return this._colonToken;
    };
    ConditionalExpressionSyntax.prototype.whenFalse = function () {
        return this._whenFalse;
    };
    ConditionalExpressionSyntax.prototype.update = function (condition, questionToken, whenTrue, colonToken, whenFalse) {
        if(this._condition === condition && this._questionToken === questionToken && this._whenTrue === whenTrue && this._colonToken === colonToken && this._whenFalse === whenFalse) {
            return this;
        }
        return new ConditionalExpressionSyntax(condition, questionToken, whenTrue, colonToken, whenFalse);
    };
    ConditionalExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ConditionalExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ConditionalExpressionSyntax.prototype.withCondition = function (condition) {
        return this.update(condition, this._questionToken, this._whenTrue, this._colonToken, this._whenFalse);
    };
    ConditionalExpressionSyntax.prototype.withQuestionToken = function (questionToken) {
        return this.update(this._condition, questionToken, this._whenTrue, this._colonToken, this._whenFalse);
    };
    ConditionalExpressionSyntax.prototype.withWhenTrue = function (whenTrue) {
        return this.update(this._condition, this._questionToken, whenTrue, this._colonToken, this._whenFalse);
    };
    ConditionalExpressionSyntax.prototype.withColonToken = function (colonToken) {
        return this.update(this._condition, this._questionToken, this._whenTrue, colonToken, this._whenFalse);
    };
    ConditionalExpressionSyntax.prototype.withWhenFalse = function (whenFalse) {
        return this.update(this._condition, this._questionToken, this._whenTrue, this._colonToken, whenFalse);
    };
    ConditionalExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._condition.collectTextElements(elements);
        this._questionToken.collectTextElements(elements);
        this._whenTrue.collectTextElements(elements);
        this._colonToken.collectTextElements(elements);
        this._whenFalse.collectTextElements(elements);
    };
    ConditionalExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._condition.isTypeScriptSpecific()) {
            return true;
        }
        if(this._whenTrue.isTypeScriptSpecific()) {
            return true;
        }
        if(this._whenFalse.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ConditionalExpressionSyntax;
})(ExpressionSyntax);
var TypeMemberSyntax = (function (_super) {
    __extends(TypeMemberSyntax, _super);
    function TypeMemberSyntax() {
        _super.call(this);
    }
    TypeMemberSyntax.prototype.typeAnnotation = function () {
        throw Errors.abstract();
    };
    TypeMemberSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    TypeMemberSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    TypeMemberSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return TypeMemberSyntax;
})(SyntaxNode);
var ConstructSignatureSyntax = (function (_super) {
    __extends(ConstructSignatureSyntax, _super);
    function ConstructSignatureSyntax(newKeyword, parameterList, typeAnnotation) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(newKeyword.keywordKind() !== 29 /* NewKeyword */ ) {
            throw Errors.argument('newKeyword');
        }
        this._newKeyword = newKeyword;
        this._parameterList = parameterList;
        this._typeAnnotation = typeAnnotation;
    }
    ConstructSignatureSyntax.create = function create(newKeyword, parameterList) {
        return new ConstructSignatureSyntax(newKeyword, parameterList, null);
    }
    ConstructSignatureSyntax.create1 = function create1() {
        return new ConstructSignatureSyntax(Syntax.token(29 /* NewKeyword */ ), ParameterListSyntax.create1(), null);
    }
    ConstructSignatureSyntax.prototype.accept = function (visitor) {
        return visitor.visitConstructSignature(this);
    };
    ConstructSignatureSyntax.prototype.kind = function () {
        return 237 /* ConstructSignature */ ;
    };
    ConstructSignatureSyntax.prototype.isMissing = function () {
        if(!this._newKeyword.isMissing()) {
            return false;
        }
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        return true;
    };
    ConstructSignatureSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._newKeyword.width() > 0) {
            return this._newKeyword;
        }
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ConstructSignatureSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        if(this._newKeyword.width() > 0) {
            return this._newKeyword;
        }
        return null;
    };
    ConstructSignatureSyntax.prototype.newKeyword = function () {
        return this._newKeyword;
    };
    ConstructSignatureSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    ConstructSignatureSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    ConstructSignatureSyntax.prototype.update = function (newKeyword, parameterList, typeAnnotation) {
        if(this._newKeyword === newKeyword && this._parameterList === parameterList && this._typeAnnotation === typeAnnotation) {
            return this;
        }
        return new ConstructSignatureSyntax(newKeyword, parameterList, typeAnnotation);
    };
    ConstructSignatureSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ConstructSignatureSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ConstructSignatureSyntax.prototype.withNewKeyword = function (newKeyword) {
        return this.update(newKeyword, this._parameterList, this._typeAnnotation);
    };
    ConstructSignatureSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(this._newKeyword, parameterList, this._typeAnnotation);
    };
    ConstructSignatureSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._newKeyword, this._parameterList, typeAnnotation);
    };
    ConstructSignatureSyntax.prototype.collectTextElements = function (elements) {
        this._newKeyword.collectTextElements(elements);
        this._parameterList.collectTextElements(elements);
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
    };
    ConstructSignatureSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ConstructSignatureSyntax;
})(TypeMemberSyntax);
var FunctionSignatureSyntax = (function (_super) {
    __extends(FunctionSignatureSyntax, _super);
    function FunctionSignatureSyntax(identifier, questionToken, parameterList, typeAnnotation) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(questionToken !== null) {
            if(questionToken.kind() !== 102 /* QuestionToken */ ) {
                throw Errors.argument('questionToken');
            }
        }
        this._identifier = identifier;
        this._questionToken = questionToken;
        this._parameterList = parameterList;
        this._typeAnnotation = typeAnnotation;
    }
    FunctionSignatureSyntax.create = function create(identifier, parameterList) {
        return new FunctionSignatureSyntax(identifier, null, parameterList, null);
    }
    FunctionSignatureSyntax.create1 = function create1(identifier) {
        return new FunctionSignatureSyntax(identifier, null, ParameterListSyntax.create1(), null);
    }
    FunctionSignatureSyntax.prototype.accept = function (visitor) {
        return visitor.visitFunctionSignature(this);
    };
    FunctionSignatureSyntax.prototype.kind = function () {
        return 239 /* FunctionSignature */ ;
    };
    FunctionSignatureSyntax.prototype.isMissing = function () {
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(this._questionToken !== null && !this._questionToken.isMissing()) {
            return false;
        }
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        return true;
    };
    FunctionSignatureSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._questionToken !== null && this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    FunctionSignatureSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        if(this._questionToken !== null && this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    FunctionSignatureSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    FunctionSignatureSyntax.prototype.questionToken = function () {
        return this._questionToken;
    };
    FunctionSignatureSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    FunctionSignatureSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    FunctionSignatureSyntax.prototype.update = function (identifier, questionToken, parameterList, typeAnnotation) {
        if(this._identifier === identifier && this._questionToken === questionToken && this._parameterList === parameterList && this._typeAnnotation === typeAnnotation) {
            return this;
        }
        return new FunctionSignatureSyntax(identifier, questionToken, parameterList, typeAnnotation);
    };
    FunctionSignatureSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    FunctionSignatureSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    FunctionSignatureSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(identifier, this._questionToken, this._parameterList, this._typeAnnotation);
    };
    FunctionSignatureSyntax.prototype.withQuestionToken = function (questionToken) {
        return this.update(this._identifier, questionToken, this._parameterList, this._typeAnnotation);
    };
    FunctionSignatureSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(this._identifier, this._questionToken, parameterList, this._typeAnnotation);
    };
    FunctionSignatureSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._identifier, this._questionToken, this._parameterList, typeAnnotation);
    };
    FunctionSignatureSyntax.prototype.collectTextElements = function (elements) {
        this._identifier.collectTextElements(elements);
        if(this._questionToken !== null) {
            this._questionToken.collectTextElements(elements);
        }
        this._parameterList.collectTextElements(elements);
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
    };
    FunctionSignatureSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._parameterList.isTypeScriptSpecific()) {
            return true;
        }
        if(this._typeAnnotation !== null && this._typeAnnotation.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return FunctionSignatureSyntax;
})(TypeMemberSyntax);
var IndexSignatureSyntax = (function (_super) {
    __extends(IndexSignatureSyntax, _super);
    function IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, typeAnnotation) {
        _super.call(this);
        if(parameter === null) {
            throw Errors.argumentNull('parameter');
        }
        if(openBracketToken.kind() !== 71 /* OpenBracketToken */ ) {
            throw Errors.argument('openBracketToken');
        }
        if(closeBracketToken.kind() !== 72 /* CloseBracketToken */ ) {
            throw Errors.argument('closeBracketToken');
        }
        this._openBracketToken = openBracketToken;
        this._parameter = parameter;
        this._closeBracketToken = closeBracketToken;
        this._typeAnnotation = typeAnnotation;
    }
    IndexSignatureSyntax.create = function create(openBracketToken, parameter, closeBracketToken) {
        return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, null);
    }
    IndexSignatureSyntax.create1 = function create1(parameter) {
        return new IndexSignatureSyntax(Syntax.token(71 /* OpenBracketToken */ ), parameter, Syntax.token(72 /* CloseBracketToken */ ), null);
    }
    IndexSignatureSyntax.prototype.accept = function (visitor) {
        return visitor.visitIndexSignature(this);
    };
    IndexSignatureSyntax.prototype.kind = function () {
        return 238 /* IndexSignature */ ;
    };
    IndexSignatureSyntax.prototype.isMissing = function () {
        if(!this._openBracketToken.isMissing()) {
            return false;
        }
        if(!this._parameter.isMissing()) {
            return false;
        }
        if(!this._closeBracketToken.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        return true;
    };
    IndexSignatureSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        if((token = this._parameter.firstToken()) !== null) {
            return token;
        }
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    IndexSignatureSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        if((token = this._parameter.lastToken()) !== null) {
            return token;
        }
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        return null;
    };
    IndexSignatureSyntax.prototype.openBracketToken = function () {
        return this._openBracketToken;
    };
    IndexSignatureSyntax.prototype.parameter = function () {
        return this._parameter;
    };
    IndexSignatureSyntax.prototype.closeBracketToken = function () {
        return this._closeBracketToken;
    };
    IndexSignatureSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    IndexSignatureSyntax.prototype.update = function (openBracketToken, parameter, closeBracketToken, typeAnnotation) {
        if(this._openBracketToken === openBracketToken && this._parameter === parameter && this._closeBracketToken === closeBracketToken && this._typeAnnotation === typeAnnotation) {
            return this;
        }
        return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, typeAnnotation);
    };
    IndexSignatureSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    IndexSignatureSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    IndexSignatureSyntax.prototype.withOpenBracketToken = function (openBracketToken) {
        return this.update(openBracketToken, this._parameter, this._closeBracketToken, this._typeAnnotation);
    };
    IndexSignatureSyntax.prototype.withParameter = function (parameter) {
        return this.update(this._openBracketToken, parameter, this._closeBracketToken, this._typeAnnotation);
    };
    IndexSignatureSyntax.prototype.withCloseBracketToken = function (closeBracketToken) {
        return this.update(this._openBracketToken, this._parameter, closeBracketToken, this._typeAnnotation);
    };
    IndexSignatureSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._openBracketToken, this._parameter, this._closeBracketToken, typeAnnotation);
    };
    IndexSignatureSyntax.prototype.collectTextElements = function (elements) {
        this._openBracketToken.collectTextElements(elements);
        this._parameter.collectTextElements(elements);
        this._closeBracketToken.collectTextElements(elements);
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
    };
    IndexSignatureSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return IndexSignatureSyntax;
})(TypeMemberSyntax);
var PropertySignatureSyntax = (function (_super) {
    __extends(PropertySignatureSyntax, _super);
    function PropertySignatureSyntax(identifier, questionToken, typeAnnotation) {
        _super.call(this);
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(questionToken !== null) {
            if(questionToken.kind() !== 102 /* QuestionToken */ ) {
                throw Errors.argument('questionToken');
            }
        }
        this._identifier = identifier;
        this._questionToken = questionToken;
        this._typeAnnotation = typeAnnotation;
    }
    PropertySignatureSyntax.create = function create(identifier) {
        return new PropertySignatureSyntax(identifier, null, null);
    }
    PropertySignatureSyntax.create1 = function create1(identifier) {
        return new PropertySignatureSyntax(identifier, null, null);
    }
    PropertySignatureSyntax.prototype.accept = function (visitor) {
        return visitor.visitPropertySignature(this);
    };
    PropertySignatureSyntax.prototype.kind = function () {
        return 235 /* PropertySignature */ ;
    };
    PropertySignatureSyntax.prototype.isMissing = function () {
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(this._questionToken !== null && !this._questionToken.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        return true;
    };
    PropertySignatureSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._questionToken !== null && this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    PropertySignatureSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if(this._questionToken !== null && this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    PropertySignatureSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    PropertySignatureSyntax.prototype.questionToken = function () {
        return this._questionToken;
    };
    PropertySignatureSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    PropertySignatureSyntax.prototype.update = function (identifier, questionToken, typeAnnotation) {
        if(this._identifier === identifier && this._questionToken === questionToken && this._typeAnnotation === typeAnnotation) {
            return this;
        }
        return new PropertySignatureSyntax(identifier, questionToken, typeAnnotation);
    };
    PropertySignatureSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    PropertySignatureSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    PropertySignatureSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(identifier, this._questionToken, this._typeAnnotation);
    };
    PropertySignatureSyntax.prototype.withQuestionToken = function (questionToken) {
        return this.update(this._identifier, questionToken, this._typeAnnotation);
    };
    PropertySignatureSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._identifier, this._questionToken, typeAnnotation);
    };
    PropertySignatureSyntax.prototype.collectTextElements = function (elements) {
        this._identifier.collectTextElements(elements);
        if(this._questionToken !== null) {
            this._questionToken.collectTextElements(elements);
        }
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
    };
    PropertySignatureSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return PropertySignatureSyntax;
})(TypeMemberSyntax);
var ParameterListSyntax = (function (_super) {
    __extends(ParameterListSyntax, _super);
    function ParameterListSyntax(openParenToken, parameters, closeParenToken) {
        _super.call(this);
        if(parameters === null) {
            throw Errors.argumentNull('parameters');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._openParenToken = openParenToken;
        this._parameters = parameters;
        this._closeParenToken = closeParenToken;
    }
    ParameterListSyntax.create = function create(openParenToken, closeParenToken) {
        return new ParameterListSyntax(openParenToken, Syntax.emptySeparatedList, closeParenToken);
    }
    ParameterListSyntax.create1 = function create1() {
        return new ParameterListSyntax(Syntax.token(69 /* OpenParenToken */ ), Syntax.emptySeparatedList, Syntax.token(70 /* CloseParenToken */ ));
    }
    ParameterListSyntax.prototype.accept = function (visitor) {
        return visitor.visitParameterList(this);
    };
    ParameterListSyntax.prototype.kind = function () {
        return 225 /* ParameterList */ ;
    };
    ParameterListSyntax.prototype.isMissing = function () {
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._parameters.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        return true;
    };
    ParameterListSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._parameters.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        return null;
    };
    ParameterListSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._parameters.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        return null;
    };
    ParameterListSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    ParameterListSyntax.prototype.parameters = function () {
        return this._parameters;
    };
    ParameterListSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    ParameterListSyntax.prototype.update = function (openParenToken, parameters, closeParenToken) {
        if(this._openParenToken === openParenToken && this._parameters === parameters && this._closeParenToken === closeParenToken) {
            return this;
        }
        return new ParameterListSyntax(openParenToken, parameters, closeParenToken);
    };
    ParameterListSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ParameterListSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ParameterListSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(openParenToken, this._parameters, this._closeParenToken);
    };
    ParameterListSyntax.prototype.withParameters = function (parameters) {
        return this.update(this._openParenToken, parameters, this._closeParenToken);
    };
    ParameterListSyntax.prototype.withParameter = function (parameter) {
        return this.withParameters(Syntax.separatedList([
            parameter
        ]));
    };
    ParameterListSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._openParenToken, this._parameters, closeParenToken);
    };
    ParameterListSyntax.prototype.collectTextElements = function (elements) {
        this._openParenToken.collectTextElements(elements);
        this._parameters.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
    };
    ParameterListSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._parameters.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ParameterListSyntax;
})(SyntaxNode);
var CallSignatureSyntax = (function (_super) {
    __extends(CallSignatureSyntax, _super);
    function CallSignatureSyntax(parameterList, typeAnnotation) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        this._parameterList = parameterList;
        this._typeAnnotation = typeAnnotation;
    }
    CallSignatureSyntax.create = function create(parameterList) {
        return new CallSignatureSyntax(parameterList, null);
    }
    CallSignatureSyntax.create1 = function create1() {
        return new CallSignatureSyntax(ParameterListSyntax.create1(), null);
    }
    CallSignatureSyntax.prototype.accept = function (visitor) {
        return visitor.visitCallSignature(this);
    };
    CallSignatureSyntax.prototype.kind = function () {
        return 236 /* CallSignature */ ;
    };
    CallSignatureSyntax.prototype.isMissing = function () {
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        return true;
    };
    CallSignatureSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    CallSignatureSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    CallSignatureSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    CallSignatureSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    CallSignatureSyntax.prototype.update = function (parameterList, typeAnnotation) {
        if(this._parameterList === parameterList && this._typeAnnotation === typeAnnotation) {
            return this;
        }
        return new CallSignatureSyntax(parameterList, typeAnnotation);
    };
    CallSignatureSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    CallSignatureSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    CallSignatureSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(parameterList, this._typeAnnotation);
    };
    CallSignatureSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._parameterList, typeAnnotation);
    };
    CallSignatureSyntax.prototype.collectTextElements = function (elements) {
        this._parameterList.collectTextElements(elements);
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
    };
    CallSignatureSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._parameterList.isTypeScriptSpecific()) {
            return true;
        }
        if(this._typeAnnotation !== null) {
            return true;
        }
        return false;
    };
    return CallSignatureSyntax;
})(TypeMemberSyntax);
var ElseClauseSyntax = (function (_super) {
    __extends(ElseClauseSyntax, _super);
    function ElseClauseSyntax(elseKeyword, statement) {
        _super.call(this);
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(elseKeyword.keywordKind() !== 21 /* ElseKeyword */ ) {
            throw Errors.argument('elseKeyword');
        }
        this._elseKeyword = elseKeyword;
        this._statement = statement;
    }
    ElseClauseSyntax.create1 = function create1(statement) {
        return new ElseClauseSyntax(Syntax.token(21 /* ElseKeyword */ ), statement);
    }
    ElseClauseSyntax.prototype.accept = function (visitor) {
        return visitor.visitElseClause(this);
    };
    ElseClauseSyntax.prototype.kind = function () {
        return 232 /* ElseClause */ ;
    };
    ElseClauseSyntax.prototype.isMissing = function () {
        if(!this._elseKeyword.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        return true;
    };
    ElseClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._elseKeyword.width() > 0) {
            return this._elseKeyword;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ElseClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._elseKeyword.width() > 0) {
            return this._elseKeyword;
        }
        return null;
    };
    ElseClauseSyntax.prototype.elseKeyword = function () {
        return this._elseKeyword;
    };
    ElseClauseSyntax.prototype.statement = function () {
        return this._statement;
    };
    ElseClauseSyntax.prototype.update = function (elseKeyword, statement) {
        if(this._elseKeyword === elseKeyword && this._statement === statement) {
            return this;
        }
        return new ElseClauseSyntax(elseKeyword, statement);
    };
    ElseClauseSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ElseClauseSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ElseClauseSyntax.prototype.withElseKeyword = function (elseKeyword) {
        return this.update(elseKeyword, this._statement);
    };
    ElseClauseSyntax.prototype.withStatement = function (statement) {
        return this.update(this._elseKeyword, statement);
    };
    ElseClauseSyntax.prototype.collectTextElements = function (elements) {
        this._elseKeyword.collectTextElements(elements);
        this._statement.collectTextElements(elements);
    };
    ElseClauseSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._statement.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ElseClauseSyntax;
})(SyntaxNode);
var IfStatementSyntax = (function (_super) {
    __extends(IfStatementSyntax, _super);
    function IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause) {
        _super.call(this);
        if(condition === null) {
            throw Errors.argumentNull('condition');
        }
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(ifKeyword.keywordKind() !== 26 /* IfKeyword */ ) {
            throw Errors.argument('ifKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._ifKeyword = ifKeyword;
        this._openParenToken = openParenToken;
        this._condition = condition;
        this._closeParenToken = closeParenToken;
        this._statement = statement;
        this._elseClause = elseClause;
    }
    IfStatementSyntax.create = function create(ifKeyword, openParenToken, condition, closeParenToken, statement) {
        return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, null);
    }
    IfStatementSyntax.create1 = function create1(condition, statement) {
        return new IfStatementSyntax(Syntax.token(26 /* IfKeyword */ ), Syntax.token(69 /* OpenParenToken */ ), condition, Syntax.token(70 /* CloseParenToken */ ), statement, null);
    }
    IfStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitIfStatement(this);
    };
    IfStatementSyntax.prototype.kind = function () {
        return 139 /* IfStatement */ ;
    };
    IfStatementSyntax.prototype.isMissing = function () {
        if(!this._ifKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._condition.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        if(this._elseClause !== null && !this._elseClause.isMissing()) {
            return false;
        }
        return true;
    };
    IfStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._ifKeyword.width() > 0) {
            return this._ifKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._condition.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        if(this._elseClause !== null && (token = this._elseClause.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    IfStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._elseClause !== null && (token = this._elseClause.lastToken()) !== null) {
            return token;
        }
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._condition.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._ifKeyword.width() > 0) {
            return this._ifKeyword;
        }
        return null;
    };
    IfStatementSyntax.prototype.ifKeyword = function () {
        return this._ifKeyword;
    };
    IfStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    IfStatementSyntax.prototype.condition = function () {
        return this._condition;
    };
    IfStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    IfStatementSyntax.prototype.statement = function () {
        return this._statement;
    };
    IfStatementSyntax.prototype.elseClause = function () {
        return this._elseClause;
    };
    IfStatementSyntax.prototype.update = function (ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause) {
        if(this._ifKeyword === ifKeyword && this._openParenToken === openParenToken && this._condition === condition && this._closeParenToken === closeParenToken && this._statement === statement && this._elseClause === elseClause) {
            return this;
        }
        return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause);
    };
    IfStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    IfStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    IfStatementSyntax.prototype.withIfKeyword = function (ifKeyword) {
        return this.update(ifKeyword, this._openParenToken, this._condition, this._closeParenToken, this._statement, this._elseClause);
    };
    IfStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._ifKeyword, openParenToken, this._condition, this._closeParenToken, this._statement, this._elseClause);
    };
    IfStatementSyntax.prototype.withCondition = function (condition) {
        return this.update(this._ifKeyword, this._openParenToken, condition, this._closeParenToken, this._statement, this._elseClause);
    };
    IfStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._ifKeyword, this._openParenToken, this._condition, closeParenToken, this._statement, this._elseClause);
    };
    IfStatementSyntax.prototype.withStatement = function (statement) {
        return this.update(this._ifKeyword, this._openParenToken, this._condition, this._closeParenToken, statement, this._elseClause);
    };
    IfStatementSyntax.prototype.withElseClause = function (elseClause) {
        return this.update(this._ifKeyword, this._openParenToken, this._condition, this._closeParenToken, this._statement, elseClause);
    };
    IfStatementSyntax.prototype.collectTextElements = function (elements) {
        this._ifKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._condition.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._statement.collectTextElements(elements);
        if(this._elseClause !== null) {
            this._elseClause.collectTextElements(elements);
        }
    };
    IfStatementSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._condition.isTypeScriptSpecific()) {
            return true;
        }
        if(this._statement.isTypeScriptSpecific()) {
            return true;
        }
        if(this._elseClause !== null && this._elseClause.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return IfStatementSyntax;
})(StatementSyntax);
var ExpressionStatementSyntax = (function (_super) {
    __extends(ExpressionStatementSyntax, _super);
    function ExpressionStatementSyntax(expression, semicolonToken) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._expression = expression;
        this._semicolonToken = semicolonToken;
    }
    ExpressionStatementSyntax.create1 = function create1(expression) {
        return new ExpressionStatementSyntax(expression, Syntax.token(75 /* SemicolonToken */ ));
    }
    ExpressionStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitExpressionStatement(this);
    };
    ExpressionStatementSyntax.prototype.kind = function () {
        return 141 /* ExpressionStatement */ ;
    };
    ExpressionStatementSyntax.prototype.isMissing = function () {
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    ExpressionStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    ExpressionStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    ExpressionStatementSyntax.prototype.expression = function () {
        return this._expression;
    };
    ExpressionStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    ExpressionStatementSyntax.prototype.update = function (expression, semicolonToken) {
        if(this._expression === expression && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new ExpressionStatementSyntax(expression, semicolonToken);
    };
    ExpressionStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ExpressionStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ExpressionStatementSyntax.prototype.withExpression = function (expression) {
        return this.update(expression, this._semicolonToken);
    };
    ExpressionStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._expression, semicolonToken);
    };
    ExpressionStatementSyntax.prototype.collectTextElements = function (elements) {
        this._expression.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    ExpressionStatementSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ExpressionStatementSyntax;
})(StatementSyntax);
var ClassElementSyntax = (function (_super) {
    __extends(ClassElementSyntax, _super);
    function ClassElementSyntax() {
        _super.call(this);
    }
    ClassElementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ClassElementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ClassElementSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ClassElementSyntax;
})(SyntaxNode);
var ConstructorDeclarationSyntax = (function (_super) {
    __extends(ConstructorDeclarationSyntax, _super);
    function ConstructorDeclarationSyntax(constructorKeyword, parameterList, block, semicolonToken) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(constructorKeyword.keywordKind() !== 60 /* ConstructorKeyword */ ) {
            throw Errors.argument('constructorKeyword');
        }
        if(semicolonToken !== null) {
            if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
                throw Errors.argument('semicolonToken');
            }
        }
        this._constructorKeyword = constructorKeyword;
        this._parameterList = parameterList;
        this._block = block;
        this._semicolonToken = semicolonToken;
    }
    ConstructorDeclarationSyntax.create = function create(constructorKeyword, parameterList) {
        return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, null, null);
    }
    ConstructorDeclarationSyntax.create1 = function create1() {
        return new ConstructorDeclarationSyntax(Syntax.token(60 /* ConstructorKeyword */ ), ParameterListSyntax.create1(), null, null);
    }
    ConstructorDeclarationSyntax.prototype.accept = function (visitor) {
        return visitor.visitConstructorDeclaration(this);
    };
    ConstructorDeclarationSyntax.prototype.kind = function () {
        return 135 /* ConstructorDeclaration */ ;
    };
    ConstructorDeclarationSyntax.prototype.isMissing = function () {
        if(!this._constructorKeyword.isMissing()) {
            return false;
        }
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(this._block !== null && !this._block.isMissing()) {
            return false;
        }
        if(this._semicolonToken !== null && !this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    ConstructorDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._constructorKeyword.width() > 0) {
            return this._constructorKeyword;
        }
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._block !== null && (token = this._block.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken !== null && this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    ConstructorDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken !== null && this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._block !== null && (token = this._block.lastToken()) !== null) {
            return token;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        if(this._constructorKeyword.width() > 0) {
            return this._constructorKeyword;
        }
        return null;
    };
    ConstructorDeclarationSyntax.prototype.constructorKeyword = function () {
        return this._constructorKeyword;
    };
    ConstructorDeclarationSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    ConstructorDeclarationSyntax.prototype.block = function () {
        return this._block;
    };
    ConstructorDeclarationSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    ConstructorDeclarationSyntax.prototype.update = function (constructorKeyword, parameterList, block, semicolonToken) {
        if(this._constructorKeyword === constructorKeyword && this._parameterList === parameterList && this._block === block && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, block, semicolonToken);
    };
    ConstructorDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ConstructorDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ConstructorDeclarationSyntax.prototype.withConstructorKeyword = function (constructorKeyword) {
        return this.update(constructorKeyword, this._parameterList, this._block, this._semicolonToken);
    };
    ConstructorDeclarationSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(this._constructorKeyword, parameterList, this._block, this._semicolonToken);
    };
    ConstructorDeclarationSyntax.prototype.withBlock = function (block) {
        return this.update(this._constructorKeyword, this._parameterList, block, this._semicolonToken);
    };
    ConstructorDeclarationSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._constructorKeyword, this._parameterList, this._block, semicolonToken);
    };
    ConstructorDeclarationSyntax.prototype.collectTextElements = function (elements) {
        this._constructorKeyword.collectTextElements(elements);
        this._parameterList.collectTextElements(elements);
        if(this._block !== null) {
            this._block.collectTextElements(elements);
        }
        if(this._semicolonToken !== null) {
            this._semicolonToken.collectTextElements(elements);
        }
    };
    ConstructorDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return ConstructorDeclarationSyntax;
})(ClassElementSyntax);
var MemberDeclarationSyntax = (function (_super) {
    __extends(MemberDeclarationSyntax, _super);
    function MemberDeclarationSyntax() {
        _super.call(this);
    }
    MemberDeclarationSyntax.prototype.publicOrPrivateKeyword = function () {
        throw Errors.abstract();
    };
    MemberDeclarationSyntax.prototype.staticKeyword = function () {
        throw Errors.abstract();
    };
    MemberDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    MemberDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    MemberDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return MemberDeclarationSyntax;
})(ClassElementSyntax);
var MemberFunctionDeclarationSyntax = (function (_super) {
    __extends(MemberFunctionDeclarationSyntax, _super);
    function MemberFunctionDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, functionSignature, block, semicolonToken) {
        _super.call(this);
        if(functionSignature === null) {
            throw Errors.argumentNull('functionSignature');
        }
        if(publicOrPrivateKeyword !== null) {
            if(publicOrPrivateKeyword.keywordKind() !== 55 /* PublicKeyword */  && publicOrPrivateKeyword.keywordKind() !== 53 /* PrivateKeyword */ ) {
                throw Errors.argument('publicOrPrivateKeyword');
            }
        }
        if(staticKeyword !== null) {
            if(staticKeyword.keywordKind() !== 56 /* StaticKeyword */ ) {
                throw Errors.argument('staticKeyword');
            }
        }
        if(semicolonToken !== null) {
            if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
                throw Errors.argument('semicolonToken');
            }
        }
        this._publicOrPrivateKeyword = publicOrPrivateKeyword;
        this._staticKeyword = staticKeyword;
        this._functionSignature = functionSignature;
        this._block = block;
        this._semicolonToken = semicolonToken;
    }
    MemberFunctionDeclarationSyntax.create = function create(functionSignature) {
        return new MemberFunctionDeclarationSyntax(null, null, functionSignature, null, null);
    }
    MemberFunctionDeclarationSyntax.create1 = function create1(functionSignature) {
        return new MemberFunctionDeclarationSyntax(null, null, functionSignature, null, null);
    }
    MemberFunctionDeclarationSyntax.prototype.accept = function (visitor) {
        return visitor.visitMemberFunctionDeclaration(this);
    };
    MemberFunctionDeclarationSyntax.prototype.kind = function () {
        return 133 /* MemberFunctionDeclaration */ ;
    };
    MemberFunctionDeclarationSyntax.prototype.isMissing = function () {
        if(this._publicOrPrivateKeyword !== null && !this._publicOrPrivateKeyword.isMissing()) {
            return false;
        }
        if(this._staticKeyword !== null && !this._staticKeyword.isMissing()) {
            return false;
        }
        if(!this._functionSignature.isMissing()) {
            return false;
        }
        if(this._block !== null && !this._block.isMissing()) {
            return false;
        }
        if(this._semicolonToken !== null && !this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    MemberFunctionDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if((token = this._functionSignature.firstToken()) !== null) {
            return token;
        }
        if(this._block !== null && (token = this._block.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken !== null && this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    MemberFunctionDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken !== null && this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._block !== null && (token = this._block.lastToken()) !== null) {
            return token;
        }
        if((token = this._functionSignature.lastToken()) !== null) {
            return token;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        return null;
    };
    MemberFunctionDeclarationSyntax.prototype.publicOrPrivateKeyword = function () {
        return this._publicOrPrivateKeyword;
    };
    MemberFunctionDeclarationSyntax.prototype.staticKeyword = function () {
        return this._staticKeyword;
    };
    MemberFunctionDeclarationSyntax.prototype.functionSignature = function () {
        return this._functionSignature;
    };
    MemberFunctionDeclarationSyntax.prototype.block = function () {
        return this._block;
    };
    MemberFunctionDeclarationSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    MemberFunctionDeclarationSyntax.prototype.update = function (publicOrPrivateKeyword, staticKeyword, functionSignature, block, semicolonToken) {
        if(this._publicOrPrivateKeyword === publicOrPrivateKeyword && this._staticKeyword === staticKeyword && this._functionSignature === functionSignature && this._block === block && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new MemberFunctionDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, functionSignature, block, semicolonToken);
    };
    MemberFunctionDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    MemberFunctionDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    MemberFunctionDeclarationSyntax.prototype.withPublicOrPrivateKeyword = function (publicOrPrivateKeyword) {
        return this.update(publicOrPrivateKeyword, this._staticKeyword, this._functionSignature, this._block, this._semicolonToken);
    };
    MemberFunctionDeclarationSyntax.prototype.withStaticKeyword = function (staticKeyword) {
        return this.update(this._publicOrPrivateKeyword, staticKeyword, this._functionSignature, this._block, this._semicolonToken);
    };
    MemberFunctionDeclarationSyntax.prototype.withFunctionSignature = function (functionSignature) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, functionSignature, this._block, this._semicolonToken);
    };
    MemberFunctionDeclarationSyntax.prototype.withBlock = function (block) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._functionSignature, block, this._semicolonToken);
    };
    MemberFunctionDeclarationSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._functionSignature, this._block, semicolonToken);
    };
    MemberFunctionDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._publicOrPrivateKeyword !== null) {
            this._publicOrPrivateKeyword.collectTextElements(elements);
        }
        if(this._staticKeyword !== null) {
            this._staticKeyword.collectTextElements(elements);
        }
        this._functionSignature.collectTextElements(elements);
        if(this._block !== null) {
            this._block.collectTextElements(elements);
        }
        if(this._semicolonToken !== null) {
            this._semicolonToken.collectTextElements(elements);
        }
    };
    MemberFunctionDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return MemberFunctionDeclarationSyntax;
})(MemberDeclarationSyntax);
var MemberAccessorDeclarationSyntax = (function (_super) {
    __extends(MemberAccessorDeclarationSyntax, _super);
    function MemberAccessorDeclarationSyntax() {
        _super.call(this);
    }
    MemberAccessorDeclarationSyntax.prototype.publicOrPrivateKeyword = function () {
        throw Errors.abstract();
    };
    MemberAccessorDeclarationSyntax.prototype.staticKeyword = function () {
        throw Errors.abstract();
    };
    MemberAccessorDeclarationSyntax.prototype.identifier = function () {
        throw Errors.abstract();
    };
    MemberAccessorDeclarationSyntax.prototype.parameterList = function () {
        throw Errors.abstract();
    };
    MemberAccessorDeclarationSyntax.prototype.block = function () {
        throw Errors.abstract();
    };
    MemberAccessorDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    MemberAccessorDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    MemberAccessorDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return MemberAccessorDeclarationSyntax;
})(MemberDeclarationSyntax);
var GetMemberAccessorDeclarationSyntax = (function (_super) {
    __extends(GetMemberAccessorDeclarationSyntax, _super);
    function GetMemberAccessorDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, getKeyword, identifier, parameterList, typeAnnotation, block) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(publicOrPrivateKeyword !== null) {
            if(publicOrPrivateKeyword.keywordKind() !== 55 /* PublicKeyword */  && publicOrPrivateKeyword.keywordKind() !== 53 /* PrivateKeyword */ ) {
                throw Errors.argument('publicOrPrivateKeyword');
            }
        }
        if(staticKeyword !== null) {
            if(staticKeyword.keywordKind() !== 56 /* StaticKeyword */ ) {
                throw Errors.argument('staticKeyword');
            }
        }
        if(getKeyword.keywordKind() !== 62 /* GetKeyword */ ) {
            throw Errors.argument('getKeyword');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        this._publicOrPrivateKeyword = publicOrPrivateKeyword;
        this._staticKeyword = staticKeyword;
        this._getKeyword = getKeyword;
        this._identifier = identifier;
        this._parameterList = parameterList;
        this._typeAnnotation = typeAnnotation;
        this._block = block;
    }
    GetMemberAccessorDeclarationSyntax.create = function create(getKeyword, identifier, parameterList, block) {
        return new GetMemberAccessorDeclarationSyntax(null, null, getKeyword, identifier, parameterList, null, block);
    }
    GetMemberAccessorDeclarationSyntax.create1 = function create1(identifier) {
        return new GetMemberAccessorDeclarationSyntax(null, null, Syntax.token(62 /* GetKeyword */ ), identifier, ParameterListSyntax.create1(), null, BlockSyntax.create1());
    }
    GetMemberAccessorDeclarationSyntax.prototype.accept = function (visitor) {
        return visitor.visitGetMemberAccessorDeclaration(this);
    };
    GetMemberAccessorDeclarationSyntax.prototype.kind = function () {
        return 136 /* GetMemberAccessorDeclaration */ ;
    };
    GetMemberAccessorDeclarationSyntax.prototype.isMissing = function () {
        if(this._publicOrPrivateKeyword !== null && !this._publicOrPrivateKeyword.isMissing()) {
            return false;
        }
        if(this._staticKeyword !== null && !this._staticKeyword.isMissing()) {
            return false;
        }
        if(!this._getKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    GetMemberAccessorDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if(this._getKeyword.width() > 0) {
            return this._getKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    GetMemberAccessorDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._getKeyword.width() > 0) {
            return this._getKeyword;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        return null;
    };
    GetMemberAccessorDeclarationSyntax.prototype.publicOrPrivateKeyword = function () {
        return this._publicOrPrivateKeyword;
    };
    GetMemberAccessorDeclarationSyntax.prototype.staticKeyword = function () {
        return this._staticKeyword;
    };
    GetMemberAccessorDeclarationSyntax.prototype.getKeyword = function () {
        return this._getKeyword;
    };
    GetMemberAccessorDeclarationSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    GetMemberAccessorDeclarationSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    GetMemberAccessorDeclarationSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    GetMemberAccessorDeclarationSyntax.prototype.block = function () {
        return this._block;
    };
    GetMemberAccessorDeclarationSyntax.prototype.update = function (publicOrPrivateKeyword, staticKeyword, getKeyword, identifier, parameterList, typeAnnotation, block) {
        if(this._publicOrPrivateKeyword === publicOrPrivateKeyword && this._staticKeyword === staticKeyword && this._getKeyword === getKeyword && this._identifier === identifier && this._parameterList === parameterList && this._typeAnnotation === typeAnnotation && this._block === block) {
            return this;
        }
        return new GetMemberAccessorDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, getKeyword, identifier, parameterList, typeAnnotation, block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withPublicOrPrivateKeyword = function (publicOrPrivateKeyword) {
        return this.update(publicOrPrivateKeyword, this._staticKeyword, this._getKeyword, this._identifier, this._parameterList, this._typeAnnotation, this._block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withStaticKeyword = function (staticKeyword) {
        return this.update(this._publicOrPrivateKeyword, staticKeyword, this._getKeyword, this._identifier, this._parameterList, this._typeAnnotation, this._block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withGetKeyword = function (getKeyword) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, getKeyword, this._identifier, this._parameterList, this._typeAnnotation, this._block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._getKeyword, identifier, this._parameterList, this._typeAnnotation, this._block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._getKeyword, this._identifier, parameterList, this._typeAnnotation, this._block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._getKeyword, this._identifier, this._parameterList, typeAnnotation, this._block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withBlock = function (block) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._getKeyword, this._identifier, this._parameterList, this._typeAnnotation, block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._publicOrPrivateKeyword !== null) {
            this._publicOrPrivateKeyword.collectTextElements(elements);
        }
        if(this._staticKeyword !== null) {
            this._staticKeyword.collectTextElements(elements);
        }
        this._getKeyword.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        this._parameterList.collectTextElements(elements);
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
        this._block.collectTextElements(elements);
    };
    GetMemberAccessorDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return GetMemberAccessorDeclarationSyntax;
})(MemberAccessorDeclarationSyntax);
var SetMemberAccessorDeclarationSyntax = (function (_super) {
    __extends(SetMemberAccessorDeclarationSyntax, _super);
    function SetMemberAccessorDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, setKeyword, identifier, parameterList, block) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(publicOrPrivateKeyword !== null) {
            if(publicOrPrivateKeyword.keywordKind() !== 55 /* PublicKeyword */  && publicOrPrivateKeyword.keywordKind() !== 53 /* PrivateKeyword */ ) {
                throw Errors.argument('publicOrPrivateKeyword');
            }
        }
        if(staticKeyword !== null) {
            if(staticKeyword.keywordKind() !== 56 /* StaticKeyword */ ) {
                throw Errors.argument('staticKeyword');
            }
        }
        if(setKeyword.keywordKind() !== 65 /* SetKeyword */ ) {
            throw Errors.argument('setKeyword');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        this._publicOrPrivateKeyword = publicOrPrivateKeyword;
        this._staticKeyword = staticKeyword;
        this._setKeyword = setKeyword;
        this._identifier = identifier;
        this._parameterList = parameterList;
        this._block = block;
    }
    SetMemberAccessorDeclarationSyntax.create = function create(setKeyword, identifier, parameterList, block) {
        return new SetMemberAccessorDeclarationSyntax(null, null, setKeyword, identifier, parameterList, block);
    }
    SetMemberAccessorDeclarationSyntax.create1 = function create1(identifier) {
        return new SetMemberAccessorDeclarationSyntax(null, null, Syntax.token(65 /* SetKeyword */ ), identifier, ParameterListSyntax.create1(), BlockSyntax.create1());
    }
    SetMemberAccessorDeclarationSyntax.prototype.accept = function (visitor) {
        return visitor.visitSetMemberAccessorDeclaration(this);
    };
    SetMemberAccessorDeclarationSyntax.prototype.kind = function () {
        return 137 /* SetMemberAccessorDeclaration */ ;
    };
    SetMemberAccessorDeclarationSyntax.prototype.isMissing = function () {
        if(this._publicOrPrivateKeyword !== null && !this._publicOrPrivateKeyword.isMissing()) {
            return false;
        }
        if(this._staticKeyword !== null && !this._staticKeyword.isMissing()) {
            return false;
        }
        if(!this._setKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    SetMemberAccessorDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if(this._setKeyword.width() > 0) {
            return this._setKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    SetMemberAccessorDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._setKeyword.width() > 0) {
            return this._setKeyword;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        return null;
    };
    SetMemberAccessorDeclarationSyntax.prototype.publicOrPrivateKeyword = function () {
        return this._publicOrPrivateKeyword;
    };
    SetMemberAccessorDeclarationSyntax.prototype.staticKeyword = function () {
        return this._staticKeyword;
    };
    SetMemberAccessorDeclarationSyntax.prototype.setKeyword = function () {
        return this._setKeyword;
    };
    SetMemberAccessorDeclarationSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    SetMemberAccessorDeclarationSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    SetMemberAccessorDeclarationSyntax.prototype.block = function () {
        return this._block;
    };
    SetMemberAccessorDeclarationSyntax.prototype.update = function (publicOrPrivateKeyword, staticKeyword, setKeyword, identifier, parameterList, block) {
        if(this._publicOrPrivateKeyword === publicOrPrivateKeyword && this._staticKeyword === staticKeyword && this._setKeyword === setKeyword && this._identifier === identifier && this._parameterList === parameterList && this._block === block) {
            return this;
        }
        return new SetMemberAccessorDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, setKeyword, identifier, parameterList, block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withPublicOrPrivateKeyword = function (publicOrPrivateKeyword) {
        return this.update(publicOrPrivateKeyword, this._staticKeyword, this._setKeyword, this._identifier, this._parameterList, this._block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withStaticKeyword = function (staticKeyword) {
        return this.update(this._publicOrPrivateKeyword, staticKeyword, this._setKeyword, this._identifier, this._parameterList, this._block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withSetKeyword = function (setKeyword) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, setKeyword, this._identifier, this._parameterList, this._block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._setKeyword, identifier, this._parameterList, this._block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._setKeyword, this._identifier, parameterList, this._block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withBlock = function (block) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._setKeyword, this._identifier, this._parameterList, block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._publicOrPrivateKeyword !== null) {
            this._publicOrPrivateKeyword.collectTextElements(elements);
        }
        if(this._staticKeyword !== null) {
            this._staticKeyword.collectTextElements(elements);
        }
        this._setKeyword.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        this._parameterList.collectTextElements(elements);
        this._block.collectTextElements(elements);
    };
    SetMemberAccessorDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return SetMemberAccessorDeclarationSyntax;
})(MemberAccessorDeclarationSyntax);
var MemberVariableDeclarationSyntax = (function (_super) {
    __extends(MemberVariableDeclarationSyntax, _super);
    function MemberVariableDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, variableDeclarator, semicolonToken) {
        _super.call(this);
        if(variableDeclarator === null) {
            throw Errors.argumentNull('variableDeclarator');
        }
        if(publicOrPrivateKeyword !== null) {
            if(publicOrPrivateKeyword.keywordKind() !== 55 /* PublicKeyword */  && publicOrPrivateKeyword.keywordKind() !== 53 /* PrivateKeyword */ ) {
                throw Errors.argument('publicOrPrivateKeyword');
            }
        }
        if(staticKeyword !== null) {
            if(staticKeyword.keywordKind() !== 56 /* StaticKeyword */ ) {
                throw Errors.argument('staticKeyword');
            }
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._publicOrPrivateKeyword = publicOrPrivateKeyword;
        this._staticKeyword = staticKeyword;
        this._variableDeclarator = variableDeclarator;
        this._semicolonToken = semicolonToken;
    }
    MemberVariableDeclarationSyntax.create = function create(variableDeclarator, semicolonToken) {
        return new MemberVariableDeclarationSyntax(null, null, variableDeclarator, semicolonToken);
    }
    MemberVariableDeclarationSyntax.create1 = function create1(variableDeclarator) {
        return new MemberVariableDeclarationSyntax(null, null, variableDeclarator, Syntax.token(75 /* SemicolonToken */ ));
    }
    MemberVariableDeclarationSyntax.prototype.accept = function (visitor) {
        return visitor.visitMemberVariableDeclaration(this);
    };
    MemberVariableDeclarationSyntax.prototype.kind = function () {
        return 134 /* MemberVariableDeclaration */ ;
    };
    MemberVariableDeclarationSyntax.prototype.isMissing = function () {
        if(this._publicOrPrivateKeyword !== null && !this._publicOrPrivateKeyword.isMissing()) {
            return false;
        }
        if(this._staticKeyword !== null && !this._staticKeyword.isMissing()) {
            return false;
        }
        if(!this._variableDeclarator.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    MemberVariableDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if((token = this._variableDeclarator.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    MemberVariableDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if((token = this._variableDeclarator.lastToken()) !== null) {
            return token;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        return null;
    };
    MemberVariableDeclarationSyntax.prototype.publicOrPrivateKeyword = function () {
        return this._publicOrPrivateKeyword;
    };
    MemberVariableDeclarationSyntax.prototype.staticKeyword = function () {
        return this._staticKeyword;
    };
    MemberVariableDeclarationSyntax.prototype.variableDeclarator = function () {
        return this._variableDeclarator;
    };
    MemberVariableDeclarationSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    MemberVariableDeclarationSyntax.prototype.update = function (publicOrPrivateKeyword, staticKeyword, variableDeclarator, semicolonToken) {
        if(this._publicOrPrivateKeyword === publicOrPrivateKeyword && this._staticKeyword === staticKeyword && this._variableDeclarator === variableDeclarator && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new MemberVariableDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, variableDeclarator, semicolonToken);
    };
    MemberVariableDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    MemberVariableDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    MemberVariableDeclarationSyntax.prototype.withPublicOrPrivateKeyword = function (publicOrPrivateKeyword) {
        return this.update(publicOrPrivateKeyword, this._staticKeyword, this._variableDeclarator, this._semicolonToken);
    };
    MemberVariableDeclarationSyntax.prototype.withStaticKeyword = function (staticKeyword) {
        return this.update(this._publicOrPrivateKeyword, staticKeyword, this._variableDeclarator, this._semicolonToken);
    };
    MemberVariableDeclarationSyntax.prototype.withVariableDeclarator = function (variableDeclarator) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, variableDeclarator, this._semicolonToken);
    };
    MemberVariableDeclarationSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._variableDeclarator, semicolonToken);
    };
    MemberVariableDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._publicOrPrivateKeyword !== null) {
            this._publicOrPrivateKeyword.collectTextElements(elements);
        }
        if(this._staticKeyword !== null) {
            this._staticKeyword.collectTextElements(elements);
        }
        this._variableDeclarator.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    MemberVariableDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return MemberVariableDeclarationSyntax;
})(MemberDeclarationSyntax);
var ThrowStatementSyntax = (function (_super) {
    __extends(ThrowStatementSyntax, _super);
    function ThrowStatementSyntax(throwKeyword, expression, semicolonToken) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(throwKeyword.keywordKind() !== 34 /* ThrowKeyword */ ) {
            throw Errors.argument('throwKeyword');
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._throwKeyword = throwKeyword;
        this._expression = expression;
        this._semicolonToken = semicolonToken;
    }
    ThrowStatementSyntax.create1 = function create1(expression) {
        return new ThrowStatementSyntax(Syntax.token(34 /* ThrowKeyword */ ), expression, Syntax.token(75 /* SemicolonToken */ ));
    }
    ThrowStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitThrowStatement(this);
    };
    ThrowStatementSyntax.prototype.kind = function () {
        return 149 /* ThrowStatement */ ;
    };
    ThrowStatementSyntax.prototype.isMissing = function () {
        if(!this._throwKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    ThrowStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._throwKeyword.width() > 0) {
            return this._throwKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    ThrowStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._throwKeyword.width() > 0) {
            return this._throwKeyword;
        }
        return null;
    };
    ThrowStatementSyntax.prototype.throwKeyword = function () {
        return this._throwKeyword;
    };
    ThrowStatementSyntax.prototype.expression = function () {
        return this._expression;
    };
    ThrowStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    ThrowStatementSyntax.prototype.update = function (throwKeyword, expression, semicolonToken) {
        if(this._throwKeyword === throwKeyword && this._expression === expression && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new ThrowStatementSyntax(throwKeyword, expression, semicolonToken);
    };
    ThrowStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ThrowStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ThrowStatementSyntax.prototype.withThrowKeyword = function (throwKeyword) {
        return this.update(throwKeyword, this._expression, this._semicolonToken);
    };
    ThrowStatementSyntax.prototype.withExpression = function (expression) {
        return this.update(this._throwKeyword, expression, this._semicolonToken);
    };
    ThrowStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._throwKeyword, this._expression, semicolonToken);
    };
    ThrowStatementSyntax.prototype.collectTextElements = function (elements) {
        this._throwKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    ThrowStatementSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ThrowStatementSyntax;
})(StatementSyntax);
var ReturnStatementSyntax = (function (_super) {
    __extends(ReturnStatementSyntax, _super);
    function ReturnStatementSyntax(returnKeyword, expression, semicolonToken) {
        _super.call(this);
        if(returnKeyword.keywordKind() !== 31 /* ReturnKeyword */ ) {
            throw Errors.argument('returnKeyword');
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._returnKeyword = returnKeyword;
        this._expression = expression;
        this._semicolonToken = semicolonToken;
    }
    ReturnStatementSyntax.create = function create(returnKeyword, semicolonToken) {
        return new ReturnStatementSyntax(returnKeyword, null, semicolonToken);
    }
    ReturnStatementSyntax.create1 = function create1() {
        return new ReturnStatementSyntax(Syntax.token(31 /* ReturnKeyword */ ), null, Syntax.token(75 /* SemicolonToken */ ));
    }
    ReturnStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitReturnStatement(this);
    };
    ReturnStatementSyntax.prototype.kind = function () {
        return 142 /* ReturnStatement */ ;
    };
    ReturnStatementSyntax.prototype.isMissing = function () {
        if(!this._returnKeyword.isMissing()) {
            return false;
        }
        if(this._expression !== null && !this._expression.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    ReturnStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._returnKeyword.width() > 0) {
            return this._returnKeyword;
        }
        if(this._expression !== null && (token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    ReturnStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._expression !== null && (token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._returnKeyword.width() > 0) {
            return this._returnKeyword;
        }
        return null;
    };
    ReturnStatementSyntax.prototype.returnKeyword = function () {
        return this._returnKeyword;
    };
    ReturnStatementSyntax.prototype.expression = function () {
        return this._expression;
    };
    ReturnStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    ReturnStatementSyntax.prototype.update = function (returnKeyword, expression, semicolonToken) {
        if(this._returnKeyword === returnKeyword && this._expression === expression && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new ReturnStatementSyntax(returnKeyword, expression, semicolonToken);
    };
    ReturnStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ReturnStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ReturnStatementSyntax.prototype.withReturnKeyword = function (returnKeyword) {
        return this.update(returnKeyword, this._expression, this._semicolonToken);
    };
    ReturnStatementSyntax.prototype.withExpression = function (expression) {
        return this.update(this._returnKeyword, expression, this._semicolonToken);
    };
    ReturnStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._returnKeyword, this._expression, semicolonToken);
    };
    ReturnStatementSyntax.prototype.collectTextElements = function (elements) {
        this._returnKeyword.collectTextElements(elements);
        if(this._expression !== null) {
            this._expression.collectTextElements(elements);
        }
        this._semicolonToken.collectTextElements(elements);
    };
    ReturnStatementSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression !== null && this._expression.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ReturnStatementSyntax;
})(StatementSyntax);
var ObjectCreationExpressionSyntax = (function (_super) {
    __extends(ObjectCreationExpressionSyntax, _super);
    function ObjectCreationExpressionSyntax(newKeyword, expression, argumentList) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(newKeyword.keywordKind() !== 29 /* NewKeyword */ ) {
            throw Errors.argument('newKeyword');
        }
        this._newKeyword = newKeyword;
        this._expression = expression;
        this._argumentList = argumentList;
    }
    ObjectCreationExpressionSyntax.create = function create(newKeyword, expression) {
        return new ObjectCreationExpressionSyntax(newKeyword, expression, null);
    }
    ObjectCreationExpressionSyntax.create1 = function create1(expression) {
        return new ObjectCreationExpressionSyntax(Syntax.token(29 /* NewKeyword */ ), expression, null);
    }
    ObjectCreationExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitObjectCreationExpression(this);
    };
    ObjectCreationExpressionSyntax.prototype.kind = function () {
        return 214 /* ObjectCreationExpression */ ;
    };
    ObjectCreationExpressionSyntax.prototype.isMissing = function () {
        if(!this._newKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        if(this._argumentList !== null && !this._argumentList.isMissing()) {
            return false;
        }
        return true;
    };
    ObjectCreationExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._newKeyword.width() > 0) {
            return this._newKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._argumentList !== null && (token = this._argumentList.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ObjectCreationExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._argumentList !== null && (token = this._argumentList.lastToken()) !== null) {
            return token;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._newKeyword.width() > 0) {
            return this._newKeyword;
        }
        return null;
    };
    ObjectCreationExpressionSyntax.prototype.newKeyword = function () {
        return this._newKeyword;
    };
    ObjectCreationExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    ObjectCreationExpressionSyntax.prototype.argumentList = function () {
        return this._argumentList;
    };
    ObjectCreationExpressionSyntax.prototype.update = function (newKeyword, expression, argumentList) {
        if(this._newKeyword === newKeyword && this._expression === expression && this._argumentList === argumentList) {
            return this;
        }
        return new ObjectCreationExpressionSyntax(newKeyword, expression, argumentList);
    };
    ObjectCreationExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ObjectCreationExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ObjectCreationExpressionSyntax.prototype.withNewKeyword = function (newKeyword) {
        return this.update(newKeyword, this._expression, this._argumentList);
    };
    ObjectCreationExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(this._newKeyword, expression, this._argumentList);
    };
    ObjectCreationExpressionSyntax.prototype.withArgumentList = function (argumentList) {
        return this.update(this._newKeyword, this._expression, argumentList);
    };
    ObjectCreationExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._newKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
        if(this._argumentList !== null) {
            this._argumentList.collectTextElements(elements);
        }
    };
    ObjectCreationExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        if(this._argumentList !== null && this._argumentList.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ObjectCreationExpressionSyntax;
})(UnaryExpressionSyntax);
var SwitchStatementSyntax = (function (_super) {
    __extends(SwitchStatementSyntax, _super);
    function SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, switchClauses, closeBraceToken) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(switchClauses === null) {
            throw Errors.argumentNull('switchClauses');
        }
        if(switchKeyword.keywordKind() !== 32 /* SwitchKeyword */ ) {
            throw Errors.argument('switchKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._switchKeyword = switchKeyword;
        this._openParenToken = openParenToken;
        this._expression = expression;
        this._closeParenToken = closeParenToken;
        this._openBraceToken = openBraceToken;
        this._switchClauses = switchClauses;
        this._closeBraceToken = closeBraceToken;
    }
    SwitchStatementSyntax.create = function create(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, closeBraceToken) {
        return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, Syntax.emptyList, closeBraceToken);
    }
    SwitchStatementSyntax.create1 = function create1(expression) {
        return new SwitchStatementSyntax(Syntax.token(32 /* SwitchKeyword */ ), Syntax.token(69 /* OpenParenToken */ ), expression, Syntax.token(70 /* CloseParenToken */ ), Syntax.token(67 /* OpenBraceToken */ ), Syntax.emptyList, Syntax.token(68 /* CloseBraceToken */ ));
    }
    SwitchStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitSwitchStatement(this);
    };
    SwitchStatementSyntax.prototype.kind = function () {
        return 143 /* SwitchStatement */ ;
    };
    SwitchStatementSyntax.prototype.isMissing = function () {
        if(!this._switchKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._switchClauses.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    SwitchStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._switchKeyword.width() > 0) {
            return this._switchKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._switchClauses.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    SwitchStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._switchClauses.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._switchKeyword.width() > 0) {
            return this._switchKeyword;
        }
        return null;
    };
    SwitchStatementSyntax.prototype.switchKeyword = function () {
        return this._switchKeyword;
    };
    SwitchStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    SwitchStatementSyntax.prototype.expression = function () {
        return this._expression;
    };
    SwitchStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    SwitchStatementSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    SwitchStatementSyntax.prototype.switchClauses = function () {
        return this._switchClauses;
    };
    SwitchStatementSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    SwitchStatementSyntax.prototype.update = function (switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, switchClauses, closeBraceToken) {
        if(this._switchKeyword === switchKeyword && this._openParenToken === openParenToken && this._expression === expression && this._closeParenToken === closeParenToken && this._openBraceToken === openBraceToken && this._switchClauses === switchClauses && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, switchClauses, closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    SwitchStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    SwitchStatementSyntax.prototype.withSwitchKeyword = function (switchKeyword) {
        return this.update(switchKeyword, this._openParenToken, this._expression, this._closeParenToken, this._openBraceToken, this._switchClauses, this._closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._switchKeyword, openParenToken, this._expression, this._closeParenToken, this._openBraceToken, this._switchClauses, this._closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withExpression = function (expression) {
        return this.update(this._switchKeyword, this._openParenToken, expression, this._closeParenToken, this._openBraceToken, this._switchClauses, this._closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._switchKeyword, this._openParenToken, this._expression, closeParenToken, this._openBraceToken, this._switchClauses, this._closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(this._switchKeyword, this._openParenToken, this._expression, this._closeParenToken, openBraceToken, this._switchClauses, this._closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withSwitchClauses = function (switchClauses) {
        return this.update(this._switchKeyword, this._openParenToken, this._expression, this._closeParenToken, this._openBraceToken, switchClauses, this._closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withSwitchClause = function (switchClause) {
        return this.withSwitchClauses(Syntax.list([
            switchClause
        ]));
    };
    SwitchStatementSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._switchKeyword, this._openParenToken, this._expression, this._closeParenToken, this._openBraceToken, this._switchClauses, closeBraceToken);
    };
    SwitchStatementSyntax.prototype.collectTextElements = function (elements) {
        this._switchKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._expression.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._openBraceToken.collectTextElements(elements);
        this._switchClauses.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    SwitchStatementSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        if(this._switchClauses.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return SwitchStatementSyntax;
})(StatementSyntax);
var SwitchClauseSyntax = (function (_super) {
    __extends(SwitchClauseSyntax, _super);
    function SwitchClauseSyntax() {
        _super.call(this);
    }
    SwitchClauseSyntax.prototype.colonToken = function () {
        throw Errors.abstract();
    };
    SwitchClauseSyntax.prototype.statements = function () {
        throw Errors.abstract();
    };
    SwitchClauseSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    SwitchClauseSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    SwitchClauseSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return SwitchClauseSyntax;
})(SyntaxNode);
var CaseSwitchClauseSyntax = (function (_super) {
    __extends(CaseSwitchClauseSyntax, _super);
    function CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, statements) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(statements === null) {
            throw Errors.argumentNull('statements');
        }
        if(caseKeyword.keywordKind() !== 14 /* CaseKeyword */ ) {
            throw Errors.argument('caseKeyword');
        }
        if(colonToken.kind() !== 103 /* ColonToken */ ) {
            throw Errors.argument('colonToken');
        }
        this._caseKeyword = caseKeyword;
        this._expression = expression;
        this._colonToken = colonToken;
        this._statements = statements;
    }
    CaseSwitchClauseSyntax.create = function create(caseKeyword, expression, colonToken) {
        return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, Syntax.emptyList);
    }
    CaseSwitchClauseSyntax.create1 = function create1(expression) {
        return new CaseSwitchClauseSyntax(Syntax.token(14 /* CaseKeyword */ ), expression, Syntax.token(103 /* ColonToken */ ), Syntax.emptyList);
    }
    CaseSwitchClauseSyntax.prototype.accept = function (visitor) {
        return visitor.visitCaseSwitchClause(this);
    };
    CaseSwitchClauseSyntax.prototype.kind = function () {
        return 230 /* CaseSwitchClause */ ;
    };
    CaseSwitchClauseSyntax.prototype.isMissing = function () {
        if(!this._caseKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._colonToken.isMissing()) {
            return false;
        }
        if(!this._statements.isMissing()) {
            return false;
        }
        return true;
    };
    CaseSwitchClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._caseKeyword.width() > 0) {
            return this._caseKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._statements.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    CaseSwitchClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statements.lastToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._caseKeyword.width() > 0) {
            return this._caseKeyword;
        }
        return null;
    };
    CaseSwitchClauseSyntax.prototype.caseKeyword = function () {
        return this._caseKeyword;
    };
    CaseSwitchClauseSyntax.prototype.expression = function () {
        return this._expression;
    };
    CaseSwitchClauseSyntax.prototype.colonToken = function () {
        return this._colonToken;
    };
    CaseSwitchClauseSyntax.prototype.statements = function () {
        return this._statements;
    };
    CaseSwitchClauseSyntax.prototype.update = function (caseKeyword, expression, colonToken, statements) {
        if(this._caseKeyword === caseKeyword && this._expression === expression && this._colonToken === colonToken && this._statements === statements) {
            return this;
        }
        return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, statements);
    };
    CaseSwitchClauseSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    CaseSwitchClauseSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    CaseSwitchClauseSyntax.prototype.withCaseKeyword = function (caseKeyword) {
        return this.update(caseKeyword, this._expression, this._colonToken, this._statements);
    };
    CaseSwitchClauseSyntax.prototype.withExpression = function (expression) {
        return this.update(this._caseKeyword, expression, this._colonToken, this._statements);
    };
    CaseSwitchClauseSyntax.prototype.withColonToken = function (colonToken) {
        return this.update(this._caseKeyword, this._expression, colonToken, this._statements);
    };
    CaseSwitchClauseSyntax.prototype.withStatements = function (statements) {
        return this.update(this._caseKeyword, this._expression, this._colonToken, statements);
    };
    CaseSwitchClauseSyntax.prototype.withStatement = function (statement) {
        return this.withStatements(Syntax.list([
            statement
        ]));
    };
    CaseSwitchClauseSyntax.prototype.collectTextElements = function (elements) {
        this._caseKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
        this._colonToken.collectTextElements(elements);
        this._statements.collectTextElements(elements);
    };
    CaseSwitchClauseSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        if(this._statements.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return CaseSwitchClauseSyntax;
})(SwitchClauseSyntax);
var DefaultSwitchClauseSyntax = (function (_super) {
    __extends(DefaultSwitchClauseSyntax, _super);
    function DefaultSwitchClauseSyntax(defaultKeyword, colonToken, statements) {
        _super.call(this);
        if(statements === null) {
            throw Errors.argumentNull('statements');
        }
        if(defaultKeyword.keywordKind() !== 18 /* DefaultKeyword */ ) {
            throw Errors.argument('defaultKeyword');
        }
        if(colonToken.kind() !== 103 /* ColonToken */ ) {
            throw Errors.argument('colonToken');
        }
        this._defaultKeyword = defaultKeyword;
        this._colonToken = colonToken;
        this._statements = statements;
    }
    DefaultSwitchClauseSyntax.create = function create(defaultKeyword, colonToken) {
        return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, Syntax.emptyList);
    }
    DefaultSwitchClauseSyntax.create1 = function create1() {
        return new DefaultSwitchClauseSyntax(Syntax.token(18 /* DefaultKeyword */ ), Syntax.token(103 /* ColonToken */ ), Syntax.emptyList);
    }
    DefaultSwitchClauseSyntax.prototype.accept = function (visitor) {
        return visitor.visitDefaultSwitchClause(this);
    };
    DefaultSwitchClauseSyntax.prototype.kind = function () {
        return 231 /* DefaultSwitchClause */ ;
    };
    DefaultSwitchClauseSyntax.prototype.isMissing = function () {
        if(!this._defaultKeyword.isMissing()) {
            return false;
        }
        if(!this._colonToken.isMissing()) {
            return false;
        }
        if(!this._statements.isMissing()) {
            return false;
        }
        return true;
    };
    DefaultSwitchClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._defaultKeyword.width() > 0) {
            return this._defaultKeyword;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._statements.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    DefaultSwitchClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statements.lastToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if(this._defaultKeyword.width() > 0) {
            return this._defaultKeyword;
        }
        return null;
    };
    DefaultSwitchClauseSyntax.prototype.defaultKeyword = function () {
        return this._defaultKeyword;
    };
    DefaultSwitchClauseSyntax.prototype.colonToken = function () {
        return this._colonToken;
    };
    DefaultSwitchClauseSyntax.prototype.statements = function () {
        return this._statements;
    };
    DefaultSwitchClauseSyntax.prototype.update = function (defaultKeyword, colonToken, statements) {
        if(this._defaultKeyword === defaultKeyword && this._colonToken === colonToken && this._statements === statements) {
            return this;
        }
        return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, statements);
    };
    DefaultSwitchClauseSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    DefaultSwitchClauseSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    DefaultSwitchClauseSyntax.prototype.withDefaultKeyword = function (defaultKeyword) {
        return this.update(defaultKeyword, this._colonToken, this._statements);
    };
    DefaultSwitchClauseSyntax.prototype.withColonToken = function (colonToken) {
        return this.update(this._defaultKeyword, colonToken, this._statements);
    };
    DefaultSwitchClauseSyntax.prototype.withStatements = function (statements) {
        return this.update(this._defaultKeyword, this._colonToken, statements);
    };
    DefaultSwitchClauseSyntax.prototype.withStatement = function (statement) {
        return this.withStatements(Syntax.list([
            statement
        ]));
    };
    DefaultSwitchClauseSyntax.prototype.collectTextElements = function (elements) {
        this._defaultKeyword.collectTextElements(elements);
        this._colonToken.collectTextElements(elements);
        this._statements.collectTextElements(elements);
    };
    DefaultSwitchClauseSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._statements.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return DefaultSwitchClauseSyntax;
})(SwitchClauseSyntax);
var BreakStatementSyntax = (function (_super) {
    __extends(BreakStatementSyntax, _super);
    function BreakStatementSyntax(breakKeyword, identifier, semicolonToken) {
        _super.call(this);
        if(breakKeyword.keywordKind() !== 13 /* BreakKeyword */ ) {
            throw Errors.argument('breakKeyword');
        }
        if(identifier !== null) {
            if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
                throw Errors.argument('identifier');
            }
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._breakKeyword = breakKeyword;
        this._identifier = identifier;
        this._semicolonToken = semicolonToken;
    }
    BreakStatementSyntax.create = function create(breakKeyword, semicolonToken) {
        return new BreakStatementSyntax(breakKeyword, null, semicolonToken);
    }
    BreakStatementSyntax.create1 = function create1() {
        return new BreakStatementSyntax(Syntax.token(13 /* BreakKeyword */ ), null, Syntax.token(75 /* SemicolonToken */ ));
    }
    BreakStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitBreakStatement(this);
    };
    BreakStatementSyntax.prototype.kind = function () {
        return 144 /* BreakStatement */ ;
    };
    BreakStatementSyntax.prototype.isMissing = function () {
        if(!this._breakKeyword.isMissing()) {
            return false;
        }
        if(this._identifier !== null && !this._identifier.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    BreakStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._breakKeyword.width() > 0) {
            return this._breakKeyword;
        }
        if(this._identifier !== null && this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    BreakStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._identifier !== null && this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._breakKeyword.width() > 0) {
            return this._breakKeyword;
        }
        return null;
    };
    BreakStatementSyntax.prototype.breakKeyword = function () {
        return this._breakKeyword;
    };
    BreakStatementSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    BreakStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    BreakStatementSyntax.prototype.update = function (breakKeyword, identifier, semicolonToken) {
        if(this._breakKeyword === breakKeyword && this._identifier === identifier && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new BreakStatementSyntax(breakKeyword, identifier, semicolonToken);
    };
    BreakStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    BreakStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    BreakStatementSyntax.prototype.withBreakKeyword = function (breakKeyword) {
        return this.update(breakKeyword, this._identifier, this._semicolonToken);
    };
    BreakStatementSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._breakKeyword, identifier, this._semicolonToken);
    };
    BreakStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._breakKeyword, this._identifier, semicolonToken);
    };
    BreakStatementSyntax.prototype.collectTextElements = function (elements) {
        this._breakKeyword.collectTextElements(elements);
        if(this._identifier !== null) {
            this._identifier.collectTextElements(elements);
        }
        this._semicolonToken.collectTextElements(elements);
    };
    BreakStatementSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return BreakStatementSyntax;
})(StatementSyntax);
var ContinueStatementSyntax = (function (_super) {
    __extends(ContinueStatementSyntax, _super);
    function ContinueStatementSyntax(continueKeyword, identifier, semicolonToken) {
        _super.call(this);
        if(continueKeyword.keywordKind() !== 16 /* ContinueKeyword */ ) {
            throw Errors.argument('continueKeyword');
        }
        if(identifier !== null) {
            if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
                throw Errors.argument('identifier');
            }
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._continueKeyword = continueKeyword;
        this._identifier = identifier;
        this._semicolonToken = semicolonToken;
    }
    ContinueStatementSyntax.create = function create(continueKeyword, semicolonToken) {
        return new ContinueStatementSyntax(continueKeyword, null, semicolonToken);
    }
    ContinueStatementSyntax.create1 = function create1() {
        return new ContinueStatementSyntax(Syntax.token(16 /* ContinueKeyword */ ), null, Syntax.token(75 /* SemicolonToken */ ));
    }
    ContinueStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitContinueStatement(this);
    };
    ContinueStatementSyntax.prototype.kind = function () {
        return 145 /* ContinueStatement */ ;
    };
    ContinueStatementSyntax.prototype.isMissing = function () {
        if(!this._continueKeyword.isMissing()) {
            return false;
        }
        if(this._identifier !== null && !this._identifier.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    ContinueStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._continueKeyword.width() > 0) {
            return this._continueKeyword;
        }
        if(this._identifier !== null && this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    ContinueStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._identifier !== null && this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._continueKeyword.width() > 0) {
            return this._continueKeyword;
        }
        return null;
    };
    ContinueStatementSyntax.prototype.continueKeyword = function () {
        return this._continueKeyword;
    };
    ContinueStatementSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    ContinueStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    ContinueStatementSyntax.prototype.update = function (continueKeyword, identifier, semicolonToken) {
        if(this._continueKeyword === continueKeyword && this._identifier === identifier && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new ContinueStatementSyntax(continueKeyword, identifier, semicolonToken);
    };
    ContinueStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ContinueStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ContinueStatementSyntax.prototype.withContinueKeyword = function (continueKeyword) {
        return this.update(continueKeyword, this._identifier, this._semicolonToken);
    };
    ContinueStatementSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._continueKeyword, identifier, this._semicolonToken);
    };
    ContinueStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._continueKeyword, this._identifier, semicolonToken);
    };
    ContinueStatementSyntax.prototype.collectTextElements = function (elements) {
        this._continueKeyword.collectTextElements(elements);
        if(this._identifier !== null) {
            this._identifier.collectTextElements(elements);
        }
        this._semicolonToken.collectTextElements(elements);
    };
    ContinueStatementSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return ContinueStatementSyntax;
})(StatementSyntax);
var IterationStatementSyntax = (function (_super) {
    __extends(IterationStatementSyntax, _super);
    function IterationStatementSyntax() {
        _super.call(this);
    }
    IterationStatementSyntax.prototype.openParenToken = function () {
        throw Errors.abstract();
    };
    IterationStatementSyntax.prototype.closeParenToken = function () {
        throw Errors.abstract();
    };
    IterationStatementSyntax.prototype.statement = function () {
        throw Errors.abstract();
    };
    IterationStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    IterationStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    IterationStatementSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return IterationStatementSyntax;
})(StatementSyntax);
var BaseForStatementSyntax = (function (_super) {
    __extends(BaseForStatementSyntax, _super);
    function BaseForStatementSyntax() {
        _super.call(this);
    }
    BaseForStatementSyntax.prototype.forKeyword = function () {
        throw Errors.abstract();
    };
    BaseForStatementSyntax.prototype.openParenToken = function () {
        throw Errors.abstract();
    };
    BaseForStatementSyntax.prototype.variableDeclaration = function () {
        throw Errors.abstract();
    };
    BaseForStatementSyntax.prototype.closeParenToken = function () {
        throw Errors.abstract();
    };
    BaseForStatementSyntax.prototype.statement = function () {
        throw Errors.abstract();
    };
    BaseForStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    BaseForStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    BaseForStatementSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return BaseForStatementSyntax;
})(IterationStatementSyntax);
var ForStatementSyntax = (function (_super) {
    __extends(ForStatementSyntax, _super);
    function ForStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement) {
        _super.call(this);
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(forKeyword.keywordKind() !== 24 /* ForKeyword */ ) {
            throw Errors.argument('forKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(firstSemicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('firstSemicolonToken');
        }
        if(secondSemicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('secondSemicolonToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._forKeyword = forKeyword;
        this._openParenToken = openParenToken;
        this._variableDeclaration = variableDeclaration;
        this._initializer = initializer;
        this._firstSemicolonToken = firstSemicolonToken;
        this._condition = condition;
        this._secondSemicolonToken = secondSemicolonToken;
        this._incrementor = incrementor;
        this._closeParenToken = closeParenToken;
        this._statement = statement;
    }
    ForStatementSyntax.create = function create(forKeyword, openParenToken, firstSemicolonToken, secondSemicolonToken, closeParenToken, statement) {
        return new ForStatementSyntax(forKeyword, openParenToken, null, null, firstSemicolonToken, null, secondSemicolonToken, null, closeParenToken, statement);
    }
    ForStatementSyntax.create1 = function create1(statement) {
        return new ForStatementSyntax(Syntax.token(24 /* ForKeyword */ ), Syntax.token(69 /* OpenParenToken */ ), null, null, Syntax.token(75 /* SemicolonToken */ ), null, Syntax.token(75 /* SemicolonToken */ ), null, Syntax.token(70 /* CloseParenToken */ ), statement);
    }
    ForStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitForStatement(this);
    };
    ForStatementSyntax.prototype.kind = function () {
        return 146 /* ForStatement */ ;
    };
    ForStatementSyntax.prototype.isMissing = function () {
        if(!this._forKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(this._variableDeclaration !== null && !this._variableDeclaration.isMissing()) {
            return false;
        }
        if(this._initializer !== null && !this._initializer.isMissing()) {
            return false;
        }
        if(!this._firstSemicolonToken.isMissing()) {
            return false;
        }
        if(this._condition !== null && !this._condition.isMissing()) {
            return false;
        }
        if(!this._secondSemicolonToken.isMissing()) {
            return false;
        }
        if(this._incrementor !== null && !this._incrementor.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        return true;
    };
    ForStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._forKeyword.width() > 0) {
            return this._forKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._variableDeclaration !== null && (token = this._variableDeclaration.firstToken()) !== null) {
            return token;
        }
        if(this._initializer !== null && (token = this._initializer.firstToken()) !== null) {
            return token;
        }
        if(this._firstSemicolonToken.width() > 0) {
            return this._firstSemicolonToken;
        }
        if(this._condition !== null && (token = this._condition.firstToken()) !== null) {
            return token;
        }
        if(this._secondSemicolonToken.width() > 0) {
            return this._secondSemicolonToken;
        }
        if(this._incrementor !== null && (token = this._incrementor.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ForStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._incrementor !== null && (token = this._incrementor.lastToken()) !== null) {
            return token;
        }
        if(this._secondSemicolonToken.width() > 0) {
            return this._secondSemicolonToken;
        }
        if(this._condition !== null && (token = this._condition.lastToken()) !== null) {
            return token;
        }
        if(this._firstSemicolonToken.width() > 0) {
            return this._firstSemicolonToken;
        }
        if(this._initializer !== null && (token = this._initializer.lastToken()) !== null) {
            return token;
        }
        if(this._variableDeclaration !== null && (token = this._variableDeclaration.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._forKeyword.width() > 0) {
            return this._forKeyword;
        }
        return null;
    };
    ForStatementSyntax.prototype.forKeyword = function () {
        return this._forKeyword;
    };
    ForStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    ForStatementSyntax.prototype.variableDeclaration = function () {
        return this._variableDeclaration;
    };
    ForStatementSyntax.prototype.initializer = function () {
        return this._initializer;
    };
    ForStatementSyntax.prototype.firstSemicolonToken = function () {
        return this._firstSemicolonToken;
    };
    ForStatementSyntax.prototype.condition = function () {
        return this._condition;
    };
    ForStatementSyntax.prototype.secondSemicolonToken = function () {
        return this._secondSemicolonToken;
    };
    ForStatementSyntax.prototype.incrementor = function () {
        return this._incrementor;
    };
    ForStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    ForStatementSyntax.prototype.statement = function () {
        return this._statement;
    };
    ForStatementSyntax.prototype.update = function (forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement) {
        if(this._forKeyword === forKeyword && this._openParenToken === openParenToken && this._variableDeclaration === variableDeclaration && this._initializer === initializer && this._firstSemicolonToken === firstSemicolonToken && this._condition === condition && this._secondSemicolonToken === secondSemicolonToken && this._incrementor === incrementor && this._closeParenToken === closeParenToken && this._statement === statement) {
            return this;
        }
        return new ForStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement);
    };
    ForStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ForStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ForStatementSyntax.prototype.withForKeyword = function (forKeyword) {
        return this.update(forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._forKeyword, openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withVariableDeclaration = function (variableDeclaration) {
        return this.update(this._forKeyword, this._openParenToken, variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withInitializer = function (initializer) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withFirstSemicolonToken = function (firstSemicolonToken) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withCondition = function (condition) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withSecondSemicolonToken = function (secondSemicolonToken) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withIncrementor = function (incrementor) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withStatement = function (statement) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, statement);
    };
    ForStatementSyntax.prototype.collectTextElements = function (elements) {
        this._forKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        if(this._variableDeclaration !== null) {
            this._variableDeclaration.collectTextElements(elements);
        }
        if(this._initializer !== null) {
            this._initializer.collectTextElements(elements);
        }
        this._firstSemicolonToken.collectTextElements(elements);
        if(this._condition !== null) {
            this._condition.collectTextElements(elements);
        }
        this._secondSemicolonToken.collectTextElements(elements);
        if(this._incrementor !== null) {
            this._incrementor.collectTextElements(elements);
        }
        this._closeParenToken.collectTextElements(elements);
        this._statement.collectTextElements(elements);
    };
    ForStatementSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._variableDeclaration !== null && this._variableDeclaration.isTypeScriptSpecific()) {
            return true;
        }
        if(this._initializer !== null && this._initializer.isTypeScriptSpecific()) {
            return true;
        }
        if(this._condition !== null && this._condition.isTypeScriptSpecific()) {
            return true;
        }
        if(this._incrementor !== null && this._incrementor.isTypeScriptSpecific()) {
            return true;
        }
        if(this._statement.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ForStatementSyntax;
})(BaseForStatementSyntax);
var ForInStatementSyntax = (function (_super) {
    __extends(ForInStatementSyntax, _super);
    function ForInStatementSyntax(forKeyword, openParenToken, variableDeclaration, left, inKeyword, expression, closeParenToken, statement) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(forKeyword.keywordKind() !== 24 /* ForKeyword */ ) {
            throw Errors.argument('forKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(inKeyword.keywordKind() !== 27 /* InKeyword */ ) {
            throw Errors.argument('inKeyword');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._forKeyword = forKeyword;
        this._openParenToken = openParenToken;
        this._variableDeclaration = variableDeclaration;
        this._left = left;
        this._inKeyword = inKeyword;
        this._expression = expression;
        this._closeParenToken = closeParenToken;
        this._statement = statement;
    }
    ForInStatementSyntax.create = function create(forKeyword, openParenToken, inKeyword, expression, closeParenToken, statement) {
        return new ForInStatementSyntax(forKeyword, openParenToken, null, null, inKeyword, expression, closeParenToken, statement);
    }
    ForInStatementSyntax.create1 = function create1(expression, statement) {
        return new ForInStatementSyntax(Syntax.token(24 /* ForKeyword */ ), Syntax.token(69 /* OpenParenToken */ ), null, null, Syntax.token(27 /* InKeyword */ ), expression, Syntax.token(70 /* CloseParenToken */ ), statement);
    }
    ForInStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitForInStatement(this);
    };
    ForInStatementSyntax.prototype.kind = function () {
        return 147 /* ForInStatement */ ;
    };
    ForInStatementSyntax.prototype.isMissing = function () {
        if(!this._forKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(this._variableDeclaration !== null && !this._variableDeclaration.isMissing()) {
            return false;
        }
        if(this._left !== null && !this._left.isMissing()) {
            return false;
        }
        if(!this._inKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        return true;
    };
    ForInStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._forKeyword.width() > 0) {
            return this._forKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._variableDeclaration !== null && (token = this._variableDeclaration.firstToken()) !== null) {
            return token;
        }
        if(this._left !== null && (token = this._left.firstToken()) !== null) {
            return token;
        }
        if(this._inKeyword.width() > 0) {
            return this._inKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ForInStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._inKeyword.width() > 0) {
            return this._inKeyword;
        }
        if(this._left !== null && (token = this._left.lastToken()) !== null) {
            return token;
        }
        if(this._variableDeclaration !== null && (token = this._variableDeclaration.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._forKeyword.width() > 0) {
            return this._forKeyword;
        }
        return null;
    };
    ForInStatementSyntax.prototype.forKeyword = function () {
        return this._forKeyword;
    };
    ForInStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    ForInStatementSyntax.prototype.variableDeclaration = function () {
        return this._variableDeclaration;
    };
    ForInStatementSyntax.prototype.left = function () {
        return this._left;
    };
    ForInStatementSyntax.prototype.inKeyword = function () {
        return this._inKeyword;
    };
    ForInStatementSyntax.prototype.expression = function () {
        return this._expression;
    };
    ForInStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    ForInStatementSyntax.prototype.statement = function () {
        return this._statement;
    };
    ForInStatementSyntax.prototype.update = function (forKeyword, openParenToken, variableDeclaration, left, inKeyword, expression, closeParenToken, statement) {
        if(this._forKeyword === forKeyword && this._openParenToken === openParenToken && this._variableDeclaration === variableDeclaration && this._left === left && this._inKeyword === inKeyword && this._expression === expression && this._closeParenToken === closeParenToken && this._statement === statement) {
            return this;
        }
        return new ForInStatementSyntax(forKeyword, openParenToken, variableDeclaration, left, inKeyword, expression, closeParenToken, statement);
    };
    ForInStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ForInStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ForInStatementSyntax.prototype.withForKeyword = function (forKeyword) {
        return this.update(forKeyword, this._openParenToken, this._variableDeclaration, this._left, this._inKeyword, this._expression, this._closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._forKeyword, openParenToken, this._variableDeclaration, this._left, this._inKeyword, this._expression, this._closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withVariableDeclaration = function (variableDeclaration) {
        return this.update(this._forKeyword, this._openParenToken, variableDeclaration, this._left, this._inKeyword, this._expression, this._closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withLeft = function (left) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, left, this._inKeyword, this._expression, this._closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withInKeyword = function (inKeyword) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._left, inKeyword, this._expression, this._closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withExpression = function (expression) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._left, this._inKeyword, expression, this._closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._left, this._inKeyword, this._expression, closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withStatement = function (statement) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._left, this._inKeyword, this._expression, this._closeParenToken, statement);
    };
    ForInStatementSyntax.prototype.collectTextElements = function (elements) {
        this._forKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        if(this._variableDeclaration !== null) {
            this._variableDeclaration.collectTextElements(elements);
        }
        if(this._left !== null) {
            this._left.collectTextElements(elements);
        }
        this._inKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._statement.collectTextElements(elements);
    };
    ForInStatementSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._variableDeclaration !== null && this._variableDeclaration.isTypeScriptSpecific()) {
            return true;
        }
        if(this._left !== null && this._left.isTypeScriptSpecific()) {
            return true;
        }
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        if(this._statement.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ForInStatementSyntax;
})(BaseForStatementSyntax);
var WhileStatementSyntax = (function (_super) {
    __extends(WhileStatementSyntax, _super);
    function WhileStatementSyntax(whileKeyword, openParenToken, condition, closeParenToken, statement) {
        _super.call(this);
        if(condition === null) {
            throw Errors.argumentNull('condition');
        }
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(whileKeyword.keywordKind() !== 40 /* WhileKeyword */ ) {
            throw Errors.argument('whileKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._whileKeyword = whileKeyword;
        this._openParenToken = openParenToken;
        this._condition = condition;
        this._closeParenToken = closeParenToken;
        this._statement = statement;
    }
    WhileStatementSyntax.create1 = function create1(condition, statement) {
        return new WhileStatementSyntax(Syntax.token(40 /* WhileKeyword */ ), Syntax.token(69 /* OpenParenToken */ ), condition, Syntax.token(70 /* CloseParenToken */ ), statement);
    }
    WhileStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitWhileStatement(this);
    };
    WhileStatementSyntax.prototype.kind = function () {
        return 150 /* WhileStatement */ ;
    };
    WhileStatementSyntax.prototype.isMissing = function () {
        if(!this._whileKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._condition.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        return true;
    };
    WhileStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._whileKeyword.width() > 0) {
            return this._whileKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._condition.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    WhileStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._condition.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._whileKeyword.width() > 0) {
            return this._whileKeyword;
        }
        return null;
    };
    WhileStatementSyntax.prototype.whileKeyword = function () {
        return this._whileKeyword;
    };
    WhileStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    WhileStatementSyntax.prototype.condition = function () {
        return this._condition;
    };
    WhileStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    WhileStatementSyntax.prototype.statement = function () {
        return this._statement;
    };
    WhileStatementSyntax.prototype.update = function (whileKeyword, openParenToken, condition, closeParenToken, statement) {
        if(this._whileKeyword === whileKeyword && this._openParenToken === openParenToken && this._condition === condition && this._closeParenToken === closeParenToken && this._statement === statement) {
            return this;
        }
        return new WhileStatementSyntax(whileKeyword, openParenToken, condition, closeParenToken, statement);
    };
    WhileStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    WhileStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    WhileStatementSyntax.prototype.withWhileKeyword = function (whileKeyword) {
        return this.update(whileKeyword, this._openParenToken, this._condition, this._closeParenToken, this._statement);
    };
    WhileStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._whileKeyword, openParenToken, this._condition, this._closeParenToken, this._statement);
    };
    WhileStatementSyntax.prototype.withCondition = function (condition) {
        return this.update(this._whileKeyword, this._openParenToken, condition, this._closeParenToken, this._statement);
    };
    WhileStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._whileKeyword, this._openParenToken, this._condition, closeParenToken, this._statement);
    };
    WhileStatementSyntax.prototype.withStatement = function (statement) {
        return this.update(this._whileKeyword, this._openParenToken, this._condition, this._closeParenToken, statement);
    };
    WhileStatementSyntax.prototype.collectTextElements = function (elements) {
        this._whileKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._condition.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._statement.collectTextElements(elements);
    };
    WhileStatementSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._condition.isTypeScriptSpecific()) {
            return true;
        }
        if(this._statement.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return WhileStatementSyntax;
})(IterationStatementSyntax);
var WithStatementSyntax = (function (_super) {
    __extends(WithStatementSyntax, _super);
    function WithStatementSyntax(withKeyword, openParenToken, condition, closeParenToken, statement) {
        _super.call(this);
        if(condition === null) {
            throw Errors.argumentNull('condition');
        }
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(withKeyword.keywordKind() !== 41 /* WithKeyword */ ) {
            throw Errors.argument('withKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._withKeyword = withKeyword;
        this._openParenToken = openParenToken;
        this._condition = condition;
        this._closeParenToken = closeParenToken;
        this._statement = statement;
    }
    WithStatementSyntax.create1 = function create1(condition, statement) {
        return new WithStatementSyntax(Syntax.token(41 /* WithKeyword */ ), Syntax.token(69 /* OpenParenToken */ ), condition, Syntax.token(70 /* CloseParenToken */ ), statement);
    }
    WithStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitWithStatement(this);
    };
    WithStatementSyntax.prototype.kind = function () {
        return 155 /* WithStatement */ ;
    };
    WithStatementSyntax.prototype.isMissing = function () {
        if(!this._withKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._condition.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        return true;
    };
    WithStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._withKeyword.width() > 0) {
            return this._withKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._condition.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    WithStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._condition.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._withKeyword.width() > 0) {
            return this._withKeyword;
        }
        return null;
    };
    WithStatementSyntax.prototype.withKeyword = function () {
        return this._withKeyword;
    };
    WithStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    WithStatementSyntax.prototype.condition = function () {
        return this._condition;
    };
    WithStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    WithStatementSyntax.prototype.statement = function () {
        return this._statement;
    };
    WithStatementSyntax.prototype.update = function (withKeyword, openParenToken, condition, closeParenToken, statement) {
        if(this._withKeyword === withKeyword && this._openParenToken === openParenToken && this._condition === condition && this._closeParenToken === closeParenToken && this._statement === statement) {
            return this;
        }
        return new WithStatementSyntax(withKeyword, openParenToken, condition, closeParenToken, statement);
    };
    WithStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    WithStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    WithStatementSyntax.prototype.withWithKeyword = function (withKeyword) {
        return this.update(withKeyword, this._openParenToken, this._condition, this._closeParenToken, this._statement);
    };
    WithStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._withKeyword, openParenToken, this._condition, this._closeParenToken, this._statement);
    };
    WithStatementSyntax.prototype.withCondition = function (condition) {
        return this.update(this._withKeyword, this._openParenToken, condition, this._closeParenToken, this._statement);
    };
    WithStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._withKeyword, this._openParenToken, this._condition, closeParenToken, this._statement);
    };
    WithStatementSyntax.prototype.withStatement = function (statement) {
        return this.update(this._withKeyword, this._openParenToken, this._condition, this._closeParenToken, statement);
    };
    WithStatementSyntax.prototype.collectTextElements = function (elements) {
        this._withKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._condition.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._statement.collectTextElements(elements);
    };
    WithStatementSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._condition.isTypeScriptSpecific()) {
            return true;
        }
        if(this._statement.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return WithStatementSyntax;
})(StatementSyntax);
var EnumDeclarationSyntax = (function (_super) {
    __extends(EnumDeclarationSyntax, _super);
    function EnumDeclarationSyntax(exportKeyword, enumKeyword, identifier, openBraceToken, variableDeclarators, closeBraceToken) {
        _super.call(this);
        if(variableDeclarators === null) {
            throw Errors.argumentNull('variableDeclarators');
        }
        if(exportKeyword !== null) {
            if(exportKeyword.keywordKind() !== 45 /* ExportKeyword */ ) {
                throw Errors.argument('exportKeyword');
            }
        }
        if(enumKeyword.keywordKind() !== 44 /* EnumKeyword */ ) {
            throw Errors.argument('enumKeyword');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._exportKeyword = exportKeyword;
        this._enumKeyword = enumKeyword;
        this._identifier = identifier;
        this._openBraceToken = openBraceToken;
        this._variableDeclarators = variableDeclarators;
        this._closeBraceToken = closeBraceToken;
    }
    EnumDeclarationSyntax.create = function create(enumKeyword, identifier, openBraceToken, closeBraceToken) {
        return new EnumDeclarationSyntax(null, enumKeyword, identifier, openBraceToken, Syntax.emptySeparatedList, closeBraceToken);
    }
    EnumDeclarationSyntax.create1 = function create1(identifier) {
        return new EnumDeclarationSyntax(null, Syntax.token(44 /* EnumKeyword */ ), identifier, Syntax.token(67 /* OpenBraceToken */ ), Syntax.emptySeparatedList, Syntax.token(68 /* CloseBraceToken */ ));
    }
    EnumDeclarationSyntax.prototype.accept = function (visitor) {
        return visitor.visitEnumDeclaration(this);
    };
    EnumDeclarationSyntax.prototype.kind = function () {
        return 131 /* EnumDeclaration */ ;
    };
    EnumDeclarationSyntax.prototype.isMissing = function () {
        if(this._exportKeyword !== null && !this._exportKeyword.isMissing()) {
            return false;
        }
        if(!this._enumKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._variableDeclarators.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    EnumDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        if(this._enumKeyword.width() > 0) {
            return this._enumKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._variableDeclarators.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    EnumDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._variableDeclarators.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._enumKeyword.width() > 0) {
            return this._enumKeyword;
        }
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        return null;
    };
    EnumDeclarationSyntax.prototype.exportKeyword = function () {
        return this._exportKeyword;
    };
    EnumDeclarationSyntax.prototype.enumKeyword = function () {
        return this._enumKeyword;
    };
    EnumDeclarationSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    EnumDeclarationSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    EnumDeclarationSyntax.prototype.variableDeclarators = function () {
        return this._variableDeclarators;
    };
    EnumDeclarationSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    EnumDeclarationSyntax.prototype.update = function (exportKeyword, enumKeyword, identifier, openBraceToken, variableDeclarators, closeBraceToken) {
        if(this._exportKeyword === exportKeyword && this._enumKeyword === enumKeyword && this._identifier === identifier && this._openBraceToken === openBraceToken && this._variableDeclarators === variableDeclarators && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new EnumDeclarationSyntax(exportKeyword, enumKeyword, identifier, openBraceToken, variableDeclarators, closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    EnumDeclarationSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    EnumDeclarationSyntax.prototype.withExportKeyword = function (exportKeyword) {
        return this.update(exportKeyword, this._enumKeyword, this._identifier, this._openBraceToken, this._variableDeclarators, this._closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.withEnumKeyword = function (enumKeyword) {
        return this.update(this._exportKeyword, enumKeyword, this._identifier, this._openBraceToken, this._variableDeclarators, this._closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._exportKeyword, this._enumKeyword, identifier, this._openBraceToken, this._variableDeclarators, this._closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(this._exportKeyword, this._enumKeyword, this._identifier, openBraceToken, this._variableDeclarators, this._closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.withVariableDeclarators = function (variableDeclarators) {
        return this.update(this._exportKeyword, this._enumKeyword, this._identifier, this._openBraceToken, variableDeclarators, this._closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.withVariableDeclarator = function (variableDeclarator) {
        return this.withVariableDeclarators(Syntax.separatedList([
            variableDeclarator
        ]));
    };
    EnumDeclarationSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._exportKeyword, this._enumKeyword, this._identifier, this._openBraceToken, this._variableDeclarators, closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._exportKeyword !== null) {
            this._exportKeyword.collectTextElements(elements);
        }
        this._enumKeyword.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        this._openBraceToken.collectTextElements(elements);
        this._variableDeclarators.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    EnumDeclarationSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return EnumDeclarationSyntax;
})(ModuleElementSyntax);
var CastExpressionSyntax = (function (_super) {
    __extends(CastExpressionSyntax, _super);
    function CastExpressionSyntax(lessThanToken, type, greaterThanToken, expression) {
        _super.call(this);
        if(type === null) {
            throw Errors.argumentNull('type');
        }
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(lessThanToken.kind() !== 77 /* LessThanToken */ ) {
            throw Errors.argument('lessThanToken');
        }
        if(greaterThanToken.kind() !== 78 /* GreaterThanToken */ ) {
            throw Errors.argument('greaterThanToken');
        }
        this._lessThanToken = lessThanToken;
        this._type = type;
        this._greaterThanToken = greaterThanToken;
        this._expression = expression;
    }
    CastExpressionSyntax.create1 = function create1(type, expression) {
        return new CastExpressionSyntax(Syntax.token(77 /* LessThanToken */ ), type, Syntax.token(78 /* GreaterThanToken */ ), expression);
    }
    CastExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitCastExpression(this);
    };
    CastExpressionSyntax.prototype.kind = function () {
        return 218 /* CastExpression */ ;
    };
    CastExpressionSyntax.prototype.isMissing = function () {
        if(!this._lessThanToken.isMissing()) {
            return false;
        }
        if(!this._type.isMissing()) {
            return false;
        }
        if(!this._greaterThanToken.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        return true;
    };
    CastExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._lessThanToken.width() > 0) {
            return this._lessThanToken;
        }
        if((token = this._type.firstToken()) !== null) {
            return token;
        }
        if(this._greaterThanToken.width() > 0) {
            return this._greaterThanToken;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    CastExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._greaterThanToken.width() > 0) {
            return this._greaterThanToken;
        }
        if((token = this._type.lastToken()) !== null) {
            return token;
        }
        if(this._lessThanToken.width() > 0) {
            return this._lessThanToken;
        }
        return null;
    };
    CastExpressionSyntax.prototype.lessThanToken = function () {
        return this._lessThanToken;
    };
    CastExpressionSyntax.prototype.type = function () {
        return this._type;
    };
    CastExpressionSyntax.prototype.greaterThanToken = function () {
        return this._greaterThanToken;
    };
    CastExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    CastExpressionSyntax.prototype.update = function (lessThanToken, type, greaterThanToken, expression) {
        if(this._lessThanToken === lessThanToken && this._type === type && this._greaterThanToken === greaterThanToken && this._expression === expression) {
            return this;
        }
        return new CastExpressionSyntax(lessThanToken, type, greaterThanToken, expression);
    };
    CastExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    CastExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    CastExpressionSyntax.prototype.withLessThanToken = function (lessThanToken) {
        return this.update(lessThanToken, this._type, this._greaterThanToken, this._expression);
    };
    CastExpressionSyntax.prototype.withType = function (type) {
        return this.update(this._lessThanToken, type, this._greaterThanToken, this._expression);
    };
    CastExpressionSyntax.prototype.withGreaterThanToken = function (greaterThanToken) {
        return this.update(this._lessThanToken, this._type, greaterThanToken, this._expression);
    };
    CastExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(this._lessThanToken, this._type, this._greaterThanToken, expression);
    };
    CastExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._lessThanToken.collectTextElements(elements);
        this._type.collectTextElements(elements);
        this._greaterThanToken.collectTextElements(elements);
        this._expression.collectTextElements(elements);
    };
    CastExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return CastExpressionSyntax;
})(UnaryExpressionSyntax);
var ObjectLiteralExpressionSyntax = (function (_super) {
    __extends(ObjectLiteralExpressionSyntax, _super);
    function ObjectLiteralExpressionSyntax(openBraceToken, propertyAssignments, closeBraceToken) {
        _super.call(this);
        if(propertyAssignments === null) {
            throw Errors.argumentNull('propertyAssignments');
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._openBraceToken = openBraceToken;
        this._propertyAssignments = propertyAssignments;
        this._closeBraceToken = closeBraceToken;
    }
    ObjectLiteralExpressionSyntax.create = function create(openBraceToken, closeBraceToken) {
        return new ObjectLiteralExpressionSyntax(openBraceToken, Syntax.emptySeparatedList, closeBraceToken);
    }
    ObjectLiteralExpressionSyntax.create1 = function create1() {
        return new ObjectLiteralExpressionSyntax(Syntax.token(67 /* OpenBraceToken */ ), Syntax.emptySeparatedList, Syntax.token(68 /* CloseBraceToken */ ));
    }
    ObjectLiteralExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitObjectLiteralExpression(this);
    };
    ObjectLiteralExpressionSyntax.prototype.kind = function () {
        return 213 /* ObjectLiteralExpression */ ;
    };
    ObjectLiteralExpressionSyntax.prototype.isMissing = function () {
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._propertyAssignments.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    ObjectLiteralExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._propertyAssignments.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    ObjectLiteralExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._propertyAssignments.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        return null;
    };
    ObjectLiteralExpressionSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    ObjectLiteralExpressionSyntax.prototype.propertyAssignments = function () {
        return this._propertyAssignments;
    };
    ObjectLiteralExpressionSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    ObjectLiteralExpressionSyntax.prototype.update = function (openBraceToken, propertyAssignments, closeBraceToken) {
        if(this._openBraceToken === openBraceToken && this._propertyAssignments === propertyAssignments && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new ObjectLiteralExpressionSyntax(openBraceToken, propertyAssignments, closeBraceToken);
    };
    ObjectLiteralExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    ObjectLiteralExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    ObjectLiteralExpressionSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(openBraceToken, this._propertyAssignments, this._closeBraceToken);
    };
    ObjectLiteralExpressionSyntax.prototype.withPropertyAssignments = function (propertyAssignments) {
        return this.update(this._openBraceToken, propertyAssignments, this._closeBraceToken);
    };
    ObjectLiteralExpressionSyntax.prototype.withPropertyAssignment = function (propertyAssignment) {
        return this.withPropertyAssignments(Syntax.separatedList([
            propertyAssignment
        ]));
    };
    ObjectLiteralExpressionSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._openBraceToken, this._propertyAssignments, closeBraceToken);
    };
    ObjectLiteralExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._openBraceToken.collectTextElements(elements);
        this._propertyAssignments.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    ObjectLiteralExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._propertyAssignments.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return ObjectLiteralExpressionSyntax;
})(UnaryExpressionSyntax);
var PropertyAssignmentSyntax = (function (_super) {
    __extends(PropertyAssignmentSyntax, _super);
    function PropertyAssignmentSyntax() {
        _super.call(this);
    }
    PropertyAssignmentSyntax.prototype.propertyName = function () {
        throw Errors.abstract();
    };
    PropertyAssignmentSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    PropertyAssignmentSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    PropertyAssignmentSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return PropertyAssignmentSyntax;
})(SyntaxNode);
var SimplePropertyAssignmentSyntax = (function (_super) {
    __extends(SimplePropertyAssignmentSyntax, _super);
    function SimplePropertyAssignmentSyntax(propertyName, colonToken, expression) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        switch(propertyName.kind()) {
            case 9 /* IdentifierNameToken */ :
            case 12 /* StringLiteral */ :
            case 11 /* NumericLiteral */ : {
                break;

            }
            default: {
                throw Errors.argument('propertyName');

            }
        }
        if(colonToken.kind() !== 103 /* ColonToken */ ) {
            throw Errors.argument('colonToken');
        }
        this._propertyName = propertyName;
        this._colonToken = colonToken;
        this._expression = expression;
    }
    SimplePropertyAssignmentSyntax.create1 = function create1(propertyName, expression) {
        return new SimplePropertyAssignmentSyntax(propertyName, Syntax.token(103 /* ColonToken */ ), expression);
    }
    SimplePropertyAssignmentSyntax.prototype.accept = function (visitor) {
        return visitor.visitSimplePropertyAssignment(this);
    };
    SimplePropertyAssignmentSyntax.prototype.kind = function () {
        return 242 /* SimplePropertyAssignment */ ;
    };
    SimplePropertyAssignmentSyntax.prototype.isMissing = function () {
        if(!this._propertyName.isMissing()) {
            return false;
        }
        if(!this._colonToken.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        return true;
    };
    SimplePropertyAssignmentSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._propertyName.width() > 0) {
            return this._propertyName;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    SimplePropertyAssignmentSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if(this._propertyName.width() > 0) {
            return this._propertyName;
        }
        return null;
    };
    SimplePropertyAssignmentSyntax.prototype.propertyName = function () {
        return this._propertyName;
    };
    SimplePropertyAssignmentSyntax.prototype.colonToken = function () {
        return this._colonToken;
    };
    SimplePropertyAssignmentSyntax.prototype.expression = function () {
        return this._expression;
    };
    SimplePropertyAssignmentSyntax.prototype.update = function (propertyName, colonToken, expression) {
        if(this._propertyName === propertyName && this._colonToken === colonToken && this._expression === expression) {
            return this;
        }
        return new SimplePropertyAssignmentSyntax(propertyName, colonToken, expression);
    };
    SimplePropertyAssignmentSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    SimplePropertyAssignmentSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    SimplePropertyAssignmentSyntax.prototype.withPropertyName = function (propertyName) {
        return this.update(propertyName, this._colonToken, this._expression);
    };
    SimplePropertyAssignmentSyntax.prototype.withColonToken = function (colonToken) {
        return this.update(this._propertyName, colonToken, this._expression);
    };
    SimplePropertyAssignmentSyntax.prototype.withExpression = function (expression) {
        return this.update(this._propertyName, this._colonToken, expression);
    };
    SimplePropertyAssignmentSyntax.prototype.collectTextElements = function (elements) {
        this._propertyName.collectTextElements(elements);
        this._colonToken.collectTextElements(elements);
        this._expression.collectTextElements(elements);
    };
    SimplePropertyAssignmentSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return SimplePropertyAssignmentSyntax;
})(PropertyAssignmentSyntax);
var AccessorPropertyAssignmentSyntax = (function (_super) {
    __extends(AccessorPropertyAssignmentSyntax, _super);
    function AccessorPropertyAssignmentSyntax() {
        _super.call(this);
    }
    AccessorPropertyAssignmentSyntax.prototype.propertyName = function () {
        throw Errors.abstract();
    };
    AccessorPropertyAssignmentSyntax.prototype.openParenToken = function () {
        throw Errors.abstract();
    };
    AccessorPropertyAssignmentSyntax.prototype.closeParenToken = function () {
        throw Errors.abstract();
    };
    AccessorPropertyAssignmentSyntax.prototype.block = function () {
        throw Errors.abstract();
    };
    AccessorPropertyAssignmentSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    AccessorPropertyAssignmentSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    AccessorPropertyAssignmentSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return AccessorPropertyAssignmentSyntax;
})(PropertyAssignmentSyntax);
var GetAccessorPropertyAssignmentSyntax = (function (_super) {
    __extends(GetAccessorPropertyAssignmentSyntax, _super);
    function GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, block) {
        _super.call(this);
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(getKeyword.keywordKind() !== 62 /* GetKeyword */ ) {
            throw Errors.argument('getKeyword');
        }
        if(propertyName.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('propertyName');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._getKeyword = getKeyword;
        this._propertyName = propertyName;
        this._openParenToken = openParenToken;
        this._closeParenToken = closeParenToken;
        this._block = block;
    }
    GetAccessorPropertyAssignmentSyntax.create1 = function create1(propertyName) {
        return new GetAccessorPropertyAssignmentSyntax(Syntax.token(62 /* GetKeyword */ ), propertyName, Syntax.token(69 /* OpenParenToken */ ), Syntax.token(70 /* CloseParenToken */ ), BlockSyntax.create1());
    }
    GetAccessorPropertyAssignmentSyntax.prototype.accept = function (visitor) {
        return visitor.visitGetAccessorPropertyAssignment(this);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.kind = function () {
        return 245 /* GetAccessorPropertyAssignment */ ;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.isMissing = function () {
        if(!this._getKeyword.isMissing()) {
            return false;
        }
        if(!this._propertyName.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._getKeyword.width() > 0) {
            return this._getKeyword;
        }
        if(this._propertyName.width() > 0) {
            return this._propertyName;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._propertyName.width() > 0) {
            return this._propertyName;
        }
        if(this._getKeyword.width() > 0) {
            return this._getKeyword;
        }
        return null;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.getKeyword = function () {
        return this._getKeyword;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.propertyName = function () {
        return this._propertyName;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.block = function () {
        return this._block;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.update = function (getKeyword, propertyName, openParenToken, closeParenToken, block) {
        if(this._getKeyword === getKeyword && this._propertyName === propertyName && this._openParenToken === openParenToken && this._closeParenToken === closeParenToken && this._block === block) {
            return this;
        }
        return new GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, block);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.withGetKeyword = function (getKeyword) {
        return this.update(getKeyword, this._propertyName, this._openParenToken, this._closeParenToken, this._block);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.withPropertyName = function (propertyName) {
        return this.update(this._getKeyword, propertyName, this._openParenToken, this._closeParenToken, this._block);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._getKeyword, this._propertyName, openParenToken, this._closeParenToken, this._block);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._getKeyword, this._propertyName, this._openParenToken, closeParenToken, this._block);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.withBlock = function (block) {
        return this.update(this._getKeyword, this._propertyName, this._openParenToken, this._closeParenToken, block);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.collectTextElements = function (elements) {
        this._getKeyword.collectTextElements(elements);
        this._propertyName.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._block.collectTextElements(elements);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._block.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return GetAccessorPropertyAssignmentSyntax;
})(AccessorPropertyAssignmentSyntax);
var SetAccessorPropertyAssignmentSyntax = (function (_super) {
    __extends(SetAccessorPropertyAssignmentSyntax, _super);
    function SetAccessorPropertyAssignmentSyntax(setKeyword, propertyName, openParenToken, parameterName, closeParenToken, block) {
        _super.call(this);
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(setKeyword.keywordKind() !== 65 /* SetKeyword */ ) {
            throw Errors.argument('setKeyword');
        }
        if(propertyName.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('propertyName');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(parameterName.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('parameterName');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._setKeyword = setKeyword;
        this._propertyName = propertyName;
        this._openParenToken = openParenToken;
        this._parameterName = parameterName;
        this._closeParenToken = closeParenToken;
        this._block = block;
    }
    SetAccessorPropertyAssignmentSyntax.create1 = function create1(propertyName, parameterName) {
        return new SetAccessorPropertyAssignmentSyntax(Syntax.token(65 /* SetKeyword */ ), propertyName, Syntax.token(69 /* OpenParenToken */ ), parameterName, Syntax.token(70 /* CloseParenToken */ ), BlockSyntax.create1());
    }
    SetAccessorPropertyAssignmentSyntax.prototype.accept = function (visitor) {
        return visitor.visitSetAccessorPropertyAssignment(this);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.kind = function () {
        return 246 /* SetAccessorPropertyAssignment */ ;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.isMissing = function () {
        if(!this._setKeyword.isMissing()) {
            return false;
        }
        if(!this._propertyName.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._parameterName.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._setKeyword.width() > 0) {
            return this._setKeyword;
        }
        if(this._propertyName.width() > 0) {
            return this._propertyName;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._parameterName.width() > 0) {
            return this._parameterName;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._parameterName.width() > 0) {
            return this._parameterName;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._propertyName.width() > 0) {
            return this._propertyName;
        }
        if(this._setKeyword.width() > 0) {
            return this._setKeyword;
        }
        return null;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.setKeyword = function () {
        return this._setKeyword;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.propertyName = function () {
        return this._propertyName;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.parameterName = function () {
        return this._parameterName;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.block = function () {
        return this._block;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.update = function (setKeyword, propertyName, openParenToken, parameterName, closeParenToken, block) {
        if(this._setKeyword === setKeyword && this._propertyName === propertyName && this._openParenToken === openParenToken && this._parameterName === parameterName && this._closeParenToken === closeParenToken && this._block === block) {
            return this;
        }
        return new SetAccessorPropertyAssignmentSyntax(setKeyword, propertyName, openParenToken, parameterName, closeParenToken, block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withSetKeyword = function (setKeyword) {
        return this.update(setKeyword, this._propertyName, this._openParenToken, this._parameterName, this._closeParenToken, this._block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withPropertyName = function (propertyName) {
        return this.update(this._setKeyword, propertyName, this._openParenToken, this._parameterName, this._closeParenToken, this._block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._setKeyword, this._propertyName, openParenToken, this._parameterName, this._closeParenToken, this._block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withParameterName = function (parameterName) {
        return this.update(this._setKeyword, this._propertyName, this._openParenToken, parameterName, this._closeParenToken, this._block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._setKeyword, this._propertyName, this._openParenToken, this._parameterName, closeParenToken, this._block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withBlock = function (block) {
        return this.update(this._setKeyword, this._propertyName, this._openParenToken, this._parameterName, this._closeParenToken, block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.collectTextElements = function (elements) {
        this._setKeyword.collectTextElements(elements);
        this._propertyName.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._parameterName.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._block.collectTextElements(elements);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._block.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return SetAccessorPropertyAssignmentSyntax;
})(AccessorPropertyAssignmentSyntax);
var FunctionExpressionSyntax = (function (_super) {
    __extends(FunctionExpressionSyntax, _super);
    function FunctionExpressionSyntax(functionKeyword, identifier, callSignature, block) {
        _super.call(this);
        if(callSignature === null) {
            throw Errors.argumentNull('callSignature');
        }
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(functionKeyword.keywordKind() !== 25 /* FunctionKeyword */ ) {
            throw Errors.argument('functionKeyword');
        }
        if(identifier !== null) {
            if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
                throw Errors.argument('identifier');
            }
        }
        this._functionKeyword = functionKeyword;
        this._identifier = identifier;
        this._callSignature = callSignature;
        this._block = block;
    }
    FunctionExpressionSyntax.create = function create(functionKeyword, callSignature, block) {
        return new FunctionExpressionSyntax(functionKeyword, null, callSignature, block);
    }
    FunctionExpressionSyntax.create1 = function create1() {
        return new FunctionExpressionSyntax(Syntax.token(25 /* FunctionKeyword */ ), null, CallSignatureSyntax.create1(), BlockSyntax.create1());
    }
    FunctionExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitFunctionExpression(this);
    };
    FunctionExpressionSyntax.prototype.kind = function () {
        return 220 /* FunctionExpression */ ;
    };
    FunctionExpressionSyntax.prototype.isMissing = function () {
        if(!this._functionKeyword.isMissing()) {
            return false;
        }
        if(this._identifier !== null && !this._identifier.isMissing()) {
            return false;
        }
        if(!this._callSignature.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    FunctionExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._functionKeyword.width() > 0) {
            return this._functionKeyword;
        }
        if(this._identifier !== null && this._identifier.width() > 0) {
            return this._identifier;
        }
        if((token = this._callSignature.firstToken()) !== null) {
            return token;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    FunctionExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if((token = this._callSignature.lastToken()) !== null) {
            return token;
        }
        if(this._identifier !== null && this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._functionKeyword.width() > 0) {
            return this._functionKeyword;
        }
        return null;
    };
    FunctionExpressionSyntax.prototype.functionKeyword = function () {
        return this._functionKeyword;
    };
    FunctionExpressionSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    FunctionExpressionSyntax.prototype.callSignature = function () {
        return this._callSignature;
    };
    FunctionExpressionSyntax.prototype.block = function () {
        return this._block;
    };
    FunctionExpressionSyntax.prototype.update = function (functionKeyword, identifier, callSignature, block) {
        if(this._functionKeyword === functionKeyword && this._identifier === identifier && this._callSignature === callSignature && this._block === block) {
            return this;
        }
        return new FunctionExpressionSyntax(functionKeyword, identifier, callSignature, block);
    };
    FunctionExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    FunctionExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    FunctionExpressionSyntax.prototype.withFunctionKeyword = function (functionKeyword) {
        return this.update(functionKeyword, this._identifier, this._callSignature, this._block);
    };
    FunctionExpressionSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._functionKeyword, identifier, this._callSignature, this._block);
    };
    FunctionExpressionSyntax.prototype.withCallSignature = function (callSignature) {
        return this.update(this._functionKeyword, this._identifier, callSignature, this._block);
    };
    FunctionExpressionSyntax.prototype.withBlock = function (block) {
        return this.update(this._functionKeyword, this._identifier, this._callSignature, block);
    };
    FunctionExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._functionKeyword.collectTextElements(elements);
        if(this._identifier !== null) {
            this._identifier.collectTextElements(elements);
        }
        this._callSignature.collectTextElements(elements);
        this._block.collectTextElements(elements);
    };
    FunctionExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._callSignature.isTypeScriptSpecific()) {
            return true;
        }
        if(this._block.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return FunctionExpressionSyntax;
})(UnaryExpressionSyntax);
var EmptyStatementSyntax = (function (_super) {
    __extends(EmptyStatementSyntax, _super);
    function EmptyStatementSyntax(semicolonToken) {
        _super.call(this);
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._semicolonToken = semicolonToken;
    }
    EmptyStatementSyntax.create1 = function create1() {
        return new EmptyStatementSyntax(Syntax.token(75 /* SemicolonToken */ ));
    }
    EmptyStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitEmptyStatement(this);
    };
    EmptyStatementSyntax.prototype.kind = function () {
        return 148 /* EmptyStatement */ ;
    };
    EmptyStatementSyntax.prototype.isMissing = function () {
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    EmptyStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    EmptyStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    EmptyStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    EmptyStatementSyntax.prototype.update = function (semicolonToken) {
        if(this._semicolonToken === semicolonToken) {
            return this;
        }
        return new EmptyStatementSyntax(semicolonToken);
    };
    EmptyStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    EmptyStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    EmptyStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(semicolonToken);
    };
    EmptyStatementSyntax.prototype.collectTextElements = function (elements) {
        this._semicolonToken.collectTextElements(elements);
    };
    EmptyStatementSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return EmptyStatementSyntax;
})(StatementSyntax);
var SuperExpressionSyntax = (function (_super) {
    __extends(SuperExpressionSyntax, _super);
    function SuperExpressionSyntax(superKeyword) {
        _super.call(this);
        if(superKeyword.keywordKind() !== 48 /* SuperKeyword */ ) {
            throw Errors.argument('superKeyword');
        }
        this._superKeyword = superKeyword;
    }
    SuperExpressionSyntax.create1 = function create1() {
        return new SuperExpressionSyntax(Syntax.token(48 /* SuperKeyword */ ));
    }
    SuperExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitSuperExpression(this);
    };
    SuperExpressionSyntax.prototype.kind = function () {
        return 221 /* SuperExpression */ ;
    };
    SuperExpressionSyntax.prototype.isMissing = function () {
        if(!this._superKeyword.isMissing()) {
            return false;
        }
        return true;
    };
    SuperExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._superKeyword.width() > 0) {
            return this._superKeyword;
        }
        return null;
    };
    SuperExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._superKeyword.width() > 0) {
            return this._superKeyword;
        }
        return null;
    };
    SuperExpressionSyntax.prototype.superKeyword = function () {
        return this._superKeyword;
    };
    SuperExpressionSyntax.prototype.update = function (superKeyword) {
        if(this._superKeyword === superKeyword) {
            return this;
        }
        return new SuperExpressionSyntax(superKeyword);
    };
    SuperExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    SuperExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    SuperExpressionSyntax.prototype.withSuperKeyword = function (superKeyword) {
        return this.update(superKeyword);
    };
    SuperExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._superKeyword.collectTextElements(elements);
    };
    SuperExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        return true;
    };
    return SuperExpressionSyntax;
})(UnaryExpressionSyntax);
var TryStatementSyntax = (function (_super) {
    __extends(TryStatementSyntax, _super);
    function TryStatementSyntax(tryKeyword, block, catchClause, finallyClause) {
        _super.call(this);
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(tryKeyword.keywordKind() !== 36 /* TryKeyword */ ) {
            throw Errors.argument('tryKeyword');
        }
        this._tryKeyword = tryKeyword;
        this._block = block;
        this._catchClause = catchClause;
        this._finallyClause = finallyClause;
    }
    TryStatementSyntax.create = function create(tryKeyword, block) {
        return new TryStatementSyntax(tryKeyword, block, null, null);
    }
    TryStatementSyntax.create1 = function create1() {
        return new TryStatementSyntax(Syntax.token(36 /* TryKeyword */ ), BlockSyntax.create1(), null, null);
    }
    TryStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitTryStatement(this);
    };
    TryStatementSyntax.prototype.kind = function () {
        return 151 /* TryStatement */ ;
    };
    TryStatementSyntax.prototype.isMissing = function () {
        if(!this._tryKeyword.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        if(this._catchClause !== null && !this._catchClause.isMissing()) {
            return false;
        }
        if(this._finallyClause !== null && !this._finallyClause.isMissing()) {
            return false;
        }
        return true;
    };
    TryStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._tryKeyword.width() > 0) {
            return this._tryKeyword;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        if(this._catchClause !== null && (token = this._catchClause.firstToken()) !== null) {
            return token;
        }
        if(this._finallyClause !== null && (token = this._finallyClause.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    TryStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._finallyClause !== null && (token = this._finallyClause.lastToken()) !== null) {
            return token;
        }
        if(this._catchClause !== null && (token = this._catchClause.lastToken()) !== null) {
            return token;
        }
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if(this._tryKeyword.width() > 0) {
            return this._tryKeyword;
        }
        return null;
    };
    TryStatementSyntax.prototype.tryKeyword = function () {
        return this._tryKeyword;
    };
    TryStatementSyntax.prototype.block = function () {
        return this._block;
    };
    TryStatementSyntax.prototype.catchClause = function () {
        return this._catchClause;
    };
    TryStatementSyntax.prototype.finallyClause = function () {
        return this._finallyClause;
    };
    TryStatementSyntax.prototype.update = function (tryKeyword, block, catchClause, finallyClause) {
        if(this._tryKeyword === tryKeyword && this._block === block && this._catchClause === catchClause && this._finallyClause === finallyClause) {
            return this;
        }
        return new TryStatementSyntax(tryKeyword, block, catchClause, finallyClause);
    };
    TryStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    TryStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    TryStatementSyntax.prototype.withTryKeyword = function (tryKeyword) {
        return this.update(tryKeyword, this._block, this._catchClause, this._finallyClause);
    };
    TryStatementSyntax.prototype.withBlock = function (block) {
        return this.update(this._tryKeyword, block, this._catchClause, this._finallyClause);
    };
    TryStatementSyntax.prototype.withCatchClause = function (catchClause) {
        return this.update(this._tryKeyword, this._block, catchClause, this._finallyClause);
    };
    TryStatementSyntax.prototype.withFinallyClause = function (finallyClause) {
        return this.update(this._tryKeyword, this._block, this._catchClause, finallyClause);
    };
    TryStatementSyntax.prototype.collectTextElements = function (elements) {
        this._tryKeyword.collectTextElements(elements);
        this._block.collectTextElements(elements);
        if(this._catchClause !== null) {
            this._catchClause.collectTextElements(elements);
        }
        if(this._finallyClause !== null) {
            this._finallyClause.collectTextElements(elements);
        }
    };
    TryStatementSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._block.isTypeScriptSpecific()) {
            return true;
        }
        if(this._catchClause !== null && this._catchClause.isTypeScriptSpecific()) {
            return true;
        }
        if(this._finallyClause !== null && this._finallyClause.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return TryStatementSyntax;
})(StatementSyntax);
var CatchClauseSyntax = (function (_super) {
    __extends(CatchClauseSyntax, _super);
    function CatchClauseSyntax(catchKeyword, openParenToken, identifier, closeParenToken, block) {
        _super.call(this);
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(catchKeyword.keywordKind() !== 15 /* CatchKeyword */ ) {
            throw Errors.argument('catchKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._catchKeyword = catchKeyword;
        this._openParenToken = openParenToken;
        this._identifier = identifier;
        this._closeParenToken = closeParenToken;
        this._block = block;
    }
    CatchClauseSyntax.create1 = function create1(identifier) {
        return new CatchClauseSyntax(Syntax.token(15 /* CatchKeyword */ ), Syntax.token(69 /* OpenParenToken */ ), identifier, Syntax.token(70 /* CloseParenToken */ ), BlockSyntax.create1());
    }
    CatchClauseSyntax.prototype.accept = function (visitor) {
        return visitor.visitCatchClause(this);
    };
    CatchClauseSyntax.prototype.kind = function () {
        return 233 /* CatchClause */ ;
    };
    CatchClauseSyntax.prototype.isMissing = function () {
        if(!this._catchKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    CatchClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._catchKeyword.width() > 0) {
            return this._catchKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    CatchClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._catchKeyword.width() > 0) {
            return this._catchKeyword;
        }
        return null;
    };
    CatchClauseSyntax.prototype.catchKeyword = function () {
        return this._catchKeyword;
    };
    CatchClauseSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    CatchClauseSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    CatchClauseSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    CatchClauseSyntax.prototype.block = function () {
        return this._block;
    };
    CatchClauseSyntax.prototype.update = function (catchKeyword, openParenToken, identifier, closeParenToken, block) {
        if(this._catchKeyword === catchKeyword && this._openParenToken === openParenToken && this._identifier === identifier && this._closeParenToken === closeParenToken && this._block === block) {
            return this;
        }
        return new CatchClauseSyntax(catchKeyword, openParenToken, identifier, closeParenToken, block);
    };
    CatchClauseSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    CatchClauseSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    CatchClauseSyntax.prototype.withCatchKeyword = function (catchKeyword) {
        return this.update(catchKeyword, this._openParenToken, this._identifier, this._closeParenToken, this._block);
    };
    CatchClauseSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._catchKeyword, openParenToken, this._identifier, this._closeParenToken, this._block);
    };
    CatchClauseSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._catchKeyword, this._openParenToken, identifier, this._closeParenToken, this._block);
    };
    CatchClauseSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._catchKeyword, this._openParenToken, this._identifier, closeParenToken, this._block);
    };
    CatchClauseSyntax.prototype.withBlock = function (block) {
        return this.update(this._catchKeyword, this._openParenToken, this._identifier, this._closeParenToken, block);
    };
    CatchClauseSyntax.prototype.collectTextElements = function (elements) {
        this._catchKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._block.collectTextElements(elements);
    };
    CatchClauseSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._block.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return CatchClauseSyntax;
})(SyntaxNode);
var FinallyClauseSyntax = (function (_super) {
    __extends(FinallyClauseSyntax, _super);
    function FinallyClauseSyntax(finallyKeyword, block) {
        _super.call(this);
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(finallyKeyword.keywordKind() !== 23 /* FinallyKeyword */ ) {
            throw Errors.argument('finallyKeyword');
        }
        this._finallyKeyword = finallyKeyword;
        this._block = block;
    }
    FinallyClauseSyntax.create1 = function create1() {
        return new FinallyClauseSyntax(Syntax.token(23 /* FinallyKeyword */ ), BlockSyntax.create1());
    }
    FinallyClauseSyntax.prototype.accept = function (visitor) {
        return visitor.visitFinallyClause(this);
    };
    FinallyClauseSyntax.prototype.kind = function () {
        return 234 /* FinallyClause */ ;
    };
    FinallyClauseSyntax.prototype.isMissing = function () {
        if(!this._finallyKeyword.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    FinallyClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._finallyKeyword.width() > 0) {
            return this._finallyKeyword;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    FinallyClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if(this._finallyKeyword.width() > 0) {
            return this._finallyKeyword;
        }
        return null;
    };
    FinallyClauseSyntax.prototype.finallyKeyword = function () {
        return this._finallyKeyword;
    };
    FinallyClauseSyntax.prototype.block = function () {
        return this._block;
    };
    FinallyClauseSyntax.prototype.update = function (finallyKeyword, block) {
        if(this._finallyKeyword === finallyKeyword && this._block === block) {
            return this;
        }
        return new FinallyClauseSyntax(finallyKeyword, block);
    };
    FinallyClauseSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    FinallyClauseSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    FinallyClauseSyntax.prototype.withFinallyKeyword = function (finallyKeyword) {
        return this.update(finallyKeyword, this._block);
    };
    FinallyClauseSyntax.prototype.withBlock = function (block) {
        return this.update(this._finallyKeyword, block);
    };
    FinallyClauseSyntax.prototype.collectTextElements = function (elements) {
        this._finallyKeyword.collectTextElements(elements);
        this._block.collectTextElements(elements);
    };
    FinallyClauseSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._block.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return FinallyClauseSyntax;
})(SyntaxNode);
var LabeledStatement = (function (_super) {
    __extends(LabeledStatement, _super);
    function LabeledStatement(identifier, colonToken, statement) {
        _super.call(this);
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(colonToken.kind() !== 103 /* ColonToken */ ) {
            throw Errors.argument('colonToken');
        }
        this._identifier = identifier;
        this._colonToken = colonToken;
        this._statement = statement;
    }
    LabeledStatement.create1 = function create1(identifier, statement) {
        return new LabeledStatement(identifier, Syntax.token(103 /* ColonToken */ ), statement);
    }
    LabeledStatement.prototype.accept = function (visitor) {
        return visitor.visitLabeledStatement(this);
    };
    LabeledStatement.prototype.kind = function () {
        return 152 /* LabeledStatement */ ;
    };
    LabeledStatement.prototype.isMissing = function () {
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._colonToken.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        return true;
    };
    LabeledStatement.prototype.firstToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    LabeledStatement.prototype.lastToken = function () {
        var token = null;
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    LabeledStatement.prototype.identifier = function () {
        return this._identifier;
    };
    LabeledStatement.prototype.colonToken = function () {
        return this._colonToken;
    };
    LabeledStatement.prototype.statement = function () {
        return this._statement;
    };
    LabeledStatement.prototype.update = function (identifier, colonToken, statement) {
        if(this._identifier === identifier && this._colonToken === colonToken && this._statement === statement) {
            return this;
        }
        return new LabeledStatement(identifier, colonToken, statement);
    };
    LabeledStatement.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    LabeledStatement.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    LabeledStatement.prototype.withIdentifier = function (identifier) {
        return this.update(identifier, this._colonToken, this._statement);
    };
    LabeledStatement.prototype.withColonToken = function (colonToken) {
        return this.update(this._identifier, colonToken, this._statement);
    };
    LabeledStatement.prototype.withStatement = function (statement) {
        return this.update(this._identifier, this._colonToken, statement);
    };
    LabeledStatement.prototype.collectTextElements = function (elements) {
        this._identifier.collectTextElements(elements);
        this._colonToken.collectTextElements(elements);
        this._statement.collectTextElements(elements);
    };
    LabeledStatement.prototype.isTypeScriptSpecific = function () {
        if(this._statement.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return LabeledStatement;
})(StatementSyntax);
var DoStatementSyntax = (function (_super) {
    __extends(DoStatementSyntax, _super);
    function DoStatementSyntax(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken) {
        _super.call(this);
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(condition === null) {
            throw Errors.argumentNull('condition');
        }
        if(doKeyword.keywordKind() !== 20 /* DoKeyword */ ) {
            throw Errors.argument('doKeyword');
        }
        if(whileKeyword.keywordKind() !== 40 /* WhileKeyword */ ) {
            throw Errors.argument('whileKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._doKeyword = doKeyword;
        this._statement = statement;
        this._whileKeyword = whileKeyword;
        this._openParenToken = openParenToken;
        this._condition = condition;
        this._closeParenToken = closeParenToken;
        this._semicolonToken = semicolonToken;
    }
    DoStatementSyntax.create1 = function create1(statement, condition) {
        return new DoStatementSyntax(Syntax.token(20 /* DoKeyword */ ), statement, Syntax.token(40 /* WhileKeyword */ ), Syntax.token(69 /* OpenParenToken */ ), condition, Syntax.token(70 /* CloseParenToken */ ), Syntax.token(75 /* SemicolonToken */ ));
    }
    DoStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitDoStatement(this);
    };
    DoStatementSyntax.prototype.kind = function () {
        return 153 /* DoStatement */ ;
    };
    DoStatementSyntax.prototype.isMissing = function () {
        if(!this._doKeyword.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        if(!this._whileKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._condition.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    DoStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._doKeyword.width() > 0) {
            return this._doKeyword;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        if(this._whileKeyword.width() > 0) {
            return this._whileKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._condition.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    DoStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._condition.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._whileKeyword.width() > 0) {
            return this._whileKeyword;
        }
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._doKeyword.width() > 0) {
            return this._doKeyword;
        }
        return null;
    };
    DoStatementSyntax.prototype.doKeyword = function () {
        return this._doKeyword;
    };
    DoStatementSyntax.prototype.statement = function () {
        return this._statement;
    };
    DoStatementSyntax.prototype.whileKeyword = function () {
        return this._whileKeyword;
    };
    DoStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    DoStatementSyntax.prototype.condition = function () {
        return this._condition;
    };
    DoStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    DoStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    DoStatementSyntax.prototype.update = function (doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken) {
        if(this._doKeyword === doKeyword && this._statement === statement && this._whileKeyword === whileKeyword && this._openParenToken === openParenToken && this._condition === condition && this._closeParenToken === closeParenToken && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new DoStatementSyntax(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken);
    };
    DoStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    DoStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    DoStatementSyntax.prototype.withDoKeyword = function (doKeyword) {
        return this.update(doKeyword, this._statement, this._whileKeyword, this._openParenToken, this._condition, this._closeParenToken, this._semicolonToken);
    };
    DoStatementSyntax.prototype.withStatement = function (statement) {
        return this.update(this._doKeyword, statement, this._whileKeyword, this._openParenToken, this._condition, this._closeParenToken, this._semicolonToken);
    };
    DoStatementSyntax.prototype.withWhileKeyword = function (whileKeyword) {
        return this.update(this._doKeyword, this._statement, whileKeyword, this._openParenToken, this._condition, this._closeParenToken, this._semicolonToken);
    };
    DoStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._doKeyword, this._statement, this._whileKeyword, openParenToken, this._condition, this._closeParenToken, this._semicolonToken);
    };
    DoStatementSyntax.prototype.withCondition = function (condition) {
        return this.update(this._doKeyword, this._statement, this._whileKeyword, this._openParenToken, condition, this._closeParenToken, this._semicolonToken);
    };
    DoStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._doKeyword, this._statement, this._whileKeyword, this._openParenToken, this._condition, closeParenToken, this._semicolonToken);
    };
    DoStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._doKeyword, this._statement, this._whileKeyword, this._openParenToken, this._condition, this._closeParenToken, semicolonToken);
    };
    DoStatementSyntax.prototype.collectTextElements = function (elements) {
        this._doKeyword.collectTextElements(elements);
        this._statement.collectTextElements(elements);
        this._whileKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._condition.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    DoStatementSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._statement.isTypeScriptSpecific()) {
            return true;
        }
        if(this._condition.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return DoStatementSyntax;
})(IterationStatementSyntax);
var TypeOfExpressionSyntax = (function (_super) {
    __extends(TypeOfExpressionSyntax, _super);
    function TypeOfExpressionSyntax(typeOfKeyword, expression) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(typeOfKeyword.keywordKind() !== 37 /* TypeOfKeyword */ ) {
            throw Errors.argument('typeOfKeyword');
        }
        this._typeOfKeyword = typeOfKeyword;
        this._expression = expression;
    }
    TypeOfExpressionSyntax.create1 = function create1(expression) {
        return new TypeOfExpressionSyntax(Syntax.token(37 /* TypeOfKeyword */ ), expression);
    }
    TypeOfExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitTypeOfExpression(this);
    };
    TypeOfExpressionSyntax.prototype.kind = function () {
        return 163 /* TypeOfExpression */ ;
    };
    TypeOfExpressionSyntax.prototype.isMissing = function () {
        if(!this._typeOfKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        return true;
    };
    TypeOfExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._typeOfKeyword.width() > 0) {
            return this._typeOfKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    TypeOfExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._typeOfKeyword.width() > 0) {
            return this._typeOfKeyword;
        }
        return null;
    };
    TypeOfExpressionSyntax.prototype.typeOfKeyword = function () {
        return this._typeOfKeyword;
    };
    TypeOfExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    TypeOfExpressionSyntax.prototype.update = function (typeOfKeyword, expression) {
        if(this._typeOfKeyword === typeOfKeyword && this._expression === expression) {
            return this;
        }
        return new TypeOfExpressionSyntax(typeOfKeyword, expression);
    };
    TypeOfExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    TypeOfExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    TypeOfExpressionSyntax.prototype.withTypeOfKeyword = function (typeOfKeyword) {
        return this.update(typeOfKeyword, this._expression);
    };
    TypeOfExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(this._typeOfKeyword, expression);
    };
    TypeOfExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._typeOfKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
    };
    TypeOfExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return TypeOfExpressionSyntax;
})(UnaryExpressionSyntax);
var DeleteExpressionSyntax = (function (_super) {
    __extends(DeleteExpressionSyntax, _super);
    function DeleteExpressionSyntax(deleteKeyword, expression) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(deleteKeyword.keywordKind() !== 19 /* DeleteKeyword */ ) {
            throw Errors.argument('deleteKeyword');
        }
        this._deleteKeyword = deleteKeyword;
        this._expression = expression;
    }
    DeleteExpressionSyntax.create1 = function create1(expression) {
        return new DeleteExpressionSyntax(Syntax.token(19 /* DeleteKeyword */ ), expression);
    }
    DeleteExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitDeleteExpression(this);
    };
    DeleteExpressionSyntax.prototype.kind = function () {
        return 162 /* DeleteExpression */ ;
    };
    DeleteExpressionSyntax.prototype.isMissing = function () {
        if(!this._deleteKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        return true;
    };
    DeleteExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._deleteKeyword.width() > 0) {
            return this._deleteKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    DeleteExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._deleteKeyword.width() > 0) {
            return this._deleteKeyword;
        }
        return null;
    };
    DeleteExpressionSyntax.prototype.deleteKeyword = function () {
        return this._deleteKeyword;
    };
    DeleteExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    DeleteExpressionSyntax.prototype.update = function (deleteKeyword, expression) {
        if(this._deleteKeyword === deleteKeyword && this._expression === expression) {
            return this;
        }
        return new DeleteExpressionSyntax(deleteKeyword, expression);
    };
    DeleteExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    DeleteExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    DeleteExpressionSyntax.prototype.withDeleteKeyword = function (deleteKeyword) {
        return this.update(deleteKeyword, this._expression);
    };
    DeleteExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(this._deleteKeyword, expression);
    };
    DeleteExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._deleteKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
    };
    DeleteExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return DeleteExpressionSyntax;
})(UnaryExpressionSyntax);
var VoidExpressionSyntax = (function (_super) {
    __extends(VoidExpressionSyntax, _super);
    function VoidExpressionSyntax(voidKeyword, expression) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(voidKeyword.keywordKind() !== 39 /* VoidKeyword */ ) {
            throw Errors.argument('voidKeyword');
        }
        this._voidKeyword = voidKeyword;
        this._expression = expression;
    }
    VoidExpressionSyntax.create1 = function create1(expression) {
        return new VoidExpressionSyntax(Syntax.token(39 /* VoidKeyword */ ), expression);
    }
    VoidExpressionSyntax.prototype.accept = function (visitor) {
        return visitor.visitVoidExpression(this);
    };
    VoidExpressionSyntax.prototype.kind = function () {
        return 164 /* VoidExpression */ ;
    };
    VoidExpressionSyntax.prototype.isMissing = function () {
        if(!this._voidKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        return true;
    };
    VoidExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._voidKeyword.width() > 0) {
            return this._voidKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    VoidExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._voidKeyword.width() > 0) {
            return this._voidKeyword;
        }
        return null;
    };
    VoidExpressionSyntax.prototype.voidKeyword = function () {
        return this._voidKeyword;
    };
    VoidExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    VoidExpressionSyntax.prototype.update = function (voidKeyword, expression) {
        if(this._voidKeyword === voidKeyword && this._expression === expression) {
            return this;
        }
        return new VoidExpressionSyntax(voidKeyword, expression);
    };
    VoidExpressionSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    VoidExpressionSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    VoidExpressionSyntax.prototype.withVoidKeyword = function (voidKeyword) {
        return this.update(voidKeyword, this._expression);
    };
    VoidExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(this._voidKeyword, expression);
    };
    VoidExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._voidKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
    };
    VoidExpressionSyntax.prototype.isTypeScriptSpecific = function () {
        if(this._expression.isTypeScriptSpecific()) {
            return true;
        }
        return false;
    };
    return VoidExpressionSyntax;
})(UnaryExpressionSyntax);
var DebuggerStatementSyntax = (function (_super) {
    __extends(DebuggerStatementSyntax, _super);
    function DebuggerStatementSyntax(debuggerKeyword, semicolonToken) {
        _super.call(this);
        if(debuggerKeyword.keywordKind() !== 17 /* DebuggerKeyword */ ) {
            throw Errors.argument('debuggerKeyword');
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._debuggerKeyword = debuggerKeyword;
        this._semicolonToken = semicolonToken;
    }
    DebuggerStatementSyntax.create1 = function create1() {
        return new DebuggerStatementSyntax(Syntax.token(17 /* DebuggerKeyword */ ), Syntax.token(75 /* SemicolonToken */ ));
    }
    DebuggerStatementSyntax.prototype.accept = function (visitor) {
        return visitor.visitDebuggerStatement(this);
    };
    DebuggerStatementSyntax.prototype.kind = function () {
        return 154 /* DebuggerStatement */ ;
    };
    DebuggerStatementSyntax.prototype.isMissing = function () {
        if(!this._debuggerKeyword.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    DebuggerStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._debuggerKeyword.width() > 0) {
            return this._debuggerKeyword;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    DebuggerStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._debuggerKeyword.width() > 0) {
            return this._debuggerKeyword;
        }
        return null;
    };
    DebuggerStatementSyntax.prototype.debuggerKeyword = function () {
        return this._debuggerKeyword;
    };
    DebuggerStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    DebuggerStatementSyntax.prototype.update = function (debuggerKeyword, semicolonToken) {
        if(this._debuggerKeyword === debuggerKeyword && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new DebuggerStatementSyntax(debuggerKeyword, semicolonToken);
    };
    DebuggerStatementSyntax.prototype.withLeadingTrivia = function (trivia) {
        return _super.prototype.withLeadingTrivia.call(this, trivia);
    };
    DebuggerStatementSyntax.prototype.withTrailingTrivia = function (trivia) {
        return _super.prototype.withTrailingTrivia.call(this, trivia);
    };
    DebuggerStatementSyntax.prototype.withDebuggerKeyword = function (debuggerKeyword) {
        return this.update(debuggerKeyword, this._semicolonToken);
    };
    DebuggerStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._debuggerKeyword, semicolonToken);
    };
    DebuggerStatementSyntax.prototype.collectTextElements = function (elements) {
        this._debuggerKeyword.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    DebuggerStatementSyntax.prototype.isTypeScriptSpecific = function () {
        return false;
    };
    return DebuggerStatementSyntax;
})(StatementSyntax);
var DefaultSyntaxVisitor1 = (function () {
    function DefaultSyntaxVisitor1() { }
    DefaultSyntaxVisitor1.prototype.defaultVisit = function (node) {
        return null;
    };
    DefaultSyntaxVisitor1.prototype.visitSourceUnit = function (node) {
        return null;
    };
    DefaultSyntaxVisitor1.prototype.visitExternalModuleReference = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitModuleNameModuleReference = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitImportDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitClassDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitInterfaceDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitExtendsClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitImplementsClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitModuleDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitFunctionDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitVariableStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitVariableDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitVariableDeclarator = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitEqualsValueClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitPrefixUnaryExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitThisExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitLiteralExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitArrayLiteralExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitOmittedExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitParenthesizedExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitSimpleArrowFunctionExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitParenthesizedArrowFunctionExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitIdentifierName = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitQualifiedName = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitConstructorType = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitFunctionType = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitObjectType = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitArrayType = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitPredefinedType = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitTypeAnnotation = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitBlock = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitParameter = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitMemberAccessExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitPostfixUnaryExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitElementAccessExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitInvocationExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitArgumentList = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitBinaryExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitConditionalExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitConstructSignature = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitFunctionSignature = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitIndexSignature = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitPropertySignature = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitParameterList = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitCallSignature = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitElseClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitIfStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitExpressionStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitConstructorDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitMemberFunctionDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitGetMemberAccessorDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitSetMemberAccessorDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitMemberVariableDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitThrowStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitReturnStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitObjectCreationExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitSwitchStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitCaseSwitchClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitDefaultSwitchClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitBreakStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitContinueStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitForStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitForInStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitWhileStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitWithStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitEnumDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitCastExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitObjectLiteralExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitSimplePropertyAssignment = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitGetAccessorPropertyAssignment = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitSetAccessorPropertyAssignment = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitFunctionExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitEmptyStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitSuperExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitTryStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitCatchClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitFinallyClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitLabeledStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitDoStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitTypeOfExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitDeleteExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitVoidExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitDebuggerStatement = function (node) {
        return this.defaultVisit(node);
    };
    return DefaultSyntaxVisitor1;
})();
var SyntaxWalker = (function () {
    function SyntaxWalker() { }
    SyntaxWalker.prototype.visitToken = function (token) {
    };
    SyntaxWalker.prototype.visitOptionalToken = function (token) {
        if(token === null) {
            return;
        }
        this.visitToken(token);
    };
    SyntaxWalker.prototype.visitOptionalNode = function (node) {
        if(node === null) {
            return;
        }
        node.accept(this);
    };
    SyntaxWalker.prototype.visitList = function (list) {
        for(var i = 0, n = list.count(); i < n; i++) {
            list.syntaxNodeAt(i).accept(this);
        }
    };
    SyntaxWalker.prototype.visitSeparatedList = function (list) {
        for(var i = 0, n = list.count(); i < n; i++) {
            var item = list.itemAt(i);
            if(item.isToken()) {
                this.visitToken(item);
            } else {
                (item).accept(this);
            }
        }
    };
    SyntaxWalker.prototype.visitSourceUnit = function (node) {
        this.visitList(node.moduleElements());
        this.visitToken(node.endOfFileToken());
    };
    SyntaxWalker.prototype.visitExternalModuleReference = function (node) {
        this.visitToken(node.moduleKeyword());
        this.visitToken(node.openParenToken());
        this.visitToken(node.stringLiteral());
        this.visitToken(node.closeParenToken());
    };
    SyntaxWalker.prototype.visitModuleNameModuleReference = function (node) {
        node.moduleName().accept(this);
    };
    SyntaxWalker.prototype.visitImportDeclaration = function (node) {
        this.visitToken(node.importKeyword());
        this.visitToken(node.identifier());
        this.visitToken(node.equalsToken());
        node.moduleReference().accept(this);
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitClassDeclaration = function (node) {
        this.visitOptionalToken(node.exportKeyword());
        this.visitOptionalToken(node.declareKeyword());
        this.visitToken(node.classKeyword());
        this.visitToken(node.identifier());
        this.visitOptionalNode(node.extendsClause());
        this.visitOptionalNode(node.implementsClause());
        this.visitToken(node.openBraceToken());
        this.visitList(node.classElements());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitInterfaceDeclaration = function (node) {
        this.visitOptionalToken(node.exportKeyword());
        this.visitToken(node.interfaceKeyword());
        this.visitToken(node.identifier());
        this.visitOptionalNode(node.extendsClause());
        node.body().accept(this);
    };
    SyntaxWalker.prototype.visitExtendsClause = function (node) {
        this.visitToken(node.extendsKeyword());
        this.visitSeparatedList(node.typeNames());
    };
    SyntaxWalker.prototype.visitImplementsClause = function (node) {
        this.visitToken(node.implementsKeyword());
        this.visitSeparatedList(node.typeNames());
    };
    SyntaxWalker.prototype.visitModuleDeclaration = function (node) {
        this.visitOptionalToken(node.exportKeyword());
        this.visitOptionalToken(node.declareKeyword());
        this.visitToken(node.moduleKeyword());
        this.visitOptionalNode(node.moduleName());
        this.visitOptionalToken(node.stringLiteral());
        this.visitToken(node.openBraceToken());
        this.visitList(node.moduleElements());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitFunctionDeclaration = function (node) {
        this.visitOptionalToken(node.exportKeyword());
        this.visitOptionalToken(node.declareKeyword());
        this.visitToken(node.functionKeyword());
        node.functionSignature().accept(this);
        this.visitOptionalNode(node.block());
        this.visitOptionalToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitVariableStatement = function (node) {
        this.visitOptionalToken(node.exportKeyword());
        this.visitOptionalToken(node.declareKeyword());
        node.variableDeclaration().accept(this);
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitVariableDeclaration = function (node) {
        this.visitToken(node.varKeyword());
        this.visitSeparatedList(node.variableDeclarators());
    };
    SyntaxWalker.prototype.visitVariableDeclarator = function (node) {
        this.visitToken(node.identifier());
        this.visitOptionalNode(node.typeAnnotation());
        this.visitOptionalNode(node.equalsValueClause());
    };
    SyntaxWalker.prototype.visitEqualsValueClause = function (node) {
        this.visitToken(node.equalsToken());
        node.value().accept(this);
    };
    SyntaxWalker.prototype.visitPrefixUnaryExpression = function (node) {
        this.visitToken(node.operatorToken());
        node.operand().accept(this);
    };
    SyntaxWalker.prototype.visitThisExpression = function (node) {
        this.visitToken(node.thisKeyword());
    };
    SyntaxWalker.prototype.visitLiteralExpression = function (node) {
        this.visitToken(node.literalToken());
    };
    SyntaxWalker.prototype.visitArrayLiteralExpression = function (node) {
        this.visitToken(node.openBracketToken());
        this.visitSeparatedList(node.expressions());
        this.visitToken(node.closeBracketToken());
    };
    SyntaxWalker.prototype.visitOmittedExpression = function (node) {
    };
    SyntaxWalker.prototype.visitParenthesizedExpression = function (node) {
        this.visitToken(node.openParenToken());
        node.expression().accept(this);
        this.visitToken(node.closeParenToken());
    };
    SyntaxWalker.prototype.visitSimpleArrowFunctionExpression = function (node) {
        this.visitToken(node.identifier());
        this.visitToken(node.equalsGreaterThanToken());
        node.body().accept(this);
    };
    SyntaxWalker.prototype.visitParenthesizedArrowFunctionExpression = function (node) {
        node.callSignature().accept(this);
        this.visitToken(node.equalsGreaterThanToken());
        node.body().accept(this);
    };
    SyntaxWalker.prototype.visitIdentifierName = function (node) {
        this.visitToken(node.identifier());
    };
    SyntaxWalker.prototype.visitQualifiedName = function (node) {
        node.left().accept(this);
        this.visitToken(node.dotToken());
        node.right().accept(this);
    };
    SyntaxWalker.prototype.visitConstructorType = function (node) {
        this.visitToken(node.newKeyword());
        node.parameterList().accept(this);
        this.visitToken(node.equalsGreaterThanToken());
        node.type().accept(this);
    };
    SyntaxWalker.prototype.visitFunctionType = function (node) {
        node.parameterList().accept(this);
        this.visitToken(node.equalsGreaterThanToken());
        node.type().accept(this);
    };
    SyntaxWalker.prototype.visitObjectType = function (node) {
        this.visitToken(node.openBraceToken());
        this.visitSeparatedList(node.typeMembers());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitArrayType = function (node) {
        node.type().accept(this);
        this.visitToken(node.openBracketToken());
        this.visitToken(node.closeBracketToken());
    };
    SyntaxWalker.prototype.visitPredefinedType = function (node) {
        this.visitToken(node.keyword());
    };
    SyntaxWalker.prototype.visitTypeAnnotation = function (node) {
        this.visitToken(node.colonToken());
        node.type().accept(this);
    };
    SyntaxWalker.prototype.visitBlock = function (node) {
        this.visitToken(node.openBraceToken());
        this.visitList(node.statements());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitParameter = function (node) {
        this.visitOptionalToken(node.dotDotDotToken());
        this.visitOptionalToken(node.publicOrPrivateKeyword());
        this.visitToken(node.identifier());
        this.visitOptionalToken(node.questionToken());
        this.visitOptionalNode(node.typeAnnotation());
        this.visitOptionalNode(node.equalsValueClause());
    };
    SyntaxWalker.prototype.visitMemberAccessExpression = function (node) {
        node.expression().accept(this);
        this.visitToken(node.dotToken());
        node.identifierName().accept(this);
    };
    SyntaxWalker.prototype.visitPostfixUnaryExpression = function (node) {
        node.operand().accept(this);
        this.visitToken(node.operatorToken());
    };
    SyntaxWalker.prototype.visitElementAccessExpression = function (node) {
        node.expression().accept(this);
        this.visitToken(node.openBracketToken());
        node.argumentExpression().accept(this);
        this.visitToken(node.closeBracketToken());
    };
    SyntaxWalker.prototype.visitInvocationExpression = function (node) {
        node.expression().accept(this);
        node.argumentList().accept(this);
    };
    SyntaxWalker.prototype.visitArgumentList = function (node) {
        this.visitToken(node.openParenToken());
        this.visitSeparatedList(node.arguments());
        this.visitToken(node.closeParenToken());
    };
    SyntaxWalker.prototype.visitBinaryExpression = function (node) {
        node.left().accept(this);
        this.visitToken(node.operatorToken());
        node.right().accept(this);
    };
    SyntaxWalker.prototype.visitConditionalExpression = function (node) {
        node.condition().accept(this);
        this.visitToken(node.questionToken());
        node.whenTrue().accept(this);
        this.visitToken(node.colonToken());
        node.whenFalse().accept(this);
    };
    SyntaxWalker.prototype.visitConstructSignature = function (node) {
        this.visitToken(node.newKeyword());
        node.parameterList().accept(this);
        this.visitOptionalNode(node.typeAnnotation());
    };
    SyntaxWalker.prototype.visitFunctionSignature = function (node) {
        this.visitToken(node.identifier());
        this.visitOptionalToken(node.questionToken());
        node.parameterList().accept(this);
        this.visitOptionalNode(node.typeAnnotation());
    };
    SyntaxWalker.prototype.visitIndexSignature = function (node) {
        this.visitToken(node.openBracketToken());
        node.parameter().accept(this);
        this.visitToken(node.closeBracketToken());
        this.visitOptionalNode(node.typeAnnotation());
    };
    SyntaxWalker.prototype.visitPropertySignature = function (node) {
        this.visitToken(node.identifier());
        this.visitOptionalToken(node.questionToken());
        this.visitOptionalNode(node.typeAnnotation());
    };
    SyntaxWalker.prototype.visitParameterList = function (node) {
        this.visitToken(node.openParenToken());
        this.visitSeparatedList(node.parameters());
        this.visitToken(node.closeParenToken());
    };
    SyntaxWalker.prototype.visitCallSignature = function (node) {
        node.parameterList().accept(this);
        this.visitOptionalNode(node.typeAnnotation());
    };
    SyntaxWalker.prototype.visitElseClause = function (node) {
        this.visitToken(node.elseKeyword());
        node.statement().accept(this);
    };
    SyntaxWalker.prototype.visitIfStatement = function (node) {
        this.visitToken(node.ifKeyword());
        this.visitToken(node.openParenToken());
        node.condition().accept(this);
        this.visitToken(node.closeParenToken());
        node.statement().accept(this);
        this.visitOptionalNode(node.elseClause());
    };
    SyntaxWalker.prototype.visitExpressionStatement = function (node) {
        node.expression().accept(this);
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitConstructorDeclaration = function (node) {
        this.visitToken(node.constructorKeyword());
        node.parameterList().accept(this);
        this.visitOptionalNode(node.block());
        this.visitOptionalToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitMemberFunctionDeclaration = function (node) {
        this.visitOptionalToken(node.publicOrPrivateKeyword());
        this.visitOptionalToken(node.staticKeyword());
        node.functionSignature().accept(this);
        this.visitOptionalNode(node.block());
        this.visitOptionalToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitGetMemberAccessorDeclaration = function (node) {
        this.visitOptionalToken(node.publicOrPrivateKeyword());
        this.visitOptionalToken(node.staticKeyword());
        this.visitToken(node.getKeyword());
        this.visitToken(node.identifier());
        node.parameterList().accept(this);
        this.visitOptionalNode(node.typeAnnotation());
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitSetMemberAccessorDeclaration = function (node) {
        this.visitOptionalToken(node.publicOrPrivateKeyword());
        this.visitOptionalToken(node.staticKeyword());
        this.visitToken(node.setKeyword());
        this.visitToken(node.identifier());
        node.parameterList().accept(this);
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitMemberVariableDeclaration = function (node) {
        this.visitOptionalToken(node.publicOrPrivateKeyword());
        this.visitOptionalToken(node.staticKeyword());
        node.variableDeclarator().accept(this);
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitThrowStatement = function (node) {
        this.visitToken(node.throwKeyword());
        node.expression().accept(this);
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitReturnStatement = function (node) {
        this.visitToken(node.returnKeyword());
        this.visitOptionalNode(node.expression());
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitObjectCreationExpression = function (node) {
        this.visitToken(node.newKeyword());
        node.expression().accept(this);
        this.visitOptionalNode(node.argumentList());
    };
    SyntaxWalker.prototype.visitSwitchStatement = function (node) {
        this.visitToken(node.switchKeyword());
        this.visitToken(node.openParenToken());
        node.expression().accept(this);
        this.visitToken(node.closeParenToken());
        this.visitToken(node.openBraceToken());
        this.visitList(node.switchClauses());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitCaseSwitchClause = function (node) {
        this.visitToken(node.caseKeyword());
        node.expression().accept(this);
        this.visitToken(node.colonToken());
        this.visitList(node.statements());
    };
    SyntaxWalker.prototype.visitDefaultSwitchClause = function (node) {
        this.visitToken(node.defaultKeyword());
        this.visitToken(node.colonToken());
        this.visitList(node.statements());
    };
    SyntaxWalker.prototype.visitBreakStatement = function (node) {
        this.visitToken(node.breakKeyword());
        this.visitOptionalToken(node.identifier());
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitContinueStatement = function (node) {
        this.visitToken(node.continueKeyword());
        this.visitOptionalToken(node.identifier());
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitForStatement = function (node) {
        this.visitToken(node.forKeyword());
        this.visitToken(node.openParenToken());
        this.visitOptionalNode(node.variableDeclaration());
        this.visitOptionalNode(node.initializer());
        this.visitToken(node.firstSemicolonToken());
        this.visitOptionalNode(node.condition());
        this.visitToken(node.secondSemicolonToken());
        this.visitOptionalNode(node.incrementor());
        this.visitToken(node.closeParenToken());
        node.statement().accept(this);
    };
    SyntaxWalker.prototype.visitForInStatement = function (node) {
        this.visitToken(node.forKeyword());
        this.visitToken(node.openParenToken());
        this.visitOptionalNode(node.variableDeclaration());
        this.visitOptionalNode(node.left());
        this.visitToken(node.inKeyword());
        node.expression().accept(this);
        this.visitToken(node.closeParenToken());
        node.statement().accept(this);
    };
    SyntaxWalker.prototype.visitWhileStatement = function (node) {
        this.visitToken(node.whileKeyword());
        this.visitToken(node.openParenToken());
        node.condition().accept(this);
        this.visitToken(node.closeParenToken());
        node.statement().accept(this);
    };
    SyntaxWalker.prototype.visitWithStatement = function (node) {
        this.visitToken(node.withKeyword());
        this.visitToken(node.openParenToken());
        node.condition().accept(this);
        this.visitToken(node.closeParenToken());
        node.statement().accept(this);
    };
    SyntaxWalker.prototype.visitEnumDeclaration = function (node) {
        this.visitOptionalToken(node.exportKeyword());
        this.visitToken(node.enumKeyword());
        this.visitToken(node.identifier());
        this.visitToken(node.openBraceToken());
        this.visitSeparatedList(node.variableDeclarators());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitCastExpression = function (node) {
        this.visitToken(node.lessThanToken());
        node.type().accept(this);
        this.visitToken(node.greaterThanToken());
        node.expression().accept(this);
    };
    SyntaxWalker.prototype.visitObjectLiteralExpression = function (node) {
        this.visitToken(node.openBraceToken());
        this.visitSeparatedList(node.propertyAssignments());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitSimplePropertyAssignment = function (node) {
        this.visitToken(node.propertyName());
        this.visitToken(node.colonToken());
        node.expression().accept(this);
    };
    SyntaxWalker.prototype.visitGetAccessorPropertyAssignment = function (node) {
        this.visitToken(node.getKeyword());
        this.visitToken(node.propertyName());
        this.visitToken(node.openParenToken());
        this.visitToken(node.closeParenToken());
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitSetAccessorPropertyAssignment = function (node) {
        this.visitToken(node.setKeyword());
        this.visitToken(node.propertyName());
        this.visitToken(node.openParenToken());
        this.visitToken(node.parameterName());
        this.visitToken(node.closeParenToken());
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitFunctionExpression = function (node) {
        this.visitToken(node.functionKeyword());
        this.visitOptionalToken(node.identifier());
        node.callSignature().accept(this);
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitEmptyStatement = function (node) {
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitSuperExpression = function (node) {
        this.visitToken(node.superKeyword());
    };
    SyntaxWalker.prototype.visitTryStatement = function (node) {
        this.visitToken(node.tryKeyword());
        node.block().accept(this);
        this.visitOptionalNode(node.catchClause());
        this.visitOptionalNode(node.finallyClause());
    };
    SyntaxWalker.prototype.visitCatchClause = function (node) {
        this.visitToken(node.catchKeyword());
        this.visitToken(node.openParenToken());
        this.visitToken(node.identifier());
        this.visitToken(node.closeParenToken());
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitFinallyClause = function (node) {
        this.visitToken(node.finallyKeyword());
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitLabeledStatement = function (node) {
        this.visitToken(node.identifier());
        this.visitToken(node.colonToken());
        node.statement().accept(this);
    };
    SyntaxWalker.prototype.visitDoStatement = function (node) {
        this.visitToken(node.doKeyword());
        node.statement().accept(this);
        this.visitToken(node.whileKeyword());
        this.visitToken(node.openParenToken());
        node.condition().accept(this);
        this.visitToken(node.closeParenToken());
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitTypeOfExpression = function (node) {
        this.visitToken(node.typeOfKeyword());
        node.expression().accept(this);
    };
    SyntaxWalker.prototype.visitDeleteExpression = function (node) {
        this.visitToken(node.deleteKeyword());
        node.expression().accept(this);
    };
    SyntaxWalker.prototype.visitVoidExpression = function (node) {
        this.visitToken(node.voidKeyword());
        node.expression().accept(this);
    };
    SyntaxWalker.prototype.visitDebuggerStatement = function (node) {
        this.visitToken(node.debuggerKeyword());
        this.visitToken(node.semicolonToken());
    };
    return SyntaxWalker;
})();
var ArrayUtilities = (function () {
    function ArrayUtilities() { }
    ArrayUtilities.isArray = function isArray(value) {
        return Object.prototype.toString.apply(value, []) === '[object Array]';
    }
    ArrayUtilities.groupBy = function groupBy(array, func) {
        var result = {
        };
        for(var i = 0, n = array.length; i < n; i++) {
            var v = array[i];
            var k = func(v);
            var list = result[k] || [];
            list.push(v);
            result[k] = list;
        }
        return result;
    }
    ArrayUtilities.min = function min(array, func) {
        Debug.assert(array.length > 0);
        var min = func(array[0]);
        for(var i = 1; i < array.length; i++) {
            var next = func(array[i]);
            if(next < min) {
                min = next;
            }
        }
        return min;
    }
    ArrayUtilities.max = function max(array, func) {
        Debug.assert(array.length > 0);
        var max = func(array[0]);
        for(var i = 1; i < array.length; i++) {
            var next = func(array[i]);
            if(next > max) {
                max = next;
            }
        }
        return max;
    }
    ArrayUtilities.last = function last(array) {
        if(array.length === 0) {
            throw Errors.argumentOutOfRange('array');
        }
        return array[array.length - 1];
    }
    ArrayUtilities.firstOrDefault = function firstOrDefault(array, func) {
        for(var i = 0, n = array.length; i < n; i++) {
            var value = array[i];
            if(func(value)) {
                return value;
            }
        }
        return null;
    }
    ArrayUtilities.sum = function sum(array, func) {
        var result = 0;
        for(var i = 0, n = array.length; i < n; i++) {
            result += func(array[i]);
        }
        return result;
    }
    ArrayUtilities.whereNotNull = function whereNotNull(array) {
        var result = [];
        for(var i = 0; i < array.length; i++) {
            var value = array[i];
            if(value !== null) {
                result.push(value);
            }
        }
        return result;
    }
    ArrayUtilities.select = function select(values, func) {
        var result = [];
        for(var i = 0; i < values.length; i++) {
            result.push(func(values[i]));
        }
        return result;
    }
    ArrayUtilities.where = function where(values, func) {
        var result = [];
        for(var i = 0; i < values.length; i++) {
            if(func(values[i])) {
                result.push(values[i]);
            }
        }
        return result;
    }
    ArrayUtilities.any = function any(array, func) {
        for(var i = 0, n = array.length; i < n; i++) {
            if(func(array[i])) {
                return true;
            }
        }
        return false;
    }
    ArrayUtilities.all = function all(array, func) {
        for(var i = 0, n = array.length; i < n; i++) {
            if(!func(array[i])) {
                return false;
            }
        }
        return true;
    }
    ArrayUtilities.binarySearch = function binarySearch(array, value) {
        var low = 0;
        var high = array.length - 1;
        while(low <= high) {
            var middle = low + ((high - low) >> 1);
            var midValue = array[middle];
            if(midValue === value) {
                return middle;
            } else {
                if(midValue > value) {
                    high = middle - 1;
                } else {
                    low = middle + 1;
                }
            }
        }
        return ~low;
    }
    ArrayUtilities.createArray = function createArray(length, defaultvalue) {
        if (typeof defaultvalue === "undefined") { defaultvalue = null; }
        var result = [];
        for(var i = 0; i < length; i++) {
            result.push(defaultvalue);
        }
        return result;
    }
    ArrayUtilities.grow = function grow(array, length, defaultValue) {
        var count = length - array.length;
        for(var i = 0; i < count; i++) {
            array.push(defaultValue);
        }
    }
    ArrayUtilities.copy = function copy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
        for(var i = 0; i < length; i++) {
            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];
        }
    }
    return ArrayUtilities;
})();
var Hash = (function () {
    function Hash() { }
    Hash.FNV_BASE = 2166136261;
    Hash.FNV_PRIME = 16777619;
    Hash.computeFnv1aCharArrayHashCode = function computeFnv1aCharArrayHashCode(text, start, len) {
        var hashCode = Hash.FNV_BASE;
        var end = start + len;
        for(var i = start; i < end; i++) {
            hashCode = (hashCode ^ text[i]) * Hash.FNV_PRIME;
        }
        return hashCode;
    }
    Hash.computeSimple31BitCharArrayHashCode = function computeSimple31BitCharArrayHashCode(key, start, len) {
        var hash = 0;
        for(var i = 0; i < len; i++) {
            var ch = key[start + i];
            hash = (((hash << 5) + hash) + ch) | 0;
        }
        return hash & 2147483647;
    }
    Hash.computeSimple31BitStringHashCode = function computeSimple31BitStringHashCode(key) {
        var hash = 0;
        var start = 0;
        var len = key.length;
        for(var i = 0; i < len; i++) {
            var ch = key.charCodeAt(start + i);
            hash = (((hash << 5) + hash) + ch) | 0;
        }
        return hash & 2147483647;
    }
    Hash.computeMurmur2CharArrayHashCode = function computeMurmur2CharArrayHashCode(key, start, len) {
        var m = 1540483477;
        var r = 24;
        var numberOfCharsLeft = len;
        var h = (0 ^ numberOfCharsLeft);
        var index = start;
        while(numberOfCharsLeft >= 2) {
            var c1 = key[index];
            var c2 = key[index + 1];
            var k = c1 | (c2 << 16);
            k *= m;
            k ^= k >> r;
            k *= m;
            h *= m;
            h ^= k;
            index += 2;
            numberOfCharsLeft -= 2;
        }
        if(numberOfCharsLeft == 1) {
            h ^= key[index];
            h *= m;
        }
        h ^= h >> 13;
        h *= m;
        h ^= h >> 15;
        return h;
    }
    Hash.computeMurmur2StringHashCode = function computeMurmur2StringHashCode(key) {
        var m = 1540483477;
        var r = 24;
        var start = 0;
        var len = key.length;
        var numberOfCharsLeft = len;
        var h = (0 ^ numberOfCharsLeft);
        var index = start;
        while(numberOfCharsLeft >= 2) {
            var c1 = key.charCodeAt(index);
            var c2 = key.charCodeAt(index + 1);
            var k = c1 | (c2 << 16);
            k *= m;
            k ^= k >> r;
            k *= m;
            h *= m;
            h ^= k;
            index += 2;
            numberOfCharsLeft -= 2;
        }
        if(numberOfCharsLeft == 1) {
            h ^= key.charCodeAt(index);
            h *= m;
        }
        h ^= h >> 13;
        h *= m;
        h ^= h >> 15;
        return h;
    }
    Hash.primes = [
        3, 
        7, 
        11, 
        17, 
        23, 
        29, 
        37, 
        47, 
        59, 
        71, 
        89, 
        107, 
        131, 
        163, 
        197, 
        239, 
        293, 
        353, 
        431, 
        521, 
        631, 
        761, 
        919, 
        1103, 
        1327, 
        1597, 
        1931, 
        2333, 
        2801, 
        3371, 
        4049, 
        4861, 
        5839, 
        7013, 
        8419, 
        10103, 
        12143, 
        14591, 
        17519, 
        21023, 
        25229, 
        30293, 
        36353, 
        43627, 
        52361, 
        62851, 
        75431, 
        90523, 
        108631, 
        130363, 
        156437, 
        187751, 
        225307, 
        270371, 
        324449, 
        389357, 
        467237, 
        560689, 
        672827, 
        807403, 
        968897, 
        1162687, 
        1395263, 
        1674319, 
        2009191, 
        2411033, 
        2893249, 
        3471899, 
        4166287, 
        4999559, 
        5999471, 
        7199369
    ];
    Hash.getPrime = function getPrime(min) {
        for(var i = 0; i < Hash.primes.length; i++) {
            var num = Hash.primes[i];
            if(num >= min) {
                return num;
            }
        }
        throw Errors.notYetImplemented();
    }
    Hash.expandPrime = function expandPrime(oldSize) {
        var num = oldSize << 1;
        if(num > 2146435069 && 2146435069 > oldSize) {
            return 2146435069;
        }
        return Hash.getPrime(num);
    }
    Hash.combine = function combine(value, currentHash) {
        return (((currentHash << 5) + currentHash) + value) & 2147483647;
    }
    return Hash;
})();
var Collections;
(function (Collections) {
    Collections.DefaultHashTableCapacity = 256;
    var HashTableEntry = (function () {
        function HashTableEntry(Key, Value, HashCode, Next) {
            this.Key = Key;
            this.Value = Value;
            this.HashCode = HashCode;
            this.Next = Next;
        }
        return HashTableEntry;
    })();    
    var HashTable = (function () {
        function HashTable(capacity, hash, equals) {
            this.hash = hash;
            this.equals = equals;
            this.entries = [];
            this.count = 0;
            var size = Hash.getPrime(capacity);
            this.hash = hash;
            this.equals = equals;
            this.entries = ArrayUtilities.createArray(size);
        }
        HashTable.prototype.set = function (key, value) {
            this.addOrSet(key, value, false);
        };
        HashTable.prototype.add = function (key, value) {
            this.addOrSet(key, value, true);
        };
        HashTable.prototype.containsKey = function (key) {
            var hashCode = this.computeHashCode(key);
            var entry = this.findEntry(key, hashCode);
            return entry !== null;
        };
        HashTable.prototype.get = function (key) {
            var hashCode = this.computeHashCode(key);
            var entry = this.findEntry(key, hashCode);
            return entry === null ? null : entry.Value;
        };
        HashTable.prototype.computeHashCode = function (key) {
            var hashCode = this.hash === null ? key.hashCode() : this.hash(key);
            hashCode = hashCode & 2147483647;
            Debug.assert(hashCode > 0);
            return hashCode;
        };
        HashTable.prototype.addOrSet = function (key, value, throwOnExistingEntry) {
            var hashCode = this.computeHashCode(key);
            var entry = this.findEntry(key, hashCode);
            if(entry !== null) {
                if(throwOnExistingEntry) {
                    throw Errors.argument('key', 'Key was already in table.');
                }
                entry.Key = key;
                entry.Value = value;
                return;
            }
            return this.addEntry(key, value, hashCode);
        };
        HashTable.prototype.findEntry = function (key, hashCode) {
            for(var e = this.entries[hashCode % this.entries.length]; e !== null; e = e.Next) {
                if(e.HashCode === hashCode) {
                    var equals = this.equals === null ? key === e.Key : this.equals(key, e.Key);
                    if(equals) {
                        return e;
                    }
                }
            }
            return null;
        };
        HashTable.prototype.addEntry = function (key, value, hashCode) {
            var index = hashCode % this.entries.length;
            var e = new HashTableEntry(key, value, hashCode, this.entries[index]);
            this.entries[index] = e;
            if(this.count === this.entries.length) {
                this.grow();
            }
            this.count++;
            return e.Key;
        };
        HashTable.prototype.grow = function () {
            var newSize = Hash.expandPrime(this.entries.length);
            var oldEntries = this.entries;
            var newEntries = ArrayUtilities.createArray(newSize);
            this.entries = newEntries;
            for(var i = 0; i < oldEntries.length; i++) {
                var e = oldEntries[i];
                while(e !== null) {
                    var newIndex = e.HashCode % newSize;
                    var tmp = e.Next;
                    e.Next = newEntries[newIndex];
                    newEntries[newIndex] = e;
                    e = tmp;
                }
            }
        };
        return HashTable;
    })();
    Collections.HashTable = HashTable;    
    function createHashTable(capacity, hash, equals) {
        if (typeof capacity === "undefined") { capacity = Collections.DefaultHashTableCapacity; }
        if (typeof hash === "undefined") { hash = null; }
        if (typeof equals === "undefined") { equals = null; }
        return new HashTable(capacity, hash, equals);
    }
    Collections.createHashTable = createHashTable;
})(Collections || (Collections = {}));
var SlidingWindow = (function () {
    function SlidingWindow(defaultWindowSize, defaultValue, sourceLength) {
        if (typeof sourceLength === "undefined") { sourceLength = -1; }
        this.window = [];
        this.windowCount = 0;
        this.windowAbsoluteStartIndex = 0;
        this.currentRelativeItemIndex = 0;
        this.pinCount = 0;
        this.firstPinnedAbsoluteIndex = -1;
        this.pool = [];
        this.poolCount = 0;
        this.defaultValue = defaultValue;
        this.window = ArrayUtilities.createArray(defaultWindowSize, defaultValue);
        this.sourceLength = sourceLength;
    }
    SlidingWindow.prototype.storeAdditionalRewindState = function (rewindPoint) {
    };
    SlidingWindow.prototype.restoreStateFromRewindPoint = function (rewindPoint) {
    };
    SlidingWindow.prototype.fetchMoreItems = function (argument, sourceIndex, window, destinationIndex, spaceAvailable) {
        throw Errors.notYetImplemented();
    };
    SlidingWindow.prototype.windowAbsoluteEndIndex = function () {
        return this.windowAbsoluteStartIndex + this.windowCount;
    };
    SlidingWindow.prototype.addMoreItemsToWindow = function (argument) {
        if(this.sourceLength >= 0 && this.absoluteIndex() >= this.sourceLength) {
            return false;
        }
        if(this.windowCount >= this.window.length) {
            this.tryShiftOrGrowTokenWindow();
        }
        var spaceAvailable = this.window.length - this.windowCount;
        var amountFetched = this.fetchMoreItems(argument, this.windowAbsoluteEndIndex(), this.window, this.windowCount, spaceAvailable);
        this.windowCount += amountFetched;
        return amountFetched > 0;
    };
    SlidingWindow.prototype.tryShiftOrGrowTokenWindow = function () {
        var currentIndexIsPastWindowHalfwayPoint = this.currentRelativeItemIndex > (this.window.length >>> 1);
        var isAllowedToShift = this.firstPinnedAbsoluteIndex === -1 || this.firstPinnedAbsoluteIndex > this.windowAbsoluteStartIndex;
        if(currentIndexIsPastWindowHalfwayPoint && isAllowedToShift) {
            var shiftStartIndex = this.firstPinnedAbsoluteIndex === -1 ? this.currentRelativeItemIndex : this.firstPinnedAbsoluteIndex - this.windowAbsoluteStartIndex;
            var shiftCount = this.windowCount - shiftStartIndex;
            Debug.assert(shiftStartIndex > 0);
            if(shiftCount > 0) {
                ArrayUtilities.copy(this.window, shiftStartIndex, this.window, 0, shiftCount);
            }
            this.windowAbsoluteStartIndex += shiftStartIndex;
            this.windowCount -= shiftStartIndex;
            this.currentRelativeItemIndex -= shiftStartIndex;
        } else {
            ArrayUtilities.grow(this.window, this.window.length * 2, this.defaultValue);
        }
    };
    SlidingWindow.prototype.absoluteIndex = function () {
        return this.windowAbsoluteStartIndex + this.currentRelativeItemIndex;
    };
    SlidingWindow.prototype.isAtEndOfSource = function () {
        return this.absoluteIndex() >= this.sourceLength;
    };
    SlidingWindow.prototype.getAndPinAbsoluteIndex = function () {
        var absoluteIndex = this.absoluteIndex();
        if(this.pinCount === 0) {
            this.firstPinnedAbsoluteIndex = absoluteIndex;
        }
        this.pinCount++;
        return absoluteIndex;
    };
    SlidingWindow.prototype.releaseAndUnpinAbsoluteIndex = function (absoluteIndex) {
        this.pinCount--;
        if(this.pinCount === 0) {
            this.firstPinnedAbsoluteIndex = -1;
        }
    };
    SlidingWindow.prototype.getRewindPoint = function () {
        var absoluteIndex = this.getAndPinAbsoluteIndex();
        var rewindPoint = this.poolCount === 0 ? {
        } : this.pop();
        rewindPoint.absoluteIndex = absoluteIndex;
        this.storeAdditionalRewindState(rewindPoint);
        return rewindPoint;
    };
    SlidingWindow.prototype.pop = function () {
        this.poolCount--;
        var result = this.pool[this.poolCount];
        this.pool[this.poolCount] = null;
        return result;
    };
    SlidingWindow.prototype.rewindToPinnedIndex = function (absoluteIndex) {
        var relativeIndex = absoluteIndex - this.windowAbsoluteStartIndex;
        Debug.assert(relativeIndex >= 0 && relativeIndex < this.windowCount);
        this.currentRelativeItemIndex = relativeIndex;
    };
    SlidingWindow.prototype.rewind = function (rewindPoint) {
        this.rewindToPinnedIndex(rewindPoint.absoluteIndex);
        this.restoreStateFromRewindPoint(rewindPoint);
    };
    SlidingWindow.prototype.releaseRewindPoint = function (rewindPoint) {
        this.releaseAndUnpinAbsoluteIndex(rewindPoint.absoluteIndex);
        this.pool[this.poolCount] = rewindPoint;
        this.poolCount++;
    };
    SlidingWindow.prototype.currentItem = function (argument) {
        if(this.currentRelativeItemIndex >= this.windowCount) {
            if(!this.addMoreItemsToWindow(argument)) {
                return this.defaultValue;
            }
        }
        return this.window[this.currentRelativeItemIndex];
    };
    SlidingWindow.prototype.peekItemN = function (n) {
        while(this.currentRelativeItemIndex + n >= this.windowCount) {
            if(!this.addMoreItemsToWindow(null)) {
                return this.defaultValue;
            }
        }
        return this.window[this.currentRelativeItemIndex + n];
    };
    SlidingWindow.prototype.moveToNextItem = function () {
        this.currentRelativeItemIndex++;
    };
    SlidingWindow.prototype.disgardAllItemsFromCurrentIndexOnwards = function () {
        this.windowCount = this.currentRelativeItemIndex;
    };
    SlidingWindow.prototype.setAbsoluteIndex = function (absoluteIndex) {
        Debug.assert(this.pinCount === 0);
        if(absoluteIndex >= this.windowAbsoluteStartIndex && absoluteIndex < this.windowAbsoluteEndIndex()) {
            this.currentRelativeItemIndex = (absoluteIndex - this.windowAbsoluteStartIndex);
        } else {
            this.windowAbsoluteStartIndex = absoluteIndex;
            this.windowCount = 0;
            this.currentRelativeItemIndex = 0;
        }
    };
    return SlidingWindow;
})();
var CharacterCodes;
(function (CharacterCodes) {
    CharacterCodes._map = [];
    CharacterCodes.nullCharacter = 0;
    CharacterCodes.maxAsciiCharacter = 127;
    CharacterCodes.lineFeed = 10;
    CharacterCodes.carriageReturn = 13;
    CharacterCodes.lineSeparator = 8232;
    CharacterCodes.paragraphSeparator = 8233;
    CharacterCodes.space = 32;
    CharacterCodes.nextLine = 133;
    CharacterCodes.nonBreakingSpace = 160;
    CharacterCodes._ = 95;
    CharacterCodes.$ = 36;
    CharacterCodes._0 = 48;
    CharacterCodes._9 = 57;
    CharacterCodes.a = 97;
    CharacterCodes.b = 98;
    CharacterCodes.c = 99;
    CharacterCodes.d = 100;
    CharacterCodes.e = 101;
    CharacterCodes.f = 102;
    CharacterCodes.g = 103;
    CharacterCodes.h = 104;
    CharacterCodes.i = 105;
    CharacterCodes.k = 107;
    CharacterCodes.l = 108;
    CharacterCodes.m = 109;
    CharacterCodes.n = 110;
    CharacterCodes.o = 111;
    CharacterCodes.p = 112;
    CharacterCodes.r = 114;
    CharacterCodes.s = 115;
    CharacterCodes.t = 116;
    CharacterCodes.u = 117;
    CharacterCodes.v = 118;
    CharacterCodes.w = 119;
    CharacterCodes.x = 120;
    CharacterCodes.y = 121;
    CharacterCodes.z = 122;
    CharacterCodes.A = 65;
    CharacterCodes.E = 69;
    CharacterCodes.F = 70;
    CharacterCodes.X = 88;
    CharacterCodes.Z = 90;
    CharacterCodes.ampersand = 38;
    CharacterCodes.asterisk = 42;
    CharacterCodes.backslash = 92;
    CharacterCodes.bar = 124;
    CharacterCodes.caret = 94;
    CharacterCodes.closeBrace = 125;
    CharacterCodes.closeBracket = 93;
    CharacterCodes.closeParen = 41;
    CharacterCodes.colon = 58;
    CharacterCodes.comma = 44;
    CharacterCodes.dot = 46;
    CharacterCodes.doubleQuote = 34;
    CharacterCodes.equals = 61;
    CharacterCodes.exclamation = 33;
    CharacterCodes.greaterThan = 62;
    CharacterCodes.lessThan = 60;
    CharacterCodes.minus = 45;
    CharacterCodes.openBrace = 123;
    CharacterCodes.openBracket = 91;
    CharacterCodes.openParen = 40;
    CharacterCodes.percent = 37;
    CharacterCodes.plus = 43;
    CharacterCodes.question = 63;
    CharacterCodes.semicolon = 59;
    CharacterCodes.singleQuote = 39;
    CharacterCodes.slash = 47;
    CharacterCodes.tilde = 126;
    CharacterCodes.backspace = 8;
    CharacterCodes.formFeed = 12;
    CharacterCodes.byteOrderMark = 65279;
    CharacterCodes.tab = 9;
    CharacterCodes.verticalTab = 11;
})(CharacterCodes || (CharacterCodes = {}));
var CharacterInfo = (function () {
    function CharacterInfo() { }
    CharacterInfo.isDecimalDigit = function isDecimalDigit(c) {
        return c >= 48 /* _0 */  && c <= 57 /* _9 */ ;
    }
    CharacterInfo.isHexDigit = function isHexDigit(c) {
        return CharacterInfo.isDecimalDigit(c) || (c >= 65 /* A */  && c <= 70 /* F */ ) || (c >= 97 /* a */  && c <= 102 /* f */ );
    }
    CharacterInfo.hexValue = function hexValue(c) {
        Debug.assert(CharacterInfo.isHexDigit(c));
        return CharacterInfo.isDecimalDigit(c) ? (c - 48 /* _0 */ ) : (c >= 65 /* A */  && c <= 70 /* F */ ) ? c - 65 /* A */  + 10 : c - 97 /* a */  + 10;
    }
    CharacterInfo.isWhitespace = function isWhitespace(ch) {
        switch(ch) {
            case 32 /* space */ :
            case 9 /* tab */ :
            case 11 /* verticalTab */ :
            case 12 /* formFeed */ :
            case 160 /* nonBreakingSpace */ :
            case 65279 /* byteOrderMark */ : {
                return true;

            }
        }
        return false;
    }
    CharacterInfo.isLineTerminator = function isLineTerminator(ch) {
        switch(ch) {
            case 13 /* carriageReturn */ :
            case 10 /* lineFeed */ :
            case 8233 /* paragraphSeparator */ :
            case 8232 /* lineSeparator */ : {
                return true;

            }
        }
        return false;
    }
    return CharacterInfo;
})();
var Constants;
(function (Constants) {
    Constants._map = [];
    Constants.Max31BitInteger = 1073741823;
    Constants.Min31BitInteger = -1073741824;
    Constants.TriviaNewLineMask = 134217728;
    Constants.TriviaCommentMask = 67108864;
    Constants.TriviaLengthMask = 67108863;
})(Constants || (Constants = {}));
var LanguageVersion;
(function (LanguageVersion) {
    LanguageVersion._map = [];
    LanguageVersion._map[0] = "EcmaScript3";
    LanguageVersion.EcmaScript3 = 0;
    LanguageVersion._map[1] = "EcmaScript5";
    LanguageVersion.EcmaScript5 = 1;
})(LanguageVersion || (LanguageVersion = {}));
var Contract = (function () {
    function Contract() { }
    Contract.requires = function requires(expression) {
        if(!expression) {
            throw new Error("Contract violated. False expression.");
        }
    }
    Contract.throwIfFalse = function throwIfFalse(expression) {
        if(!expression) {
            throw new Error("Contract violated. False expression.");
        }
    }
    Contract.throwIfNull = function throwIfNull(value) {
        if(value === null) {
            throw new Error("Contract violated. Null value.");
        }
    }
    return Contract;
})();
var MathPrototype = (function () {
    function MathPrototype() { }
    MathPrototype.max = function max(a, b) {
        return a >= b ? a : b;
    }
    MathPrototype.min = function min(a, b) {
        return a <= b ? a : b;
    }
    return MathPrototype;
})();
var TextSpan = (function () {
    function TextSpan(start, length) {
        this._start = 0;
        this._length = 0;
        if(start < 0) {
            Errors.argument("start");
        }
        if(start + length < start) {
            throw new Error("length");
        }
        this._start = start;
        this._length = length;
    }
    TextSpan.prototype.start = function () {
        return this._start;
    };
    TextSpan.prototype.length = function () {
        return this._length;
    };
    TextSpan.prototype.end = function () {
        return this._start + this._length;
    };
    TextSpan.prototype.isEmpty = function () {
        return this._length === 0;
    };
    TextSpan.prototype.containsPosition = function (position) {
        return position >= this._start && position < this.end();
    };
    TextSpan.prototype.containsTextSpan = function (span) {
        return span._start >= this._start && span.end() <= this.end();
    };
    TextSpan.prototype.overlapsWith = function (span) {
        var overlapStart = MathPrototype.max(this._start, span._start);
        var overlapEnd = MathPrototype.min(this.end(), span.end());
        return overlapStart < overlapEnd;
    };
    TextSpan.prototype.overlap = function (span) {
        var overlapStart = MathPrototype.max(this._start, span._start);
        var overlapEnd = MathPrototype.min(this.end(), span.end());
        if(overlapStart < overlapEnd) {
            return TextSpan.fromBounds(overlapStart, overlapEnd);
        }
        return null;
    };
    TextSpan.prototype.intersectsWithTextSpan = function (span) {
        return span._start <= this.end() && span.end() >= this._start;
    };
    TextSpan.prototype.intersectsWithPosition = function (position) {
        return position <= this.end() && position >= this._start;
    };
    TextSpan.prototype.intersection = function (span) {
        var intersectStart = MathPrototype.max(this._start, span._start);
        var intersectEnd = MathPrototype.min(this.end(), span.end());
        if(intersectStart <= intersectEnd) {
            return TextSpan.fromBounds(intersectStart, intersectEnd);
        }
        return null;
    };
    TextSpan.fromBounds = function fromBounds(start, end) {
        Contract.requires(start >= 0);
        Contract.requires(end - start >= 0);
        return new TextSpan(start, end - start);
    }
    return TextSpan;
})();
var LinePosition = (function () {
    function LinePosition(line, character) {
        this._line = 0;
        this._character = 0;
        if(line < 0) {
            throw Errors.argumentOutOfRange("line");
        }
        if(character < 0) {
            throw Errors.argumentOutOfRange("character");
        }
        this._line = line;
        this._character = character;
    }
    LinePosition.prototype.line = function () {
        return this._line;
    };
    LinePosition.prototype.character = function () {
        return this._character;
    };
    return LinePosition;
})();
var JSON2 = {
};
((function () {
    'use strict';
    function f(n) {
        return n < 10 ? '0' + n : n;
    }
    if(typeof Date.prototype.toJSON !== 'function') {
        Date.prototype.toJSON = function (key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;
        };
        var strProto = String.prototype;
        var numProto = Number.prototype;
        numProto.JSON = strProto.JSON = (Boolean).prototype.toJSON = function (key) {
            return this.valueOf();
        };
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
'\b': '\\b',
'\t': '\\t',
'\n': '\\n',
'\f': '\\f',
'\r': '\\r',
'"': '\\"',
'\\': '\\\\'    }, rep;
    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }
    function str(key, holder) {
        var i, k = null, v, length, mind = gap, partial, value = holder[key];
        if(value && typeof value === 'object' && typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }
        if(typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }
        switch(typeof value) {
            case 'string': {
                return quote(value);

            }
            case 'number': {
                return isFinite(value) ? String(value) : 'null';

            }
            case 'boolean':
            case 'null': {
                return String(value);

            }
            case 'object': {
                if(!value) {
                    return 'null';
                }
                gap += indent;
                partial = [];
                if(Object.prototype.toString.apply(value, []) === '[object Array]') {
                    length = value.length;
                    for(i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || 'null';
                    }
                    v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
                    gap = mind;
                    return v;
                }
                if(rep && typeof rep === 'object') {
                    length = rep.length;
                    for(i = 0; i < length; i += 1) {
                        if(typeof rep[i] === 'string') {
                            k = rep[i];
                            v = str(k, value);
                            if(v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                } else {
                    for(k in value) {
                        if(Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if(v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                }
                v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
                gap = mind;
                return v;

            }
        }
    }
    if(typeof JSON2.stringify !== 'function') {
        JSON2.stringify = function (value, replacer, space) {
            var i;
            gap = '';
            indent = '';
            if(typeof space === 'number') {
                for(i = 0; i < space; i += 1) {
                    indent += ' ';
                }
            } else {
                if(typeof space === 'string') {
                    indent = space;
                }
            }
            rep = replacer;
            if(replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }
            return str('', {
                '': value
            });
        };
    }
    if(typeof JSON2.parse !== 'function') {
        JSON2.parse = function (text, reviver) {
            var j;
            function walk(holder, key) {
                var k = null, v, value = holder[key];
                if(value && typeof value === 'object') {
                    for(k in value) {
                        if(Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if(v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }
            text = String(text);
            cx.lastIndex = 0;
            if(cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                j = eval('(' + text + ')');
                return typeof reviver === 'function' ? walk({
                    '': j
                }, '') : j;
            }
            throw new SyntaxError('JSON.parse');
        };
    }
})());
var ScannerUtilities = (function () {
    function ScannerUtilities() { }
    ScannerUtilities.identifierKind = function identifierKind(array, startIndex, length) {
        switch(length) {
            case 2: {
                switch(array[startIndex]) {
                    case 100 /* d */ : {
                        return (array[startIndex + 1] === 111 /* o */ ) ? 20 /* DoKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 105 /* i */ : {
                        switch(array[startIndex + 1]) {
                            case 102 /* f */ : {
                                return 26 /* IfKeyword */ ;

                            }
                            case 110 /* n */ : {
                                return 27 /* InKeyword */ ;

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 3: {
                switch(array[startIndex]) {
                    case 102 /* f */ : {
                        return (array[startIndex + 1] === 111 /* o */  && array[startIndex + 2] === 114 /* r */ ) ? 24 /* ForKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 110 /* n */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 119 /* w */ ) ? 29 /* NewKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 116 /* t */ : {
                        return (array[startIndex + 1] === 114 /* r */  && array[startIndex + 2] === 121 /* y */ ) ? 36 /* TryKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 118 /* v */ : {
                        return (array[startIndex + 1] === 97 /* a */  && array[startIndex + 2] === 114 /* r */ ) ? 38 /* VarKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 108 /* l */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 116 /* t */ ) ? 51 /* LetKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 97 /* a */ : {
                        return (array[startIndex + 1] === 110 /* n */  && array[startIndex + 2] === 121 /* y */ ) ? 58 /* AnyKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 103 /* g */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 116 /* t */ ) ? 62 /* GetKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 115 /* s */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 116 /* t */ ) ? 65 /* SetKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 4: {
                switch(array[startIndex]) {
                    case 99 /* c */ : {
                        return (array[startIndex + 1] === 97 /* a */  && array[startIndex + 2] === 115 /* s */  && array[startIndex + 3] === 101 /* e */ ) ? 14 /* CaseKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 101 /* e */ : {
                        switch(array[startIndex + 1]) {
                            case 108 /* l */ : {
                                return (array[startIndex + 2] === 115 /* s */  && array[startIndex + 3] === 101 /* e */ ) ? 21 /* ElseKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 110 /* n */ : {
                                return (array[startIndex + 2] === 117 /* u */  && array[startIndex + 3] === 109 /* m */ ) ? 44 /* EnumKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    case 110 /* n */ : {
                        return (array[startIndex + 1] === 117 /* u */  && array[startIndex + 2] === 108 /* l */  && array[startIndex + 3] === 108 /* l */ ) ? 30 /* NullKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 116 /* t */ : {
                        switch(array[startIndex + 1]) {
                            case 104 /* h */ : {
                                return (array[startIndex + 2] === 105 /* i */  && array[startIndex + 3] === 115 /* s */ ) ? 33 /* ThisKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 114 /* r */ : {
                                return (array[startIndex + 2] === 117 /* u */  && array[startIndex + 3] === 101 /* e */ ) ? 35 /* TrueKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    case 118 /* v */ : {
                        return (array[startIndex + 1] === 111 /* o */  && array[startIndex + 2] === 105 /* i */  && array[startIndex + 3] === 100 /* d */ ) ? 39 /* VoidKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 119 /* w */ : {
                        return (array[startIndex + 1] === 105 /* i */  && array[startIndex + 2] === 116 /* t */  && array[startIndex + 3] === 104 /* h */ ) ? 41 /* WithKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 98 /* b */ : {
                        return (array[startIndex + 1] === 111 /* o */  && array[startIndex + 2] === 111 /* o */  && array[startIndex + 3] === 108 /* l */ ) ? 59 /* BoolKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 5: {
                switch(array[startIndex]) {
                    case 98 /* b */ : {
                        return (array[startIndex + 1] === 114 /* r */  && array[startIndex + 2] === 101 /* e */  && array[startIndex + 3] === 97 /* a */  && array[startIndex + 4] === 107 /* k */ ) ? 13 /* BreakKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 99 /* c */ : {
                        switch(array[startIndex + 1]) {
                            case 97 /* a */ : {
                                return (array[startIndex + 2] === 116 /* t */  && array[startIndex + 3] === 99 /* c */  && array[startIndex + 4] === 104 /* h */ ) ? 15 /* CatchKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 108 /* l */ : {
                                return (array[startIndex + 2] === 97 /* a */  && array[startIndex + 3] === 115 /* s */  && array[startIndex + 4] === 115 /* s */ ) ? 42 /* ClassKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 111 /* o */ : {
                                return (array[startIndex + 2] === 110 /* n */  && array[startIndex + 3] === 115 /* s */  && array[startIndex + 4] === 116 /* t */ ) ? 43 /* ConstKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    case 102 /* f */ : {
                        return (array[startIndex + 1] === 97 /* a */  && array[startIndex + 2] === 108 /* l */  && array[startIndex + 3] === 115 /* s */  && array[startIndex + 4] === 101 /* e */ ) ? 22 /* FalseKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 116 /* t */ : {
                        return (array[startIndex + 1] === 104 /* h */  && array[startIndex + 2] === 114 /* r */  && array[startIndex + 3] === 111 /* o */  && array[startIndex + 4] === 119 /* w */ ) ? 34 /* ThrowKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 119 /* w */ : {
                        return (array[startIndex + 1] === 104 /* h */  && array[startIndex + 2] === 105 /* i */  && array[startIndex + 3] === 108 /* l */  && array[startIndex + 4] === 101 /* e */ ) ? 40 /* WhileKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 115 /* s */ : {
                        return (array[startIndex + 1] === 117 /* u */  && array[startIndex + 2] === 112 /* p */  && array[startIndex + 3] === 101 /* e */  && array[startIndex + 4] === 114 /* r */ ) ? 48 /* SuperKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 121 /* y */ : {
                        return (array[startIndex + 1] === 105 /* i */  && array[startIndex + 2] === 101 /* e */  && array[startIndex + 3] === 108 /* l */  && array[startIndex + 4] === 100 /* d */ ) ? 57 /* YieldKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 6: {
                switch(array[startIndex]) {
                    case 100 /* d */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 108 /* l */  && array[startIndex + 3] === 101 /* e */  && array[startIndex + 4] === 116 /* t */  && array[startIndex + 5] === 101 /* e */ ) ? 19 /* DeleteKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 114 /* r */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 116 /* t */  && array[startIndex + 3] === 117 /* u */  && array[startIndex + 4] === 114 /* r */  && array[startIndex + 5] === 110 /* n */ ) ? 31 /* ReturnKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 115 /* s */ : {
                        switch(array[startIndex + 1]) {
                            case 119 /* w */ : {
                                return (array[startIndex + 2] === 105 /* i */  && array[startIndex + 3] === 116 /* t */  && array[startIndex + 4] === 99 /* c */  && array[startIndex + 5] === 104 /* h */ ) ? 32 /* SwitchKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 116 /* t */ : {
                                switch(array[startIndex + 2]) {
                                    case 97 /* a */ : {
                                        return (array[startIndex + 3] === 116 /* t */  && array[startIndex + 4] === 105 /* i */  && array[startIndex + 5] === 99 /* c */ ) ? 56 /* StaticKeyword */  : 9 /* IdentifierNameToken */ ;

                                    }
                                    case 114 /* r */ : {
                                        return (array[startIndex + 3] === 105 /* i */  && array[startIndex + 4] === 110 /* n */  && array[startIndex + 5] === 103 /* g */ ) ? 66 /* StringKeyword */  : 9 /* IdentifierNameToken */ ;

                                    }
                                    default: {
                                        return 9 /* IdentifierNameToken */ ;

                                    }
                                }

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    case 116 /* t */ : {
                        return (array[startIndex + 1] === 121 /* y */  && array[startIndex + 2] === 112 /* p */  && array[startIndex + 3] === 101 /* e */  && array[startIndex + 4] === 111 /* o */  && array[startIndex + 5] === 102 /* f */ ) ? 37 /* TypeOfKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 101 /* e */ : {
                        return (array[startIndex + 1] === 120 /* x */  && array[startIndex + 2] === 112 /* p */  && array[startIndex + 3] === 111 /* o */  && array[startIndex + 4] === 114 /* r */  && array[startIndex + 5] === 116 /* t */ ) ? 45 /* ExportKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 105 /* i */ : {
                        return (array[startIndex + 1] === 109 /* m */  && array[startIndex + 2] === 112 /* p */  && array[startIndex + 3] === 111 /* o */  && array[startIndex + 4] === 114 /* r */  && array[startIndex + 5] === 116 /* t */ ) ? 47 /* ImportKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 112 /* p */ : {
                        return (array[startIndex + 1] === 117 /* u */  && array[startIndex + 2] === 98 /* b */  && array[startIndex + 3] === 108 /* l */  && array[startIndex + 4] === 105 /* i */  && array[startIndex + 5] === 99 /* c */ ) ? 55 /* PublicKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 109 /* m */ : {
                        return (array[startIndex + 1] === 111 /* o */  && array[startIndex + 2] === 100 /* d */  && array[startIndex + 3] === 117 /* u */  && array[startIndex + 4] === 108 /* l */  && array[startIndex + 5] === 101 /* e */ ) ? 63 /* ModuleKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 110 /* n */ : {
                        return (array[startIndex + 1] === 117 /* u */  && array[startIndex + 2] === 109 /* m */  && array[startIndex + 3] === 98 /* b */  && array[startIndex + 4] === 101 /* e */  && array[startIndex + 5] === 114 /* r */ ) ? 64 /* NumberKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 7: {
                switch(array[startIndex]) {
                    case 100 /* d */ : {
                        switch(array[startIndex + 1]) {
                            case 101 /* e */ : {
                                switch(array[startIndex + 2]) {
                                    case 102 /* f */ : {
                                        return (array[startIndex + 3] === 97 /* a */  && array[startIndex + 4] === 117 /* u */  && array[startIndex + 5] === 108 /* l */  && array[startIndex + 6] === 116 /* t */ ) ? 18 /* DefaultKeyword */  : 9 /* IdentifierNameToken */ ;

                                    }
                                    case 99 /* c */ : {
                                        return (array[startIndex + 3] === 108 /* l */  && array[startIndex + 4] === 97 /* a */  && array[startIndex + 5] === 114 /* r */  && array[startIndex + 6] === 101 /* e */ ) ? 61 /* DeclareKeyword */  : 9 /* IdentifierNameToken */ ;

                                    }
                                    default: {
                                        return 9 /* IdentifierNameToken */ ;

                                    }
                                }

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    case 102 /* f */ : {
                        return (array[startIndex + 1] === 105 /* i */  && array[startIndex + 2] === 110 /* n */  && array[startIndex + 3] === 97 /* a */  && array[startIndex + 4] === 108 /* l */  && array[startIndex + 5] === 108 /* l */  && array[startIndex + 6] === 121 /* y */ ) ? 23 /* FinallyKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 101 /* e */ : {
                        return (array[startIndex + 1] === 120 /* x */  && array[startIndex + 2] === 116 /* t */  && array[startIndex + 3] === 101 /* e */  && array[startIndex + 4] === 110 /* n */  && array[startIndex + 5] === 100 /* d */  && array[startIndex + 6] === 115 /* s */ ) ? 46 /* ExtendsKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 112 /* p */ : {
                        switch(array[startIndex + 1]) {
                            case 97 /* a */ : {
                                return (array[startIndex + 2] === 99 /* c */  && array[startIndex + 3] === 107 /* k */  && array[startIndex + 4] === 97 /* a */  && array[startIndex + 5] === 103 /* g */  && array[startIndex + 6] === 101 /* e */ ) ? 52 /* PackageKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 114 /* r */ : {
                                return (array[startIndex + 2] === 105 /* i */  && array[startIndex + 3] === 118 /* v */  && array[startIndex + 4] === 97 /* a */  && array[startIndex + 5] === 116 /* t */  && array[startIndex + 6] === 101 /* e */ ) ? 53 /* PrivateKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 8: {
                switch(array[startIndex]) {
                    case 99 /* c */ : {
                        return (array[startIndex + 1] === 111 /* o */  && array[startIndex + 2] === 110 /* n */  && array[startIndex + 3] === 116 /* t */  && array[startIndex + 4] === 105 /* i */  && array[startIndex + 5] === 110 /* n */  && array[startIndex + 6] === 117 /* u */  && array[startIndex + 7] === 101 /* e */ ) ? 16 /* ContinueKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 100 /* d */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 98 /* b */  && array[startIndex + 3] === 117 /* u */  && array[startIndex + 4] === 103 /* g */  && array[startIndex + 5] === 103 /* g */  && array[startIndex + 6] === 101 /* e */  && array[startIndex + 7] === 114 /* r */ ) ? 17 /* DebuggerKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 102 /* f */ : {
                        return (array[startIndex + 1] === 117 /* u */  && array[startIndex + 2] === 110 /* n */  && array[startIndex + 3] === 99 /* c */  && array[startIndex + 4] === 116 /* t */  && array[startIndex + 5] === 105 /* i */  && array[startIndex + 6] === 111 /* o */  && array[startIndex + 7] === 110 /* n */ ) ? 25 /* FunctionKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 9: {
                switch(array[startIndex]) {
                    case 105 /* i */ : {
                        return (array[startIndex + 1] === 110 /* n */  && array[startIndex + 2] === 116 /* t */  && array[startIndex + 3] === 101 /* e */  && array[startIndex + 4] === 114 /* r */  && array[startIndex + 5] === 102 /* f */  && array[startIndex + 6] === 97 /* a */  && array[startIndex + 7] === 99 /* c */  && array[startIndex + 8] === 101 /* e */ ) ? 50 /* InterfaceKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 112 /* p */ : {
                        return (array[startIndex + 1] === 114 /* r */  && array[startIndex + 2] === 111 /* o */  && array[startIndex + 3] === 116 /* t */  && array[startIndex + 4] === 101 /* e */  && array[startIndex + 5] === 99 /* c */  && array[startIndex + 6] === 116 /* t */  && array[startIndex + 7] === 101 /* e */  && array[startIndex + 8] === 100 /* d */ ) ? 54 /* ProtectedKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 10: {
                switch(array[startIndex]) {
                    case 105 /* i */ : {
                        switch(array[startIndex + 1]) {
                            case 110 /* n */ : {
                                return (array[startIndex + 2] === 115 /* s */  && array[startIndex + 3] === 116 /* t */  && array[startIndex + 4] === 97 /* a */  && array[startIndex + 5] === 110 /* n */  && array[startIndex + 6] === 99 /* c */  && array[startIndex + 7] === 101 /* e */  && array[startIndex + 8] === 111 /* o */  && array[startIndex + 9] === 102 /* f */ ) ? 28 /* InstanceOfKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 109 /* m */ : {
                                return (array[startIndex + 2] === 112 /* p */  && array[startIndex + 3] === 108 /* l */  && array[startIndex + 4] === 101 /* e */  && array[startIndex + 5] === 109 /* m */  && array[startIndex + 6] === 101 /* e */  && array[startIndex + 7] === 110 /* n */  && array[startIndex + 8] === 116 /* t */  && array[startIndex + 9] === 115 /* s */ ) ? 49 /* ImplementsKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 11: {
                return (array[startIndex] === 99 /* c */  && array[startIndex + 1] === 111 /* o */  && array[startIndex + 2] === 110 /* n */  && array[startIndex + 3] === 115 /* s */  && array[startIndex + 4] === 116 /* t */  && array[startIndex + 5] === 114 /* r */  && array[startIndex + 6] === 117 /* u */  && array[startIndex + 7] === 99 /* c */  && array[startIndex + 8] === 116 /* t */  && array[startIndex + 9] === 111 /* o */  && array[startIndex + 10] === 114 /* r */ ) ? 60 /* ConstructorKeyword */  : 9 /* IdentifierNameToken */ ;

            }
            default: {
                return 9 /* IdentifierNameToken */ ;

            }
        }
    }
    return ScannerUtilities;
})();
var StringUtilities = (function () {
    function StringUtilities() { }
    StringUtilities.fromCharCodeArray = function fromCharCodeArray(array) {
        return String.fromCharCode.apply(null, array);
    }
    StringUtilities.endsWith = function endsWith(string, value) {
        return string.substring(string.length - value.length, string.length) === value;
    }
    StringUtilities.startsWith = function startsWith(string, value) {
        return string.substr(0, value.length) === value;
    }
    StringUtilities.copyTo = function copyTo(source, sourceIndex, destination, destinationIndex, count) {
        for(var i = 0; i < count; i++) {
            destination[destinationIndex + i] = source.charCodeAt(sourceIndex + i);
        }
    }
    StringUtilities.repeat = function repeat(value, count) {
        return Array(count + 1).join(value);
    }
    return StringUtilities;
})();
var Collections;
(function (Collections) {
    Collections.DefaultStringTableCapacity = 256;
    var StringTableEntry = (function () {
        function StringTableEntry(Text, HashCode, Next) {
            this.Text = Text;
            this.HashCode = HashCode;
            this.Next = Next;
        }
        return StringTableEntry;
    })();    
    var StringTable = (function () {
        function StringTable(capacity) {
            this.entries = [];
            this.count = 0;
            var size = Hash.getPrime(capacity);
            this.entries = ArrayUtilities.createArray(size);
        }
        StringTable.prototype.addCharArray = function (key, start, len) {
            var hashCode = Hash.computeSimple31BitCharArrayHashCode(key, start, len) & 2147483647;
            Debug.assert(hashCode > 0);
            var entry = this.findCharArrayEntry(key, start, len, hashCode);
            if(entry !== null) {
                return entry.Text;
            }
            var slice = key.slice(start, start + len);
            return this.addEntry(StringUtilities.fromCharCodeArray(slice), hashCode);
        };
        StringTable.prototype.findCharArrayEntry = function (key, start, len, hashCode) {
            for(var e = this.entries[hashCode % this.entries.length]; e !== null; e = e.Next) {
                if(e.HashCode === hashCode && StringTable.textCharArrayEquals(e.Text, key, start, len)) {
                    return e;
                }
            }
            return null;
        };
        StringTable.prototype.addEntry = function (text, hashCode) {
            var index = hashCode % this.entries.length;
            var e = new StringTableEntry(text, hashCode, this.entries[index]);
            this.entries[index] = e;
            if(this.count === this.entries.length) {
                this.grow();
            }
            this.count++;
            return e.Text;
        };
        StringTable.prototype.grow = function () {
            var newSize = Hash.expandPrime(this.entries.length);
            var oldEntries = this.entries;
            var newEntries = ArrayUtilities.createArray(newSize);
            this.entries = newEntries;
            for(var i = 0; i < oldEntries.length; i++) {
                var e = oldEntries[i];
                while(e !== null) {
                    var newIndex = e.HashCode % newSize;
                    var tmp = e.Next;
                    e.Next = newEntries[newIndex];
                    newEntries[newIndex] = e;
                    e = tmp;
                }
            }
        };
        StringTable.textCharArrayEquals = function textCharArrayEquals(text, array, start, length) {
            if(text.length !== length) {
                return false;
            }
            var s = start;
            for(var i = 0; i < length; i++) {
                if(text.charCodeAt(i) !== array[s]) {
                    return false;
                }
                s++;
            }
            return true;
        }
        return StringTable;
    })();
    Collections.StringTable = StringTable;    
    function createStringTable(capacity) {
        if (typeof capacity === "undefined") { capacity = Collections.DefaultStringTableCapacity; }
        return new StringTable(capacity);
    }
    Collections.createStringTable = createStringTable;
})(Collections || (Collections = {}));
var DiagnosticCode;
(function (DiagnosticCode) {
    DiagnosticCode._map = [];
    DiagnosticCode._map[0] = "Unrecognized_escape_sequence";
    DiagnosticCode.Unrecognized_escape_sequence = 0;
    DiagnosticCode._map[1] = "Unexpected_character_0";
    DiagnosticCode.Unexpected_character_0 = 1;
    DiagnosticCode._map[2] = "Missing_closing_quote_character";
    DiagnosticCode.Missing_closing_quote_character = 2;
    DiagnosticCode._map[3] = "Identifier_expected";
    DiagnosticCode.Identifier_expected = 3;
    DiagnosticCode._map[4] = "_0_keyword_expected";
    DiagnosticCode._0_keyword_expected = 4;
    DiagnosticCode._map[5] = "_0_expected";
    DiagnosticCode._0_expected = 5;
    DiagnosticCode._map[6] = "Identifier_expected__0_is_a_keyword";
    DiagnosticCode.Identifier_expected__0_is_a_keyword = 6;
    DiagnosticCode._map[7] = "Automatic_semicolon_insertion_not_allowed";
    DiagnosticCode.Automatic_semicolon_insertion_not_allowed = 7;
    DiagnosticCode._map[8] = "Unexpected_token__0_expected";
    DiagnosticCode.Unexpected_token__0_expected = 8;
    DiagnosticCode._map[9] = "Trailing_separator_not_allowed";
    DiagnosticCode.Trailing_separator_not_allowed = 9;
    DiagnosticCode._map[10] = "_StarSlash__expected";
    DiagnosticCode._StarSlash__expected = 10;
})(DiagnosticCode || (DiagnosticCode = {}));
var DiagnosticMessages = (function () {
    function DiagnosticMessages() { }
    DiagnosticMessages.codeToFormatString = [];
    DiagnosticMessages.initializeStaticData = function initializeStaticData() {
        if(DiagnosticMessages.codeToFormatString.length === 0) {
            DiagnosticMessages.codeToFormatString[0 /* Unrecognized_escape_sequence */ ] = "Unrecognized escape sequence.";
            DiagnosticMessages.codeToFormatString[1 /* Unexpected_character_0 */ ] = "Unexpected character {0}.";
            DiagnosticMessages.codeToFormatString[2 /* Missing_closing_quote_character */ ] = "Missing close quote character.";
            DiagnosticMessages.codeToFormatString[3 /* Identifier_expected */ ] = "Identifier expected.";
            DiagnosticMessages.codeToFormatString[4 /* _0_keyword_expected */ ] = "'{0}' keyword expected.";
            DiagnosticMessages.codeToFormatString[5 /* _0_expected */ ] = "'{0}' expected.";
            DiagnosticMessages.codeToFormatString[6 /* Identifier_expected__0_is_a_keyword */ ] = "Identifier expected; '{0}' is a keyword.";
            DiagnosticMessages.codeToFormatString[7 /* Automatic_semicolon_insertion_not_allowed */ ] = "Automatic semicolon insertion not allowed.";
            DiagnosticMessages.codeToFormatString[8 /* Unexpected_token__0_expected */ ] = "Unexpected token; '{0}' expected.";
            DiagnosticMessages.codeToFormatString[9 /* Trailing_separator_not_allowed */ ] = "Trailing separator not allowed.";
            DiagnosticMessages.codeToFormatString[10 /* _StarSlash__expected */ ] = "'*/' expected.";
        }
    }
    DiagnosticMessages.getFormatString = function getFormatString(code) {
        DiagnosticMessages.initializeStaticData();
        return DiagnosticMessages.codeToFormatString[code];
    }
    DiagnosticMessages.getDiagnosticMessage = function getDiagnosticMessage(code, args) {
        var formatString = DiagnosticMessages.getFormatString(code);
        var result = formatString.replace(/{(\d+)}/g, function (match, num) {
            return typeof args[num] !== 'undefined' ? args[num] : match;
        });
        return result;
    }
    return DiagnosticMessages;
})();
var Diagnostic = (function () {
    function Diagnostic(diagnosticCode, arguments) {
        this._diagnosticCode = 0;
        this._arguments = null;
        this._diagnosticCode = diagnosticCode;
        this._arguments = (arguments && arguments.length > 0) ? arguments : null;
    }
    Diagnostic.prototype.diagnosticCode = function () {
        return this._diagnosticCode;
    };
    Diagnostic.prototype.additionalLocations = function () {
        return [];
    };
    Diagnostic.prototype.message = function () {
        return DiagnosticMessages.getDiagnosticMessage(this._diagnosticCode, this._arguments);
    };
    return Diagnostic;
})();
var SyntaxDiagnostic = (function (_super) {
    __extends(SyntaxDiagnostic, _super);
    function SyntaxDiagnostic(position, width, code, args) {
        _super.call(this, code, args);
        if(width < 0) {
            throw Errors.argumentOutOfRange("width");
        }
        this._position = position;
        this._width = width;
    }
    SyntaxDiagnostic.prototype.toJSON = function (key) {
        var result = {
        };
        result._position = this._position;
        result._width = this._width;
        result._diagnosticCode = (DiagnosticCode)._map[this.diagnosticCode()];
        var arguments = (this)._arguments;
        if(arguments && arguments.length > 0) {
            result._arguments = arguments;
        }
        return result;
    };
    SyntaxDiagnostic.prototype.position = function () {
        return this._position;
    };
    SyntaxDiagnostic.prototype.width = function () {
        return this._width;
    };
    return SyntaxDiagnostic;
})(Diagnostic);
var Syntax;
(function (Syntax) {
    var VariableWidthTokenWithNoTrivia = (function () {
        function VariableWidthTokenWithNoTrivia(sourceText, fullStart, kind, textOrWidth) {
            this._value = null;
            this._sourceText = sourceText;
            this._fullStart = fullStart;
            this.tokenKind = kind;
            this._textOrWidth = textOrWidth;
        }
        VariableWidthTokenWithNoTrivia.prototype.clone = function () {
            return new VariableWidthTokenWithNoTrivia(this._sourceText, this._fullStart, this.tokenKind, this._textOrWidth);
        };
        VariableWidthTokenWithNoTrivia.prototype.isToken = function () {
            return true;
        };
        VariableWidthTokenWithNoTrivia.prototype.isNode = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.isList = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.isTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.isTriviaList = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.isMissing = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        VariableWidthTokenWithNoTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        VariableWidthTokenWithNoTrivia.prototype.fullWidth = function () {
            return this.width();
        };
        VariableWidthTokenWithNoTrivia.prototype.start = function () {
            return this._fullStart;
        };
        VariableWidthTokenWithNoTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        VariableWidthTokenWithNoTrivia.prototype.width = function () {
            return typeof this._textOrWidth === 'number' ? this._textOrWidth : this._textOrWidth.length;
        };
        VariableWidthTokenWithNoTrivia.prototype.text = function () {
            if(typeof this._textOrWidth === 'number') {
                this._textOrWidth = this._sourceText.substr(this.start(), this._textOrWidth, this.tokenKind === 9 /* IdentifierNameToken */ );
            }
            return this._textOrWidth;
        };
        VariableWidthTokenWithNoTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        VariableWidthTokenWithNoTrivia.prototype.value = function () {
            return this._value || (this._value = Syntax.value(this));
        };
        VariableWidthTokenWithNoTrivia.prototype.hasLeadingTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        VariableWidthTokenWithNoTrivia.prototype.leadingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        VariableWidthTokenWithNoTrivia.prototype.hasTrailingTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        VariableWidthTokenWithNoTrivia.prototype.trailingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        VariableWidthTokenWithNoTrivia.prototype.toJSON = function (key) {
            return Syntax.tokenToJSON(this);
        };
        VariableWidthTokenWithNoTrivia.prototype.realize = function () {
            return Syntax.realize(this);
        };
        VariableWidthTokenWithNoTrivia.prototype.collectTextElements = function (elements) {
            Syntax.collectTokenTextElements(this, elements);
        };
        VariableWidthTokenWithNoTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        VariableWidthTokenWithNoTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return VariableWidthTokenWithNoTrivia;
    })();    
    var VariableWidthTokenWithLeadingTrivia = (function () {
        function VariableWidthTokenWithLeadingTrivia(sourceText, fullStart, kind, leadingTriviaInfo, textOrWidth) {
            this._value = null;
            this._sourceText = sourceText;
            this._fullStart = fullStart;
            this.tokenKind = kind;
            this._leadingTriviaInfo = leadingTriviaInfo;
            this._textOrWidth = textOrWidth;
        }
        VariableWidthTokenWithLeadingTrivia.prototype.clone = function () {
            return new VariableWidthTokenWithLeadingTrivia(this._sourceText, this._fullStart, this.tokenKind, this._leadingTriviaInfo, this._textOrWidth);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isToken = function () {
            return true;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isNode = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isList = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isTrivia = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isMissing = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.fullWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo) + this.width();
        };
        VariableWidthTokenWithLeadingTrivia.prototype.start = function () {
            return this._fullStart + getTriviaLength(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        VariableWidthTokenWithLeadingTrivia.prototype.width = function () {
            return typeof this._textOrWidth === 'number' ? this._textOrWidth : this._textOrWidth.length;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.text = function () {
            if(typeof this._textOrWidth === 'number') {
                this._textOrWidth = this._sourceText.substr(this.start(), this._textOrWidth, this.tokenKind === 9 /* IdentifierNameToken */ );
            }
            return this._textOrWidth;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.value = function () {
            return this._value || (this._value = Syntax.value(this));
        };
        VariableWidthTokenWithLeadingTrivia.prototype.hasLeadingTrivia = function () {
            return true;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return hasTriviaComment(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return hasTriviaNewLine(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.leadingTriviaWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.leadingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaLength(this._leadingTriviaInfo), false);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.hasTrailingTrivia = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.trailingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.toJSON = function (key) {
            return Syntax.tokenToJSON(this);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.realize = function () {
            return Syntax.realize(this);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.collectTextElements = function (elements) {
            Syntax.collectTokenTextElements(this, elements);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return VariableWidthTokenWithLeadingTrivia;
    })();    
    var VariableWidthTokenWithTrailingTrivia = (function () {
        function VariableWidthTokenWithTrailingTrivia(sourceText, fullStart, kind, textOrWidth, trailingTriviaInfo) {
            this._value = null;
            this._sourceText = sourceText;
            this._fullStart = fullStart;
            this.tokenKind = kind;
            this._textOrWidth = textOrWidth;
            this._trailingTriviaInfo = trailingTriviaInfo;
        }
        VariableWidthTokenWithTrailingTrivia.prototype.clone = function () {
            return new VariableWidthTokenWithTrailingTrivia(this._sourceText, this._fullStart, this.tokenKind, this._textOrWidth, this._trailingTriviaInfo);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isToken = function () {
            return true;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isNode = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isList = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isTrivia = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isMissing = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.fullWidth = function () {
            return this.width() + getTriviaLength(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.start = function () {
            return this._fullStart;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        VariableWidthTokenWithTrailingTrivia.prototype.width = function () {
            return typeof this._textOrWidth === 'number' ? this._textOrWidth : this._textOrWidth.length;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.text = function () {
            if(typeof this._textOrWidth === 'number') {
                this._textOrWidth = this._sourceText.substr(this.start(), this._textOrWidth, this.tokenKind === 9 /* IdentifierNameToken */ );
            }
            return this._textOrWidth;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.value = function () {
            return this._value || (this._value = Syntax.value(this));
        };
        VariableWidthTokenWithTrailingTrivia.prototype.hasLeadingTrivia = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.leadingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.hasTrailingTrivia = function () {
            return true;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return hasTriviaComment(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return hasTriviaNewLine(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.trailingTriviaWidth = function () {
            return getTriviaLength(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.trailingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaLength(this._trailingTriviaInfo), true);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.toJSON = function (key) {
            return Syntax.tokenToJSON(this);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.realize = function () {
            return Syntax.realize(this);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.collectTextElements = function (elements) {
            Syntax.collectTokenTextElements(this, elements);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return VariableWidthTokenWithTrailingTrivia;
    })();    
    var VariableWidthTokenWithLeadingAndTrailingTrivia = (function () {
        function VariableWidthTokenWithLeadingAndTrailingTrivia(sourceText, fullStart, kind, leadingTriviaInfo, textOrWidth, trailingTriviaInfo) {
            this._value = null;
            this._sourceText = sourceText;
            this._fullStart = fullStart;
            this.tokenKind = kind;
            this._leadingTriviaInfo = leadingTriviaInfo;
            this._textOrWidth = textOrWidth;
            this._trailingTriviaInfo = trailingTriviaInfo;
        }
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.clone = function () {
            return new VariableWidthTokenWithLeadingAndTrailingTrivia(this._sourceText, this._fullStart, this.tokenKind, this._leadingTriviaInfo, this._textOrWidth, this._trailingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isToken = function () {
            return true;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isNode = function () {
            return false;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isList = function () {
            return false;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isTrivia = function () {
            return false;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isMissing = function () {
            return false;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.fullWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo) + this.width() + getTriviaLength(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.start = function () {
            return this._fullStart + getTriviaLength(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.width = function () {
            return typeof this._textOrWidth === 'number' ? this._textOrWidth : this._textOrWidth.length;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.text = function () {
            if(typeof this._textOrWidth === 'number') {
                this._textOrWidth = this._sourceText.substr(this.start(), this._textOrWidth, this.tokenKind === 9 /* IdentifierNameToken */ );
            }
            return this._textOrWidth;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.value = function () {
            return this._value || (this._value = Syntax.value(this));
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.hasLeadingTrivia = function () {
            return true;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return hasTriviaComment(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return hasTriviaNewLine(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.leadingTriviaWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.leadingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaLength(this._leadingTriviaInfo), false);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.hasTrailingTrivia = function () {
            return true;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return hasTriviaComment(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return hasTriviaNewLine(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.trailingTriviaWidth = function () {
            return getTriviaLength(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.trailingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaLength(this._trailingTriviaInfo), true);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.toJSON = function (key) {
            return Syntax.tokenToJSON(this);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.realize = function () {
            return Syntax.realize(this);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.collectTextElements = function (elements) {
            Syntax.collectTokenTextElements(this, elements);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return VariableWidthTokenWithLeadingAndTrailingTrivia;
    })();    
    var FixedWidthTokenWithNoTrivia = (function () {
        function FixedWidthTokenWithNoTrivia(kind) {
            this.tokenKind = kind;
        }
        FixedWidthTokenWithNoTrivia.prototype.clone = function () {
            return new FixedWidthTokenWithNoTrivia(this.tokenKind);
        };
        FixedWidthTokenWithNoTrivia.prototype.isToken = function () {
            return true;
        };
        FixedWidthTokenWithNoTrivia.prototype.isNode = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.isList = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.isTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.isTriviaList = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.isMissing = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        FixedWidthTokenWithNoTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        FixedWidthTokenWithNoTrivia.prototype.fullWidth = function () {
            return this.width();
        };
        FixedWidthTokenWithNoTrivia.prototype.width = function () {
            return this.text().length;
        };
        FixedWidthTokenWithNoTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this.tokenKind);
        };
        FixedWidthTokenWithNoTrivia.prototype.fullText = function () {
            return this.text();
        };
        FixedWidthTokenWithNoTrivia.prototype.value = function () {
            return null;
        };
        FixedWidthTokenWithNoTrivia.prototype.hasLeadingTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        FixedWidthTokenWithNoTrivia.prototype.leadingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        FixedWidthTokenWithNoTrivia.prototype.hasTrailingTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        FixedWidthTokenWithNoTrivia.prototype.trailingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        FixedWidthTokenWithNoTrivia.prototype.toJSON = function (key) {
            return Syntax.tokenToJSON(this);
        };
        FixedWidthTokenWithNoTrivia.prototype.realize = function () {
            return Syntax.realize(this);
        };
        FixedWidthTokenWithNoTrivia.prototype.collectTextElements = function (elements) {
            Syntax.collectTokenTextElements(this, elements);
        };
        FixedWidthTokenWithNoTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        FixedWidthTokenWithNoTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return FixedWidthTokenWithNoTrivia;
    })();    
    var FixedWidthTokenWithLeadingTrivia = (function () {
        function FixedWidthTokenWithLeadingTrivia(sourceText, fullStart, kind, leadingTriviaInfo) {
            this._sourceText = sourceText;
            this._fullStart = fullStart;
            this.tokenKind = kind;
            this._leadingTriviaInfo = leadingTriviaInfo;
        }
        FixedWidthTokenWithLeadingTrivia.prototype.clone = function () {
            return new FixedWidthTokenWithLeadingTrivia(this._sourceText, this._fullStart, this.tokenKind, this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isToken = function () {
            return true;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isNode = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isList = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isTrivia = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isMissing = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.fullWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo) + this.width();
        };
        FixedWidthTokenWithLeadingTrivia.prototype.start = function () {
            return this._fullStart + getTriviaLength(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        FixedWidthTokenWithLeadingTrivia.prototype.width = function () {
            return this.text().length;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this.tokenKind);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.value = function () {
            return null;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.hasLeadingTrivia = function () {
            return true;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return hasTriviaComment(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return hasTriviaNewLine(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.leadingTriviaWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.leadingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaLength(this._leadingTriviaInfo), false);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.hasTrailingTrivia = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.trailingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.toJSON = function (key) {
            return Syntax.tokenToJSON(this);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.realize = function () {
            return Syntax.realize(this);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.collectTextElements = function (elements) {
            Syntax.collectTokenTextElements(this, elements);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return FixedWidthTokenWithLeadingTrivia;
    })();    
    var FixedWidthTokenWithTrailingTrivia = (function () {
        function FixedWidthTokenWithTrailingTrivia(sourceText, fullStart, kind, trailingTriviaInfo) {
            this._sourceText = sourceText;
            this._fullStart = fullStart;
            this.tokenKind = kind;
            this._trailingTriviaInfo = trailingTriviaInfo;
        }
        FixedWidthTokenWithTrailingTrivia.prototype.clone = function () {
            return new FixedWidthTokenWithTrailingTrivia(this._sourceText, this._fullStart, this.tokenKind, this._trailingTriviaInfo);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isToken = function () {
            return true;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isNode = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isList = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isTrivia = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isMissing = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.fullWidth = function () {
            return this.width() + getTriviaLength(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.start = function () {
            return this._fullStart;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        FixedWidthTokenWithTrailingTrivia.prototype.width = function () {
            return this.text().length;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this.tokenKind);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.value = function () {
            return null;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.hasLeadingTrivia = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.leadingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.hasTrailingTrivia = function () {
            return true;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return hasTriviaComment(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return hasTriviaNewLine(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.trailingTriviaWidth = function () {
            return getTriviaLength(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.trailingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaLength(this._trailingTriviaInfo), true);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.toJSON = function (key) {
            return Syntax.tokenToJSON(this);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.realize = function () {
            return Syntax.realize(this);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.collectTextElements = function (elements) {
            Syntax.collectTokenTextElements(this, elements);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return FixedWidthTokenWithTrailingTrivia;
    })();    
    var FixedWidthTokenWithLeadingAndTrailingTrivia = (function () {
        function FixedWidthTokenWithLeadingAndTrailingTrivia(sourceText, fullStart, kind, leadingTriviaInfo, trailingTriviaInfo) {
            this._sourceText = sourceText;
            this._fullStart = fullStart;
            this.tokenKind = kind;
            this._leadingTriviaInfo = leadingTriviaInfo;
            this._trailingTriviaInfo = trailingTriviaInfo;
        }
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.clone = function () {
            return new FixedWidthTokenWithLeadingAndTrailingTrivia(this._sourceText, this._fullStart, this.tokenKind, this._leadingTriviaInfo, this._trailingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isToken = function () {
            return true;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isNode = function () {
            return false;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isList = function () {
            return false;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isTrivia = function () {
            return false;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isMissing = function () {
            return false;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.fullWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo) + this.width() + getTriviaLength(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.start = function () {
            return this._fullStart + getTriviaLength(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.width = function () {
            return this.text().length;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this.tokenKind);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.value = function () {
            return null;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.hasLeadingTrivia = function () {
            return true;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return hasTriviaComment(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return hasTriviaNewLine(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.leadingTriviaWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.leadingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaLength(this._leadingTriviaInfo), false);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.hasTrailingTrivia = function () {
            return true;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return hasTriviaComment(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return hasTriviaNewLine(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.trailingTriviaWidth = function () {
            return getTriviaLength(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.trailingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaLength(this._trailingTriviaInfo), true);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.toJSON = function (key) {
            return Syntax.tokenToJSON(this);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.realize = function () {
            return Syntax.realize(this);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.collectTextElements = function (elements) {
            Syntax.collectTokenTextElements(this, elements);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return FixedWidthTokenWithLeadingAndTrailingTrivia;
    })();    
    var KeywordWithNoTrivia = (function () {
        function KeywordWithNoTrivia(keywordKind) {
            this.tokenKind = 9 /* IdentifierNameToken */ ;
            this._keywordKind = keywordKind;
        }
        KeywordWithNoTrivia.prototype.clone = function () {
            return new KeywordWithNoTrivia(this._keywordKind);
        };
        KeywordWithNoTrivia.prototype.isToken = function () {
            return true;
        };
        KeywordWithNoTrivia.prototype.isNode = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.isList = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.isTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.isTriviaList = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.isMissing = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.kind = function () {
            return 9 /* IdentifierNameToken */ ;
        };
        KeywordWithNoTrivia.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        KeywordWithNoTrivia.prototype.fullWidth = function () {
            return this.width();
        };
        KeywordWithNoTrivia.prototype.width = function () {
            return this.text().length;
        };
        KeywordWithNoTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this._keywordKind);
        };
        KeywordWithNoTrivia.prototype.fullText = function () {
            return this.text();
        };
        KeywordWithNoTrivia.prototype.value = function () {
            return null;
        };
        KeywordWithNoTrivia.prototype.hasLeadingTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        KeywordWithNoTrivia.prototype.leadingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        KeywordWithNoTrivia.prototype.hasTrailingTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        KeywordWithNoTrivia.prototype.trailingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        KeywordWithNoTrivia.prototype.toJSON = function (key) {
            return Syntax.tokenToJSON(this);
        };
        KeywordWithNoTrivia.prototype.realize = function () {
            return Syntax.realize(this);
        };
        KeywordWithNoTrivia.prototype.collectTextElements = function (elements) {
            Syntax.collectTokenTextElements(this, elements);
        };
        KeywordWithNoTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        KeywordWithNoTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return KeywordWithNoTrivia;
    })();    
    var KeywordWithLeadingTrivia = (function () {
        function KeywordWithLeadingTrivia(sourceText, fullStart, keywordKind, leadingTriviaInfo) {
            this._sourceText = sourceText;
            this._fullStart = fullStart;
            this.tokenKind = 9 /* IdentifierNameToken */ ;
            this._keywordKind = keywordKind;
            this._leadingTriviaInfo = leadingTriviaInfo;
        }
        KeywordWithLeadingTrivia.prototype.clone = function () {
            return new KeywordWithLeadingTrivia(this._sourceText, this._fullStart, this._keywordKind, this._leadingTriviaInfo);
        };
        KeywordWithLeadingTrivia.prototype.isToken = function () {
            return true;
        };
        KeywordWithLeadingTrivia.prototype.isNode = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.isList = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.isTrivia = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.isMissing = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.kind = function () {
            return 9 /* IdentifierNameToken */ ;
        };
        KeywordWithLeadingTrivia.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        KeywordWithLeadingTrivia.prototype.fullWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo) + this.width();
        };
        KeywordWithLeadingTrivia.prototype.start = function () {
            return this._fullStart + getTriviaLength(this._leadingTriviaInfo);
        };
        KeywordWithLeadingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        KeywordWithLeadingTrivia.prototype.width = function () {
            return this.text().length;
        };
        KeywordWithLeadingTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this._keywordKind);
        };
        KeywordWithLeadingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        KeywordWithLeadingTrivia.prototype.value = function () {
            return null;
        };
        KeywordWithLeadingTrivia.prototype.hasLeadingTrivia = function () {
            return true;
        };
        KeywordWithLeadingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return hasTriviaComment(this._leadingTriviaInfo);
        };
        KeywordWithLeadingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return hasTriviaNewLine(this._leadingTriviaInfo);
        };
        KeywordWithLeadingTrivia.prototype.leadingTriviaWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo);
        };
        KeywordWithLeadingTrivia.prototype.leadingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaLength(this._leadingTriviaInfo), false);
        };
        KeywordWithLeadingTrivia.prototype.hasTrailingTrivia = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        KeywordWithLeadingTrivia.prototype.trailingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        KeywordWithLeadingTrivia.prototype.toJSON = function (key) {
            return Syntax.tokenToJSON(this);
        };
        KeywordWithLeadingTrivia.prototype.realize = function () {
            return Syntax.realize(this);
        };
        KeywordWithLeadingTrivia.prototype.collectTextElements = function (elements) {
            Syntax.collectTokenTextElements(this, elements);
        };
        KeywordWithLeadingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        KeywordWithLeadingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return KeywordWithLeadingTrivia;
    })();    
    var KeywordWithTrailingTrivia = (function () {
        function KeywordWithTrailingTrivia(sourceText, fullStart, keywordKind, trailingTriviaInfo) {
            this._sourceText = sourceText;
            this._fullStart = fullStart;
            this.tokenKind = 9 /* IdentifierNameToken */ ;
            this._keywordKind = keywordKind;
            this._trailingTriviaInfo = trailingTriviaInfo;
        }
        KeywordWithTrailingTrivia.prototype.clone = function () {
            return new KeywordWithTrailingTrivia(this._sourceText, this._fullStart, this._keywordKind, this._trailingTriviaInfo);
        };
        KeywordWithTrailingTrivia.prototype.isToken = function () {
            return true;
        };
        KeywordWithTrailingTrivia.prototype.isNode = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.isList = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.isTrivia = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.isMissing = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.kind = function () {
            return 9 /* IdentifierNameToken */ ;
        };
        KeywordWithTrailingTrivia.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        KeywordWithTrailingTrivia.prototype.fullWidth = function () {
            return this.width() + getTriviaLength(this._trailingTriviaInfo);
        };
        KeywordWithTrailingTrivia.prototype.start = function () {
            return this._fullStart;
        };
        KeywordWithTrailingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        KeywordWithTrailingTrivia.prototype.width = function () {
            return this.text().length;
        };
        KeywordWithTrailingTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this._keywordKind);
        };
        KeywordWithTrailingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        KeywordWithTrailingTrivia.prototype.value = function () {
            return null;
        };
        KeywordWithTrailingTrivia.prototype.hasLeadingTrivia = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        KeywordWithTrailingTrivia.prototype.leadingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        KeywordWithTrailingTrivia.prototype.hasTrailingTrivia = function () {
            return true;
        };
        KeywordWithTrailingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return hasTriviaComment(this._trailingTriviaInfo);
        };
        KeywordWithTrailingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return hasTriviaNewLine(this._trailingTriviaInfo);
        };
        KeywordWithTrailingTrivia.prototype.trailingTriviaWidth = function () {
            return getTriviaLength(this._trailingTriviaInfo);
        };
        KeywordWithTrailingTrivia.prototype.trailingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaLength(this._trailingTriviaInfo), true);
        };
        KeywordWithTrailingTrivia.prototype.toJSON = function (key) {
            return Syntax.tokenToJSON(this);
        };
        KeywordWithTrailingTrivia.prototype.realize = function () {
            return Syntax.realize(this);
        };
        KeywordWithTrailingTrivia.prototype.collectTextElements = function (elements) {
            Syntax.collectTokenTextElements(this, elements);
        };
        KeywordWithTrailingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        KeywordWithTrailingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return KeywordWithTrailingTrivia;
    })();    
    var KeywordWithLeadingAndTrailingTrivia = (function () {
        function KeywordWithLeadingAndTrailingTrivia(sourceText, fullStart, keywordKind, leadingTriviaInfo, trailingTriviaInfo) {
            this._sourceText = sourceText;
            this._fullStart = fullStart;
            this.tokenKind = 9 /* IdentifierNameToken */ ;
            this._keywordKind = keywordKind;
            this._leadingTriviaInfo = leadingTriviaInfo;
            this._trailingTriviaInfo = trailingTriviaInfo;
        }
        KeywordWithLeadingAndTrailingTrivia.prototype.clone = function () {
            return new KeywordWithLeadingAndTrailingTrivia(this._sourceText, this._fullStart, this._keywordKind, this._leadingTriviaInfo, this._trailingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isToken = function () {
            return true;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isNode = function () {
            return false;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isList = function () {
            return false;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isTrivia = function () {
            return false;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isMissing = function () {
            return false;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.kind = function () {
            return 9 /* IdentifierNameToken */ ;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.fullWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo) + this.width() + getTriviaLength(this._trailingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.start = function () {
            return this._fullStart + getTriviaLength(this._leadingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.width = function () {
            return this.text().length;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this._keywordKind);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.value = function () {
            return null;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.hasLeadingTrivia = function () {
            return true;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return hasTriviaComment(this._leadingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return hasTriviaNewLine(this._leadingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.leadingTriviaWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.leadingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaLength(this._leadingTriviaInfo), false);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.hasTrailingTrivia = function () {
            return true;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return hasTriviaComment(this._trailingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return hasTriviaNewLine(this._trailingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.trailingTriviaWidth = function () {
            return getTriviaLength(this._trailingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.trailingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaLength(this._trailingTriviaInfo), true);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.toJSON = function (key) {
            return Syntax.tokenToJSON(this);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.realize = function () {
            return Syntax.realize(this);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.collectTextElements = function (elements) {
            Syntax.collectTokenTextElements(this, elements);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return KeywordWithLeadingAndTrailingTrivia;
    })();    
    function fixedWidthToken(sourceText, fullStart, kind, leadingTriviaInfo, trailingTriviaInfo) {
        if(leadingTriviaInfo === 0) {
            if(trailingTriviaInfo === 0) {
                return new FixedWidthTokenWithNoTrivia(kind);
            } else {
                return new FixedWidthTokenWithTrailingTrivia(sourceText, fullStart, kind, trailingTriviaInfo);
            }
        } else {
            if(trailingTriviaInfo === 0) {
                return new FixedWidthTokenWithLeadingTrivia(sourceText, fullStart, kind, leadingTriviaInfo);
            } else {
                return new FixedWidthTokenWithLeadingAndTrailingTrivia(sourceText, fullStart, kind, leadingTriviaInfo, trailingTriviaInfo);
            }
        }
    }
    function variableWidthToken(sourceText, fullStart, kind, leadingTriviaInfo, width, trailingTriviaInfo) {
        if(leadingTriviaInfo === 0) {
            if(trailingTriviaInfo === 0) {
                return new VariableWidthTokenWithNoTrivia(sourceText, fullStart, kind, width);
            } else {
                return new VariableWidthTokenWithTrailingTrivia(sourceText, fullStart, kind, width, trailingTriviaInfo);
            }
        } else {
            if(trailingTriviaInfo === 0) {
                return new VariableWidthTokenWithLeadingTrivia(sourceText, fullStart, kind, leadingTriviaInfo, width);
            } else {
                return new VariableWidthTokenWithLeadingAndTrailingTrivia(sourceText, fullStart, kind, leadingTriviaInfo, width, trailingTriviaInfo);
            }
        }
    }
    function keyword(sourceText, fullStart, keywordKind, leadingTriviaInfo, trailingTriviaInfo) {
        if(leadingTriviaInfo === 0) {
            if(trailingTriviaInfo === 0) {
                return new KeywordWithNoTrivia(keywordKind);
            } else {
                return new KeywordWithTrailingTrivia(sourceText, fullStart, keywordKind, trailingTriviaInfo);
            }
        } else {
            if(trailingTriviaInfo === 0) {
                return new KeywordWithLeadingTrivia(sourceText, fullStart, keywordKind, leadingTriviaInfo);
            } else {
                return new KeywordWithLeadingAndTrailingTrivia(sourceText, fullStart, keywordKind, leadingTriviaInfo, trailingTriviaInfo);
            }
        }
    }
    function tokenFromText(text, fullStart, kind, leadingTriviaInfo, width, trailingTriviaInfo) {
        if(SyntaxFacts.isAnyPunctuation(kind)) {
            return fixedWidthToken(text, fullStart, kind, leadingTriviaInfo, trailingTriviaInfo);
        } else {
            if(SyntaxFacts.isAnyKeyword(kind)) {
                return keyword(text, fullStart, kind, leadingTriviaInfo, trailingTriviaInfo);
            } else {
                return variableWidthToken(text, fullStart, kind, leadingTriviaInfo, width, trailingTriviaInfo);
            }
        }
    }
    Syntax.tokenFromText = tokenFromText;
    function getTriviaLength(value) {
        return value & 67108863 /* TriviaLengthMask */ ;
    }
    function hasTriviaComment(value) {
        return (value & 67108864 /* TriviaCommentMask */ ) !== 0;
    }
    function hasTriviaNewLine(value) {
        return (value & 134217728 /* TriviaNewLineMask */ ) !== 0;
    }
})(Syntax || (Syntax = {}));
var Syntax;
(function (Syntax) {
    var SyntaxTrivia = (function () {
        function SyntaxTrivia(kind, text) {
            this._kind = kind;
            this._text = text;
        }
        SyntaxTrivia.prototype.toJSON = function (key) {
            var result = {
            };
            result.kind = (SyntaxKind)._map[this._kind];
            result.text = this._text;
            return result;
        };
        SyntaxTrivia.prototype.isToken = function () {
            return false;
        };
        SyntaxTrivia.prototype.isNode = function () {
            return false;
        };
        SyntaxTrivia.prototype.isList = function () {
            return false;
        };
        SyntaxTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        SyntaxTrivia.prototype.isTrivia = function () {
            return true;
        };
        SyntaxTrivia.prototype.isTriviaList = function () {
            return false;
        };
        SyntaxTrivia.prototype.isMissing = function () {
            return false;
        };
        SyntaxTrivia.prototype.kind = function () {
            return this._kind;
        };
        SyntaxTrivia.prototype.fullWidth = function () {
            return this._text.length;
        };
        SyntaxTrivia.prototype.fullText = function () {
            return this._text;
        };
        SyntaxTrivia.prototype.collectTextElements = function (elements) {
            elements.push(this.fullText());
        };
        return SyntaxTrivia;
    })();    
    function trivia(kind, text) {
        Debug.assert(kind === 6 /* MultiLineCommentTrivia */  || kind === 5 /* NewLineTrivia */  || kind === 7 /* SingleLineCommentTrivia */  || kind === 4 /* WhitespaceTrivia */  || kind === 8 /* SkippedTextTrivia */ );
        return new SyntaxTrivia(kind, text);
    }
    Syntax.trivia = trivia;
    function spaces(count) {
        return trivia(4 /* WhitespaceTrivia */ , StringUtilities.repeat(" ", count));
    }
    Syntax.spaces = spaces;
    function whitespace(text) {
        return trivia(4 /* WhitespaceTrivia */ , text);
    }
    Syntax.whitespace = whitespace;
    function multiLineComment(text) {
        return trivia(6 /* MultiLineCommentTrivia */ , text);
    }
    Syntax.multiLineComment = multiLineComment;
    function singleLineComment(text) {
        return trivia(7 /* SingleLineCommentTrivia */ , text);
    }
    Syntax.singleLineComment = singleLineComment;
    Syntax.spaceTrivia = spaces(1);
    Syntax.lineFeedTrivia = trivia(5 /* NewLineTrivia */ , "\n");
    Syntax.carriageReturnTrivia = trivia(5 /* NewLineTrivia */ , "\r");
    Syntax.carriageReturnLineFeedTrivia = trivia(5 /* NewLineTrivia */ , "\r\n");
    function splitMultiLineCommentTriviaIntoMultipleLines(trivia) {
        Debug.assert(trivia.kind() === 6 /* MultiLineCommentTrivia */ );
        var result = [];
        var triviaText = trivia.fullText();
        var currentIndex = 0;
        for(var i = 0; i < triviaText.length; i++) {
            var ch = triviaText.charCodeAt(i);
            var isCarriageReturnLineFeed = false;
            switch(ch) {
                case 13 /* carriageReturn */ : {
                    if(i < triviaText.length - 1 && triviaText.charCodeAt(i + 1) === 10 /* lineFeed */ ) {
                        i++;
                    }

                }
                case 10 /* lineFeed */ :
                case 8233 /* paragraphSeparator */ :
                case 8232 /* lineSeparator */ : {
                    result.push(triviaText.substring(currentIndex, i + 1));
                    currentIndex = i + 1;
                    continue;

                }
            }
        }
        result.push(triviaText.substring(currentIndex));
        return result;
    }
    Syntax.splitMultiLineCommentTriviaIntoMultipleLines = splitMultiLineCommentTriviaIntoMultipleLines;
})(Syntax || (Syntax = {}));
var Syntax;
(function (Syntax) {
    function collectSyntaxTriviaListTextElements(elements, list) {
        for(var i = 0, n = list.count(); i < n; i++) {
            list.syntaxTriviaAt(i).collectTextElements(elements);
        }
    }
    Syntax.emptyTriviaList = {
        kind: function () {
            return 3 /* TriviaList */ ;
        },
        isToken: function () {
            return false;
        },
        isNode: function () {
            return false;
        },
        isList: function () {
            return false;
        },
        isSeparatedList: function () {
            return false;
        },
        isTriviaList: function () {
            return true;
        },
        isTrivia: function () {
            return false;
        },
        isMissing: function () {
            return true;
        },
        count: function () {
            return 0;
        },
        syntaxTriviaAt: function (index) {
            throw Errors.argumentOutOfRange("index");
        },
        last: function () {
            throw Errors.argumentOutOfRange("index");
        },
        fullWidth: function () {
            return 0;
        },
        fullText: function () {
            return "";
        },
        hasComment: function () {
            return false;
        },
        hasNewLine: function () {
            return false;
        },
        toJSON: function (key) {
            return [];
        },
        collectTextElements: function (elements) {
        },
        toArray: function () {
            return [];
        },
        concat: function (trivia) {
            return trivia;
        }
    };
    function concatTrivia(list1, list2) {
        if(list1.count() === 0) {
            return list2;
        }
        if(list2.count() === 0) {
            return list1;
        }
        var trivia = list1.toArray();
        trivia.push.apply(trivia, list2.toArray());
        return triviaList(trivia);
    }
    function isComment(trivia) {
        return trivia.kind() === 6 /* MultiLineCommentTrivia */  || trivia.kind() === 7 /* SingleLineCommentTrivia */ ;
    }
    var SingletonSyntaxTriviaList = (function () {
        function SingletonSyntaxTriviaList(item) {
            this.item = item;
        }
        SingletonSyntaxTriviaList.prototype.isToken = function () {
            return false;
        };
        SingletonSyntaxTriviaList.prototype.isNode = function () {
            return false;
        };
        SingletonSyntaxTriviaList.prototype.isList = function () {
            return false;
        };
        SingletonSyntaxTriviaList.prototype.isSeparatedList = function () {
            return false;
        };
        SingletonSyntaxTriviaList.prototype.isTriviaList = function () {
            return true;
        };
        SingletonSyntaxTriviaList.prototype.isTrivia = function () {
            return false;
        };
        SingletonSyntaxTriviaList.prototype.isMissing = function () {
            return this.item.isMissing();
        };
        SingletonSyntaxTriviaList.prototype.kind = function () {
            return 3 /* TriviaList */ ;
        };
        SingletonSyntaxTriviaList.prototype.count = function () {
            return 1;
        };
        SingletonSyntaxTriviaList.prototype.syntaxTriviaAt = function (index) {
            if(index !== 0) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.item;
        };
        SingletonSyntaxTriviaList.prototype.last = function () {
            return this.item;
        };
        SingletonSyntaxTriviaList.prototype.fullWidth = function () {
            return this.item.fullWidth();
        };
        SingletonSyntaxTriviaList.prototype.fullText = function () {
            return this.item.fullText();
        };
        SingletonSyntaxTriviaList.prototype.hasComment = function () {
            return isComment(this.item);
        };
        SingletonSyntaxTriviaList.prototype.hasNewLine = function () {
            return this.item.kind() === 5 /* NewLineTrivia */ ;
        };
        SingletonSyntaxTriviaList.prototype.toJSON = function (key) {
            return [
                this.item
            ];
        };
        SingletonSyntaxTriviaList.prototype.collectTextElements = function (elements) {
            collectSyntaxTriviaListTextElements(elements, this);
        };
        SingletonSyntaxTriviaList.prototype.toArray = function () {
            return [
                this.item
            ];
        };
        SingletonSyntaxTriviaList.prototype.concat = function (trivia) {
            return concatTrivia(this, trivia);
        };
        return SingletonSyntaxTriviaList;
    })();    
    var NormalSyntaxTriviaList = (function () {
        function NormalSyntaxTriviaList(trivia) {
            this.trivia = trivia;
        }
        NormalSyntaxTriviaList.prototype.kind = function () {
            return 3 /* TriviaList */ ;
        };
        NormalSyntaxTriviaList.prototype.isToken = function () {
            return false;
        };
        NormalSyntaxTriviaList.prototype.isNode = function () {
            return false;
        };
        NormalSyntaxTriviaList.prototype.isList = function () {
            return false;
        };
        NormalSyntaxTriviaList.prototype.isSeparatedList = function () {
            return false;
        };
        NormalSyntaxTriviaList.prototype.isTriviaList = function () {
            return true;
        };
        NormalSyntaxTriviaList.prototype.isTrivia = function () {
            return false;
        };
        NormalSyntaxTriviaList.prototype.isMissing = function () {
            for(var i = 0, n = this.trivia.length; i < n; i++) {
                if(!this.trivia[i].isMissing()) {
                    return false;
                }
            }
            return true;
        };
        NormalSyntaxTriviaList.prototype.count = function () {
            return this.trivia.length;
        };
        NormalSyntaxTriviaList.prototype.syntaxTriviaAt = function (index) {
            if(index < 0 || index >= this.trivia.length) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.trivia[index];
        };
        NormalSyntaxTriviaList.prototype.last = function () {
            return this.trivia[this.trivia.length - 1];
        };
        NormalSyntaxTriviaList.prototype.fullWidth = function () {
            return ArrayUtilities.sum(this.trivia, function (t) {
                return t.fullWidth();
            });
        };
        NormalSyntaxTriviaList.prototype.fullText = function () {
            var result = "";
            for(var i = 0, n = this.trivia.length; i < n; i++) {
                result += this.trivia[i].fullText();
            }
            return result;
        };
        NormalSyntaxTriviaList.prototype.hasComment = function () {
            return ArrayUtilities.any(this.trivia, isComment);
        };
        NormalSyntaxTriviaList.prototype.hasNewLine = function () {
            return ArrayUtilities.any(this.trivia, function (t) {
                return t.kind() === 5 /* NewLineTrivia */ ;
            });
        };
        NormalSyntaxTriviaList.prototype.toJSON = function (key) {
            return this.trivia;
        };
        NormalSyntaxTriviaList.prototype.collectTextElements = function (elements) {
            collectSyntaxTriviaListTextElements(elements, this);
        };
        NormalSyntaxTriviaList.prototype.toArray = function () {
            return this.trivia.slice(0);
        };
        NormalSyntaxTriviaList.prototype.concat = function (trivia) {
            return concatTrivia(this, trivia);
        };
        return NormalSyntaxTriviaList;
    })();    
    function triviaList(trivia) {
        if(trivia === undefined || trivia === null || trivia.length === 0) {
            return Syntax.emptyTriviaList;
        }
        if(trivia.length === 1) {
            return new SingletonSyntaxTriviaList(trivia[0]);
        }
        return new NormalSyntaxTriviaList(trivia);
    }
    Syntax.triviaList = triviaList;
    Syntax.spaceTriviaList = triviaList([
        Syntax.spaceTrivia
    ]);
})(Syntax || (Syntax = {}));
var Unicode = (function () {
    function Unicode() { }
    Unicode.unicodeES3IdentifierStart = [
        170, 
        170, 
        181, 
        181, 
        186, 
        186, 
        192, 
        214, 
        216, 
        246, 
        248, 
        543, 
        546, 
        563, 
        592, 
        685, 
        688, 
        696, 
        699, 
        705, 
        720, 
        721, 
        736, 
        740, 
        750, 
        750, 
        890, 
        890, 
        902, 
        902, 
        904, 
        906, 
        908, 
        908, 
        910, 
        929, 
        931, 
        974, 
        976, 
        983, 
        986, 
        1011, 
        1024, 
        1153, 
        1164, 
        1220, 
        1223, 
        1224, 
        1227, 
        1228, 
        1232, 
        1269, 
        1272, 
        1273, 
        1329, 
        1366, 
        1369, 
        1369, 
        1377, 
        1415, 
        1488, 
        1514, 
        1520, 
        1522, 
        1569, 
        1594, 
        1600, 
        1610, 
        1649, 
        1747, 
        1749, 
        1749, 
        1765, 
        1766, 
        1786, 
        1788, 
        1808, 
        1808, 
        1810, 
        1836, 
        1920, 
        1957, 
        2309, 
        2361, 
        2365, 
        2365, 
        2384, 
        2384, 
        2392, 
        2401, 
        2437, 
        2444, 
        2447, 
        2448, 
        2451, 
        2472, 
        2474, 
        2480, 
        2482, 
        2482, 
        2486, 
        2489, 
        2524, 
        2525, 
        2527, 
        2529, 
        2544, 
        2545, 
        2565, 
        2570, 
        2575, 
        2576, 
        2579, 
        2600, 
        2602, 
        2608, 
        2610, 
        2611, 
        2613, 
        2614, 
        2616, 
        2617, 
        2649, 
        2652, 
        2654, 
        2654, 
        2674, 
        2676, 
        2693, 
        2699, 
        2701, 
        2701, 
        2703, 
        2705, 
        2707, 
        2728, 
        2730, 
        2736, 
        2738, 
        2739, 
        2741, 
        2745, 
        2749, 
        2749, 
        2768, 
        2768, 
        2784, 
        2784, 
        2821, 
        2828, 
        2831, 
        2832, 
        2835, 
        2856, 
        2858, 
        2864, 
        2866, 
        2867, 
        2870, 
        2873, 
        2877, 
        2877, 
        2908, 
        2909, 
        2911, 
        2913, 
        2949, 
        2954, 
        2958, 
        2960, 
        2962, 
        2965, 
        2969, 
        2970, 
        2972, 
        2972, 
        2974, 
        2975, 
        2979, 
        2980, 
        2984, 
        2986, 
        2990, 
        2997, 
        2999, 
        3001, 
        3077, 
        3084, 
        3086, 
        3088, 
        3090, 
        3112, 
        3114, 
        3123, 
        3125, 
        3129, 
        3168, 
        3169, 
        3205, 
        3212, 
        3214, 
        3216, 
        3218, 
        3240, 
        3242, 
        3251, 
        3253, 
        3257, 
        3294, 
        3294, 
        3296, 
        3297, 
        3333, 
        3340, 
        3342, 
        3344, 
        3346, 
        3368, 
        3370, 
        3385, 
        3424, 
        3425, 
        3461, 
        3478, 
        3482, 
        3505, 
        3507, 
        3515, 
        3517, 
        3517, 
        3520, 
        3526, 
        3585, 
        3632, 
        3634, 
        3635, 
        3648, 
        3654, 
        3713, 
        3714, 
        3716, 
        3716, 
        3719, 
        3720, 
        3722, 
        3722, 
        3725, 
        3725, 
        3732, 
        3735, 
        3737, 
        3743, 
        3745, 
        3747, 
        3749, 
        3749, 
        3751, 
        3751, 
        3754, 
        3755, 
        3757, 
        3760, 
        3762, 
        3763, 
        3773, 
        3773, 
        3776, 
        3780, 
        3782, 
        3782, 
        3804, 
        3805, 
        3840, 
        3840, 
        3904, 
        3911, 
        3913, 
        3946, 
        3976, 
        3979, 
        4096, 
        4129, 
        4131, 
        4135, 
        4137, 
        4138, 
        4176, 
        4181, 
        4256, 
        4293, 
        4304, 
        4342, 
        4352, 
        4441, 
        4447, 
        4514, 
        4520, 
        4601, 
        4608, 
        4614, 
        4616, 
        4678, 
        4680, 
        4680, 
        4682, 
        4685, 
        4688, 
        4694, 
        4696, 
        4696, 
        4698, 
        4701, 
        4704, 
        4742, 
        4744, 
        4744, 
        4746, 
        4749, 
        4752, 
        4782, 
        4784, 
        4784, 
        4786, 
        4789, 
        4792, 
        4798, 
        4800, 
        4800, 
        4802, 
        4805, 
        4808, 
        4814, 
        4816, 
        4822, 
        4824, 
        4846, 
        4848, 
        4878, 
        4880, 
        4880, 
        4882, 
        4885, 
        4888, 
        4894, 
        4896, 
        4934, 
        4936, 
        4954, 
        5024, 
        5108, 
        5121, 
        5740, 
        5743, 
        5750, 
        5761, 
        5786, 
        5792, 
        5866, 
        6016, 
        6067, 
        6176, 
        6263, 
        6272, 
        6312, 
        7680, 
        7835, 
        7840, 
        7929, 
        7936, 
        7957, 
        7960, 
        7965, 
        7968, 
        8005, 
        8008, 
        8013, 
        8016, 
        8023, 
        8025, 
        8025, 
        8027, 
        8027, 
        8029, 
        8029, 
        8031, 
        8061, 
        8064, 
        8116, 
        8118, 
        8124, 
        8126, 
        8126, 
        8130, 
        8132, 
        8134, 
        8140, 
        8144, 
        8147, 
        8150, 
        8155, 
        8160, 
        8172, 
        8178, 
        8180, 
        8182, 
        8188, 
        8319, 
        8319, 
        8450, 
        8450, 
        8455, 
        8455, 
        8458, 
        8467, 
        8469, 
        8469, 
        8473, 
        8477, 
        8484, 
        8484, 
        8486, 
        8486, 
        8488, 
        8488, 
        8490, 
        8493, 
        8495, 
        8497, 
        8499, 
        8505, 
        8544, 
        8579, 
        12293, 
        12295, 
        12321, 
        12329, 
        12337, 
        12341, 
        12344, 
        12346, 
        12353, 
        12436, 
        12445, 
        12446, 
        12449, 
        12538, 
        12540, 
        12542, 
        12549, 
        12588, 
        12593, 
        12686, 
        12704, 
        12727, 
        13312, 
        13312, 
        19893, 
        19893, 
        19968, 
        19968, 
        40869, 
        40869, 
        40960, 
        42124, 
        44032, 
        44032, 
        55203, 
        55203, 
        63744, 
        64045, 
        64256, 
        64262, 
        64275, 
        64279, 
        64285, 
        64285, 
        64287, 
        64296, 
        64298, 
        64310, 
        64312, 
        64316, 
        64318, 
        64318, 
        64320, 
        64321, 
        64323, 
        64324, 
        64326, 
        64433, 
        64467, 
        64829, 
        64848, 
        64911, 
        64914, 
        64967, 
        65008, 
        65019, 
        65136, 
        65138, 
        65140, 
        65140, 
        65142, 
        65276, 
        65313, 
        65338, 
        65345, 
        65370, 
        65382, 
        65470, 
        65474, 
        65479, 
        65482, 
        65487, 
        65490, 
        65495, 
        65498, 
        65500
    ];
    Unicode.unicodeES3IdentifierPart = [
        768, 
        846, 
        864, 
        866, 
        1155, 
        1158, 
        1425, 
        1441, 
        1443, 
        1465, 
        1467, 
        1469, 
        1471, 
        1471, 
        1473, 
        1474, 
        1476, 
        1476, 
        1611, 
        1621, 
        1632, 
        1641, 
        1648, 
        1648, 
        1750, 
        1756, 
        1759, 
        1764, 
        1767, 
        1768, 
        1770, 
        1773, 
        1776, 
        1785, 
        1809, 
        1809, 
        1840, 
        1866, 
        1958, 
        1968, 
        2305, 
        2307, 
        2364, 
        2364, 
        2366, 
        2381, 
        2385, 
        2388, 
        2402, 
        2403, 
        2406, 
        2415, 
        2433, 
        2435, 
        2492, 
        2492, 
        2494, 
        2500, 
        2503, 
        2504, 
        2507, 
        2509, 
        2519, 
        2519, 
        2530, 
        2531, 
        2534, 
        2543, 
        2562, 
        2562, 
        2620, 
        2620, 
        2622, 
        2626, 
        2631, 
        2632, 
        2635, 
        2637, 
        2662, 
        2673, 
        2689, 
        2691, 
        2748, 
        2748, 
        2750, 
        2757, 
        2759, 
        2761, 
        2763, 
        2765, 
        2790, 
        2799, 
        2817, 
        2819, 
        2876, 
        2876, 
        2878, 
        2883, 
        2887, 
        2888, 
        2891, 
        2893, 
        2902, 
        2903, 
        2918, 
        2927, 
        2946, 
        2947, 
        3006, 
        3010, 
        3014, 
        3016, 
        3018, 
        3021, 
        3031, 
        3031, 
        3047, 
        3055, 
        3073, 
        3075, 
        3134, 
        3140, 
        3142, 
        3144, 
        3146, 
        3149, 
        3157, 
        3158, 
        3174, 
        3183, 
        3202, 
        3203, 
        3262, 
        3268, 
        3270, 
        3272, 
        3274, 
        3277, 
        3285, 
        3286, 
        3302, 
        3311, 
        3330, 
        3331, 
        3390, 
        3395, 
        3398, 
        3400, 
        3402, 
        3405, 
        3415, 
        3415, 
        3430, 
        3439, 
        3458, 
        3459, 
        3530, 
        3530, 
        3535, 
        3540, 
        3542, 
        3542, 
        3544, 
        3551, 
        3570, 
        3571, 
        3633, 
        3633, 
        3636, 
        3642, 
        3655, 
        3662, 
        3664, 
        3673, 
        3761, 
        3761, 
        3764, 
        3769, 
        3771, 
        3772, 
        3784, 
        3789, 
        3792, 
        3801, 
        3864, 
        3865, 
        3872, 
        3881, 
        3893, 
        3893, 
        3895, 
        3895, 
        3897, 
        3897, 
        3902, 
        3903, 
        3953, 
        3972, 
        3974, 
        3975, 
        3984, 
        3991, 
        3993, 
        4028, 
        4038, 
        4038, 
        4140, 
        4146, 
        4150, 
        4153, 
        4160, 
        4169, 
        4182, 
        4185, 
        4969, 
        4977, 
        6068, 
        6099, 
        6112, 
        6121, 
        6160, 
        6169, 
        6313, 
        6313, 
        8255, 
        8256, 
        8400, 
        8412, 
        8417, 
        8417, 
        12330, 
        12335, 
        12441, 
        12442, 
        12539, 
        12539, 
        64286, 
        64286, 
        65056, 
        65059, 
        65075, 
        65076, 
        65101, 
        65103, 
        65296, 
        65305, 
        65343, 
        65343, 
        65381, 
        65381
    ];
    Unicode.unicodeES5IdentifierStart = [
        170, 
        170, 
        181, 
        181, 
        186, 
        186, 
        192, 
        214, 
        216, 
        246, 
        248, 
        705, 
        710, 
        721, 
        736, 
        740, 
        748, 
        748, 
        750, 
        750, 
        880, 
        884, 
        886, 
        887, 
        890, 
        893, 
        902, 
        902, 
        904, 
        906, 
        908, 
        908, 
        910, 
        929, 
        931, 
        1013, 
        1015, 
        1153, 
        1162, 
        1319, 
        1329, 
        1366, 
        1369, 
        1369, 
        1377, 
        1415, 
        1488, 
        1514, 
        1520, 
        1522, 
        1568, 
        1610, 
        1646, 
        1647, 
        1649, 
        1747, 
        1749, 
        1749, 
        1765, 
        1766, 
        1774, 
        1775, 
        1786, 
        1788, 
        1791, 
        1791, 
        1808, 
        1808, 
        1810, 
        1839, 
        1869, 
        1957, 
        1969, 
        1969, 
        1994, 
        2026, 
        2036, 
        2037, 
        2042, 
        2042, 
        2048, 
        2069, 
        2074, 
        2074, 
        2084, 
        2084, 
        2088, 
        2088, 
        2112, 
        2136, 
        2208, 
        2208, 
        2210, 
        2220, 
        2308, 
        2361, 
        2365, 
        2365, 
        2384, 
        2384, 
        2392, 
        2401, 
        2417, 
        2423, 
        2425, 
        2431, 
        2437, 
        2444, 
        2447, 
        2448, 
        2451, 
        2472, 
        2474, 
        2480, 
        2482, 
        2482, 
        2486, 
        2489, 
        2493, 
        2493, 
        2510, 
        2510, 
        2524, 
        2525, 
        2527, 
        2529, 
        2544, 
        2545, 
        2565, 
        2570, 
        2575, 
        2576, 
        2579, 
        2600, 
        2602, 
        2608, 
        2610, 
        2611, 
        2613, 
        2614, 
        2616, 
        2617, 
        2649, 
        2652, 
        2654, 
        2654, 
        2674, 
        2676, 
        2693, 
        2701, 
        2703, 
        2705, 
        2707, 
        2728, 
        2730, 
        2736, 
        2738, 
        2739, 
        2741, 
        2745, 
        2749, 
        2749, 
        2768, 
        2768, 
        2784, 
        2785, 
        2821, 
        2828, 
        2831, 
        2832, 
        2835, 
        2856, 
        2858, 
        2864, 
        2866, 
        2867, 
        2869, 
        2873, 
        2877, 
        2877, 
        2908, 
        2909, 
        2911, 
        2913, 
        2929, 
        2929, 
        2947, 
        2947, 
        2949, 
        2954, 
        2958, 
        2960, 
        2962, 
        2965, 
        2969, 
        2970, 
        2972, 
        2972, 
        2974, 
        2975, 
        2979, 
        2980, 
        2984, 
        2986, 
        2990, 
        3001, 
        3024, 
        3024, 
        3077, 
        3084, 
        3086, 
        3088, 
        3090, 
        3112, 
        3114, 
        3123, 
        3125, 
        3129, 
        3133, 
        3133, 
        3160, 
        3161, 
        3168, 
        3169, 
        3205, 
        3212, 
        3214, 
        3216, 
        3218, 
        3240, 
        3242, 
        3251, 
        3253, 
        3257, 
        3261, 
        3261, 
        3294, 
        3294, 
        3296, 
        3297, 
        3313, 
        3314, 
        3333, 
        3340, 
        3342, 
        3344, 
        3346, 
        3386, 
        3389, 
        3389, 
        3406, 
        3406, 
        3424, 
        3425, 
        3450, 
        3455, 
        3461, 
        3478, 
        3482, 
        3505, 
        3507, 
        3515, 
        3517, 
        3517, 
        3520, 
        3526, 
        3585, 
        3632, 
        3634, 
        3635, 
        3648, 
        3654, 
        3713, 
        3714, 
        3716, 
        3716, 
        3719, 
        3720, 
        3722, 
        3722, 
        3725, 
        3725, 
        3732, 
        3735, 
        3737, 
        3743, 
        3745, 
        3747, 
        3749, 
        3749, 
        3751, 
        3751, 
        3754, 
        3755, 
        3757, 
        3760, 
        3762, 
        3763, 
        3773, 
        3773, 
        3776, 
        3780, 
        3782, 
        3782, 
        3804, 
        3807, 
        3840, 
        3840, 
        3904, 
        3911, 
        3913, 
        3948, 
        3976, 
        3980, 
        4096, 
        4138, 
        4159, 
        4159, 
        4176, 
        4181, 
        4186, 
        4189, 
        4193, 
        4193, 
        4197, 
        4198, 
        4206, 
        4208, 
        4213, 
        4225, 
        4238, 
        4238, 
        4256, 
        4293, 
        4295, 
        4295, 
        4301, 
        4301, 
        4304, 
        4346, 
        4348, 
        4680, 
        4682, 
        4685, 
        4688, 
        4694, 
        4696, 
        4696, 
        4698, 
        4701, 
        4704, 
        4744, 
        4746, 
        4749, 
        4752, 
        4784, 
        4786, 
        4789, 
        4792, 
        4798, 
        4800, 
        4800, 
        4802, 
        4805, 
        4808, 
        4822, 
        4824, 
        4880, 
        4882, 
        4885, 
        4888, 
        4954, 
        4992, 
        5007, 
        5024, 
        5108, 
        5121, 
        5740, 
        5743, 
        5759, 
        5761, 
        5786, 
        5792, 
        5866, 
        5870, 
        5872, 
        5888, 
        5900, 
        5902, 
        5905, 
        5920, 
        5937, 
        5952, 
        5969, 
        5984, 
        5996, 
        5998, 
        6000, 
        6016, 
        6067, 
        6103, 
        6103, 
        6108, 
        6108, 
        6176, 
        6263, 
        6272, 
        6312, 
        6314, 
        6314, 
        6320, 
        6389, 
        6400, 
        6428, 
        6480, 
        6509, 
        6512, 
        6516, 
        6528, 
        6571, 
        6593, 
        6599, 
        6656, 
        6678, 
        6688, 
        6740, 
        6823, 
        6823, 
        6917, 
        6963, 
        6981, 
        6987, 
        7043, 
        7072, 
        7086, 
        7087, 
        7098, 
        7141, 
        7168, 
        7203, 
        7245, 
        7247, 
        7258, 
        7293, 
        7401, 
        7404, 
        7406, 
        7409, 
        7413, 
        7414, 
        7424, 
        7615, 
        7680, 
        7957, 
        7960, 
        7965, 
        7968, 
        8005, 
        8008, 
        8013, 
        8016, 
        8023, 
        8025, 
        8025, 
        8027, 
        8027, 
        8029, 
        8029, 
        8031, 
        8061, 
        8064, 
        8116, 
        8118, 
        8124, 
        8126, 
        8126, 
        8130, 
        8132, 
        8134, 
        8140, 
        8144, 
        8147, 
        8150, 
        8155, 
        8160, 
        8172, 
        8178, 
        8180, 
        8182, 
        8188, 
        8305, 
        8305, 
        8319, 
        8319, 
        8336, 
        8348, 
        8450, 
        8450, 
        8455, 
        8455, 
        8458, 
        8467, 
        8469, 
        8469, 
        8473, 
        8477, 
        8484, 
        8484, 
        8486, 
        8486, 
        8488, 
        8488, 
        8490, 
        8493, 
        8495, 
        8505, 
        8508, 
        8511, 
        8517, 
        8521, 
        8526, 
        8526, 
        8544, 
        8584, 
        11264, 
        11310, 
        11312, 
        11358, 
        11360, 
        11492, 
        11499, 
        11502, 
        11506, 
        11507, 
        11520, 
        11557, 
        11559, 
        11559, 
        11565, 
        11565, 
        11568, 
        11623, 
        11631, 
        11631, 
        11648, 
        11670, 
        11680, 
        11686, 
        11688, 
        11694, 
        11696, 
        11702, 
        11704, 
        11710, 
        11712, 
        11718, 
        11720, 
        11726, 
        11728, 
        11734, 
        11736, 
        11742, 
        11823, 
        11823, 
        12293, 
        12295, 
        12321, 
        12329, 
        12337, 
        12341, 
        12344, 
        12348, 
        12353, 
        12438, 
        12445, 
        12447, 
        12449, 
        12538, 
        12540, 
        12543, 
        12549, 
        12589, 
        12593, 
        12686, 
        12704, 
        12730, 
        12784, 
        12799, 
        13312, 
        13312, 
        19893, 
        19893, 
        19968, 
        19968, 
        40908, 
        40908, 
        40960, 
        42124, 
        42192, 
        42237, 
        42240, 
        42508, 
        42512, 
        42527, 
        42538, 
        42539, 
        42560, 
        42606, 
        42623, 
        42647, 
        42656, 
        42735, 
        42775, 
        42783, 
        42786, 
        42888, 
        42891, 
        42894, 
        42896, 
        42899, 
        42912, 
        42922, 
        43000, 
        43009, 
        43011, 
        43013, 
        43015, 
        43018, 
        43020, 
        43042, 
        43072, 
        43123, 
        43138, 
        43187, 
        43250, 
        43255, 
        43259, 
        43259, 
        43274, 
        43301, 
        43312, 
        43334, 
        43360, 
        43388, 
        43396, 
        43442, 
        43471, 
        43471, 
        43520, 
        43560, 
        43584, 
        43586, 
        43588, 
        43595, 
        43616, 
        43638, 
        43642, 
        43642, 
        43648, 
        43695, 
        43697, 
        43697, 
        43701, 
        43702, 
        43705, 
        43709, 
        43712, 
        43712, 
        43714, 
        43714, 
        43739, 
        43741, 
        43744, 
        43754, 
        43762, 
        43764, 
        43777, 
        43782, 
        43785, 
        43790, 
        43793, 
        43798, 
        43808, 
        43814, 
        43816, 
        43822, 
        43968, 
        44002, 
        44032, 
        44032, 
        55203, 
        55203, 
        55216, 
        55238, 
        55243, 
        55291, 
        63744, 
        64109, 
        64112, 
        64217, 
        64256, 
        64262, 
        64275, 
        64279, 
        64285, 
        64285, 
        64287, 
        64296, 
        64298, 
        64310, 
        64312, 
        64316, 
        64318, 
        64318, 
        64320, 
        64321, 
        64323, 
        64324, 
        64326, 
        64433, 
        64467, 
        64829, 
        64848, 
        64911, 
        64914, 
        64967, 
        65008, 
        65019, 
        65136, 
        65140, 
        65142, 
        65276, 
        65313, 
        65338, 
        65345, 
        65370, 
        65382, 
        65470, 
        65474, 
        65479, 
        65482, 
        65487, 
        65490, 
        65495, 
        65498, 
        65500
    ];
    Unicode.unicodeES5IdentifierPart = [
        768, 
        879, 
        1155, 
        1159, 
        1425, 
        1469, 
        1471, 
        1471, 
        1473, 
        1474, 
        1476, 
        1477, 
        1479, 
        1479, 
        1552, 
        1562, 
        1611, 
        1641, 
        1648, 
        1648, 
        1750, 
        1756, 
        1759, 
        1764, 
        1767, 
        1768, 
        1770, 
        1773, 
        1776, 
        1785, 
        1809, 
        1809, 
        1840, 
        1866, 
        1958, 
        1968, 
        1984, 
        1993, 
        2027, 
        2035, 
        2070, 
        2073, 
        2075, 
        2083, 
        2085, 
        2087, 
        2089, 
        2093, 
        2137, 
        2139, 
        2276, 
        2302, 
        2304, 
        2307, 
        2362, 
        2364, 
        2366, 
        2383, 
        2385, 
        2391, 
        2402, 
        2403, 
        2406, 
        2415, 
        2433, 
        2435, 
        2492, 
        2492, 
        2494, 
        2500, 
        2503, 
        2504, 
        2507, 
        2509, 
        2519, 
        2519, 
        2530, 
        2531, 
        2534, 
        2543, 
        2561, 
        2563, 
        2620, 
        2620, 
        2622, 
        2626, 
        2631, 
        2632, 
        2635, 
        2637, 
        2641, 
        2641, 
        2662, 
        2673, 
        2677, 
        2677, 
        2689, 
        2691, 
        2748, 
        2748, 
        2750, 
        2757, 
        2759, 
        2761, 
        2763, 
        2765, 
        2786, 
        2787, 
        2790, 
        2799, 
        2817, 
        2819, 
        2876, 
        2876, 
        2878, 
        2884, 
        2887, 
        2888, 
        2891, 
        2893, 
        2902, 
        2903, 
        2914, 
        2915, 
        2918, 
        2927, 
        2946, 
        2946, 
        3006, 
        3010, 
        3014, 
        3016, 
        3018, 
        3021, 
        3031, 
        3031, 
        3046, 
        3055, 
        3073, 
        3075, 
        3134, 
        3140, 
        3142, 
        3144, 
        3146, 
        3149, 
        3157, 
        3158, 
        3170, 
        3171, 
        3174, 
        3183, 
        3202, 
        3203, 
        3260, 
        3260, 
        3262, 
        3268, 
        3270, 
        3272, 
        3274, 
        3277, 
        3285, 
        3286, 
        3298, 
        3299, 
        3302, 
        3311, 
        3330, 
        3331, 
        3390, 
        3396, 
        3398, 
        3400, 
        3402, 
        3405, 
        3415, 
        3415, 
        3426, 
        3427, 
        3430, 
        3439, 
        3458, 
        3459, 
        3530, 
        3530, 
        3535, 
        3540, 
        3542, 
        3542, 
        3544, 
        3551, 
        3570, 
        3571, 
        3633, 
        3633, 
        3636, 
        3642, 
        3655, 
        3662, 
        3664, 
        3673, 
        3761, 
        3761, 
        3764, 
        3769, 
        3771, 
        3772, 
        3784, 
        3789, 
        3792, 
        3801, 
        3864, 
        3865, 
        3872, 
        3881, 
        3893, 
        3893, 
        3895, 
        3895, 
        3897, 
        3897, 
        3902, 
        3903, 
        3953, 
        3972, 
        3974, 
        3975, 
        3981, 
        3991, 
        3993, 
        4028, 
        4038, 
        4038, 
        4139, 
        4158, 
        4160, 
        4169, 
        4182, 
        4185, 
        4190, 
        4192, 
        4194, 
        4196, 
        4199, 
        4205, 
        4209, 
        4212, 
        4226, 
        4237, 
        4239, 
        4253, 
        4957, 
        4959, 
        5906, 
        5908, 
        5938, 
        5940, 
        5970, 
        5971, 
        6002, 
        6003, 
        6068, 
        6099, 
        6109, 
        6109, 
        6112, 
        6121, 
        6155, 
        6157, 
        6160, 
        6169, 
        6313, 
        6313, 
        6432, 
        6443, 
        6448, 
        6459, 
        6470, 
        6479, 
        6576, 
        6592, 
        6600, 
        6601, 
        6608, 
        6617, 
        6679, 
        6683, 
        6741, 
        6750, 
        6752, 
        6780, 
        6783, 
        6793, 
        6800, 
        6809, 
        6912, 
        6916, 
        6964, 
        6980, 
        6992, 
        7001, 
        7019, 
        7027, 
        7040, 
        7042, 
        7073, 
        7085, 
        7088, 
        7097, 
        7142, 
        7155, 
        7204, 
        7223, 
        7232, 
        7241, 
        7248, 
        7257, 
        7376, 
        7378, 
        7380, 
        7400, 
        7405, 
        7405, 
        7410, 
        7412, 
        7616, 
        7654, 
        7676, 
        7679, 
        8204, 
        8205, 
        8255, 
        8256, 
        8276, 
        8276, 
        8400, 
        8412, 
        8417, 
        8417, 
        8421, 
        8432, 
        11503, 
        11505, 
        11647, 
        11647, 
        11744, 
        11775, 
        12330, 
        12335, 
        12441, 
        12442, 
        42528, 
        42537, 
        42607, 
        42607, 
        42612, 
        42621, 
        42655, 
        42655, 
        42736, 
        42737, 
        43010, 
        43010, 
        43014, 
        43014, 
        43019, 
        43019, 
        43043, 
        43047, 
        43136, 
        43137, 
        43188, 
        43204, 
        43216, 
        43225, 
        43232, 
        43249, 
        43264, 
        43273, 
        43302, 
        43309, 
        43335, 
        43347, 
        43392, 
        43395, 
        43443, 
        43456, 
        43472, 
        43481, 
        43561, 
        43574, 
        43587, 
        43587, 
        43596, 
        43597, 
        43600, 
        43609, 
        43643, 
        43643, 
        43696, 
        43696, 
        43698, 
        43700, 
        43703, 
        43704, 
        43710, 
        43711, 
        43713, 
        43713, 
        43755, 
        43759, 
        43765, 
        43766, 
        44003, 
        44010, 
        44012, 
        44013, 
        44016, 
        44025, 
        64286, 
        64286, 
        65024, 
        65039, 
        65056, 
        65062, 
        65075, 
        65076, 
        65101, 
        65103, 
        65296, 
        65305, 
        65343, 
        65343
    ];
    Unicode.lookupInUnicodeMap = function lookupInUnicodeMap(code, map) {
        if(code < map[0]) {
            return false;
        }
        var lo = 0;
        var hi = map.length;
        var mid;
        while(lo + 1 < hi) {
            mid = lo + (hi - lo) / 2;
            mid -= mid % 2;
            if(map[mid] <= code && code <= map[mid + 1]) {
                return true;
            }
            if(code < map[mid]) {
                hi = mid;
            } else {
                lo = mid + 2;
            }
        }
        return false;
    }
    Unicode.isIdentifierStart = function isIdentifierStart(code, languageVersion) {
        if(languageVersion === 0 /* EcmaScript3 */ ) {
            return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES3IdentifierStart);
        } else {
            if(languageVersion === 1 /* EcmaScript5 */ ) {
                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES5IdentifierStart);
            } else {
                throw Errors.argumentOutOfRange("languageVersion");
            }
        }
    }
    Unicode.isIdentifierPart = function isIdentifierPart(code, languageVersion) {
        if(languageVersion === 0 /* EcmaScript3 */ ) {
            return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES3IdentifierPart);
        } else {
            if(languageVersion === 1 /* EcmaScript5 */ ) {
                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES5IdentifierPart);
            } else {
                throw Errors.argumentOutOfRange("languageVersion");
            }
        }
    }
    return Unicode;
})();
var Scanner = (function (_super) {
    __extends(Scanner, _super);
    function Scanner(text, languageVersion, stringTable) {
        _super.call(this, 2048, 0, text.length());
        this.text = null;
        this.kind = 0 /* None */ ;
        this.width = 0;
        Scanner.initializeStaticData();
        this.text = text;
        this.stringTable = stringTable;
        this.languageVersion = languageVersion;
    }
    Scanner.isKeywordStartCharacter = [];
    Scanner.isIdentifierStartCharacter = [];
    Scanner.isIdentifierPartCharacter = [];
    Scanner.isNumericLiteralStart = [];
    Scanner.initializeStaticData = function initializeStaticData() {
        if(Scanner.isKeywordStartCharacter.length === 0) {
            Scanner.isKeywordStartCharacter = ArrayUtilities.createArray(127 /* maxAsciiCharacter */ , false);
            Scanner.isIdentifierStartCharacter = ArrayUtilities.createArray(127 /* maxAsciiCharacter */ , false);
            Scanner.isIdentifierPartCharacter = ArrayUtilities.createArray(127 /* maxAsciiCharacter */ , false);
            Scanner.isNumericLiteralStart = ArrayUtilities.createArray(127 /* maxAsciiCharacter */ , false);
            for(var character = 0; character < 127 /* maxAsciiCharacter */ ; character++) {
                if(character >= 97 /* a */  && character <= 122 /* z */ ) {
                    Scanner.isIdentifierStartCharacter[character] = true;
                    Scanner.isIdentifierPartCharacter[character] = true;
                } else {
                    if((character >= 65 /* A */  && character <= 90 /* Z */ ) || character === 95 /* _ */  || character === 36 /* $ */ ) {
                        Scanner.isIdentifierStartCharacter[character] = true;
                        Scanner.isIdentifierPartCharacter[character] = true;
                    } else {
                        if(character >= 48 /* _0 */  && character <= 57 /* _9 */ ) {
                            Scanner.isIdentifierPartCharacter[character] = true;
                            Scanner.isNumericLiteralStart[character] = true;
                        }
                    }
                }
            }
            Scanner.isNumericLiteralStart[46 /* dot */ ] = true;
            for(var keywordKind = SyntaxKind.FirstKeyword; keywordKind <= SyntaxKind.LastKeyword; keywordKind++) {
                var keyword = SyntaxFacts.getText(keywordKind);
                Scanner.isKeywordStartCharacter[keyword.charCodeAt(0)] = true;
            }
        }
    }
    Scanner.prototype.fetchMoreItems = function (argument, sourceIndex, window, destinationIndex, spaceAvailable) {
        var charactersRemaining = this.text.length() - sourceIndex;
        var amountToRead = MathPrototype.min(charactersRemaining, spaceAvailable);
        this.text.copyTo(sourceIndex, window, destinationIndex, amountToRead);
        return amountToRead;
    };
    Scanner.prototype.currentCharCode = function () {
        return this.currentItem(null);
    };
    Scanner.prototype.scan = function (diagnostics, allowRegularExpression) {
        var fullStart = this.absoluteIndex();
        var leadingTriviaInfo = this.scanTriviaInfo(diagnostics, false);
        this.scanSyntaxToken(diagnostics, allowRegularExpression);
        var trailingTriviaInfo = this.scanTriviaInfo(diagnostics, true);
        return Syntax.tokenFromText(this.text, fullStart, this.kind, leadingTriviaInfo, this.width, trailingTriviaInfo);
    };
    Scanner.scanTrivia = function scanTrivia(text, start, length, isTrailing) {
        Debug.assert(length > 0);
        var scanner = new Scanner(text.subText(new TextSpan(start, length)), 1 /* EcmaScript5 */ , null);
        return scanner.scanTrivia(isTrailing);
    }
    Scanner.prototype.scanTrivia = function (isTrailing) {
        var trivia = [];
        while(true) {
            if(!this.isAtEndOfSource()) {
                var ch = this.currentCharCode();
                switch(ch) {
                    case 32 /* space */ :
                    case 9 /* tab */ :
                    case 11 /* verticalTab */ :
                    case 12 /* formFeed */ :
                    case 160 /* nonBreakingSpace */ :
                    case 65279 /* byteOrderMark */ : {
                        trivia.push(this.scanWhitespaceTrivia());
                        continue;

                    }
                    case 47 /* slash */ : {
                        var ch2 = this.peekItemN(1);
                        if(ch2 === 47 /* slash */ ) {
                            trivia.push(this.scanSingleLineCommentTrivia());
                            continue;
                        }
                        if(ch2 === 42 /* asterisk */ ) {
                            trivia.push(this.scanMultiLineCommentTrivia());
                            continue;
                        }
                        throw Errors.invalidOperation();

                    }
                    case 13 /* carriageReturn */ :
                    case 10 /* lineFeed */ :
                    case 8233 /* paragraphSeparator */ :
                    case 8232 /* lineSeparator */ : {
                        trivia.push(this.scanLineTerminatorSequenceTrivia(ch));
                        if(!isTrailing) {
                            continue;
                        }
                        break;

                    }
                    default: {
                        throw Errors.invalidOperation();

                    }
                }
            }
            Debug.assert(trivia.length > 0);
            return Syntax.triviaList(trivia);
        }
    };
    Scanner.prototype.scanTriviaInfo = function (diagnostics, isTrailing) {
        var width = 0;
        var hasComment = false;
        var hasNewLine = false;
        while(true) {
            var ch = this.currentCharCode();
            switch(ch) {
                case 32 /* space */ :
                case 9 /* tab */ :
                case 11 /* verticalTab */ :
                case 12 /* formFeed */ :
                case 160 /* nonBreakingSpace */ :
                case 65279 /* byteOrderMark */ : {
                    this.moveToNextItem();
                    width++;
                    continue;

                }
                case 47 /* slash */ : {
                    var ch2 = this.peekItemN(1);
                    if(ch2 === 47 /* slash */ ) {
                        hasComment = true;
                        width += this.scanSingleLineCommentTriviaLength();
                        continue;
                    }
                    if(ch2 === 42 /* asterisk */ ) {
                        hasComment = true;
                        width += this.scanMultiLineCommentTriviaLength(diagnostics);
                        continue;
                    }
                    break;

                }
                case 13 /* carriageReturn */ :
                case 10 /* lineFeed */ :
                case 8233 /* paragraphSeparator */ :
                case 8232 /* lineSeparator */ : {
                    hasNewLine = true;
                    width += this.scanLineTerminatorSequenceLength(ch);
                    if(!isTrailing) {
                        continue;
                    }
                    break;

                }
            }
            return width | (hasComment ? 67108864 /* TriviaCommentMask */  : 0) | (hasNewLine ? 134217728 /* TriviaNewLineMask */  : 0);
        }
    };
    Scanner.prototype.isNewLineCharacter = function (ch) {
        switch(ch) {
            case 13 /* carriageReturn */ :
            case 10 /* lineFeed */ :
            case 8233 /* paragraphSeparator */ :
            case 8232 /* lineSeparator */ : {
                return true;

            }
            default: {
                return false;

            }
        }
    };
    Scanner.prototype.scanWhitespaceTrivia = function () {
        var absoluteStartIndex = this.getAndPinAbsoluteIndex();
        var width = 0;
        while(true) {
            var ch = this.currentCharCode();
            switch(ch) {
                case 32 /* space */ :
                case 9 /* tab */ :
                case 11 /* verticalTab */ :
                case 12 /* formFeed */ :
                case 160 /* nonBreakingSpace */ :
                case 65279 /* byteOrderMark */ : {
                    this.moveToNextItem();
                    width++;
                    continue;

                }
            }
            break;
        }
        var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, false);
        this.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);
        return Syntax.whitespace(text);
    };
    Scanner.prototype.scanSingleLineCommentTrivia = function () {
        var absoluteStartIndex = this.getAndPinAbsoluteIndex();
        var width = this.scanSingleLineCommentTriviaLength();
        var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, false);
        this.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);
        return Syntax.singleLineComment(text);
    };
    Scanner.prototype.scanSingleLineCommentTriviaLength = function () {
        this.moveToNextItem();
        this.moveToNextItem();
        var width = 2;
        while(true) {
            if(this.isAtEndOfSource() || this.isNewLineCharacter(this.currentCharCode())) {
                return width;
            }
            this.moveToNextItem();
            width++;
        }
    };
    Scanner.prototype.scanMultiLineCommentTrivia = function () {
        var absoluteStartIndex = this.getAndPinAbsoluteIndex();
        var width = this.scanMultiLineCommentTriviaLength(null);
        var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, false);
        this.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);
        return Syntax.multiLineComment(text);
    };
    Scanner.prototype.scanMultiLineCommentTriviaLength = function (diagnostics) {
        this.moveToNextItem();
        this.moveToNextItem();
        var width = 2;
        while(true) {
            if(this.isAtEndOfSource()) {
                if(diagnostics !== null) {
                    diagnostics.push(new SyntaxDiagnostic(this.absoluteIndex(), 0, 10 /* _StarSlash__expected */ , null));
                }
                return width;
            }
            var ch = this.currentCharCode();
            if(ch === 42 /* asterisk */  && this.peekItemN(1) === 47 /* slash */ ) {
                this.moveToNextItem();
                this.moveToNextItem();
                width += 2;
                return width;
            }
            this.moveToNextItem();
            width++;
        }
    };
    Scanner.prototype.scanLineTerminatorSequenceTrivia = function (ch) {
        var absoluteStartIndex = this.getAndPinAbsoluteIndex();
        var width = this.scanLineTerminatorSequenceLength(ch);
        var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, false);
        this.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);
        return Syntax.trivia(5 /* NewLineTrivia */ , text);
    };
    Scanner.prototype.scanLineTerminatorSequenceLength = function (ch) {
        this.moveToNextItem();
        if(ch === 13 /* carriageReturn */  && this.currentCharCode() === 10 /* lineFeed */ ) {
            this.moveToNextItem();
            return 2;
        } else {
            return 1;
        }
    };
    Scanner.prototype.scanSyntaxToken = function (diagnostics, allowRegularExpression) {
        this.kind = 0 /* None */ ;
        this.width = 0;
        if(this.isAtEndOfSource()) {
            this.kind = 118 /* EndOfFileToken */ ;
            return;
        }
        var character = this.currentCharCode();
        switch(character) {
            case 34 /* doubleQuote */ :
            case 39 /* singleQuote */ : {
                return this.scanStringLiteral(diagnostics);

            }
            case 47 /* slash */ : {
                return this.scanSlashToken(allowRegularExpression);

            }
            case 46 /* dot */ : {
                return this.scanDotToken();

            }
            case 45 /* minus */ : {
                return this.scanMinusToken();

            }
            case 33 /* exclamation */ : {
                return this.scanExclamationToken();

            }
            case 61 /* equals */ : {
                return this.scanEqualsToken();

            }
            case 124 /* bar */ : {
                return this.scanBarToken();

            }
            case 42 /* asterisk */ : {
                return this.scanAsteriskToken();

            }
            case 43 /* plus */ : {
                return this.scanPlusToken();

            }
            case 37 /* percent */ : {
                return this.scanPercentToken();

            }
            case 38 /* ampersand */ : {
                return this.scanAmpersandToken();

            }
            case 94 /* caret */ : {
                return this.scanCaretToken();

            }
            case 60 /* lessThan */ : {
                return this.scanLessThanToken();

            }
            case 62 /* greaterThan */ : {
                return this.scanGreaterThanToken();

            }
            case 44 /* comma */ : {
                return this.advanceAndSetTokenKind(76 /* CommaToken */ );

            }
            case 58 /* colon */ : {
                return this.advanceAndSetTokenKind(103 /* ColonToken */ );

            }
            case 59 /* semicolon */ : {
                return this.advanceAndSetTokenKind(75 /* SemicolonToken */ );

            }
            case 126 /* tilde */ : {
                return this.advanceAndSetTokenKind(99 /* TildeToken */ );

            }
            case 40 /* openParen */ : {
                return this.advanceAndSetTokenKind(69 /* OpenParenToken */ );

            }
            case 41 /* closeParen */ : {
                return this.advanceAndSetTokenKind(70 /* CloseParenToken */ );

            }
            case 123 /* openBrace */ : {
                return this.advanceAndSetTokenKind(67 /* OpenBraceToken */ );

            }
            case 125 /* closeBrace */ : {
                return this.advanceAndSetTokenKind(68 /* CloseBraceToken */ );

            }
            case 91 /* openBracket */ : {
                return this.advanceAndSetTokenKind(71 /* OpenBracketToken */ );

            }
            case 93 /* closeBracket */ : {
                return this.advanceAndSetTokenKind(72 /* CloseBracketToken */ );

            }
            case 63 /* question */ : {
                return this.advanceAndSetTokenKind(102 /* QuestionToken */ );

            }
        }
        if(Scanner.isNumericLiteralStart[character]) {
            this.scanNumericLiteral();
            return;
        }
        if(Scanner.isIdentifierStartCharacter[character]) {
            if(this.tryFastScanIdentifierOrKeyword(character)) {
                return;
            }
        }
        if(this.isIdentifierStart(this.peekCharOrUnicodeEscape())) {
            this.slowScanIdentifier(diagnostics);
            return;
        }
        this.scanDefaultCharacter(character, diagnostics);
    };
    Scanner.prototype.isIdentifierStart = function (interpretedChar) {
        if(Scanner.isIdentifierStartCharacter[interpretedChar]) {
            return true;
        }
        return interpretedChar > 127 /* maxAsciiCharacter */  && Unicode.isIdentifierStart(interpretedChar, this.languageVersion);
    };
    Scanner.prototype.isIdentifierPart = function (interpretedChar) {
        if(Scanner.isIdentifierPartCharacter[interpretedChar]) {
            return true;
        }
        return interpretedChar > 127 /* maxAsciiCharacter */  && Unicode.isIdentifierPart(interpretedChar, this.languageVersion);
    };
    Scanner.prototype.tryFastScanIdentifierOrKeyword = function (firstCharacter) {
        var startIndex = this.getAndPinAbsoluteIndex();
        while(true) {
            var character = this.currentCharCode();
            if(Scanner.isIdentifierPartCharacter[character]) {
                this.moveToNextItem();
            } else {
                if(character === 92 /* backslash */  || character > 127 /* maxAsciiCharacter */ ) {
                    this.rewindToPinnedIndex(startIndex);
                    this.releaseAndUnpinAbsoluteIndex(startIndex);
                    return false;
                } else {
                    var endIndex = this.absoluteIndex();
                    this.width = endIndex - startIndex;
                    this.kind = 9 /* IdentifierNameToken */ ;
                    if(Scanner.isKeywordStartCharacter[firstCharacter]) {
                        var offset = startIndex - this.windowAbsoluteStartIndex;
                        this.kind = ScannerUtilities.identifierKind(this.window, offset, endIndex - startIndex);
                    }
                    this.releaseAndUnpinAbsoluteIndex(startIndex);
                    return true;
                }
            }
        }
    };
    Scanner.prototype.slowScanIdentifier = function (diagnostics) {
        var startIndex = this.getAndPinAbsoluteIndex();
        do {
            this.scanCharOrUnicodeEscape(diagnostics);
        }while(this.isIdentifierPart(this.peekCharOrUnicodeEscape()))
        var endIndex = this.absoluteIndex();
        this.width = endIndex - startIndex;
        this.kind = 9 /* IdentifierNameToken */ ;
        this.releaseAndUnpinAbsoluteIndex(startIndex);
    };
    Scanner.prototype.scanNumericLiteral = function () {
        var startIndex = this.getAndPinAbsoluteIndex();
        if(this.isHexNumericLiteral()) {
            this.scanHexNumericLiteral(startIndex);
        } else {
            this.scanDecimalNumericLiteral(startIndex);
        }
        this.releaseAndUnpinAbsoluteIndex(startIndex);
    };
    Scanner.prototype.scanDecimalNumericLiteral = function (startIndex) {
        while(CharacterInfo.isDecimalDigit(this.currentCharCode())) {
            this.moveToNextItem();
        }
        if(this.currentCharCode() === 46 /* dot */ ) {
            this.moveToNextItem();
        }
        while(CharacterInfo.isDecimalDigit(this.currentCharCode())) {
            this.moveToNextItem();
        }
        var ch = this.currentCharCode();
        if(ch === 101 /* e */  || ch === 69 /* E */ ) {
            this.moveToNextItem();
            ch = this.currentCharCode();
            if(ch === 45 /* minus */  || ch === 43 /* plus */ ) {
                if(CharacterInfo.isDecimalDigit(this.peekItemN(1))) {
                    this.moveToNextItem();
                }
            }
        }
        while(CharacterInfo.isDecimalDigit(this.currentCharCode())) {
            this.moveToNextItem();
        }
        var endIndex = this.absoluteIndex();
        this.width = endIndex - startIndex;
        this.kind = 11 /* NumericLiteral */ ;
    };
    Scanner.prototype.scanHexNumericLiteral = function (startIndex) {
        Debug.assert(this.isHexNumericLiteral());
        this.moveToNextItem();
        this.moveToNextItem();
        while(CharacterInfo.isHexDigit(this.currentCharCode())) {
            this.moveToNextItem();
        }
        var endIndex = this.absoluteIndex();
        this.width = endIndex - startIndex;
        this.kind = 11 /* NumericLiteral */ ;
    };
    Scanner.prototype.isHexNumericLiteral = function () {
        if(this.currentCharCode() === 48 /* _0 */ ) {
            var ch = this.peekItemN(1);
            if(ch === 120 /* x */  || ch === 88 /* X */ ) {
                ch = this.peekItemN(2);
                return CharacterInfo.isHexDigit(ch);
            }
        }
        return false;
    };
    Scanner.prototype.advanceAndSetTokenKind = function (kind) {
        this.moveToNextItem();
        this.kind = kind;
    };
    Scanner.prototype.scanGreaterThanToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 80 /* GreaterThanEqualsToken */ ;
        } else {
            if(character === 62 /* greaterThan */ ) {
                this.scanGreaterThanGreaterThanToken();
            } else {
                this.kind = 78 /* GreaterThanToken */ ;
            }
        }
    };
    Scanner.prototype.scanGreaterThanGreaterThanToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 110 /* GreaterThanGreaterThanEqualsToken */ ;
        } else {
            if(character === 62 /* greaterThan */ ) {
                this.scanGreaterThanGreaterThanGreaterThanToken();
            } else {
                this.kind = 93 /* GreaterThanGreaterThanToken */ ;
            }
        }
    };
    Scanner.prototype.scanGreaterThanGreaterThanGreaterThanToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 111 /* GreaterThanGreaterThanGreaterThanEqualsToken */ ;
        } else {
            this.kind = 94 /* GreaterThanGreaterThanGreaterThanToken */ ;
        }
    };
    Scanner.prototype.scanLessThanToken = function () {
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 79 /* LessThanEqualsToken */ ;
        } else {
            if(this.currentCharCode() === 60 /* lessThan */ ) {
                this.moveToNextItem();
                if(this.currentCharCode() === 61 /* equals */ ) {
                    this.moveToNextItem();
                    this.kind = 109 /* LessThanLessThanEqualsToken */ ;
                } else {
                    this.kind = 92 /* LessThanLessThanToken */ ;
                }
            } else {
                this.kind = 77 /* LessThanToken */ ;
            }
        }
    };
    Scanner.prototype.scanBarToken = function () {
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 113 /* BarEqualsToken */ ;
        } else {
            if(this.currentCharCode() === 124 /* bar */ ) {
                this.moveToNextItem();
                this.kind = 101 /* BarBarToken */ ;
            } else {
                this.kind = 96 /* BarToken */ ;
            }
        }
    };
    Scanner.prototype.scanCaretToken = function () {
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 114 /* CaretEqualsToken */ ;
        } else {
            this.kind = 97 /* CaretToken */ ;
        }
    };
    Scanner.prototype.scanAmpersandToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 112 /* AmpersandEqualsToken */ ;
        } else {
            if(this.currentCharCode() === 38 /* ampersand */ ) {
                this.moveToNextItem();
                this.kind = 100 /* AmpersandAmpersandToken */ ;
            } else {
                this.kind = 95 /* AmpersandToken */ ;
            }
        }
    };
    Scanner.prototype.scanPercentToken = function () {
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 108 /* PercentEqualsToken */ ;
        } else {
            this.kind = 89 /* PercentToken */ ;
        }
    };
    Scanner.prototype.scanMinusToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 106 /* MinusEqualsToken */ ;
        } else {
            if(character === 45 /* minus */ ) {
                this.moveToNextItem();
                this.kind = 91 /* MinusMinusToken */ ;
            } else {
                this.kind = 87 /* MinusToken */ ;
            }
        }
    };
    Scanner.prototype.scanPlusToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 105 /* PlusEqualsToken */ ;
        } else {
            if(character === 43 /* plus */ ) {
                this.moveToNextItem();
                this.kind = 90 /* PlusPlusToken */ ;
            } else {
                this.kind = 86 /* PlusToken */ ;
            }
        }
    };
    Scanner.prototype.scanAsteriskToken = function () {
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 107 /* AsteriskEqualsToken */ ;
        } else {
            this.kind = 88 /* AsteriskToken */ ;
        }
    };
    Scanner.prototype.scanEqualsToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            if(this.currentCharCode() === 61 /* equals */ ) {
                this.moveToNextItem();
                this.kind = 84 /* EqualsEqualsEqualsToken */ ;
            } else {
                this.kind = 81 /* EqualsEqualsToken */ ;
            }
        } else {
            if(character === 62 /* greaterThan */ ) {
                this.moveToNextItem();
                this.kind = 82 /* EqualsGreaterThanToken */ ;
            } else {
                this.kind = 104 /* EqualsToken */ ;
            }
        }
    };
    Scanner.prototype.isDotPrefixedNumericLiteral = function () {
        if(this.currentCharCode() === 46 /* dot */ ) {
            var ch = this.peekItemN(1);
            return CharacterInfo.isDecimalDigit(ch);
        }
        return false;
    };
    Scanner.prototype.scanDotToken = function () {
        if(this.isDotPrefixedNumericLiteral()) {
            this.scanNumericLiteral();
            return;
        }
        this.moveToNextItem();
        if(this.currentCharCode() === 46 /* dot */  && this.peekItemN(1) === 46 /* dot */ ) {
            this.moveToNextItem();
            this.moveToNextItem();
            this.kind = 74 /* DotDotDotToken */ ;
        } else {
            this.kind = 73 /* DotToken */ ;
        }
    };
    Scanner.prototype.scanSlashToken = function (allowRegularExpression) {
        if(allowRegularExpression && this.tryScanRegularExpressionToken()) {
            return;
        }
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 116 /* SlashEqualsToken */ ;
        } else {
            this.kind = 115 /* SlashToken */ ;
        }
    };
    Scanner.prototype.tryScanRegularExpressionToken = function () {
        Debug.assert(this.currentCharCode() === 47 /* slash */ );
        var startIndex = this.getAndPinAbsoluteIndex();
        try  {
            this.moveToNextItem();
            var inEscape = false;
            var inCharacterClass = false;
            while(true) {
                var ch = this.currentCharCode();
                if(this.isNewLineCharacter(ch) || this.isAtEndOfSource()) {
                    this.rewindToPinnedIndex(startIndex);
                    return false;
                }
                this.moveToNextItem();
                if(inEscape) {
                    inEscape = false;
                    continue;
                }
                switch(ch) {
                    case 92 /* backslash */ : {
                        inEscape = true;
                        continue;

                    }
                    case 91 /* openBracket */ : {
                        inCharacterClass = true;
                        continue;

                    }
                    case 93 /* closeBracket */ : {
                        inCharacterClass = false;
                        continue;

                    }
                    case 47 /* slash */ : {
                        if(inCharacterClass) {
                            continue;
                        }
                        break;

                    }
                    default: {
                        continue;

                    }
                }
                break;
            }
            while(Scanner.isIdentifierPartCharacter[this.currentCharCode()]) {
                this.moveToNextItem();
            }
            var endIndex = this.absoluteIndex();
            this.kind = 10 /* RegularExpressionLiteral */ ;
            this.width = endIndex - startIndex;
            return true;
        }finally {
            this.releaseAndUnpinAbsoluteIndex(startIndex);
        }
    };
    Scanner.prototype.scanExclamationToken = function () {
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            if(this.currentCharCode() === 61 /* equals */ ) {
                this.moveToNextItem();
                this.kind = 85 /* ExclamationEqualsEqualsToken */ ;
            } else {
                this.kind = 83 /* ExclamationEqualsToken */ ;
            }
        } else {
            this.kind = 98 /* ExclamationToken */ ;
        }
    };
    Scanner.prototype.scanDefaultCharacter = function (character, diagnostics) {
        var position = this.absoluteIndex();
        this.moveToNextItem();
        this.width = 1;
        this.kind = 117 /* ErrorToken */ ;
        var text = String.fromCharCode(character);
        var messageText = this.getErrorMessageText(text);
        diagnostics.push(new SyntaxDiagnostic(position, 1, 1 /* Unexpected_character_0 */ , [
            messageText
        ]));
    };
    Scanner.prototype.getErrorMessageText = function (text) {
        if(text === "\\") {
            return '"\\"';
        }
        return JSON2.stringify(text);
    };
    Scanner.prototype.skipEscapeSequence = function (diagnostics) {
        Debug.assert(this.currentCharCode() === 92 /* backslash */ );
        var rewindPoint = this.getAndPinAbsoluteIndex();
        try  {
            this.moveToNextItem();
            var ch = this.currentCharCode();
            this.moveToNextItem();
            switch(ch) {
                case 120 /* x */ :
                case 117 /* u */ : {
                    this.rewindToPinnedIndex(rewindPoint);
                    var value = this.scanUnicodeOrHexEscape(diagnostics);
                    return;

                }
                case 13 /* carriageReturn */ : {
                    if(this.currentCharCode() === 10 /* lineFeed */ ) {
                        this.moveToNextItem();
                    }
                    return;

                }
                default: {
                    return;

                }
            }
        }finally {
            this.releaseAndUnpinAbsoluteIndex(rewindPoint);
        }
    };
    Scanner.prototype.scanStringLiteral = function (diagnostics) {
        var quoteCharacter = this.currentCharCode();
        Debug.assert(quoteCharacter === 39 /* singleQuote */  || quoteCharacter === 34 /* doubleQuote */ );
        var startIndex = this.absoluteIndex();
        this.moveToNextItem();
        while(true) {
            var ch = this.currentCharCode();
            if(ch === 92 /* backslash */ ) {
                this.skipEscapeSequence(diagnostics);
            } else {
                if(ch === quoteCharacter) {
                    this.moveToNextItem();
                    break;
                } else {
                    if(this.isNewLineCharacter(ch) || this.isAtEndOfSource()) {
                        diagnostics.push(new SyntaxDiagnostic(this.absoluteIndex(), 1, 2 /* Missing_closing_quote_character */ , null));
                        break;
                    } else {
                        this.moveToNextItem();
                    }
                }
            }
        }
        var endIndex = this.absoluteIndex();
        this.width = endIndex - startIndex;
        this.kind = 12 /* StringLiteral */ ;
    };
    Scanner.prototype.isUnicodeOrHexEscape = function (character) {
        return this.isUnicodeEscape(character) || this.isHexEscape(character);
    };
    Scanner.prototype.isUnicodeEscape = function (character) {
        if(character === 92 /* backslash */ ) {
            var ch2 = this.peekItemN(1);
            if(ch2 === 117 /* u */ ) {
                return true;
            }
        }
        return false;
    };
    Scanner.prototype.isHexEscape = function (character) {
        if(character === 92 /* backslash */ ) {
            var ch2 = this.peekItemN(1);
            if(ch2 === 120 /* x */ ) {
                return true;
            }
        }
        return false;
    };
    Scanner.prototype.peekCharOrUnicodeOrHexEscape = function () {
        var character = this.currentCharCode();
        if(this.isUnicodeOrHexEscape(character)) {
            return this.peekUnicodeOrHexEscape();
        } else {
            return character;
        }
    };
    Scanner.prototype.peekCharOrUnicodeEscape = function () {
        var character = this.currentCharCode();
        if(this.isUnicodeEscape(character)) {
            return this.peekUnicodeOrHexEscape();
        } else {
            return character;
        }
    };
    Scanner.prototype.peekUnicodeOrHexEscape = function () {
        var rewindPoint = this.getRewindPoint();
        var ch = this.scanUnicodeOrHexEscape(null);
        this.rewind(rewindPoint);
        this.releaseRewindPoint(rewindPoint);
        return ch;
    };
    Scanner.prototype.scanCharOrUnicodeEscape = function (errors) {
        var ch = this.currentCharCode();
        if(ch === 92 /* backslash */ ) {
            var ch2 = this.peekItemN(1);
            if(ch2 === 117 /* u */ ) {
                return this.scanUnicodeOrHexEscape(errors);
            }
        }
        this.moveToNextItem();
        return ch;
    };
    Scanner.prototype.scanCharOrUnicodeOrHexEscape = function (errors) {
        var ch = this.currentCharCode();
        if(ch === 92 /* backslash */ ) {
            var ch2 = this.peekItemN(1);
            if(ch2 === 117 /* u */  || ch2 === 120 /* x */ ) {
                return this.scanUnicodeOrHexEscape(errors);
            }
        }
        this.moveToNextItem();
        return ch;
    };
    Scanner.prototype.scanUnicodeOrHexEscape = function (errors) {
        var start = this.absoluteIndex();
        var character = this.currentCharCode();
        Debug.assert(character === 92 /* backslash */ );
        this.moveToNextItem();
        character = this.currentCharCode();
        Debug.assert(character === 117 /* u */  || character === 120 /* x */ );
        var intChar = 0;
        this.moveToNextItem();
        var count = character === 117 /* u */  ? 4 : 2;
        for(var i = 0; i < count; i++) {
            var ch2 = this.currentCharCode();
            if(!CharacterInfo.isHexDigit(ch2)) {
                if(errors !== null) {
                    var end = this.absoluteIndex();
                    var info = this.createIllegalEscapeDiagnostic(start, end);
                    errors.push(info);
                }
                break;
            }
            intChar = (intChar << 4) + CharacterInfo.hexValue(ch2);
            this.moveToNextItem();
        }
        return intChar;
    };
    Scanner.prototype.substring = function (start, end, intern) {
        var length = end - start;
        var offset = start - this.windowAbsoluteStartIndex;
        Debug.assert(offset >= 0);
        if(intern) {
            return this.stringTable.addCharArray(this.window, offset, length);
        } else {
            return StringUtilities.fromCharCodeArray(this.window.slice(offset, offset + length));
        }
    };
    Scanner.prototype.createIllegalEscapeDiagnostic = function (start, end) {
        return new SyntaxDiagnostic(start, end - start, 0 /* Unrecognized_escape_sequence */ , null);
    };
    return Scanner;
})(SlidingWindow);
var Syntax;
(function (Syntax) {
    function tokenHashCode(token) {
        var hash = 0;
        hash = Hash.combine(token.leadingTriviaWidth(), hash);
        hash = Hash.combine(token.hasLeadingCommentTrivia ? 1 : 0, hash);
        hash = Hash.combine(token.hasLeadingNewLineTrivia ? 1 : 0, hash);
        hash = Hash.combine(token.kind(), hash);
        hash = Hash.combine(token.keywordKind(), hash);
        hash = Hash.combine(Hash.computeSimple31BitStringHashCode(token.text()), hash);
        hash = Hash.combine(token.trailingTriviaWidth(), hash);
        hash = Hash.combine(token.hasTrailingCommentTrivia ? 1 : 0, hash);
        hash = Hash.combine(token.hasTrailingNewLineTrivia ? 1 : 0, hash);
        return hash;
    }
    Syntax.tokenHashCode = tokenHashCode;
    function realize(token) {
        return new RealizedToken(token.tokenKind, token.keywordKind(), token.leadingTrivia(), token.text(), token.value(), token.trailingTrivia(), token.isMissing());
    }
    Syntax.realize = realize;
    function collectTokenTextElements(token, elements) {
        token.leadingTrivia().collectTextElements(elements);
        elements.push(token.text());
        token.trailingTrivia().collectTextElements(elements);
    }
    Syntax.collectTokenTextElements = collectTokenTextElements;
    function tokenToJSON(token) {
        var result = {
            kind: (SyntaxKind)._map[token.tokenKind]
        };
        if(token.keywordKind() !== 0 /* None */ ) {
            result.keywordKind = (SyntaxKind)._map[token.keywordKind()];
        }
        result.width = token.width();
        if(token.fullWidth() !== token.width()) {
            result.fullWidth = token.fullWidth();
        }
        if(token.isMissing()) {
            result.isMissing = true;
        }
        result.text = token.text();
        if(token.value() !== null) {
            result.valueText = token.value();
        }
        if(token.hasLeadingTrivia()) {
            result.hasLeadingTrivia = true;
        }
        if(token.hasLeadingCommentTrivia()) {
            result.hasLeadingCommentTrivia = true;
        }
        if(token.hasLeadingNewLineTrivia()) {
            result.hasLeadingNewLineTrivia = true;
        }
        if(token.hasTrailingTrivia()) {
            result.hasTrailingTrivia = true;
        }
        if(token.hasTrailingCommentTrivia()) {
            result.hasTrailingCommentTrivia = true;
        }
        if(token.hasTrailingNewLineTrivia()) {
            result.hasTrailingNewLineTrivia = true;
        }
        var trivia = token.leadingTrivia();
        if(trivia.count() > 0) {
            result.leadingTrivia = trivia;
        }
        trivia = token.trailingTrivia();
        if(trivia.count() > 0) {
            result.trailingTrivia = trivia;
        }
        return result;
    }
    Syntax.tokenToJSON = tokenToJSON;
    function value(token) {
        if(token.tokenKind === 9 /* IdentifierNameToken */ ) {
            var text = token.text();
            for(var i = 0; i < text.length; i++) {
                if(!Scanner.isIdentifierPartCharacter[text.charCodeAt(i)]) {
                    return null;
                }
            }
            return text;
        } else {
            if(token.tokenKind === 11 /* NumericLiteral */ ) {
                return null;
            } else {
                if(token.tokenKind === 12 /* StringLiteral */ ) {
                    return null;
                } else {
                    if(token.tokenKind === 10 /* RegularExpressionLiteral */ ) {
                        return null;
                    } else {
                        if(token.tokenKind === 118 /* EndOfFileToken */  || token.tokenKind === 117 /* ErrorToken */ ) {
                            return null;
                        } else {
                            throw Errors.invalidOperation();
                        }
                    }
                }
            }
        }
    }
    Syntax.value = value;
    var EmptyToken = (function () {
        function EmptyToken(kind, keywordKind) {
            this.tokenKind = kind;
            this._keywordKind = keywordKind;
        }
        EmptyToken.prototype.clone = function () {
            return new EmptyToken(this.tokenKind, this._keywordKind);
        };
        EmptyToken.prototype.isToken = function () {
            return true;
        };
        EmptyToken.prototype.isNode = function () {
            return false;
        };
        EmptyToken.prototype.isList = function () {
            return false;
        };
        EmptyToken.prototype.isSeparatedList = function () {
            return false;
        };
        EmptyToken.prototype.isTrivia = function () {
            return false;
        };
        EmptyToken.prototype.isTriviaList = function () {
            return false;
        };
        EmptyToken.prototype.kind = function () {
            return this.tokenKind;
        };
        EmptyToken.prototype.toJSON = function (key) {
            return tokenToJSON(this);
        };
        EmptyToken.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        EmptyToken.prototype.fullWidth = function () {
            return 0;
        };
        EmptyToken.prototype.width = function () {
            return 0;
        };
        EmptyToken.prototype.isMissing = function () {
            return true;
        };
        EmptyToken.prototype.text = function () {
            return "";
        };
        EmptyToken.prototype.fullText = function () {
            return "";
        };
        EmptyToken.prototype.value = function () {
            return null;
        };
        EmptyToken.prototype.hasLeadingTrivia = function () {
            return false;
        };
        EmptyToken.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        EmptyToken.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        EmptyToken.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        EmptyToken.prototype.hasTrailingTrivia = function () {
            return false;
        };
        EmptyToken.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        EmptyToken.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        EmptyToken.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        EmptyToken.prototype.leadingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        EmptyToken.prototype.trailingTrivia = function () {
            return Syntax.emptyTriviaList;
        };
        EmptyToken.prototype.realize = function () {
            return realize(this);
        };
        EmptyToken.prototype.collectTextElements = function (elements) {
            collectTokenTextElements(this, elements);
        };
        EmptyToken.prototype.withLeadingTrivia = function (leadingTrivia) {
            throw Errors.invalidOperation('Can not call on a non-realized token.');
        };
        EmptyToken.prototype.withTrailingTrivia = function (leadingTrivia) {
            throw Errors.invalidOperation('Can not call on a non-realized token.');
        };
        return EmptyToken;
    })();    
    function emptyToken(kind, keywordKind) {
        return new EmptyToken(kind, keywordKind);
    }
    Syntax.emptyToken = emptyToken;
    var RealizedToken = (function () {
        function RealizedToken(tokenKind, keywordKind, leadingTrivia, text, value, trailingTrivia, isMissing) {
            this.tokenKind = tokenKind;
            this._keywordKind = keywordKind;
            this._leadingTrivia = leadingTrivia;
            this._text = text;
            this._value = value;
            this._trailingTrivia = trailingTrivia;
            this._isMissing = isMissing;
        }
        RealizedToken.prototype.clone = function () {
            return new RealizedToken(this.tokenKind, this._keywordKind, this._leadingTrivia, this._text, this._value, this._trailingTrivia, this._isMissing);
        };
        RealizedToken.prototype.kind = function () {
            return this.tokenKind;
        };
        RealizedToken.prototype.toJSON = function (key) {
            return tokenToJSON(this);
        };
        RealizedToken.prototype.isToken = function () {
            return true;
        };
        RealizedToken.prototype.isNode = function () {
            return false;
        };
        RealizedToken.prototype.isList = function () {
            return false;
        };
        RealizedToken.prototype.isSeparatedList = function () {
            return false;
        };
        RealizedToken.prototype.isTrivia = function () {
            return false;
        };
        RealizedToken.prototype.isTriviaList = function () {
            return false;
        };
        RealizedToken.prototype.isMissing = function () {
            return this._isMissing;
        };
        RealizedToken.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        RealizedToken.prototype.fullWidth = function () {
            return this._leadingTrivia.fullWidth() + this.width() + this._trailingTrivia.fullWidth();
        };
        RealizedToken.prototype.width = function () {
            return this.text().length;
        };
        RealizedToken.prototype.text = function () {
            return this._text;
        };
        RealizedToken.prototype.fullText = function () {
            return this._leadingTrivia.fullText() + this.text() + this._trailingTrivia.fullText();
        };
        RealizedToken.prototype.value = function () {
            return this._value;
        };
        RealizedToken.prototype.hasLeadingTrivia = function () {
            return this._leadingTrivia.count() > 0;
        };
        RealizedToken.prototype.hasLeadingCommentTrivia = function () {
            return this._leadingTrivia.hasComment();
        };
        RealizedToken.prototype.hasLeadingNewLineTrivia = function () {
            return this._leadingTrivia.hasNewLine();
        };
        RealizedToken.prototype.leadingTriviaWidth = function () {
            return this._leadingTrivia.fullWidth();
        };
        RealizedToken.prototype.hasTrailingTrivia = function () {
            return this._trailingTrivia.count() > 0;
        };
        RealizedToken.prototype.hasTrailingCommentTrivia = function () {
            return this._trailingTrivia.hasComment();
        };
        RealizedToken.prototype.hasTrailingNewLineTrivia = function () {
            return this._trailingTrivia.hasNewLine();
        };
        RealizedToken.prototype.trailingTriviaWidth = function () {
            return this._trailingTrivia.fullWidth();
        };
        RealizedToken.prototype.leadingTrivia = function () {
            return this._leadingTrivia;
        };
        RealizedToken.prototype.trailingTrivia = function () {
            return this._trailingTrivia;
        };
        RealizedToken.prototype.realize = function () {
            return this;
        };
        RealizedToken.prototype.collectTextElements = function (elements) {
            collectTokenTextElements(this, elements);
        };
        RealizedToken.prototype.withLeadingTrivia = function (leadingTrivia) {
            return new RealizedToken(this.tokenKind, this._keywordKind, leadingTrivia, this._text, this._value, this._trailingTrivia, this._isMissing);
        };
        RealizedToken.prototype.withTrailingTrivia = function (trailingTrivia) {
            return new RealizedToken(this.tokenKind, this._keywordKind, this._leadingTrivia, this._text, this._value, trailingTrivia, this._isMissing);
        };
        return RealizedToken;
    })();    
    function token(kind, info) {
        if (typeof info === "undefined") { info = null; }
        var text = (info !== null && info.text) ? info.text : SyntaxFacts.getText(kind);
        var value = (info !== null && info.value) ? info.value : null;
        var keywordKind = 0 /* None */ ;
        if(SyntaxFacts.isAnyKeyword(kind)) {
            keywordKind = kind;
            kind = 9 /* IdentifierNameToken */ ;
        }
        return new RealizedToken(kind, keywordKind, Syntax.triviaList(info === null ? null : info.leadingTrivia), text, value, Syntax.triviaList(info === null ? null : info.trailingTrivia), false);
    }
    Syntax.token = token;
    function identifier(text, info) {
        if (typeof info === "undefined") { info = null; }
        info = info || {
        };
        info.text = text;
        return token(9 /* IdentifierNameToken */ , info);
    }
    Syntax.identifier = identifier;
})(Syntax || (Syntax = {}));
var SyntaxInformationMap = (function (_super) {
    __extends(SyntaxInformationMap, _super);
    function SyntaxInformationMap() {
        _super.apply(this, arguments);

        this.tokenToInformation = Collections.createHashTable(Collections.DefaultHashTableCapacity, Syntax.tokenHashCode);
        this._previousToken = null;
        this._previousTokenInformation = null;
        this._currentPosition = 0;
    }
    SyntaxInformationMap.create = function create(node) {
        var map = new SyntaxInformationMap();
        node.accept(map);
        return map;
    }
    SyntaxInformationMap.prototype.visitToken = function (token) {
        var tokenInformation = {
            fullStart: this._currentPosition,
            previousToken: this._previousToken,
            nextToken: null
        };
        if(this._previousTokenInformation !== null) {
            this._previousTokenInformation.nextToken = token;
        }
        this._previousToken = token;
        this._currentPosition += token.fullWidth();
        this._previousTokenInformation = tokenInformation;
        this.tokenToInformation.add(token, tokenInformation);
    };
    SyntaxInformationMap.prototype.fullStart = function (token) {
        return this.tokenInformation(token).fullStart;
    };
    SyntaxInformationMap.prototype.start = function (token) {
        return this.fullStart(token) + token.leadingTriviaWidth();
    };
    SyntaxInformationMap.prototype.previousToken = function (token) {
        return this.tokenInformation(token).previousToken;
    };
    SyntaxInformationMap.prototype.tokenInformation = function (token) {
        return this.tokenToInformation.get(token);
    };
    SyntaxInformationMap.prototype.firstTokenInLineContainingToken = function (token) {
        var current = token;
        while(true) {
            var information = this.tokenInformation(current);
            if(this.isFirstTokenInLineWorker(information)) {
                break;
            }
            current = information.previousToken;
        }
        return current;
    };
    SyntaxInformationMap.prototype.isFirstTokenInLine = function (token) {
        var information = this.tokenInformation(token);
        return this.isFirstTokenInLineWorker(information);
    };
    SyntaxInformationMap.prototype.isFirstTokenInLineWorker = function (information) {
        return information.previousToken === null || information.previousToken.hasTrailingNewLineTrivia();
    };
    return SyntaxInformationMap;
})(SyntaxWalker);
var Indentation;
(function (Indentation) {
    function columnForEndOfToken(token, syntaxInformationMap, options) {
        return columnForStartOfToken(token, syntaxInformationMap, options) + token.width();
    }
    Indentation.columnForEndOfToken = columnForEndOfToken;
    function columnForStartOfToken(token, syntaxInformationMap, options) {
        var firstTokenInLine = syntaxInformationMap.firstTokenInLineContainingToken(token);
        var leadingTextInReverse = [];
        var current = token;
        while(current !== firstTokenInLine) {
            current = syntaxInformationMap.previousToken(current);
            if(current === firstTokenInLine) {
                leadingTextInReverse.push(current.trailingTrivia().fullText());
                leadingTextInReverse.push(current.text());
            } else {
                leadingTextInReverse.push(current.fullText());
            }
        }
        collectLeadingTriviaTextToStartOfLine(firstTokenInLine, leadingTextInReverse);
        return columnForLeadingTextInReverse(leadingTextInReverse, options);
    }
    Indentation.columnForStartOfToken = columnForStartOfToken;
    function columnForStartOfFirstTokenInLineContainingToken(token, syntaxInformationMap, options) {
        var firstTokenInLine = syntaxInformationMap.firstTokenInLineContainingToken(token);
        var leadingTextInReverse = [];
        collectLeadingTriviaTextToStartOfLine(firstTokenInLine, leadingTextInReverse);
        return columnForLeadingTextInReverse(leadingTextInReverse, options);
    }
    Indentation.columnForStartOfFirstTokenInLineContainingToken = columnForStartOfFirstTokenInLineContainingToken;
    function collectLeadingTriviaTextToStartOfLine(firstTokenInLine, leadingTextInReverse) {
        var leadingTrivia = firstTokenInLine.leadingTrivia();
        for(var i = leadingTrivia.count() - 1; i >= 0; i--) {
            var trivia = leadingTrivia.syntaxTriviaAt(i);
            if(trivia.kind() === 5 /* NewLineTrivia */ ) {
                break;
            }
            if(trivia.kind() === 6 /* MultiLineCommentTrivia */ ) {
                var lineSegments = Syntax.splitMultiLineCommentTriviaIntoMultipleLines(trivia);
                leadingTextInReverse.push(ArrayUtilities.last(lineSegments));
                if(lineSegments.length > 0) {
                    break;
                }
            }
            leadingTextInReverse.push(trivia.fullText());
        }
    }
    function columnForLeadingTextInReverse(leadingTextInReverse, options) {
        var column = 0;
        for(var i = leadingTextInReverse.length - 1; i >= 0; i--) {
            var text = leadingTextInReverse[i];
            column = columnForPositionInStringWorker(text, text.length, column, options);
        }
        return column;
    }
    function columnForPositionInString(input, position, options) {
        return columnForPositionInStringWorker(input, position, 0, options);
    }
    Indentation.columnForPositionInString = columnForPositionInString;
    function columnForPositionInStringWorker(input, position, startColumn, options) {
        var column = startColumn;
        var spacesPerTab = options.spacesPerTab;
        for(var j = 0; j < position; j++) {
            var ch = input.charCodeAt(j);
            if(ch === 9 /* tab */ ) {
                column += spacesPerTab - column % spacesPerTab;
            } else {
                column++;
            }
        }
        return column;
    }
    function indentationString(column, options) {
        var numberOfTabs = 0;
        var numberOfSpaces = MathPrototype.max(0, column);
        if(options.useTabs) {
            numberOfTabs = column / options.spacesPerTab;
            numberOfSpaces -= numberOfTabs * options.spacesPerTab;
        }
        return StringUtilities.repeat('\t', numberOfTabs) + StringUtilities.repeat(' ', numberOfSpaces);
    }
    Indentation.indentationString = indentationString;
    function indentationTrivia(column, options) {
        return Syntax.whitespace(this.indentationString(column, options));
    }
    Indentation.indentationTrivia = indentationTrivia;
    function firstNonWhitespacePosition(value) {
        for(var i = 0; i < value.length; i++) {
            var ch = value.charCodeAt(i);
            if(!CharacterInfo.isWhitespace(ch)) {
                return i;
            }
        }
        return value.length;
    }
    Indentation.firstNonWhitespacePosition = firstNonWhitespacePosition;
})(Indentation || (Indentation = {}));
var SyntaxDedenter = (function (_super) {
    __extends(SyntaxDedenter, _super);
    function SyntaxDedenter(dedentFirstToken, dedentationAmount, minimumIndent, options) {
        _super.call(this);
        this.dedentationAmount = dedentationAmount;
        this.minimumIndent = minimumIndent;
        this.options = options;
        this.lastTriviaWasNewLine = dedentFirstToken;
    }
    SyntaxDedenter.prototype.abort = function () {
        this.lastTriviaWasNewLine = false;
        this.dedentationAmount = 0;
    };
    SyntaxDedenter.prototype.isAborted = function () {
        return this.dedentationAmount === 0;
    };
    SyntaxDedenter.prototype.visitToken = function (token) {
        if(token.isMissing()) {
            return token;
        }
        var result = token;
        if(this.lastTriviaWasNewLine) {
            result = token.withLeadingTrivia(this.dedentTriviaList(token.leadingTrivia()));
        }
        if(this.isAborted()) {
            return token;
        }
        this.lastTriviaWasNewLine = token.hasTrailingNewLineTrivia();
        return result;
    };
    SyntaxDedenter.prototype.dedentTriviaList = function (triviaList) {
        var result = [];
        var dedentNextWhitespace = true;
        for(var i = 0, n = triviaList.count(); i < n && !this.isAborted(); i++) {
            var trivia = triviaList.syntaxTriviaAt(i);
            var dedentThisTrivia = dedentNextWhitespace;
            dedentNextWhitespace = false;
            if(dedentThisTrivia) {
                if(trivia.kind() === 4 /* WhitespaceTrivia */ ) {
                    var hasFollowingNewLine = (i < triviaList.count() - 1) && triviaList.syntaxTriviaAt(i + 1).kind() === 5 /* NewLineTrivia */ ;
                    result.push(this.dedentWhitespace(trivia, hasFollowingNewLine));
                    continue;
                } else {
                    if(trivia.kind() !== 5 /* NewLineTrivia */ ) {
                        this.abort();
                        break;
                    }
                }
            }
            if(trivia.kind() === 6 /* MultiLineCommentTrivia */ ) {
                result.push(this.dedentMultiLineComment(trivia));
                continue;
            }
            result.push(trivia);
            if(trivia.kind() === 5 /* NewLineTrivia */ ) {
                dedentNextWhitespace = true;
            }
        }
        if(dedentNextWhitespace) {
            this.abort();
        }
        if(this.isAborted()) {
            return triviaList;
        }
        return Syntax.triviaList(result);
    };
    SyntaxDedenter.prototype.dedentSegment = function (segment, hasFollowingNewLineTrivia) {
        var firstNonWhitespacePosition = Indentation.firstNonWhitespacePosition(segment);
        if(firstNonWhitespacePosition === segment.length) {
            if(hasFollowingNewLineTrivia) {
                return "";
            }
        } else {
            if(CharacterInfo.isLineTerminator(segment.charCodeAt(firstNonWhitespacePosition))) {
                return segment.substring(firstNonWhitespacePosition);
            }
        }
        var firstNonWhitespaceColumn = Indentation.columnForPositionInString(segment, firstNonWhitespacePosition, this.options);
        var newFirstNonWhitespaceColumn = MathPrototype.min(firstNonWhitespaceColumn, MathPrototype.max(firstNonWhitespaceColumn - this.dedentationAmount, this.minimumIndent));
        if(newFirstNonWhitespaceColumn === firstNonWhitespaceColumn) {
            this.abort();
            return segment;
        }
        this.dedentationAmount = firstNonWhitespaceColumn - newFirstNonWhitespaceColumn;
        Debug.assert(this.dedentationAmount >= 0);
        var indentationString = Indentation.indentationString(newFirstNonWhitespaceColumn, this.options);
        return indentationString + segment.substring(firstNonWhitespacePosition);
    };
    SyntaxDedenter.prototype.dedentWhitespace = function (trivia, hasFollowingNewLineTrivia) {
        var newIndentation = this.dedentSegment(trivia.fullText(), hasFollowingNewLineTrivia);
        return Syntax.whitespace(newIndentation);
    };
    SyntaxDedenter.prototype.dedentMultiLineComment = function (trivia) {
        var segments = Syntax.splitMultiLineCommentTriviaIntoMultipleLines(trivia);
        if(segments.length === 1) {
            return trivia;
        }
        for(var i = 1; i < segments.length; i++) {
            var segment = segments[i];
            segments[i] = this.dedentSegment(segment, false);
        }
        var result = segments.join("");
        return Syntax.multiLineComment(result);
    };
    SyntaxDedenter.dedentNode = function dedentNode(node, dedentFirstToken, dedentAmount, minimumIndent, options) {
        var dedenter = new SyntaxDedenter(dedentFirstToken, dedentAmount, minimumIndent, options);
        var result = node.accept(dedenter);
        if(dedenter.isAborted()) {
            return node;
        }
        return result;
    }
    return SyntaxDedenter;
})(SyntaxRewriter);
var SyntaxIndenter = (function (_super) {
    __extends(SyntaxIndenter, _super);
    function SyntaxIndenter(indentFirstToken, indentationAmount, options) {
        _super.call(this);
        this.indentationAmount = indentationAmount;
        this.options = options;
        this.lastTriviaWasNewLine = indentFirstToken;
        this.indentationTrivia = Indentation.indentationTrivia(this.indentationAmount, this.options);
    }
    SyntaxIndenter.prototype.visitToken = function (token) {
        if(token.isMissing()) {
            return token;
        }
        var result = token;
        if(this.lastTriviaWasNewLine) {
            result = token.withLeadingTrivia(this.indentTriviaList(token.leadingTrivia()));
        }
        this.lastTriviaWasNewLine = token.hasTrailingNewLineTrivia();
        return result;
    };
    SyntaxIndenter.prototype.indentTriviaList = function (triviaList) {
        var result = [];
        var indentNextTrivia = true;
        for(var i = 0, n = triviaList.count(); i < n; i++) {
            var trivia = triviaList.syntaxTriviaAt(i);
            var indentThisTrivia = indentNextTrivia;
            indentNextTrivia = false;
            switch(trivia.kind()) {
                case 6 /* MultiLineCommentTrivia */ : {
                    this.indentMultiLineComment(trivia, indentThisTrivia, result);
                    continue;

                }
                case 7 /* SingleLineCommentTrivia */ :
                case 8 /* SkippedTextTrivia */ : {
                    this.indentSingleLineOrSkippedText(trivia, indentThisTrivia, result);
                    continue;

                }
                case 4 /* WhitespaceTrivia */ : {
                    this.indentWhitespace(trivia, indentThisTrivia, result);
                    continue;

                }
                case 5 /* NewLineTrivia */ : {
                    result.push(trivia);
                    indentNextTrivia = true;
                    continue;

                }
                default: {
                    throw Errors.invalidOperation();

                }
            }
        }
        if(indentNextTrivia) {
            result.push(this.indentationTrivia);
        }
        return Syntax.triviaList(result);
    };
    SyntaxIndenter.prototype.indentSegment = function (segment) {
        var firstNonWhitespacePosition = Indentation.firstNonWhitespacePosition(segment);
        if(firstNonWhitespacePosition < segment.length && CharacterInfo.isLineTerminator(segment.charCodeAt(firstNonWhitespacePosition))) {
            return segment;
        }
        var firstNonWhitespaceColumn = Indentation.columnForPositionInString(segment, firstNonWhitespacePosition, this.options);
        var newFirstNonWhitespaceColumn = firstNonWhitespaceColumn + this.indentationAmount;
        var indentationString = Indentation.indentationString(newFirstNonWhitespaceColumn, this.options);
        return indentationString + segment.substring(firstNonWhitespacePosition);
    };
    SyntaxIndenter.prototype.indentWhitespace = function (trivia, indentThisTrivia, result) {
        if(!indentThisTrivia) {
            result.push(trivia);
            return;
        }
        var newIndentation = this.indentSegment(trivia.fullText());
        result.push(Syntax.whitespace(newIndentation));
    };
    SyntaxIndenter.prototype.indentSingleLineOrSkippedText = function (trivia, indentThisTrivia, result) {
        if(indentThisTrivia) {
            result.push(this.indentationTrivia);
        }
        result.push(trivia);
    };
    SyntaxIndenter.prototype.indentMultiLineComment = function (trivia, indentThisTrivia, result) {
        if(indentThisTrivia) {
            result.push(this.indentationTrivia);
        }
        var segments = Syntax.splitMultiLineCommentTriviaIntoMultipleLines(trivia);
        for(var i = 1; i < segments.length; i++) {
            segments[i] = this.indentSegment(segments[i]);
        }
        var newText = segments.join("");
        result.push(Syntax.multiLineComment(newText));
    };
    SyntaxIndenter.indentNode = function indentNode(node, indentFirstToken, indentAmount, options) {
        var indenter = new SyntaxIndenter(indentFirstToken, indentAmount, options);
        return node.accept(indenter);
    }
    SyntaxIndenter.indentNodes = function indentNodes(nodes, indentFirstToken, indentAmount, options) {
        var indenter = new SyntaxIndenter(indentFirstToken, indentAmount, options);
        var result = ArrayUtilities.select(nodes, function (n) {
            return n.accept(indenter);
        });
        return result;
    }
    return SyntaxIndenter;
})(SyntaxRewriter);
var SyntaxNodeInvariantsChecker = (function (_super) {
    __extends(SyntaxNodeInvariantsChecker, _super);
    function SyntaxNodeInvariantsChecker() {
        _super.apply(this, arguments);

        this.tokenTable = Collections.createHashTable(Collections.DefaultHashTableCapacity, Syntax.tokenHashCode);
    }
    SyntaxNodeInvariantsChecker.checkInvariants = function checkInvariants(node) {
        node.accept(new SyntaxNodeInvariantsChecker());
    }
    SyntaxNodeInvariantsChecker.prototype.visitToken = function (token) {
        this.tokenTable.add(token, token);
    };
    return SyntaxNodeInvariantsChecker;
})(SyntaxWalker);
var Syntax;
(function (Syntax) {
    function identifierName(text, info) {
        if (typeof info === "undefined") { info = null; }
        return new IdentifierNameSyntax(Syntax.identifier(text));
    }
    Syntax.identifierName = identifierName;
    function callSignature(parameter) {
        return CallSignatureSyntax.create1().withParameterList(ParameterListSyntax.create1().withParameter(parameter));
    }
    Syntax.callSignature = callSignature;
    function trueExpression() {
        return new LiteralExpressionSyntax(165 /* BooleanLiteralExpression */ , Syntax.token(35 /* TrueKeyword */ ));
    }
    Syntax.trueExpression = trueExpression;
    function falseExpression() {
        return new LiteralExpressionSyntax(165 /* BooleanLiteralExpression */ , Syntax.token(22 /* FalseKeyword */ ));
    }
    Syntax.falseExpression = falseExpression;
    function numericLiteralExpression(text) {
        return new LiteralExpressionSyntax(167 /* NumericLiteralExpression */ , Syntax.token(11 /* NumericLiteral */ , {
            text: text
        }));
    }
    Syntax.numericLiteralExpression = numericLiteralExpression;
    function stringLiteralExpression(text) {
        return new LiteralExpressionSyntax(169 /* StringLiteralExpression */ , Syntax.token(12 /* StringLiteral */ , {
            text: text
        }));
    }
    Syntax.stringLiteralExpression = stringLiteralExpression;
    function isSuperInvocationExpression(node) {
        return node.kind() === 210 /* InvocationExpression */  && (node).expression().kind() === 221 /* SuperExpression */ ;
    }
    Syntax.isSuperInvocationExpression = isSuperInvocationExpression;
    function isSuperInvocationExpressionStatement(node) {
        return node.kind() === 141 /* ExpressionStatement */  && isSuperInvocationExpression((node).expression());
    }
    Syntax.isSuperInvocationExpressionStatement = isSuperInvocationExpressionStatement;
    function isSuperMemberAccessExpression(node) {
        return node.kind() === 209 /* MemberAccessExpression */  && (node).expression().kind() === 221 /* SuperExpression */ ;
    }
    Syntax.isSuperMemberAccessExpression = isSuperMemberAccessExpression;
    function isSuperMemberAccessInvocationExpression(node) {
        return node.kind() === 210 /* InvocationExpression */  && isSuperMemberAccessExpression((node).expression());
    }
    Syntax.isSuperMemberAccessInvocationExpression = isSuperMemberAccessInvocationExpression;
    function assignmentExpression(left, token, right) {
        return new BinaryExpressionSyntax(171 /* AssignmentExpression */ , left, token, right);
    }
    Syntax.assignmentExpression = assignmentExpression;
})(Syntax || (Syntax = {}));
var Emitter;
(function (Emitter) {
    var EnsureTokenUniquenessRewriter = (function (_super) {
        __extends(EnsureTokenUniquenessRewriter, _super);
        function EnsureTokenUniquenessRewriter() {
            _super.apply(this, arguments);

            this.tokenTable = Collections.createHashTable(Collections.DefaultHashTableCapacity, Syntax.tokenHashCode);
        }
        EnsureTokenUniquenessRewriter.prototype.visitToken = function (token) {
            if(this.tokenTable.containsKey(token)) {
                return token.clone();
            }
            this.tokenTable.add(token, token);
            return token;
        };
        return EnsureTokenUniquenessRewriter;
    })(SyntaxRewriter);    
    var EmitterImpl = (function (_super) {
        __extends(EmitterImpl, _super);
        function EmitterImpl(syntaxInformationMap, options) {
                _super.call(this);
            this.syntaxInformationMap = syntaxInformationMap;
            this.options = options || FormattingOptions.defaultOptions;
            this.space = Syntax.spaceTriviaList;
            this.newLine = Syntax.triviaList([
                Syntax.carriageReturnLineFeedTrivia
            ]);
        }
        EmitterImpl.prototype.columnForStartOfToken = function (token) {
            return Indentation.columnForStartOfToken(token, this.syntaxInformationMap, this.options);
        };
        EmitterImpl.prototype.columnForEndOfToken = function (token) {
            return Indentation.columnForEndOfToken(token, this.syntaxInformationMap, this.options);
        };
        EmitterImpl.prototype.indentationTrivia = function (column) {
            var triviaArray = column === 0 ? null : [
                Indentation.indentationTrivia(column, this.options)
            ];
            return Syntax.triviaList(triviaArray);
        };
        EmitterImpl.prototype.indentationTriviaForStartOfNode = function (node) {
            var column = this.columnForStartOfToken(node.firstToken());
            return this.indentationTrivia(column);
        };
        EmitterImpl.prototype.changeIndentation = function (node, changeFirstToken, indentAmount) {
            if(indentAmount === 0) {
                return node;
            } else {
                if(indentAmount > 0) {
                    return SyntaxIndenter.indentNode(node, changeFirstToken, indentAmount, this.options);
                } else {
                    return SyntaxDedenter.dedentNode(node, changeFirstToken, -indentAmount, this.options.indentSpaces, this.options);
                }
            }
        };
        EmitterImpl.prototype.withNoTrivia = function (token) {
            return token.withLeadingTrivia(Syntax.emptyTriviaList).withTrailingTrivia(Syntax.emptyTriviaList);
        };
        EmitterImpl.prototype.visitSourceUnit = function (node) {
            return node.withModuleElements(Syntax.list(this.convertModuleElements(node.moduleElements())));
        };
        EmitterImpl.prototype.convertModuleElements = function (list) {
            var moduleElements = [];
            for(var i = 0, n = list.count(); i < n; i++) {
                var moduleElement = list.syntaxNodeAt(i);
                var converted = this.visitNode(moduleElement);
                if(converted !== null) {
                    if(ArrayUtilities.isArray(converted)) {
                        moduleElements.push.apply(moduleElements, converted);
                    } else {
                        moduleElements.push(converted);
                    }
                }
            }
            return moduleElements;
        };
        EmitterImpl.splitModuleName = function splitModuleName(name) {
            var result = [];
            while(true) {
                if(name.kind() === 120 /* IdentifierName */ ) {
                    result.unshift(name);
                    return result;
                } else {
                    if(name.kind() === 121 /* QualifiedName */ ) {
                        var qualifiedName = name;
                        result.unshift(qualifiedName.right());
                        name = qualifiedName.left();
                    } else {
                        throw Errors.invalidOperation();
                    }
                }
            }
        }
        EmitterImpl.prototype.leftmostName = function (name) {
            while(name.kind() === 121 /* QualifiedName */ ) {
                name = (name).left();
            }
            return name;
        };
        EmitterImpl.prototype.rightmostName = function (name) {
            return name.kind() === 121 /* QualifiedName */  ? (name).right() : name;
        };
        EmitterImpl.prototype.exportModuleElement = function (moduleIdentifier, moduleElement, elementIdentifier) {
            elementIdentifier = this.withNoTrivia(elementIdentifier);
            return ExpressionStatementSyntax.create1(new BinaryExpressionSyntax(171 /* AssignmentExpression */ , MemberAccessExpressionSyntax.create1(new IdentifierNameSyntax(this.withNoTrivia(moduleIdentifier)), new IdentifierNameSyntax(elementIdentifier.withTrailingTrivia(Syntax.spaceTriviaList))), Syntax.token(104 /* EqualsToken */ ).withTrailingTrivia(this.space), new IdentifierNameSyntax(elementIdentifier))).withLeadingTrivia(this.indentationTriviaForStartOfNode(moduleElement)).withTrailingTrivia(this.newLine);
        };
        EmitterImpl.prototype.handleExportedModuleElement = function (parentModule, moduleElement, elements) {
            if(moduleElement.kind() === 140 /* VariableStatement */ ) {
                var variableStatement = moduleElement;
                if(variableStatement.exportKeyword() !== null) {
                    var declarators = variableStatement.variableDeclaration().variableDeclarators();
                    for(var i = 0, n = declarators.syntaxNodeCount(); i < n; i++) {
                        var declarator = declarators.syntaxNodeAt(i);
                        elements.push(this.exportModuleElement(parentModule, moduleElement, declarator.identifier()));
                    }
                }
            } else {
                if(moduleElement.kind() === 128 /* FunctionDeclaration */ ) {
                    var functionDeclaration = moduleElement;
                    if(functionDeclaration.exportKeyword() !== null) {
                        elements.push(this.exportModuleElement(parentModule, moduleElement, functionDeclaration.functionSignature().identifier()));
                    }
                } else {
                    if(moduleElement.kind() === 130 /* ClassDeclaration */ ) {
                        var classDeclaration = moduleElement;
                        if(classDeclaration.exportKeyword() !== null) {
                            elements.push(this.exportModuleElement(parentModule, moduleElement, classDeclaration.identifier()));
                        }
                    } else {
                        if(moduleElement.kind() === 129 /* ModuleDeclaration */ ) {
                            var childModule = moduleElement;
                            if(childModule.exportKeyword() !== null) {
                                elements.push(this.exportModuleElement(parentModule, moduleElement, this.leftmostName(childModule.moduleName()).identifier()));
                            }
                        }
                    }
                }
            }
        };
        EmitterImpl.prototype.visitModuleDeclaration = function (node) {
            var _this = this;
            var moduleElements = this.convertModuleElements(node.moduleElements());
            var parentModule = this.rightmostName(node.moduleName()).identifier();
            for(var i = 0, n = node.moduleElements().count(); i < n; i++) {
                this.handleExportedModuleElement(parentModule, node.moduleElements().syntaxNodeAt(i), moduleElements);
            }
            var names = EmitterImpl.splitModuleName(node.moduleName());
            for(var nameIndex = names.length - 1; nameIndex >= 0; nameIndex--) {
                moduleElements = this.convertModuleDeclaration(node, names[nameIndex], moduleElements, nameIndex === 0);
                if(nameIndex > 0) {
                    moduleElements.push(this.exportModuleElement(names[nameIndex - 1].identifier(), node, names[nameIndex].identifier()));
                    moduleElements = ArrayUtilities.select(moduleElements, function (e) {
                        return _this.changeIndentation(e, true, _this.options.indentSpaces);
                    });
                }
            }
            return moduleElements;
        };
        EmitterImpl.prototype.initializedVariable = function (name) {
            return new BinaryExpressionSyntax(184 /* LogicalOrExpression */ , name, Syntax.token(101 /* BarBarToken */ ), ParenthesizedExpressionSyntax.create1(Syntax.assignmentExpression(name, Syntax.token(104 /* EqualsToken */ ), ObjectLiteralExpressionSyntax.create1())));
        };
        EmitterImpl.prototype.convertModuleDeclaration = function (moduleDeclaration, moduleName, moduleElements, outermost) {
            moduleName = moduleName.withLeadingTrivia(Syntax.emptyTriviaList).withTrailingTrivia(Syntax.emptyTriviaList);
            var moduleIdentifier = moduleName.identifier();
            var moduleIndentation = this.indentationTriviaForStartOfNode(moduleDeclaration);
            var leadingTrivia = outermost ? moduleDeclaration.leadingTrivia() : moduleIndentation;
            var variableStatement = VariableStatementSyntax.create1(new VariableDeclarationSyntax(Syntax.token(38 /* VarKeyword */ ).withTrailingTrivia(this.space), Syntax.separatedList([
                VariableDeclaratorSyntax.create(moduleIdentifier)
            ]))).withLeadingTrivia(leadingTrivia).withTrailingTrivia(this.newLine);
            var functionExpression = FunctionExpressionSyntax.create1().withCallSignature(Syntax.callSignature(ParameterSyntax.create(moduleIdentifier)).withTrailingTrivia(this.space)).withBlock(new BlockSyntax(Syntax.token(67 /* OpenBraceToken */ ).withTrailingTrivia(this.newLine), Syntax.list(moduleElements), Syntax.token(68 /* CloseBraceToken */ ).withLeadingTrivia(moduleIndentation)));
            var expressionStatement = ExpressionStatementSyntax.create1(new InvocationExpressionSyntax(ParenthesizedExpressionSyntax.create1(functionExpression), ArgumentListSyntax.create1().withArgument(this.initializedVariable(moduleName)))).withLeadingTrivia(moduleIndentation).withTrailingTrivia(this.newLine);
            return [
                variableStatement, 
                expressionStatement
            ];
        };
        EmitterImpl.prototype.visitExpressionStatement = function (node) {
            var rewritten = _super.prototype.visitExpressionStatement.call(this, node);
            if(rewritten.expression().kind() === 220 /* FunctionExpression */ ) {
                var functionExpression = rewritten.expression();
                if(functionExpression.identifier() === null) {
                    var parenthesizedExpression = ParenthesizedExpressionSyntax.create1(functionExpression.withLeadingTrivia(Syntax.emptyTriviaList)).withLeadingTrivia(functionExpression.leadingTrivia());
                    return rewritten.withExpression(parenthesizedExpression);
                }
            }
            return rewritten;
        };
        EmitterImpl.prototype.visitSimpleArrowFunctionExpression = function (node) {
            return FunctionExpressionSyntax.create1().withCallSignature(Syntax.callSignature(ParameterSyntax.create(this.withNoTrivia(node.identifier()))).withTrailingTrivia(this.space)).withBlock(this.convertArrowFunctionBody(node)).withLeadingTrivia(node.leadingTrivia());
        };
        EmitterImpl.prototype.visitParenthesizedArrowFunctionExpression = function (node) {
            return FunctionExpressionSyntax.create1().withCallSignature(CallSignatureSyntax.create(node.callSignature().parameterList().accept(this))).withBlock(this.convertArrowFunctionBody(node)).withLeadingTrivia(node.leadingTrivia());
        };
        EmitterImpl.prototype.convertArrowFunctionBody = function (arrowFunction) {
            var rewrittenBody = this.visitNode(arrowFunction.body());
            if(rewrittenBody.kind() === 138 /* Block */ ) {
                return rewrittenBody;
            }
            var arrowToken = arrowFunction.equalsGreaterThanToken();
            var returnStatement = new ReturnStatementSyntax(Syntax.token(31 /* ReturnKeyword */ , {
                trailingTrivia: arrowToken.trailingTrivia().toArray()
            }), rewrittenBody, Syntax.token(75 /* SemicolonToken */ )).withTrailingTrivia(this.newLine);
            var difference = 0;
            if(arrowToken.hasTrailingNewLineTrivia()) {
                var arrowFunctionStart = this.columnForStartOfToken(arrowFunction.firstToken());
                difference = -arrowFunctionStart;
            } else {
                var arrowEndColumn = this.columnForEndOfToken(arrowToken);
                var returnKeywordEndColumn = returnStatement.returnKeyword().width();
                difference = returnKeywordEndColumn - arrowEndColumn;
            }
            returnStatement = this.changeIndentation(returnStatement, false, difference);
            returnStatement = this.changeIndentation(returnStatement, true, this.options.indentSpaces);
            var block = new BlockSyntax(Syntax.token(67 /* OpenBraceToken */ ).withTrailingTrivia(this.newLine), Syntax.list([
                returnStatement
            ]), Syntax.token(68 /* CloseBraceToken */ ));
            return this.changeIndentation(block, false, Indentation.columnForStartOfFirstTokenInLineContainingToken(arrowFunction.firstToken(), this.syntaxInformationMap, this.options));
        };
        EmitterImpl.functionSignatureDefaultParameters = function functionSignatureDefaultParameters(signature) {
            return EmitterImpl.parameterListDefaultParameters(signature.parameterList());
        }
        EmitterImpl.parameterListDefaultParameters = function parameterListDefaultParameters(parameterList) {
            return ArrayUtilities.where(parameterList.parameters().toSyntaxNodeArray(), function (p) {
                return p.equalsValueClause() !== null;
            });
        }
        EmitterImpl.prototype.generatePropertyAssignmentStatement = function (parameter) {
            var identifier = this.withNoTrivia(parameter.identifier());
            return ExpressionStatementSyntax.create1(Syntax.assignmentExpression(MemberAccessExpressionSyntax.create1(ThisExpressionSyntax.create1(), new IdentifierNameSyntax(identifier.withTrailingTrivia(Syntax.spaceTriviaList))), Syntax.token(104 /* EqualsToken */ ).withTrailingTrivia(this.space), new IdentifierNameSyntax(identifier))).withTrailingTrivia(this.newLine);
        };
        EmitterImpl.prototype.generateDefaultValueAssignmentStatement = function (parameter) {
            var identifierName = new IdentifierNameSyntax(this.withNoTrivia(parameter.identifier())).withTrailingTrivia(this.space);
            var condition = new BinaryExpressionSyntax(191 /* EqualsExpression */ , new TypeOfExpressionSyntax(Syntax.token(37 /* TypeOfKeyword */ ).withTrailingTrivia(this.space), identifierName), Syntax.token(84 /* EqualsEqualsEqualsToken */ ).withTrailingTrivia(this.space), Syntax.stringLiteralExpression('"undefined"'));
            var assignmentStatement = ExpressionStatementSyntax.create1(Syntax.assignmentExpression(identifierName, Syntax.token(104 /* EqualsToken */ ).withTrailingTrivia(this.space), parameter.equalsValueClause().value().accept(this))).withTrailingTrivia(this.space);
            var block = new BlockSyntax(Syntax.token(67 /* OpenBraceToken */ ).withTrailingTrivia(this.space), Syntax.list([
                assignmentStatement
            ]), Syntax.token(68 /* CloseBraceToken */ )).withTrailingTrivia(this.newLine);
            return new IfStatementSyntax(Syntax.token(26 /* IfKeyword */ ).withTrailingTrivia(this.space), Syntax.token(69 /* OpenParenToken */ ), condition, Syntax.token(70 /* CloseParenToken */ ).withTrailingTrivia(this.space), block, null);
        };
        EmitterImpl.prototype.visitFunctionDeclaration = function (node) {
            var _this = this;
            if(node.block() === null) {
                return null;
            }
            var rewritten = _super.prototype.visitFunctionDeclaration.call(this, node);
            var parametersWithDefaults = EmitterImpl.functionSignatureDefaultParameters(node.functionSignature());
            if(parametersWithDefaults.length !== 0) {
                var defaultValueAssignmentStatements = ArrayUtilities.select(parametersWithDefaults, function (p) {
                    return _this.generateDefaultValueAssignmentStatement(p);
                });
                var statementColumn = this.columnForStartOfToken(node.firstToken()) + this.options.indentSpaces;
                var statements = ArrayUtilities.select(defaultValueAssignmentStatements, function (s) {
                    return _this.changeIndentation(s, true, statementColumn);
                });
                statements.push.apply(statements, rewritten.block().statements().toArray());
                rewritten = rewritten.withBlock(rewritten.block().withStatements(Syntax.list(statements)));
            }
            return rewritten.withExportKeyword(null).withDeclareKeyword(null).withLeadingTrivia(rewritten.leadingTrivia());
        };
        EmitterImpl.prototype.visitParameter = function (node) {
            return ParameterSyntax.create(node.identifier()).withLeadingTrivia(node.leadingTrivia()).withTrailingTrivia(node.trailingTrivia());
        };
        EmitterImpl.prototype.generatePropertyAssignment = function (classDeclaration, static, memberDeclaration) {
            var isStatic = memberDeclaration.staticKeyword() !== null;
            var declarator = memberDeclaration.variableDeclarator();
            if(static !== isStatic || declarator.equalsValueClause() === null) {
                return null;
            }
            var receiver = MemberAccessExpressionSyntax.create1(static ? new IdentifierNameSyntax(this.withNoTrivia(classDeclaration.identifier())) : ThisExpressionSyntax.create1(), new IdentifierNameSyntax(this.withNoTrivia(declarator.identifier()))).withTrailingTrivia(Syntax.spaceTriviaList);
            return ExpressionStatementSyntax.create1(Syntax.assignmentExpression(receiver, Syntax.token(104 /* EqualsToken */ ).withTrailingTrivia(this.space), declarator.equalsValueClause().value().accept(this).withTrailingTrivia(Syntax.emptyTriviaList))).withLeadingTrivia(memberDeclaration.leadingTrivia()).withTrailingTrivia(this.newLine);
        };
        EmitterImpl.prototype.generatePropertyAssignments = function (classDeclaration, static) {
            var result = [];
            for(var i = 0, n = classDeclaration.classElements().count(); i < n; i++) {
                var classElement = classDeclaration.classElements().syntaxNodeAt(i);
                if(classElement.kind() === 134 /* MemberVariableDeclaration */ ) {
                    var statement = this.generatePropertyAssignment(classDeclaration, static, classElement);
                    if(statement !== null) {
                        result.push(statement);
                    }
                }
            }
            return result;
        };
        EmitterImpl.prototype.createDefaultConstructorDeclaration = function (classDeclaration) {
            var classIndentationColumn = this.columnForStartOfToken(classDeclaration.firstToken());
            var statements = [];
            if(classDeclaration.extendsClause() !== null) {
                statements.push(ExpressionStatementSyntax.create1(new InvocationExpressionSyntax(MemberAccessExpressionSyntax.create1(Syntax.identifierName("_super"), Syntax.identifierName("apply")), ArgumentListSyntax.create1().withArguments(Syntax.separatedList([
                    ThisExpressionSyntax.create1(), 
                    Syntax.token(76 /* CommaToken */ ).withTrailingTrivia(this.space), 
                    Syntax.identifierName("arguments")
                ])))).withLeadingTrivia(this.indentationTrivia(classIndentationColumn + this.options.indentSpaces)).withTrailingTrivia(this.newLine));
            }
            statements.push.apply(statements, this.generatePropertyAssignments(classDeclaration, false));
            var indentationTrivia = this.indentationTrivia(classIndentationColumn);
            var functionDeclaration = FunctionDeclarationSyntax.create(Syntax.token(25 /* FunctionKeyword */ ).withLeadingTrivia(indentationTrivia).withTrailingTrivia(this.space), FunctionSignatureSyntax.create1(this.withNoTrivia(classDeclaration.identifier())).withTrailingTrivia(this.space)).withBlock(new BlockSyntax(Syntax.token(67 /* OpenBraceToken */ ).withTrailingTrivia(this.newLine), Syntax.list(statements), Syntax.token(68 /* CloseBraceToken */ ).withLeadingTrivia(indentationTrivia))).withTrailingTrivia(this.newLine);
            return this.changeIndentation(functionDeclaration, true, this.options.indentSpaces);
        };
        EmitterImpl.prototype.convertConstructorDeclaration = function (classDeclaration, constructorDeclaration) {
            var _this = this;
            if(constructorDeclaration.block() === null) {
                return null;
            }
            var identifier = this.withNoTrivia(classDeclaration.identifier());
            var constructorIndentationColumn = this.columnForStartOfToken(constructorDeclaration.firstToken());
            var originalParameterListindentation = this.columnForStartOfToken(constructorDeclaration.parameterList().firstToken());
            var newParameterListIndentation = constructorIndentationColumn + SyntaxFacts.getText(25 /* FunctionKeyword */ ).length + 1 + identifier.width();
            var parameterList = constructorDeclaration.parameterList().accept(this);
            parameterList = this.changeIndentation(parameterList, false, newParameterListIndentation - originalParameterListindentation);
            var functionSignature = FunctionSignatureSyntax.create(identifier, parameterList);
            var block = constructorDeclaration.block();
            var allStatements = block.statements().toArray();
            var normalStatements = ArrayUtilities.select(ArrayUtilities.where(allStatements, function (s) {
                return !Syntax.isSuperInvocationExpressionStatement(s);
            }), function (s) {
                return s.accept(_this);
            });
            var instanceAssignments = this.generatePropertyAssignments(classDeclaration, false);
            for(var i = instanceAssignments.length - 1; i >= 0; i--) {
                normalStatements.unshift(this.changeIndentation(instanceAssignments[i], true, this.options.indentSpaces));
            }
            var parameterPropertyAssignments = ArrayUtilities.select(ArrayUtilities.where(constructorDeclaration.parameterList().parameters().toSyntaxNodeArray(), function (p) {
                return p.publicOrPrivateKeyword() !== null;
            }), function (p) {
                return _this.generatePropertyAssignmentStatement(p);
            });
            for(var i = parameterPropertyAssignments.length - 1; i >= 0; i--) {
                normalStatements.unshift(this.changeIndentation(parameterPropertyAssignments[i], true, this.options.indentSpaces + constructorIndentationColumn));
            }
            var superStatements = ArrayUtilities.select(ArrayUtilities.where(allStatements, function (s) {
                return Syntax.isSuperInvocationExpressionStatement(s);
            }), function (s) {
                return s.accept(_this);
            });
            normalStatements.unshift.apply(normalStatements, superStatements);
            var defaultValueAssignments = ArrayUtilities.select(EmitterImpl.parameterListDefaultParameters(constructorDeclaration.parameterList()), function (p) {
                return _this.generateDefaultValueAssignmentStatement(p);
            });
            for(var i = defaultValueAssignments.length - 1; i >= 0; i--) {
                normalStatements.unshift(this.changeIndentation(defaultValueAssignments[i], true, this.options.indentSpaces + constructorIndentationColumn));
            }
            return FunctionDeclarationSyntax.create(Syntax.token(25 /* FunctionKeyword */ ).withTrailingTrivia(this.space), functionSignature).withBlock(block.withStatements(Syntax.list(normalStatements))).withLeadingTrivia(constructorDeclaration.leadingTrivia());
        };
        EmitterImpl.prototype.convertMemberFunctionDeclaration = function (classDeclaration, functionDeclaration) {
            var _this = this;
            if(functionDeclaration.block() === null) {
                return null;
            }
            var classIdentifier = this.withNoTrivia(classDeclaration.identifier());
            var functionIdentifier = this.withNoTrivia(functionDeclaration.functionSignature().identifier());
            var receiver = new IdentifierNameSyntax(classIdentifier.withLeadingTrivia(functionDeclaration.leadingTrivia()));
            receiver = functionDeclaration.staticKeyword() !== null ? receiver : MemberAccessExpressionSyntax.create1(receiver, Syntax.identifierName("prototype"));
            receiver = MemberAccessExpressionSyntax.create1(receiver, new IdentifierNameSyntax(functionIdentifier.withTrailingTrivia(Syntax.spaceTriviaList)));
            var block = functionDeclaration.block().accept(this);
            var blockTrailingTrivia = block.trailingTrivia();
            block = block.withTrailingTrivia(Syntax.emptyTriviaList);
            var defaultValueAssignments = ArrayUtilities.select(EmitterImpl.functionSignatureDefaultParameters(functionDeclaration.functionSignature()), function (p) {
                return _this.generateDefaultValueAssignmentStatement(p);
            });
            var functionColumn = this.columnForStartOfToken(functionDeclaration.firstToken());
            var blockStatements = block.statements().toArray();
            for(var i = defaultValueAssignments.length - 1; i >= 0; i--) {
                blockStatements.unshift(this.changeIndentation(defaultValueAssignments[i], true, functionColumn + this.options.indentSpaces));
            }
            var callSignatureParameterList = functionDeclaration.functionSignature().parameterList().accept(this);
            if(!callSignatureParameterList.hasTrailingTrivia()) {
                callSignatureParameterList = callSignatureParameterList.withTrailingTrivia(Syntax.spaceTriviaList);
            }
            return ExpressionStatementSyntax.create1(Syntax.assignmentExpression(receiver, Syntax.token(104 /* EqualsToken */ ).withTrailingTrivia(this.space), FunctionExpressionSyntax.create1().withCallSignature(CallSignatureSyntax.create(callSignatureParameterList)).withBlock(block.withStatements(Syntax.list(blockStatements))))).withTrailingTrivia(blockTrailingTrivia);
        };
        EmitterImpl.prototype.convertMemberAccessor = function (memberAccessor) {
            var propertyName = memberAccessor.kind() === 136 /* GetMemberAccessorDeclaration */  ? "get" : "set";
            var parameterList = memberAccessor.parameterList().accept(this);
            if(!parameterList.hasTrailingTrivia()) {
                parameterList = parameterList.withTrailingTrivia(Syntax.spaceTriviaList);
            }
            return new SimplePropertyAssignmentSyntax(Syntax.identifier(propertyName), Syntax.token(103 /* ColonToken */ ).withTrailingTrivia(this.space), FunctionExpressionSyntax.create(Syntax.token(25 /* FunctionKeyword */ ), CallSignatureSyntax.create(parameterList), memberAccessor.block().accept(this).withTrailingTrivia(Syntax.emptyTriviaList))).withLeadingTrivia(this.indentationTriviaForStartOfNode(memberAccessor));
        };
        EmitterImpl.prototype.convertMemberAccessorDeclaration = function (classDeclaration, memberAccessor, classElements) {
            var name = memberAccessor.identifier().value();
            var accessors = [
                memberAccessor
            ];
            for(var i = classElements.length - 1; i >= 0; i--) {
                var element = classElements[i];
                if(element.kind() === 136 /* GetMemberAccessorDeclaration */  || element.kind() === 137 /* SetMemberAccessorDeclaration */ ) {
                    var otherAccessor = element;
                    if(otherAccessor.identifier().value() === name && otherAccessor.block() !== null) {
                        accessors.push(otherAccessor);
                        classElements.splice(i, 1);
                    }
                }
            }
            var arguments = [
                MemberAccessExpressionSyntax.create1(new IdentifierNameSyntax(this.withNoTrivia(classDeclaration.identifier())), Syntax.identifierName("prototype")), 
                Syntax.token(76 /* CommaToken */ ).withTrailingTrivia(this.space), 
                Syntax.stringLiteralExpression('"' + memberAccessor.identifier().text() + '"'), 
                Syntax.token(76 /* CommaToken */ ).withTrailingTrivia(this.space)
            ];
            var propertyAssignments = [];
            for(var i = 0; i < accessors.length; i++) {
                var converted = this.convertMemberAccessor(accessors[i]);
                converted = this.changeIndentation(converted, true, this.options.indentSpaces);
                propertyAssignments.push(converted);
                propertyAssignments.push(Syntax.token(76 /* CommaToken */ ).withTrailingTrivia(this.newLine));
            }
            var accessorColumn = this.columnForStartOfToken(memberAccessor.firstToken());
            var accessorTrivia = this.indentationTrivia(accessorColumn);
            var propertyTrivia = this.indentationTrivia(accessorColumn + this.options.indentSpaces);
            propertyAssignments.push(new SimplePropertyAssignmentSyntax(Syntax.identifier("enumerable"), Syntax.token(103 /* ColonToken */ ).withTrailingTrivia(this.space), Syntax.trueExpression()).withLeadingTrivia(propertyTrivia));
            propertyAssignments.push(Syntax.token(76 /* CommaToken */ ).withTrailingTrivia(this.newLine));
            propertyAssignments.push(new SimplePropertyAssignmentSyntax(Syntax.identifier("configurable"), Syntax.token(103 /* ColonToken */ ).withTrailingTrivia(this.space), Syntax.trueExpression()).withLeadingTrivia(propertyTrivia).withTrailingTrivia(this.newLine));
            arguments.push(new ObjectLiteralExpressionSyntax(Syntax.token(67 /* OpenBraceToken */ ).withTrailingTrivia(this.newLine), Syntax.separatedList(propertyAssignments), Syntax.token(68 /* CloseBraceToken */ ).withLeadingTrivia(accessorTrivia)));
            return ExpressionStatementSyntax.create1(new InvocationExpressionSyntax(MemberAccessExpressionSyntax.create1(Syntax.identifierName("Object"), Syntax.identifierName("defineProperty")), ArgumentListSyntax.create1().withArguments(Syntax.separatedList(arguments)))).withLeadingTrivia(memberAccessor.leadingTrivia()).withTrailingTrivia(this.newLine);
        };
        EmitterImpl.prototype.convertClassElements = function (classDeclaration) {
            var result = [];
            var classElements = classDeclaration.classElements().toArray();
            while(classElements.length > 0) {
                var classElement = classElements.shift();
                var converted = null;
                if(classElement.kind() === 133 /* MemberFunctionDeclaration */ ) {
                    var converted = this.convertMemberFunctionDeclaration(classDeclaration, classElement);
                } else {
                    if(classElement.kind() === 134 /* MemberVariableDeclaration */ ) {
                        var converted = this.generatePropertyAssignment(classDeclaration, true, classElement);
                    } else {
                        if(classElement.kind() === 136 /* GetMemberAccessorDeclaration */  || classElement.kind() === 137 /* SetMemberAccessorDeclaration */ ) {
                            var converted = this.convertMemberAccessorDeclaration(classDeclaration, classElement, classElements);
                        }
                    }
                }
                if(converted !== null) {
                    result.push(converted);
                }
            }
            return result;
        };
        EmitterImpl.prototype.visitClassDeclaration = function (node) {
            var identifier = this.withNoTrivia(node.identifier());
            var statements = [];
            var statementIndentation = this.indentationTrivia(this.options.indentSpaces + this.columnForStartOfToken(node.firstToken()));
            if(node.extendsClause() !== null) {
                statements.push(ExpressionStatementSyntax.create1(new InvocationExpressionSyntax(Syntax.identifierName("__extends"), ArgumentListSyntax.create1().withArguments(Syntax.separatedList([
                    new IdentifierNameSyntax(identifier), 
                    Syntax.token(76 /* CommaToken */ ).withTrailingTrivia(this.space), 
                    Syntax.identifierName("_super")
                ])))).withLeadingTrivia(statementIndentation).withTrailingTrivia(this.newLine));
            }
            var constructorDeclaration = ArrayUtilities.firstOrDefault(node.classElements().toArray(), function (c) {
                return c.kind() === 135 /* ConstructorDeclaration */ ;
            });
            var constructorFunctionDeclaration = constructorDeclaration === null ? this.createDefaultConstructorDeclaration(node) : this.convertConstructorDeclaration(node, constructorDeclaration);
            if(constructorFunctionDeclaration !== null) {
                statements.push(constructorFunctionDeclaration);
            }
            statements.push.apply(statements, this.convertClassElements(node));
            statements.push(new ReturnStatementSyntax(Syntax.token(31 /* ReturnKeyword */ ).withTrailingTrivia(this.space), new IdentifierNameSyntax(identifier), Syntax.token(75 /* SemicolonToken */ )).withLeadingTrivia(statementIndentation).withTrailingTrivia(this.newLine));
            var block = new BlockSyntax(Syntax.token(67 /* OpenBraceToken */ ).withTrailingTrivia(this.newLine), Syntax.list(statements), Syntax.token(68 /* CloseBraceToken */ ).withLeadingTrivia(this.indentationTriviaForStartOfNode(node)));
            var callParameters = [];
            if(node.extendsClause() !== null) {
                callParameters.push(ParameterSyntax.create(Syntax.identifier("_super")));
            }
            var callSignature = CallSignatureSyntax.create(ParameterListSyntax.create1().withParameters(Syntax.separatedList(callParameters))).withTrailingTrivia(this.space);
            var invocationParameters = [];
            if(node.extendsClause() !== null && node.extendsClause().typeNames().count() > 0) {
                invocationParameters.push(node.extendsClause().typeNames().syntaxNodeAt(0).withLeadingTrivia(Syntax.emptyTriviaList).withTrailingTrivia(Syntax.emptyTriviaList));
            }
            var invocationExpression = new InvocationExpressionSyntax(ParenthesizedExpressionSyntax.create1(FunctionExpressionSyntax.create1().withCallSignature(callSignature).withBlock(block)), ArgumentListSyntax.create1().withArguments(Syntax.separatedList(invocationParameters)));
            var variableDeclarator = VariableDeclaratorSyntax.create(identifier.withTrailingTrivia(Syntax.spaceTriviaList)).withEqualsValueClause(new EqualsValueClauseSyntax(Syntax.token(104 /* EqualsToken */ ).withTrailingTrivia(this.space), invocationExpression));
            return VariableStatementSyntax.create1(new VariableDeclarationSyntax(Syntax.token(38 /* VarKeyword */ ).withTrailingTrivia(this.space), Syntax.separatedList([
                variableDeclarator
            ]))).withLeadingTrivia(node.leadingTrivia()).withTrailingTrivia(this.newLine);
        };
        EmitterImpl.prototype.visitVariableDeclarator = function (node) {
            var result = _super.prototype.visitVariableDeclarator.call(this, node);
            if(result.typeAnnotation() === null) {
                return result;
            }
            var newTrailingTrivia = result.identifier().trailingTrivia().concat(result.typeAnnotation().trailingTrivia());
            return result.withTypeAnnotation(null).withIdentifier(result.identifier().withTrailingTrivia(newTrailingTrivia));
        };
        EmitterImpl.prototype.visitCallSignature = function (node) {
            var result = _super.prototype.visitCallSignature.call(this, node);
            if(result.typeAnnotation() === null) {
                return result;
            }
            var newTrailingTrivia = result.parameterList().trailingTrivia().concat(result.typeAnnotation().trailingTrivia());
            return result.withTypeAnnotation(null).withTrailingTrivia(newTrailingTrivia);
        };
        EmitterImpl.prototype.visitCastExpression = function (node) {
            var result = _super.prototype.visitCastExpression.call(this, node);
            var subExpression = result.expression();
            var totalTrivia = result.leadingTrivia().concat(subExpression.leadingTrivia());
            return subExpression.withLeadingTrivia(totalTrivia);
        };
        EmitterImpl.prototype.visitInterfaceDeclaration = function (node) {
            return null;
        };
        EmitterImpl.prototype.generateEnumValueExpression = function (enumDeclaration, variableDeclarator, assignDefaultValues, index) {
            if(variableDeclarator.equalsValueClause() !== null) {
                return variableDeclarator.equalsValueClause().value().withTrailingTrivia(Syntax.emptyTriviaList);
            }
            if(assignDefaultValues) {
                return Syntax.numericLiteralExpression(index.toString());
            }
            var enumIdentifier = this.withNoTrivia(enumDeclaration.identifier());
            var previousVariable = enumDeclaration.variableDeclarators().syntaxNodeAt(index - 1);
            var variableIdentifier = this.withNoTrivia(previousVariable.identifier());
            var receiver = MemberAccessExpressionSyntax.create1(new IdentifierNameSyntax(enumIdentifier), new IdentifierNameSyntax(variableIdentifier.withTrailingTrivia(Syntax.spaceTriviaList)));
            return new BinaryExpressionSyntax(156 /* PlusExpression */ , receiver, Syntax.token(86 /* PlusToken */ ).withTrailingTrivia(this.space), Syntax.numericLiteralExpression("1"));
        };
        EmitterImpl.prototype.generateEnumFunctionExpression = function (node) {
            var identifier = this.withNoTrivia(node.identifier());
            var enumColumn = this.columnForStartOfToken(node.firstToken());
            var statements = [];
            var initIndentationColumn = enumColumn + this.options.indentSpaces;
            var initIndentationTrivia = this.indentationTrivia(initIndentationColumn);
            if(node.variableDeclarators().syntaxNodeCount() > 0) {
                statements.push(VariableStatementSyntax.create1(new VariableDeclarationSyntax(Syntax.token(38 /* VarKeyword */ ).withTrailingTrivia(this.space), Syntax.separatedList([
                    new VariableDeclaratorSyntax(Syntax.identifier("_").withTrailingTrivia(this.space), null, new EqualsValueClauseSyntax(Syntax.token(104 /* EqualsToken */ ).withTrailingTrivia(this.space), new IdentifierNameSyntax(identifier)))
                ]))).withLeadingTrivia(initIndentationTrivia).withTrailingTrivia(this.newLine));
                statements.push(ExpressionStatementSyntax.create1(Syntax.assignmentExpression(MemberAccessExpressionSyntax.create1(Syntax.identifierName("_"), Syntax.identifierName("_map")).withTrailingTrivia(this.space), Syntax.token(104 /* EqualsToken */ ).withTrailingTrivia(this.space), ArrayLiteralExpressionSyntax.create1())).withLeadingTrivia(initIndentationTrivia).withTrailingTrivia(this.newLine));
                var assignDefaultValues = {
                    value: true
                };
                for(var i = 0, n = node.variableDeclarators().syntaxNodeCount(); i < n; i++) {
                    var variableDeclarator = node.variableDeclarators().syntaxNodeAt(i);
                    var variableIdentifier = this.withNoTrivia(variableDeclarator.identifier());
                    assignDefaultValues.value = assignDefaultValues.value && variableDeclarator.equalsValueClause() === null;
                    var innerAssign = Syntax.assignmentExpression(MemberAccessExpressionSyntax.create1(Syntax.identifierName("_"), new IdentifierNameSyntax(variableIdentifier)).withTrailingTrivia(Syntax.spaceTriviaList), Syntax.token(104 /* EqualsToken */ ).withTrailingTrivia(this.space), this.generateEnumValueExpression(node, variableDeclarator, assignDefaultValues.value, i));
                    var elementAccessExpression = ElementAccessExpressionSyntax.create1(MemberAccessExpressionSyntax.create1(Syntax.identifierName("_"), Syntax.identifierName("_map")), innerAssign).withLeadingTrivia(initIndentationTrivia).withTrailingTrivia(this.space);
                    ; ;
                    var outerAssign = Syntax.assignmentExpression(elementAccessExpression, Syntax.token(104 /* EqualsToken */ ).withTrailingTrivia(this.space), Syntax.stringLiteralExpression('"' + variableIdentifier.text() + '"'));
                    var expressionStatement = ExpressionStatementSyntax.create1(outerAssign).withTrailingTrivia(this.newLine);
                    statements.push(expressionStatement);
                }
            }
            var block = new BlockSyntax(Syntax.token(67 /* OpenBraceToken */ ).withTrailingTrivia(this.newLine), Syntax.list(statements), Syntax.token(68 /* CloseBraceToken */ ).withLeadingTrivia(this.indentationTrivia(enumColumn)));
            var parameterList = ParameterListSyntax.create1().withParameter(ParameterSyntax.create1(identifier)).withTrailingTrivia(this.space);
            return FunctionExpressionSyntax.create1().withCallSignature(CallSignatureSyntax.create(parameterList)).withBlock(block);
        };
        EmitterImpl.prototype.visitEnumDeclaration = function (node) {
            var identifier = this.withNoTrivia(node.identifier());
            var variableStatement = VariableStatementSyntax.create1(new VariableDeclarationSyntax(Syntax.token(38 /* VarKeyword */ ).withTrailingTrivia(this.space), Syntax.separatedList([
                VariableDeclaratorSyntax.create(identifier)
            ]))).withLeadingTrivia(node.leadingTrivia()).withTrailingTrivia(this.newLine);
            var expressionStatement = ExpressionStatementSyntax.create1(new InvocationExpressionSyntax(ParenthesizedExpressionSyntax.create1(this.generateEnumFunctionExpression(node)), ArgumentListSyntax.create1().withArgument(this.initializedVariable(new IdentifierNameSyntax(identifier))))).withLeadingTrivia(this.indentationTriviaForStartOfNode(node)).withTrailingTrivia(this.newLine);
            return [
                variableStatement, 
                expressionStatement
            ];
        };
        EmitterImpl.prototype.convertSuperInvocationExpression = function (node) {
            var result = _super.prototype.visitInvocationExpression.call(this, node);
            var expression = MemberAccessExpressionSyntax.create1(Syntax.identifierName("_super"), Syntax.identifierName("call"));
            var arguments = result.argumentList().arguments().toArray();
            if(arguments.length > 0) {
                arguments.unshift(Syntax.token(76 /* CommaToken */ ).withTrailingTrivia(this.space));
            }
            arguments.unshift(ThisExpressionSyntax.create1());
            return result.withExpression(expression).withArgumentList(result.argumentList().withArguments(Syntax.separatedList(arguments))).withLeadingTrivia(result.leadingTrivia());
        };
        EmitterImpl.prototype.convertSuperMemberAccessInvocationExpression = function (node) {
            var result = _super.prototype.visitInvocationExpression.call(this, node);
            var arguments = result.argumentList().arguments().toArray();
            if(arguments.length > 0) {
                arguments.unshift(Syntax.token(76 /* CommaToken */ ).withTrailingTrivia(this.space));
            }
            arguments.unshift(ThisExpressionSyntax.create1());
            var expression = MemberAccessExpressionSyntax.create1(result.expression(), Syntax.identifierName("call"));
            return result.withExpression(expression).withArgumentList(result.argumentList().withArguments(Syntax.separatedList(arguments)));
        };
        EmitterImpl.prototype.visitInvocationExpression = function (node) {
            if(Syntax.isSuperInvocationExpression(node)) {
                return this.convertSuperInvocationExpression(node);
            } else {
                if(Syntax.isSuperMemberAccessInvocationExpression(node)) {
                    return this.convertSuperMemberAccessInvocationExpression(node);
                }
            }
            return _super.prototype.visitInvocationExpression.call(this, node);
        };
        EmitterImpl.prototype.visitMemberAccessExpression = function (node) {
            var result = _super.prototype.visitMemberAccessExpression.call(this, node);
            if(!Syntax.isSuperMemberAccessExpression(result)) {
                return result;
            }
            return MemberAccessExpressionSyntax.create1(MemberAccessExpressionSyntax.create1(Syntax.identifierName("_super"), Syntax.identifierName("prototype")), result.identifierName()).withLeadingTrivia(result.leadingTrivia());
        };
        EmitterImpl.prototype.visitVariableStatement = function (node) {
            var result = _super.prototype.visitVariableStatement.call(this, node);
            return result.withExportKeyword(null).withDeclareKeyword(null).withLeadingTrivia(result.leadingTrivia());
        };
        return EmitterImpl;
    })(SyntaxRewriter);    
    function emit(input, options) {
        if (typeof options === "undefined") { options = null; }
        SyntaxNodeInvariantsChecker.checkInvariants(input);
        if(!input.isTypeScriptSpecific()) {
            return input;
        }
        var output = input.accept(new EmitterImpl(SyntaxInformationMap.create(input), options));
        output = output.accept(new EnsureTokenUniquenessRewriter());
        SyntaxNodeInvariantsChecker.checkInvariants(output);
        Debug.assert(!output.isTypeScriptSpecific());
        return output;
    }
    Emitter.emit = emit;
})(Emitter || (Emitter = {}));
var ParseOptions = (function () {
    function ParseOptions(allowAutomaticSemicolonInsertion) {
        if (typeof allowAutomaticSemicolonInsertion === "undefined") { allowAutomaticSemicolonInsertion = true; }
        this._allowAutomaticSemicolonInsertion = allowAutomaticSemicolonInsertion;
    }
    ParseOptions.prototype.allowAutomaticSemicolonInsertion = function () {
        return this._allowAutomaticSemicolonInsertion;
    };
    return ParseOptions;
})();
var Strings = (function () {
    function Strings() { }
    Strings.module__class__interface__enum__import_or_statement = "module, class, interface, enum, import or statement";
    Strings.constructor__function__accessor_or_variable = "constructor, function, accessor or variable";
    Strings.statement = "statement";
    Strings.case_or_default_clause = "case or default clause";
    Strings.identifier = "identifier";
    Strings.call__construct__index__property_or_function_signature = "call, construct, index, property or function signature";
    Strings.expression = "expression";
    Strings.type_name = "type name";
    Strings.property_or_accessor = "property or accessor";
    Strings.parameter = "parameter";
    return Strings;
})();
var SyntaxTree = (function () {
    function SyntaxTree(sourceUnit, diagnostics) {
        this._sourceUnit = sourceUnit;
        this._diagnostics = diagnostics;
    }
    SyntaxTree.prototype.toJSON = function (key) {
        var result = {
        };
        if(this._diagnostics.length > 0) {
            result._diagnostics = this._diagnostics;
        }
        result._sourceUnit = this._sourceUnit;
        return result;
    };
    SyntaxTree.prototype.sourceUnit = function () {
        return this._sourceUnit;
    };
    SyntaxTree.prototype.diagnostics = function () {
        return this._diagnostics;
    };
    return SyntaxTree;
})();
var TextChangeRange = (function () {
    function TextChangeRange(span, newLength) {
        this._span = null;
        this._newLength = 0;
        if(newLength < 0) {
            throw Errors.argumentOutOfRange("newLength");
        }
        this._span = span;
        this._newLength = newLength;
    }
    TextChangeRange.prototype.span = function () {
        return this._span;
    };
    TextChangeRange.prototype.newLength = function () {
        return this._newLength;
    };
    TextChangeRange.collapse = function collapse(changes) {
        var diff = 0;
        var start = 1073741823 /* Max31BitInteger */ ;
        var end = 0;
        for(var i = 0; i < changes.length; i++) {
            var change = changes[i];
            diff += change.newLength() - change.span().length();
            if(change.span().start() < start) {
                start = change.span().start();
            }
            if(change.span().end() > end) {
                end = change.span().end();
            }
        }
        if(start > end) {
            return null;
        }
        var combined = TextSpan.fromBounds(start, end);
        var newLen = combined.length() + diff;
        return new TextChangeRange(combined, newLen);
    }
    return TextChangeRange;
})();
var Parser;
(function (Parser) {
    var ExpressionPrecedence;
    (function (ExpressionPrecedence) {
        ExpressionPrecedence._map = [];
        ExpressionPrecedence.CommaExpressionPrecedence = 1;
        ExpressionPrecedence.AssignmentExpressionPrecedence = 2;
        ExpressionPrecedence.ConditionalExpressionPrecedence = 3;
        ExpressionPrecedence.ArrowFunctionPrecedence = 4;
        ExpressionPrecedence.LogicalOrExpressionPrecedence = 5;
        ExpressionPrecedence.LogicalAndExpressionPrecedence = 6;
        ExpressionPrecedence.BitwiseOrExpressionPrecedence = 7;
        ExpressionPrecedence.BitwiseExclusiveOrExpressionPrecedence = 8;
        ExpressionPrecedence.BitwiseAndExpressionPrecedence = 9;
        ExpressionPrecedence.EqualityExpressionPrecedence = 10;
        ExpressionPrecedence.RelationalExpressionPrecedence = 11;
        ExpressionPrecedence.ShiftExpressionPrecdence = 12;
        ExpressionPrecedence.AdditiveExpressionPrecedence = 13;
        ExpressionPrecedence.MultiplicativeExpressionPrecedence = 14;
        ExpressionPrecedence.UnaryExpressionPrecedence = 15;
    })(ExpressionPrecedence || (ExpressionPrecedence = {}));
    var ListParsingState;
    (function (ListParsingState) {
        ListParsingState._map = [];
        ListParsingState.SourceUnit_ModuleElements = 1 << 0;
        ListParsingState.ClassDeclaration_ClassElements = 1 << 1;
        ListParsingState.ModuleDeclaration_ModuleElements = 1 << 2;
        ListParsingState.SwitchStatement_SwitchClauses = 1 << 3;
        ListParsingState.SwitchClause_Statements = 1 << 4;
        ListParsingState.Block_Statements = 1 << 5;
        ListParsingState.EnumDeclaration_VariableDeclarators = 1 << 7;
        ListParsingState.ObjectType_TypeMembers = 1 << 8;
        ListParsingState.ExtendsOrImplementsClause_TypeNameList = 1 << 9;
        ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn = 1 << 10;
        ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn = 1 << 11;
        ListParsingState.ArgumentList_AssignmentExpressions = 1 << 12;
        ListParsingState.ObjectLiteralExpression_PropertyAssignments = 1 << 13;
        ListParsingState.ArrayLiteralExpression_AssignmentExpressions = 1 << 14;
        ListParsingState.ParameterList_Parameters = 1 << 15;
        ListParsingState.FirstListParsingState = ListParsingState.SourceUnit_ModuleElements;
        ListParsingState.LastListParsingState = ListParsingState.ParameterList_Parameters;
    })(ListParsingState || (ListParsingState = {}));
    var SkippedTokensAdder = (function (_super) {
        __extends(SkippedTokensAdder, _super);
        function SkippedTokensAdder(skippedTokens) {
                _super.call(this);
            this.skippedTokens = skippedTokens;
        }
        SkippedTokensAdder.prototype.visitNode = function (node) {
            if(this.skippedTokens.length === 0) {
                return node;
            }
            return _super.prototype.visitNode.call(this, node);
        };
        SkippedTokensAdder.prototype.visitList = function (list) {
            if(this.skippedTokens.length === 0) {
                return list;
            }
            return _super.prototype.visitList.call(this, list);
        };
        SkippedTokensAdder.prototype.visitSeparatedList = function (list) {
            if(this.skippedTokens.length === 0) {
                return list;
            }
            return _super.prototype.visitSeparatedList.call(this, list);
        };
        SkippedTokensAdder.prototype.visitToken = function (token) {
            if(this.skippedTokens.length === 0) {
                return token;
            }
            var currentOwner = null;
            var leadingTrivia = null;
            while(this.skippedTokens.length > 0 && this.skippedTokens[0].owningToken === currentOwner) {
                leadingTrivia = leadingTrivia || [];
                var skippedToken = this.skippedTokens.shift().skippedToken;
                this.addSkippedTokenTo(skippedToken, leadingTrivia);
                currentOwner = skippedToken;
            }
            if(leadingTrivia !== null) {
                this.addTriviaTo(token.leadingTrivia(), leadingTrivia);
            }
            currentOwner = token;
            var trailingTrivia = null;
            while(this.skippedTokens.length > 0 && this.skippedTokens[0].owningToken === currentOwner) {
                trailingTrivia = trailingTrivia || token.trailingTrivia().toArray();
                var skippedToken = this.skippedTokens.shift().skippedToken;
                this.addSkippedTokenTo(skippedToken, trailingTrivia);
                currentOwner = skippedToken;
            }
            var result = token;
            if(leadingTrivia !== null) {
                result = result.withLeadingTrivia(Syntax.triviaList(leadingTrivia));
            }
            if(trailingTrivia !== null) {
                result = result.withTrailingTrivia(Syntax.triviaList(trailingTrivia));
            }
            return result;
        };
        SkippedTokensAdder.prototype.addTriviaTo = function (list, array) {
            for(var i = 0, n = list.count(); i < n; i++) {
                array.push(list.syntaxTriviaAt(i));
            }
        };
        SkippedTokensAdder.prototype.addSkippedTokenTo = function (skippedToken, array) {
            Debug.assert(skippedToken.text().length > 0);
            this.addTriviaTo(skippedToken.leadingTrivia(), array);
            array.push(Syntax.trivia(8 /* SkippedTextTrivia */ , skippedToken.text()));
            this.addTriviaTo(skippedToken.trailingTrivia(), array);
        };
        return SkippedTokensAdder;
    })(SyntaxRewriter);    
    var ParserImpl = (function (_super) {
        __extends(ParserImpl, _super);
        function ParserImpl(text, languageVersion, stringTable, oldTree, changes, options) {
            if (typeof languageVersion === "undefined") { languageVersion = 1 /* EcmaScript5 */ ; }
            if (typeof stringTable === "undefined") { stringTable = null; }
            if (typeof oldTree === "undefined") { oldTree = null; }
            if (typeof changes === "undefined") { changes = null; }
            if (typeof options === "undefined") { options = null; }
                _super.call(this, 32, null);
            this.options = null;
            this._currentToken = null;
            this.previousToken = null;
            this.currentTokenFullStart = 0;
            this.tokenDiagnostics = [];
            this.listParsingState = 0;
            this.isInStrictMode = false;
            this.skippedTokens = [];
            this.diagnostics = [];
            this.scanner = new Scanner(text, languageVersion, stringTable);
            this.oldTree = oldTree;
            this.options = options || new ParseOptions();
        }
        ParserImpl.prototype.isIncremental = function () {
            return this.oldTree !== null;
        };
        ParserImpl.prototype.storeAdditionalRewindState = function (rewindPoint) {
            rewindPoint.previousToken = this.previousToken;
            rewindPoint.currentTokenFullStart = this.currentTokenFullStart;
            rewindPoint.isInStrictMode = this.isInStrictMode;
            rewindPoint.diagnosticsCount = this.diagnostics.length;
            rewindPoint.skippedTokensCount = this.skippedTokens.length;
        };
        ParserImpl.prototype.restoreStateFromRewindPoint = function (rewindPoint) {
            this._currentToken = null;
            this.previousToken = rewindPoint.previousToken;
            this.currentTokenFullStart = rewindPoint.currentTokenFullStart;
            this.isInStrictMode = rewindPoint.isInStrictMode;
            this.diagnostics.length = rewindPoint.diagnosticsCount;
            this.skippedTokens.length = rewindPoint.skippedTokensCount;
        };
        ParserImpl.prototype.fetchMoreItems = function (argument, sourceIndex, window, destinationIndex, spaceAvailable) {
            window[destinationIndex] = this.scanner.scan(this.tokenDiagnostics, argument);
            return 1;
        };
        ParserImpl.prototype.currentTokenStart = function () {
            return this.currentTokenFullStart + this.currentToken().leadingTriviaWidth();
        };
        ParserImpl.prototype.previousTokenStart = function () {
            if(this.previousToken === null) {
                return 0;
            }
            return this.currentTokenFullStart - this.previousToken.fullWidth() + this.previousToken.leadingTriviaWidth();
        };
        ParserImpl.prototype.previousTokenEnd = function () {
            if(this.previousToken === null) {
                return 0;
            }
            return this.previousTokenStart() + this.previousToken.width();
        };
        ParserImpl.prototype.currentToken = function () {
            var result = this._currentToken;
            if(result === null) {
                result = this.currentItem(false);
                this._currentToken = result;
            }
            return result;
        };
        ParserImpl.prototype.currentTokenAllowingRegularExpression = function () {
            Debug.assert(this._currentToken === null);
            var result = this.currentItem(true);
            this._currentToken = result;
            return result;
        };
        ParserImpl.prototype.peekTokenN = function (n) {
            return this.peekItemN(n);
        };
        ParserImpl.prototype.eatAnyToken = function () {
            var token = this.currentToken();
            this.moveToNextToken();
            return token;
        };
        ParserImpl.prototype.moveToNextToken = function () {
            this.currentTokenFullStart += this._currentToken.fullWidth();
            this.previousToken = this._currentToken;
            this._currentToken = null;
            this.moveToNextItem();
        };
        ParserImpl.prototype.canEatAutomaticSemicolon = function (allowWithoutNewLine) {
            var token = this.currentToken();
            if(token.tokenKind === 118 /* EndOfFileToken */ ) {
                return true;
            }
            if(token.tokenKind === 68 /* CloseBraceToken */ ) {
                return true;
            }
            if(allowWithoutNewLine) {
                return true;
            }
            if(this.previousToken !== null && this.previousToken.hasTrailingNewLineTrivia()) {
                return true;
            }
            return false;
        };
        ParserImpl.prototype.canEatExplicitOrAutomaticSemicolon = function (allowWithoutNewline) {
            var token = this.currentToken();
            if(token.tokenKind === 75 /* SemicolonToken */ ) {
                return true;
            }
            return this.canEatAutomaticSemicolon(allowWithoutNewline);
        };
        ParserImpl.prototype.eatExplicitOrAutomaticSemicolon = function (allowWithoutNewline) {
            var token = this.currentToken();
            if(token.tokenKind === 75 /* SemicolonToken */ ) {
                return this.eatToken(75 /* SemicolonToken */ );
            }
            if(this.canEatAutomaticSemicolon(allowWithoutNewline)) {
                var semicolonToken = Syntax.emptyToken(75 /* SemicolonToken */ , 0 /* None */ );
                if(!this.options.allowAutomaticSemicolonInsertion()) {
                    this.addDiagnostic(new SyntaxDiagnostic(this.previousTokenEnd(), 0, 7 /* Automatic_semicolon_insertion_not_allowed */ , null));
                }
                return semicolonToken;
            }
            return this.eatToken(75 /* SemicolonToken */ );
        };
        ParserImpl.prototype.eatToken = function (kind) {
            var token = this.currentToken();
            if(token.tokenKind === kind) {
                this.moveToNextToken();
                return token;
            }
            return this.createMissingToken(kind, 0 /* None */ , token);
        };
        ParserImpl.prototype.tryEatToken = function (kind) {
            if(this.currentToken().tokenKind === kind) {
                return this.eatToken(kind);
            }
            return null;
        };
        ParserImpl.prototype.tryEatKeyword = function (kind) {
            if(this.currentToken().keywordKind() === kind) {
                return this.eatKeyword(kind);
            }
            return null;
        };
        ParserImpl.prototype.eatKeyword = function (kind) {
            Debug.assert(SyntaxFacts.isTokenKind(kind));
            var token = this.currentToken();
            if(token.keywordKind() === kind) {
                this.moveToNextToken();
                return token;
            }
            return this.createMissingToken(9 /* IdentifierNameToken */ , kind, token);
        };
        ParserImpl.prototype.eatIdentifierNameToken = function () {
            var token = this.currentToken();
            if(token.tokenKind === 9 /* IdentifierNameToken */ ) {
                this.moveToNextToken();
                return token;
            }
            return this.createMissingToken(9 /* IdentifierNameToken */ , 0 /* None */ , token);
        };
        ParserImpl.prototype.eatIdentifierToken = function () {
            var token = this.currentToken();
            if(token.tokenKind === 9 /* IdentifierNameToken */ ) {
                if(this.isKeyword(token.keywordKind())) {
                    return this.createMissingToken(9 /* IdentifierNameToken */ , 0 /* None */ , token);
                }
                this.moveToNextToken();
                return token;
            }
            return this.createMissingToken(9 /* IdentifierNameToken */ , 0 /* None */ , token);
        };
        ParserImpl.prototype.isIdentifier = function (token) {
            return token.tokenKind === 9 /* IdentifierNameToken */  && !this.isKeyword(token.keywordKind());
        };
        ParserImpl.prototype.isKeyword = function (kind) {
            if(SyntaxFacts.isStandardKeyword(kind) || SyntaxFacts.isFutureReservedKeyword(kind)) {
                return true;
            }
            if(this.isInStrictMode && SyntaxFacts.isFutureReservedStrictKeyword(kind)) {
                return true;
            }
            return false;
        };
        ParserImpl.prototype.createMissingToken = function (expectedKind, expectedKeywordKind, actual) {
            var diagnostic = this.getExpectedTokenDiagnostic(expectedKind, expectedKeywordKind, actual);
            this.addDiagnostic(diagnostic);
            return Syntax.emptyToken(expectedKind, expectedKeywordKind);
        };
        ParserImpl.prototype.getExpectedTokenDiagnostic = function (expectedKind, expectedKeywordKind, actual) {
            var token = this.currentToken();
            if(expectedKind === 9 /* IdentifierNameToken */ ) {
                if(SyntaxFacts.isAnyKeyword(expectedKeywordKind)) {
                    return new SyntaxDiagnostic(this.currentTokenStart(), token.width(), 5 /* _0_expected */ , [
                        SyntaxFacts.getText(expectedKeywordKind)
                    ]);
                } else {
                    if(actual !== null && SyntaxFacts.isAnyKeyword(actual.keywordKind())) {
                        return new SyntaxDiagnostic(this.currentTokenStart(), token.width(), 6 /* Identifier_expected__0_is_a_keyword */ , [
                            SyntaxFacts.getText(actual.keywordKind())
                        ]);
                    } else {
                        return new SyntaxDiagnostic(this.currentTokenStart(), token.width(), 3 /* Identifier_expected */ , null);
                    }
                }
            }
            if(SyntaxFacts.isAnyPunctuation(expectedKind)) {
                return new SyntaxDiagnostic(this.currentTokenStart(), token.width(), 5 /* _0_expected */ , [
                    SyntaxFacts.getText(expectedKind)
                ]);
            }
            throw Errors.notYetImplemented();
        };
        ParserImpl.getPrecedence = function getPrecedence(expressionKind) {
            switch(expressionKind) {
                case 170 /* CommaExpression */ : {
                    return 1 /* CommaExpressionPrecedence */ ;

                }
                case 171 /* AssignmentExpression */ :
                case 172 /* AddAssignmentExpression */ :
                case 173 /* SubtractAssignmentExpression */ :
                case 174 /* MultiplyAssignmentExpression */ :
                case 175 /* DivideAssignmentExpression */ :
                case 176 /* ModuloAssignmentExpression */ :
                case 177 /* AndAssignmentExpression */ :
                case 178 /* ExclusiveOrAssignmentExpression */ :
                case 179 /* OrAssignmentExpression */ :
                case 180 /* LeftShiftAssignmentExpression */ :
                case 181 /* SignedRightShiftAssignmentExpression */ :
                case 182 /* UnsignedRightShiftAssignmentExpression */ : {
                    return 2 /* AssignmentExpressionPrecedence */ ;

                }
                case 183 /* ConditionalExpression */ : {
                    return 3 /* ConditionalExpressionPrecedence */ ;

                }
                case 184 /* LogicalOrExpression */ : {
                    return 5 /* LogicalOrExpressionPrecedence */ ;

                }
                case 185 /* LogicalAndExpression */ : {
                    return 6 /* LogicalAndExpressionPrecedence */ ;

                }
                case 186 /* BitwiseOrExpression */ : {
                    return 7 /* BitwiseOrExpressionPrecedence */ ;

                }
                case 187 /* BitwiseExclusiveOrExpression */ : {
                    return 8 /* BitwiseExclusiveOrExpressionPrecedence */ ;

                }
                case 188 /* BitwiseAndExpression */ : {
                    return 9 /* BitwiseAndExpressionPrecedence */ ;

                }
                case 189 /* EqualsWithTypeConversionExpression */ :
                case 190 /* NotEqualsWithTypeConversionExpression */ :
                case 191 /* EqualsExpression */ :
                case 192 /* NotEqualsExpression */ : {
                    return 10 /* EqualityExpressionPrecedence */ ;

                }
                case 193 /* LessThanExpression */ :
                case 194 /* GreaterThanExpression */ :
                case 195 /* LessThanOrEqualExpression */ :
                case 196 /* GreaterThanOrEqualExpression */ :
                case 197 /* InstanceOfExpression */ :
                case 198 /* InExpression */ : {
                    return 11 /* RelationalExpressionPrecedence */ ;

                }
                case 199 /* LeftShiftExpression */ :
                case 200 /* SignedRightShiftExpression */ :
                case 201 /* UnsignedRightShiftExpression */ : {
                    return 12 /* ShiftExpressionPrecdence */ ;

                }
                case 205 /* AddExpression */ :
                case 206 /* SubtractExpression */ : {
                    return 13 /* AdditiveExpressionPrecedence */ ;

                }
                case 202 /* MultiplyExpression */ :
                case 203 /* DivideExpression */ :
                case 204 /* ModuloExpression */ : {
                    return 14 /* MultiplicativeExpressionPrecedence */ ;

                }
                case 156 /* PlusExpression */ :
                case 157 /* NegateExpression */ :
                case 158 /* BitwiseNotExpression */ :
                case 159 /* LogicalNotExpression */ :
                case 162 /* DeleteExpression */ :
                case 163 /* TypeOfExpression */ :
                case 164 /* VoidExpression */ :
                case 160 /* PreIncrementExpression */ :
                case 161 /* PreDecrementExpression */ : {
                    return 15 /* UnaryExpressionPrecedence */ ;

                }
            }
            throw Errors.invalidOperation();
        }
        ParserImpl.isDirectivePrologueElement = function isDirectivePrologueElement(node) {
            if(node.kind() === 141 /* ExpressionStatement */ ) {
                var expressionStatement = node;
                var expression = expressionStatement.expression();
                if(expression.kind() === 169 /* StringLiteralExpression */ ) {
                    return true;
                }
            }
            return false;
        }
        ParserImpl.isUseStrictDirective = function isUseStrictDirective(node) {
            var expressionStatement = node;
            var expression = expressionStatement.expression();
            var stringLiteralExpression = expression;
            var stringLiteral = stringLiteralExpression.literalToken();
            var text = stringLiteral.text();
            return text === '"use strict"' || text === "'use strict'";
        }
        ParserImpl.prototype.parseSyntaxTree = function () {
            var sourceUnit = this.parseSourceUnit();
            var allDiagnostics = this.tokenDiagnostics.concat(this.diagnostics);
            allDiagnostics.sort(function (a, b) {
                return a.position() - b.position();
            });
            sourceUnit = this.addSkippedTokensTo(sourceUnit);
            return new SyntaxTree(sourceUnit, allDiagnostics);
        };
        ParserImpl.prototype.addSkippedTokensTo = function (sourceUnit) {
            if(this.skippedTokens.length === 0) {
                return sourceUnit;
            }
            return sourceUnit.accept(new SkippedTokensAdder(this.skippedTokens));
        };
        ParserImpl.prototype.parseSourceUnit = function () {
            var savedIsInStrictMode = this.isInStrictMode;
            var moduleElements = this.parseSyntaxList(1 /* SourceUnit_ModuleElements */ , ParserImpl.updateStrictModeState);
            this.isInStrictMode = savedIsInStrictMode;
            return new SourceUnitSyntax(moduleElements, this.currentToken());
        };
        ParserImpl.updateStrictModeState = function updateStrictModeState(parser, items) {
            if(!parser.isInStrictMode) {
                for(var i = 0; i < items.length; i++) {
                    var item = items[i];
                    if(!ParserImpl.isDirectivePrologueElement(item)) {
                        return;
                    }
                }
                parser.isInStrictMode = ParserImpl.isUseStrictDirective(items[items.length - 1]);
            }
        }
        ParserImpl.prototype.isModuleElement = function () {
            return this.isImportDeclaration() || this.isModuleDeclaration() || this.isInterfaceDeclaration() || this.isClassDeclaration() || this.isEnumDeclaration() || this.isStatement(true);
        };
        ParserImpl.prototype.parseModuleElement = function () {
            if(this.isImportDeclaration()) {
                return this.parseImportDeclaration();
            } else {
                if(this.isModuleDeclaration()) {
                    return this.parseModuleDeclaration();
                } else {
                    if(this.isInterfaceDeclaration()) {
                        return this.parseInterfaceDeclaration();
                    } else {
                        if(this.isClassDeclaration()) {
                            return this.parseClassDeclaration();
                        } else {
                            if(this.isEnumDeclaration()) {
                                return this.parseEnumDeclaration();
                            } else {
                                if(this.isStatement(true)) {
                                    return this.parseStatement(true);
                                } else {
                                    throw Errors.invalidOperation();
                                }
                            }
                        }
                    }
                }
            }
        };
        ParserImpl.prototype.isImportDeclaration = function () {
            return this.currentToken().keywordKind() === 47 /* ImportKeyword */  && this.peekTokenN(1).tokenKind === 9 /* IdentifierNameToken */  && this.peekTokenN(2).tokenKind === 104 /* EqualsToken */ ;
        };
        ParserImpl.prototype.parseImportDeclaration = function () {
            Debug.assert(this.currentToken().keywordKind() === 47 /* ImportKeyword */ );
            var importKeyword = this.eatKeyword(47 /* ImportKeyword */ );
            var identifier = this.eatIdentifierToken();
            var equalsToken = this.eatToken(104 /* EqualsToken */ );
            var moduleReference = this.parseModuleReference();
            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
            return new ImportDeclarationSyntax(importKeyword, identifier, equalsToken, moduleReference, semicolonToken);
        };
        ParserImpl.prototype.parseModuleReference = function () {
            if(this.isExternalModuleReference()) {
                return this.parseExternalModuleReference();
            } else {
                return this.parseModuleNameModuleReference();
            }
        };
        ParserImpl.prototype.isExternalModuleReference = function () {
            return this.currentToken().keywordKind() === 63 /* ModuleKeyword */  && this.peekTokenN(1).tokenKind === 69 /* OpenParenToken */ ;
        };
        ParserImpl.prototype.parseExternalModuleReference = function () {
            Debug.assert(this.isExternalModuleReference());
            var moduleKeyword = this.eatKeyword(63 /* ModuleKeyword */ );
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var stringLiteral = this.eatToken(12 /* StringLiteral */ );
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            return new ExternalModuleReferenceSyntax(moduleKeyword, openParenToken, stringLiteral, closeParenToken);
        };
        ParserImpl.prototype.parseModuleNameModuleReference = function () {
            var name = this.parseName();
            return new ModuleNameModuleReferenceSyntax(name);
        };
        ParserImpl.prototype.parseIdentifierName = function () {
            var identifierName = this.eatIdentifierNameToken();
            return new IdentifierNameSyntax(identifierName);
        };
        ParserImpl.prototype.isName = function () {
            return this.isIdentifier(this.currentToken());
        };
        ParserImpl.prototype.parseName = function () {
            var isIdentifier = this.currentToken().tokenKind === 9 /* IdentifierNameToken */ ;
            var identifier = this.eatIdentifierToken();
            var identifierName = new IdentifierNameSyntax(identifier);
            var current = identifierName;
            while(isIdentifier && this.currentToken().tokenKind === 73 /* DotToken */ ) {
                var dotToken = this.eatToken(73 /* DotToken */ );
                isIdentifier = this.currentToken().tokenKind === 9 /* IdentifierNameToken */ ;
                identifier = this.eatIdentifierToken();
                identifierName = new IdentifierNameSyntax(identifier);
                current = new QualifiedNameSyntax(current, dotToken, identifierName);
            }
            return current;
        };
        ParserImpl.prototype.isEnumDeclaration = function () {
            if(this.currentToken().keywordKind() === 45 /* ExportKeyword */  && this.peekTokenN(1).keywordKind() === 44 /* EnumKeyword */ ) {
                return true;
            }
            return this.currentToken().keywordKind() === 44 /* EnumKeyword */  && this.isIdentifier(this.peekTokenN(1));
        };
        ParserImpl.prototype.parseEnumDeclaration = function () {
            Debug.assert(this.isEnumDeclaration());
            var exportKeyword = this.tryEatKeyword(45 /* ExportKeyword */ );
            var enumKeyword = this.eatKeyword(44 /* EnumKeyword */ );
            var identifier = this.eatIdentifierToken();
            var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
            var variableDeclarators = Syntax.emptySeparatedList;
            if(!openBraceToken.isMissing()) {
                variableDeclarators = this.parseSeparatedSyntaxList(128 /* EnumDeclaration_VariableDeclarators */ );
            }
            var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
            return new EnumDeclarationSyntax(exportKeyword, enumKeyword, identifier, openBraceToken, variableDeclarators, closeBraceToken);
        };
        ParserImpl.prototype.isClassDeclaration = function () {
            var token0 = this.currentToken();
            var token1 = this.peekTokenN(1);
            if(token0.keywordKind() === 45 /* ExportKeyword */  && token1.keywordKind() === 42 /* ClassKeyword */ ) {
                return true;
            }
            if(token0.keywordKind() === 61 /* DeclareKeyword */  && token1.keywordKind() === 42 /* ClassKeyword */ ) {
                return true;
            }
            return token0.keywordKind() === 42 /* ClassKeyword */  && this.isIdentifier(token1);
        };
        ParserImpl.prototype.parseClassDeclaration = function () {
            Debug.assert(this.isClassDeclaration());
            var exportKeyword = this.tryEatKeyword(45 /* ExportKeyword */ );
            var declareKeyword = this.tryEatKeyword(61 /* DeclareKeyword */ );
            var classKeyword = this.eatKeyword(42 /* ClassKeyword */ );
            var identifier = this.eatIdentifierToken();
            var extendsClause = null;
            if(this.isExtendsClause()) {
                extendsClause = this.parseExtendsClause();
            }
            var implementsClause = null;
            if(this.isImplementsClause()) {
                implementsClause = this.parseImplementsClause();
            }
            var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
            var classElements = Syntax.emptyList;
            if(!openBraceToken.isMissing()) {
                classElements = this.parseSyntaxList(2 /* ClassDeclaration_ClassElements */ );
            }
            var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
            return new ClassDeclarationSyntax(exportKeyword, declareKeyword, classKeyword, identifier, extendsClause, implementsClause, openBraceToken, classElements, closeBraceToken);
        };
        ParserImpl.prototype.isConstructorDeclaration = function () {
            return this.currentToken().keywordKind() === 60 /* ConstructorKeyword */ ;
        };
        ParserImpl.prototype.isMemberAccessorDeclaration = function () {
            var rewindPoint = this.getRewindPoint();
            try  {
                if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
                    this.eatAnyToken();
                }
                if(this.currentToken().keywordKind() === 56 /* StaticKeyword */ ) {
                    this.eatAnyToken();
                }
                if(this.currentToken().keywordKind() !== 62 /* GetKeyword */  && this.currentToken().keywordKind() !== 65 /* SetKeyword */ ) {
                    return false;
                }
                this.eatAnyToken();
                return this.isIdentifier(this.currentToken());
            }finally {
                this.rewind(rewindPoint);
                this.releaseRewindPoint(rewindPoint);
            }
        };
        ParserImpl.prototype.parseMemberAccessorDeclaration = function () {
            Debug.assert(this.isMemberAccessorDeclaration());
            var publicOrPrivateKeyword = null;
            if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
                publicOrPrivateKeyword = this.eatAnyToken();
            }
            var staticKeyword = this.tryEatKeyword(56 /* StaticKeyword */ );
            if(this.currentToken().keywordKind() === 62 /* GetKeyword */ ) {
                return this.parseGetMemberAccessorDeclaration(publicOrPrivateKeyword, staticKeyword);
            } else {
                if(this.currentToken().keywordKind() === 65 /* SetKeyword */ ) {
                    return this.parseSetMemberAccessorDeclaration(publicOrPrivateKeyword, staticKeyword);
                } else {
                    throw Errors.invalidOperation();
                }
            }
        };
        ParserImpl.prototype.parseGetMemberAccessorDeclaration = function (publicOrPrivateKeyword, staticKeyword) {
            Debug.assert(this.currentToken().keywordKind() === 62 /* GetKeyword */ );
            var getKeyword = this.eatKeyword(62 /* GetKeyword */ );
            var identifier = this.eatIdentifierToken();
            var parameterList = this.parseParameterList();
            var typeAnnotation = this.parseOptionalTypeAnnotation();
            var block = this.parseBlock();
            return new GetMemberAccessorDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, getKeyword, identifier, parameterList, typeAnnotation, block);
        };
        ParserImpl.prototype.parseSetMemberAccessorDeclaration = function (publicOrPrivateKeyword, staticKeyword) {
            Debug.assert(this.currentToken().keywordKind() === 65 /* SetKeyword */ );
            var setKeyword = this.eatKeyword(65 /* SetKeyword */ );
            var identifier = this.eatIdentifierToken();
            var parameterList = this.parseParameterList();
            var block = this.parseBlock();
            return new SetMemberAccessorDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, setKeyword, identifier, parameterList, block);
        };
        ParserImpl.prototype.isMemberVariableDeclaration = function () {
            var rewindPoint = this.getRewindPoint();
            try  {
                if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
                    this.eatAnyToken();
                    if(this.currentToken().tokenKind === 68 /* CloseBraceToken */  || this.currentToken().tokenKind === 118 /* EndOfFileToken */ ) {
                        return true;
                    }
                }
                if(this.currentToken().keywordKind() === 56 /* StaticKeyword */ ) {
                    this.eatAnyToken();
                    if(this.currentToken().tokenKind === 68 /* CloseBraceToken */  || this.currentToken().tokenKind === 118 /* EndOfFileToken */ ) {
                        return true;
                    }
                }
                return this.isVariableDeclarator();
            }finally {
                this.rewind(rewindPoint);
                this.releaseRewindPoint(rewindPoint);
            }
        };
        ParserImpl.prototype.isClassElement = function () {
            return this.isConstructorDeclaration() || this.isMemberFunctionDeclaration() || this.isMemberAccessorDeclaration() || this.isMemberVariableDeclaration();
        };
        ParserImpl.prototype.parseConstructorDeclaration = function () {
            Debug.assert(this.isConstructorDeclaration());
            var constructorKeyword = this.eatKeyword(60 /* ConstructorKeyword */ );
            var parameterList = this.parseParameterList();
            var semicolonToken = null;
            var block = null;
            if(this.isBlock()) {
                block = this.parseBlock();
            } else {
                semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
            }
            return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, block, semicolonToken);
        };
        ParserImpl.prototype.isMemberFunctionDeclaration = function () {
            var rewindPoint = this.getRewindPoint();
            try  {
                if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
                    this.eatAnyToken();
                }
                if(this.currentToken().keywordKind() === 56 /* StaticKeyword */ ) {
                    this.eatAnyToken();
                }
                return this.isFunctionSignature();
            }finally {
                this.rewind(rewindPoint);
                this.releaseRewindPoint(rewindPoint);
            }
        };
        ParserImpl.prototype.parseMemberFunctionDeclaration = function () {
            Debug.assert(this.isMemberFunctionDeclaration());
            var publicOrPrivateKeyword = null;
            if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
                publicOrPrivateKeyword = this.eatAnyToken();
            }
            var staticKeyword = this.tryEatKeyword(56 /* StaticKeyword */ );
            var functionSignature = this.parseFunctionSignature();
            var block = null;
            var semicolon = null;
            if(this.isBlock()) {
                block = this.parseBlock();
            } else {
                semicolon = this.eatExplicitOrAutomaticSemicolon(false);
            }
            return new MemberFunctionDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, functionSignature, block, semicolon);
        };
        ParserImpl.prototype.parseMemberVariableDeclaration = function () {
            Debug.assert(this.isMemberVariableDeclaration());
            var publicOrPrivateKeyword = null;
            if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
                publicOrPrivateKeyword = this.eatAnyToken();
            }
            var staticKeyword = this.tryEatKeyword(56 /* StaticKeyword */ );
            var variableDeclarator = this.parseVariableDeclarator(true);
            var semicolon = this.eatExplicitOrAutomaticSemicolon(false);
            return new MemberVariableDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, variableDeclarator, semicolon);
        };
        ParserImpl.prototype.parseClassElement = function () {
            Debug.assert(this.isClassElement());
            if(this.isConstructorDeclaration()) {
                return this.parseConstructorDeclaration();
            } else {
                if(this.isMemberFunctionDeclaration()) {
                    return this.parseMemberFunctionDeclaration();
                } else {
                    if(this.isMemberAccessorDeclaration()) {
                        return this.parseMemberAccessorDeclaration();
                    } else {
                        if(this.isMemberVariableDeclaration()) {
                            return this.parseMemberVariableDeclaration();
                        } else {
                            throw Errors.invalidOperation();
                        }
                    }
                }
            }
        };
        ParserImpl.prototype.isFunctionDeclaration = function () {
            var token0 = this.currentToken();
            if(token0.keywordKind() === 25 /* FunctionKeyword */ ) {
                return true;
            }
            var token1 = this.peekTokenN(1);
            if(token0.keywordKind() === 45 /* ExportKeyword */  && token1.keywordKind() === 25 /* FunctionKeyword */ ) {
                return true;
            }
            return token0.keywordKind() === 61 /* DeclareKeyword */  && token1.keywordKind() === 25 /* FunctionKeyword */ ;
        };
        ParserImpl.prototype.parseFunctionDeclaration = function () {
            Debug.assert(this.isFunctionDeclaration());
            var exportKeyword = this.tryEatKeyword(45 /* ExportKeyword */ );
            var declareKeyword = this.tryEatKeyword(61 /* DeclareKeyword */ );
            var functionKeyword = this.eatKeyword(25 /* FunctionKeyword */ );
            var functionSignature = this.parseFunctionSignature();
            var semicolonToken = null;
            var block = null;
            if(this.isBlock()) {
                block = this.parseBlock();
            } else {
                semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
            }
            return new FunctionDeclarationSyntax(exportKeyword, declareKeyword, functionKeyword, functionSignature, block, semicolonToken);
        };
        ParserImpl.prototype.isModuleDeclaration = function () {
            var token0 = this.currentToken();
            var token1 = this.peekTokenN(1);
            if(token0.keywordKind() === 45 /* ExportKeyword */  && token1.keywordKind() === 63 /* ModuleKeyword */ ) {
                return true;
            }
            if(token0.keywordKind() === 61 /* DeclareKeyword */  && token1.keywordKind() === 63 /* ModuleKeyword */ ) {
                return true;
            }
            if(token0.keywordKind() === 63 /* ModuleKeyword */ ) {
                if(token1.tokenKind === 67 /* OpenBraceToken */ ) {
                    return true;
                }
                if(token1.tokenKind === 9 /* IdentifierNameToken */ ) {
                    var token2 = this.peekTokenN(2);
                    if(token2.tokenKind === 67 /* OpenBraceToken */ ) {
                        return true;
                    }
                    if(token2.tokenKind === 73 /* DotToken */ ) {
                        return true;
                    }
                }
            }
            return false;
        };
        ParserImpl.prototype.parseModuleDeclaration = function () {
            Debug.assert(this.isModuleDeclaration());
            var exportKeyword = this.tryEatKeyword(45 /* ExportKeyword */ );
            var declareKeyword = this.tryEatKeyword(61 /* DeclareKeyword */ );
            var moduleKeyword = this.eatKeyword(63 /* ModuleKeyword */ );
            var moduleName = null;
            var stringLiteral = null;
            if(this.isName()) {
                moduleName = this.parseName();
            } else {
                if(this.currentToken().tokenKind === 12 /* StringLiteral */ ) {
                    stringLiteral = this.eatToken(12 /* StringLiteral */ );
                }
            }
            var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
            var moduleElements = Syntax.emptyList;
            if(!openBraceToken.isMissing()) {
                moduleElements = this.parseSyntaxList(4 /* ModuleDeclaration_ModuleElements */ );
            }
            var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
            return new ModuleDeclarationSyntax(exportKeyword, declareKeyword, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken);
        };
        ParserImpl.prototype.isInterfaceDeclaration = function () {
            if(this.currentToken().keywordKind() === 45 /* ExportKeyword */  && this.peekTokenN(1).keywordKind() === 50 /* InterfaceKeyword */ ) {
                return true;
            }
            return this.currentToken().keywordKind() === 50 /* InterfaceKeyword */  && this.isIdentifier(this.peekTokenN(1));
        };
        ParserImpl.prototype.parseInterfaceDeclaration = function () {
            Debug.assert(this.currentToken().keywordKind() === 45 /* ExportKeyword */  || this.currentToken().keywordKind() === 50 /* InterfaceKeyword */ );
            var exportKeyword = this.tryEatKeyword(45 /* ExportKeyword */ );
            var interfaceKeyword = this.eatKeyword(50 /* InterfaceKeyword */ );
            var identifier = this.eatIdentifierToken();
            var extendsClause = null;
            if(this.isExtendsClause()) {
                extendsClause = this.parseExtendsClause();
            }
            var objectType = this.parseObjectType();
            return new InterfaceDeclarationSyntax(exportKeyword, interfaceKeyword, identifier, extendsClause, objectType);
        };
        ParserImpl.prototype.parseObjectType = function () {
            var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
            var typeMembers = Syntax.emptySeparatedList;
            if(!openBraceToken.isMissing()) {
                typeMembers = this.parseSeparatedSyntaxList(256 /* ObjectType_TypeMembers */ );
            }
            var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
            return new ObjectTypeSyntax(openBraceToken, typeMembers, closeBraceToken);
        };
        ParserImpl.prototype.isTypeMember = function () {
            return this.isCallSignature() || this.isConstructSignature() || this.isIndexSignature() || this.isFunctionSignature() || this.isPropertySignature();
        };
        ParserImpl.prototype.parseTypeMember = function () {
            if(this.isCallSignature()) {
                return this.parseCallSignature();
            } else {
                if(this.isConstructSignature()) {
                    return this.parseConstructSignature();
                } else {
                    if(this.isIndexSignature()) {
                        return this.parseIndexSignature();
                    } else {
                        if(this.isFunctionSignature()) {
                            return this.parseFunctionSignature();
                        } else {
                            if(this.isPropertySignature()) {
                                return this.parsePropertySignature();
                            } else {
                                throw Errors.invalidOperation();
                            }
                        }
                    }
                }
            }
        };
        ParserImpl.prototype.parseConstructSignature = function () {
            Debug.assert(this.isConstructSignature());
            var newKeyword = this.eatKeyword(29 /* NewKeyword */ );
            var parameterList = this.parseParameterList();
            var typeAnnotation = this.parseOptionalTypeAnnotation();
            return new ConstructSignatureSyntax(newKeyword, parameterList, typeAnnotation);
        };
        ParserImpl.prototype.parseIndexSignature = function () {
            Debug.assert(this.isIndexSignature());
            var openBracketToken = this.eatToken(71 /* OpenBracketToken */ );
            var parameter = this.parseParameter();
            var closeBracketToken = this.eatToken(72 /* CloseBracketToken */ );
            var typeAnnotation = this.parseOptionalTypeAnnotation();
            return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, typeAnnotation);
        };
        ParserImpl.prototype.parseFunctionSignature = function () {
            var identifier = this.eatIdentifierToken();
            var questionToken = this.tryEatToken(102 /* QuestionToken */ );
            var parameterList = this.parseParameterList();
            var typeAnnotation = this.parseOptionalTypeAnnotation();
            return new FunctionSignatureSyntax(identifier, questionToken, parameterList, typeAnnotation);
        };
        ParserImpl.prototype.parsePropertySignature = function () {
            Debug.assert(this.isPropertySignature());
            var identifier = this.eatIdentifierToken();
            var questionToken = this.tryEatToken(102 /* QuestionToken */ );
            var typeAnnotation = this.parseOptionalTypeAnnotation();
            return new PropertySignatureSyntax(identifier, questionToken, typeAnnotation);
        };
        ParserImpl.prototype.isCallSignature = function () {
            return this.currentToken().tokenKind === 69 /* OpenParenToken */ ;
        };
        ParserImpl.prototype.isConstructSignature = function () {
            return this.currentToken().keywordKind() === 29 /* NewKeyword */ ;
        };
        ParserImpl.prototype.isIndexSignature = function () {
            return this.currentToken().tokenKind === 71 /* OpenBracketToken */ ;
        };
        ParserImpl.prototype.isFunctionSignature = function () {
            if(this.isIdentifier(this.currentToken())) {
                if(this.peekTokenN(1).tokenKind === 69 /* OpenParenToken */ ) {
                    return true;
                }
                if(this.peekTokenN(1).tokenKind === 102 /* QuestionToken */  && this.peekTokenN(2).tokenKind === 69 /* OpenParenToken */ ) {
                    return true;
                }
            }
            return false;
        };
        ParserImpl.prototype.isPropertySignature = function () {
            return this.isIdentifier(this.currentToken());
        };
        ParserImpl.prototype.isExtendsClause = function () {
            return this.currentToken().keywordKind() === 46 /* ExtendsKeyword */ ;
        };
        ParserImpl.prototype.parseExtendsClause = function () {
            Debug.assert(this.isExtendsClause());
            var extendsKeyword = this.eatKeyword(46 /* ExtendsKeyword */ );
            var typeNames = this.parseSeparatedSyntaxList(512 /* ExtendsOrImplementsClause_TypeNameList */ );
            return new ExtendsClauseSyntax(extendsKeyword, typeNames);
        };
        ParserImpl.prototype.isImplementsClause = function () {
            return this.currentToken().keywordKind() === 49 /* ImplementsKeyword */ ;
        };
        ParserImpl.prototype.parseImplementsClause = function () {
            Debug.assert(this.isImplementsClause());
            var implementsKeyword = this.eatKeyword(49 /* ImplementsKeyword */ );
            var typeNames = this.parseSeparatedSyntaxList(512 /* ExtendsOrImplementsClause_TypeNameList */ );
            return new ImplementsClauseSyntax(implementsKeyword, typeNames);
        };
        ParserImpl.prototype.isStatement = function (allowFunctionDeclaration) {
            switch(this.currentToken().keywordKind()) {
                case 55 /* PublicKeyword */ :
                case 53 /* PrivateKeyword */ :
                case 56 /* StaticKeyword */ : {
                    if(this.isClassElement()) {
                        return false;
                    }

                }
            }
            return this.isVariableStatement() || this.isLabeledStatement() || (allowFunctionDeclaration && this.isFunctionDeclaration()) || this.isIfStatement() || this.isBlock() || this.isExpressionStatement() || this.isReturnStatement() || this.isSwitchStatement() || this.isThrowStatement() || this.isBreakStatement() || this.isContinueStatement() || this.isForOrForInStatement() || this.isEmptyStatement() || this.isWhileStatement() || this.isWithStatement() || this.isDoStatement() || this.isTryStatement() || this.isDebuggerStatement();
        };
        ParserImpl.prototype.parseStatement = function (allowFunctionDeclaration) {
            if(this.isVariableStatement()) {
                return this.parseVariableStatement();
            } else {
                if(this.isLabeledStatement()) {
                    return this.parseLabeledStatement();
                } else {
                    if(allowFunctionDeclaration && this.isFunctionDeclaration()) {
                        return this.parseFunctionDeclaration();
                    } else {
                        if(this.isIfStatement()) {
                            return this.parseIfStatement();
                        } else {
                            if(this.isBlock()) {
                                return this.parseBlock();
                            } else {
                                if(this.isReturnStatement()) {
                                    return this.parseReturnStatement();
                                } else {
                                    if(this.isSwitchStatement()) {
                                        return this.parseSwitchStatement();
                                    } else {
                                        if(this.isThrowStatement()) {
                                            return this.parseThrowStatement();
                                        } else {
                                            if(this.isBreakStatement()) {
                                                return this.parseBreakStatement();
                                            } else {
                                                if(this.isContinueStatement()) {
                                                    return this.parseContinueStatement();
                                                } else {
                                                    if(this.isForOrForInStatement()) {
                                                        return this.parseForOrForInStatement();
                                                    } else {
                                                        if(this.isEmptyStatement()) {
                                                            return this.parseEmptyStatement();
                                                        } else {
                                                            if(this.isWhileStatement()) {
                                                                return this.parseWhileStatement();
                                                            } else {
                                                                if(this.isWithStatement()) {
                                                                    return this.parseWithStatement();
                                                                } else {
                                                                    if(this.isDoStatement()) {
                                                                        return this.parseDoStatement();
                                                                    } else {
                                                                        if(this.isTryStatement()) {
                                                                            return this.parseTryStatement();
                                                                        } else {
                                                                            if(this.isDebuggerStatement()) {
                                                                                return this.parseDebuggerStatement();
                                                                            } else {
                                                                                return this.parseExpressionStatement();
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
        ParserImpl.prototype.isDebuggerStatement = function () {
            return this.currentToken().keywordKind() === 17 /* DebuggerKeyword */ ;
        };
        ParserImpl.prototype.parseDebuggerStatement = function () {
            Debug.assert(this.isDebuggerStatement());
            var debuggerKeyword = this.eatKeyword(17 /* DebuggerKeyword */ );
            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
            return new DebuggerStatementSyntax(debuggerKeyword, semicolonToken);
        };
        ParserImpl.prototype.isDoStatement = function () {
            return this.currentToken().keywordKind() === 20 /* DoKeyword */ ;
        };
        ParserImpl.prototype.parseDoStatement = function () {
            Debug.assert(this.isDoStatement());
            var doKeyword = this.eatKeyword(20 /* DoKeyword */ );
            var statement = this.parseStatement(false);
            var whileKeyword = this.eatKeyword(40 /* WhileKeyword */ );
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var condition = this.parseExpression(true);
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(true);
            return new DoStatementSyntax(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken);
        };
        ParserImpl.prototype.isLabeledStatement = function () {
            return this.isIdentifier(this.currentToken()) && this.peekTokenN(1).tokenKind === 103 /* ColonToken */ ;
        };
        ParserImpl.prototype.parseLabeledStatement = function () {
            Debug.assert(this.isLabeledStatement());
            var identifier = this.eatIdentifierToken();
            var colonToken = this.eatToken(103 /* ColonToken */ );
            var statement = this.parseStatement(false);
            return new LabeledStatement(identifier, colonToken, statement);
        };
        ParserImpl.prototype.isTryStatement = function () {
            return this.currentToken().keywordKind() === 36 /* TryKeyword */ ;
        };
        ParserImpl.prototype.parseTryStatement = function () {
            Debug.assert(this.isTryStatement());
            var tryKeyword = this.eatKeyword(36 /* TryKeyword */ );
            var block = this.parseBlock();
            var catchClause = null;
            if(this.isCatchClause()) {
                catchClause = this.parseCatchClause();
            }
            var finallyClause = null;
            if(this.isFinallyClause()) {
                finallyClause = this.parseFinallyClause();
            }
            return new TryStatementSyntax(tryKeyword, block, catchClause, finallyClause);
        };
        ParserImpl.prototype.isCatchClause = function () {
            return this.currentToken().keywordKind() === 15 /* CatchKeyword */ ;
        };
        ParserImpl.prototype.parseCatchClause = function () {
            Debug.assert(this.isCatchClause());
            var catchKeyword = this.eatKeyword(15 /* CatchKeyword */ );
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var identifier = this.eatIdentifierToken();
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            var block = this.parseBlock();
            return new CatchClauseSyntax(catchKeyword, openParenToken, identifier, closeParenToken, block);
        };
        ParserImpl.prototype.isFinallyClause = function () {
            return this.currentToken().keywordKind() === 23 /* FinallyKeyword */ ;
        };
        ParserImpl.prototype.parseFinallyClause = function () {
            Debug.assert(this.isFinallyClause());
            var finallyKeyword = this.eatKeyword(23 /* FinallyKeyword */ );
            var block = this.parseBlock();
            return new FinallyClauseSyntax(finallyKeyword, block);
        };
        ParserImpl.prototype.isWithStatement = function () {
            return this.currentToken().keywordKind() === 41 /* WithKeyword */ ;
        };
        ParserImpl.prototype.parseWithStatement = function () {
            Debug.assert(this.isWithStatement());
            var withKeyword = this.eatKeyword(41 /* WithKeyword */ );
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var condition = this.parseExpression(true);
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            var statement = this.parseStatement(false);
            return new WithStatementSyntax(withKeyword, openParenToken, condition, closeParenToken, statement);
        };
        ParserImpl.prototype.isWhileStatement = function () {
            return this.currentToken().keywordKind() === 40 /* WhileKeyword */ ;
        };
        ParserImpl.prototype.parseWhileStatement = function () {
            Debug.assert(this.isWhileStatement());
            var whileKeyword = this.eatKeyword(40 /* WhileKeyword */ );
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var condition = this.parseExpression(true);
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            var statement = this.parseStatement(false);
            return new WhileStatementSyntax(whileKeyword, openParenToken, condition, closeParenToken, statement);
        };
        ParserImpl.prototype.isEmptyStatement = function () {
            return this.currentToken().tokenKind === 75 /* SemicolonToken */ ;
        };
        ParserImpl.prototype.parseEmptyStatement = function () {
            Debug.assert(this.isEmptyStatement());
            var semicolonToken = this.eatToken(75 /* SemicolonToken */ );
            return new EmptyStatementSyntax(semicolonToken);
        };
        ParserImpl.prototype.isForOrForInStatement = function () {
            return this.currentToken().keywordKind() === 24 /* ForKeyword */ ;
        };
        ParserImpl.prototype.parseForOrForInStatement = function () {
            Debug.assert(this.isForOrForInStatement());
            var forKeyword = this.eatKeyword(24 /* ForKeyword */ );
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var currentToken = this.currentToken();
            if(currentToken.keywordKind() === 38 /* VarKeyword */ ) {
                return this.parseForOrForInStatementWithVariableDeclaration(forKeyword, openParenToken);
            } else {
                if(currentToken.tokenKind === 75 /* SemicolonToken */ ) {
                    return this.parseForStatement(forKeyword, openParenToken);
                } else {
                    return this.parseForOrForInStatementWithInitializer(forKeyword, openParenToken);
                }
            }
        };
        ParserImpl.prototype.parseForOrForInStatementWithVariableDeclaration = function (forKeyword, openParenToken) {
            Debug.assert(forKeyword.keywordKind() === 24 /* ForKeyword */  && openParenToken.tokenKind === 69 /* OpenParenToken */ );
            Debug.assert(this.currentToken().keywordKind() === 38 /* VarKeyword */ );
            var variableDeclaration = this.parseVariableDeclaration(false);
            if(this.currentToken().keywordKind() === 27 /* InKeyword */ ) {
                return this.parseForInStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, variableDeclaration, null);
            }
            return this.parseForStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, variableDeclaration, null);
        };
        ParserImpl.prototype.parseForInStatementWithVariableDeclarationOrInitializer = function (forKeyword, openParenToken, variableDeclaration, initializer) {
            Debug.assert(this.currentToken().keywordKind() === 27 /* InKeyword */ );
            var inKeyword = this.eatKeyword(27 /* InKeyword */ );
            var expression = this.parseExpression(true);
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            var statement = this.parseStatement(false);
            return new ForInStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, inKeyword, expression, closeParenToken, statement);
        };
        ParserImpl.prototype.parseForOrForInStatementWithInitializer = function (forKeyword, openParenToken) {
            Debug.assert(forKeyword.keywordKind() === 24 /* ForKeyword */  && openParenToken.tokenKind === 69 /* OpenParenToken */ );
            var initializer = this.parseExpression(false);
            if(this.currentToken().keywordKind() === 27 /* InKeyword */ ) {
                return this.parseForInStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, null, initializer);
            } else {
                return this.parseForStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, null, initializer);
            }
        };
        ParserImpl.prototype.parseForStatement = function (forKeyword, openParenToken) {
            Debug.assert(forKeyword.keywordKind() === 24 /* ForKeyword */  && openParenToken.tokenKind === 69 /* OpenParenToken */ );
            var initializer = null;
            if(this.currentToken().tokenKind !== 75 /* SemicolonToken */  && this.currentToken().tokenKind !== 70 /* CloseParenToken */  && this.currentToken().tokenKind !== 118 /* EndOfFileToken */ ) {
                initializer = this.parseExpression(false);
            }
            return this.parseForStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, null, initializer);
        };
        ParserImpl.prototype.parseForStatementWithVariableDeclarationOrInitializer = function (forKeyword, openParenToken, variableDeclaration, initializer) {
            var firstSemicolonToken = this.eatToken(75 /* SemicolonToken */ );
            var condition = null;
            if(this.currentToken().tokenKind !== 75 /* SemicolonToken */  && this.currentToken().tokenKind !== 70 /* CloseParenToken */  && this.currentToken().tokenKind !== 118 /* EndOfFileToken */ ) {
                condition = this.parseExpression(true);
            }
            var secondSemicolonToken = this.eatToken(75 /* SemicolonToken */ );
            var incrementor = null;
            if(this.currentToken().tokenKind !== 70 /* CloseParenToken */  && this.currentToken().tokenKind !== 118 /* EndOfFileToken */ ) {
                incrementor = this.parseExpression(true);
            }
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            var statement = this.parseStatement(false);
            return new ForStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement);
        };
        ParserImpl.prototype.isBreakStatement = function () {
            return this.currentToken().keywordKind() === 13 /* BreakKeyword */ ;
        };
        ParserImpl.prototype.parseBreakStatement = function () {
            Debug.assert(this.isBreakStatement());
            var breakKeyword = this.eatKeyword(13 /* BreakKeyword */ );
            var identifier = null;
            if(!this.canEatExplicitOrAutomaticSemicolon(false)) {
                if(this.isIdentifier(this.currentToken())) {
                    identifier = this.eatIdentifierToken();
                }
            }
            var semicolon = this.eatExplicitOrAutomaticSemicolon(false);
            return new BreakStatementSyntax(breakKeyword, identifier, semicolon);
        };
        ParserImpl.prototype.isContinueStatement = function () {
            return this.currentToken().keywordKind() === 16 /* ContinueKeyword */ ;
        };
        ParserImpl.prototype.parseContinueStatement = function () {
            Debug.assert(this.isContinueStatement());
            var continueKeyword = this.eatKeyword(16 /* ContinueKeyword */ );
            var identifier = null;
            if(!this.canEatExplicitOrAutomaticSemicolon(false)) {
                if(this.isIdentifier(this.currentToken())) {
                    identifier = this.eatIdentifierToken();
                }
            }
            var semicolon = this.eatExplicitOrAutomaticSemicolon(false);
            return new ContinueStatementSyntax(continueKeyword, identifier, semicolon);
        };
        ParserImpl.prototype.isSwitchStatement = function () {
            return this.currentToken().keywordKind() === 32 /* SwitchKeyword */ ;
        };
        ParserImpl.prototype.parseSwitchStatement = function () {
            Debug.assert(this.isSwitchStatement());
            var switchKeyword = this.eatKeyword(32 /* SwitchKeyword */ );
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var expression = this.parseExpression(true);
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
            var switchClauses = Syntax.emptyList;
            if(!openBraceToken.isMissing()) {
                switchClauses = this.parseSyntaxList(8 /* SwitchStatement_SwitchClauses */ );
            }
            var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
            return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, switchClauses, closeBraceToken);
        };
        ParserImpl.prototype.isCaseSwitchClause = function () {
            return this.currentToken().keywordKind() === 14 /* CaseKeyword */ ;
        };
        ParserImpl.prototype.isDefaultSwitchClause = function () {
            return this.currentToken().keywordKind() === 18 /* DefaultKeyword */ ;
        };
        ParserImpl.prototype.isSwitchClause = function () {
            return this.isCaseSwitchClause() || this.isDefaultSwitchClause();
        };
        ParserImpl.prototype.parseSwitchClause = function () {
            Debug.assert(this.isSwitchClause());
            if(this.isCaseSwitchClause()) {
                return this.parseCaseSwitchClause();
            } else {
                if(this.isDefaultSwitchClause()) {
                    return this.parseDefaultSwitchClause();
                } else {
                    throw Errors.invalidOperation();
                }
            }
        };
        ParserImpl.prototype.parseCaseSwitchClause = function () {
            Debug.assert(this.isCaseSwitchClause());
            var caseKeyword = this.eatKeyword(14 /* CaseKeyword */ );
            var expression = this.parseExpression(true);
            var colonToken = this.eatToken(103 /* ColonToken */ );
            var statements = this.parseSyntaxList(16 /* SwitchClause_Statements */ );
            return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, statements);
        };
        ParserImpl.prototype.parseDefaultSwitchClause = function () {
            Debug.assert(this.isDefaultSwitchClause());
            var defaultKeyword = this.eatKeyword(18 /* DefaultKeyword */ );
            var colonToken = this.eatToken(103 /* ColonToken */ );
            var statements = this.parseSyntaxList(16 /* SwitchClause_Statements */ );
            return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, statements);
        };
        ParserImpl.prototype.isThrowStatement = function () {
            return this.currentToken().keywordKind() === 34 /* ThrowKeyword */ ;
        };
        ParserImpl.prototype.parseThrowStatement = function () {
            Debug.assert(this.isThrowStatement());
            var throwKeyword = this.eatKeyword(34 /* ThrowKeyword */ );
            var expression = null;
            if(this.canEatExplicitOrAutomaticSemicolon(false)) {
                var token = this.createMissingToken(9 /* IdentifierNameToken */ , 0 /* None */ , null);
                expression = new IdentifierNameSyntax(token);
            } else {
                expression = this.parseExpression(true);
            }
            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
            return new ThrowStatementSyntax(throwKeyword, expression, semicolonToken);
        };
        ParserImpl.prototype.isReturnStatement = function () {
            return this.currentToken().keywordKind() === 31 /* ReturnKeyword */ ;
        };
        ParserImpl.prototype.parseReturnStatement = function () {
            Debug.assert(this.isReturnStatement());
            var returnKeyword = this.eatKeyword(31 /* ReturnKeyword */ );
            var expression = null;
            if(!this.canEatExplicitOrAutomaticSemicolon(false)) {
                expression = this.parseExpression(true);
            }
            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
            return new ReturnStatementSyntax(returnKeyword, expression, semicolonToken);
        };
        ParserImpl.prototype.isExpressionStatement = function () {
            var currentToken = this.currentToken();
            var kind = currentToken.tokenKind;
            if(kind === 67 /* OpenBraceToken */ ) {
                return false;
            }
            var keywordKind = currentToken.keywordKind();
            if(keywordKind === 25 /* FunctionKeyword */ ) {
                return false;
            }
            return this.isExpression();
        };
        ParserImpl.prototype.isAssignmentOrOmittedExpression = function () {
            if(this.currentToken().tokenKind === 76 /* CommaToken */ ) {
                return true;
            }
            return this.isExpression();
        };
        ParserImpl.prototype.parseAssignmentOrOmittedExpression = function () {
            Debug.assert(this.isAssignmentOrOmittedExpression());
            if(this.currentToken().tokenKind === 76 /* CommaToken */ ) {
                return new OmittedExpressionSyntax();
            }
            return this.parseAssignmentExpression(true);
        };
        ParserImpl.prototype.isExpression = function () {
            var currentToken = this.currentToken();
            var kind = currentToken.tokenKind;
            switch(kind) {
                case 11 /* NumericLiteral */ :
                case 12 /* StringLiteral */ :
                case 10 /* RegularExpressionLiteral */ : {
                    return true;

                }
                case 71 /* OpenBracketToken */ :
                case 69 /* OpenParenToken */ : {
                    return true;

                }
                case 77 /* LessThanToken */ : {
                    return true;

                }
                case 90 /* PlusPlusToken */ :
                case 91 /* MinusMinusToken */ :
                case 86 /* PlusToken */ :
                case 87 /* MinusToken */ :
                case 99 /* TildeToken */ :
                case 98 /* ExclamationToken */ : {
                    return true;

                }
                case 67 /* OpenBraceToken */ : {
                    return true;

                }
                case 82 /* EqualsGreaterThanToken */ : {
                    return true;

                }
                case 115 /* SlashToken */ :
                case 116 /* SlashEqualsToken */ : {
                    return true;

                }
            }
            var keywordKind = currentToken.keywordKind();
            switch(keywordKind) {
                case 48 /* SuperKeyword */ :
                case 33 /* ThisKeyword */ :
                case 35 /* TrueKeyword */ :
                case 22 /* FalseKeyword */ :
                case 30 /* NullKeyword */ : {
                    return true;

                }
                case 29 /* NewKeyword */ : {
                    return true;

                }
                case 19 /* DeleteKeyword */ :
                case 39 /* VoidKeyword */ :
                case 37 /* TypeOfKeyword */ : {
                    return true;

                }
                case 25 /* FunctionKeyword */ : {
                    return true;

                }
            }
            if(this.isIdentifier(this.currentToken())) {
                return true;
            }
            return false;
        };
        ParserImpl.prototype.parseExpressionStatement = function () {
            var expression = this.parseExpression(true);
            var semicolon = this.eatExplicitOrAutomaticSemicolon(false);
            return new ExpressionStatementSyntax(expression, semicolon);
        };
        ParserImpl.prototype.isIfStatement = function () {
            return this.currentToken().keywordKind() === 26 /* IfKeyword */ ;
        };
        ParserImpl.prototype.parseIfStatement = function () {
            Debug.assert(this.isIfStatement());
            var ifKeyword = this.eatKeyword(26 /* IfKeyword */ );
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var condition = this.parseExpression(true);
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            var statement = this.parseStatement(false);
            var elseClause = null;
            if(this.isElseClause()) {
                elseClause = this.parseElseClause();
            }
            return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause);
        };
        ParserImpl.prototype.isElseClause = function () {
            return this.currentToken().keywordKind() === 21 /* ElseKeyword */ ;
        };
        ParserImpl.prototype.parseElseClause = function () {
            Debug.assert(this.isElseClause());
            var elseKeyword = this.eatKeyword(21 /* ElseKeyword */ );
            var statement = this.parseStatement(false);
            return new ElseClauseSyntax(elseKeyword, statement);
        };
        ParserImpl.prototype.isVariableStatement = function () {
            var token0 = this.currentToken();
            if(token0.keywordKind() === 38 /* VarKeyword */ ) {
                return true;
            }
            var token1 = this.peekTokenN(1);
            if(token0.keywordKind() === 45 /* ExportKeyword */  && token1.keywordKind() === 38 /* VarKeyword */ ) {
                return true;
            }
            return token0.keywordKind() === 61 /* DeclareKeyword */  && token1.keywordKind() === 38 /* VarKeyword */ ;
        };
        ParserImpl.prototype.parseVariableStatement = function () {
            Debug.assert(this.isVariableStatement());
            var exportKeyword = this.tryEatKeyword(45 /* ExportKeyword */ );
            var declareKeyword = this.tryEatKeyword(61 /* DeclareKeyword */ );
            var variableDeclaration = this.parseVariableDeclaration(true);
            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
            return new VariableStatementSyntax(exportKeyword, declareKeyword, variableDeclaration, semicolonToken);
        };
        ParserImpl.prototype.parseVariableDeclaration = function (allowIn) {
            Debug.assert(this.currentToken().keywordKind() === 38 /* VarKeyword */ );
            var varKeyword = this.eatKeyword(38 /* VarKeyword */ );
            var listParsingState = allowIn ? 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */  : 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ ;
            var variableDeclarators = this.parseSeparatedSyntaxList(listParsingState);
            return new VariableDeclarationSyntax(varKeyword, variableDeclarators);
        };
        ParserImpl.prototype.isVariableDeclarator = function () {
            return this.isIdentifier(this.currentToken());
        };
        ParserImpl.prototype.parseVariableDeclarator = function (allowIn) {
            var identifier = this.eatIdentifierToken();
            var equalsValueClause = null;
            var typeAnnotation = null;
            if(!identifier.isMissing()) {
                typeAnnotation = this.parseOptionalTypeAnnotation();
                if(this.isEqualsValueClause()) {
                    equalsValueClause = this.parseEqualsValuesClause(allowIn);
                }
            }
            return new VariableDeclaratorSyntax(identifier, typeAnnotation, equalsValueClause);
        };
        ParserImpl.prototype.isEqualsValueClause = function () {
            return this.currentToken().tokenKind === 104 /* EqualsToken */ ;
        };
        ParserImpl.prototype.parseEqualsValuesClause = function (allowIn) {
            Debug.assert(this.isEqualsValueClause());
            var equalsToken = this.eatToken(104 /* EqualsToken */ );
            var value = this.parseAssignmentExpression(allowIn);
            return new EqualsValueClauseSyntax(equalsToken, value);
        };
        ParserImpl.prototype.parseExpression = function (allowIn) {
            return this.parseSubExpression(0, allowIn);
        };
        ParserImpl.prototype.parseAssignmentExpression = function (allowIn) {
            return this.parseSubExpression(2 /* AssignmentExpressionPrecedence */ , allowIn);
        };
        ParserImpl.prototype.parseUnaryExpression = function () {
            var currentTokenKind = this.currentToken().tokenKind;
            if(SyntaxFacts.isPrefixUnaryExpressionOperatorToken(currentTokenKind)) {
                var operatorKind = SyntaxFacts.getPrefixUnaryExpression(currentTokenKind);
                var operatorToken = this.eatAnyToken();
                var operand = this.parseUnaryExpression();
                return new PrefixUnaryExpressionSyntax(operatorKind, operatorToken, operand);
            } else {
                return this.parseTerm(true, false);
            }
        };
        ParserImpl.prototype.parseSubExpression = function (precedence, allowIn) {
            var leftOperand = this.parseUnaryExpression();
            leftOperand = this.parseBinaryOrConditionalExpressions(precedence, allowIn, leftOperand);
            return leftOperand;
        };
        ParserImpl.prototype.parseBinaryOrConditionalExpressions = function (precedence, allowIn, leftOperand) {
            while(true) {
                var currentTokenKind = this.currentToken().tokenKind;
                var currentTokenKeywordKind = this.currentToken().keywordKind();
                if(currentTokenKeywordKind === 28 /* InstanceOfKeyword */  || currentTokenKeywordKind === 27 /* InKeyword */ ) {
                    currentTokenKind = currentTokenKeywordKind;
                }
                if(SyntaxFacts.isBinaryExpressionOperatorToken(currentTokenKind)) {
                    if(currentTokenKind === 27 /* InKeyword */  && !allowIn) {
                        break;
                    }
                    var binaryExpressionKind = SyntaxFacts.getBinaryExpressionFromOperatorToken(currentTokenKind);
                    var newPrecedence = ParserImpl.getPrecedence(binaryExpressionKind);
                    Debug.assert(newPrecedence > 0);
                    if(newPrecedence < precedence) {
                        break;
                    }
                    if(newPrecedence === precedence && !this.isRightAssociative(binaryExpressionKind)) {
                        break;
                    }
                    var operatorToken = this.eatAnyToken();
                    leftOperand = new BinaryExpressionSyntax(binaryExpressionKind, leftOperand, operatorToken, this.parseSubExpression(newPrecedence, allowIn));
                    continue;
                }
                if(currentTokenKind === 102 /* QuestionToken */  && precedence <= 3 /* ConditionalExpressionPrecedence */ ) {
                    var questionToken = this.eatToken(102 /* QuestionToken */ );
                    var whenTrueExpression = this.parseAssignmentExpression(allowIn);
                    var colon = this.eatToken(103 /* ColonToken */ );
                    var whenFalseExpression = this.parseAssignmentExpression(allowIn);
                    leftOperand = new ConditionalExpressionSyntax(leftOperand, questionToken, whenTrueExpression, colon, whenFalseExpression);
                    continue;
                }
                break;
            }
            return leftOperand;
        };
        ParserImpl.prototype.isRightAssociative = function (expressionKind) {
            switch(expressionKind) {
                case 171 /* AssignmentExpression */ :
                case 172 /* AddAssignmentExpression */ :
                case 173 /* SubtractAssignmentExpression */ :
                case 174 /* MultiplyAssignmentExpression */ :
                case 175 /* DivideAssignmentExpression */ :
                case 176 /* ModuloAssignmentExpression */ :
                case 177 /* AndAssignmentExpression */ :
                case 178 /* ExclusiveOrAssignmentExpression */ :
                case 179 /* OrAssignmentExpression */ :
                case 180 /* LeftShiftAssignmentExpression */ :
                case 181 /* SignedRightShiftAssignmentExpression */ :
                case 182 /* UnsignedRightShiftAssignmentExpression */ : {
                    return true;

                }
                default: {
                    return false;

                }
            }
        };
        ParserImpl.prototype.parseTerm = function (allowInvocation, insideObjectCreation) {
            var term = this.parseTermWorker(insideObjectCreation);
            if(term.isMissing()) {
                return term;
            }
            return this.parsePostFixExpression(term, allowInvocation);
        };
        ParserImpl.prototype.parsePostFixExpression = function (expression, allowInvocation) {
            Debug.assert(expression !== null);
            while(true) {
                var currentTokenKind = this.currentToken().tokenKind;
                switch(currentTokenKind) {
                    case 69 /* OpenParenToken */ : {
                        if(!allowInvocation) {
                            return expression;
                        }
                        expression = new InvocationExpressionSyntax(expression, this.parseArgumentList());
                        break;

                    }
                    case 71 /* OpenBracketToken */ : {
                        expression = this.parseElementAccessExpression(expression);
                        break;

                    }
                    case 90 /* PlusPlusToken */ :
                    case 91 /* MinusMinusToken */ : {
                        if(this.previousToken !== null && this.previousToken.hasTrailingNewLineTrivia()) {
                            return expression;
                        }
                        expression = new PostfixUnaryExpressionSyntax(SyntaxFacts.getPostfixUnaryExpressionFromOperatorToken(currentTokenKind), expression, this.eatAnyToken());
                        break;

                    }
                    case 73 /* DotToken */ : {
                        expression = new MemberAccessExpressionSyntax(expression, this.eatToken(73 /* DotToken */ ), this.parseIdentifierName());
                        break;

                    }
                    default: {
                        return expression;

                    }
                }
            }
        };
        ParserImpl.prototype.isArgumentList = function () {
            return this.currentToken().tokenKind === 69 /* OpenParenToken */ ;
        };
        ParserImpl.prototype.parseArgumentList = function () {
            Debug.assert(this.isArgumentList());
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var arguments = this.parseSeparatedSyntaxList(4096 /* ArgumentList_AssignmentExpressions */ );
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            return new ArgumentListSyntax(openParenToken, arguments, closeParenToken);
        };
        ParserImpl.prototype.parseElementAccessExpression = function (expression) {
            Debug.assert(this.currentToken().tokenKind === 71 /* OpenBracketToken */ );
            var openBracketToken = this.eatToken(71 /* OpenBracketToken */ );
            var argumentExpression = this.parseExpression(true);
            var closeBracketToken = this.eatToken(72 /* CloseBracketToken */ );
            return new ElementAccessExpressionSyntax(expression, openBracketToken, argumentExpression, closeBracketToken);
        };
        ParserImpl.prototype.parseTermWorker = function (insideObjectCreation) {
            var currentToken = this.currentToken();
            if(insideObjectCreation) {
                if(this.isType(false, false)) {
                    return this.parseType(true);
                }
            }
            if(currentToken.tokenKind === 82 /* EqualsGreaterThanToken */ ) {
                return this.parseSimpleArrowFunctionExpression();
            }
            if(this.isIdentifier(currentToken)) {
                if(this.isSimpleArrowFunctionExpression()) {
                    return this.parseSimpleArrowFunctionExpression();
                } else {
                    var identifier = this.eatIdentifierToken();
                    return new IdentifierNameSyntax(identifier);
                }
            }
            var currentTokenKind = currentToken.tokenKind;
            var currentTokenKeywordKind = currentToken.keywordKind();
            switch(currentTokenKeywordKind) {
                case 33 /* ThisKeyword */ : {
                    return this.parseThisExpression();

                }
                case 35 /* TrueKeyword */ :
                case 22 /* FalseKeyword */ : {
                    return this.parseLiteralExpression(165 /* BooleanLiteralExpression */ );

                }
                case 30 /* NullKeyword */ : {
                    return this.parseLiteralExpression(166 /* NullLiteralExpression */ );

                }
                case 29 /* NewKeyword */ : {
                    return this.parseObjectCreationExpression();

                }
                case 25 /* FunctionKeyword */ : {
                    return this.parseFunctionExpression();

                }
                case 48 /* SuperKeyword */ : {
                    return this.parseSuperExpression();

                }
                case 37 /* TypeOfKeyword */ : {
                    return this.parseTypeOfExpression();

                }
                case 19 /* DeleteKeyword */ : {
                    return this.parseDeleteExpression();

                }
                case 39 /* VoidKeyword */ : {
                    return this.parseVoidExpression();

                }
            }
            switch(currentTokenKind) {
                case 11 /* NumericLiteral */ : {
                    return this.parseLiteralExpression(167 /* NumericLiteralExpression */ );

                }
                case 10 /* RegularExpressionLiteral */ : {
                    return this.parseLiteralExpression(168 /* RegularExpressionLiteralExpression */ );

                }
                case 12 /* StringLiteral */ : {
                    return this.parseLiteralExpression(169 /* StringLiteralExpression */ );

                }
                case 71 /* OpenBracketToken */ : {
                    return this.parseArrayLiteralExpression();

                }
                case 67 /* OpenBraceToken */ : {
                    return this.parseObjectLiteralExpression();

                }
                case 69 /* OpenParenToken */ : {
                    return this.parseParenthesizedOrArrowFunctionExpression();

                }
                case 77 /* LessThanToken */ : {
                    return this.parseCastExpression();

                }
                case 115 /* SlashToken */ :
                case 116 /* SlashEqualsToken */ : {
                    var result = this.tryReparseDivideAsRegularExpression();
                    if(result !== null) {
                        return result;
                    }
                    break;

                }
            }
            return new IdentifierNameSyntax(this.eatIdentifierToken());
        };
        ParserImpl.prototype.tryReparseDivideAsRegularExpression = function () {
            var currentToken = this.currentToken();
            var currentTokenKind = currentToken.tokenKind;
            Debug.assert(currentTokenKind === 115 /* SlashToken */  || currentTokenKind === 116 /* SlashEqualsToken */ );
            if(this.previousToken !== null) {
                var previousTokenKind = this.previousToken.tokenKind;
                switch(previousTokenKind) {
                    case 9 /* IdentifierNameToken */ : {
                        var previousTokenKeywordKind = this.previousToken.keywordKind();
                        if(previousTokenKeywordKind === 0 /* None */  || previousTokenKeywordKind === 33 /* ThisKeyword */  || previousTokenKeywordKind === 35 /* TrueKeyword */  || previousTokenKeywordKind === 22 /* FalseKeyword */ ) {
                            return null;
                        }
                        break;

                    }
                    case 12 /* StringLiteral */ :
                    case 11 /* NumericLiteral */ :
                    case 10 /* RegularExpressionLiteral */ :
                    case 90 /* PlusPlusToken */ :
                    case 91 /* MinusMinusToken */ :
                    case 72 /* CloseBracketToken */ :
                    case 68 /* CloseBraceToken */ : {
                        return null;

                    }
                }
            }
            var slashTokenFullStart = this.currentTokenFullStart;
            var tokenDiagnosticsLength = this.tokenDiagnostics.length;
            while(tokenDiagnosticsLength > 0) {
                var diagnostic = this.tokenDiagnostics[tokenDiagnosticsLength - 1];
                if(diagnostic.position() >= slashTokenFullStart) {
                    tokenDiagnosticsLength--;
                } else {
                    break;
                }
            }
            this.tokenDiagnostics.length = tokenDiagnosticsLength;
            this.disgardAllItemsFromCurrentIndexOnwards();
            this._currentToken = null;
            this.scanner.setAbsoluteIndex(slashTokenFullStart);
            currentToken = this.currentTokenAllowingRegularExpression();
            Debug.assert(currentToken.tokenKind === 115 /* SlashToken */  || currentToken.tokenKind === 116 /* SlashEqualsToken */  || currentToken.tokenKind === 10 /* RegularExpressionLiteral */ );
            if(currentToken.tokenKind === 115 /* SlashToken */  || currentToken.tokenKind === 116 /* SlashEqualsToken */ ) {
                return null;
            } else {
                if(currentToken.tokenKind === 10 /* RegularExpressionLiteral */ ) {
                    return this.parseLiteralExpression(168 /* RegularExpressionLiteralExpression */ );
                } else {
                    throw Errors.invalidOperation();
                }
            }
        };
        ParserImpl.prototype.parseTypeOfExpression = function () {
            Debug.assert(this.currentToken().keywordKind() === 37 /* TypeOfKeyword */ );
            var typeOfKeyword = this.eatKeyword(37 /* TypeOfKeyword */ );
            var expression = this.parseUnaryExpression();
            return new TypeOfExpressionSyntax(typeOfKeyword, expression);
        };
        ParserImpl.prototype.parseDeleteExpression = function () {
            Debug.assert(this.currentToken().keywordKind() === 19 /* DeleteKeyword */ );
            var deleteKeyword = this.eatKeyword(19 /* DeleteKeyword */ );
            var expression = this.parseUnaryExpression();
            return new DeleteExpressionSyntax(deleteKeyword, expression);
        };
        ParserImpl.prototype.parseVoidExpression = function () {
            Debug.assert(this.currentToken().keywordKind() === 39 /* VoidKeyword */ );
            var voidKeyword = this.eatKeyword(39 /* VoidKeyword */ );
            var expression = this.parseUnaryExpression();
            return new VoidExpressionSyntax(voidKeyword, expression);
        };
        ParserImpl.prototype.parseSuperExpression = function () {
            Debug.assert(this.currentToken().keywordKind() === 48 /* SuperKeyword */ );
            var superKeyword = this.eatKeyword(48 /* SuperKeyword */ );
            return new SuperExpressionSyntax(superKeyword);
        };
        ParserImpl.prototype.parseFunctionExpression = function () {
            Debug.assert(this.currentToken().keywordKind() === 25 /* FunctionKeyword */ );
            var functionKeyword = this.eatKeyword(25 /* FunctionKeyword */ );
            var identifier = null;
            if(this.isIdentifier(this.currentToken())) {
                identifier = this.eatIdentifierToken();
            }
            var callSignature = this.parseCallSignature();
            var block = this.parseBlock();
            return new FunctionExpressionSyntax(functionKeyword, identifier, callSignature, block);
        };
        ParserImpl.prototype.parseCastExpression = function () {
            Debug.assert(this.currentToken().tokenKind === 77 /* LessThanToken */ );
            var lessThanToken = this.eatToken(77 /* LessThanToken */ );
            var type = this.parseType(false);
            var greaterThanToken = this.eatToken(78 /* GreaterThanToken */ );
            var expression = this.parseUnaryExpression();
            return new CastExpressionSyntax(lessThanToken, type, greaterThanToken, expression);
        };
        ParserImpl.prototype.parseObjectCreationExpression = function () {
            Debug.assert(this.currentToken().keywordKind() === 29 /* NewKeyword */ );
            var newKeyword = this.eatKeyword(29 /* NewKeyword */ );
            var expression = this.parseTerm(false, true);
            var argumentList = null;
            if(this.isArgumentList()) {
                argumentList = this.parseArgumentList();
            }
            return new ObjectCreationExpressionSyntax(newKeyword, expression, argumentList);
        };
        ParserImpl.prototype.parseParenthesizedOrArrowFunctionExpression = function () {
            Debug.assert(this.currentToken().tokenKind === 69 /* OpenParenToken */ );
            var result = this.tryParseArrowFunctionExpression();
            if(result !== null) {
                return result;
            }
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var expression = this.parseExpression(true);
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            return new ParenthesizedExpressionSyntax(openParenToken, expression, closeParenToken);
        };
        ParserImpl.prototype.tryParseArrowFunctionExpression = function () {
            Debug.assert(this.currentToken().tokenKind === 69 /* OpenParenToken */ );
            if(this.isDefinitelyArrowFunctionExpression()) {
                return this.parseParenthesizedArrowFunctionExpression(false);
            }
            if(!this.isPossiblyArrowFunctionExpression()) {
                return null;
            }
            var rewindPoint = this.getRewindPoint();
            try  {
                var arrowFunction = this.parseParenthesizedArrowFunctionExpression(true);
                if(arrowFunction === null) {
                    this.rewind(rewindPoint);
                }
                return arrowFunction;
            }finally {
                this.releaseRewindPoint(rewindPoint);
            }
        };
        ParserImpl.prototype.parseParenthesizedArrowFunctionExpression = function (requireArrow) {
            Debug.assert(this.currentToken().tokenKind === 69 /* OpenParenToken */ );
            var callSignature = this.parseCallSignature();
            if(requireArrow && this.currentToken().tokenKind !== 82 /* EqualsGreaterThanToken */ ) {
                return null;
            }
            var equalsGreaterThanToken = this.eatToken(82 /* EqualsGreaterThanToken */ );
            var body = this.parseArrowFunctionBody();
            return new ParenthesizedArrowFunctionExpressionSyntax(callSignature, equalsGreaterThanToken, body);
        };
        ParserImpl.prototype.parseArrowFunctionBody = function () {
            if(this.isBlock()) {
                return this.parseBlock();
            } else {
                return this.parseAssignmentExpression(true);
            }
        };
        ParserImpl.prototype.isSimpleArrowFunctionExpression = function () {
            if(this.currentToken().tokenKind === 82 /* EqualsGreaterThanToken */ ) {
                return true;
            }
            return this.isIdentifier(this.currentToken()) && this.peekTokenN(1).tokenKind === 82 /* EqualsGreaterThanToken */ ;
        };
        ParserImpl.prototype.parseSimpleArrowFunctionExpression = function () {
            Debug.assert(this.isSimpleArrowFunctionExpression());
            var identifier = this.eatIdentifierToken();
            var equalsGreaterThanToken = this.eatToken(82 /* EqualsGreaterThanToken */ );
            var body = this.parseArrowFunctionBody();
            return new SimpleArrowFunctionExpressionSyntax(identifier, equalsGreaterThanToken, body);
        };
        ParserImpl.prototype.isBlock = function () {
            return this.currentToken().tokenKind === 67 /* OpenBraceToken */ ;
        };
        ParserImpl.prototype.isDefinitelyArrowFunctionExpression = function () {
            Debug.assert(this.currentToken().tokenKind === 69 /* OpenParenToken */ );
            var token1 = this.peekTokenN(1);
            if(token1.tokenKind === 70 /* CloseParenToken */ ) {
                return true;
            }
            if(token1.tokenKind === 74 /* DotDotDotToken */ ) {
                return true;
            }
            if(!this.isIdentifier(token1)) {
                return false;
            }
            var token2 = this.peekTokenN(2);
            if(token2.tokenKind === 103 /* ColonToken */ ) {
                return true;
            }
            var token3 = this.peekTokenN(3);
            if(token2.tokenKind === 102 /* QuestionToken */ ) {
                if(token3.tokenKind === 103 /* ColonToken */  || token3.tokenKind === 70 /* CloseParenToken */  || token3.tokenKind === 76 /* CommaToken */ ) {
                    return true;
                }
            }
            if(token2.tokenKind === 70 /* CloseParenToken */ ) {
                if(token3.tokenKind === 82 /* EqualsGreaterThanToken */ ) {
                    return true;
                }
            }
            return false;
        };
        ParserImpl.prototype.isPossiblyArrowFunctionExpression = function () {
            Debug.assert(this.currentToken().tokenKind === 69 /* OpenParenToken */ );
            var token1 = this.peekTokenN(1);
            if(!this.isIdentifier(token1)) {
                return false;
            }
            var token2 = this.peekTokenN(2);
            if(token2.tokenKind === 104 /* EqualsToken */ ) {
                return true;
            }
            if(token2.tokenKind === 76 /* CommaToken */ ) {
                return true;
            }
            if(token2.tokenKind === 70 /* CloseParenToken */ ) {
                var token3 = this.peekTokenN(3);
                if(token3.tokenKind === 103 /* ColonToken */ ) {
                    return true;
                }
            }
            return false;
        };
        ParserImpl.prototype.parseObjectLiteralExpression = function () {
            Debug.assert(this.currentToken().tokenKind === 67 /* OpenBraceToken */ );
            var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
            var propertyAssignments = this.parseSeparatedSyntaxList(8192 /* ObjectLiteralExpression_PropertyAssignments */ );
            var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
            return new ObjectLiteralExpressionSyntax(openBraceToken, propertyAssignments, closeBraceToken);
        };
        ParserImpl.prototype.parsePropertyAssignment = function () {
            Debug.assert(this.isPropertyAssignment(false));
            if(this.isGetAccessorPropertyAssignment()) {
                return this.parseGetAccessorPropertyAssignment();
            } else {
                if(this.isSetAccessorPropertyAssignment()) {
                    return this.parseSetAccessorPropertyAssignment();
                } else {
                    if(this.isSimplePropertyAssignment(false)) {
                        return this.parseSimplePropertyAssignment();
                    } else {
                        throw Errors.invalidOperation();
                    }
                }
            }
        };
        ParserImpl.prototype.isPropertyAssignment = function (inErrorRecovery) {
            return this.isGetAccessorPropertyAssignment() || this.isSetAccessorPropertyAssignment() || this.isSimplePropertyAssignment(inErrorRecovery);
        };
        ParserImpl.prototype.isGetAccessorPropertyAssignment = function () {
            return this.currentToken().keywordKind() === 62 /* GetKeyword */  && this.isPropertyName(this.peekTokenN(1), false);
        };
        ParserImpl.prototype.parseGetAccessorPropertyAssignment = function () {
            Debug.assert(this.isGetAccessorPropertyAssignment());
            var getKeyword = this.eatKeyword(62 /* GetKeyword */ );
            var propertyName = this.eatAnyToken();
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            var block = this.parseBlock();
            return new GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, block);
        };
        ParserImpl.prototype.isSetAccessorPropertyAssignment = function () {
            return this.currentToken().keywordKind() === 65 /* SetKeyword */  && this.isPropertyName(this.peekTokenN(1), false);
        };
        ParserImpl.prototype.parseSetAccessorPropertyAssignment = function () {
            Debug.assert(this.isSetAccessorPropertyAssignment());
            var setKeyword = this.eatKeyword(65 /* SetKeyword */ );
            var propertyName = this.eatAnyToken();
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var parameterName = this.eatIdentifierToken();
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            var block = this.parseBlock();
            return new SetAccessorPropertyAssignmentSyntax(setKeyword, propertyName, openParenToken, parameterName, closeParenToken, block);
        };
        ParserImpl.prototype.isSimplePropertyAssignment = function (inErrorRecovery) {
            return this.isPropertyName(this.currentToken(), inErrorRecovery);
        };
        ParserImpl.prototype.parseSimplePropertyAssignment = function () {
            Debug.assert(this.isSimplePropertyAssignment(false));
            var propertyName = this.eatAnyToken();
            var colonToken = this.eatToken(103 /* ColonToken */ );
            var expression = this.parseAssignmentExpression(true);
            return new SimplePropertyAssignmentSyntax(propertyName, colonToken, expression);
        };
        ParserImpl.prototype.isPropertyName = function (token, inErrorRecovery) {
            switch(token.tokenKind) {
                case 9 /* IdentifierNameToken */ : {
                    if(inErrorRecovery) {
                        return !this.isKeyword(token.keywordKind());
                    } else {
                        return true;
                    }

                }
                case 12 /* StringLiteral */ :
                case 11 /* NumericLiteral */ : {
                    return true;

                }
                default: {
                    return false;

                }
            }
        };
        ParserImpl.prototype.parseArrayLiteralExpression = function () {
            Debug.assert(this.currentToken().tokenKind === 71 /* OpenBracketToken */ );
            var openBracketToken = this.eatToken(71 /* OpenBracketToken */ );
            var expressions = this.parseSeparatedSyntaxList(16384 /* ArrayLiteralExpression_AssignmentExpressions */ );
            var closeBracketToken = this.eatToken(72 /* CloseBracketToken */ );
            return new ArrayLiteralExpressionSyntax(openBracketToken, expressions, closeBracketToken);
        };
        ParserImpl.prototype.parseLiteralExpression = function (expressionKind) {
            var literal = this.eatAnyToken();
            return new LiteralExpressionSyntax(expressionKind, literal);
        };
        ParserImpl.prototype.parseThisExpression = function () {
            Debug.assert(this.currentToken().keywordKind() === 33 /* ThisKeyword */ );
            var thisKeyword = this.eatKeyword(33 /* ThisKeyword */ );
            return new ThisExpressionSyntax(thisKeyword);
        };
        ParserImpl.prototype.parseBlock = function () {
            var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
            var statements = Syntax.emptyList;
            if(!openBraceToken.isMissing()) {
                var savedIsInStrictMode = this.isInStrictMode;
                statements = this.parseSyntaxList(32 /* Block_Statements */ , ParserImpl.updateStrictModeState);
                this.isInStrictMode = savedIsInStrictMode;
            }
            var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
            return new BlockSyntax(openBraceToken, statements, closeBraceToken);
        };
        ParserImpl.prototype.parseCallSignature = function () {
            var parameterList = this.parseParameterList();
            var typeAnnotation = this.parseOptionalTypeAnnotation();
            return new CallSignatureSyntax(parameterList, typeAnnotation);
        };
        ParserImpl.prototype.parseParameterList = function () {
            var openParenToken = this.eatToken(69 /* OpenParenToken */ );
            var parameters = Syntax.emptySeparatedList;
            if(!openParenToken.isMissing()) {
                parameters = this.parseSeparatedSyntaxList(32768 /* ParameterList_Parameters */ );
            }
            var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
            return new ParameterListSyntax(openParenToken, parameters, closeParenToken);
        };
        ParserImpl.prototype.isTypeAnnotation = function () {
            return this.currentToken().tokenKind === 103 /* ColonToken */ ;
        };
        ParserImpl.prototype.parseOptionalTypeAnnotation = function () {
            return this.isTypeAnnotation() ? this.parseTypeAnnotation() : null;
        };
        ParserImpl.prototype.parseTypeAnnotation = function () {
            Debug.assert(this.isTypeAnnotation());
            var colonToken = this.eatToken(103 /* ColonToken */ );
            var type = this.parseType(false);
            return new TypeAnnotationSyntax(colonToken, type);
        };
        ParserImpl.prototype.isType = function (allowFunctionType, allowConstructorType) {
            return this.isPredefinedType() || this.isTypeLiteral(allowFunctionType, allowConstructorType) || this.isName();
        };
        ParserImpl.prototype.parseType = function (requireCompleteArraySuffix) {
            var type = this.parseNonArrayType();
            while(this.currentToken().tokenKind === 71 /* OpenBracketToken */ ) {
                if(requireCompleteArraySuffix && this.peekTokenN(1).tokenKind !== 72 /* CloseBracketToken */ ) {
                    break;
                }
                var openBracketToken = this.eatToken(71 /* OpenBracketToken */ );
                var closeBracketToken = this.eatToken(72 /* CloseBracketToken */ );
                type = new ArrayTypeSyntax(type, openBracketToken, closeBracketToken);
            }
            return type;
        };
        ParserImpl.prototype.parseNonArrayType = function () {
            if(this.isPredefinedType()) {
                return this.parsePredefinedType();
            } else {
                if(this.isTypeLiteral(true, true)) {
                    return this.parseTypeLiteral();
                } else {
                    return this.parseName();
                }
            }
        };
        ParserImpl.prototype.parseTypeLiteral = function () {
            Debug.assert(this.isTypeLiteral(true, true));
            if(this.isObjectType()) {
                return this.parseObjectType();
            } else {
                if(this.isFunctionType()) {
                    return this.parseFunctionType();
                } else {
                    if(this.isConstructorType()) {
                        return this.parseConstructorType();
                    } else {
                        throw Errors.invalidOperation();
                    }
                }
            }
        };
        ParserImpl.prototype.parseFunctionType = function () {
            Debug.assert(this.isFunctionType());
            var parameterList = this.parseParameterList();
            var equalsGreaterThanToken = this.eatToken(82 /* EqualsGreaterThanToken */ );
            var returnType = this.parseType(false);
            return new FunctionTypeSyntax(parameterList, equalsGreaterThanToken, returnType);
        };
        ParserImpl.prototype.parseConstructorType = function () {
            Debug.assert(this.isConstructorType());
            var newKeyword = this.eatKeyword(29 /* NewKeyword */ );
            var parameterList = this.parseParameterList();
            var equalsGreaterThanToken = this.eatToken(82 /* EqualsGreaterThanToken */ );
            var type = this.parseType(false);
            return new ConstructorTypeSyntax(newKeyword, parameterList, equalsGreaterThanToken, type);
        };
        ParserImpl.prototype.isTypeLiteral = function (allowFunctionType, allowConstructorType) {
            if(this.isObjectType()) {
                return true;
            }
            if(allowFunctionType && this.isFunctionType()) {
                return true;
            }
            if(allowConstructorType && this.isConstructorType()) {
                return true;
            }
            return false;
        };
        ParserImpl.prototype.isObjectType = function () {
            return this.currentToken().tokenKind === 67 /* OpenBraceToken */ ;
        };
        ParserImpl.prototype.isFunctionType = function () {
            return this.currentToken().tokenKind === 69 /* OpenParenToken */ ;
        };
        ParserImpl.prototype.isConstructorType = function () {
            return this.currentToken().keywordKind() === 29 /* NewKeyword */ ;
        };
        ParserImpl.prototype.parsePredefinedType = function () {
            Debug.assert(this.isPredefinedType());
            var keyword = this.eatAnyToken();
            return new PredefinedTypeSyntax(keyword);
        };
        ParserImpl.prototype.isPredefinedType = function () {
            switch(this.currentToken().keywordKind()) {
                case 58 /* AnyKeyword */ :
                case 64 /* NumberKeyword */ :
                case 59 /* BoolKeyword */ :
                case 66 /* StringKeyword */ :
                case 39 /* VoidKeyword */ : {
                    return true;

                }
            }
            return false;
        };
        ParserImpl.prototype.isParameter = function () {
            var token = this.currentToken();
            if(token.tokenKind === 74 /* DotDotDotToken */ ) {
                return true;
            }
            if(token.keywordKind() === 55 /* PublicKeyword */  || token.keywordKind() === 53 /* PrivateKeyword */ ) {
                return true;
            }
            return this.isIdentifier(token);
        };
        ParserImpl.prototype.parseParameter = function () {
            var dotDotDotToken = this.tryEatToken(74 /* DotDotDotToken */ );
            var publicOrPrivateToken = null;
            if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
                publicOrPrivateToken = this.eatAnyToken();
            }
            var identifier = this.eatIdentifierToken();
            var questionToken = this.tryEatToken(102 /* QuestionToken */ );
            var typeAnnotation = this.parseOptionalTypeAnnotation();
            var equalsValueClause = null;
            if(this.isEqualsValueClause()) {
                equalsValueClause = this.parseEqualsValuesClause(true);
            }
            return new ParameterSyntax(dotDotDotToken, publicOrPrivateToken, identifier, questionToken, typeAnnotation, equalsValueClause);
        };
        ParserImpl.prototype.parseSyntaxList = function (currentListType, processItems) {
            if (typeof processItems === "undefined") { processItems = null; }
            var savedListParsingState = this.listParsingState;
            this.listParsingState |= currentListType;
            var result = this.parseSyntaxListWorker(currentListType, processItems);
            this.listParsingState = savedListParsingState;
            return result;
        };
        ParserImpl.prototype.parseSeparatedSyntaxList = function (currentListType) {
            var savedListParsingState = this.listParsingState;
            this.listParsingState |= currentListType;
            var result = this.parseSeparatedSyntaxListWorker(currentListType);
            this.listParsingState = savedListParsingState;
            return result;
        };
        ParserImpl.prototype.abortParsingListOrMoveToNextToken = function (currentListType, itemCount) {
            this.reportUnexpectedTokenDiagnostic(currentListType);
            for(var state = ListParsingState.LastListParsingState; state >= ListParsingState.FirstListParsingState; state >>= 1) {
                if((this.listParsingState & state) !== 0) {
                    if(this.isExpectedListTerminator(state, itemCount) || this.isExpectedListItem(state, true)) {
                        return true;
                    }
                }
            }
            var token = this.currentToken();
            this.skippedTokens.push({
                skippedToken: token,
                owningToken: this.previousToken
            });
            this.moveToNextToken();
            return false;
        };
        ParserImpl.prototype.tryParseExpectedListItem = function (currentListType, inErrorRecovery, items, processItems) {
            if(this.isExpectedListItem(currentListType, inErrorRecovery)) {
                var item = this.parseExpectedListItem(currentListType);
                Debug.assert(item !== null);
                items = items || [];
                items.push(item);
                if(processItems !== null) {
                    processItems(this, items);
                }
            }
            return items;
        };
        ParserImpl.prototype.listIsTerminated = function (currentListType, itemCount) {
            return this.isExpectedListTerminator(currentListType, itemCount) || this.currentToken().tokenKind === 118 /* EndOfFileToken */ ;
        };
        ParserImpl.prototype.parseSyntaxListWorker = function (currentListType, processItems) {
            var items = null;
            while(true) {
                var itemsCount = items === null ? 0 : items.length;
                if(this.listIsTerminated(currentListType, itemsCount)) {
                    break;
                }
                items = this.tryParseExpectedListItem(currentListType, false, items, processItems);
                if(items !== null && items.length > itemsCount) {
                    continue;
                }
                var abort = this.abortParsingListOrMoveToNextToken(currentListType, itemsCount);
                if(abort) {
                    break;
                }
            }
            return Syntax.list(items);
        };
        ParserImpl.prototype.parseSeparatedSyntaxListWorker = function (currentListType) {
            var items = null;
            var allowTrailingSeparator = this.allowsTrailingSeparator(currentListType);
            var allowAutomaticSemicolonInsertion = this.allowsAutomaticSemicolonInsertion(currentListType);
            var requiresAtLeastOneItem = this.requiresAtLeastOneItem(currentListType);
            var separatorKind = this.separatorKind(currentListType);
            var lastSeparator = null;
            var inErrorRecovery = false;
            while(true) {
                var itemsCount = items === null ? 0 : items.length;
                if(this.listIsTerminated(currentListType, itemsCount)) {
                    if(lastSeparator !== null && !allowTrailingSeparator && !lastSeparator.isMissing()) {
                        Debug.assert(this.previousToken === lastSeparator);
                        this.addDiagnostic(new SyntaxDiagnostic(this.previousTokenStart(), lastSeparator.width(), 9 /* Trailing_separator_not_allowed */ , null));
                    }
                    break;
                }
                lastSeparator = null;
                items = this.tryParseExpectedListItem(currentListType, inErrorRecovery, items, null);
                inErrorRecovery = false;
                if(items !== null && items.length > itemsCount) {
                    if(this.currentToken().tokenKind !== separatorKind) {
                        if(this.listIsTerminated(currentListType, items.length)) {
                            break;
                        }
                        if(allowAutomaticSemicolonInsertion && this.canEatAutomaticSemicolon(false)) {
                            lastSeparator = this.eatExplicitOrAutomaticSemicolon(false);
                            items.push(lastSeparator);
                            continue;
                        }
                    }
                    lastSeparator = this.eatToken(separatorKind);
                    items.push(lastSeparator);
                    inErrorRecovery = lastSeparator.isMissing();
                    continue;
                }
                var abort = this.abortParsingListOrMoveToNextToken(currentListType, itemsCount);
                if(abort) {
                    break;
                }
            }
            if(requiresAtLeastOneItem && (items === null || items.length === 0)) {
                this.reportUnexpectedTokenDiagnostic(currentListType);
            }
            return Syntax.separatedList(items);
        };
        ParserImpl.prototype.allowsTrailingSeparator = function (currentListType) {
            switch(currentListType) {
                case 128 /* EnumDeclaration_VariableDeclarators */ :
                case 256 /* ObjectType_TypeMembers */ :
                case 8192 /* ObjectLiteralExpression_PropertyAssignments */ :
                case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                    return true;

                }
                case 512 /* ExtendsOrImplementsClause_TypeNameList */ :
                case 4096 /* ArgumentList_AssignmentExpressions */ :
                case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ :
                case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ :
                case 32768 /* ParameterList_Parameters */ : {
                    return false;

                }
                case 1 /* SourceUnit_ModuleElements */ :
                case 2 /* ClassDeclaration_ClassElements */ :
                case 4 /* ModuleDeclaration_ModuleElements */ :
                case 8 /* SwitchStatement_SwitchClauses */ :
                case 16 /* SwitchClause_Statements */ :
                case 32 /* Block_Statements */ :
                default: {
                    throw Errors.notYetImplemented();

                }
            }
        };
        ParserImpl.prototype.requiresAtLeastOneItem = function (currentListType) {
            switch(currentListType) {
                case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ :
                case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ :
                case 512 /* ExtendsOrImplementsClause_TypeNameList */ : {
                    return true;

                }
                case 256 /* ObjectType_TypeMembers */ :
                case 128 /* EnumDeclaration_VariableDeclarators */ :
                case 4096 /* ArgumentList_AssignmentExpressions */ :
                case 8192 /* ObjectLiteralExpression_PropertyAssignments */ :
                case 32768 /* ParameterList_Parameters */ :
                case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                    return false;

                }
                case 1 /* SourceUnit_ModuleElements */ :
                case 2 /* ClassDeclaration_ClassElements */ :
                case 4 /* ModuleDeclaration_ModuleElements */ :
                case 8 /* SwitchStatement_SwitchClauses */ :
                case 16 /* SwitchClause_Statements */ :
                case 32 /* Block_Statements */ :
                default: {
                    throw Errors.notYetImplemented();

                }
            }
        };
        ParserImpl.prototype.allowsAutomaticSemicolonInsertion = function (currentListType) {
            switch(currentListType) {
                case 256 /* ObjectType_TypeMembers */ : {
                    return true;

                }
                case 512 /* ExtendsOrImplementsClause_TypeNameList */ :
                case 128 /* EnumDeclaration_VariableDeclarators */ :
                case 4096 /* ArgumentList_AssignmentExpressions */ :
                case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ :
                case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ :
                case 8192 /* ObjectLiteralExpression_PropertyAssignments */ :
                case 32768 /* ParameterList_Parameters */ :
                case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                    return false;

                }
                case 1 /* SourceUnit_ModuleElements */ :
                case 2 /* ClassDeclaration_ClassElements */ :
                case 4 /* ModuleDeclaration_ModuleElements */ :
                case 8 /* SwitchStatement_SwitchClauses */ :
                case 16 /* SwitchClause_Statements */ :
                case 32 /* Block_Statements */ :
                default: {
                    throw Errors.notYetImplemented();

                }
            }
        };
        ParserImpl.prototype.separatorKind = function (currentListType) {
            switch(currentListType) {
                case 512 /* ExtendsOrImplementsClause_TypeNameList */ :
                case 4096 /* ArgumentList_AssignmentExpressions */ :
                case 128 /* EnumDeclaration_VariableDeclarators */ :
                case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ :
                case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ :
                case 8192 /* ObjectLiteralExpression_PropertyAssignments */ :
                case 32768 /* ParameterList_Parameters */ :
                case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                    return 76 /* CommaToken */ ;

                }
                case 256 /* ObjectType_TypeMembers */ : {
                    return 75 /* SemicolonToken */ ;

                }
                case 1 /* SourceUnit_ModuleElements */ :
                case 2 /* ClassDeclaration_ClassElements */ :
                case 4 /* ModuleDeclaration_ModuleElements */ :
                case 8 /* SwitchStatement_SwitchClauses */ :
                case 16 /* SwitchClause_Statements */ :
                case 32 /* Block_Statements */ :
                default: {
                    throw Errors.notYetImplemented();

                }
            }
        };
        ParserImpl.prototype.existingDiagnosticAtPosition = function (position) {
            return this.diagnostics.length > 0 && this.diagnostics[this.diagnostics.length - 1].position() === position;
        };
        ParserImpl.prototype.reportUnexpectedTokenDiagnostic = function (listType) {
            var token = this.currentToken();
            var diagnostic = new SyntaxDiagnostic(this.currentTokenStart(), token.width(), 8 /* Unexpected_token__0_expected */ , [
                this.getExpectedListElementType(listType)
            ]);
            this.addDiagnostic(diagnostic);
        };
        ParserImpl.prototype.addDiagnostic = function (diagnostic) {
            if(this.diagnostics.length > 0 && this.diagnostics[this.diagnostics.length - 1].position() === diagnostic.position()) {
                return;
            }
            this.diagnostics.push(diagnostic);
        };
        ParserImpl.prototype.isExpectedListTerminator = function (currentListType, itemCount) {
            switch(currentListType) {
                case 1 /* SourceUnit_ModuleElements */ : {
                    return this.isExpectedSourceUnit_ModuleElementsTerminator();

                }
                case 2 /* ClassDeclaration_ClassElements */ : {
                    return this.isExpectedClassDeclaration_ClassElementsTerminator();

                }
                case 4 /* ModuleDeclaration_ModuleElements */ : {
                    return this.isExpectedModuleDeclaration_ModuleElementsTerminator();

                }
                case 8 /* SwitchStatement_SwitchClauses */ : {
                    return this.isExpectedSwitchStatement_SwitchClausesTerminator();

                }
                case 16 /* SwitchClause_Statements */ : {
                    return this.isExpectedSwitchClause_StatementsTerminator();

                }
                case 32 /* Block_Statements */ : {
                    return this.isExpectedBlock_StatementsTerminator();

                }
                case 128 /* EnumDeclaration_VariableDeclarators */ : {
                    return this.isExpectedEnumDeclaration_VariableDeclaratorsTerminator();

                }
                case 256 /* ObjectType_TypeMembers */ : {
                    return this.isExpectedObjectType_TypeMembersTerminator();

                }
                case 4096 /* ArgumentList_AssignmentExpressions */ : {
                    return this.isExpectedArgumentList_AssignmentExpressionsTerminator();

                }
                case 512 /* ExtendsOrImplementsClause_TypeNameList */ : {
                    return this.isExpectedExtendsOrImplementsClause_TypeNameListTerminator();

                }
                case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ : {
                    return this.isExpectedVariableDeclaration_VariableDeclarators_AllowInTerminator(itemCount);

                }
                case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ : {
                    return this.isExpectedVariableDeclaration_VariableDeclarators_DisallowInTerminator();

                }
                case 8192 /* ObjectLiteralExpression_PropertyAssignments */ : {
                    return this.isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator();

                }
                case 32768 /* ParameterList_Parameters */ : {
                    return this.isExpectedParameterList_ParametersTerminator();

                }
                case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                    return this.isExpectedLiteralExpression_AssignmentExpressionsTerminator();

                }
                default: {
                    throw Errors.invalidOperation();

                }
            }
        };
        ParserImpl.prototype.isExpectedSourceUnit_ModuleElementsTerminator = function () {
            return this.currentToken().tokenKind === 118 /* EndOfFileToken */ ;
        };
        ParserImpl.prototype.isExpectedEnumDeclaration_VariableDeclaratorsTerminator = function () {
            return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
        };
        ParserImpl.prototype.isExpectedModuleDeclaration_ModuleElementsTerminator = function () {
            return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
        };
        ParserImpl.prototype.isExpectedObjectType_TypeMembersTerminator = function () {
            return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
        };
        ParserImpl.prototype.isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator = function () {
            return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
        };
        ParserImpl.prototype.isExpectedLiteralExpression_AssignmentExpressionsTerminator = function () {
            return this.currentToken().tokenKind === 72 /* CloseBracketToken */ ;
        };
        ParserImpl.prototype.isExpectedParameterList_ParametersTerminator = function () {
            var token = this.currentToken();
            if(token.tokenKind === 70 /* CloseParenToken */ ) {
                return true;
            }
            if(token.tokenKind === 67 /* OpenBraceToken */ ) {
                return true;
            }
            if(token.tokenKind === 82 /* EqualsGreaterThanToken */ ) {
                return true;
            }
            return false;
        };
        ParserImpl.prototype.isExpectedVariableDeclaration_VariableDeclarators_DisallowInTerminator = function () {
            if(this.currentToken().tokenKind === 75 /* SemicolonToken */  || this.currentToken().tokenKind === 70 /* CloseParenToken */ ) {
                return true;
            }
            if(this.currentToken().keywordKind() === 27 /* InKeyword */ ) {
                return true;
            }
            return false;
        };
        ParserImpl.prototype.isExpectedVariableDeclaration_VariableDeclarators_AllowInTerminator = function (itemCount) {
            if(this.previousToken.tokenKind === 76 /* CommaToken */ ) {
                return false;
            }
            if(this.currentToken().tokenKind === 82 /* EqualsGreaterThanToken */ ) {
                return true;
            }
            return itemCount > 0 && this.canEatExplicitOrAutomaticSemicolon(false);
        };
        ParserImpl.prototype.isExpectedExtendsOrImplementsClause_TypeNameListTerminator = function () {
            if(this.currentToken().keywordKind() === 46 /* ExtendsKeyword */  || this.currentToken().keywordKind() === 49 /* ImplementsKeyword */ ) {
                return true;
            }
            if(this.currentToken().tokenKind === 67 /* OpenBraceToken */  || this.currentToken().tokenKind === 68 /* CloseBraceToken */ ) {
                return true;
            }
            return false;
        };
        ParserImpl.prototype.isExpectedArgumentList_AssignmentExpressionsTerminator = function () {
            return this.currentToken().tokenKind === 70 /* CloseParenToken */ ;
        };
        ParserImpl.prototype.isExpectedClassDeclaration_ClassElementsTerminator = function () {
            return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
        };
        ParserImpl.prototype.isExpectedSwitchStatement_SwitchClausesTerminator = function () {
            return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
        };
        ParserImpl.prototype.isExpectedSwitchClause_StatementsTerminator = function () {
            return this.currentToken().tokenKind === 68 /* CloseBraceToken */  || this.isSwitchClause();
        };
        ParserImpl.prototype.isExpectedBlock_StatementsTerminator = function () {
            return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
        };
        ParserImpl.prototype.isExpectedListItem = function (currentListType, inErrorRecovery) {
            switch(currentListType) {
                case 1 /* SourceUnit_ModuleElements */ : {
                    return this.isModuleElement();

                }
                case 2 /* ClassDeclaration_ClassElements */ : {
                    return this.isClassElement();

                }
                case 4 /* ModuleDeclaration_ModuleElements */ : {
                    return this.isModuleElement();

                }
                case 8 /* SwitchStatement_SwitchClauses */ : {
                    return this.isSwitchClause();

                }
                case 16 /* SwitchClause_Statements */ : {
                    return this.isStatement(true);

                }
                case 32 /* Block_Statements */ : {
                    return this.isStatement(true);

                }
                case 128 /* EnumDeclaration_VariableDeclarators */ :
                case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ :
                case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ : {
                    return this.isVariableDeclarator();

                }
                case 256 /* ObjectType_TypeMembers */ : {
                    return this.isTypeMember();

                }
                case 4096 /* ArgumentList_AssignmentExpressions */ : {
                    return this.isExpression();

                }
                case 512 /* ExtendsOrImplementsClause_TypeNameList */ : {
                    return this.isName();

                }
                case 8192 /* ObjectLiteralExpression_PropertyAssignments */ : {
                    return this.isPropertyAssignment(inErrorRecovery);

                }
                case 32768 /* ParameterList_Parameters */ : {
                    return this.isParameter();

                }
                case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                    return this.isAssignmentOrOmittedExpression();

                }
                default: {
                    throw Errors.invalidOperation();

                }
            }
        };
        ParserImpl.prototype.parseExpectedListItem = function (currentListType) {
            switch(currentListType) {
                case 1 /* SourceUnit_ModuleElements */ : {
                    return this.parseModuleElement();

                }
                case 2 /* ClassDeclaration_ClassElements */ : {
                    return this.parseClassElement();

                }
                case 4 /* ModuleDeclaration_ModuleElements */ : {
                    return this.parseModuleElement();

                }
                case 8 /* SwitchStatement_SwitchClauses */ : {
                    return this.parseSwitchClause();

                }
                case 16 /* SwitchClause_Statements */ : {
                    return this.parseStatement(false);

                }
                case 32 /* Block_Statements */ : {
                    return this.parseStatement(true);

                }
                case 128 /* EnumDeclaration_VariableDeclarators */ : {
                    return this.parseVariableDeclarator(true);

                }
                case 256 /* ObjectType_TypeMembers */ : {
                    return this.parseTypeMember();

                }
                case 4096 /* ArgumentList_AssignmentExpressions */ : {
                    return this.parseAssignmentExpression(true);

                }
                case 512 /* ExtendsOrImplementsClause_TypeNameList */ : {
                    return this.parseName();

                }
                case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ : {
                    return this.parseVariableDeclarator(true);

                }
                case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ : {
                    return this.parseVariableDeclarator(false);

                }
                case 8192 /* ObjectLiteralExpression_PropertyAssignments */ : {
                    return this.parsePropertyAssignment();

                }
                case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                    return this.parseAssignmentOrOmittedExpression();

                }
                case 32768 /* ParameterList_Parameters */ : {
                    return this.parseParameter();

                }
                default: {
                    throw Errors.invalidOperation();

                }
            }
        };
        ParserImpl.prototype.getExpectedListElementType = function (currentListType) {
            switch(currentListType) {
                case 1 /* SourceUnit_ModuleElements */ : {
                    return Strings.module__class__interface__enum__import_or_statement;

                }
                case 2 /* ClassDeclaration_ClassElements */ : {
                    return Strings.constructor__function__accessor_or_variable;

                }
                case 4 /* ModuleDeclaration_ModuleElements */ : {
                    return Strings.module__class__interface__enum__import_or_statement;

                }
                case 8 /* SwitchStatement_SwitchClauses */ : {
                    return Strings.case_or_default_clause;

                }
                case 16 /* SwitchClause_Statements */ : {
                    return Strings.statement;

                }
                case 32 /* Block_Statements */ : {
                    return Strings.statement;

                }
                case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ :
                case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ :
                case 128 /* EnumDeclaration_VariableDeclarators */ : {
                    return Strings.identifier;

                }
                case 256 /* ObjectType_TypeMembers */ : {
                    return Strings.call__construct__index__property_or_function_signature;

                }
                case 4096 /* ArgumentList_AssignmentExpressions */ : {
                    return Strings.expression;

                }
                case 512 /* ExtendsOrImplementsClause_TypeNameList */ : {
                    return Strings.type_name;

                }
                case 8192 /* ObjectLiteralExpression_PropertyAssignments */ : {
                    return Strings.property_or_accessor;

                }
                case 32768 /* ParameterList_Parameters */ : {
                    return Strings.parameter;

                }
                case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                    return Strings.expression;

                }
                default: {
                    throw Errors.invalidOperation();

                }
            }
        };
        return ParserImpl;
    })(SlidingWindow);    
    function parse(text, languageVersion, stringTable) {
        if (typeof languageVersion === "undefined") { languageVersion = 1 /* EcmaScript5 */ ; }
        if (typeof stringTable === "undefined") { stringTable = null; }
        return new ParserImpl(text, languageVersion, stringTable).parseSyntaxTree();
    }
    Parser.parse = parse;
})(Parser || (Parser = {}));

var Environment = (function () {
    function getWindowsScriptHostEnvironment() {
        try  {
            var fso = new ActiveXObject("Scripting.FileSystemObject");
        } catch (e) {
            return null;
        }
        var streamObjectPool = [];
        function getStreamObject() {
            if(streamObjectPool.length > 0) {
                return streamObjectPool.pop();
            } else {
                return new ActiveXObject("ADODB.Stream");
            }
        }
        function releaseStreamObject(obj) {
            streamObjectPool.push(obj);
        }
        var args = [];
        for(var i = 0; i < WScript.Arguments.length; i++) {
            args[i] = WScript.Arguments.Item(i);
        }
        return {
            readFile: function (path, useUTF8) {
                if (typeof useUTF8 === "undefined") { useUTF8 = false; }
                try  {
                    var streamObj = getStreamObject();
                    streamObj.Open();
                    streamObj.Type = 2;
                    streamObj.Charset = 'x-ansi';
                    streamObj.LoadFromFile(path);
                    var bomChar = streamObj.ReadText(2);
                    streamObj.Position = 0;
                    if((bomChar.charCodeAt(0) === 254 && bomChar.charCodeAt(1) === 255) || (bomChar.charCodeAt(0) === 255 && bomChar.charCodeAt(1) === 254)) {
                        streamObj.Charset = 'unicode';
                    } else {
                        if(bomChar.charCodeAt(0) === 239 && bomChar.charCodeAt(1) === 187) {
                            streamObj.Charset = 'utf-8';
                        } else {
                            streamObj.Charset = useUTF8 ? 'utf-8' : 'x-ansi';
                        }
                    }
                    var str = streamObj.ReadText(-1);
                    streamObj.Close();
                    releaseStreamObject(streamObj);
                    return str;
                } catch (err) {
                    throw new Error("Error reading file \"" + path + "\": " + err.message);
                }
            },
            writeFile: function (path, contents, useUTF8) {
                if (typeof useUTF8 === "undefined") { useUTF8 = false; }
                var file = this.createFile(path, useUTF8);
                file.Write(contents);
                file.Close();
            },
            fileExists: function (path) {
                return fso.FileExists(path);
            },
            deleteFile: function (path) {
                if(fso.FileExists(path)) {
                    fso.DeleteFile(path, true);
                }
            },
            directoryExists: function (path) {
                return fso.FolderExists(path);
            },
            listFiles: function (path, spec, options) {
                options = options || {
                };
                function filesInFolder(folder, root) {
                    var paths = [];
                    var fc;
                    if(options.recursive) {
                        fc = new Enumerator(folder.subfolders);
                        for(; !fc.atEnd(); fc.moveNext()) {
                            paths = paths.concat(filesInFolder(fc.item(), root + "\\" + fc.item().Name));
                        }
                    }
                    fc = new Enumerator(folder.files);
                    for(; !fc.atEnd(); fc.moveNext()) {
                        if(!spec || fc.item().Name.match(spec)) {
                            paths.push(root + "\\" + fc.item().Name);
                        }
                    }
                    return paths;
                }
                var folder = fso.GetFolder(path);
                var paths = [];
                return filesInFolder(folder, path);
            },
            createFile: function (path, useUTF8) {
                if (typeof useUTF8 === "undefined") { useUTF8 = false; }
                try  {
                    var streamObj = getStreamObject();
                    streamObj.Charset = useUTF8 ? 'utf-8' : 'x-ansi';
                    streamObj.Open();
                    return {
                        Write: function (str) {
                            streamObj.WriteText(str, 0);
                        },
                        WriteLine: function (str) {
                            streamObj.WriteText(str, 1);
                        },
                        Close: function () {
                            streamObj.SaveToFile(path, 2);
                            streamObj.Close();
                            releaseStreamObject(streamObj);
                        }
                    };
                } catch (ex) {
                    WScript.StdErr.WriteLine("Couldn't write to file '" + path + "'");
                    throw ex;
                }
            },
            arguments: args,
            standardOut: WScript.StdOut
        };
    }
    ; ;
    function getNodeEnvironment() {
        var _fs = require('fs');
        var _path = require('path');
        var _module = require('module');
        return {
            readFile: function (file, useUTF8) {
                var buffer = _fs.readFileSync(file);
                switch(buffer[0]) {
                    case 254: {
                        if(buffer[1] == 255) {
                            var i = 0;
                            while((i + 1) < buffer.length) {
                                var temp = buffer[i];
                                buffer[i] = buffer[i + 1];
                                buffer[i + 1] = temp;
                                i += 2;
                            }
                            return buffer.toString("ucs2", 2);
                        }
                        break;

                    }
                    case 255: {
                        if(buffer[1] == 254) {
                            return buffer.toString("ucs2", 2);
                        }
                        break;

                    }
                    case 239: {
                        if(buffer[1] == 187) {
                            return buffer.toString("utf8", 3);
                        }

                    }
                }
                return useUTF8 ? buffer.toString("utf8", 0) : buffer.toString();
            },
            writeFile: function (path, contents, useUTF) {
                if(useUTF) {
                    _fs.writeFileSync(path, contents, "utf8");
                } else {
                    _fs.writeFileSync(path, contents);
                }
            },
            fileExists: function (path) {
                return _fs.existsSync(path);
            },
            deleteFile: function (path) {
                try  {
                    _fs.unlinkSync(path);
                } catch (e) {
                }
            },
            directoryExists: function (path) {
                return _fs.existsSync(path) && _fs.lstatSync(path).isDirectory();
            },
            listFiles: function dir(path, spec, options) {
                options = options || {
                };
                function filesInFolder(folder) {
                    var paths = [];
                    var files = _fs.readdirSync(folder);
                    for(var i = 0; i < files.length; i++) {
                        var stat = _fs.statSync(folder + "\\" + files[i]);
                        if(options.recursive && stat.isDirectory()) {
                            paths = paths.concat(filesInFolder(folder + "\\" + files[i]));
                        } else {
                            if(stat.isFile() && (!spec || files[i].match(spec))) {
                                paths.push(folder + "\\" + files[i]);
                            }
                        }
                    }
                    return paths;
                }
                return filesInFolder(path);
            },
            createFile: function (path, useUTF8) {
                function mkdirRecursiveSync(path) {
                    var stats = _fs.statSync(path);
                    if(stats.isFile()) {
                        throw "\"" + path + "\" exists but isn't a directory.";
                    } else {
                        if(stats.isDirectory()) {
                            return;
                        } else {
                            mkdirRecursiveSync(_path.dirname(path));
                            _fs.mkdirSync(path, 509);
                        }
                    }
                }
                mkdirRecursiveSync(_path.dirname(path));
                var fd = _fs.openSync(path, 'w');
                return {
                    Write: function (str) {
                        _fs.writeSync(fd, str);
                    },
                    WriteLine: function (str) {
                        _fs.writeSync(fd, str + '\r\n');
                    },
                    Close: function () {
                        _fs.closeSync(fd);
                        fd = null;
                    }
                };
            },
            arguments: process.argv.slice(2),
            standardOut: {
                Write: function (str) {
                    process.stdout.write(str);
                },
                WriteLine: function (str) {
                    process.stdout.write(str + '\n');
                },
                Close: function () {
                }
            }
        };
    }
    ; ;
    if(typeof ActiveXObject === "function") {
        return getWindowsScriptHostEnvironment();
    } else {
        if(typeof require === "function") {
            return getNodeEnvironment();
        } else {
            return null;
        }
    }
})();
var TextFactory;
(function (TextFactory) {
    function getLengthOfLineBreakSlow(text, index, c) {
        if(c === 13 /* carriageReturn */ ) {
            var next = index + 1;
            return (next < text.length()) && 10 /* lineFeed */  === text.charCodeAt(next) ? 2 : 1;
        } else {
            if(isAnyLineBreakCharacter(c)) {
                return 1;
            } else {
                return 0;
            }
        }
    }
    function getLengthOfLineBreak(text, index) {
        var c = text.charCodeAt(index);
        if(c > 13 /* carriageReturn */  && c <= 127) {
            return 0;
        }
        return getLengthOfLineBreakSlow(text, index, c);
    }
    function isAnyLineBreakCharacter(c) {
        return c === 10 /* lineFeed */  || c === 13 /* carriageReturn */  || c === 133 /* nextLine */  || c === 8232 /* lineSeparator */  || c === 8233 /* paragraphSeparator */ ;
    }
    function getStartAndLengthOfLineBreakEndingAt(text, index, info) {
        var c = text.charCodeAt(index);
        if(c === 10 /* lineFeed */ ) {
            if(index > 0 && text.charCodeAt(index - 1) === 13 /* carriageReturn */ ) {
                info.startPosition = index - 1;
                info.length = 2;
            } else {
                info.startPosition = index;
                info.length = 1;
            }
        } else {
            if(isAnyLineBreakCharacter(c)) {
                info.startPosition = index;
                info.length = 1;
            } else {
                info.startPosition = index + 1;
                info.length = 0;
            }
        }
    }
    var LinebreakInfo = (function () {
        function LinebreakInfo(startPosition, length) {
            this.startPosition = startPosition;
            this.length = length;
        }
        return LinebreakInfo;
    })();    
    var TextLine = (function () {
        function TextLine(text, body, lineBreakLength, lineNumber) {
            this._text = null;
            this._textSpan = null;
            Contract.throwIfNull(text);
            Contract.throwIfFalse(lineBreakLength >= 0);
            Contract.requires(lineNumber >= 0);
            this._text = text;
            this._textSpan = body;
            this._lineBreakLength = lineBreakLength;
            this._lineNumber = lineNumber;
        }
        TextLine.prototype.start = function () {
            return this._textSpan.start();
        };
        TextLine.prototype.end = function () {
            return this._textSpan.end();
        };
        TextLine.prototype.endIncludingLineBreak = function () {
            return this.end() + this._lineBreakLength;
        };
        TextLine.prototype.extent = function () {
            return this._textSpan;
        };
        TextLine.prototype.extentIncludingLineBreak = function () {
            return TextSpan.fromBounds(this.start(), this.endIncludingLineBreak());
        };
        TextLine.prototype.toString = function () {
            return this._text.toString(this._textSpan);
        };
        TextLine.prototype.lineNumber = function () {
            return this._lineNumber;
        };
        return TextLine;
    })();    
    var TextBase = (function () {
        function TextBase() {
            this.lazyLineStarts = null;
            this.linebreakInfo = new LinebreakInfo(0, 0);
            this.lastLineFoundForPosition = null;
        }
        TextBase.prototype.length = function () {
            throw Errors.abstract();
        };
        TextBase.prototype.charCodeAt = function (position) {
            throw Errors.abstract();
        };
        TextBase.prototype.checkSubSpan = function (span) {
            if(span.start() < 0 || span.start() > this.length() || span.end() > this.length()) {
                throw Errors.argumentOutOfRange("span");
            }
        };
        TextBase.prototype.toString = function (span) {
            if (typeof span === "undefined") { span = null; }
            throw Errors.abstract();
        };
        TextBase.prototype.subText = function (span) {
            this.checkSubSpan(span);
            return new SubText(this, span);
        };
        TextBase.prototype.substr = function (start, length, intern) {
            throw Errors.abstract();
        };
        TextBase.prototype.copyTo = function (sourceIndex, destination, destinationIndex, count) {
            throw Errors.abstract();
        };
        TextBase.prototype.lineCount = function () {
            return this.lineStarts().length;
        };
        TextBase.prototype.lines = function () {
            var lines = [];
            var length = this.lineCount();
            for(var i = 0; i < length; ++i) {
                lines[i] = this.getLineFromLineNumber(i);
            }
            return lines;
        };
        TextBase.prototype.lineStarts = function () {
            if(this.lazyLineStarts === null) {
                this.lazyLineStarts = this.parseLineStarts();
            }
            return this.lazyLineStarts;
        };
        TextBase.prototype.getLineFromLineNumber = function (lineNumber) {
            var lineStarts = this.lineStarts();
            if(lineNumber < 0 || lineNumber >= lineStarts.length) {
                throw Errors.argumentOutOfRange("lineNumber");
            }
            var first = lineStarts[lineNumber];
            if(lineNumber === lineStarts.length - 1) {
                return new TextLine(this, new TextSpan(first, this.length() - first), 0, lineNumber);
            } else {
                getStartAndLengthOfLineBreakEndingAt(this, lineStarts[lineNumber + 1] - 1, this.linebreakInfo);
                return new TextLine(this, new TextSpan(first, this.linebreakInfo.startPosition - first), this.linebreakInfo.length, lineNumber);
            }
        };
        TextBase.prototype.getLineFromPosition = function (position) {
            var lastFound = this.lastLineFoundForPosition;
            if(lastFound !== null && lastFound.start() <= position && lastFound.endIncludingLineBreak() > position) {
                return lastFound;
            }
            var lineNumber = this.getLineNumberFromPosition(position);
            var result = this.getLineFromLineNumber(lineNumber);
            this.lastLineFoundForPosition = result;
            return result;
        };
        TextBase.prototype.getLineNumberFromPosition = function (position) {
            if(position < 0 || position > this.length()) {
                throw Errors.argumentOutOfRange("position");
            }
            if(position === this.length()) {
                return this.lineCount() - 1;
            }
            var lineNumber = ArrayUtilities.binarySearch(this.lineStarts(), position);
            if(lineNumber < 0) {
                lineNumber = (~lineNumber) - 1;
            }
            return lineNumber;
        };
        TextBase.prototype.getLinePosition = function (position) {
            if(position < 0 || position > this.length()) {
                throw Errors.argumentOutOfRange("position");
            }
            var lineNumber = this.getLineNumberFromPosition(position);
            return new LinePosition(lineNumber, position - this.lineStarts()[lineNumber]);
        };
        TextBase.prototype.parseLineStarts = function () {
            var length = this.length();
            if(0 === this.length()) {
                var result = [];
                result.push(0);
                return result;
            }
            var position = 0;
            var index = 0;
            var arrayBuilder = [];
            var lineNumber = 0;
            while(index < length) {
                var c = this.charCodeAt(index);
                var lineBreakLength;
                if(c > 13 /* carriageReturn */  && c <= 127) {
                    index++;
                    continue;
                } else {
                    if(c === 13 /* carriageReturn */  && index + 1 < length && this.charCodeAt(index + 1) === 10 /* lineFeed */ ) {
                        lineBreakLength = 2;
                    } else {
                        if(c === 10 /* lineFeed */ ) {
                            lineBreakLength = 1;
                        } else {
                            lineBreakLength = getLengthOfLineBreak(this, index);
                        }
                    }
                }
                if(0 === lineBreakLength) {
                    index++;
                } else {
                    arrayBuilder.push(position);
                    index += lineBreakLength;
                    position = index;
                    lineNumber++;
                }
            }
            arrayBuilder.push(position);
            return arrayBuilder;
        };
        return TextBase;
    })();    
    var SubText = (function (_super) {
        __extends(SubText, _super);
        function SubText(text, span) {
                _super.call(this);
            this.text = null;
            this.span = null;
            if(text === null) {
                throw Errors.argumentNull("text");
            }
            if(span.start() < 0 || span.start() >= text.length() || span.end() < 0 || span.end() > text.length()) {
                throw Errors.argument("span");
            }
            this.text = text;
            this.span = span;
        }
        SubText.prototype.length = function () {
            return this.span.length();
        };
        SubText.prototype.charCodeAt = function (position) {
            if(position < 0 || position > this.length()) {
                throw Errors.argumentOutOfRange("position");
            }
            return this.text.charCodeAt(this.span.start() + position);
        };
        SubText.prototype.subText = function (span) {
            this.checkSubSpan(span);
            return new SubText(this.text, this.getCompositeSpan(span.start(), span.length()));
        };
        SubText.prototype.copyTo = function (sourceIndex, destination, destinationIndex, count) {
            var span = this.getCompositeSpan(sourceIndex, count);
            this.text.copyTo(span.start(), destination, destinationIndex, span.length());
        };
        SubText.prototype.getCompositeSpan = function (start, length) {
            var compositeStart = MathPrototype.min(this.text.length(), this.span.start() + start);
            var compositeEnd = MathPrototype.min(this.text.length(), compositeStart + length);
            return new TextSpan(compositeStart, compositeEnd - compositeStart);
        };
        return SubText;
    })(TextBase);    
    var StringText = (function (_super) {
        __extends(StringText, _super);
        function StringText(data) {
                _super.call(this);
            this.source = null;
            if(data === null) {
                throw Errors.argumentNull("data");
            }
            this.source = data;
        }
        StringText.prototype.length = function () {
            return this.source.length;
        };
        StringText.prototype.charCodeAt = function (position) {
            if(position < 0 || position >= this.source.length) {
                throw Errors.argumentOutOfRange("position");
            }
            return this.source.charCodeAt(position);
        };
        StringText.prototype.substr = function (start, length, intern) {
            return this.source.substr(start, length);
        };
        StringText.prototype.toString = function (span) {
            if (typeof span === "undefined") { span = null; }
            if(span === null) {
                span = new TextSpan(0, this.length());
            }
            this.checkSubSpan(span);
            if(span.start() === 0 && span.length() === this.length()) {
                return this.source;
            }
            return this.source.substr(span.start(), span.length());
        };
        StringText.prototype.copyTo = function (sourceIndex, destination, destinationIndex, count) {
            return StringUtilities.copyTo(this.source, sourceIndex, destination, destinationIndex, count);
        };
        return StringText;
    })(TextBase);    
    function create(value) {
        return new StringText(value);
    }
    TextFactory.create = create;
})(TextFactory || (TextFactory = {}));
var negative262ExpectedResults = {
    'Sbp_12.5_A9_T3.js': false,
    'Sbp_12.6.1_A13_T3.js': false,
    'Sbp_12.6.2_A13_T3.js': false,
    'Sbp_12.6.4_A13_T3.js': false,
    'Sbp_7.8.4_A6.1_T4.js': false,
    'Sbp_7.8.4_A6.2_T1.js': false,
    'Sbp_7.8.4_A6.2_T2.js': false,
    'Sbp_A1_T1.js': true,
    'Sbp_A2_T1.js': true,
    'Sbp_A2_T2.js': true,
    'Sbp_A3_T1.js': true,
    'Sbp_A3_T2.js': true,
    'Sbp_A4_T1.js': true,
    'Sbp_A4_T2.js': true,
    'Sbp_A5_T1.js': true,
    'Sbp_A5_T2.js': true,
    'S7.2_A5_T1.js': false,
    'S7.2_A5_T2.js': false,
    'S7.2_A5_T3.js': false,
    'S7.2_A5_T4.js': false,
    'S7.2_A5_T5.js': false,
    'S7.3_A2.1_T1.js': true,
    'S7.3_A2.1_T2.js': false,
    'S7.3_A2.2_T1.js': true,
    'S7.3_A2.2_T2.js': false,
    'S7.3_A2.3.js': true,
    'S7.3_A2.4.js': true,
    'S7.3_A3.1_T1.js': true,
    'S7.3_A3.1_T2.js': true,
    'S7.3_A3.1_T3.js': false,
    'S7.3_A3.2_T1.js': true,
    'S7.3_A3.2_T2.js': true,
    'S7.3_A3.2_T3.js': false,
    'S7.3_A3.3_T1.js': true,
    'S7.3_A3.3_T2.js': true,
    'S7.3_A3.4_T1.js': true,
    'S7.3_A3.4_T2.js': true,
    'S7.3_A6_T1.js': false,
    'S7.3_A6_T2.js': false,
    'S7.3_A6_T3.js': false,
    'S7.3_A6_T4.js': false,
    'S7.4_A2_T2.js': false,
    'S7.4_A3.js': false,
    'S7.4_A4_T1.js': false,
    'S7.4_A4_T4.js': false,
    'S7.6.1.1_A1.1.js': false,
    'S7.6.1.1_A1.10.js': false,
    'S7.6.1.1_A1.11.js': false,
    'S7.6.1.1_A1.12.js': false,
    'S7.6.1.1_A1.13.js': false,
    'S7.6.1.1_A1.14.js': false,
    'S7.6.1.1_A1.15.js': false,
    'S7.6.1.1_A1.16.js': false,
    'S7.6.1.1_A1.17.js': false,
    'S7.6.1.1_A1.18.js': true,
    'S7.6.1.1_A1.19.js': false,
    'S7.6.1.1_A1.2.js': false,
    'S7.6.1.1_A1.20.js': false,
    'S7.6.1.1_A1.21.js': false,
    'S7.6.1.1_A1.22.js': false,
    'S7.6.1.1_A1.23.js': false,
    'S7.6.1.1_A1.24.js': false,
    'S7.6.1.1_A1.25.js': false,
    'S7.6.1.1_A1.3.js': false,
    'S7.6.1.1_A1.4.js': false,
    'S7.6.1.1_A1.5.js': false,
    'S7.6.1.1_A1.6.js': false,
    'S7.6.1.1_A1.7.js': false,
    'S7.6.1.1_A1.8.js': false,
    'S7.6.1.1_A1.9.js': false,
    'S7.6.1.2_A1.10.js': false,
    'S7.6.1.2_A1.11.js': false,
    'S7.6.1.2_A1.15.js': false,
    'S7.6.1.2_A1.16.js': false,
    'S7.6.1.2_A1.18.js': false,
    'S7.6.1.2_A1.21.js': false,
    'S7.6.1.2_A1.22.js': false,
    'S7.6.1.2_A1.23.js': false,
    'S7.6.1.2_A1.24.js': false,
    'S7.6.1.2_A1.26.js': false,
    'S7.6.1.2_A1.27.js': false,
    'S7.6.1.2_A1.5.js': false,
    'S7.6.1.2_A1.6.js': false,
    'S7.6.1.2_A1.7.js': false,
    'S7.6.1.2_A1.9.js': false,
    '7.6.1.2-1gs.js': false,
    'S7.6.1_A1.1.js': true,
    'S7.6.1_A1.2.js': true,
    'S7.6.1_A1.3.js': true,
    'S7.7_A2_T1.js': false,
    'S7.7_A2_T10.js': false,
    'S7.7_A2_T2.js': false,
    'S7.7_A2_T3.js': false,
    'S7.7_A2_T4.js': false,
    'S7.7_A2_T5.js': false,
    'S7.7_A2_T6.js': false,
    'S7.7_A2_T7.js': false,
    'S7.7_A2_T8.js': false,
    'S7.7_A2_T9.js': false,
    '7.8.3-1gs.js': true,
    '7.8.3-2gs.js': true,
    '7.8.3-3gs.js': true,
    'S7.8.3_A4.1_T1.js': true,
    'S7.8.3_A4.1_T2.js': true,
    'S7.8.3_A4.1_T3.js': true,
    'S7.8.3_A4.1_T4.js': true,
    'S7.8.3_A4.1_T5.js': true,
    'S7.8.3_A4.1_T6.js': true,
    'S7.8.3_A4.1_T7.js': true,
    'S7.8.3_A4.1_T8.js': true,
    'S7.8.3_A6.1_T1.js': false,
    'S7.8.3_A6.1_T2.js': false,
    'S7.8.3_A6.2_T1.js': false,
    'S7.8.3_A6.2_T2.js': false,
    '7.8.4-1gs.js': true,
    'S7.8.4_A1.1_T1.js': false,
    'S7.8.4_A1.1_T2.js': false,
    'S7.8.4_A1.2_T1.js': false,
    'S7.8.4_A1.2_T2.js': false,
    'S7.8.4_A3.1_T1.js': false,
    'S7.8.4_A3.1_T2.js': false,
    'S7.8.4_A3.2_T1.js': false,
    'S7.8.4_A3.2_T2.js': false,
    'S7.8.4_A4.3_T1.js': true,
    'S7.8.4_A4.3_T2.js': true,
    'S7.8.4_A7.1_T4.js': false,
    'S7.8.4_A7.2_T1.js': false,
    'S7.8.4_A7.2_T2.js': false,
    'S7.8.4_A7.2_T3.js': false,
    'S7.8.4_A7.2_T4.js': false,
    'S7.8.4_A7.2_T5.js': false,
    'S7.8.4_A7.2_T6.js': false,
    '7.8.5-1gs.js': false,
    'S7.8.5_A1.2_T1.js': false,
    'S7.8.5_A1.2_T2.js': false,
    'S7.8.5_A1.2_T3.js': false,
    'S7.8.5_A1.2_T4.js': false,
    'S7.8.5_A1.3_T1.js': false,
    'S7.8.5_A1.3_T3.js': false,
    'S7.8.5_A1.5_T1.js': false,
    'S7.8.5_A1.5_T3.js': false,
    'S7.8.5_A2.2_T1.js': false,
    'S7.8.5_A2.2_T2.js': false,
    'S7.8.5_A2.3_T1.js': false,
    'S7.8.5_A2.3_T3.js': false,
    'S7.8.5_A2.5_T1.js': false,
    'S7.8.5_A2.5_T3.js': false,
    'S7.9.2_A1_T1.js': false,
    'S7.9.2_A1_T3.js': false,
    'S7.9.2_A1_T6.js': false,
    'S7.9_A10_T2.js': false,
    'S7.9_A10_T4.js': false,
    'S7.9_A10_T6.js': false,
    'S7.9_A10_T8.js': false,
    'S7.9_A11_T4.js': false,
    'S7.9_A11_T8.js': false,
    'S7.9_A4.js': false,
    'S7.9_A5.1_T1.js': false,
    'S7.9_A5.3_T1.js': false,
    'S7.9_A5.7_T1.js': true,
    'S7.9_A6.2_T1.js': false,
    'S7.9_A6.2_T10.js': false,
    'S7.9_A6.2_T2.js': false,
    'S7.9_A6.2_T3.js': false,
    'S7.9_A6.2_T4.js': false,
    'S7.9_A6.2_T5.js': false,
    'S7.9_A6.2_T6.js': false,
    'S7.9_A6.2_T7.js': false,
    'S7.9_A6.2_T8.js': false,
    'S7.9_A6.2_T9.js': false,
    'S7.9_A6.3_T1.js': false,
    'S7.9_A6.3_T2.js': false,
    'S7.9_A6.3_T3.js': false,
    'S7.9_A6.3_T4.js': false,
    'S7.9_A6.3_T5.js': false,
    'S7.9_A6.3_T6.js': false,
    'S7.9_A6.3_T7.js': false,
    'S7.9_A6.4_T1.js': false,
    'S7.9_A6.4_T2.js': false,
    'S7.9_A7_T7.js': true,
    'S7.9_A9_T6.js': false,
    'S7.9_A9_T7.js': false,
    'S7.9_A9_T8.js': false,
    'S8.2_A2.js': false,
    'S8.3_A2.1.js': true,
    'S8.3_A2.2.js': true,
    'S8.4_A13_T1.js': false,
    'S8.4_A13_T2.js': false,
    'S8.4_A13_T3.js': false,
    'S8.4_A14_T1.js': false,
    'S8.4_A14_T2.js': false,
    'S8.4_A14_T3.js': false,
    'S8.4_A7.1.js': true,
    'S8.4_A7.2.js': true,
    'S8.4_A7.3.js': true,
    'S8.4_A7.4.js': true,
    'S8.6.2_A7.js': true,
    '8.7.2-3-a-1gs.js': true,
    '8.7.2-3-a-2gs.js': true,
    'S8.7.2_A1_T1.js': true,
    'S8.7.2_A1_T2.js': true,
    '10.1.1-2gs.js': false,
    '10.1.1-5gs.js': false,
    '10.1.1-8gs.js': false,
    '10.4.2.1-1gs.js': true,
    '10.5-1gs.js': true,
    '10.6-2gs.js': true,
    'S11.1.1_A1.js': true,
    '11.1.5-1gs.js': true,
    '11.1.5-2gs.js': true,
    '11.13.1-4-28gs.js': true,
    '11.13.1-4-29gs.js': true,
    'S11.13.1_A2.1_T3.js': true,
    '11.13.2-6-1gs.js': true,
    'S11.13.2_A2.2_T1.js': true,
    'S11.13.2_A2.2_T10.js': true,
    'S11.13.2_A2.2_T11.js': true,
    'S11.13.2_A2.2_T2.js': true,
    'S11.13.2_A2.2_T3.js': true,
    'S11.13.2_A2.2_T4.js': true,
    'S11.13.2_A2.2_T5.js': true,
    'S11.13.2_A2.2_T6.js': true,
    'S11.13.2_A2.2_T7.js': true,
    'S11.13.2_A2.2_T8.js': true,
    'S11.13.2_A2.2_T9.js': true,
    'S11.2.4_A1.3_T1.js': false,
    '11.3.1-2-1gs.js': true,
    'S11.3.1_A1.1_T1.js': true,
    'S11.3.1_A1.1_T2.js': true,
    'S11.3.1_A1.1_T3.js': true,
    'S11.3.1_A1.1_T4.js': true,
    'S11.3.1_A2.1_T3.js': true,
    'S11.3.2_A1.1_T1.js': true,
    'S11.3.2_A1.1_T2.js': true,
    'S11.3.2_A1.1_T3.js': true,
    'S11.3.2_A1.1_T4.js': true,
    'S11.3.2_A2.1_T3.js': true,
    '11.4.1-5-a-5gs.js': true,
    'S11.4.2_A2_T2.js': true,
    'S11.4.4_A2.1_T3.js': true,
    '11.4.5-2-2gs.js': true,
    'S11.4.5_A2.1_T3.js': true,
    'S12.1_A4_T1.js': false,
    'S12.1_A4_T2.js': false,
    '12.10.1-11gs.js': true,
    'S12.11_A2_T1.js': true,
    'S12.11_A3_T1.js': false,
    'S12.11_A3_T2.js': false,
    'S12.11_A3_T3.js': false,
    'S12.11_A3_T4.js': false,
    'S12.11_A3_T5.js': false,
    'S12.13_A1.js': true,
    '12.14.1-1gs.js': true,
    'S12.14_A16_T1.js': false,
    'S12.14_A16_T10.js': false,
    'S12.14_A16_T11.js': false,
    'S12.14_A16_T12.js': false,
    'S12.14_A16_T13.js': false,
    'S12.14_A16_T14.js': false,
    'S12.14_A16_T15.js': false,
    'S12.14_A16_T2.js': false,
    'S12.14_A16_T3.js': false,
    'S12.14_A16_T4.js': false,
    'S12.14_A16_T5.js': false,
    'S12.14_A16_T6.js': false,
    'S12.14_A16_T7.js': false,
    'S12.14_A16_T8.js': false,
    'S12.14_A16_T9.js': false,
    '12.2.1-1gs.js': true,
    '12.2.1-4gs.js': true,
    'S12.2_A8_T1.js': false,
    'S12.2_A8_T2.js': false,
    'S12.2_A8_T3.js': false,
    'S12.2_A8_T4.js': false,
    'S12.2_A8_T5.js': false,
    'S12.2_A8_T6.js': false,
    'S12.2_A8_T7.js': false,
    'S12.2_A8_T8.js': false,
    'S12.4_A1.js': false,
    'S12.5_A11.js': false,
    'S12.5_A2.js': true,
    'S12.5_A6_T1.js': false,
    'S12.5_A6_T2.js': false,
    'S12.5_A8.js': false,
    'S12.6.1_A12.js': false,
    'S12.6.1_A15.js': false,
    'S12.6.1_A6_T1.js': false,
    'S12.6.1_A6_T2.js': false,
    'S12.6.1_A6_T3.js': false,
    'S12.6.1_A6_T4.js': false,
    'S12.6.1_A6_T5.js': false,
    'S12.6.1_A6_T6.js': false,
    'S12.6.2_A15.js': false,
    'S12.6.2_A6_T1.js': false,
    'S12.6.2_A6_T2.js': false,
    'S12.6.2_A6_T3.js': false,
    'S12.6.2_A6_T4.js': false,
    'S12.6.2_A6_T5.js': false,
    'S12.6.2_A6_T6.js': false,
    'S12.6.3_A11.1_T3.js': true,
    'S12.6.3_A11_T3.js': true,
    'S12.6.3_A12.1_T3.js': true,
    'S12.6.3_A12_T3.js': true,
    'S12.6.3_A4.1.js': false,
    'S12.6.3_A4_T1.js': false,
    'S12.6.3_A4_T2.js': false,
    'S12.6.3_A7.1_T1.js': false,
    'S12.6.3_A7.1_T2.js': false,
    'S12.6.3_A7_T1.js': false,
    'S12.6.3_A7_T2.js': false,
    'S12.6.3_A8.1_T1.js': false,
    'S12.6.3_A8.1_T2.js': false,
    'S12.6.3_A8.1_T3.js': false,
    'S12.6.3_A8_T1.js': false,
    'S12.6.3_A8_T2.js': false,
    'S12.6.3_A8_T3.js': false,
    'S12.6.4_A15.js': false,
    'S12.7_A1_T1.js': true,
    'S12.7_A1_T2.js': true,
    'S12.7_A1_T3.js': true,
    'S12.7_A1_T4.js': true,
    'S12.7_A5_T1.js': true,
    'S12.7_A5_T2.js': true,
    'S12.7_A5_T3.js': true,
    'S12.7_A6.js': true,
    'S12.7_A8_T1.js': true,
    'S12.7_A8_T2.js': true,
    'S12.8_A1_T1.js': true,
    'S12.8_A1_T2.js': true,
    'S12.8_A1_T3.js': true,
    'S12.8_A1_T4.js': true,
    'S12.8_A5_T1.js': true,
    'S12.8_A5_T2.js': true,
    'S12.8_A5_T3.js': true,
    'S12.8_A6.js': true,
    'S12.8_A8_T1.js': true,
    'S12.8_A8_T2.js': true,
    'S12.9_A1_T1.js': true,
    'S12.9_A1_T10.js': true,
    'S12.9_A1_T2.js': true,
    'S12.9_A1_T3.js': true,
    'S12.9_A1_T4.js': true,
    'S12.9_A1_T5.js': true,
    'S12.9_A1_T6.js': true,
    'S12.9_A1_T7.js': true,
    'S12.9_A1_T8.js': true,
    'S12.9_A1_T9.js': true,
    '13.0_4-17gs.js': true,
    '13.0_4-5gs.js': true,
    'S13_A7_T3.js': false,
    '13.1-13gs.js': true,
    '13.1-1gs.js': true,
    '13.1-4gs.js': true,
    '13.1-5gs.js': true,
    '13.1-8gs.js': true,
    '13.2-19-b-3gs.js': true,
    '14.1-4gs.js': true,
    '14.1-5gs.js': true,
    'S15.1.2.1_A2_T2.js': true,
    'S15.1_A1_T1.js': true,
    'S15.1_A1_T2.js': true,
    'S15.1_A2_T1.js': true,
    'S15.2.4.3_A12.js': true,
    'S15.2.4.3_A13.js': true,
    'S15.2.4.4_A12.js': true,
    'S15.2.4.4_A13.js': true,
    'S15.2.4.4_A14.js': true,
    'S15.2.4.4_A15.js': true,
    'S15.2.4.5_A12.js': true,
    'S15.2.4.5_A13.js': true,
    'S15.2.4.6_A12.js': true,
    'S15.2.4.6_A13.js': true,
    'S15.2.4.7_A12.js': true,
    'S15.2.4.7_A13.js': true,
    '15.3.2.1-10-4gs.js': true,
    '15.3.2.1-10-6gs.js': true,
    'S15.3.4.2_A12.js': true,
    'S15.3.4.2_A13.js': true,
    'S15.3.4.2_A14.js': true,
    'S15.3.4.2_A15.js': true,
    'S15.3.4.2_A16.js': true,
    'S15.3.4.3_A13.js': true,
    'S15.3.4.3_A14.js': true,
    'S15.3.4.3_A15.js': true,
    'S15.3.4.4_A13.js': true,
    'S15.3.4.4_A14.js': true,
    'S15.3.4.4_A15.js': true,
    'S15.3.4.5_A1.js': true,
    'S15.3.4.5_A13.js': true,
    'S15.3.4.5_A14.js': true,
    'S15.3.4.5_A15.js': true,
    'S15.3.4.5_A2.js': true,
    '15.3.5.4_2-10gs.js': true,
    '15.3.5.4_2-11gs.js': true,
    '15.3.5.4_2-13gs.js': true,
    '15.3.5.4_2-15gs.js': true,
    '15.3.5.4_2-16gs.js': true,
    '15.3.5.4_2-17gs.js': true,
    '15.3.5.4_2-18gs.js': true,
    '15.3.5.4_2-19gs.js': true,
    '15.3.5.4_2-1gs.js': true,
    '15.3.5.4_2-20gs.js': true,
    '15.3.5.4_2-21gs.js': true,
    '15.3.5.4_2-22gs.js': true,
    '15.3.5.4_2-23gs.js': true,
    '15.3.5.4_2-24gs.js': true,
    '15.3.5.4_2-25gs.js': true,
    '15.3.5.4_2-26gs.js': true,
    '15.3.5.4_2-27gs.js': true,
    '15.3.5.4_2-28gs.js': true,
    '15.3.5.4_2-29gs.js': true,
    '15.3.5.4_2-2gs.js': true,
    '15.3.5.4_2-30gs.js': true,
    '15.3.5.4_2-31gs.js': true,
    '15.3.5.4_2-32gs.js': true,
    '15.3.5.4_2-33gs.js': true,
    '15.3.5.4_2-34gs.js': true,
    '15.3.5.4_2-35gs.js': true,
    '15.3.5.4_2-36gs.js': true,
    '15.3.5.4_2-37gs.js': true,
    '15.3.5.4_2-38gs.js': true,
    '15.3.5.4_2-39gs.js': true,
    '15.3.5.4_2-3gs.js': true,
    '15.3.5.4_2-40gs.js': true,
    '15.3.5.4_2-41gs.js': true,
    '15.3.5.4_2-42gs.js': true,
    '15.3.5.4_2-43gs.js': true,
    '15.3.5.4_2-44gs.js': true,
    '15.3.5.4_2-45gs.js': true,
    '15.3.5.4_2-46gs.js': true,
    '15.3.5.4_2-47gs.js': true,
    '15.3.5.4_2-48gs.js': true,
    '15.3.5.4_2-49gs.js': true,
    '15.3.5.4_2-4gs.js': true,
    '15.3.5.4_2-50gs.js': true,
    '15.3.5.4_2-51gs.js': true,
    '15.3.5.4_2-52gs.js': true,
    '15.3.5.4_2-53gs.js': true,
    '15.3.5.4_2-54gs.js': true,
    '15.3.5.4_2-55gs.js': true,
    '15.3.5.4_2-56gs.js': true,
    '15.3.5.4_2-57gs.js': true,
    '15.3.5.4_2-58gs.js': true,
    '15.3.5.4_2-59gs.js': true,
    '15.3.5.4_2-5gs.js': true,
    '15.3.5.4_2-60gs.js': true,
    '15.3.5.4_2-61gs.js': true,
    '15.3.5.4_2-62gs.js': true,
    '15.3.5.4_2-63gs.js': true,
    '15.3.5.4_2-64gs.js': true,
    '15.3.5.4_2-65gs.js': true,
    '15.3.5.4_2-66gs.js': true,
    '15.3.5.4_2-67gs.js': true,
    '15.3.5.4_2-68gs.js': true,
    '15.3.5.4_2-69gs.js': true,
    '15.3.5.4_2-6gs.js': true,
    '15.3.5.4_2-70gs.js': true,
    '15.3.5.4_2-71gs.js': true,
    '15.3.5.4_2-72gs.js': true,
    '15.3.5.4_2-73gs.js': true,
    '15.3.5.4_2-74gs.js': true,
    '15.3.5.4_2-7gs.js': true,
    '15.3.5.4_2-8gs.js': true,
    '15.3.5.4_2-94gs.js': true,
    '15.3.5.4_2-95gs.js': true,
    '15.3.5.4_2-96gs.js': true,
    '15.3.5.4_2-97gs.js': true,
    '15.3.5.4_2-9gs.js': true,
    '15.3.5-1gs.js': true,
    '15.3.5-2gs.js': true
};
var expectedTop1000Failures = {
    "JSFile100\\4shared_com\\UploadModule.js": true,
    "JSFile100\\addthis_com\\addthis_widget.js": true,
    "JSFile100\\advertising_com\\SearchAdx.js": true,
    "JSFile100\\amazon_com\\31LH4rzJ12L.js": true,
    "JSFile100\\amazon_com\\41I6sSH7HlL.js": true,
    "JSFile100\\amazon_com\\jquery_generateId_min.js": true,
    "JSFile100\\amazon_com\\jquery_ui_1_7_2_full_min__V231321143_.js": true,
    "JSFile100\\amazon_com\\site_wide_9412776343_js__V176430692_.js": true,
    "JSFile100\\amazon_com\\site_wide_9412776343_js__V176430992_.js": true,
    "JSFile100\\amazon_com\\site_wide_9412776343_js__V176431069_.js": true,
    "JSFile100\\amazon_com\\twister_dpf_68eca0c5893503e830a51ce9f47cb26f__V1_.js": true,
    "JSFile100\\ameba_jp\\apm001.js": true,
    "JSFile100\\ameba_jp\\prototype.js": true,
    "JSFile100\\atdmt_com\\020295.js": true,
    "JSFile100\\atdmt_com\\036540.js": true,
    "JSFile100\\atdmt_com\\063181.js": true,
    "JSFile100\\atdmt_com\\099052.js": true,
    "JSFile100\\atdmt_com\\099483.js": true,
    "JSFile100\\atdmt_com\\251496.js": true,
    "JSFile100\\baidu_com\\common_logic.js": true,
    "JSFile100\\baidu_com\\tangram_1_3_4.js": true,
    "JSFile100\\bing_com\\Basics.js": true,
    "JSFile100\\bing_com\\common.js": true,
    "JSFile100\\bing_com\\ga_downloads.js": true,
    "JSFile100\\bing_com\\jquery_1_2_6_min.js": true,
    "JSFile100\\bing_com\\JScript.js": true,
    "JSFile100\\bing_com\\mm_other.js": true,
    "JSFile100\\bing_com\\store_v2011_06_22T15_54_10_029894.js": true,
    "JSFile100\\comcast_net\\date_functions.js": true,
    "JSFile100\\comcast_net\\navigation.js": true,
    "JSFile100\\comcast_net\\prototype.js": true,
    "JSFile100\\comcast_net\\ScriptResource.js": true,
    "JSFile100\\conduit_com\\ScriptResource.js": true,
    "JSFile100\\conduit_com\\ToolbarApi.js": true,
    "JSFile100\\daum_net\\dwi.js": true,
    "JSFile100\\doubleclick_net\\activityj_src_3053589_type_aetna278_cat_aetna630_ord_1594972658181_9756__oref_http_3A_2F_2Fwww_aetna.js": true,
    "JSFile100\\doubleclick_net\\activityj_src_3053589_type_aetna278_cat_aetna630_ord_4333618947225_845__oref_http_3A_2F_2Fwww_aetna_com_2Findex.js": true,
    "JSFile100\\ebay_com\\cb.js": true,
    "JSFile100\\ebay_com\\_W0QQ_kwZsterlingQ20silverQQ_ipcZ12QQ_sacatZ20081QQ_tccZ1QQ_trksidZp3910Q2ec0Q2em476.js": true,
    "JSFile100\\facebook_com\\ccPAy08Ly48.js": true,
    "JSFile100\\facebook_com\\connect_widget.js": true,
    "JSFile100\\facebook_com\\effects.js": true,
    "JSFile100\\facebook_com\\es_LA.js": true,
    "JSFile100\\facebook_com\\recaptcha_log_actions.js": true,
    "JSFile100\\facebook_com\\ro_RO.js": true,
    "JSFile100\\fbcdn_net\\6S8W9_zcvGH.js": true,
    "JSFile100\\fbcdn_net\\9_dckM9jIt0.js": true,
    "JSFile100\\fbcdn_net\\ccPAy08Ly48.js": true,
    "JSFile100\\fbcdn_net\\cjGVVT_Axlo.js": true,
    "JSFile100\\fbcdn_net\\core_debug.js": true,
    "JSFile100\\fbcdn_net\\kaB5S3IyTBe.js": true,
    "JSFile100\\fbcdn_net\\MqvK7VXJgCY.js": true,
    "JSFile100\\fbcdn_net\\sqp_kHZ_Qlq.js": true,
    "JSFile100\\fbcdn_net\\srR6tvfNW7A.js": true,
    "JSFile100\\fbcdn_net\\_cjnlpfdzsL.js": true,
    "JSFile100\\fbcdn_net\\_HGgdHuenxe.js": true,
    "JSFile100\\fc2_com\\jquery_1_3_1_min.js": true,
    "JSFile100\\fc2_com\\prototype_1_4_0.js": true,
    "JSFile100\\google_ca\\config.js": true,
    "JSFile100\\google_com\\1b0cae797ecab5178544982aac004575embedcompiled__ru.js": true,
    "JSFile100\\google_com\\277100262_v2_EmbedSlideshow.js": true,
    "JSFile100\\google_com\\2967097199_EmbedSlideshow_ru.js": true,
    "JSFile100\\google_com\\96fcbc293acd8d22835c209724b3e6c1embedcompiled__en.js": true,
    "JSFile100\\google_com\\96fcbc293acd8d22835c209724b3e6c1embedcompiled__ru.js": true,
    "JSFile100\\google_com\\aggregates.js": true,
    "JSFile100\\google_com\\com_google_checkout_gadgets_embeddedbuy2_client_embeddedbuy2_nocache.js": true,
    "JSFile100\\google_com\\config.js": true,
    "JSFile100\\google_com\\core.js": true,
    "JSFile100\\google_com\\default_browserchart_columnchart_I.js": true,
    "JSFile100\\google_com\\d_1.js": true,
    "JSFile100\\google_com\\j.js": true,
    "JSFile100\\google_com\\lang_dropdown.js": true,
    "JSFile100\\google_com\\main.js": true,
    "JSFile100\\google_com\\s.js": true,
    "JSFile100\\google_com\\sayt.js": true,
    "JSFile100\\google_com\\_7Bcommon_util_7D.js": true,
    "JSFile100\\google_com\\_7Bmod_api_gc_mod_drag_mod_ctrapi_7D.js": true,
    "JSFile100\\google_co_jp\\br.js": true,
    "JSFile100\\google_de\\brand.js": true,
    "JSFile100\\google_it\\config.js": true,
    "JSFile100\\go_com\\acm_placealink_com.js": true,
    "JSFile100\\go_com\\ActiveWidgets.js": true,
    "JSFile100\\go_com\\ad.js": true,
    "JSFile100\\go_com\\animals_slideshow_older.js": true,
    "JSFile100\\go_com\\animals_slideshow_older2.js": true,
    "JSFile100\\go_com\\applyfonts.js": true,
    "JSFile100\\go_com\\cctb.js": true,
    "JSFile100\\go_com\\checkenviroment_1_0_1.js": true,
    "JSFile100\\go_com\\ckeditor.js": true,
    "JSFile100\\go_com\\clearvalue.js": true,
    "JSFile100\\go_com\\cmdatatagutils.js": true,
    "JSFile100\\go_com\\commons.js": true,
    "JSFile100\\go_com\\common_functions.js": true,
    "JSFile100\\go_com\\cookieinfo.js": true,
    "JSFile100\\go_com\\default.js": true,
    "JSFile100\\go_com\\dhtmlSuite_calendar.js": true,
    "JSFile100\\go_com\\dolWebAnalytics.js": true,
    "JSFile100\\go_com\\droppy.js": true,
    "JSFile100\\go_com\\engine.js": true,
    "JSFile100\\go_com\\externallinks.js": true,
    "JSFile100\\go_com\\FlashStatsAPI_Parser.js": true,
    "JSFile100\\go_com\\FlashVersionCheck.js": true,
    "JSFile100\\go_com\\footer.js": true,
    "JSFile100\\go_com\\freegames0717.js": true,
    "JSFile100\\go_com\\globalscripts.js": true,
    "JSFile100\\go_com\\global_library.js": true,
    "JSFile100\\go_com\\GoBooking.js": true,
    "JSFile100\\go_com\\GoBooking_Hilton.js": true,
    "JSFile100\\go_com\\goSearch.js": true,
    "JSFile100\\go_com\\hbsCommon.js": true,
    "JSFile100\\go_com\\helper_functions.js": true,
    "JSFile100\\go_com\\home.js": true,
    "JSFile100\\go_com\\homepage.js": true,
    "JSFile100\\go_com\\incFadeImagesAPI.js": true,
    "JSFile100\\go_com\\index.js": true,
    "JSFile100\\go_com\\initOverlays.js": true,
    "JSFile100\\go_com\\JavaScript.js": true,
    "JSFile100\\go_com\\jquery_1_3_2.js": true,
    "JSFile100\\go_com\\jquery_1_3_2_min.js": true,
    "JSFile100\\go_com\\jquery_1_5_1_min.js": true,
    "JSFile100\\go_com\\jquery_hoverIntent.js": true,
    "JSFile100\\go_com\\jquery_hoverIntent_min.js": true,
    "JSFile100\\go_com\\jquery_rounded.js": true,
    "JSFile100\\go_com\\jquery_rounded_1_0_1.js": true,
    "JSFile100\\go_com\\js_1196d93e4398239d0fe9d3764fa666d1.js": true,
    "JSFile100\\go_com\\js_74ef26f1db507dbf19fe148d1c999ef1.js": true,
    "JSFile100\\go_com\\js_a3b83274849ef98f06846bf5505937d9_3.js": true,
    "JSFile100\\go_com\\js_rightclick.js": true,
    "JSFile100\\go_com\\masks.js": true,
    "JSFile100\\go_com\\mootools_1_3_2_core.js": true,
    "JSFile100\\go_com\\mootools_yui_compressed.js": true,
    "JSFile100\\go_com\\mplink.js": true,
    "JSFile100\\go_com\\nbc_javascript_library.js": true,
    "JSFile100\\go_com\\nycvisit.js": true,
    "JSFile100\\go_com\\oas_topright.js": true,
    "JSFile100\\go_com\\oas_x35.js": true,
    "JSFile100\\go_com\\openWin.js": true,
    "JSFile100\\go_com\\phocagalleryslideshow.js": true,
    "JSFile100\\go_com\\PogoHandler.js": true,
    "JSFile100\\go_com\\popupscripts.js": true,
    "JSFile100\\go_com\\portal.js": true,
    "JSFile100\\go_com\\preloadmenu.js": true,
    "JSFile100\\go_com\\preload_images.js": true,
    "JSFile100\\go_com\\public_common.js": true,
    "JSFile100\\go_com\\quote.js": true,
    "JSFile100\\go_com\\refercookie.js": true,
    "JSFile100\\go_com\\revenuescience.js": true,
    "JSFile100\\go_com\\rooms2.js": true,
    "JSFile100\\go_com\\ScriptResource.js": true,
    "JSFile100\\go_com\\search.js": true,
    "JSFile100\\go_com\\SessionFormat.js": true,
    "JSFile100\\go_com\\sifr.js": true,
    "JSFile100\\go_com\\site.js": true,
    "JSFile100\\go_com\\sms_vsSCLinkHandler.js": true,
    "JSFile100\\go_com\\splash.js": true,
    "JSFile100\\go_com\\std.js": true,
    "JSFile100\\go_com\\swNav.js": true,
    "JSFile100\\go_com\\Tools.js": true,
    "JSFile100\\go_com\\WBREO.js": true,
    "JSFile100\\go_com\\wdproloader_dom_event.js": true,
    "JSFile100\\go_com\\web.js": true,
    "JSFile100\\go_com\\wfwiblib.js": true,
    "JSFile100\\live_com\\1721.js": true,
    "JSFile100\\live_com\\187294839_x45_x46_x03_x02.js": true,
    "JSFile100\\live_com\\banner_photowall.js": true,
    "JSFile100\\live_com\\calendar.js": true,
    "JSFile100\\live_com\\com_pulselive_web_ipl2011scorexs_nocache.js": true,
    "JSFile100\\live_com\\dropdown.js": true,
    "JSFile100\\live_com\\flexcroll.js": true,
    "JSFile100\\live_com\\highslide_with_html.js": true,
    "JSFile100\\live_com\\inline.js": true,
    "JSFile100\\live_com\\jquery_1_2_3_min.js": true,
    "JSFile100\\live_com\\jquery_ui.js": true,
    "JSFile100\\live_com\\jsloader_php.js": true,
    "JSFile100\\live_com\\liveframework.js": true,
    "JSFile100\\live_com\\main_j.js": true,
    "JSFile100\\live_com\\mbMenu.js": true,
    "JSFile100\\live_com\\mootools_utils.js": true,
    "JSFile100\\live_com\\ntpagetag_aspx.js": true,
    "JSFile100\\live_com\\ScriptCombiner.js": true,
    "JSFile100\\live_com\\search.js": true,
    "JSFile100\\live_com\\stlfunc.js": true,
    "JSFile100\\live_com\\tdAllAdsJSON_aspx.js": true,
    "JSFile100\\live_com\\tojs.js": true,
    "JSFile100\\live_com\\util.js": true,
    "JSFile100\\live_com\\veshell2.js": true,
    "JSFile100\\live_com\\WLWorkflow.js": true,
    "JSFile100\\live_com\\wtid.js": true,
    "JSFile100\\live_com\\xajax_core.js": true,
    "JSFile100\\live_com\\zp_s_VJleF85ajwLnZLG73AV3Kc_40.js": true,
    "JSFile100\\mail_ru\\1834.js": true,
    "JSFile100\\mail_ru\\1835.js": true,
    "JSFile100\\mail_ru\\3.js": true,
    "JSFile100\\mail_ru\\3312.js": true,
    "JSFile100\\mail_ru\\4044.js": true,
    "JSFile100\\mail_ru\\browsercheck.js": true,
    "JSFile100\\mail_ru\\common_main.js": true,
    "JSFile100\\mail_ru\\core.js": true,
    "JSFile100\\mail_ru\\jquery.js": true,
    "JSFile100\\mail_ru\\receiver.js": true,
    "JSFile100\\microsoft_com\\BAM.js": true,
    "JSFile100\\microsoft_com\\base.js": true,
    "JSFile100\\microsoft_com\\bimapping.js": true,
    "JSFile100\\microsoft_com\\branding.js": true,
    "JSFile100\\microsoft_com\\ClientBISettings.js": true,
    "JSFile100\\microsoft_com\\commontop.js": true,
    "JSFile100\\microsoft_com\\default.js": true,
    "JSFile100\\microsoft_com\\EZControls.js": true,
    "JSFile100\\microsoft_com\\EZWidgets.js": true,
    "JSFile100\\microsoft_com\\hvSearchBox.js": true,
    "JSFile100\\microsoft_com\\jquery_1_4_1_min.js": true,
    "JSFile100\\microsoft_com\\jquery_1_4_2_min_11_05_05_0074.js": true,
    "JSFile100\\microsoft_com\\js.js": true,
    "JSFile100\\microsoft_com\\lts.js": true,
    "JSFile100\\microsoft_com\\MenuStandards.js": true,
    "JSFile100\\microsoft_com\\MicrosoftAjaxComponentModel.js": true,
    "JSFile100\\microsoft_com\\MicrosoftAjaxNetwork.js": true,
    "JSFile100\\microsoft_com\\MicrosoftAjaxSerialization.js": true,
    "JSFile100\\microsoft_com\\MicrosoftAjaxTimer.js": true,
    "JSFile100\\microsoft_com\\MicrosoftAjaxWebForms_debug.js": true,
    "JSFile100\\microsoft_com\\MiscUtils.js": true,
    "JSFile100\\microsoft_com\\mstoolbar.js": true,
    "JSFile100\\microsoft_com\\mtagconfig.js": true,
    "JSFile100\\microsoft_com\\MultiSelectControl2.js": true,
    "JSFile100\\microsoft_com\\ocs14_main.js": true,
    "JSFile100\\microsoft_com\\omniture_combined_11_05_05_0074.js": true,
    "JSFile100\\microsoft_com\\RioTrackingUnion.js": true,
    "JSFile100\\microsoft_com\\ScriptResource.js": true,
    "JSFile100\\microsoft_com\\Silverlight.js": true,
    "JSFile100\\microsoft_com\\SimpleSearch.js": true,
    "JSFile100\\microsoft_com\\SiteRecruit_PageConfiguration_2944mt.js": true,
    "JSFile100\\microsoft_com\\Start.js": true,
    "JSFile100\\microsoft_com\\toc.js": true,
    "JSFile100\\microsoft_com\\VideoPlayer.js": true,
    "JSFile100\\microsoft_com\\webcomtop.js": true,
    "JSFile100\\microsoft_com\\WebForms.js": true,
    "JSFile100\\microsoft_com\\webtrendsscript.js": true,
    "JSFile100\\microsoft_com\\WebUIValidation.js": true,
    "JSFile100\\msn_com\\4a0253de6eac448d8f2c39c53f8926.js": true,
    "JSFile100\\msn_com\\4fa981931d290c05f204f06cc927de.js": true,
    "JSFile100\\msn_com\\a96611e687e7618b4a57eeb8e513dc.js": true,
    "JSFile100\\msn_com\\ajaxGeo.js": true,
    "JSFile100\\msn_com\\All.js": true,
    "JSFile100\\msn_com\\AllNew.js": true,
    "JSFile100\\msn_com\\date_format.js": true,
    "JSFile100\\msn_com\\f33347c28ecec27b168748f73f377b.js": true,
    "JSFile100\\msn_com\\FaceBook.js": true,
    "JSFile100\\msn_com\\fb_google_intercept.js": true,
    "JSFile100\\msn_com\\footer_post_render.js": true,
    "JSFile100\\msn_com\\FormatHelper.js": true,
    "JSFile100\\msn_com\\geo.js": true,
    "JSFile100\\msn_com\\IEOverlay.js": true,
    "JSFile100\\msn_com\\Insite.js": true,
    "JSFile100\\msn_com\\jquery_sliding_carousel.js": true,
    "JSFile100\\msn_com\\js.js": true,
    "JSFile100\\msn_com\\js_384d57f37f2864fd053971f8a200032a.js": true,
    "JSFile100\\msn_com\\login.js": true,
    "JSFile100\\msn_com\\main.js": true,
    "JSFile100\\msn_com\\MasterLayout.js": true,
    "JSFile100\\msn_com\\mmNew.js": true,
    "JSFile100\\msn_com\\mmUsed.js": true,
    "JSFile100\\msn_com\\mru12.js": true,
    "JSFile100\\msn_com\\ninemsn_thirdparty_header_v4_0_0.js": true,
    "JSFile100\\msn_com\\omnitracking.js": true,
    "JSFile100\\msn_com\\PagePeelAds.js": true,
    "JSFile100\\msn_com\\promo.js": true,
    "JSFile100\\msn_com\\quickSearch.js": true,
    "JSFile100\\msn_com\\registration.js": true,
    "JSFile100\\msn_com\\ReplaceLinks.js": true,
    "JSFile100\\msn_com\\sbknav.js": true,
    "JSFile100\\msn_com\\spac_adx.js": true,
    "JSFile100\\msn_com\\track.js": true,
    "JSFile100\\msn_com\\uuid.js": true,
    "JSFile100\\msn_com\\validate.js": true,
    "JSFile100\\msn_com\\XmlHelper.js": true,
    "JSFile100\\msn_com\\XmlList.js": true,
    "JSFile100\\nate_com\\floatingSearch.js": true,
    "JSFile100\\nate_com\\nate_logout_v20101210.js": true,
    "JSFile100\\plentyoffish_com\\helperb.js": true,
    "JSFile100\\plentyoffish_com\\register_helper.js": true,
    "JSFile100\\qq_com\\crystal_min.js": true,
    "JSFile100\\sina_com_cn\\res_PGLS000022.js": true,
    "JSFile100\\sohu_com\\disp_by_ip.js": true,
    "JSFile100\\sohu_com\\j_1_5_2.js": true,
    "JSFile100\\sohu_com\\WebCalendar.js": true,
    "JSFile100\\terra_com_br\\core_modMan.js": true,
    "JSFile100\\terra_com_br\\helper_stringOBJ.js": true,
    "JSFile100\\terra_com_br\\jquery.js": true,
    "JSFile100\\terra_com_br\\modHeaderFooter.js": true,
    "Temp\\TopJSFiles\\JSFile100\\uol_com_br\\site_uolbr_chan_batepapo_subchan_capa_affiliate_uolbrbatepapo_size_125x125_page_7_conntype_1_expble_File not found: tile_215298826605972.jsFile not found: C:\\Temp\\TopJSFiles\\JSFile100\\uol_com_br\\site_uolbr_chan_batepapo_subchan_capa_affiliate_uolbrbatepapo_size_728x90_page_1_conntype_1_expble_0File not found: tile_215298826605972.jsC:\\Temp\\TopJSFiles\\JSFile100\\yandex_ru\\watch_visor.js": true,
    "JSFile100\\zynga_com\\connection_min.js": true,
    "JSFile100\\zynga_com\\yahoo_dom_event.js": true,
    "JSFile200\\alot_com\\swfobject.js": true,
    "JSFile200\\bankofamerica_com\\Activation.js": true,
    "JSFile200\\bankofamerica_com\\commonscript.js": true,
    "JSFile200\\bankofamerica_com\\global.js": true,
    "JSFile200\\bankofamerica_com\\homepagetopjawr_1_1.js": true,
    "JSFile200\\bankofamerica_com\\jquery_1_3_2_min.js": true,
    "JSFile200\\bankofamerica_com\\LaunchRemote.js": true,
    "JSFile200\\bankofamerica_com\\pm_fp.js": true,
    "JSFile200\\bankofamerica_com\\ScriptResource.js": true,
    "JSFile200\\bankofamerica_com\\tc_logging.js": true,
    "JSFile200\\bankofamerica_com\\utility.js": true,
    "JSFile200\\bankofamerica_com\\widget.js": true,
    "JSFile200\\bbc_co_uk\\conf.js": true,
    "JSFile200\\bbc_co_uk\\config.js": true,
    "JSFile200\\blocket_se\\blocket_all.js": true,
    "JSFile200\\chase_com\\jquery_1_4_2_min.js": true,
    "JSFile200\\chase_com\\navigation.js": true,
    "JSFile200\\chase_com\\script.js": true,
    "JSFile200\\chase_com\\supportFlashAd.js": true,
    "JSFile200\\chase_com\\wtid.js": true,
    "JSFile200\\cnn_com\\arabic_main.js": true,
    "JSFile200\\cnn_com\\PreloadImages.js": true,
    "JSFile200\\gmarket_co_kr\\IndexBodyBest.js": true,
    "JSFile200\\gmarket_co_kr\\IndexBodyData.js": true,
    "JSFile200\\gmarket_co_kr\\IndexBodyToday.js": true,
    "JSFile200\\gmarket_co_kr\\menu_top_import.js": true,
    "JSFile200\\googleusercontent_com\\core_dynamic_height.js": true,
    "JSFile200\\goo_ne_jp\\search.js": true,
    "JSFile200\\goo_ne_jp\\VLTraceDMD.js": true,
    "JSFile200\\ifeng_com\\ifengRotatorAd.js": true,
    "JSFile200\\match_com\\ajaxGeo.js": true,
    "JSFile200\\match_com\\clientModal.js": true,
    "JSFile200\\match_com\\core.js": true,
    "JSFile200\\match_com\\dcs_tag.js": true,
    "JSFile200\\match_com\\geo.js": true,
    "JSFile200\\match_com\\GetClientMessages.js": true,
    "JSFile200\\match_com\\header.js": true,
    "JSFile200\\match_com\\jquery_1_4_1_min.js": true,
    "JSFile200\\match_com\\jquery_1_4_2_min.js": true,
    "JSFile200\\match_com\\jquery_ui_min.js": true,
    "JSFile200\\match_com\\lib_login.js": true,
    "JSFile200\\match_com\\login.js": true,
    "JSFile200\\match_com\\main.js": true,
    "JSFile200\\match_com\\Mice07272007.js": true,
    "JSFile200\\match_com\\promo.js": true,
    "JSFile200\\match_com\\quickSearch.js": true,
    "JSFile200\\match_com\\registration.js": true,
    "JSFile200\\match_com\\wtid.js": true,
    "JSFile200\\match_com\\_jslib.js": true,
    "JSFile200\\meinvz_net\\resource_core.js": true,
    "JSFile200\\milliyet_com_tr\\BaseScript.js": true,
    "JSFile200\\milliyet_com_tr\\Comment.js": true,
    "JSFile200\\milliyet_com_tr\\dmcIst.js": true,
    "JSFile200\\milliyet_com_tr\\Emlak.js": true,
    "JSFile200\\milliyet_com_tr\\HizliErisim.js": true,
    "JSFile200\\milliyet_com_tr\\jquery_timeago.js": true,
    "JSFile200\\milliyet_com_tr\\JSListCombo.js": true,
    "JSFile200\\milliyet_com_tr\\MNetOrfad.js": true,
    "JSFile200\\milliyet_com_tr\\SharePlugin.js": true,
    "JSFile200\\milliyet_com_tr\\siteIst.js": true,
    "JSFile200\\milliyet_com_tr\\UFO.js": true,
    "JSFile200\\milliyet_com_tr\\video.js": true,
    "JSFile200\\netflix_com\\blogside_toolbar_combined_min.js": true,
    "JSFile200\\netflix_com\\pkg_Core_ffffffeffe0000ff878_s_888676.js": true,
    "JSFile200\\onemanga_com\\connection_min.js": true,
    "JSFile200\\onemanga_com\\search_autocomplete.js": true,
    "JSFile200\\onemanga_com\\yahoo_dom_event.js": true,
    "JSFile200\\onet_pl\\506b999ab5a67775ea492ec7953515b0_pack_main.js": true,
    "JSFile200\\onet_pl\\calendar013.js": true,
    "JSFile200\\onet_pl\\jquery.js": true,
    "JSFile200\\onet_pl\\main.js": true,
    "JSFile200\\onet_pl\\std.js": true,
    "JSFile200\\playdom_com\\jquery_1_4_2_min.js": true,
    "JSFile200\\pogo_com\\ad.js": true,
    "JSFile200\\pogo_com\\PogoHandler.js": true,
    "JSFile200\\pogo_com\\rooms2.js": true,
    "JSFile200\\pogo_com\\std.js": true,
    "JSFile200\\qidian_com\\MasterPageHeader.js": true,
    "JSFile200\\sapo_pt\\prototype.js": true,
    "JSFile200\\sapo_pt\\site_sapoao_chanao_aoother_adsize_234x60_type_halfbanner_affiliate_jornalangola.js": true,
    "JSFile200\\tom_com\\ektron_modal.js": true,
    "JSFile200\\tom_com\\en.js": true,
    "JSFile200\\tom_com\\general.js": true,
    "JSFile200\\trademe_co_nz\\GoogleAnalyticsBundled46718.js": true,
    "JSFile200\\wp_pl\\10275_20110624100.js": true,
    "JSFile200\\zing_vn\\dhtmlwindow.js": true,
    "JSFile200\\zing_vn\\System_Ad1.js": true,
    "JSFile300\\4399_com\\4399.js": true,
    "JSFile300\\7k7k_com\\index2.js": true,
    "JSFile300\\adobe_com\\foresee_surveydef.js": true,
    "JSFile300\\adobe_com\\jquery_ui_1_8_1.js": true,
    "JSFile300\\adobe_com\\jquery_ui_sortable.js": true,
    "JSFile300\\apple_com\\536335f805ce519f8211dd42787a37a0.js": true,
    "JSFile300\\apple_com\\autocomplete_min.js": true,
    "JSFile300\\apple_com\\d8cb4c093dd419faa56b117c0e67a20a.js": true,
    "JSFile300\\apple_com\\datasource_min.js": true,
    "JSFile300\\apple_com\\en_strings.js": true,
    "JSFile300\\apple_com\\functions.js": true,
    "JSFile300\\apple_com\\jquery_1_4_2.js": true,
    "JSFile300\\apple_com\\jquery_1_5_1_min.js": true,
    "JSFile300\\apple_com\\jquery_min.js": true,
    "JSFile300\\apple_com\\masks.js": true,
    "JSFile300\\apple_com\\popupAutoSize.js": true,
    "JSFile300\\apple_com\\SCReporting.js": true,
    "JSFile300\\apple_com\\shortcuts.js": true,
    "JSFile300\\apple_com\\yahoo_dom_event.js": true,
    "JSFile300\\blogger_com\\211018530_widgets.js": true,
    "JSFile300\\blogger_com\\921763132_widgets.js": true,
    "JSFile300\\blogger_com\\dropdown.js": true,
    "JSFile300\\charter_net\\dnn.js": true,
    "JSFile300\\charter_net\\dnn_controls.js": true,
    "JSFile300\\charter_net\\dnn_controls_dnnmenu.js": true,
    "JSFile300\\charter_net\\dnn_dom_positioning.js": true,
    "JSFile300\\charter_net\\dnn_xml.js": true,
    "JSFile300\\charter_net\\dnn_xmlhttp.js": true,
    "JSFile300\\charter_net\\ScriptResource.js": true,
    "JSFile300\\cpxinteractive_com\\ds.js": true,
    "JSFile300\\finn_no\\wtid.js": true,
    "JSFile300\\gmx_net\\homepage.js": true,
    "JSFile300\\hurriyet_com_tr\\MNetOrfad.js": true,
    "JSFile300\\ikea_com\\jonk.js": true,
    "JSFile300\\king_com\\77Tracking.js": true,
    "JSFile300\\king_com\\ac_autocomplete.js": true,
    "JSFile300\\king_com\\ac_setfacebooktheme.js": true,
    "JSFile300\\king_com\\blogchalking.js": true,
    "JSFile300\\king_com\\chrome.js": true,
    "JSFile300\\king_com\\core.js": true,
    "JSFile300\\king_com\\era_rl_aspx.js": true,
    "JSFile300\\king_com\\fckeditor.js": true,
    "JSFile300\\king_com\\frogweb.js": true,
    "JSFile300\\king_com\\fw_menu.js": true,
    "JSFile300\\king_com\\garages21u5.js": true,
    "JSFile300\\king_com\\garages_acoupons_funcs21u6.js": true,
    "JSFile300\\king_com\\infoBoxes.js": true,
    "JSFile300\\king_com\\jquery_1_2_3.js": true,
    "JSFile300\\king_com\\jquery_1_4_2_min.js": true,
    "JSFile300\\king_com\\jquery_colorbox.js": true,
    "JSFile300\\king_com\\jquery_scripts.js": true,
    "JSFile300\\king_com\\jquery_tools_min.js": true,
    "JSFile300\\king_com\\jquery_ui.js": true,
    "JSFile300\\king_com\\jquery_ui_1_8_1_custom_min.js": true,
    "JSFile300\\king_com\\jquery_wt_rotator.js": true,
    "JSFile300\\king_com\\mainNav.js": true,
    "JSFile300\\king_com\\mediaboxAdv_1_3_4b.js": true,
    "JSFile300\\king_com\\mootools_core_1_3_full_compat_yc.js": true,
    "JSFile300\\king_com\\mtagconfig.js": true,
    "JSFile300\\king_com\\navigation.js": true,
    "JSFile300\\king_com\\ob_box.js": true,
    "JSFile300\\king_com\\page_xml_php.js": true,
    "JSFile300\\king_com\\process.js": true,
    "JSFile300\\king_com\\Products.js": true,
    "JSFile300\\king_com\\rollovers.js": true,
    "JSFile300\\king_com\\script1.js": true,
    "JSFile300\\king_com\\ScriptResource.js": true,
    "JSFile300\\king_com\\search.js": true,
    "JSFile300\\king_com\\soft_add_mult.js": true,
    "JSFile300\\king_com\\Tracking.js": true,
    "JSFile300\\king_com\\VAM.js": true,
    "JSFile300\\king_com\\x.js": true,
    "JSFile300\\linkedin_com\\jquery.js": true,
    "JSFile300\\linkedin_com\\js.js": true,
    "JSFile300\\myvip_com\\prototype_17_min.js": true,
    "JSFile300\\ning_com\\.js": true,
    "JSFile300\\ning_com\\bnbridge.js": true,
    "JSFile300\\ning_com\\cookie.js": true,
    "JSFile300\\ning_com\\cookies.js": true,
    "JSFile300\\ning_com\\core.js": true,
    "JSFile300\\ning_com\\ddaccordion_minified.js": true,
    "JSFile300\\ning_com\\ddlevelsmenu.js": true,
    "JSFile300\\ning_com\\ek_flexmenu.js": true,
    "JSFile300\\ning_com\\general.js": true,
    "JSFile300\\ning_com\\hmc_head_nav.js": true,
    "JSFile300\\ning_com\\jcemediabox.js": true,
    "JSFile300\\ning_com\\jquery_1_3_2_min.js": true,
    "JSFile300\\ning_com\\jquery_hoverintent.js": true,
    "JSFile300\\ning_com\\jquery_hoverIntent_minified.js": true,
    "JSFile300\\ning_com\\jquery_ui_1_7_2_custom_min.js": true,
    "JSFile300\\ning_com\\jsexternal.js": true,
    "JSFile300\\ning_com\\js_b6691d3534a37960ffeb603e6212ae71.js": true,
    "JSFile300\\ning_com\\prototype.js": true,
    "JSFile300\\ning_com\\prototype_ext.js": true,
    "JSFile300\\ning_com\\radwin.js": true,
    "JSFile300\\ning_com\\rotation_home.js": true,
    "JSFile300\\ning_com\\ScriptResource.js": true,
    "JSFile300\\ning_com\\search.js": true,
    "JSFile300\\ning_com\\session_timeout.js": true,
    "JSFile300\\ning_com\\sound.js": true,
    "JSFile300\\ning_com\\utils.js": true,
    "JSFile300\\ning_com\\yahoo_dom_event.js": true,
    "JSFile300\\rr_com\\common.js": true,
    "JSFile300\\rr_com\\global.js": true,
    "JSFile300\\rr_com\\javascript.js": true,
    "JSFile300\\rr_com\\jquery.js": true,
    "JSFile300\\rr_com\\jquery_1_4_2.js": true,
    "JSFile300\\rr_com\\jquery_timers_1_2.js": true,
    "JSFile300\\rr_com\\RPcore.js": true,
    "JSFile300\\sky_com\\AC_RunActiveContent.js": true,
    "JSFile300\\sky_com\\behaviour.js": true,
    "JSFile300\\sky_com\\common_js_min_js_476213720.js": true,
    "JSFile300\\sky_com\\mm_menu.js": true,
    "JSFile300\\sky_com\\scriptaculous.js": true,
    "JSFile300\\sky_com\\stock_20quote.js": true,
    "JSFile300\\sky_com\\swfobject.js": true,
    "JSFile300\\tmz_com\\jquery_min_72a5bf5cc55d2eaaccbb6b332a3910dc_v2010_09_13_133815.js": true,
    "JSFile300\\tmz_com\\tmz_ver2_2_531e274a93f4d11e7def88950c250081_v2011_06_22_203315.js": true,
    "JSFile300\\travian_ae\\crypt.js": true,
    "JSFile300\\ustream_tv\\packed_www_socialstream_libs_13085842721.js": true,
    "JSFile300\\verizon_net\\dojo.js": true,
    "JSFile300\\walmart_com\\LHNCookie.js": true,
    "JSFile300\\walmart_com\\LHNSearch.js": true,
    "JSFile300\\walmart_com\\MultivariateSection.js": true,
    "JSFile300\\walmart_com\\webkitFix.js": true,
    "JSFile300\\weather_com\\a21_max.js": true,
    "JSFile300\\weather_com\\index.js": true,
    "JSFile300\\weather_com\\jquery_1_4_4_min.js": true,
    "JSFile300\\weather_com\\popup_layer.js": true,
    "JSFile300\\weather_com\\wclock.js": true,
    "JSFile300\\weather_com\\wtimes.js": true,
    "JSFile300\\wellsfargo_com\\hbsCommon.js": true,
    "JSFile300\\wellsfargo_com\\init.js": true,
    "JSFile300\\wellsfargo_com\\jquery_1_4_2_min.js": true,
    "JSFile300\\wellsfargo_com\\masks.js": true,
    "JSFile300\\wellsfargo_com\\public_common.js": true,
    "JSFile300\\wellsfargo_com\\ScriptResource.js": true,
    "JSFile300\\wellsfargo_com\\WBREO.js": true,
    "JSFile300\\wellsfargo_com\\wfwiblib.js": true,
    "JSFile300\\yoville_com\\utilities.js": true,
    "JSFile400\\alibaba_com\\ae_login.js": true,
    "JSFile400\\alibaba_com\\home_20110420.js": true,
    "JSFile400\\att_com\\autotab.js": true,
    "JSFile400\\att_com\\flashobjects.js": true,
    "JSFile400\\att_com\\incFadeImagesAPI.js": true,
    "JSFile400\\att_com\\jquery_1_5_1_min.js": true,
    "JSFile400\\att_com\\jquery_maskedinput.js": true,
    "JSFile400\\att_com\\modalValidSummary.js": true,
    "JSFile400\\att_com\\ScriptResource.js": true,
    "JSFile400\\att_com\\wbutil.js": true,
    "JSFile400\\att_com\\webKit.js": true,
    "JSFile400\\att_com\\WebResource.js": true,
    "JSFile400\\autotrader_com\\40": true,
    "JSFile400\\caixa_gov_br\\awstats_misc_tracker.js": true,
    "JSFile400\\china_com\\Common.js": true,
    "JSFile400\\china_com\\desk.js": true,
    "JSFile400\\china_com\\jquery.js": true,
    "JSFile400\\china_com\\NetBank.js": true,
    "JSFile400\\donga_com\\func.js": true,
    "JSFile400\\earthlink_net\\main_dropdown.js": true,
    "JSFile400\\ekolay_net\\CanliSkor.js": true,
    "JSFile400\\ekolay_net\\f.js": true,
    "JSFile400\\ekolay_net\\GreenBarNew.js": true,
    "JSFile400\\ekolay_net\\header.js": true,
    "JSFile400\\ekolay_net\\icerikler_custom_jQuery.js": true,
    "JSFile400\\ekolay_net\\jquery_1_6_1_min.js": true,
    "JSFile400\\ekolay_net\\jquery_hoverIntent_minified.js": true,
    "JSFile400\\ekolay_net\\Manset.js": true,
    "JSFile400\\ekolay_net\\menu.js": true,
    "JSFile400\\ekolay_net\\os.js": true,
    "JSFile400\\ekolay_net\\survey.js": true,
    "JSFile400\\fifa_com\\all.js": true,
    "JSFile400\\fifa_com\\theclub.js": true,
    "JSFile400\\fifa_com\\webanalytics.js": true,
    "JSFile400\\foxnews_com\\I_DJI_I_COMP_INX.js": true,
    "JSFile400\\foxnews_com\\video_synd_small.js": true,
    "JSFile400\\frontier_com\\jq_client_plugin.js": true,
    "JSFile400\\frontier_com\\VirtualCode.js": true,
    "JSFile400\\google_hu\\desktop_module_main.js": true,
    "JSFile400\\hp_com\\all_34499.js": true,
    "JSFile400\\hp_com\\ClientFunctions.js": true,
    "JSFile400\\hp_com\\custom_activex_override.js": true,
    "JSFile400\\hp_com\\na_num_clicks.js": true,
    "JSFile400\\hp_com\\popup.js": true,
    "JSFile400\\hp_com\\ScriptResource.js": true,
    "JSFile400\\hp_com\\sup_class.js": true,
    "JSFile400\\laredoute_fr\\CombineJS.js": true,
    "JSFile400\\laredoute_fr\\CookieHelpers.js": true,
    "JSFile400\\laredoute_fr\\google.js": true,
    "JSFile400\\laredoute_fr\\redoutespanV2.js": true,
    "JSFile400\\laredoute_fr\\s_code.js": true,
    "JSFile400\\marca_com\\accordian.js": true,
    "JSFile400\\marca_com\\toolbar_colapsada.js": true,
    "JSFile400\\megavideo_com\\jquery_1_4_2_min.js": true,
    "JSFile400\\mlb_com\\club_properties.js": true,
    "JSFile400\\mlb_com\\form_validation.js": true,
    "JSFile400\\mlb_com\\form_validation_vDate.js": true,
    "JSFile400\\mlb_com\\global.js": true,
    "JSFile400\\mlb_com\\mlb_player.js": true,
    "JSFile400\\mlb_com\\mplayer.js": true,
    "JSFile400\\mlb_com\\myaccount_js_tpl.js": true,
    "JSFile400\\mlb_com\\playMedia.js": true,
    "JSFile400\\mlb_com\\quick_login_js_tpl.js": true,
    "JSFile400\\mlb_com\\registration_links_js_tpl.js": true,
    "JSFile400\\mlxchange_com\\SignIn.js": true,
    "JSFile400\\nana10_co_il\\cg.js": true,
    "JSFile400\\nana10_co_il\\client.js": true,
    "JSFile400\\nana10_co_il\\Cliqa.js": true,
    "JSFile400\\nana10_co_il\\db.js": true,
    "JSFile400\\outlook_com\\jquery_1_4_1_min.js": true,
    "JSFile400\\phoenix_edu\\jquery_1_2_6_min.js": true,
    "JSFile400\\roblox_com\\index.js": true,
    "JSFile400\\roblox_com\\jquery_cookies_2_2_0_1.js": true,
    "JSFile400\\roblox_com\\jquery_extensions.js": true,
    "JSFile400\\roblox_com\\ScriptResource.js": true,
    "JSFile400\\verizonwireless_com\\device_detection.js": true,
    "JSFile400\\verizonwireless_com\\hbx_gin_defaults.js": true,
    "JSFile400\\verizonwireless_com\\hbx_vz_defaults.js": true,
    "JSFile400\\verizonwireless_com\\layers.js": true,
    "JSFile400\\verizonwireless_com\\proxy.js": true,
    "JSFile400\\y8_com\\application_min.js": true,
    "JSFile500\\amazonaws_com\\2Rr.js": true,
    "JSFile500\\amazonaws_com\\3Fk.js": true,
    "JSFile500\\amazonaws_com\\aller.js": true,
    "JSFile500\\amazonaws_com\\am.js": true,
    "JSFile500\\amazonaws_com\\anylinkcssmenu.js": true,
    "JSFile500\\amazonaws_com\\application_jq.js": true,
    "JSFile500\\amazonaws_com\\audio_player.js": true,
    "JSFile500\\amazonaws_com\\base.js": true,
    "JSFile500\\amazonaws_com\\base_41889.js": true,
    "JSFile500\\amazonaws_com\\core.js": true,
    "JSFile500\\amazonaws_com\\DisplayFromBottom.js": true,
    "JSFile500\\amazonaws_com\\easy_rotator_min.js": true,
    "JSFile500\\amazonaws_com\\highslide_with_gallery.js": true,
    "JSFile500\\amazonaws_com\\joined_base.js": true,
    "JSFile500\\amazonaws_com\\jquery1_3_2.js": true,
    "JSFile500\\amazonaws_com\\jquery_1_5_min.js": true,
    "JSFile500\\amazonaws_com\\jquery_hoverIntent_minified.js": true,
    "JSFile500\\amazonaws_com\\jquery_jcarousel_min.js": true,
    "JSFile500\\amazonaws_com\\jquery_prettyPhoto.js": true,
    "JSFile500\\amazonaws_com\\plugins08122010.js": true,
    "JSFile500\\amazonaws_com\\swfobject.js": true,
    "JSFile500\\amazonaws_com\\xd_receiver.js": true,
    "JSFile500\\atwola_com\\adsWrapper.js": true,
    "JSFile500\\bestbuy_com\\context_ns6.js": true,
    "JSFile500\\bestbuy_com\\expandfaqs.js": true,
    "JSFile500\\bestbuy_com\\foresee_surveydef.js": true,
    "JSFile500\\bestbuy_com\\foresee_trigger.js": true,
    "JSFile500\\bestbuy_com\\jquery.js": true,
    "JSFile500\\bestbuy_com\\jquery_scrollbar.js": true,
    "JSFile500\\bestbuy_com\\jquery_ui_1_8_5_custom.js": true,
    "JSFile500\\bestbuy_com\\js_jsp.js": true,
    "JSFile500\\bestbuy_com\\list.js": true,
    "JSFile500\\bestbuy_com\\offers.js": true,
    "JSFile500\\bestbuy_com\\panel.js": true,
    "JSFile500\\bestbuy_com\\personQ_ie.js": true,
    "JSFile500\\bestbuy_com\\tips.js": true,
    "JSFile500\\bestbuy_com\\wall.js": true,
    "JSFile500\\break_com\\bmnDoubleclickAd.js": true,
    "JSFile500\\break_com\\breakIn.js": true,
    "JSFile500\\break_com\\breakInTurns.js": true,
    "JSFile500\\dell_com\\common80.js": true,
    "JSFile500\\dell_com\\core.js": true,
    "JSFile500\\dell_com\\externalcode_min.js": true,
    "JSFile500\\dell_com\\home82.js": true,
    "JSFile500\\dell_com\\ie55up.js": true,
    "JSFile500\\dell_com\\init.js": true,
    "JSFile500\\dell_com\\jquery_1_2_2e.js": true,
    "JSFile500\\dell_com\\jquery_1_4_2_min.js": true,
    "JSFile500\\dell_com\\jquery_hoverIntent_minified.js": true,
    "JSFile500\\dell_com\\search.js": true,
    "JSFile500\\direct_gov_uk\\ScriptResource.js": true,
    "JSFile500\\expedia_com\\jsXML.js": true,
    "JSFile500\\expedia_com\\ScriptResource.js": true,
    "JSFile500\\expedia_com\\siteAnalytics.js": true,
    "JSFile500\\expedia_com\\yui_bundle_min.js": true,
    "JSFile500\\juegos_com\\jquery_1_2_1_pack.js": true,
    "JSFile500\\mapquest_com\\jquery.js": true,
    "JSFile500\\next_co_uk\\flashFunctions.js": true,
    "JSFile500\\pagerage_com\\AJAX.js": true,
    "JSFile500\\pagerage_com\\ApplyLayout.js": true,
    "JSFile500\\pagerage_com\\Browse.js": true,
    "JSFile500\\pagerage_com\\BrowserDetect.js": true,
    "JSFile500\\pagerage_com\\Channel.js": true,
    "JSFile500\\pagerage_com\\CSSNormalizer.js": true,
    "JSFile500\\pagerage_com\\DefaultLayout.js": true,
    "JSFile500\\pagerage_com\\FindObj.js": true,
    "JSFile500\\pagerage_com\\GetInstallId.js": true,
    "JSFile500\\pagerage_com\\GUIDTracker.js": true,
    "JSFile500\\pagerage_com\\SuccessTracker.js": true,
    "JSFile500\\qiyi_com\\config.js": true,
    "JSFile500\\singlesnet_com\\prototype.js": true,
    "JSFile500\\swedbank_se\\wtid.js": true,
    "JSFile500\\target_com\\copyright_year.js": true,
    "JSFile500\\target_com\\dnn.js": true,
    "JSFile500\\target_com\\dnn_xml.js": true,
    "JSFile500\\target_com\\dnn_xmlhttp.js": true,
    "JSFile500\\target_com\\foresee_analytics_e94bf.js": true,
    "JSFile500\\target_com\\jquery_blockUI.js": true,
    "JSFile500\\target_com\\pagescripts_0_294327_sid9_00.js": true,
    "JSFile500\\target_com\\ScriptResource.js": true,
    "JSFile500\\target_com\\VAM.js": true,
    "JSFile500\\tianya_cn\\urchin.js": true,
    "JSFile500\\victoriassecret_com\\mptrans.js": true,
    "JSFile500\\victoriassecret_com\\plugins.js": true,
    "JSFile500\\wachovia_com\\stats.js": true,
    "JSFile500\\windows_com\\BrowseApplication.js": true,
    "JSFile500\\windows_com\\Search.js": true,
    "JSFile500\\xfire_com\\product_tour.js": true,
    "JSFile500\\yomiuri_co_jp\\g_connect.js": true,
    "JSFile500\\yomiuri_co_jp\\kizasi.js": true,
    "JSFile500\\yomiuri_co_jp\\komachi_distribute.js": true,
    "JSFile600\\capitalone_com\\common.js": true,
    "JSFile600\\capitalone_com\\customer_info.js": true,
    "JSFile600\\capitalone_com\\toolTips.js": true,
    "JSFile600\\capitalone_com\\usage_analysis.js": true,
    "JSFile600\\capitalone_com\\VAM.js": true,
    "JSFile600\\cnet_com\\AC_RunActiveContent.js": true,
    "JSFile600\\cnet_com\\default_OAS.js": true,
    "JSFile600\\cnet_com\\jquery_ui_1_7_2_custom_min.js": true,
    "JSFile600\\cnet_com\\mac_ad.js": true,
    "JSFile600\\cnet_com\\telescope_Jquery_ddaccordion.js": true,
    "JSFile600\\cnet_com\\tmc_hp_pg.js": true,
    "JSFile600\\die_staemme_de\\game.js": true,
    "JSFile600\\discuss_com_hk\\index_rev09.js": true,
    "JSFile600\\jcpenney_com\\readCookie.js": true,
    "JSFile600\\jcpenney_com\\techpropsv1.js": true,
    "JSFile600\\kbs_co_kr\\jquery_1_4_4.js": true,
    "JSFile600\\lego_com\\applyfonts.js": true,
    "JSFile600\\lego_com\\checkenviroment_1_0_1.js": true,
    "JSFile600\\lego_com\\FlashStatsAPI_Parser.js": true,
    "JSFile600\\lego_com\\FlashVersionCheck.js": true,
    "JSFile600\\lego_com\\home.js": true,
    "JSFile600\\lego_com\\initOverlays.js": true,
    "JSFile600\\lego_com\\jquery_colorbox.js": true,
    "JSFile600\\lego_com\\jquery_rounded.js": true,
    "JSFile600\\lego_com\\jquery_rounded_1_0_1.js": true,
    "JSFile600\\lego_com\\popupscripts.js": true,
    "JSFile600\\lego_com\\portal.js": true,
    "JSFile600\\lego_com\\ScriptResource.js": true,
    "JSFile600\\lego_com\\splash.js": true,
    "JSFile600\\macys_com\\coremetrics_cmdatatagutils.js": true,
    "JSFile600\\macys_com\\coremetrics_eluminate.js": true,
    "JSFile600\\macys_com\\rules_90067660.js": true,
    "JSFile600\\nhaccuatui_com\\nct_widget_pack.js": true,
    "JSFile600\\schueler_cc\\merge.js": true,
    "JSFile600\\secureserver_net\\js.js": true,
    "JSFile600\\travelocity_com\\0_6713_hp_7C20110624_7CTRAVELOCITY_00.js": true,
    "JSFile600\\travelocity_com\\0__00.js": true,
    "JSFile600\\ups_com\\jqprint_obf_0_3_cache.js": true,
    "JSFile600\\ups_com\\jquery.js": true,
    "JSFile600\\ups_com\\stepcarousel.js": true,
    "JSFile600\\vk_com\\incAllPages.js": true,
    "JSFile600\\vk_com\\incFadeImagesAPI.js": true,
    "JSFile700\\adp_com\\WebResource.js": true,
    "JSFile700\\anz_com\\azgroupallthemagic_min.js": true,
    "JSFile700\\anz_com\\herobanner.js": true,
    "JSFile700\\cachefly_net\\djbooth8.js": true,
    "JSFile700\\carsales_com_au\\csn_adslider.js": true,
    "JSFile700\\carsales_com_au\\csn_carousel.js": true,
    "JSFile700\\carsales_com_au\\csn_feed.js": true,
    "JSFile700\\carsales_com_au\\csn_simpletabs.js": true,
    "JSFile700\\carsales_com_au\\csn_socialmediaplugin.js": true,
    "JSFile700\\carsales_com_au\\ui_hoverintent.js": true,
    "JSFile700\\carsales_com_au\\ui_tinymenu.js": true,
    "JSFile700\\filestube_com\\jquery_1_2_3.js": true,
    "JSFile700\\filestube_com\\jquery_1_2_6.js": true,
    "JSFile700\\filestube_com\\jquery_1_4_4_min.js": true,
    "JSFile700\\hattrick_org\\firebug.js": true,
    "JSFile700\\hattrick_org\\Hattrick_10.js": true,
    "JSFile700\\hattrick_org\\ScriptResource.js": true,
    "JSFile700\\homedepot_com\\dblclickCheck.js": true,
    "JSFile700\\homedepot_com\\global.js": true,
    "JSFile700\\homedepot_com\\menu_service.js": true,
    "JSFile700\\homedepot_com\\mm.js": true,
    "JSFile700\\homedepot_com\\sifr.js": true,
    "JSFile700\\hulu_com\\AC_RunActiveContent.js": true,
    "JSFile700\\imageshack_us\\is_comscore.js": true,
    "JSFile700\\incredimail_com\\common.js": true,
    "JSFile700\\incredimail_com\\fc3.js": true,
    "JSFile700\\jal_co_jp\\airportList2_3.js": true,
    "JSFile700\\jal_co_jp\\stayAreaControl.js": true,
    "JSFile700\\kohls_com\\inc_omniture_akamai.js": true,
    "JSFile700\\marketwatch_com\\pagefunctions.js": true,
    "JSFile700\\marketwatch_com\\yui_sc_all.js": true,
    "JSFile700\\nytimes_com\\FadingSlideShow.js": true,
    "JSFile700\\nytimes_com\\topic.js": true,
    "JSFile700\\nytimes_com\\wtid.js": true,
    "JSFile700\\qvc_com\\cmdatatagutils.js": true,
    "JSFile700\\qvc_com\\CoremetricIncludes.js": true,
    "JSFile700\\qvc_com\\jquery_global.js": true,
    "JSFile700\\qvc_com\\jquery_timer.js": true,
    "JSFile700\\qvc_com\\qvccommon.js": true,
    "JSFile700\\qvc_com\\QVCSiteJS.js": true,
    "JSFile700\\qvc_com\\rules_90040260.js": true,
    "JSFile700\\qvc_com\\ScriptResource.js": true,
    "JSFile700\\realtor_com\\jquery_1_4_2.js": true,
    "JSFile700\\realtor_com\\LinkButtons.js": true,
    "JSFile700\\realtor_com\\publicJavaScript15.js": true,
    "JSFile700\\repubblica_it\\jquery_min.js": true,
    "JSFile700\\skype_com\\wbr_complete.js": true,
    "JSFile700\\terra_es\\AddToFavorites.js": true,
    "JSFile700\\terra_es\\home.js": true,
    "JSFile700\\terra_es\\NewsControl.js": true,
    "JSFile700\\total_media_net\\glider_05.js": true,
    "JSFile700\\tradera_com\\adManager.js": true,
    "JSFile700\\tradera_com\\tradera.js": true,
    "JSFile700\\travian_com\\crypt.js": true,
    "JSFile700\\univision_com\\index.js": true,
    "JSFile700\\univision_com\\s_code_js_jsessionid_3LVIWWXIVOBCKCWIABTCFEYKZAABUIWC.js": true,
    "JSFile700\\usaa_com\\ent_core_js_loader_js_yahoo_dom_event_js_cp_std_js_cp_help_popup_min.js": true,
    "JSFile700\\usbank_com\\common.js": true,
    "JSFile700\\usbank_com\\jquery_hoverIntent_minified.js": true,
    "JSFile700\\usbank_com\\mp_hp.js": true,
    "JSFile700\\usbank_com\\SpryMenuBar.js": true,
    "JSFile700\\usbank_com\\swfobject.js": true,
    "JSFile700\\vnexpress_net\\Forex_Content.js": true,
    "JSFile700\\vnexpress_net\\Gold_Content.js": true,
    "JSFile700\\vnexpress_net\\Library.js": true,
    "JSFile700\\vnexpress_net\\Menu.js": true,
    "JSFile700\\vnexpress_net\\Vne.js": true,
    "JSFile700\\webs_com\\sifr.js": true,
    "JSFile700\\yahoo_net\\2010_ln.js": true,
    "JSFile700\\yahoo_net\\aaaremotes.js": true,
    "JSFile700\\yahoo_net\\animatedcollapse.js": true,
    "JSFile700\\yahoo_net\\b4.js": true,
    "JSFile700\\yahoo_net\\ccontent.js": true,
    "JSFile700\\yahoo_net\\cheroes.js": true,
    "JSFile700\\yahoo_net\\combined_min.js": true,
    "JSFile700\\yahoo_net\\combined_scripts.js": true,
    "JSFile700\\yahoo_net\\cycle.js": true,
    "JSFile700\\yahoo_net\\global.js": true,
    "JSFile700\\yahoo_net\\global_script2011.js": true,
    "JSFile700\\yahoo_net\\global_script_footer.js": true,
    "JSFile700\\yahoo_net\\headscripts.js": true,
    "JSFile700\\yahoo_net\\HeadScripts_aspx.js": true,
    "JSFile700\\yahoo_net\\highslide.js": true,
    "JSFile700\\yahoo_net\\hockeyjava.js": true,
    "JSFile700\\yahoo_net\\homepage.js": true,
    "JSFile700\\yahoo_net\\image_popup.js": true,
    "JSFile700\\yahoo_net\\inic_fnjs.js": true,
    "JSFile700\\yahoo_net\\jquery_1_3_1.js": true,
    "JSFile700\\yahoo_net\\jquery_1_4_2_min.js": true,
    "JSFile700\\yahoo_net\\jquery_corner.js": true,
    "JSFile700\\yahoo_net\\jquery_home.js": true,
    "JSFile700\\yahoo_net\\jquery_min.js": true,
    "JSFile700\\yahoo_net\\jquery_myk_autocomplete.js": true,
    "JSFile700\\yahoo_net\\leftnav_flyouts.js": true,
    "JSFile700\\yahoo_net\\newflash.js": true,
    "JSFile700\\yahoo_net\\print_page.js": true,
    "JSFile700\\yahoo_net\\reviewsClientScript.js": true,
    "JSFile700\\yahoo_net\\scroll.js": true,
    "JSFile700\\yahoo_net\\search_pulldown.js": true,
    "JSFile700\\yahoo_net\\show_cart2.js": true,
    "JSFile700\\yahoo_net\\slideshow.js": true,
    "JSFile700\\yahoo_net\\specific_size_popup.js": true,
    "JSFile700\\yahoo_net\\trisports.js": true,
    "JSFile700\\yahoo_net\\usfs.js": true,
    "JSFile700\\yahoo_net\\videoPopup.js": true,
    "JSFile700\\yahoo_net\\vwd_front_rotator.js": true,
    "JSFile700\\yahoo_net\\yst_external_java_script.js": true,
    "JSFile700\\yahoo_net\\yst_floating_cart1.js": true,
    "JSFile700\\yahoo_net\\yst_head_tags.js": true,
    "JSFile700\\yahoo_net\\ysw_combined_scripts.js": true,
    "JSFile800\\51_com\\ExternalRedirect.js": true,
    "JSFile800\\apartments_com\\Class.js": true,
    "JSFile800\\apartments_com\\global_new.js": true,
    "JSFile800\\apartments_com\\guestcard.js": true,
    "JSFile800\\apartments_com\\init.js": true,
    "JSFile800\\apartments_com\\omniture.js": true,
    "JSFile800\\apartments_com\\oo_engine_min.js": true,
    "JSFile800\\apartments_com\\pageload.js": true,
    "JSFile800\\apartments_com\\Specials.js": true,
    "JSFile800\\barclays_co_uk\\jquery_1_3_2_min.js": true,
    "JSFile800\\barclays_co_uk\\jquery_pack.js": true,
    "JSFile800\\ca_gov\\A8JSLib.js": true,
    "JSFile800\\ca_gov\\addmega.js": true,
    "JSFile800\\ca_gov\\CapBanner.js": true,
    "JSFile800\\ca_gov\\cbs.js": true,
    "JSFile800\\ca_gov\\chrome.js": true,
    "JSFile800\\ca_gov\\cocHeaderGlobal.js": true,
    "JSFile800\\ca_gov\\common.js": true,
    "JSFile800\\ca_gov\\cvmenufo.js": true,
    "JSFile800\\ca_gov\\dnn.js": true,
    "JSFile800\\ca_gov\\dnn_controls.js": true,
    "JSFile800\\ca_gov\\dnn_controls_dnnmenu.js": true,
    "JSFile800\\ca_gov\\dnn_dom_positioning.js": true,
    "JSFile800\\ca_gov\\dnn_xml.js": true,
    "JSFile800\\ca_gov\\dnn_xmlhttp.js": true,
    "JSFile800\\ca_gov\\dnn_xmlhttp_jsxmlhttprequest.js": true,
    "JSFile800\\ca_gov\\dnn_xml_jsparser.js": true,
    "JSFile800\\ca_gov\\dynamic.js": true,
    "JSFile800\\ca_gov\\dynamicdata.js": true,
    "JSFile800\\ca_gov\\fc.js": true,
    "JSFile800\\ca_gov\\global.js": true,
    "JSFile800\\ca_gov\\global_init.js": true,
    "JSFile800\\ca_gov\\home_images.js": true,
    "JSFile800\\ca_gov\\jquery_1_2_3_min.js": true,
    "JSFile800\\ca_gov\\jquery_1_4_4_min.js": true,
    "JSFile800\\ca_gov\\jquery_min.js": true,
    "JSFile800\\ca_gov\\m.js": true,
    "JSFile800\\ca_gov\\MenuAdapter.js": true,
    "JSFile800\\ca_gov\\mobileValidation.js": true,
    "JSFile800\\ca_gov\\navTab.js": true,
    "JSFile800\\ca_gov\\popupwin.js": true,
    "JSFile800\\ca_gov\\ScriptResource.js": true,
    "JSFile800\\ca_gov\\showHide.js": true,
    "JSFile800\\ca_gov\\supersleight_plugin.js": true,
    "JSFile800\\ca_gov\\wtid.js": true,
    "JSFile800\\cdiscount_com\\ScriptResource.js": true,
    "JSFile800\\cnbc_com\\contentBuffer_4.js": true,
    "JSFile800\\cnbc_com\\prototype_ajax.js": true,
    "JSFile800\\cnbc_com\\storyPagePagination2.js": true,
    "JSFile800\\esmas_com\\jquery_1_2_6.js": true,
    "JSFile800\\fedex_com\\printcheck_components.js": true,
    "JSFile800\\fidelity_com\\functions.js": true,
    "JSFile800\\fidelity_com\\welcome_core.js": true,
    "JSFile800\\gmx_com\\ckeditor_319982267.js": true,
    "JSFile800\\iol_pt\\homepage.js": true,
    "JSFile800\\iol_pt\\jquery_1_4_2_min.js": true,
    "JSFile800\\iol_pt\\jquery_jcarouselnav.js": true,
    "JSFile800\\kickasstorrents_com\\ajs.js": true,
    "JSFile800\\lancenet_com_br\\lance.js": true,
    "JSFile800\\literotica_com\\r.js": true,
    "JSFile800\\lowes_com\\accountType.js": true,
    "JSFile800\\lowes_com\\flashdetect.js": true,
    "JSFile800\\lowes_com\\lowesFunction.js": true,
    "JSFile800\\lowes_com\\mootools_release_1_11.js": true,
    "JSFile800\\lowes_com\\pm_fp.js": true,
    "JSFile800\\lowes_com\\recommendationWizard.js": true,
    "JSFile800\\monster_com\\allindex.js": true,
    "JSFile800\\monster_com\\categoryJavascript.js": true,
    "JSFile800\\monster_com\\dailytips.js": true,
    "JSFile800\\monster_com\\jamroom_javascript_inc.js": true,
    "JSFile800\\monster_com\\monster_1_296166612E_012_4A68F26884D68926E233CB37D13DABC6.js": true,
    "JSFile800\\monster_com\\tm_profile.js": true,
    "JSFile800\\monster_com\\wtid.js": true,
    "JSFile800\\musica_com\\gfeedfetcher.js": true,
    "JSFile800\\musica_com\\jquery_hoverIntent_minified.js": true,
    "JSFile800\\musica_com\\main.js": true,
    "JSFile800\\nickjr_com\\coda.js": true,
    "JSFile800\\nickjr_com\\jquery.js": true,
    "JSFile800\\nickjr_com\\jquery_min.js": true,
    "JSFile800\\pagesjaunes_fr\\sitecrm.js": true,
    "JSFile800\\ricardo_ch\\ajaxtools.js": true,
    "JSFile800\\ricardo_ch\\Common.js": true,
    "JSFile800\\ricardo_ch\\Cookies.js": true,
    "JSFile800\\sabah_com_tr\\anasayfa.js": true,
    "JSFile800\\sabah_com_tr\\jquery_cookie.js": true,
    "JSFile800\\sabah_com_tr\\paging.js": true,
    "JSFile800\\sabah_com_tr\\ShadowBox.js": true,
    "JSFile800\\sabah_com_tr\\sitebase.js": true,
    "JSFile800\\sanook_com\\iwpa.js": true,
    "JSFile800\\state_tx_us\\10carousel.js": true,
    "JSFile800\\state_tx_us\\ddaccordion.js": true,
    "JSFile800\\state_tx_us\\ek_flexmenu.js": true,
    "JSFile800\\state_tx_us\\emailvalid.js": true,
    "JSFile800\\state_tx_us\\fadebanner.js": true,
    "JSFile800\\state_tx_us\\HHS_Stas.js": true,
    "JSFile800\\state_tx_us\\index.js": true,
    "JSFile800\\state_tx_us\\javascript.js": true,
    "JSFile800\\state_tx_us\\jquery_1_3_2_min.js": true,
    "JSFile800\\state_tx_us\\jquery_banner.js": true,
    "JSFile800\\state_tx_us\\jquery_timers_1_2.js": true,
    "JSFile800\\state_tx_us\\locationsTab.js": true,
    "JSFile800\\state_tx_us\\locNav.js": true,
    "JSFile800\\state_tx_us\\navcheckFP.js": true,
    "JSFile800\\state_tx_us\\panelswap.js": true,
    "JSFile800\\state_tx_us\\person_ie.js": true,
    "JSFile800\\state_tx_us\\random_image.js": true,
    "JSFile800\\state_tx_us\\ScriptResource.js": true,
    "JSFile800\\state_tx_us\\stm31.js": true,
    "JSFile800\\state_tx_us\\txdotscripts.js": true,
    "JSFile800\\state_tx_us\\webkitFix.js": true,
    "JSFile800\\yad2_co_il\\scripts_min.js": true,
    "JSFile900\\7m_cn\\18_en.js": true,
    "JSFile900\\7m_cn\\basket_open_links.js": true,
    "JSFile900\\7m_cn\\default_b.js": true,
    "JSFile900\\7m_cn\\index.js": true,
    "JSFile900\\7m_cn\\live_fun1.js": true,
    "JSFile900\\7m_cn\\mainnews.js": true,
    "JSFile900\\7m_cn\\middle_rank.js": true,
    "JSFile900\\7m_cn\\open_link.js": true,
    "JSFile900\\7m_cn\\output.js": true,
    "JSFile900\\7m_cn\\scorllimg.js": true,
    "JSFile900\\7m_cn\\th.js": true,
    "JSFile900\\7m_cn\\winresult.js": true,
    "JSFile900\\7m_cn\\wnba_index_rank.js": true,
    "JSFile900\\aa_com\\application.js": true,
    "JSFile900\\aa_com\\belo_omnitureVarsComm.js": true,
    "JSFile900\\aa_com\\boxmodel.js": true,
    "JSFile900\\aa_com\\crmenu.js": true,
    "JSFile900\\aa_com\\dnn.js": true,
    "JSFile900\\aa_com\\dnn_xml.js": true,
    "JSFile900\\aa_com\\dnn_xmlhttp.js": true,
    "JSFile900\\aa_com\\ent_core_js_loader_js_yahoo_dom_event_js_cp_std_js_cp_help_popup_min.js": true,
    "JSFile900\\aa_com\\gfeedfetcher.js": true,
    "JSFile900\\aa_com\\jquery_min.js": true,
    "JSFile900\\aa_com\\jquery_ui.js": true,
    "JSFile900\\aa_com\\jquery_ui_1_8_7_min.js": true,
    "JSFile900\\aa_com\\ScriptResource.js": true,
    "JSFile900\\aa_com\\TeaLeaf.js": true,
    "JSFile900\\aa_com\\valid.js": true,
    "JSFile900\\aa_com\\widgets.js": true,
    "JSFile900\\abnamro_nl\\homepage.js": true,
    "JSFile900\\as_com\\animate.js": true,
    "JSFile900\\as_com\\barebone.js": true,
    "JSFile900\\as_com\\breadcrumbs.js": true,
    "JSFile900\\as_com\\cabovillas.js": true,
    "JSFile900\\as_com\\calendarUtil.js": true,
    "JSFile900\\as_com\\carrabbas_sdc.js": true,
    "JSFile900\\as_com\\categories.js": true,
    "JSFile900\\as_com\\cFrame.js": true,
    "JSFile900\\as_com\\coolmenu.js": true,
    "JSFile900\\as_com\\date3days.js": true,
    "JSFile900\\as_com\\dnn.js": true,
    "JSFile900\\as_com\\dnn_controls.js": true,
    "JSFile900\\as_com\\dnn_controls_dnnmenu.js": true,
    "JSFile900\\as_com\\dnn_dom_positioning.js": true,
    "JSFile900\\as_com\\dw_glidescroll.js": true,
    "JSFile900\\as_com\\dw_scroller.js": true,
    "JSFile900\\as_com\\emailinclude3.js": true,
    "JSFile900\\as_com\\EPlanning.js": true,
    "JSFile900\\as_com\\ext_base.js": true,
    "JSFile900\\as_com\\finalizestats.js": true,
    "JSFile900\\as_com\\flashobjects_js_pv2044f65aa1901c43.js": true,
    "JSFile900\\as_com\\flash_versions.js": true,
    "JSFile900\\as_com\\flexcroll.js": true,
    "JSFile900\\as_com\\floating.js": true,
    "JSFile900\\as_com\\fontselection.js": true,
    "JSFile900\\as_com\\FrontEnd.js": true,
    "JSFile900\\as_com\\gassets_FE_v025.js": true,
    "JSFile900\\as_com\\GasZipCode.js": true,
    "JSFile900\\as_com\\Global.js": true,
    "JSFile900\\as_com\\globalNavigation.js": true,
    "JSFile900\\as_com\\globalservices.js": true,
    "JSFile900\\as_com\\gngB.js": true,
    "JSFile900\\as_com\\home.js": true,
    "JSFile900\\as_com\\home_popup.js": true,
    "JSFile900\\as_com\\home_slideshow.js": true,
    "JSFile900\\as_com\\icws_generic.js": true,
    "JSFile900\\as_com\\ifc.js": true,
    "JSFile900\\as_com\\imageflow.js": true,
    "JSFile900\\as_com\\incFadeImagesAPI.js": true,
    "JSFile900\\as_com\\java_functions.js": true,
    "JSFile900\\as_com\\jquery_1_2_6.js": true,
    "JSFile900\\as_com\\jquery_1_2_6_min.js": true,
    "JSFile900\\as_com\\jquery_1_4_2_min.js": true,
    "JSFile900\\as_com\\jquery_1_5_1_min.js": true,
    "JSFile900\\as_com\\jquery_blockUI.js": true,
    "JSFile900\\as_com\\jquery_cycle.js": true,
    "JSFile900\\as_com\\jquery_datepick.js": true,
    "JSFile900\\as_com\\jquery_event_hoverIntent.js": true,
    "JSFile900\\as_com\\jquery_fancybox_1_2_6_min.js": true,
    "JSFile900\\as_com\\jquery_iframe_auto_height_plugin.js": true,
    "JSFile900\\as_com\\jquery_latest_min.js": true,
    "JSFile900\\as_com\\jquery_maskedinput_1_2_2_min.js": true,
    "JSFile900\\as_com\\jquery_query_2_1_7.js": true,
    "JSFile900\\as_com\\jquery_ui.js": true,
    "JSFile900\\as_com\\jquery_ui_min.js": true,
    "JSFile900\\as_com\\jssource.js": true,
    "JSFile900\\as_com\\js_188b8249c3f05ffbb551c66659817746.js": true,
    "JSFile900\\as_com\\js_859ab8889182ab70be3cdbcc0fd941e2.js": true,
    "JSFile900\\as_com\\js_faa7238616ee0a9d52a7230ad66b0cc5.js": true,
    "JSFile900\\as_com\\js_functions.js": true,
    "JSFile900\\as_com\\lansa_code.js": true,
    "JSFile900\\as_com\\lytebox.js": true,
    "JSFile900\\as_com\\main.js": true,
    "JSFile900\\as_com\\maxandermas.js": true,
    "JSFile900\\as_com\\menuarray_3_5.js": true,
    "JSFile900\\as_com\\menucontents.js": true,
    "JSFile900\\as_com\\MicrosoftMvcJQueryValidation_custom.js": true,
    "JSFile900\\as_com\\mm_menu.js": true,
    "JSFile900\\as_com\\modal.js": true,
    "JSFile900\\as_com\\MyBriefcase.js": true,
    "JSFile900\\as_com\\nav.js": true,
    "JSFile900\\as_com\\oqey_js_drag_iphone.js": true,
    "JSFile900\\as_com\\p7IRMscripts.js": true,
    "JSFile900\\as_com\\Print.js": true,
    "JSFile900\\as_com\\protoaculous1_6.js": true,
    "JSFile900\\as_com\\reloj.js": true,
    "JSFile900\\as_com\\rules_90120268.js": true,
    "JSFile900\\as_com\\ScriptResource.js": true,
    "JSFile900\\as_com\\scripts.js": true,
    "JSFile900\\as_com\\Scroller.js": true,
    "JSFile900\\as_com\\services.js": true,
    "JSFile900\\as_com\\soapclient.js": true,
    "JSFile900\\as_com\\sound.js": true,
    "JSFile900\\as_com\\stm31.js": true,
    "JSFile900\\as_com\\swfaddress.js": true,
    "JSFile900\\as_com\\s_code.js": true,
    "JSFile900\\as_com\\topnav.js": true,
    "JSFile900\\as_com\\weatherwidget.js": true,
    "JSFile900\\as_com\\xml.js": true,
    "JSFile900\\as_com\\__utm.js": true,
    "JSFile900\\cartoonnetwork_com\\ac_fl.js": true,
    "JSFile900\\cartoonnetwork_com\\common.js": true,
    "JSFile900\\cartoonnetwork_com\\previewPage.js": true,
    "JSFile900\\cartoonnetwork_com\\s_code_H15.js": true,
    "JSFile900\\cartoonnetwork_com\\utils.js": true,
    "JSFile900\\dailymail_co_uk\\dm1__46_FIX_SNAPSHOT_build_228.js": true,
    "JSFile900\\ed_gov\\gfeedfetcher.js": true,
    "JSFile900\\ed_gov\\jquery.js": true,
    "JSFile900\\ed_gov\\jquery_hoverIntent_minified.js": true,
    "JSFile900\\ed_gov\\jquery_min.js": true,
    "JSFile900\\ed_gov\\main.js": true,
    "JSFile900\\gumtree_com\\weather_widget.js": true,
    "JSFile900\\hilton_com\\adverpost_data_file_coco.js": true,
    "JSFile900\\hilton_com\\adverpost_data_file_perez.js": true,
    "JSFile900\\hilton_com\\brand_homepage.js": true,
    "JSFile900\\hilton_com\\default.js": true,
    "JSFile900\\hilton_com\\ResourceHandler.js": true,
    "JSFile900\\hilton_com\\wtbaseHilton.js": true,
    "JSFile900\\logmein_com\\ScriptResource.js": true,
    "JSFile900\\logmein_com\\wtid.js": true,
    "JSFile900\\netteller_com\\JHA_Core.js": true,
    "JSFile900\\netteller_com\\jquery_1_4_3_min.js": true,
    "JSFile900\\netteller_com\\jquery_ui_1_8_custom_min.js": true,
    "JSFile900\\netteller_com\\NetTellerCorners.js": true,
    "JSFile900\\one_lt\\xgemius.js": true,
    "JSFile900\\playhub_com\\xajax_core.js": true,
    "JSFile900\\snap_com\\jquery_1_3_1.js": true,
    "JSFile900\\snap_com\\jquery_hoverIntent.js": true,
    "JSFile900\\snap_com\\prototype.js": true,
    "JSFile900\\usatoday_com\\usataj.js": true,
    "JSFile900\\usps_com\\calendar.js": true,
    "JSFile900\\usps_com\\calendar_custom.js": true,
    "JSFile900\\usps_com\\calendar_en.js": true,
    "JSFile900\\usps_com\\calendar_setup.js": true,
    "JSFile900\\usps_com\\default.js": true,
    "JSFile900\\usps_com\\disclaimer.js": true,
    "JSFile900\\usps_com\\utils.js": true,
    "JSFile900\\usps_com\\wtid.js": true,
    "JSFile900\\washingtonpost_com\\utilsTextLinksXML.js": true,
    "JSFile900\\whitepages_com\\AAMSZ_teaser_link.js": true,
    "JSFileTop1000\\answers_com\\Flash.js": true,
    "JSFileTop1000\\answers_com\\generalFunctions.js": true,
    "JSFileTop1000\\answers_com\\PHAScript.js": true,
    "JSFileTop1000\\army_mil\\302.js": true,
    "JSFileTop1000\\army_mil\\bookmark.js": true,
    "JSFileTop1000\\army_mil\\centeredwindow.js": true,
    "JSFileTop1000\\army_mil\\coolmenus4.js": true,
    "JSFileTop1000\\army_mil\\ddlevelsmenu.js": true,
    "JSFileTop1000\\army_mil\\functions.js": true,
    "JSFileTop1000\\army_mil\\incBottom.js": true,
    "JSFileTop1000\\army_mil\\javascripts.js": true,
    "JSFileTop1000\\army_mil\\jquery_hoverIntent.js": true,
    "JSFileTop1000\\army_mil\\jquery_hoverIntent_min.js": true,
    "JSFileTop1000\\army_mil\\leavingmil.js": true,
    "JSFileTop1000\\army_mil\\main.js": true,
    "JSFileTop1000\\army_mil\\NewsSlide.js": true,
    "JSFileTop1000\\army_mil\\png.js": true,
    "JSFileTop1000\\army_mil\\random.js": true,
    "JSFileTop1000\\army_mil\\randompics.js": true,
    "JSFileTop1000\\army_mil\\randomtext.js": true,
    "JSFileTop1000\\army_mil\\skmmenu.js": true,
    "JSFileTop1000\\army_mil\\stmenu.js": true,
    "JSFileTop1000\\army_mil\\swfobject.js": true,
    "JSFileTop1000\\army_mil\\worldClock.js": true,
    "JSFileTop1000\\buienradar_nl\\checkscherm.js": true,
    "JSFileTop1000\\buienradar_nl\\comscore.js": true,
    "JSFileTop1000\\buienradar_nl\\comscore_clickout.js": true,
    "JSFileTop1000\\buienradar_nl\\floorad.js": true,
    "JSFileTop1000\\elmundo_es\\accordian.js": true,
    "JSFileTop1000\\elmundo_es\\toolbar_colapsada.js": true,
    "JSFileTop1000\\fulltono_com\\fulltono2.js": true,
    "JSFileTop1000\\fulltono_com\\invite.js": true,
    "JSFileTop1000\\fulltono_com\\mt.js": true,
    "JSFileTop1000\\fulltono_com\\swfobject.js": true,
    "JSFileTop1000\\hankooki_com\\main_hk.js": true,
    "JSFileTop1000\\hkjc_com\\globallogin.js": true,
    "JSFileTop1000\\hkjc_com\\homepage_feature_1.js": true,
    "JSFileTop1000\\hkjc_com\\homepage_feature_2.js": true,
    "JSFileTop1000\\hkjc_com\\homepage_feature_3.js": true,
    "JSFileTop1000\\hkjc_com\\home_news_headlines.js": true,
    "JSFileTop1000\\hkjc_com\\ssoConfig.js": true,
    "JSFileTop1000\\hkjc_com\\SSOCore.js": true,
    "JSFileTop1000\\hkjc_com\\swap_image.js": true,
    "JSFileTop1000\\hm_com\\globalJQ.js": true,
    "JSFileTop1000\\hm_com\\membership.js": true,
    "JSFileTop1000\\hm_com\\upp.js": true,
    "JSFileTop1000\\intellitxt_com\\coxtv_itxt.js": true,
    "JSFileTop1000\\intellitxt_com\\data_1307015294.js": true,
    "JSFileTop1000\\kbb_com\\optimostfoot.js": true,
    "JSFileTop1000\\kiwidisk_com\\default.js": true,
    "JSFileTop1000\\kiwidisk_com\\formchk.js": true,
    "JSFileTop1000\\lespac_com\\jquery_validate_pack.js": true,
    "JSFileTop1000\\lotte_com\\BIM_js_popwin.js": true,
    "JSFileTop1000\\mthai_com\\innerfade.js": true,
    "JSFileTop1000\\mthai_com\\jquery.js": true,
    "JSFileTop1000\\nab_com_au\\autoSharePrice.js": true,
    "JSFileTop1000\\nab_com_au\\Common_OpenWin.js": true,
    "JSFileTop1000\\nab_com_au\\national_search.js": true,
    "JSFileTop1000\\nhk_or_jp\\common.js": true,
    "JSFileTop1000\\nih_gov\\browserCheck2.js": true,
    "JSFileTop1000\\nih_gov\\googleTrackingCode.js": true,
    "JSFileTop1000\\nih_gov\\images2.js": true,
    "JSFileTop1000\\nih_gov\\jig_min.js": true,
    "JSFileTop1000\\nih_gov\\leavesite.js": true,
    "JSFileTop1000\\nih_gov\\MenuAdapter.js": true,
    "JSFileTop1000\\nih_gov\\portal.js": true,
    "JSFileTop1000\\nih_gov\\style_logic2.js": true,
    "JSFileTop1000\\nih_gov\\utils.js": true,
    "JSFileTop1000\\nih_gov\\vivisimo.js": true,
    "JSFileTop1000\\nih_gov\\wtid.js": true,
    "JSFileTop1000\\officelive_com\\WebResource.js": true,
    "JSFileTop1000\\people_com\\bhpoptin.js": true,
    "JSFileTop1000\\people_com\\functions.js": true,
    "JSFileTop1000\\people_com\\jquery_1_4_2_min.js": true,
    "JSFileTop1000\\people_com\\main.js": true,
    "JSFileTop1000\\people_com\\WebResource.js": true,
    "JSFileTop1000\\sears_com\\foresee_surveydef.js": true,
    "JSFileTop1000\\state_gov\\google_analytics.js": true,
    "JSFileTop1000\\state_gov\\WebUIValidation.js": true,
    "JSFileTop1000\\sympatico_ca\\jquery_blockUI.js": true,
    "JSFileTop1000\\uwants_com\\ajax.js": true,
    "JSFileTop1000\\uwants_com\\common_rev09.js": true,
    "JSFileTop1000\\verizon_com\\Ajax.js": true,
    "JSFileTop1000\\verizon_com\\Connect.js": true,
    "JSFileTop1000\\verizon_com\\custom_hbx.js": true,
    "JSFileTop1000\\verizon_com\\hbxscript.js": true,
    "JSFileTop1000\\verizon_com\\helper.js": true,
    "JSFileTop1000\\verizon_com\\javascriptConstants_jsp.js": true,
    "JSFileTop1000\\verizon_com\\jquery_latest.js": true,
    "JSFileTop1000\\verizon_com\\mpesp.js": true,
    "JSFileTop1000\\verizon_com\\Rating.js": true,
    "JSFileTop1000\\verizon_com\\ReviewIt.js": true,
    "JSFileTop1000\\verizon_com\\ShareIt.js": true,
    "JSFileTop1000\\verizon_com\\thickbox.js": true,
    "JSFileTop1000\\verizon_com\\UnAuthenticatedFunction.js": true,
    "JSFileTop1000\\vg_no\\adscript.js": true,
    "JSFileTop1000\\weebly_com\\effects_min.js": true,
    "JSFileTop1000\\xe_com\\dnn.js": true,
    "JSFileTop1000\\xe_com\\dnn_xml.js": true,
    "JSFileTop1000\\xe_com\\dnn_xmlhttp.js": true,
    "JSFile100\\amazon_com\\01Tr6v6ehxL.js": true,
    "JSFile100\\facebook_com\\6S8W9_zcvGH.js": true,
    "JSFile100\\bing_com\\s_code.js": true,
    "JSFile100\\comcast_net\\datechooser.js": true,
    "JSFile100\\amazon_com\\all_1.js": true,
    "JSFile100\\atdmt_com\\016758.js": true,
    "JSFile100\\yandex_ru\\watch_visor.js": true,
    "JSFile100\\uol_com_br\\site_uolbr_chan_batepapo_subchan_capa_affiliate_uolbrbatepapo_size_125x125_page_7_conntype_1_expble_0_reso_1756x1127_tile_215298826605972.js": true,
    "JSFile100\\uol_com_br\\site_uolbr_chan_batepapo_subchan_capa_affiliate_uolbrbatepapo_size_728x90_page_1_conntype_1_expble_0_reso_1756x1127_tile_215298826605972.js": true,
    "JSFile100\\aol_com\\ajax.js": true,
    "JSFile100\\aol_com\\ad_refresher.js": true,
    "JSFile100\\bing_com\\omniture.js": true,
    "JSFile100\\bing_com\\ScriptResource.js": true,
    "JSFile600\\xstreetsl_com\\mootools_1_2_3_production.js": true,
    "JSFile800\\fedex_com\\InstantInvite3.js": true
};
var stringTable = Collections.createStringTable();
var specificFile = undefined;
var Program = (function () {
    function Program() { }
    Program.prototype.runAllTests = function (environment, useTypeScript, verify) {
        var _this = this;
        environment.standardOut.WriteLine("");
        environment.standardOut.WriteLine("Testing trivia.");
        this.runTests(environment, "C:\\fidelity\\src\\prototype\\tests\\trivia\\ecmascript5", function (filePath) {
            return _this.runTrivia(environment, filePath, 1 /* EcmaScript5 */ , verify, false);
        });
        environment.standardOut.WriteLine("Testing scanner.");
        this.runTests(environment, "C:\\fidelity\\src\\prototype\\tests\\scanner\\ecmascript5", function (filePath) {
            return _this.runScanner(environment, filePath, 1 /* EcmaScript5 */ , verify, false);
        });
        environment.standardOut.WriteLine("Testing parser.");
        this.runTests(environment, "C:\\fidelity\\src\\prototype\\tests\\parser\\ecmascript5", function (filePath) {
            return _this.runParser(environment, filePath, 1 /* EcmaScript5 */ , useTypeScript, verify, false);
        });
        environment.standardOut.WriteLine("Testing emitter.");
        this.runTests(environment, "C:\\fidelity\\src\\prototype\\tests\\emitter\\ecmascript5", function (filePath) {
            return _this.runEmitter(environment, filePath, 1 /* EcmaScript5 */ , verify, false, false);
        });
        environment.standardOut.WriteLine("Testing emitter.");
        this.runTests(environment, "C:\\fidelity\\src\\prototype\\tests\\emitter2\\ecmascript5", function (filePath) {
            return _this.runEmitter(environment, filePath, 1 /* EcmaScript5 */ , verify, false, true);
        });
        environment.standardOut.WriteLine("Testing against monoco.");
        this.runTests(environment, "C:\\temp\\monoco-files", function (filePath) {
            return _this.runParser(environment, filePath, 1 /* EcmaScript5 */ , useTypeScript, false, false);
        });
        environment.standardOut.WriteLine("Testing against 262.");
        this.runTests(environment, "C:\\fidelity\\src\\prototype\\tests\\test262", function (filePath) {
            return _this.runParser(environment, filePath, 1 /* EcmaScript5 */ , useTypeScript, true, true);
        });
    };
    Program.prototype.handleException = function (environment, filePath, e) {
        environment.standardOut.WriteLine("");
        if((e.message).indexOf(filePath) < 0) {
            environment.standardOut.WriteLine("Exception: " + filePath + ": " + e.message);
        } else {
            environment.standardOut.WriteLine(e.message);
        }
    };
    Program.prototype.runTests = function (environment, path, action) {
        var testFiles = environment.listFiles(path, null, {
            recursive: true
        });
        for(var index in testFiles) {
            var filePath = testFiles[index];
            if(specificFile !== undefined && filePath.indexOf(specificFile) < 0) {
                continue;
            }
            try  {
                action(filePath);
            } catch (e) {
                this.handleException(environment, filePath, e);
            }
        }
    };
    Program.prototype.checkResult = function (filePath, result, verify, generateBaseline, justText) {
        if(generateBaseline) {
            var actualResult = justText ? result : JSON2.stringify(result, null, 4);
            var expectedFile = filePath + ".expected";
            Environment.writeFile(expectedFile, actualResult, true);
        } else {
            if(verify) {
                var actualResult = justText ? result : JSON2.stringify(result, null, 4);
                var expectedFile = filePath + ".expected";
                var actualFile = filePath + ".actual";
                var expectedResult = null;
                if(!Environment.fileExists(expectedFile)) {
                    Environment.writeFile(expectedFile, "", false);
                } else {
                    expectedResult = Environment.readFile(expectedFile, true);
                }
                if(expectedResult !== actualResult) {
                    Environment.standardOut.WriteLine(" !! Test Failed. Results written to: " + actualFile);
                    Environment.writeFile(actualFile, actualResult, true);
                }
            }
        }
    };
    Program.prototype.runEmitter = function (environment, filePath, languageVersion, verify, generateBaseline, justText) {
        if(true) {
        }
        if(!StringUtilities.endsWith(filePath, ".ts") && !StringUtilities.endsWith(filePath, ".js")) {
            return;
        }
        if(filePath.indexOf("RealSource") >= 0) {
            return;
        }
        var contents = environment.readFile(filePath, true);
        var start, end;
        start = new Date().getTime();
        totalSize += contents.length;
        var text = TextFactory.create(contents);
        var tree = Parser.parse(text, languageVersion, stringTable);
        var emitted = Emitter.emit(tree.sourceUnit());
        end = new Date().getTime();
        totalTime += (end - start);
        var result = justText ? emitted.fullText() : {
            fullText: emitted.fullText().split("\r\n"),
            sourceUnit: emitted
        };
        this.checkResult(filePath, result, verify, generateBaseline, justText);
    };
    Program.prototype.runParser = function (environment, filePath, languageVersion, useTypeScript, verify, generateBaseline) {
        if (typeof generateBaseline === "undefined") { generateBaseline = false; }
        if(!StringUtilities.endsWith(filePath, ".ts") && !StringUtilities.endsWith(filePath, ".js")) {
            return;
        }
        if(filePath.indexOf("RealSource") >= 0) {
            return;
        }
        var contents = environment.readFile(filePath, true);
        var start, end;
        start = new Date().getTime();
        totalSize += contents.length;
        if(useTypeScript) {
            end = new Date().getTime();
            totalTime += (end - start);
        } else {
            var text = TextFactory.create(contents);
            var tree = Parser.parse(text, languageVersion, stringTable);
            end = new Date().getTime();
            totalTime += (end - start);
            this.checkResult(filePath, tree, verify, generateBaseline, false);
        }
    };
    Program.prototype.runTrivia = function (environment, filePath, languageVersion, verify, generateBaseline) {
        if (typeof generateBaseline === "undefined") { generateBaseline = false; }
        if(!StringUtilities.endsWith(filePath, ".ts")) {
            return;
        }
        var contents = environment.readFile(filePath, true);
        var start, end;
        start = new Date().getTime();
        var text = TextFactory.create(contents);
        var scanner = new Scanner(text, languageVersion, stringTable);
        var tokens = [];
        var textArray = [];
        var diagnostics = [];
        while(true) {
            var token = scanner.scan(diagnostics, false);
            tokens.push(token.realize());
            if(token.tokenKind === 118 /* EndOfFileToken */ ) {
                break;
            }
        }
        end = new Date().getTime();
        totalTime += (end - start);
        this.checkResult(filePath, tokens, verify, generateBaseline, false);
    };
    Program.prototype.runScanner = function (environment, filePath, languageVersion, verify, generateBaseline) {
        if(!StringUtilities.endsWith(filePath, ".ts")) {
            return;
        }
        var contents = environment.readFile(filePath, true);
        var start, end;
        start = new Date().getTime();
        var text = TextFactory.create(contents);
        var scanner = new Scanner(text, languageVersion, stringTable);
        var tokens = [];
        var textArray = [];
        var diagnostics = [];
        while(true) {
            var token = scanner.scan(diagnostics, false);
            tokens.push(token);
            if(token.tokenKind === 118 /* EndOfFileToken */ ) {
                break;
            }
        }
        end = new Date().getTime();
        totalTime += (end - start);
        if(verify) {
            var tokenText = ArrayUtilities.select(tokens, function (t) {
                return t.fullText();
            }).join("");
            if(tokenText !== contents) {
                throw new Error("Token invariant broken!");
            }
        }
        var result = diagnostics.length === 0 ? tokens : {
            diagnostics: diagnostics,
            tokens: tokens
        };
        this.checkResult(filePath, result, verify, generateBaseline, false);
    };
    Program.prototype.run = function (environment, useTypeScript) {
        environment.standardOut.WriteLine("Testing input files.");
        for(var index in environment.arguments) {
            var filePath = environment.arguments[index];
            if(specificFile !== undefined && filePath.indexOf(specificFile) < 0) {
                continue;
            }
            this.runParser(environment, filePath, 1 /* EcmaScript5 */ , useTypeScript, false, false);
        }
    };
    Program.prototype.run262 = function (environment) {
        var path = "C:\\temp\\test262\\suite";
        var testFiles = environment.listFiles(path, null, {
            recursive: true
        });
        var testCount = 0;
        var failCount = 0;
        var skippedTests = [];
        for(var index in testFiles) {
            var filePath = testFiles[index];
            if(specificFile !== undefined && filePath.indexOf(specificFile) < 0) {
                continue;
            }
            var contents = environment.readFile(filePath, true);
            var start, end;
            start = new Date().getTime();
            try  {
                totalSize += contents.length;
                var isNegative = contents.indexOf("@negative") >= 0;
                testCount++;
                try  {
                    var stringText = TextFactory.create(contents);
                    var tree = Parser.parse(stringText, 1 /* EcmaScript5 */ , stringTable);
                    if(isNegative) {
                        var fileName = filePath.substr(filePath.lastIndexOf("\\") + 1);
                        var canParseSuccessfully = negative262ExpectedResults[fileName];
                        if(canParseSuccessfully) {
                            if(tree.diagnostics() && tree.diagnostics().length > 0) {
                                environment.standardOut.WriteLine("Negative test. Unexpected failure: " + filePath);
                                failCount++;
                            }
                        } else {
                            if(tree.diagnostics() === null || tree.diagnostics().length === 0) {
                                environment.standardOut.WriteLine("Negative test. Unexpected success: " + filePath);
                                failCount++;
                            }
                        }
                    } else {
                        if(tree.diagnostics() && tree.diagnostics().length > 0) {
                            environment.standardOut.WriteLine("Unexpected failure: " + filePath);
                            failCount++;
                        }
                    }
                } catch (e) {
                    failCount++;
                    this.handleException(environment, filePath, e);
                }
            }finally {
                end = new Date().getTime();
                totalTime += (end - start);
            }
        }
        environment.standardOut.WriteLine("");
        environment.standardOut.WriteLine("Test 262 results:");
        environment.standardOut.WriteLine("Test Count: " + testCount);
        environment.standardOut.WriteLine("Skip Count: " + skippedTests.length);
        environment.standardOut.WriteLine("Fail Count: " + failCount);
        for(var i = 0; i < skippedTests.length; i++) {
            environment.standardOut.WriteLine(skippedTests[i]);
        }
    };
    Program.prototype.runTop1000 = function (environment) {
        environment.standardOut.WriteLine("Testing top 1000 sites.");
        var path = "C:\\Temp\\TopJSFiles";
        var testFiles = environment.listFiles(path, null, {
            recursive: true
        });
        var testCount = 0;
        var failCount = 0;
        var skippedTests = [];
        for(var index in testFiles) {
            var filePath = testFiles[index];
            if(specificFile !== undefined && filePath.indexOf(specificFile) < 0) {
                continue;
            }
            var canParseSuccessfully = expectedTop1000Failures[filePath.substr(path.length + 1)] === undefined;
            var contents = environment.readFile(filePath, true);
            var start, end;
            start = new Date().getTime();
            try  {
                totalSize += contents.length;
                testCount++;
                try  {
                    var stringText = TextFactory.create(contents);
                    var tree = Parser.parse(stringText, 1 /* EcmaScript5 */ , stringTable);
                    if(canParseSuccessfully) {
                        if(tree.diagnostics() && tree.diagnostics().length > 0) {
                            environment.standardOut.WriteLine("Unexpected failure: " + filePath);
                            failCount++;
                        }
                    } else {
                        if(tree.diagnostics() === null || tree.diagnostics().length === 0) {
                            environment.standardOut.WriteLine("Unexpected success: " + filePath);
                            failCount++;
                        }
                    }
                } catch (e) {
                    failCount++;
                    this.handleException(environment, filePath, e);
                }
            }finally {
                end = new Date().getTime();
                totalTime += (end - start);
            }
        }
        environment.standardOut.WriteLine("");
        environment.standardOut.WriteLine("Top 1000 results:");
        environment.standardOut.WriteLine("Test Count: " + testCount);
        environment.standardOut.WriteLine("Skip Count: " + skippedTests.length);
        environment.standardOut.WriteLine("Fail Count: " + failCount);
        for(var i = 0; i < skippedTests.length; i++) {
            environment.standardOut.WriteLine(skippedTests[i]);
        }
    };
    return Program;
})();
var totalSize = 0;
var totalTime = 0;
var program = new Program();
if(true) {
    totalTime = 0;
    totalSize = 0;
    program.runAllTests(Environment, false, true);
    program.run(Environment, false);
    Environment.standardOut.WriteLine("Total time: " + totalTime);
    Environment.standardOut.WriteLine("Total size: " + totalSize);
}
if(false) {
    totalTime = 0;
    totalSize = 0;
    program.runAllTests(Environment, true, false);
    program.run(Environment, true);
    Environment.standardOut.WriteLine("Total time: " + totalTime);
    Environment.standardOut.WriteLine("Total size: " + totalSize);
}
if(true) {
    totalTime = 0;
    totalSize = 0;
    program.run262(Environment);
    Environment.standardOut.WriteLine("Total time: " + totalTime);
    Environment.standardOut.WriteLine("Total size: " + totalSize);
}
if(false) {
    totalTime = 0;
    totalSize = 0;
    program.runTop1000(Environment);
    Environment.standardOut.WriteLine("Total time: " + totalTime);
    Environment.standardOut.WriteLine("Total size: " + totalSize);
}
