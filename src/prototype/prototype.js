var JSON2 = {
};
((function () {
    'use strict';
    function f(n) {
        return n < 10 ? '0' + n : n;
    }
    if(typeof Date.prototype.toJSON !== 'function') {
        Date.prototype.toJSON = function (key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;
        };
        var strProto = String.prototype;
        var numProto = Number.prototype;
        numProto.JSON = strProto.JSON = (Boolean).prototype.toJSON = function (key) {
            return this.valueOf();
        };
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
'\b': '\\b',
'\t': '\\t',
'\n': '\\n',
'\f': '\\f',
'\r': '\\r',
'"': '\\"',
'\\': '\\\\'    }, rep;
    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }
    function str(key, holder) {
        var i, k = null, v, length, mind = gap, partial, value = holder[key];
        if(value && typeof value === 'object' && typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }
        if(typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }
        switch(typeof value) {
            case 'string': {
                return quote(value);

            }
            case 'number': {
                return isFinite(value) ? String(value) : 'null';

            }
            case 'boolean':
            case 'null': {
                return String(value);

            }
            case 'object': {
                if(!value) {
                    return 'null';
                }
                gap += indent;
                partial = [];
                if(Object.prototype.toString.apply(value, []) === '[object Array]') {
                    length = value.length;
                    for(i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || 'null';
                    }
                    v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
                    gap = mind;
                    return v;
                }
                if(rep && typeof rep === 'object') {
                    length = rep.length;
                    for(i = 0; i < length; i += 1) {
                        if(typeof rep[i] === 'string') {
                            k = rep[i];
                            v = str(k, value);
                            if(v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                } else {
                    for(k in value) {
                        if(Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if(v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                }
                v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
                gap = mind;
                return v;

            }
        }
    }
    if(typeof JSON2.stringify !== 'function') {
        JSON2.stringify = function (value, replacer, space) {
            var i;
            gap = '';
            indent = '';
            if(typeof space === 'number') {
                for(i = 0; i < space; i += 1) {
                    indent += ' ';
                }
            } else {
                if(typeof space === 'string') {
                    indent = space;
                }
            }
            rep = replacer;
            if(replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }
            return str('', {
                '': value
            });
        };
    }
    if(typeof JSON2.parse !== 'function') {
        JSON2.parse = function (text, reviver) {
            var j;
            function walk(holder, key) {
                var k = null, v, value = holder[key];
                if(value && typeof value === 'object') {
                    for(k in value) {
                        if(Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if(v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }
            text = String(text);
            cx.lastIndex = 0;
            if(cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                j = eval('(' + text + ')');
                return typeof reviver === 'function' ? walk({
                    '': j
                }, '') : j;
            }
            throw new SyntaxError('JSON.parse');
        };
    }
})());
var Errors = (function () {
    function Errors() { }
    Errors.argument = function argument(argument, message) {
        return new Error("Invalid argument: " + argument + "." + (message ? (" " + message) : ""));
    }
    Errors.argumentOutOfRange = function argumentOutOfRange(argument) {
        return new Error("Argument out of range: " + argument + ".");
    }
    Errors.argumentNull = function argumentNull(argument) {
        return new Error("Argument null: " + argument + ".");
    }
    Errors.abstract = function abstract() {
        return new Error("Operation not implemented properly by subclass.");
    }
    Errors.notYetImplemented = function notYetImplemented() {
        return new Error("Not yet implemented.");
    }
    Errors.invalidOperation = function invalidOperation(message) {
        return new Error(message ? ("Invalid operation: " + message) : "Invalid operation.");
    }
    return Errors;
})();
var ArrayUtilities = (function () {
    function ArrayUtilities() { }
    ArrayUtilities.isArray = function isArray(value) {
        return Object.prototype.toString.apply(value, []) === '[object Array]';
    }
    ArrayUtilities.groupBy = function groupBy(array, func) {
        var result = {
        };
        for(var i = 0, n = array.length; i < n; i++) {
            var v = array[i];
            var k = func(v);
            var list = result[k] || [];
            list.push(v);
            result[k] = list;
        }
        return result;
    }
    ArrayUtilities.min = function min(array, func) {
        Debug.assert(array.length > 0);
        var min = func(array[0]);
        for(var i = 1; i < array.length; i++) {
            var next = func(array[i]);
            if(next < min) {
                min = next;
            }
        }
        return min;
    }
    ArrayUtilities.max = function max(array, func) {
        Debug.assert(array.length > 0);
        var max = func(array[0]);
        for(var i = 1; i < array.length; i++) {
            var next = func(array[i]);
            if(next > max) {
                max = next;
            }
        }
        return max;
    }
    ArrayUtilities.last = function last(array) {
        if(array.length === 0) {
            throw Errors.argumentOutOfRange('array');
        }
        return array[array.length - 1];
    }
    ArrayUtilities.firstOrDefault = function firstOrDefault(array, func) {
        for(var i = 0, n = array.length; i < n; i++) {
            var value = array[i];
            if(func(value)) {
                return value;
            }
        }
        return null;
    }
    ArrayUtilities.sum = function sum(array, func) {
        var result = 0;
        for(var i = 0, n = array.length; i < n; i++) {
            result += func(array[i]);
        }
        return result;
    }
    ArrayUtilities.whereNotNull = function whereNotNull(array) {
        var result = [];
        for(var i = 0; i < array.length; i++) {
            var value = array[i];
            if(value !== null) {
                result.push(value);
            }
        }
        return result;
    }
    ArrayUtilities.select = function select(values, func) {
        var result = [];
        for(var i = 0; i < values.length; i++) {
            result.push(func(values[i]));
        }
        return result;
    }
    ArrayUtilities.where = function where(values, func) {
        var result = [];
        for(var i = 0; i < values.length; i++) {
            if(func(values[i])) {
                result.push(values[i]);
            }
        }
        return result;
    }
    ArrayUtilities.any = function any(array, func) {
        for(var i = 0, n = array.length; i < n; i++) {
            if(func(array[i])) {
                return true;
            }
        }
        return false;
    }
    ArrayUtilities.all = function all(array, func) {
        for(var i = 0, n = array.length; i < n; i++) {
            if(!func(array[i])) {
                return false;
            }
        }
        return true;
    }
    ArrayUtilities.binarySearch = function binarySearch(array, value) {
        var low = 0;
        var high = array.length - 1;
        while(low <= high) {
            var middle = low + ((high - low) >> 1);
            var midValue = array[middle];
            if(midValue === value) {
                return middle;
            } else {
                if(midValue > value) {
                    high = middle - 1;
                } else {
                    low = middle + 1;
                }
            }
        }
        return ~low;
    }
    ArrayUtilities.createArray = function createArray(length, defaultvalue) {
        if (typeof defaultvalue === "undefined") { defaultvalue = null; }
        var result = [];
        for(var i = 0; i < length; i++) {
            result.push(defaultvalue);
        }
        return result;
    }
    ArrayUtilities.grow = function grow(array, length, defaultValue) {
        var count = length - array.length;
        for(var i = 0; i < count; i++) {
            array.push(defaultValue);
        }
    }
    ArrayUtilities.copy = function copy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
        for(var i = 0; i < length; i++) {
            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];
        }
    }
    return ArrayUtilities;
})();
var CharacterCodes;
(function (CharacterCodes) {
    CharacterCodes._map = [];
    CharacterCodes.nullCharacter = 0;
    CharacterCodes.maxAsciiCharacter = 127;
    CharacterCodes.lineFeed = 10;
    CharacterCodes.carriageReturn = 13;
    CharacterCodes.lineSeparator = 8232;
    CharacterCodes.paragraphSeparator = 8233;
    CharacterCodes.space = 32;
    CharacterCodes.nextLine = 133;
    CharacterCodes.nonBreakingSpace = 160;
    CharacterCodes._ = 95;
    CharacterCodes.$ = 36;
    CharacterCodes._0 = 48;
    CharacterCodes._9 = 57;
    CharacterCodes.a = 97;
    CharacterCodes.b = 98;
    CharacterCodes.c = 99;
    CharacterCodes.d = 100;
    CharacterCodes.e = 101;
    CharacterCodes.f = 102;
    CharacterCodes.g = 103;
    CharacterCodes.h = 104;
    CharacterCodes.i = 105;
    CharacterCodes.k = 107;
    CharacterCodes.l = 108;
    CharacterCodes.m = 109;
    CharacterCodes.n = 110;
    CharacterCodes.o = 111;
    CharacterCodes.p = 112;
    CharacterCodes.r = 114;
    CharacterCodes.s = 115;
    CharacterCodes.t = 116;
    CharacterCodes.u = 117;
    CharacterCodes.v = 118;
    CharacterCodes.w = 119;
    CharacterCodes.x = 120;
    CharacterCodes.y = 121;
    CharacterCodes.z = 122;
    CharacterCodes.A = 65;
    CharacterCodes.E = 69;
    CharacterCodes.F = 70;
    CharacterCodes.X = 88;
    CharacterCodes.Z = 90;
    CharacterCodes.ampersand = 38;
    CharacterCodes.asterisk = 42;
    CharacterCodes.backslash = 92;
    CharacterCodes.bar = 124;
    CharacterCodes.caret = 94;
    CharacterCodes.closeBrace = 125;
    CharacterCodes.closeBracket = 93;
    CharacterCodes.closeParen = 41;
    CharacterCodes.colon = 58;
    CharacterCodes.comma = 44;
    CharacterCodes.dot = 46;
    CharacterCodes.doubleQuote = 34;
    CharacterCodes.equals = 61;
    CharacterCodes.exclamation = 33;
    CharacterCodes.greaterThan = 62;
    CharacterCodes.lessThan = 60;
    CharacterCodes.minus = 45;
    CharacterCodes.openBrace = 123;
    CharacterCodes.openBracket = 91;
    CharacterCodes.openParen = 40;
    CharacterCodes.percent = 37;
    CharacterCodes.plus = 43;
    CharacterCodes.question = 63;
    CharacterCodes.semicolon = 59;
    CharacterCodes.singleQuote = 39;
    CharacterCodes.slash = 47;
    CharacterCodes.tilde = 126;
    CharacterCodes.backspace = 8;
    CharacterCodes.formFeed = 12;
    CharacterCodes.byteOrderMark = 65279;
    CharacterCodes.tab = 9;
    CharacterCodes.verticalTab = 11;
})(CharacterCodes || (CharacterCodes = {}));
var CharacterInfo = (function () {
    function CharacterInfo() { }
    CharacterInfo.isDecimalDigit = function isDecimalDigit(c) {
        return c >= 48 /* _0 */  && c <= 57 /* _9 */ ;
    }
    CharacterInfo.isHexDigit = function isHexDigit(c) {
        return CharacterInfo.isDecimalDigit(c) || (c >= 65 /* A */  && c <= 70 /* F */ ) || (c >= 97 /* a */  && c <= 102 /* f */ );
    }
    CharacterInfo.hexValue = function hexValue(c) {
        Debug.assert(CharacterInfo.isHexDigit(c));
        return CharacterInfo.isDecimalDigit(c) ? (c - 48 /* _0 */ ) : (c >= 65 /* A */  && c <= 70 /* F */ ) ? c - 65 /* A */  + 10 : c - 97 /* a */  + 10;
    }
    CharacterInfo.isWhitespace = function isWhitespace(ch) {
        switch(ch) {
            case 32 /* space */ :
            case 9 /* tab */ :
            case 11 /* verticalTab */ :
            case 12 /* formFeed */ :
            case 160 /* nonBreakingSpace */ :
            case 65279 /* byteOrderMark */ : {
                return true;

            }
        }
        return false;
    }
    CharacterInfo.isLineTerminator = function isLineTerminator(ch) {
        switch(ch) {
            case 13 /* carriageReturn */ :
            case 10 /* lineFeed */ :
            case 8233 /* paragraphSeparator */ :
            case 8232 /* lineSeparator */ : {
                return true;

            }
        }
        return false;
    }
    return CharacterInfo;
})();
var Constants;
(function (Constants) {
    Constants._map = [];
    Constants.Max31BitInteger = 1073741823;
    Constants.Min31BitInteger = -1073741824;
    Constants.TriviaNewLineMask = 134217728;
    Constants.TriviaCommentMask = 67108864;
    Constants.TriviaLengthMask = 67108863;
})(Constants || (Constants = {}));
var Debug = (function () {
    function Debug() { }
    Debug.assert = function assert(expression) {
        if(!expression) {
            throw new Error("Debug Failure. False expression.");
        }
    }
    return Debug;
})();
var Diagnostic = (function () {
    function Diagnostic(diagnosticCode, arguments) {
        this._diagnosticCode = 0;
        this._arguments = null;
        this._diagnosticCode = diagnosticCode;
        this._arguments = (arguments && arguments.length > 0) ? arguments : null;
    }
    Diagnostic.prototype.diagnosticCode = function () {
        return this._diagnosticCode;
    };
    Diagnostic.prototype.additionalLocations = function () {
        return [];
    };
    Diagnostic.prototype.message = function () {
        return DiagnosticMessages.getDiagnosticMessage(this._diagnosticCode, this._arguments);
    };
    return Diagnostic;
})();
var DiagnosticCode;
(function (DiagnosticCode) {
    DiagnosticCode._map = [];
    DiagnosticCode._map[0] = "Unrecognized_escape_sequence";
    DiagnosticCode.Unrecognized_escape_sequence = 0;
    DiagnosticCode._map[1] = "Unexpected_character_0";
    DiagnosticCode.Unexpected_character_0 = 1;
    DiagnosticCode._map[2] = "Missing_closing_quote_character";
    DiagnosticCode.Missing_closing_quote_character = 2;
    DiagnosticCode._map[3] = "Identifier_expected";
    DiagnosticCode.Identifier_expected = 3;
    DiagnosticCode._map[4] = "_0_keyword_expected";
    DiagnosticCode._0_keyword_expected = 4;
    DiagnosticCode._map[5] = "_0_expected";
    DiagnosticCode._0_expected = 5;
    DiagnosticCode._map[6] = "Identifier_expected__0_is_a_keyword";
    DiagnosticCode.Identifier_expected__0_is_a_keyword = 6;
    DiagnosticCode._map[7] = "Automatic_semicolon_insertion_not_allowed";
    DiagnosticCode.Automatic_semicolon_insertion_not_allowed = 7;
    DiagnosticCode._map[8] = "Unexpected_token__0_expected";
    DiagnosticCode.Unexpected_token__0_expected = 8;
    DiagnosticCode._map[9] = "Trailing_separator_not_allowed";
    DiagnosticCode.Trailing_separator_not_allowed = 9;
    DiagnosticCode._map[10] = "_StarSlash__expected";
    DiagnosticCode._StarSlash__expected = 10;
})(DiagnosticCode || (DiagnosticCode = {}));
var DiagnosticMessages = (function () {
    function DiagnosticMessages() { }
    DiagnosticMessages.codeToFormatString = [];
    DiagnosticMessages.initializeStaticData = function initializeStaticData() {
        if(DiagnosticMessages.codeToFormatString.length === 0) {
            DiagnosticMessages.codeToFormatString[0 /* Unrecognized_escape_sequence */ ] = "Unrecognized escape sequence.";
            DiagnosticMessages.codeToFormatString[1 /* Unexpected_character_0 */ ] = "Unexpected character {0}.";
            DiagnosticMessages.codeToFormatString[2 /* Missing_closing_quote_character */ ] = "Missing close quote character.";
            DiagnosticMessages.codeToFormatString[3 /* Identifier_expected */ ] = "Identifier expected.";
            DiagnosticMessages.codeToFormatString[4 /* _0_keyword_expected */ ] = "'{0}' keyword expected.";
            DiagnosticMessages.codeToFormatString[5 /* _0_expected */ ] = "'{0}' expected.";
            DiagnosticMessages.codeToFormatString[6 /* Identifier_expected__0_is_a_keyword */ ] = "Identifier expected; '{0}' is a keyword.";
            DiagnosticMessages.codeToFormatString[7 /* Automatic_semicolon_insertion_not_allowed */ ] = "Automatic semicolon insertion not allowed.";
            DiagnosticMessages.codeToFormatString[8 /* Unexpected_token__0_expected */ ] = "Unexpected token; '{0}' expected.";
            DiagnosticMessages.codeToFormatString[9 /* Trailing_separator_not_allowed */ ] = "Trailing separator not allowed.";
            DiagnosticMessages.codeToFormatString[10 /* _StarSlash__expected */ ] = "'*/' expected.";
        }
    }
    DiagnosticMessages.getFormatString = function getFormatString(code) {
        DiagnosticMessages.initializeStaticData();
        return DiagnosticMessages.codeToFormatString[code];
    }
    DiagnosticMessages.getDiagnosticMessage = function getDiagnosticMessage(code, args) {
        var formatString = DiagnosticMessages.getFormatString(code);
        var result = formatString.replace(/{(\d+)}/g, function (match, num) {
            return typeof args[num] !== 'undefined' ? args[num] : match;
        });
        return result;
    }
    return DiagnosticMessages;
})();

var Environment = (function () {
    function getWindowsScriptHostEnvironment() {
        try  {
            var fso = new ActiveXObject("Scripting.FileSystemObject");
        } catch (e) {
            return null;
        }
        var streamObjectPool = [];
        function getStreamObject() {
            if(streamObjectPool.length > 0) {
                return streamObjectPool.pop();
            } else {
                return new ActiveXObject("ADODB.Stream");
            }
        }
        function releaseStreamObject(obj) {
            streamObjectPool.push(obj);
        }
        var args = [];
        for(var i = 0; i < WScript.Arguments.length; i++) {
            args[i] = WScript.Arguments.Item(i);
        }
        return {
            readFile: function (path, useUTF8) {
                if (typeof useUTF8 === "undefined") { useUTF8 = false; }
                try  {
                    var streamObj = getStreamObject();
                    streamObj.Open();
                    streamObj.Type = 2;
                    streamObj.Charset = 'x-ansi';
                    streamObj.LoadFromFile(path);
                    var bomChar = streamObj.ReadText(2);
                    streamObj.Position = 0;
                    if((bomChar.charCodeAt(0) === 254 && bomChar.charCodeAt(1) === 255) || (bomChar.charCodeAt(0) === 255 && bomChar.charCodeAt(1) === 254)) {
                        streamObj.Charset = 'unicode';
                    } else {
                        if(bomChar.charCodeAt(0) === 239 && bomChar.charCodeAt(1) === 187) {
                            streamObj.Charset = 'utf-8';
                        } else {
                            streamObj.Charset = useUTF8 ? 'utf-8' : 'x-ansi';
                        }
                    }
                    var str = streamObj.ReadText(-1);
                    streamObj.Close();
                    releaseStreamObject(streamObj);
                    return str;
                } catch (err) {
                    throw new Error("Error reading file \"" + path + "\": " + err.message);
                }
            },
            writeFile: function (path, contents, useUTF8) {
                if (typeof useUTF8 === "undefined") { useUTF8 = false; }
                var file = this.createFile(path, useUTF8);
                file.Write(contents);
                file.Close();
            },
            fileExists: function (path) {
                return fso.FileExists(path);
            },
            deleteFile: function (path) {
                if(fso.FileExists(path)) {
                    fso.DeleteFile(path, true);
                }
            },
            directoryExists: function (path) {
                return fso.FolderExists(path);
            },
            listFiles: function (path, spec, options) {
                options = options || {
                };
                function filesInFolder(folder, root) {
                    var paths = [];
                    var fc;
                    if(options.recursive) {
                        fc = new Enumerator(folder.subfolders);
                        for(; !fc.atEnd(); fc.moveNext()) {
                            paths = paths.concat(filesInFolder(fc.item(), root + "\\" + fc.item().Name));
                        }
                    }
                    fc = new Enumerator(folder.files);
                    for(; !fc.atEnd(); fc.moveNext()) {
                        if(!spec || fc.item().Name.match(spec)) {
                            paths.push(root + "\\" + fc.item().Name);
                        }
                    }
                    return paths;
                }
                var folder = fso.GetFolder(path);
                var paths = [];
                return filesInFolder(folder, path);
            },
            createFile: function (path, useUTF8) {
                if (typeof useUTF8 === "undefined") { useUTF8 = false; }
                try  {
                    var streamObj = getStreamObject();
                    streamObj.Charset = useUTF8 ? 'utf-8' : 'x-ansi';
                    streamObj.Open();
                    return {
                        Write: function (str) {
                            streamObj.WriteText(str, 0);
                        },
                        WriteLine: function (str) {
                            streamObj.WriteText(str, 1);
                        },
                        Close: function () {
                            streamObj.SaveToFile(path, 2);
                            streamObj.Close();
                            releaseStreamObject(streamObj);
                        }
                    };
                } catch (ex) {
                    WScript.StdErr.WriteLine("Couldn't write to file '" + path + "'");
                    throw ex;
                }
            },
            arguments: args,
            standardOut: WScript.StdOut
        };
    }
    ; ;
    function getNodeEnvironment() {
        var _fs = require('fs');
        var _path = require('path');
        var _module = require('module');
        return {
            readFile: function (file, useUTF8) {
                var buffer = _fs.readFileSync(file);
                switch(buffer[0]) {
                    case 254: {
                        if(buffer[1] == 255) {
                            var i = 0;
                            while((i + 1) < buffer.length) {
                                var temp = buffer[i];
                                buffer[i] = buffer[i + 1];
                                buffer[i + 1] = temp;
                                i += 2;
                            }
                            return buffer.toString("ucs2", 2);
                        }
                        break;

                    }
                    case 255: {
                        if(buffer[1] == 254) {
                            return buffer.toString("ucs2", 2);
                        }
                        break;

                    }
                    case 239: {
                        if(buffer[1] == 187) {
                            return buffer.toString("utf8", 3);
                        }

                    }
                }
                return useUTF8 ? buffer.toString("utf8", 0) : buffer.toString();
            },
            writeFile: function (path, contents, useUTF) {
                if(useUTF) {
                    _fs.writeFileSync(path, contents, "utf8");
                } else {
                    _fs.writeFileSync(path, contents);
                }
            },
            fileExists: function (path) {
                return _fs.existsSync(path);
            },
            deleteFile: function (path) {
                try  {
                    _fs.unlinkSync(path);
                } catch (e) {
                }
            },
            directoryExists: function (path) {
                return _fs.existsSync(path) && _fs.lstatSync(path).isDirectory();
            },
            listFiles: function dir(path, spec, options) {
                options = options || {
                };
                function filesInFolder(folder) {
                    var paths = [];
                    var files = _fs.readdirSync(folder);
                    for(var i = 0; i < files.length; i++) {
                        var stat = _fs.statSync(folder + "\\" + files[i]);
                        if(options.recursive && stat.isDirectory()) {
                            paths = paths.concat(filesInFolder(folder + "\\" + files[i]));
                        } else {
                            if(stat.isFile() && (!spec || files[i].match(spec))) {
                                paths.push(folder + "\\" + files[i]);
                            }
                        }
                    }
                    return paths;
                }
                return filesInFolder(path);
            },
            createFile: function (path, useUTF8) {
                function mkdirRecursiveSync(path) {
                    var stats = _fs.statSync(path);
                    if(stats.isFile()) {
                        throw "\"" + path + "\" exists but isn't a directory.";
                    } else {
                        if(stats.isDirectory()) {
                            return;
                        } else {
                            mkdirRecursiveSync(_path.dirname(path));
                            _fs.mkdirSync(path, 509);
                        }
                    }
                }
                mkdirRecursiveSync(_path.dirname(path));
                var fd = _fs.openSync(path, 'w');
                return {
                    Write: function (str) {
                        _fs.writeSync(fd, str);
                    },
                    WriteLine: function (str) {
                        _fs.writeSync(fd, str + '\r\n');
                    },
                    Close: function () {
                        _fs.closeSync(fd);
                        fd = null;
                    }
                };
            },
            arguments: process.argv.slice(2),
            standardOut: {
                Write: function (str) {
                    process.stdout.write(str);
                },
                WriteLine: function (str) {
                    process.stdout.write(str + '\n');
                },
                Close: function () {
                }
            }
        };
    }
    ; ;
    if(typeof ActiveXObject === "function") {
        return getWindowsScriptHostEnvironment();
    } else {
        if(typeof require === "function") {
            return getNodeEnvironment();
        } else {
            return null;
        }
    }
})();
var FormattingOptions = (function () {
    function FormattingOptions(useTabs, spacesPerTab, indentSpaces) {
        this.useTabs = useTabs;
        this.spacesPerTab = spacesPerTab;
        this.indentSpaces = indentSpaces;
    }
    FormattingOptions.defaultOptions = new FormattingOptions(false, 4, 4);
    return FormattingOptions;
})();
var Contract = (function () {
    function Contract() { }
    Contract.requires = function requires(expression) {
        if(!expression) {
            throw new Error("Contract violated. False expression.");
        }
    }
    Contract.throwIfFalse = function throwIfFalse(expression) {
        if(!expression) {
            throw new Error("Contract violated. False expression.");
        }
    }
    Contract.throwIfNull = function throwIfNull(value) {
        if(value === null) {
            throw new Error("Contract violated. Null value.");
        }
    }
    return Contract;
})();
var Hash = (function () {
    function Hash() { }
    Hash.FNV_BASE = 2166136261;
    Hash.FNV_PRIME = 16777619;
    Hash.computeFnv1aCharArrayHashCode = function computeFnv1aCharArrayHashCode(text, start, len) {
        var hashCode = Hash.FNV_BASE;
        var end = start + len;
        for(var i = start; i < end; i++) {
            hashCode = (hashCode ^ text[i]) * Hash.FNV_PRIME;
        }
        return hashCode;
    }
    Hash.computeSimple31BitCharArrayHashCode = function computeSimple31BitCharArrayHashCode(key, start, len) {
        var hash = 0;
        for(var i = 0; i < len; i++) {
            var ch = key[start + i];
            hash = (((hash << 5) + hash) + ch) | 0;
        }
        return hash & 2147483647;
    }
    Hash.computeSimple31BitStringHashCode = function computeSimple31BitStringHashCode(key) {
        var hash = 0;
        var start = 0;
        var len = key.length;
        for(var i = 0; i < len; i++) {
            var ch = key.charCodeAt(start + i);
            hash = (((hash << 5) + hash) + ch) | 0;
        }
        return hash & 2147483647;
    }
    Hash.computeMurmur2CharArrayHashCode = function computeMurmur2CharArrayHashCode(key, start, len) {
        var m = 1540483477;
        var r = 24;
        var numberOfCharsLeft = len;
        var h = (0 ^ numberOfCharsLeft);
        var index = start;
        while(numberOfCharsLeft >= 2) {
            var c1 = key[index];
            var c2 = key[index + 1];
            var k = c1 | (c2 << 16);
            k *= m;
            k ^= k >> r;
            k *= m;
            h *= m;
            h ^= k;
            index += 2;
            numberOfCharsLeft -= 2;
        }
        if(numberOfCharsLeft == 1) {
            h ^= key[index];
            h *= m;
        }
        h ^= h >> 13;
        h *= m;
        h ^= h >> 15;
        return h;
    }
    Hash.computeMurmur2StringHashCode = function computeMurmur2StringHashCode(key) {
        var m = 1540483477;
        var r = 24;
        var start = 0;
        var len = key.length;
        var numberOfCharsLeft = len;
        var h = (0 ^ numberOfCharsLeft);
        var index = start;
        while(numberOfCharsLeft >= 2) {
            var c1 = key.charCodeAt(index);
            var c2 = key.charCodeAt(index + 1);
            var k = c1 | (c2 << 16);
            k *= m;
            k ^= k >> r;
            k *= m;
            h *= m;
            h ^= k;
            index += 2;
            numberOfCharsLeft -= 2;
        }
        if(numberOfCharsLeft == 1) {
            h ^= key.charCodeAt(index);
            h *= m;
        }
        h ^= h >> 13;
        h *= m;
        h ^= h >> 15;
        return h;
    }
    Hash.primes = [
        3, 
        7, 
        11, 
        17, 
        23, 
        29, 
        37, 
        47, 
        59, 
        71, 
        89, 
        107, 
        131, 
        163, 
        197, 
        239, 
        293, 
        353, 
        431, 
        521, 
        631, 
        761, 
        919, 
        1103, 
        1327, 
        1597, 
        1931, 
        2333, 
        2801, 
        3371, 
        4049, 
        4861, 
        5839, 
        7013, 
        8419, 
        10103, 
        12143, 
        14591, 
        17519, 
        21023, 
        25229, 
        30293, 
        36353, 
        43627, 
        52361, 
        62851, 
        75431, 
        90523, 
        108631, 
        130363, 
        156437, 
        187751, 
        225307, 
        270371, 
        324449, 
        389357, 
        467237, 
        560689, 
        672827, 
        807403, 
        968897, 
        1162687, 
        1395263, 
        1674319, 
        2009191, 
        2411033, 
        2893249, 
        3471899, 
        4166287, 
        4999559, 
        5999471, 
        7199369
    ];
    Hash.getPrime = function getPrime(min) {
        for(var i = 0; i < Hash.primes.length; i++) {
            var num = Hash.primes[i];
            if(num >= min) {
                return num;
            }
        }
        throw Errors.notYetImplemented();
    }
    Hash.expandPrime = function expandPrime(oldSize) {
        var num = oldSize << 1;
        if(num > 2146435069 && 2146435069 > oldSize) {
            return 2146435069;
        }
        return Hash.getPrime(num);
    }
    Hash.combine = function combine(value, currentHash) {
        return (((currentHash << 5) + currentHash) + value) & 2147483647;
    }
    return Hash;
})();
var HashTableEntry = (function () {
    function HashTableEntry(Key, Value, HashCode, Next) {
        this.Key = Key;
        this.Value = Value;
        this.HashCode = HashCode;
        this.Next = Next;
    }
    return HashTableEntry;
})();
var HashTable = (function () {
    function HashTable(capacity, hash, equals) {
        if (typeof capacity === "undefined") { capacity = HashTable.DefaultCapacity; }
        if (typeof hash === "undefined") { hash = null; }
        if (typeof equals === "undefined") { equals = null; }
        this.hash = hash;
        this.equals = equals;
        this.entries = [];
        this.count = 0;
        var size = Hash.getPrime(capacity);
        this.hash = hash;
        this.equals = equals;
        this.entries = ArrayUtilities.createArray(size);
    }
    HashTable.DefaultCapacity = 256;
    HashTable.prototype.set = function (key, value) {
        this.addOrSet(key, value, false);
    };
    HashTable.prototype.add = function (key, value) {
        this.addOrSet(key, value, true);
    };
    HashTable.prototype.get = function (key) {
        var hashCode = this.computeHashCode(key);
        var entry = this.findEntry(key, hashCode);
        return entry === null ? null : entry.Value;
    };
    HashTable.prototype.computeHashCode = function (key) {
        var hashCode = this.hash === null ? key.hashCode() : this.hash(key);
        hashCode = hashCode & 2147483647;
        Debug.assert(hashCode > 0);
        return hashCode;
    };
    HashTable.prototype.addOrSet = function (key, value, throwOnExistingEntry) {
        var hashCode = this.computeHashCode(key);
        var entry = this.findEntry(key, hashCode);
        if(entry !== null) {
            if(throwOnExistingEntry) {
                throw Errors.argument('key', 'Key was already in table.');
            }
            entry.Key = key;
            entry.Value = value;
            return;
        }
        return this.addEntry(key, value, hashCode);
    };
    HashTable.prototype.findEntry = function (key, hashCode) {
        for(var e = this.entries[hashCode % this.entries.length]; e !== null; e = e.Next) {
            if(e.HashCode === hashCode) {
                var equals = this.equals === null ? key === e.Key : this.equals(key, e.Key);
                if(equals) {
                    return e;
                }
            }
        }
        return null;
    };
    HashTable.prototype.addEntry = function (key, value, hashCode) {
        var index = hashCode % this.entries.length;
        var e = new HashTableEntry(key, value, hashCode, this.entries[index]);
        this.entries[index] = e;
        if(this.count === this.entries.length) {
            this.grow();
        }
        this.count++;
        return e.Key;
    };
    HashTable.prototype.dumpStats = function () {
        var standardOut = Environment.standardOut;
        standardOut.WriteLine("----------------------");
        standardOut.WriteLine("Hash table stats");
        standardOut.WriteLine("Count            : " + this.count);
        standardOut.WriteLine("Entries Length   : " + this.entries.length);
        var occupiedSlots = 0;
        for(var i = 0; i < this.entries.length; i++) {
            if(this.entries[i] !== null) {
                occupiedSlots++;
            }
        }
        standardOut.WriteLine("Occupied slots   : " + occupiedSlots);
        standardOut.WriteLine("Avg Length/Slot  : " + (this.count / occupiedSlots));
        standardOut.WriteLine("----------------------");
    };
    HashTable.prototype.grow = function () {
        var newSize = Hash.expandPrime(this.entries.length);
        var oldEntries = this.entries;
        var newEntries = ArrayUtilities.createArray(newSize);
        this.entries = newEntries;
        for(var i = 0; i < oldEntries.length; i++) {
            var e = oldEntries[i];
            while(e !== null) {
                var newIndex = e.HashCode % newSize;
                var tmp = e.Next;
                e.Next = newEntries[newIndex];
                newEntries[newIndex] = e;
                e = tmp;
            }
        }
    };
    return HashTable;
})();
var Indentation;
(function (Indentation) {
    function columnForEndOfToken(token, syntaxInformationMap, options) {
        return columnForStartOfToken(token, syntaxInformationMap, options) + token.width();
    }
    Indentation.columnForEndOfToken = columnForEndOfToken;
    function columnForStartOfToken(token, syntaxInformationMap, options) {
        var firstTokenInLine = syntaxInformationMap.firstTokenInLineContainingToken(token);
        var leadingTextInReverse = [];
        var current = token;
        while(current !== firstTokenInLine) {
            current = syntaxInformationMap.previousToken(current);
            if(current === firstTokenInLine) {
                leadingTextInReverse.push(current.trailingTrivia().fullText());
                leadingTextInReverse.push(current.text());
            } else {
                leadingTextInReverse.push(current.fullText());
            }
        }
        collectLeadingTriviaTextToStartOfLine(firstTokenInLine, leadingTextInReverse);
        return columnForLeadingTextInReverse(leadingTextInReverse, options);
    }
    Indentation.columnForStartOfToken = columnForStartOfToken;
    function columnForStartOfFirstTokenInLineContainingToken(token, syntaxInformationMap, options) {
        var firstTokenInLine = syntaxInformationMap.firstTokenInLineContainingToken(token);
        var leadingTextInReverse = [];
        collectLeadingTriviaTextToStartOfLine(firstTokenInLine, leadingTextInReverse);
        return columnForLeadingTextInReverse(leadingTextInReverse, options);
    }
    Indentation.columnForStartOfFirstTokenInLineContainingToken = columnForStartOfFirstTokenInLineContainingToken;
    function collectLeadingTriviaTextToStartOfLine(firstTokenInLine, leadingTextInReverse) {
        var leadingTrivia = firstTokenInLine.leadingTrivia();
        for(var i = leadingTrivia.count() - 1; i >= 0; i--) {
            var trivia = leadingTrivia.syntaxTriviaAt(i);
            if(trivia.kind() === 5 /* NewLineTrivia */ ) {
                break;
            }
            if(trivia.kind() === 6 /* MultiLineCommentTrivia */ ) {
                var lineSegments = SyntaxTrivia.splitMultiLineCommentTriviaIntoMultipleLines(trivia);
                leadingTextInReverse.push(ArrayUtilities.last(lineSegments));
                if(lineSegments.length > 0) {
                    break;
                }
            }
            leadingTextInReverse.push(trivia.fullText());
        }
    }
    function columnForLeadingTextInReverse(leadingTextInReverse, options) {
        var column = 0;
        for(var i = leadingTextInReverse.length - 1; i >= 0; i--) {
            var text = leadingTextInReverse[i];
            column = columnForPositionInStringWorker(text, text.length, column, options);
        }
        return column;
    }
    function columnForPositionInString(input, position, options) {
        return columnForPositionInStringWorker(input, position, 0, options);
    }
    Indentation.columnForPositionInString = columnForPositionInString;
    function columnForPositionInStringWorker(input, position, startColumn, options) {
        var column = startColumn;
        var spacesPerTab = options.spacesPerTab;
        for(var j = 0; j < position; j++) {
            var ch = input.charCodeAt(j);
            if(ch === 9 /* tab */ ) {
                column += spacesPerTab - column % spacesPerTab;
            } else {
                column++;
            }
        }
        return column;
    }
    function indentationString(column, options) {
        var numberOfTabs = 0;
        var numberOfSpaces = MathPrototype.max(0, column);
        if(options.useTabs) {
            numberOfTabs = column / options.spacesPerTab;
            numberOfSpaces -= numberOfTabs * options.spacesPerTab;
        }
        return StringUtilities.repeat('\t', numberOfTabs) + StringUtilities.repeat(' ', numberOfSpaces);
    }
    Indentation.indentationString = indentationString;
    function indentationTrivia(column, options) {
        return SyntaxTrivia.create(4 /* WhitespaceTrivia */ , this.indentationString(column, options));
    }
    Indentation.indentationTrivia = indentationTrivia;
    function firstNonWhitespacePosition(value) {
        for(var i = 0; i < value.length; i++) {
            var ch = value.charCodeAt(i);
            if(!CharacterInfo.isWhitespace(ch)) {
                return i;
            }
        }
        return value.length;
    }
    Indentation.firstNonWhitespacePosition = firstNonWhitespacePosition;
})(Indentation || (Indentation = {}));
var IntegerUtilities = (function () {
    function IntegerUtilities() { }
    IntegerUtilities.integerDivide = function integerDivide(numerator, denominator) {
        return (numerator / denominator) >> 0;
    }
    IntegerUtilities.integerMultiplyLow32Bits = function integerMultiplyLow32Bits(n1, n2) {
        var n1Low16 = n1 & 65535;
        var n1High16 = n1 >>> 16;
        var n2Low16 = n2 & 65535;
        var n2High16 = n2 >>> 16;
        var resultLow32 = (((n1 & 4294901760) * n2) >>> 0) + (((n1 & 65535) * n2) >>> 0) >>> 0;
        return resultLow32;
    }
    IntegerUtilities.integerMultiplyHigh32Bits = function integerMultiplyHigh32Bits(n1, n2) {
        var n1Low16 = n1 & 65535;
        var n1High16 = n1 >>> 16;
        var n2Low16 = n2 & 65535;
        var n2High16 = n2 >>> 16;
        var resultHigh32 = n1High16 * n2High16 + ((((n1Low16 * n2Low16) >>> 17) + n1Low16 * n2High16) >>> 15);
        return resultHigh32;
    }
    return IntegerUtilities;
})();
var DefaultSyntaxVisitor = (function () {
    function DefaultSyntaxVisitor() { }
    DefaultSyntaxVisitor.prototype.defaultVisit = function (node) {
    };
    DefaultSyntaxVisitor.prototype.visitSourceUnit = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitExternalModuleReference = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitModuleNameModuleReference = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitImportDeclaration = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitClassDeclaration = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitInterfaceDeclaration = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitExtendsClause = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitImplementsClause = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitModuleDeclaration = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitFunctionDeclaration = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitVariableStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitVariableDeclaration = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitVariableDeclarator = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitEqualsValueClause = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitPrefixUnaryExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitThisExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitLiteralExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitArrayLiteralExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitOmittedExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitParenthesizedExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitSimpleArrowFunctionExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitParenthesizedArrowFunctionExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitIdentifierName = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitQualifiedName = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitConstructorType = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitFunctionType = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitObjectType = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitArrayType = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitPredefinedType = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitTypeAnnotation = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitBlock = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitParameter = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitMemberAccessExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitPostfixUnaryExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitElementAccessExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitInvocationExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitArgumentList = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitBinaryExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitConditionalExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitConstructSignature = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitFunctionSignature = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitIndexSignature = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitPropertySignature = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitParameterList = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitCallSignature = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitElseClause = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitIfStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitExpressionStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitConstructorDeclaration = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitMemberFunctionDeclaration = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitGetMemberAccessorDeclaration = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitSetMemberAccessorDeclaration = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitMemberVariableDeclaration = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitThrowStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitReturnStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitObjectCreationExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitSwitchStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitCaseSwitchClause = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitDefaultSwitchClause = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitBreakStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitContinueStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitForStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitForInStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitWhileStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitWithStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitEnumDeclaration = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitCastExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitObjectLiteralExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitSimplePropertyAssignment = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitGetAccessorPropertyAssignment = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitSetAccessorPropertyAssignment = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitFunctionExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitEmptyStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitSuperExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitTryStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitCatchClause = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitFinallyClause = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitLabeledStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitDoStatement = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitTypeOfExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitDeleteExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitVoidExpression = function (node) {
        this.defaultVisit(node);
    };
    DefaultSyntaxVisitor.prototype.visitDebuggerStatement = function (node) {
        this.defaultVisit(node);
    };
    return DefaultSyntaxVisitor;
})();
var DefaultSyntaxVisitor1 = (function () {
    function DefaultSyntaxVisitor1() { }
    DefaultSyntaxVisitor1.prototype.defaultVisit = function (node) {
        return null;
    };
    DefaultSyntaxVisitor1.prototype.visitSourceUnit = function (node) {
        return null;
    };
    DefaultSyntaxVisitor1.prototype.visitExternalModuleReference = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitModuleNameModuleReference = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitImportDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitClassDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitInterfaceDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitExtendsClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitImplementsClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitModuleDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitFunctionDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitVariableStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitVariableDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitVariableDeclarator = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitEqualsValueClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitPrefixUnaryExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitThisExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitLiteralExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitArrayLiteralExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitOmittedExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitParenthesizedExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitSimpleArrowFunctionExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitParenthesizedArrowFunctionExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitIdentifierName = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitQualifiedName = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitConstructorType = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitFunctionType = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitObjectType = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitArrayType = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitPredefinedType = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitTypeAnnotation = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitBlock = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitParameter = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitMemberAccessExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitPostfixUnaryExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitElementAccessExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitInvocationExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitArgumentList = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitBinaryExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitConditionalExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitConstructSignature = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitFunctionSignature = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitIndexSignature = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitPropertySignature = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitParameterList = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitCallSignature = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitElseClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitIfStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitExpressionStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitConstructorDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitMemberFunctionDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitGetMemberAccessorDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitSetMemberAccessorDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitMemberVariableDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitThrowStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitReturnStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitObjectCreationExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitSwitchStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitCaseSwitchClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitDefaultSwitchClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitBreakStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitContinueStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitForStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitForInStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitWhileStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitWithStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitEnumDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitCastExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitObjectLiteralExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitSimplePropertyAssignment = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitGetAccessorPropertyAssignment = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitSetAccessorPropertyAssignment = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitFunctionExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitEmptyStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitSuperExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitTryStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitCatchClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitFinallyClause = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitLabeledStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitDoStatement = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitTypeOfExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitDeleteExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitVoidExpression = function (node) {
        return this.defaultVisit(node);
    };
    DefaultSyntaxVisitor1.prototype.visitDebuggerStatement = function (node) {
        return this.defaultVisit(node);
    };
    return DefaultSyntaxVisitor1;
})();
var LanguageVersion;
(function (LanguageVersion) {
    LanguageVersion._map = [];
    LanguageVersion._map[0] = "EcmaScript3";
    LanguageVersion.EcmaScript3 = 0;
    LanguageVersion._map[1] = "EcmaScript5";
    LanguageVersion.EcmaScript5 = 1;
})(LanguageVersion || (LanguageVersion = {}));
var LinePosition = (function () {
    function LinePosition(line, character) {
        this._line = 0;
        this._character = 0;
        if(line < 0) {
            throw Errors.argumentOutOfRange("line");
        }
        if(character < 0) {
            throw Errors.argumentOutOfRange("character");
        }
        this._line = line;
        this._character = character;
    }
    LinePosition.prototype.line = function () {
        return this._line;
    };
    LinePosition.prototype.character = function () {
        return this._character;
    };
    return LinePosition;
})();
var MathPrototype = (function () {
    function MathPrototype() { }
    MathPrototype.max = function max(a, b) {
        return a >= b ? a : b;
    }
    MathPrototype.min = function min(a, b) {
        return a <= b ? a : b;
    }
    return MathPrototype;
})();
var ParseOptions = (function () {
    function ParseOptions(allowAutomaticSemicolonInsertion) {
        if (typeof allowAutomaticSemicolonInsertion === "undefined") { allowAutomaticSemicolonInsertion = true; }
        this._allowAutomaticSemicolonInsertion = allowAutomaticSemicolonInsertion;
    }
    ParseOptions.prototype.allowAutomaticSemicolonInsertion = function () {
        return this._allowAutomaticSemicolonInsertion;
    };
    return ParseOptions;
})();
var SeparatedSyntaxList;
(function (SeparatedSyntaxList) {
    function collectTextElements(elements, list) {
        for(var i = 0, n = list.count(); i < n; i++) {
            list.itemAt(i).collectTextElements(elements);
        }
    }
    var EmptySeparatedSyntaxList = (function () {
        function EmptySeparatedSyntaxList() { }
        EmptySeparatedSyntaxList.prototype.isToken = function () {
            return false;
        };
        EmptySeparatedSyntaxList.prototype.isNode = function () {
            return false;
        };
        EmptySeparatedSyntaxList.prototype.isList = function () {
            return false;
        };
        EmptySeparatedSyntaxList.prototype.isSeparatedList = function () {
            return true;
        };
        EmptySeparatedSyntaxList.prototype.isTrivia = function () {
            return false;
        };
        EmptySeparatedSyntaxList.prototype.isTriviaList = function () {
            return false;
        };
        EmptySeparatedSyntaxList.prototype.kind = function () {
            return 2 /* SeparatedList */ ;
        };
        EmptySeparatedSyntaxList.prototype.isMissing = function () {
            return true;
        };
        EmptySeparatedSyntaxList.prototype.toJSON = function (key) {
            return [];
        };
        EmptySeparatedSyntaxList.prototype.count = function () {
            return 0;
        };
        EmptySeparatedSyntaxList.prototype.syntaxNodeCount = function () {
            return 0;
        };
        EmptySeparatedSyntaxList.prototype.separatorCount = function () {
            return 0;
        };
        EmptySeparatedSyntaxList.prototype.itemAt = function (index) {
            throw Errors.argumentOutOfRange("index");
        };
        EmptySeparatedSyntaxList.prototype.syntaxNodeAt = function (index) {
            throw Errors.argumentOutOfRange("index");
        };
        EmptySeparatedSyntaxList.prototype.separatorAt = function (index) {
            throw Errors.argumentOutOfRange("index");
        };
        EmptySeparatedSyntaxList.prototype.collectTextElements = function (elements) {
            return collectTextElements(elements, this);
        };
        EmptySeparatedSyntaxList.prototype.firstToken = function () {
            return null;
        };
        EmptySeparatedSyntaxList.prototype.lastToken = function () {
            return null;
        };
        EmptySeparatedSyntaxList.prototype.fullWidth = function () {
            return 0;
        };
        EmptySeparatedSyntaxList.prototype.fullText = function () {
            return "";
        };
        EmptySeparatedSyntaxList.prototype.toArray = function () {
            return [];
        };
        return EmptySeparatedSyntaxList;
    })();    
    var SingletonSeparatedSyntaxList = (function () {
        function SingletonSeparatedSyntaxList(item) {
            this.item = item;
        }
        SingletonSeparatedSyntaxList.prototype.toJSON = function (key) {
            return [
                this.item
            ];
        };
        SingletonSeparatedSyntaxList.prototype.isToken = function () {
            return false;
        };
        SingletonSeparatedSyntaxList.prototype.isNode = function () {
            return false;
        };
        SingletonSeparatedSyntaxList.prototype.isList = function () {
            return false;
        };
        SingletonSeparatedSyntaxList.prototype.isSeparatedList = function () {
            return true;
        };
        SingletonSeparatedSyntaxList.prototype.isTrivia = function () {
            return false;
        };
        SingletonSeparatedSyntaxList.prototype.isTriviaList = function () {
            return false;
        };
        SingletonSeparatedSyntaxList.prototype.kind = function () {
            return 2 /* SeparatedList */ ;
        };
        SingletonSeparatedSyntaxList.prototype.isMissing = function () {
            return this.item.isMissing();
        };
        SingletonSeparatedSyntaxList.prototype.count = function () {
            return 1;
        };
        SingletonSeparatedSyntaxList.prototype.syntaxNodeCount = function () {
            return 1;
        };
        SingletonSeparatedSyntaxList.prototype.separatorCount = function () {
            return 0;
        };
        SingletonSeparatedSyntaxList.prototype.itemAt = function (index) {
            if(index !== 0) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.item;
        };
        SingletonSeparatedSyntaxList.prototype.syntaxNodeAt = function (index) {
            if(index !== 0) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.item;
        };
        SingletonSeparatedSyntaxList.prototype.separatorAt = function (index) {
            throw Errors.argumentOutOfRange("index");
        };
        SingletonSeparatedSyntaxList.prototype.collectTextElements = function (elements) {
            return collectTextElements(elements, this);
        };
        SingletonSeparatedSyntaxList.prototype.firstToken = function () {
            return this.item.firstToken();
        };
        SingletonSeparatedSyntaxList.prototype.lastToken = function () {
            return this.item.lastToken();
        };
        SingletonSeparatedSyntaxList.prototype.fullWidth = function () {
            return this.item.fullWidth();
        };
        SingletonSeparatedSyntaxList.prototype.fullText = function () {
            return this.item.fullText();
        };
        SingletonSeparatedSyntaxList.prototype.toArray = function () {
            return [
                this.item
            ];
        };
        return SingletonSeparatedSyntaxList;
    })();    
    var NormalSeparatedSyntaxList = (function () {
        function NormalSeparatedSyntaxList(elements) {
            this.elements = elements;
        }
        NormalSeparatedSyntaxList.prototype.isToken = function () {
            return false;
        };
        NormalSeparatedSyntaxList.prototype.isNode = function () {
            return false;
        };
        NormalSeparatedSyntaxList.prototype.isList = function () {
            return false;
        };
        NormalSeparatedSyntaxList.prototype.isSeparatedList = function () {
            return true;
        };
        NormalSeparatedSyntaxList.prototype.isTrivia = function () {
            return false;
        };
        NormalSeparatedSyntaxList.prototype.isTriviaList = function () {
            return false;
        };
        NormalSeparatedSyntaxList.prototype.kind = function () {
            return 2 /* SeparatedList */ ;
        };
        NormalSeparatedSyntaxList.prototype.toJSON = function (key) {
            return this.elements;
        };
        NormalSeparatedSyntaxList.prototype.isMissing = function () {
            for(var i = 0, n = this.elements.length; i < n; i++) {
                if(!this.elements[i].isMissing()) {
                    return false;
                }
            }
            return true;
        };
        NormalSeparatedSyntaxList.prototype.count = function () {
            return this.elements.length;
        };
        NormalSeparatedSyntaxList.prototype.syntaxNodeCount = function () {
            return IntegerUtilities.integerDivide(this.elements.length + 1, 2);
        };
        NormalSeparatedSyntaxList.prototype.separatorCount = function () {
            return IntegerUtilities.integerDivide(this.elements.length, 2);
        };
        NormalSeparatedSyntaxList.prototype.itemAt = function (index) {
            if(index < 0 || index >= this.elements.length) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.elements[index];
        };
        NormalSeparatedSyntaxList.prototype.syntaxNodeAt = function (index) {
            var value = index * 2;
            if(value < 0 || value >= this.elements.length) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.elements[value];
        };
        NormalSeparatedSyntaxList.prototype.separatorAt = function (index) {
            var value = index * 2 + 1;
            if(value < 0 || value >= this.elements.length) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.elements[value];
        };
        NormalSeparatedSyntaxList.prototype.collectTextElements = function (elements) {
            return collectTextElements(elements, this);
        };
        NormalSeparatedSyntaxList.prototype.firstToken = function () {
            var token;
            for(var i = 0, n = this.elements.length; i < n; i++) {
                if(i % 2 === 0) {
                    var node = this.elements[i];
                    token = node.firstToken();
                    if(token !== null) {
                        return token;
                    }
                } else {
                    token = this.elements[i];
                    if(token.width() > 0) {
                        return token;
                    }
                }
            }
            return null;
        };
        NormalSeparatedSyntaxList.prototype.lastToken = function () {
            var token;
            for(var i = this.elements.length - 1; i >= 0; i--) {
                if(i % 2 === 0) {
                    var node = this.elements[i];
                    token = node.lastToken();
                    if(token !== null) {
                        return token;
                    }
                } else {
                    token = this.elements[i];
                    if(token.width() > 0) {
                        return token;
                    }
                }
            }
            return null;
        };
        NormalSeparatedSyntaxList.prototype.fullWidth = function () {
            var width = 0;
            for(var i = 0, n = this.elements.length; i < n; i++) {
                width += this.elements[i].fullWidth();
            }
            return width;
        };
        NormalSeparatedSyntaxList.prototype.fullText = function () {
            var elements = [];
            this.collectTextElements(elements);
            return elements.join("");
        };
        NormalSeparatedSyntaxList.prototype.toArray = function () {
            return this.elements.slice(0);
        };
        return NormalSeparatedSyntaxList;
    })();    
    function create(nodes) {
        return createAndValidate(nodes, false);
    }
    SeparatedSyntaxList.create = create;
    function createAndValidate(nodes, validate) {
        if(nodes === undefined || nodes === null || nodes.length === 0) {
            return SeparatedSyntaxList.empty;
        }
        if(validate) {
            for(var i = 0; i < nodes.length; i++) {
                var item = nodes[i];
                if(i % 2 === 0) {
                    Debug.assert(!SyntaxFacts.isTokenKind(item.kind()));
                } else {
                    Debug.assert(SyntaxFacts.isTokenKind(item.kind()));
                }
            }
        }
        if(nodes.length === 1) {
            Debug.assert(nodes[0].isNode());
            return new SingletonSeparatedSyntaxList(nodes[0]);
        }
        return new NormalSeparatedSyntaxList(nodes);
    }
    SeparatedSyntaxList.createAndValidate = createAndValidate;
    SeparatedSyntaxList.empty = new EmptySeparatedSyntaxList();
})(SeparatedSyntaxList || (SeparatedSyntaxList = {}));
var ScannerUtilities = (function () {
    function ScannerUtilities() { }
    ScannerUtilities.identifierKind = function identifierKind(array, startIndex, length) {
        switch(length) {
            case 2: {
                switch(array[startIndex]) {
                    case 100 /* d */ : {
                        return (array[startIndex + 1] === 111 /* o */ ) ? 20 /* DoKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 105 /* i */ : {
                        switch(array[startIndex + 1]) {
                            case 102 /* f */ : {
                                return 26 /* IfKeyword */ ;

                            }
                            case 110 /* n */ : {
                                return 27 /* InKeyword */ ;

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 3: {
                switch(array[startIndex]) {
                    case 102 /* f */ : {
                        return (array[startIndex + 1] === 111 /* o */  && array[startIndex + 2] === 114 /* r */ ) ? 24 /* ForKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 110 /* n */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 119 /* w */ ) ? 29 /* NewKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 116 /* t */ : {
                        return (array[startIndex + 1] === 114 /* r */  && array[startIndex + 2] === 121 /* y */ ) ? 36 /* TryKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 118 /* v */ : {
                        return (array[startIndex + 1] === 97 /* a */  && array[startIndex + 2] === 114 /* r */ ) ? 38 /* VarKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 108 /* l */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 116 /* t */ ) ? 51 /* LetKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 97 /* a */ : {
                        return (array[startIndex + 1] === 110 /* n */  && array[startIndex + 2] === 121 /* y */ ) ? 58 /* AnyKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 103 /* g */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 116 /* t */ ) ? 62 /* GetKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 115 /* s */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 116 /* t */ ) ? 65 /* SetKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 4: {
                switch(array[startIndex]) {
                    case 99 /* c */ : {
                        return (array[startIndex + 1] === 97 /* a */  && array[startIndex + 2] === 115 /* s */  && array[startIndex + 3] === 101 /* e */ ) ? 14 /* CaseKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 101 /* e */ : {
                        switch(array[startIndex + 1]) {
                            case 108 /* l */ : {
                                return (array[startIndex + 2] === 115 /* s */  && array[startIndex + 3] === 101 /* e */ ) ? 21 /* ElseKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 110 /* n */ : {
                                return (array[startIndex + 2] === 117 /* u */  && array[startIndex + 3] === 109 /* m */ ) ? 44 /* EnumKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    case 110 /* n */ : {
                        return (array[startIndex + 1] === 117 /* u */  && array[startIndex + 2] === 108 /* l */  && array[startIndex + 3] === 108 /* l */ ) ? 30 /* NullKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 116 /* t */ : {
                        switch(array[startIndex + 1]) {
                            case 104 /* h */ : {
                                return (array[startIndex + 2] === 105 /* i */  && array[startIndex + 3] === 115 /* s */ ) ? 33 /* ThisKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 114 /* r */ : {
                                return (array[startIndex + 2] === 117 /* u */  && array[startIndex + 3] === 101 /* e */ ) ? 35 /* TrueKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    case 118 /* v */ : {
                        return (array[startIndex + 1] === 111 /* o */  && array[startIndex + 2] === 105 /* i */  && array[startIndex + 3] === 100 /* d */ ) ? 39 /* VoidKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 119 /* w */ : {
                        return (array[startIndex + 1] === 105 /* i */  && array[startIndex + 2] === 116 /* t */  && array[startIndex + 3] === 104 /* h */ ) ? 41 /* WithKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 98 /* b */ : {
                        return (array[startIndex + 1] === 111 /* o */  && array[startIndex + 2] === 111 /* o */  && array[startIndex + 3] === 108 /* l */ ) ? 59 /* BoolKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 5: {
                switch(array[startIndex]) {
                    case 98 /* b */ : {
                        return (array[startIndex + 1] === 114 /* r */  && array[startIndex + 2] === 101 /* e */  && array[startIndex + 3] === 97 /* a */  && array[startIndex + 4] === 107 /* k */ ) ? 13 /* BreakKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 99 /* c */ : {
                        switch(array[startIndex + 1]) {
                            case 97 /* a */ : {
                                return (array[startIndex + 2] === 116 /* t */  && array[startIndex + 3] === 99 /* c */  && array[startIndex + 4] === 104 /* h */ ) ? 15 /* CatchKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 108 /* l */ : {
                                return (array[startIndex + 2] === 97 /* a */  && array[startIndex + 3] === 115 /* s */  && array[startIndex + 4] === 115 /* s */ ) ? 42 /* ClassKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 111 /* o */ : {
                                return (array[startIndex + 2] === 110 /* n */  && array[startIndex + 3] === 115 /* s */  && array[startIndex + 4] === 116 /* t */ ) ? 43 /* ConstKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    case 102 /* f */ : {
                        return (array[startIndex + 1] === 97 /* a */  && array[startIndex + 2] === 108 /* l */  && array[startIndex + 3] === 115 /* s */  && array[startIndex + 4] === 101 /* e */ ) ? 22 /* FalseKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 116 /* t */ : {
                        return (array[startIndex + 1] === 104 /* h */  && array[startIndex + 2] === 114 /* r */  && array[startIndex + 3] === 111 /* o */  && array[startIndex + 4] === 119 /* w */ ) ? 34 /* ThrowKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 119 /* w */ : {
                        return (array[startIndex + 1] === 104 /* h */  && array[startIndex + 2] === 105 /* i */  && array[startIndex + 3] === 108 /* l */  && array[startIndex + 4] === 101 /* e */ ) ? 40 /* WhileKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 115 /* s */ : {
                        return (array[startIndex + 1] === 117 /* u */  && array[startIndex + 2] === 112 /* p */  && array[startIndex + 3] === 101 /* e */  && array[startIndex + 4] === 114 /* r */ ) ? 48 /* SuperKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 121 /* y */ : {
                        return (array[startIndex + 1] === 105 /* i */  && array[startIndex + 2] === 101 /* e */  && array[startIndex + 3] === 108 /* l */  && array[startIndex + 4] === 100 /* d */ ) ? 57 /* YieldKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 6: {
                switch(array[startIndex]) {
                    case 100 /* d */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 108 /* l */  && array[startIndex + 3] === 101 /* e */  && array[startIndex + 4] === 116 /* t */  && array[startIndex + 5] === 101 /* e */ ) ? 19 /* DeleteKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 114 /* r */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 116 /* t */  && array[startIndex + 3] === 117 /* u */  && array[startIndex + 4] === 114 /* r */  && array[startIndex + 5] === 110 /* n */ ) ? 31 /* ReturnKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 115 /* s */ : {
                        switch(array[startIndex + 1]) {
                            case 119 /* w */ : {
                                return (array[startIndex + 2] === 105 /* i */  && array[startIndex + 3] === 116 /* t */  && array[startIndex + 4] === 99 /* c */  && array[startIndex + 5] === 104 /* h */ ) ? 32 /* SwitchKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 116 /* t */ : {
                                switch(array[startIndex + 2]) {
                                    case 97 /* a */ : {
                                        return (array[startIndex + 3] === 116 /* t */  && array[startIndex + 4] === 105 /* i */  && array[startIndex + 5] === 99 /* c */ ) ? 56 /* StaticKeyword */  : 9 /* IdentifierNameToken */ ;

                                    }
                                    case 114 /* r */ : {
                                        return (array[startIndex + 3] === 105 /* i */  && array[startIndex + 4] === 110 /* n */  && array[startIndex + 5] === 103 /* g */ ) ? 66 /* StringKeyword */  : 9 /* IdentifierNameToken */ ;

                                    }
                                    default: {
                                        return 9 /* IdentifierNameToken */ ;

                                    }
                                }

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    case 116 /* t */ : {
                        return (array[startIndex + 1] === 121 /* y */  && array[startIndex + 2] === 112 /* p */  && array[startIndex + 3] === 101 /* e */  && array[startIndex + 4] === 111 /* o */  && array[startIndex + 5] === 102 /* f */ ) ? 37 /* TypeOfKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 101 /* e */ : {
                        return (array[startIndex + 1] === 120 /* x */  && array[startIndex + 2] === 112 /* p */  && array[startIndex + 3] === 111 /* o */  && array[startIndex + 4] === 114 /* r */  && array[startIndex + 5] === 116 /* t */ ) ? 45 /* ExportKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 105 /* i */ : {
                        return (array[startIndex + 1] === 109 /* m */  && array[startIndex + 2] === 112 /* p */  && array[startIndex + 3] === 111 /* o */  && array[startIndex + 4] === 114 /* r */  && array[startIndex + 5] === 116 /* t */ ) ? 47 /* ImportKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 112 /* p */ : {
                        return (array[startIndex + 1] === 117 /* u */  && array[startIndex + 2] === 98 /* b */  && array[startIndex + 3] === 108 /* l */  && array[startIndex + 4] === 105 /* i */  && array[startIndex + 5] === 99 /* c */ ) ? 55 /* PublicKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 109 /* m */ : {
                        return (array[startIndex + 1] === 111 /* o */  && array[startIndex + 2] === 100 /* d */  && array[startIndex + 3] === 117 /* u */  && array[startIndex + 4] === 108 /* l */  && array[startIndex + 5] === 101 /* e */ ) ? 63 /* ModuleKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 110 /* n */ : {
                        return (array[startIndex + 1] === 117 /* u */  && array[startIndex + 2] === 109 /* m */  && array[startIndex + 3] === 98 /* b */  && array[startIndex + 4] === 101 /* e */  && array[startIndex + 5] === 114 /* r */ ) ? 64 /* NumberKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 7: {
                switch(array[startIndex]) {
                    case 100 /* d */ : {
                        switch(array[startIndex + 1]) {
                            case 101 /* e */ : {
                                switch(array[startIndex + 2]) {
                                    case 102 /* f */ : {
                                        return (array[startIndex + 3] === 97 /* a */  && array[startIndex + 4] === 117 /* u */  && array[startIndex + 5] === 108 /* l */  && array[startIndex + 6] === 116 /* t */ ) ? 18 /* DefaultKeyword */  : 9 /* IdentifierNameToken */ ;

                                    }
                                    case 99 /* c */ : {
                                        return (array[startIndex + 3] === 108 /* l */  && array[startIndex + 4] === 97 /* a */  && array[startIndex + 5] === 114 /* r */  && array[startIndex + 6] === 101 /* e */ ) ? 61 /* DeclareKeyword */  : 9 /* IdentifierNameToken */ ;

                                    }
                                    default: {
                                        return 9 /* IdentifierNameToken */ ;

                                    }
                                }

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    case 102 /* f */ : {
                        return (array[startIndex + 1] === 105 /* i */  && array[startIndex + 2] === 110 /* n */  && array[startIndex + 3] === 97 /* a */  && array[startIndex + 4] === 108 /* l */  && array[startIndex + 5] === 108 /* l */  && array[startIndex + 6] === 121 /* y */ ) ? 23 /* FinallyKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 101 /* e */ : {
                        return (array[startIndex + 1] === 120 /* x */  && array[startIndex + 2] === 116 /* t */  && array[startIndex + 3] === 101 /* e */  && array[startIndex + 4] === 110 /* n */  && array[startIndex + 5] === 100 /* d */  && array[startIndex + 6] === 115 /* s */ ) ? 46 /* ExtendsKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 112 /* p */ : {
                        switch(array[startIndex + 1]) {
                            case 97 /* a */ : {
                                return (array[startIndex + 2] === 99 /* c */  && array[startIndex + 3] === 107 /* k */  && array[startIndex + 4] === 97 /* a */  && array[startIndex + 5] === 103 /* g */  && array[startIndex + 6] === 101 /* e */ ) ? 52 /* PackageKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 114 /* r */ : {
                                return (array[startIndex + 2] === 105 /* i */  && array[startIndex + 3] === 118 /* v */  && array[startIndex + 4] === 97 /* a */  && array[startIndex + 5] === 116 /* t */  && array[startIndex + 6] === 101 /* e */ ) ? 53 /* PrivateKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 8: {
                switch(array[startIndex]) {
                    case 99 /* c */ : {
                        return (array[startIndex + 1] === 111 /* o */  && array[startIndex + 2] === 110 /* n */  && array[startIndex + 3] === 116 /* t */  && array[startIndex + 4] === 105 /* i */  && array[startIndex + 5] === 110 /* n */  && array[startIndex + 6] === 117 /* u */  && array[startIndex + 7] === 101 /* e */ ) ? 16 /* ContinueKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 100 /* d */ : {
                        return (array[startIndex + 1] === 101 /* e */  && array[startIndex + 2] === 98 /* b */  && array[startIndex + 3] === 117 /* u */  && array[startIndex + 4] === 103 /* g */  && array[startIndex + 5] === 103 /* g */  && array[startIndex + 6] === 101 /* e */  && array[startIndex + 7] === 114 /* r */ ) ? 17 /* DebuggerKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 102 /* f */ : {
                        return (array[startIndex + 1] === 117 /* u */  && array[startIndex + 2] === 110 /* n */  && array[startIndex + 3] === 99 /* c */  && array[startIndex + 4] === 116 /* t */  && array[startIndex + 5] === 105 /* i */  && array[startIndex + 6] === 111 /* o */  && array[startIndex + 7] === 110 /* n */ ) ? 25 /* FunctionKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 9: {
                switch(array[startIndex]) {
                    case 105 /* i */ : {
                        return (array[startIndex + 1] === 110 /* n */  && array[startIndex + 2] === 116 /* t */  && array[startIndex + 3] === 101 /* e */  && array[startIndex + 4] === 114 /* r */  && array[startIndex + 5] === 102 /* f */  && array[startIndex + 6] === 97 /* a */  && array[startIndex + 7] === 99 /* c */  && array[startIndex + 8] === 101 /* e */ ) ? 50 /* InterfaceKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    case 112 /* p */ : {
                        return (array[startIndex + 1] === 114 /* r */  && array[startIndex + 2] === 111 /* o */  && array[startIndex + 3] === 116 /* t */  && array[startIndex + 4] === 101 /* e */  && array[startIndex + 5] === 99 /* c */  && array[startIndex + 6] === 116 /* t */  && array[startIndex + 7] === 101 /* e */  && array[startIndex + 8] === 100 /* d */ ) ? 54 /* ProtectedKeyword */  : 9 /* IdentifierNameToken */ ;

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 10: {
                switch(array[startIndex]) {
                    case 105 /* i */ : {
                        switch(array[startIndex + 1]) {
                            case 110 /* n */ : {
                                return (array[startIndex + 2] === 115 /* s */  && array[startIndex + 3] === 116 /* t */  && array[startIndex + 4] === 97 /* a */  && array[startIndex + 5] === 110 /* n */  && array[startIndex + 6] === 99 /* c */  && array[startIndex + 7] === 101 /* e */  && array[startIndex + 8] === 111 /* o */  && array[startIndex + 9] === 102 /* f */ ) ? 28 /* InstanceOfKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            case 109 /* m */ : {
                                return (array[startIndex + 2] === 112 /* p */  && array[startIndex + 3] === 108 /* l */  && array[startIndex + 4] === 101 /* e */  && array[startIndex + 5] === 109 /* m */  && array[startIndex + 6] === 101 /* e */  && array[startIndex + 7] === 110 /* n */  && array[startIndex + 8] === 116 /* t */  && array[startIndex + 9] === 115 /* s */ ) ? 49 /* ImplementsKeyword */  : 9 /* IdentifierNameToken */ ;

                            }
                            default: {
                                return 9 /* IdentifierNameToken */ ;

                            }
                        }

                    }
                    default: {
                        return 9 /* IdentifierNameToken */ ;

                    }
                }

            }
            case 11: {
                return (array[startIndex] === 99 /* c */  && array[startIndex + 1] === 111 /* o */  && array[startIndex + 2] === 110 /* n */  && array[startIndex + 3] === 115 /* s */  && array[startIndex + 4] === 116 /* t */  && array[startIndex + 5] === 114 /* r */  && array[startIndex + 6] === 117 /* u */  && array[startIndex + 7] === 99 /* c */  && array[startIndex + 8] === 116 /* t */  && array[startIndex + 9] === 111 /* o */  && array[startIndex + 10] === 114 /* r */ ) ? 60 /* ConstructorKeyword */  : 9 /* IdentifierNameToken */ ;

            }
            default: {
                return 9 /* IdentifierNameToken */ ;

            }
        }
    }
    return ScannerUtilities;
})();
var SlidingWindow = (function () {
    function SlidingWindow(defaultWindowSize, defaultValue, sourceLength) {
        if (typeof sourceLength === "undefined") { sourceLength = -1; }
        this.window = [];
        this.windowCount = 0;
        this.windowAbsoluteStartIndex = 0;
        this.currentRelativeItemIndex = 0;
        this.pinCount = 0;
        this.firstPinnedAbsoluteIndex = -1;
        this.pool = [];
        this.poolCount = 0;
        this.defaultValue = defaultValue;
        this.window = ArrayUtilities.createArray(defaultWindowSize, defaultValue);
        this.sourceLength = sourceLength;
    }
    SlidingWindow.prototype.storeAdditionalRewindState = function (rewindPoint) {
    };
    SlidingWindow.prototype.restoreStateFromRewindPoint = function (rewindPoint) {
    };
    SlidingWindow.prototype.fetchMoreItems = function (argument, sourceIndex, window, destinationIndex, spaceAvailable) {
        throw Errors.notYetImplemented();
    };
    SlidingWindow.prototype.windowAbsoluteEndIndex = function () {
        return this.windowAbsoluteStartIndex + this.windowCount;
    };
    SlidingWindow.prototype.addMoreItemsToWindow = function (argument) {
        if(this.sourceLength >= 0 && this.absoluteIndex() >= this.sourceLength) {
            return false;
        }
        if(this.windowCount >= this.window.length) {
            this.tryShiftOrGrowTokenWindow();
        }
        var spaceAvailable = this.window.length - this.windowCount;
        var amountFetched = this.fetchMoreItems(argument, this.windowAbsoluteEndIndex(), this.window, this.windowCount, spaceAvailable);
        this.windowCount += amountFetched;
        return amountFetched > 0;
    };
    SlidingWindow.prototype.tryShiftOrGrowTokenWindow = function () {
        var currentIndexIsPastWindowHalfwayPoint = this.currentRelativeItemIndex > (this.window.length >>> 1);
        var isAllowedToShift = this.firstPinnedAbsoluteIndex === -1 || this.firstPinnedAbsoluteIndex > this.windowAbsoluteStartIndex;
        if(currentIndexIsPastWindowHalfwayPoint && isAllowedToShift) {
            var shiftStartIndex = this.firstPinnedAbsoluteIndex === -1 ? this.currentRelativeItemIndex : this.firstPinnedAbsoluteIndex - this.windowAbsoluteStartIndex;
            var shiftCount = this.windowCount - shiftStartIndex;
            Debug.assert(shiftStartIndex > 0);
            if(shiftCount > 0) {
                ArrayUtilities.copy(this.window, shiftStartIndex, this.window, 0, shiftCount);
            }
            this.windowAbsoluteStartIndex += shiftStartIndex;
            this.windowCount -= shiftStartIndex;
            this.currentRelativeItemIndex -= shiftStartIndex;
        } else {
            ArrayUtilities.grow(this.window, this.window.length * 2, this.defaultValue);
        }
    };
    SlidingWindow.prototype.absoluteIndex = function () {
        return this.windowAbsoluteStartIndex + this.currentRelativeItemIndex;
    };
    SlidingWindow.prototype.isAtEndOfSource = function () {
        return this.absoluteIndex() >= this.sourceLength;
    };
    SlidingWindow.prototype.getAndPinAbsoluteIndex = function () {
        var absoluteIndex = this.absoluteIndex();
        if(this.pinCount === 0) {
            this.firstPinnedAbsoluteIndex = absoluteIndex;
        }
        this.pinCount++;
        return absoluteIndex;
    };
    SlidingWindow.prototype.releaseAndUnpinAbsoluteIndex = function (absoluteIndex) {
        this.pinCount--;
        if(this.pinCount === 0) {
            this.firstPinnedAbsoluteIndex = -1;
        }
    };
    SlidingWindow.prototype.getRewindPoint = function () {
        var absoluteIndex = this.getAndPinAbsoluteIndex();
        var rewindPoint = this.poolCount === 0 ? {
        } : this.pop();
        rewindPoint.absoluteIndex = absoluteIndex;
        this.storeAdditionalRewindState(rewindPoint);
        return rewindPoint;
    };
    SlidingWindow.prototype.pop = function () {
        this.poolCount--;
        var result = this.pool[this.poolCount];
        this.pool[this.poolCount] = null;
        return result;
    };
    SlidingWindow.prototype.rewindToPinnedIndex = function (absoluteIndex) {
        var relativeIndex = absoluteIndex - this.windowAbsoluteStartIndex;
        Debug.assert(relativeIndex >= 0 && relativeIndex < this.windowCount);
        this.currentRelativeItemIndex = relativeIndex;
    };
    SlidingWindow.prototype.rewind = function (rewindPoint) {
        this.rewindToPinnedIndex(rewindPoint.absoluteIndex);
        this.restoreStateFromRewindPoint(rewindPoint);
    };
    SlidingWindow.prototype.releaseRewindPoint = function (rewindPoint) {
        this.releaseAndUnpinAbsoluteIndex(rewindPoint.absoluteIndex);
        this.pool[this.poolCount] = rewindPoint;
        this.poolCount++;
    };
    SlidingWindow.prototype.currentItem = function (argument) {
        if(this.currentRelativeItemIndex >= this.windowCount) {
            if(!this.addMoreItemsToWindow(argument)) {
                return this.defaultValue;
            }
        }
        return this.window[this.currentRelativeItemIndex];
    };
    SlidingWindow.prototype.peekItemN = function (n) {
        while(this.currentRelativeItemIndex + n >= this.windowCount) {
            if(!this.addMoreItemsToWindow(null)) {
                return this.defaultValue;
            }
        }
        return this.window[this.currentRelativeItemIndex + n];
    };
    SlidingWindow.prototype.moveToNextItem = function () {
        this.currentRelativeItemIndex++;
    };
    SlidingWindow.prototype.disgardAllItemsFromCurrentIndexOnwards = function () {
        this.windowCount = this.currentRelativeItemIndex;
    };
    SlidingWindow.prototype.setAbsoluteIndex = function (absoluteIndex) {
        Debug.assert(this.pinCount === 0);
        if(absoluteIndex >= this.windowAbsoluteStartIndex && absoluteIndex < this.windowAbsoluteEndIndex()) {
            this.currentRelativeItemIndex = (absoluteIndex - this.windowAbsoluteStartIndex);
        } else {
            this.windowAbsoluteStartIndex = absoluteIndex;
            this.windowCount = 0;
            this.currentRelativeItemIndex = 0;
        }
    };
    return SlidingWindow;
})();
var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Scanner = (function (_super) {
    __extends(Scanner, _super);
    function Scanner(text, languageVersion, stringTable) {
        _super.call(this, 2048, 0, text.length());
        this.text = null;
        this.kind = 0 /* None */ ;
        this.width = 0;
        Scanner.initializeStaticData();
        this.text = text;
        this.stringTable = stringTable;
        this.languageVersion = languageVersion;
    }
    Scanner.isKeywordStartCharacter = [];
    Scanner.isIdentifierStartCharacter = [];
    Scanner.isIdentifierPartCharacter = [];
    Scanner.isNumericLiteralStart = [];
    Scanner.initializeStaticData = function initializeStaticData() {
        if(Scanner.isKeywordStartCharacter.length === 0) {
            Scanner.isKeywordStartCharacter = ArrayUtilities.createArray(127 /* maxAsciiCharacter */ , false);
            Scanner.isIdentifierStartCharacter = ArrayUtilities.createArray(127 /* maxAsciiCharacter */ , false);
            Scanner.isIdentifierPartCharacter = ArrayUtilities.createArray(127 /* maxAsciiCharacter */ , false);
            Scanner.isNumericLiteralStart = ArrayUtilities.createArray(127 /* maxAsciiCharacter */ , false);
            for(var character = 0; character < 127 /* maxAsciiCharacter */ ; character++) {
                if(character >= 97 /* a */  && character <= 122 /* z */ ) {
                    Scanner.isIdentifierStartCharacter[character] = true;
                    Scanner.isIdentifierPartCharacter[character] = true;
                } else {
                    if((character >= 65 /* A */  && character <= 90 /* Z */ ) || character === 95 /* _ */  || character === 36 /* $ */ ) {
                        Scanner.isIdentifierStartCharacter[character] = true;
                        Scanner.isIdentifierPartCharacter[character] = true;
                    } else {
                        if(character >= 48 /* _0 */  && character <= 57 /* _9 */ ) {
                            Scanner.isIdentifierPartCharacter[character] = true;
                            Scanner.isNumericLiteralStart[character] = true;
                        }
                    }
                }
            }
            Scanner.isNumericLiteralStart[46 /* dot */ ] = true;
            for(var keywordKind = SyntaxKind.FirstKeyword; keywordKind <= SyntaxKind.LastKeyword; keywordKind++) {
                var keyword = SyntaxFacts.getText(keywordKind);
                Scanner.isKeywordStartCharacter[keyword.charCodeAt(0)] = true;
            }
        }
    }
    Scanner.create = function create(text, languageVersion) {
        return new Scanner(text, languageVersion, new StringTable());
    }
    Scanner.prototype.fetchMoreItems = function (argument, sourceIndex, window, destinationIndex, spaceAvailable) {
        var charactersRemaining = this.text.length() - sourceIndex;
        var amountToRead = MathPrototype.min(charactersRemaining, spaceAvailable);
        this.text.copyTo(sourceIndex, window, destinationIndex, amountToRead);
        return amountToRead;
    };
    Scanner.prototype.currentCharCode = function () {
        return this.currentItem(null);
    };
    Scanner.prototype.scan = function (diagnostics, allowRegularExpression) {
        var fullStart = this.absoluteIndex();
        var leadingTriviaInfo = this.scanTriviaInfo(diagnostics, false);
        this.scanSyntaxToken(diagnostics, allowRegularExpression);
        var trailingTriviaInfo = this.scanTriviaInfo(diagnostics, true);
        return SyntaxToken.create(this.text, fullStart, this.kind, leadingTriviaInfo, this.width, trailingTriviaInfo);
    };
    Scanner.scanTrivia = function scanTrivia(text, start, length, isTrailing) {
        Debug.assert(length > 0);
        var scanner = new Scanner(text.subText(new TextSpan(start, length)), 1 /* EcmaScript5 */ , null);
        return scanner.scanTrivia(isTrailing);
    }
    Scanner.prototype.scanTrivia = function (isTrailing) {
        var trivia = [];
        while(true) {
            if(!this.isAtEndOfSource()) {
                var ch = this.currentCharCode();
                switch(ch) {
                    case 32 /* space */ :
                    case 9 /* tab */ :
                    case 11 /* verticalTab */ :
                    case 12 /* formFeed */ :
                    case 160 /* nonBreakingSpace */ :
                    case 65279 /* byteOrderMark */ : {
                        trivia.push(this.scanWhitespaceTrivia());
                        continue;

                    }
                    case 47 /* slash */ : {
                        var ch2 = this.peekItemN(1);
                        if(ch2 === 47 /* slash */ ) {
                            trivia.push(this.scanSingleLineCommentTrivia());
                            continue;
                        }
                        if(ch2 === 42 /* asterisk */ ) {
                            trivia.push(this.scanMultiLineCommentTrivia());
                            continue;
                        }
                        throw Errors.invalidOperation();

                    }
                    case 13 /* carriageReturn */ :
                    case 10 /* lineFeed */ :
                    case 8233 /* paragraphSeparator */ :
                    case 8232 /* lineSeparator */ : {
                        trivia.push(this.scanLineTerminatorSequenceTrivia(ch));
                        if(!isTrailing) {
                            continue;
                        }
                        break;

                    }
                    default: {
                        throw Errors.invalidOperation();

                    }
                }
            }
            Debug.assert(trivia.length > 0);
            return SyntaxTriviaList.create(trivia);
        }
    };
    Scanner.prototype.scanTriviaInfo = function (diagnostics, isTrailing) {
        var width = 0;
        var hasComment = false;
        var hasNewLine = false;
        while(true) {
            var ch = this.currentCharCode();
            switch(ch) {
                case 32 /* space */ :
                case 9 /* tab */ :
                case 11 /* verticalTab */ :
                case 12 /* formFeed */ :
                case 160 /* nonBreakingSpace */ :
                case 65279 /* byteOrderMark */ : {
                    this.moveToNextItem();
                    width++;
                    continue;

                }
                case 47 /* slash */ : {
                    var ch2 = this.peekItemN(1);
                    if(ch2 === 47 /* slash */ ) {
                        hasComment = true;
                        width += this.scanSingleLineCommentTriviaLength();
                        continue;
                    }
                    if(ch2 === 42 /* asterisk */ ) {
                        hasComment = true;
                        width += this.scanMultiLineCommentTriviaLength(diagnostics);
                        continue;
                    }
                    break;

                }
                case 13 /* carriageReturn */ :
                case 10 /* lineFeed */ :
                case 8233 /* paragraphSeparator */ :
                case 8232 /* lineSeparator */ : {
                    hasNewLine = true;
                    width += this.scanLineTerminatorSequenceLength(ch);
                    if(!isTrailing) {
                        continue;
                    }
                    break;

                }
            }
            return width | (hasComment ? 67108864 /* TriviaCommentMask */  : 0) | (hasNewLine ? 134217728 /* TriviaNewLineMask */  : 0);
        }
    };
    Scanner.prototype.isNewLineCharacter = function (ch) {
        switch(ch) {
            case 13 /* carriageReturn */ :
            case 10 /* lineFeed */ :
            case 8233 /* paragraphSeparator */ :
            case 8232 /* lineSeparator */ : {
                return true;

            }
            default: {
                return false;

            }
        }
    };
    Scanner.prototype.scanWhitespaceTrivia = function () {
        var absoluteStartIndex = this.getAndPinAbsoluteIndex();
        var width = 0;
        while(true) {
            var ch = this.currentCharCode();
            switch(ch) {
                case 32 /* space */ :
                case 9 /* tab */ :
                case 11 /* verticalTab */ :
                case 12 /* formFeed */ :
                case 160 /* nonBreakingSpace */ :
                case 65279 /* byteOrderMark */ : {
                    this.moveToNextItem();
                    width++;
                    continue;

                }
            }
            break;
        }
        var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, false);
        this.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);
        return SyntaxTrivia.create(4 /* WhitespaceTrivia */ , text);
    };
    Scanner.prototype.scanSingleLineCommentTrivia = function () {
        var absoluteStartIndex = this.getAndPinAbsoluteIndex();
        var width = this.scanSingleLineCommentTriviaLength();
        var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, false);
        this.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);
        return SyntaxTrivia.create(7 /* SingleLineCommentTrivia */ , text);
    };
    Scanner.prototype.scanSingleLineCommentTriviaLength = function () {
        this.moveToNextItem();
        this.moveToNextItem();
        var width = 2;
        while(true) {
            if(this.isAtEndOfSource() || this.isNewLineCharacter(this.currentCharCode())) {
                return width;
            }
            this.moveToNextItem();
            width++;
        }
    };
    Scanner.prototype.scanMultiLineCommentTrivia = function () {
        var absoluteStartIndex = this.getAndPinAbsoluteIndex();
        var width = this.scanMultiLineCommentTriviaLength(null);
        var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, false);
        this.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);
        return SyntaxTrivia.create(6 /* MultiLineCommentTrivia */ , text);
    };
    Scanner.prototype.scanMultiLineCommentTriviaLength = function (diagnostics) {
        this.moveToNextItem();
        this.moveToNextItem();
        var width = 2;
        while(true) {
            if(this.isAtEndOfSource()) {
                if(diagnostics !== null) {
                    diagnostics.push(new SyntaxDiagnostic(this.absoluteIndex(), 0, 10 /* _StarSlash__expected */ , null));
                }
                return width;
            }
            var ch = this.currentCharCode();
            if(ch === 42 /* asterisk */  && this.peekItemN(1) === 47 /* slash */ ) {
                this.moveToNextItem();
                this.moveToNextItem();
                width += 2;
                return width;
            }
            this.moveToNextItem();
            width++;
        }
    };
    Scanner.prototype.scanLineTerminatorSequenceTrivia = function (ch) {
        var absoluteStartIndex = this.getAndPinAbsoluteIndex();
        var width = this.scanLineTerminatorSequenceLength(ch);
        var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, false);
        this.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);
        return SyntaxTrivia.create(5 /* NewLineTrivia */ , text);
    };
    Scanner.prototype.scanLineTerminatorSequenceLength = function (ch) {
        this.moveToNextItem();
        if(ch === 13 /* carriageReturn */  && this.currentCharCode() === 10 /* lineFeed */ ) {
            this.moveToNextItem();
            return 2;
        } else {
            return 1;
        }
    };
    Scanner.prototype.scanSyntaxToken = function (diagnostics, allowRegularExpression) {
        this.kind = 0 /* None */ ;
        this.width = 0;
        if(this.isAtEndOfSource()) {
            this.kind = 118 /* EndOfFileToken */ ;
            return;
        }
        var character = this.currentCharCode();
        switch(character) {
            case 34 /* doubleQuote */ :
            case 39 /* singleQuote */ : {
                return this.scanStringLiteral(diagnostics);

            }
            case 47 /* slash */ : {
                return this.scanSlashToken(allowRegularExpression);

            }
            case 46 /* dot */ : {
                return this.scanDotToken();

            }
            case 45 /* minus */ : {
                return this.scanMinusToken();

            }
            case 33 /* exclamation */ : {
                return this.scanExclamationToken();

            }
            case 61 /* equals */ : {
                return this.scanEqualsToken();

            }
            case 124 /* bar */ : {
                return this.scanBarToken();

            }
            case 42 /* asterisk */ : {
                return this.scanAsteriskToken();

            }
            case 43 /* plus */ : {
                return this.scanPlusToken();

            }
            case 37 /* percent */ : {
                return this.scanPercentToken();

            }
            case 38 /* ampersand */ : {
                return this.scanAmpersandToken();

            }
            case 94 /* caret */ : {
                return this.scanCaretToken();

            }
            case 60 /* lessThan */ : {
                return this.scanLessThanToken();

            }
            case 62 /* greaterThan */ : {
                return this.scanGreaterThanToken();

            }
            case 44 /* comma */ : {
                return this.advanceAndSetTokenKind(76 /* CommaToken */ );

            }
            case 58 /* colon */ : {
                return this.advanceAndSetTokenKind(103 /* ColonToken */ );

            }
            case 59 /* semicolon */ : {
                return this.advanceAndSetTokenKind(75 /* SemicolonToken */ );

            }
            case 126 /* tilde */ : {
                return this.advanceAndSetTokenKind(99 /* TildeToken */ );

            }
            case 40 /* openParen */ : {
                return this.advanceAndSetTokenKind(69 /* OpenParenToken */ );

            }
            case 41 /* closeParen */ : {
                return this.advanceAndSetTokenKind(70 /* CloseParenToken */ );

            }
            case 123 /* openBrace */ : {
                return this.advanceAndSetTokenKind(67 /* OpenBraceToken */ );

            }
            case 125 /* closeBrace */ : {
                return this.advanceAndSetTokenKind(68 /* CloseBraceToken */ );

            }
            case 91 /* openBracket */ : {
                return this.advanceAndSetTokenKind(71 /* OpenBracketToken */ );

            }
            case 93 /* closeBracket */ : {
                return this.advanceAndSetTokenKind(72 /* CloseBracketToken */ );

            }
            case 63 /* question */ : {
                return this.advanceAndSetTokenKind(102 /* QuestionToken */ );

            }
        }
        if(Scanner.isNumericLiteralStart[character]) {
            this.scanNumericLiteral();
            return;
        }
        if(Scanner.isIdentifierStartCharacter[character]) {
            if(this.tryFastScanIdentifierOrKeyword(character)) {
                return;
            }
        }
        if(this.isIdentifierStart(this.peekCharOrUnicodeEscape())) {
            this.slowScanIdentifier(diagnostics);
            return;
        }
        this.scanDefaultCharacter(character, diagnostics);
    };
    Scanner.prototype.isIdentifierStart = function (interpretedChar) {
        if(Scanner.isIdentifierStartCharacter[interpretedChar]) {
            return true;
        }
        return interpretedChar > 127 /* maxAsciiCharacter */  && Unicode.isIdentifierStart(interpretedChar, this.languageVersion);
    };
    Scanner.prototype.isIdentifierPart = function (interpretedChar) {
        if(Scanner.isIdentifierPartCharacter[interpretedChar]) {
            return true;
        }
        return interpretedChar > 127 /* maxAsciiCharacter */  && Unicode.isIdentifierPart(interpretedChar, this.languageVersion);
    };
    Scanner.prototype.tryFastScanIdentifierOrKeyword = function (firstCharacter) {
        var startIndex = this.getAndPinAbsoluteIndex();
        while(true) {
            var character = this.currentCharCode();
            if(Scanner.isIdentifierPartCharacter[character]) {
                this.moveToNextItem();
            } else {
                if(character === 92 /* backslash */  || character > 127 /* maxAsciiCharacter */ ) {
                    this.rewindToPinnedIndex(startIndex);
                    this.releaseAndUnpinAbsoluteIndex(startIndex);
                    return false;
                } else {
                    var endIndex = this.absoluteIndex();
                    this.width = endIndex - startIndex;
                    this.kind = 9 /* IdentifierNameToken */ ;
                    if(Scanner.isKeywordStartCharacter[firstCharacter]) {
                        var offset = startIndex - this.windowAbsoluteStartIndex;
                        this.kind = ScannerUtilities.identifierKind(this.window, offset, endIndex - startIndex);
                    }
                    this.releaseAndUnpinAbsoluteIndex(startIndex);
                    return true;
                }
            }
        }
    };
    Scanner.prototype.slowScanIdentifier = function (diagnostics) {
        var startIndex = this.getAndPinAbsoluteIndex();
        do {
            this.scanCharOrUnicodeEscape(diagnostics);
        }while(this.isIdentifierPart(this.peekCharOrUnicodeEscape()))
        var endIndex = this.absoluteIndex();
        this.width = endIndex - startIndex;
        this.kind = 9 /* IdentifierNameToken */ ;
        this.releaseAndUnpinAbsoluteIndex(startIndex);
    };
    Scanner.prototype.scanNumericLiteral = function () {
        var startIndex = this.getAndPinAbsoluteIndex();
        if(this.isHexNumericLiteral()) {
            this.scanHexNumericLiteral(startIndex);
        } else {
            this.scanDecimalNumericLiteral(startIndex);
        }
        this.releaseAndUnpinAbsoluteIndex(startIndex);
    };
    Scanner.prototype.scanDecimalNumericLiteral = function (startIndex) {
        while(CharacterInfo.isDecimalDigit(this.currentCharCode())) {
            this.moveToNextItem();
        }
        if(this.currentCharCode() === 46 /* dot */ ) {
            this.moveToNextItem();
        }
        while(CharacterInfo.isDecimalDigit(this.currentCharCode())) {
            this.moveToNextItem();
        }
        var ch = this.currentCharCode();
        if(ch === 101 /* e */  || ch === 69 /* E */ ) {
            this.moveToNextItem();
            ch = this.currentCharCode();
            if(ch === 45 /* minus */  || ch === 43 /* plus */ ) {
                if(CharacterInfo.isDecimalDigit(this.peekItemN(1))) {
                    this.moveToNextItem();
                }
            }
        }
        while(CharacterInfo.isDecimalDigit(this.currentCharCode())) {
            this.moveToNextItem();
        }
        var endIndex = this.absoluteIndex();
        this.width = endIndex - startIndex;
        this.kind = 11 /* NumericLiteral */ ;
    };
    Scanner.prototype.scanHexNumericLiteral = function (startIndex) {
        Debug.assert(this.isHexNumericLiteral());
        this.moveToNextItem();
        this.moveToNextItem();
        while(CharacterInfo.isHexDigit(this.currentCharCode())) {
            this.moveToNextItem();
        }
        var endIndex = this.absoluteIndex();
        this.width = endIndex - startIndex;
        this.kind = 11 /* NumericLiteral */ ;
    };
    Scanner.prototype.isHexNumericLiteral = function () {
        if(this.currentCharCode() === 48 /* _0 */ ) {
            var ch = this.peekItemN(1);
            if(ch === 120 /* x */  || ch === 88 /* X */ ) {
                ch = this.peekItemN(2);
                return CharacterInfo.isHexDigit(ch);
            }
        }
        return false;
    };
    Scanner.prototype.advanceAndSetTokenKind = function (kind) {
        this.moveToNextItem();
        this.kind = kind;
    };
    Scanner.prototype.scanGreaterThanToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 80 /* GreaterThanEqualsToken */ ;
        } else {
            if(character === 62 /* greaterThan */ ) {
                this.scanGreaterThanGreaterThanToken();
            } else {
                this.kind = 78 /* GreaterThanToken */ ;
            }
        }
    };
    Scanner.prototype.scanGreaterThanGreaterThanToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 110 /* GreaterThanGreaterThanEqualsToken */ ;
        } else {
            if(character === 62 /* greaterThan */ ) {
                this.scanGreaterThanGreaterThanGreaterThanToken();
            } else {
                this.kind = 93 /* GreaterThanGreaterThanToken */ ;
            }
        }
    };
    Scanner.prototype.scanGreaterThanGreaterThanGreaterThanToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 111 /* GreaterThanGreaterThanGreaterThanEqualsToken */ ;
        } else {
            this.kind = 94 /* GreaterThanGreaterThanGreaterThanToken */ ;
        }
    };
    Scanner.prototype.scanLessThanToken = function () {
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 79 /* LessThanEqualsToken */ ;
        } else {
            if(this.currentCharCode() === 60 /* lessThan */ ) {
                this.moveToNextItem();
                if(this.currentCharCode() === 61 /* equals */ ) {
                    this.moveToNextItem();
                    this.kind = 109 /* LessThanLessThanEqualsToken */ ;
                } else {
                    this.kind = 92 /* LessThanLessThanToken */ ;
                }
            } else {
                this.kind = 77 /* LessThanToken */ ;
            }
        }
    };
    Scanner.prototype.scanBarToken = function () {
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 113 /* BarEqualsToken */ ;
        } else {
            if(this.currentCharCode() === 124 /* bar */ ) {
                this.moveToNextItem();
                this.kind = 101 /* BarBarToken */ ;
            } else {
                this.kind = 96 /* BarToken */ ;
            }
        }
    };
    Scanner.prototype.scanCaretToken = function () {
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 114 /* CaretEqualsToken */ ;
        } else {
            this.kind = 97 /* CaretToken */ ;
        }
    };
    Scanner.prototype.scanAmpersandToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 112 /* AmpersandEqualsToken */ ;
        } else {
            if(this.currentCharCode() === 38 /* ampersand */ ) {
                this.moveToNextItem();
                this.kind = 100 /* AmpersandAmpersandToken */ ;
            } else {
                this.kind = 95 /* AmpersandToken */ ;
            }
        }
    };
    Scanner.prototype.scanPercentToken = function () {
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 108 /* PercentEqualsToken */ ;
        } else {
            this.kind = 89 /* PercentToken */ ;
        }
    };
    Scanner.prototype.scanMinusToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 106 /* MinusEqualsToken */ ;
        } else {
            if(character === 45 /* minus */ ) {
                this.moveToNextItem();
                this.kind = 91 /* MinusMinusToken */ ;
            } else {
                this.kind = 87 /* MinusToken */ ;
            }
        }
    };
    Scanner.prototype.scanPlusToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 105 /* PlusEqualsToken */ ;
        } else {
            if(character === 43 /* plus */ ) {
                this.moveToNextItem();
                this.kind = 90 /* PlusPlusToken */ ;
            } else {
                this.kind = 86 /* PlusToken */ ;
            }
        }
    };
    Scanner.prototype.scanAsteriskToken = function () {
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 107 /* AsteriskEqualsToken */ ;
        } else {
            this.kind = 88 /* AsteriskToken */ ;
        }
    };
    Scanner.prototype.scanEqualsToken = function () {
        this.moveToNextItem();
        var character = this.currentCharCode();
        if(character === 61 /* equals */ ) {
            this.moveToNextItem();
            if(this.currentCharCode() === 61 /* equals */ ) {
                this.moveToNextItem();
                this.kind = 84 /* EqualsEqualsEqualsToken */ ;
            } else {
                this.kind = 81 /* EqualsEqualsToken */ ;
            }
        } else {
            if(character === 62 /* greaterThan */ ) {
                this.moveToNextItem();
                this.kind = 82 /* EqualsGreaterThanToken */ ;
            } else {
                this.kind = 104 /* EqualsToken */ ;
            }
        }
    };
    Scanner.prototype.isDotPrefixedNumericLiteral = function () {
        if(this.currentCharCode() === 46 /* dot */ ) {
            var ch = this.peekItemN(1);
            return CharacterInfo.isDecimalDigit(ch);
        }
        return false;
    };
    Scanner.prototype.scanDotToken = function () {
        if(this.isDotPrefixedNumericLiteral()) {
            this.scanNumericLiteral();
            return;
        }
        this.moveToNextItem();
        if(this.currentCharCode() === 46 /* dot */  && this.peekItemN(1) === 46 /* dot */ ) {
            this.moveToNextItem();
            this.moveToNextItem();
            this.kind = 74 /* DotDotDotToken */ ;
        } else {
            this.kind = 73 /* DotToken */ ;
        }
    };
    Scanner.prototype.scanSlashToken = function (allowRegularExpression) {
        if(allowRegularExpression && this.tryScanRegularExpressionToken()) {
            return;
        }
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            this.kind = 116 /* SlashEqualsToken */ ;
        } else {
            this.kind = 115 /* SlashToken */ ;
        }
    };
    Scanner.prototype.tryScanRegularExpressionToken = function () {
        Debug.assert(this.currentCharCode() === 47 /* slash */ );
        var startIndex = this.getAndPinAbsoluteIndex();
        try  {
            this.moveToNextItem();
            var inEscape = false;
            var inCharacterClass = false;
            while(true) {
                var ch = this.currentCharCode();
                if(this.isNewLineCharacter(ch) || this.isAtEndOfSource()) {
                    this.rewindToPinnedIndex(startIndex);
                    return false;
                }
                this.moveToNextItem();
                if(inEscape) {
                    inEscape = false;
                    continue;
                }
                switch(ch) {
                    case 92 /* backslash */ : {
                        inEscape = true;
                        continue;

                    }
                    case 91 /* openBracket */ : {
                        inCharacterClass = true;
                        continue;

                    }
                    case 93 /* closeBracket */ : {
                        inCharacterClass = false;
                        continue;

                    }
                    case 47 /* slash */ : {
                        if(inCharacterClass) {
                            continue;
                        }
                        break;

                    }
                    default: {
                        continue;

                    }
                }
                break;
            }
            while(Scanner.isIdentifierPartCharacter[this.currentCharCode()]) {
                this.moveToNextItem();
            }
            var endIndex = this.absoluteIndex();
            this.kind = 10 /* RegularExpressionLiteral */ ;
            this.width = endIndex - startIndex;
            return true;
        }finally {
            this.releaseAndUnpinAbsoluteIndex(startIndex);
        }
    };
    Scanner.prototype.scanExclamationToken = function () {
        this.moveToNextItem();
        if(this.currentCharCode() === 61 /* equals */ ) {
            this.moveToNextItem();
            if(this.currentCharCode() === 61 /* equals */ ) {
                this.moveToNextItem();
                this.kind = 85 /* ExclamationEqualsEqualsToken */ ;
            } else {
                this.kind = 83 /* ExclamationEqualsToken */ ;
            }
        } else {
            this.kind = 98 /* ExclamationToken */ ;
        }
    };
    Scanner.prototype.scanDefaultCharacter = function (character, diagnostics) {
        var position = this.absoluteIndex();
        this.moveToNextItem();
        this.width = 1;
        this.kind = 117 /* ErrorToken */ ;
        var text = String.fromCharCode(character);
        var messageText = this.getErrorMessageText(text);
        diagnostics.push(new SyntaxDiagnostic(position, 1, 1 /* Unexpected_character_0 */ , [
            messageText
        ]));
    };
    Scanner.prototype.getErrorMessageText = function (text) {
        if(text === "\\") {
            return '"\\"';
        }
        return JSON2.stringify(text);
    };
    Scanner.prototype.skipEscapeSequence = function (diagnostics) {
        Debug.assert(this.currentCharCode() === 92 /* backslash */ );
        var rewindPoint = this.getAndPinAbsoluteIndex();
        try  {
            this.moveToNextItem();
            var ch = this.currentCharCode();
            this.moveToNextItem();
            switch(ch) {
                case 120 /* x */ :
                case 117 /* u */ : {
                    this.rewindToPinnedIndex(rewindPoint);
                    var value = this.scanUnicodeOrHexEscape(diagnostics);
                    return;

                }
                case 13 /* carriageReturn */ : {
                    if(this.currentCharCode() === 10 /* lineFeed */ ) {
                        this.moveToNextItem();
                    }
                    return;

                }
                default: {
                    return;

                }
            }
        }finally {
            this.releaseAndUnpinAbsoluteIndex(rewindPoint);
        }
    };
    Scanner.prototype.scanStringLiteral = function (diagnostics) {
        var quoteCharacter = this.currentCharCode();
        Debug.assert(quoteCharacter === 39 /* singleQuote */  || quoteCharacter === 34 /* doubleQuote */ );
        var startIndex = this.absoluteIndex();
        this.moveToNextItem();
        while(true) {
            var ch = this.currentCharCode();
            if(ch === 92 /* backslash */ ) {
                this.skipEscapeSequence(diagnostics);
            } else {
                if(ch === quoteCharacter) {
                    this.moveToNextItem();
                    break;
                } else {
                    if(this.isNewLineCharacter(ch) || this.isAtEndOfSource()) {
                        diagnostics.push(new SyntaxDiagnostic(this.absoluteIndex(), 1, 2 /* Missing_closing_quote_character */ , null));
                        break;
                    } else {
                        this.moveToNextItem();
                    }
                }
            }
        }
        var endIndex = this.absoluteIndex();
        this.width = endIndex - startIndex;
        this.kind = 12 /* StringLiteral */ ;
    };
    Scanner.prototype.isUnicodeOrHexEscape = function (character) {
        return this.isUnicodeEscape(character) || this.isHexEscape(character);
    };
    Scanner.prototype.isUnicodeEscape = function (character) {
        if(character === 92 /* backslash */ ) {
            var ch2 = this.peekItemN(1);
            if(ch2 === 117 /* u */ ) {
                return true;
            }
        }
        return false;
    };
    Scanner.prototype.isHexEscape = function (character) {
        if(character === 92 /* backslash */ ) {
            var ch2 = this.peekItemN(1);
            if(ch2 === 120 /* x */ ) {
                return true;
            }
        }
        return false;
    };
    Scanner.prototype.peekCharOrUnicodeOrHexEscape = function () {
        var character = this.currentCharCode();
        if(this.isUnicodeOrHexEscape(character)) {
            return this.peekUnicodeOrHexEscape();
        } else {
            return character;
        }
    };
    Scanner.prototype.peekCharOrUnicodeEscape = function () {
        var character = this.currentCharCode();
        if(this.isUnicodeEscape(character)) {
            return this.peekUnicodeOrHexEscape();
        } else {
            return character;
        }
    };
    Scanner.prototype.peekUnicodeOrHexEscape = function () {
        var rewindPoint = this.getRewindPoint();
        var ch = this.scanUnicodeOrHexEscape(null);
        this.rewind(rewindPoint);
        this.releaseRewindPoint(rewindPoint);
        return ch;
    };
    Scanner.prototype.scanCharOrUnicodeEscape = function (errors) {
        var ch = this.currentCharCode();
        if(ch === 92 /* backslash */ ) {
            var ch2 = this.peekItemN(1);
            if(ch2 === 117 /* u */ ) {
                return this.scanUnicodeOrHexEscape(errors);
            }
        }
        this.moveToNextItem();
        return ch;
    };
    Scanner.prototype.scanCharOrUnicodeOrHexEscape = function (errors) {
        var ch = this.currentCharCode();
        if(ch === 92 /* backslash */ ) {
            var ch2 = this.peekItemN(1);
            if(ch2 === 117 /* u */  || ch2 === 120 /* x */ ) {
                return this.scanUnicodeOrHexEscape(errors);
            }
        }
        this.moveToNextItem();
        return ch;
    };
    Scanner.prototype.scanUnicodeOrHexEscape = function (errors) {
        var start = this.absoluteIndex();
        var character = this.currentCharCode();
        Debug.assert(character === 92 /* backslash */ );
        this.moveToNextItem();
        character = this.currentCharCode();
        Debug.assert(character === 117 /* u */  || character === 120 /* x */ );
        var intChar = 0;
        this.moveToNextItem();
        var count = character === 117 /* u */  ? 4 : 2;
        for(var i = 0; i < count; i++) {
            var ch2 = this.currentCharCode();
            if(!CharacterInfo.isHexDigit(ch2)) {
                if(errors !== null) {
                    var end = this.absoluteIndex();
                    var info = this.createIllegalEscapeDiagnostic(start, end);
                    errors.push(info);
                }
                break;
            }
            intChar = (intChar << 4) + CharacterInfo.hexValue(ch2);
            this.moveToNextItem();
        }
        return intChar;
    };
    Scanner.prototype.substring = function (start, end, intern) {
        var length = end - start;
        var offset = start - this.windowAbsoluteStartIndex;
        Debug.assert(offset >= 0);
        if(intern) {
            return this.stringTable.addCharArray(this.window, offset, length);
        } else {
            return StringUtilities.fromCharCodeArray(this.window.slice(offset, offset + length));
        }
    };
    Scanner.prototype.createIllegalEscapeDiagnostic = function (start, end) {
        return new SyntaxDiagnostic(start, end - start, 0 /* Unrecognized_escape_sequence */ , null);
    };
    return Scanner;
})(SlidingWindow);
var TextBase = (function () {
    function TextBase() {
        this.lazyLineStarts = null;
        this.linebreakInfo = new LinebreakInfo(0, 0);
        this.lastLineFoundForPosition = null;
    }
    TextBase.prototype.length = function () {
        throw Errors.abstract();
    };
    TextBase.prototype.charCodeAt = function (position) {
        throw Errors.abstract();
    };
    TextBase.prototype.checkSubSpan = function (span) {
        if(span.start() < 0 || span.start() > this.length() || span.end() > this.length()) {
            throw Errors.argumentOutOfRange("span");
        }
    };
    TextBase.prototype.toString = function (span) {
        if (typeof span === "undefined") { span = null; }
        throw Errors.abstract();
    };
    TextBase.prototype.subText = function (span) {
        this.checkSubSpan(span);
        return new SubText(this, span);
    };
    TextBase.prototype.substr = function (start, length, intern) {
        throw Errors.abstract();
    };
    TextBase.prototype.copyTo = function (sourceIndex, destination, destinationIndex, count) {
        throw Errors.abstract();
    };
    TextBase.prototype.lineCount = function () {
        return this.lineStarts().length;
    };
    TextBase.prototype.lines = function () {
        var lines = [];
        var length = this.lineCount();
        for(var i = 0; i < length; ++i) {
            lines[i] = this.getLineFromLineNumber(i);
        }
        return lines;
    };
    TextBase.prototype.lineStarts = function () {
        if(this.lazyLineStarts === null) {
            this.lazyLineStarts = this.parseLineStarts();
        }
        return this.lazyLineStarts;
    };
    TextBase.prototype.getLineFromLineNumber = function (lineNumber) {
        var lineStarts = this.lineStarts();
        if(lineNumber < 0 || lineNumber >= lineStarts.length) {
            throw Errors.argumentOutOfRange("lineNumber");
        }
        var first = lineStarts[lineNumber];
        if(lineNumber === lineStarts.length - 1) {
            return new TextLine(this, new TextSpan(first, this.length() - first), 0, lineNumber);
        } else {
            TextUtilities.getStartAndLengthOfLineBreakEndingAt(this, lineStarts[lineNumber + 1] - 1, this.linebreakInfo);
            return new TextLine(this, new TextSpan(first, this.linebreakInfo.startPosition - first), this.linebreakInfo.length, lineNumber);
        }
    };
    TextBase.prototype.getLineFromPosition = function (position) {
        var lastFound = this.lastLineFoundForPosition;
        if(lastFound !== null && lastFound.start() <= position && lastFound.endIncludingLineBreak() > position) {
            return lastFound;
        }
        var lineNumber = this.getLineNumberFromPosition(position);
        var result = this.getLineFromLineNumber(lineNumber);
        this.lastLineFoundForPosition = result;
        return result;
    };
    TextBase.prototype.getLineNumberFromPosition = function (position) {
        if(position < 0 || position > this.length()) {
            throw Errors.argumentOutOfRange("position");
        }
        if(position === this.length()) {
            return this.lineCount() - 1;
        }
        var lineNumber = ArrayUtilities.binarySearch(this.lineStarts(), position);
        if(lineNumber < 0) {
            lineNumber = (~lineNumber) - 1;
        }
        return lineNumber;
    };
    TextBase.prototype.getLinePosition = function (position) {
        if(position < 0 || position > this.length()) {
            throw Errors.argumentOutOfRange("position");
        }
        var lineNumber = this.getLineNumberFromPosition(position);
        return new LinePosition(lineNumber, position - this.lineStarts()[lineNumber]);
    };
    TextBase.prototype.parseLineStarts = function () {
        var length = this.length();
        if(0 === this.length()) {
            var result = [];
            result.push(0);
            return result;
        }
        var position = 0;
        var index = 0;
        var arrayBuilder = [];
        var lineNumber = 0;
        while(index < length) {
            var c = this.charCodeAt(index);
            var lineBreakLength;
            if(c > 13 /* carriageReturn */  && c <= 127) {
                index++;
                continue;
            } else {
                if(c === 13 /* carriageReturn */  && index + 1 < length && this.charCodeAt(index + 1) === 10 /* lineFeed */ ) {
                    lineBreakLength = 2;
                } else {
                    if(c === 10 /* lineFeed */ ) {
                        lineBreakLength = 1;
                    } else {
                        lineBreakLength = TextUtilities.getLengthOfLineBreak(this, index);
                    }
                }
            }
            if(0 === lineBreakLength) {
                index++;
            } else {
                arrayBuilder.push(position);
                index += lineBreakLength;
                position = index;
                lineNumber++;
            }
        }
        arrayBuilder.push(position);
        return arrayBuilder;
    };
    return TextBase;
})();
var SubText = (function (_super) {
    __extends(SubText, _super);
    function SubText(text, span) {
        _super.call(this);
        this.text = null;
        this.span = null;
        if(text === null) {
            throw Errors.argumentNull("text");
        }
        if(span.start() < 0 || span.start() >= text.length() || span.end() < 0 || span.end() > text.length()) {
            throw Errors.argument("span");
        }
        this.text = text;
        this.span = span;
    }
    SubText.prototype.length = function () {
        return this.span.length();
    };
    SubText.prototype.charCodeAt = function (position) {
        if(position < 0 || position > this.length()) {
            throw Errors.argumentOutOfRange("position");
        }
        return this.text.charCodeAt(this.span.start() + position);
    };
    SubText.prototype.subText = function (span) {
        this.checkSubSpan(span);
        return new SubText(this.text, this.getCompositeSpan(span.start(), span.length()));
    };
    SubText.prototype.copyTo = function (sourceIndex, destination, destinationIndex, count) {
        var span = this.getCompositeSpan(sourceIndex, count);
        this.text.copyTo(span.start(), destination, destinationIndex, span.length());
    };
    SubText.prototype.getCompositeSpan = function (start, length) {
        var compositeStart = MathPrototype.min(this.text.length(), this.span.start() + start);
        var compositeEnd = MathPrototype.min(this.text.length(), compositeStart + length);
        return new TextSpan(compositeStart, compositeEnd - compositeStart);
    };
    return SubText;
})(TextBase);
var Strings = (function () {
    function Strings() { }
    Strings.module__class__interface__enum__import_or_statement = "module, class, interface, enum, import or statement";
    Strings.constructor__function__accessor_or_variable = "constructor, function, accessor or variable";
    Strings.statement = "statement";
    Strings.case_or_default_clause = "case or default clause";
    Strings.identifier = "identifier";
    Strings.call__construct__index__property_or_function_signature = "call, construct, index, property or function signature";
    Strings.expression = "expression";
    Strings.type_name = "type name";
    Strings.property_or_accessor = "property or accessor";
    Strings.parameter = "parameter";
    return Strings;
})();
var StringTableEntry = (function () {
    function StringTableEntry(Text, HashCode, Next) {
        this.Text = Text;
        this.HashCode = HashCode;
        this.Next = Next;
    }
    return StringTableEntry;
})();
var StringTable = (function () {
    function StringTable(capacity) {
        if (typeof capacity === "undefined") { capacity = 256; }
        this.entries = [];
        this.count = 0;
        var size = Hash.getPrime(capacity);
        this.entries = ArrayUtilities.createArray(size);
    }
    StringTable.prototype.addCharArray = function (key, start, len) {
        var hashCode = Hash.computeSimple31BitCharArrayHashCode(key, start, len) & 2147483647;
        Debug.assert(hashCode > 0);
        var entry = this.findCharArrayEntry(key, start, len, hashCode);
        if(entry !== null) {
            return entry.Text;
        }
        var slice = key.slice(start, start + len);
        return this.addEntry(StringUtilities.fromCharCodeArray(slice), hashCode);
    };
    StringTable.prototype.findCharArrayEntry = function (key, start, len, hashCode) {
        for(var e = this.entries[hashCode % this.entries.length]; e !== null; e = e.Next) {
            if(e.HashCode === hashCode && StringTable.textCharArrayEquals(e.Text, key, start, len)) {
                return e;
            }
        }
        return null;
    };
    StringTable.prototype.addEntry = function (text, hashCode) {
        var index = hashCode % this.entries.length;
        var e = new StringTableEntry(text, hashCode, this.entries[index]);
        this.entries[index] = e;
        if(this.count === this.entries.length) {
            this.grow();
        }
        this.count++;
        return e.Text;
    };
    StringTable.prototype.dumpStats = function () {
        var standardOut = Environment.standardOut;
        standardOut.WriteLine("----------------------");
        standardOut.WriteLine("String table stats");
        standardOut.WriteLine("Count            : " + this.count);
        standardOut.WriteLine("Entries Length   : " + this.entries.length);
        var longestSlot = 0;
        var occupiedSlots = 0;
        for(var i = 0; i < this.entries.length; i++) {
            if(this.entries[i] !== null) {
                occupiedSlots++;
                var current = this.entries[i];
                var slotCount = 0;
                while(current !== null) {
                    slotCount++;
                    current = current.Next;
                }
                longestSlot = MathPrototype.max(longestSlot, slotCount);
            }
        }
        standardOut.WriteLine("Occupied slots   : " + occupiedSlots);
        standardOut.WriteLine("Longest  slot    : " + longestSlot);
        standardOut.WriteLine("Avg Length/Slot  : " + (this.count / occupiedSlots));
        standardOut.WriteLine("----------------------");
    };
    StringTable.prototype.grow = function () {
        var newSize = Hash.expandPrime(this.entries.length);
        var oldEntries = this.entries;
        var newEntries = ArrayUtilities.createArray(newSize);
        this.entries = newEntries;
        for(var i = 0; i < oldEntries.length; i++) {
            var e = oldEntries[i];
            while(e !== null) {
                var newIndex = e.HashCode % newSize;
                var tmp = e.Next;
                e.Next = newEntries[newIndex];
                newEntries[newIndex] = e;
                e = tmp;
            }
        }
    };
    StringTable.textCharArrayEquals = function textCharArrayEquals(text, array, start, length) {
        if(text.length !== length) {
            return false;
        }
        var s = start;
        for(var i = 0; i < length; i++) {
            if(text.charCodeAt(i) !== array[s]) {
                return false;
            }
            s++;
        }
        return true;
    }
    return StringTable;
})();
var StringText = (function (_super) {
    __extends(StringText, _super);
    function StringText(data) {
        _super.call(this);
        this.source = null;
        if(data === null) {
            throw Errors.argumentNull("data");
        }
        this.source = data;
    }
    StringText.prototype.length = function () {
        return this.source.length;
    };
    StringText.prototype.charCodeAt = function (position) {
        if(position < 0 || position >= this.source.length) {
            throw Errors.argumentOutOfRange("position");
        }
        return this.source.charCodeAt(position);
    };
    StringText.prototype.substr = function (start, length, intern) {
        return this.source.substr(start, length);
    };
    StringText.prototype.toString = function (span) {
        if (typeof span === "undefined") { span = null; }
        if(span === null) {
            span = new TextSpan(0, this.length());
        }
        this.checkSubSpan(span);
        if(span.start() === 0 && span.length() === this.length()) {
            return this.source;
        }
        return this.source.substr(span.start(), span.length());
    };
    StringText.prototype.copyTo = function (sourceIndex, destination, destinationIndex, count) {
        return StringUtilities.copyTo(this.source, sourceIndex, destination, destinationIndex, count);
    };
    return StringText;
})(TextBase);
var StringUtilities = (function () {
    function StringUtilities() { }
    StringUtilities.fromCharCodeArray = function fromCharCodeArray(array) {
        return String.fromCharCode.apply(null, array);
    }
    StringUtilities.endsWith = function endsWith(string, value) {
        return string.substring(string.length - value.length, string.length) === value;
    }
    StringUtilities.startsWith = function startsWith(string, value) {
        return string.substr(0, value.length) === value;
    }
    StringUtilities.copyTo = function copyTo(source, sourceIndex, destination, destinationIndex, count) {
        for(var i = 0; i < count; i++) {
            destination[destinationIndex + i] = source.charCodeAt(sourceIndex + i);
        }
    }
    StringUtilities.repeat = function repeat(value, count) {
        return Array(count + 1).join(value);
    }
    return StringUtilities;
})();
var SyntaxDiagnostic = (function (_super) {
    __extends(SyntaxDiagnostic, _super);
    function SyntaxDiagnostic(position, width, code, args) {
        _super.call(this, code, args);
        if(width < 0) {
            throw Errors.argumentOutOfRange("width");
        }
        this._position = position;
        this._width = width;
    }
    SyntaxDiagnostic.prototype.toJSON = function (key) {
        var result = {
        };
        result._position = this._position;
        result._width = this._width;
        result._diagnosticCode = (DiagnosticCode)._map[this.diagnosticCode()];
        var arguments = (this)._arguments;
        if(arguments && arguments.length > 0) {
            result._arguments = arguments;
        }
        return result;
    };
    SyntaxDiagnostic.prototype.position = function () {
        return this._position;
    };
    SyntaxDiagnostic.prototype.width = function () {
        return this._width;
    };
    return SyntaxDiagnostic;
})(Diagnostic);
var SyntaxKind;
(function (SyntaxKind) {
    SyntaxKind._map = [];
    SyntaxKind._map[0] = "None";
    SyntaxKind.None = 0;
    SyntaxKind._map[1] = "List";
    SyntaxKind.List = 1;
    SyntaxKind._map[2] = "SeparatedList";
    SyntaxKind.SeparatedList = 2;
    SyntaxKind._map[3] = "TriviaList";
    SyntaxKind.TriviaList = 3;
    SyntaxKind._map[4] = "WhitespaceTrivia";
    SyntaxKind.WhitespaceTrivia = 4;
    SyntaxKind._map[5] = "NewLineTrivia";
    SyntaxKind.NewLineTrivia = 5;
    SyntaxKind._map[6] = "MultiLineCommentTrivia";
    SyntaxKind.MultiLineCommentTrivia = 6;
    SyntaxKind._map[7] = "SingleLineCommentTrivia";
    SyntaxKind.SingleLineCommentTrivia = 7;
    SyntaxKind._map[8] = "SkippedTextTrivia";
    SyntaxKind.SkippedTextTrivia = 8;
    SyntaxKind._map[9] = "IdentifierNameToken";
    SyntaxKind.IdentifierNameToken = 9;
    SyntaxKind._map[10] = "RegularExpressionLiteral";
    SyntaxKind.RegularExpressionLiteral = 10;
    SyntaxKind._map[11] = "NumericLiteral";
    SyntaxKind.NumericLiteral = 11;
    SyntaxKind._map[12] = "StringLiteral";
    SyntaxKind.StringLiteral = 12;
    SyntaxKind._map[13] = "BreakKeyword";
    SyntaxKind.BreakKeyword = 13;
    SyntaxKind._map[14] = "CaseKeyword";
    SyntaxKind.CaseKeyword = 14;
    SyntaxKind._map[15] = "CatchKeyword";
    SyntaxKind.CatchKeyword = 15;
    SyntaxKind._map[16] = "ContinueKeyword";
    SyntaxKind.ContinueKeyword = 16;
    SyntaxKind._map[17] = "DebuggerKeyword";
    SyntaxKind.DebuggerKeyword = 17;
    SyntaxKind._map[18] = "DefaultKeyword";
    SyntaxKind.DefaultKeyword = 18;
    SyntaxKind._map[19] = "DeleteKeyword";
    SyntaxKind.DeleteKeyword = 19;
    SyntaxKind._map[20] = "DoKeyword";
    SyntaxKind.DoKeyword = 20;
    SyntaxKind._map[21] = "ElseKeyword";
    SyntaxKind.ElseKeyword = 21;
    SyntaxKind._map[22] = "FalseKeyword";
    SyntaxKind.FalseKeyword = 22;
    SyntaxKind._map[23] = "FinallyKeyword";
    SyntaxKind.FinallyKeyword = 23;
    SyntaxKind._map[24] = "ForKeyword";
    SyntaxKind.ForKeyword = 24;
    SyntaxKind._map[25] = "FunctionKeyword";
    SyntaxKind.FunctionKeyword = 25;
    SyntaxKind._map[26] = "IfKeyword";
    SyntaxKind.IfKeyword = 26;
    SyntaxKind._map[27] = "InKeyword";
    SyntaxKind.InKeyword = 27;
    SyntaxKind._map[28] = "InstanceOfKeyword";
    SyntaxKind.InstanceOfKeyword = 28;
    SyntaxKind._map[29] = "NewKeyword";
    SyntaxKind.NewKeyword = 29;
    SyntaxKind._map[30] = "NullKeyword";
    SyntaxKind.NullKeyword = 30;
    SyntaxKind._map[31] = "ReturnKeyword";
    SyntaxKind.ReturnKeyword = 31;
    SyntaxKind._map[32] = "SwitchKeyword";
    SyntaxKind.SwitchKeyword = 32;
    SyntaxKind._map[33] = "ThisKeyword";
    SyntaxKind.ThisKeyword = 33;
    SyntaxKind._map[34] = "ThrowKeyword";
    SyntaxKind.ThrowKeyword = 34;
    SyntaxKind._map[35] = "TrueKeyword";
    SyntaxKind.TrueKeyword = 35;
    SyntaxKind._map[36] = "TryKeyword";
    SyntaxKind.TryKeyword = 36;
    SyntaxKind._map[37] = "TypeOfKeyword";
    SyntaxKind.TypeOfKeyword = 37;
    SyntaxKind._map[38] = "VarKeyword";
    SyntaxKind.VarKeyword = 38;
    SyntaxKind._map[39] = "VoidKeyword";
    SyntaxKind.VoidKeyword = 39;
    SyntaxKind._map[40] = "WhileKeyword";
    SyntaxKind.WhileKeyword = 40;
    SyntaxKind._map[41] = "WithKeyword";
    SyntaxKind.WithKeyword = 41;
    SyntaxKind._map[42] = "ClassKeyword";
    SyntaxKind.ClassKeyword = 42;
    SyntaxKind._map[43] = "ConstKeyword";
    SyntaxKind.ConstKeyword = 43;
    SyntaxKind._map[44] = "EnumKeyword";
    SyntaxKind.EnumKeyword = 44;
    SyntaxKind._map[45] = "ExportKeyword";
    SyntaxKind.ExportKeyword = 45;
    SyntaxKind._map[46] = "ExtendsKeyword";
    SyntaxKind.ExtendsKeyword = 46;
    SyntaxKind._map[47] = "ImportKeyword";
    SyntaxKind.ImportKeyword = 47;
    SyntaxKind._map[48] = "SuperKeyword";
    SyntaxKind.SuperKeyword = 48;
    SyntaxKind._map[49] = "ImplementsKeyword";
    SyntaxKind.ImplementsKeyword = 49;
    SyntaxKind._map[50] = "InterfaceKeyword";
    SyntaxKind.InterfaceKeyword = 50;
    SyntaxKind._map[51] = "LetKeyword";
    SyntaxKind.LetKeyword = 51;
    SyntaxKind._map[52] = "PackageKeyword";
    SyntaxKind.PackageKeyword = 52;
    SyntaxKind._map[53] = "PrivateKeyword";
    SyntaxKind.PrivateKeyword = 53;
    SyntaxKind._map[54] = "ProtectedKeyword";
    SyntaxKind.ProtectedKeyword = 54;
    SyntaxKind._map[55] = "PublicKeyword";
    SyntaxKind.PublicKeyword = 55;
    SyntaxKind._map[56] = "StaticKeyword";
    SyntaxKind.StaticKeyword = 56;
    SyntaxKind._map[57] = "YieldKeyword";
    SyntaxKind.YieldKeyword = 57;
    SyntaxKind._map[58] = "AnyKeyword";
    SyntaxKind.AnyKeyword = 58;
    SyntaxKind._map[59] = "BoolKeyword";
    SyntaxKind.BoolKeyword = 59;
    SyntaxKind._map[60] = "ConstructorKeyword";
    SyntaxKind.ConstructorKeyword = 60;
    SyntaxKind._map[61] = "DeclareKeyword";
    SyntaxKind.DeclareKeyword = 61;
    SyntaxKind._map[62] = "GetKeyword";
    SyntaxKind.GetKeyword = 62;
    SyntaxKind._map[63] = "ModuleKeyword";
    SyntaxKind.ModuleKeyword = 63;
    SyntaxKind._map[64] = "NumberKeyword";
    SyntaxKind.NumberKeyword = 64;
    SyntaxKind._map[65] = "SetKeyword";
    SyntaxKind.SetKeyword = 65;
    SyntaxKind._map[66] = "StringKeyword";
    SyntaxKind.StringKeyword = 66;
    SyntaxKind._map[67] = "OpenBraceToken";
    SyntaxKind.OpenBraceToken = 67;
    SyntaxKind._map[68] = "CloseBraceToken";
    SyntaxKind.CloseBraceToken = 68;
    SyntaxKind._map[69] = "OpenParenToken";
    SyntaxKind.OpenParenToken = 69;
    SyntaxKind._map[70] = "CloseParenToken";
    SyntaxKind.CloseParenToken = 70;
    SyntaxKind._map[71] = "OpenBracketToken";
    SyntaxKind.OpenBracketToken = 71;
    SyntaxKind._map[72] = "CloseBracketToken";
    SyntaxKind.CloseBracketToken = 72;
    SyntaxKind._map[73] = "DotToken";
    SyntaxKind.DotToken = 73;
    SyntaxKind._map[74] = "DotDotDotToken";
    SyntaxKind.DotDotDotToken = 74;
    SyntaxKind._map[75] = "SemicolonToken";
    SyntaxKind.SemicolonToken = 75;
    SyntaxKind._map[76] = "CommaToken";
    SyntaxKind.CommaToken = 76;
    SyntaxKind._map[77] = "LessThanToken";
    SyntaxKind.LessThanToken = 77;
    SyntaxKind._map[78] = "GreaterThanToken";
    SyntaxKind.GreaterThanToken = 78;
    SyntaxKind._map[79] = "LessThanEqualsToken";
    SyntaxKind.LessThanEqualsToken = 79;
    SyntaxKind._map[80] = "GreaterThanEqualsToken";
    SyntaxKind.GreaterThanEqualsToken = 80;
    SyntaxKind._map[81] = "EqualsEqualsToken";
    SyntaxKind.EqualsEqualsToken = 81;
    SyntaxKind._map[82] = "EqualsGreaterThanToken";
    SyntaxKind.EqualsGreaterThanToken = 82;
    SyntaxKind._map[83] = "ExclamationEqualsToken";
    SyntaxKind.ExclamationEqualsToken = 83;
    SyntaxKind._map[84] = "EqualsEqualsEqualsToken";
    SyntaxKind.EqualsEqualsEqualsToken = 84;
    SyntaxKind._map[85] = "ExclamationEqualsEqualsToken";
    SyntaxKind.ExclamationEqualsEqualsToken = 85;
    SyntaxKind._map[86] = "PlusToken";
    SyntaxKind.PlusToken = 86;
    SyntaxKind._map[87] = "MinusToken";
    SyntaxKind.MinusToken = 87;
    SyntaxKind._map[88] = "AsteriskToken";
    SyntaxKind.AsteriskToken = 88;
    SyntaxKind._map[89] = "PercentToken";
    SyntaxKind.PercentToken = 89;
    SyntaxKind._map[90] = "PlusPlusToken";
    SyntaxKind.PlusPlusToken = 90;
    SyntaxKind._map[91] = "MinusMinusToken";
    SyntaxKind.MinusMinusToken = 91;
    SyntaxKind._map[92] = "LessThanLessThanToken";
    SyntaxKind.LessThanLessThanToken = 92;
    SyntaxKind._map[93] = "GreaterThanGreaterThanToken";
    SyntaxKind.GreaterThanGreaterThanToken = 93;
    SyntaxKind._map[94] = "GreaterThanGreaterThanGreaterThanToken";
    SyntaxKind.GreaterThanGreaterThanGreaterThanToken = 94;
    SyntaxKind._map[95] = "AmpersandToken";
    SyntaxKind.AmpersandToken = 95;
    SyntaxKind._map[96] = "BarToken";
    SyntaxKind.BarToken = 96;
    SyntaxKind._map[97] = "CaretToken";
    SyntaxKind.CaretToken = 97;
    SyntaxKind._map[98] = "ExclamationToken";
    SyntaxKind.ExclamationToken = 98;
    SyntaxKind._map[99] = "TildeToken";
    SyntaxKind.TildeToken = 99;
    SyntaxKind._map[100] = "AmpersandAmpersandToken";
    SyntaxKind.AmpersandAmpersandToken = 100;
    SyntaxKind._map[101] = "BarBarToken";
    SyntaxKind.BarBarToken = 101;
    SyntaxKind._map[102] = "QuestionToken";
    SyntaxKind.QuestionToken = 102;
    SyntaxKind._map[103] = "ColonToken";
    SyntaxKind.ColonToken = 103;
    SyntaxKind._map[104] = "EqualsToken";
    SyntaxKind.EqualsToken = 104;
    SyntaxKind._map[105] = "PlusEqualsToken";
    SyntaxKind.PlusEqualsToken = 105;
    SyntaxKind._map[106] = "MinusEqualsToken";
    SyntaxKind.MinusEqualsToken = 106;
    SyntaxKind._map[107] = "AsteriskEqualsToken";
    SyntaxKind.AsteriskEqualsToken = 107;
    SyntaxKind._map[108] = "PercentEqualsToken";
    SyntaxKind.PercentEqualsToken = 108;
    SyntaxKind._map[109] = "LessThanLessThanEqualsToken";
    SyntaxKind.LessThanLessThanEqualsToken = 109;
    SyntaxKind._map[110] = "GreaterThanGreaterThanEqualsToken";
    SyntaxKind.GreaterThanGreaterThanEqualsToken = 110;
    SyntaxKind._map[111] = "GreaterThanGreaterThanGreaterThanEqualsToken";
    SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken = 111;
    SyntaxKind._map[112] = "AmpersandEqualsToken";
    SyntaxKind.AmpersandEqualsToken = 112;
    SyntaxKind._map[113] = "BarEqualsToken";
    SyntaxKind.BarEqualsToken = 113;
    SyntaxKind._map[114] = "CaretEqualsToken";
    SyntaxKind.CaretEqualsToken = 114;
    SyntaxKind._map[115] = "SlashToken";
    SyntaxKind.SlashToken = 115;
    SyntaxKind._map[116] = "SlashEqualsToken";
    SyntaxKind.SlashEqualsToken = 116;
    SyntaxKind._map[117] = "ErrorToken";
    SyntaxKind.ErrorToken = 117;
    SyntaxKind._map[118] = "EndOfFileToken";
    SyntaxKind.EndOfFileToken = 118;
    SyntaxKind._map[119] = "SourceUnit";
    SyntaxKind.SourceUnit = 119;
    SyntaxKind._map[120] = "IdentifierName";
    SyntaxKind.IdentifierName = 120;
    SyntaxKind._map[121] = "QualifiedName";
    SyntaxKind.QualifiedName = 121;
    SyntaxKind._map[122] = "ObjectType";
    SyntaxKind.ObjectType = 122;
    SyntaxKind._map[123] = "PredefinedType";
    SyntaxKind.PredefinedType = 123;
    SyntaxKind._map[124] = "FunctionType";
    SyntaxKind.FunctionType = 124;
    SyntaxKind._map[125] = "ArrayType";
    SyntaxKind.ArrayType = 125;
    SyntaxKind._map[126] = "ConstructorType";
    SyntaxKind.ConstructorType = 126;
    SyntaxKind._map[127] = "InterfaceDeclaration";
    SyntaxKind.InterfaceDeclaration = 127;
    SyntaxKind._map[128] = "FunctionDeclaration";
    SyntaxKind.FunctionDeclaration = 128;
    SyntaxKind._map[129] = "ModuleDeclaration";
    SyntaxKind.ModuleDeclaration = 129;
    SyntaxKind._map[130] = "ClassDeclaration";
    SyntaxKind.ClassDeclaration = 130;
    SyntaxKind._map[131] = "EnumDeclaration";
    SyntaxKind.EnumDeclaration = 131;
    SyntaxKind._map[132] = "ImportDeclaration";
    SyntaxKind.ImportDeclaration = 132;
    SyntaxKind._map[133] = "MemberFunctionDeclaration";
    SyntaxKind.MemberFunctionDeclaration = 133;
    SyntaxKind._map[134] = "MemberVariableDeclaration";
    SyntaxKind.MemberVariableDeclaration = 134;
    SyntaxKind._map[135] = "ConstructorDeclaration";
    SyntaxKind.ConstructorDeclaration = 135;
    SyntaxKind._map[136] = "GetMemberAccessorDeclaration";
    SyntaxKind.GetMemberAccessorDeclaration = 136;
    SyntaxKind._map[137] = "SetMemberAccessorDeclaration";
    SyntaxKind.SetMemberAccessorDeclaration = 137;
    SyntaxKind._map[138] = "Block";
    SyntaxKind.Block = 138;
    SyntaxKind._map[139] = "IfStatement";
    SyntaxKind.IfStatement = 139;
    SyntaxKind._map[140] = "VariableStatement";
    SyntaxKind.VariableStatement = 140;
    SyntaxKind._map[141] = "ExpressionStatement";
    SyntaxKind.ExpressionStatement = 141;
    SyntaxKind._map[142] = "ReturnStatement";
    SyntaxKind.ReturnStatement = 142;
    SyntaxKind._map[143] = "SwitchStatement";
    SyntaxKind.SwitchStatement = 143;
    SyntaxKind._map[144] = "BreakStatement";
    SyntaxKind.BreakStatement = 144;
    SyntaxKind._map[145] = "ContinueStatement";
    SyntaxKind.ContinueStatement = 145;
    SyntaxKind._map[146] = "ForStatement";
    SyntaxKind.ForStatement = 146;
    SyntaxKind._map[147] = "ForInStatement";
    SyntaxKind.ForInStatement = 147;
    SyntaxKind._map[148] = "EmptyStatement";
    SyntaxKind.EmptyStatement = 148;
    SyntaxKind._map[149] = "ThrowStatement";
    SyntaxKind.ThrowStatement = 149;
    SyntaxKind._map[150] = "WhileStatement";
    SyntaxKind.WhileStatement = 150;
    SyntaxKind._map[151] = "TryStatement";
    SyntaxKind.TryStatement = 151;
    SyntaxKind._map[152] = "LabeledStatement";
    SyntaxKind.LabeledStatement = 152;
    SyntaxKind._map[153] = "DoStatement";
    SyntaxKind.DoStatement = 153;
    SyntaxKind._map[154] = "DebuggerStatement";
    SyntaxKind.DebuggerStatement = 154;
    SyntaxKind._map[155] = "WithStatement";
    SyntaxKind.WithStatement = 155;
    SyntaxKind._map[156] = "PlusExpression";
    SyntaxKind.PlusExpression = 156;
    SyntaxKind._map[157] = "NegateExpression";
    SyntaxKind.NegateExpression = 157;
    SyntaxKind._map[158] = "BitwiseNotExpression";
    SyntaxKind.BitwiseNotExpression = 158;
    SyntaxKind._map[159] = "LogicalNotExpression";
    SyntaxKind.LogicalNotExpression = 159;
    SyntaxKind._map[160] = "PreIncrementExpression";
    SyntaxKind.PreIncrementExpression = 160;
    SyntaxKind._map[161] = "PreDecrementExpression";
    SyntaxKind.PreDecrementExpression = 161;
    SyntaxKind._map[162] = "DeleteExpression";
    SyntaxKind.DeleteExpression = 162;
    SyntaxKind._map[163] = "TypeOfExpression";
    SyntaxKind.TypeOfExpression = 163;
    SyntaxKind._map[164] = "VoidExpression";
    SyntaxKind.VoidExpression = 164;
    SyntaxKind._map[165] = "BooleanLiteralExpression";
    SyntaxKind.BooleanLiteralExpression = 165;
    SyntaxKind._map[166] = "NullLiteralExpression";
    SyntaxKind.NullLiteralExpression = 166;
    SyntaxKind._map[167] = "NumericLiteralExpression";
    SyntaxKind.NumericLiteralExpression = 167;
    SyntaxKind._map[168] = "RegularExpressionLiteralExpression";
    SyntaxKind.RegularExpressionLiteralExpression = 168;
    SyntaxKind._map[169] = "StringLiteralExpression";
    SyntaxKind.StringLiteralExpression = 169;
    SyntaxKind._map[170] = "CommaExpression";
    SyntaxKind.CommaExpression = 170;
    SyntaxKind._map[171] = "AssignmentExpression";
    SyntaxKind.AssignmentExpression = 171;
    SyntaxKind._map[172] = "AddAssignmentExpression";
    SyntaxKind.AddAssignmentExpression = 172;
    SyntaxKind._map[173] = "SubtractAssignmentExpression";
    SyntaxKind.SubtractAssignmentExpression = 173;
    SyntaxKind._map[174] = "MultiplyAssignmentExpression";
    SyntaxKind.MultiplyAssignmentExpression = 174;
    SyntaxKind._map[175] = "DivideAssignmentExpression";
    SyntaxKind.DivideAssignmentExpression = 175;
    SyntaxKind._map[176] = "ModuloAssignmentExpression";
    SyntaxKind.ModuloAssignmentExpression = 176;
    SyntaxKind._map[177] = "AndAssignmentExpression";
    SyntaxKind.AndAssignmentExpression = 177;
    SyntaxKind._map[178] = "ExclusiveOrAssignmentExpression";
    SyntaxKind.ExclusiveOrAssignmentExpression = 178;
    SyntaxKind._map[179] = "OrAssignmentExpression";
    SyntaxKind.OrAssignmentExpression = 179;
    SyntaxKind._map[180] = "LeftShiftAssignmentExpression";
    SyntaxKind.LeftShiftAssignmentExpression = 180;
    SyntaxKind._map[181] = "SignedRightShiftAssignmentExpression";
    SyntaxKind.SignedRightShiftAssignmentExpression = 181;
    SyntaxKind._map[182] = "UnsignedRightShiftAssignmentExpression";
    SyntaxKind.UnsignedRightShiftAssignmentExpression = 182;
    SyntaxKind._map[183] = "ConditionalExpression";
    SyntaxKind.ConditionalExpression = 183;
    SyntaxKind._map[184] = "LogicalOrExpression";
    SyntaxKind.LogicalOrExpression = 184;
    SyntaxKind._map[185] = "LogicalAndExpression";
    SyntaxKind.LogicalAndExpression = 185;
    SyntaxKind._map[186] = "BitwiseOrExpression";
    SyntaxKind.BitwiseOrExpression = 186;
    SyntaxKind._map[187] = "BitwiseExclusiveOrExpression";
    SyntaxKind.BitwiseExclusiveOrExpression = 187;
    SyntaxKind._map[188] = "BitwiseAndExpression";
    SyntaxKind.BitwiseAndExpression = 188;
    SyntaxKind._map[189] = "EqualsWithTypeConversionExpression";
    SyntaxKind.EqualsWithTypeConversionExpression = 189;
    SyntaxKind._map[190] = "NotEqualsWithTypeConversionExpression";
    SyntaxKind.NotEqualsWithTypeConversionExpression = 190;
    SyntaxKind._map[191] = "EqualsExpression";
    SyntaxKind.EqualsExpression = 191;
    SyntaxKind._map[192] = "NotEqualsExpression";
    SyntaxKind.NotEqualsExpression = 192;
    SyntaxKind._map[193] = "LessThanExpression";
    SyntaxKind.LessThanExpression = 193;
    SyntaxKind._map[194] = "GreaterThanExpression";
    SyntaxKind.GreaterThanExpression = 194;
    SyntaxKind._map[195] = "LessThanOrEqualExpression";
    SyntaxKind.LessThanOrEqualExpression = 195;
    SyntaxKind._map[196] = "GreaterThanOrEqualExpression";
    SyntaxKind.GreaterThanOrEqualExpression = 196;
    SyntaxKind._map[197] = "InstanceOfExpression";
    SyntaxKind.InstanceOfExpression = 197;
    SyntaxKind._map[198] = "InExpression";
    SyntaxKind.InExpression = 198;
    SyntaxKind._map[199] = "LeftShiftExpression";
    SyntaxKind.LeftShiftExpression = 199;
    SyntaxKind._map[200] = "SignedRightShiftExpression";
    SyntaxKind.SignedRightShiftExpression = 200;
    SyntaxKind._map[201] = "UnsignedRightShiftExpression";
    SyntaxKind.UnsignedRightShiftExpression = 201;
    SyntaxKind._map[202] = "MultiplyExpression";
    SyntaxKind.MultiplyExpression = 202;
    SyntaxKind._map[203] = "DivideExpression";
    SyntaxKind.DivideExpression = 203;
    SyntaxKind._map[204] = "ModuloExpression";
    SyntaxKind.ModuloExpression = 204;
    SyntaxKind._map[205] = "AddExpression";
    SyntaxKind.AddExpression = 205;
    SyntaxKind._map[206] = "SubtractExpression";
    SyntaxKind.SubtractExpression = 206;
    SyntaxKind._map[207] = "PostIncrementExpression";
    SyntaxKind.PostIncrementExpression = 207;
    SyntaxKind._map[208] = "PostDecrementExpression";
    SyntaxKind.PostDecrementExpression = 208;
    SyntaxKind._map[209] = "MemberAccessExpression";
    SyntaxKind.MemberAccessExpression = 209;
    SyntaxKind._map[210] = "InvocationExpression";
    SyntaxKind.InvocationExpression = 210;
    SyntaxKind._map[211] = "ThisExpression";
    SyntaxKind.ThisExpression = 211;
    SyntaxKind._map[212] = "ArrayLiteralExpression";
    SyntaxKind.ArrayLiteralExpression = 212;
    SyntaxKind._map[213] = "ObjectLiteralExpression";
    SyntaxKind.ObjectLiteralExpression = 213;
    SyntaxKind._map[214] = "ObjectCreationExpression";
    SyntaxKind.ObjectCreationExpression = 214;
    SyntaxKind._map[215] = "ParenthesizedExpression";
    SyntaxKind.ParenthesizedExpression = 215;
    SyntaxKind._map[216] = "ParenthesizedArrowFunctionExpression";
    SyntaxKind.ParenthesizedArrowFunctionExpression = 216;
    SyntaxKind._map[217] = "SimpleArrowFunctionExpression";
    SyntaxKind.SimpleArrowFunctionExpression = 217;
    SyntaxKind._map[218] = "CastExpression";
    SyntaxKind.CastExpression = 218;
    SyntaxKind._map[219] = "ElementAccessExpression";
    SyntaxKind.ElementAccessExpression = 219;
    SyntaxKind._map[220] = "FunctionExpression";
    SyntaxKind.FunctionExpression = 220;
    SyntaxKind._map[221] = "SuperExpression";
    SyntaxKind.SuperExpression = 221;
    SyntaxKind._map[222] = "OmittedExpression";
    SyntaxKind.OmittedExpression = 222;
    SyntaxKind._map[223] = "VariableDeclaration";
    SyntaxKind.VariableDeclaration = 223;
    SyntaxKind._map[224] = "VariableDeclarator";
    SyntaxKind.VariableDeclarator = 224;
    SyntaxKind._map[225] = "ParameterList";
    SyntaxKind.ParameterList = 225;
    SyntaxKind._map[226] = "ArgumentList";
    SyntaxKind.ArgumentList = 226;
    SyntaxKind._map[227] = "ImplementsClause";
    SyntaxKind.ImplementsClause = 227;
    SyntaxKind._map[228] = "ExtendsClause";
    SyntaxKind.ExtendsClause = 228;
    SyntaxKind._map[229] = "EqualsValueClause";
    SyntaxKind.EqualsValueClause = 229;
    SyntaxKind._map[230] = "CaseSwitchClause";
    SyntaxKind.CaseSwitchClause = 230;
    SyntaxKind._map[231] = "DefaultSwitchClause";
    SyntaxKind.DefaultSwitchClause = 231;
    SyntaxKind._map[232] = "ElseClause";
    SyntaxKind.ElseClause = 232;
    SyntaxKind._map[233] = "CatchClause";
    SyntaxKind.CatchClause = 233;
    SyntaxKind._map[234] = "FinallyClause";
    SyntaxKind.FinallyClause = 234;
    SyntaxKind._map[235] = "PropertySignature";
    SyntaxKind.PropertySignature = 235;
    SyntaxKind._map[236] = "CallSignature";
    SyntaxKind.CallSignature = 236;
    SyntaxKind._map[237] = "ConstructSignature";
    SyntaxKind.ConstructSignature = 237;
    SyntaxKind._map[238] = "IndexSignature";
    SyntaxKind.IndexSignature = 238;
    SyntaxKind._map[239] = "FunctionSignature";
    SyntaxKind.FunctionSignature = 239;
    SyntaxKind._map[240] = "Parameter";
    SyntaxKind.Parameter = 240;
    SyntaxKind._map[241] = "TypeAnnotation";
    SyntaxKind.TypeAnnotation = 241;
    SyntaxKind._map[242] = "SimplePropertyAssignment";
    SyntaxKind.SimplePropertyAssignment = 242;
    SyntaxKind._map[243] = "ExternalModuleReference";
    SyntaxKind.ExternalModuleReference = 243;
    SyntaxKind._map[244] = "ModuleNameModuleReference";
    SyntaxKind.ModuleNameModuleReference = 244;
    SyntaxKind._map[245] = "GetAccessorPropertyAssignment";
    SyntaxKind.GetAccessorPropertyAssignment = 245;
    SyntaxKind._map[246] = "SetAccessorPropertyAssignment";
    SyntaxKind.SetAccessorPropertyAssignment = 246;
    SyntaxKind.FirstStandardKeyword = SyntaxKind.BreakKeyword;
    SyntaxKind.LastStandardKeyword = SyntaxKind.WithKeyword;
    SyntaxKind.FirstFutureReservedKeyword = SyntaxKind.ClassKeyword;
    SyntaxKind.LastFutureReservedKeyword = SyntaxKind.SuperKeyword;
    SyntaxKind.FirstFutureReservedStrictKeyword = SyntaxKind.ImplementsKeyword;
    SyntaxKind.LastFutureReservedStrictKeyword = SyntaxKind.YieldKeyword;
    SyntaxKind.FirstTypeScriptKeyword = SyntaxKind.AnyKeyword;
    SyntaxKind.LastTypeScriptKeyword = SyntaxKind.StringKeyword;
    SyntaxKind.FirstKeyword = SyntaxKind.FirstStandardKeyword;
    SyntaxKind.LastKeyword = SyntaxKind.LastTypeScriptKeyword;
    SyntaxKind.FirstToken = SyntaxKind.IdentifierNameToken;
    SyntaxKind.LastToken = SyntaxKind.EndOfFileToken;
    SyntaxKind.FirstPunctuation = SyntaxKind.OpenBraceToken;
    SyntaxKind.LastPunctuation = SyntaxKind.SlashEqualsToken;
})(SyntaxKind || (SyntaxKind = {}));
var SyntaxFacts = (function () {
    function SyntaxFacts() { }
    SyntaxFacts.textToKeywordKind = {
        "any": 58 /* AnyKeyword */ ,
        "bool": 59 /* BoolKeyword */ ,
        "break": 13 /* BreakKeyword */ ,
        "case": 14 /* CaseKeyword */ ,
        "catch": 15 /* CatchKeyword */ ,
        "class": 42 /* ClassKeyword */ ,
        "continue": 16 /* ContinueKeyword */ ,
        "const": 43 /* ConstKeyword */ ,
        "constructor": 60 /* ConstructorKeyword */ ,
        "debugger": 17 /* DebuggerKeyword */ ,
        "declare": 61 /* DeclareKeyword */ ,
        "default": 18 /* DefaultKeyword */ ,
        "delete": 19 /* DeleteKeyword */ ,
        "do": 20 /* DoKeyword */ ,
        "else": 21 /* ElseKeyword */ ,
        "enum": 44 /* EnumKeyword */ ,
        "export": 45 /* ExportKeyword */ ,
        "extends": 46 /* ExtendsKeyword */ ,
        "false": 22 /* FalseKeyword */ ,
        "finally": 23 /* FinallyKeyword */ ,
        "for": 24 /* ForKeyword */ ,
        "function": 25 /* FunctionKeyword */ ,
        "get": 62 /* GetKeyword */ ,
        "if": 26 /* IfKeyword */ ,
        "implements": 49 /* ImplementsKeyword */ ,
        "import": 47 /* ImportKeyword */ ,
        "in": 27 /* InKeyword */ ,
        "instanceof": 28 /* InstanceOfKeyword */ ,
        "interface": 50 /* InterfaceKeyword */ ,
        "let": 51 /* LetKeyword */ ,
        "module": 63 /* ModuleKeyword */ ,
        "new": 29 /* NewKeyword */ ,
        "null": 30 /* NullKeyword */ ,
        "number": 64 /* NumberKeyword */ ,
        "package": 52 /* PackageKeyword */ ,
        "private": 53 /* PrivateKeyword */ ,
        "protected": 54 /* ProtectedKeyword */ ,
        "public": 55 /* PublicKeyword */ ,
        "return": 31 /* ReturnKeyword */ ,
        "set": 65 /* SetKeyword */ ,
        "static": 56 /* StaticKeyword */ ,
        "string": 66 /* StringKeyword */ ,
        "super": 48 /* SuperKeyword */ ,
        "switch": 32 /* SwitchKeyword */ ,
        "this": 33 /* ThisKeyword */ ,
        "throw": 34 /* ThrowKeyword */ ,
        "true": 35 /* TrueKeyword */ ,
        "try": 36 /* TryKeyword */ ,
        "typeof": 37 /* TypeOfKeyword */ ,
        "var": 38 /* VarKeyword */ ,
        "void": 39 /* VoidKeyword */ ,
        "while": 40 /* WhileKeyword */ ,
        "with": 41 /* WithKeyword */ ,
        "yield": 57 /* YieldKeyword */ ,
        "{": 67 /* OpenBraceToken */ ,
        "}": 68 /* CloseBraceToken */ ,
        "(": 69 /* OpenParenToken */ ,
        ")": 70 /* CloseParenToken */ ,
        "[": 71 /* OpenBracketToken */ ,
        "]": 72 /* CloseBracketToken */ ,
        ".": 73 /* DotToken */ ,
        "...": 74 /* DotDotDotToken */ ,
        ";": 75 /* SemicolonToken */ ,
        ",": 76 /* CommaToken */ ,
        "<": 77 /* LessThanToken */ ,
        ">": 78 /* GreaterThanToken */ ,
        "<=": 79 /* LessThanEqualsToken */ ,
        ">=": 80 /* GreaterThanEqualsToken */ ,
        "==": 81 /* EqualsEqualsToken */ ,
        "=>": 82 /* EqualsGreaterThanToken */ ,
        "!=": 83 /* ExclamationEqualsToken */ ,
        "===": 84 /* EqualsEqualsEqualsToken */ ,
        "!==": 85 /* ExclamationEqualsEqualsToken */ ,
        "+": 86 /* PlusToken */ ,
        "-": 87 /* MinusToken */ ,
        "*": 88 /* AsteriskToken */ ,
        "%": 89 /* PercentToken */ ,
        "++": 90 /* PlusPlusToken */ ,
        "--": 91 /* MinusMinusToken */ ,
        "<<": 92 /* LessThanLessThanToken */ ,
        ">>": 93 /* GreaterThanGreaterThanToken */ ,
        ">>>": 94 /* GreaterThanGreaterThanGreaterThanToken */ ,
        "&": 95 /* AmpersandToken */ ,
        "|": 96 /* BarToken */ ,
        "^": 97 /* CaretToken */ ,
        "!": 98 /* ExclamationToken */ ,
        "~": 99 /* TildeToken */ ,
        "&&": 100 /* AmpersandAmpersandToken */ ,
        "||": 101 /* BarBarToken */ ,
        "?": 102 /* QuestionToken */ ,
        ":": 103 /* ColonToken */ ,
        "=": 104 /* EqualsToken */ ,
        "+=": 105 /* PlusEqualsToken */ ,
        "-=": 106 /* MinusEqualsToken */ ,
        "*=": 107 /* AsteriskEqualsToken */ ,
        "%=": 108 /* PercentEqualsToken */ ,
        "<<=": 109 /* LessThanLessThanEqualsToken */ ,
        ">>=": 110 /* GreaterThanGreaterThanEqualsToken */ ,
        ">>>=": 111 /* GreaterThanGreaterThanGreaterThanEqualsToken */ ,
        "&=": 112 /* AmpersandEqualsToken */ ,
        "|=": 113 /* BarEqualsToken */ ,
        "^=": 114 /* CaretEqualsToken */ ,
        "/": 115 /* SlashToken */ ,
        "/=": 116 /* SlashEqualsToken */ 
    };
    SyntaxFacts.kindToText = [];
    SyntaxFacts.initializeStaticData = function initializeStaticData() {
        if(SyntaxFacts.kindToText.length === 0) {
            for(var name in SyntaxFacts.textToKeywordKind) {
                if(SyntaxFacts.textToKeywordKind.hasOwnProperty(name)) {
                    Debug.assert(SyntaxFacts.kindToText[SyntaxFacts.textToKeywordKind[name]] === undefined);
                    SyntaxFacts.kindToText[SyntaxFacts.textToKeywordKind[name]] = name;
                }
            }
            SyntaxFacts.kindToText[60 /* ConstructorKeyword */ ] = "constructor";
        }
    }
    SyntaxFacts.getTokenKind = function getTokenKind(text) {
        if(SyntaxFacts.textToKeywordKind.hasOwnProperty(text)) {
            return SyntaxFacts.textToKeywordKind[text];
        }
        return 0 /* None */ ;
    }
    SyntaxFacts.getText = function getText(kind) {
        SyntaxFacts.initializeStaticData();
        var result = SyntaxFacts.kindToText[kind];
        return result !== undefined ? result : null;
    }
    SyntaxFacts.isTokenKind = function isTokenKind(kind) {
        return kind >= SyntaxKind.FirstToken && kind <= SyntaxKind.LastToken;
    }
    SyntaxFacts.isAnyKeyword = function isAnyKeyword(kind) {
        return kind >= SyntaxKind.FirstKeyword && kind <= SyntaxKind.LastKeyword;
    }
    SyntaxFacts.isStandardKeyword = function isStandardKeyword(kind) {
        return kind >= SyntaxKind.FirstStandardKeyword && kind <= SyntaxKind.LastStandardKeyword;
    }
    SyntaxFacts.isFutureReservedKeyword = function isFutureReservedKeyword(kind) {
        return kind >= SyntaxKind.FirstFutureReservedKeyword && kind <= SyntaxKind.LastFutureReservedKeyword;
    }
    SyntaxFacts.isFutureReservedStrictKeyword = function isFutureReservedStrictKeyword(kind) {
        return kind >= SyntaxKind.FirstFutureReservedStrictKeyword && kind <= SyntaxKind.LastFutureReservedStrictKeyword;
    }
    SyntaxFacts.isAnyPunctuation = function isAnyPunctuation(kind) {
        return kind >= SyntaxKind.FirstPunctuation && kind <= SyntaxKind.LastPunctuation;
    }
    SyntaxFacts.isPrefixUnaryExpressionOperatorToken = function isPrefixUnaryExpressionOperatorToken(tokenKind) {
        return SyntaxFacts.getPrefixUnaryExpression(tokenKind) !== 0 /* None */ ;
    }
    SyntaxFacts.getPrefixUnaryExpression = function getPrefixUnaryExpression(tokenKind) {
        switch(tokenKind) {
            case 86 /* PlusToken */ : {
                return 156 /* PlusExpression */ ;

            }
            case 87 /* MinusToken */ : {
                return 157 /* NegateExpression */ ;

            }
            case 99 /* TildeToken */ : {
                return 158 /* BitwiseNotExpression */ ;

            }
            case 98 /* ExclamationToken */ : {
                return 159 /* LogicalNotExpression */ ;

            }
            case 90 /* PlusPlusToken */ : {
                return 160 /* PreIncrementExpression */ ;

            }
            case 91 /* MinusMinusToken */ : {
                return 161 /* PreDecrementExpression */ ;

            }
            case 19 /* DeleteKeyword */ : {
                return 162 /* DeleteExpression */ ;

            }
            case 37 /* TypeOfKeyword */ : {
                return 163 /* TypeOfExpression */ ;

            }
            case 39 /* VoidKeyword */ : {
                return 164 /* VoidExpression */ ;

            }
            default: {
                return 0 /* None */ ;

            }
        }
    }
    SyntaxFacts.getPostfixUnaryExpressionFromOperatorToken = function getPostfixUnaryExpressionFromOperatorToken(tokenKind) {
        switch(tokenKind) {
            case 90 /* PlusPlusToken */ : {
                return 207 /* PostIncrementExpression */ ;

            }
            case 91 /* MinusMinusToken */ : {
                return 208 /* PostDecrementExpression */ ;

            }
            default: {
                return 0 /* None */ ;

            }
        }
    }
    SyntaxFacts.isBinaryExpressionOperatorToken = function isBinaryExpressionOperatorToken(tokenKind) {
        return SyntaxFacts.getBinaryExpressionFromOperatorToken(tokenKind) !== 0 /* None */ ;
    }
    SyntaxFacts.getBinaryExpressionFromOperatorToken = function getBinaryExpressionFromOperatorToken(tokenKind) {
        switch(tokenKind) {
            case 88 /* AsteriskToken */ : {
                return 202 /* MultiplyExpression */ ;

            }
            case 115 /* SlashToken */ : {
                return 203 /* DivideExpression */ ;

            }
            case 89 /* PercentToken */ : {
                return 204 /* ModuloExpression */ ;

            }
            case 86 /* PlusToken */ : {
                return 205 /* AddExpression */ ;

            }
            case 87 /* MinusToken */ : {
                return 206 /* SubtractExpression */ ;

            }
            case 92 /* LessThanLessThanToken */ : {
                return 199 /* LeftShiftExpression */ ;

            }
            case 93 /* GreaterThanGreaterThanToken */ : {
                return 200 /* SignedRightShiftExpression */ ;

            }
            case 94 /* GreaterThanGreaterThanGreaterThanToken */ : {
                return 201 /* UnsignedRightShiftExpression */ ;

            }
            case 77 /* LessThanToken */ : {
                return 193 /* LessThanExpression */ ;

            }
            case 78 /* GreaterThanToken */ : {
                return 194 /* GreaterThanExpression */ ;

            }
            case 79 /* LessThanEqualsToken */ : {
                return 195 /* LessThanOrEqualExpression */ ;

            }
            case 80 /* GreaterThanEqualsToken */ : {
                return 196 /* GreaterThanOrEqualExpression */ ;

            }
            case 28 /* InstanceOfKeyword */ : {
                return 197 /* InstanceOfExpression */ ;

            }
            case 27 /* InKeyword */ : {
                return 198 /* InExpression */ ;

            }
            case 81 /* EqualsEqualsToken */ : {
                return 189 /* EqualsWithTypeConversionExpression */ ;

            }
            case 83 /* ExclamationEqualsToken */ : {
                return 190 /* NotEqualsWithTypeConversionExpression */ ;

            }
            case 84 /* EqualsEqualsEqualsToken */ : {
                return 191 /* EqualsExpression */ ;

            }
            case 85 /* ExclamationEqualsEqualsToken */ : {
                return 192 /* NotEqualsExpression */ ;

            }
            case 95 /* AmpersandToken */ : {
                return 188 /* BitwiseAndExpression */ ;

            }
            case 97 /* CaretToken */ : {
                return 187 /* BitwiseExclusiveOrExpression */ ;

            }
            case 96 /* BarToken */ : {
                return 186 /* BitwiseOrExpression */ ;

            }
            case 100 /* AmpersandAmpersandToken */ : {
                return 185 /* LogicalAndExpression */ ;

            }
            case 101 /* BarBarToken */ : {
                return 184 /* LogicalOrExpression */ ;

            }
            case 113 /* BarEqualsToken */ : {
                return 179 /* OrAssignmentExpression */ ;

            }
            case 112 /* AmpersandEqualsToken */ : {
                return 177 /* AndAssignmentExpression */ ;

            }
            case 114 /* CaretEqualsToken */ : {
                return 178 /* ExclusiveOrAssignmentExpression */ ;

            }
            case 109 /* LessThanLessThanEqualsToken */ : {
                return 180 /* LeftShiftAssignmentExpression */ ;

            }
            case 110 /* GreaterThanGreaterThanEqualsToken */ : {
                return 181 /* SignedRightShiftAssignmentExpression */ ;

            }
            case 111 /* GreaterThanGreaterThanGreaterThanEqualsToken */ : {
                return 182 /* UnsignedRightShiftAssignmentExpression */ ;

            }
            case 105 /* PlusEqualsToken */ : {
                return 172 /* AddAssignmentExpression */ ;

            }
            case 106 /* MinusEqualsToken */ : {
                return 173 /* SubtractAssignmentExpression */ ;

            }
            case 107 /* AsteriskEqualsToken */ : {
                return 174 /* MultiplyAssignmentExpression */ ;

            }
            case 116 /* SlashEqualsToken */ : {
                return 175 /* DivideAssignmentExpression */ ;

            }
            case 108 /* PercentEqualsToken */ : {
                return 176 /* ModuloAssignmentExpression */ ;

            }
            case 104 /* EqualsToken */ : {
                return 171 /* AssignmentExpression */ ;

            }
            case 76 /* CommaToken */ : {
                return 170 /* CommaExpression */ ;

            }
            default: {
                return 0 /* None */ ;

            }
        }
    }
    return SyntaxFacts;
})();
var SyntaxNode = (function () {
    function SyntaxNode() { }
    SyntaxNode.prototype.isToken = function () {
        return false;
    };
    SyntaxNode.prototype.isNode = function () {
        return true;
    };
    SyntaxNode.prototype.isList = function () {
        return false;
    };
    SyntaxNode.prototype.isSeparatedList = function () {
        return false;
    };
    SyntaxNode.prototype.isTrivia = function () {
        return false;
    };
    SyntaxNode.prototype.isTriviaList = function () {
        return false;
    };
    SyntaxNode.prototype.kind = function () {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.isMissing = function () {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.firstToken = function () {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.lastToken = function () {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.leadingTrivia = function () {
        return this.firstToken().leadingTrivia();
    };
    SyntaxNode.prototype.trailingTrivia = function () {
        return this.lastToken().trailingTrivia();
    };
    SyntaxNode.prototype.toJSON = function (key) {
        var result = {
            kind: (SyntaxKind)._map[this.kind()]
        };
        for(var name in this) {
            var value = this[name];
            if(value && typeof value === 'object') {
                result[name] = value;
            }
        }
        return result;
    };
    SyntaxNode.prototype.accept = function (visitor) {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.accept1 = function (visitor) {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.realize = function () {
        return this.accept1(new SyntaxRealizer());
    };
    SyntaxNode.prototype.collectTextElements = function (elements) {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.fullText = function () {
        var elements = [];
        this.collectTextElements(elements);
        return elements.join("");
    };
    SyntaxNode.prototype.fullWidth = function () {
        throw Errors.abstract();
    };
    SyntaxNode.prototype.clone = function () {
        return this.accept1(new SyntaxNodeCloner());
    };
    SyntaxNode.prototype.replaceToken = function (token1, token2) {
        return this.accept1(new SyntaxTokenReplacer(token1, token2));
    };
    SyntaxNode.prototype.withLeadingTrivia = function (trivia) {
        return this.replaceToken(this.firstToken(), this.firstToken().withLeadingTrivia(trivia));
    };
    SyntaxNode.prototype.withTrailingTrivia = function (trivia) {
        return this.replaceToken(this.lastToken(), this.lastToken().withTrailingTrivia(trivia));
    };
    SyntaxNode.prototype.hasTrailingTrivia = function () {
        return this.lastToken().hasTrailingTrivia();
    };
    return SyntaxNode;
})();
var SyntaxList;
(function (SyntaxList) {
    function collectTextElements(elements, list) {
        for(var i = 0, n = list.count(); i < n; i++) {
            list.syntaxNodeAt(i).collectTextElements(elements);
        }
    }
    var EmptySyntaxList = (function () {
        function EmptySyntaxList() { }
        EmptySyntaxList.prototype.isToken = function () {
            return false;
        };
        EmptySyntaxList.prototype.isNode = function () {
            return false;
        };
        EmptySyntaxList.prototype.isList = function () {
            return true;
        };
        EmptySyntaxList.prototype.isSeparatedList = function () {
            return false;
        };
        EmptySyntaxList.prototype.isTrivia = function () {
            return false;
        };
        EmptySyntaxList.prototype.isTriviaList = function () {
            return false;
        };
        EmptySyntaxList.prototype.kind = function () {
            return 1 /* List */ ;
        };
        EmptySyntaxList.prototype.toJSON = function (key) {
            return [];
        };
        EmptySyntaxList.prototype.count = function () {
            return 0;
        };
        EmptySyntaxList.prototype.isMissing = function () {
            return true;
        };
        EmptySyntaxList.prototype.syntaxNodeAt = function (index) {
            throw Errors.argumentOutOfRange("index");
        };
        EmptySyntaxList.prototype.collectTextElements = function (elements) {
            return collectTextElements(elements, this);
        };
        EmptySyntaxList.prototype.toArray = function () {
            return [];
        };
        EmptySyntaxList.prototype.firstToken = function () {
            return null;
        };
        EmptySyntaxList.prototype.lastToken = function () {
            return null;
        };
        EmptySyntaxList.prototype.fullWidth = function () {
            return 0;
        };
        EmptySyntaxList.prototype.fullText = function () {
            return "";
        };
        return EmptySyntaxList;
    })();    
    SyntaxList.empty = new EmptySyntaxList();
    var SingletonSyntaxList = (function () {
        function SingletonSyntaxList(item) {
            this._item = item;
        }
        SingletonSyntaxList.prototype.isToken = function () {
            return false;
        };
        SingletonSyntaxList.prototype.isNode = function () {
            return false;
        };
        SingletonSyntaxList.prototype.isList = function () {
            return true;
        };
        SingletonSyntaxList.prototype.isSeparatedList = function () {
            return false;
        };
        SingletonSyntaxList.prototype.isTrivia = function () {
            return false;
        };
        SingletonSyntaxList.prototype.isTriviaList = function () {
            return false;
        };
        SingletonSyntaxList.prototype.kind = function () {
            return 1 /* List */ ;
        };
        SingletonSyntaxList.prototype.isMissing = function () {
            return this._item.isMissing();
        };
        SingletonSyntaxList.prototype.toJSON = function (key) {
            return [
                this._item
            ];
        };
        SingletonSyntaxList.prototype.count = function () {
            return 1;
        };
        SingletonSyntaxList.prototype.syntaxNodeAt = function (index) {
            if(index !== 0) {
                throw Errors.argumentOutOfRange("index");
            }
            return this._item;
        };
        SingletonSyntaxList.prototype.collectTextElements = function (elements) {
            return collectTextElements(elements, this);
        };
        SingletonSyntaxList.prototype.toArray = function () {
            return [
                this._item
            ];
        };
        SingletonSyntaxList.prototype.firstToken = function () {
            return this._item.firstToken();
        };
        SingletonSyntaxList.prototype.lastToken = function () {
            return this._item.lastToken();
        };
        SingletonSyntaxList.prototype.fullWidth = function () {
            return this._item.fullWidth();
        };
        SingletonSyntaxList.prototype.fullText = function () {
            return this._item.fullText();
        };
        return SingletonSyntaxList;
    })();    
    var NormalSyntaxList = (function () {
        function NormalSyntaxList(nodes) {
            this.nodes = nodes;
        }
        NormalSyntaxList.prototype.isToken = function () {
            return false;
        };
        NormalSyntaxList.prototype.isNode = function () {
            return false;
        };
        NormalSyntaxList.prototype.isList = function () {
            return true;
        };
        NormalSyntaxList.prototype.isSeparatedList = function () {
            return false;
        };
        NormalSyntaxList.prototype.isTrivia = function () {
            return false;
        };
        NormalSyntaxList.prototype.isTriviaList = function () {
            return false;
        };
        NormalSyntaxList.prototype.kind = function () {
            return 1 /* List */ ;
        };
        NormalSyntaxList.prototype.isMissing = function () {
            for(var i = 0, n = this.nodes.length; i < n; i++) {
                if(!this.nodes[i].isMissing()) {
                    return false;
                }
            }
            return true;
        };
        NormalSyntaxList.prototype.toJSON = function (key) {
            return this.nodes;
        };
        NormalSyntaxList.prototype.count = function () {
            return this.nodes.length;
        };
        NormalSyntaxList.prototype.syntaxNodeAt = function (index) {
            if(index < 0 || index >= this.nodes.length) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.nodes[index];
        };
        NormalSyntaxList.prototype.collectTextElements = function (elements) {
            return collectTextElements(elements, this);
        };
        NormalSyntaxList.prototype.toArray = function () {
            return this.nodes.slice(0);
        };
        NormalSyntaxList.prototype.firstToken = function () {
            for(var i = 0, n = this.nodes.length; i < n; i++) {
                var token = this.nodes[i].firstToken();
                if(token !== null) {
                    return token;
                }
            }
            return null;
        };
        NormalSyntaxList.prototype.lastToken = function () {
            for(var i = this.nodes.length - 1; i >= 0; i--) {
                var token = this.nodes[i].lastToken();
                if(token !== null) {
                    return token;
                }
            }
            return null;
        };
        NormalSyntaxList.prototype.fullText = function () {
            var elements = [];
            this.collectTextElements(elements);
            return elements.join("");
        };
        NormalSyntaxList.prototype.fullWidth = function () {
            var width = 0;
            for(var i = 0, n = this.nodes.length; i < n; i++) {
                width += this.nodes[i].fullWidth();
            }
            return width;
        };
        return NormalSyntaxList;
    })();    
    function create(nodes) {
        if(nodes === undefined || nodes === null || nodes.length === 0) {
            return SyntaxList.empty;
        }
        if(nodes.length === 1) {
            var item = nodes[0];
            return new SingletonSyntaxList(item);
        }
        return new NormalSyntaxList(nodes);
    }
    SyntaxList.create = create;
})(SyntaxList || (SyntaxList = {}));
var SourceUnitSyntax = (function (_super) {
    __extends(SourceUnitSyntax, _super);
    function SourceUnitSyntax(moduleElements, endOfFileToken) {
        _super.call(this);
        if(moduleElements === null) {
            throw Errors.argumentNull('moduleElements');
        }
        if(endOfFileToken.kind() !== 118 /* EndOfFileToken */ ) {
            throw Errors.argument('endOfFileToken');
        }
        this._moduleElements = moduleElements;
        this._endOfFileToken = endOfFileToken;
    }
    SourceUnitSyntax.create = function create(endOfFileToken) {
        return new SourceUnitSyntax(SyntaxList.empty, endOfFileToken);
    }
    SourceUnitSyntax.prototype.accept = function (visitor) {
        visitor.visitSourceUnit(this);
    };
    SourceUnitSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitSourceUnit(this);
    };
    SourceUnitSyntax.prototype.kind = function () {
        return 119 /* SourceUnit */ ;
    };
    SourceUnitSyntax.prototype.isMissing = function () {
        if(!this._moduleElements.isMissing()) {
            return false;
        }
        if(!this._endOfFileToken.isMissing()) {
            return false;
        }
        return true;
    };
    SourceUnitSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._moduleElements.firstToken()) !== null) {
            return token;
        }
        return this._endOfFileToken;
    };
    SourceUnitSyntax.prototype.lastToken = function () {
        return this._endOfFileToken;
    };
    SourceUnitSyntax.prototype.moduleElements = function () {
        return this._moduleElements;
    };
    SourceUnitSyntax.prototype.endOfFileToken = function () {
        return this._endOfFileToken;
    };
    SourceUnitSyntax.prototype.update = function (moduleElements, endOfFileToken) {
        if(this._moduleElements === moduleElements && this._endOfFileToken === endOfFileToken) {
            return this;
        }
        return new SourceUnitSyntax(moduleElements, endOfFileToken);
    };
    SourceUnitSyntax.prototype.withModuleElements = function (moduleElements) {
        return this.update(moduleElements, this._endOfFileToken);
    };
    SourceUnitSyntax.prototype.withEndOfFileToken = function (endOfFileToken) {
        return this.update(this._moduleElements, endOfFileToken);
    };
    SourceUnitSyntax.prototype.collectTextElements = function (elements) {
        this._moduleElements.collectTextElements(elements);
        this._endOfFileToken.collectTextElements(elements);
    };
    return SourceUnitSyntax;
})(SyntaxNode);
var ModuleElementSyntax = (function (_super) {
    __extends(ModuleElementSyntax, _super);
    function ModuleElementSyntax() {
        _super.call(this);
    }
    return ModuleElementSyntax;
})(SyntaxNode);
var ModuleReferenceSyntax = (function (_super) {
    __extends(ModuleReferenceSyntax, _super);
    function ModuleReferenceSyntax() {
        _super.call(this);
    }
    return ModuleReferenceSyntax;
})(SyntaxNode);
var ExternalModuleReferenceSyntax = (function (_super) {
    __extends(ExternalModuleReferenceSyntax, _super);
    function ExternalModuleReferenceSyntax(moduleKeyword, openParenToken, stringLiteral, closeParenToken) {
        _super.call(this);
        if(moduleKeyword.keywordKind() !== 63 /* ModuleKeyword */ ) {
            throw Errors.argument('moduleKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(stringLiteral.kind() !== 12 /* StringLiteral */ ) {
            throw Errors.argument('stringLiteral');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._moduleKeyword = moduleKeyword;
        this._openParenToken = openParenToken;
        this._stringLiteral = stringLiteral;
        this._closeParenToken = closeParenToken;
    }
    ExternalModuleReferenceSyntax.prototype.accept = function (visitor) {
        visitor.visitExternalModuleReference(this);
    };
    ExternalModuleReferenceSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitExternalModuleReference(this);
    };
    ExternalModuleReferenceSyntax.prototype.kind = function () {
        return 243 /* ExternalModuleReference */ ;
    };
    ExternalModuleReferenceSyntax.prototype.isMissing = function () {
        if(!this._moduleKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._stringLiteral.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        return true;
    };
    ExternalModuleReferenceSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._moduleKeyword.width() > 0) {
            return this._moduleKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._stringLiteral.width() > 0) {
            return this._stringLiteral;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        return null;
    };
    ExternalModuleReferenceSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._stringLiteral.width() > 0) {
            return this._stringLiteral;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._moduleKeyword.width() > 0) {
            return this._moduleKeyword;
        }
        return null;
    };
    ExternalModuleReferenceSyntax.prototype.moduleKeyword = function () {
        return this._moduleKeyword;
    };
    ExternalModuleReferenceSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    ExternalModuleReferenceSyntax.prototype.stringLiteral = function () {
        return this._stringLiteral;
    };
    ExternalModuleReferenceSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    ExternalModuleReferenceSyntax.prototype.update = function (moduleKeyword, openParenToken, stringLiteral, closeParenToken) {
        if(this._moduleKeyword === moduleKeyword && this._openParenToken === openParenToken && this._stringLiteral === stringLiteral && this._closeParenToken === closeParenToken) {
            return this;
        }
        return new ExternalModuleReferenceSyntax(moduleKeyword, openParenToken, stringLiteral, closeParenToken);
    };
    ExternalModuleReferenceSyntax.prototype.withModuleKeyword = function (moduleKeyword) {
        return this.update(moduleKeyword, this._openParenToken, this._stringLiteral, this._closeParenToken);
    };
    ExternalModuleReferenceSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._moduleKeyword, openParenToken, this._stringLiteral, this._closeParenToken);
    };
    ExternalModuleReferenceSyntax.prototype.withStringLiteral = function (stringLiteral) {
        return this.update(this._moduleKeyword, this._openParenToken, stringLiteral, this._closeParenToken);
    };
    ExternalModuleReferenceSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._moduleKeyword, this._openParenToken, this._stringLiteral, closeParenToken);
    };
    ExternalModuleReferenceSyntax.prototype.collectTextElements = function (elements) {
        this._moduleKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._stringLiteral.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
    };
    return ExternalModuleReferenceSyntax;
})(ModuleReferenceSyntax);
var ModuleNameModuleReferenceSyntax = (function (_super) {
    __extends(ModuleNameModuleReferenceSyntax, _super);
    function ModuleNameModuleReferenceSyntax(moduleName) {
        _super.call(this);
        if(moduleName === null) {
            throw Errors.argumentNull('moduleName');
        }
        this._moduleName = moduleName;
    }
    ModuleNameModuleReferenceSyntax.prototype.accept = function (visitor) {
        visitor.visitModuleNameModuleReference(this);
    };
    ModuleNameModuleReferenceSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitModuleNameModuleReference(this);
    };
    ModuleNameModuleReferenceSyntax.prototype.kind = function () {
        return 244 /* ModuleNameModuleReference */ ;
    };
    ModuleNameModuleReferenceSyntax.prototype.isMissing = function () {
        if(!this._moduleName.isMissing()) {
            return false;
        }
        return true;
    };
    ModuleNameModuleReferenceSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._moduleName.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ModuleNameModuleReferenceSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._moduleName.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    ModuleNameModuleReferenceSyntax.prototype.moduleName = function () {
        return this._moduleName;
    };
    ModuleNameModuleReferenceSyntax.prototype.update = function (moduleName) {
        if(this._moduleName === moduleName) {
            return this;
        }
        return new ModuleNameModuleReferenceSyntax(moduleName);
    };
    ModuleNameModuleReferenceSyntax.prototype.withModuleName = function (moduleName) {
        return this.update(moduleName);
    };
    ModuleNameModuleReferenceSyntax.prototype.collectTextElements = function (elements) {
        this._moduleName.collectTextElements(elements);
    };
    return ModuleNameModuleReferenceSyntax;
})(ModuleReferenceSyntax);
var ImportDeclarationSyntax = (function (_super) {
    __extends(ImportDeclarationSyntax, _super);
    function ImportDeclarationSyntax(importKeyword, identifier, equalsToken, moduleReference, semicolonToken) {
        _super.call(this);
        if(moduleReference === null) {
            throw Errors.argumentNull('moduleReference');
        }
        if(importKeyword.keywordKind() !== 47 /* ImportKeyword */ ) {
            throw Errors.argument('importKeyword');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(equalsToken.kind() !== 104 /* EqualsToken */ ) {
            throw Errors.argument('equalsToken');
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._importKeyword = importKeyword;
        this._identifier = identifier;
        this._equalsToken = equalsToken;
        this._moduleReference = moduleReference;
        this._semicolonToken = semicolonToken;
    }
    ImportDeclarationSyntax.prototype.accept = function (visitor) {
        visitor.visitImportDeclaration(this);
    };
    ImportDeclarationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitImportDeclaration(this);
    };
    ImportDeclarationSyntax.prototype.kind = function () {
        return 132 /* ImportDeclaration */ ;
    };
    ImportDeclarationSyntax.prototype.isMissing = function () {
        if(!this._importKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._equalsToken.isMissing()) {
            return false;
        }
        if(!this._moduleReference.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    ImportDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._importKeyword.width() > 0) {
            return this._importKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._equalsToken.width() > 0) {
            return this._equalsToken;
        }
        if((token = this._moduleReference.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    ImportDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if((token = this._moduleReference.lastToken()) !== null) {
            return token;
        }
        if(this._equalsToken.width() > 0) {
            return this._equalsToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._importKeyword.width() > 0) {
            return this._importKeyword;
        }
        return null;
    };
    ImportDeclarationSyntax.prototype.importKeyword = function () {
        return this._importKeyword;
    };
    ImportDeclarationSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    ImportDeclarationSyntax.prototype.equalsToken = function () {
        return this._equalsToken;
    };
    ImportDeclarationSyntax.prototype.moduleReference = function () {
        return this._moduleReference;
    };
    ImportDeclarationSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    ImportDeclarationSyntax.prototype.update = function (importKeyword, identifier, equalsToken, moduleReference, semicolonToken) {
        if(this._importKeyword === importKeyword && this._identifier === identifier && this._equalsToken === equalsToken && this._moduleReference === moduleReference && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new ImportDeclarationSyntax(importKeyword, identifier, equalsToken, moduleReference, semicolonToken);
    };
    ImportDeclarationSyntax.prototype.withImportKeyword = function (importKeyword) {
        return this.update(importKeyword, this._identifier, this._equalsToken, this._moduleReference, this._semicolonToken);
    };
    ImportDeclarationSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._importKeyword, identifier, this._equalsToken, this._moduleReference, this._semicolonToken);
    };
    ImportDeclarationSyntax.prototype.withEqualsToken = function (equalsToken) {
        return this.update(this._importKeyword, this._identifier, equalsToken, this._moduleReference, this._semicolonToken);
    };
    ImportDeclarationSyntax.prototype.withModuleReference = function (moduleReference) {
        return this.update(this._importKeyword, this._identifier, this._equalsToken, moduleReference, this._semicolonToken);
    };
    ImportDeclarationSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._importKeyword, this._identifier, this._equalsToken, this._moduleReference, semicolonToken);
    };
    ImportDeclarationSyntax.prototype.collectTextElements = function (elements) {
        this._importKeyword.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        this._equalsToken.collectTextElements(elements);
        this._moduleReference.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    return ImportDeclarationSyntax;
})(ModuleElementSyntax);
var ClassDeclarationSyntax = (function (_super) {
    __extends(ClassDeclarationSyntax, _super);
    function ClassDeclarationSyntax(exportKeyword, declareKeyword, classKeyword, identifier, extendsClause, implementsClause, openBraceToken, classElements, closeBraceToken) {
        _super.call(this);
        if(classElements === null) {
            throw Errors.argumentNull('classElements');
        }
        if(exportKeyword !== null) {
            if(exportKeyword.keywordKind() !== 45 /* ExportKeyword */ ) {
                throw Errors.argument('exportKeyword');
            }
        }
        if(declareKeyword !== null) {
            if(declareKeyword.keywordKind() !== 61 /* DeclareKeyword */ ) {
                throw Errors.argument('declareKeyword');
            }
        }
        if(classKeyword.keywordKind() !== 42 /* ClassKeyword */ ) {
            throw Errors.argument('classKeyword');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._exportKeyword = exportKeyword;
        this._declareKeyword = declareKeyword;
        this._classKeyword = classKeyword;
        this._identifier = identifier;
        this._extendsClause = extendsClause;
        this._implementsClause = implementsClause;
        this._openBraceToken = openBraceToken;
        this._classElements = classElements;
        this._closeBraceToken = closeBraceToken;
    }
    ClassDeclarationSyntax.create = function create(classKeyword, identifier, openBraceToken, closeBraceToken) {
        return new ClassDeclarationSyntax(null, null, classKeyword, identifier, null, null, openBraceToken, SyntaxList.empty, closeBraceToken);
    }
    ClassDeclarationSyntax.prototype.accept = function (visitor) {
        visitor.visitClassDeclaration(this);
    };
    ClassDeclarationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitClassDeclaration(this);
    };
    ClassDeclarationSyntax.prototype.kind = function () {
        return 130 /* ClassDeclaration */ ;
    };
    ClassDeclarationSyntax.prototype.isMissing = function () {
        if(this._exportKeyword !== null && !this._exportKeyword.isMissing()) {
            return false;
        }
        if(this._declareKeyword !== null && !this._declareKeyword.isMissing()) {
            return false;
        }
        if(!this._classKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(this._extendsClause !== null && !this._extendsClause.isMissing()) {
            return false;
        }
        if(this._implementsClause !== null && !this._implementsClause.isMissing()) {
            return false;
        }
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._classElements.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    ClassDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._classKeyword.width() > 0) {
            return this._classKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._extendsClause !== null && (token = this._extendsClause.firstToken()) !== null) {
            return token;
        }
        if(this._implementsClause !== null && (token = this._implementsClause.firstToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._classElements.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    ClassDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._classElements.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if(this._implementsClause !== null && (token = this._implementsClause.lastToken()) !== null) {
            return token;
        }
        if(this._extendsClause !== null && (token = this._extendsClause.lastToken()) !== null) {
            return token;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._classKeyword.width() > 0) {
            return this._classKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        return null;
    };
    ClassDeclarationSyntax.prototype.exportKeyword = function () {
        return this._exportKeyword;
    };
    ClassDeclarationSyntax.prototype.declareKeyword = function () {
        return this._declareKeyword;
    };
    ClassDeclarationSyntax.prototype.classKeyword = function () {
        return this._classKeyword;
    };
    ClassDeclarationSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    ClassDeclarationSyntax.prototype.extendsClause = function () {
        return this._extendsClause;
    };
    ClassDeclarationSyntax.prototype.implementsClause = function () {
        return this._implementsClause;
    };
    ClassDeclarationSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    ClassDeclarationSyntax.prototype.classElements = function () {
        return this._classElements;
    };
    ClassDeclarationSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    ClassDeclarationSyntax.prototype.update = function (exportKeyword, declareKeyword, classKeyword, identifier, extendsClause, implementsClause, openBraceToken, classElements, closeBraceToken) {
        if(this._exportKeyword === exportKeyword && this._declareKeyword === declareKeyword && this._classKeyword === classKeyword && this._identifier === identifier && this._extendsClause === extendsClause && this._implementsClause === implementsClause && this._openBraceToken === openBraceToken && this._classElements === classElements && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new ClassDeclarationSyntax(exportKeyword, declareKeyword, classKeyword, identifier, extendsClause, implementsClause, openBraceToken, classElements, closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withExportKeyword = function (exportKeyword) {
        return this.update(exportKeyword, this._declareKeyword, this._classKeyword, this._identifier, this._extendsClause, this._implementsClause, this._openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withDeclareKeyword = function (declareKeyword) {
        return this.update(this._exportKeyword, declareKeyword, this._classKeyword, this._identifier, this._extendsClause, this._implementsClause, this._openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withClassKeyword = function (classKeyword) {
        return this.update(this._exportKeyword, this._declareKeyword, classKeyword, this._identifier, this._extendsClause, this._implementsClause, this._openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._exportKeyword, this._declareKeyword, this._classKeyword, identifier, this._extendsClause, this._implementsClause, this._openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withExtendsClause = function (extendsClause) {
        return this.update(this._exportKeyword, this._declareKeyword, this._classKeyword, this._identifier, extendsClause, this._implementsClause, this._openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withImplementsClause = function (implementsClause) {
        return this.update(this._exportKeyword, this._declareKeyword, this._classKeyword, this._identifier, this._extendsClause, implementsClause, this._openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(this._exportKeyword, this._declareKeyword, this._classKeyword, this._identifier, this._extendsClause, this._implementsClause, openBraceToken, this._classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withClassElements = function (classElements) {
        return this.update(this._exportKeyword, this._declareKeyword, this._classKeyword, this._identifier, this._extendsClause, this._implementsClause, this._openBraceToken, classElements, this._closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._exportKeyword, this._declareKeyword, this._classKeyword, this._identifier, this._extendsClause, this._implementsClause, this._openBraceToken, this._classElements, closeBraceToken);
    };
    ClassDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._exportKeyword !== null) {
            this._exportKeyword.collectTextElements(elements);
        }
        if(this._declareKeyword !== null) {
            this._declareKeyword.collectTextElements(elements);
        }
        this._classKeyword.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        if(this._extendsClause !== null) {
            this._extendsClause.collectTextElements(elements);
        }
        if(this._implementsClause !== null) {
            this._implementsClause.collectTextElements(elements);
        }
        this._openBraceToken.collectTextElements(elements);
        this._classElements.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    return ClassDeclarationSyntax;
})(ModuleElementSyntax);
var InterfaceDeclarationSyntax = (function (_super) {
    __extends(InterfaceDeclarationSyntax, _super);
    function InterfaceDeclarationSyntax(exportKeyword, interfaceKeyword, identifier, extendsClause, body) {
        _super.call(this);
        if(body === null) {
            throw Errors.argumentNull('body');
        }
        if(exportKeyword !== null) {
            if(exportKeyword.keywordKind() !== 45 /* ExportKeyword */ ) {
                throw Errors.argument('exportKeyword');
            }
        }
        if(interfaceKeyword.keywordKind() !== 50 /* InterfaceKeyword */ ) {
            throw Errors.argument('interfaceKeyword');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        this._exportKeyword = exportKeyword;
        this._interfaceKeyword = interfaceKeyword;
        this._identifier = identifier;
        this._extendsClause = extendsClause;
        this._body = body;
    }
    InterfaceDeclarationSyntax.create = function create(interfaceKeyword, identifier, body) {
        return new InterfaceDeclarationSyntax(null, interfaceKeyword, identifier, null, body);
    }
    InterfaceDeclarationSyntax.prototype.accept = function (visitor) {
        visitor.visitInterfaceDeclaration(this);
    };
    InterfaceDeclarationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitInterfaceDeclaration(this);
    };
    InterfaceDeclarationSyntax.prototype.kind = function () {
        return 127 /* InterfaceDeclaration */ ;
    };
    InterfaceDeclarationSyntax.prototype.isMissing = function () {
        if(this._exportKeyword !== null && !this._exportKeyword.isMissing()) {
            return false;
        }
        if(!this._interfaceKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(this._extendsClause !== null && !this._extendsClause.isMissing()) {
            return false;
        }
        if(!this._body.isMissing()) {
            return false;
        }
        return true;
    };
    InterfaceDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        if(this._interfaceKeyword.width() > 0) {
            return this._interfaceKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._extendsClause !== null && (token = this._extendsClause.firstToken()) !== null) {
            return token;
        }
        if((token = this._body.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    InterfaceDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._body.lastToken()) !== null) {
            return token;
        }
        if(this._extendsClause !== null && (token = this._extendsClause.lastToken()) !== null) {
            return token;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._interfaceKeyword.width() > 0) {
            return this._interfaceKeyword;
        }
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        return null;
    };
    InterfaceDeclarationSyntax.prototype.exportKeyword = function () {
        return this._exportKeyword;
    };
    InterfaceDeclarationSyntax.prototype.interfaceKeyword = function () {
        return this._interfaceKeyword;
    };
    InterfaceDeclarationSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    InterfaceDeclarationSyntax.prototype.extendsClause = function () {
        return this._extendsClause;
    };
    InterfaceDeclarationSyntax.prototype.body = function () {
        return this._body;
    };
    InterfaceDeclarationSyntax.prototype.update = function (exportKeyword, interfaceKeyword, identifier, extendsClause, body) {
        if(this._exportKeyword === exportKeyword && this._interfaceKeyword === interfaceKeyword && this._identifier === identifier && this._extendsClause === extendsClause && this._body === body) {
            return this;
        }
        return new InterfaceDeclarationSyntax(exportKeyword, interfaceKeyword, identifier, extendsClause, body);
    };
    InterfaceDeclarationSyntax.prototype.withExportKeyword = function (exportKeyword) {
        return this.update(exportKeyword, this._interfaceKeyword, this._identifier, this._extendsClause, this._body);
    };
    InterfaceDeclarationSyntax.prototype.withInterfaceKeyword = function (interfaceKeyword) {
        return this.update(this._exportKeyword, interfaceKeyword, this._identifier, this._extendsClause, this._body);
    };
    InterfaceDeclarationSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._exportKeyword, this._interfaceKeyword, identifier, this._extendsClause, this._body);
    };
    InterfaceDeclarationSyntax.prototype.withExtendsClause = function (extendsClause) {
        return this.update(this._exportKeyword, this._interfaceKeyword, this._identifier, extendsClause, this._body);
    };
    InterfaceDeclarationSyntax.prototype.withBody = function (body) {
        return this.update(this._exportKeyword, this._interfaceKeyword, this._identifier, this._extendsClause, body);
    };
    InterfaceDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._exportKeyword !== null) {
            this._exportKeyword.collectTextElements(elements);
        }
        this._interfaceKeyword.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        if(this._extendsClause !== null) {
            this._extendsClause.collectTextElements(elements);
        }
        this._body.collectTextElements(elements);
    };
    return InterfaceDeclarationSyntax;
})(ModuleElementSyntax);
var ExtendsClauseSyntax = (function (_super) {
    __extends(ExtendsClauseSyntax, _super);
    function ExtendsClauseSyntax(extendsKeyword, typeNames) {
        _super.call(this);
        if(typeNames === null) {
            throw Errors.argumentNull('typeNames');
        }
        if(extendsKeyword.keywordKind() !== 46 /* ExtendsKeyword */ ) {
            throw Errors.argument('extendsKeyword');
        }
        this._extendsKeyword = extendsKeyword;
        this._typeNames = typeNames;
    }
    ExtendsClauseSyntax.create = function create(extendsKeyword) {
        return new ExtendsClauseSyntax(extendsKeyword, SeparatedSyntaxList.empty);
    }
    ExtendsClauseSyntax.prototype.accept = function (visitor) {
        visitor.visitExtendsClause(this);
    };
    ExtendsClauseSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitExtendsClause(this);
    };
    ExtendsClauseSyntax.prototype.kind = function () {
        return 228 /* ExtendsClause */ ;
    };
    ExtendsClauseSyntax.prototype.isMissing = function () {
        if(!this._extendsKeyword.isMissing()) {
            return false;
        }
        if(!this._typeNames.isMissing()) {
            return false;
        }
        return true;
    };
    ExtendsClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._extendsKeyword.width() > 0) {
            return this._extendsKeyword;
        }
        if((token = this._typeNames.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ExtendsClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._typeNames.lastToken()) !== null) {
            return token;
        }
        if(this._extendsKeyword.width() > 0) {
            return this._extendsKeyword;
        }
        return null;
    };
    ExtendsClauseSyntax.prototype.extendsKeyword = function () {
        return this._extendsKeyword;
    };
    ExtendsClauseSyntax.prototype.typeNames = function () {
        return this._typeNames;
    };
    ExtendsClauseSyntax.prototype.update = function (extendsKeyword, typeNames) {
        if(this._extendsKeyword === extendsKeyword && this._typeNames === typeNames) {
            return this;
        }
        return new ExtendsClauseSyntax(extendsKeyword, typeNames);
    };
    ExtendsClauseSyntax.prototype.withExtendsKeyword = function (extendsKeyword) {
        return this.update(extendsKeyword, this._typeNames);
    };
    ExtendsClauseSyntax.prototype.withTypeNames = function (typeNames) {
        return this.update(this._extendsKeyword, typeNames);
    };
    ExtendsClauseSyntax.prototype.collectTextElements = function (elements) {
        this._extendsKeyword.collectTextElements(elements);
        this._typeNames.collectTextElements(elements);
    };
    return ExtendsClauseSyntax;
})(SyntaxNode);
var ImplementsClauseSyntax = (function (_super) {
    __extends(ImplementsClauseSyntax, _super);
    function ImplementsClauseSyntax(implementsKeyword, typeNames) {
        _super.call(this);
        if(typeNames === null) {
            throw Errors.argumentNull('typeNames');
        }
        if(implementsKeyword.keywordKind() !== 49 /* ImplementsKeyword */ ) {
            throw Errors.argument('implementsKeyword');
        }
        this._implementsKeyword = implementsKeyword;
        this._typeNames = typeNames;
    }
    ImplementsClauseSyntax.create = function create(implementsKeyword) {
        return new ImplementsClauseSyntax(implementsKeyword, SeparatedSyntaxList.empty);
    }
    ImplementsClauseSyntax.prototype.accept = function (visitor) {
        visitor.visitImplementsClause(this);
    };
    ImplementsClauseSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitImplementsClause(this);
    };
    ImplementsClauseSyntax.prototype.kind = function () {
        return 227 /* ImplementsClause */ ;
    };
    ImplementsClauseSyntax.prototype.isMissing = function () {
        if(!this._implementsKeyword.isMissing()) {
            return false;
        }
        if(!this._typeNames.isMissing()) {
            return false;
        }
        return true;
    };
    ImplementsClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._implementsKeyword.width() > 0) {
            return this._implementsKeyword;
        }
        if((token = this._typeNames.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ImplementsClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._typeNames.lastToken()) !== null) {
            return token;
        }
        if(this._implementsKeyword.width() > 0) {
            return this._implementsKeyword;
        }
        return null;
    };
    ImplementsClauseSyntax.prototype.implementsKeyword = function () {
        return this._implementsKeyword;
    };
    ImplementsClauseSyntax.prototype.typeNames = function () {
        return this._typeNames;
    };
    ImplementsClauseSyntax.prototype.update = function (implementsKeyword, typeNames) {
        if(this._implementsKeyword === implementsKeyword && this._typeNames === typeNames) {
            return this;
        }
        return new ImplementsClauseSyntax(implementsKeyword, typeNames);
    };
    ImplementsClauseSyntax.prototype.withImplementsKeyword = function (implementsKeyword) {
        return this.update(implementsKeyword, this._typeNames);
    };
    ImplementsClauseSyntax.prototype.withTypeNames = function (typeNames) {
        return this.update(this._implementsKeyword, typeNames);
    };
    ImplementsClauseSyntax.prototype.collectTextElements = function (elements) {
        this._implementsKeyword.collectTextElements(elements);
        this._typeNames.collectTextElements(elements);
    };
    return ImplementsClauseSyntax;
})(SyntaxNode);
var ModuleDeclarationSyntax = (function (_super) {
    __extends(ModuleDeclarationSyntax, _super);
    function ModuleDeclarationSyntax(exportKeyword, declareKeyword, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken) {
        _super.call(this);
        if(moduleElements === null) {
            throw Errors.argumentNull('moduleElements');
        }
        if(exportKeyword !== null) {
            if(exportKeyword.keywordKind() !== 45 /* ExportKeyword */ ) {
                throw Errors.argument('exportKeyword');
            }
        }
        if(declareKeyword !== null) {
            if(declareKeyword.keywordKind() !== 61 /* DeclareKeyword */ ) {
                throw Errors.argument('declareKeyword');
            }
        }
        if(moduleKeyword.keywordKind() !== 63 /* ModuleKeyword */ ) {
            throw Errors.argument('moduleKeyword');
        }
        if(stringLiteral !== null) {
            if(stringLiteral.kind() !== 12 /* StringLiteral */ ) {
                throw Errors.argument('stringLiteral');
            }
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._exportKeyword = exportKeyword;
        this._declareKeyword = declareKeyword;
        this._moduleKeyword = moduleKeyword;
        this._moduleName = moduleName;
        this._stringLiteral = stringLiteral;
        this._openBraceToken = openBraceToken;
        this._moduleElements = moduleElements;
        this._closeBraceToken = closeBraceToken;
    }
    ModuleDeclarationSyntax.create = function create(moduleKeyword, openBraceToken, closeBraceToken) {
        return new ModuleDeclarationSyntax(null, null, moduleKeyword, null, null, openBraceToken, SyntaxList.empty, closeBraceToken);
    }
    ModuleDeclarationSyntax.prototype.accept = function (visitor) {
        visitor.visitModuleDeclaration(this);
    };
    ModuleDeclarationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitModuleDeclaration(this);
    };
    ModuleDeclarationSyntax.prototype.kind = function () {
        return 129 /* ModuleDeclaration */ ;
    };
    ModuleDeclarationSyntax.prototype.isMissing = function () {
        if(this._exportKeyword !== null && !this._exportKeyword.isMissing()) {
            return false;
        }
        if(this._declareKeyword !== null && !this._declareKeyword.isMissing()) {
            return false;
        }
        if(!this._moduleKeyword.isMissing()) {
            return false;
        }
        if(this._moduleName !== null && !this._moduleName.isMissing()) {
            return false;
        }
        if(this._stringLiteral !== null && !this._stringLiteral.isMissing()) {
            return false;
        }
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._moduleElements.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    ModuleDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._moduleKeyword.width() > 0) {
            return this._moduleKeyword;
        }
        if(this._moduleName !== null && (token = this._moduleName.firstToken()) !== null) {
            return token;
        }
        if(this._stringLiteral !== null && this._stringLiteral.width() > 0) {
            return this._stringLiteral;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._moduleElements.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    ModuleDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._moduleElements.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if(this._stringLiteral !== null && this._stringLiteral.width() > 0) {
            return this._stringLiteral;
        }
        if(this._moduleName !== null && (token = this._moduleName.lastToken()) !== null) {
            return token;
        }
        if(this._moduleKeyword.width() > 0) {
            return this._moduleKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        return null;
    };
    ModuleDeclarationSyntax.prototype.exportKeyword = function () {
        return this._exportKeyword;
    };
    ModuleDeclarationSyntax.prototype.declareKeyword = function () {
        return this._declareKeyword;
    };
    ModuleDeclarationSyntax.prototype.moduleKeyword = function () {
        return this._moduleKeyword;
    };
    ModuleDeclarationSyntax.prototype.moduleName = function () {
        return this._moduleName;
    };
    ModuleDeclarationSyntax.prototype.stringLiteral = function () {
        return this._stringLiteral;
    };
    ModuleDeclarationSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    ModuleDeclarationSyntax.prototype.moduleElements = function () {
        return this._moduleElements;
    };
    ModuleDeclarationSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    ModuleDeclarationSyntax.prototype.update = function (exportKeyword, declareKeyword, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken) {
        if(this._exportKeyword === exportKeyword && this._declareKeyword === declareKeyword && this._moduleKeyword === moduleKeyword && this._moduleName === moduleName && this._stringLiteral === stringLiteral && this._openBraceToken === openBraceToken && this._moduleElements === moduleElements && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new ModuleDeclarationSyntax(exportKeyword, declareKeyword, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withExportKeyword = function (exportKeyword) {
        return this.update(exportKeyword, this._declareKeyword, this._moduleKeyword, this._moduleName, this._stringLiteral, this._openBraceToken, this._moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withDeclareKeyword = function (declareKeyword) {
        return this.update(this._exportKeyword, declareKeyword, this._moduleKeyword, this._moduleName, this._stringLiteral, this._openBraceToken, this._moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withModuleKeyword = function (moduleKeyword) {
        return this.update(this._exportKeyword, this._declareKeyword, moduleKeyword, this._moduleName, this._stringLiteral, this._openBraceToken, this._moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withModuleName = function (moduleName) {
        return this.update(this._exportKeyword, this._declareKeyword, this._moduleKeyword, moduleName, this._stringLiteral, this._openBraceToken, this._moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withStringLiteral = function (stringLiteral) {
        return this.update(this._exportKeyword, this._declareKeyword, this._moduleKeyword, this._moduleName, stringLiteral, this._openBraceToken, this._moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(this._exportKeyword, this._declareKeyword, this._moduleKeyword, this._moduleName, this._stringLiteral, openBraceToken, this._moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withModuleElements = function (moduleElements) {
        return this.update(this._exportKeyword, this._declareKeyword, this._moduleKeyword, this._moduleName, this._stringLiteral, this._openBraceToken, moduleElements, this._closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._exportKeyword, this._declareKeyword, this._moduleKeyword, this._moduleName, this._stringLiteral, this._openBraceToken, this._moduleElements, closeBraceToken);
    };
    ModuleDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._exportKeyword !== null) {
            this._exportKeyword.collectTextElements(elements);
        }
        if(this._declareKeyword !== null) {
            this._declareKeyword.collectTextElements(elements);
        }
        this._moduleKeyword.collectTextElements(elements);
        if(this._moduleName !== null) {
            this._moduleName.collectTextElements(elements);
        }
        if(this._stringLiteral !== null) {
            this._stringLiteral.collectTextElements(elements);
        }
        this._openBraceToken.collectTextElements(elements);
        this._moduleElements.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    return ModuleDeclarationSyntax;
})(ModuleElementSyntax);
var StatementSyntax = (function (_super) {
    __extends(StatementSyntax, _super);
    function StatementSyntax() {
        _super.call(this);
    }
    return StatementSyntax;
})(ModuleElementSyntax);
var FunctionDeclarationSyntax = (function (_super) {
    __extends(FunctionDeclarationSyntax, _super);
    function FunctionDeclarationSyntax(exportKeyword, declareKeyword, functionKeyword, functionSignature, block, semicolonToken) {
        _super.call(this);
        if(functionSignature === null) {
            throw Errors.argumentNull('functionSignature');
        }
        if(exportKeyword !== null) {
            if(exportKeyword.keywordKind() !== 45 /* ExportKeyword */ ) {
                throw Errors.argument('exportKeyword');
            }
        }
        if(declareKeyword !== null) {
            if(declareKeyword.keywordKind() !== 61 /* DeclareKeyword */ ) {
                throw Errors.argument('declareKeyword');
            }
        }
        if(functionKeyword.keywordKind() !== 25 /* FunctionKeyword */ ) {
            throw Errors.argument('functionKeyword');
        }
        if(semicolonToken !== null) {
            if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
                throw Errors.argument('semicolonToken');
            }
        }
        this._exportKeyword = exportKeyword;
        this._declareKeyword = declareKeyword;
        this._functionKeyword = functionKeyword;
        this._functionSignature = functionSignature;
        this._block = block;
        this._semicolonToken = semicolonToken;
    }
    FunctionDeclarationSyntax.create = function create(functionKeyword, functionSignature) {
        return new FunctionDeclarationSyntax(null, null, functionKeyword, functionSignature, null, null);
    }
    FunctionDeclarationSyntax.prototype.accept = function (visitor) {
        visitor.visitFunctionDeclaration(this);
    };
    FunctionDeclarationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitFunctionDeclaration(this);
    };
    FunctionDeclarationSyntax.prototype.kind = function () {
        return 128 /* FunctionDeclaration */ ;
    };
    FunctionDeclarationSyntax.prototype.isMissing = function () {
        if(this._exportKeyword !== null && !this._exportKeyword.isMissing()) {
            return false;
        }
        if(this._declareKeyword !== null && !this._declareKeyword.isMissing()) {
            return false;
        }
        if(!this._functionKeyword.isMissing()) {
            return false;
        }
        if(!this._functionSignature.isMissing()) {
            return false;
        }
        if(this._block !== null && !this._block.isMissing()) {
            return false;
        }
        if(this._semicolonToken !== null && !this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    FunctionDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._functionKeyword.width() > 0) {
            return this._functionKeyword;
        }
        if((token = this._functionSignature.firstToken()) !== null) {
            return token;
        }
        if(this._block !== null && (token = this._block.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken !== null && this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    FunctionDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken !== null && this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._block !== null && (token = this._block.lastToken()) !== null) {
            return token;
        }
        if((token = this._functionSignature.lastToken()) !== null) {
            return token;
        }
        if(this._functionKeyword.width() > 0) {
            return this._functionKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        return null;
    };
    FunctionDeclarationSyntax.prototype.exportKeyword = function () {
        return this._exportKeyword;
    };
    FunctionDeclarationSyntax.prototype.declareKeyword = function () {
        return this._declareKeyword;
    };
    FunctionDeclarationSyntax.prototype.functionKeyword = function () {
        return this._functionKeyword;
    };
    FunctionDeclarationSyntax.prototype.functionSignature = function () {
        return this._functionSignature;
    };
    FunctionDeclarationSyntax.prototype.block = function () {
        return this._block;
    };
    FunctionDeclarationSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    FunctionDeclarationSyntax.prototype.update = function (exportKeyword, declareKeyword, functionKeyword, functionSignature, block, semicolonToken) {
        if(this._exportKeyword === exportKeyword && this._declareKeyword === declareKeyword && this._functionKeyword === functionKeyword && this._functionSignature === functionSignature && this._block === block && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new FunctionDeclarationSyntax(exportKeyword, declareKeyword, functionKeyword, functionSignature, block, semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.withExportKeyword = function (exportKeyword) {
        return this.update(exportKeyword, this._declareKeyword, this._functionKeyword, this._functionSignature, this._block, this._semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.withDeclareKeyword = function (declareKeyword) {
        return this.update(this._exportKeyword, declareKeyword, this._functionKeyword, this._functionSignature, this._block, this._semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.withFunctionKeyword = function (functionKeyword) {
        return this.update(this._exportKeyword, this._declareKeyword, functionKeyword, this._functionSignature, this._block, this._semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.withFunctionSignature = function (functionSignature) {
        return this.update(this._exportKeyword, this._declareKeyword, this._functionKeyword, functionSignature, this._block, this._semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.withBlock = function (block) {
        return this.update(this._exportKeyword, this._declareKeyword, this._functionKeyword, this._functionSignature, block, this._semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._exportKeyword, this._declareKeyword, this._functionKeyword, this._functionSignature, this._block, semicolonToken);
    };
    FunctionDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._exportKeyword !== null) {
            this._exportKeyword.collectTextElements(elements);
        }
        if(this._declareKeyword !== null) {
            this._declareKeyword.collectTextElements(elements);
        }
        this._functionKeyword.collectTextElements(elements);
        this._functionSignature.collectTextElements(elements);
        if(this._block !== null) {
            this._block.collectTextElements(elements);
        }
        if(this._semicolonToken !== null) {
            this._semicolonToken.collectTextElements(elements);
        }
    };
    return FunctionDeclarationSyntax;
})(StatementSyntax);
var VariableStatementSyntax = (function (_super) {
    __extends(VariableStatementSyntax, _super);
    function VariableStatementSyntax(exportKeyword, declareKeyword, variableDeclaration, semicolonToken) {
        _super.call(this);
        if(variableDeclaration === null) {
            throw Errors.argumentNull('variableDeclaration');
        }
        if(exportKeyword !== null) {
            if(exportKeyword.keywordKind() !== 45 /* ExportKeyword */ ) {
                throw Errors.argument('exportKeyword');
            }
        }
        if(declareKeyword !== null) {
            if(declareKeyword.keywordKind() !== 61 /* DeclareKeyword */ ) {
                throw Errors.argument('declareKeyword');
            }
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._exportKeyword = exportKeyword;
        this._declareKeyword = declareKeyword;
        this._variableDeclaration = variableDeclaration;
        this._semicolonToken = semicolonToken;
    }
    VariableStatementSyntax.create = function create(variableDeclaration, semicolonToken) {
        return new VariableStatementSyntax(null, null, variableDeclaration, semicolonToken);
    }
    VariableStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitVariableStatement(this);
    };
    VariableStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitVariableStatement(this);
    };
    VariableStatementSyntax.prototype.kind = function () {
        return 140 /* VariableStatement */ ;
    };
    VariableStatementSyntax.prototype.isMissing = function () {
        if(this._exportKeyword !== null && !this._exportKeyword.isMissing()) {
            return false;
        }
        if(this._declareKeyword !== null && !this._declareKeyword.isMissing()) {
            return false;
        }
        if(!this._variableDeclaration.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    VariableStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if((token = this._variableDeclaration.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    VariableStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if((token = this._variableDeclaration.lastToken()) !== null) {
            return token;
        }
        if(this._declareKeyword !== null && this._declareKeyword.width() > 0) {
            return this._declareKeyword;
        }
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        return null;
    };
    VariableStatementSyntax.prototype.exportKeyword = function () {
        return this._exportKeyword;
    };
    VariableStatementSyntax.prototype.declareKeyword = function () {
        return this._declareKeyword;
    };
    VariableStatementSyntax.prototype.variableDeclaration = function () {
        return this._variableDeclaration;
    };
    VariableStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    VariableStatementSyntax.prototype.update = function (exportKeyword, declareKeyword, variableDeclaration, semicolonToken) {
        if(this._exportKeyword === exportKeyword && this._declareKeyword === declareKeyword && this._variableDeclaration === variableDeclaration && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new VariableStatementSyntax(exportKeyword, declareKeyword, variableDeclaration, semicolonToken);
    };
    VariableStatementSyntax.prototype.withExportKeyword = function (exportKeyword) {
        return this.update(exportKeyword, this._declareKeyword, this._variableDeclaration, this._semicolonToken);
    };
    VariableStatementSyntax.prototype.withDeclareKeyword = function (declareKeyword) {
        return this.update(this._exportKeyword, declareKeyword, this._variableDeclaration, this._semicolonToken);
    };
    VariableStatementSyntax.prototype.withVariableDeclaration = function (variableDeclaration) {
        return this.update(this._exportKeyword, this._declareKeyword, variableDeclaration, this._semicolonToken);
    };
    VariableStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._exportKeyword, this._declareKeyword, this._variableDeclaration, semicolonToken);
    };
    VariableStatementSyntax.prototype.collectTextElements = function (elements) {
        if(this._exportKeyword !== null) {
            this._exportKeyword.collectTextElements(elements);
        }
        if(this._declareKeyword !== null) {
            this._declareKeyword.collectTextElements(elements);
        }
        this._variableDeclaration.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    return VariableStatementSyntax;
})(StatementSyntax);
var ExpressionSyntax = (function (_super) {
    __extends(ExpressionSyntax, _super);
    function ExpressionSyntax() {
        _super.call(this);
    }
    return ExpressionSyntax;
})(SyntaxNode);
var UnaryExpressionSyntax = (function (_super) {
    __extends(UnaryExpressionSyntax, _super);
    function UnaryExpressionSyntax() {
        _super.call(this);
    }
    return UnaryExpressionSyntax;
})(ExpressionSyntax);
var VariableDeclarationSyntax = (function (_super) {
    __extends(VariableDeclarationSyntax, _super);
    function VariableDeclarationSyntax(varKeyword, variableDeclarators) {
        _super.call(this);
        if(variableDeclarators === null) {
            throw Errors.argumentNull('variableDeclarators');
        }
        if(varKeyword.keywordKind() !== 38 /* VarKeyword */ ) {
            throw Errors.argument('varKeyword');
        }
        this._varKeyword = varKeyword;
        this._variableDeclarators = variableDeclarators;
    }
    VariableDeclarationSyntax.create = function create(varKeyword) {
        return new VariableDeclarationSyntax(varKeyword, SeparatedSyntaxList.empty);
    }
    VariableDeclarationSyntax.prototype.accept = function (visitor) {
        visitor.visitVariableDeclaration(this);
    };
    VariableDeclarationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitVariableDeclaration(this);
    };
    VariableDeclarationSyntax.prototype.kind = function () {
        return 223 /* VariableDeclaration */ ;
    };
    VariableDeclarationSyntax.prototype.isMissing = function () {
        if(!this._varKeyword.isMissing()) {
            return false;
        }
        if(!this._variableDeclarators.isMissing()) {
            return false;
        }
        return true;
    };
    VariableDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._varKeyword.width() > 0) {
            return this._varKeyword;
        }
        if((token = this._variableDeclarators.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    VariableDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._variableDeclarators.lastToken()) !== null) {
            return token;
        }
        if(this._varKeyword.width() > 0) {
            return this._varKeyword;
        }
        return null;
    };
    VariableDeclarationSyntax.prototype.varKeyword = function () {
        return this._varKeyword;
    };
    VariableDeclarationSyntax.prototype.variableDeclarators = function () {
        return this._variableDeclarators;
    };
    VariableDeclarationSyntax.prototype.update = function (varKeyword, variableDeclarators) {
        if(this._varKeyword === varKeyword && this._variableDeclarators === variableDeclarators) {
            return this;
        }
        return new VariableDeclarationSyntax(varKeyword, variableDeclarators);
    };
    VariableDeclarationSyntax.prototype.withVarKeyword = function (varKeyword) {
        return this.update(varKeyword, this._variableDeclarators);
    };
    VariableDeclarationSyntax.prototype.withVariableDeclarators = function (variableDeclarators) {
        return this.update(this._varKeyword, variableDeclarators);
    };
    VariableDeclarationSyntax.prototype.collectTextElements = function (elements) {
        this._varKeyword.collectTextElements(elements);
        this._variableDeclarators.collectTextElements(elements);
    };
    return VariableDeclarationSyntax;
})(SyntaxNode);
var VariableDeclaratorSyntax = (function (_super) {
    __extends(VariableDeclaratorSyntax, _super);
    function VariableDeclaratorSyntax(identifier, typeAnnotation, equalsValueClause) {
        _super.call(this);
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        this._identifier = identifier;
        this._typeAnnotation = typeAnnotation;
        this._equalsValueClause = equalsValueClause;
    }
    VariableDeclaratorSyntax.create = function create(identifier) {
        return new VariableDeclaratorSyntax(identifier, null, null);
    }
    VariableDeclaratorSyntax.prototype.accept = function (visitor) {
        visitor.visitVariableDeclarator(this);
    };
    VariableDeclaratorSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitVariableDeclarator(this);
    };
    VariableDeclaratorSyntax.prototype.kind = function () {
        return 224 /* VariableDeclarator */ ;
    };
    VariableDeclaratorSyntax.prototype.isMissing = function () {
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        if(this._equalsValueClause !== null && !this._equalsValueClause.isMissing()) {
            return false;
        }
        return true;
    };
    VariableDeclaratorSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        if(this._equalsValueClause !== null && (token = this._equalsValueClause.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    VariableDeclaratorSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._equalsValueClause !== null && (token = this._equalsValueClause.lastToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    VariableDeclaratorSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    VariableDeclaratorSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    VariableDeclaratorSyntax.prototype.equalsValueClause = function () {
        return this._equalsValueClause;
    };
    VariableDeclaratorSyntax.prototype.update = function (identifier, typeAnnotation, equalsValueClause) {
        if(this._identifier === identifier && this._typeAnnotation === typeAnnotation && this._equalsValueClause === equalsValueClause) {
            return this;
        }
        return new VariableDeclaratorSyntax(identifier, typeAnnotation, equalsValueClause);
    };
    VariableDeclaratorSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(identifier, this._typeAnnotation, this._equalsValueClause);
    };
    VariableDeclaratorSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._identifier, typeAnnotation, this._equalsValueClause);
    };
    VariableDeclaratorSyntax.prototype.withEqualsValueClause = function (equalsValueClause) {
        return this.update(this._identifier, this._typeAnnotation, equalsValueClause);
    };
    VariableDeclaratorSyntax.prototype.collectTextElements = function (elements) {
        this._identifier.collectTextElements(elements);
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
        if(this._equalsValueClause !== null) {
            this._equalsValueClause.collectTextElements(elements);
        }
    };
    return VariableDeclaratorSyntax;
})(SyntaxNode);
var EqualsValueClauseSyntax = (function (_super) {
    __extends(EqualsValueClauseSyntax, _super);
    function EqualsValueClauseSyntax(equalsToken, value) {
        _super.call(this);
        if(value === null) {
            throw Errors.argumentNull('value');
        }
        if(equalsToken.kind() !== 104 /* EqualsToken */ ) {
            throw Errors.argument('equalsToken');
        }
        this._equalsToken = equalsToken;
        this._value = value;
    }
    EqualsValueClauseSyntax.prototype.accept = function (visitor) {
        visitor.visitEqualsValueClause(this);
    };
    EqualsValueClauseSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitEqualsValueClause(this);
    };
    EqualsValueClauseSyntax.prototype.kind = function () {
        return 229 /* EqualsValueClause */ ;
    };
    EqualsValueClauseSyntax.prototype.isMissing = function () {
        if(!this._equalsToken.isMissing()) {
            return false;
        }
        if(!this._value.isMissing()) {
            return false;
        }
        return true;
    };
    EqualsValueClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._equalsToken.width() > 0) {
            return this._equalsToken;
        }
        if((token = this._value.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    EqualsValueClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._value.lastToken()) !== null) {
            return token;
        }
        if(this._equalsToken.width() > 0) {
            return this._equalsToken;
        }
        return null;
    };
    EqualsValueClauseSyntax.prototype.equalsToken = function () {
        return this._equalsToken;
    };
    EqualsValueClauseSyntax.prototype.value = function () {
        return this._value;
    };
    EqualsValueClauseSyntax.prototype.update = function (equalsToken, value) {
        if(this._equalsToken === equalsToken && this._value === value) {
            return this;
        }
        return new EqualsValueClauseSyntax(equalsToken, value);
    };
    EqualsValueClauseSyntax.prototype.withEqualsToken = function (equalsToken) {
        return this.update(equalsToken, this._value);
    };
    EqualsValueClauseSyntax.prototype.withValue = function (value) {
        return this.update(this._equalsToken, value);
    };
    EqualsValueClauseSyntax.prototype.collectTextElements = function (elements) {
        this._equalsToken.collectTextElements(elements);
        this._value.collectTextElements(elements);
    };
    return EqualsValueClauseSyntax;
})(SyntaxNode);
var PrefixUnaryExpressionSyntax = (function (_super) {
    __extends(PrefixUnaryExpressionSyntax, _super);
    function PrefixUnaryExpressionSyntax(kind, operatorToken, operand) {
        _super.call(this);
        if(kind === null) {
            throw Errors.argumentNull('kind');
        }
        if(operand === null) {
            throw Errors.argumentNull('operand');
        }
        switch(operatorToken.kind()) {
            case 90 /* PlusPlusToken */ :
            case 91 /* MinusMinusToken */ :
            case 86 /* PlusToken */ :
            case 87 /* MinusToken */ :
            case 99 /* TildeToken */ :
            case 98 /* ExclamationToken */ : {
                break;

            }
            default: {
                throw Errors.argument('operatorToken');

            }
        }
        this._kind = kind;
        this._operatorToken = operatorToken;
        this._operand = operand;
    }
    PrefixUnaryExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitPrefixUnaryExpression(this);
    };
    PrefixUnaryExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitPrefixUnaryExpression(this);
    };
    PrefixUnaryExpressionSyntax.prototype.isMissing = function () {
        if(!this._operatorToken.isMissing()) {
            return false;
        }
        if(!this._operand.isMissing()) {
            return false;
        }
        return true;
    };
    PrefixUnaryExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._operatorToken.width() > 0) {
            return this._operatorToken;
        }
        if((token = this._operand.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    PrefixUnaryExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._operand.lastToken()) !== null) {
            return token;
        }
        if(this._operatorToken.width() > 0) {
            return this._operatorToken;
        }
        return null;
    };
    PrefixUnaryExpressionSyntax.prototype.kind = function () {
        return this._kind;
    };
    PrefixUnaryExpressionSyntax.prototype.operatorToken = function () {
        return this._operatorToken;
    };
    PrefixUnaryExpressionSyntax.prototype.operand = function () {
        return this._operand;
    };
    PrefixUnaryExpressionSyntax.prototype.update = function (kind, operatorToken, operand) {
        if(this._kind === kind && this._operatorToken === operatorToken && this._operand === operand) {
            return this;
        }
        return new PrefixUnaryExpressionSyntax(kind, operatorToken, operand);
    };
    PrefixUnaryExpressionSyntax.prototype.withKind = function (kind) {
        return this.update(kind, this._operatorToken, this._operand);
    };
    PrefixUnaryExpressionSyntax.prototype.withOperatorToken = function (operatorToken) {
        return this.update(this._kind, operatorToken, this._operand);
    };
    PrefixUnaryExpressionSyntax.prototype.withOperand = function (operand) {
        return this.update(this._kind, this._operatorToken, operand);
    };
    PrefixUnaryExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._operatorToken.collectTextElements(elements);
        this._operand.collectTextElements(elements);
    };
    return PrefixUnaryExpressionSyntax;
})(UnaryExpressionSyntax);
var ThisExpressionSyntax = (function (_super) {
    __extends(ThisExpressionSyntax, _super);
    function ThisExpressionSyntax(thisKeyword) {
        _super.call(this);
        if(thisKeyword.keywordKind() !== 33 /* ThisKeyword */ ) {
            throw Errors.argument('thisKeyword');
        }
        this._thisKeyword = thisKeyword;
    }
    ThisExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitThisExpression(this);
    };
    ThisExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitThisExpression(this);
    };
    ThisExpressionSyntax.prototype.kind = function () {
        return 211 /* ThisExpression */ ;
    };
    ThisExpressionSyntax.prototype.isMissing = function () {
        if(!this._thisKeyword.isMissing()) {
            return false;
        }
        return true;
    };
    ThisExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._thisKeyword.width() > 0) {
            return this._thisKeyword;
        }
        return null;
    };
    ThisExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._thisKeyword.width() > 0) {
            return this._thisKeyword;
        }
        return null;
    };
    ThisExpressionSyntax.prototype.thisKeyword = function () {
        return this._thisKeyword;
    };
    ThisExpressionSyntax.prototype.update = function (thisKeyword) {
        if(this._thisKeyword === thisKeyword) {
            return this;
        }
        return new ThisExpressionSyntax(thisKeyword);
    };
    ThisExpressionSyntax.prototype.withThisKeyword = function (thisKeyword) {
        return this.update(thisKeyword);
    };
    ThisExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._thisKeyword.collectTextElements(elements);
    };
    return ThisExpressionSyntax;
})(UnaryExpressionSyntax);
var LiteralExpressionSyntax = (function (_super) {
    __extends(LiteralExpressionSyntax, _super);
    function LiteralExpressionSyntax(kind, literalToken) {
        _super.call(this);
        if(kind === null) {
            throw Errors.argumentNull('kind');
        }
        switch(literalToken.kind()) {
            case 10 /* RegularExpressionLiteral */ :
            case 12 /* StringLiteral */ :
            case 11 /* NumericLiteral */ : {
                break;

            }
            case 9 /* IdentifierNameToken */ : {
                switch(literalToken.keywordKind()) {
                    case 22 /* FalseKeyword */ :
                    case 35 /* TrueKeyword */ :
                    case 30 /* NullKeyword */ : {
                        break;

                    }
                    default: {
                        throw Errors.argument('literalToken');

                    }
                }
                break;

            }
            default: {
                throw Errors.argument('literalToken');

            }
        }
        this._kind = kind;
        this._literalToken = literalToken;
    }
    LiteralExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitLiteralExpression(this);
    };
    LiteralExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitLiteralExpression(this);
    };
    LiteralExpressionSyntax.prototype.isMissing = function () {
        if(!this._literalToken.isMissing()) {
            return false;
        }
        return true;
    };
    LiteralExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._literalToken.width() > 0) {
            return this._literalToken;
        }
        return null;
    };
    LiteralExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._literalToken.width() > 0) {
            return this._literalToken;
        }
        return null;
    };
    LiteralExpressionSyntax.prototype.kind = function () {
        return this._kind;
    };
    LiteralExpressionSyntax.prototype.literalToken = function () {
        return this._literalToken;
    };
    LiteralExpressionSyntax.prototype.update = function (kind, literalToken) {
        if(this._kind === kind && this._literalToken === literalToken) {
            return this;
        }
        return new LiteralExpressionSyntax(kind, literalToken);
    };
    LiteralExpressionSyntax.prototype.withKind = function (kind) {
        return this.update(kind, this._literalToken);
    };
    LiteralExpressionSyntax.prototype.withLiteralToken = function (literalToken) {
        return this.update(this._kind, literalToken);
    };
    LiteralExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._literalToken.collectTextElements(elements);
    };
    return LiteralExpressionSyntax;
})(UnaryExpressionSyntax);
var ArrayLiteralExpressionSyntax = (function (_super) {
    __extends(ArrayLiteralExpressionSyntax, _super);
    function ArrayLiteralExpressionSyntax(openBracketToken, expressions, closeBracketToken) {
        _super.call(this);
        if(expressions === null) {
            throw Errors.argumentNull('expressions');
        }
        if(openBracketToken.kind() !== 71 /* OpenBracketToken */ ) {
            throw Errors.argument('openBracketToken');
        }
        if(closeBracketToken.kind() !== 72 /* CloseBracketToken */ ) {
            throw Errors.argument('closeBracketToken');
        }
        this._openBracketToken = openBracketToken;
        this._expressions = expressions;
        this._closeBracketToken = closeBracketToken;
    }
    ArrayLiteralExpressionSyntax.create = function create(openBracketToken, closeBracketToken) {
        return new ArrayLiteralExpressionSyntax(openBracketToken, SeparatedSyntaxList.empty, closeBracketToken);
    }
    ArrayLiteralExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitArrayLiteralExpression(this);
    };
    ArrayLiteralExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitArrayLiteralExpression(this);
    };
    ArrayLiteralExpressionSyntax.prototype.kind = function () {
        return 212 /* ArrayLiteralExpression */ ;
    };
    ArrayLiteralExpressionSyntax.prototype.isMissing = function () {
        if(!this._openBracketToken.isMissing()) {
            return false;
        }
        if(!this._expressions.isMissing()) {
            return false;
        }
        if(!this._closeBracketToken.isMissing()) {
            return false;
        }
        return true;
    };
    ArrayLiteralExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        if((token = this._expressions.firstToken()) !== null) {
            return token;
        }
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        return null;
    };
    ArrayLiteralExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        if((token = this._expressions.lastToken()) !== null) {
            return token;
        }
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        return null;
    };
    ArrayLiteralExpressionSyntax.prototype.openBracketToken = function () {
        return this._openBracketToken;
    };
    ArrayLiteralExpressionSyntax.prototype.expressions = function () {
        return this._expressions;
    };
    ArrayLiteralExpressionSyntax.prototype.closeBracketToken = function () {
        return this._closeBracketToken;
    };
    ArrayLiteralExpressionSyntax.prototype.update = function (openBracketToken, expressions, closeBracketToken) {
        if(this._openBracketToken === openBracketToken && this._expressions === expressions && this._closeBracketToken === closeBracketToken) {
            return this;
        }
        return new ArrayLiteralExpressionSyntax(openBracketToken, expressions, closeBracketToken);
    };
    ArrayLiteralExpressionSyntax.prototype.withOpenBracketToken = function (openBracketToken) {
        return this.update(openBracketToken, this._expressions, this._closeBracketToken);
    };
    ArrayLiteralExpressionSyntax.prototype.withExpressions = function (expressions) {
        return this.update(this._openBracketToken, expressions, this._closeBracketToken);
    };
    ArrayLiteralExpressionSyntax.prototype.withCloseBracketToken = function (closeBracketToken) {
        return this.update(this._openBracketToken, this._expressions, closeBracketToken);
    };
    ArrayLiteralExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._openBracketToken.collectTextElements(elements);
        this._expressions.collectTextElements(elements);
        this._closeBracketToken.collectTextElements(elements);
    };
    return ArrayLiteralExpressionSyntax;
})(UnaryExpressionSyntax);
var OmittedExpressionSyntax = (function (_super) {
    __extends(OmittedExpressionSyntax, _super);
    function OmittedExpressionSyntax() {
        _super.call(this);
    }
    OmittedExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitOmittedExpression(this);
    };
    OmittedExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitOmittedExpression(this);
    };
    OmittedExpressionSyntax.prototype.kind = function () {
        return 222 /* OmittedExpression */ ;
    };
    OmittedExpressionSyntax.prototype.isMissing = function () {
        return true;
    };
    OmittedExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        return null;
    };
    OmittedExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        return null;
    };
    OmittedExpressionSyntax.prototype.update = function () {
        return this;
    };
    OmittedExpressionSyntax.prototype.collectTextElements = function (elements) {
    };
    return OmittedExpressionSyntax;
})(ExpressionSyntax);
var ParenthesizedExpressionSyntax = (function (_super) {
    __extends(ParenthesizedExpressionSyntax, _super);
    function ParenthesizedExpressionSyntax(openParenToken, expression, closeParenToken) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._openParenToken = openParenToken;
        this._expression = expression;
        this._closeParenToken = closeParenToken;
    }
    ParenthesizedExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitParenthesizedExpression(this);
    };
    ParenthesizedExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitParenthesizedExpression(this);
    };
    ParenthesizedExpressionSyntax.prototype.kind = function () {
        return 215 /* ParenthesizedExpression */ ;
    };
    ParenthesizedExpressionSyntax.prototype.isMissing = function () {
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        return true;
    };
    ParenthesizedExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        return null;
    };
    ParenthesizedExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        return null;
    };
    ParenthesizedExpressionSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    ParenthesizedExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    ParenthesizedExpressionSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    ParenthesizedExpressionSyntax.prototype.update = function (openParenToken, expression, closeParenToken) {
        if(this._openParenToken === openParenToken && this._expression === expression && this._closeParenToken === closeParenToken) {
            return this;
        }
        return new ParenthesizedExpressionSyntax(openParenToken, expression, closeParenToken);
    };
    ParenthesizedExpressionSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(openParenToken, this._expression, this._closeParenToken);
    };
    ParenthesizedExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(this._openParenToken, expression, this._closeParenToken);
    };
    ParenthesizedExpressionSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._openParenToken, this._expression, closeParenToken);
    };
    ParenthesizedExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._openParenToken.collectTextElements(elements);
        this._expression.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
    };
    return ParenthesizedExpressionSyntax;
})(UnaryExpressionSyntax);
var ArrowFunctionExpressionSyntax = (function (_super) {
    __extends(ArrowFunctionExpressionSyntax, _super);
    function ArrowFunctionExpressionSyntax() {
        _super.call(this);
    }
    ArrowFunctionExpressionSyntax.prototype.equalsGreaterThanToken = function () {
        throw Errors.abstract();
    };
    ArrowFunctionExpressionSyntax.prototype.body = function () {
        throw Errors.abstract();
    };
    return ArrowFunctionExpressionSyntax;
})(UnaryExpressionSyntax);
var SimpleArrowFunctionExpressionSyntax = (function (_super) {
    __extends(SimpleArrowFunctionExpressionSyntax, _super);
    function SimpleArrowFunctionExpressionSyntax(identifier, equalsGreaterThanToken, body) {
        _super.call(this);
        if(body === null) {
            throw Errors.argumentNull('body');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(equalsGreaterThanToken.kind() !== 82 /* EqualsGreaterThanToken */ ) {
            throw Errors.argument('equalsGreaterThanToken');
        }
        this._identifier = identifier;
        this._equalsGreaterThanToken = equalsGreaterThanToken;
        this._body = body;
    }
    SimpleArrowFunctionExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitSimpleArrowFunctionExpression(this);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitSimpleArrowFunctionExpression(this);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.kind = function () {
        return 217 /* SimpleArrowFunctionExpression */ ;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.isMissing = function () {
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._equalsGreaterThanToken.isMissing()) {
            return false;
        }
        if(!this._body.isMissing()) {
            return false;
        }
        return true;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._body.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._body.lastToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.equalsGreaterThanToken = function () {
        return this._equalsGreaterThanToken;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.body = function () {
        return this._body;
    };
    SimpleArrowFunctionExpressionSyntax.prototype.update = function (identifier, equalsGreaterThanToken, body) {
        if(this._identifier === identifier && this._equalsGreaterThanToken === equalsGreaterThanToken && this._body === body) {
            return this;
        }
        return new SimpleArrowFunctionExpressionSyntax(identifier, equalsGreaterThanToken, body);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(identifier, this._equalsGreaterThanToken, this._body);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.withEqualsGreaterThanToken = function (equalsGreaterThanToken) {
        return this.update(this._identifier, equalsGreaterThanToken, this._body);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.withBody = function (body) {
        return this.update(this._identifier, this._equalsGreaterThanToken, body);
    };
    SimpleArrowFunctionExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._identifier.collectTextElements(elements);
        this._equalsGreaterThanToken.collectTextElements(elements);
        this._body.collectTextElements(elements);
    };
    return SimpleArrowFunctionExpressionSyntax;
})(ArrowFunctionExpressionSyntax);
var ParenthesizedArrowFunctionExpressionSyntax = (function (_super) {
    __extends(ParenthesizedArrowFunctionExpressionSyntax, _super);
    function ParenthesizedArrowFunctionExpressionSyntax(callSignature, equalsGreaterThanToken, body) {
        _super.call(this);
        if(callSignature === null) {
            throw Errors.argumentNull('callSignature');
        }
        if(body === null) {
            throw Errors.argumentNull('body');
        }
        if(equalsGreaterThanToken.kind() !== 82 /* EqualsGreaterThanToken */ ) {
            throw Errors.argument('equalsGreaterThanToken');
        }
        this._callSignature = callSignature;
        this._equalsGreaterThanToken = equalsGreaterThanToken;
        this._body = body;
    }
    ParenthesizedArrowFunctionExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitParenthesizedArrowFunctionExpression(this);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitParenthesizedArrowFunctionExpression(this);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.kind = function () {
        return 216 /* ParenthesizedArrowFunctionExpression */ ;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.isMissing = function () {
        if(!this._callSignature.isMissing()) {
            return false;
        }
        if(!this._equalsGreaterThanToken.isMissing()) {
            return false;
        }
        if(!this._body.isMissing()) {
            return false;
        }
        return true;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._callSignature.firstToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._body.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._body.lastToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._callSignature.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.callSignature = function () {
        return this._callSignature;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.equalsGreaterThanToken = function () {
        return this._equalsGreaterThanToken;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.body = function () {
        return this._body;
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.update = function (callSignature, equalsGreaterThanToken, body) {
        if(this._callSignature === callSignature && this._equalsGreaterThanToken === equalsGreaterThanToken && this._body === body) {
            return this;
        }
        return new ParenthesizedArrowFunctionExpressionSyntax(callSignature, equalsGreaterThanToken, body);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.withCallSignature = function (callSignature) {
        return this.update(callSignature, this._equalsGreaterThanToken, this._body);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.withEqualsGreaterThanToken = function (equalsGreaterThanToken) {
        return this.update(this._callSignature, equalsGreaterThanToken, this._body);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.withBody = function (body) {
        return this.update(this._callSignature, this._equalsGreaterThanToken, body);
    };
    ParenthesizedArrowFunctionExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._callSignature.collectTextElements(elements);
        this._equalsGreaterThanToken.collectTextElements(elements);
        this._body.collectTextElements(elements);
    };
    return ParenthesizedArrowFunctionExpressionSyntax;
})(ArrowFunctionExpressionSyntax);
var TypeSyntax = (function (_super) {
    __extends(TypeSyntax, _super);
    function TypeSyntax() {
        _super.call(this);
    }
    return TypeSyntax;
})(UnaryExpressionSyntax);
var NameSyntax = (function (_super) {
    __extends(NameSyntax, _super);
    function NameSyntax() {
        _super.call(this);
    }
    return NameSyntax;
})(TypeSyntax);
var IdentifierNameSyntax = (function (_super) {
    __extends(IdentifierNameSyntax, _super);
    function IdentifierNameSyntax(identifier) {
        _super.call(this);
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        this._identifier = identifier;
    }
    IdentifierNameSyntax.prototype.accept = function (visitor) {
        visitor.visitIdentifierName(this);
    };
    IdentifierNameSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitIdentifierName(this);
    };
    IdentifierNameSyntax.prototype.kind = function () {
        return 120 /* IdentifierName */ ;
    };
    IdentifierNameSyntax.prototype.isMissing = function () {
        if(!this._identifier.isMissing()) {
            return false;
        }
        return true;
    };
    IdentifierNameSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    IdentifierNameSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    IdentifierNameSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    IdentifierNameSyntax.prototype.update = function (identifier) {
        if(this._identifier === identifier) {
            return this;
        }
        return new IdentifierNameSyntax(identifier);
    };
    IdentifierNameSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(identifier);
    };
    IdentifierNameSyntax.prototype.collectTextElements = function (elements) {
        this._identifier.collectTextElements(elements);
    };
    return IdentifierNameSyntax;
})(NameSyntax);
var QualifiedNameSyntax = (function (_super) {
    __extends(QualifiedNameSyntax, _super);
    function QualifiedNameSyntax(left, dotToken, right) {
        _super.call(this);
        if(left === null) {
            throw Errors.argumentNull('left');
        }
        if(right === null) {
            throw Errors.argumentNull('right');
        }
        if(dotToken.kind() !== 73 /* DotToken */ ) {
            throw Errors.argument('dotToken');
        }
        this._left = left;
        this._dotToken = dotToken;
        this._right = right;
    }
    QualifiedNameSyntax.prototype.accept = function (visitor) {
        visitor.visitQualifiedName(this);
    };
    QualifiedNameSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitQualifiedName(this);
    };
    QualifiedNameSyntax.prototype.kind = function () {
        return 121 /* QualifiedName */ ;
    };
    QualifiedNameSyntax.prototype.isMissing = function () {
        if(!this._left.isMissing()) {
            return false;
        }
        if(!this._dotToken.isMissing()) {
            return false;
        }
        if(!this._right.isMissing()) {
            return false;
        }
        return true;
    };
    QualifiedNameSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._left.firstToken()) !== null) {
            return token;
        }
        if(this._dotToken.width() > 0) {
            return this._dotToken;
        }
        if((token = this._right.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    QualifiedNameSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._right.lastToken()) !== null) {
            return token;
        }
        if(this._dotToken.width() > 0) {
            return this._dotToken;
        }
        if((token = this._left.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    QualifiedNameSyntax.prototype.left = function () {
        return this._left;
    };
    QualifiedNameSyntax.prototype.dotToken = function () {
        return this._dotToken;
    };
    QualifiedNameSyntax.prototype.right = function () {
        return this._right;
    };
    QualifiedNameSyntax.prototype.update = function (left, dotToken, right) {
        if(this._left === left && this._dotToken === dotToken && this._right === right) {
            return this;
        }
        return new QualifiedNameSyntax(left, dotToken, right);
    };
    QualifiedNameSyntax.prototype.withLeft = function (left) {
        return this.update(left, this._dotToken, this._right);
    };
    QualifiedNameSyntax.prototype.withDotToken = function (dotToken) {
        return this.update(this._left, dotToken, this._right);
    };
    QualifiedNameSyntax.prototype.withRight = function (right) {
        return this.update(this._left, this._dotToken, right);
    };
    QualifiedNameSyntax.prototype.collectTextElements = function (elements) {
        this._left.collectTextElements(elements);
        this._dotToken.collectTextElements(elements);
        this._right.collectTextElements(elements);
    };
    return QualifiedNameSyntax;
})(NameSyntax);
var ConstructorTypeSyntax = (function (_super) {
    __extends(ConstructorTypeSyntax, _super);
    function ConstructorTypeSyntax(newKeyword, parameterList, equalsGreaterThanToken, type) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(type === null) {
            throw Errors.argumentNull('type');
        }
        if(newKeyword.keywordKind() !== 29 /* NewKeyword */ ) {
            throw Errors.argument('newKeyword');
        }
        if(equalsGreaterThanToken.kind() !== 82 /* EqualsGreaterThanToken */ ) {
            throw Errors.argument('equalsGreaterThanToken');
        }
        this._newKeyword = newKeyword;
        this._parameterList = parameterList;
        this._equalsGreaterThanToken = equalsGreaterThanToken;
        this._type = type;
    }
    ConstructorTypeSyntax.prototype.accept = function (visitor) {
        visitor.visitConstructorType(this);
    };
    ConstructorTypeSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitConstructorType(this);
    };
    ConstructorTypeSyntax.prototype.kind = function () {
        return 126 /* ConstructorType */ ;
    };
    ConstructorTypeSyntax.prototype.isMissing = function () {
        if(!this._newKeyword.isMissing()) {
            return false;
        }
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(!this._equalsGreaterThanToken.isMissing()) {
            return false;
        }
        if(!this._type.isMissing()) {
            return false;
        }
        return true;
    };
    ConstructorTypeSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._newKeyword.width() > 0) {
            return this._newKeyword;
        }
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._type.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ConstructorTypeSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._type.lastToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        if(this._newKeyword.width() > 0) {
            return this._newKeyword;
        }
        return null;
    };
    ConstructorTypeSyntax.prototype.newKeyword = function () {
        return this._newKeyword;
    };
    ConstructorTypeSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    ConstructorTypeSyntax.prototype.equalsGreaterThanToken = function () {
        return this._equalsGreaterThanToken;
    };
    ConstructorTypeSyntax.prototype.type = function () {
        return this._type;
    };
    ConstructorTypeSyntax.prototype.update = function (newKeyword, parameterList, equalsGreaterThanToken, type) {
        if(this._newKeyword === newKeyword && this._parameterList === parameterList && this._equalsGreaterThanToken === equalsGreaterThanToken && this._type === type) {
            return this;
        }
        return new ConstructorTypeSyntax(newKeyword, parameterList, equalsGreaterThanToken, type);
    };
    ConstructorTypeSyntax.prototype.withNewKeyword = function (newKeyword) {
        return this.update(newKeyword, this._parameterList, this._equalsGreaterThanToken, this._type);
    };
    ConstructorTypeSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(this._newKeyword, parameterList, this._equalsGreaterThanToken, this._type);
    };
    ConstructorTypeSyntax.prototype.withEqualsGreaterThanToken = function (equalsGreaterThanToken) {
        return this.update(this._newKeyword, this._parameterList, equalsGreaterThanToken, this._type);
    };
    ConstructorTypeSyntax.prototype.withType = function (type) {
        return this.update(this._newKeyword, this._parameterList, this._equalsGreaterThanToken, type);
    };
    ConstructorTypeSyntax.prototype.collectTextElements = function (elements) {
        this._newKeyword.collectTextElements(elements);
        this._parameterList.collectTextElements(elements);
        this._equalsGreaterThanToken.collectTextElements(elements);
        this._type.collectTextElements(elements);
    };
    return ConstructorTypeSyntax;
})(TypeSyntax);
var FunctionTypeSyntax = (function (_super) {
    __extends(FunctionTypeSyntax, _super);
    function FunctionTypeSyntax(parameterList, equalsGreaterThanToken, type) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(type === null) {
            throw Errors.argumentNull('type');
        }
        if(equalsGreaterThanToken.kind() !== 82 /* EqualsGreaterThanToken */ ) {
            throw Errors.argument('equalsGreaterThanToken');
        }
        this._parameterList = parameterList;
        this._equalsGreaterThanToken = equalsGreaterThanToken;
        this._type = type;
    }
    FunctionTypeSyntax.prototype.accept = function (visitor) {
        visitor.visitFunctionType(this);
    };
    FunctionTypeSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitFunctionType(this);
    };
    FunctionTypeSyntax.prototype.kind = function () {
        return 124 /* FunctionType */ ;
    };
    FunctionTypeSyntax.prototype.isMissing = function () {
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(!this._equalsGreaterThanToken.isMissing()) {
            return false;
        }
        if(!this._type.isMissing()) {
            return false;
        }
        return true;
    };
    FunctionTypeSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._type.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    FunctionTypeSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._type.lastToken()) !== null) {
            return token;
        }
        if(this._equalsGreaterThanToken.width() > 0) {
            return this._equalsGreaterThanToken;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    FunctionTypeSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    FunctionTypeSyntax.prototype.equalsGreaterThanToken = function () {
        return this._equalsGreaterThanToken;
    };
    FunctionTypeSyntax.prototype.type = function () {
        return this._type;
    };
    FunctionTypeSyntax.prototype.update = function (parameterList, equalsGreaterThanToken, type) {
        if(this._parameterList === parameterList && this._equalsGreaterThanToken === equalsGreaterThanToken && this._type === type) {
            return this;
        }
        return new FunctionTypeSyntax(parameterList, equalsGreaterThanToken, type);
    };
    FunctionTypeSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(parameterList, this._equalsGreaterThanToken, this._type);
    };
    FunctionTypeSyntax.prototype.withEqualsGreaterThanToken = function (equalsGreaterThanToken) {
        return this.update(this._parameterList, equalsGreaterThanToken, this._type);
    };
    FunctionTypeSyntax.prototype.withType = function (type) {
        return this.update(this._parameterList, this._equalsGreaterThanToken, type);
    };
    FunctionTypeSyntax.prototype.collectTextElements = function (elements) {
        this._parameterList.collectTextElements(elements);
        this._equalsGreaterThanToken.collectTextElements(elements);
        this._type.collectTextElements(elements);
    };
    return FunctionTypeSyntax;
})(TypeSyntax);
var ObjectTypeSyntax = (function (_super) {
    __extends(ObjectTypeSyntax, _super);
    function ObjectTypeSyntax(openBraceToken, typeMembers, closeBraceToken) {
        _super.call(this);
        if(typeMembers === null) {
            throw Errors.argumentNull('typeMembers');
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._openBraceToken = openBraceToken;
        this._typeMembers = typeMembers;
        this._closeBraceToken = closeBraceToken;
    }
    ObjectTypeSyntax.create = function create(openBraceToken, closeBraceToken) {
        return new ObjectTypeSyntax(openBraceToken, SeparatedSyntaxList.empty, closeBraceToken);
    }
    ObjectTypeSyntax.prototype.accept = function (visitor) {
        visitor.visitObjectType(this);
    };
    ObjectTypeSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitObjectType(this);
    };
    ObjectTypeSyntax.prototype.kind = function () {
        return 122 /* ObjectType */ ;
    };
    ObjectTypeSyntax.prototype.isMissing = function () {
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._typeMembers.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    ObjectTypeSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._typeMembers.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    ObjectTypeSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._typeMembers.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        return null;
    };
    ObjectTypeSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    ObjectTypeSyntax.prototype.typeMembers = function () {
        return this._typeMembers;
    };
    ObjectTypeSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    ObjectTypeSyntax.prototype.update = function (openBraceToken, typeMembers, closeBraceToken) {
        if(this._openBraceToken === openBraceToken && this._typeMembers === typeMembers && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new ObjectTypeSyntax(openBraceToken, typeMembers, closeBraceToken);
    };
    ObjectTypeSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(openBraceToken, this._typeMembers, this._closeBraceToken);
    };
    ObjectTypeSyntax.prototype.withTypeMembers = function (typeMembers) {
        return this.update(this._openBraceToken, typeMembers, this._closeBraceToken);
    };
    ObjectTypeSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._openBraceToken, this._typeMembers, closeBraceToken);
    };
    ObjectTypeSyntax.prototype.collectTextElements = function (elements) {
        this._openBraceToken.collectTextElements(elements);
        this._typeMembers.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    return ObjectTypeSyntax;
})(TypeSyntax);
var ArrayTypeSyntax = (function (_super) {
    __extends(ArrayTypeSyntax, _super);
    function ArrayTypeSyntax(type, openBracketToken, closeBracketToken) {
        _super.call(this);
        if(type === null) {
            throw Errors.argumentNull('type');
        }
        if(openBracketToken.kind() !== 71 /* OpenBracketToken */ ) {
            throw Errors.argument('openBracketToken');
        }
        if(closeBracketToken.kind() !== 72 /* CloseBracketToken */ ) {
            throw Errors.argument('closeBracketToken');
        }
        this._type = type;
        this._openBracketToken = openBracketToken;
        this._closeBracketToken = closeBracketToken;
    }
    ArrayTypeSyntax.prototype.accept = function (visitor) {
        visitor.visitArrayType(this);
    };
    ArrayTypeSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitArrayType(this);
    };
    ArrayTypeSyntax.prototype.kind = function () {
        return 125 /* ArrayType */ ;
    };
    ArrayTypeSyntax.prototype.isMissing = function () {
        if(!this._type.isMissing()) {
            return false;
        }
        if(!this._openBracketToken.isMissing()) {
            return false;
        }
        if(!this._closeBracketToken.isMissing()) {
            return false;
        }
        return true;
    };
    ArrayTypeSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._type.firstToken()) !== null) {
            return token;
        }
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        return null;
    };
    ArrayTypeSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        if((token = this._type.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    ArrayTypeSyntax.prototype.type = function () {
        return this._type;
    };
    ArrayTypeSyntax.prototype.openBracketToken = function () {
        return this._openBracketToken;
    };
    ArrayTypeSyntax.prototype.closeBracketToken = function () {
        return this._closeBracketToken;
    };
    ArrayTypeSyntax.prototype.update = function (type, openBracketToken, closeBracketToken) {
        if(this._type === type && this._openBracketToken === openBracketToken && this._closeBracketToken === closeBracketToken) {
            return this;
        }
        return new ArrayTypeSyntax(type, openBracketToken, closeBracketToken);
    };
    ArrayTypeSyntax.prototype.withType = function (type) {
        return this.update(type, this._openBracketToken, this._closeBracketToken);
    };
    ArrayTypeSyntax.prototype.withOpenBracketToken = function (openBracketToken) {
        return this.update(this._type, openBracketToken, this._closeBracketToken);
    };
    ArrayTypeSyntax.prototype.withCloseBracketToken = function (closeBracketToken) {
        return this.update(this._type, this._openBracketToken, closeBracketToken);
    };
    ArrayTypeSyntax.prototype.collectTextElements = function (elements) {
        this._type.collectTextElements(elements);
        this._openBracketToken.collectTextElements(elements);
        this._closeBracketToken.collectTextElements(elements);
    };
    return ArrayTypeSyntax;
})(TypeSyntax);
var PredefinedTypeSyntax = (function (_super) {
    __extends(PredefinedTypeSyntax, _super);
    function PredefinedTypeSyntax(keyword) {
        _super.call(this);
        switch(keyword.keywordKind()) {
            case 58 /* AnyKeyword */ :
            case 59 /* BoolKeyword */ :
            case 64 /* NumberKeyword */ :
            case 66 /* StringKeyword */ :
            case 39 /* VoidKeyword */ : {
                break;

            }
            default: {
                throw Errors.argument('keyword');

            }
        }
        this._keyword = keyword;
    }
    PredefinedTypeSyntax.prototype.accept = function (visitor) {
        visitor.visitPredefinedType(this);
    };
    PredefinedTypeSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitPredefinedType(this);
    };
    PredefinedTypeSyntax.prototype.kind = function () {
        return 123 /* PredefinedType */ ;
    };
    PredefinedTypeSyntax.prototype.isMissing = function () {
        if(!this._keyword.isMissing()) {
            return false;
        }
        return true;
    };
    PredefinedTypeSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._keyword.width() > 0) {
            return this._keyword;
        }
        return null;
    };
    PredefinedTypeSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._keyword.width() > 0) {
            return this._keyword;
        }
        return null;
    };
    PredefinedTypeSyntax.prototype.keyword = function () {
        return this._keyword;
    };
    PredefinedTypeSyntax.prototype.update = function (keyword) {
        if(this._keyword === keyword) {
            return this;
        }
        return new PredefinedTypeSyntax(keyword);
    };
    PredefinedTypeSyntax.prototype.withKeyword = function (keyword) {
        return this.update(keyword);
    };
    PredefinedTypeSyntax.prototype.collectTextElements = function (elements) {
        this._keyword.collectTextElements(elements);
    };
    return PredefinedTypeSyntax;
})(TypeSyntax);
var TypeAnnotationSyntax = (function (_super) {
    __extends(TypeAnnotationSyntax, _super);
    function TypeAnnotationSyntax(colonToken, type) {
        _super.call(this);
        if(type === null) {
            throw Errors.argumentNull('type');
        }
        if(colonToken.kind() !== 103 /* ColonToken */ ) {
            throw Errors.argument('colonToken');
        }
        this._colonToken = colonToken;
        this._type = type;
    }
    TypeAnnotationSyntax.prototype.accept = function (visitor) {
        visitor.visitTypeAnnotation(this);
    };
    TypeAnnotationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitTypeAnnotation(this);
    };
    TypeAnnotationSyntax.prototype.kind = function () {
        return 241 /* TypeAnnotation */ ;
    };
    TypeAnnotationSyntax.prototype.isMissing = function () {
        if(!this._colonToken.isMissing()) {
            return false;
        }
        if(!this._type.isMissing()) {
            return false;
        }
        return true;
    };
    TypeAnnotationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._type.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    TypeAnnotationSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._type.lastToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        return null;
    };
    TypeAnnotationSyntax.prototype.colonToken = function () {
        return this._colonToken;
    };
    TypeAnnotationSyntax.prototype.type = function () {
        return this._type;
    };
    TypeAnnotationSyntax.prototype.update = function (colonToken, type) {
        if(this._colonToken === colonToken && this._type === type) {
            return this;
        }
        return new TypeAnnotationSyntax(colonToken, type);
    };
    TypeAnnotationSyntax.prototype.withColonToken = function (colonToken) {
        return this.update(colonToken, this._type);
    };
    TypeAnnotationSyntax.prototype.withType = function (type) {
        return this.update(this._colonToken, type);
    };
    TypeAnnotationSyntax.prototype.collectTextElements = function (elements) {
        this._colonToken.collectTextElements(elements);
        this._type.collectTextElements(elements);
    };
    return TypeAnnotationSyntax;
})(SyntaxNode);
var BlockSyntax = (function (_super) {
    __extends(BlockSyntax, _super);
    function BlockSyntax(openBraceToken, statements, closeBraceToken) {
        _super.call(this);
        if(statements === null) {
            throw Errors.argumentNull('statements');
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._openBraceToken = openBraceToken;
        this._statements = statements;
        this._closeBraceToken = closeBraceToken;
    }
    BlockSyntax.create = function create(openBraceToken, closeBraceToken) {
        return new BlockSyntax(openBraceToken, SyntaxList.empty, closeBraceToken);
    }
    BlockSyntax.prototype.accept = function (visitor) {
        visitor.visitBlock(this);
    };
    BlockSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitBlock(this);
    };
    BlockSyntax.prototype.kind = function () {
        return 138 /* Block */ ;
    };
    BlockSyntax.prototype.isMissing = function () {
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._statements.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    BlockSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._statements.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    BlockSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._statements.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        return null;
    };
    BlockSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    BlockSyntax.prototype.statements = function () {
        return this._statements;
    };
    BlockSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    BlockSyntax.prototype.update = function (openBraceToken, statements, closeBraceToken) {
        if(this._openBraceToken === openBraceToken && this._statements === statements && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new BlockSyntax(openBraceToken, statements, closeBraceToken);
    };
    BlockSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(openBraceToken, this._statements, this._closeBraceToken);
    };
    BlockSyntax.prototype.withStatements = function (statements) {
        return this.update(this._openBraceToken, statements, this._closeBraceToken);
    };
    BlockSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._openBraceToken, this._statements, closeBraceToken);
    };
    BlockSyntax.prototype.collectTextElements = function (elements) {
        this._openBraceToken.collectTextElements(elements);
        this._statements.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    return BlockSyntax;
})(StatementSyntax);
var ParameterSyntax = (function (_super) {
    __extends(ParameterSyntax, _super);
    function ParameterSyntax(dotDotDotToken, publicOrPrivateKeyword, identifier, questionToken, typeAnnotation, equalsValueClause) {
        _super.call(this);
        if(dotDotDotToken !== null) {
            if(dotDotDotToken.kind() !== 74 /* DotDotDotToken */ ) {
                throw Errors.argument('dotDotDotToken');
            }
        }
        if(publicOrPrivateKeyword !== null) {
            if(publicOrPrivateKeyword.keywordKind() !== 55 /* PublicKeyword */  && publicOrPrivateKeyword.keywordKind() !== 53 /* PrivateKeyword */ ) {
                throw Errors.argument('publicOrPrivateKeyword');
            }
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(questionToken !== null) {
            if(questionToken.kind() !== 102 /* QuestionToken */ ) {
                throw Errors.argument('questionToken');
            }
        }
        this._dotDotDotToken = dotDotDotToken;
        this._publicOrPrivateKeyword = publicOrPrivateKeyword;
        this._identifier = identifier;
        this._questionToken = questionToken;
        this._typeAnnotation = typeAnnotation;
        this._equalsValueClause = equalsValueClause;
    }
    ParameterSyntax.create = function create(identifier) {
        return new ParameterSyntax(null, null, identifier, null, null, null);
    }
    ParameterSyntax.prototype.accept = function (visitor) {
        visitor.visitParameter(this);
    };
    ParameterSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitParameter(this);
    };
    ParameterSyntax.prototype.kind = function () {
        return 240 /* Parameter */ ;
    };
    ParameterSyntax.prototype.isMissing = function () {
        if(this._dotDotDotToken !== null && !this._dotDotDotToken.isMissing()) {
            return false;
        }
        if(this._publicOrPrivateKeyword !== null && !this._publicOrPrivateKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(this._questionToken !== null && !this._questionToken.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        if(this._equalsValueClause !== null && !this._equalsValueClause.isMissing()) {
            return false;
        }
        return true;
    };
    ParameterSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._dotDotDotToken !== null && this._dotDotDotToken.width() > 0) {
            return this._dotDotDotToken;
        }
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._questionToken !== null && this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        if(this._equalsValueClause !== null && (token = this._equalsValueClause.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ParameterSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._equalsValueClause !== null && (token = this._equalsValueClause.lastToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if(this._questionToken !== null && this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        if(this._dotDotDotToken !== null && this._dotDotDotToken.width() > 0) {
            return this._dotDotDotToken;
        }
        return null;
    };
    ParameterSyntax.prototype.dotDotDotToken = function () {
        return this._dotDotDotToken;
    };
    ParameterSyntax.prototype.publicOrPrivateKeyword = function () {
        return this._publicOrPrivateKeyword;
    };
    ParameterSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    ParameterSyntax.prototype.questionToken = function () {
        return this._questionToken;
    };
    ParameterSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    ParameterSyntax.prototype.equalsValueClause = function () {
        return this._equalsValueClause;
    };
    ParameterSyntax.prototype.update = function (dotDotDotToken, publicOrPrivateKeyword, identifier, questionToken, typeAnnotation, equalsValueClause) {
        if(this._dotDotDotToken === dotDotDotToken && this._publicOrPrivateKeyword === publicOrPrivateKeyword && this._identifier === identifier && this._questionToken === questionToken && this._typeAnnotation === typeAnnotation && this._equalsValueClause === equalsValueClause) {
            return this;
        }
        return new ParameterSyntax(dotDotDotToken, publicOrPrivateKeyword, identifier, questionToken, typeAnnotation, equalsValueClause);
    };
    ParameterSyntax.prototype.withDotDotDotToken = function (dotDotDotToken) {
        return this.update(dotDotDotToken, this._publicOrPrivateKeyword, this._identifier, this._questionToken, this._typeAnnotation, this._equalsValueClause);
    };
    ParameterSyntax.prototype.withPublicOrPrivateKeyword = function (publicOrPrivateKeyword) {
        return this.update(this._dotDotDotToken, publicOrPrivateKeyword, this._identifier, this._questionToken, this._typeAnnotation, this._equalsValueClause);
    };
    ParameterSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._dotDotDotToken, this._publicOrPrivateKeyword, identifier, this._questionToken, this._typeAnnotation, this._equalsValueClause);
    };
    ParameterSyntax.prototype.withQuestionToken = function (questionToken) {
        return this.update(this._dotDotDotToken, this._publicOrPrivateKeyword, this._identifier, questionToken, this._typeAnnotation, this._equalsValueClause);
    };
    ParameterSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._dotDotDotToken, this._publicOrPrivateKeyword, this._identifier, this._questionToken, typeAnnotation, this._equalsValueClause);
    };
    ParameterSyntax.prototype.withEqualsValueClause = function (equalsValueClause) {
        return this.update(this._dotDotDotToken, this._publicOrPrivateKeyword, this._identifier, this._questionToken, this._typeAnnotation, equalsValueClause);
    };
    ParameterSyntax.prototype.collectTextElements = function (elements) {
        if(this._dotDotDotToken !== null) {
            this._dotDotDotToken.collectTextElements(elements);
        }
        if(this._publicOrPrivateKeyword !== null) {
            this._publicOrPrivateKeyword.collectTextElements(elements);
        }
        this._identifier.collectTextElements(elements);
        if(this._questionToken !== null) {
            this._questionToken.collectTextElements(elements);
        }
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
        if(this._equalsValueClause !== null) {
            this._equalsValueClause.collectTextElements(elements);
        }
    };
    return ParameterSyntax;
})(SyntaxNode);
var MemberAccessExpressionSyntax = (function (_super) {
    __extends(MemberAccessExpressionSyntax, _super);
    function MemberAccessExpressionSyntax(expression, dotToken, identifierName) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(identifierName === null) {
            throw Errors.argumentNull('identifierName');
        }
        if(dotToken.kind() !== 73 /* DotToken */ ) {
            throw Errors.argument('dotToken');
        }
        this._expression = expression;
        this._dotToken = dotToken;
        this._identifierName = identifierName;
    }
    MemberAccessExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitMemberAccessExpression(this);
    };
    MemberAccessExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitMemberAccessExpression(this);
    };
    MemberAccessExpressionSyntax.prototype.kind = function () {
        return 209 /* MemberAccessExpression */ ;
    };
    MemberAccessExpressionSyntax.prototype.isMissing = function () {
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._dotToken.isMissing()) {
            return false;
        }
        if(!this._identifierName.isMissing()) {
            return false;
        }
        return true;
    };
    MemberAccessExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._dotToken.width() > 0) {
            return this._dotToken;
        }
        if((token = this._identifierName.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    MemberAccessExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._identifierName.lastToken()) !== null) {
            return token;
        }
        if(this._dotToken.width() > 0) {
            return this._dotToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    MemberAccessExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    MemberAccessExpressionSyntax.prototype.dotToken = function () {
        return this._dotToken;
    };
    MemberAccessExpressionSyntax.prototype.identifierName = function () {
        return this._identifierName;
    };
    MemberAccessExpressionSyntax.prototype.update = function (expression, dotToken, identifierName) {
        if(this._expression === expression && this._dotToken === dotToken && this._identifierName === identifierName) {
            return this;
        }
        return new MemberAccessExpressionSyntax(expression, dotToken, identifierName);
    };
    MemberAccessExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(expression, this._dotToken, this._identifierName);
    };
    MemberAccessExpressionSyntax.prototype.withDotToken = function (dotToken) {
        return this.update(this._expression, dotToken, this._identifierName);
    };
    MemberAccessExpressionSyntax.prototype.withIdentifierName = function (identifierName) {
        return this.update(this._expression, this._dotToken, identifierName);
    };
    MemberAccessExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._expression.collectTextElements(elements);
        this._dotToken.collectTextElements(elements);
        this._identifierName.collectTextElements(elements);
    };
    return MemberAccessExpressionSyntax;
})(UnaryExpressionSyntax);
var PostfixUnaryExpressionSyntax = (function (_super) {
    __extends(PostfixUnaryExpressionSyntax, _super);
    function PostfixUnaryExpressionSyntax(kind, operand, operatorToken) {
        _super.call(this);
        if(kind === null) {
            throw Errors.argumentNull('kind');
        }
        if(operand === null) {
            throw Errors.argumentNull('operand');
        }
        if(operatorToken.kind() !== 90 /* PlusPlusToken */  && operatorToken.kind() !== 91 /* MinusMinusToken */ ) {
            throw Errors.argument('operatorToken');
        }
        this._kind = kind;
        this._operand = operand;
        this._operatorToken = operatorToken;
    }
    PostfixUnaryExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitPostfixUnaryExpression(this);
    };
    PostfixUnaryExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitPostfixUnaryExpression(this);
    };
    PostfixUnaryExpressionSyntax.prototype.isMissing = function () {
        if(!this._operand.isMissing()) {
            return false;
        }
        if(!this._operatorToken.isMissing()) {
            return false;
        }
        return true;
    };
    PostfixUnaryExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._operand.firstToken()) !== null) {
            return token;
        }
        if(this._operatorToken.width() > 0) {
            return this._operatorToken;
        }
        return null;
    };
    PostfixUnaryExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._operatorToken.width() > 0) {
            return this._operatorToken;
        }
        if((token = this._operand.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    PostfixUnaryExpressionSyntax.prototype.kind = function () {
        return this._kind;
    };
    PostfixUnaryExpressionSyntax.prototype.operand = function () {
        return this._operand;
    };
    PostfixUnaryExpressionSyntax.prototype.operatorToken = function () {
        return this._operatorToken;
    };
    PostfixUnaryExpressionSyntax.prototype.update = function (kind, operand, operatorToken) {
        if(this._kind === kind && this._operand === operand && this._operatorToken === operatorToken) {
            return this;
        }
        return new PostfixUnaryExpressionSyntax(kind, operand, operatorToken);
    };
    PostfixUnaryExpressionSyntax.prototype.withKind = function (kind) {
        return this.update(kind, this._operand, this._operatorToken);
    };
    PostfixUnaryExpressionSyntax.prototype.withOperand = function (operand) {
        return this.update(this._kind, operand, this._operatorToken);
    };
    PostfixUnaryExpressionSyntax.prototype.withOperatorToken = function (operatorToken) {
        return this.update(this._kind, this._operand, operatorToken);
    };
    PostfixUnaryExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._operand.collectTextElements(elements);
        this._operatorToken.collectTextElements(elements);
    };
    return PostfixUnaryExpressionSyntax;
})(UnaryExpressionSyntax);
var ElementAccessExpressionSyntax = (function (_super) {
    __extends(ElementAccessExpressionSyntax, _super);
    function ElementAccessExpressionSyntax(expression, openBracketToken, argumentExpression, closeBracketToken) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(argumentExpression === null) {
            throw Errors.argumentNull('argumentExpression');
        }
        if(openBracketToken.kind() !== 71 /* OpenBracketToken */ ) {
            throw Errors.argument('openBracketToken');
        }
        if(closeBracketToken.kind() !== 72 /* CloseBracketToken */ ) {
            throw Errors.argument('closeBracketToken');
        }
        this._expression = expression;
        this._openBracketToken = openBracketToken;
        this._argumentExpression = argumentExpression;
        this._closeBracketToken = closeBracketToken;
    }
    ElementAccessExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitElementAccessExpression(this);
    };
    ElementAccessExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitElementAccessExpression(this);
    };
    ElementAccessExpressionSyntax.prototype.kind = function () {
        return 219 /* ElementAccessExpression */ ;
    };
    ElementAccessExpressionSyntax.prototype.isMissing = function () {
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._openBracketToken.isMissing()) {
            return false;
        }
        if(!this._argumentExpression.isMissing()) {
            return false;
        }
        if(!this._closeBracketToken.isMissing()) {
            return false;
        }
        return true;
    };
    ElementAccessExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        if((token = this._argumentExpression.firstToken()) !== null) {
            return token;
        }
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        return null;
    };
    ElementAccessExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        if((token = this._argumentExpression.lastToken()) !== null) {
            return token;
        }
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    ElementAccessExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    ElementAccessExpressionSyntax.prototype.openBracketToken = function () {
        return this._openBracketToken;
    };
    ElementAccessExpressionSyntax.prototype.argumentExpression = function () {
        return this._argumentExpression;
    };
    ElementAccessExpressionSyntax.prototype.closeBracketToken = function () {
        return this._closeBracketToken;
    };
    ElementAccessExpressionSyntax.prototype.update = function (expression, openBracketToken, argumentExpression, closeBracketToken) {
        if(this._expression === expression && this._openBracketToken === openBracketToken && this._argumentExpression === argumentExpression && this._closeBracketToken === closeBracketToken) {
            return this;
        }
        return new ElementAccessExpressionSyntax(expression, openBracketToken, argumentExpression, closeBracketToken);
    };
    ElementAccessExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(expression, this._openBracketToken, this._argumentExpression, this._closeBracketToken);
    };
    ElementAccessExpressionSyntax.prototype.withOpenBracketToken = function (openBracketToken) {
        return this.update(this._expression, openBracketToken, this._argumentExpression, this._closeBracketToken);
    };
    ElementAccessExpressionSyntax.prototype.withArgumentExpression = function (argumentExpression) {
        return this.update(this._expression, this._openBracketToken, argumentExpression, this._closeBracketToken);
    };
    ElementAccessExpressionSyntax.prototype.withCloseBracketToken = function (closeBracketToken) {
        return this.update(this._expression, this._openBracketToken, this._argumentExpression, closeBracketToken);
    };
    ElementAccessExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._expression.collectTextElements(elements);
        this._openBracketToken.collectTextElements(elements);
        this._argumentExpression.collectTextElements(elements);
        this._closeBracketToken.collectTextElements(elements);
    };
    return ElementAccessExpressionSyntax;
})(UnaryExpressionSyntax);
var InvocationExpressionSyntax = (function (_super) {
    __extends(InvocationExpressionSyntax, _super);
    function InvocationExpressionSyntax(expression, argumentList) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(argumentList === null) {
            throw Errors.argumentNull('argumentList');
        }
        this._expression = expression;
        this._argumentList = argumentList;
    }
    InvocationExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitInvocationExpression(this);
    };
    InvocationExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitInvocationExpression(this);
    };
    InvocationExpressionSyntax.prototype.kind = function () {
        return 210 /* InvocationExpression */ ;
    };
    InvocationExpressionSyntax.prototype.isMissing = function () {
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._argumentList.isMissing()) {
            return false;
        }
        return true;
    };
    InvocationExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if((token = this._argumentList.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    InvocationExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._argumentList.lastToken()) !== null) {
            return token;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    InvocationExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    InvocationExpressionSyntax.prototype.argumentList = function () {
        return this._argumentList;
    };
    InvocationExpressionSyntax.prototype.update = function (expression, argumentList) {
        if(this._expression === expression && this._argumentList === argumentList) {
            return this;
        }
        return new InvocationExpressionSyntax(expression, argumentList);
    };
    InvocationExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(expression, this._argumentList);
    };
    InvocationExpressionSyntax.prototype.withArgumentList = function (argumentList) {
        return this.update(this._expression, argumentList);
    };
    InvocationExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._expression.collectTextElements(elements);
        this._argumentList.collectTextElements(elements);
    };
    return InvocationExpressionSyntax;
})(UnaryExpressionSyntax);
var ArgumentListSyntax = (function (_super) {
    __extends(ArgumentListSyntax, _super);
    function ArgumentListSyntax(openParenToken, arguments, closeParenToken) {
        _super.call(this);
        if(arguments === null) {
            throw Errors.argumentNull('arguments');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._openParenToken = openParenToken;
        this._arguments = arguments;
        this._closeParenToken = closeParenToken;
    }
    ArgumentListSyntax.create = function create(openParenToken, closeParenToken) {
        return new ArgumentListSyntax(openParenToken, SeparatedSyntaxList.empty, closeParenToken);
    }
    ArgumentListSyntax.prototype.accept = function (visitor) {
        visitor.visitArgumentList(this);
    };
    ArgumentListSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitArgumentList(this);
    };
    ArgumentListSyntax.prototype.kind = function () {
        return 226 /* ArgumentList */ ;
    };
    ArgumentListSyntax.prototype.isMissing = function () {
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._arguments.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        return true;
    };
    ArgumentListSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._arguments.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        return null;
    };
    ArgumentListSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._arguments.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        return null;
    };
    ArgumentListSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    ArgumentListSyntax.prototype.arguments = function () {
        return this._arguments;
    };
    ArgumentListSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    ArgumentListSyntax.prototype.update = function (openParenToken, _arguments, closeParenToken) {
        if(this._openParenToken === openParenToken && this._arguments === _arguments && this._closeParenToken === closeParenToken) {
            return this;
        }
        return new ArgumentListSyntax(openParenToken, _arguments, closeParenToken);
    };
    ArgumentListSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(openParenToken, this._arguments, this._closeParenToken);
    };
    ArgumentListSyntax.prototype.withArguments = function (_arguments) {
        return this.update(this._openParenToken, _arguments, this._closeParenToken);
    };
    ArgumentListSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._openParenToken, this._arguments, closeParenToken);
    };
    ArgumentListSyntax.prototype.collectTextElements = function (elements) {
        this._openParenToken.collectTextElements(elements);
        this._arguments.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
    };
    return ArgumentListSyntax;
})(SyntaxNode);
var BinaryExpressionSyntax = (function (_super) {
    __extends(BinaryExpressionSyntax, _super);
    function BinaryExpressionSyntax(kind, left, operatorToken, right) {
        _super.call(this);
        if(kind === null) {
            throw Errors.argumentNull('kind');
        }
        if(left === null) {
            throw Errors.argumentNull('left');
        }
        if(right === null) {
            throw Errors.argumentNull('right');
        }
        switch(operatorToken.kind()) {
            case 88 /* AsteriskToken */ :
            case 115 /* SlashToken */ :
            case 89 /* PercentToken */ :
            case 86 /* PlusToken */ :
            case 87 /* MinusToken */ :
            case 92 /* LessThanLessThanToken */ :
            case 93 /* GreaterThanGreaterThanToken */ :
            case 94 /* GreaterThanGreaterThanGreaterThanToken */ :
            case 77 /* LessThanToken */ :
            case 78 /* GreaterThanToken */ :
            case 79 /* LessThanEqualsToken */ :
            case 80 /* GreaterThanEqualsToken */ :
            case 81 /* EqualsEqualsToken */ :
            case 83 /* ExclamationEqualsToken */ :
            case 84 /* EqualsEqualsEqualsToken */ :
            case 85 /* ExclamationEqualsEqualsToken */ :
            case 95 /* AmpersandToken */ :
            case 97 /* CaretToken */ :
            case 96 /* BarToken */ :
            case 100 /* AmpersandAmpersandToken */ :
            case 101 /* BarBarToken */ :
            case 113 /* BarEqualsToken */ :
            case 112 /* AmpersandEqualsToken */ :
            case 114 /* CaretEqualsToken */ :
            case 109 /* LessThanLessThanEqualsToken */ :
            case 110 /* GreaterThanGreaterThanEqualsToken */ :
            case 111 /* GreaterThanGreaterThanGreaterThanEqualsToken */ :
            case 105 /* PlusEqualsToken */ :
            case 106 /* MinusEqualsToken */ :
            case 107 /* AsteriskEqualsToken */ :
            case 116 /* SlashEqualsToken */ :
            case 108 /* PercentEqualsToken */ :
            case 104 /* EqualsToken */ :
            case 76 /* CommaToken */ : {
                break;

            }
            case 9 /* IdentifierNameToken */ : {
                if(operatorToken.keywordKind() !== 28 /* InstanceOfKeyword */  && operatorToken.keywordKind() !== 27 /* InKeyword */ ) {
                    throw Errors.argument('operatorToken');
                }
                break;

            }
            default: {
                throw Errors.argument('operatorToken');

            }
        }
        this._kind = kind;
        this._left = left;
        this._operatorToken = operatorToken;
        this._right = right;
    }
    BinaryExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitBinaryExpression(this);
    };
    BinaryExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitBinaryExpression(this);
    };
    BinaryExpressionSyntax.prototype.isMissing = function () {
        if(!this._left.isMissing()) {
            return false;
        }
        if(!this._operatorToken.isMissing()) {
            return false;
        }
        if(!this._right.isMissing()) {
            return false;
        }
        return true;
    };
    BinaryExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._left.firstToken()) !== null) {
            return token;
        }
        if(this._operatorToken.width() > 0) {
            return this._operatorToken;
        }
        if((token = this._right.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    BinaryExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._right.lastToken()) !== null) {
            return token;
        }
        if(this._operatorToken.width() > 0) {
            return this._operatorToken;
        }
        if((token = this._left.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    BinaryExpressionSyntax.prototype.kind = function () {
        return this._kind;
    };
    BinaryExpressionSyntax.prototype.left = function () {
        return this._left;
    };
    BinaryExpressionSyntax.prototype.operatorToken = function () {
        return this._operatorToken;
    };
    BinaryExpressionSyntax.prototype.right = function () {
        return this._right;
    };
    BinaryExpressionSyntax.prototype.update = function (kind, left, operatorToken, right) {
        if(this._kind === kind && this._left === left && this._operatorToken === operatorToken && this._right === right) {
            return this;
        }
        return new BinaryExpressionSyntax(kind, left, operatorToken, right);
    };
    BinaryExpressionSyntax.prototype.withKind = function (kind) {
        return this.update(kind, this._left, this._operatorToken, this._right);
    };
    BinaryExpressionSyntax.prototype.withLeft = function (left) {
        return this.update(this._kind, left, this._operatorToken, this._right);
    };
    BinaryExpressionSyntax.prototype.withOperatorToken = function (operatorToken) {
        return this.update(this._kind, this._left, operatorToken, this._right);
    };
    BinaryExpressionSyntax.prototype.withRight = function (right) {
        return this.update(this._kind, this._left, this._operatorToken, right);
    };
    BinaryExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._left.collectTextElements(elements);
        this._operatorToken.collectTextElements(elements);
        this._right.collectTextElements(elements);
    };
    return BinaryExpressionSyntax;
})(ExpressionSyntax);
var ConditionalExpressionSyntax = (function (_super) {
    __extends(ConditionalExpressionSyntax, _super);
    function ConditionalExpressionSyntax(condition, questionToken, whenTrue, colonToken, whenFalse) {
        _super.call(this);
        if(condition === null) {
            throw Errors.argumentNull('condition');
        }
        if(whenTrue === null) {
            throw Errors.argumentNull('whenTrue');
        }
        if(whenFalse === null) {
            throw Errors.argumentNull('whenFalse');
        }
        if(questionToken.kind() !== 102 /* QuestionToken */ ) {
            throw Errors.argument('questionToken');
        }
        if(colonToken.kind() !== 103 /* ColonToken */ ) {
            throw Errors.argument('colonToken');
        }
        this._condition = condition;
        this._questionToken = questionToken;
        this._whenTrue = whenTrue;
        this._colonToken = colonToken;
        this._whenFalse = whenFalse;
    }
    ConditionalExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitConditionalExpression(this);
    };
    ConditionalExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitConditionalExpression(this);
    };
    ConditionalExpressionSyntax.prototype.kind = function () {
        return 183 /* ConditionalExpression */ ;
    };
    ConditionalExpressionSyntax.prototype.isMissing = function () {
        if(!this._condition.isMissing()) {
            return false;
        }
        if(!this._questionToken.isMissing()) {
            return false;
        }
        if(!this._whenTrue.isMissing()) {
            return false;
        }
        if(!this._colonToken.isMissing()) {
            return false;
        }
        if(!this._whenFalse.isMissing()) {
            return false;
        }
        return true;
    };
    ConditionalExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._condition.firstToken()) !== null) {
            return token;
        }
        if(this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if((token = this._whenTrue.firstToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._whenFalse.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ConditionalExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._whenFalse.lastToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._whenTrue.lastToken()) !== null) {
            return token;
        }
        if(this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if((token = this._condition.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    ConditionalExpressionSyntax.prototype.condition = function () {
        return this._condition;
    };
    ConditionalExpressionSyntax.prototype.questionToken = function () {
        return this._questionToken;
    };
    ConditionalExpressionSyntax.prototype.whenTrue = function () {
        return this._whenTrue;
    };
    ConditionalExpressionSyntax.prototype.colonToken = function () {
        return this._colonToken;
    };
    ConditionalExpressionSyntax.prototype.whenFalse = function () {
        return this._whenFalse;
    };
    ConditionalExpressionSyntax.prototype.update = function (condition, questionToken, whenTrue, colonToken, whenFalse) {
        if(this._condition === condition && this._questionToken === questionToken && this._whenTrue === whenTrue && this._colonToken === colonToken && this._whenFalse === whenFalse) {
            return this;
        }
        return new ConditionalExpressionSyntax(condition, questionToken, whenTrue, colonToken, whenFalse);
    };
    ConditionalExpressionSyntax.prototype.withCondition = function (condition) {
        return this.update(condition, this._questionToken, this._whenTrue, this._colonToken, this._whenFalse);
    };
    ConditionalExpressionSyntax.prototype.withQuestionToken = function (questionToken) {
        return this.update(this._condition, questionToken, this._whenTrue, this._colonToken, this._whenFalse);
    };
    ConditionalExpressionSyntax.prototype.withWhenTrue = function (whenTrue) {
        return this.update(this._condition, this._questionToken, whenTrue, this._colonToken, this._whenFalse);
    };
    ConditionalExpressionSyntax.prototype.withColonToken = function (colonToken) {
        return this.update(this._condition, this._questionToken, this._whenTrue, colonToken, this._whenFalse);
    };
    ConditionalExpressionSyntax.prototype.withWhenFalse = function (whenFalse) {
        return this.update(this._condition, this._questionToken, this._whenTrue, this._colonToken, whenFalse);
    };
    ConditionalExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._condition.collectTextElements(elements);
        this._questionToken.collectTextElements(elements);
        this._whenTrue.collectTextElements(elements);
        this._colonToken.collectTextElements(elements);
        this._whenFalse.collectTextElements(elements);
    };
    return ConditionalExpressionSyntax;
})(ExpressionSyntax);
var TypeMemberSyntax = (function (_super) {
    __extends(TypeMemberSyntax, _super);
    function TypeMemberSyntax() {
        _super.call(this);
    }
    TypeMemberSyntax.prototype.typeAnnotation = function () {
        throw Errors.abstract();
    };
    return TypeMemberSyntax;
})(SyntaxNode);
var ConstructSignatureSyntax = (function (_super) {
    __extends(ConstructSignatureSyntax, _super);
    function ConstructSignatureSyntax(newKeyword, parameterList, typeAnnotation) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(newKeyword.keywordKind() !== 29 /* NewKeyword */ ) {
            throw Errors.argument('newKeyword');
        }
        this._newKeyword = newKeyword;
        this._parameterList = parameterList;
        this._typeAnnotation = typeAnnotation;
    }
    ConstructSignatureSyntax.create = function create(newKeyword, parameterList) {
        return new ConstructSignatureSyntax(newKeyword, parameterList, null);
    }
    ConstructSignatureSyntax.prototype.accept = function (visitor) {
        visitor.visitConstructSignature(this);
    };
    ConstructSignatureSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitConstructSignature(this);
    };
    ConstructSignatureSyntax.prototype.kind = function () {
        return 237 /* ConstructSignature */ ;
    };
    ConstructSignatureSyntax.prototype.isMissing = function () {
        if(!this._newKeyword.isMissing()) {
            return false;
        }
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        return true;
    };
    ConstructSignatureSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._newKeyword.width() > 0) {
            return this._newKeyword;
        }
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ConstructSignatureSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        if(this._newKeyword.width() > 0) {
            return this._newKeyword;
        }
        return null;
    };
    ConstructSignatureSyntax.prototype.newKeyword = function () {
        return this._newKeyword;
    };
    ConstructSignatureSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    ConstructSignatureSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    ConstructSignatureSyntax.prototype.update = function (newKeyword, parameterList, typeAnnotation) {
        if(this._newKeyword === newKeyword && this._parameterList === parameterList && this._typeAnnotation === typeAnnotation) {
            return this;
        }
        return new ConstructSignatureSyntax(newKeyword, parameterList, typeAnnotation);
    };
    ConstructSignatureSyntax.prototype.withNewKeyword = function (newKeyword) {
        return this.update(newKeyword, this._parameterList, this._typeAnnotation);
    };
    ConstructSignatureSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(this._newKeyword, parameterList, this._typeAnnotation);
    };
    ConstructSignatureSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._newKeyword, this._parameterList, typeAnnotation);
    };
    ConstructSignatureSyntax.prototype.collectTextElements = function (elements) {
        this._newKeyword.collectTextElements(elements);
        this._parameterList.collectTextElements(elements);
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
    };
    return ConstructSignatureSyntax;
})(TypeMemberSyntax);
var FunctionSignatureSyntax = (function (_super) {
    __extends(FunctionSignatureSyntax, _super);
    function FunctionSignatureSyntax(identifier, questionToken, parameterList, typeAnnotation) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(questionToken !== null) {
            if(questionToken.kind() !== 102 /* QuestionToken */ ) {
                throw Errors.argument('questionToken');
            }
        }
        this._identifier = identifier;
        this._questionToken = questionToken;
        this._parameterList = parameterList;
        this._typeAnnotation = typeAnnotation;
    }
    FunctionSignatureSyntax.create = function create(identifier, parameterList) {
        return new FunctionSignatureSyntax(identifier, null, parameterList, null);
    }
    FunctionSignatureSyntax.prototype.accept = function (visitor) {
        visitor.visitFunctionSignature(this);
    };
    FunctionSignatureSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitFunctionSignature(this);
    };
    FunctionSignatureSyntax.prototype.kind = function () {
        return 239 /* FunctionSignature */ ;
    };
    FunctionSignatureSyntax.prototype.isMissing = function () {
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(this._questionToken !== null && !this._questionToken.isMissing()) {
            return false;
        }
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        return true;
    };
    FunctionSignatureSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._questionToken !== null && this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    FunctionSignatureSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        if(this._questionToken !== null && this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    FunctionSignatureSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    FunctionSignatureSyntax.prototype.questionToken = function () {
        return this._questionToken;
    };
    FunctionSignatureSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    FunctionSignatureSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    FunctionSignatureSyntax.prototype.update = function (identifier, questionToken, parameterList, typeAnnotation) {
        if(this._identifier === identifier && this._questionToken === questionToken && this._parameterList === parameterList && this._typeAnnotation === typeAnnotation) {
            return this;
        }
        return new FunctionSignatureSyntax(identifier, questionToken, parameterList, typeAnnotation);
    };
    FunctionSignatureSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(identifier, this._questionToken, this._parameterList, this._typeAnnotation);
    };
    FunctionSignatureSyntax.prototype.withQuestionToken = function (questionToken) {
        return this.update(this._identifier, questionToken, this._parameterList, this._typeAnnotation);
    };
    FunctionSignatureSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(this._identifier, this._questionToken, parameterList, this._typeAnnotation);
    };
    FunctionSignatureSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._identifier, this._questionToken, this._parameterList, typeAnnotation);
    };
    FunctionSignatureSyntax.prototype.collectTextElements = function (elements) {
        this._identifier.collectTextElements(elements);
        if(this._questionToken !== null) {
            this._questionToken.collectTextElements(elements);
        }
        this._parameterList.collectTextElements(elements);
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
    };
    return FunctionSignatureSyntax;
})(TypeMemberSyntax);
var IndexSignatureSyntax = (function (_super) {
    __extends(IndexSignatureSyntax, _super);
    function IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, typeAnnotation) {
        _super.call(this);
        if(parameter === null) {
            throw Errors.argumentNull('parameter');
        }
        if(openBracketToken.kind() !== 71 /* OpenBracketToken */ ) {
            throw Errors.argument('openBracketToken');
        }
        if(closeBracketToken.kind() !== 72 /* CloseBracketToken */ ) {
            throw Errors.argument('closeBracketToken');
        }
        this._openBracketToken = openBracketToken;
        this._parameter = parameter;
        this._closeBracketToken = closeBracketToken;
        this._typeAnnotation = typeAnnotation;
    }
    IndexSignatureSyntax.create = function create(openBracketToken, parameter, closeBracketToken) {
        return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, null);
    }
    IndexSignatureSyntax.prototype.accept = function (visitor) {
        visitor.visitIndexSignature(this);
    };
    IndexSignatureSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitIndexSignature(this);
    };
    IndexSignatureSyntax.prototype.kind = function () {
        return 238 /* IndexSignature */ ;
    };
    IndexSignatureSyntax.prototype.isMissing = function () {
        if(!this._openBracketToken.isMissing()) {
            return false;
        }
        if(!this._parameter.isMissing()) {
            return false;
        }
        if(!this._closeBracketToken.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        return true;
    };
    IndexSignatureSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        if((token = this._parameter.firstToken()) !== null) {
            return token;
        }
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    IndexSignatureSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if(this._closeBracketToken.width() > 0) {
            return this._closeBracketToken;
        }
        if((token = this._parameter.lastToken()) !== null) {
            return token;
        }
        if(this._openBracketToken.width() > 0) {
            return this._openBracketToken;
        }
        return null;
    };
    IndexSignatureSyntax.prototype.openBracketToken = function () {
        return this._openBracketToken;
    };
    IndexSignatureSyntax.prototype.parameter = function () {
        return this._parameter;
    };
    IndexSignatureSyntax.prototype.closeBracketToken = function () {
        return this._closeBracketToken;
    };
    IndexSignatureSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    IndexSignatureSyntax.prototype.update = function (openBracketToken, parameter, closeBracketToken, typeAnnotation) {
        if(this._openBracketToken === openBracketToken && this._parameter === parameter && this._closeBracketToken === closeBracketToken && this._typeAnnotation === typeAnnotation) {
            return this;
        }
        return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, typeAnnotation);
    };
    IndexSignatureSyntax.prototype.withOpenBracketToken = function (openBracketToken) {
        return this.update(openBracketToken, this._parameter, this._closeBracketToken, this._typeAnnotation);
    };
    IndexSignatureSyntax.prototype.withParameter = function (parameter) {
        return this.update(this._openBracketToken, parameter, this._closeBracketToken, this._typeAnnotation);
    };
    IndexSignatureSyntax.prototype.withCloseBracketToken = function (closeBracketToken) {
        return this.update(this._openBracketToken, this._parameter, closeBracketToken, this._typeAnnotation);
    };
    IndexSignatureSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._openBracketToken, this._parameter, this._closeBracketToken, typeAnnotation);
    };
    IndexSignatureSyntax.prototype.collectTextElements = function (elements) {
        this._openBracketToken.collectTextElements(elements);
        this._parameter.collectTextElements(elements);
        this._closeBracketToken.collectTextElements(elements);
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
    };
    return IndexSignatureSyntax;
})(TypeMemberSyntax);
var PropertySignatureSyntax = (function (_super) {
    __extends(PropertySignatureSyntax, _super);
    function PropertySignatureSyntax(identifier, questionToken, typeAnnotation) {
        _super.call(this);
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(questionToken !== null) {
            if(questionToken.kind() !== 102 /* QuestionToken */ ) {
                throw Errors.argument('questionToken');
            }
        }
        this._identifier = identifier;
        this._questionToken = questionToken;
        this._typeAnnotation = typeAnnotation;
    }
    PropertySignatureSyntax.create = function create(identifier) {
        return new PropertySignatureSyntax(identifier, null, null);
    }
    PropertySignatureSyntax.prototype.accept = function (visitor) {
        visitor.visitPropertySignature(this);
    };
    PropertySignatureSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitPropertySignature(this);
    };
    PropertySignatureSyntax.prototype.kind = function () {
        return 235 /* PropertySignature */ ;
    };
    PropertySignatureSyntax.prototype.isMissing = function () {
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(this._questionToken !== null && !this._questionToken.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        return true;
    };
    PropertySignatureSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._questionToken !== null && this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    PropertySignatureSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if(this._questionToken !== null && this._questionToken.width() > 0) {
            return this._questionToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    PropertySignatureSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    PropertySignatureSyntax.prototype.questionToken = function () {
        return this._questionToken;
    };
    PropertySignatureSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    PropertySignatureSyntax.prototype.update = function (identifier, questionToken, typeAnnotation) {
        if(this._identifier === identifier && this._questionToken === questionToken && this._typeAnnotation === typeAnnotation) {
            return this;
        }
        return new PropertySignatureSyntax(identifier, questionToken, typeAnnotation);
    };
    PropertySignatureSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(identifier, this._questionToken, this._typeAnnotation);
    };
    PropertySignatureSyntax.prototype.withQuestionToken = function (questionToken) {
        return this.update(this._identifier, questionToken, this._typeAnnotation);
    };
    PropertySignatureSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._identifier, this._questionToken, typeAnnotation);
    };
    PropertySignatureSyntax.prototype.collectTextElements = function (elements) {
        this._identifier.collectTextElements(elements);
        if(this._questionToken !== null) {
            this._questionToken.collectTextElements(elements);
        }
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
    };
    return PropertySignatureSyntax;
})(TypeMemberSyntax);
var ParameterListSyntax = (function (_super) {
    __extends(ParameterListSyntax, _super);
    function ParameterListSyntax(openParenToken, parameters, closeParenToken) {
        _super.call(this);
        if(parameters === null) {
            throw Errors.argumentNull('parameters');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._openParenToken = openParenToken;
        this._parameters = parameters;
        this._closeParenToken = closeParenToken;
    }
    ParameterListSyntax.create = function create(openParenToken, closeParenToken) {
        return new ParameterListSyntax(openParenToken, SeparatedSyntaxList.empty, closeParenToken);
    }
    ParameterListSyntax.prototype.accept = function (visitor) {
        visitor.visitParameterList(this);
    };
    ParameterListSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitParameterList(this);
    };
    ParameterListSyntax.prototype.kind = function () {
        return 225 /* ParameterList */ ;
    };
    ParameterListSyntax.prototype.isMissing = function () {
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._parameters.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        return true;
    };
    ParameterListSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._parameters.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        return null;
    };
    ParameterListSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._parameters.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        return null;
    };
    ParameterListSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    ParameterListSyntax.prototype.parameters = function () {
        return this._parameters;
    };
    ParameterListSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    ParameterListSyntax.prototype.update = function (openParenToken, parameters, closeParenToken) {
        if(this._openParenToken === openParenToken && this._parameters === parameters && this._closeParenToken === closeParenToken) {
            return this;
        }
        return new ParameterListSyntax(openParenToken, parameters, closeParenToken);
    };
    ParameterListSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(openParenToken, this._parameters, this._closeParenToken);
    };
    ParameterListSyntax.prototype.withParameters = function (parameters) {
        return this.update(this._openParenToken, parameters, this._closeParenToken);
    };
    ParameterListSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._openParenToken, this._parameters, closeParenToken);
    };
    ParameterListSyntax.prototype.collectTextElements = function (elements) {
        this._openParenToken.collectTextElements(elements);
        this._parameters.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
    };
    return ParameterListSyntax;
})(SyntaxNode);
var CallSignatureSyntax = (function (_super) {
    __extends(CallSignatureSyntax, _super);
    function CallSignatureSyntax(parameterList, typeAnnotation) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        this._parameterList = parameterList;
        this._typeAnnotation = typeAnnotation;
    }
    CallSignatureSyntax.create = function create(parameterList) {
        return new CallSignatureSyntax(parameterList, null);
    }
    CallSignatureSyntax.prototype.accept = function (visitor) {
        visitor.visitCallSignature(this);
    };
    CallSignatureSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitCallSignature(this);
    };
    CallSignatureSyntax.prototype.kind = function () {
        return 236 /* CallSignature */ ;
    };
    CallSignatureSyntax.prototype.isMissing = function () {
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        return true;
    };
    CallSignatureSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    CallSignatureSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    CallSignatureSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    CallSignatureSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    CallSignatureSyntax.prototype.update = function (parameterList, typeAnnotation) {
        if(this._parameterList === parameterList && this._typeAnnotation === typeAnnotation) {
            return this;
        }
        return new CallSignatureSyntax(parameterList, typeAnnotation);
    };
    CallSignatureSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(parameterList, this._typeAnnotation);
    };
    CallSignatureSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._parameterList, typeAnnotation);
    };
    CallSignatureSyntax.prototype.collectTextElements = function (elements) {
        this._parameterList.collectTextElements(elements);
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
    };
    return CallSignatureSyntax;
})(TypeMemberSyntax);
var ElseClauseSyntax = (function (_super) {
    __extends(ElseClauseSyntax, _super);
    function ElseClauseSyntax(elseKeyword, statement) {
        _super.call(this);
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(elseKeyword.keywordKind() !== 21 /* ElseKeyword */ ) {
            throw Errors.argument('elseKeyword');
        }
        this._elseKeyword = elseKeyword;
        this._statement = statement;
    }
    ElseClauseSyntax.prototype.accept = function (visitor) {
        visitor.visitElseClause(this);
    };
    ElseClauseSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitElseClause(this);
    };
    ElseClauseSyntax.prototype.kind = function () {
        return 232 /* ElseClause */ ;
    };
    ElseClauseSyntax.prototype.isMissing = function () {
        if(!this._elseKeyword.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        return true;
    };
    ElseClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._elseKeyword.width() > 0) {
            return this._elseKeyword;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ElseClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._elseKeyword.width() > 0) {
            return this._elseKeyword;
        }
        return null;
    };
    ElseClauseSyntax.prototype.elseKeyword = function () {
        return this._elseKeyword;
    };
    ElseClauseSyntax.prototype.statement = function () {
        return this._statement;
    };
    ElseClauseSyntax.prototype.update = function (elseKeyword, statement) {
        if(this._elseKeyword === elseKeyword && this._statement === statement) {
            return this;
        }
        return new ElseClauseSyntax(elseKeyword, statement);
    };
    ElseClauseSyntax.prototype.withElseKeyword = function (elseKeyword) {
        return this.update(elseKeyword, this._statement);
    };
    ElseClauseSyntax.prototype.withStatement = function (statement) {
        return this.update(this._elseKeyword, statement);
    };
    ElseClauseSyntax.prototype.collectTextElements = function (elements) {
        this._elseKeyword.collectTextElements(elements);
        this._statement.collectTextElements(elements);
    };
    return ElseClauseSyntax;
})(SyntaxNode);
var IfStatementSyntax = (function (_super) {
    __extends(IfStatementSyntax, _super);
    function IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause) {
        _super.call(this);
        if(condition === null) {
            throw Errors.argumentNull('condition');
        }
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(ifKeyword.keywordKind() !== 26 /* IfKeyword */ ) {
            throw Errors.argument('ifKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._ifKeyword = ifKeyword;
        this._openParenToken = openParenToken;
        this._condition = condition;
        this._closeParenToken = closeParenToken;
        this._statement = statement;
        this._elseClause = elseClause;
    }
    IfStatementSyntax.create = function create(ifKeyword, openParenToken, condition, closeParenToken, statement) {
        return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, null);
    }
    IfStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitIfStatement(this);
    };
    IfStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitIfStatement(this);
    };
    IfStatementSyntax.prototype.kind = function () {
        return 139 /* IfStatement */ ;
    };
    IfStatementSyntax.prototype.isMissing = function () {
        if(!this._ifKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._condition.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        if(this._elseClause !== null && !this._elseClause.isMissing()) {
            return false;
        }
        return true;
    };
    IfStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._ifKeyword.width() > 0) {
            return this._ifKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._condition.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        if(this._elseClause !== null && (token = this._elseClause.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    IfStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._elseClause !== null && (token = this._elseClause.lastToken()) !== null) {
            return token;
        }
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._condition.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._ifKeyword.width() > 0) {
            return this._ifKeyword;
        }
        return null;
    };
    IfStatementSyntax.prototype.ifKeyword = function () {
        return this._ifKeyword;
    };
    IfStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    IfStatementSyntax.prototype.condition = function () {
        return this._condition;
    };
    IfStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    IfStatementSyntax.prototype.statement = function () {
        return this._statement;
    };
    IfStatementSyntax.prototype.elseClause = function () {
        return this._elseClause;
    };
    IfStatementSyntax.prototype.update = function (ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause) {
        if(this._ifKeyword === ifKeyword && this._openParenToken === openParenToken && this._condition === condition && this._closeParenToken === closeParenToken && this._statement === statement && this._elseClause === elseClause) {
            return this;
        }
        return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause);
    };
    IfStatementSyntax.prototype.withIfKeyword = function (ifKeyword) {
        return this.update(ifKeyword, this._openParenToken, this._condition, this._closeParenToken, this._statement, this._elseClause);
    };
    IfStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._ifKeyword, openParenToken, this._condition, this._closeParenToken, this._statement, this._elseClause);
    };
    IfStatementSyntax.prototype.withCondition = function (condition) {
        return this.update(this._ifKeyword, this._openParenToken, condition, this._closeParenToken, this._statement, this._elseClause);
    };
    IfStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._ifKeyword, this._openParenToken, this._condition, closeParenToken, this._statement, this._elseClause);
    };
    IfStatementSyntax.prototype.withStatement = function (statement) {
        return this.update(this._ifKeyword, this._openParenToken, this._condition, this._closeParenToken, statement, this._elseClause);
    };
    IfStatementSyntax.prototype.withElseClause = function (elseClause) {
        return this.update(this._ifKeyword, this._openParenToken, this._condition, this._closeParenToken, this._statement, elseClause);
    };
    IfStatementSyntax.prototype.collectTextElements = function (elements) {
        this._ifKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._condition.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._statement.collectTextElements(elements);
        if(this._elseClause !== null) {
            this._elseClause.collectTextElements(elements);
        }
    };
    return IfStatementSyntax;
})(StatementSyntax);
var ExpressionStatementSyntax = (function (_super) {
    __extends(ExpressionStatementSyntax, _super);
    function ExpressionStatementSyntax(expression, semicolonToken) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._expression = expression;
        this._semicolonToken = semicolonToken;
    }
    ExpressionStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitExpressionStatement(this);
    };
    ExpressionStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitExpressionStatement(this);
    };
    ExpressionStatementSyntax.prototype.kind = function () {
        return 141 /* ExpressionStatement */ ;
    };
    ExpressionStatementSyntax.prototype.isMissing = function () {
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    ExpressionStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    ExpressionStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        return null;
    };
    ExpressionStatementSyntax.prototype.expression = function () {
        return this._expression;
    };
    ExpressionStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    ExpressionStatementSyntax.prototype.update = function (expression, semicolonToken) {
        if(this._expression === expression && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new ExpressionStatementSyntax(expression, semicolonToken);
    };
    ExpressionStatementSyntax.prototype.withExpression = function (expression) {
        return this.update(expression, this._semicolonToken);
    };
    ExpressionStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._expression, semicolonToken);
    };
    ExpressionStatementSyntax.prototype.collectTextElements = function (elements) {
        this._expression.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    return ExpressionStatementSyntax;
})(StatementSyntax);
var ClassElementSyntax = (function (_super) {
    __extends(ClassElementSyntax, _super);
    function ClassElementSyntax() {
        _super.call(this);
    }
    return ClassElementSyntax;
})(SyntaxNode);
var ConstructorDeclarationSyntax = (function (_super) {
    __extends(ConstructorDeclarationSyntax, _super);
    function ConstructorDeclarationSyntax(constructorKeyword, parameterList, block, semicolonToken) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(constructorKeyword.keywordKind() !== 60 /* ConstructorKeyword */ ) {
            throw Errors.argument('constructorKeyword');
        }
        if(semicolonToken !== null) {
            if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
                throw Errors.argument('semicolonToken');
            }
        }
        this._constructorKeyword = constructorKeyword;
        this._parameterList = parameterList;
        this._block = block;
        this._semicolonToken = semicolonToken;
    }
    ConstructorDeclarationSyntax.create = function create(constructorKeyword, parameterList) {
        return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, null, null);
    }
    ConstructorDeclarationSyntax.prototype.accept = function (visitor) {
        visitor.visitConstructorDeclaration(this);
    };
    ConstructorDeclarationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitConstructorDeclaration(this);
    };
    ConstructorDeclarationSyntax.prototype.kind = function () {
        return 135 /* ConstructorDeclaration */ ;
    };
    ConstructorDeclarationSyntax.prototype.isMissing = function () {
        if(!this._constructorKeyword.isMissing()) {
            return false;
        }
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(this._block !== null && !this._block.isMissing()) {
            return false;
        }
        if(this._semicolonToken !== null && !this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    ConstructorDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._constructorKeyword.width() > 0) {
            return this._constructorKeyword;
        }
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._block !== null && (token = this._block.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken !== null && this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    ConstructorDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken !== null && this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._block !== null && (token = this._block.lastToken()) !== null) {
            return token;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        if(this._constructorKeyword.width() > 0) {
            return this._constructorKeyword;
        }
        return null;
    };
    ConstructorDeclarationSyntax.prototype.constructorKeyword = function () {
        return this._constructorKeyword;
    };
    ConstructorDeclarationSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    ConstructorDeclarationSyntax.prototype.block = function () {
        return this._block;
    };
    ConstructorDeclarationSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    ConstructorDeclarationSyntax.prototype.update = function (constructorKeyword, parameterList, block, semicolonToken) {
        if(this._constructorKeyword === constructorKeyword && this._parameterList === parameterList && this._block === block && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, block, semicolonToken);
    };
    ConstructorDeclarationSyntax.prototype.withConstructorKeyword = function (constructorKeyword) {
        return this.update(constructorKeyword, this._parameterList, this._block, this._semicolonToken);
    };
    ConstructorDeclarationSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(this._constructorKeyword, parameterList, this._block, this._semicolonToken);
    };
    ConstructorDeclarationSyntax.prototype.withBlock = function (block) {
        return this.update(this._constructorKeyword, this._parameterList, block, this._semicolonToken);
    };
    ConstructorDeclarationSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._constructorKeyword, this._parameterList, this._block, semicolonToken);
    };
    ConstructorDeclarationSyntax.prototype.collectTextElements = function (elements) {
        this._constructorKeyword.collectTextElements(elements);
        this._parameterList.collectTextElements(elements);
        if(this._block !== null) {
            this._block.collectTextElements(elements);
        }
        if(this._semicolonToken !== null) {
            this._semicolonToken.collectTextElements(elements);
        }
    };
    return ConstructorDeclarationSyntax;
})(ClassElementSyntax);
var MemberDeclarationSyntax = (function (_super) {
    __extends(MemberDeclarationSyntax, _super);
    function MemberDeclarationSyntax() {
        _super.call(this);
    }
    MemberDeclarationSyntax.prototype.publicOrPrivateKeyword = function () {
        throw Errors.abstract();
    };
    MemberDeclarationSyntax.prototype.staticKeyword = function () {
        throw Errors.abstract();
    };
    return MemberDeclarationSyntax;
})(ClassElementSyntax);
var MemberFunctionDeclarationSyntax = (function (_super) {
    __extends(MemberFunctionDeclarationSyntax, _super);
    function MemberFunctionDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, functionSignature, block, semicolonToken) {
        _super.call(this);
        if(functionSignature === null) {
            throw Errors.argumentNull('functionSignature');
        }
        if(publicOrPrivateKeyword !== null) {
            if(publicOrPrivateKeyword.keywordKind() !== 55 /* PublicKeyword */  && publicOrPrivateKeyword.keywordKind() !== 53 /* PrivateKeyword */ ) {
                throw Errors.argument('publicOrPrivateKeyword');
            }
        }
        if(staticKeyword !== null) {
            if(staticKeyword.keywordKind() !== 56 /* StaticKeyword */ ) {
                throw Errors.argument('staticKeyword');
            }
        }
        if(semicolonToken !== null) {
            if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
                throw Errors.argument('semicolonToken');
            }
        }
        this._publicOrPrivateKeyword = publicOrPrivateKeyword;
        this._staticKeyword = staticKeyword;
        this._functionSignature = functionSignature;
        this._block = block;
        this._semicolonToken = semicolonToken;
    }
    MemberFunctionDeclarationSyntax.create = function create(functionSignature) {
        return new MemberFunctionDeclarationSyntax(null, null, functionSignature, null, null);
    }
    MemberFunctionDeclarationSyntax.prototype.accept = function (visitor) {
        visitor.visitMemberFunctionDeclaration(this);
    };
    MemberFunctionDeclarationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitMemberFunctionDeclaration(this);
    };
    MemberFunctionDeclarationSyntax.prototype.kind = function () {
        return 133 /* MemberFunctionDeclaration */ ;
    };
    MemberFunctionDeclarationSyntax.prototype.isMissing = function () {
        if(this._publicOrPrivateKeyword !== null && !this._publicOrPrivateKeyword.isMissing()) {
            return false;
        }
        if(this._staticKeyword !== null && !this._staticKeyword.isMissing()) {
            return false;
        }
        if(!this._functionSignature.isMissing()) {
            return false;
        }
        if(this._block !== null && !this._block.isMissing()) {
            return false;
        }
        if(this._semicolonToken !== null && !this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    MemberFunctionDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if((token = this._functionSignature.firstToken()) !== null) {
            return token;
        }
        if(this._block !== null && (token = this._block.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken !== null && this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    MemberFunctionDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken !== null && this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._block !== null && (token = this._block.lastToken()) !== null) {
            return token;
        }
        if((token = this._functionSignature.lastToken()) !== null) {
            return token;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        return null;
    };
    MemberFunctionDeclarationSyntax.prototype.publicOrPrivateKeyword = function () {
        return this._publicOrPrivateKeyword;
    };
    MemberFunctionDeclarationSyntax.prototype.staticKeyword = function () {
        return this._staticKeyword;
    };
    MemberFunctionDeclarationSyntax.prototype.functionSignature = function () {
        return this._functionSignature;
    };
    MemberFunctionDeclarationSyntax.prototype.block = function () {
        return this._block;
    };
    MemberFunctionDeclarationSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    MemberFunctionDeclarationSyntax.prototype.update = function (publicOrPrivateKeyword, staticKeyword, functionSignature, block, semicolonToken) {
        if(this._publicOrPrivateKeyword === publicOrPrivateKeyword && this._staticKeyword === staticKeyword && this._functionSignature === functionSignature && this._block === block && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new MemberFunctionDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, functionSignature, block, semicolonToken);
    };
    MemberFunctionDeclarationSyntax.prototype.withPublicOrPrivateKeyword = function (publicOrPrivateKeyword) {
        return this.update(publicOrPrivateKeyword, this._staticKeyword, this._functionSignature, this._block, this._semicolonToken);
    };
    MemberFunctionDeclarationSyntax.prototype.withStaticKeyword = function (staticKeyword) {
        return this.update(this._publicOrPrivateKeyword, staticKeyword, this._functionSignature, this._block, this._semicolonToken);
    };
    MemberFunctionDeclarationSyntax.prototype.withFunctionSignature = function (functionSignature) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, functionSignature, this._block, this._semicolonToken);
    };
    MemberFunctionDeclarationSyntax.prototype.withBlock = function (block) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._functionSignature, block, this._semicolonToken);
    };
    MemberFunctionDeclarationSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._functionSignature, this._block, semicolonToken);
    };
    MemberFunctionDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._publicOrPrivateKeyword !== null) {
            this._publicOrPrivateKeyword.collectTextElements(elements);
        }
        if(this._staticKeyword !== null) {
            this._staticKeyword.collectTextElements(elements);
        }
        this._functionSignature.collectTextElements(elements);
        if(this._block !== null) {
            this._block.collectTextElements(elements);
        }
        if(this._semicolonToken !== null) {
            this._semicolonToken.collectTextElements(elements);
        }
    };
    return MemberFunctionDeclarationSyntax;
})(MemberDeclarationSyntax);
var MemberAccessorDeclarationSyntax = (function (_super) {
    __extends(MemberAccessorDeclarationSyntax, _super);
    function MemberAccessorDeclarationSyntax() {
        _super.call(this);
    }
    MemberAccessorDeclarationSyntax.prototype.publicOrPrivateKeyword = function () {
        throw Errors.abstract();
    };
    MemberAccessorDeclarationSyntax.prototype.staticKeyword = function () {
        throw Errors.abstract();
    };
    MemberAccessorDeclarationSyntax.prototype.identifier = function () {
        throw Errors.abstract();
    };
    MemberAccessorDeclarationSyntax.prototype.parameterList = function () {
        throw Errors.abstract();
    };
    MemberAccessorDeclarationSyntax.prototype.block = function () {
        throw Errors.abstract();
    };
    return MemberAccessorDeclarationSyntax;
})(MemberDeclarationSyntax);
var GetMemberAccessorDeclarationSyntax = (function (_super) {
    __extends(GetMemberAccessorDeclarationSyntax, _super);
    function GetMemberAccessorDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, getKeyword, identifier, parameterList, typeAnnotation, block) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(publicOrPrivateKeyword !== null) {
            if(publicOrPrivateKeyword.keywordKind() !== 55 /* PublicKeyword */  && publicOrPrivateKeyword.keywordKind() !== 53 /* PrivateKeyword */ ) {
                throw Errors.argument('publicOrPrivateKeyword');
            }
        }
        if(staticKeyword !== null) {
            if(staticKeyword.keywordKind() !== 56 /* StaticKeyword */ ) {
                throw Errors.argument('staticKeyword');
            }
        }
        if(getKeyword.keywordKind() !== 62 /* GetKeyword */ ) {
            throw Errors.argument('getKeyword');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        this._publicOrPrivateKeyword = publicOrPrivateKeyword;
        this._staticKeyword = staticKeyword;
        this._getKeyword = getKeyword;
        this._identifier = identifier;
        this._parameterList = parameterList;
        this._typeAnnotation = typeAnnotation;
        this._block = block;
    }
    GetMemberAccessorDeclarationSyntax.create = function create(getKeyword, identifier, parameterList, block) {
        return new GetMemberAccessorDeclarationSyntax(null, null, getKeyword, identifier, parameterList, null, block);
    }
    GetMemberAccessorDeclarationSyntax.prototype.accept = function (visitor) {
        visitor.visitGetMemberAccessorDeclaration(this);
    };
    GetMemberAccessorDeclarationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitGetMemberAccessorDeclaration(this);
    };
    GetMemberAccessorDeclarationSyntax.prototype.kind = function () {
        return 136 /* GetMemberAccessorDeclaration */ ;
    };
    GetMemberAccessorDeclarationSyntax.prototype.isMissing = function () {
        if(this._publicOrPrivateKeyword !== null && !this._publicOrPrivateKeyword.isMissing()) {
            return false;
        }
        if(this._staticKeyword !== null && !this._staticKeyword.isMissing()) {
            return false;
        }
        if(!this._getKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(this._typeAnnotation !== null && !this._typeAnnotation.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    GetMemberAccessorDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if(this._getKeyword.width() > 0) {
            return this._getKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.firstToken()) !== null) {
            return token;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    GetMemberAccessorDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if(this._typeAnnotation !== null && (token = this._typeAnnotation.lastToken()) !== null) {
            return token;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._getKeyword.width() > 0) {
            return this._getKeyword;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        return null;
    };
    GetMemberAccessorDeclarationSyntax.prototype.publicOrPrivateKeyword = function () {
        return this._publicOrPrivateKeyword;
    };
    GetMemberAccessorDeclarationSyntax.prototype.staticKeyword = function () {
        return this._staticKeyword;
    };
    GetMemberAccessorDeclarationSyntax.prototype.getKeyword = function () {
        return this._getKeyword;
    };
    GetMemberAccessorDeclarationSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    GetMemberAccessorDeclarationSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    GetMemberAccessorDeclarationSyntax.prototype.typeAnnotation = function () {
        return this._typeAnnotation;
    };
    GetMemberAccessorDeclarationSyntax.prototype.block = function () {
        return this._block;
    };
    GetMemberAccessorDeclarationSyntax.prototype.update = function (publicOrPrivateKeyword, staticKeyword, getKeyword, identifier, parameterList, typeAnnotation, block) {
        if(this._publicOrPrivateKeyword === publicOrPrivateKeyword && this._staticKeyword === staticKeyword && this._getKeyword === getKeyword && this._identifier === identifier && this._parameterList === parameterList && this._typeAnnotation === typeAnnotation && this._block === block) {
            return this;
        }
        return new GetMemberAccessorDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, getKeyword, identifier, parameterList, typeAnnotation, block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withPublicOrPrivateKeyword = function (publicOrPrivateKeyword) {
        return this.update(publicOrPrivateKeyword, this._staticKeyword, this._getKeyword, this._identifier, this._parameterList, this._typeAnnotation, this._block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withStaticKeyword = function (staticKeyword) {
        return this.update(this._publicOrPrivateKeyword, staticKeyword, this._getKeyword, this._identifier, this._parameterList, this._typeAnnotation, this._block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withGetKeyword = function (getKeyword) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, getKeyword, this._identifier, this._parameterList, this._typeAnnotation, this._block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._getKeyword, identifier, this._parameterList, this._typeAnnotation, this._block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._getKeyword, this._identifier, parameterList, this._typeAnnotation, this._block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withTypeAnnotation = function (typeAnnotation) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._getKeyword, this._identifier, this._parameterList, typeAnnotation, this._block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.withBlock = function (block) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._getKeyword, this._identifier, this._parameterList, this._typeAnnotation, block);
    };
    GetMemberAccessorDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._publicOrPrivateKeyword !== null) {
            this._publicOrPrivateKeyword.collectTextElements(elements);
        }
        if(this._staticKeyword !== null) {
            this._staticKeyword.collectTextElements(elements);
        }
        this._getKeyword.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        this._parameterList.collectTextElements(elements);
        if(this._typeAnnotation !== null) {
            this._typeAnnotation.collectTextElements(elements);
        }
        this._block.collectTextElements(elements);
    };
    return GetMemberAccessorDeclarationSyntax;
})(MemberAccessorDeclarationSyntax);
var SetMemberAccessorDeclarationSyntax = (function (_super) {
    __extends(SetMemberAccessorDeclarationSyntax, _super);
    function SetMemberAccessorDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, setKeyword, identifier, parameterList, block) {
        _super.call(this);
        if(parameterList === null) {
            throw Errors.argumentNull('parameterList');
        }
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(publicOrPrivateKeyword !== null) {
            if(publicOrPrivateKeyword.keywordKind() !== 55 /* PublicKeyword */  && publicOrPrivateKeyword.keywordKind() !== 53 /* PrivateKeyword */ ) {
                throw Errors.argument('publicOrPrivateKeyword');
            }
        }
        if(staticKeyword !== null) {
            if(staticKeyword.keywordKind() !== 56 /* StaticKeyword */ ) {
                throw Errors.argument('staticKeyword');
            }
        }
        if(setKeyword.keywordKind() !== 65 /* SetKeyword */ ) {
            throw Errors.argument('setKeyword');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        this._publicOrPrivateKeyword = publicOrPrivateKeyword;
        this._staticKeyword = staticKeyword;
        this._setKeyword = setKeyword;
        this._identifier = identifier;
        this._parameterList = parameterList;
        this._block = block;
    }
    SetMemberAccessorDeclarationSyntax.create = function create(setKeyword, identifier, parameterList, block) {
        return new SetMemberAccessorDeclarationSyntax(null, null, setKeyword, identifier, parameterList, block);
    }
    SetMemberAccessorDeclarationSyntax.prototype.accept = function (visitor) {
        visitor.visitSetMemberAccessorDeclaration(this);
    };
    SetMemberAccessorDeclarationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitSetMemberAccessorDeclaration(this);
    };
    SetMemberAccessorDeclarationSyntax.prototype.kind = function () {
        return 137 /* SetMemberAccessorDeclaration */ ;
    };
    SetMemberAccessorDeclarationSyntax.prototype.isMissing = function () {
        if(this._publicOrPrivateKeyword !== null && !this._publicOrPrivateKeyword.isMissing()) {
            return false;
        }
        if(this._staticKeyword !== null && !this._staticKeyword.isMissing()) {
            return false;
        }
        if(!this._setKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._parameterList.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    SetMemberAccessorDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if(this._setKeyword.width() > 0) {
            return this._setKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if((token = this._parameterList.firstToken()) !== null) {
            return token;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    SetMemberAccessorDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if((token = this._parameterList.lastToken()) !== null) {
            return token;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._setKeyword.width() > 0) {
            return this._setKeyword;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        return null;
    };
    SetMemberAccessorDeclarationSyntax.prototype.publicOrPrivateKeyword = function () {
        return this._publicOrPrivateKeyword;
    };
    SetMemberAccessorDeclarationSyntax.prototype.staticKeyword = function () {
        return this._staticKeyword;
    };
    SetMemberAccessorDeclarationSyntax.prototype.setKeyword = function () {
        return this._setKeyword;
    };
    SetMemberAccessorDeclarationSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    SetMemberAccessorDeclarationSyntax.prototype.parameterList = function () {
        return this._parameterList;
    };
    SetMemberAccessorDeclarationSyntax.prototype.block = function () {
        return this._block;
    };
    SetMemberAccessorDeclarationSyntax.prototype.update = function (publicOrPrivateKeyword, staticKeyword, setKeyword, identifier, parameterList, block) {
        if(this._publicOrPrivateKeyword === publicOrPrivateKeyword && this._staticKeyword === staticKeyword && this._setKeyword === setKeyword && this._identifier === identifier && this._parameterList === parameterList && this._block === block) {
            return this;
        }
        return new SetMemberAccessorDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, setKeyword, identifier, parameterList, block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withPublicOrPrivateKeyword = function (publicOrPrivateKeyword) {
        return this.update(publicOrPrivateKeyword, this._staticKeyword, this._setKeyword, this._identifier, this._parameterList, this._block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withStaticKeyword = function (staticKeyword) {
        return this.update(this._publicOrPrivateKeyword, staticKeyword, this._setKeyword, this._identifier, this._parameterList, this._block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withSetKeyword = function (setKeyword) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, setKeyword, this._identifier, this._parameterList, this._block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._setKeyword, identifier, this._parameterList, this._block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withParameterList = function (parameterList) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._setKeyword, this._identifier, parameterList, this._block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.withBlock = function (block) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._setKeyword, this._identifier, this._parameterList, block);
    };
    SetMemberAccessorDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._publicOrPrivateKeyword !== null) {
            this._publicOrPrivateKeyword.collectTextElements(elements);
        }
        if(this._staticKeyword !== null) {
            this._staticKeyword.collectTextElements(elements);
        }
        this._setKeyword.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        this._parameterList.collectTextElements(elements);
        this._block.collectTextElements(elements);
    };
    return SetMemberAccessorDeclarationSyntax;
})(MemberAccessorDeclarationSyntax);
var MemberVariableDeclarationSyntax = (function (_super) {
    __extends(MemberVariableDeclarationSyntax, _super);
    function MemberVariableDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, variableDeclarator, semicolonToken) {
        _super.call(this);
        if(variableDeclarator === null) {
            throw Errors.argumentNull('variableDeclarator');
        }
        if(publicOrPrivateKeyword !== null) {
            if(publicOrPrivateKeyword.keywordKind() !== 55 /* PublicKeyword */  && publicOrPrivateKeyword.keywordKind() !== 53 /* PrivateKeyword */ ) {
                throw Errors.argument('publicOrPrivateKeyword');
            }
        }
        if(staticKeyword !== null) {
            if(staticKeyword.keywordKind() !== 56 /* StaticKeyword */ ) {
                throw Errors.argument('staticKeyword');
            }
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._publicOrPrivateKeyword = publicOrPrivateKeyword;
        this._staticKeyword = staticKeyword;
        this._variableDeclarator = variableDeclarator;
        this._semicolonToken = semicolonToken;
    }
    MemberVariableDeclarationSyntax.create = function create(variableDeclarator, semicolonToken) {
        return new MemberVariableDeclarationSyntax(null, null, variableDeclarator, semicolonToken);
    }
    MemberVariableDeclarationSyntax.prototype.accept = function (visitor) {
        visitor.visitMemberVariableDeclaration(this);
    };
    MemberVariableDeclarationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitMemberVariableDeclaration(this);
    };
    MemberVariableDeclarationSyntax.prototype.kind = function () {
        return 134 /* MemberVariableDeclaration */ ;
    };
    MemberVariableDeclarationSyntax.prototype.isMissing = function () {
        if(this._publicOrPrivateKeyword !== null && !this._publicOrPrivateKeyword.isMissing()) {
            return false;
        }
        if(this._staticKeyword !== null && !this._staticKeyword.isMissing()) {
            return false;
        }
        if(!this._variableDeclarator.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    MemberVariableDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if((token = this._variableDeclarator.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    MemberVariableDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if((token = this._variableDeclarator.lastToken()) !== null) {
            return token;
        }
        if(this._staticKeyword !== null && this._staticKeyword.width() > 0) {
            return this._staticKeyword;
        }
        if(this._publicOrPrivateKeyword !== null && this._publicOrPrivateKeyword.width() > 0) {
            return this._publicOrPrivateKeyword;
        }
        return null;
    };
    MemberVariableDeclarationSyntax.prototype.publicOrPrivateKeyword = function () {
        return this._publicOrPrivateKeyword;
    };
    MemberVariableDeclarationSyntax.prototype.staticKeyword = function () {
        return this._staticKeyword;
    };
    MemberVariableDeclarationSyntax.prototype.variableDeclarator = function () {
        return this._variableDeclarator;
    };
    MemberVariableDeclarationSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    MemberVariableDeclarationSyntax.prototype.update = function (publicOrPrivateKeyword, staticKeyword, variableDeclarator, semicolonToken) {
        if(this._publicOrPrivateKeyword === publicOrPrivateKeyword && this._staticKeyword === staticKeyword && this._variableDeclarator === variableDeclarator && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new MemberVariableDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, variableDeclarator, semicolonToken);
    };
    MemberVariableDeclarationSyntax.prototype.withPublicOrPrivateKeyword = function (publicOrPrivateKeyword) {
        return this.update(publicOrPrivateKeyword, this._staticKeyword, this._variableDeclarator, this._semicolonToken);
    };
    MemberVariableDeclarationSyntax.prototype.withStaticKeyword = function (staticKeyword) {
        return this.update(this._publicOrPrivateKeyword, staticKeyword, this._variableDeclarator, this._semicolonToken);
    };
    MemberVariableDeclarationSyntax.prototype.withVariableDeclarator = function (variableDeclarator) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, variableDeclarator, this._semicolonToken);
    };
    MemberVariableDeclarationSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._publicOrPrivateKeyword, this._staticKeyword, this._variableDeclarator, semicolonToken);
    };
    MemberVariableDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._publicOrPrivateKeyword !== null) {
            this._publicOrPrivateKeyword.collectTextElements(elements);
        }
        if(this._staticKeyword !== null) {
            this._staticKeyword.collectTextElements(elements);
        }
        this._variableDeclarator.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    return MemberVariableDeclarationSyntax;
})(MemberDeclarationSyntax);
var ThrowStatementSyntax = (function (_super) {
    __extends(ThrowStatementSyntax, _super);
    function ThrowStatementSyntax(throwKeyword, expression, semicolonToken) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(throwKeyword.keywordKind() !== 34 /* ThrowKeyword */ ) {
            throw Errors.argument('throwKeyword');
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._throwKeyword = throwKeyword;
        this._expression = expression;
        this._semicolonToken = semicolonToken;
    }
    ThrowStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitThrowStatement(this);
    };
    ThrowStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitThrowStatement(this);
    };
    ThrowStatementSyntax.prototype.kind = function () {
        return 149 /* ThrowStatement */ ;
    };
    ThrowStatementSyntax.prototype.isMissing = function () {
        if(!this._throwKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    ThrowStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._throwKeyword.width() > 0) {
            return this._throwKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    ThrowStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._throwKeyword.width() > 0) {
            return this._throwKeyword;
        }
        return null;
    };
    ThrowStatementSyntax.prototype.throwKeyword = function () {
        return this._throwKeyword;
    };
    ThrowStatementSyntax.prototype.expression = function () {
        return this._expression;
    };
    ThrowStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    ThrowStatementSyntax.prototype.update = function (throwKeyword, expression, semicolonToken) {
        if(this._throwKeyword === throwKeyword && this._expression === expression && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new ThrowStatementSyntax(throwKeyword, expression, semicolonToken);
    };
    ThrowStatementSyntax.prototype.withThrowKeyword = function (throwKeyword) {
        return this.update(throwKeyword, this._expression, this._semicolonToken);
    };
    ThrowStatementSyntax.prototype.withExpression = function (expression) {
        return this.update(this._throwKeyword, expression, this._semicolonToken);
    };
    ThrowStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._throwKeyword, this._expression, semicolonToken);
    };
    ThrowStatementSyntax.prototype.collectTextElements = function (elements) {
        this._throwKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    return ThrowStatementSyntax;
})(StatementSyntax);
var ReturnStatementSyntax = (function (_super) {
    __extends(ReturnStatementSyntax, _super);
    function ReturnStatementSyntax(returnKeyword, expression, semicolonToken) {
        _super.call(this);
        if(returnKeyword.keywordKind() !== 31 /* ReturnKeyword */ ) {
            throw Errors.argument('returnKeyword');
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._returnKeyword = returnKeyword;
        this._expression = expression;
        this._semicolonToken = semicolonToken;
    }
    ReturnStatementSyntax.create = function create(returnKeyword, semicolonToken) {
        return new ReturnStatementSyntax(returnKeyword, null, semicolonToken);
    }
    ReturnStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitReturnStatement(this);
    };
    ReturnStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitReturnStatement(this);
    };
    ReturnStatementSyntax.prototype.kind = function () {
        return 142 /* ReturnStatement */ ;
    };
    ReturnStatementSyntax.prototype.isMissing = function () {
        if(!this._returnKeyword.isMissing()) {
            return false;
        }
        if(this._expression !== null && !this._expression.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    ReturnStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._returnKeyword.width() > 0) {
            return this._returnKeyword;
        }
        if(this._expression !== null && (token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    ReturnStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._expression !== null && (token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._returnKeyword.width() > 0) {
            return this._returnKeyword;
        }
        return null;
    };
    ReturnStatementSyntax.prototype.returnKeyword = function () {
        return this._returnKeyword;
    };
    ReturnStatementSyntax.prototype.expression = function () {
        return this._expression;
    };
    ReturnStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    ReturnStatementSyntax.prototype.update = function (returnKeyword, expression, semicolonToken) {
        if(this._returnKeyword === returnKeyword && this._expression === expression && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new ReturnStatementSyntax(returnKeyword, expression, semicolonToken);
    };
    ReturnStatementSyntax.prototype.withReturnKeyword = function (returnKeyword) {
        return this.update(returnKeyword, this._expression, this._semicolonToken);
    };
    ReturnStatementSyntax.prototype.withExpression = function (expression) {
        return this.update(this._returnKeyword, expression, this._semicolonToken);
    };
    ReturnStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._returnKeyword, this._expression, semicolonToken);
    };
    ReturnStatementSyntax.prototype.collectTextElements = function (elements) {
        this._returnKeyword.collectTextElements(elements);
        if(this._expression !== null) {
            this._expression.collectTextElements(elements);
        }
        this._semicolonToken.collectTextElements(elements);
    };
    return ReturnStatementSyntax;
})(StatementSyntax);
var ObjectCreationExpressionSyntax = (function (_super) {
    __extends(ObjectCreationExpressionSyntax, _super);
    function ObjectCreationExpressionSyntax(newKeyword, expression, argumentList) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(newKeyword.keywordKind() !== 29 /* NewKeyword */ ) {
            throw Errors.argument('newKeyword');
        }
        this._newKeyword = newKeyword;
        this._expression = expression;
        this._argumentList = argumentList;
    }
    ObjectCreationExpressionSyntax.create = function create(newKeyword, expression) {
        return new ObjectCreationExpressionSyntax(newKeyword, expression, null);
    }
    ObjectCreationExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitObjectCreationExpression(this);
    };
    ObjectCreationExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitObjectCreationExpression(this);
    };
    ObjectCreationExpressionSyntax.prototype.kind = function () {
        return 214 /* ObjectCreationExpression */ ;
    };
    ObjectCreationExpressionSyntax.prototype.isMissing = function () {
        if(!this._newKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        if(this._argumentList !== null && !this._argumentList.isMissing()) {
            return false;
        }
        return true;
    };
    ObjectCreationExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._newKeyword.width() > 0) {
            return this._newKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._argumentList !== null && (token = this._argumentList.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ObjectCreationExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._argumentList !== null && (token = this._argumentList.lastToken()) !== null) {
            return token;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._newKeyword.width() > 0) {
            return this._newKeyword;
        }
        return null;
    };
    ObjectCreationExpressionSyntax.prototype.newKeyword = function () {
        return this._newKeyword;
    };
    ObjectCreationExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    ObjectCreationExpressionSyntax.prototype.argumentList = function () {
        return this._argumentList;
    };
    ObjectCreationExpressionSyntax.prototype.update = function (newKeyword, expression, argumentList) {
        if(this._newKeyword === newKeyword && this._expression === expression && this._argumentList === argumentList) {
            return this;
        }
        return new ObjectCreationExpressionSyntax(newKeyword, expression, argumentList);
    };
    ObjectCreationExpressionSyntax.prototype.withNewKeyword = function (newKeyword) {
        return this.update(newKeyword, this._expression, this._argumentList);
    };
    ObjectCreationExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(this._newKeyword, expression, this._argumentList);
    };
    ObjectCreationExpressionSyntax.prototype.withArgumentList = function (argumentList) {
        return this.update(this._newKeyword, this._expression, argumentList);
    };
    ObjectCreationExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._newKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
        if(this._argumentList !== null) {
            this._argumentList.collectTextElements(elements);
        }
    };
    return ObjectCreationExpressionSyntax;
})(UnaryExpressionSyntax);
var SwitchStatementSyntax = (function (_super) {
    __extends(SwitchStatementSyntax, _super);
    function SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, caseClauses, closeBraceToken) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(caseClauses === null) {
            throw Errors.argumentNull('caseClauses');
        }
        if(switchKeyword.keywordKind() !== 32 /* SwitchKeyword */ ) {
            throw Errors.argument('switchKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._switchKeyword = switchKeyword;
        this._openParenToken = openParenToken;
        this._expression = expression;
        this._closeParenToken = closeParenToken;
        this._openBraceToken = openBraceToken;
        this._caseClauses = caseClauses;
        this._closeBraceToken = closeBraceToken;
    }
    SwitchStatementSyntax.create = function create(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, closeBraceToken) {
        return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, SyntaxList.empty, closeBraceToken);
    }
    SwitchStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitSwitchStatement(this);
    };
    SwitchStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitSwitchStatement(this);
    };
    SwitchStatementSyntax.prototype.kind = function () {
        return 143 /* SwitchStatement */ ;
    };
    SwitchStatementSyntax.prototype.isMissing = function () {
        if(!this._switchKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._caseClauses.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    SwitchStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._switchKeyword.width() > 0) {
            return this._switchKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._caseClauses.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    SwitchStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._caseClauses.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._switchKeyword.width() > 0) {
            return this._switchKeyword;
        }
        return null;
    };
    SwitchStatementSyntax.prototype.switchKeyword = function () {
        return this._switchKeyword;
    };
    SwitchStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    SwitchStatementSyntax.prototype.expression = function () {
        return this._expression;
    };
    SwitchStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    SwitchStatementSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    SwitchStatementSyntax.prototype.caseClauses = function () {
        return this._caseClauses;
    };
    SwitchStatementSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    SwitchStatementSyntax.prototype.update = function (switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, caseClauses, closeBraceToken) {
        if(this._switchKeyword === switchKeyword && this._openParenToken === openParenToken && this._expression === expression && this._closeParenToken === closeParenToken && this._openBraceToken === openBraceToken && this._caseClauses === caseClauses && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, caseClauses, closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withSwitchKeyword = function (switchKeyword) {
        return this.update(switchKeyword, this._openParenToken, this._expression, this._closeParenToken, this._openBraceToken, this._caseClauses, this._closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._switchKeyword, openParenToken, this._expression, this._closeParenToken, this._openBraceToken, this._caseClauses, this._closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withExpression = function (expression) {
        return this.update(this._switchKeyword, this._openParenToken, expression, this._closeParenToken, this._openBraceToken, this._caseClauses, this._closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._switchKeyword, this._openParenToken, this._expression, closeParenToken, this._openBraceToken, this._caseClauses, this._closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(this._switchKeyword, this._openParenToken, this._expression, this._closeParenToken, openBraceToken, this._caseClauses, this._closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withCaseClauses = function (caseClauses) {
        return this.update(this._switchKeyword, this._openParenToken, this._expression, this._closeParenToken, this._openBraceToken, caseClauses, this._closeBraceToken);
    };
    SwitchStatementSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._switchKeyword, this._openParenToken, this._expression, this._closeParenToken, this._openBraceToken, this._caseClauses, closeBraceToken);
    };
    SwitchStatementSyntax.prototype.collectTextElements = function (elements) {
        this._switchKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._expression.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._openBraceToken.collectTextElements(elements);
        this._caseClauses.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    return SwitchStatementSyntax;
})(StatementSyntax);
var SwitchClauseSyntax = (function (_super) {
    __extends(SwitchClauseSyntax, _super);
    function SwitchClauseSyntax() {
        _super.call(this);
    }
    SwitchClauseSyntax.prototype.colonToken = function () {
        throw Errors.abstract();
    };
    SwitchClauseSyntax.prototype.statements = function () {
        throw Errors.abstract();
    };
    return SwitchClauseSyntax;
})(SyntaxNode);
var CaseSwitchClauseSyntax = (function (_super) {
    __extends(CaseSwitchClauseSyntax, _super);
    function CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, statements) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(statements === null) {
            throw Errors.argumentNull('statements');
        }
        if(caseKeyword.keywordKind() !== 14 /* CaseKeyword */ ) {
            throw Errors.argument('caseKeyword');
        }
        if(colonToken.kind() !== 103 /* ColonToken */ ) {
            throw Errors.argument('colonToken');
        }
        this._caseKeyword = caseKeyword;
        this._expression = expression;
        this._colonToken = colonToken;
        this._statements = statements;
    }
    CaseSwitchClauseSyntax.create = function create(caseKeyword, expression, colonToken) {
        return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, SyntaxList.empty);
    }
    CaseSwitchClauseSyntax.prototype.accept = function (visitor) {
        visitor.visitCaseSwitchClause(this);
    };
    CaseSwitchClauseSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitCaseSwitchClause(this);
    };
    CaseSwitchClauseSyntax.prototype.kind = function () {
        return 230 /* CaseSwitchClause */ ;
    };
    CaseSwitchClauseSyntax.prototype.isMissing = function () {
        if(!this._caseKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._colonToken.isMissing()) {
            return false;
        }
        if(!this._statements.isMissing()) {
            return false;
        }
        return true;
    };
    CaseSwitchClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._caseKeyword.width() > 0) {
            return this._caseKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._statements.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    CaseSwitchClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statements.lastToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._caseKeyword.width() > 0) {
            return this._caseKeyword;
        }
        return null;
    };
    CaseSwitchClauseSyntax.prototype.caseKeyword = function () {
        return this._caseKeyword;
    };
    CaseSwitchClauseSyntax.prototype.expression = function () {
        return this._expression;
    };
    CaseSwitchClauseSyntax.prototype.colonToken = function () {
        return this._colonToken;
    };
    CaseSwitchClauseSyntax.prototype.statements = function () {
        return this._statements;
    };
    CaseSwitchClauseSyntax.prototype.update = function (caseKeyword, expression, colonToken, statements) {
        if(this._caseKeyword === caseKeyword && this._expression === expression && this._colonToken === colonToken && this._statements === statements) {
            return this;
        }
        return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, statements);
    };
    CaseSwitchClauseSyntax.prototype.withCaseKeyword = function (caseKeyword) {
        return this.update(caseKeyword, this._expression, this._colonToken, this._statements);
    };
    CaseSwitchClauseSyntax.prototype.withExpression = function (expression) {
        return this.update(this._caseKeyword, expression, this._colonToken, this._statements);
    };
    CaseSwitchClauseSyntax.prototype.withColonToken = function (colonToken) {
        return this.update(this._caseKeyword, this._expression, colonToken, this._statements);
    };
    CaseSwitchClauseSyntax.prototype.withStatements = function (statements) {
        return this.update(this._caseKeyword, this._expression, this._colonToken, statements);
    };
    CaseSwitchClauseSyntax.prototype.collectTextElements = function (elements) {
        this._caseKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
        this._colonToken.collectTextElements(elements);
        this._statements.collectTextElements(elements);
    };
    return CaseSwitchClauseSyntax;
})(SwitchClauseSyntax);
var DefaultSwitchClauseSyntax = (function (_super) {
    __extends(DefaultSwitchClauseSyntax, _super);
    function DefaultSwitchClauseSyntax(defaultKeyword, colonToken, statements) {
        _super.call(this);
        if(statements === null) {
            throw Errors.argumentNull('statements');
        }
        if(defaultKeyword.keywordKind() !== 18 /* DefaultKeyword */ ) {
            throw Errors.argument('defaultKeyword');
        }
        if(colonToken.kind() !== 103 /* ColonToken */ ) {
            throw Errors.argument('colonToken');
        }
        this._defaultKeyword = defaultKeyword;
        this._colonToken = colonToken;
        this._statements = statements;
    }
    DefaultSwitchClauseSyntax.create = function create(defaultKeyword, colonToken) {
        return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, SyntaxList.empty);
    }
    DefaultSwitchClauseSyntax.prototype.accept = function (visitor) {
        visitor.visitDefaultSwitchClause(this);
    };
    DefaultSwitchClauseSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitDefaultSwitchClause(this);
    };
    DefaultSwitchClauseSyntax.prototype.kind = function () {
        return 231 /* DefaultSwitchClause */ ;
    };
    DefaultSwitchClauseSyntax.prototype.isMissing = function () {
        if(!this._defaultKeyword.isMissing()) {
            return false;
        }
        if(!this._colonToken.isMissing()) {
            return false;
        }
        if(!this._statements.isMissing()) {
            return false;
        }
        return true;
    };
    DefaultSwitchClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._defaultKeyword.width() > 0) {
            return this._defaultKeyword;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._statements.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    DefaultSwitchClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statements.lastToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if(this._defaultKeyword.width() > 0) {
            return this._defaultKeyword;
        }
        return null;
    };
    DefaultSwitchClauseSyntax.prototype.defaultKeyword = function () {
        return this._defaultKeyword;
    };
    DefaultSwitchClauseSyntax.prototype.colonToken = function () {
        return this._colonToken;
    };
    DefaultSwitchClauseSyntax.prototype.statements = function () {
        return this._statements;
    };
    DefaultSwitchClauseSyntax.prototype.update = function (defaultKeyword, colonToken, statements) {
        if(this._defaultKeyword === defaultKeyword && this._colonToken === colonToken && this._statements === statements) {
            return this;
        }
        return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, statements);
    };
    DefaultSwitchClauseSyntax.prototype.withDefaultKeyword = function (defaultKeyword) {
        return this.update(defaultKeyword, this._colonToken, this._statements);
    };
    DefaultSwitchClauseSyntax.prototype.withColonToken = function (colonToken) {
        return this.update(this._defaultKeyword, colonToken, this._statements);
    };
    DefaultSwitchClauseSyntax.prototype.withStatements = function (statements) {
        return this.update(this._defaultKeyword, this._colonToken, statements);
    };
    DefaultSwitchClauseSyntax.prototype.collectTextElements = function (elements) {
        this._defaultKeyword.collectTextElements(elements);
        this._colonToken.collectTextElements(elements);
        this._statements.collectTextElements(elements);
    };
    return DefaultSwitchClauseSyntax;
})(SwitchClauseSyntax);
var BreakStatementSyntax = (function (_super) {
    __extends(BreakStatementSyntax, _super);
    function BreakStatementSyntax(breakKeyword, identifier, semicolonToken) {
        _super.call(this);
        if(breakKeyword.keywordKind() !== 13 /* BreakKeyword */ ) {
            throw Errors.argument('breakKeyword');
        }
        if(identifier !== null) {
            if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
                throw Errors.argument('identifier');
            }
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._breakKeyword = breakKeyword;
        this._identifier = identifier;
        this._semicolonToken = semicolonToken;
    }
    BreakStatementSyntax.create = function create(breakKeyword, semicolonToken) {
        return new BreakStatementSyntax(breakKeyword, null, semicolonToken);
    }
    BreakStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitBreakStatement(this);
    };
    BreakStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitBreakStatement(this);
    };
    BreakStatementSyntax.prototype.kind = function () {
        return 144 /* BreakStatement */ ;
    };
    BreakStatementSyntax.prototype.isMissing = function () {
        if(!this._breakKeyword.isMissing()) {
            return false;
        }
        if(this._identifier !== null && !this._identifier.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    BreakStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._breakKeyword.width() > 0) {
            return this._breakKeyword;
        }
        if(this._identifier !== null && this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    BreakStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._identifier !== null && this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._breakKeyword.width() > 0) {
            return this._breakKeyword;
        }
        return null;
    };
    BreakStatementSyntax.prototype.breakKeyword = function () {
        return this._breakKeyword;
    };
    BreakStatementSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    BreakStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    BreakStatementSyntax.prototype.update = function (breakKeyword, identifier, semicolonToken) {
        if(this._breakKeyword === breakKeyword && this._identifier === identifier && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new BreakStatementSyntax(breakKeyword, identifier, semicolonToken);
    };
    BreakStatementSyntax.prototype.withBreakKeyword = function (breakKeyword) {
        return this.update(breakKeyword, this._identifier, this._semicolonToken);
    };
    BreakStatementSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._breakKeyword, identifier, this._semicolonToken);
    };
    BreakStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._breakKeyword, this._identifier, semicolonToken);
    };
    BreakStatementSyntax.prototype.collectTextElements = function (elements) {
        this._breakKeyword.collectTextElements(elements);
        if(this._identifier !== null) {
            this._identifier.collectTextElements(elements);
        }
        this._semicolonToken.collectTextElements(elements);
    };
    return BreakStatementSyntax;
})(StatementSyntax);
var ContinueStatementSyntax = (function (_super) {
    __extends(ContinueStatementSyntax, _super);
    function ContinueStatementSyntax(continueKeyword, identifier, semicolonToken) {
        _super.call(this);
        if(continueKeyword.keywordKind() !== 16 /* ContinueKeyword */ ) {
            throw Errors.argument('continueKeyword');
        }
        if(identifier !== null) {
            if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
                throw Errors.argument('identifier');
            }
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._continueKeyword = continueKeyword;
        this._identifier = identifier;
        this._semicolonToken = semicolonToken;
    }
    ContinueStatementSyntax.create = function create(continueKeyword, semicolonToken) {
        return new ContinueStatementSyntax(continueKeyword, null, semicolonToken);
    }
    ContinueStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitContinueStatement(this);
    };
    ContinueStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitContinueStatement(this);
    };
    ContinueStatementSyntax.prototype.kind = function () {
        return 145 /* ContinueStatement */ ;
    };
    ContinueStatementSyntax.prototype.isMissing = function () {
        if(!this._continueKeyword.isMissing()) {
            return false;
        }
        if(this._identifier !== null && !this._identifier.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    ContinueStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._continueKeyword.width() > 0) {
            return this._continueKeyword;
        }
        if(this._identifier !== null && this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    ContinueStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._identifier !== null && this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._continueKeyword.width() > 0) {
            return this._continueKeyword;
        }
        return null;
    };
    ContinueStatementSyntax.prototype.continueKeyword = function () {
        return this._continueKeyword;
    };
    ContinueStatementSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    ContinueStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    ContinueStatementSyntax.prototype.update = function (continueKeyword, identifier, semicolonToken) {
        if(this._continueKeyword === continueKeyword && this._identifier === identifier && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new ContinueStatementSyntax(continueKeyword, identifier, semicolonToken);
    };
    ContinueStatementSyntax.prototype.withContinueKeyword = function (continueKeyword) {
        return this.update(continueKeyword, this._identifier, this._semicolonToken);
    };
    ContinueStatementSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._continueKeyword, identifier, this._semicolonToken);
    };
    ContinueStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._continueKeyword, this._identifier, semicolonToken);
    };
    ContinueStatementSyntax.prototype.collectTextElements = function (elements) {
        this._continueKeyword.collectTextElements(elements);
        if(this._identifier !== null) {
            this._identifier.collectTextElements(elements);
        }
        this._semicolonToken.collectTextElements(elements);
    };
    return ContinueStatementSyntax;
})(StatementSyntax);
var IterationStatementSyntax = (function (_super) {
    __extends(IterationStatementSyntax, _super);
    function IterationStatementSyntax() {
        _super.call(this);
    }
    IterationStatementSyntax.prototype.openParenToken = function () {
        throw Errors.abstract();
    };
    IterationStatementSyntax.prototype.closeParenToken = function () {
        throw Errors.abstract();
    };
    IterationStatementSyntax.prototype.statement = function () {
        throw Errors.abstract();
    };
    return IterationStatementSyntax;
})(StatementSyntax);
var BaseForStatementSyntax = (function (_super) {
    __extends(BaseForStatementSyntax, _super);
    function BaseForStatementSyntax() {
        _super.call(this);
    }
    BaseForStatementSyntax.prototype.forKeyword = function () {
        throw Errors.abstract();
    };
    BaseForStatementSyntax.prototype.openParenToken = function () {
        throw Errors.abstract();
    };
    BaseForStatementSyntax.prototype.variableDeclaration = function () {
        throw Errors.abstract();
    };
    BaseForStatementSyntax.prototype.closeParenToken = function () {
        throw Errors.abstract();
    };
    BaseForStatementSyntax.prototype.statement = function () {
        throw Errors.abstract();
    };
    return BaseForStatementSyntax;
})(IterationStatementSyntax);
var ForStatementSyntax = (function (_super) {
    __extends(ForStatementSyntax, _super);
    function ForStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement) {
        _super.call(this);
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(forKeyword.keywordKind() !== 24 /* ForKeyword */ ) {
            throw Errors.argument('forKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(firstSemicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('firstSemicolonToken');
        }
        if(secondSemicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('secondSemicolonToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._forKeyword = forKeyword;
        this._openParenToken = openParenToken;
        this._variableDeclaration = variableDeclaration;
        this._initializer = initializer;
        this._firstSemicolonToken = firstSemicolonToken;
        this._condition = condition;
        this._secondSemicolonToken = secondSemicolonToken;
        this._incrementor = incrementor;
        this._closeParenToken = closeParenToken;
        this._statement = statement;
    }
    ForStatementSyntax.create = function create(forKeyword, openParenToken, firstSemicolonToken, secondSemicolonToken, closeParenToken, statement) {
        return new ForStatementSyntax(forKeyword, openParenToken, null, null, firstSemicolonToken, null, secondSemicolonToken, null, closeParenToken, statement);
    }
    ForStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitForStatement(this);
    };
    ForStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitForStatement(this);
    };
    ForStatementSyntax.prototype.kind = function () {
        return 146 /* ForStatement */ ;
    };
    ForStatementSyntax.prototype.isMissing = function () {
        if(!this._forKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(this._variableDeclaration !== null && !this._variableDeclaration.isMissing()) {
            return false;
        }
        if(this._initializer !== null && !this._initializer.isMissing()) {
            return false;
        }
        if(!this._firstSemicolonToken.isMissing()) {
            return false;
        }
        if(this._condition !== null && !this._condition.isMissing()) {
            return false;
        }
        if(!this._secondSemicolonToken.isMissing()) {
            return false;
        }
        if(this._incrementor !== null && !this._incrementor.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        return true;
    };
    ForStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._forKeyword.width() > 0) {
            return this._forKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._variableDeclaration !== null && (token = this._variableDeclaration.firstToken()) !== null) {
            return token;
        }
        if(this._initializer !== null && (token = this._initializer.firstToken()) !== null) {
            return token;
        }
        if(this._firstSemicolonToken.width() > 0) {
            return this._firstSemicolonToken;
        }
        if(this._condition !== null && (token = this._condition.firstToken()) !== null) {
            return token;
        }
        if(this._secondSemicolonToken.width() > 0) {
            return this._secondSemicolonToken;
        }
        if(this._incrementor !== null && (token = this._incrementor.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ForStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._incrementor !== null && (token = this._incrementor.lastToken()) !== null) {
            return token;
        }
        if(this._secondSemicolonToken.width() > 0) {
            return this._secondSemicolonToken;
        }
        if(this._condition !== null && (token = this._condition.lastToken()) !== null) {
            return token;
        }
        if(this._firstSemicolonToken.width() > 0) {
            return this._firstSemicolonToken;
        }
        if(this._initializer !== null && (token = this._initializer.lastToken()) !== null) {
            return token;
        }
        if(this._variableDeclaration !== null && (token = this._variableDeclaration.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._forKeyword.width() > 0) {
            return this._forKeyword;
        }
        return null;
    };
    ForStatementSyntax.prototype.forKeyword = function () {
        return this._forKeyword;
    };
    ForStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    ForStatementSyntax.prototype.variableDeclaration = function () {
        return this._variableDeclaration;
    };
    ForStatementSyntax.prototype.initializer = function () {
        return this._initializer;
    };
    ForStatementSyntax.prototype.firstSemicolonToken = function () {
        return this._firstSemicolonToken;
    };
    ForStatementSyntax.prototype.condition = function () {
        return this._condition;
    };
    ForStatementSyntax.prototype.secondSemicolonToken = function () {
        return this._secondSemicolonToken;
    };
    ForStatementSyntax.prototype.incrementor = function () {
        return this._incrementor;
    };
    ForStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    ForStatementSyntax.prototype.statement = function () {
        return this._statement;
    };
    ForStatementSyntax.prototype.update = function (forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement) {
        if(this._forKeyword === forKeyword && this._openParenToken === openParenToken && this._variableDeclaration === variableDeclaration && this._initializer === initializer && this._firstSemicolonToken === firstSemicolonToken && this._condition === condition && this._secondSemicolonToken === secondSemicolonToken && this._incrementor === incrementor && this._closeParenToken === closeParenToken && this._statement === statement) {
            return this;
        }
        return new ForStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement);
    };
    ForStatementSyntax.prototype.withForKeyword = function (forKeyword) {
        return this.update(forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._forKeyword, openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withVariableDeclaration = function (variableDeclaration) {
        return this.update(this._forKeyword, this._openParenToken, variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withInitializer = function (initializer) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withFirstSemicolonToken = function (firstSemicolonToken) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withCondition = function (condition) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withSecondSemicolonToken = function (secondSemicolonToken) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, secondSemicolonToken, this._incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withIncrementor = function (incrementor) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, incrementor, this._closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, closeParenToken, this._statement);
    };
    ForStatementSyntax.prototype.withStatement = function (statement) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._initializer, this._firstSemicolonToken, this._condition, this._secondSemicolonToken, this._incrementor, this._closeParenToken, statement);
    };
    ForStatementSyntax.prototype.collectTextElements = function (elements) {
        this._forKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        if(this._variableDeclaration !== null) {
            this._variableDeclaration.collectTextElements(elements);
        }
        if(this._initializer !== null) {
            this._initializer.collectTextElements(elements);
        }
        this._firstSemicolonToken.collectTextElements(elements);
        if(this._condition !== null) {
            this._condition.collectTextElements(elements);
        }
        this._secondSemicolonToken.collectTextElements(elements);
        if(this._incrementor !== null) {
            this._incrementor.collectTextElements(elements);
        }
        this._closeParenToken.collectTextElements(elements);
        this._statement.collectTextElements(elements);
    };
    return ForStatementSyntax;
})(BaseForStatementSyntax);
var ForInStatementSyntax = (function (_super) {
    __extends(ForInStatementSyntax, _super);
    function ForInStatementSyntax(forKeyword, openParenToken, variableDeclaration, left, inKeyword, expression, closeParenToken, statement) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(forKeyword.keywordKind() !== 24 /* ForKeyword */ ) {
            throw Errors.argument('forKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(inKeyword.keywordKind() !== 27 /* InKeyword */ ) {
            throw Errors.argument('inKeyword');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._forKeyword = forKeyword;
        this._openParenToken = openParenToken;
        this._variableDeclaration = variableDeclaration;
        this._left = left;
        this._inKeyword = inKeyword;
        this._expression = expression;
        this._closeParenToken = closeParenToken;
        this._statement = statement;
    }
    ForInStatementSyntax.create = function create(forKeyword, openParenToken, inKeyword, expression, closeParenToken, statement) {
        return new ForInStatementSyntax(forKeyword, openParenToken, null, null, inKeyword, expression, closeParenToken, statement);
    }
    ForInStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitForInStatement(this);
    };
    ForInStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitForInStatement(this);
    };
    ForInStatementSyntax.prototype.kind = function () {
        return 147 /* ForInStatement */ ;
    };
    ForInStatementSyntax.prototype.isMissing = function () {
        if(!this._forKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(this._variableDeclaration !== null && !this._variableDeclaration.isMissing()) {
            return false;
        }
        if(this._left !== null && !this._left.isMissing()) {
            return false;
        }
        if(!this._inKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        return true;
    };
    ForInStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._forKeyword.width() > 0) {
            return this._forKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._variableDeclaration !== null && (token = this._variableDeclaration.firstToken()) !== null) {
            return token;
        }
        if(this._left !== null && (token = this._left.firstToken()) !== null) {
            return token;
        }
        if(this._inKeyword.width() > 0) {
            return this._inKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    ForInStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._inKeyword.width() > 0) {
            return this._inKeyword;
        }
        if(this._left !== null && (token = this._left.lastToken()) !== null) {
            return token;
        }
        if(this._variableDeclaration !== null && (token = this._variableDeclaration.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._forKeyword.width() > 0) {
            return this._forKeyword;
        }
        return null;
    };
    ForInStatementSyntax.prototype.forKeyword = function () {
        return this._forKeyword;
    };
    ForInStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    ForInStatementSyntax.prototype.variableDeclaration = function () {
        return this._variableDeclaration;
    };
    ForInStatementSyntax.prototype.left = function () {
        return this._left;
    };
    ForInStatementSyntax.prototype.inKeyword = function () {
        return this._inKeyword;
    };
    ForInStatementSyntax.prototype.expression = function () {
        return this._expression;
    };
    ForInStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    ForInStatementSyntax.prototype.statement = function () {
        return this._statement;
    };
    ForInStatementSyntax.prototype.update = function (forKeyword, openParenToken, variableDeclaration, left, inKeyword, expression, closeParenToken, statement) {
        if(this._forKeyword === forKeyword && this._openParenToken === openParenToken && this._variableDeclaration === variableDeclaration && this._left === left && this._inKeyword === inKeyword && this._expression === expression && this._closeParenToken === closeParenToken && this._statement === statement) {
            return this;
        }
        return new ForInStatementSyntax(forKeyword, openParenToken, variableDeclaration, left, inKeyword, expression, closeParenToken, statement);
    };
    ForInStatementSyntax.prototype.withForKeyword = function (forKeyword) {
        return this.update(forKeyword, this._openParenToken, this._variableDeclaration, this._left, this._inKeyword, this._expression, this._closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._forKeyword, openParenToken, this._variableDeclaration, this._left, this._inKeyword, this._expression, this._closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withVariableDeclaration = function (variableDeclaration) {
        return this.update(this._forKeyword, this._openParenToken, variableDeclaration, this._left, this._inKeyword, this._expression, this._closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withLeft = function (left) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, left, this._inKeyword, this._expression, this._closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withInKeyword = function (inKeyword) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._left, inKeyword, this._expression, this._closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withExpression = function (expression) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._left, this._inKeyword, expression, this._closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._left, this._inKeyword, this._expression, closeParenToken, this._statement);
    };
    ForInStatementSyntax.prototype.withStatement = function (statement) {
        return this.update(this._forKeyword, this._openParenToken, this._variableDeclaration, this._left, this._inKeyword, this._expression, this._closeParenToken, statement);
    };
    ForInStatementSyntax.prototype.collectTextElements = function (elements) {
        this._forKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        if(this._variableDeclaration !== null) {
            this._variableDeclaration.collectTextElements(elements);
        }
        if(this._left !== null) {
            this._left.collectTextElements(elements);
        }
        this._inKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._statement.collectTextElements(elements);
    };
    return ForInStatementSyntax;
})(BaseForStatementSyntax);
var WhileStatementSyntax = (function (_super) {
    __extends(WhileStatementSyntax, _super);
    function WhileStatementSyntax(whileKeyword, openParenToken, condition, closeParenToken, statement) {
        _super.call(this);
        if(condition === null) {
            throw Errors.argumentNull('condition');
        }
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(whileKeyword.keywordKind() !== 40 /* WhileKeyword */ ) {
            throw Errors.argument('whileKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._whileKeyword = whileKeyword;
        this._openParenToken = openParenToken;
        this._condition = condition;
        this._closeParenToken = closeParenToken;
        this._statement = statement;
    }
    WhileStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitWhileStatement(this);
    };
    WhileStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitWhileStatement(this);
    };
    WhileStatementSyntax.prototype.kind = function () {
        return 150 /* WhileStatement */ ;
    };
    WhileStatementSyntax.prototype.isMissing = function () {
        if(!this._whileKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._condition.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        return true;
    };
    WhileStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._whileKeyword.width() > 0) {
            return this._whileKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._condition.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    WhileStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._condition.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._whileKeyword.width() > 0) {
            return this._whileKeyword;
        }
        return null;
    };
    WhileStatementSyntax.prototype.whileKeyword = function () {
        return this._whileKeyword;
    };
    WhileStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    WhileStatementSyntax.prototype.condition = function () {
        return this._condition;
    };
    WhileStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    WhileStatementSyntax.prototype.statement = function () {
        return this._statement;
    };
    WhileStatementSyntax.prototype.update = function (whileKeyword, openParenToken, condition, closeParenToken, statement) {
        if(this._whileKeyword === whileKeyword && this._openParenToken === openParenToken && this._condition === condition && this._closeParenToken === closeParenToken && this._statement === statement) {
            return this;
        }
        return new WhileStatementSyntax(whileKeyword, openParenToken, condition, closeParenToken, statement);
    };
    WhileStatementSyntax.prototype.withWhileKeyword = function (whileKeyword) {
        return this.update(whileKeyword, this._openParenToken, this._condition, this._closeParenToken, this._statement);
    };
    WhileStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._whileKeyword, openParenToken, this._condition, this._closeParenToken, this._statement);
    };
    WhileStatementSyntax.prototype.withCondition = function (condition) {
        return this.update(this._whileKeyword, this._openParenToken, condition, this._closeParenToken, this._statement);
    };
    WhileStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._whileKeyword, this._openParenToken, this._condition, closeParenToken, this._statement);
    };
    WhileStatementSyntax.prototype.withStatement = function (statement) {
        return this.update(this._whileKeyword, this._openParenToken, this._condition, this._closeParenToken, statement);
    };
    WhileStatementSyntax.prototype.collectTextElements = function (elements) {
        this._whileKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._condition.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._statement.collectTextElements(elements);
    };
    return WhileStatementSyntax;
})(IterationStatementSyntax);
var WithStatementSyntax = (function (_super) {
    __extends(WithStatementSyntax, _super);
    function WithStatementSyntax(withKeyword, openParenToken, condition, closeParenToken, statement) {
        _super.call(this);
        if(condition === null) {
            throw Errors.argumentNull('condition');
        }
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(withKeyword.keywordKind() !== 41 /* WithKeyword */ ) {
            throw Errors.argument('withKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._withKeyword = withKeyword;
        this._openParenToken = openParenToken;
        this._condition = condition;
        this._closeParenToken = closeParenToken;
        this._statement = statement;
    }
    WithStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitWithStatement(this);
    };
    WithStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitWithStatement(this);
    };
    WithStatementSyntax.prototype.kind = function () {
        return 155 /* WithStatement */ ;
    };
    WithStatementSyntax.prototype.isMissing = function () {
        if(!this._withKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._condition.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        return true;
    };
    WithStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._withKeyword.width() > 0) {
            return this._withKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._condition.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    WithStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._condition.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._withKeyword.width() > 0) {
            return this._withKeyword;
        }
        return null;
    };
    WithStatementSyntax.prototype.withKeyword = function () {
        return this._withKeyword;
    };
    WithStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    WithStatementSyntax.prototype.condition = function () {
        return this._condition;
    };
    WithStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    WithStatementSyntax.prototype.statement = function () {
        return this._statement;
    };
    WithStatementSyntax.prototype.update = function (withKeyword, openParenToken, condition, closeParenToken, statement) {
        if(this._withKeyword === withKeyword && this._openParenToken === openParenToken && this._condition === condition && this._closeParenToken === closeParenToken && this._statement === statement) {
            return this;
        }
        return new WithStatementSyntax(withKeyword, openParenToken, condition, closeParenToken, statement);
    };
    WithStatementSyntax.prototype.withWithKeyword = function (withKeyword) {
        return this.update(withKeyword, this._openParenToken, this._condition, this._closeParenToken, this._statement);
    };
    WithStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._withKeyword, openParenToken, this._condition, this._closeParenToken, this._statement);
    };
    WithStatementSyntax.prototype.withCondition = function (condition) {
        return this.update(this._withKeyword, this._openParenToken, condition, this._closeParenToken, this._statement);
    };
    WithStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._withKeyword, this._openParenToken, this._condition, closeParenToken, this._statement);
    };
    WithStatementSyntax.prototype.withStatement = function (statement) {
        return this.update(this._withKeyword, this._openParenToken, this._condition, this._closeParenToken, statement);
    };
    WithStatementSyntax.prototype.collectTextElements = function (elements) {
        this._withKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._condition.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._statement.collectTextElements(elements);
    };
    return WithStatementSyntax;
})(StatementSyntax);
var EnumDeclarationSyntax = (function (_super) {
    __extends(EnumDeclarationSyntax, _super);
    function EnumDeclarationSyntax(exportKeyword, enumKeyword, identifier, openBraceToken, variableDeclarators, closeBraceToken) {
        _super.call(this);
        if(variableDeclarators === null) {
            throw Errors.argumentNull('variableDeclarators');
        }
        if(exportKeyword !== null) {
            if(exportKeyword.keywordKind() !== 45 /* ExportKeyword */ ) {
                throw Errors.argument('exportKeyword');
            }
        }
        if(enumKeyword.keywordKind() !== 44 /* EnumKeyword */ ) {
            throw Errors.argument('enumKeyword');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._exportKeyword = exportKeyword;
        this._enumKeyword = enumKeyword;
        this._identifier = identifier;
        this._openBraceToken = openBraceToken;
        this._variableDeclarators = variableDeclarators;
        this._closeBraceToken = closeBraceToken;
    }
    EnumDeclarationSyntax.create = function create(enumKeyword, identifier, openBraceToken, closeBraceToken) {
        return new EnumDeclarationSyntax(null, enumKeyword, identifier, openBraceToken, SeparatedSyntaxList.empty, closeBraceToken);
    }
    EnumDeclarationSyntax.prototype.accept = function (visitor) {
        visitor.visitEnumDeclaration(this);
    };
    EnumDeclarationSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitEnumDeclaration(this);
    };
    EnumDeclarationSyntax.prototype.kind = function () {
        return 131 /* EnumDeclaration */ ;
    };
    EnumDeclarationSyntax.prototype.isMissing = function () {
        if(this._exportKeyword !== null && !this._exportKeyword.isMissing()) {
            return false;
        }
        if(!this._enumKeyword.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._variableDeclarators.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    EnumDeclarationSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        if(this._enumKeyword.width() > 0) {
            return this._enumKeyword;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._variableDeclarators.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    EnumDeclarationSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._variableDeclarators.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._enumKeyword.width() > 0) {
            return this._enumKeyword;
        }
        if(this._exportKeyword !== null && this._exportKeyword.width() > 0) {
            return this._exportKeyword;
        }
        return null;
    };
    EnumDeclarationSyntax.prototype.exportKeyword = function () {
        return this._exportKeyword;
    };
    EnumDeclarationSyntax.prototype.enumKeyword = function () {
        return this._enumKeyword;
    };
    EnumDeclarationSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    EnumDeclarationSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    EnumDeclarationSyntax.prototype.variableDeclarators = function () {
        return this._variableDeclarators;
    };
    EnumDeclarationSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    EnumDeclarationSyntax.prototype.update = function (exportKeyword, enumKeyword, identifier, openBraceToken, variableDeclarators, closeBraceToken) {
        if(this._exportKeyword === exportKeyword && this._enumKeyword === enumKeyword && this._identifier === identifier && this._openBraceToken === openBraceToken && this._variableDeclarators === variableDeclarators && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new EnumDeclarationSyntax(exportKeyword, enumKeyword, identifier, openBraceToken, variableDeclarators, closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.withExportKeyword = function (exportKeyword) {
        return this.update(exportKeyword, this._enumKeyword, this._identifier, this._openBraceToken, this._variableDeclarators, this._closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.withEnumKeyword = function (enumKeyword) {
        return this.update(this._exportKeyword, enumKeyword, this._identifier, this._openBraceToken, this._variableDeclarators, this._closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._exportKeyword, this._enumKeyword, identifier, this._openBraceToken, this._variableDeclarators, this._closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(this._exportKeyword, this._enumKeyword, this._identifier, openBraceToken, this._variableDeclarators, this._closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.withVariableDeclarators = function (variableDeclarators) {
        return this.update(this._exportKeyword, this._enumKeyword, this._identifier, this._openBraceToken, variableDeclarators, this._closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._exportKeyword, this._enumKeyword, this._identifier, this._openBraceToken, this._variableDeclarators, closeBraceToken);
    };
    EnumDeclarationSyntax.prototype.collectTextElements = function (elements) {
        if(this._exportKeyword !== null) {
            this._exportKeyword.collectTextElements(elements);
        }
        this._enumKeyword.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        this._openBraceToken.collectTextElements(elements);
        this._variableDeclarators.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    return EnumDeclarationSyntax;
})(ModuleElementSyntax);
var CastExpressionSyntax = (function (_super) {
    __extends(CastExpressionSyntax, _super);
    function CastExpressionSyntax(lessThanToken, type, greaterThanToken, expression) {
        _super.call(this);
        if(type === null) {
            throw Errors.argumentNull('type');
        }
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(lessThanToken.kind() !== 77 /* LessThanToken */ ) {
            throw Errors.argument('lessThanToken');
        }
        if(greaterThanToken.kind() !== 78 /* GreaterThanToken */ ) {
            throw Errors.argument('greaterThanToken');
        }
        this._lessThanToken = lessThanToken;
        this._type = type;
        this._greaterThanToken = greaterThanToken;
        this._expression = expression;
    }
    CastExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitCastExpression(this);
    };
    CastExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitCastExpression(this);
    };
    CastExpressionSyntax.prototype.kind = function () {
        return 218 /* CastExpression */ ;
    };
    CastExpressionSyntax.prototype.isMissing = function () {
        if(!this._lessThanToken.isMissing()) {
            return false;
        }
        if(!this._type.isMissing()) {
            return false;
        }
        if(!this._greaterThanToken.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        return true;
    };
    CastExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._lessThanToken.width() > 0) {
            return this._lessThanToken;
        }
        if((token = this._type.firstToken()) !== null) {
            return token;
        }
        if(this._greaterThanToken.width() > 0) {
            return this._greaterThanToken;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    CastExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._greaterThanToken.width() > 0) {
            return this._greaterThanToken;
        }
        if((token = this._type.lastToken()) !== null) {
            return token;
        }
        if(this._lessThanToken.width() > 0) {
            return this._lessThanToken;
        }
        return null;
    };
    CastExpressionSyntax.prototype.lessThanToken = function () {
        return this._lessThanToken;
    };
    CastExpressionSyntax.prototype.type = function () {
        return this._type;
    };
    CastExpressionSyntax.prototype.greaterThanToken = function () {
        return this._greaterThanToken;
    };
    CastExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    CastExpressionSyntax.prototype.update = function (lessThanToken, type, greaterThanToken, expression) {
        if(this._lessThanToken === lessThanToken && this._type === type && this._greaterThanToken === greaterThanToken && this._expression === expression) {
            return this;
        }
        return new CastExpressionSyntax(lessThanToken, type, greaterThanToken, expression);
    };
    CastExpressionSyntax.prototype.withLessThanToken = function (lessThanToken) {
        return this.update(lessThanToken, this._type, this._greaterThanToken, this._expression);
    };
    CastExpressionSyntax.prototype.withType = function (type) {
        return this.update(this._lessThanToken, type, this._greaterThanToken, this._expression);
    };
    CastExpressionSyntax.prototype.withGreaterThanToken = function (greaterThanToken) {
        return this.update(this._lessThanToken, this._type, greaterThanToken, this._expression);
    };
    CastExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(this._lessThanToken, this._type, this._greaterThanToken, expression);
    };
    CastExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._lessThanToken.collectTextElements(elements);
        this._type.collectTextElements(elements);
        this._greaterThanToken.collectTextElements(elements);
        this._expression.collectTextElements(elements);
    };
    return CastExpressionSyntax;
})(UnaryExpressionSyntax);
var ObjectLiteralExpressionSyntax = (function (_super) {
    __extends(ObjectLiteralExpressionSyntax, _super);
    function ObjectLiteralExpressionSyntax(openBraceToken, propertyAssignments, closeBraceToken) {
        _super.call(this);
        if(propertyAssignments === null) {
            throw Errors.argumentNull('propertyAssignments');
        }
        if(openBraceToken.kind() !== 67 /* OpenBraceToken */ ) {
            throw Errors.argument('openBraceToken');
        }
        if(closeBraceToken.kind() !== 68 /* CloseBraceToken */ ) {
            throw Errors.argument('closeBraceToken');
        }
        this._openBraceToken = openBraceToken;
        this._propertyAssignments = propertyAssignments;
        this._closeBraceToken = closeBraceToken;
    }
    ObjectLiteralExpressionSyntax.create = function create(openBraceToken, closeBraceToken) {
        return new ObjectLiteralExpressionSyntax(openBraceToken, SeparatedSyntaxList.empty, closeBraceToken);
    }
    ObjectLiteralExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitObjectLiteralExpression(this);
    };
    ObjectLiteralExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitObjectLiteralExpression(this);
    };
    ObjectLiteralExpressionSyntax.prototype.kind = function () {
        return 213 /* ObjectLiteralExpression */ ;
    };
    ObjectLiteralExpressionSyntax.prototype.isMissing = function () {
        if(!this._openBraceToken.isMissing()) {
            return false;
        }
        if(!this._propertyAssignments.isMissing()) {
            return false;
        }
        if(!this._closeBraceToken.isMissing()) {
            return false;
        }
        return true;
    };
    ObjectLiteralExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        if((token = this._propertyAssignments.firstToken()) !== null) {
            return token;
        }
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        return null;
    };
    ObjectLiteralExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._closeBraceToken.width() > 0) {
            return this._closeBraceToken;
        }
        if((token = this._propertyAssignments.lastToken()) !== null) {
            return token;
        }
        if(this._openBraceToken.width() > 0) {
            return this._openBraceToken;
        }
        return null;
    };
    ObjectLiteralExpressionSyntax.prototype.openBraceToken = function () {
        return this._openBraceToken;
    };
    ObjectLiteralExpressionSyntax.prototype.propertyAssignments = function () {
        return this._propertyAssignments;
    };
    ObjectLiteralExpressionSyntax.prototype.closeBraceToken = function () {
        return this._closeBraceToken;
    };
    ObjectLiteralExpressionSyntax.prototype.update = function (openBraceToken, propertyAssignments, closeBraceToken) {
        if(this._openBraceToken === openBraceToken && this._propertyAssignments === propertyAssignments && this._closeBraceToken === closeBraceToken) {
            return this;
        }
        return new ObjectLiteralExpressionSyntax(openBraceToken, propertyAssignments, closeBraceToken);
    };
    ObjectLiteralExpressionSyntax.prototype.withOpenBraceToken = function (openBraceToken) {
        return this.update(openBraceToken, this._propertyAssignments, this._closeBraceToken);
    };
    ObjectLiteralExpressionSyntax.prototype.withPropertyAssignments = function (propertyAssignments) {
        return this.update(this._openBraceToken, propertyAssignments, this._closeBraceToken);
    };
    ObjectLiteralExpressionSyntax.prototype.withCloseBraceToken = function (closeBraceToken) {
        return this.update(this._openBraceToken, this._propertyAssignments, closeBraceToken);
    };
    ObjectLiteralExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._openBraceToken.collectTextElements(elements);
        this._propertyAssignments.collectTextElements(elements);
        this._closeBraceToken.collectTextElements(elements);
    };
    return ObjectLiteralExpressionSyntax;
})(UnaryExpressionSyntax);
var PropertyAssignmentSyntax = (function (_super) {
    __extends(PropertyAssignmentSyntax, _super);
    function PropertyAssignmentSyntax() {
        _super.call(this);
    }
    PropertyAssignmentSyntax.prototype.propertyName = function () {
        throw Errors.abstract();
    };
    return PropertyAssignmentSyntax;
})(SyntaxNode);
var SimplePropertyAssignmentSyntax = (function (_super) {
    __extends(SimplePropertyAssignmentSyntax, _super);
    function SimplePropertyAssignmentSyntax(propertyName, colonToken, expression) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        switch(propertyName.kind()) {
            case 9 /* IdentifierNameToken */ :
            case 12 /* StringLiteral */ :
            case 11 /* NumericLiteral */ : {
                break;

            }
            default: {
                throw Errors.argument('propertyName');

            }
        }
        if(colonToken.kind() !== 103 /* ColonToken */ ) {
            throw Errors.argument('colonToken');
        }
        this._propertyName = propertyName;
        this._colonToken = colonToken;
        this._expression = expression;
    }
    SimplePropertyAssignmentSyntax.prototype.accept = function (visitor) {
        visitor.visitSimplePropertyAssignment(this);
    };
    SimplePropertyAssignmentSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitSimplePropertyAssignment(this);
    };
    SimplePropertyAssignmentSyntax.prototype.kind = function () {
        return 242 /* SimplePropertyAssignment */ ;
    };
    SimplePropertyAssignmentSyntax.prototype.isMissing = function () {
        if(!this._propertyName.isMissing()) {
            return false;
        }
        if(!this._colonToken.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        return true;
    };
    SimplePropertyAssignmentSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._propertyName.width() > 0) {
            return this._propertyName;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    SimplePropertyAssignmentSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if(this._propertyName.width() > 0) {
            return this._propertyName;
        }
        return null;
    };
    SimplePropertyAssignmentSyntax.prototype.propertyName = function () {
        return this._propertyName;
    };
    SimplePropertyAssignmentSyntax.prototype.colonToken = function () {
        return this._colonToken;
    };
    SimplePropertyAssignmentSyntax.prototype.expression = function () {
        return this._expression;
    };
    SimplePropertyAssignmentSyntax.prototype.update = function (propertyName, colonToken, expression) {
        if(this._propertyName === propertyName && this._colonToken === colonToken && this._expression === expression) {
            return this;
        }
        return new SimplePropertyAssignmentSyntax(propertyName, colonToken, expression);
    };
    SimplePropertyAssignmentSyntax.prototype.withPropertyName = function (propertyName) {
        return this.update(propertyName, this._colonToken, this._expression);
    };
    SimplePropertyAssignmentSyntax.prototype.withColonToken = function (colonToken) {
        return this.update(this._propertyName, colonToken, this._expression);
    };
    SimplePropertyAssignmentSyntax.prototype.withExpression = function (expression) {
        return this.update(this._propertyName, this._colonToken, expression);
    };
    SimplePropertyAssignmentSyntax.prototype.collectTextElements = function (elements) {
        this._propertyName.collectTextElements(elements);
        this._colonToken.collectTextElements(elements);
        this._expression.collectTextElements(elements);
    };
    return SimplePropertyAssignmentSyntax;
})(PropertyAssignmentSyntax);
var AccessorPropertyAssignmentSyntax = (function (_super) {
    __extends(AccessorPropertyAssignmentSyntax, _super);
    function AccessorPropertyAssignmentSyntax() {
        _super.call(this);
    }
    AccessorPropertyAssignmentSyntax.prototype.propertyName = function () {
        throw Errors.abstract();
    };
    AccessorPropertyAssignmentSyntax.prototype.openParenToken = function () {
        throw Errors.abstract();
    };
    AccessorPropertyAssignmentSyntax.prototype.closeParenToken = function () {
        throw Errors.abstract();
    };
    AccessorPropertyAssignmentSyntax.prototype.block = function () {
        throw Errors.abstract();
    };
    return AccessorPropertyAssignmentSyntax;
})(PropertyAssignmentSyntax);
var GetAccessorPropertyAssignmentSyntax = (function (_super) {
    __extends(GetAccessorPropertyAssignmentSyntax, _super);
    function GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, block) {
        _super.call(this);
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(getKeyword.keywordKind() !== 62 /* GetKeyword */ ) {
            throw Errors.argument('getKeyword');
        }
        if(propertyName.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('propertyName');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._getKeyword = getKeyword;
        this._propertyName = propertyName;
        this._openParenToken = openParenToken;
        this._closeParenToken = closeParenToken;
        this._block = block;
    }
    GetAccessorPropertyAssignmentSyntax.prototype.accept = function (visitor) {
        visitor.visitGetAccessorPropertyAssignment(this);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitGetAccessorPropertyAssignment(this);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.kind = function () {
        return 245 /* GetAccessorPropertyAssignment */ ;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.isMissing = function () {
        if(!this._getKeyword.isMissing()) {
            return false;
        }
        if(!this._propertyName.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._getKeyword.width() > 0) {
            return this._getKeyword;
        }
        if(this._propertyName.width() > 0) {
            return this._propertyName;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._propertyName.width() > 0) {
            return this._propertyName;
        }
        if(this._getKeyword.width() > 0) {
            return this._getKeyword;
        }
        return null;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.getKeyword = function () {
        return this._getKeyword;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.propertyName = function () {
        return this._propertyName;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.block = function () {
        return this._block;
    };
    GetAccessorPropertyAssignmentSyntax.prototype.update = function (getKeyword, propertyName, openParenToken, closeParenToken, block) {
        if(this._getKeyword === getKeyword && this._propertyName === propertyName && this._openParenToken === openParenToken && this._closeParenToken === closeParenToken && this._block === block) {
            return this;
        }
        return new GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, block);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.withGetKeyword = function (getKeyword) {
        return this.update(getKeyword, this._propertyName, this._openParenToken, this._closeParenToken, this._block);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.withPropertyName = function (propertyName) {
        return this.update(this._getKeyword, propertyName, this._openParenToken, this._closeParenToken, this._block);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._getKeyword, this._propertyName, openParenToken, this._closeParenToken, this._block);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._getKeyword, this._propertyName, this._openParenToken, closeParenToken, this._block);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.withBlock = function (block) {
        return this.update(this._getKeyword, this._propertyName, this._openParenToken, this._closeParenToken, block);
    };
    GetAccessorPropertyAssignmentSyntax.prototype.collectTextElements = function (elements) {
        this._getKeyword.collectTextElements(elements);
        this._propertyName.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._block.collectTextElements(elements);
    };
    return GetAccessorPropertyAssignmentSyntax;
})(AccessorPropertyAssignmentSyntax);
var SetAccessorPropertyAssignmentSyntax = (function (_super) {
    __extends(SetAccessorPropertyAssignmentSyntax, _super);
    function SetAccessorPropertyAssignmentSyntax(setKeyword, propertyName, openParenToken, parameterName, closeParenToken, block) {
        _super.call(this);
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(setKeyword.keywordKind() !== 65 /* SetKeyword */ ) {
            throw Errors.argument('setKeyword');
        }
        if(propertyName.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('propertyName');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(parameterName.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('parameterName');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._setKeyword = setKeyword;
        this._propertyName = propertyName;
        this._openParenToken = openParenToken;
        this._parameterName = parameterName;
        this._closeParenToken = closeParenToken;
        this._block = block;
    }
    SetAccessorPropertyAssignmentSyntax.prototype.accept = function (visitor) {
        visitor.visitSetAccessorPropertyAssignment(this);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitSetAccessorPropertyAssignment(this);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.kind = function () {
        return 246 /* SetAccessorPropertyAssignment */ ;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.isMissing = function () {
        if(!this._setKeyword.isMissing()) {
            return false;
        }
        if(!this._propertyName.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._parameterName.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._setKeyword.width() > 0) {
            return this._setKeyword;
        }
        if(this._propertyName.width() > 0) {
            return this._propertyName;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._parameterName.width() > 0) {
            return this._parameterName;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._parameterName.width() > 0) {
            return this._parameterName;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._propertyName.width() > 0) {
            return this._propertyName;
        }
        if(this._setKeyword.width() > 0) {
            return this._setKeyword;
        }
        return null;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.setKeyword = function () {
        return this._setKeyword;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.propertyName = function () {
        return this._propertyName;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.parameterName = function () {
        return this._parameterName;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.block = function () {
        return this._block;
    };
    SetAccessorPropertyAssignmentSyntax.prototype.update = function (setKeyword, propertyName, openParenToken, parameterName, closeParenToken, block) {
        if(this._setKeyword === setKeyword && this._propertyName === propertyName && this._openParenToken === openParenToken && this._parameterName === parameterName && this._closeParenToken === closeParenToken && this._block === block) {
            return this;
        }
        return new SetAccessorPropertyAssignmentSyntax(setKeyword, propertyName, openParenToken, parameterName, closeParenToken, block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withSetKeyword = function (setKeyword) {
        return this.update(setKeyword, this._propertyName, this._openParenToken, this._parameterName, this._closeParenToken, this._block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withPropertyName = function (propertyName) {
        return this.update(this._setKeyword, propertyName, this._openParenToken, this._parameterName, this._closeParenToken, this._block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._setKeyword, this._propertyName, openParenToken, this._parameterName, this._closeParenToken, this._block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withParameterName = function (parameterName) {
        return this.update(this._setKeyword, this._propertyName, this._openParenToken, parameterName, this._closeParenToken, this._block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._setKeyword, this._propertyName, this._openParenToken, this._parameterName, closeParenToken, this._block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.withBlock = function (block) {
        return this.update(this._setKeyword, this._propertyName, this._openParenToken, this._parameterName, this._closeParenToken, block);
    };
    SetAccessorPropertyAssignmentSyntax.prototype.collectTextElements = function (elements) {
        this._setKeyword.collectTextElements(elements);
        this._propertyName.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._parameterName.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._block.collectTextElements(elements);
    };
    return SetAccessorPropertyAssignmentSyntax;
})(AccessorPropertyAssignmentSyntax);
var FunctionExpressionSyntax = (function (_super) {
    __extends(FunctionExpressionSyntax, _super);
    function FunctionExpressionSyntax(functionKeyword, identifier, callSignature, block) {
        _super.call(this);
        if(callSignature === null) {
            throw Errors.argumentNull('callSignature');
        }
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(functionKeyword.keywordKind() !== 25 /* FunctionKeyword */ ) {
            throw Errors.argument('functionKeyword');
        }
        if(identifier !== null) {
            if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
                throw Errors.argument('identifier');
            }
        }
        this._functionKeyword = functionKeyword;
        this._identifier = identifier;
        this._callSignature = callSignature;
        this._block = block;
    }
    FunctionExpressionSyntax.create = function create(functionKeyword, callSignature, block) {
        return new FunctionExpressionSyntax(functionKeyword, null, callSignature, block);
    }
    FunctionExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitFunctionExpression(this);
    };
    FunctionExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitFunctionExpression(this);
    };
    FunctionExpressionSyntax.prototype.kind = function () {
        return 220 /* FunctionExpression */ ;
    };
    FunctionExpressionSyntax.prototype.isMissing = function () {
        if(!this._functionKeyword.isMissing()) {
            return false;
        }
        if(this._identifier !== null && !this._identifier.isMissing()) {
            return false;
        }
        if(!this._callSignature.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    FunctionExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._functionKeyword.width() > 0) {
            return this._functionKeyword;
        }
        if(this._identifier !== null && this._identifier.width() > 0) {
            return this._identifier;
        }
        if((token = this._callSignature.firstToken()) !== null) {
            return token;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    FunctionExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if((token = this._callSignature.lastToken()) !== null) {
            return token;
        }
        if(this._identifier !== null && this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._functionKeyword.width() > 0) {
            return this._functionKeyword;
        }
        return null;
    };
    FunctionExpressionSyntax.prototype.functionKeyword = function () {
        return this._functionKeyword;
    };
    FunctionExpressionSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    FunctionExpressionSyntax.prototype.callSignature = function () {
        return this._callSignature;
    };
    FunctionExpressionSyntax.prototype.block = function () {
        return this._block;
    };
    FunctionExpressionSyntax.prototype.update = function (functionKeyword, identifier, callSignature, block) {
        if(this._functionKeyword === functionKeyword && this._identifier === identifier && this._callSignature === callSignature && this._block === block) {
            return this;
        }
        return new FunctionExpressionSyntax(functionKeyword, identifier, callSignature, block);
    };
    FunctionExpressionSyntax.prototype.withFunctionKeyword = function (functionKeyword) {
        return this.update(functionKeyword, this._identifier, this._callSignature, this._block);
    };
    FunctionExpressionSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._functionKeyword, identifier, this._callSignature, this._block);
    };
    FunctionExpressionSyntax.prototype.withCallSignature = function (callSignature) {
        return this.update(this._functionKeyword, this._identifier, callSignature, this._block);
    };
    FunctionExpressionSyntax.prototype.withBlock = function (block) {
        return this.update(this._functionKeyword, this._identifier, this._callSignature, block);
    };
    FunctionExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._functionKeyword.collectTextElements(elements);
        if(this._identifier !== null) {
            this._identifier.collectTextElements(elements);
        }
        this._callSignature.collectTextElements(elements);
        this._block.collectTextElements(elements);
    };
    return FunctionExpressionSyntax;
})(UnaryExpressionSyntax);
var EmptyStatementSyntax = (function (_super) {
    __extends(EmptyStatementSyntax, _super);
    function EmptyStatementSyntax(semicolonToken) {
        _super.call(this);
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._semicolonToken = semicolonToken;
    }
    EmptyStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitEmptyStatement(this);
    };
    EmptyStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitEmptyStatement(this);
    };
    EmptyStatementSyntax.prototype.kind = function () {
        return 148 /* EmptyStatement */ ;
    };
    EmptyStatementSyntax.prototype.isMissing = function () {
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    EmptyStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    EmptyStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    EmptyStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    EmptyStatementSyntax.prototype.update = function (semicolonToken) {
        if(this._semicolonToken === semicolonToken) {
            return this;
        }
        return new EmptyStatementSyntax(semicolonToken);
    };
    EmptyStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(semicolonToken);
    };
    EmptyStatementSyntax.prototype.collectTextElements = function (elements) {
        this._semicolonToken.collectTextElements(elements);
    };
    return EmptyStatementSyntax;
})(StatementSyntax);
var SuperExpressionSyntax = (function (_super) {
    __extends(SuperExpressionSyntax, _super);
    function SuperExpressionSyntax(superKeyword) {
        _super.call(this);
        if(superKeyword.keywordKind() !== 48 /* SuperKeyword */ ) {
            throw Errors.argument('superKeyword');
        }
        this._superKeyword = superKeyword;
    }
    SuperExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitSuperExpression(this);
    };
    SuperExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitSuperExpression(this);
    };
    SuperExpressionSyntax.prototype.kind = function () {
        return 221 /* SuperExpression */ ;
    };
    SuperExpressionSyntax.prototype.isMissing = function () {
        if(!this._superKeyword.isMissing()) {
            return false;
        }
        return true;
    };
    SuperExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._superKeyword.width() > 0) {
            return this._superKeyword;
        }
        return null;
    };
    SuperExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._superKeyword.width() > 0) {
            return this._superKeyword;
        }
        return null;
    };
    SuperExpressionSyntax.prototype.superKeyword = function () {
        return this._superKeyword;
    };
    SuperExpressionSyntax.prototype.update = function (superKeyword) {
        if(this._superKeyword === superKeyword) {
            return this;
        }
        return new SuperExpressionSyntax(superKeyword);
    };
    SuperExpressionSyntax.prototype.withSuperKeyword = function (superKeyword) {
        return this.update(superKeyword);
    };
    SuperExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._superKeyword.collectTextElements(elements);
    };
    return SuperExpressionSyntax;
})(UnaryExpressionSyntax);
var TryStatementSyntax = (function (_super) {
    __extends(TryStatementSyntax, _super);
    function TryStatementSyntax(tryKeyword, block, catchClause, finallyClause) {
        _super.call(this);
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(tryKeyword.keywordKind() !== 36 /* TryKeyword */ ) {
            throw Errors.argument('tryKeyword');
        }
        this._tryKeyword = tryKeyword;
        this._block = block;
        this._catchClause = catchClause;
        this._finallyClause = finallyClause;
    }
    TryStatementSyntax.create = function create(tryKeyword, block) {
        return new TryStatementSyntax(tryKeyword, block, null, null);
    }
    TryStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitTryStatement(this);
    };
    TryStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitTryStatement(this);
    };
    TryStatementSyntax.prototype.kind = function () {
        return 151 /* TryStatement */ ;
    };
    TryStatementSyntax.prototype.isMissing = function () {
        if(!this._tryKeyword.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        if(this._catchClause !== null && !this._catchClause.isMissing()) {
            return false;
        }
        if(this._finallyClause !== null && !this._finallyClause.isMissing()) {
            return false;
        }
        return true;
    };
    TryStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._tryKeyword.width() > 0) {
            return this._tryKeyword;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        if(this._catchClause !== null && (token = this._catchClause.firstToken()) !== null) {
            return token;
        }
        if(this._finallyClause !== null && (token = this._finallyClause.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    TryStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._finallyClause !== null && (token = this._finallyClause.lastToken()) !== null) {
            return token;
        }
        if(this._catchClause !== null && (token = this._catchClause.lastToken()) !== null) {
            return token;
        }
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if(this._tryKeyword.width() > 0) {
            return this._tryKeyword;
        }
        return null;
    };
    TryStatementSyntax.prototype.tryKeyword = function () {
        return this._tryKeyword;
    };
    TryStatementSyntax.prototype.block = function () {
        return this._block;
    };
    TryStatementSyntax.prototype.catchClause = function () {
        return this._catchClause;
    };
    TryStatementSyntax.prototype.finallyClause = function () {
        return this._finallyClause;
    };
    TryStatementSyntax.prototype.update = function (tryKeyword, block, catchClause, finallyClause) {
        if(this._tryKeyword === tryKeyword && this._block === block && this._catchClause === catchClause && this._finallyClause === finallyClause) {
            return this;
        }
        return new TryStatementSyntax(tryKeyword, block, catchClause, finallyClause);
    };
    TryStatementSyntax.prototype.withTryKeyword = function (tryKeyword) {
        return this.update(tryKeyword, this._block, this._catchClause, this._finallyClause);
    };
    TryStatementSyntax.prototype.withBlock = function (block) {
        return this.update(this._tryKeyword, block, this._catchClause, this._finallyClause);
    };
    TryStatementSyntax.prototype.withCatchClause = function (catchClause) {
        return this.update(this._tryKeyword, this._block, catchClause, this._finallyClause);
    };
    TryStatementSyntax.prototype.withFinallyClause = function (finallyClause) {
        return this.update(this._tryKeyword, this._block, this._catchClause, finallyClause);
    };
    TryStatementSyntax.prototype.collectTextElements = function (elements) {
        this._tryKeyword.collectTextElements(elements);
        this._block.collectTextElements(elements);
        if(this._catchClause !== null) {
            this._catchClause.collectTextElements(elements);
        }
        if(this._finallyClause !== null) {
            this._finallyClause.collectTextElements(elements);
        }
    };
    return TryStatementSyntax;
})(StatementSyntax);
var CatchClauseSyntax = (function (_super) {
    __extends(CatchClauseSyntax, _super);
    function CatchClauseSyntax(catchKeyword, openParenToken, identifier, closeParenToken, block) {
        _super.call(this);
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(catchKeyword.keywordKind() !== 15 /* CatchKeyword */ ) {
            throw Errors.argument('catchKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        this._catchKeyword = catchKeyword;
        this._openParenToken = openParenToken;
        this._identifier = identifier;
        this._closeParenToken = closeParenToken;
        this._block = block;
    }
    CatchClauseSyntax.prototype.accept = function (visitor) {
        visitor.visitCatchClause(this);
    };
    CatchClauseSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitCatchClause(this);
    };
    CatchClauseSyntax.prototype.kind = function () {
        return 233 /* CatchClause */ ;
    };
    CatchClauseSyntax.prototype.isMissing = function () {
        if(!this._catchKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    CatchClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._catchKeyword.width() > 0) {
            return this._catchKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    CatchClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._catchKeyword.width() > 0) {
            return this._catchKeyword;
        }
        return null;
    };
    CatchClauseSyntax.prototype.catchKeyword = function () {
        return this._catchKeyword;
    };
    CatchClauseSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    CatchClauseSyntax.prototype.identifier = function () {
        return this._identifier;
    };
    CatchClauseSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    CatchClauseSyntax.prototype.block = function () {
        return this._block;
    };
    CatchClauseSyntax.prototype.update = function (catchKeyword, openParenToken, identifier, closeParenToken, block) {
        if(this._catchKeyword === catchKeyword && this._openParenToken === openParenToken && this._identifier === identifier && this._closeParenToken === closeParenToken && this._block === block) {
            return this;
        }
        return new CatchClauseSyntax(catchKeyword, openParenToken, identifier, closeParenToken, block);
    };
    CatchClauseSyntax.prototype.withCatchKeyword = function (catchKeyword) {
        return this.update(catchKeyword, this._openParenToken, this._identifier, this._closeParenToken, this._block);
    };
    CatchClauseSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._catchKeyword, openParenToken, this._identifier, this._closeParenToken, this._block);
    };
    CatchClauseSyntax.prototype.withIdentifier = function (identifier) {
        return this.update(this._catchKeyword, this._openParenToken, identifier, this._closeParenToken, this._block);
    };
    CatchClauseSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._catchKeyword, this._openParenToken, this._identifier, closeParenToken, this._block);
    };
    CatchClauseSyntax.prototype.withBlock = function (block) {
        return this.update(this._catchKeyword, this._openParenToken, this._identifier, this._closeParenToken, block);
    };
    CatchClauseSyntax.prototype.collectTextElements = function (elements) {
        this._catchKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._identifier.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._block.collectTextElements(elements);
    };
    return CatchClauseSyntax;
})(SyntaxNode);
var FinallyClauseSyntax = (function (_super) {
    __extends(FinallyClauseSyntax, _super);
    function FinallyClauseSyntax(finallyKeyword, block) {
        _super.call(this);
        if(block === null) {
            throw Errors.argumentNull('block');
        }
        if(finallyKeyword.keywordKind() !== 23 /* FinallyKeyword */ ) {
            throw Errors.argument('finallyKeyword');
        }
        this._finallyKeyword = finallyKeyword;
        this._block = block;
    }
    FinallyClauseSyntax.prototype.accept = function (visitor) {
        visitor.visitFinallyClause(this);
    };
    FinallyClauseSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitFinallyClause(this);
    };
    FinallyClauseSyntax.prototype.kind = function () {
        return 234 /* FinallyClause */ ;
    };
    FinallyClauseSyntax.prototype.isMissing = function () {
        if(!this._finallyKeyword.isMissing()) {
            return false;
        }
        if(!this._block.isMissing()) {
            return false;
        }
        return true;
    };
    FinallyClauseSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._finallyKeyword.width() > 0) {
            return this._finallyKeyword;
        }
        if((token = this._block.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    FinallyClauseSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._block.lastToken()) !== null) {
            return token;
        }
        if(this._finallyKeyword.width() > 0) {
            return this._finallyKeyword;
        }
        return null;
    };
    FinallyClauseSyntax.prototype.finallyKeyword = function () {
        return this._finallyKeyword;
    };
    FinallyClauseSyntax.prototype.block = function () {
        return this._block;
    };
    FinallyClauseSyntax.prototype.update = function (finallyKeyword, block) {
        if(this._finallyKeyword === finallyKeyword && this._block === block) {
            return this;
        }
        return new FinallyClauseSyntax(finallyKeyword, block);
    };
    FinallyClauseSyntax.prototype.withFinallyKeyword = function (finallyKeyword) {
        return this.update(finallyKeyword, this._block);
    };
    FinallyClauseSyntax.prototype.withBlock = function (block) {
        return this.update(this._finallyKeyword, block);
    };
    FinallyClauseSyntax.prototype.collectTextElements = function (elements) {
        this._finallyKeyword.collectTextElements(elements);
        this._block.collectTextElements(elements);
    };
    return FinallyClauseSyntax;
})(SyntaxNode);
var LabeledStatement = (function (_super) {
    __extends(LabeledStatement, _super);
    function LabeledStatement(identifier, colonToken, statement) {
        _super.call(this);
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(identifier.kind() !== 9 /* IdentifierNameToken */ ) {
            throw Errors.argument('identifier');
        }
        if(colonToken.kind() !== 103 /* ColonToken */ ) {
            throw Errors.argument('colonToken');
        }
        this._identifier = identifier;
        this._colonToken = colonToken;
        this._statement = statement;
    }
    LabeledStatement.prototype.accept = function (visitor) {
        visitor.visitLabeledStatement(this);
    };
    LabeledStatement.prototype.accept1 = function (visitor) {
        return visitor.visitLabeledStatement(this);
    };
    LabeledStatement.prototype.kind = function () {
        return 152 /* LabeledStatement */ ;
    };
    LabeledStatement.prototype.isMissing = function () {
        if(!this._identifier.isMissing()) {
            return false;
        }
        if(!this._colonToken.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        return true;
    };
    LabeledStatement.prototype.firstToken = function () {
        var token = null;
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    LabeledStatement.prototype.lastToken = function () {
        var token = null;
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._colonToken.width() > 0) {
            return this._colonToken;
        }
        if(this._identifier.width() > 0) {
            return this._identifier;
        }
        return null;
    };
    LabeledStatement.prototype.identifier = function () {
        return this._identifier;
    };
    LabeledStatement.prototype.colonToken = function () {
        return this._colonToken;
    };
    LabeledStatement.prototype.statement = function () {
        return this._statement;
    };
    LabeledStatement.prototype.update = function (identifier, colonToken, statement) {
        if(this._identifier === identifier && this._colonToken === colonToken && this._statement === statement) {
            return this;
        }
        return new LabeledStatement(identifier, colonToken, statement);
    };
    LabeledStatement.prototype.withIdentifier = function (identifier) {
        return this.update(identifier, this._colonToken, this._statement);
    };
    LabeledStatement.prototype.withColonToken = function (colonToken) {
        return this.update(this._identifier, colonToken, this._statement);
    };
    LabeledStatement.prototype.withStatement = function (statement) {
        return this.update(this._identifier, this._colonToken, statement);
    };
    LabeledStatement.prototype.collectTextElements = function (elements) {
        this._identifier.collectTextElements(elements);
        this._colonToken.collectTextElements(elements);
        this._statement.collectTextElements(elements);
    };
    return LabeledStatement;
})(StatementSyntax);
var DoStatementSyntax = (function (_super) {
    __extends(DoStatementSyntax, _super);
    function DoStatementSyntax(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken) {
        _super.call(this);
        if(statement === null) {
            throw Errors.argumentNull('statement');
        }
        if(condition === null) {
            throw Errors.argumentNull('condition');
        }
        if(doKeyword.keywordKind() !== 20 /* DoKeyword */ ) {
            throw Errors.argument('doKeyword');
        }
        if(whileKeyword.keywordKind() !== 40 /* WhileKeyword */ ) {
            throw Errors.argument('whileKeyword');
        }
        if(openParenToken.kind() !== 69 /* OpenParenToken */ ) {
            throw Errors.argument('openParenToken');
        }
        if(closeParenToken.kind() !== 70 /* CloseParenToken */ ) {
            throw Errors.argument('closeParenToken');
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._doKeyword = doKeyword;
        this._statement = statement;
        this._whileKeyword = whileKeyword;
        this._openParenToken = openParenToken;
        this._condition = condition;
        this._closeParenToken = closeParenToken;
        this._semicolonToken = semicolonToken;
    }
    DoStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitDoStatement(this);
    };
    DoStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitDoStatement(this);
    };
    DoStatementSyntax.prototype.kind = function () {
        return 153 /* DoStatement */ ;
    };
    DoStatementSyntax.prototype.isMissing = function () {
        if(!this._doKeyword.isMissing()) {
            return false;
        }
        if(!this._statement.isMissing()) {
            return false;
        }
        if(!this._whileKeyword.isMissing()) {
            return false;
        }
        if(!this._openParenToken.isMissing()) {
            return false;
        }
        if(!this._condition.isMissing()) {
            return false;
        }
        if(!this._closeParenToken.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    DoStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._doKeyword.width() > 0) {
            return this._doKeyword;
        }
        if((token = this._statement.firstToken()) !== null) {
            return token;
        }
        if(this._whileKeyword.width() > 0) {
            return this._whileKeyword;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if((token = this._condition.firstToken()) !== null) {
            return token;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    DoStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._closeParenToken.width() > 0) {
            return this._closeParenToken;
        }
        if((token = this._condition.lastToken()) !== null) {
            return token;
        }
        if(this._openParenToken.width() > 0) {
            return this._openParenToken;
        }
        if(this._whileKeyword.width() > 0) {
            return this._whileKeyword;
        }
        if((token = this._statement.lastToken()) !== null) {
            return token;
        }
        if(this._doKeyword.width() > 0) {
            return this._doKeyword;
        }
        return null;
    };
    DoStatementSyntax.prototype.doKeyword = function () {
        return this._doKeyword;
    };
    DoStatementSyntax.prototype.statement = function () {
        return this._statement;
    };
    DoStatementSyntax.prototype.whileKeyword = function () {
        return this._whileKeyword;
    };
    DoStatementSyntax.prototype.openParenToken = function () {
        return this._openParenToken;
    };
    DoStatementSyntax.prototype.condition = function () {
        return this._condition;
    };
    DoStatementSyntax.prototype.closeParenToken = function () {
        return this._closeParenToken;
    };
    DoStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    DoStatementSyntax.prototype.update = function (doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken) {
        if(this._doKeyword === doKeyword && this._statement === statement && this._whileKeyword === whileKeyword && this._openParenToken === openParenToken && this._condition === condition && this._closeParenToken === closeParenToken && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new DoStatementSyntax(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken);
    };
    DoStatementSyntax.prototype.withDoKeyword = function (doKeyword) {
        return this.update(doKeyword, this._statement, this._whileKeyword, this._openParenToken, this._condition, this._closeParenToken, this._semicolonToken);
    };
    DoStatementSyntax.prototype.withStatement = function (statement) {
        return this.update(this._doKeyword, statement, this._whileKeyword, this._openParenToken, this._condition, this._closeParenToken, this._semicolonToken);
    };
    DoStatementSyntax.prototype.withWhileKeyword = function (whileKeyword) {
        return this.update(this._doKeyword, this._statement, whileKeyword, this._openParenToken, this._condition, this._closeParenToken, this._semicolonToken);
    };
    DoStatementSyntax.prototype.withOpenParenToken = function (openParenToken) {
        return this.update(this._doKeyword, this._statement, this._whileKeyword, openParenToken, this._condition, this._closeParenToken, this._semicolonToken);
    };
    DoStatementSyntax.prototype.withCondition = function (condition) {
        return this.update(this._doKeyword, this._statement, this._whileKeyword, this._openParenToken, condition, this._closeParenToken, this._semicolonToken);
    };
    DoStatementSyntax.prototype.withCloseParenToken = function (closeParenToken) {
        return this.update(this._doKeyword, this._statement, this._whileKeyword, this._openParenToken, this._condition, closeParenToken, this._semicolonToken);
    };
    DoStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._doKeyword, this._statement, this._whileKeyword, this._openParenToken, this._condition, this._closeParenToken, semicolonToken);
    };
    DoStatementSyntax.prototype.collectTextElements = function (elements) {
        this._doKeyword.collectTextElements(elements);
        this._statement.collectTextElements(elements);
        this._whileKeyword.collectTextElements(elements);
        this._openParenToken.collectTextElements(elements);
        this._condition.collectTextElements(elements);
        this._closeParenToken.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    return DoStatementSyntax;
})(IterationStatementSyntax);
var TypeOfExpressionSyntax = (function (_super) {
    __extends(TypeOfExpressionSyntax, _super);
    function TypeOfExpressionSyntax(typeOfKeyword, expression) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(typeOfKeyword.keywordKind() !== 37 /* TypeOfKeyword */ ) {
            throw Errors.argument('typeOfKeyword');
        }
        this._typeOfKeyword = typeOfKeyword;
        this._expression = expression;
    }
    TypeOfExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitTypeOfExpression(this);
    };
    TypeOfExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitTypeOfExpression(this);
    };
    TypeOfExpressionSyntax.prototype.kind = function () {
        return 163 /* TypeOfExpression */ ;
    };
    TypeOfExpressionSyntax.prototype.isMissing = function () {
        if(!this._typeOfKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        return true;
    };
    TypeOfExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._typeOfKeyword.width() > 0) {
            return this._typeOfKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    TypeOfExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._typeOfKeyword.width() > 0) {
            return this._typeOfKeyword;
        }
        return null;
    };
    TypeOfExpressionSyntax.prototype.typeOfKeyword = function () {
        return this._typeOfKeyword;
    };
    TypeOfExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    TypeOfExpressionSyntax.prototype.update = function (typeOfKeyword, expression) {
        if(this._typeOfKeyword === typeOfKeyword && this._expression === expression) {
            return this;
        }
        return new TypeOfExpressionSyntax(typeOfKeyword, expression);
    };
    TypeOfExpressionSyntax.prototype.withTypeOfKeyword = function (typeOfKeyword) {
        return this.update(typeOfKeyword, this._expression);
    };
    TypeOfExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(this._typeOfKeyword, expression);
    };
    TypeOfExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._typeOfKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
    };
    return TypeOfExpressionSyntax;
})(UnaryExpressionSyntax);
var DeleteExpressionSyntax = (function (_super) {
    __extends(DeleteExpressionSyntax, _super);
    function DeleteExpressionSyntax(deleteKeyword, expression) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(deleteKeyword.keywordKind() !== 19 /* DeleteKeyword */ ) {
            throw Errors.argument('deleteKeyword');
        }
        this._deleteKeyword = deleteKeyword;
        this._expression = expression;
    }
    DeleteExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitDeleteExpression(this);
    };
    DeleteExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitDeleteExpression(this);
    };
    DeleteExpressionSyntax.prototype.kind = function () {
        return 162 /* DeleteExpression */ ;
    };
    DeleteExpressionSyntax.prototype.isMissing = function () {
        if(!this._deleteKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        return true;
    };
    DeleteExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._deleteKeyword.width() > 0) {
            return this._deleteKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    DeleteExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._deleteKeyword.width() > 0) {
            return this._deleteKeyword;
        }
        return null;
    };
    DeleteExpressionSyntax.prototype.deleteKeyword = function () {
        return this._deleteKeyword;
    };
    DeleteExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    DeleteExpressionSyntax.prototype.update = function (deleteKeyword, expression) {
        if(this._deleteKeyword === deleteKeyword && this._expression === expression) {
            return this;
        }
        return new DeleteExpressionSyntax(deleteKeyword, expression);
    };
    DeleteExpressionSyntax.prototype.withDeleteKeyword = function (deleteKeyword) {
        return this.update(deleteKeyword, this._expression);
    };
    DeleteExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(this._deleteKeyword, expression);
    };
    DeleteExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._deleteKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
    };
    return DeleteExpressionSyntax;
})(UnaryExpressionSyntax);
var VoidExpressionSyntax = (function (_super) {
    __extends(VoidExpressionSyntax, _super);
    function VoidExpressionSyntax(voidKeyword, expression) {
        _super.call(this);
        if(expression === null) {
            throw Errors.argumentNull('expression');
        }
        if(voidKeyword.keywordKind() !== 39 /* VoidKeyword */ ) {
            throw Errors.argument('voidKeyword');
        }
        this._voidKeyword = voidKeyword;
        this._expression = expression;
    }
    VoidExpressionSyntax.prototype.accept = function (visitor) {
        visitor.visitVoidExpression(this);
    };
    VoidExpressionSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitVoidExpression(this);
    };
    VoidExpressionSyntax.prototype.kind = function () {
        return 164 /* VoidExpression */ ;
    };
    VoidExpressionSyntax.prototype.isMissing = function () {
        if(!this._voidKeyword.isMissing()) {
            return false;
        }
        if(!this._expression.isMissing()) {
            return false;
        }
        return true;
    };
    VoidExpressionSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._voidKeyword.width() > 0) {
            return this._voidKeyword;
        }
        if((token = this._expression.firstToken()) !== null) {
            return token;
        }
        return null;
    };
    VoidExpressionSyntax.prototype.lastToken = function () {
        var token = null;
        if((token = this._expression.lastToken()) !== null) {
            return token;
        }
        if(this._voidKeyword.width() > 0) {
            return this._voidKeyword;
        }
        return null;
    };
    VoidExpressionSyntax.prototype.voidKeyword = function () {
        return this._voidKeyword;
    };
    VoidExpressionSyntax.prototype.expression = function () {
        return this._expression;
    };
    VoidExpressionSyntax.prototype.update = function (voidKeyword, expression) {
        if(this._voidKeyword === voidKeyword && this._expression === expression) {
            return this;
        }
        return new VoidExpressionSyntax(voidKeyword, expression);
    };
    VoidExpressionSyntax.prototype.withVoidKeyword = function (voidKeyword) {
        return this.update(voidKeyword, this._expression);
    };
    VoidExpressionSyntax.prototype.withExpression = function (expression) {
        return this.update(this._voidKeyword, expression);
    };
    VoidExpressionSyntax.prototype.collectTextElements = function (elements) {
        this._voidKeyword.collectTextElements(elements);
        this._expression.collectTextElements(elements);
    };
    return VoidExpressionSyntax;
})(UnaryExpressionSyntax);
var DebuggerStatementSyntax = (function (_super) {
    __extends(DebuggerStatementSyntax, _super);
    function DebuggerStatementSyntax(debuggerKeyword, semicolonToken) {
        _super.call(this);
        if(debuggerKeyword.keywordKind() !== 17 /* DebuggerKeyword */ ) {
            throw Errors.argument('debuggerKeyword');
        }
        if(semicolonToken.kind() !== 75 /* SemicolonToken */ ) {
            throw Errors.argument('semicolonToken');
        }
        this._debuggerKeyword = debuggerKeyword;
        this._semicolonToken = semicolonToken;
    }
    DebuggerStatementSyntax.prototype.accept = function (visitor) {
        visitor.visitDebuggerStatement(this);
    };
    DebuggerStatementSyntax.prototype.accept1 = function (visitor) {
        return visitor.visitDebuggerStatement(this);
    };
    DebuggerStatementSyntax.prototype.kind = function () {
        return 154 /* DebuggerStatement */ ;
    };
    DebuggerStatementSyntax.prototype.isMissing = function () {
        if(!this._debuggerKeyword.isMissing()) {
            return false;
        }
        if(!this._semicolonToken.isMissing()) {
            return false;
        }
        return true;
    };
    DebuggerStatementSyntax.prototype.firstToken = function () {
        var token = null;
        if(this._debuggerKeyword.width() > 0) {
            return this._debuggerKeyword;
        }
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        return null;
    };
    DebuggerStatementSyntax.prototype.lastToken = function () {
        var token = null;
        if(this._semicolonToken.width() > 0) {
            return this._semicolonToken;
        }
        if(this._debuggerKeyword.width() > 0) {
            return this._debuggerKeyword;
        }
        return null;
    };
    DebuggerStatementSyntax.prototype.debuggerKeyword = function () {
        return this._debuggerKeyword;
    };
    DebuggerStatementSyntax.prototype.semicolonToken = function () {
        return this._semicolonToken;
    };
    DebuggerStatementSyntax.prototype.update = function (debuggerKeyword, semicolonToken) {
        if(this._debuggerKeyword === debuggerKeyword && this._semicolonToken === semicolonToken) {
            return this;
        }
        return new DebuggerStatementSyntax(debuggerKeyword, semicolonToken);
    };
    DebuggerStatementSyntax.prototype.withDebuggerKeyword = function (debuggerKeyword) {
        return this.update(debuggerKeyword, this._semicolonToken);
    };
    DebuggerStatementSyntax.prototype.withSemicolonToken = function (semicolonToken) {
        return this.update(this._debuggerKeyword, semicolonToken);
    };
    DebuggerStatementSyntax.prototype.collectTextElements = function (elements) {
        this._debuggerKeyword.collectTextElements(elements);
        this._semicolonToken.collectTextElements(elements);
    };
    return DebuggerStatementSyntax;
})(StatementSyntax);
var SyntaxRewriter = (function () {
    function SyntaxRewriter() { }
    SyntaxRewriter.prototype.visitToken = function (token) {
        return token;
    };
    SyntaxRewriter.prototype.visitNode = function (node) {
        return node === null ? null : node.accept1(this);
    };
    SyntaxRewriter.prototype.visitList = function (list) {
        var newItems = null;
        for(var i = 0, n = list.count(); i < n; i++) {
            var item = list.syntaxNodeAt(i);
            var newItem = item.accept1(this);
            if(item !== newItem && newItems === null) {
                newItems = [];
                for(var j = 0; j < i; j++) {
                    newItems.push(list.syntaxNodeAt(j));
                }
            }
            if(newItems) {
                newItems.push(newItem);
            }
        }
        Debug.assert(newItems === null || newItems.length === list.count());
        return newItems === null ? list : SyntaxList.create(newItems);
    };
    SyntaxRewriter.prototype.visitSeparatedList = function (list) {
        var newItems = null;
        for(var i = 0, n = list.count(); i < n; i++) {
            var item = list.itemAt(i);
            var newItem = item.isToken() ? this.visitToken(item) : this.visitNode(item);
            if(item !== newItem && newItems === null) {
                newItems = [];
                for(var j = 0; j < i; j++) {
                    newItems.push(list.itemAt(j));
                }
            }
            if(newItems) {
                newItems.push(newItem);
            }
        }
        Debug.assert(newItems === null || newItems.length === list.count());
        return newItems === null ? list : SeparatedSyntaxList.create(newItems);
    };
    SyntaxRewriter.prototype.visitSourceUnit = function (node) {
        return node.update(this.visitList(node.moduleElements()), this.visitToken(node.endOfFileToken()));
    };
    SyntaxRewriter.prototype.visitExternalModuleReference = function (node) {
        return node.update(this.visitToken(node.moduleKeyword()), this.visitToken(node.openParenToken()), this.visitToken(node.stringLiteral()), this.visitToken(node.closeParenToken()));
    };
    SyntaxRewriter.prototype.visitModuleNameModuleReference = function (node) {
        return node.withModuleName(this.visitNode(node.moduleName()));
    };
    SyntaxRewriter.prototype.visitImportDeclaration = function (node) {
        return node.update(this.visitToken(node.importKeyword()), this.visitToken(node.identifier()), this.visitToken(node.equalsToken()), this.visitNode(node.moduleReference()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitClassDeclaration = function (node) {
        return node.update(node.exportKeyword() === null ? null : this.visitToken(node.exportKeyword()), node.declareKeyword() === null ? null : this.visitToken(node.declareKeyword()), this.visitToken(node.classKeyword()), this.visitToken(node.identifier()), this.visitNode(node.extendsClause()), this.visitNode(node.implementsClause()), this.visitToken(node.openBraceToken()), this.visitList(node.classElements()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitInterfaceDeclaration = function (node) {
        return node.update(node.exportKeyword() === null ? null : this.visitToken(node.exportKeyword()), this.visitToken(node.interfaceKeyword()), this.visitToken(node.identifier()), this.visitNode(node.extendsClause()), this.visitNode(node.body()));
    };
    SyntaxRewriter.prototype.visitExtendsClause = function (node) {
        return node.update(this.visitToken(node.extendsKeyword()), this.visitSeparatedList(node.typeNames()));
    };
    SyntaxRewriter.prototype.visitImplementsClause = function (node) {
        return node.update(this.visitToken(node.implementsKeyword()), this.visitSeparatedList(node.typeNames()));
    };
    SyntaxRewriter.prototype.visitModuleDeclaration = function (node) {
        return node.update(node.exportKeyword() === null ? null : this.visitToken(node.exportKeyword()), node.declareKeyword() === null ? null : this.visitToken(node.declareKeyword()), this.visitToken(node.moduleKeyword()), this.visitNode(node.moduleName()), node.stringLiteral() === null ? null : this.visitToken(node.stringLiteral()), this.visitToken(node.openBraceToken()), this.visitList(node.moduleElements()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitFunctionDeclaration = function (node) {
        return node.update(node.exportKeyword() === null ? null : this.visitToken(node.exportKeyword()), node.declareKeyword() === null ? null : this.visitToken(node.declareKeyword()), this.visitToken(node.functionKeyword()), this.visitNode(node.functionSignature()), this.visitNode(node.block()), node.semicolonToken() === null ? null : this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitVariableStatement = function (node) {
        return node.update(node.exportKeyword() === null ? null : this.visitToken(node.exportKeyword()), node.declareKeyword() === null ? null : this.visitToken(node.declareKeyword()), this.visitNode(node.variableDeclaration()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitVariableDeclaration = function (node) {
        return node.update(this.visitToken(node.varKeyword()), this.visitSeparatedList(node.variableDeclarators()));
    };
    SyntaxRewriter.prototype.visitVariableDeclarator = function (node) {
        return node.update(this.visitToken(node.identifier()), this.visitNode(node.typeAnnotation()), this.visitNode(node.equalsValueClause()));
    };
    SyntaxRewriter.prototype.visitEqualsValueClause = function (node) {
        return node.update(this.visitToken(node.equalsToken()), this.visitNode(node.value()));
    };
    SyntaxRewriter.prototype.visitPrefixUnaryExpression = function (node) {
        return node.update(node.kind(), this.visitToken(node.operatorToken()), this.visitNode(node.operand()));
    };
    SyntaxRewriter.prototype.visitThisExpression = function (node) {
        return node.withThisKeyword(this.visitToken(node.thisKeyword()));
    };
    SyntaxRewriter.prototype.visitLiteralExpression = function (node) {
        return node.update(node.kind(), this.visitToken(node.literalToken()));
    };
    SyntaxRewriter.prototype.visitArrayLiteralExpression = function (node) {
        return node.update(this.visitToken(node.openBracketToken()), this.visitSeparatedList(node.expressions()), this.visitToken(node.closeBracketToken()));
    };
    SyntaxRewriter.prototype.visitOmittedExpression = function (node) {
        return node;
    };
    SyntaxRewriter.prototype.visitParenthesizedExpression = function (node) {
        return node.update(this.visitToken(node.openParenToken()), this.visitNode(node.expression()), this.visitToken(node.closeParenToken()));
    };
    SyntaxRewriter.prototype.visitSimpleArrowFunctionExpression = function (node) {
        return node.update(this.visitToken(node.identifier()), this.visitToken(node.equalsGreaterThanToken()), this.visitNode(node.body()));
    };
    SyntaxRewriter.prototype.visitParenthesizedArrowFunctionExpression = function (node) {
        return node.update(this.visitNode(node.callSignature()), this.visitToken(node.equalsGreaterThanToken()), this.visitNode(node.body()));
    };
    SyntaxRewriter.prototype.visitIdentifierName = function (node) {
        return node.withIdentifier(this.visitToken(node.identifier()));
    };
    SyntaxRewriter.prototype.visitQualifiedName = function (node) {
        return node.update(this.visitNode(node.left()), this.visitToken(node.dotToken()), this.visitNode(node.right()));
    };
    SyntaxRewriter.prototype.visitConstructorType = function (node) {
        return node.update(this.visitToken(node.newKeyword()), this.visitNode(node.parameterList()), this.visitToken(node.equalsGreaterThanToken()), this.visitNode(node.type()));
    };
    SyntaxRewriter.prototype.visitFunctionType = function (node) {
        return node.update(this.visitNode(node.parameterList()), this.visitToken(node.equalsGreaterThanToken()), this.visitNode(node.type()));
    };
    SyntaxRewriter.prototype.visitObjectType = function (node) {
        return node.update(this.visitToken(node.openBraceToken()), this.visitSeparatedList(node.typeMembers()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitArrayType = function (node) {
        return node.update(this.visitNode(node.type()), this.visitToken(node.openBracketToken()), this.visitToken(node.closeBracketToken()));
    };
    SyntaxRewriter.prototype.visitPredefinedType = function (node) {
        return node.withKeyword(this.visitToken(node.keyword()));
    };
    SyntaxRewriter.prototype.visitTypeAnnotation = function (node) {
        return node.update(this.visitToken(node.colonToken()), this.visitNode(node.type()));
    };
    SyntaxRewriter.prototype.visitBlock = function (node) {
        return node.update(this.visitToken(node.openBraceToken()), this.visitList(node.statements()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitParameter = function (node) {
        return node.update(node.dotDotDotToken() === null ? null : this.visitToken(node.dotDotDotToken()), node.publicOrPrivateKeyword() === null ? null : this.visitToken(node.publicOrPrivateKeyword()), this.visitToken(node.identifier()), node.questionToken() === null ? null : this.visitToken(node.questionToken()), this.visitNode(node.typeAnnotation()), this.visitNode(node.equalsValueClause()));
    };
    SyntaxRewriter.prototype.visitMemberAccessExpression = function (node) {
        return node.update(this.visitNode(node.expression()), this.visitToken(node.dotToken()), this.visitNode(node.identifierName()));
    };
    SyntaxRewriter.prototype.visitPostfixUnaryExpression = function (node) {
        return node.update(node.kind(), this.visitNode(node.operand()), this.visitToken(node.operatorToken()));
    };
    SyntaxRewriter.prototype.visitElementAccessExpression = function (node) {
        return node.update(this.visitNode(node.expression()), this.visitToken(node.openBracketToken()), this.visitNode(node.argumentExpression()), this.visitToken(node.closeBracketToken()));
    };
    SyntaxRewriter.prototype.visitInvocationExpression = function (node) {
        return node.update(this.visitNode(node.expression()), this.visitNode(node.argumentList()));
    };
    SyntaxRewriter.prototype.visitArgumentList = function (node) {
        return node.update(this.visitToken(node.openParenToken()), this.visitSeparatedList(node.arguments()), this.visitToken(node.closeParenToken()));
    };
    SyntaxRewriter.prototype.visitBinaryExpression = function (node) {
        return node.update(node.kind(), this.visitNode(node.left()), this.visitToken(node.operatorToken()), this.visitNode(node.right()));
    };
    SyntaxRewriter.prototype.visitConditionalExpression = function (node) {
        return node.update(this.visitNode(node.condition()), this.visitToken(node.questionToken()), this.visitNode(node.whenTrue()), this.visitToken(node.colonToken()), this.visitNode(node.whenFalse()));
    };
    SyntaxRewriter.prototype.visitConstructSignature = function (node) {
        return node.update(this.visitToken(node.newKeyword()), this.visitNode(node.parameterList()), this.visitNode(node.typeAnnotation()));
    };
    SyntaxRewriter.prototype.visitFunctionSignature = function (node) {
        return node.update(this.visitToken(node.identifier()), node.questionToken() === null ? null : this.visitToken(node.questionToken()), this.visitNode(node.parameterList()), this.visitNode(node.typeAnnotation()));
    };
    SyntaxRewriter.prototype.visitIndexSignature = function (node) {
        return node.update(this.visitToken(node.openBracketToken()), this.visitNode(node.parameter()), this.visitToken(node.closeBracketToken()), this.visitNode(node.typeAnnotation()));
    };
    SyntaxRewriter.prototype.visitPropertySignature = function (node) {
        return node.update(this.visitToken(node.identifier()), node.questionToken() === null ? null : this.visitToken(node.questionToken()), this.visitNode(node.typeAnnotation()));
    };
    SyntaxRewriter.prototype.visitParameterList = function (node) {
        return node.update(this.visitToken(node.openParenToken()), this.visitSeparatedList(node.parameters()), this.visitToken(node.closeParenToken()));
    };
    SyntaxRewriter.prototype.visitCallSignature = function (node) {
        return node.update(this.visitNode(node.parameterList()), this.visitNode(node.typeAnnotation()));
    };
    SyntaxRewriter.prototype.visitElseClause = function (node) {
        return node.update(this.visitToken(node.elseKeyword()), this.visitNode(node.statement()));
    };
    SyntaxRewriter.prototype.visitIfStatement = function (node) {
        return node.update(this.visitToken(node.ifKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.condition()), this.visitToken(node.closeParenToken()), this.visitNode(node.statement()), this.visitNode(node.elseClause()));
    };
    SyntaxRewriter.prototype.visitExpressionStatement = function (node) {
        return node.update(this.visitNode(node.expression()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitConstructorDeclaration = function (node) {
        return node.update(this.visitToken(node.constructorKeyword()), this.visitNode(node.parameterList()), this.visitNode(node.block()), node.semicolonToken() === null ? null : this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitMemberFunctionDeclaration = function (node) {
        return node.update(node.publicOrPrivateKeyword() === null ? null : this.visitToken(node.publicOrPrivateKeyword()), node.staticKeyword() === null ? null : this.visitToken(node.staticKeyword()), this.visitNode(node.functionSignature()), this.visitNode(node.block()), node.semicolonToken() === null ? null : this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitGetMemberAccessorDeclaration = function (node) {
        return node.update(node.publicOrPrivateKeyword() === null ? null : this.visitToken(node.publicOrPrivateKeyword()), node.staticKeyword() === null ? null : this.visitToken(node.staticKeyword()), this.visitToken(node.getKeyword()), this.visitToken(node.identifier()), this.visitNode(node.parameterList()), this.visitNode(node.typeAnnotation()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitSetMemberAccessorDeclaration = function (node) {
        return node.update(node.publicOrPrivateKeyword() === null ? null : this.visitToken(node.publicOrPrivateKeyword()), node.staticKeyword() === null ? null : this.visitToken(node.staticKeyword()), this.visitToken(node.setKeyword()), this.visitToken(node.identifier()), this.visitNode(node.parameterList()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitMemberVariableDeclaration = function (node) {
        return node.update(node.publicOrPrivateKeyword() === null ? null : this.visitToken(node.publicOrPrivateKeyword()), node.staticKeyword() === null ? null : this.visitToken(node.staticKeyword()), this.visitNode(node.variableDeclarator()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitThrowStatement = function (node) {
        return node.update(this.visitToken(node.throwKeyword()), this.visitNode(node.expression()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitReturnStatement = function (node) {
        return node.update(this.visitToken(node.returnKeyword()), this.visitNode(node.expression()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitObjectCreationExpression = function (node) {
        return node.update(this.visitToken(node.newKeyword()), this.visitNode(node.expression()), this.visitNode(node.argumentList()));
    };
    SyntaxRewriter.prototype.visitSwitchStatement = function (node) {
        return node.update(this.visitToken(node.switchKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.expression()), this.visitToken(node.closeParenToken()), this.visitToken(node.openBraceToken()), this.visitList(node.caseClauses()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitCaseSwitchClause = function (node) {
        return node.update(this.visitToken(node.caseKeyword()), this.visitNode(node.expression()), this.visitToken(node.colonToken()), this.visitList(node.statements()));
    };
    SyntaxRewriter.prototype.visitDefaultSwitchClause = function (node) {
        return node.update(this.visitToken(node.defaultKeyword()), this.visitToken(node.colonToken()), this.visitList(node.statements()));
    };
    SyntaxRewriter.prototype.visitBreakStatement = function (node) {
        return node.update(this.visitToken(node.breakKeyword()), node.identifier() === null ? null : this.visitToken(node.identifier()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitContinueStatement = function (node) {
        return node.update(this.visitToken(node.continueKeyword()), node.identifier() === null ? null : this.visitToken(node.identifier()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitForStatement = function (node) {
        return node.update(this.visitToken(node.forKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.variableDeclaration()), this.visitNode(node.initializer()), this.visitToken(node.firstSemicolonToken()), this.visitNode(node.condition()), this.visitToken(node.secondSemicolonToken()), this.visitNode(node.incrementor()), this.visitToken(node.closeParenToken()), this.visitNode(node.statement()));
    };
    SyntaxRewriter.prototype.visitForInStatement = function (node) {
        return node.update(this.visitToken(node.forKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.variableDeclaration()), this.visitNode(node.left()), this.visitToken(node.inKeyword()), this.visitNode(node.expression()), this.visitToken(node.closeParenToken()), this.visitNode(node.statement()));
    };
    SyntaxRewriter.prototype.visitWhileStatement = function (node) {
        return node.update(this.visitToken(node.whileKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.condition()), this.visitToken(node.closeParenToken()), this.visitNode(node.statement()));
    };
    SyntaxRewriter.prototype.visitWithStatement = function (node) {
        return node.update(this.visitToken(node.withKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.condition()), this.visitToken(node.closeParenToken()), this.visitNode(node.statement()));
    };
    SyntaxRewriter.prototype.visitEnumDeclaration = function (node) {
        return node.update(node.exportKeyword() === null ? null : this.visitToken(node.exportKeyword()), this.visitToken(node.enumKeyword()), this.visitToken(node.identifier()), this.visitToken(node.openBraceToken()), this.visitSeparatedList(node.variableDeclarators()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitCastExpression = function (node) {
        return node.update(this.visitToken(node.lessThanToken()), this.visitNode(node.type()), this.visitToken(node.greaterThanToken()), this.visitNode(node.expression()));
    };
    SyntaxRewriter.prototype.visitObjectLiteralExpression = function (node) {
        return node.update(this.visitToken(node.openBraceToken()), this.visitSeparatedList(node.propertyAssignments()), this.visitToken(node.closeBraceToken()));
    };
    SyntaxRewriter.prototype.visitSimplePropertyAssignment = function (node) {
        return node.update(this.visitToken(node.propertyName()), this.visitToken(node.colonToken()), this.visitNode(node.expression()));
    };
    SyntaxRewriter.prototype.visitGetAccessorPropertyAssignment = function (node) {
        return node.update(this.visitToken(node.getKeyword()), this.visitToken(node.propertyName()), this.visitToken(node.openParenToken()), this.visitToken(node.closeParenToken()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitSetAccessorPropertyAssignment = function (node) {
        return node.update(this.visitToken(node.setKeyword()), this.visitToken(node.propertyName()), this.visitToken(node.openParenToken()), this.visitToken(node.parameterName()), this.visitToken(node.closeParenToken()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitFunctionExpression = function (node) {
        return node.update(this.visitToken(node.functionKeyword()), node.identifier() === null ? null : this.visitToken(node.identifier()), this.visitNode(node.callSignature()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitEmptyStatement = function (node) {
        return node.withSemicolonToken(this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitSuperExpression = function (node) {
        return node.withSuperKeyword(this.visitToken(node.superKeyword()));
    };
    SyntaxRewriter.prototype.visitTryStatement = function (node) {
        return node.update(this.visitToken(node.tryKeyword()), this.visitNode(node.block()), this.visitNode(node.catchClause()), this.visitNode(node.finallyClause()));
    };
    SyntaxRewriter.prototype.visitCatchClause = function (node) {
        return node.update(this.visitToken(node.catchKeyword()), this.visitToken(node.openParenToken()), this.visitToken(node.identifier()), this.visitToken(node.closeParenToken()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitFinallyClause = function (node) {
        return node.update(this.visitToken(node.finallyKeyword()), this.visitNode(node.block()));
    };
    SyntaxRewriter.prototype.visitLabeledStatement = function (node) {
        return node.update(this.visitToken(node.identifier()), this.visitToken(node.colonToken()), this.visitNode(node.statement()));
    };
    SyntaxRewriter.prototype.visitDoStatement = function (node) {
        return node.update(this.visitToken(node.doKeyword()), this.visitNode(node.statement()), this.visitToken(node.whileKeyword()), this.visitToken(node.openParenToken()), this.visitNode(node.condition()), this.visitToken(node.closeParenToken()), this.visitToken(node.semicolonToken()));
    };
    SyntaxRewriter.prototype.visitTypeOfExpression = function (node) {
        return node.update(this.visitToken(node.typeOfKeyword()), this.visitNode(node.expression()));
    };
    SyntaxRewriter.prototype.visitDeleteExpression = function (node) {
        return node.update(this.visitToken(node.deleteKeyword()), this.visitNode(node.expression()));
    };
    SyntaxRewriter.prototype.visitVoidExpression = function (node) {
        return node.update(this.visitToken(node.voidKeyword()), this.visitNode(node.expression()));
    };
    SyntaxRewriter.prototype.visitDebuggerStatement = function (node) {
        return node.update(this.visitToken(node.debuggerKeyword()), this.visitToken(node.semicolonToken()));
    };
    return SyntaxRewriter;
})();
var SyntaxNodeCloner = (function (_super) {
    __extends(SyntaxNodeCloner, _super);
    function SyntaxNodeCloner() {
        _super.apply(this, arguments);

    }
    SyntaxNodeCloner.prototype.visitToken = function (token) {
        return token.clone();
    };
    return SyntaxNodeCloner;
})(SyntaxRewriter);
var Emitter = (function (_super) {
    __extends(Emitter, _super);
    function Emitter(syntaxInformationMap, options) {
        _super.call(this);
        this.syntaxInformationMap = syntaxInformationMap;
        this.options = options || FormattingOptions.defaultOptions;
        this.spaceList = [
            SyntaxTrivia.space
        ];
        this.newLineList = [
            SyntaxTrivia.carriageReturnLineFeed
        ];
    }
    Emitter.emit = function emit(input, options) {
        if (typeof options === "undefined") { options = null; }
        SyntaxNodeInvariantsChecker.checkInvariants(input);
        var emitter = new Emitter(SyntaxInformationMap.create(input), options);
        var output = input.accept1(emitter);
        SyntaxNodeInvariantsChecker.checkInvariants(output);
        return output;
    }
    Emitter.prototype.visitSourceUnit = function (node) {
        var moduleElements = [];
        for(var i = 0, n = node.moduleElements().count(); i < n; i++) {
            var moduleElement = node.moduleElements().syntaxNodeAt(i);
            var converted = this.visitNode(moduleElement);
            if(converted !== null) {
                if(ArrayUtilities.isArray(converted)) {
                    moduleElements.push.apply(moduleElements, converted);
                } else {
                    moduleElements.push(converted);
                }
            }
        }
        return new SourceUnitSyntax(SyntaxList.create(moduleElements), node.endOfFileToken());
    };
    Emitter.leftmostName = function leftmostName(name) {
        if(name.kind() === 120 /* IdentifierName */ ) {
            return name;
        } else {
            if(name.kind() === 121 /* QualifiedName */ ) {
                return Emitter.leftmostName((name).left());
            } else {
                throw Errors.invalidOperation();
            }
        }
    }
    Emitter.splitModuleName = function splitModuleName(name) {
        var result = [];
        while(true) {
            if(name.kind() === 120 /* IdentifierName */ ) {
                result.unshift(name);
                return result;
            } else {
                if(name.kind() === 121 /* QualifiedName */ ) {
                    var qualifiedName = name;
                    result.unshift(qualifiedName.right());
                    name = qualifiedName.left();
                } else {
                    throw Errors.invalidOperation();
                }
            }
        }
    }
    Emitter.prototype.adjustListIndentation = function (nodes) {
        return SyntaxIndenter.indentNodes(nodes, true, this.options.indentSpaces, this.options);
    };
    Emitter.prototype.visitModuleDeclaration = function (node) {
        var names = Emitter.splitModuleName(node.moduleName());
        var moduleElements = [];
        for(var i = 0, n = node.moduleElements().count(); i < n; i++) {
            var element = node.moduleElements().syntaxNodeAt(i);
            var converted = this.visitNode(element);
            if(converted !== null) {
                if(ArrayUtilities.isArray(converted)) {
                    moduleElements.push.apply(moduleElements, converted);
                } else {
                    moduleElements.push(converted);
                }
            }
        }
        for(var nameIndex = names.length - 1; nameIndex >= 0; nameIndex--) {
            moduleElements = this.convertModuleDeclaration(names[nameIndex], moduleElements);
            if(nameIndex > 0) {
                moduleElements = this.adjustListIndentation(moduleElements);
            }
        }
        return moduleElements;
    };
    Emitter.prototype.convertModuleDeclaration = function (name, moduleElements) {
        name = name.withIdentifier(name.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty));
        var variableStatement = VariableStatementSyntax.create(new VariableDeclarationSyntax(SyntaxToken.createElastic({
            kind: 38 /* VarKeyword */ ,
            trailingTrivia: this.spaceList
        }), SeparatedSyntaxList.create([
            VariableDeclaratorSyntax.create(name.identifier().clone())
        ])), SyntaxToken.createElastic({
            kind: 75 /* SemicolonToken */ ,
            trailingTrivia: this.newLineList
        }));
        var functionExpression = FunctionExpressionSyntax.create(SyntaxToken.createElastic({
            kind: 25 /* FunctionKeyword */ 
        }), CallSignatureSyntax.create(new ParameterListSyntax(SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), SeparatedSyntaxList.create([
            ParameterSyntax.create(name.identifier().clone())
        ]), SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ ,
            trailingTrivia: this.spaceList
        }))), new BlockSyntax(SyntaxToken.createElastic({
            kind: 67 /* OpenBraceToken */ ,
            trailingTrivia: this.newLineList
        }), SyntaxList.create(moduleElements), SyntaxToken.createElastic({
            kind: 68 /* CloseBraceToken */ 
        })));
        var parenthesizedFunctionExpression = new ParenthesizedExpressionSyntax(SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), functionExpression, SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ 
        }));
        var logicalOrExpression = new BinaryExpressionSyntax(184 /* LogicalOrExpression */ , name.clone(), SyntaxToken.createElastic({
            kind: 101 /* BarBarToken */ 
        }), new ParenthesizedExpressionSyntax(SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), new BinaryExpressionSyntax(171 /* AssignmentExpression */ , name.clone(), SyntaxToken.createElastic({
            kind: 104 /* EqualsToken */ 
        }), new ObjectLiteralExpressionSyntax(SyntaxToken.createElastic({
            kind: 67 /* OpenBraceToken */ 
        }), SeparatedSyntaxList.empty, SyntaxToken.createElastic({
            kind: 68 /* CloseBraceToken */ 
        }))), SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ 
        })));
        var invocationExpression = new InvocationExpressionSyntax(parenthesizedFunctionExpression, new ArgumentListSyntax(SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), SeparatedSyntaxList.create([
            logicalOrExpression
        ]), SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ 
        })));
        var expressionStatement = new ExpressionStatementSyntax(invocationExpression, SyntaxToken.createElastic({
            kind: 75 /* SemicolonToken */ ,
            trailingTrivia: this.newLineList
        }));
        return [
            variableStatement, 
            expressionStatement
        ];
    };
    Emitter.prototype.visitExpressionStatement = function (node) {
        var rewritten = _super.prototype.visitExpressionStatement.call(this, node);
        if(rewritten.expression().kind() !== 220 /* FunctionExpression */ ) {
            return rewritten;
        }
        var functionExpression = rewritten.expression();
        if(functionExpression.identifier() !== null) {
            return rewritten;
        }
        var newFunctionExpression = functionExpression.withFunctionKeyword(functionExpression.functionKeyword().withLeadingTrivia(SyntaxTriviaList.empty));
        var parenthesizedExpression = new ParenthesizedExpressionSyntax(SyntaxToken.createElastic({
            leadingTrivia: functionExpression.leadingTrivia().toArray(),
            kind: 69 /* OpenParenToken */ 
        }), newFunctionExpression, SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ 
        }));
        return rewritten.withExpression(parenthesizedExpression);
    };
    Emitter.prototype.visitSimpleArrowFunctionExpression = function (node) {
        var identifier = node.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        var block = this.convertArrowFunctionBody(node);
        return FunctionExpressionSyntax.create(SyntaxToken.createElastic({
            leadingTrivia: node.leadingTrivia().toArray(),
            kind: 25 /* FunctionKeyword */ 
        }), CallSignatureSyntax.create(new ParameterListSyntax(SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), SeparatedSyntaxList.create([
            ParameterSyntax.create(identifier)
        ]), SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ ,
            trailingTrivia: this.spaceList
        }))), block);
    };
    Emitter.prototype.visitParenthesizedArrowFunctionExpression = function (node) {
        var parameterList = node.callSignature().parameterList().accept1(this);
        var block = this.convertArrowFunctionBody(node);
        return FunctionExpressionSyntax.create(SyntaxToken.createElastic({
            leadingTrivia: node.leadingTrivia().toArray(),
            kind: 25 /* FunctionKeyword */ 
        }), CallSignatureSyntax.create(parameterList), block);
    };
    Emitter.prototype.changeIndentation = function (node, changeFirstToken, indentAmount) {
        if(indentAmount === 0) {
            return node;
        } else {
            if(indentAmount > 0) {
                return SyntaxIndenter.indentNode(node, changeFirstToken, indentAmount, this.options);
            } else {
                return SyntaxDedenter.dedentNode(node, changeFirstToken, -indentAmount, this.options.indentSpaces, this.options);
            }
        }
    };
    Emitter.prototype.convertArrowFunctionBody = function (arrowFunction) {
        var rewrittenBody = this.visitNode(arrowFunction.body());
        if(rewrittenBody.kind() === 138 /* Block */ ) {
            return rewrittenBody;
        }
        var arrowToken = arrowFunction.equalsGreaterThanToken();
        var returnStatement = new ReturnStatementSyntax(SyntaxToken.createElastic({
            kind: 31 /* ReturnKeyword */ ,
            trailingTrivia: arrowToken.trailingTrivia().toArray()
        }), rewrittenBody, SyntaxToken.createElastic({
            kind: 75 /* SemicolonToken */ ,
            trailingTrivia: this.newLineList
        }));
        var difference = 0;
        if(arrowToken.hasTrailingNewLineTrivia()) {
            var arrowFunctionStart = Indentation.columnForStartOfToken(arrowFunction.firstToken(), this.syntaxInformationMap, this.options);
            difference = -arrowFunctionStart;
        } else {
            var arrowEndColumn = Indentation.columnForEndOfToken(arrowToken, this.syntaxInformationMap, this.options);
            var returnKeywordEndColumn = returnStatement.returnKeyword().width();
            difference = returnKeywordEndColumn - arrowEndColumn;
        }
        returnStatement = this.changeIndentation(returnStatement, false, difference);
        returnStatement = SyntaxIndenter.indentNode(returnStatement, true, this.options.indentSpaces, this.options);
        var block = new BlockSyntax(SyntaxToken.createElastic({
            kind: 67 /* OpenBraceToken */ ,
            trailingTrivia: this.newLineList
        }), SyntaxList.create([
            returnStatement
        ]), SyntaxToken.createElastic({
            kind: 68 /* CloseBraceToken */ 
        }));
        block = SyntaxIndenter.indentNode(block, false, Indentation.columnForStartOfFirstTokenInLineContainingToken(arrowFunction.firstToken(), this.syntaxInformationMap, this.options), this.options);
        return block;
    };
    Emitter.functionSignatureDefaultParameters = function functionSignatureDefaultParameters(signature) {
        return Emitter.parameterListDefaultParameters(signature.parameterList());
    }
    Emitter.parameterListDefaultParameters = function parameterListDefaultParameters(parameterList) {
        return Emitter.parametersDefaultParameters(parameterList.parameters());
    }
    Emitter.parameterListPropertyParameters = function parameterListPropertyParameters(parameterList) {
        return Emitter.parametersPropertyParameters(parameterList.parameters());
    }
    Emitter.parametersDefaultParameters = function parametersDefaultParameters(list) {
        var result = [];
        for(var i = 0, n = list.syntaxNodeCount(); i < n; i++) {
            var parameter = list.syntaxNodeAt(i);
            if(parameter.equalsValueClause() !== null) {
                result.push(parameter);
            }
        }
        return result;
    }
    Emitter.parametersPropertyParameters = function parametersPropertyParameters(list) {
        var result = [];
        for(var i = 0, n = list.syntaxNodeCount(); i < n; i++) {
            var parameter = list.syntaxNodeAt(i);
            if(parameter.publicOrPrivateKeyword() !== null) {
                result.push(parameter);
            }
        }
        return result;
    }
    Emitter.prototype.generatePropertyAssignmentStatement = function (parameter) {
        var identifier = parameter.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        return new ExpressionStatementSyntax(new BinaryExpressionSyntax(171 /* AssignmentExpression */ , new MemberAccessExpressionSyntax(new ThisExpressionSyntax(SyntaxToken.createElastic({
            kind: 33 /* ThisKeyword */ 
        })), SyntaxToken.createElastic({
            kind: 73 /* DotToken */ 
        }), new IdentifierNameSyntax(identifier.withTrailingTrivia(SyntaxTriviaList.space))), SyntaxToken.createElastic({
            kind: 104 /* EqualsToken */ ,
            trailingTrivia: this.spaceList
        }), new IdentifierNameSyntax(identifier.clone())), SyntaxToken.createElastic({
            kind: 75 /* SemicolonToken */ ,
            trailingTrivia: this.newLineList
        }));
    };
    Emitter.prototype.generateDefaultValueAssignmentStatement = function (parameter) {
        var space = SyntaxTriviaList.create(this.spaceList);
        var name = parameter.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(space);
        var identifierName = new IdentifierNameSyntax(name);
        var condition = new BinaryExpressionSyntax(191 /* EqualsExpression */ , new TypeOfExpressionSyntax(SyntaxToken.createElastic({
            kind: 37 /* TypeOfKeyword */ ,
            trailingTrivia: this.spaceList
        }), identifierName.clone()), SyntaxToken.createElastic({
            kind: 84 /* EqualsEqualsEqualsToken */ ,
            trailingTrivia: this.spaceList
        }), new LiteralExpressionSyntax(169 /* StringLiteralExpression */ , SyntaxToken.createElastic({
            kind: 12 /* StringLiteral */ ,
            text: '"undefined"'
        })));
        var assignment = new BinaryExpressionSyntax(171 /* AssignmentExpression */ , identifierName.clone(), SyntaxToken.createElastic({
            kind: 104 /* EqualsToken */ ,
            trailingTrivia: this.spaceList
        }), parameter.equalsValueClause().value().accept1(this).clone());
        var assignmentStatement = new ExpressionStatementSyntax(assignment, SyntaxToken.createElastic({
            kind: 75 /* SemicolonToken */ ,
            trailingTrivia: this.spaceList
        }));
        var block = new BlockSyntax(SyntaxToken.createElastic({
            kind: 67 /* OpenBraceToken */ ,
            trailingTrivia: this.spaceList
        }), SyntaxList.create([
            assignmentStatement
        ]), SyntaxToken.createElastic({
            kind: 68 /* CloseBraceToken */ ,
            trailingTrivia: this.newLineList
        }));
        return new IfStatementSyntax(SyntaxToken.createElastic({
            kind: 26 /* IfKeyword */ ,
            trailingTrivia: this.spaceList
        }), SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), condition, SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ ,
            trailingTrivia: this.spaceList
        }), block, null);
    };
    Emitter.prototype.visitFunctionDeclaration = function (node) {
        var _this = this;
        if(node.block() === null) {
            return null;
        }
        var rewritten = _super.prototype.visitFunctionDeclaration.call(this, node);
        var parametersWithDefaults = Emitter.functionSignatureDefaultParameters(node.functionSignature());
        if(parametersWithDefaults.length === 0) {
            return rewritten;
        }
        var defaultValueAssignmentStatements = ArrayUtilities.select(parametersWithDefaults, function (p) {
            return _this.generateDefaultValueAssignmentStatement(p);
        });
        var functionDeclarationStartColumn = Indentation.columnForStartOfToken(node.firstToken(), this.syntaxInformationMap, this.options);
        var desiredColumn = functionDeclarationStartColumn + this.options.indentSpaces;
        defaultValueAssignmentStatements = ArrayUtilities.select(defaultValueAssignmentStatements, function (s) {
            return SyntaxIndenter.indentNode(s, true, desiredColumn, _this.options);
        });
        var statements = [];
        statements.push.apply(statements, defaultValueAssignmentStatements);
        statements.push.apply(statements, rewritten.block().statements().toArray());
        return rewritten.withBlock(rewritten.block().withStatements(SyntaxList.create(statements)));
    };
    Emitter.prototype.visitParameter = function (node) {
        var identifier = node.identifier();
        identifier = identifier.withLeadingTrivia(node.leadingTrivia()).withTrailingTrivia(node.trailingTrivia());
        return ParameterSyntax.create(identifier);
    };
    Emitter.prototype.generatePropertyAssignment = function (classDeclaration, static, memberDeclaration) {
        var isStatic = memberDeclaration.staticKeyword() !== null;
        if((static && !isStatic) || (!static && isStatic)) {
            return null;
        }
        var declarator = memberDeclaration.variableDeclarator();
        if(declarator.equalsValueClause() === null) {
            return null;
        }
        var classIdentifier = classDeclaration.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        var memberIdentifier = declarator.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        var receiver = static ? new IdentifierNameSyntax(classIdentifier.withLeadingTrivia(memberDeclaration.leadingTrivia())) : new ThisExpressionSyntax(SyntaxToken.createElastic({
            leadingTrivia: memberDeclaration.leadingTrivia().toArray(),
            kind: 33 /* ThisKeyword */ 
        }));
        receiver = new MemberAccessExpressionSyntax(receiver, SyntaxToken.createElastic({
            kind: 73 /* DotToken */ 
        }), new IdentifierNameSyntax(memberIdentifier.withTrailingTrivia(SyntaxTriviaList.space)));
        var statement = new ExpressionStatementSyntax(new BinaryExpressionSyntax(171 /* AssignmentExpression */ , receiver, SyntaxToken.createElastic({
            kind: 104 /* EqualsToken */ ,
            trailingTrivia: this.spaceList
        }), declarator.equalsValueClause().value().accept1(this)), SyntaxToken.createElastic({
            kind: 75 /* SemicolonToken */ ,
            trailingTrivia: this.newLineList
        }));
        return statement;
    };
    Emitter.prototype.generatePropertyAssignments = function (classDeclaration, static) {
        var result = [];
        for(var i = classDeclaration.classElements().count() - 1; i >= 0; i--) {
            var classElement = classDeclaration.classElements().syntaxNodeAt(i);
            if(classElement.kind() !== 134 /* MemberVariableDeclaration */ ) {
                continue;
            }
            var statement = this.generatePropertyAssignment(classDeclaration, static, classElement);
            if(statement !== null) {
                result.push(statement);
            }
        }
        return result;
    };
    Emitter.prototype.createDefaultConstructorDeclaration = function (classDeclaration) {
        var identifier = classDeclaration.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        var functionSignature = FunctionSignatureSyntax.create(identifier.clone(), ParameterListSyntax.create(SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ ,
            trailingTrivia: this.spaceList
        })));
        var statements = [];
        if(classDeclaration.extendsClause() !== null) {
            var superStatement = new ExpressionStatementSyntax(new InvocationExpressionSyntax(new MemberAccessExpressionSyntax(new IdentifierNameSyntax(SyntaxToken.createElastic({
                kind: 9 /* IdentifierNameToken */ ,
                text: "_super"
            })), SyntaxToken.createElastic({
                kind: 73 /* DotToken */ 
            }), new IdentifierNameSyntax(SyntaxToken.createElastic({
                kind: 9 /* IdentifierNameToken */ ,
                text: "apply"
            }))), new ArgumentListSyntax(SyntaxToken.createElastic({
                kind: 69 /* OpenParenToken */ 
            }), SeparatedSyntaxList.create([
                new ThisExpressionSyntax(SyntaxToken.createElastic({
                    kind: 33 /* ThisKeyword */ 
                })), 
                SyntaxToken.createElastic({
                    kind: 76 /* CommaToken */ ,
                    trailingTrivia: this.spaceList
                }), 
                new IdentifierNameSyntax(SyntaxToken.createElastic({
                    kind: 9 /* IdentifierNameToken */ ,
                    text: "arguments"
                }))
            ]), SyntaxToken.createElastic({
                kind: 70 /* CloseParenToken */ 
            }))), SyntaxToken.createElastic({
                kind: 75 /* SemicolonToken */ ,
                trailingTrivia: this.newLineList
            }));
            superStatement = SyntaxIndenter.indentNode(superStatement, true, this.options.indentSpaces, this.options);
            statements.push(superStatement);
        }
        var block = new BlockSyntax(SyntaxToken.createElastic({
            kind: 67 /* OpenBraceToken */ ,
            trailingTrivia: this.newLineList
        }), SyntaxList.create(statements), SyntaxToken.createElastic({
            kind: 68 /* CloseBraceToken */ ,
            trailingTrivia: this.newLineList
        }));
        var functionDeclaration = new FunctionDeclarationSyntax(null, null, SyntaxToken.createElastic({
            kind: 25 /* FunctionKeyword */ ,
            trailingTrivia: this.spaceList
        }), functionSignature, block, null);
        var classIndentation = Indentation.columnForStartOfToken(classDeclaration.firstToken(), this.syntaxInformationMap, this.options);
        return SyntaxIndenter.indentNode(functionDeclaration, true, this.options.indentSpaces + classIndentation, this.options);
    };
    Emitter.prototype.convertConstructorDeclaration = function (classDeclaration, constructorDeclaration) {
        var _this = this;
        if(constructorDeclaration === null || constructorDeclaration.block() === null) {
            return null;
        }
        var identifier = classDeclaration.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        var constructorIndentationColumn = Indentation.columnForStartOfToken(constructorDeclaration.firstToken(), this.syntaxInformationMap, this.options);
        var originalParameterListindentation = Indentation.columnForStartOfToken(constructorDeclaration.parameterList().firstToken(), this.syntaxInformationMap, this.options);
        var newParameterListIndentation = constructorIndentationColumn + SyntaxFacts.getText(25 /* FunctionKeyword */ ).length + 1 + identifier.width();
        var parameterList = constructorDeclaration.parameterList().accept1(this);
        parameterList = this.changeIndentation(parameterList, false, newParameterListIndentation - originalParameterListindentation);
        var functionSignature = FunctionSignatureSyntax.create(identifier.clone(), parameterList);
        var block = constructorDeclaration.block().accept1(this);
        var statements = block.statements().toArray();
        var instanceAssignments = this.generatePropertyAssignments(classDeclaration, false);
        for(var i = instanceAssignments.length - 1; i >= 0; i--) {
            var expressionStatement = instanceAssignments[i];
            expressionStatement = this.changeIndentation(expressionStatement, true, this.options.indentSpaces);
            statements.unshift(expressionStatement);
        }
        var parameterPropertyAssignments = ArrayUtilities.select(Emitter.parameterListPropertyParameters(constructorDeclaration.parameterList()), function (p) {
            return _this.generatePropertyAssignmentStatement(p);
        });
        for(var i = parameterPropertyAssignments.length - 1; i >= 0; i--) {
            var expressionStatement = parameterPropertyAssignments[i];
            expressionStatement = this.changeIndentation(expressionStatement, true, this.options.indentSpaces + constructorIndentationColumn);
            statements.unshift(expressionStatement);
        }
        var defaultValueAssignments = ArrayUtilities.select(Emitter.parameterListDefaultParameters(constructorDeclaration.parameterList()), function (p) {
            return _this.generateDefaultValueAssignmentStatement(p);
        });
        for(var i = defaultValueAssignments.length - 1; i >= 0; i--) {
            var expressionStatement = defaultValueAssignments[i];
            expressionStatement = this.changeIndentation(expressionStatement, true, this.options.indentSpaces + constructorIndentationColumn);
            statements.unshift(expressionStatement);
        }
        block = block.withStatements(SyntaxList.create(statements));
        var functionDeclaration = new FunctionDeclarationSyntax(null, null, SyntaxToken.createElastic({
            leadingTrivia: constructorDeclaration.leadingTrivia().toArray(),
            kind: 25 /* FunctionKeyword */ ,
            trailingTrivia: this.spaceList
        }), functionSignature, block, null);
        return functionDeclaration;
    };
    Emitter.prototype.convertMemberFunctionDeclaration = function (classDeclaration, functionDeclaration) {
        var _this = this;
        if(functionDeclaration.block() === null) {
            return null;
        }
        var classIdentifier = classDeclaration.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        var functionIdentifier = functionDeclaration.functionSignature().identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        var receiver = new IdentifierNameSyntax(classIdentifier.withLeadingTrivia(functionDeclaration.leadingTrivia()));
        receiver = functionDeclaration.staticKeyword() !== null ? receiver : new MemberAccessExpressionSyntax(receiver, SyntaxToken.createElastic({
            kind: 73 /* DotToken */ 
        }), new IdentifierNameSyntax(SyntaxToken.createElastic({
            kind: 9 /* IdentifierNameToken */ ,
            text: "prototype"
        })));
        receiver = new MemberAccessExpressionSyntax(receiver, SyntaxToken.createElastic({
            kind: 73 /* DotToken */ 
        }), new IdentifierNameSyntax(functionIdentifier.withTrailingTrivia(SyntaxTriviaList.space)));
        var block = functionDeclaration.block().accept1(this);
        var blockTrailingTrivia = block.trailingTrivia();
        block = block.withCloseBraceToken(block.closeBraceToken().withTrailingTrivia(SyntaxTriviaList.empty));
        var defaultParameters = Emitter.functionSignatureDefaultParameters(functionDeclaration.functionSignature());
        var defaultValueAssignments = ArrayUtilities.select(defaultParameters, function (p) {
            return _this.generateDefaultValueAssignmentStatement(p);
        });
        var functionColumn = Indentation.columnForStartOfToken(functionDeclaration.firstToken(), this.syntaxInformationMap, this.options);
        var blockStatements = block.statements().toArray();
        for(var i = defaultValueAssignments.length - 1; i >= 0; i--) {
            var assignment = this.changeIndentation(defaultValueAssignments[i], true, functionColumn + this.options.indentSpaces);
            blockStatements.unshift(assignment);
        }
        block = block.withStatements(SyntaxList.create(blockStatements));
        var callSignatureParameterList = functionDeclaration.functionSignature().parameterList().accept1(this);
        if(!callSignatureParameterList.hasTrailingTrivia()) {
            callSignatureParameterList = callSignatureParameterList.withTrailingTrivia(SyntaxTriviaList.space);
        }
        var callSignature = CallSignatureSyntax.create(callSignatureParameterList);
        var functionExpression = FunctionExpressionSyntax.create(SyntaxToken.createElastic({
            kind: 25 /* FunctionKeyword */ 
        }), callSignature, block);
        var assignmentExpression = new BinaryExpressionSyntax(171 /* AssignmentExpression */ , receiver, SyntaxToken.createElastic({
            kind: 104 /* EqualsToken */ ,
            trailingTrivia: this.spaceList
        }), functionExpression);
        return new ExpressionStatementSyntax(assignmentExpression, SyntaxToken.createElastic({
            kind: 75 /* SemicolonToken */ ,
            trailingTrivia: blockTrailingTrivia.toArray()
        }));
    };
    Emitter.prototype.convertClassElements = function (classDeclaration) {
        var result = [];
        var classElements = classDeclaration.classElements();
        for(var i = 0, n = classElements.count(); i < n; i++) {
            var classElement = classElements.syntaxNodeAt(i);
            if(classElement.kind() === 135 /* ConstructorDeclaration */ ) {
                continue;
            }
            if(classElement.kind() === 133 /* MemberFunctionDeclaration */ ) {
                var converted = this.convertMemberFunctionDeclaration(classDeclaration, classElement);
                if(converted !== null) {
                    result.push(converted);
                }
            } else {
                if(classElement.kind() === 134 /* MemberVariableDeclaration */ ) {
                    var converted = this.generatePropertyAssignment(classDeclaration, true, classElement);
                    if(converted !== null) {
                        result.push(converted);
                    }
                } else {
                    if(classElement.kind() === 136 /* GetMemberAccessorDeclaration */  || classElement.kind() === 137 /* SetMemberAccessorDeclaration */ ) {
                    }
                }
            }
        }
        return result;
    };
    Emitter.prototype.visitClassDeclaration = function (node) {
        var identifier = node.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        var statements = [];
        var statementIndent = this.options.indentSpaces + Indentation.columnForStartOfToken(node.firstToken(), this.syntaxInformationMap, this.options);
        if(node.extendsClause() !== null) {
            var extendsParameters = [];
            extendsParameters.push(new IdentifierNameSyntax(identifier.clone()));
            extendsParameters.push(SyntaxToken.createElastic({
                kind: 76 /* CommaToken */ ,
                trailingTrivia: this.spaceList
            }));
            extendsParameters.push(new IdentifierNameSyntax(SyntaxToken.createElastic({
                kind: 9 /* IdentifierNameToken */ ,
                text: "_super"
            })));
            var extendsStatement = new ExpressionStatementSyntax(new InvocationExpressionSyntax(new IdentifierNameSyntax(SyntaxToken.createElastic({
                kind: 9 /* IdentifierNameToken */ ,
                text: "__extends"
            })), new ArgumentListSyntax(SyntaxToken.createElastic({
                kind: 69 /* OpenParenToken */ 
            }), SeparatedSyntaxList.create(extendsParameters), SyntaxToken.createElastic({
                kind: 70 /* CloseParenToken */ 
            }))), SyntaxToken.createElastic({
                kind: 75 /* SemicolonToken */ ,
                trailingTrivia: this.newLineList
            }));
            statements.push(SyntaxIndenter.indentNode(extendsStatement, true, statementIndent, this.options));
        }
        var constructorDeclaration = ArrayUtilities.firstOrDefault(node.classElements().toArray(), function (c) {
            return c.kind() === 135 /* ConstructorDeclaration */ ;
        });
        var constructorFunctionDeclaration = constructorDeclaration === null ? this.createDefaultConstructorDeclaration(node) : this.convertConstructorDeclaration(node, constructorDeclaration);
        if(constructorFunctionDeclaration !== null) {
            statements.push(constructorFunctionDeclaration);
        }
        var classElementStatements = this.convertClassElements(node);
        statements.push.apply(statements, classElementStatements);
        var returnIndentation = Indentation.indentationTrivia(statementIndent, this.options);
        var returnStatement = new ReturnStatementSyntax(SyntaxToken.createElastic({
            leadingTrivia: [
                returnIndentation
            ],
            kind: 31 /* ReturnKeyword */ ,
            trailingTrivia: this.spaceList
        }), new IdentifierNameSyntax(identifier.clone()), SyntaxToken.createElastic({
            kind: 75 /* SemicolonToken */ ,
            trailingTrivia: this.newLineList
        }));
        statements.push(returnStatement);
        var classIndentation = Indentation.columnForStartOfToken(node.firstToken(), this.syntaxInformationMap, this.options);
        var closeCurlyIndentation = classIndentation > 0 ? [
            Indentation.indentationTrivia(classIndentation, this.options)
        ] : null;
        var block = new BlockSyntax(SyntaxToken.createElastic({
            kind: 67 /* OpenBraceToken */ ,
            trailingTrivia: this.newLineList
        }), SyntaxList.create(statements), SyntaxToken.createElastic({
            leadingTrivia: closeCurlyIndentation,
            kind: 68 /* CloseBraceToken */ 
        }));
        var callParameters = [];
        if(node.extendsClause() !== null) {
            callParameters.push(ParameterSyntax.create(SyntaxToken.createElastic({
                kind: 9 /* IdentifierNameToken */ ,
                text: "_super"
            })));
        }
        var callSignature = CallSignatureSyntax.create(new ParameterListSyntax(SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), SeparatedSyntaxList.create(callParameters), SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ ,
            trailingTrivia: this.spaceList
        })));
        var functionExpression = FunctionExpressionSyntax.create(SyntaxToken.createElastic({
            kind: 25 /* FunctionKeyword */ 
        }), callSignature, block);
        var parenthesizedExpression = new ParenthesizedExpressionSyntax(SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), functionExpression, SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ 
        }));
        var invocationParameters = [];
        if(node.extendsClause() !== null && node.extendsClause().typeNames().count() > 0) {
            invocationParameters.push(node.extendsClause().typeNames().syntaxNodeAt(0).withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty));
        }
        var invocationExpression = new InvocationExpressionSyntax(parenthesizedExpression, new ArgumentListSyntax(SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), SeparatedSyntaxList.create(invocationParameters), SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ 
        })));
        var variableDeclarator = new VariableDeclaratorSyntax(identifier.withTrailingTrivia(SyntaxTriviaList.space), null, new EqualsValueClauseSyntax(SyntaxToken.createElastic({
            kind: 104 /* EqualsToken */ ,
            trailingTrivia: this.spaceList
        }), invocationExpression));
        var variableDeclaration = new VariableDeclarationSyntax(SyntaxToken.createElastic({
            leadingTrivia: node.leadingTrivia().toArray(),
            kind: 38 /* VarKeyword */ ,
            trailingTrivia: this.spaceList
        }), SeparatedSyntaxList.create([
            variableDeclarator
        ]));
        var variableStatement = VariableStatementSyntax.create(variableDeclaration, SyntaxToken.createElastic({
            kind: 75 /* SemicolonToken */ ,
            trailingTrivia: this.newLineList
        }));
        return variableStatement;
    };
    Emitter.prototype.visitVariableDeclarator = function (node) {
        var result = _super.prototype.visitVariableDeclarator.call(this, node);
        if(result.typeAnnotation() === null) {
            return result;
        }
        var newTrailingTrivia = result.identifier().trailingTrivia().concat(result.typeAnnotation().trailingTrivia());
        return result.withTypeAnnotation(null).withIdentifier(result.identifier().withTrailingTrivia(newTrailingTrivia));
    };
    Emitter.prototype.visitCastExpression = function (node) {
        var result = _super.prototype.visitCastExpression.call(this, node);
        var subExpression = result.expression();
        var totalTrivia = result.leadingTrivia().concat(subExpression.leadingTrivia());
        subExpression = subExpression.replaceToken(subExpression.firstToken(), subExpression.firstToken().withLeadingTrivia(totalTrivia));
        return subExpression;
    };
    Emitter.prototype.visitInterfaceDeclaration = function (node) {
        return null;
    };
    Emitter.prototype.generateEnumValueExpression = function (enumDeclaration, variableDeclarator, assignDefaultValues, index) {
        if(variableDeclarator.equalsValueClause() !== null) {
            return variableDeclarator.equalsValueClause().value();
        }
        if(assignDefaultValues) {
            return new LiteralExpressionSyntax(167 /* NumericLiteralExpression */ , SyntaxToken.createElastic({
                kind: 11 /* NumericLiteral */ ,
                text: index.toString()
            }));
        }
        var enumIdentifier = enumDeclaration.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        var previousVariable = enumDeclaration.variableDeclarators().syntaxNodeAt(index - 1);
        var variableIdentifier = previousVariable.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        var receiver = new MemberAccessExpressionSyntax(new IdentifierNameSyntax(enumIdentifier.clone()), SyntaxToken.createElastic({
            kind: 73 /* DotToken */ 
        }), new IdentifierNameSyntax(variableIdentifier.withTrailingTrivia(SyntaxTriviaList.space)));
        return new BinaryExpressionSyntax(156 /* PlusExpression */ , receiver, SyntaxToken.createElastic({
            kind: 86 /* PlusToken */ ,
            trailingTrivia: this.spaceList
        }), new LiteralExpressionSyntax(167 /* NumericLiteralExpression */ , SyntaxToken.createElastic({
            kind: 11 /* NumericLiteral */ ,
            text: "1"
        })));
    };
    Emitter.prototype.generateEnumFunctionExpression = function (node) {
        var identifier = node.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        var indentationColumn = Indentation.columnForStartOfToken(node.firstToken(), this.syntaxInformationMap, this.options);
        var indentationTrivia = Indentation.indentationTrivia(indentationColumn, this.options);
        var statements = [];
        var assignDefaultValues = true;
        for(var i = 0, n = node.variableDeclarators().syntaxNodeCount(); i < n; i++) {
            var variableDeclarator = node.variableDeclarators().syntaxNodeAt(i);
            var variableIdentifier = variableDeclarator.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
            assignDefaultValues = assignDefaultValues && variableDeclarator.equalsValueClause() === null;
            var receiver = new MemberAccessExpressionSyntax(new IdentifierNameSyntax(identifier.withLeadingTrivia(variableDeclarator.leadingTrivia()).clone()), SyntaxToken.createElastic({
                kind: 73 /* DotToken */ 
            }), new IdentifierNameSyntax(variableIdentifier.withTrailingTrivia(SyntaxTriviaList.space)));
            var assignExpression = new BinaryExpressionSyntax(171 /* AssignmentExpression */ , receiver, SyntaxToken.createElastic({
                kind: 104 /* EqualsToken */ ,
                trailingTrivia: this.spaceList
            }), this.generateEnumValueExpression(node, variableDeclarator, assignDefaultValues, i));
            var expressionStatement = new ExpressionStatementSyntax(assignExpression, SyntaxToken.createElastic({
                kind: 75 /* SemicolonToken */ ,
                trailingTrivia: this.newLineList
            }));
            statements.push(expressionStatement);
        }
        var block = new BlockSyntax(SyntaxToken.createElastic({
            kind: 67 /* OpenBraceToken */ ,
            trailingTrivia: this.newLineList
        }), SyntaxList.create(statements), SyntaxToken.createElastic({
            leadingTrivia: [
                indentationTrivia
            ],
            kind: 68 /* CloseBraceToken */ 
        }));
        var functionExpression = FunctionExpressionSyntax.create(SyntaxToken.createElastic({
            kind: 25 /* FunctionKeyword */ 
        }), CallSignatureSyntax.create(new ParameterListSyntax(SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), SeparatedSyntaxList.create([
            new IdentifierNameSyntax(identifier.clone())
        ]), SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ ,
            trailingTrivia: this.spaceList
        }))), block);
        return functionExpression;
    };
    Emitter.prototype.visitEnumDeclaration = function (node) {
        var result = [];
        var identifier = node.identifier().withLeadingTrivia(SyntaxTriviaList.empty).withTrailingTrivia(SyntaxTriviaList.empty);
        var variableStatement = new VariableStatementSyntax(null, null, new VariableDeclarationSyntax(SyntaxToken.createElastic({
            leadingTrivia: node.leadingTrivia().toArray(),
            kind: 38 /* VarKeyword */ ,
            trailingTrivia: this.spaceList
        }), SeparatedSyntaxList.create([
            VariableDeclaratorSyntax.create(identifier.clone())
        ])), SyntaxToken.createElastic({
            kind: 75 /* SemicolonToken */ ,
            trailingTrivia: this.newLineList
        }));
        result.push(variableStatement);
        var indentationColumn = Indentation.columnForStartOfToken(node.firstToken(), this.syntaxInformationMap, this.options);
        var indentationTrivia = Indentation.indentationTrivia(indentationColumn, this.options);
        var functionExpression = this.generateEnumFunctionExpression(node);
        var parenthesizedExpression = new ParenthesizedExpressionSyntax(SyntaxToken.createElastic({
            leadingTrivia: [
                indentationTrivia
            ],
            kind: 69 /* OpenParenToken */ 
        }), functionExpression, SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ 
        }));
        var logicalOrExpression = new BinaryExpressionSyntax(184 /* LogicalOrExpression */ , new IdentifierNameSyntax(identifier.clone()), SyntaxToken.createElastic({
            kind: 101 /* BarBarToken */ 
        }), new ParenthesizedExpressionSyntax(SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), new BinaryExpressionSyntax(171 /* AssignmentExpression */ , new IdentifierNameSyntax(identifier.clone()), SyntaxToken.createElastic({
            kind: 104 /* EqualsToken */ 
        }), new ObjectLiteralExpressionSyntax(SyntaxToken.createElastic({
            kind: 67 /* OpenBraceToken */ 
        }), SeparatedSyntaxList.empty, SyntaxToken.createElastic({
            kind: 68 /* CloseBraceToken */ 
        }))), SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ 
        })));
        var argumentList = new ArgumentListSyntax(SyntaxToken.createElastic({
            kind: 69 /* OpenParenToken */ 
        }), SeparatedSyntaxList.create([
            logicalOrExpression
        ]), SyntaxToken.createElastic({
            kind: 70 /* CloseParenToken */ 
        }));
        var invocationExpression = new InvocationExpressionSyntax(parenthesizedExpression, argumentList);
        var expressionStatement = new ExpressionStatementSyntax(invocationExpression, SyntaxToken.createElastic({
            kind: 75 /* SemicolonToken */ ,
            trailingTrivia: this.newLineList
        }));
        result.push(expressionStatement);
        return result;
    };
    Emitter.prototype.visitInvocationExpression = function (invocationExpression) {
        var result = _super.prototype.visitInvocationExpression.call(this, invocationExpression);
        if(result.expression().kind() !== 221 /* SuperExpression */ ) {
            return result;
        }
        var expression = new MemberAccessExpressionSyntax(new IdentifierNameSyntax(SyntaxToken.createElastic({
            leadingTrivia: result.leadingTrivia().toArray(),
            kind: 9 /* IdentifierNameToken */ ,
            text: "_super"
        })), SyntaxToken.createElastic({
            kind: 73 /* DotToken */ 
        }), new IdentifierNameSyntax(SyntaxToken.createElastic({
            kind: 9 /* IdentifierNameToken */ ,
            text: "call"
        })));
        var arguments = result.argumentList().arguments().toArray();
        if(arguments.length > 0) {
            arguments.unshift(SyntaxToken.createElastic({
                kind: 76 /* CommaToken */ ,
                trailingTrivia: this.spaceList
            }));
        }
        arguments.unshift(new ThisExpressionSyntax(SyntaxToken.createElastic({
            kind: 33 /* ThisKeyword */ 
        })));
        return result.withExpression(expression).withArgumentList(result.argumentList().withArguments(SeparatedSyntaxList.create(arguments)));
    };
    return Emitter;
})(SyntaxRewriter);
var ParserExpressionPrecedence;
(function (ParserExpressionPrecedence) {
    ParserExpressionPrecedence._map = [];
    ParserExpressionPrecedence.CommaExpressionPrecedence = 1;
    ParserExpressionPrecedence.AssignmentExpressionPrecedence = 2;
    ParserExpressionPrecedence.ConditionalExpressionPrecedence = 3;
    ParserExpressionPrecedence.ArrowFunctionPrecedence = 4;
    ParserExpressionPrecedence.LogicalOrExpressionPrecedence = 5;
    ParserExpressionPrecedence.LogicalAndExpressionPrecedence = 6;
    ParserExpressionPrecedence.BitwiseOrExpressionPrecedence = 7;
    ParserExpressionPrecedence.BitwiseExclusiveOrExpressionPrecedence = 8;
    ParserExpressionPrecedence.BitwiseAndExpressionPrecedence = 9;
    ParserExpressionPrecedence.EqualityExpressionPrecedence = 10;
    ParserExpressionPrecedence.RelationalExpressionPrecedence = 11;
    ParserExpressionPrecedence.ShiftExpressionPrecdence = 12;
    ParserExpressionPrecedence.AdditiveExpressionPrecedence = 13;
    ParserExpressionPrecedence.MultiplicativeExpressionPrecedence = 14;
    ParserExpressionPrecedence.UnaryExpressionPrecedence = 15;
})(ParserExpressionPrecedence || (ParserExpressionPrecedence = {}));
var ParserListParsingState;
(function (ParserListParsingState) {
    ParserListParsingState._map = [];
    ParserListParsingState.SourceUnit_ModuleElements = 1 << 0;
    ParserListParsingState.ClassDeclaration_ClassElements = 1 << 1;
    ParserListParsingState.ModuleDeclaration_ModuleElements = 1 << 2;
    ParserListParsingState.SwitchStatement_SwitchClauses = 1 << 3;
    ParserListParsingState.SwitchClause_Statements = 1 << 4;
    ParserListParsingState.Block_Statements = 1 << 5;
    ParserListParsingState.EnumDeclaration_VariableDeclarators = 1 << 7;
    ParserListParsingState.ObjectType_TypeMembers = 1 << 8;
    ParserListParsingState.ExtendsOrImplementsClause_TypeNameList = 1 << 9;
    ParserListParsingState.VariableDeclaration_VariableDeclarators_AllowIn = 1 << 10;
    ParserListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn = 1 << 11;
    ParserListParsingState.ArgumentList_AssignmentExpressions = 1 << 12;
    ParserListParsingState.ObjectLiteralExpression_PropertyAssignments = 1 << 13;
    ParserListParsingState.ArrayLiteralExpression_AssignmentExpressions = 1 << 14;
    ParserListParsingState.ParameterList_Parameters = 1 << 15;
    ParserListParsingState.FirstListParsingState = ParserListParsingState.SourceUnit_ModuleElements;
    ParserListParsingState.LastListParsingState = ParserListParsingState.ParameterList_Parameters;
})(ParserListParsingState || (ParserListParsingState = {}));
var ParserSkippedTokensAdder = (function (_super) {
    __extends(ParserSkippedTokensAdder, _super);
    function ParserSkippedTokensAdder(skippedTokens) {
        _super.call(this);
        this.skippedTokens = skippedTokens;
    }
    ParserSkippedTokensAdder.prototype.visitNode = function (node) {
        if(this.skippedTokens.length === 0) {
            return node;
        }
        return _super.prototype.visitNode.call(this, node);
    };
    ParserSkippedTokensAdder.prototype.visitList = function (list) {
        if(this.skippedTokens.length === 0) {
            return list;
        }
        return _super.prototype.visitList.call(this, list);
    };
    ParserSkippedTokensAdder.prototype.visitSeparatedList = function (list) {
        if(this.skippedTokens.length === 0) {
            return list;
        }
        return _super.prototype.visitSeparatedList.call(this, list);
    };
    ParserSkippedTokensAdder.prototype.visitToken = function (token) {
        if(this.skippedTokens.length === 0) {
            return token;
        }
        var currentOwner = null;
        var leadingTrivia = null;
        while(this.skippedTokens.length > 0 && this.skippedTokens[0].owningToken === currentOwner) {
            leadingTrivia = leadingTrivia || [];
            var skippedToken = this.skippedTokens.shift().skippedToken;
            this.addSkippedTokenTo(skippedToken, leadingTrivia);
            currentOwner = skippedToken;
        }
        if(leadingTrivia !== null) {
            this.addTriviaTo(token.leadingTrivia(), leadingTrivia);
        }
        currentOwner = token;
        var trailingTrivia = null;
        while(this.skippedTokens.length > 0 && this.skippedTokens[0].owningToken === currentOwner) {
            trailingTrivia = trailingTrivia || token.trailingTrivia().toArray();
            var skippedToken = this.skippedTokens.shift().skippedToken;
            this.addSkippedTokenTo(skippedToken, trailingTrivia);
            currentOwner = skippedToken;
        }
        var result = token;
        if(leadingTrivia !== null) {
            result = result.withLeadingTrivia(SyntaxTriviaList.create(leadingTrivia));
        }
        if(trailingTrivia !== null) {
            result = result.withTrailingTrivia(SyntaxTriviaList.create(trailingTrivia));
        }
        return result;
    };
    ParserSkippedTokensAdder.prototype.addTriviaTo = function (list, array) {
        for(var i = 0, n = list.count(); i < n; i++) {
            array.push(list.syntaxTriviaAt(i));
        }
    };
    ParserSkippedTokensAdder.prototype.addSkippedTokenTo = function (skippedToken, array) {
        Debug.assert(skippedToken.text().length > 0);
        this.addTriviaTo(skippedToken.leadingTrivia(), array);
        array.push(SyntaxTrivia.create(8 /* SkippedTextTrivia */ , skippedToken.text()));
        this.addTriviaTo(skippedToken.trailingTrivia(), array);
    };
    return ParserSkippedTokensAdder;
})(SyntaxRewriter);
var Parser = (function (_super) {
    __extends(Parser, _super);
    function Parser(text, languageVersion, stringTable, oldTree, changes, options) {
        if (typeof languageVersion === "undefined") { languageVersion = 1 /* EcmaScript5 */ ; }
        if (typeof stringTable === "undefined") { stringTable = null; }
        if (typeof oldTree === "undefined") { oldTree = null; }
        if (typeof changes === "undefined") { changes = null; }
        if (typeof options === "undefined") { options = null; }
        _super.call(this, 32, null);
        this.options = null;
        this._currentToken = null;
        this.previousToken = null;
        this.currentTokenFullStart = 0;
        this.tokenDiagnostics = [];
        this.listParsingState = 0;
        this.isInStrictMode = false;
        this.skippedTokens = [];
        this.diagnostics = [];
        this.scanner = new Scanner(text, languageVersion, stringTable);
        this.oldTree = oldTree;
        this.options = options || new ParseOptions();
    }
    Parser.prototype.isIncremental = function () {
        return this.oldTree !== null;
    };
    Parser.prototype.storeAdditionalRewindState = function (rewindPoint) {
        rewindPoint.previousToken = this.previousToken;
        rewindPoint.currentTokenFullStart = this.currentTokenFullStart;
        rewindPoint.isInStrictMode = this.isInStrictMode;
        rewindPoint.diagnosticsCount = this.diagnostics.length;
        rewindPoint.skippedTokensCount = this.skippedTokens.length;
    };
    Parser.prototype.restoreStateFromRewindPoint = function (rewindPoint) {
        this._currentToken = null;
        this.previousToken = rewindPoint.previousToken;
        this.currentTokenFullStart = rewindPoint.currentTokenFullStart;
        this.isInStrictMode = rewindPoint.isInStrictMode;
        this.diagnostics.length = rewindPoint.diagnosticsCount;
        this.skippedTokens.length = rewindPoint.skippedTokensCount;
    };
    Parser.prototype.fetchMoreItems = function (argument, sourceIndex, window, destinationIndex, spaceAvailable) {
        window[destinationIndex] = this.scanner.scan(this.tokenDiagnostics, argument);
        return 1;
    };
    Parser.prototype.currentTokenStart = function () {
        return this.currentTokenFullStart + this.currentToken().leadingTriviaWidth();
    };
    Parser.prototype.previousTokenStart = function () {
        if(this.previousToken === null) {
            return 0;
        }
        return this.currentTokenFullStart - this.previousToken.fullWidth() + this.previousToken.leadingTriviaWidth();
    };
    Parser.prototype.previousTokenEnd = function () {
        if(this.previousToken === null) {
            return 0;
        }
        return this.previousTokenStart() + this.previousToken.width();
    };
    Parser.prototype.currentToken = function () {
        var result = this._currentToken;
        if(result === null) {
            result = this.currentItem(false);
            this._currentToken = result;
        }
        return result;
    };
    Parser.prototype.currentTokenAllowingRegularExpression = function () {
        Debug.assert(this._currentToken === null);
        var result = this.currentItem(true);
        this._currentToken = result;
        return result;
    };
    Parser.prototype.peekTokenN = function (n) {
        return this.peekItemN(n);
    };
    Parser.prototype.eatAnyToken = function () {
        var token = this.currentToken();
        this.moveToNextToken();
        return token;
    };
    Parser.prototype.moveToNextToken = function () {
        this.currentTokenFullStart += this._currentToken.fullWidth();
        this.previousToken = this._currentToken;
        this._currentToken = null;
        this.moveToNextItem();
    };
    Parser.prototype.canEatAutomaticSemicolon = function (allowWithoutNewLine) {
        var token = this.currentToken();
        if(token.tokenKind === 118 /* EndOfFileToken */ ) {
            return true;
        }
        if(token.tokenKind === 68 /* CloseBraceToken */ ) {
            return true;
        }
        if(allowWithoutNewLine) {
            return true;
        }
        if(this.previousToken !== null && this.previousToken.hasTrailingNewLineTrivia()) {
            return true;
        }
        return false;
    };
    Parser.prototype.canEatExplicitOrAutomaticSemicolon = function (allowWithoutNewline) {
        var token = this.currentToken();
        if(token.tokenKind === 75 /* SemicolonToken */ ) {
            return true;
        }
        return this.canEatAutomaticSemicolon(allowWithoutNewline);
    };
    Parser.prototype.eatExplicitOrAutomaticSemicolon = function (allowWithoutNewline) {
        var token = this.currentToken();
        if(token.tokenKind === 75 /* SemicolonToken */ ) {
            return this.eatToken(75 /* SemicolonToken */ );
        }
        if(this.canEatAutomaticSemicolon(allowWithoutNewline)) {
            var semicolonToken = SyntaxToken.createEmpty(75 /* SemicolonToken */ , 0 /* None */ );
            if(!this.options.allowAutomaticSemicolonInsertion()) {
                this.addDiagnostic(new SyntaxDiagnostic(this.previousTokenEnd(), 0, 7 /* Automatic_semicolon_insertion_not_allowed */ , null));
            }
            return semicolonToken;
        }
        return this.eatToken(75 /* SemicolonToken */ );
    };
    Parser.prototype.eatToken = function (kind) {
        var token = this.currentToken();
        if(token.tokenKind === kind) {
            this.moveToNextToken();
            return token;
        }
        return this.createMissingToken(kind, 0 /* None */ , token);
    };
    Parser.prototype.tryEatToken = function (kind) {
        if(this.currentToken().tokenKind === kind) {
            return this.eatToken(kind);
        }
        return null;
    };
    Parser.prototype.tryEatKeyword = function (kind) {
        if(this.currentToken().keywordKind() === kind) {
            return this.eatKeyword(kind);
        }
        return null;
    };
    Parser.prototype.eatKeyword = function (kind) {
        Debug.assert(SyntaxFacts.isTokenKind(kind));
        var token = this.currentToken();
        if(token.keywordKind() === kind) {
            this.moveToNextToken();
            return token;
        }
        return this.createMissingToken(9 /* IdentifierNameToken */ , kind, token);
    };
    Parser.prototype.eatIdentifierNameToken = function () {
        var token = this.currentToken();
        if(token.tokenKind === 9 /* IdentifierNameToken */ ) {
            this.moveToNextToken();
            return token;
        }
        return this.createMissingToken(9 /* IdentifierNameToken */ , 0 /* None */ , token);
    };
    Parser.prototype.eatIdentifierToken = function () {
        var token = this.currentToken();
        if(token.tokenKind === 9 /* IdentifierNameToken */ ) {
            if(this.isKeyword(token.keywordKind())) {
                return this.createMissingToken(9 /* IdentifierNameToken */ , 0 /* None */ , token);
            }
            this.moveToNextToken();
            return token;
        }
        return this.createMissingToken(9 /* IdentifierNameToken */ , 0 /* None */ , token);
    };
    Parser.prototype.isIdentifier = function (token) {
        return token.tokenKind === 9 /* IdentifierNameToken */  && !this.isKeyword(token.keywordKind());
    };
    Parser.prototype.isKeyword = function (kind) {
        if(SyntaxFacts.isStandardKeyword(kind) || SyntaxFacts.isFutureReservedKeyword(kind)) {
            return true;
        }
        if(this.isInStrictMode && SyntaxFacts.isFutureReservedStrictKeyword(kind)) {
            return true;
        }
        return false;
    };
    Parser.prototype.createMissingToken = function (expectedKind, expectedKeywordKind, actual) {
        var diagnostic = this.getExpectedTokenDiagnostic(expectedKind, expectedKeywordKind, actual);
        this.addDiagnostic(diagnostic);
        return SyntaxToken.createEmpty(expectedKind, expectedKeywordKind);
    };
    Parser.prototype.getExpectedTokenDiagnostic = function (expectedKind, expectedKeywordKind, actual) {
        var token = this.currentToken();
        if(expectedKind === 9 /* IdentifierNameToken */ ) {
            if(SyntaxFacts.isAnyKeyword(expectedKeywordKind)) {
                return new SyntaxDiagnostic(this.currentTokenStart(), token.width(), 5 /* _0_expected */ , [
                    SyntaxFacts.getText(expectedKeywordKind)
                ]);
            } else {
                if(actual !== null && SyntaxFacts.isAnyKeyword(actual.keywordKind())) {
                    return new SyntaxDiagnostic(this.currentTokenStart(), token.width(), 6 /* Identifier_expected__0_is_a_keyword */ , [
                        SyntaxFacts.getText(actual.keywordKind())
                    ]);
                } else {
                    return new SyntaxDiagnostic(this.currentTokenStart(), token.width(), 3 /* Identifier_expected */ , null);
                }
            }
        }
        if(SyntaxFacts.isAnyPunctuation(expectedKind)) {
            return new SyntaxDiagnostic(this.currentTokenStart(), token.width(), 5 /* _0_expected */ , [
                SyntaxFacts.getText(expectedKind)
            ]);
        }
        throw Errors.notYetImplemented();
    };
    Parser.getPrecedence = function getPrecedence(expressionKind) {
        switch(expressionKind) {
            case 170 /* CommaExpression */ : {
                return 1 /* CommaExpressionPrecedence */ ;

            }
            case 171 /* AssignmentExpression */ :
            case 172 /* AddAssignmentExpression */ :
            case 173 /* SubtractAssignmentExpression */ :
            case 174 /* MultiplyAssignmentExpression */ :
            case 175 /* DivideAssignmentExpression */ :
            case 176 /* ModuloAssignmentExpression */ :
            case 177 /* AndAssignmentExpression */ :
            case 178 /* ExclusiveOrAssignmentExpression */ :
            case 179 /* OrAssignmentExpression */ :
            case 180 /* LeftShiftAssignmentExpression */ :
            case 181 /* SignedRightShiftAssignmentExpression */ :
            case 182 /* UnsignedRightShiftAssignmentExpression */ : {
                return 2 /* AssignmentExpressionPrecedence */ ;

            }
            case 183 /* ConditionalExpression */ : {
                return 3 /* ConditionalExpressionPrecedence */ ;

            }
            case 184 /* LogicalOrExpression */ : {
                return 5 /* LogicalOrExpressionPrecedence */ ;

            }
            case 185 /* LogicalAndExpression */ : {
                return 6 /* LogicalAndExpressionPrecedence */ ;

            }
            case 186 /* BitwiseOrExpression */ : {
                return 7 /* BitwiseOrExpressionPrecedence */ ;

            }
            case 187 /* BitwiseExclusiveOrExpression */ : {
                return 8 /* BitwiseExclusiveOrExpressionPrecedence */ ;

            }
            case 188 /* BitwiseAndExpression */ : {
                return 9 /* BitwiseAndExpressionPrecedence */ ;

            }
            case 189 /* EqualsWithTypeConversionExpression */ :
            case 190 /* NotEqualsWithTypeConversionExpression */ :
            case 191 /* EqualsExpression */ :
            case 192 /* NotEqualsExpression */ : {
                return 10 /* EqualityExpressionPrecedence */ ;

            }
            case 193 /* LessThanExpression */ :
            case 194 /* GreaterThanExpression */ :
            case 195 /* LessThanOrEqualExpression */ :
            case 196 /* GreaterThanOrEqualExpression */ :
            case 197 /* InstanceOfExpression */ :
            case 198 /* InExpression */ : {
                return 11 /* RelationalExpressionPrecedence */ ;

            }
            case 199 /* LeftShiftExpression */ :
            case 200 /* SignedRightShiftExpression */ :
            case 201 /* UnsignedRightShiftExpression */ : {
                return 12 /* ShiftExpressionPrecdence */ ;

            }
            case 205 /* AddExpression */ :
            case 206 /* SubtractExpression */ : {
                return 13 /* AdditiveExpressionPrecedence */ ;

            }
            case 202 /* MultiplyExpression */ :
            case 203 /* DivideExpression */ :
            case 204 /* ModuloExpression */ : {
                return 14 /* MultiplicativeExpressionPrecedence */ ;

            }
            case 156 /* PlusExpression */ :
            case 157 /* NegateExpression */ :
            case 158 /* BitwiseNotExpression */ :
            case 159 /* LogicalNotExpression */ :
            case 162 /* DeleteExpression */ :
            case 163 /* TypeOfExpression */ :
            case 164 /* VoidExpression */ :
            case 160 /* PreIncrementExpression */ :
            case 161 /* PreDecrementExpression */ : {
                return 15 /* UnaryExpressionPrecedence */ ;

            }
        }
        throw Errors.invalidOperation();
    }
    Parser.isDirectivePrologueElement = function isDirectivePrologueElement(node) {
        if(node.kind() === 141 /* ExpressionStatement */ ) {
            var expressionStatement = node;
            var expression = expressionStatement.expression();
            if(expression.kind() === 169 /* StringLiteralExpression */ ) {
                return true;
            }
        }
        return false;
    }
    Parser.isUseStrictDirective = function isUseStrictDirective(node) {
        var expressionStatement = node;
        var expression = expressionStatement.expression();
        var stringLiteralExpression = expression;
        var stringLiteral = stringLiteralExpression.literalToken();
        var text = stringLiteral.text();
        return text === '"use strict"' || text === "'use strict'";
    }
    Parser.prototype.parseSyntaxTree = function () {
        var sourceUnit = this.parseSourceUnit();
        var allDiagnostics = this.tokenDiagnostics.concat(this.diagnostics);
        allDiagnostics.sort(function (a, b) {
            return a.position() - b.position();
        });
        sourceUnit = this.addSkippedTokensTo(sourceUnit);
        return new SyntaxTree(sourceUnit, allDiagnostics);
    };
    Parser.prototype.addSkippedTokensTo = function (sourceUnit) {
        if(this.skippedTokens.length === 0) {
            return sourceUnit;
        }
        return sourceUnit.accept1(new ParserSkippedTokensAdder(this.skippedTokens));
    };
    Parser.prototype.parseSourceUnit = function () {
        var savedIsInStrictMode = this.isInStrictMode;
        var moduleElements = this.parseSyntaxList(1 /* SourceUnit_ModuleElements */ , Parser.updateStrictModeState);
        this.isInStrictMode = savedIsInStrictMode;
        return new SourceUnitSyntax(moduleElements, this.currentToken());
    };
    Parser.updateStrictModeState = function updateStrictModeState(parser, items) {
        if(!parser.isInStrictMode) {
            for(var i = 0; i < items.length; i++) {
                var item = items[i];
                if(!Parser.isDirectivePrologueElement(item)) {
                    return;
                }
            }
            parser.isInStrictMode = Parser.isUseStrictDirective(items[items.length - 1]);
        }
    }
    Parser.prototype.isModuleElement = function () {
        return this.isImportDeclaration() || this.isModuleDeclaration() || this.isInterfaceDeclaration() || this.isClassDeclaration() || this.isEnumDeclaration() || this.isStatement(true);
    };
    Parser.prototype.parseModuleElement = function () {
        if(this.isImportDeclaration()) {
            return this.parseImportDeclaration();
        } else {
            if(this.isModuleDeclaration()) {
                return this.parseModuleDeclaration();
            } else {
                if(this.isInterfaceDeclaration()) {
                    return this.parseInterfaceDeclaration();
                } else {
                    if(this.isClassDeclaration()) {
                        return this.parseClassDeclaration();
                    } else {
                        if(this.isEnumDeclaration()) {
                            return this.parseEnumDeclaration();
                        } else {
                            if(this.isStatement(true)) {
                                return this.parseStatement(true);
                            } else {
                                throw Errors.invalidOperation();
                            }
                        }
                    }
                }
            }
        }
    };
    Parser.prototype.isImportDeclaration = function () {
        return this.currentToken().keywordKind() === 47 /* ImportKeyword */  && this.peekTokenN(1).tokenKind === 9 /* IdentifierNameToken */  && this.peekTokenN(2).tokenKind === 104 /* EqualsToken */ ;
    };
    Parser.prototype.parseImportDeclaration = function () {
        Debug.assert(this.currentToken().keywordKind() === 47 /* ImportKeyword */ );
        var importKeyword = this.eatKeyword(47 /* ImportKeyword */ );
        var identifier = this.eatIdentifierToken();
        var equalsToken = this.eatToken(104 /* EqualsToken */ );
        var moduleReference = this.parseModuleReference();
        var semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
        return new ImportDeclarationSyntax(importKeyword, identifier, equalsToken, moduleReference, semicolonToken);
    };
    Parser.prototype.parseModuleReference = function () {
        if(this.isExternalModuleReference()) {
            return this.parseExternalModuleReference();
        } else {
            return this.parseModuleNameModuleReference();
        }
    };
    Parser.prototype.isExternalModuleReference = function () {
        return this.currentToken().keywordKind() === 63 /* ModuleKeyword */  && this.peekTokenN(1).tokenKind === 69 /* OpenParenToken */ ;
    };
    Parser.prototype.parseExternalModuleReference = function () {
        Debug.assert(this.isExternalModuleReference());
        var moduleKeyword = this.eatKeyword(63 /* ModuleKeyword */ );
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var stringLiteral = this.eatToken(12 /* StringLiteral */ );
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        return new ExternalModuleReferenceSyntax(moduleKeyword, openParenToken, stringLiteral, closeParenToken);
    };
    Parser.prototype.parseModuleNameModuleReference = function () {
        var name = this.parseName();
        return new ModuleNameModuleReferenceSyntax(name);
    };
    Parser.prototype.parseIdentifierName = function () {
        var identifierName = this.eatIdentifierNameToken();
        return new IdentifierNameSyntax(identifierName);
    };
    Parser.prototype.isName = function () {
        return this.isIdentifier(this.currentToken());
    };
    Parser.prototype.parseName = function () {
        var isIdentifier = this.currentToken().tokenKind === 9 /* IdentifierNameToken */ ;
        var identifier = this.eatIdentifierToken();
        var identifierName = new IdentifierNameSyntax(identifier);
        var current = identifierName;
        while(isIdentifier && this.currentToken().tokenKind === 73 /* DotToken */ ) {
            var dotToken = this.eatToken(73 /* DotToken */ );
            isIdentifier = this.currentToken().tokenKind === 9 /* IdentifierNameToken */ ;
            identifier = this.eatIdentifierToken();
            identifierName = new IdentifierNameSyntax(identifier);
            current = new QualifiedNameSyntax(current, dotToken, identifierName);
        }
        return current;
    };
    Parser.prototype.isEnumDeclaration = function () {
        if(this.currentToken().keywordKind() === 45 /* ExportKeyword */  && this.peekTokenN(1).keywordKind() === 44 /* EnumKeyword */ ) {
            return true;
        }
        return this.currentToken().keywordKind() === 44 /* EnumKeyword */  && this.isIdentifier(this.peekTokenN(1));
    };
    Parser.prototype.parseEnumDeclaration = function () {
        Debug.assert(this.isEnumDeclaration());
        var exportKeyword = this.tryEatKeyword(45 /* ExportKeyword */ );
        var enumKeyword = this.eatKeyword(44 /* EnumKeyword */ );
        var identifier = this.eatIdentifierToken();
        var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
        var variableDeclarators = SeparatedSyntaxList.empty;
        if(!openBraceToken.isMissing()) {
            variableDeclarators = this.parseSeparatedSyntaxList(128 /* EnumDeclaration_VariableDeclarators */ );
        }
        var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
        return new EnumDeclarationSyntax(exportKeyword, enumKeyword, identifier, openBraceToken, variableDeclarators, closeBraceToken);
    };
    Parser.prototype.isClassDeclaration = function () {
        var token0 = this.currentToken();
        var token1 = this.peekTokenN(1);
        if(token0.keywordKind() === 45 /* ExportKeyword */  && token1.keywordKind() === 42 /* ClassKeyword */ ) {
            return true;
        }
        if(token0.keywordKind() === 61 /* DeclareKeyword */  && token1.keywordKind() === 42 /* ClassKeyword */ ) {
            return true;
        }
        return token0.keywordKind() === 42 /* ClassKeyword */  && this.isIdentifier(token1);
    };
    Parser.prototype.parseClassDeclaration = function () {
        Debug.assert(this.isClassDeclaration());
        var exportKeyword = this.tryEatKeyword(45 /* ExportKeyword */ );
        var declareKeyword = this.tryEatKeyword(61 /* DeclareKeyword */ );
        var classKeyword = this.eatKeyword(42 /* ClassKeyword */ );
        var identifier = this.eatIdentifierToken();
        var extendsClause = null;
        if(this.isExtendsClause()) {
            extendsClause = this.parseExtendsClause();
        }
        var implementsClause = null;
        if(this.isImplementsClause()) {
            implementsClause = this.parseImplementsClause();
        }
        var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
        var classElements = SyntaxList.empty;
        if(!openBraceToken.isMissing()) {
            classElements = this.parseSyntaxList(2 /* ClassDeclaration_ClassElements */ );
        }
        var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
        return new ClassDeclarationSyntax(exportKeyword, declareKeyword, classKeyword, identifier, extendsClause, implementsClause, openBraceToken, classElements, closeBraceToken);
    };
    Parser.prototype.isConstructorDeclaration = function () {
        return this.currentToken().keywordKind() === 60 /* ConstructorKeyword */ ;
    };
    Parser.prototype.isMemberAccessorDeclaration = function () {
        var rewindPoint = this.getRewindPoint();
        try  {
            if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
                this.eatAnyToken();
            }
            if(this.currentToken().keywordKind() === 56 /* StaticKeyword */ ) {
                this.eatAnyToken();
            }
            if(this.currentToken().keywordKind() !== 62 /* GetKeyword */  && this.currentToken().keywordKind() !== 65 /* SetKeyword */ ) {
                return false;
            }
            this.eatAnyToken();
            return this.isIdentifier(this.currentToken());
        }finally {
            this.rewind(rewindPoint);
            this.releaseRewindPoint(rewindPoint);
        }
    };
    Parser.prototype.parseMemberAccessorDeclaration = function () {
        Debug.assert(this.isMemberAccessorDeclaration());
        var publicOrPrivateKeyword = null;
        if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
            publicOrPrivateKeyword = this.eatAnyToken();
        }
        var staticKeyword = this.tryEatKeyword(56 /* StaticKeyword */ );
        if(this.currentToken().keywordKind() === 62 /* GetKeyword */ ) {
            return this.parseGetMemberAccessorDeclaration(publicOrPrivateKeyword, staticKeyword);
        } else {
            if(this.currentToken().keywordKind() === 65 /* SetKeyword */ ) {
                return this.parseSetMemberAccessorDeclaration(publicOrPrivateKeyword, staticKeyword);
            } else {
                throw Errors.invalidOperation();
            }
        }
    };
    Parser.prototype.parseGetMemberAccessorDeclaration = function (publicOrPrivateKeyword, staticKeyword) {
        Debug.assert(this.currentToken().keywordKind() === 62 /* GetKeyword */ );
        var getKeyword = this.eatKeyword(62 /* GetKeyword */ );
        var identifier = this.eatIdentifierToken();
        var parameterList = this.parseParameterList();
        var typeAnnotation = this.parseOptionalTypeAnnotation();
        var block = this.parseBlock();
        return new GetMemberAccessorDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, getKeyword, identifier, parameterList, typeAnnotation, block);
    };
    Parser.prototype.parseSetMemberAccessorDeclaration = function (publicOrPrivateKeyword, staticKeyword) {
        Debug.assert(this.currentToken().keywordKind() === 65 /* SetKeyword */ );
        var setKeyword = this.eatKeyword(65 /* SetKeyword */ );
        var identifier = this.eatIdentifierToken();
        var parameterList = this.parseParameterList();
        var block = this.parseBlock();
        return new SetMemberAccessorDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, setKeyword, identifier, parameterList, block);
    };
    Parser.prototype.isMemberVariableDeclaration = function () {
        var rewindPoint = this.getRewindPoint();
        try  {
            if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
                this.eatAnyToken();
                if(this.currentToken().tokenKind === 68 /* CloseBraceToken */  || this.currentToken().tokenKind === 118 /* EndOfFileToken */ ) {
                    return true;
                }
            }
            if(this.currentToken().keywordKind() === 56 /* StaticKeyword */ ) {
                this.eatAnyToken();
                if(this.currentToken().tokenKind === 68 /* CloseBraceToken */  || this.currentToken().tokenKind === 118 /* EndOfFileToken */ ) {
                    return true;
                }
            }
            return this.isVariableDeclarator();
        }finally {
            this.rewind(rewindPoint);
            this.releaseRewindPoint(rewindPoint);
        }
    };
    Parser.prototype.isClassElement = function () {
        return this.isConstructorDeclaration() || this.isMemberFunctionDeclaration() || this.isMemberAccessorDeclaration() || this.isMemberVariableDeclaration();
    };
    Parser.prototype.parseConstructorDeclaration = function () {
        Debug.assert(this.isConstructorDeclaration());
        var constructorKeyword = this.eatKeyword(60 /* ConstructorKeyword */ );
        var parameterList = this.parseParameterList();
        var semicolonToken = null;
        var block = null;
        if(this.isBlock()) {
            block = this.parseBlock();
        } else {
            semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
        }
        return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, block, semicolonToken);
    };
    Parser.prototype.isMemberFunctionDeclaration = function () {
        var rewindPoint = this.getRewindPoint();
        try  {
            if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
                this.eatAnyToken();
            }
            if(this.currentToken().keywordKind() === 56 /* StaticKeyword */ ) {
                this.eatAnyToken();
            }
            return this.isFunctionSignature();
        }finally {
            this.rewind(rewindPoint);
            this.releaseRewindPoint(rewindPoint);
        }
    };
    Parser.prototype.parseMemberFunctionDeclaration = function () {
        Debug.assert(this.isMemberFunctionDeclaration());
        var publicOrPrivateKeyword = null;
        if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
            publicOrPrivateKeyword = this.eatAnyToken();
        }
        var staticKeyword = this.tryEatKeyword(56 /* StaticKeyword */ );
        var functionSignature = this.parseFunctionSignature();
        var block = null;
        var semicolon = null;
        if(this.isBlock()) {
            block = this.parseBlock();
        } else {
            semicolon = this.eatExplicitOrAutomaticSemicolon(false);
        }
        return new MemberFunctionDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, functionSignature, block, semicolon);
    };
    Parser.prototype.parseMemberVariableDeclaration = function () {
        Debug.assert(this.isMemberVariableDeclaration());
        var publicOrPrivateKeyword = null;
        if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
            publicOrPrivateKeyword = this.eatAnyToken();
        }
        var staticKeyword = this.tryEatKeyword(56 /* StaticKeyword */ );
        var variableDeclarator = this.parseVariableDeclarator(true);
        var semicolon = this.eatExplicitOrAutomaticSemicolon(false);
        return new MemberVariableDeclarationSyntax(publicOrPrivateKeyword, staticKeyword, variableDeclarator, semicolon);
    };
    Parser.prototype.parseClassElement = function () {
        Debug.assert(this.isClassElement());
        if(this.isConstructorDeclaration()) {
            return this.parseConstructorDeclaration();
        } else {
            if(this.isMemberFunctionDeclaration()) {
                return this.parseMemberFunctionDeclaration();
            } else {
                if(this.isMemberAccessorDeclaration()) {
                    return this.parseMemberAccessorDeclaration();
                } else {
                    if(this.isMemberVariableDeclaration()) {
                        return this.parseMemberVariableDeclaration();
                    } else {
                        throw Errors.invalidOperation();
                    }
                }
            }
        }
    };
    Parser.prototype.isFunctionDeclaration = function () {
        var token0 = this.currentToken();
        if(token0.keywordKind() === 25 /* FunctionKeyword */ ) {
            return true;
        }
        var token1 = this.peekTokenN(1);
        if(token0.keywordKind() === 45 /* ExportKeyword */  && token1.keywordKind() === 25 /* FunctionKeyword */ ) {
            return true;
        }
        return token0.keywordKind() === 61 /* DeclareKeyword */  && token1.keywordKind() === 25 /* FunctionKeyword */ ;
    };
    Parser.prototype.parseFunctionDeclaration = function () {
        Debug.assert(this.isFunctionDeclaration());
        var exportKeyword = this.tryEatKeyword(45 /* ExportKeyword */ );
        var declareKeyword = this.tryEatKeyword(61 /* DeclareKeyword */ );
        var functionKeyword = this.eatKeyword(25 /* FunctionKeyword */ );
        var functionSignature = this.parseFunctionSignature();
        var semicolonToken = null;
        var block = null;
        if(this.isBlock()) {
            block = this.parseBlock();
        } else {
            semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
        }
        return new FunctionDeclarationSyntax(exportKeyword, declareKeyword, functionKeyword, functionSignature, block, semicolonToken);
    };
    Parser.prototype.isModuleDeclaration = function () {
        var token0 = this.currentToken();
        var token1 = this.peekTokenN(1);
        if(token0.keywordKind() === 45 /* ExportKeyword */  && token1.keywordKind() === 63 /* ModuleKeyword */ ) {
            return true;
        }
        if(token0.keywordKind() === 61 /* DeclareKeyword */  && token1.keywordKind() === 63 /* ModuleKeyword */ ) {
            return true;
        }
        if(token0.keywordKind() === 63 /* ModuleKeyword */ ) {
            if(token1.tokenKind === 67 /* OpenBraceToken */ ) {
                return true;
            }
            if(token1.tokenKind === 9 /* IdentifierNameToken */ ) {
                var token2 = this.peekTokenN(2);
                if(token2.tokenKind === 67 /* OpenBraceToken */ ) {
                    return true;
                }
                if(token2.tokenKind === 73 /* DotToken */ ) {
                    return true;
                }
            }
        }
        return false;
    };
    Parser.prototype.parseModuleDeclaration = function () {
        Debug.assert(this.isModuleDeclaration());
        var exportKeyword = this.tryEatKeyword(45 /* ExportKeyword */ );
        var declareKeyword = this.tryEatKeyword(61 /* DeclareKeyword */ );
        var moduleKeyword = this.eatKeyword(63 /* ModuleKeyword */ );
        var moduleName = null;
        var stringLiteral = null;
        if(this.isName()) {
            moduleName = this.parseName();
        } else {
            if(this.currentToken().tokenKind === 12 /* StringLiteral */ ) {
                stringLiteral = this.eatToken(12 /* StringLiteral */ );
            }
        }
        var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
        var moduleElements = SyntaxList.empty;
        if(!openBraceToken.isMissing()) {
            moduleElements = this.parseSyntaxList(4 /* ModuleDeclaration_ModuleElements */ );
        }
        var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
        return new ModuleDeclarationSyntax(exportKeyword, declareKeyword, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken);
    };
    Parser.prototype.isInterfaceDeclaration = function () {
        if(this.currentToken().keywordKind() === 45 /* ExportKeyword */  && this.peekTokenN(1).keywordKind() === 50 /* InterfaceKeyword */ ) {
            return true;
        }
        return this.currentToken().keywordKind() === 50 /* InterfaceKeyword */  && this.isIdentifier(this.peekTokenN(1));
    };
    Parser.prototype.parseInterfaceDeclaration = function () {
        Debug.assert(this.currentToken().keywordKind() === 45 /* ExportKeyword */  || this.currentToken().keywordKind() === 50 /* InterfaceKeyword */ );
        var exportKeyword = this.tryEatKeyword(45 /* ExportKeyword */ );
        var interfaceKeyword = this.eatKeyword(50 /* InterfaceKeyword */ );
        var identifier = this.eatIdentifierToken();
        var extendsClause = null;
        if(this.isExtendsClause()) {
            extendsClause = this.parseExtendsClause();
        }
        var objectType = this.parseObjectType();
        return new InterfaceDeclarationSyntax(exportKeyword, interfaceKeyword, identifier, extendsClause, objectType);
    };
    Parser.prototype.parseObjectType = function () {
        var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
        var typeMembers = SeparatedSyntaxList.empty;
        if(!openBraceToken.isMissing()) {
            typeMembers = this.parseSeparatedSyntaxList(256 /* ObjectType_TypeMembers */ );
        }
        var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
        return new ObjectTypeSyntax(openBraceToken, typeMembers, closeBraceToken);
    };
    Parser.prototype.isTypeMember = function () {
        return this.isCallSignature() || this.isConstructSignature() || this.isIndexSignature() || this.isFunctionSignature() || this.isPropertySignature();
    };
    Parser.prototype.parseTypeMember = function () {
        if(this.isCallSignature()) {
            return this.parseCallSignature();
        } else {
            if(this.isConstructSignature()) {
                return this.parseConstructSignature();
            } else {
                if(this.isIndexSignature()) {
                    return this.parseIndexSignature();
                } else {
                    if(this.isFunctionSignature()) {
                        return this.parseFunctionSignature();
                    } else {
                        if(this.isPropertySignature()) {
                            return this.parsePropertySignature();
                        } else {
                            throw Errors.invalidOperation();
                        }
                    }
                }
            }
        }
    };
    Parser.prototype.parseConstructSignature = function () {
        Debug.assert(this.isConstructSignature());
        var newKeyword = this.eatKeyword(29 /* NewKeyword */ );
        var parameterList = this.parseParameterList();
        var typeAnnotation = this.parseOptionalTypeAnnotation();
        return new ConstructSignatureSyntax(newKeyword, parameterList, typeAnnotation);
    };
    Parser.prototype.parseIndexSignature = function () {
        Debug.assert(this.isIndexSignature());
        var openBracketToken = this.eatToken(71 /* OpenBracketToken */ );
        var parameter = this.parseParameter();
        var closeBracketToken = this.eatToken(72 /* CloseBracketToken */ );
        var typeAnnotation = this.parseOptionalTypeAnnotation();
        return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, typeAnnotation);
    };
    Parser.prototype.parseFunctionSignature = function () {
        var identifier = this.eatIdentifierToken();
        var questionToken = this.tryEatToken(102 /* QuestionToken */ );
        var parameterList = this.parseParameterList();
        var typeAnnotation = this.parseOptionalTypeAnnotation();
        return new FunctionSignatureSyntax(identifier, questionToken, parameterList, typeAnnotation);
    };
    Parser.prototype.parsePropertySignature = function () {
        Debug.assert(this.isPropertySignature());
        var identifier = this.eatIdentifierToken();
        var questionToken = this.tryEatToken(102 /* QuestionToken */ );
        var typeAnnotation = this.parseOptionalTypeAnnotation();
        return new PropertySignatureSyntax(identifier, questionToken, typeAnnotation);
    };
    Parser.prototype.isCallSignature = function () {
        return this.currentToken().tokenKind === 69 /* OpenParenToken */ ;
    };
    Parser.prototype.isConstructSignature = function () {
        return this.currentToken().keywordKind() === 29 /* NewKeyword */ ;
    };
    Parser.prototype.isIndexSignature = function () {
        return this.currentToken().tokenKind === 71 /* OpenBracketToken */ ;
    };
    Parser.prototype.isFunctionSignature = function () {
        if(this.isIdentifier(this.currentToken())) {
            if(this.peekTokenN(1).tokenKind === 69 /* OpenParenToken */ ) {
                return true;
            }
            if(this.peekTokenN(1).tokenKind === 102 /* QuestionToken */  && this.peekTokenN(2).tokenKind === 69 /* OpenParenToken */ ) {
                return true;
            }
        }
        return false;
    };
    Parser.prototype.isPropertySignature = function () {
        return this.isIdentifier(this.currentToken());
    };
    Parser.prototype.isExtendsClause = function () {
        return this.currentToken().keywordKind() === 46 /* ExtendsKeyword */ ;
    };
    Parser.prototype.parseExtendsClause = function () {
        Debug.assert(this.isExtendsClause());
        var extendsKeyword = this.eatKeyword(46 /* ExtendsKeyword */ );
        var typeNames = this.parseSeparatedSyntaxList(512 /* ExtendsOrImplementsClause_TypeNameList */ );
        return new ExtendsClauseSyntax(extendsKeyword, typeNames);
    };
    Parser.prototype.isImplementsClause = function () {
        return this.currentToken().keywordKind() === 49 /* ImplementsKeyword */ ;
    };
    Parser.prototype.parseImplementsClause = function () {
        Debug.assert(this.isImplementsClause());
        var implementsKeyword = this.eatKeyword(49 /* ImplementsKeyword */ );
        var typeNames = this.parseSeparatedSyntaxList(512 /* ExtendsOrImplementsClause_TypeNameList */ );
        return new ImplementsClauseSyntax(implementsKeyword, typeNames);
    };
    Parser.prototype.isStatement = function (allowFunctionDeclaration) {
        switch(this.currentToken().keywordKind()) {
            case 55 /* PublicKeyword */ :
            case 53 /* PrivateKeyword */ :
            case 56 /* StaticKeyword */ : {
                if(this.isClassElement()) {
                    return false;
                }

            }
        }
        return this.isVariableStatement() || this.isLabeledStatement() || (allowFunctionDeclaration && this.isFunctionDeclaration()) || this.isIfStatement() || this.isBlock() || this.isExpressionStatement() || this.isReturnStatement() || this.isSwitchStatement() || this.isThrowStatement() || this.isBreakStatement() || this.isContinueStatement() || this.isForOrForInStatement() || this.isEmptyStatement() || this.isWhileStatement() || this.isWithStatement() || this.isDoStatement() || this.isTryStatement() || this.isDebuggerStatement();
    };
    Parser.prototype.parseStatement = function (allowFunctionDeclaration) {
        if(this.isVariableStatement()) {
            return this.parseVariableStatement();
        } else {
            if(this.isLabeledStatement()) {
                return this.parseLabeledStatement();
            } else {
                if(allowFunctionDeclaration && this.isFunctionDeclaration()) {
                    return this.parseFunctionDeclaration();
                } else {
                    if(this.isIfStatement()) {
                        return this.parseIfStatement();
                    } else {
                        if(this.isBlock()) {
                            return this.parseBlock();
                        } else {
                            if(this.isReturnStatement()) {
                                return this.parseReturnStatement();
                            } else {
                                if(this.isSwitchStatement()) {
                                    return this.parseSwitchStatement();
                                } else {
                                    if(this.isThrowStatement()) {
                                        return this.parseThrowStatement();
                                    } else {
                                        if(this.isBreakStatement()) {
                                            return this.parseBreakStatement();
                                        } else {
                                            if(this.isContinueStatement()) {
                                                return this.parseContinueStatement();
                                            } else {
                                                if(this.isForOrForInStatement()) {
                                                    return this.parseForOrForInStatement();
                                                } else {
                                                    if(this.isEmptyStatement()) {
                                                        return this.parseEmptyStatement();
                                                    } else {
                                                        if(this.isWhileStatement()) {
                                                            return this.parseWhileStatement();
                                                        } else {
                                                            if(this.isWithStatement()) {
                                                                return this.parseWithStatement();
                                                            } else {
                                                                if(this.isDoStatement()) {
                                                                    return this.parseDoStatement();
                                                                } else {
                                                                    if(this.isTryStatement()) {
                                                                        return this.parseTryStatement();
                                                                    } else {
                                                                        if(this.isDebuggerStatement()) {
                                                                            return this.parseDebuggerStatement();
                                                                        } else {
                                                                            return this.parseExpressionStatement();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    Parser.prototype.isDebuggerStatement = function () {
        return this.currentToken().keywordKind() === 17 /* DebuggerKeyword */ ;
    };
    Parser.prototype.parseDebuggerStatement = function () {
        Debug.assert(this.isDebuggerStatement());
        var debuggerKeyword = this.eatKeyword(17 /* DebuggerKeyword */ );
        var semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
        return new DebuggerStatementSyntax(debuggerKeyword, semicolonToken);
    };
    Parser.prototype.isDoStatement = function () {
        return this.currentToken().keywordKind() === 20 /* DoKeyword */ ;
    };
    Parser.prototype.parseDoStatement = function () {
        Debug.assert(this.isDoStatement());
        var doKeyword = this.eatKeyword(20 /* DoKeyword */ );
        var statement = this.parseStatement(false);
        var whileKeyword = this.eatKeyword(40 /* WhileKeyword */ );
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var condition = this.parseExpression(true);
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        var semicolonToken = this.eatExplicitOrAutomaticSemicolon(true);
        return new DoStatementSyntax(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken);
    };
    Parser.prototype.isLabeledStatement = function () {
        return this.isIdentifier(this.currentToken()) && this.peekTokenN(1).tokenKind === 103 /* ColonToken */ ;
    };
    Parser.prototype.parseLabeledStatement = function () {
        Debug.assert(this.isLabeledStatement());
        var identifier = this.eatIdentifierToken();
        var colonToken = this.eatToken(103 /* ColonToken */ );
        var statement = this.parseStatement(false);
        return new LabeledStatement(identifier, colonToken, statement);
    };
    Parser.prototype.isTryStatement = function () {
        return this.currentToken().keywordKind() === 36 /* TryKeyword */ ;
    };
    Parser.prototype.parseTryStatement = function () {
        Debug.assert(this.isTryStatement());
        var tryKeyword = this.eatKeyword(36 /* TryKeyword */ );
        var block = this.parseBlock();
        var catchClause = null;
        if(this.isCatchClause()) {
            catchClause = this.parseCatchClause();
        }
        var finallyClause = null;
        if(this.isFinallyClause()) {
            finallyClause = this.parseFinallyClause();
        }
        return new TryStatementSyntax(tryKeyword, block, catchClause, finallyClause);
    };
    Parser.prototype.isCatchClause = function () {
        return this.currentToken().keywordKind() === 15 /* CatchKeyword */ ;
    };
    Parser.prototype.parseCatchClause = function () {
        Debug.assert(this.isCatchClause());
        var catchKeyword = this.eatKeyword(15 /* CatchKeyword */ );
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var identifier = this.eatIdentifierToken();
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        var block = this.parseBlock();
        return new CatchClauseSyntax(catchKeyword, openParenToken, identifier, closeParenToken, block);
    };
    Parser.prototype.isFinallyClause = function () {
        return this.currentToken().keywordKind() === 23 /* FinallyKeyword */ ;
    };
    Parser.prototype.parseFinallyClause = function () {
        Debug.assert(this.isFinallyClause());
        var finallyKeyword = this.eatKeyword(23 /* FinallyKeyword */ );
        var block = this.parseBlock();
        return new FinallyClauseSyntax(finallyKeyword, block);
    };
    Parser.prototype.isWithStatement = function () {
        return this.currentToken().keywordKind() === 41 /* WithKeyword */ ;
    };
    Parser.prototype.parseWithStatement = function () {
        Debug.assert(this.isWithStatement());
        var withKeyword = this.eatKeyword(41 /* WithKeyword */ );
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var condition = this.parseExpression(true);
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        var statement = this.parseStatement(false);
        return new WithStatementSyntax(withKeyword, openParenToken, condition, closeParenToken, statement);
    };
    Parser.prototype.isWhileStatement = function () {
        return this.currentToken().keywordKind() === 40 /* WhileKeyword */ ;
    };
    Parser.prototype.parseWhileStatement = function () {
        Debug.assert(this.isWhileStatement());
        var whileKeyword = this.eatKeyword(40 /* WhileKeyword */ );
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var condition = this.parseExpression(true);
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        var statement = this.parseStatement(false);
        return new WhileStatementSyntax(whileKeyword, openParenToken, condition, closeParenToken, statement);
    };
    Parser.prototype.isEmptyStatement = function () {
        return this.currentToken().tokenKind === 75 /* SemicolonToken */ ;
    };
    Parser.prototype.parseEmptyStatement = function () {
        Debug.assert(this.isEmptyStatement());
        var semicolonToken = this.eatToken(75 /* SemicolonToken */ );
        return new EmptyStatementSyntax(semicolonToken);
    };
    Parser.prototype.isForOrForInStatement = function () {
        return this.currentToken().keywordKind() === 24 /* ForKeyword */ ;
    };
    Parser.prototype.parseForOrForInStatement = function () {
        Debug.assert(this.isForOrForInStatement());
        var forKeyword = this.eatKeyword(24 /* ForKeyword */ );
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var currentToken = this.currentToken();
        if(currentToken.keywordKind() === 38 /* VarKeyword */ ) {
            return this.parseForOrForInStatementWithVariableDeclaration(forKeyword, openParenToken);
        } else {
            if(currentToken.tokenKind === 75 /* SemicolonToken */ ) {
                return this.parseForStatement(forKeyword, openParenToken);
            } else {
                return this.parseForOrForInStatementWithInitializer(forKeyword, openParenToken);
            }
        }
    };
    Parser.prototype.parseForOrForInStatementWithVariableDeclaration = function (forKeyword, openParenToken) {
        Debug.assert(forKeyword.keywordKind() === 24 /* ForKeyword */  && openParenToken.tokenKind === 69 /* OpenParenToken */ );
        Debug.assert(this.currentToken().keywordKind() === 38 /* VarKeyword */ );
        var variableDeclaration = this.parseVariableDeclaration(false);
        if(this.currentToken().keywordKind() === 27 /* InKeyword */ ) {
            return this.parseForInStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, variableDeclaration, null);
        }
        return this.parseForStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, variableDeclaration, null);
    };
    Parser.prototype.parseForInStatementWithVariableDeclarationOrInitializer = function (forKeyword, openParenToken, variableDeclaration, initializer) {
        Debug.assert(this.currentToken().keywordKind() === 27 /* InKeyword */ );
        var inKeyword = this.eatKeyword(27 /* InKeyword */ );
        var expression = this.parseExpression(true);
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        var statement = this.parseStatement(false);
        return new ForInStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, inKeyword, expression, closeParenToken, statement);
    };
    Parser.prototype.parseForOrForInStatementWithInitializer = function (forKeyword, openParenToken) {
        Debug.assert(forKeyword.keywordKind() === 24 /* ForKeyword */  && openParenToken.tokenKind === 69 /* OpenParenToken */ );
        var initializer = this.parseExpression(false);
        if(this.currentToken().keywordKind() === 27 /* InKeyword */ ) {
            return this.parseForInStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, null, initializer);
        } else {
            return this.parseForStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, null, initializer);
        }
    };
    Parser.prototype.parseForStatement = function (forKeyword, openParenToken) {
        Debug.assert(forKeyword.keywordKind() === 24 /* ForKeyword */  && openParenToken.tokenKind === 69 /* OpenParenToken */ );
        var initializer = null;
        if(this.currentToken().tokenKind !== 75 /* SemicolonToken */  && this.currentToken().tokenKind !== 70 /* CloseParenToken */  && this.currentToken().tokenKind !== 118 /* EndOfFileToken */ ) {
            initializer = this.parseExpression(false);
        }
        return this.parseForStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, null, initializer);
    };
    Parser.prototype.parseForStatementWithVariableDeclarationOrInitializer = function (forKeyword, openParenToken, variableDeclaration, initializer) {
        var firstSemicolonToken = this.eatToken(75 /* SemicolonToken */ );
        var condition = null;
        if(this.currentToken().tokenKind !== 75 /* SemicolonToken */  && this.currentToken().tokenKind !== 70 /* CloseParenToken */  && this.currentToken().tokenKind !== 118 /* EndOfFileToken */ ) {
            condition = this.parseExpression(true);
        }
        var secondSemicolonToken = this.eatToken(75 /* SemicolonToken */ );
        var incrementor = null;
        if(this.currentToken().tokenKind !== 70 /* CloseParenToken */  && this.currentToken().tokenKind !== 118 /* EndOfFileToken */ ) {
            incrementor = this.parseExpression(true);
        }
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        var statement = this.parseStatement(false);
        return new ForStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement);
    };
    Parser.prototype.isBreakStatement = function () {
        return this.currentToken().keywordKind() === 13 /* BreakKeyword */ ;
    };
    Parser.prototype.parseBreakStatement = function () {
        Debug.assert(this.isBreakStatement());
        var breakKeyword = this.eatKeyword(13 /* BreakKeyword */ );
        var identifier = null;
        if(!this.canEatExplicitOrAutomaticSemicolon(false)) {
            if(this.isIdentifier(this.currentToken())) {
                identifier = this.eatIdentifierToken();
            }
        }
        var semicolon = this.eatExplicitOrAutomaticSemicolon(false);
        return new BreakStatementSyntax(breakKeyword, identifier, semicolon);
    };
    Parser.prototype.isContinueStatement = function () {
        return this.currentToken().keywordKind() === 16 /* ContinueKeyword */ ;
    };
    Parser.prototype.parseContinueStatement = function () {
        Debug.assert(this.isContinueStatement());
        var continueKeyword = this.eatKeyword(16 /* ContinueKeyword */ );
        var identifier = null;
        if(!this.canEatExplicitOrAutomaticSemicolon(false)) {
            if(this.isIdentifier(this.currentToken())) {
                identifier = this.eatIdentifierToken();
            }
        }
        var semicolon = this.eatExplicitOrAutomaticSemicolon(false);
        return new ContinueStatementSyntax(continueKeyword, identifier, semicolon);
    };
    Parser.prototype.isSwitchStatement = function () {
        return this.currentToken().keywordKind() === 32 /* SwitchKeyword */ ;
    };
    Parser.prototype.parseSwitchStatement = function () {
        Debug.assert(this.isSwitchStatement());
        var switchKeyword = this.eatKeyword(32 /* SwitchKeyword */ );
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var expression = this.parseExpression(true);
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
        var switchClauses = SyntaxList.empty;
        if(!openBraceToken.isMissing()) {
            switchClauses = this.parseSyntaxList(8 /* SwitchStatement_SwitchClauses */ );
        }
        var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
        return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, switchClauses, closeBraceToken);
    };
    Parser.prototype.isCaseSwitchClause = function () {
        return this.currentToken().keywordKind() === 14 /* CaseKeyword */ ;
    };
    Parser.prototype.isDefaultSwitchClause = function () {
        return this.currentToken().keywordKind() === 18 /* DefaultKeyword */ ;
    };
    Parser.prototype.isSwitchClause = function () {
        return this.isCaseSwitchClause() || this.isDefaultSwitchClause();
    };
    Parser.prototype.parseSwitchClause = function () {
        Debug.assert(this.isSwitchClause());
        if(this.isCaseSwitchClause()) {
            return this.parseCaseSwitchClause();
        } else {
            if(this.isDefaultSwitchClause()) {
                return this.parseDefaultSwitchClause();
            } else {
                throw Errors.invalidOperation();
            }
        }
    };
    Parser.prototype.parseCaseSwitchClause = function () {
        Debug.assert(this.isCaseSwitchClause());
        var caseKeyword = this.eatKeyword(14 /* CaseKeyword */ );
        var expression = this.parseExpression(true);
        var colonToken = this.eatToken(103 /* ColonToken */ );
        var statements = this.parseSyntaxList(16 /* SwitchClause_Statements */ );
        return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, statements);
    };
    Parser.prototype.parseDefaultSwitchClause = function () {
        Debug.assert(this.isDefaultSwitchClause());
        var defaultKeyword = this.eatKeyword(18 /* DefaultKeyword */ );
        var colonToken = this.eatToken(103 /* ColonToken */ );
        var statements = this.parseSyntaxList(16 /* SwitchClause_Statements */ );
        return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, statements);
    };
    Parser.prototype.isThrowStatement = function () {
        return this.currentToken().keywordKind() === 34 /* ThrowKeyword */ ;
    };
    Parser.prototype.parseThrowStatement = function () {
        Debug.assert(this.isThrowStatement());
        var throwKeyword = this.eatKeyword(34 /* ThrowKeyword */ );
        var expression = null;
        if(this.canEatExplicitOrAutomaticSemicolon(false)) {
            var token = this.createMissingToken(9 /* IdentifierNameToken */ , 0 /* None */ , null);
            expression = new IdentifierNameSyntax(token);
        } else {
            expression = this.parseExpression(true);
        }
        var semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
        return new ThrowStatementSyntax(throwKeyword, expression, semicolonToken);
    };
    Parser.prototype.isReturnStatement = function () {
        return this.currentToken().keywordKind() === 31 /* ReturnKeyword */ ;
    };
    Parser.prototype.parseReturnStatement = function () {
        Debug.assert(this.isReturnStatement());
        var returnKeyword = this.eatKeyword(31 /* ReturnKeyword */ );
        var expression = null;
        if(!this.canEatExplicitOrAutomaticSemicolon(false)) {
            expression = this.parseExpression(true);
        }
        var semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
        return new ReturnStatementSyntax(returnKeyword, expression, semicolonToken);
    };
    Parser.prototype.isExpressionStatement = function () {
        var currentToken = this.currentToken();
        var kind = currentToken.tokenKind;
        if(kind === 67 /* OpenBraceToken */ ) {
            return false;
        }
        var keywordKind = currentToken.keywordKind();
        if(keywordKind === 25 /* FunctionKeyword */ ) {
            return false;
        }
        return this.isExpression();
    };
    Parser.prototype.isAssignmentOrOmittedExpression = function () {
        if(this.currentToken().tokenKind === 76 /* CommaToken */ ) {
            return true;
        }
        return this.isExpression();
    };
    Parser.prototype.parseAssignmentOrOmittedExpression = function () {
        Debug.assert(this.isAssignmentOrOmittedExpression());
        if(this.currentToken().tokenKind === 76 /* CommaToken */ ) {
            return new OmittedExpressionSyntax();
        }
        return this.parseAssignmentExpression(true);
    };
    Parser.prototype.isExpression = function () {
        var currentToken = this.currentToken();
        var kind = currentToken.tokenKind;
        switch(kind) {
            case 11 /* NumericLiteral */ :
            case 12 /* StringLiteral */ :
            case 10 /* RegularExpressionLiteral */ : {
                return true;

            }
            case 71 /* OpenBracketToken */ :
            case 69 /* OpenParenToken */ : {
                return true;

            }
            case 77 /* LessThanToken */ : {
                return true;

            }
            case 90 /* PlusPlusToken */ :
            case 91 /* MinusMinusToken */ :
            case 86 /* PlusToken */ :
            case 87 /* MinusToken */ :
            case 99 /* TildeToken */ :
            case 98 /* ExclamationToken */ : {
                return true;

            }
            case 67 /* OpenBraceToken */ : {
                return true;

            }
            case 82 /* EqualsGreaterThanToken */ : {
                return true;

            }
            case 115 /* SlashToken */ :
            case 116 /* SlashEqualsToken */ : {
                return true;

            }
        }
        var keywordKind = currentToken.keywordKind();
        switch(keywordKind) {
            case 48 /* SuperKeyword */ :
            case 33 /* ThisKeyword */ :
            case 35 /* TrueKeyword */ :
            case 22 /* FalseKeyword */ :
            case 30 /* NullKeyword */ : {
                return true;

            }
            case 29 /* NewKeyword */ : {
                return true;

            }
            case 19 /* DeleteKeyword */ :
            case 39 /* VoidKeyword */ :
            case 37 /* TypeOfKeyword */ : {
                return true;

            }
            case 25 /* FunctionKeyword */ : {
                return true;

            }
        }
        if(this.isIdentifier(this.currentToken())) {
            return true;
        }
        return false;
    };
    Parser.prototype.parseExpressionStatement = function () {
        var expression = this.parseExpression(true);
        var semicolon = this.eatExplicitOrAutomaticSemicolon(false);
        return new ExpressionStatementSyntax(expression, semicolon);
    };
    Parser.prototype.isIfStatement = function () {
        return this.currentToken().keywordKind() === 26 /* IfKeyword */ ;
    };
    Parser.prototype.parseIfStatement = function () {
        Debug.assert(this.isIfStatement());
        var ifKeyword = this.eatKeyword(26 /* IfKeyword */ );
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var condition = this.parseExpression(true);
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        var statement = this.parseStatement(false);
        var elseClause = null;
        if(this.isElseClause()) {
            elseClause = this.parseElseClause();
        }
        return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause);
    };
    Parser.prototype.isElseClause = function () {
        return this.currentToken().keywordKind() === 21 /* ElseKeyword */ ;
    };
    Parser.prototype.parseElseClause = function () {
        Debug.assert(this.isElseClause());
        var elseKeyword = this.eatKeyword(21 /* ElseKeyword */ );
        var statement = this.parseStatement(false);
        return new ElseClauseSyntax(elseKeyword, statement);
    };
    Parser.prototype.isVariableStatement = function () {
        var token0 = this.currentToken();
        if(token0.keywordKind() === 38 /* VarKeyword */ ) {
            return true;
        }
        var token1 = this.peekTokenN(1);
        if(token0.keywordKind() === 45 /* ExportKeyword */  && token1.keywordKind() === 38 /* VarKeyword */ ) {
            return true;
        }
        return token0.keywordKind() === 61 /* DeclareKeyword */  && token1.keywordKind() === 38 /* VarKeyword */ ;
    };
    Parser.prototype.parseVariableStatement = function () {
        Debug.assert(this.isVariableStatement());
        var exportKeyword = this.tryEatKeyword(45 /* ExportKeyword */ );
        var declareKeyword = this.tryEatKeyword(61 /* DeclareKeyword */ );
        var variableDeclaration = this.parseVariableDeclaration(true);
        var semicolonToken = this.eatExplicitOrAutomaticSemicolon(false);
        return new VariableStatementSyntax(exportKeyword, declareKeyword, variableDeclaration, semicolonToken);
    };
    Parser.prototype.parseVariableDeclaration = function (allowIn) {
        Debug.assert(this.currentToken().keywordKind() === 38 /* VarKeyword */ );
        var varKeyword = this.eatKeyword(38 /* VarKeyword */ );
        var listParsingState = allowIn ? 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */  : 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ ;
        var variableDeclarators = this.parseSeparatedSyntaxList(listParsingState);
        return new VariableDeclarationSyntax(varKeyword, variableDeclarators);
    };
    Parser.prototype.isVariableDeclarator = function () {
        return this.isIdentifier(this.currentToken());
    };
    Parser.prototype.parseVariableDeclarator = function (allowIn) {
        var identifier = this.eatIdentifierToken();
        var equalsValueClause = null;
        var typeAnnotation = null;
        if(!identifier.isMissing()) {
            typeAnnotation = this.parseOptionalTypeAnnotation();
            if(this.isEqualsValueClause()) {
                equalsValueClause = this.parseEqualsValuesClause(allowIn);
            }
        }
        return new VariableDeclaratorSyntax(identifier, typeAnnotation, equalsValueClause);
    };
    Parser.prototype.isEqualsValueClause = function () {
        return this.currentToken().tokenKind === 104 /* EqualsToken */ ;
    };
    Parser.prototype.parseEqualsValuesClause = function (allowIn) {
        Debug.assert(this.isEqualsValueClause());
        var equalsToken = this.eatToken(104 /* EqualsToken */ );
        var value = this.parseAssignmentExpression(allowIn);
        return new EqualsValueClauseSyntax(equalsToken, value);
    };
    Parser.prototype.parseExpression = function (allowIn) {
        return this.parseSubExpression(0, allowIn);
    };
    Parser.prototype.parseAssignmentExpression = function (allowIn) {
        return this.parseSubExpression(2 /* AssignmentExpressionPrecedence */ , allowIn);
    };
    Parser.prototype.parseUnaryExpression = function () {
        var currentTokenKind = this.currentToken().tokenKind;
        if(SyntaxFacts.isPrefixUnaryExpressionOperatorToken(currentTokenKind)) {
            var operatorKind = SyntaxFacts.getPrefixUnaryExpression(currentTokenKind);
            var operatorToken = this.eatAnyToken();
            var operand = this.parseUnaryExpression();
            return new PrefixUnaryExpressionSyntax(operatorKind, operatorToken, operand);
        } else {
            return this.parseTerm(true, false);
        }
    };
    Parser.prototype.parseSubExpression = function (precedence, allowIn) {
        var leftOperand = this.parseUnaryExpression();
        leftOperand = this.parseBinaryOrConditionalExpressions(precedence, allowIn, leftOperand);
        return leftOperand;
    };
    Parser.prototype.parseBinaryOrConditionalExpressions = function (precedence, allowIn, leftOperand) {
        while(true) {
            var currentTokenKind = this.currentToken().tokenKind;
            var currentTokenKeywordKind = this.currentToken().keywordKind();
            if(currentTokenKeywordKind === 28 /* InstanceOfKeyword */  || currentTokenKeywordKind === 27 /* InKeyword */ ) {
                currentTokenKind = currentTokenKeywordKind;
            }
            if(SyntaxFacts.isBinaryExpressionOperatorToken(currentTokenKind)) {
                if(currentTokenKind === 27 /* InKeyword */  && !allowIn) {
                    break;
                }
                var binaryExpressionKind = SyntaxFacts.getBinaryExpressionFromOperatorToken(currentTokenKind);
                var newPrecedence = Parser.getPrecedence(binaryExpressionKind);
                Debug.assert(newPrecedence > 0);
                if(newPrecedence < precedence) {
                    break;
                }
                if(newPrecedence === precedence && !this.isRightAssociative(binaryExpressionKind)) {
                    break;
                }
                var operatorToken = this.eatAnyToken();
                leftOperand = new BinaryExpressionSyntax(binaryExpressionKind, leftOperand, operatorToken, this.parseSubExpression(newPrecedence, allowIn));
                continue;
            }
            if(currentTokenKind === 102 /* QuestionToken */  && precedence <= 3 /* ConditionalExpressionPrecedence */ ) {
                var questionToken = this.eatToken(102 /* QuestionToken */ );
                var whenTrueExpression = this.parseAssignmentExpression(allowIn);
                var colon = this.eatToken(103 /* ColonToken */ );
                var whenFalseExpression = this.parseAssignmentExpression(allowIn);
                leftOperand = new ConditionalExpressionSyntax(leftOperand, questionToken, whenTrueExpression, colon, whenFalseExpression);
                continue;
            }
            break;
        }
        return leftOperand;
    };
    Parser.prototype.isRightAssociative = function (expressionKind) {
        switch(expressionKind) {
            case 171 /* AssignmentExpression */ :
            case 172 /* AddAssignmentExpression */ :
            case 173 /* SubtractAssignmentExpression */ :
            case 174 /* MultiplyAssignmentExpression */ :
            case 175 /* DivideAssignmentExpression */ :
            case 176 /* ModuloAssignmentExpression */ :
            case 177 /* AndAssignmentExpression */ :
            case 178 /* ExclusiveOrAssignmentExpression */ :
            case 179 /* OrAssignmentExpression */ :
            case 180 /* LeftShiftAssignmentExpression */ :
            case 181 /* SignedRightShiftAssignmentExpression */ :
            case 182 /* UnsignedRightShiftAssignmentExpression */ : {
                return true;

            }
            default: {
                return false;

            }
        }
    };
    Parser.prototype.parseTerm = function (allowInvocation, insideObjectCreation) {
        var term = this.parseTermWorker(insideObjectCreation);
        if(term.isMissing()) {
            return term;
        }
        return this.parsePostFixExpression(term, allowInvocation);
    };
    Parser.prototype.parsePostFixExpression = function (expression, allowInvocation) {
        Debug.assert(expression !== null);
        while(true) {
            var currentTokenKind = this.currentToken().tokenKind;
            switch(currentTokenKind) {
                case 69 /* OpenParenToken */ : {
                    if(!allowInvocation) {
                        return expression;
                    }
                    expression = new InvocationExpressionSyntax(expression, this.parseArgumentList());
                    break;

                }
                case 71 /* OpenBracketToken */ : {
                    expression = this.parseElementAccessExpression(expression);
                    break;

                }
                case 90 /* PlusPlusToken */ :
                case 91 /* MinusMinusToken */ : {
                    if(this.previousToken !== null && this.previousToken.hasTrailingNewLineTrivia()) {
                        return expression;
                    }
                    expression = new PostfixUnaryExpressionSyntax(SyntaxFacts.getPostfixUnaryExpressionFromOperatorToken(currentTokenKind), expression, this.eatAnyToken());
                    break;

                }
                case 73 /* DotToken */ : {
                    expression = new MemberAccessExpressionSyntax(expression, this.eatToken(73 /* DotToken */ ), this.parseIdentifierName());
                    break;

                }
                default: {
                    return expression;

                }
            }
        }
    };
    Parser.prototype.isArgumentList = function () {
        return this.currentToken().tokenKind === 69 /* OpenParenToken */ ;
    };
    Parser.prototype.parseArgumentList = function () {
        Debug.assert(this.isArgumentList());
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var arguments = this.parseSeparatedSyntaxList(4096 /* ArgumentList_AssignmentExpressions */ );
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        return new ArgumentListSyntax(openParenToken, arguments, closeParenToken);
    };
    Parser.prototype.parseElementAccessExpression = function (expression) {
        Debug.assert(this.currentToken().tokenKind === 71 /* OpenBracketToken */ );
        var openBracketToken = this.eatToken(71 /* OpenBracketToken */ );
        var argumentExpression = this.parseExpression(true);
        var closeBracketToken = this.eatToken(72 /* CloseBracketToken */ );
        return new ElementAccessExpressionSyntax(expression, openBracketToken, argumentExpression, closeBracketToken);
    };
    Parser.prototype.parseTermWorker = function (insideObjectCreation) {
        var currentToken = this.currentToken();
        if(insideObjectCreation) {
            if(this.isType(false, false)) {
                return this.parseType(true);
            }
        }
        if(currentToken.tokenKind === 82 /* EqualsGreaterThanToken */ ) {
            return this.parseSimpleArrowFunctionExpression();
        }
        if(this.isIdentifier(currentToken)) {
            if(this.isSimpleArrowFunctionExpression()) {
                return this.parseSimpleArrowFunctionExpression();
            } else {
                var identifier = this.eatIdentifierToken();
                return new IdentifierNameSyntax(identifier);
            }
        }
        var currentTokenKind = currentToken.tokenKind;
        var currentTokenKeywordKind = currentToken.keywordKind();
        switch(currentTokenKeywordKind) {
            case 33 /* ThisKeyword */ : {
                return this.parseThisExpression();

            }
            case 35 /* TrueKeyword */ :
            case 22 /* FalseKeyword */ : {
                return this.parseLiteralExpression(165 /* BooleanLiteralExpression */ );

            }
            case 30 /* NullKeyword */ : {
                return this.parseLiteralExpression(166 /* NullLiteralExpression */ );

            }
            case 29 /* NewKeyword */ : {
                return this.parseObjectCreationExpression();

            }
            case 25 /* FunctionKeyword */ : {
                return this.parseFunctionExpression();

            }
            case 48 /* SuperKeyword */ : {
                return this.parseSuperExpression();

            }
            case 37 /* TypeOfKeyword */ : {
                return this.parseTypeOfExpression();

            }
            case 19 /* DeleteKeyword */ : {
                return this.parseDeleteExpression();

            }
            case 39 /* VoidKeyword */ : {
                return this.parseVoidExpression();

            }
        }
        switch(currentTokenKind) {
            case 11 /* NumericLiteral */ : {
                return this.parseLiteralExpression(167 /* NumericLiteralExpression */ );

            }
            case 10 /* RegularExpressionLiteral */ : {
                return this.parseLiteralExpression(168 /* RegularExpressionLiteralExpression */ );

            }
            case 12 /* StringLiteral */ : {
                return this.parseLiteralExpression(169 /* StringLiteralExpression */ );

            }
            case 71 /* OpenBracketToken */ : {
                return this.parseArrayLiteralExpression();

            }
            case 67 /* OpenBraceToken */ : {
                return this.parseObjectLiteralExpression();

            }
            case 69 /* OpenParenToken */ : {
                return this.parseParenthesizedOrArrowFunctionExpression();

            }
            case 77 /* LessThanToken */ : {
                return this.parseCastExpression();

            }
            case 115 /* SlashToken */ :
            case 116 /* SlashEqualsToken */ : {
                var result = this.tryReparseDivideAsRegularExpression();
                if(result !== null) {
                    return result;
                }
                break;

            }
        }
        return new IdentifierNameSyntax(this.eatIdentifierToken());
    };
    Parser.prototype.tryReparseDivideAsRegularExpression = function () {
        var currentToken = this.currentToken();
        var currentTokenKind = currentToken.tokenKind;
        Debug.assert(currentTokenKind === 115 /* SlashToken */  || currentTokenKind === 116 /* SlashEqualsToken */ );
        if(this.previousToken !== null) {
            var previousTokenKind = this.previousToken.tokenKind;
            switch(previousTokenKind) {
                case 9 /* IdentifierNameToken */ : {
                    var previousTokenKeywordKind = this.previousToken.keywordKind();
                    if(previousTokenKeywordKind === 0 /* None */  || previousTokenKeywordKind === 33 /* ThisKeyword */  || previousTokenKeywordKind === 35 /* TrueKeyword */  || previousTokenKeywordKind === 22 /* FalseKeyword */ ) {
                        return null;
                    }
                    break;

                }
                case 12 /* StringLiteral */ :
                case 11 /* NumericLiteral */ :
                case 10 /* RegularExpressionLiteral */ :
                case 90 /* PlusPlusToken */ :
                case 91 /* MinusMinusToken */ :
                case 72 /* CloseBracketToken */ :
                case 68 /* CloseBraceToken */ : {
                    return null;

                }
            }
        }
        var slashTokenFullStart = this.currentTokenFullStart;
        var tokenDiagnosticsLength = this.tokenDiagnostics.length;
        while(tokenDiagnosticsLength > 0) {
            var diagnostic = this.tokenDiagnostics[tokenDiagnosticsLength - 1];
            if(diagnostic.position() >= slashTokenFullStart) {
                tokenDiagnosticsLength--;
            } else {
                break;
            }
        }
        this.tokenDiagnostics.length = tokenDiagnosticsLength;
        this.disgardAllItemsFromCurrentIndexOnwards();
        this._currentToken = null;
        this.scanner.setAbsoluteIndex(slashTokenFullStart);
        currentToken = this.currentTokenAllowingRegularExpression();
        Debug.assert(currentToken.tokenKind === 115 /* SlashToken */  || currentToken.tokenKind === 116 /* SlashEqualsToken */  || currentToken.tokenKind === 10 /* RegularExpressionLiteral */ );
        if(currentToken.tokenKind === 115 /* SlashToken */  || currentToken.tokenKind === 116 /* SlashEqualsToken */ ) {
            return null;
        } else {
            if(currentToken.tokenKind === 10 /* RegularExpressionLiteral */ ) {
                return this.parseLiteralExpression(168 /* RegularExpressionLiteralExpression */ );
            } else {
                throw Errors.invalidOperation();
            }
        }
    };
    Parser.prototype.parseTypeOfExpression = function () {
        Debug.assert(this.currentToken().keywordKind() === 37 /* TypeOfKeyword */ );
        var typeOfKeyword = this.eatKeyword(37 /* TypeOfKeyword */ );
        var expression = this.parseUnaryExpression();
        return new TypeOfExpressionSyntax(typeOfKeyword, expression);
    };
    Parser.prototype.parseDeleteExpression = function () {
        Debug.assert(this.currentToken().keywordKind() === 19 /* DeleteKeyword */ );
        var deleteKeyword = this.eatKeyword(19 /* DeleteKeyword */ );
        var expression = this.parseUnaryExpression();
        return new DeleteExpressionSyntax(deleteKeyword, expression);
    };
    Parser.prototype.parseVoidExpression = function () {
        Debug.assert(this.currentToken().keywordKind() === 39 /* VoidKeyword */ );
        var voidKeyword = this.eatKeyword(39 /* VoidKeyword */ );
        var expression = this.parseUnaryExpression();
        return new VoidExpressionSyntax(voidKeyword, expression);
    };
    Parser.prototype.parseSuperExpression = function () {
        Debug.assert(this.currentToken().keywordKind() === 48 /* SuperKeyword */ );
        var superKeyword = this.eatKeyword(48 /* SuperKeyword */ );
        return new SuperExpressionSyntax(superKeyword);
    };
    Parser.prototype.parseFunctionExpression = function () {
        Debug.assert(this.currentToken().keywordKind() === 25 /* FunctionKeyword */ );
        var functionKeyword = this.eatKeyword(25 /* FunctionKeyword */ );
        var identifier = null;
        if(this.isIdentifier(this.currentToken())) {
            identifier = this.eatIdentifierToken();
        }
        var callSignature = this.parseCallSignature();
        var block = this.parseBlock();
        return new FunctionExpressionSyntax(functionKeyword, identifier, callSignature, block);
    };
    Parser.prototype.parseCastExpression = function () {
        Debug.assert(this.currentToken().tokenKind === 77 /* LessThanToken */ );
        var lessThanToken = this.eatToken(77 /* LessThanToken */ );
        var type = this.parseType(false);
        var greaterThanToken = this.eatToken(78 /* GreaterThanToken */ );
        var expression = this.parseUnaryExpression();
        return new CastExpressionSyntax(lessThanToken, type, greaterThanToken, expression);
    };
    Parser.prototype.parseObjectCreationExpression = function () {
        Debug.assert(this.currentToken().keywordKind() === 29 /* NewKeyword */ );
        var newKeyword = this.eatKeyword(29 /* NewKeyword */ );
        var expression = this.parseTerm(false, true);
        var argumentList = null;
        if(this.isArgumentList()) {
            argumentList = this.parseArgumentList();
        }
        return new ObjectCreationExpressionSyntax(newKeyword, expression, argumentList);
    };
    Parser.prototype.parseParenthesizedOrArrowFunctionExpression = function () {
        Debug.assert(this.currentToken().tokenKind === 69 /* OpenParenToken */ );
        var result = this.tryParseArrowFunctionExpression();
        if(result !== null) {
            return result;
        }
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var expression = this.parseExpression(true);
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        return new ParenthesizedExpressionSyntax(openParenToken, expression, closeParenToken);
    };
    Parser.prototype.tryParseArrowFunctionExpression = function () {
        Debug.assert(this.currentToken().tokenKind === 69 /* OpenParenToken */ );
        if(this.isDefinitelyArrowFunctionExpression()) {
            return this.parseParenthesizedArrowFunctionExpression(false);
        }
        if(!this.isPossiblyArrowFunctionExpression()) {
            return null;
        }
        var rewindPoint = this.getRewindPoint();
        try  {
            var arrowFunction = this.parseParenthesizedArrowFunctionExpression(true);
            if(arrowFunction === null) {
                this.rewind(rewindPoint);
            }
            return arrowFunction;
        }finally {
            this.releaseRewindPoint(rewindPoint);
        }
    };
    Parser.prototype.parseParenthesizedArrowFunctionExpression = function (requireArrow) {
        Debug.assert(this.currentToken().tokenKind === 69 /* OpenParenToken */ );
        var callSignature = this.parseCallSignature();
        if(requireArrow && this.currentToken().tokenKind !== 82 /* EqualsGreaterThanToken */ ) {
            return null;
        }
        var equalsGreaterThanToken = this.eatToken(82 /* EqualsGreaterThanToken */ );
        var body = this.parseArrowFunctionBody();
        return new ParenthesizedArrowFunctionExpressionSyntax(callSignature, equalsGreaterThanToken, body);
    };
    Parser.prototype.parseArrowFunctionBody = function () {
        if(this.isBlock()) {
            return this.parseBlock();
        } else {
            return this.parseAssignmentExpression(true);
        }
    };
    Parser.prototype.isSimpleArrowFunctionExpression = function () {
        if(this.currentToken().tokenKind === 82 /* EqualsGreaterThanToken */ ) {
            return true;
        }
        return this.isIdentifier(this.currentToken()) && this.peekTokenN(1).tokenKind === 82 /* EqualsGreaterThanToken */ ;
    };
    Parser.prototype.parseSimpleArrowFunctionExpression = function () {
        Debug.assert(this.isSimpleArrowFunctionExpression());
        var identifier = this.eatIdentifierToken();
        var equalsGreaterThanToken = this.eatToken(82 /* EqualsGreaterThanToken */ );
        var body = this.parseArrowFunctionBody();
        return new SimpleArrowFunctionExpressionSyntax(identifier, equalsGreaterThanToken, body);
    };
    Parser.prototype.isBlock = function () {
        return this.currentToken().tokenKind === 67 /* OpenBraceToken */ ;
    };
    Parser.prototype.isDefinitelyArrowFunctionExpression = function () {
        Debug.assert(this.currentToken().tokenKind === 69 /* OpenParenToken */ );
        var token1 = this.peekTokenN(1);
        if(token1.tokenKind === 70 /* CloseParenToken */ ) {
            return true;
        }
        if(token1.tokenKind === 74 /* DotDotDotToken */ ) {
            return true;
        }
        if(!this.isIdentifier(token1)) {
            return false;
        }
        var token2 = this.peekTokenN(2);
        if(token2.tokenKind === 103 /* ColonToken */ ) {
            return true;
        }
        var token3 = this.peekTokenN(3);
        if(token2.tokenKind === 102 /* QuestionToken */ ) {
            if(token3.tokenKind === 103 /* ColonToken */  || token3.tokenKind === 70 /* CloseParenToken */  || token3.tokenKind === 76 /* CommaToken */ ) {
                return true;
            }
        }
        if(token2.tokenKind === 70 /* CloseParenToken */ ) {
            if(token3.tokenKind === 82 /* EqualsGreaterThanToken */ ) {
                return true;
            }
        }
        return false;
    };
    Parser.prototype.isPossiblyArrowFunctionExpression = function () {
        Debug.assert(this.currentToken().tokenKind === 69 /* OpenParenToken */ );
        var token1 = this.peekTokenN(1);
        if(!this.isIdentifier(token1)) {
            return false;
        }
        var token2 = this.peekTokenN(2);
        if(token2.tokenKind === 104 /* EqualsToken */ ) {
            return true;
        }
        if(token2.tokenKind === 76 /* CommaToken */ ) {
            return true;
        }
        if(token2.tokenKind === 70 /* CloseParenToken */ ) {
            var token3 = this.peekTokenN(3);
            if(token3.tokenKind === 103 /* ColonToken */ ) {
                return true;
            }
        }
        return false;
    };
    Parser.prototype.parseObjectLiteralExpression = function () {
        Debug.assert(this.currentToken().tokenKind === 67 /* OpenBraceToken */ );
        var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
        var propertyAssignments = this.parseSeparatedSyntaxList(8192 /* ObjectLiteralExpression_PropertyAssignments */ );
        var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
        return new ObjectLiteralExpressionSyntax(openBraceToken, propertyAssignments, closeBraceToken);
    };
    Parser.prototype.parsePropertyAssignment = function () {
        Debug.assert(this.isPropertyAssignment(false));
        if(this.isGetAccessorPropertyAssignment()) {
            return this.parseGetAccessorPropertyAssignment();
        } else {
            if(this.isSetAccessorPropertyAssignment()) {
                return this.parseSetAccessorPropertyAssignment();
            } else {
                if(this.isSimplePropertyAssignment(false)) {
                    return this.parseSimplePropertyAssignment();
                } else {
                    throw Errors.invalidOperation();
                }
            }
        }
    };
    Parser.prototype.isPropertyAssignment = function (inErrorRecovery) {
        return this.isGetAccessorPropertyAssignment() || this.isSetAccessorPropertyAssignment() || this.isSimplePropertyAssignment(inErrorRecovery);
    };
    Parser.prototype.isGetAccessorPropertyAssignment = function () {
        return this.currentToken().keywordKind() === 62 /* GetKeyword */  && this.isPropertyName(this.peekTokenN(1), false);
    };
    Parser.prototype.parseGetAccessorPropertyAssignment = function () {
        Debug.assert(this.isGetAccessorPropertyAssignment());
        var getKeyword = this.eatKeyword(62 /* GetKeyword */ );
        var propertyName = this.eatAnyToken();
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        var block = this.parseBlock();
        return new GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, block);
    };
    Parser.prototype.isSetAccessorPropertyAssignment = function () {
        return this.currentToken().keywordKind() === 65 /* SetKeyword */  && this.isPropertyName(this.peekTokenN(1), false);
    };
    Parser.prototype.parseSetAccessorPropertyAssignment = function () {
        Debug.assert(this.isSetAccessorPropertyAssignment());
        var setKeyword = this.eatKeyword(65 /* SetKeyword */ );
        var propertyName = this.eatAnyToken();
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var parameterName = this.eatIdentifierToken();
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        var block = this.parseBlock();
        return new SetAccessorPropertyAssignmentSyntax(setKeyword, propertyName, openParenToken, parameterName, closeParenToken, block);
    };
    Parser.prototype.isSimplePropertyAssignment = function (inErrorRecovery) {
        return this.isPropertyName(this.currentToken(), inErrorRecovery);
    };
    Parser.prototype.parseSimplePropertyAssignment = function () {
        Debug.assert(this.isSimplePropertyAssignment(false));
        var propertyName = this.eatAnyToken();
        var colonToken = this.eatToken(103 /* ColonToken */ );
        var expression = this.parseAssignmentExpression(true);
        return new SimplePropertyAssignmentSyntax(propertyName, colonToken, expression);
    };
    Parser.prototype.isPropertyName = function (token, inErrorRecovery) {
        switch(token.tokenKind) {
            case 9 /* IdentifierNameToken */ : {
                if(inErrorRecovery) {
                    return !this.isKeyword(token.keywordKind());
                } else {
                    return true;
                }

            }
            case 12 /* StringLiteral */ :
            case 11 /* NumericLiteral */ : {
                return true;

            }
            default: {
                return false;

            }
        }
    };
    Parser.prototype.parseArrayLiteralExpression = function () {
        Debug.assert(this.currentToken().tokenKind === 71 /* OpenBracketToken */ );
        var openBracketToken = this.eatToken(71 /* OpenBracketToken */ );
        var expressions = this.parseSeparatedSyntaxList(16384 /* ArrayLiteralExpression_AssignmentExpressions */ );
        var closeBracketToken = this.eatToken(72 /* CloseBracketToken */ );
        return new ArrayLiteralExpressionSyntax(openBracketToken, expressions, closeBracketToken);
    };
    Parser.prototype.parseLiteralExpression = function (expressionKind) {
        var literal = this.eatAnyToken();
        return new LiteralExpressionSyntax(expressionKind, literal);
    };
    Parser.prototype.parseThisExpression = function () {
        Debug.assert(this.currentToken().keywordKind() === 33 /* ThisKeyword */ );
        var thisKeyword = this.eatKeyword(33 /* ThisKeyword */ );
        return new ThisExpressionSyntax(thisKeyword);
    };
    Parser.prototype.parseBlock = function () {
        var openBraceToken = this.eatToken(67 /* OpenBraceToken */ );
        var statements = SyntaxList.empty;
        if(!openBraceToken.isMissing()) {
            var savedIsInStrictMode = this.isInStrictMode;
            statements = this.parseSyntaxList(32 /* Block_Statements */ , Parser.updateStrictModeState);
            this.isInStrictMode = savedIsInStrictMode;
        }
        var closeBraceToken = this.eatToken(68 /* CloseBraceToken */ );
        return new BlockSyntax(openBraceToken, statements, closeBraceToken);
    };
    Parser.prototype.parseCallSignature = function () {
        var parameterList = this.parseParameterList();
        var typeAnnotation = this.parseOptionalTypeAnnotation();
        return new CallSignatureSyntax(parameterList, typeAnnotation);
    };
    Parser.prototype.parseParameterList = function () {
        var openParenToken = this.eatToken(69 /* OpenParenToken */ );
        var parameters = SeparatedSyntaxList.empty;
        if(!openParenToken.isMissing()) {
            parameters = this.parseSeparatedSyntaxList(32768 /* ParameterList_Parameters */ );
        }
        var closeParenToken = this.eatToken(70 /* CloseParenToken */ );
        return new ParameterListSyntax(openParenToken, parameters, closeParenToken);
    };
    Parser.prototype.isTypeAnnotation = function () {
        return this.currentToken().tokenKind === 103 /* ColonToken */ ;
    };
    Parser.prototype.parseOptionalTypeAnnotation = function () {
        return this.isTypeAnnotation() ? this.parseTypeAnnotation() : null;
    };
    Parser.prototype.parseTypeAnnotation = function () {
        Debug.assert(this.isTypeAnnotation());
        var colonToken = this.eatToken(103 /* ColonToken */ );
        var type = this.parseType(false);
        return new TypeAnnotationSyntax(colonToken, type);
    };
    Parser.prototype.isType = function (allowFunctionType, allowConstructorType) {
        return this.isPredefinedType() || this.isTypeLiteral(allowFunctionType, allowConstructorType) || this.isName();
    };
    Parser.prototype.parseType = function (requireCompleteArraySuffix) {
        var type = this.parseNonArrayType();
        while(this.currentToken().tokenKind === 71 /* OpenBracketToken */ ) {
            if(requireCompleteArraySuffix && this.peekTokenN(1).tokenKind !== 72 /* CloseBracketToken */ ) {
                break;
            }
            var openBracketToken = this.eatToken(71 /* OpenBracketToken */ );
            var closeBracketToken = this.eatToken(72 /* CloseBracketToken */ );
            type = new ArrayTypeSyntax(type, openBracketToken, closeBracketToken);
        }
        return type;
    };
    Parser.prototype.parseNonArrayType = function () {
        if(this.isPredefinedType()) {
            return this.parsePredefinedType();
        } else {
            if(this.isTypeLiteral(true, true)) {
                return this.parseTypeLiteral();
            } else {
                return this.parseName();
            }
        }
    };
    Parser.prototype.parseTypeLiteral = function () {
        Debug.assert(this.isTypeLiteral(true, true));
        if(this.isObjectType()) {
            return this.parseObjectType();
        } else {
            if(this.isFunctionType()) {
                return this.parseFunctionType();
            } else {
                if(this.isConstructorType()) {
                    return this.parseConstructorType();
                } else {
                    throw Errors.invalidOperation();
                }
            }
        }
    };
    Parser.prototype.parseFunctionType = function () {
        Debug.assert(this.isFunctionType());
        var parameterList = this.parseParameterList();
        var equalsGreaterThanToken = this.eatToken(82 /* EqualsGreaterThanToken */ );
        var returnType = this.parseType(false);
        return new FunctionTypeSyntax(parameterList, equalsGreaterThanToken, returnType);
    };
    Parser.prototype.parseConstructorType = function () {
        Debug.assert(this.isConstructorType());
        var newKeyword = this.eatKeyword(29 /* NewKeyword */ );
        var parameterList = this.parseParameterList();
        var equalsGreaterThanToken = this.eatToken(82 /* EqualsGreaterThanToken */ );
        var type = this.parseType(false);
        return new ConstructorTypeSyntax(newKeyword, parameterList, equalsGreaterThanToken, type);
    };
    Parser.prototype.isTypeLiteral = function (allowFunctionType, allowConstructorType) {
        if(this.isObjectType()) {
            return true;
        }
        if(allowFunctionType && this.isFunctionType()) {
            return true;
        }
        if(allowConstructorType && this.isConstructorType()) {
            return true;
        }
        return false;
    };
    Parser.prototype.isObjectType = function () {
        return this.currentToken().tokenKind === 67 /* OpenBraceToken */ ;
    };
    Parser.prototype.isFunctionType = function () {
        return this.currentToken().tokenKind === 69 /* OpenParenToken */ ;
    };
    Parser.prototype.isConstructorType = function () {
        return this.currentToken().keywordKind() === 29 /* NewKeyword */ ;
    };
    Parser.prototype.parsePredefinedType = function () {
        Debug.assert(this.isPredefinedType());
        var keyword = this.eatAnyToken();
        return new PredefinedTypeSyntax(keyword);
    };
    Parser.prototype.isPredefinedType = function () {
        switch(this.currentToken().keywordKind()) {
            case 58 /* AnyKeyword */ :
            case 64 /* NumberKeyword */ :
            case 59 /* BoolKeyword */ :
            case 66 /* StringKeyword */ :
            case 39 /* VoidKeyword */ : {
                return true;

            }
        }
        return false;
    };
    Parser.prototype.isParameter = function () {
        var token = this.currentToken();
        if(token.tokenKind === 74 /* DotDotDotToken */ ) {
            return true;
        }
        if(token.keywordKind() === 55 /* PublicKeyword */  || token.keywordKind() === 53 /* PrivateKeyword */ ) {
            return true;
        }
        return this.isIdentifier(token);
    };
    Parser.prototype.parseParameter = function () {
        var dotDotDotToken = this.tryEatToken(74 /* DotDotDotToken */ );
        var publicOrPrivateToken = null;
        if(this.currentToken().keywordKind() === 55 /* PublicKeyword */  || this.currentToken().keywordKind() === 53 /* PrivateKeyword */ ) {
            publicOrPrivateToken = this.eatAnyToken();
        }
        var identifier = this.eatIdentifierToken();
        var questionToken = this.tryEatToken(102 /* QuestionToken */ );
        var typeAnnotation = this.parseOptionalTypeAnnotation();
        var equalsValueClause = null;
        if(this.isEqualsValueClause()) {
            equalsValueClause = this.parseEqualsValuesClause(true);
        }
        return new ParameterSyntax(dotDotDotToken, publicOrPrivateToken, identifier, questionToken, typeAnnotation, equalsValueClause);
    };
    Parser.prototype.parseSyntaxList = function (currentListType, processItems) {
        if (typeof processItems === "undefined") { processItems = null; }
        var savedListParsingState = this.listParsingState;
        this.listParsingState |= currentListType;
        var result = this.parseSyntaxListWorker(currentListType, processItems);
        this.listParsingState = savedListParsingState;
        return result;
    };
    Parser.prototype.parseSeparatedSyntaxList = function (currentListType) {
        var savedListParsingState = this.listParsingState;
        this.listParsingState |= currentListType;
        var result = this.parseSeparatedSyntaxListWorker(currentListType);
        this.listParsingState = savedListParsingState;
        return result;
    };
    Parser.prototype.abortParsingListOrMoveToNextToken = function (currentListType, itemCount) {
        this.reportUnexpectedTokenDiagnostic(currentListType);
        for(var state = ParserListParsingState.LastListParsingState; state >= ParserListParsingState.FirstListParsingState; state >>= 1) {
            if((this.listParsingState & state) !== 0) {
                if(this.isExpectedListTerminator(state, itemCount) || this.isExpectedListItem(state, true)) {
                    return true;
                }
            }
        }
        var token = this.currentToken();
        this.skippedTokens.push({
            skippedToken: token,
            owningToken: this.previousToken
        });
        this.moveToNextToken();
        return false;
    };
    Parser.prototype.tryParseExpectedListItem = function (currentListType, inErrorRecovery, items, processItems) {
        if(this.isExpectedListItem(currentListType, inErrorRecovery)) {
            var item = this.parseExpectedListItem(currentListType);
            Debug.assert(item !== null);
            items = items || [];
            items.push(item);
            if(processItems !== null) {
                processItems(this, items);
            }
        }
        return items;
    };
    Parser.prototype.listIsTerminated = function (currentListType, itemCount) {
        return this.isExpectedListTerminator(currentListType, itemCount) || this.currentToken().tokenKind === 118 /* EndOfFileToken */ ;
    };
    Parser.prototype.parseSyntaxListWorker = function (currentListType, processItems) {
        var items = null;
        while(true) {
            var itemsCount = items === null ? 0 : items.length;
            if(this.listIsTerminated(currentListType, itemsCount)) {
                break;
            }
            items = this.tryParseExpectedListItem(currentListType, false, items, processItems);
            if(items !== null && items.length > itemsCount) {
                continue;
            }
            var abort = this.abortParsingListOrMoveToNextToken(currentListType, itemsCount);
            if(abort) {
                break;
            }
        }
        return SyntaxList.create(items);
    };
    Parser.prototype.parseSeparatedSyntaxListWorker = function (currentListType) {
        var items = null;
        var allowTrailingSeparator = this.allowsTrailingSeparator(currentListType);
        var allowAutomaticSemicolonInsertion = this.allowsAutomaticSemicolonInsertion(currentListType);
        var requiresAtLeastOneItem = this.requiresAtLeastOneItem(currentListType);
        var separatorKind = this.separatorKind(currentListType);
        var lastSeparator = null;
        var inErrorRecovery = false;
        while(true) {
            var itemsCount = items === null ? 0 : items.length;
            if(this.listIsTerminated(currentListType, itemsCount)) {
                if(lastSeparator !== null && !allowTrailingSeparator && !lastSeparator.isMissing()) {
                    Debug.assert(this.previousToken === lastSeparator);
                    this.addDiagnostic(new SyntaxDiagnostic(this.previousTokenStart(), lastSeparator.width(), 9 /* Trailing_separator_not_allowed */ , null));
                }
                break;
            }
            lastSeparator = null;
            items = this.tryParseExpectedListItem(currentListType, inErrorRecovery, items, null);
            inErrorRecovery = false;
            if(items !== null && items.length > itemsCount) {
                if(this.currentToken().tokenKind !== separatorKind) {
                    if(this.listIsTerminated(currentListType, items.length)) {
                        break;
                    }
                    if(allowAutomaticSemicolonInsertion && this.canEatAutomaticSemicolon(false)) {
                        lastSeparator = this.eatExplicitOrAutomaticSemicolon(false);
                        items.push(lastSeparator);
                        continue;
                    }
                }
                lastSeparator = this.eatToken(separatorKind);
                items.push(lastSeparator);
                inErrorRecovery = lastSeparator.isMissing();
                continue;
            }
            var abort = this.abortParsingListOrMoveToNextToken(currentListType, itemsCount);
            if(abort) {
                break;
            }
        }
        if(requiresAtLeastOneItem && (items === null || items.length === 0)) {
            this.reportUnexpectedTokenDiagnostic(currentListType);
        }
        return SeparatedSyntaxList.create(items);
    };
    Parser.prototype.allowsTrailingSeparator = function (currentListType) {
        switch(currentListType) {
            case 128 /* EnumDeclaration_VariableDeclarators */ :
            case 256 /* ObjectType_TypeMembers */ :
            case 8192 /* ObjectLiteralExpression_PropertyAssignments */ :
            case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                return true;

            }
            case 512 /* ExtendsOrImplementsClause_TypeNameList */ :
            case 4096 /* ArgumentList_AssignmentExpressions */ :
            case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ :
            case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ :
            case 32768 /* ParameterList_Parameters */ : {
                return false;

            }
            case 1 /* SourceUnit_ModuleElements */ :
            case 2 /* ClassDeclaration_ClassElements */ :
            case 4 /* ModuleDeclaration_ModuleElements */ :
            case 8 /* SwitchStatement_SwitchClauses */ :
            case 16 /* SwitchClause_Statements */ :
            case 32 /* Block_Statements */ :
            default: {
                throw Errors.notYetImplemented();

            }
        }
    };
    Parser.prototype.requiresAtLeastOneItem = function (currentListType) {
        switch(currentListType) {
            case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ :
            case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ :
            case 512 /* ExtendsOrImplementsClause_TypeNameList */ : {
                return true;

            }
            case 256 /* ObjectType_TypeMembers */ :
            case 128 /* EnumDeclaration_VariableDeclarators */ :
            case 4096 /* ArgumentList_AssignmentExpressions */ :
            case 8192 /* ObjectLiteralExpression_PropertyAssignments */ :
            case 32768 /* ParameterList_Parameters */ :
            case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                return false;

            }
            case 1 /* SourceUnit_ModuleElements */ :
            case 2 /* ClassDeclaration_ClassElements */ :
            case 4 /* ModuleDeclaration_ModuleElements */ :
            case 8 /* SwitchStatement_SwitchClauses */ :
            case 16 /* SwitchClause_Statements */ :
            case 32 /* Block_Statements */ :
            default: {
                throw Errors.notYetImplemented();

            }
        }
    };
    Parser.prototype.allowsAutomaticSemicolonInsertion = function (currentListType) {
        switch(currentListType) {
            case 256 /* ObjectType_TypeMembers */ : {
                return true;

            }
            case 512 /* ExtendsOrImplementsClause_TypeNameList */ :
            case 128 /* EnumDeclaration_VariableDeclarators */ :
            case 4096 /* ArgumentList_AssignmentExpressions */ :
            case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ :
            case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ :
            case 8192 /* ObjectLiteralExpression_PropertyAssignments */ :
            case 32768 /* ParameterList_Parameters */ :
            case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                return false;

            }
            case 1 /* SourceUnit_ModuleElements */ :
            case 2 /* ClassDeclaration_ClassElements */ :
            case 4 /* ModuleDeclaration_ModuleElements */ :
            case 8 /* SwitchStatement_SwitchClauses */ :
            case 16 /* SwitchClause_Statements */ :
            case 32 /* Block_Statements */ :
            default: {
                throw Errors.notYetImplemented();

            }
        }
    };
    Parser.prototype.separatorKind = function (currentListType) {
        switch(currentListType) {
            case 512 /* ExtendsOrImplementsClause_TypeNameList */ :
            case 4096 /* ArgumentList_AssignmentExpressions */ :
            case 128 /* EnumDeclaration_VariableDeclarators */ :
            case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ :
            case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ :
            case 8192 /* ObjectLiteralExpression_PropertyAssignments */ :
            case 32768 /* ParameterList_Parameters */ :
            case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                return 76 /* CommaToken */ ;

            }
            case 256 /* ObjectType_TypeMembers */ : {
                return 75 /* SemicolonToken */ ;

            }
            case 1 /* SourceUnit_ModuleElements */ :
            case 2 /* ClassDeclaration_ClassElements */ :
            case 4 /* ModuleDeclaration_ModuleElements */ :
            case 8 /* SwitchStatement_SwitchClauses */ :
            case 16 /* SwitchClause_Statements */ :
            case 32 /* Block_Statements */ :
            default: {
                throw Errors.notYetImplemented();

            }
        }
    };
    Parser.prototype.existingDiagnosticAtPosition = function (position) {
        return this.diagnostics.length > 0 && this.diagnostics[this.diagnostics.length - 1].position() === position;
    };
    Parser.prototype.reportUnexpectedTokenDiagnostic = function (listType) {
        var token = this.currentToken();
        var diagnostic = new SyntaxDiagnostic(this.currentTokenStart(), token.width(), 8 /* Unexpected_token__0_expected */ , [
            this.getExpectedListElementType(listType)
        ]);
        this.addDiagnostic(diagnostic);
    };
    Parser.prototype.addDiagnostic = function (diagnostic) {
        if(this.diagnostics.length > 0 && this.diagnostics[this.diagnostics.length - 1].position() === diagnostic.position()) {
            return;
        }
        this.diagnostics.push(diagnostic);
    };
    Parser.prototype.isExpectedListTerminator = function (currentListType, itemCount) {
        switch(currentListType) {
            case 1 /* SourceUnit_ModuleElements */ : {
                return this.isExpectedSourceUnit_ModuleElementsTerminator();

            }
            case 2 /* ClassDeclaration_ClassElements */ : {
                return this.isExpectedClassDeclaration_ClassElementsTerminator();

            }
            case 4 /* ModuleDeclaration_ModuleElements */ : {
                return this.isExpectedModuleDeclaration_ModuleElementsTerminator();

            }
            case 8 /* SwitchStatement_SwitchClauses */ : {
                return this.isExpectedSwitchStatement_SwitchClausesTerminator();

            }
            case 16 /* SwitchClause_Statements */ : {
                return this.isExpectedSwitchClause_StatementsTerminator();

            }
            case 32 /* Block_Statements */ : {
                return this.isExpectedBlock_StatementsTerminator();

            }
            case 128 /* EnumDeclaration_VariableDeclarators */ : {
                return this.isExpectedEnumDeclaration_VariableDeclaratorsTerminator();

            }
            case 256 /* ObjectType_TypeMembers */ : {
                return this.isExpectedObjectType_TypeMembersTerminator();

            }
            case 4096 /* ArgumentList_AssignmentExpressions */ : {
                return this.isExpectedArgumentList_AssignmentExpressionsTerminator();

            }
            case 512 /* ExtendsOrImplementsClause_TypeNameList */ : {
                return this.isExpectedExtendsOrImplementsClause_TypeNameListTerminator();

            }
            case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ : {
                return this.isExpectedVariableDeclaration_VariableDeclarators_AllowInTerminator(itemCount);

            }
            case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ : {
                return this.isExpectedVariableDeclaration_VariableDeclarators_DisallowInTerminator();

            }
            case 8192 /* ObjectLiteralExpression_PropertyAssignments */ : {
                return this.isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator();

            }
            case 32768 /* ParameterList_Parameters */ : {
                return this.isExpectedParameterList_ParametersTerminator();

            }
            case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                return this.isExpectedLiteralExpression_AssignmentExpressionsTerminator();

            }
            default: {
                throw Errors.invalidOperation();

            }
        }
    };
    Parser.prototype.isExpectedSourceUnit_ModuleElementsTerminator = function () {
        return this.currentToken().tokenKind === 118 /* EndOfFileToken */ ;
    };
    Parser.prototype.isExpectedEnumDeclaration_VariableDeclaratorsTerminator = function () {
        return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
    };
    Parser.prototype.isExpectedModuleDeclaration_ModuleElementsTerminator = function () {
        return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
    };
    Parser.prototype.isExpectedObjectType_TypeMembersTerminator = function () {
        return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
    };
    Parser.prototype.isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator = function () {
        return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
    };
    Parser.prototype.isExpectedLiteralExpression_AssignmentExpressionsTerminator = function () {
        return this.currentToken().tokenKind === 72 /* CloseBracketToken */ ;
    };
    Parser.prototype.isExpectedParameterList_ParametersTerminator = function () {
        var token = this.currentToken();
        if(token.tokenKind === 70 /* CloseParenToken */ ) {
            return true;
        }
        if(token.tokenKind === 67 /* OpenBraceToken */ ) {
            return true;
        }
        if(token.tokenKind === 82 /* EqualsGreaterThanToken */ ) {
            return true;
        }
        return false;
    };
    Parser.prototype.isExpectedVariableDeclaration_VariableDeclarators_DisallowInTerminator = function () {
        if(this.currentToken().tokenKind === 75 /* SemicolonToken */  || this.currentToken().tokenKind === 70 /* CloseParenToken */ ) {
            return true;
        }
        if(this.currentToken().keywordKind() === 27 /* InKeyword */ ) {
            return true;
        }
        return false;
    };
    Parser.prototype.isExpectedVariableDeclaration_VariableDeclarators_AllowInTerminator = function (itemCount) {
        if(this.previousToken.tokenKind === 76 /* CommaToken */ ) {
            return false;
        }
        if(this.currentToken().tokenKind === 82 /* EqualsGreaterThanToken */ ) {
            return true;
        }
        return itemCount > 0 && this.canEatExplicitOrAutomaticSemicolon(false);
    };
    Parser.prototype.isExpectedExtendsOrImplementsClause_TypeNameListTerminator = function () {
        if(this.currentToken().keywordKind() === 46 /* ExtendsKeyword */  || this.currentToken().keywordKind() === 49 /* ImplementsKeyword */ ) {
            return true;
        }
        if(this.currentToken().tokenKind === 67 /* OpenBraceToken */  || this.currentToken().tokenKind === 68 /* CloseBraceToken */ ) {
            return true;
        }
        return false;
    };
    Parser.prototype.isExpectedArgumentList_AssignmentExpressionsTerminator = function () {
        return this.currentToken().tokenKind === 70 /* CloseParenToken */ ;
    };
    Parser.prototype.isExpectedClassDeclaration_ClassElementsTerminator = function () {
        return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
    };
    Parser.prototype.isExpectedSwitchStatement_SwitchClausesTerminator = function () {
        return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
    };
    Parser.prototype.isExpectedSwitchClause_StatementsTerminator = function () {
        return this.currentToken().tokenKind === 68 /* CloseBraceToken */  || this.isSwitchClause();
    };
    Parser.prototype.isExpectedBlock_StatementsTerminator = function () {
        return this.currentToken().tokenKind === 68 /* CloseBraceToken */ ;
    };
    Parser.prototype.isExpectedListItem = function (currentListType, inErrorRecovery) {
        switch(currentListType) {
            case 1 /* SourceUnit_ModuleElements */ : {
                return this.isModuleElement();

            }
            case 2 /* ClassDeclaration_ClassElements */ : {
                return this.isClassElement();

            }
            case 4 /* ModuleDeclaration_ModuleElements */ : {
                return this.isModuleElement();

            }
            case 8 /* SwitchStatement_SwitchClauses */ : {
                return this.isSwitchClause();

            }
            case 16 /* SwitchClause_Statements */ : {
                return this.isStatement(true);

            }
            case 32 /* Block_Statements */ : {
                return this.isStatement(true);

            }
            case 128 /* EnumDeclaration_VariableDeclarators */ :
            case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ :
            case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ : {
                return this.isVariableDeclarator();

            }
            case 256 /* ObjectType_TypeMembers */ : {
                return this.isTypeMember();

            }
            case 4096 /* ArgumentList_AssignmentExpressions */ : {
                return this.isExpression();

            }
            case 512 /* ExtendsOrImplementsClause_TypeNameList */ : {
                return this.isName();

            }
            case 8192 /* ObjectLiteralExpression_PropertyAssignments */ : {
                return this.isPropertyAssignment(inErrorRecovery);

            }
            case 32768 /* ParameterList_Parameters */ : {
                return this.isParameter();

            }
            case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                return this.isAssignmentOrOmittedExpression();

            }
            default: {
                throw Errors.invalidOperation();

            }
        }
    };
    Parser.prototype.parseExpectedListItem = function (currentListType) {
        switch(currentListType) {
            case 1 /* SourceUnit_ModuleElements */ : {
                return this.parseModuleElement();

            }
            case 2 /* ClassDeclaration_ClassElements */ : {
                return this.parseClassElement();

            }
            case 4 /* ModuleDeclaration_ModuleElements */ : {
                return this.parseModuleElement();

            }
            case 8 /* SwitchStatement_SwitchClauses */ : {
                return this.parseSwitchClause();

            }
            case 16 /* SwitchClause_Statements */ : {
                return this.parseStatement(false);

            }
            case 32 /* Block_Statements */ : {
                return this.parseStatement(true);

            }
            case 128 /* EnumDeclaration_VariableDeclarators */ : {
                return this.parseVariableDeclarator(true);

            }
            case 256 /* ObjectType_TypeMembers */ : {
                return this.parseTypeMember();

            }
            case 4096 /* ArgumentList_AssignmentExpressions */ : {
                return this.parseAssignmentExpression(true);

            }
            case 512 /* ExtendsOrImplementsClause_TypeNameList */ : {
                return this.parseName();

            }
            case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ : {
                return this.parseVariableDeclarator(true);

            }
            case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ : {
                return this.parseVariableDeclarator(false);

            }
            case 8192 /* ObjectLiteralExpression_PropertyAssignments */ : {
                return this.parsePropertyAssignment();

            }
            case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                return this.parseAssignmentOrOmittedExpression();

            }
            case 32768 /* ParameterList_Parameters */ : {
                return this.parseParameter();

            }
            default: {
                throw Errors.invalidOperation();

            }
        }
    };
    Parser.prototype.getExpectedListElementType = function (currentListType) {
        switch(currentListType) {
            case 1 /* SourceUnit_ModuleElements */ : {
                return Strings.module__class__interface__enum__import_or_statement;

            }
            case 2 /* ClassDeclaration_ClassElements */ : {
                return Strings.constructor__function__accessor_or_variable;

            }
            case 4 /* ModuleDeclaration_ModuleElements */ : {
                return Strings.module__class__interface__enum__import_or_statement;

            }
            case 8 /* SwitchStatement_SwitchClauses */ : {
                return Strings.case_or_default_clause;

            }
            case 16 /* SwitchClause_Statements */ : {
                return Strings.statement;

            }
            case 32 /* Block_Statements */ : {
                return Strings.statement;

            }
            case 1024 /* VariableDeclaration_VariableDeclarators_AllowIn */ :
            case 2048 /* VariableDeclaration_VariableDeclarators_DisallowIn */ :
            case 128 /* EnumDeclaration_VariableDeclarators */ : {
                return Strings.identifier;

            }
            case 256 /* ObjectType_TypeMembers */ : {
                return Strings.call__construct__index__property_or_function_signature;

            }
            case 4096 /* ArgumentList_AssignmentExpressions */ : {
                return Strings.expression;

            }
            case 512 /* ExtendsOrImplementsClause_TypeNameList */ : {
                return Strings.type_name;

            }
            case 8192 /* ObjectLiteralExpression_PropertyAssignments */ : {
                return Strings.property_or_accessor;

            }
            case 32768 /* ParameterList_Parameters */ : {
                return Strings.parameter;

            }
            case 16384 /* ArrayLiteralExpression_AssignmentExpressions */ : {
                return Strings.expression;

            }
            default: {
                throw Errors.invalidOperation();

            }
        }
    };
    return Parser;
})(SlidingWindow);
var SyntaxDedenter = (function (_super) {
    __extends(SyntaxDedenter, _super);
    function SyntaxDedenter(dedentFirstToken, dedentationAmount, minimumIndent, options) {
        _super.call(this);
        this.dedentationAmount = dedentationAmount;
        this.minimumIndent = minimumIndent;
        this.options = options;
        this.lastTriviaWasNewLine = dedentFirstToken;
    }
    SyntaxDedenter.prototype.abort = function () {
        this.lastTriviaWasNewLine = false;
        this.dedentationAmount = 0;
    };
    SyntaxDedenter.prototype.isAborted = function () {
        return this.dedentationAmount === 0;
    };
    SyntaxDedenter.prototype.visitToken = function (token) {
        var result = token;
        if(this.lastTriviaWasNewLine) {
            result = token.withLeadingTrivia(this.dedentTriviaList(token.leadingTrivia()));
        }
        if(this.isAborted()) {
            return token;
        }
        this.lastTriviaWasNewLine = token.hasTrailingNewLineTrivia();
        return result;
    };
    SyntaxDedenter.prototype.dedentTriviaList = function (triviaList) {
        var result = [];
        var dedentNextWhitespace = true;
        for(var i = 0, n = triviaList.count(); i < n && !this.isAborted(); i++) {
            var trivia = triviaList.syntaxTriviaAt(i);
            var dedentThisTrivia = dedentNextWhitespace;
            dedentNextWhitespace = false;
            if(dedentThisTrivia) {
                if(trivia.kind() === 4 /* WhitespaceTrivia */ ) {
                    var hasFollowingNewLine = (i < triviaList.count() - 1) && triviaList.syntaxTriviaAt(i + 1).kind() === 5 /* NewLineTrivia */ ;
                    result.push(this.dedentWhitespace(trivia, hasFollowingNewLine));
                    continue;
                } else {
                    if(trivia.kind() !== 5 /* NewLineTrivia */ ) {
                        this.abort();
                        break;
                    }
                }
            }
            if(trivia.kind() === 6 /* MultiLineCommentTrivia */ ) {
                result.push(this.dedentMultiLineComment(trivia));
                continue;
            }
            result.push(trivia);
            if(trivia.kind() === 5 /* NewLineTrivia */ ) {
                dedentNextWhitespace = true;
            }
        }
        if(dedentNextWhitespace) {
            this.abort();
        }
        if(this.isAborted()) {
            return triviaList;
        }
        return SyntaxTriviaList.create(result);
    };
    SyntaxDedenter.prototype.dedentSegment = function (segment, hasFollowingNewLineTrivia) {
        var firstNonWhitespacePosition = Indentation.firstNonWhitespacePosition(segment);
        if(firstNonWhitespacePosition === segment.length) {
            if(hasFollowingNewLineTrivia) {
                return "";
            }
        } else {
            if(CharacterInfo.isLineTerminator(segment.charCodeAt(firstNonWhitespacePosition))) {
                return segment.substring(firstNonWhitespacePosition);
            }
        }
        var firstNonWhitespaceColumn = Indentation.columnForPositionInString(segment, firstNonWhitespacePosition, this.options);
        var newFirstNonWhitespaceColumn = MathPrototype.min(firstNonWhitespaceColumn, MathPrototype.max(firstNonWhitespaceColumn - this.dedentationAmount, this.minimumIndent));
        if(newFirstNonWhitespaceColumn === firstNonWhitespaceColumn) {
            this.abort();
            return segment;
        }
        this.dedentationAmount = firstNonWhitespaceColumn - newFirstNonWhitespaceColumn;
        Debug.assert(this.dedentationAmount >= 0);
        var indentationString = Indentation.indentationString(newFirstNonWhitespaceColumn, this.options);
        return indentationString + segment.substring(firstNonWhitespacePosition);
    };
    SyntaxDedenter.prototype.dedentWhitespace = function (trivia, hasFollowingNewLineTrivia) {
        var newIndentation = this.dedentSegment(trivia.fullText(), hasFollowingNewLineTrivia);
        return SyntaxTrivia.createWhitespace(newIndentation);
    };
    SyntaxDedenter.prototype.dedentMultiLineComment = function (trivia) {
        var segments = SyntaxTrivia.splitMultiLineCommentTriviaIntoMultipleLines(trivia);
        if(segments.length === 1) {
            return trivia;
        }
        for(var i = 1; i < segments.length; i++) {
            var segment = segments[i];
            segments[i] = this.dedentSegment(segment, false);
        }
        var result = segments.join("");
        return SyntaxTrivia.create(6 /* MultiLineCommentTrivia */ , result);
    };
    SyntaxDedenter.dedentNode = function dedentNode(node, dedentFirstToken, dedentAmount, minimumIndent, options) {
        var dedenter = new SyntaxDedenter(dedentFirstToken, dedentAmount, minimumIndent, options);
        var result = node.accept1(dedenter);
        if(dedenter.isAborted()) {
            return node;
        }
        return result;
    }
    return SyntaxDedenter;
})(SyntaxRewriter);
var SyntaxIndenter = (function (_super) {
    __extends(SyntaxIndenter, _super);
    function SyntaxIndenter(indentFirstToken, indentationAmount, options) {
        _super.call(this);
        this.indentationAmount = indentationAmount;
        this.options = options;
        this.lastTriviaWasNewLine = indentFirstToken;
    }
    SyntaxIndenter.prototype.visitToken = function (token) {
        var result = token;
        if(this.lastTriviaWasNewLine) {
            result = token.withLeadingTrivia(this.indentTriviaList(token.leadingTrivia()));
        }
        this.lastTriviaWasNewLine = token.hasTrailingNewLineTrivia();
        return result;
    };
    SyntaxIndenter.prototype.indentTriviaList = function (triviaList) {
        var result = [];
        var indentNextTrivia = true;
        for(var i = 0, n = triviaList.count(); i < n; i++) {
            var trivia = triviaList.syntaxTriviaAt(i);
            var indentThisTrivia = indentNextTrivia;
            indentNextTrivia = false;
            switch(trivia.kind()) {
                case 6 /* MultiLineCommentTrivia */ : {
                    this.indentMultiLineComment(trivia, indentThisTrivia, result);
                    continue;

                }
                case 7 /* SingleLineCommentTrivia */ :
                case 8 /* SkippedTextTrivia */ : {
                    this.indentSingleLineOrSkippedText(trivia, indentThisTrivia, result);
                    continue;

                }
                case 4 /* WhitespaceTrivia */ : {
                    this.indentWhitespace(trivia, indentThisTrivia, result);
                    continue;

                }
                case 5 /* NewLineTrivia */ : {
                    result.push(trivia);
                    indentNextTrivia = true;
                    continue;

                }
                default: {
                    throw Errors.invalidOperation();

                }
            }
        }
        if(indentNextTrivia) {
            result.push(Indentation.indentationTrivia(this.indentationAmount, this.options));
        }
        return SyntaxTriviaList.create(result);
    };
    SyntaxIndenter.prototype.indentSegment = function (segment) {
        var firstNonWhitespacePosition = Indentation.firstNonWhitespacePosition(segment);
        if(firstNonWhitespacePosition < segment.length && CharacterInfo.isLineTerminator(segment.charCodeAt(firstNonWhitespacePosition))) {
            return segment;
        }
        var firstNonWhitespaceColumn = Indentation.columnForPositionInString(segment, firstNonWhitespacePosition, this.options);
        var newFirstNonWhitespaceColumn = firstNonWhitespaceColumn + this.indentationAmount;
        var indentationString = Indentation.indentationString(newFirstNonWhitespaceColumn, this.options);
        return indentationString + segment.substring(firstNonWhitespacePosition);
    };
    SyntaxIndenter.prototype.indentWhitespace = function (trivia, indentThisTrivia, result) {
        if(!indentThisTrivia) {
            result.push(trivia);
            return;
        }
        var newIndentation = this.indentSegment(trivia.fullText());
        result.push(SyntaxTrivia.createWhitespace(newIndentation));
    };
    SyntaxIndenter.prototype.indentSingleLineOrSkippedText = function (trivia, indentThisTrivia, result) {
        if(indentThisTrivia) {
            result.push(Indentation.indentationTrivia(this.indentationAmount, this.options));
        }
        result.push(trivia);
    };
    SyntaxIndenter.prototype.indentMultiLineComment = function (trivia, indentThisTrivia, result) {
        if(indentThisTrivia) {
            result.push(Indentation.indentationTrivia(this.indentationAmount, this.options));
        }
        var segments = SyntaxTrivia.splitMultiLineCommentTriviaIntoMultipleLines(trivia);
        for(var i = 1; i < segments.length; i++) {
            segments[i] = this.indentSegment(segments[i]);
        }
        var newText = segments.join("");
        result.push(SyntaxTrivia.createMultiLineComment(newText));
    };
    SyntaxIndenter.indentNode = function indentNode(node, indentFirstToken, indentAmount, options) {
        var indenter = new SyntaxIndenter(indentFirstToken, indentAmount, options);
        return node.accept1(indenter);
    }
    SyntaxIndenter.indentNodes = function indentNodes(nodes, indentFirstToken, indentAmount, options) {
        var indenter = new SyntaxIndenter(indentFirstToken, indentAmount, options);
        var result = ArrayUtilities.select(nodes, function (n) {
            return n.accept1(indenter);
        });
        return result;
    }
    return SyntaxIndenter;
})(SyntaxRewriter);
var SyntaxRealizer = (function (_super) {
    __extends(SyntaxRealizer, _super);
    function SyntaxRealizer() {
        _super.call(this);
    }
    SyntaxRealizer.prototype.visitToken = function (token) {
        return token.realize();
    };
    return SyntaxRealizer;
})(SyntaxRewriter);
var SyntaxToken;
(function (SyntaxToken) {
    function hashCode(token) {
        var hash = 0;
        hash = Hash.combine(token.leadingTriviaWidth(), hash);
        hash = Hash.combine(token.hasLeadingCommentTrivia ? 1 : 0, hash);
        hash = Hash.combine(token.hasLeadingNewLineTrivia ? 1 : 0, hash);
        hash = Hash.combine(token.kind(), hash);
        hash = Hash.combine(token.keywordKind(), hash);
        hash = Hash.combine(Hash.computeSimple31BitStringHashCode(token.text()), hash);
        hash = Hash.combine(token.trailingTriviaWidth(), hash);
        hash = Hash.combine(token.hasTrailingCommentTrivia ? 1 : 0, hash);
        hash = Hash.combine(token.hasTrailingNewLineTrivia ? 1 : 0, hash);
        return hash;
    }
    SyntaxToken.hashCode = hashCode;
    function realize(token) {
        return new RealizedToken(token.tokenKind, token.keywordKind(), token.leadingTrivia(), token.text(), token.value(), token.trailingTrivia(), token.isMissing());
    }
    SyntaxToken.realize = realize;
    function collectTextElements(token, elements) {
        token.leadingTrivia().collectTextElements(elements);
        elements.push(token.text());
        token.trailingTrivia().collectTextElements(elements);
    }
    SyntaxToken.collectTextElements = collectTextElements;
    function toJSON(token) {
        var result = {
            kind: (SyntaxKind)._map[token.tokenKind]
        };
        if(token.keywordKind() !== 0 /* None */ ) {
            result.keywordKind = (SyntaxKind)._map[token.keywordKind()];
        }
        result.width = token.width();
        if(token.fullWidth() !== token.width()) {
            result.fullWidth = token.fullWidth();
        }
        if(token.isMissing()) {
            result.isMissing = true;
        }
        result.text = token.text();
        if(token.value() !== null) {
            result.valueText = token.value();
        }
        if(token.hasLeadingTrivia()) {
            result.hasLeadingTrivia = true;
        }
        if(token.hasLeadingCommentTrivia()) {
            result.hasLeadingCommentTrivia = true;
        }
        if(token.hasLeadingNewLineTrivia()) {
            result.hasLeadingNewLineTrivia = true;
        }
        if(token.hasTrailingTrivia()) {
            result.hasTrailingTrivia = true;
        }
        if(token.hasTrailingCommentTrivia()) {
            result.hasTrailingCommentTrivia = true;
        }
        if(token.hasTrailingNewLineTrivia()) {
            result.hasTrailingNewLineTrivia = true;
        }
        var trivia = token.leadingTrivia();
        if(trivia.count() > 0) {
            result.leadingTrivia = trivia;
        }
        trivia = token.trailingTrivia();
        if(trivia.count() > 0) {
            result.trailingTrivia = trivia;
        }
        return result;
    }
    SyntaxToken.toJSON = toJSON;
    function value(token) {
        if(token.tokenKind === 9 /* IdentifierNameToken */ ) {
            var text = token.text();
            for(var i = 0; i < text.length; i++) {
                if(!Scanner.isIdentifierPartCharacter[text.charCodeAt(i)]) {
                    return null;
                }
            }
            return text;
        } else {
            if(token.tokenKind === 11 /* NumericLiteral */ ) {
                return null;
            } else {
                if(token.tokenKind === 12 /* StringLiteral */ ) {
                    return null;
                } else {
                    if(token.tokenKind === 10 /* RegularExpressionLiteral */ ) {
                        return null;
                    } else {
                        if(token.tokenKind === 118 /* EndOfFileToken */  || token.tokenKind === 117 /* ErrorToken */ ) {
                            return null;
                        } else {
                            throw Errors.invalidOperation();
                        }
                    }
                }
            }
        }
    }
    SyntaxToken.value = value;
    var EmptyToken = (function () {
        function EmptyToken(kind, keywordKind) {
            this.tokenKind = kind;
            this._keywordKind = keywordKind;
        }
        EmptyToken.prototype.clone = function () {
            return new EmptyToken(this.tokenKind, this._keywordKind);
        };
        EmptyToken.prototype.isToken = function () {
            return true;
        };
        EmptyToken.prototype.isNode = function () {
            return false;
        };
        EmptyToken.prototype.isList = function () {
            return false;
        };
        EmptyToken.prototype.isSeparatedList = function () {
            return false;
        };
        EmptyToken.prototype.isTrivia = function () {
            return false;
        };
        EmptyToken.prototype.isTriviaList = function () {
            return false;
        };
        EmptyToken.prototype.kind = function () {
            return this.tokenKind;
        };
        EmptyToken.prototype.toJSON = function (key) {
            return toJSON(this);
        };
        EmptyToken.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        EmptyToken.prototype.fullWidth = function () {
            return 0;
        };
        EmptyToken.prototype.width = function () {
            return 0;
        };
        EmptyToken.prototype.isMissing = function () {
            return true;
        };
        EmptyToken.prototype.text = function () {
            return "";
        };
        EmptyToken.prototype.fullText = function () {
            return "";
        };
        EmptyToken.prototype.value = function () {
            return null;
        };
        EmptyToken.prototype.hasLeadingTrivia = function () {
            return false;
        };
        EmptyToken.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        EmptyToken.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        EmptyToken.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        EmptyToken.prototype.hasTrailingTrivia = function () {
            return false;
        };
        EmptyToken.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        EmptyToken.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        EmptyToken.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        EmptyToken.prototype.leadingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        EmptyToken.prototype.trailingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        EmptyToken.prototype.realize = function () {
            return realize(this);
        };
        EmptyToken.prototype.collectTextElements = function (elements) {
            collectTextElements(this, elements);
        };
        EmptyToken.prototype.withLeadingTrivia = function (leadingTrivia) {
            throw Errors.invalidOperation('Can not call on a non-realized token.');
        };
        EmptyToken.prototype.withTrailingTrivia = function (leadingTrivia) {
            throw Errors.invalidOperation('Can not call on a non-realized token.');
        };
        return EmptyToken;
    })();    
    function createEmpty(kind, keywordKind) {
        return new EmptyToken(kind, keywordKind);
    }
    SyntaxToken.createEmpty = createEmpty;
    var ElasticToken = (function () {
        function ElasticToken(kind, keywordKind, leadingTrivia, text, trailingTrivia) {
            this.tokenKind = kind;
            this._keywordKind = keywordKind;
            this._leadingTrivia = leadingTrivia;
            this._text = text;
            this._trailingTrivia = trailingTrivia;
        }
        ElasticToken.prototype.clone = function () {
            return new ElasticToken(this.tokenKind, this._keywordKind, this._leadingTrivia, this._text, this._trailingTrivia);
        };
        ElasticToken.prototype.isToken = function () {
            return true;
        };
        ElasticToken.prototype.isNode = function () {
            return false;
        };
        ElasticToken.prototype.isList = function () {
            return false;
        };
        ElasticToken.prototype.isSeparatedList = function () {
            return false;
        };
        ElasticToken.prototype.isTrivia = function () {
            return false;
        };
        ElasticToken.prototype.isTriviaList = function () {
            return false;
        };
        ElasticToken.prototype.isMissing = function () {
            return false;
        };
        ElasticToken.prototype.toJSON = function (key) {
            return toJSON(this);
        };
        ElasticToken.prototype.kind = function () {
            return this.tokenKind;
        };
        ElasticToken.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        ElasticToken.prototype.fullStart = function () {
            return 0;
        };
        ElasticToken.prototype.fullEnd = function () {
            throw Errors.notYetImplemented();
        };
        ElasticToken.prototype.start = function () {
            throw Errors.notYetImplemented();
        };
        ElasticToken.prototype.end = function () {
            throw Errors.notYetImplemented();
        };
        ElasticToken.prototype.fullWidth = function () {
            return this._leadingTrivia.fullWidth() + this.width() + this._trailingTrivia.fullWidth();
        };
        ElasticToken.prototype.width = function () {
            return this._text.length;
        };
        ElasticToken.prototype.text = function () {
            return this._text;
        };
        ElasticToken.prototype.fullText = function () {
            return this._leadingTrivia.fullText() + this.text() + this._trailingTrivia.fullText();
        };
        ElasticToken.prototype.value = function () {
            return null;
        };
        ElasticToken.prototype.valueText = function () {
            return null;
        };
        ElasticToken.prototype.hasLeadingTrivia = function () {
            return this._leadingTrivia.count() > 0;
        };
        ElasticToken.prototype.hasLeadingCommentTrivia = function () {
            return this._leadingTrivia.hasComment();
        };
        ElasticToken.prototype.hasLeadingNewLineTrivia = function () {
            return this._leadingTrivia.hasNewLine();
        };
        ElasticToken.prototype.leadingTriviaWidth = function () {
            return this._leadingTrivia.fullWidth();
        };
        ElasticToken.prototype.hasTrailingTrivia = function () {
            return this._trailingTrivia.count() > 0;
        };
        ElasticToken.prototype.hasTrailingCommentTrivia = function () {
            return this._trailingTrivia.hasComment();
        };
        ElasticToken.prototype.trailingTriviaWidth = function () {
            return this._trailingTrivia.fullWidth();
        };
        ElasticToken.prototype.hasTrailingNewLineTrivia = function () {
            return this._trailingTrivia.hasNewLine();
        };
        ElasticToken.prototype.leadingTrivia = function () {
            return this._leadingTrivia;
        };
        ElasticToken.prototype.trailingTrivia = function () {
            return this._trailingTrivia;
        };
        ElasticToken.prototype.realize = function () {
            return realize(this);
        };
        ElasticToken.prototype.collectTextElements = function (elements) {
            collectTextElements(this, elements);
        };
        ElasticToken.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        ElasticToken.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return ElasticToken;
    })();    
    var RealizedToken = (function () {
        function RealizedToken(tokenKind, keywordKind, leadingTrivia, text, value, trailingTrivia, isMissing) {
            this.tokenKind = tokenKind;
            this._keywordKind = keywordKind;
            this._leadingTrivia = leadingTrivia;
            this._text = text;
            this._value = value;
            this._trailingTrivia = trailingTrivia;
            this._isMissing = isMissing;
        }
        RealizedToken.prototype.clone = function () {
            return new RealizedToken(this.tokenKind, this._keywordKind, this._leadingTrivia, this._text, this._value, this._trailingTrivia, this._isMissing);
        };
        RealizedToken.prototype.kind = function () {
            return this.tokenKind;
        };
        RealizedToken.prototype.toJSON = function (key) {
            return toJSON(this);
        };
        RealizedToken.prototype.isToken = function () {
            return true;
        };
        RealizedToken.prototype.isNode = function () {
            return false;
        };
        RealizedToken.prototype.isList = function () {
            return false;
        };
        RealizedToken.prototype.isSeparatedList = function () {
            return false;
        };
        RealizedToken.prototype.isTrivia = function () {
            return false;
        };
        RealizedToken.prototype.isTriviaList = function () {
            return false;
        };
        RealizedToken.prototype.isMissing = function () {
            return this._isMissing;
        };
        RealizedToken.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        RealizedToken.prototype.fullWidth = function () {
            return this._leadingTrivia.fullWidth() + this.width() + this._trailingTrivia.fullWidth();
        };
        RealizedToken.prototype.width = function () {
            return this.text().length;
        };
        RealizedToken.prototype.text = function () {
            return this._text;
        };
        RealizedToken.prototype.fullText = function () {
            return this._leadingTrivia.fullText() + this.text() + this._trailingTrivia.fullText();
        };
        RealizedToken.prototype.value = function () {
            return this._value;
        };
        RealizedToken.prototype.hasLeadingTrivia = function () {
            return this._leadingTrivia.count() > 0;
        };
        RealizedToken.prototype.hasLeadingCommentTrivia = function () {
            return this._leadingTrivia.hasComment();
        };
        RealizedToken.prototype.hasLeadingNewLineTrivia = function () {
            return this._leadingTrivia.hasNewLine();
        };
        RealizedToken.prototype.leadingTriviaWidth = function () {
            return this._leadingTrivia.fullWidth();
        };
        RealizedToken.prototype.hasTrailingTrivia = function () {
            return this._trailingTrivia.count() > 0;
        };
        RealizedToken.prototype.hasTrailingCommentTrivia = function () {
            return this._trailingTrivia.hasComment();
        };
        RealizedToken.prototype.hasTrailingNewLineTrivia = function () {
            return this._trailingTrivia.hasNewLine();
        };
        RealizedToken.prototype.trailingTriviaWidth = function () {
            return this._trailingTrivia.fullWidth();
        };
        RealizedToken.prototype.leadingTrivia = function () {
            return this._leadingTrivia;
        };
        RealizedToken.prototype.trailingTrivia = function () {
            return this._trailingTrivia;
        };
        RealizedToken.prototype.realize = function () {
            return this;
        };
        RealizedToken.prototype.collectTextElements = function (elements) {
            collectTextElements(this, elements);
        };
        RealizedToken.prototype.withLeadingTrivia = function (leadingTrivia) {
            return new RealizedToken(this.tokenKind, this._keywordKind, leadingTrivia, this._text, this._value, this._trailingTrivia, this._isMissing);
        };
        RealizedToken.prototype.withTrailingTrivia = function (trailingTrivia) {
            return new RealizedToken(this.tokenKind, this._keywordKind, this._leadingTrivia, this._text, this._value, trailingTrivia, this._isMissing);
        };
        return RealizedToken;
    })();    
    function createElastic(token) {
        var text = token.text ? token.text : SyntaxFacts.getText(token.kind);
        var kind, keywordKind;
        if(SyntaxFacts.isAnyKeyword(token.kind)) {
            kind = 9 /* IdentifierNameToken */ ;
            keywordKind = token.kind;
        } else {
            kind = token.kind;
            keywordKind = 0 /* None */ ;
        }
        return new ElasticToken(kind, keywordKind, SyntaxTriviaList.create(token.leadingTrivia), text, SyntaxTriviaList.create(token.trailingTrivia));
    }
    SyntaxToken.createElastic = createElastic;
})(SyntaxToken || (SyntaxToken = {}));
var SyntaxToken;
(function (SyntaxToken) {
    var VariableWidthTokenWithNoTrivia = (function () {
        function VariableWidthTokenWithNoTrivia(sourceText, kind, fullStart, textOrWidth) {
            this._value = null;
            this._sourceText = sourceText;
            this.tokenKind = kind;
            this._fullStart = fullStart;
            this._textOrWidth = textOrWidth;
        }
        VariableWidthTokenWithNoTrivia.prototype.clone = function () {
            return new VariableWidthTokenWithNoTrivia(this._sourceText, this.tokenKind, this._fullStart, this._textOrWidth);
        };
        VariableWidthTokenWithNoTrivia.prototype.isToken = function () {
            return true;
        };
        VariableWidthTokenWithNoTrivia.prototype.isNode = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.isList = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.isTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.isTriviaList = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.isMissing = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        VariableWidthTokenWithNoTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        VariableWidthTokenWithNoTrivia.prototype.fullWidth = function () {
            return this.width();
        };
        VariableWidthTokenWithNoTrivia.prototype.start = function () {
            return this._fullStart;
        };
        VariableWidthTokenWithNoTrivia.prototype.width = function () {
            return typeof this._textOrWidth === 'number' ? this._textOrWidth : this._textOrWidth.length;
        };
        VariableWidthTokenWithNoTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        VariableWidthTokenWithNoTrivia.prototype.text = function () {
            if(typeof this._textOrWidth === 'number') {
                this._textOrWidth = this._sourceText.substr(this.start(), this._textOrWidth, this.tokenKind === 9 /* IdentifierNameToken */ );
            }
            return this._textOrWidth;
        };
        VariableWidthTokenWithNoTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        VariableWidthTokenWithNoTrivia.prototype.value = function () {
            return this._value || (this._value = SyntaxToken.value(this));
        };
        VariableWidthTokenWithNoTrivia.prototype.hasLeadingTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        VariableWidthTokenWithNoTrivia.prototype.leadingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        VariableWidthTokenWithNoTrivia.prototype.hasTrailingTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        VariableWidthTokenWithNoTrivia.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        VariableWidthTokenWithNoTrivia.prototype.trailingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        VariableWidthTokenWithNoTrivia.prototype.toJSON = function (key) {
            return SyntaxToken.toJSON(this);
        };
        VariableWidthTokenWithNoTrivia.prototype.realize = function () {
            return SyntaxToken.realize(this);
        };
        VariableWidthTokenWithNoTrivia.prototype.collectTextElements = function (elements) {
            SyntaxToken.collectTextElements(this, elements);
        };
        VariableWidthTokenWithNoTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        VariableWidthTokenWithNoTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return VariableWidthTokenWithNoTrivia;
    })();    
    var VariableWidthTokenWithLeadingTrivia = (function () {
        function VariableWidthTokenWithLeadingTrivia(sourceText, kind, fullStart, leadingTriviaInfo, textOrWidth) {
            this._value = null;
            this._sourceText = sourceText;
            this.tokenKind = kind;
            this._fullStart = fullStart;
            this._leadingTriviaInfo = leadingTriviaInfo;
            this._textOrWidth = textOrWidth;
        }
        VariableWidthTokenWithLeadingTrivia.prototype.clone = function () {
            return new VariableWidthTokenWithLeadingTrivia(this._sourceText, this.tokenKind, this._fullStart, this._leadingTriviaInfo, this._textOrWidth);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isToken = function () {
            return true;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isNode = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isList = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isTrivia = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.isMissing = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.fullWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo) + this.width();
        };
        VariableWidthTokenWithLeadingTrivia.prototype.start = function () {
            return this._fullStart + getTriviaLength(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.width = function () {
            return typeof this._textOrWidth === 'number' ? this._textOrWidth : this._textOrWidth.length;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        VariableWidthTokenWithLeadingTrivia.prototype.text = function () {
            if(typeof this._textOrWidth === 'number') {
                this._textOrWidth = this._sourceText.substr(this.start(), this._textOrWidth, this.tokenKind === 9 /* IdentifierNameToken */ );
            }
            return this._textOrWidth;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.value = function () {
            return this._value || (this._value = SyntaxToken.value(this));
        };
        VariableWidthTokenWithLeadingTrivia.prototype.hasLeadingTrivia = function () {
            return true;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return hasTriviaComment(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return hasTriviaNewLine(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.leadingTriviaWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.leadingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaLength(this._leadingTriviaInfo), false);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.hasTrailingTrivia = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.trailingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        VariableWidthTokenWithLeadingTrivia.prototype.toJSON = function (key) {
            return SyntaxToken.toJSON(this);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.realize = function () {
            return SyntaxToken.realize(this);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.collectTextElements = function (elements) {
            SyntaxToken.collectTextElements(this, elements);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        VariableWidthTokenWithLeadingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return VariableWidthTokenWithLeadingTrivia;
    })();    
    var VariableWidthTokenWithTrailingTrivia = (function () {
        function VariableWidthTokenWithTrailingTrivia(sourceText, kind, fullStart, textOrWidth, trailingTriviaInfo) {
            this._value = null;
            this._sourceText = sourceText;
            this.tokenKind = kind;
            this._fullStart = fullStart;
            this._textOrWidth = textOrWidth;
            this._trailingTriviaInfo = trailingTriviaInfo;
        }
        VariableWidthTokenWithTrailingTrivia.prototype.clone = function () {
            return new VariableWidthTokenWithTrailingTrivia(this._sourceText, this.tokenKind, this._fullStart, this._textOrWidth, this._trailingTriviaInfo);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isToken = function () {
            return true;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isNode = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isList = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isTrivia = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.isMissing = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.fullWidth = function () {
            return this.width() + getTriviaLength(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.start = function () {
            return this._fullStart;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.width = function () {
            return typeof this._textOrWidth === 'number' ? this._textOrWidth : this._textOrWidth.length;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        VariableWidthTokenWithTrailingTrivia.prototype.text = function () {
            if(typeof this._textOrWidth === 'number') {
                this._textOrWidth = this._sourceText.substr(this.start(), this._textOrWidth, this.tokenKind === 9 /* IdentifierNameToken */ );
            }
            return this._textOrWidth;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.value = function () {
            return this._value || (this._value = SyntaxToken.value(this));
        };
        VariableWidthTokenWithTrailingTrivia.prototype.hasLeadingTrivia = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.leadingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.hasTrailingTrivia = function () {
            return true;
        };
        VariableWidthTokenWithTrailingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return hasTriviaComment(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return hasTriviaNewLine(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.trailingTriviaWidth = function () {
            return getTriviaLength(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.trailingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaLength(this._trailingTriviaInfo), true);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.toJSON = function (key) {
            return SyntaxToken.toJSON(this);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.realize = function () {
            return SyntaxToken.realize(this);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.collectTextElements = function (elements) {
            SyntaxToken.collectTextElements(this, elements);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        VariableWidthTokenWithTrailingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return VariableWidthTokenWithTrailingTrivia;
    })();    
    var VariableWidthTokenWithLeadingAndTrailingTrivia = (function () {
        function VariableWidthTokenWithLeadingAndTrailingTrivia(sourceText, kind, fullStart, leadingTriviaInfo, textOrWidth, trailingTriviaInfo) {
            this._value = null;
            this._sourceText = sourceText;
            this.tokenKind = kind;
            this._fullStart = fullStart;
            this._leadingTriviaInfo = leadingTriviaInfo;
            this._textOrWidth = textOrWidth;
            this._trailingTriviaInfo = trailingTriviaInfo;
        }
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.clone = function () {
            return new VariableWidthTokenWithLeadingAndTrailingTrivia(this._sourceText, this.tokenKind, this._fullStart, this._leadingTriviaInfo, this._textOrWidth, this._trailingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isToken = function () {
            return true;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isNode = function () {
            return false;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isList = function () {
            return false;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isTrivia = function () {
            return false;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.isMissing = function () {
            return false;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.fullWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo) + this.width() + getTriviaLength(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.start = function () {
            return this._fullStart + getTriviaLength(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.width = function () {
            return typeof this._textOrWidth === 'number' ? this._textOrWidth : this._textOrWidth.length;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.text = function () {
            if(typeof this._textOrWidth === 'number') {
                this._textOrWidth = this._sourceText.substr(this.start(), this._textOrWidth, this.tokenKind === 9 /* IdentifierNameToken */ );
            }
            return this._textOrWidth;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.value = function () {
            return this._value || (this._value = SyntaxToken.value(this));
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.hasLeadingTrivia = function () {
            return true;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return hasTriviaComment(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return hasTriviaNewLine(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.leadingTriviaWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.leadingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaLength(this._leadingTriviaInfo), false);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.hasTrailingTrivia = function () {
            return true;
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return hasTriviaComment(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return hasTriviaNewLine(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.trailingTriviaWidth = function () {
            return getTriviaLength(this._trailingTriviaInfo);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.trailingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaLength(this._trailingTriviaInfo), true);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.toJSON = function (key) {
            return SyntaxToken.toJSON(this);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.realize = function () {
            return SyntaxToken.realize(this);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.collectTextElements = function (elements) {
            SyntaxToken.collectTextElements(this, elements);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        VariableWidthTokenWithLeadingAndTrailingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return VariableWidthTokenWithLeadingAndTrailingTrivia;
    })();    
    var FixedWidthTokenWithNoTrivia = (function () {
        function FixedWidthTokenWithNoTrivia(kind, fullStart) {
            this.tokenKind = kind;
            this._fullStart = fullStart;
        }
        FixedWidthTokenWithNoTrivia.prototype.clone = function () {
            return new FixedWidthTokenWithNoTrivia(this.tokenKind, this._fullStart);
        };
        FixedWidthTokenWithNoTrivia.prototype.isToken = function () {
            return true;
        };
        FixedWidthTokenWithNoTrivia.prototype.isNode = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.isList = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.isTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.isTriviaList = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.isMissing = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        FixedWidthTokenWithNoTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        FixedWidthTokenWithNoTrivia.prototype.fullWidth = function () {
            return this.width();
        };
        FixedWidthTokenWithNoTrivia.prototype.start = function () {
            return this._fullStart;
        };
        FixedWidthTokenWithNoTrivia.prototype.width = function () {
            return this.text().length;
        };
        FixedWidthTokenWithNoTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        FixedWidthTokenWithNoTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this.tokenKind);
        };
        FixedWidthTokenWithNoTrivia.prototype.fullText = function () {
            return this.text();
        };
        FixedWidthTokenWithNoTrivia.prototype.value = function () {
            return null;
        };
        FixedWidthTokenWithNoTrivia.prototype.hasLeadingTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        FixedWidthTokenWithNoTrivia.prototype.leadingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        FixedWidthTokenWithNoTrivia.prototype.hasTrailingTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        FixedWidthTokenWithNoTrivia.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        FixedWidthTokenWithNoTrivia.prototype.trailingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        FixedWidthTokenWithNoTrivia.prototype.toJSON = function (key) {
            return SyntaxToken.toJSON(this);
        };
        FixedWidthTokenWithNoTrivia.prototype.realize = function () {
            return SyntaxToken.realize(this);
        };
        FixedWidthTokenWithNoTrivia.prototype.collectTextElements = function (elements) {
            SyntaxToken.collectTextElements(this, elements);
        };
        FixedWidthTokenWithNoTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        FixedWidthTokenWithNoTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return FixedWidthTokenWithNoTrivia;
    })();    
    var FixedWidthTokenWithLeadingTrivia = (function () {
        function FixedWidthTokenWithLeadingTrivia(sourceText, kind, fullStart, leadingTriviaInfo) {
            this._sourceText = sourceText;
            this.tokenKind = kind;
            this._fullStart = fullStart;
            this._leadingTriviaInfo = leadingTriviaInfo;
        }
        FixedWidthTokenWithLeadingTrivia.prototype.clone = function () {
            return new FixedWidthTokenWithLeadingTrivia(this._sourceText, this.tokenKind, this._fullStart, this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isToken = function () {
            return true;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isNode = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isList = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isTrivia = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.isMissing = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.fullWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo) + this.width();
        };
        FixedWidthTokenWithLeadingTrivia.prototype.start = function () {
            return this._fullStart + getTriviaLength(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.width = function () {
            return this.text().length;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        FixedWidthTokenWithLeadingTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this.tokenKind);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.value = function () {
            return null;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.hasLeadingTrivia = function () {
            return true;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return hasTriviaComment(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return hasTriviaNewLine(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.leadingTriviaWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.leadingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaLength(this._leadingTriviaInfo), false);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.hasTrailingTrivia = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.trailingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        FixedWidthTokenWithLeadingTrivia.prototype.toJSON = function (key) {
            return SyntaxToken.toJSON(this);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.realize = function () {
            return SyntaxToken.realize(this);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.collectTextElements = function (elements) {
            SyntaxToken.collectTextElements(this, elements);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        FixedWidthTokenWithLeadingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return FixedWidthTokenWithLeadingTrivia;
    })();    
    var FixedWidthTokenWithTrailingTrivia = (function () {
        function FixedWidthTokenWithTrailingTrivia(sourceText, kind, fullStart, trailingTriviaInfo) {
            this._sourceText = sourceText;
            this.tokenKind = kind;
            this._fullStart = fullStart;
            this._trailingTriviaInfo = trailingTriviaInfo;
        }
        FixedWidthTokenWithTrailingTrivia.prototype.clone = function () {
            return new FixedWidthTokenWithTrailingTrivia(this._sourceText, this.tokenKind, this._fullStart, this._trailingTriviaInfo);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isToken = function () {
            return true;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isNode = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isList = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isTrivia = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.isMissing = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.fullWidth = function () {
            return this.width() + getTriviaLength(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.start = function () {
            return this._fullStart;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.width = function () {
            return this.text().length;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        FixedWidthTokenWithTrailingTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this.tokenKind);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.value = function () {
            return null;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.hasLeadingTrivia = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.leadingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.hasTrailingTrivia = function () {
            return true;
        };
        FixedWidthTokenWithTrailingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return hasTriviaComment(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return hasTriviaNewLine(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.trailingTriviaWidth = function () {
            return getTriviaLength(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.trailingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaLength(this._trailingTriviaInfo), true);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.toJSON = function (key) {
            return SyntaxToken.toJSON(this);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.realize = function () {
            return SyntaxToken.realize(this);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.collectTextElements = function (elements) {
            SyntaxToken.collectTextElements(this, elements);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        FixedWidthTokenWithTrailingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return FixedWidthTokenWithTrailingTrivia;
    })();    
    var FixedWidthTokenWithLeadingAndTrailingTrivia = (function () {
        function FixedWidthTokenWithLeadingAndTrailingTrivia(sourceText, kind, fullStart, leadingTriviaInfo, trailingTriviaInfo) {
            this._sourceText = sourceText;
            this.tokenKind = kind;
            this._fullStart = fullStart;
            this._leadingTriviaInfo = leadingTriviaInfo;
            this._trailingTriviaInfo = trailingTriviaInfo;
        }
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.clone = function () {
            return new FixedWidthTokenWithLeadingAndTrailingTrivia(this._sourceText, this.tokenKind, this._fullStart, this._leadingTriviaInfo, this._trailingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isToken = function () {
            return true;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isNode = function () {
            return false;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isList = function () {
            return false;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isTrivia = function () {
            return false;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.isMissing = function () {
            return false;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.kind = function () {
            return this.tokenKind;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.keywordKind = function () {
            return 0 /* None */ ;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.fullWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo) + this.width() + getTriviaLength(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.start = function () {
            return this._fullStart + getTriviaLength(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.width = function () {
            return this.text().length;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this.tokenKind);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.value = function () {
            return null;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.hasLeadingTrivia = function () {
            return true;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return hasTriviaComment(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return hasTriviaNewLine(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.leadingTriviaWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.leadingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaLength(this._leadingTriviaInfo), false);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.hasTrailingTrivia = function () {
            return true;
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return hasTriviaComment(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return hasTriviaNewLine(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.trailingTriviaWidth = function () {
            return getTriviaLength(this._trailingTriviaInfo);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.trailingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaLength(this._trailingTriviaInfo), true);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.toJSON = function (key) {
            return SyntaxToken.toJSON(this);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.realize = function () {
            return SyntaxToken.realize(this);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.collectTextElements = function (elements) {
            SyntaxToken.collectTextElements(this, elements);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        FixedWidthTokenWithLeadingAndTrailingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return FixedWidthTokenWithLeadingAndTrailingTrivia;
    })();    
    var KeywordWithNoTrivia = (function () {
        function KeywordWithNoTrivia(keywordKind, fullStart) {
            this.tokenKind = 9 /* IdentifierNameToken */ ;
            this._keywordKind = keywordKind;
            this._fullStart = fullStart;
        }
        KeywordWithNoTrivia.prototype.clone = function () {
            return new KeywordWithNoTrivia(this._keywordKind, this._fullStart);
        };
        KeywordWithNoTrivia.prototype.isToken = function () {
            return true;
        };
        KeywordWithNoTrivia.prototype.isNode = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.isList = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.isTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.isTriviaList = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.isMissing = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.kind = function () {
            return 9 /* IdentifierNameToken */ ;
        };
        KeywordWithNoTrivia.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        KeywordWithNoTrivia.prototype.fullWidth = function () {
            return this.width();
        };
        KeywordWithNoTrivia.prototype.start = function () {
            return this._fullStart;
        };
        KeywordWithNoTrivia.prototype.width = function () {
            return this.text().length;
        };
        KeywordWithNoTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        KeywordWithNoTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this._keywordKind);
        };
        KeywordWithNoTrivia.prototype.fullText = function () {
            return this.text();
        };
        KeywordWithNoTrivia.prototype.value = function () {
            return null;
        };
        KeywordWithNoTrivia.prototype.hasLeadingTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        KeywordWithNoTrivia.prototype.leadingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        KeywordWithNoTrivia.prototype.hasTrailingTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        KeywordWithNoTrivia.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        KeywordWithNoTrivia.prototype.trailingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        KeywordWithNoTrivia.prototype.toJSON = function (key) {
            return SyntaxToken.toJSON(this);
        };
        KeywordWithNoTrivia.prototype.realize = function () {
            return SyntaxToken.realize(this);
        };
        KeywordWithNoTrivia.prototype.collectTextElements = function (elements) {
            SyntaxToken.collectTextElements(this, elements);
        };
        KeywordWithNoTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        KeywordWithNoTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return KeywordWithNoTrivia;
    })();    
    var KeywordWithLeadingTrivia = (function () {
        function KeywordWithLeadingTrivia(sourceText, keywordKind, fullStart, leadingTriviaInfo) {
            this._sourceText = sourceText;
            this.tokenKind = 9 /* IdentifierNameToken */ ;
            this._keywordKind = keywordKind;
            this._fullStart = fullStart;
            this._leadingTriviaInfo = leadingTriviaInfo;
        }
        KeywordWithLeadingTrivia.prototype.clone = function () {
            return new KeywordWithLeadingTrivia(this._sourceText, this._keywordKind, this._fullStart, this._leadingTriviaInfo);
        };
        KeywordWithLeadingTrivia.prototype.isToken = function () {
            return true;
        };
        KeywordWithLeadingTrivia.prototype.isNode = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.isList = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.isTrivia = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.isMissing = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.kind = function () {
            return 9 /* IdentifierNameToken */ ;
        };
        KeywordWithLeadingTrivia.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        KeywordWithLeadingTrivia.prototype.fullWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo) + this.width();
        };
        KeywordWithLeadingTrivia.prototype.start = function () {
            return this._fullStart + getTriviaLength(this._leadingTriviaInfo);
        };
        KeywordWithLeadingTrivia.prototype.width = function () {
            return this.text().length;
        };
        KeywordWithLeadingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        KeywordWithLeadingTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this._keywordKind);
        };
        KeywordWithLeadingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        KeywordWithLeadingTrivia.prototype.value = function () {
            return null;
        };
        KeywordWithLeadingTrivia.prototype.hasLeadingTrivia = function () {
            return true;
        };
        KeywordWithLeadingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return hasTriviaComment(this._leadingTriviaInfo);
        };
        KeywordWithLeadingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return hasTriviaNewLine(this._leadingTriviaInfo);
        };
        KeywordWithLeadingTrivia.prototype.leadingTriviaWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo);
        };
        KeywordWithLeadingTrivia.prototype.leadingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaLength(this._leadingTriviaInfo), false);
        };
        KeywordWithLeadingTrivia.prototype.hasTrailingTrivia = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return false;
        };
        KeywordWithLeadingTrivia.prototype.trailingTriviaWidth = function () {
            return 0;
        };
        KeywordWithLeadingTrivia.prototype.trailingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        KeywordWithLeadingTrivia.prototype.toJSON = function (key) {
            return SyntaxToken.toJSON(this);
        };
        KeywordWithLeadingTrivia.prototype.realize = function () {
            return SyntaxToken.realize(this);
        };
        KeywordWithLeadingTrivia.prototype.collectTextElements = function (elements) {
            SyntaxToken.collectTextElements(this, elements);
        };
        KeywordWithLeadingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        KeywordWithLeadingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return KeywordWithLeadingTrivia;
    })();    
    var KeywordWithTrailingTrivia = (function () {
        function KeywordWithTrailingTrivia(sourceText, keywordKind, fullStart, trailingTriviaInfo) {
            this._sourceText = sourceText;
            this.tokenKind = 9 /* IdentifierNameToken */ ;
            this._keywordKind = keywordKind;
            this._fullStart = fullStart;
            this._trailingTriviaInfo = trailingTriviaInfo;
        }
        KeywordWithTrailingTrivia.prototype.clone = function () {
            return new KeywordWithTrailingTrivia(this._sourceText, this._keywordKind, this._fullStart, this._trailingTriviaInfo);
        };
        KeywordWithTrailingTrivia.prototype.isToken = function () {
            return true;
        };
        KeywordWithTrailingTrivia.prototype.isNode = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.isList = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.isTrivia = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.isMissing = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.kind = function () {
            return 9 /* IdentifierNameToken */ ;
        };
        KeywordWithTrailingTrivia.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        KeywordWithTrailingTrivia.prototype.fullWidth = function () {
            return this.width() + getTriviaLength(this._trailingTriviaInfo);
        };
        KeywordWithTrailingTrivia.prototype.start = function () {
            return this._fullStart;
        };
        KeywordWithTrailingTrivia.prototype.width = function () {
            return this.text().length;
        };
        KeywordWithTrailingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        KeywordWithTrailingTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this._keywordKind);
        };
        KeywordWithTrailingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        KeywordWithTrailingTrivia.prototype.value = function () {
            return null;
        };
        KeywordWithTrailingTrivia.prototype.hasLeadingTrivia = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return false;
        };
        KeywordWithTrailingTrivia.prototype.leadingTriviaWidth = function () {
            return 0;
        };
        KeywordWithTrailingTrivia.prototype.leadingTrivia = function () {
            return SyntaxTriviaList.empty;
        };
        KeywordWithTrailingTrivia.prototype.hasTrailingTrivia = function () {
            return true;
        };
        KeywordWithTrailingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return hasTriviaComment(this._trailingTriviaInfo);
        };
        KeywordWithTrailingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return hasTriviaNewLine(this._trailingTriviaInfo);
        };
        KeywordWithTrailingTrivia.prototype.trailingTriviaWidth = function () {
            return getTriviaLength(this._trailingTriviaInfo);
        };
        KeywordWithTrailingTrivia.prototype.trailingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaLength(this._trailingTriviaInfo), true);
        };
        KeywordWithTrailingTrivia.prototype.toJSON = function (key) {
            return SyntaxToken.toJSON(this);
        };
        KeywordWithTrailingTrivia.prototype.realize = function () {
            return SyntaxToken.realize(this);
        };
        KeywordWithTrailingTrivia.prototype.collectTextElements = function (elements) {
            SyntaxToken.collectTextElements(this, elements);
        };
        KeywordWithTrailingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        KeywordWithTrailingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return KeywordWithTrailingTrivia;
    })();    
    var KeywordWithLeadingAndTrailingTrivia = (function () {
        function KeywordWithLeadingAndTrailingTrivia(sourceText, keywordKind, fullStart, leadingTriviaInfo, trailingTriviaInfo) {
            this._sourceText = sourceText;
            this.tokenKind = 9 /* IdentifierNameToken */ ;
            this._keywordKind = keywordKind;
            this._fullStart = fullStart;
            this._leadingTriviaInfo = leadingTriviaInfo;
            this._trailingTriviaInfo = trailingTriviaInfo;
        }
        KeywordWithLeadingAndTrailingTrivia.prototype.clone = function () {
            return new KeywordWithLeadingAndTrailingTrivia(this._sourceText, this._keywordKind, this._fullStart, this._leadingTriviaInfo, this._trailingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isToken = function () {
            return true;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isNode = function () {
            return false;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isList = function () {
            return false;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isTrivia = function () {
            return false;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isTriviaList = function () {
            return false;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.isMissing = function () {
            return false;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.kind = function () {
            return 9 /* IdentifierNameToken */ ;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.keywordKind = function () {
            return this._keywordKind;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.fullWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo) + this.width() + getTriviaLength(this._trailingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.start = function () {
            return this._fullStart + getTriviaLength(this._leadingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.width = function () {
            return this.text().length;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.end = function () {
            return this.start() + this.width();
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.text = function () {
            return SyntaxFacts.getText(this._keywordKind);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.fullText = function () {
            return this._sourceText.substr(this._fullStart, this.fullWidth(), false);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.value = function () {
            return null;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.hasLeadingTrivia = function () {
            return true;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.hasLeadingCommentTrivia = function () {
            return hasTriviaComment(this._leadingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.hasLeadingNewLineTrivia = function () {
            return hasTriviaNewLine(this._leadingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.leadingTriviaWidth = function () {
            return getTriviaLength(this._leadingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.leadingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaLength(this._leadingTriviaInfo), false);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.hasTrailingTrivia = function () {
            return true;
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.hasTrailingCommentTrivia = function () {
            return hasTriviaComment(this._trailingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.hasTrailingNewLineTrivia = function () {
            return hasTriviaNewLine(this._trailingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.trailingTriviaWidth = function () {
            return getTriviaLength(this._trailingTriviaInfo);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.trailingTrivia = function () {
            return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaLength(this._trailingTriviaInfo), true);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.toJSON = function (key) {
            return SyntaxToken.toJSON(this);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.realize = function () {
            return SyntaxToken.realize(this);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.collectTextElements = function (elements) {
            SyntaxToken.collectTextElements(this, elements);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.withLeadingTrivia = function (leadingTrivia) {
            return this.realize().withLeadingTrivia(leadingTrivia);
        };
        KeywordWithLeadingAndTrailingTrivia.prototype.withTrailingTrivia = function (trailingTrivia) {
            return this.realize().withTrailingTrivia(trailingTrivia);
        };
        return KeywordWithLeadingAndTrailingTrivia;
    })();    
    function createFixedWidthToken(sourceText, fullStart, kind, leadingTriviaInfo, trailingTriviaInfo) {
        if(leadingTriviaInfo === 0) {
            if(trailingTriviaInfo === 0) {
                return new FixedWidthTokenWithNoTrivia(kind, fullStart);
            } else {
                return new FixedWidthTokenWithTrailingTrivia(sourceText, kind, fullStart, trailingTriviaInfo);
            }
        } else {
            if(trailingTriviaInfo === 0) {
                return new FixedWidthTokenWithLeadingTrivia(sourceText, kind, fullStart, leadingTriviaInfo);
            } else {
                return new FixedWidthTokenWithLeadingAndTrailingTrivia(sourceText, kind, fullStart, leadingTriviaInfo, trailingTriviaInfo);
            }
        }
    }
    function createVariableWidthToken(sourceText, fullStart, kind, leadingTriviaInfo, width, trailingTriviaInfo) {
        if(leadingTriviaInfo === 0) {
            if(trailingTriviaInfo === 0) {
                return new VariableWidthTokenWithNoTrivia(sourceText, kind, fullStart, width);
            } else {
                return new VariableWidthTokenWithTrailingTrivia(sourceText, kind, fullStart, width, trailingTriviaInfo);
            }
        } else {
            if(trailingTriviaInfo === 0) {
                return new VariableWidthTokenWithLeadingTrivia(sourceText, kind, fullStart, leadingTriviaInfo, width);
            } else {
                return new VariableWidthTokenWithLeadingAndTrailingTrivia(sourceText, kind, fullStart, leadingTriviaInfo, width, trailingTriviaInfo);
            }
        }
    }
    function createKeyword(sourceText, fullStart, keywordKind, leadingTriviaInfo, trailingTriviaInfo) {
        if(leadingTriviaInfo === 0) {
            if(trailingTriviaInfo === 0) {
                return new KeywordWithNoTrivia(keywordKind, fullStart);
            } else {
                return new KeywordWithTrailingTrivia(sourceText, keywordKind, fullStart, trailingTriviaInfo);
            }
        } else {
            if(trailingTriviaInfo === 0) {
                return new KeywordWithLeadingTrivia(sourceText, keywordKind, fullStart, leadingTriviaInfo);
            } else {
                return new KeywordWithLeadingAndTrailingTrivia(sourceText, keywordKind, fullStart, leadingTriviaInfo, trailingTriviaInfo);
            }
        }
    }
    function create(text, fullStart, kind, leadingTriviaInfo, width, trailingTriviaInfo) {
        if(SyntaxFacts.isAnyPunctuation(kind)) {
            return createFixedWidthToken(text, fullStart, kind, leadingTriviaInfo, trailingTriviaInfo);
        } else {
            if(SyntaxFacts.isAnyKeyword(kind)) {
                return createKeyword(text, fullStart, kind, leadingTriviaInfo, trailingTriviaInfo);
            } else {
                return createVariableWidthToken(text, fullStart, kind, leadingTriviaInfo, width, trailingTriviaInfo);
            }
        }
    }
    SyntaxToken.create = create;
    function getTriviaLength(value) {
        return value & 67108863 /* TriviaLengthMask */ ;
    }
    function hasTriviaComment(value) {
        return (value & 67108864 /* TriviaCommentMask */ ) !== 0;
    }
    function hasTriviaNewLine(value) {
        return (value & 134217728 /* TriviaNewLineMask */ ) !== 0;
    }
})(SyntaxToken || (SyntaxToken = {}));
var SyntaxTokenReplacer = (function (_super) {
    __extends(SyntaxTokenReplacer, _super);
    function SyntaxTokenReplacer(token1, token2) {
        _super.call(this);
        this.token1 = token1;
        this.token2 = token2;
    }
    SyntaxTokenReplacer.prototype.visitToken = function (token) {
        return token === this.token1 ? this.token2 : token;
    };
    return SyntaxTokenReplacer;
})(SyntaxRewriter);
var SyntaxTree = (function () {
    function SyntaxTree(sourceUnit, diagnostics) {
        this._sourceUnit = sourceUnit;
        this._diagnostics = diagnostics;
    }
    SyntaxTree.prototype.toJSON = function (key) {
        var result = {
        };
        if(this._diagnostics.length > 0) {
            result._diagnostics = this._diagnostics;
        }
        result._sourceUnit = this._sourceUnit;
        return result;
    };
    SyntaxTree.prototype.sourceUnit = function () {
        return this._sourceUnit;
    };
    SyntaxTree.prototype.diagnostics = function () {
        return this._diagnostics;
    };
    return SyntaxTree;
})();
var SyntaxTrivia;
(function (SyntaxTrivia) {
    var SimpleSyntaxTrivia = (function () {
        function SimpleSyntaxTrivia(kind, text) {
            this._kind = kind;
            this._text = text;
        }
        SimpleSyntaxTrivia.prototype.toJSON = function (key) {
            var result = {
            };
            result.kind = (SyntaxKind)._map[this._kind];
            result.text = this._text;
            return result;
        };
        SimpleSyntaxTrivia.prototype.isToken = function () {
            return false;
        };
        SimpleSyntaxTrivia.prototype.isNode = function () {
            return false;
        };
        SimpleSyntaxTrivia.prototype.isList = function () {
            return false;
        };
        SimpleSyntaxTrivia.prototype.isSeparatedList = function () {
            return false;
        };
        SimpleSyntaxTrivia.prototype.isTrivia = function () {
            return true;
        };
        SimpleSyntaxTrivia.prototype.isTriviaList = function () {
            return false;
        };
        SimpleSyntaxTrivia.prototype.isMissing = function () {
            return false;
        };
        SimpleSyntaxTrivia.prototype.kind = function () {
            return this._kind;
        };
        SimpleSyntaxTrivia.prototype.fullWidth = function () {
            return this._text.length;
        };
        SimpleSyntaxTrivia.prototype.fullText = function () {
            return this._text;
        };
        SimpleSyntaxTrivia.prototype.collectTextElements = function (elements) {
            elements.push(this.fullText());
        };
        return SimpleSyntaxTrivia;
    })();    
    function create(kind, text) {
        Debug.assert(kind === 6 /* MultiLineCommentTrivia */  || kind === 5 /* NewLineTrivia */  || kind === 7 /* SingleLineCommentTrivia */  || kind === 4 /* WhitespaceTrivia */  || kind === 8 /* SkippedTextTrivia */ );
        return new SimpleSyntaxTrivia(kind, text);
    }
    SyntaxTrivia.create = create;
    function createSpaces(count) {
        return create(4 /* WhitespaceTrivia */ , StringUtilities.repeat(" ", count));
    }
    SyntaxTrivia.createSpaces = createSpaces;
    function createWhitespace(text) {
        return create(4 /* WhitespaceTrivia */ , text);
    }
    SyntaxTrivia.createWhitespace = createWhitespace;
    function createMultiLineComment(text) {
        return create(6 /* MultiLineCommentTrivia */ , text);
    }
    SyntaxTrivia.createMultiLineComment = createMultiLineComment;
    SyntaxTrivia.space = createSpaces(1);
    SyntaxTrivia.lineFeed = create(5 /* NewLineTrivia */ , "\n");
    SyntaxTrivia.carriageReturn = create(5 /* NewLineTrivia */ , "\r");
    SyntaxTrivia.carriageReturnLineFeed = create(5 /* NewLineTrivia */ , "\r\n");
    function splitMultiLineCommentTriviaIntoMultipleLines(trivia) {
        Debug.assert(trivia.kind() === 6 /* MultiLineCommentTrivia */ );
        var result = [];
        var triviaText = trivia.fullText();
        var currentIndex = 0;
        for(var i = 0; i < triviaText.length; i++) {
            var ch = triviaText.charCodeAt(i);
            var isCarriageReturnLineFeed = false;
            switch(ch) {
                case 13 /* carriageReturn */ : {
                    if(i < triviaText.length - 1 && triviaText.charCodeAt(i + 1) === 10 /* lineFeed */ ) {
                        i++;
                    }

                }
                case 10 /* lineFeed */ :
                case 8233 /* paragraphSeparator */ :
                case 8232 /* lineSeparator */ : {
                    result.push(triviaText.substring(currentIndex, i + 1));
                    currentIndex = i + 1;
                    continue;

                }
            }
        }
        result.push(triviaText.substring(currentIndex));
        return result;
    }
    SyntaxTrivia.splitMultiLineCommentTriviaIntoMultipleLines = splitMultiLineCommentTriviaIntoMultipleLines;
})(SyntaxTrivia || (SyntaxTrivia = {}));
var SyntaxTriviaList;
(function (SyntaxTriviaList) {
    function collectTextElements(elements, list) {
        for(var i = 0, n = list.count(); i < n; i++) {
            list.syntaxTriviaAt(i).collectTextElements(elements);
        }
    }
    function concat(list1, list2) {
        if(list1.count() === 0) {
            return list2;
        }
        if(list2.count() === 0) {
            return list1;
        }
        var trivia = list1.toArray();
        trivia.push.apply(trivia, list2.toArray());
        return create(trivia);
    }
    var EmptySyntaxTriviaList = (function () {
        function EmptySyntaxTriviaList() { }
        EmptySyntaxTriviaList.prototype.kind = function () {
            return 3 /* TriviaList */ ;
        };
        EmptySyntaxTriviaList.prototype.isToken = function () {
            return false;
        };
        EmptySyntaxTriviaList.prototype.isNode = function () {
            return false;
        };
        EmptySyntaxTriviaList.prototype.isList = function () {
            return false;
        };
        EmptySyntaxTriviaList.prototype.isSeparatedList = function () {
            return false;
        };
        EmptySyntaxTriviaList.prototype.isTriviaList = function () {
            return true;
        };
        EmptySyntaxTriviaList.prototype.isTrivia = function () {
            return false;
        };
        EmptySyntaxTriviaList.prototype.isMissing = function () {
            return true;
        };
        EmptySyntaxTriviaList.prototype.count = function () {
            return 0;
        };
        EmptySyntaxTriviaList.prototype.syntaxTriviaAt = function (index) {
            throw Errors.argumentOutOfRange("index");
        };
        EmptySyntaxTriviaList.prototype.last = function () {
            throw Errors.argumentOutOfRange("index");
        };
        EmptySyntaxTriviaList.prototype.fullWidth = function () {
            return 0;
        };
        EmptySyntaxTriviaList.prototype.fullText = function () {
            return "";
        };
        EmptySyntaxTriviaList.prototype.hasComment = function () {
            return false;
        };
        EmptySyntaxTriviaList.prototype.hasNewLine = function () {
            return false;
        };
        EmptySyntaxTriviaList.prototype.toJSON = function (key) {
            return [];
        };
        EmptySyntaxTriviaList.prototype.collectTextElements = function (elements) {
            collectTextElements(elements, this);
        };
        EmptySyntaxTriviaList.prototype.toArray = function () {
            return [];
        };
        EmptySyntaxTriviaList.prototype.concat = function (trivia) {
            return concat(this, trivia);
        };
        return EmptySyntaxTriviaList;
    })();    
    function isComment(trivia) {
        return trivia.kind() === 6 /* MultiLineCommentTrivia */  || trivia.kind() === 7 /* SingleLineCommentTrivia */ ;
    }
    var SingletonSyntaxTriviaList = (function () {
        function SingletonSyntaxTriviaList(item) {
            this.item = item;
        }
        SingletonSyntaxTriviaList.prototype.isToken = function () {
            return false;
        };
        SingletonSyntaxTriviaList.prototype.isNode = function () {
            return false;
        };
        SingletonSyntaxTriviaList.prototype.isList = function () {
            return false;
        };
        SingletonSyntaxTriviaList.prototype.isSeparatedList = function () {
            return false;
        };
        SingletonSyntaxTriviaList.prototype.isTriviaList = function () {
            return true;
        };
        SingletonSyntaxTriviaList.prototype.isTrivia = function () {
            return false;
        };
        SingletonSyntaxTriviaList.prototype.isMissing = function () {
            return this.item.isMissing();
        };
        SingletonSyntaxTriviaList.prototype.kind = function () {
            return 3 /* TriviaList */ ;
        };
        SingletonSyntaxTriviaList.prototype.count = function () {
            return 1;
        };
        SingletonSyntaxTriviaList.prototype.syntaxTriviaAt = function (index) {
            if(index !== 0) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.item;
        };
        SingletonSyntaxTriviaList.prototype.last = function () {
            return this.item;
        };
        SingletonSyntaxTriviaList.prototype.fullWidth = function () {
            return this.item.fullWidth();
        };
        SingletonSyntaxTriviaList.prototype.fullText = function () {
            return this.item.fullText();
        };
        SingletonSyntaxTriviaList.prototype.hasComment = function () {
            return isComment(this.item);
        };
        SingletonSyntaxTriviaList.prototype.hasNewLine = function () {
            return this.item.kind() === 5 /* NewLineTrivia */ ;
        };
        SingletonSyntaxTriviaList.prototype.toJSON = function (key) {
            return [
                this.item
            ];
        };
        SingletonSyntaxTriviaList.prototype.collectTextElements = function (elements) {
            collectTextElements(elements, this);
        };
        SingletonSyntaxTriviaList.prototype.toArray = function () {
            return [
                this.item
            ];
        };
        SingletonSyntaxTriviaList.prototype.concat = function (trivia) {
            return concat(this, trivia);
        };
        return SingletonSyntaxTriviaList;
    })();    
    var NormalSyntaxTriviaList = (function () {
        function NormalSyntaxTriviaList(trivia) {
            this.trivia = trivia;
        }
        NormalSyntaxTriviaList.prototype.kind = function () {
            return 3 /* TriviaList */ ;
        };
        NormalSyntaxTriviaList.prototype.isToken = function () {
            return false;
        };
        NormalSyntaxTriviaList.prototype.isNode = function () {
            return false;
        };
        NormalSyntaxTriviaList.prototype.isList = function () {
            return false;
        };
        NormalSyntaxTriviaList.prototype.isSeparatedList = function () {
            return false;
        };
        NormalSyntaxTriviaList.prototype.isTriviaList = function () {
            return true;
        };
        NormalSyntaxTriviaList.prototype.isTrivia = function () {
            return false;
        };
        NormalSyntaxTriviaList.prototype.isMissing = function () {
            for(var i = 0, n = this.trivia.length; i < n; i++) {
                if(!this.trivia[i].isMissing()) {
                    return false;
                }
            }
            return true;
        };
        NormalSyntaxTriviaList.prototype.count = function () {
            return this.trivia.length;
        };
        NormalSyntaxTriviaList.prototype.syntaxTriviaAt = function (index) {
            if(index < 0 || index >= this.trivia.length) {
                throw Errors.argumentOutOfRange("index");
            }
            return this.trivia[index];
        };
        NormalSyntaxTriviaList.prototype.last = function () {
            return this.trivia[this.trivia.length - 1];
        };
        NormalSyntaxTriviaList.prototype.fullWidth = function () {
            return ArrayUtilities.sum(this.trivia, function (t) {
                return t.fullWidth();
            });
        };
        NormalSyntaxTriviaList.prototype.fullText = function () {
            var result = "";
            for(var i = 0, n = this.trivia.length; i < n; i++) {
                result += this.trivia[i].fullText();
            }
            return result;
        };
        NormalSyntaxTriviaList.prototype.hasComment = function () {
            return ArrayUtilities.any(this.trivia, isComment);
        };
        NormalSyntaxTriviaList.prototype.hasNewLine = function () {
            return ArrayUtilities.any(this.trivia, function (t) {
                return t.kind() === 5 /* NewLineTrivia */ ;
            });
        };
        NormalSyntaxTriviaList.prototype.toJSON = function (key) {
            return this.trivia;
        };
        NormalSyntaxTriviaList.prototype.collectTextElements = function (elements) {
            collectTextElements(elements, this);
        };
        NormalSyntaxTriviaList.prototype.toArray = function () {
            return this.trivia.slice(0);
        };
        NormalSyntaxTriviaList.prototype.concat = function (trivia) {
            return concat(this, trivia);
        };
        return NormalSyntaxTriviaList;
    })();    
    function create(trivia) {
        if(trivia === undefined || trivia === null || trivia.length === 0) {
            return SyntaxTriviaList.empty;
        }
        if(trivia.length === 1) {
            return new SingletonSyntaxTriviaList(trivia[0]);
        }
        return new NormalSyntaxTriviaList(trivia);
    }
    SyntaxTriviaList.create = create;
    SyntaxTriviaList.empty = new EmptySyntaxTriviaList();
    SyntaxTriviaList.space = create([
        SyntaxTrivia.space
    ]);
})(SyntaxTriviaList || (SyntaxTriviaList = {}));
var SyntaxWalker = (function () {
    function SyntaxWalker() { }
    SyntaxWalker.prototype.visitToken = function (token) {
    };
    SyntaxWalker.prototype.visitOptionalToken = function (token) {
        if(token === null) {
            return;
        }
        this.visitToken(token);
    };
    SyntaxWalker.prototype.visitOptionalNode = function (node) {
        if(node === null) {
            return;
        }
        node.accept1(this);
    };
    SyntaxWalker.prototype.visitList = function (list) {
        for(var i = 0, n = list.count(); i < n; i++) {
            list.syntaxNodeAt(i).accept(this);
        }
    };
    SyntaxWalker.prototype.visitSeparatedList = function (list) {
        for(var i = 0, n = list.count(); i < n; i++) {
            var item = list.itemAt(i);
            if(item.isToken()) {
                this.visitToken(item);
            } else {
                (item).accept(this);
            }
        }
    };
    SyntaxWalker.prototype.visitSourceUnit = function (node) {
        this.visitList(node.moduleElements());
        this.visitToken(node.endOfFileToken());
    };
    SyntaxWalker.prototype.visitExternalModuleReference = function (node) {
        this.visitToken(node.moduleKeyword());
        this.visitToken(node.openParenToken());
        this.visitToken(node.stringLiteral());
        this.visitToken(node.closeParenToken());
    };
    SyntaxWalker.prototype.visitModuleNameModuleReference = function (node) {
        node.moduleName().accept(this);
    };
    SyntaxWalker.prototype.visitImportDeclaration = function (node) {
        this.visitToken(node.importKeyword());
        this.visitToken(node.identifier());
        this.visitToken(node.equalsToken());
        node.moduleReference().accept(this);
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitClassDeclaration = function (node) {
        this.visitOptionalToken(node.exportKeyword());
        this.visitOptionalToken(node.declareKeyword());
        this.visitToken(node.classKeyword());
        this.visitToken(node.identifier());
        this.visitOptionalNode(node.extendsClause());
        this.visitOptionalNode(node.implementsClause());
        this.visitToken(node.openBraceToken());
        this.visitList(node.classElements());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitInterfaceDeclaration = function (node) {
        this.visitOptionalToken(node.exportKeyword());
        this.visitToken(node.interfaceKeyword());
        this.visitToken(node.identifier());
        this.visitOptionalNode(node.extendsClause());
        node.body().accept(this);
    };
    SyntaxWalker.prototype.visitExtendsClause = function (node) {
        this.visitToken(node.extendsKeyword());
        this.visitSeparatedList(node.typeNames());
    };
    SyntaxWalker.prototype.visitImplementsClause = function (node) {
        this.visitToken(node.implementsKeyword());
        this.visitSeparatedList(node.typeNames());
    };
    SyntaxWalker.prototype.visitModuleDeclaration = function (node) {
        this.visitOptionalToken(node.exportKeyword());
        this.visitOptionalToken(node.declareKeyword());
        this.visitToken(node.moduleKeyword());
        this.visitOptionalNode(node.moduleName());
        this.visitOptionalToken(node.stringLiteral());
        this.visitToken(node.openBraceToken());
        this.visitList(node.moduleElements());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitFunctionDeclaration = function (node) {
        this.visitOptionalToken(node.exportKeyword());
        this.visitOptionalToken(node.declareKeyword());
        this.visitToken(node.functionKeyword());
        node.functionSignature().accept(this);
        this.visitOptionalNode(node.block());
        this.visitOptionalToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitVariableStatement = function (node) {
        this.visitOptionalToken(node.exportKeyword());
        this.visitOptionalToken(node.declareKeyword());
        node.variableDeclaration().accept(this);
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitVariableDeclaration = function (node) {
        this.visitToken(node.varKeyword());
        this.visitSeparatedList(node.variableDeclarators());
    };
    SyntaxWalker.prototype.visitVariableDeclarator = function (node) {
        this.visitToken(node.identifier());
        this.visitOptionalNode(node.typeAnnotation());
        this.visitOptionalNode(node.equalsValueClause());
    };
    SyntaxWalker.prototype.visitEqualsValueClause = function (node) {
        this.visitToken(node.equalsToken());
        node.value().accept(this);
    };
    SyntaxWalker.prototype.visitPrefixUnaryExpression = function (node) {
        this.visitToken(node.operatorToken());
        node.operand().accept(this);
    };
    SyntaxWalker.prototype.visitThisExpression = function (node) {
        this.visitToken(node.thisKeyword());
    };
    SyntaxWalker.prototype.visitLiteralExpression = function (node) {
        this.visitToken(node.literalToken());
    };
    SyntaxWalker.prototype.visitArrayLiteralExpression = function (node) {
        this.visitToken(node.openBracketToken());
        this.visitSeparatedList(node.expressions());
        this.visitToken(node.closeBracketToken());
    };
    SyntaxWalker.prototype.visitOmittedExpression = function (node) {
    };
    SyntaxWalker.prototype.visitParenthesizedExpression = function (node) {
        this.visitToken(node.openParenToken());
        node.expression().accept(this);
        this.visitToken(node.closeParenToken());
    };
    SyntaxWalker.prototype.visitSimpleArrowFunctionExpression = function (node) {
        this.visitToken(node.identifier());
        this.visitToken(node.equalsGreaterThanToken());
        node.body().accept(this);
    };
    SyntaxWalker.prototype.visitParenthesizedArrowFunctionExpression = function (node) {
        node.callSignature().accept(this);
        this.visitToken(node.equalsGreaterThanToken());
        node.body().accept(this);
    };
    SyntaxWalker.prototype.visitIdentifierName = function (node) {
        this.visitToken(node.identifier());
    };
    SyntaxWalker.prototype.visitQualifiedName = function (node) {
        node.left().accept(this);
        this.visitToken(node.dotToken());
        node.right().accept(this);
    };
    SyntaxWalker.prototype.visitConstructorType = function (node) {
        this.visitToken(node.newKeyword());
        node.parameterList().accept(this);
        this.visitToken(node.equalsGreaterThanToken());
        node.type().accept(this);
    };
    SyntaxWalker.prototype.visitFunctionType = function (node) {
        node.parameterList().accept(this);
        this.visitToken(node.equalsGreaterThanToken());
        node.type().accept(this);
    };
    SyntaxWalker.prototype.visitObjectType = function (node) {
        this.visitToken(node.openBraceToken());
        this.visitSeparatedList(node.typeMembers());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitArrayType = function (node) {
        node.type().accept(this);
        this.visitToken(node.openBracketToken());
        this.visitToken(node.closeBracketToken());
    };
    SyntaxWalker.prototype.visitPredefinedType = function (node) {
        this.visitToken(node.keyword());
    };
    SyntaxWalker.prototype.visitTypeAnnotation = function (node) {
        this.visitToken(node.colonToken());
        node.type().accept(this);
    };
    SyntaxWalker.prototype.visitBlock = function (node) {
        this.visitToken(node.openBraceToken());
        this.visitList(node.statements());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitParameter = function (node) {
        this.visitOptionalToken(node.dotDotDotToken());
        this.visitOptionalToken(node.publicOrPrivateKeyword());
        this.visitToken(node.identifier());
        this.visitOptionalToken(node.questionToken());
        this.visitOptionalNode(node.typeAnnotation());
        this.visitOptionalNode(node.equalsValueClause());
    };
    SyntaxWalker.prototype.visitMemberAccessExpression = function (node) {
        node.expression().accept(this);
        this.visitToken(node.dotToken());
        node.identifierName().accept(this);
    };
    SyntaxWalker.prototype.visitPostfixUnaryExpression = function (node) {
        node.operand().accept(this);
        this.visitToken(node.operatorToken());
    };
    SyntaxWalker.prototype.visitElementAccessExpression = function (node) {
        node.expression().accept(this);
        this.visitToken(node.openBracketToken());
        node.argumentExpression().accept(this);
        this.visitToken(node.closeBracketToken());
    };
    SyntaxWalker.prototype.visitInvocationExpression = function (node) {
        node.expression().accept(this);
        node.argumentList().accept(this);
    };
    SyntaxWalker.prototype.visitArgumentList = function (node) {
        this.visitToken(node.openParenToken());
        this.visitSeparatedList(node.arguments());
        this.visitToken(node.closeParenToken());
    };
    SyntaxWalker.prototype.visitBinaryExpression = function (node) {
        node.left().accept(this);
        this.visitToken(node.operatorToken());
        node.right().accept(this);
    };
    SyntaxWalker.prototype.visitConditionalExpression = function (node) {
        node.condition().accept(this);
        this.visitToken(node.questionToken());
        node.whenTrue().accept(this);
        this.visitToken(node.colonToken());
        node.whenFalse().accept(this);
    };
    SyntaxWalker.prototype.visitConstructSignature = function (node) {
        this.visitToken(node.newKeyword());
        node.parameterList().accept(this);
        this.visitOptionalNode(node.typeAnnotation());
    };
    SyntaxWalker.prototype.visitFunctionSignature = function (node) {
        this.visitToken(node.identifier());
        this.visitOptionalToken(node.questionToken());
        node.parameterList().accept(this);
        this.visitOptionalNode(node.typeAnnotation());
    };
    SyntaxWalker.prototype.visitIndexSignature = function (node) {
        this.visitToken(node.openBracketToken());
        node.parameter().accept(this);
        this.visitToken(node.closeBracketToken());
        this.visitOptionalNode(node.typeAnnotation());
    };
    SyntaxWalker.prototype.visitPropertySignature = function (node) {
        this.visitToken(node.identifier());
        this.visitOptionalToken(node.questionToken());
        this.visitOptionalNode(node.typeAnnotation());
    };
    SyntaxWalker.prototype.visitParameterList = function (node) {
        this.visitToken(node.openParenToken());
        this.visitSeparatedList(node.parameters());
        this.visitToken(node.closeParenToken());
    };
    SyntaxWalker.prototype.visitCallSignature = function (node) {
        node.parameterList().accept(this);
        this.visitOptionalNode(node.typeAnnotation());
    };
    SyntaxWalker.prototype.visitElseClause = function (node) {
        this.visitToken(node.elseKeyword());
        node.statement().accept(this);
    };
    SyntaxWalker.prototype.visitIfStatement = function (node) {
        this.visitToken(node.ifKeyword());
        this.visitToken(node.openParenToken());
        node.condition().accept(this);
        this.visitToken(node.closeParenToken());
        node.statement().accept(this);
        this.visitOptionalNode(node.elseClause());
    };
    SyntaxWalker.prototype.visitExpressionStatement = function (node) {
        node.expression().accept(this);
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitConstructorDeclaration = function (node) {
        this.visitToken(node.constructorKeyword());
        node.parameterList().accept(this);
        this.visitOptionalNode(node.block());
        this.visitOptionalToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitMemberFunctionDeclaration = function (node) {
        this.visitOptionalToken(node.publicOrPrivateKeyword());
        this.visitOptionalToken(node.staticKeyword());
        node.functionSignature().accept(this);
        this.visitOptionalNode(node.block());
        this.visitOptionalToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitGetMemberAccessorDeclaration = function (node) {
        this.visitOptionalToken(node.publicOrPrivateKeyword());
        this.visitOptionalToken(node.staticKeyword());
        this.visitToken(node.getKeyword());
        this.visitToken(node.identifier());
        node.parameterList().accept(this);
        this.visitOptionalNode(node.typeAnnotation());
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitSetMemberAccessorDeclaration = function (node) {
        this.visitOptionalToken(node.publicOrPrivateKeyword());
        this.visitOptionalToken(node.staticKeyword());
        this.visitToken(node.setKeyword());
        this.visitToken(node.identifier());
        node.parameterList().accept(this);
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitMemberVariableDeclaration = function (node) {
        this.visitOptionalToken(node.publicOrPrivateKeyword());
        this.visitOptionalToken(node.staticKeyword());
        node.variableDeclarator().accept(this);
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitThrowStatement = function (node) {
        this.visitToken(node.throwKeyword());
        node.expression().accept(this);
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitReturnStatement = function (node) {
        this.visitToken(node.returnKeyword());
        this.visitOptionalNode(node.expression());
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitObjectCreationExpression = function (node) {
        this.visitToken(node.newKeyword());
        node.expression().accept(this);
        this.visitOptionalNode(node.argumentList());
    };
    SyntaxWalker.prototype.visitSwitchStatement = function (node) {
        this.visitToken(node.switchKeyword());
        this.visitToken(node.openParenToken());
        node.expression().accept(this);
        this.visitToken(node.closeParenToken());
        this.visitToken(node.openBraceToken());
        this.visitList(node.caseClauses());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitCaseSwitchClause = function (node) {
        this.visitToken(node.caseKeyword());
        node.expression().accept(this);
        this.visitToken(node.colonToken());
        this.visitList(node.statements());
    };
    SyntaxWalker.prototype.visitDefaultSwitchClause = function (node) {
        this.visitToken(node.defaultKeyword());
        this.visitToken(node.colonToken());
        this.visitList(node.statements());
    };
    SyntaxWalker.prototype.visitBreakStatement = function (node) {
        this.visitToken(node.breakKeyword());
        this.visitOptionalToken(node.identifier());
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitContinueStatement = function (node) {
        this.visitToken(node.continueKeyword());
        this.visitOptionalToken(node.identifier());
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitForStatement = function (node) {
        this.visitToken(node.forKeyword());
        this.visitToken(node.openParenToken());
        this.visitOptionalNode(node.variableDeclaration());
        this.visitOptionalNode(node.initializer());
        this.visitToken(node.firstSemicolonToken());
        this.visitOptionalNode(node.condition());
        this.visitToken(node.secondSemicolonToken());
        this.visitOptionalNode(node.incrementor());
        this.visitToken(node.closeParenToken());
        node.statement().accept(this);
    };
    SyntaxWalker.prototype.visitForInStatement = function (node) {
        this.visitToken(node.forKeyword());
        this.visitToken(node.openParenToken());
        this.visitOptionalNode(node.variableDeclaration());
        this.visitOptionalNode(node.left());
        this.visitToken(node.inKeyword());
        node.expression().accept(this);
        this.visitToken(node.closeParenToken());
        node.statement().accept(this);
    };
    SyntaxWalker.prototype.visitWhileStatement = function (node) {
        this.visitToken(node.whileKeyword());
        this.visitToken(node.openParenToken());
        node.condition().accept(this);
        this.visitToken(node.closeParenToken());
        node.statement().accept(this);
    };
    SyntaxWalker.prototype.visitWithStatement = function (node) {
        this.visitToken(node.withKeyword());
        this.visitToken(node.openParenToken());
        node.condition().accept(this);
        this.visitToken(node.closeParenToken());
        node.statement().accept(this);
    };
    SyntaxWalker.prototype.visitEnumDeclaration = function (node) {
        this.visitOptionalToken(node.exportKeyword());
        this.visitToken(node.enumKeyword());
        this.visitToken(node.identifier());
        this.visitToken(node.openBraceToken());
        this.visitSeparatedList(node.variableDeclarators());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitCastExpression = function (node) {
        this.visitToken(node.lessThanToken());
        node.type().accept(this);
        this.visitToken(node.greaterThanToken());
        node.expression().accept(this);
    };
    SyntaxWalker.prototype.visitObjectLiteralExpression = function (node) {
        this.visitToken(node.openBraceToken());
        this.visitSeparatedList(node.propertyAssignments());
        this.visitToken(node.closeBraceToken());
    };
    SyntaxWalker.prototype.visitSimplePropertyAssignment = function (node) {
        this.visitToken(node.propertyName());
        this.visitToken(node.colonToken());
        node.expression().accept(this);
    };
    SyntaxWalker.prototype.visitGetAccessorPropertyAssignment = function (node) {
        this.visitToken(node.getKeyword());
        this.visitToken(node.propertyName());
        this.visitToken(node.openParenToken());
        this.visitToken(node.closeParenToken());
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitSetAccessorPropertyAssignment = function (node) {
        this.visitToken(node.setKeyword());
        this.visitToken(node.propertyName());
        this.visitToken(node.openParenToken());
        this.visitToken(node.parameterName());
        this.visitToken(node.closeParenToken());
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitFunctionExpression = function (node) {
        this.visitToken(node.functionKeyword());
        this.visitOptionalToken(node.identifier());
        node.callSignature().accept(this);
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitEmptyStatement = function (node) {
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitSuperExpression = function (node) {
        this.visitToken(node.superKeyword());
    };
    SyntaxWalker.prototype.visitTryStatement = function (node) {
        this.visitToken(node.tryKeyword());
        node.block().accept(this);
        this.visitOptionalNode(node.catchClause());
        this.visitOptionalNode(node.finallyClause());
    };
    SyntaxWalker.prototype.visitCatchClause = function (node) {
        this.visitToken(node.catchKeyword());
        this.visitToken(node.openParenToken());
        this.visitToken(node.identifier());
        this.visitToken(node.closeParenToken());
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitFinallyClause = function (node) {
        this.visitToken(node.finallyKeyword());
        node.block().accept(this);
    };
    SyntaxWalker.prototype.visitLabeledStatement = function (node) {
        this.visitToken(node.identifier());
        this.visitToken(node.colonToken());
        node.statement().accept(this);
    };
    SyntaxWalker.prototype.visitDoStatement = function (node) {
        this.visitToken(node.doKeyword());
        node.statement().accept(this);
        this.visitToken(node.whileKeyword());
        this.visitToken(node.openParenToken());
        node.condition().accept(this);
        this.visitToken(node.closeParenToken());
        this.visitToken(node.semicolonToken());
    };
    SyntaxWalker.prototype.visitTypeOfExpression = function (node) {
        this.visitToken(node.typeOfKeyword());
        node.expression().accept(this);
    };
    SyntaxWalker.prototype.visitDeleteExpression = function (node) {
        this.visitToken(node.deleteKeyword());
        node.expression().accept(this);
    };
    SyntaxWalker.prototype.visitVoidExpression = function (node) {
        this.visitToken(node.voidKeyword());
        node.expression().accept(this);
    };
    SyntaxWalker.prototype.visitDebuggerStatement = function (node) {
        this.visitToken(node.debuggerKeyword());
        this.visitToken(node.semicolonToken());
    };
    return SyntaxWalker;
})();
var SyntaxInformationMap = (function (_super) {
    __extends(SyntaxInformationMap, _super);
    function SyntaxInformationMap() {
        _super.apply(this, arguments);

        this.tokenToInformation = new HashTable(HashTable.DefaultCapacity, SyntaxToken.hashCode);
        this._previousToken = null;
        this._previousTokenInformation = null;
        this._currentPosition = 0;
    }
    SyntaxInformationMap.create = function create(node) {
        var map = new SyntaxInformationMap();
        node.accept(map);
        return map;
    }
    SyntaxInformationMap.prototype.visitToken = function (token) {
        var tokenInformation = {
            fullStart: this._currentPosition,
            previousToken: this._previousToken,
            nextToken: null
        };
        if(this._previousTokenInformation !== null) {
            this._previousTokenInformation.nextToken = token;
        }
        this._previousToken = token;
        this._currentPosition += token.fullWidth();
        this._previousTokenInformation = tokenInformation;
        this.tokenToInformation.add(token, tokenInformation);
    };
    SyntaxInformationMap.prototype.fullStart = function (token) {
        return this.tokenInformation(token).fullStart;
    };
    SyntaxInformationMap.prototype.start = function (token) {
        return this.fullStart(token) + token.leadingTriviaWidth();
    };
    SyntaxInformationMap.prototype.previousToken = function (token) {
        return this.tokenInformation(token).previousToken;
    };
    SyntaxInformationMap.prototype.tokenInformation = function (token) {
        return this.tokenToInformation.get(token);
    };
    SyntaxInformationMap.prototype.firstTokenInLineContainingToken = function (token) {
        var current = token;
        while(true) {
            var information = this.tokenInformation(current);
            if(this.isFirstTokenInLineWorker(information)) {
                break;
            }
            current = information.previousToken;
        }
        return current;
    };
    SyntaxInformationMap.prototype.isFirstTokenInLine = function (token) {
        var information = this.tokenInformation(token);
        return this.isFirstTokenInLineWorker(information);
    };
    SyntaxInformationMap.prototype.isFirstTokenInLineWorker = function (information) {
        return information.previousToken === null || information.previousToken.hasTrailingNewLineTrivia();
    };
    return SyntaxInformationMap;
})(SyntaxWalker);
var SyntaxNodeInvariantsChecker = (function (_super) {
    __extends(SyntaxNodeInvariantsChecker, _super);
    function SyntaxNodeInvariantsChecker() {
        _super.apply(this, arguments);

        this.tokenTable = new HashTable(HashTable.DefaultCapacity, SyntaxToken.hashCode);
    }
    SyntaxNodeInvariantsChecker.checkInvariants = function checkInvariants(node) {
        node.accept(new SyntaxNodeInvariantsChecker());
    }
    SyntaxNodeInvariantsChecker.prototype.visitToken = function (token) {
        this.tokenTable.add(token, token);
    };
    return SyntaxNodeInvariantsChecker;
})(SyntaxWalker);
var TextChangeRange = (function () {
    function TextChangeRange(span, newLength) {
        this._span = null;
        this._newLength = 0;
        if(newLength < 0) {
            throw Errors.argumentOutOfRange("newLength");
        }
        this._span = span;
        this._newLength = newLength;
    }
    TextChangeRange.prototype.span = function () {
        return this._span;
    };
    TextChangeRange.prototype.newLength = function () {
        return this._newLength;
    };
    TextChangeRange.collapse = function collapse(changes) {
        var diff = 0;
        var start = 1073741823 /* Max31BitInteger */ ;
        var end = 0;
        for(var i = 0; i < changes.length; i++) {
            var change = changes[i];
            diff += change.newLength() - change.span().length();
            if(change.span().start() < start) {
                start = change.span().start();
            }
            if(change.span().end() > end) {
                end = change.span().end();
            }
        }
        if(start > end) {
            return null;
        }
        var combined = TextSpan.fromBounds(start, end);
        var newLen = combined.length() + diff;
        return new TextChangeRange(combined, newLen);
    }
    return TextChangeRange;
})();
var TextLine = (function () {
    function TextLine(text, body, lineBreakLength, lineNumber) {
        this._text = null;
        this._textSpan = null;
        Contract.throwIfNull(text);
        Contract.throwIfFalse(lineBreakLength >= 0);
        Contract.requires(lineNumber >= 0);
        this._text = text;
        this._textSpan = body;
        this._lineBreakLength = lineBreakLength;
        this._lineNumber = lineNumber;
    }
    TextLine.prototype.start = function () {
        return this._textSpan.start();
    };
    TextLine.prototype.end = function () {
        return this._textSpan.end();
    };
    TextLine.prototype.endIncludingLineBreak = function () {
        return this.end() + this._lineBreakLength;
    };
    TextLine.prototype.extent = function () {
        return this._textSpan;
    };
    TextLine.prototype.extentIncludingLineBreak = function () {
        return TextSpan.fromBounds(this.start(), this.endIncludingLineBreak());
    };
    TextLine.prototype.toString = function () {
        return this._text.toString(this._textSpan);
    };
    TextLine.prototype.lineNumber = function () {
        return this._lineNumber;
    };
    return TextLine;
})();
var TextSpan = (function () {
    function TextSpan(start, length) {
        this._start = 0;
        this._length = 0;
        if(start < 0) {
            Errors.argument("start");
        }
        if(start + length < start) {
            throw new Error("length");
        }
        this._start = start;
        this._length = length;
    }
    TextSpan.prototype.start = function () {
        return this._start;
    };
    TextSpan.prototype.length = function () {
        return this._length;
    };
    TextSpan.prototype.end = function () {
        return this._start + this._length;
    };
    TextSpan.prototype.isEmpty = function () {
        return this._length === 0;
    };
    TextSpan.prototype.containsPosition = function (position) {
        return position >= this._start && position < this.end();
    };
    TextSpan.prototype.containsTextSpan = function (span) {
        return span._start >= this._start && span.end() <= this.end();
    };
    TextSpan.prototype.overlapsWith = function (span) {
        var overlapStart = MathPrototype.max(this._start, span._start);
        var overlapEnd = MathPrototype.min(this.end(), span.end());
        return overlapStart < overlapEnd;
    };
    TextSpan.prototype.overlap = function (span) {
        var overlapStart = MathPrototype.max(this._start, span._start);
        var overlapEnd = MathPrototype.min(this.end(), span.end());
        if(overlapStart < overlapEnd) {
            return TextSpan.fromBounds(overlapStart, overlapEnd);
        }
        return null;
    };
    TextSpan.prototype.intersectsWithTextSpan = function (span) {
        return span._start <= this.end() && span.end() >= this._start;
    };
    TextSpan.prototype.intersectsWithPosition = function (position) {
        return position <= this.end() && position >= this._start;
    };
    TextSpan.prototype.intersection = function (span) {
        var intersectStart = MathPrototype.max(this._start, span._start);
        var intersectEnd = MathPrototype.min(this.end(), span.end());
        if(intersectStart <= intersectEnd) {
            return TextSpan.fromBounds(intersectStart, intersectEnd);
        }
        return null;
    };
    TextSpan.fromBounds = function fromBounds(start, end) {
        Contract.requires(start >= 0);
        Contract.requires(end - start >= 0);
        return new TextSpan(start, end - start);
    }
    return TextSpan;
})();
var LinebreakInfo = (function () {
    function LinebreakInfo(startPosition, length) {
        this.startPosition = startPosition;
        this.length = length;
    }
    return LinebreakInfo;
})();
var TextUtilities = (function () {
    function TextUtilities() { }
    TextUtilities.getStartAndLengthOfLineBreakEndingAt = function getStartAndLengthOfLineBreakEndingAt(text, index, info) {
        var c = text.charCodeAt(index);
        if(c === 10 /* lineFeed */ ) {
            if(index > 0 && text.charCodeAt(index - 1) === 13 /* carriageReturn */ ) {
                info.startPosition = index - 1;
                info.length = 2;
            } else {
                info.startPosition = index;
                info.length = 1;
            }
        } else {
            if(TextUtilities.isAnyLineBreakCharacter(c)) {
                info.startPosition = index;
                info.length = 1;
            } else {
                info.startPosition = index + 1;
                info.length = 0;
            }
        }
    }
    TextUtilities.isAnyLineBreakCharacter = function isAnyLineBreakCharacter(c) {
        return c === 10 /* lineFeed */  || c === 13 /* carriageReturn */  || c === 133 /* nextLine */  || c === 8232 /* lineSeparator */  || c === 8233 /* paragraphSeparator */ ;
    }
    TextUtilities.getLengthOfLineBreak = function getLengthOfLineBreak(text, index) {
        var c = text.charCodeAt(index);
        if(c > 13 /* carriageReturn */  && c <= 127) {
            return 0;
        }
        return this.getLengthOfLineBreakSlow(text, index, c);
    }
    TextUtilities.getLengthOfLineBreakSlow = function getLengthOfLineBreakSlow(text, index, c) {
        if(c === 13 /* carriageReturn */ ) {
            var next = index + 1;
            return (next < text.length()) && 10 /* lineFeed */  === text.charCodeAt(next) ? 2 : 1;
        } else {
            if(TextUtilities.isAnyLineBreakCharacter(c)) {
                return 1;
            } else {
                return 0;
            }
        }
    }
    return TextUtilities;
})();
var Unicode = (function () {
    function Unicode() { }
    Unicode.unicodeES3IdentifierStart = [
        170, 
        170, 
        181, 
        181, 
        186, 
        186, 
        192, 
        214, 
        216, 
        246, 
        248, 
        543, 
        546, 
        563, 
        592, 
        685, 
        688, 
        696, 
        699, 
        705, 
        720, 
        721, 
        736, 
        740, 
        750, 
        750, 
        890, 
        890, 
        902, 
        902, 
        904, 
        906, 
        908, 
        908, 
        910, 
        929, 
        931, 
        974, 
        976, 
        983, 
        986, 
        1011, 
        1024, 
        1153, 
        1164, 
        1220, 
        1223, 
        1224, 
        1227, 
        1228, 
        1232, 
        1269, 
        1272, 
        1273, 
        1329, 
        1366, 
        1369, 
        1369, 
        1377, 
        1415, 
        1488, 
        1514, 
        1520, 
        1522, 
        1569, 
        1594, 
        1600, 
        1610, 
        1649, 
        1747, 
        1749, 
        1749, 
        1765, 
        1766, 
        1786, 
        1788, 
        1808, 
        1808, 
        1810, 
        1836, 
        1920, 
        1957, 
        2309, 
        2361, 
        2365, 
        2365, 
        2384, 
        2384, 
        2392, 
        2401, 
        2437, 
        2444, 
        2447, 
        2448, 
        2451, 
        2472, 
        2474, 
        2480, 
        2482, 
        2482, 
        2486, 
        2489, 
        2524, 
        2525, 
        2527, 
        2529, 
        2544, 
        2545, 
        2565, 
        2570, 
        2575, 
        2576, 
        2579, 
        2600, 
        2602, 
        2608, 
        2610, 
        2611, 
        2613, 
        2614, 
        2616, 
        2617, 
        2649, 
        2652, 
        2654, 
        2654, 
        2674, 
        2676, 
        2693, 
        2699, 
        2701, 
        2701, 
        2703, 
        2705, 
        2707, 
        2728, 
        2730, 
        2736, 
        2738, 
        2739, 
        2741, 
        2745, 
        2749, 
        2749, 
        2768, 
        2768, 
        2784, 
        2784, 
        2821, 
        2828, 
        2831, 
        2832, 
        2835, 
        2856, 
        2858, 
        2864, 
        2866, 
        2867, 
        2870, 
        2873, 
        2877, 
        2877, 
        2908, 
        2909, 
        2911, 
        2913, 
        2949, 
        2954, 
        2958, 
        2960, 
        2962, 
        2965, 
        2969, 
        2970, 
        2972, 
        2972, 
        2974, 
        2975, 
        2979, 
        2980, 
        2984, 
        2986, 
        2990, 
        2997, 
        2999, 
        3001, 
        3077, 
        3084, 
        3086, 
        3088, 
        3090, 
        3112, 
        3114, 
        3123, 
        3125, 
        3129, 
        3168, 
        3169, 
        3205, 
        3212, 
        3214, 
        3216, 
        3218, 
        3240, 
        3242, 
        3251, 
        3253, 
        3257, 
        3294, 
        3294, 
        3296, 
        3297, 
        3333, 
        3340, 
        3342, 
        3344, 
        3346, 
        3368, 
        3370, 
        3385, 
        3424, 
        3425, 
        3461, 
        3478, 
        3482, 
        3505, 
        3507, 
        3515, 
        3517, 
        3517, 
        3520, 
        3526, 
        3585, 
        3632, 
        3634, 
        3635, 
        3648, 
        3654, 
        3713, 
        3714, 
        3716, 
        3716, 
        3719, 
        3720, 
        3722, 
        3722, 
        3725, 
        3725, 
        3732, 
        3735, 
        3737, 
        3743, 
        3745, 
        3747, 
        3749, 
        3749, 
        3751, 
        3751, 
        3754, 
        3755, 
        3757, 
        3760, 
        3762, 
        3763, 
        3773, 
        3773, 
        3776, 
        3780, 
        3782, 
        3782, 
        3804, 
        3805, 
        3840, 
        3840, 
        3904, 
        3911, 
        3913, 
        3946, 
        3976, 
        3979, 
        4096, 
        4129, 
        4131, 
        4135, 
        4137, 
        4138, 
        4176, 
        4181, 
        4256, 
        4293, 
        4304, 
        4342, 
        4352, 
        4441, 
        4447, 
        4514, 
        4520, 
        4601, 
        4608, 
        4614, 
        4616, 
        4678, 
        4680, 
        4680, 
        4682, 
        4685, 
        4688, 
        4694, 
        4696, 
        4696, 
        4698, 
        4701, 
        4704, 
        4742, 
        4744, 
        4744, 
        4746, 
        4749, 
        4752, 
        4782, 
        4784, 
        4784, 
        4786, 
        4789, 
        4792, 
        4798, 
        4800, 
        4800, 
        4802, 
        4805, 
        4808, 
        4814, 
        4816, 
        4822, 
        4824, 
        4846, 
        4848, 
        4878, 
        4880, 
        4880, 
        4882, 
        4885, 
        4888, 
        4894, 
        4896, 
        4934, 
        4936, 
        4954, 
        5024, 
        5108, 
        5121, 
        5740, 
        5743, 
        5750, 
        5761, 
        5786, 
        5792, 
        5866, 
        6016, 
        6067, 
        6176, 
        6263, 
        6272, 
        6312, 
        7680, 
        7835, 
        7840, 
        7929, 
        7936, 
        7957, 
        7960, 
        7965, 
        7968, 
        8005, 
        8008, 
        8013, 
        8016, 
        8023, 
        8025, 
        8025, 
        8027, 
        8027, 
        8029, 
        8029, 
        8031, 
        8061, 
        8064, 
        8116, 
        8118, 
        8124, 
        8126, 
        8126, 
        8130, 
        8132, 
        8134, 
        8140, 
        8144, 
        8147, 
        8150, 
        8155, 
        8160, 
        8172, 
        8178, 
        8180, 
        8182, 
        8188, 
        8319, 
        8319, 
        8450, 
        8450, 
        8455, 
        8455, 
        8458, 
        8467, 
        8469, 
        8469, 
        8473, 
        8477, 
        8484, 
        8484, 
        8486, 
        8486, 
        8488, 
        8488, 
        8490, 
        8493, 
        8495, 
        8497, 
        8499, 
        8505, 
        8544, 
        8579, 
        12293, 
        12295, 
        12321, 
        12329, 
        12337, 
        12341, 
        12344, 
        12346, 
        12353, 
        12436, 
        12445, 
        12446, 
        12449, 
        12538, 
        12540, 
        12542, 
        12549, 
        12588, 
        12593, 
        12686, 
        12704, 
        12727, 
        13312, 
        13312, 
        19893, 
        19893, 
        19968, 
        19968, 
        40869, 
        40869, 
        40960, 
        42124, 
        44032, 
        44032, 
        55203, 
        55203, 
        63744, 
        64045, 
        64256, 
        64262, 
        64275, 
        64279, 
        64285, 
        64285, 
        64287, 
        64296, 
        64298, 
        64310, 
        64312, 
        64316, 
        64318, 
        64318, 
        64320, 
        64321, 
        64323, 
        64324, 
        64326, 
        64433, 
        64467, 
        64829, 
        64848, 
        64911, 
        64914, 
        64967, 
        65008, 
        65019, 
        65136, 
        65138, 
        65140, 
        65140, 
        65142, 
        65276, 
        65313, 
        65338, 
        65345, 
        65370, 
        65382, 
        65470, 
        65474, 
        65479, 
        65482, 
        65487, 
        65490, 
        65495, 
        65498, 
        65500
    ];
    Unicode.unicodeES3IdentifierPart = [
        768, 
        846, 
        864, 
        866, 
        1155, 
        1158, 
        1425, 
        1441, 
        1443, 
        1465, 
        1467, 
        1469, 
        1471, 
        1471, 
        1473, 
        1474, 
        1476, 
        1476, 
        1611, 
        1621, 
        1632, 
        1641, 
        1648, 
        1648, 
        1750, 
        1756, 
        1759, 
        1764, 
        1767, 
        1768, 
        1770, 
        1773, 
        1776, 
        1785, 
        1809, 
        1809, 
        1840, 
        1866, 
        1958, 
        1968, 
        2305, 
        2307, 
        2364, 
        2364, 
        2366, 
        2381, 
        2385, 
        2388, 
        2402, 
        2403, 
        2406, 
        2415, 
        2433, 
        2435, 
        2492, 
        2492, 
        2494, 
        2500, 
        2503, 
        2504, 
        2507, 
        2509, 
        2519, 
        2519, 
        2530, 
        2531, 
        2534, 
        2543, 
        2562, 
        2562, 
        2620, 
        2620, 
        2622, 
        2626, 
        2631, 
        2632, 
        2635, 
        2637, 
        2662, 
        2673, 
        2689, 
        2691, 
        2748, 
        2748, 
        2750, 
        2757, 
        2759, 
        2761, 
        2763, 
        2765, 
        2790, 
        2799, 
        2817, 
        2819, 
        2876, 
        2876, 
        2878, 
        2883, 
        2887, 
        2888, 
        2891, 
        2893, 
        2902, 
        2903, 
        2918, 
        2927, 
        2946, 
        2947, 
        3006, 
        3010, 
        3014, 
        3016, 
        3018, 
        3021, 
        3031, 
        3031, 
        3047, 
        3055, 
        3073, 
        3075, 
        3134, 
        3140, 
        3142, 
        3144, 
        3146, 
        3149, 
        3157, 
        3158, 
        3174, 
        3183, 
        3202, 
        3203, 
        3262, 
        3268, 
        3270, 
        3272, 
        3274, 
        3277, 
        3285, 
        3286, 
        3302, 
        3311, 
        3330, 
        3331, 
        3390, 
        3395, 
        3398, 
        3400, 
        3402, 
        3405, 
        3415, 
        3415, 
        3430, 
        3439, 
        3458, 
        3459, 
        3530, 
        3530, 
        3535, 
        3540, 
        3542, 
        3542, 
        3544, 
        3551, 
        3570, 
        3571, 
        3633, 
        3633, 
        3636, 
        3642, 
        3655, 
        3662, 
        3664, 
        3673, 
        3761, 
        3761, 
        3764, 
        3769, 
        3771, 
        3772, 
        3784, 
        3789, 
        3792, 
        3801, 
        3864, 
        3865, 
        3872, 
        3881, 
        3893, 
        3893, 
        3895, 
        3895, 
        3897, 
        3897, 
        3902, 
        3903, 
        3953, 
        3972, 
        3974, 
        3975, 
        3984, 
        3991, 
        3993, 
        4028, 
        4038, 
        4038, 
        4140, 
        4146, 
        4150, 
        4153, 
        4160, 
        4169, 
        4182, 
        4185, 
        4969, 
        4977, 
        6068, 
        6099, 
        6112, 
        6121, 
        6160, 
        6169, 
        6313, 
        6313, 
        8255, 
        8256, 
        8400, 
        8412, 
        8417, 
        8417, 
        12330, 
        12335, 
        12441, 
        12442, 
        12539, 
        12539, 
        64286, 
        64286, 
        65056, 
        65059, 
        65075, 
        65076, 
        65101, 
        65103, 
        65296, 
        65305, 
        65343, 
        65343, 
        65381, 
        65381
    ];
    Unicode.unicodeES5IdentifierStart = [
        170, 
        170, 
        181, 
        181, 
        186, 
        186, 
        192, 
        214, 
        216, 
        246, 
        248, 
        705, 
        710, 
        721, 
        736, 
        740, 
        748, 
        748, 
        750, 
        750, 
        880, 
        884, 
        886, 
        887, 
        890, 
        893, 
        902, 
        902, 
        904, 
        906, 
        908, 
        908, 
        910, 
        929, 
        931, 
        1013, 
        1015, 
        1153, 
        1162, 
        1319, 
        1329, 
        1366, 
        1369, 
        1369, 
        1377, 
        1415, 
        1488, 
        1514, 
        1520, 
        1522, 
        1568, 
        1610, 
        1646, 
        1647, 
        1649, 
        1747, 
        1749, 
        1749, 
        1765, 
        1766, 
        1774, 
        1775, 
        1786, 
        1788, 
        1791, 
        1791, 
        1808, 
        1808, 
        1810, 
        1839, 
        1869, 
        1957, 
        1969, 
        1969, 
        1994, 
        2026, 
        2036, 
        2037, 
        2042, 
        2042, 
        2048, 
        2069, 
        2074, 
        2074, 
        2084, 
        2084, 
        2088, 
        2088, 
        2112, 
        2136, 
        2208, 
        2208, 
        2210, 
        2220, 
        2308, 
        2361, 
        2365, 
        2365, 
        2384, 
        2384, 
        2392, 
        2401, 
        2417, 
        2423, 
        2425, 
        2431, 
        2437, 
        2444, 
        2447, 
        2448, 
        2451, 
        2472, 
        2474, 
        2480, 
        2482, 
        2482, 
        2486, 
        2489, 
        2493, 
        2493, 
        2510, 
        2510, 
        2524, 
        2525, 
        2527, 
        2529, 
        2544, 
        2545, 
        2565, 
        2570, 
        2575, 
        2576, 
        2579, 
        2600, 
        2602, 
        2608, 
        2610, 
        2611, 
        2613, 
        2614, 
        2616, 
        2617, 
        2649, 
        2652, 
        2654, 
        2654, 
        2674, 
        2676, 
        2693, 
        2701, 
        2703, 
        2705, 
        2707, 
        2728, 
        2730, 
        2736, 
        2738, 
        2739, 
        2741, 
        2745, 
        2749, 
        2749, 
        2768, 
        2768, 
        2784, 
        2785, 
        2821, 
        2828, 
        2831, 
        2832, 
        2835, 
        2856, 
        2858, 
        2864, 
        2866, 
        2867, 
        2869, 
        2873, 
        2877, 
        2877, 
        2908, 
        2909, 
        2911, 
        2913, 
        2929, 
        2929, 
        2947, 
        2947, 
        2949, 
        2954, 
        2958, 
        2960, 
        2962, 
        2965, 
        2969, 
        2970, 
        2972, 
        2972, 
        2974, 
        2975, 
        2979, 
        2980, 
        2984, 
        2986, 
        2990, 
        3001, 
        3024, 
        3024, 
        3077, 
        3084, 
        3086, 
        3088, 
        3090, 
        3112, 
        3114, 
        3123, 
        3125, 
        3129, 
        3133, 
        3133, 
        3160, 
        3161, 
        3168, 
        3169, 
        3205, 
        3212, 
        3214, 
        3216, 
        3218, 
        3240, 
        3242, 
        3251, 
        3253, 
        3257, 
        3261, 
        3261, 
        3294, 
        3294, 
        3296, 
        3297, 
        3313, 
        3314, 
        3333, 
        3340, 
        3342, 
        3344, 
        3346, 
        3386, 
        3389, 
        3389, 
        3406, 
        3406, 
        3424, 
        3425, 
        3450, 
        3455, 
        3461, 
        3478, 
        3482, 
        3505, 
        3507, 
        3515, 
        3517, 
        3517, 
        3520, 
        3526, 
        3585, 
        3632, 
        3634, 
        3635, 
        3648, 
        3654, 
        3713, 
        3714, 
        3716, 
        3716, 
        3719, 
        3720, 
        3722, 
        3722, 
        3725, 
        3725, 
        3732, 
        3735, 
        3737, 
        3743, 
        3745, 
        3747, 
        3749, 
        3749, 
        3751, 
        3751, 
        3754, 
        3755, 
        3757, 
        3760, 
        3762, 
        3763, 
        3773, 
        3773, 
        3776, 
        3780, 
        3782, 
        3782, 
        3804, 
        3807, 
        3840, 
        3840, 
        3904, 
        3911, 
        3913, 
        3948, 
        3976, 
        3980, 
        4096, 
        4138, 
        4159, 
        4159, 
        4176, 
        4181, 
        4186, 
        4189, 
        4193, 
        4193, 
        4197, 
        4198, 
        4206, 
        4208, 
        4213, 
        4225, 
        4238, 
        4238, 
        4256, 
        4293, 
        4295, 
        4295, 
        4301, 
        4301, 
        4304, 
        4346, 
        4348, 
        4680, 
        4682, 
        4685, 
        4688, 
        4694, 
        4696, 
        4696, 
        4698, 
        4701, 
        4704, 
        4744, 
        4746, 
        4749, 
        4752, 
        4784, 
        4786, 
        4789, 
        4792, 
        4798, 
        4800, 
        4800, 
        4802, 
        4805, 
        4808, 
        4822, 
        4824, 
        4880, 
        4882, 
        4885, 
        4888, 
        4954, 
        4992, 
        5007, 
        5024, 
        5108, 
        5121, 
        5740, 
        5743, 
        5759, 
        5761, 
        5786, 
        5792, 
        5866, 
        5870, 
        5872, 
        5888, 
        5900, 
        5902, 
        5905, 
        5920, 
        5937, 
        5952, 
        5969, 
        5984, 
        5996, 
        5998, 
        6000, 
        6016, 
        6067, 
        6103, 
        6103, 
        6108, 
        6108, 
        6176, 
        6263, 
        6272, 
        6312, 
        6314, 
        6314, 
        6320, 
        6389, 
        6400, 
        6428, 
        6480, 
        6509, 
        6512, 
        6516, 
        6528, 
        6571, 
        6593, 
        6599, 
        6656, 
        6678, 
        6688, 
        6740, 
        6823, 
        6823, 
        6917, 
        6963, 
        6981, 
        6987, 
        7043, 
        7072, 
        7086, 
        7087, 
        7098, 
        7141, 
        7168, 
        7203, 
        7245, 
        7247, 
        7258, 
        7293, 
        7401, 
        7404, 
        7406, 
        7409, 
        7413, 
        7414, 
        7424, 
        7615, 
        7680, 
        7957, 
        7960, 
        7965, 
        7968, 
        8005, 
        8008, 
        8013, 
        8016, 
        8023, 
        8025, 
        8025, 
        8027, 
        8027, 
        8029, 
        8029, 
        8031, 
        8061, 
        8064, 
        8116, 
        8118, 
        8124, 
        8126, 
        8126, 
        8130, 
        8132, 
        8134, 
        8140, 
        8144, 
        8147, 
        8150, 
        8155, 
        8160, 
        8172, 
        8178, 
        8180, 
        8182, 
        8188, 
        8305, 
        8305, 
        8319, 
        8319, 
        8336, 
        8348, 
        8450, 
        8450, 
        8455, 
        8455, 
        8458, 
        8467, 
        8469, 
        8469, 
        8473, 
        8477, 
        8484, 
        8484, 
        8486, 
        8486, 
        8488, 
        8488, 
        8490, 
        8493, 
        8495, 
        8505, 
        8508, 
        8511, 
        8517, 
        8521, 
        8526, 
        8526, 
        8544, 
        8584, 
        11264, 
        11310, 
        11312, 
        11358, 
        11360, 
        11492, 
        11499, 
        11502, 
        11506, 
        11507, 
        11520, 
        11557, 
        11559, 
        11559, 
        11565, 
        11565, 
        11568, 
        11623, 
        11631, 
        11631, 
        11648, 
        11670, 
        11680, 
        11686, 
        11688, 
        11694, 
        11696, 
        11702, 
        11704, 
        11710, 
        11712, 
        11718, 
        11720, 
        11726, 
        11728, 
        11734, 
        11736, 
        11742, 
        11823, 
        11823, 
        12293, 
        12295, 
        12321, 
        12329, 
        12337, 
        12341, 
        12344, 
        12348, 
        12353, 
        12438, 
        12445, 
        12447, 
        12449, 
        12538, 
        12540, 
        12543, 
        12549, 
        12589, 
        12593, 
        12686, 
        12704, 
        12730, 
        12784, 
        12799, 
        13312, 
        13312, 
        19893, 
        19893, 
        19968, 
        19968, 
        40908, 
        40908, 
        40960, 
        42124, 
        42192, 
        42237, 
        42240, 
        42508, 
        42512, 
        42527, 
        42538, 
        42539, 
        42560, 
        42606, 
        42623, 
        42647, 
        42656, 
        42735, 
        42775, 
        42783, 
        42786, 
        42888, 
        42891, 
        42894, 
        42896, 
        42899, 
        42912, 
        42922, 
        43000, 
        43009, 
        43011, 
        43013, 
        43015, 
        43018, 
        43020, 
        43042, 
        43072, 
        43123, 
        43138, 
        43187, 
        43250, 
        43255, 
        43259, 
        43259, 
        43274, 
        43301, 
        43312, 
        43334, 
        43360, 
        43388, 
        43396, 
        43442, 
        43471, 
        43471, 
        43520, 
        43560, 
        43584, 
        43586, 
        43588, 
        43595, 
        43616, 
        43638, 
        43642, 
        43642, 
        43648, 
        43695, 
        43697, 
        43697, 
        43701, 
        43702, 
        43705, 
        43709, 
        43712, 
        43712, 
        43714, 
        43714, 
        43739, 
        43741, 
        43744, 
        43754, 
        43762, 
        43764, 
        43777, 
        43782, 
        43785, 
        43790, 
        43793, 
        43798, 
        43808, 
        43814, 
        43816, 
        43822, 
        43968, 
        44002, 
        44032, 
        44032, 
        55203, 
        55203, 
        55216, 
        55238, 
        55243, 
        55291, 
        63744, 
        64109, 
        64112, 
        64217, 
        64256, 
        64262, 
        64275, 
        64279, 
        64285, 
        64285, 
        64287, 
        64296, 
        64298, 
        64310, 
        64312, 
        64316, 
        64318, 
        64318, 
        64320, 
        64321, 
        64323, 
        64324, 
        64326, 
        64433, 
        64467, 
        64829, 
        64848, 
        64911, 
        64914, 
        64967, 
        65008, 
        65019, 
        65136, 
        65140, 
        65142, 
        65276, 
        65313, 
        65338, 
        65345, 
        65370, 
        65382, 
        65470, 
        65474, 
        65479, 
        65482, 
        65487, 
        65490, 
        65495, 
        65498, 
        65500
    ];
    Unicode.unicodeES5IdentifierPart = [
        768, 
        879, 
        1155, 
        1159, 
        1425, 
        1469, 
        1471, 
        1471, 
        1473, 
        1474, 
        1476, 
        1477, 
        1479, 
        1479, 
        1552, 
        1562, 
        1611, 
        1641, 
        1648, 
        1648, 
        1750, 
        1756, 
        1759, 
        1764, 
        1767, 
        1768, 
        1770, 
        1773, 
        1776, 
        1785, 
        1809, 
        1809, 
        1840, 
        1866, 
        1958, 
        1968, 
        1984, 
        1993, 
        2027, 
        2035, 
        2070, 
        2073, 
        2075, 
        2083, 
        2085, 
        2087, 
        2089, 
        2093, 
        2137, 
        2139, 
        2276, 
        2302, 
        2304, 
        2307, 
        2362, 
        2364, 
        2366, 
        2383, 
        2385, 
        2391, 
        2402, 
        2403, 
        2406, 
        2415, 
        2433, 
        2435, 
        2492, 
        2492, 
        2494, 
        2500, 
        2503, 
        2504, 
        2507, 
        2509, 
        2519, 
        2519, 
        2530, 
        2531, 
        2534, 
        2543, 
        2561, 
        2563, 
        2620, 
        2620, 
        2622, 
        2626, 
        2631, 
        2632, 
        2635, 
        2637, 
        2641, 
        2641, 
        2662, 
        2673, 
        2677, 
        2677, 
        2689, 
        2691, 
        2748, 
        2748, 
        2750, 
        2757, 
        2759, 
        2761, 
        2763, 
        2765, 
        2786, 
        2787, 
        2790, 
        2799, 
        2817, 
        2819, 
        2876, 
        2876, 
        2878, 
        2884, 
        2887, 
        2888, 
        2891, 
        2893, 
        2902, 
        2903, 
        2914, 
        2915, 
        2918, 
        2927, 
        2946, 
        2946, 
        3006, 
        3010, 
        3014, 
        3016, 
        3018, 
        3021, 
        3031, 
        3031, 
        3046, 
        3055, 
        3073, 
        3075, 
        3134, 
        3140, 
        3142, 
        3144, 
        3146, 
        3149, 
        3157, 
        3158, 
        3170, 
        3171, 
        3174, 
        3183, 
        3202, 
        3203, 
        3260, 
        3260, 
        3262, 
        3268, 
        3270, 
        3272, 
        3274, 
        3277, 
        3285, 
        3286, 
        3298, 
        3299, 
        3302, 
        3311, 
        3330, 
        3331, 
        3390, 
        3396, 
        3398, 
        3400, 
        3402, 
        3405, 
        3415, 
        3415, 
        3426, 
        3427, 
        3430, 
        3439, 
        3458, 
        3459, 
        3530, 
        3530, 
        3535, 
        3540, 
        3542, 
        3542, 
        3544, 
        3551, 
        3570, 
        3571, 
        3633, 
        3633, 
        3636, 
        3642, 
        3655, 
        3662, 
        3664, 
        3673, 
        3761, 
        3761, 
        3764, 
        3769, 
        3771, 
        3772, 
        3784, 
        3789, 
        3792, 
        3801, 
        3864, 
        3865, 
        3872, 
        3881, 
        3893, 
        3893, 
        3895, 
        3895, 
        3897, 
        3897, 
        3902, 
        3903, 
        3953, 
        3972, 
        3974, 
        3975, 
        3981, 
        3991, 
        3993, 
        4028, 
        4038, 
        4038, 
        4139, 
        4158, 
        4160, 
        4169, 
        4182, 
        4185, 
        4190, 
        4192, 
        4194, 
        4196, 
        4199, 
        4205, 
        4209, 
        4212, 
        4226, 
        4237, 
        4239, 
        4253, 
        4957, 
        4959, 
        5906, 
        5908, 
        5938, 
        5940, 
        5970, 
        5971, 
        6002, 
        6003, 
        6068, 
        6099, 
        6109, 
        6109, 
        6112, 
        6121, 
        6155, 
        6157, 
        6160, 
        6169, 
        6313, 
        6313, 
        6432, 
        6443, 
        6448, 
        6459, 
        6470, 
        6479, 
        6576, 
        6592, 
        6600, 
        6601, 
        6608, 
        6617, 
        6679, 
        6683, 
        6741, 
        6750, 
        6752, 
        6780, 
        6783, 
        6793, 
        6800, 
        6809, 
        6912, 
        6916, 
        6964, 
        6980, 
        6992, 
        7001, 
        7019, 
        7027, 
        7040, 
        7042, 
        7073, 
        7085, 
        7088, 
        7097, 
        7142, 
        7155, 
        7204, 
        7223, 
        7232, 
        7241, 
        7248, 
        7257, 
        7376, 
        7378, 
        7380, 
        7400, 
        7405, 
        7405, 
        7410, 
        7412, 
        7616, 
        7654, 
        7676, 
        7679, 
        8204, 
        8205, 
        8255, 
        8256, 
        8276, 
        8276, 
        8400, 
        8412, 
        8417, 
        8417, 
        8421, 
        8432, 
        11503, 
        11505, 
        11647, 
        11647, 
        11744, 
        11775, 
        12330, 
        12335, 
        12441, 
        12442, 
        42528, 
        42537, 
        42607, 
        42607, 
        42612, 
        42621, 
        42655, 
        42655, 
        42736, 
        42737, 
        43010, 
        43010, 
        43014, 
        43014, 
        43019, 
        43019, 
        43043, 
        43047, 
        43136, 
        43137, 
        43188, 
        43204, 
        43216, 
        43225, 
        43232, 
        43249, 
        43264, 
        43273, 
        43302, 
        43309, 
        43335, 
        43347, 
        43392, 
        43395, 
        43443, 
        43456, 
        43472, 
        43481, 
        43561, 
        43574, 
        43587, 
        43587, 
        43596, 
        43597, 
        43600, 
        43609, 
        43643, 
        43643, 
        43696, 
        43696, 
        43698, 
        43700, 
        43703, 
        43704, 
        43710, 
        43711, 
        43713, 
        43713, 
        43755, 
        43759, 
        43765, 
        43766, 
        44003, 
        44010, 
        44012, 
        44013, 
        44016, 
        44025, 
        64286, 
        64286, 
        65024, 
        65039, 
        65056, 
        65062, 
        65075, 
        65076, 
        65101, 
        65103, 
        65296, 
        65305, 
        65343, 
        65343
    ];
    Unicode.lookupInUnicodeMap = function lookupInUnicodeMap(code, map) {
        if(code < map[0]) {
            return false;
        }
        var lo = 0;
        var hi = map.length;
        var mid;
        while(lo + 1 < hi) {
            mid = lo + (hi - lo) / 2;
            mid -= mid % 2;
            if(map[mid] <= code && code <= map[mid + 1]) {
                return true;
            }
            if(code < map[mid]) {
                hi = mid;
            } else {
                lo = mid + 2;
            }
        }
        return false;
    }
    Unicode.isIdentifierStart = function isIdentifierStart(code, languageVersion) {
        if(languageVersion === 0 /* EcmaScript3 */ ) {
            return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES3IdentifierStart);
        } else {
            if(languageVersion === 1 /* EcmaScript5 */ ) {
                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES5IdentifierStart);
            } else {
                throw Errors.argumentOutOfRange("languageVersion");
            }
        }
    }
    Unicode.isIdentifierPart = function isIdentifierPart(code, languageVersion) {
        if(languageVersion === 0 /* EcmaScript3 */ ) {
            return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES3IdentifierPart);
        } else {
            if(languageVersion === 1 /* EcmaScript5 */ ) {
                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES5IdentifierPart);
            } else {
                throw Errors.argumentOutOfRange("languageVersion");
            }
        }
    }
    return Unicode;
})();
var TypeScript;
(function (TypeScript) {
    (function (CompilerDiagnostics) {
        CompilerDiagnostics.debug = false;
        CompilerDiagnostics.diagnosticWriter = null;
        CompilerDiagnostics.analysisPass = 0;
        function Alert(output) {
            if(CompilerDiagnostics.diagnosticWriter) {
                CompilerDiagnostics.diagnosticWriter.Alert(output);
            }
        }
        CompilerDiagnostics.Alert = Alert;
        function debugPrint(s) {
            if(CompilerDiagnostics.debug) {
                Alert(s);
            }
        }
        CompilerDiagnostics.debugPrint = debugPrint;
        function assert(condition, s) {
            if(CompilerDiagnostics.debug) {
                if(!condition) {
                    Alert(s);
                }
            }
        }
        CompilerDiagnostics.assert = assert;
    })(TypeScript.CompilerDiagnostics || (TypeScript.CompilerDiagnostics = {}));
    var CompilerDiagnostics = TypeScript.CompilerDiagnostics;
    var NullLogger = (function () {
        function NullLogger() { }
        NullLogger.prototype.information = function () {
            return false;
        };
        NullLogger.prototype.debug = function () {
            return false;
        };
        NullLogger.prototype.warning = function () {
            return false;
        };
        NullLogger.prototype.error = function () {
            return false;
        };
        NullLogger.prototype.fatal = function () {
            return false;
        };
        NullLogger.prototype.log = function (s) {
        };
        return NullLogger;
    })();
    TypeScript.NullLogger = NullLogger;    
    var LoggerAdapter = (function () {
        function LoggerAdapter(logger) {
            this.logger = logger;
            this._information = this.logger.information();
            this._debug = this.logger.debug();
            this._warning = this.logger.warning();
            this._error = this.logger.error();
            this._fatal = this.logger.fatal();
        }
        LoggerAdapter.prototype.information = function () {
            return this._information;
        };
        LoggerAdapter.prototype.debug = function () {
            return this._debug;
        };
        LoggerAdapter.prototype.warning = function () {
            return this._warning;
        };
        LoggerAdapter.prototype.error = function () {
            return this._error;
        };
        LoggerAdapter.prototype.fatal = function () {
            return this._fatal;
        };
        LoggerAdapter.prototype.log = function (s) {
            this.logger.log(s);
        };
        return LoggerAdapter;
    })();
    TypeScript.LoggerAdapter = LoggerAdapter;    
    var BufferedLogger = (function () {
        function BufferedLogger() {
            this.logContents = [];
        }
        BufferedLogger.prototype.information = function () {
            return false;
        };
        BufferedLogger.prototype.debug = function () {
            return false;
        };
        BufferedLogger.prototype.warning = function () {
            return false;
        };
        BufferedLogger.prototype.error = function () {
            return false;
        };
        BufferedLogger.prototype.fatal = function () {
            return false;
        };
        BufferedLogger.prototype.log = function (s) {
            this.logContents.push(s);
        };
        return BufferedLogger;
    })();
    TypeScript.BufferedLogger = BufferedLogger;    
    function timeFunction(logger, funcDescription, func) {
        var start = +new Date();
        var result = func();
        var end = +new Date();
        logger.log(funcDescription + " completed in " + (end - start) + " msec");
        return result;
    }
    TypeScript.timeFunction = timeFunction;
    function stringToLiteral(value, length) {
        var result = "";
        var addChar = function (index) {
            var ch = value.charCodeAt(index);
            switch(ch) {
                case 9: {
                    result += "\\t";
                    break;

                }
                case 10: {
                    result += "\\n";
                    break;

                }
                case 11: {
                    result += "\\v";
                    break;

                }
                case 12: {
                    result += "\\f";
                    break;

                }
                case 13: {
                    result += "\\r";
                    break;

                }
                case 34: {
                    result += "\\\"";
                    break;

                }
                case 39: {
                    result += "\\\'";
                    break;

                }
                case 92: {
                    result += "\\";
                    break;

                }
                default: {
                    result += value.charAt(index);

                }
            }
        };
        var tooLong = (value.length > length);
        if(tooLong) {
            var mid = length >> 1;
            for(var i = 0; i < mid; i++) {
                addChar(i);
            }
            result += "(...)";
            for(var i = value.length - mid; i < value.length; i++) {
                addChar(i);
            }
        } else {
            length = value.length;
            for(var i = 0; i < length; i++) {
                addChar(i);
            }
        }
        return result;
    }
    TypeScript.stringToLiteral = stringToLiteral;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    function hasFlag(val, flag) {
        return (val & flag) != 0;
    }
    TypeScript.hasFlag = hasFlag;
    (function (ErrorRecoverySet) {
        ErrorRecoverySet._map = [];
        ErrorRecoverySet.None = 0;
        ErrorRecoverySet.Comma = 1;
        ErrorRecoverySet.SColon = 1 << 1;
        ErrorRecoverySet.Asg = 1 << 2;
        ErrorRecoverySet.BinOp = 1 << 3;
        ErrorRecoverySet.RBrack = 1 << 4;
        ErrorRecoverySet.RCurly = 1 << 5;
        ErrorRecoverySet.RParen = 1 << 6;
        ErrorRecoverySet.Dot = 1 << 7;
        ErrorRecoverySet.Colon = 1 << 8;
        ErrorRecoverySet.PrimType = 1 << 9;
        ErrorRecoverySet.AddOp = 1 << 10;
        ErrorRecoverySet.LCurly = 1 << 11;
        ErrorRecoverySet.PreOp = 1 << 12;
        ErrorRecoverySet.RegExp = 1 << 13;
        ErrorRecoverySet.LParen = 1 << 14;
        ErrorRecoverySet.LBrack = 1 << 15;
        ErrorRecoverySet.Scope = 1 << 16;
        ErrorRecoverySet.In = 1 << 17;
        ErrorRecoverySet.SCase = 1 << 18;
        ErrorRecoverySet.Else = 1 << 19;
        ErrorRecoverySet.Catch = 1 << 20;
        ErrorRecoverySet.Var = 1 << 21;
        ErrorRecoverySet.Stmt = 1 << 22;
        ErrorRecoverySet.While = 1 << 23;
        ErrorRecoverySet.ID = 1 << 24;
        ErrorRecoverySet.Prefix = 1 << 25;
        ErrorRecoverySet.Literal = 1 << 26;
        ErrorRecoverySet.RLit = 1 << 27;
        ErrorRecoverySet.Func = 1 << 28;
        ErrorRecoverySet.EOF = 1 << 29;
        ErrorRecoverySet.TypeScriptS = 1 << 30;
        ErrorRecoverySet.ExprStart = ErrorRecoverySet.SColon | ErrorRecoverySet.AddOp | ErrorRecoverySet.LCurly | ErrorRecoverySet.PreOp | ErrorRecoverySet.RegExp | ErrorRecoverySet.LParen | ErrorRecoverySet.LBrack | ErrorRecoverySet.ID | ErrorRecoverySet.Prefix | ErrorRecoverySet.RLit | ErrorRecoverySet.Func | ErrorRecoverySet.Literal;
        ErrorRecoverySet.StmtStart = ErrorRecoverySet.ExprStart | ErrorRecoverySet.SColon | ErrorRecoverySet.Var | ErrorRecoverySet.Stmt | ErrorRecoverySet.While | ErrorRecoverySet.TypeScriptS;
        ErrorRecoverySet.Postfix = ErrorRecoverySet.Dot | ErrorRecoverySet.LParen | ErrorRecoverySet.LBrack;
    })(TypeScript.ErrorRecoverySet || (TypeScript.ErrorRecoverySet = {}));
    var ErrorRecoverySet = TypeScript.ErrorRecoverySet;
    (function (AllowedElements) {
        AllowedElements._map = [];
        AllowedElements.None = 0;
        AllowedElements.ModuleDeclarations = 1 << 2;
        AllowedElements.ClassDeclarations = 1 << 3;
        AllowedElements.InterfaceDeclarations = 1 << 4;
        AllowedElements.AmbientDeclarations = 1 << 10;
        AllowedElements.Properties = 1 << 11;
        AllowedElements.Global = AllowedElements.ModuleDeclarations | AllowedElements.ClassDeclarations | AllowedElements.InterfaceDeclarations | AllowedElements.AmbientDeclarations;
        AllowedElements.QuickParse = AllowedElements.Global | AllowedElements.Properties;
    })(TypeScript.AllowedElements || (TypeScript.AllowedElements = {}));
    var AllowedElements = TypeScript.AllowedElements;
    (function (Modifiers) {
        Modifiers._map = [];
        Modifiers.None = 0;
        Modifiers.Private = 1;
        Modifiers.Public = 1 << 1;
        Modifiers.Readonly = 1 << 2;
        Modifiers.Ambient = 1 << 3;
        Modifiers.Exported = 1 << 4;
        Modifiers.Getter = 1 << 5;
        Modifiers.Setter = 1 << 6;
        Modifiers.Static = 1 << 7;
    })(TypeScript.Modifiers || (TypeScript.Modifiers = {}));
    var Modifiers = TypeScript.Modifiers;
    (function (ASTFlags) {
        ASTFlags._map = [];
        ASTFlags.None = 0;
        ASTFlags.ExplicitSemicolon = 1;
        ASTFlags.AutomaticSemicolon = 1 << 1;
        ASTFlags.Writeable = 1 << 2;
        ASTFlags.Error = 1 << 3;
        ASTFlags.DotLHSPartial = 1 << 4;
        ASTFlags.DotLHS = 1 << 5;
        ASTFlags.IsStatement = 1 << 6;
        ASTFlags.StrictMode = 1 << 7;
        ASTFlags.PossibleOptionalParameter = 1 << 8;
        ASTFlags.ClassBaseConstructorCall = 1 << 9;
        ASTFlags.OptionalName = 1 << 10;
        ASTFlags.SkipNextRParen = 1 << 11;
    })(TypeScript.ASTFlags || (TypeScript.ASTFlags = {}));
    var ASTFlags = TypeScript.ASTFlags;
    (function (DeclFlags) {
        DeclFlags._map = [];
        DeclFlags.None = 0;
        DeclFlags.Exported = 1;
        DeclFlags.Private = 1 << 1;
        DeclFlags.Public = 1 << 2;
        DeclFlags.Ambient = 1 << 3;
        DeclFlags.Static = 1 << 4;
        DeclFlags.LocalStatic = 1 << 5;
        DeclFlags.GetAccessor = 1 << 6;
        DeclFlags.SetAccessor = 1 << 7;
    })(TypeScript.DeclFlags || (TypeScript.DeclFlags = {}));
    var DeclFlags = TypeScript.DeclFlags;
    (function (ModuleFlags) {
        ModuleFlags._map = [];
        ModuleFlags.None = 0;
        ModuleFlags.Exported = 1;
        ModuleFlags.Private = 1 << 1;
        ModuleFlags.Public = 1 << 2;
        ModuleFlags.Ambient = 1 << 3;
        ModuleFlags.Static = 1 << 4;
        ModuleFlags.LocalStatic = 1 << 5;
        ModuleFlags.GetAccessor = 1 << 6;
        ModuleFlags.SetAccessor = 1 << 7;
        ModuleFlags.IsEnum = 1 << 8;
        ModuleFlags.ShouldEmitModuleDecl = 1 << 9;
        ModuleFlags.IsWholeFile = 1 << 10;
        ModuleFlags.IsDynamic = 1 << 11;
        ModuleFlags.MustCaptureThis = 1 << 12;
    })(TypeScript.ModuleFlags || (TypeScript.ModuleFlags = {}));
    var ModuleFlags = TypeScript.ModuleFlags;
    (function (SymbolFlags) {
        SymbolFlags._map = [];
        SymbolFlags.None = 0;
        SymbolFlags.Exported = 1;
        SymbolFlags.Private = 1 << 1;
        SymbolFlags.Public = 1 << 2;
        SymbolFlags.Ambient = 1 << 3;
        SymbolFlags.Static = 1 << 4;
        SymbolFlags.LocalStatic = 1 << 5;
        SymbolFlags.GetAccessor = 1 << 6;
        SymbolFlags.SetAccessor = 1 << 7;
        SymbolFlags.Property = 1 << 8;
        SymbolFlags.Readonly = 1 << 9;
        SymbolFlags.ModuleMember = 1 << 10;
        SymbolFlags.InterfaceMember = 1 << 11;
        SymbolFlags.ClassMember = 1 << 12;
        SymbolFlags.BuiltIn = 1 << 13;
        SymbolFlags.TypeSetDuringScopeAssignment = 1 << 14;
        SymbolFlags.Constant = 1 << 15;
        SymbolFlags.Optional = 1 << 16;
        SymbolFlags.RecursivelyReferenced = 1 << 17;
        SymbolFlags.Bound = 1 << 18;
        SymbolFlags.CompilerGenerated = 1 << 19;
    })(TypeScript.SymbolFlags || (TypeScript.SymbolFlags = {}));
    var SymbolFlags = TypeScript.SymbolFlags;
    (function (VarFlags) {
        VarFlags._map = [];
        VarFlags.None = 0;
        VarFlags.Exported = 1;
        VarFlags.Private = 1 << 1;
        VarFlags.Public = 1 << 2;
        VarFlags.Ambient = 1 << 3;
        VarFlags.Static = 1 << 4;
        VarFlags.LocalStatic = 1 << 5;
        VarFlags.GetAccessor = 1 << 6;
        VarFlags.SetAccessor = 1 << 7;
        VarFlags.AutoInit = 1 << 8;
        VarFlags.Property = 1 << 9;
        VarFlags.Readonly = 1 << 10;
        VarFlags.Class = 1 << 11;
        VarFlags.ClassProperty = 1 << 12;
        VarFlags.ClassBodyProperty = 1 << 13;
        VarFlags.ClassConstructorProperty = 1 << 14;
        VarFlags.ClassSuperMustBeFirstCallInConstructor = 1 << 15;
        VarFlags.Constant = 1 << 16;
        VarFlags.MustCaptureThis = 1 << 17;
    })(TypeScript.VarFlags || (TypeScript.VarFlags = {}));
    var VarFlags = TypeScript.VarFlags;
    (function (FncFlags) {
        FncFlags._map = [];
        FncFlags.None = 0;
        FncFlags.Exported = 1;
        FncFlags.Private = 1 << 1;
        FncFlags.Public = 1 << 2;
        FncFlags.Ambient = 1 << 3;
        FncFlags.Static = 1 << 4;
        FncFlags.LocalStatic = 1 << 5;
        FncFlags.GetAccessor = 1 << 6;
        FncFlags.SetAccessor = 1 << 7;
        FncFlags.Definition = 1 << 8;
        FncFlags.Signature = 1 << 9;
        FncFlags.Method = 1 << 10;
        FncFlags.HasReturnExpression = 1 << 11;
        FncFlags.CallMember = 1 << 12;
        FncFlags.ConstructMember = 1 << 13;
        FncFlags.HasSelfReference = 1 << 14;
        FncFlags.IsFatArrowFunction = 1 << 15;
        FncFlags.IndexerMember = 1 << 16;
        FncFlags.IsFunctionExpression = 1 << 17;
        FncFlags.ClassMethod = 1 << 18;
        FncFlags.ClassPropertyMethodExported = 1 << 19;
    })(TypeScript.FncFlags || (TypeScript.FncFlags = {}));
    var FncFlags = TypeScript.FncFlags;
    (function (SignatureFlags) {
        SignatureFlags._map = [];
        SignatureFlags.None = 0;
        SignatureFlags.IsIndexer = 1;
        SignatureFlags.IsStringIndexer = 1 << 1;
        SignatureFlags.IsNumberIndexer = 1 << 2;
    })(TypeScript.SignatureFlags || (TypeScript.SignatureFlags = {}));
    var SignatureFlags = TypeScript.SignatureFlags;
                    function ToDeclFlags(fncOrVarOrSymbolOrModuleFlags) {
        return fncOrVarOrSymbolOrModuleFlags;
    }
    TypeScript.ToDeclFlags = ToDeclFlags;
    (function (TypeFlags) {
        TypeFlags._map = [];
        TypeFlags.None = 0;
        TypeFlags.HasImplementation = 1;
        TypeFlags.HasSelfReference = 1 << 1;
        TypeFlags.MergeResult = 1 << 2;
        TypeFlags.IsEnum = 1 << 3;
        TypeFlags.BuildingName = 1 << 4;
        TypeFlags.HasBaseType = 1 << 5;
        TypeFlags.HasBaseTypeOfObject = 1 << 6;
        TypeFlags.IsClass = 1 << 7;
    })(TypeScript.TypeFlags || (TypeScript.TypeFlags = {}));
    var TypeFlags = TypeScript.TypeFlags;
    (function (TypeRelationshipFlags) {
        TypeRelationshipFlags._map = [];
        TypeRelationshipFlags.SuccessfulComparison = 0;
        TypeRelationshipFlags.SourceIsNullTargetIsVoidOrUndefined = 1;
        TypeRelationshipFlags.RequiredPropertyIsMissing = 1 << 1;
        TypeRelationshipFlags.IncompatibleSignatures = 1 << 2;
        TypeRelationshipFlags.SourceSignatureHasTooManyParameters = 3;
        TypeRelationshipFlags.IncompatibleReturnTypes = 1 << 4;
        TypeRelationshipFlags.IncompatiblePropertyTypes = 1 << 5;
        TypeRelationshipFlags.IncompatibleParameterTypes = 1 << 6;
    })(TypeScript.TypeRelationshipFlags || (TypeScript.TypeRelationshipFlags = {}));
    var TypeRelationshipFlags = TypeScript.TypeRelationshipFlags;
    (function (CodeGenTarget) {
        CodeGenTarget._map = [];
        CodeGenTarget.ES3 = 0;
        CodeGenTarget.ES5 = 1;
    })(TypeScript.CodeGenTarget || (TypeScript.CodeGenTarget = {}));
    var CodeGenTarget = TypeScript.CodeGenTarget;
    (function (ModuleGenTarget) {
        ModuleGenTarget._map = [];
        ModuleGenTarget.Synchronous = 0;
        ModuleGenTarget.Asynchronous = 1;
        ModuleGenTarget.Local = 1 << 1;
    })(TypeScript.ModuleGenTarget || (TypeScript.ModuleGenTarget = {}));
    var ModuleGenTarget = TypeScript.ModuleGenTarget;
    TypeScript.codeGenTarget = 0 /* ES3 */ ;
    TypeScript.moduleGenTarget = 0 /* Synchronous */ ;
    TypeScript.optimizeModuleCodeGen = true;
    function flagsToString(e, flags) {
        var builder = "";
        for(var i = 1; i < (1 << 31); i = i << 1) {
            if((flags & i) != 0) {
                for(var k in e) {
                    if(e[k] == i) {
                        if(builder.length > 0) {
                            builder += "|";
                        }
                        builder += k;
                        break;
                    }
                }
            }
        }
        return builder;
    }
    TypeScript.flagsToString = flagsToString;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (NodeType) {
        NodeType._map = [];
        NodeType._map[0] = "None";
        NodeType.None = 0;
        NodeType._map[1] = "Empty";
        NodeType.Empty = 1;
        NodeType._map[2] = "EmptyExpr";
        NodeType.EmptyExpr = 2;
        NodeType._map[3] = "True";
        NodeType.True = 3;
        NodeType._map[4] = "False";
        NodeType.False = 4;
        NodeType._map[5] = "This";
        NodeType.This = 5;
        NodeType._map[6] = "Super";
        NodeType.Super = 6;
        NodeType._map[7] = "QString";
        NodeType.QString = 7;
        NodeType._map[8] = "Regex";
        NodeType.Regex = 8;
        NodeType._map[9] = "Null";
        NodeType.Null = 9;
        NodeType._map[10] = "ArrayLit";
        NodeType.ArrayLit = 10;
        NodeType._map[11] = "ObjectLit";
        NodeType.ObjectLit = 11;
        NodeType._map[12] = "Void";
        NodeType.Void = 12;
        NodeType._map[13] = "Comma";
        NodeType.Comma = 13;
        NodeType._map[14] = "Pos";
        NodeType.Pos = 14;
        NodeType._map[15] = "Neg";
        NodeType.Neg = 15;
        NodeType._map[16] = "Delete";
        NodeType.Delete = 16;
        NodeType._map[17] = "Await";
        NodeType.Await = 17;
        NodeType._map[18] = "In";
        NodeType.In = 18;
        NodeType._map[19] = "Dot";
        NodeType.Dot = 19;
        NodeType._map[20] = "From";
        NodeType.From = 20;
        NodeType._map[21] = "Is";
        NodeType.Is = 21;
        NodeType._map[22] = "InstOf";
        NodeType.InstOf = 22;
        NodeType._map[23] = "Typeof";
        NodeType.Typeof = 23;
        NodeType._map[24] = "NumberLit";
        NodeType.NumberLit = 24;
        NodeType._map[25] = "Name";
        NodeType.Name = 25;
        NodeType._map[26] = "TypeRef";
        NodeType.TypeRef = 26;
        NodeType._map[27] = "Index";
        NodeType.Index = 27;
        NodeType._map[28] = "Call";
        NodeType.Call = 28;
        NodeType._map[29] = "New";
        NodeType.New = 29;
        NodeType._map[30] = "Asg";
        NodeType.Asg = 30;
        NodeType._map[31] = "AsgAdd";
        NodeType.AsgAdd = 31;
        NodeType._map[32] = "AsgSub";
        NodeType.AsgSub = 32;
        NodeType._map[33] = "AsgDiv";
        NodeType.AsgDiv = 33;
        NodeType._map[34] = "AsgMul";
        NodeType.AsgMul = 34;
        NodeType._map[35] = "AsgMod";
        NodeType.AsgMod = 35;
        NodeType._map[36] = "AsgAnd";
        NodeType.AsgAnd = 36;
        NodeType._map[37] = "AsgXor";
        NodeType.AsgXor = 37;
        NodeType._map[38] = "AsgOr";
        NodeType.AsgOr = 38;
        NodeType._map[39] = "AsgLsh";
        NodeType.AsgLsh = 39;
        NodeType._map[40] = "AsgRsh";
        NodeType.AsgRsh = 40;
        NodeType._map[41] = "AsgRs2";
        NodeType.AsgRs2 = 41;
        NodeType._map[42] = "ConditionalExpression";
        NodeType.ConditionalExpression = 42;
        NodeType._map[43] = "LogOr";
        NodeType.LogOr = 43;
        NodeType._map[44] = "LogAnd";
        NodeType.LogAnd = 44;
        NodeType._map[45] = "Or";
        NodeType.Or = 45;
        NodeType._map[46] = "Xor";
        NodeType.Xor = 46;
        NodeType._map[47] = "And";
        NodeType.And = 47;
        NodeType._map[48] = "Eq";
        NodeType.Eq = 48;
        NodeType._map[49] = "Ne";
        NodeType.Ne = 49;
        NodeType._map[50] = "Eqv";
        NodeType.Eqv = 50;
        NodeType._map[51] = "NEqv";
        NodeType.NEqv = 51;
        NodeType._map[52] = "Lt";
        NodeType.Lt = 52;
        NodeType._map[53] = "Le";
        NodeType.Le = 53;
        NodeType._map[54] = "Gt";
        NodeType.Gt = 54;
        NodeType._map[55] = "Ge";
        NodeType.Ge = 55;
        NodeType._map[56] = "Add";
        NodeType.Add = 56;
        NodeType._map[57] = "Sub";
        NodeType.Sub = 57;
        NodeType._map[58] = "Mul";
        NodeType.Mul = 58;
        NodeType._map[59] = "Div";
        NodeType.Div = 59;
        NodeType._map[60] = "Mod";
        NodeType.Mod = 60;
        NodeType._map[61] = "Lsh";
        NodeType.Lsh = 61;
        NodeType._map[62] = "Rsh";
        NodeType.Rsh = 62;
        NodeType._map[63] = "Rs2";
        NodeType.Rs2 = 63;
        NodeType._map[64] = "Not";
        NodeType.Not = 64;
        NodeType._map[65] = "LogNot";
        NodeType.LogNot = 65;
        NodeType._map[66] = "IncPre";
        NodeType.IncPre = 66;
        NodeType._map[67] = "DecPre";
        NodeType.DecPre = 67;
        NodeType._map[68] = "IncPost";
        NodeType.IncPost = 68;
        NodeType._map[69] = "DecPost";
        NodeType.DecPost = 69;
        NodeType._map[70] = "TypeAssertion";
        NodeType.TypeAssertion = 70;
        NodeType._map[71] = "FuncDecl";
        NodeType.FuncDecl = 71;
        NodeType._map[72] = "Member";
        NodeType.Member = 72;
        NodeType._map[73] = "VarDecl";
        NodeType.VarDecl = 73;
        NodeType._map[74] = "ArgDecl";
        NodeType.ArgDecl = 74;
        NodeType._map[75] = "Return";
        NodeType.Return = 75;
        NodeType._map[76] = "Break";
        NodeType.Break = 76;
        NodeType._map[77] = "Continue";
        NodeType.Continue = 77;
        NodeType._map[78] = "Throw";
        NodeType.Throw = 78;
        NodeType._map[79] = "For";
        NodeType.For = 79;
        NodeType._map[80] = "ForIn";
        NodeType.ForIn = 80;
        NodeType._map[81] = "If";
        NodeType.If = 81;
        NodeType._map[82] = "While";
        NodeType.While = 82;
        NodeType._map[83] = "DoWhile";
        NodeType.DoWhile = 83;
        NodeType._map[84] = "Block";
        NodeType.Block = 84;
        NodeType._map[85] = "Case";
        NodeType.Case = 85;
        NodeType._map[86] = "Switch";
        NodeType.Switch = 86;
        NodeType._map[87] = "Try";
        NodeType.Try = 87;
        NodeType._map[88] = "TryCatch";
        NodeType.TryCatch = 88;
        NodeType._map[89] = "TryFinally";
        NodeType.TryFinally = 89;
        NodeType._map[90] = "Finally";
        NodeType.Finally = 90;
        NodeType._map[91] = "Catch";
        NodeType.Catch = 91;
        NodeType._map[92] = "List";
        NodeType.List = 92;
        NodeType._map[93] = "Script";
        NodeType.Script = 93;
        NodeType._map[94] = "ClassDeclaration";
        NodeType.ClassDeclaration = 94;
        NodeType._map[95] = "InterfaceDeclaration";
        NodeType.InterfaceDeclaration = 95;
        NodeType._map[96] = "ModuleDeclaration";
        NodeType.ModuleDeclaration = 96;
        NodeType._map[97] = "ImportDeclaration";
        NodeType.ImportDeclaration = 97;
        NodeType._map[98] = "With";
        NodeType.With = 98;
        NodeType._map[99] = "Label";
        NodeType.Label = 99;
        NodeType._map[100] = "LabeledStatement";
        NodeType.LabeledStatement = 100;
        NodeType._map[101] = "EBStart";
        NodeType.EBStart = 101;
        NodeType._map[102] = "GotoEB";
        NodeType.GotoEB = 102;
        NodeType._map[103] = "EndCode";
        NodeType.EndCode = 103;
        NodeType._map[104] = "Error";
        NodeType.Error = 104;
        NodeType._map[105] = "Comment";
        NodeType.Comment = 105;
        NodeType._map[106] = "Debugger";
        NodeType.Debugger = 106;
        NodeType.GeneralNode = NodeType.FuncDecl;
        NodeType.LastAsg = NodeType.AsgRs2;
    })(TypeScript.NodeType || (TypeScript.NodeType = {}));
    var NodeType = TypeScript.NodeType;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var BlockIntrinsics = (function () {
        function BlockIntrinsics() {
            this.prototype = undefined;
            this.toString = undefined;
            this.toLocaleString = undefined;
            this.valueOf = undefined;
            this.hasOwnProperty = undefined;
            this.propertyIsEnumerable = undefined;
            this.isPrototypeOf = undefined;
            this["constructor"] = undefined;
        }
        return BlockIntrinsics;
    })();
    TypeScript.BlockIntrinsics = BlockIntrinsics;    
    var StringHashTable = (function () {
        function StringHashTable() {
            this.itemCount = 0;
            this.table = (new BlockIntrinsics());
        }
        StringHashTable.prototype.getAllKeys = function () {
            var result = [];
            for(var k in this.table) {
                if(this.table[k] != undefined) {
                    result[result.length] = k;
                }
            }
            return result;
        };
        StringHashTable.prototype.add = function (key, data) {
            if(this.table[key] != undefined) {
                return false;
            }
            this.table[key] = data;
            this.itemCount++;
            return true;
        };
        StringHashTable.prototype.addOrUpdate = function (key, data) {
            if(this.table[key] != undefined) {
                this.table[key] = data;
                return false;
            }
            this.table[key] = data;
            this.itemCount++;
            return true;
        };
        StringHashTable.prototype.map = function (fn, context) {
            for(var k in this.table) {
                var data = this.table[k];
                if(data != undefined) {
                    fn(k, this.table[k], context);
                }
            }
        };
        StringHashTable.prototype.every = function (fn, context) {
            for(var k in this.table) {
                var data = this.table[k];
                if(data != undefined) {
                    if(!fn(k, this.table[k], context)) {
                        return false;
                    }
                }
            }
            return true;
        };
        StringHashTable.prototype.some = function (fn, context) {
            for(var k in this.table) {
                var data = this.table[k];
                if(data != undefined) {
                    if(fn(k, this.table[k], context)) {
                        return true;
                    }
                }
            }
            return false;
        };
        StringHashTable.prototype.count = function () {
            return this.itemCount;
        };
        StringHashTable.prototype.lookup = function (key) {
            var data = this.table[key];
            if(data != undefined) {
                return data;
            } else {
                return (null);
            }
        };
        return StringHashTable;
    })();
    TypeScript.StringHashTable = StringHashTable;    
    var DualStringHashTable = (function () {
        function DualStringHashTable(primaryTable, secondaryTable) {
            this.primaryTable = primaryTable;
            this.secondaryTable = secondaryTable;
            this.insertPrimary = true;
        }
        DualStringHashTable.prototype.getAllKeys = function () {
            return this.primaryTable.getAllKeys().concat(this.secondaryTable.getAllKeys());
        };
        DualStringHashTable.prototype.add = function (key, data) {
            if(this.insertPrimary) {
                return this.primaryTable.add(key, data);
            } else {
                return this.secondaryTable.add(key, data);
            }
        };
        DualStringHashTable.prototype.addOrUpdate = function (key, data) {
            if(this.insertPrimary) {
                return this.primaryTable.addOrUpdate(key, data);
            } else {
                return this.secondaryTable.addOrUpdate(key, data);
            }
        };
        DualStringHashTable.prototype.map = function (fn, context) {
            this.primaryTable.map(fn, context);
            this.secondaryTable.map(fn, context);
        };
        DualStringHashTable.prototype.every = function (fn, context) {
            return this.primaryTable.every(fn, context) && this.secondaryTable.every(fn, context);
        };
        DualStringHashTable.prototype.some = function (fn, context) {
            return this.primaryTable.some(fn, context) || this.secondaryTable.some(fn, context);
        };
        DualStringHashTable.prototype.count = function () {
            return this.primaryTable.count() + this.secondaryTable.count();
        };
        DualStringHashTable.prototype.lookup = function (key) {
            var data = this.primaryTable.lookup(key);
            if(data != undefined) {
                return data;
            } else {
                return this.secondaryTable.lookup(key);
            }
        };
        return DualStringHashTable;
    })();
    TypeScript.DualStringHashTable = DualStringHashTable;    
    function numberHashFn(key) {
        var c2 = 668265261;
        key = (key ^ 61) ^ (key >>> 16);
        key = key + (key << 3);
        key = key ^ (key >>> 4);
        key = key * c2;
        key = key ^ (key >>> 15);
        return key;
    }
    TypeScript.numberHashFn = numberHashFn;
    function combineHashes(key1, key2) {
        return key2 ^ ((key1 >> 5) + key1);
    }
    TypeScript.combineHashes = combineHashes;
    var HashEntry = (function () {
        function HashEntry(key, data) {
            this.key = key;
            this.data = data;
        }
        return HashEntry;
    })();
    TypeScript.HashEntry = HashEntry;    
    var HashTable = (function () {
        function HashTable(size, hashFn, equalsFn) {
            this.size = size;
            this.hashFn = hashFn;
            this.equalsFn = equalsFn;
            this.itemCount = 0;
            this.table = new Array();
            for(var i = 0; i < this.size; i++) {
                this.table[i] = null;
            }
        }
        HashTable.prototype.add = function (key, data) {
            var current;
            var entry = new HashEntry(key, data);
            var val = this.hashFn(key);
            val = val % this.size;
            for(current = this.table[val]; current != null; current = current.next) {
                if(this.equalsFn(key, current.key)) {
                    return false;
                }
            }
            entry.next = this.table[val];
            this.table[val] = entry;
            this.itemCount++;
            return true;
        };
        HashTable.prototype.remove = function (key) {
            var current;
            var val = this.hashFn(key);
            val = val % this.size;
            var result = null;
            var prevEntry = null;
            for(current = this.table[val]; current != null; current = current.next) {
                if(this.equalsFn(key, current.key)) {
                    result = current.data;
                    this.itemCount--;
                    if(prevEntry) {
                        prevEntry.next = current.next;
                    } else {
                        this.table[val] = current.next;
                    }
                    break;
                }
                prevEntry = current;
            }
            return result;
        };
        HashTable.prototype.count = function () {
            return this.itemCount;
        };
        HashTable.prototype.lookup = function (key) {
            var current;
            var val = this.hashFn(key);
            val = val % this.size;
            for(current = this.table[val]; current != null; current = current.next) {
                if(this.equalsFn(key, current.key)) {
                    return (current.data);
                }
            }
            return (null);
        };
        return HashTable;
    })();
    TypeScript.HashTable = HashTable;    
    var SimpleHashTable = (function () {
        function SimpleHashTable() {
            this.keys = [];
            this.values = [];
        }
        SimpleHashTable.prototype.lookup = function (key, findValue) {
            var searchArray = this.keys;
            if(findValue) {
                searchArray = this.values;
            }
            for(var i = 0; i < searchArray.length; i++) {
                if(searchArray[i] == key) {
                    return {
                        key: this.keys[i],
                        data: this.values[i]
                    };
                }
            }
            return null;
        };
        SimpleHashTable.prototype.add = function (key, data) {
            var lookupData = this.lookup(key);
            if(lookupData) {
                return false;
            }
            this.keys[this.keys.length] = key;
            this.values[this.values.length] = data;
            return true;
        };
        return SimpleHashTable;
    })();
    TypeScript.SimpleHashTable = SimpleHashTable;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var ASTSpan = (function () {
        function ASTSpan() {
            this.minChar = -1;
            this.limChar = -1;
        }
        return ASTSpan;
    })();
    TypeScript.ASTSpan = ASTSpan;    
    var AST = (function (_super) {
        __extends(AST, _super);
        function AST(nodeType) {
                _super.call(this);
            this.nodeType = nodeType;
            this.type = null;
            this.flags = 4 /* Writeable */ ;
            this.passCreated = TypeScript.CompilerDiagnostics.analysisPass;
            this.preComments = null;
            this.postComments = null;
            this.isParenthesized = false;
        }
        AST.prototype.isExpression = function () {
            return false;
        };
        AST.prototype.isStatementOrExpression = function () {
            return false;
        };
        AST.prototype.isCompoundStatement = function () {
            return false;
        };
        AST.prototype.isLeaf = function () {
            return this.isStatementOrExpression() && (!this.isCompoundStatement());
        };
        AST.prototype.typeCheck = function (typeFlow) {
            switch(this.nodeType) {
                case 104 /* Error */ :
                case 2 /* EmptyExpr */ : {
                    this.type = typeFlow.anyType;
                    break;

                }
                case 5 /* This */ : {
                    return typeFlow.typeCheckThis(this);

                }
                case 9 /* Null */ : {
                    this.type = typeFlow.nullType;
                    break;

                }
                case 4 /* False */ :
                case 3 /* True */ : {
                    this.type = typeFlow.booleanType;
                    break;

                }
                case 6 /* Super */ : {
                    return typeFlow.typeCheckSuper(this);

                }
                case 103 /* EndCode */ :
                case 1 /* Empty */ :
                case 12 /* Void */ : {
                    this.type = typeFlow.voidType;
                    break;

                }
                default: {
                    throw new Error("please implement in derived class");

                }
            }
            return this;
        };
        AST.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            switch(this.nodeType) {
                case 5 /* This */ : {
                    emitter.recordSourceMappingStart(this);
                    if(emitter.thisFnc && (TypeScript.hasFlag(emitter.thisFnc.fncFlags, 32768 /* IsFatArrowFunction */ ))) {
                        emitter.writeToOutput("_this");
                    } else {
                        emitter.writeToOutput("this");
                    }
                    emitter.recordSourceMappingEnd(this);
                    break;

                }
                case 9 /* Null */ : {
                    emitter.recordSourceMappingStart(this);
                    emitter.writeToOutput("null");
                    emitter.recordSourceMappingEnd(this);
                    break;

                }
                case 4 /* False */ : {
                    emitter.recordSourceMappingStart(this);
                    emitter.writeToOutput("false");
                    emitter.recordSourceMappingEnd(this);
                    break;

                }
                case 3 /* True */ : {
                    emitter.recordSourceMappingStart(this);
                    emitter.writeToOutput("true");
                    emitter.recordSourceMappingEnd(this);
                    break;

                }
                case 6 /* Super */ : {
                    emitter.recordSourceMappingStart(this);
                    emitter.emitSuperReference();
                    emitter.recordSourceMappingEnd(this);
                    break;

                }
                case 103 /* EndCode */ : {
                    break;

                }
                case 104 /* Error */ :
                case 2 /* EmptyExpr */ : {
                    break;

                }
                case 1 /* Empty */ : {
                    emitter.recordSourceMappingStart(this);
                    emitter.writeToOutput("; ");
                    emitter.recordSourceMappingEnd(this);
                    break;

                }
                case 12 /* Void */ : {
                    emitter.recordSourceMappingStart(this);
                    emitter.writeToOutput("void ");
                    emitter.recordSourceMappingEnd(this);
                    break;

                }
                default: {
                    throw new Error("please implement in derived class");

                }
            }
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        AST.prototype.print = function (context) {
            context.startLine();
            var lineCol = {
                line: -1,
                col: -1
            };
            var limLineCol = {
                line: -1,
                col: -1
            };
            if(context.parser !== null) {
                context.parser.getSourceLineCol(lineCol, this.minChar);
                context.parser.getSourceLineCol(limLineCol, this.limChar);
                context.write("(" + lineCol.line + "," + lineCol.col + ")--" + "(" + limLineCol.line + "," + limLineCol.col + "): ");
            }
            var lab = this.printLabel();
            if(TypeScript.hasFlag(this.flags, 8 /* Error */ )) {
                lab += " (Error)";
            }
            context.writeLine(lab);
        };
        AST.prototype.printLabel = function () {
            if(TypeScript.nodeTypeTable[this.nodeType] !== undefined) {
                return TypeScript.nodeTypeTable[this.nodeType];
            } else {
                return (TypeScript.NodeType)._map[this.nodeType];
            }
        };
        AST.prototype.addToControlFlow = function (context) {
            context.walker.options.goChildren = false;
            context.addContent(this);
        };
        AST.prototype.netFreeUses = function (container, freeUses) {
        };
        AST.prototype.treeViewLabel = function () {
            return (TypeScript.NodeType)._map[this.nodeType];
        };
        AST.getResolvedIdentifierName = function getResolvedIdentifierName(name) {
            if(!name) {
                return "";
            }
            var resolved = "";
            var start = 0;
            var i = 0;
            while(i <= name.length - 6) {
                if(name.charAt(i) == '\\' && name.charAt(i + 1) == 'u') {
                    var charCode = parseInt(name.substr(i + 2, 4), 16);
                    resolved += name.substr(start, i - start);
                    resolved += String.fromCharCode(charCode);
                    i += 6;
                    start = i;
                    continue;
                }
                i++;
            }
            resolved += name.substring(start);
            return resolved;
        }
        return AST;
    })(ASTSpan);
    TypeScript.AST = AST;    
    var IncompleteAST = (function (_super) {
        __extends(IncompleteAST, _super);
        function IncompleteAST(min, lim) {
                _super.call(this, 104 /* Error */ );
            this.minChar = min;
            this.limChar = lim;
        }
        return IncompleteAST;
    })(AST);
    TypeScript.IncompleteAST = IncompleteAST;    
    var ASTList = (function (_super) {
        __extends(ASTList, _super);
        function ASTList() {
                _super.call(this, 92 /* List */ );
            this.enclosingScope = null;
            this.members = new Array();
        }
        ASTList.prototype.addToControlFlow = function (context) {
            var len = this.members.length;
            for(var i = 0; i < len; i++) {
                if(context.noContinuation) {
                    context.addUnreachable(this.members[i]);
                    break;
                } else {
                    this.members[i] = context.walk(this.members[i], this);
                }
            }
            context.walker.options.goChildren = false;
        };
        ASTList.prototype.append = function (ast) {
            this.members[this.members.length] = ast;
            return this;
        };
        ASTList.prototype.appendAll = function (ast) {
            if(ast.nodeType == 92 /* List */ ) {
                var list = ast;
                for(var i = 0, len = list.members.length; i < len; i++) {
                    this.append(list.members[i]);
                }
            } else {
                this.append(ast);
            }
            return this;
        };
        ASTList.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.recordSourceMappingStart(this);
            emitter.emitJavascriptList(this, null, 54 /* Semicolon */ , startLine, false, false);
            emitter.recordSourceMappingEnd(this);
        };
        ASTList.prototype.typeCheck = function (typeFlow) {
            var len = this.members.length;
            typeFlow.nestingLevel++;
            for(var i = 0; i < len; i++) {
                if(this.members[i]) {
                    this.members[i] = this.members[i].typeCheck(typeFlow);
                }
            }
            typeFlow.nestingLevel--;
            return this;
        };
        return ASTList;
    })(AST);
    TypeScript.ASTList = ASTList;    
    var Identifier = (function (_super) {
        __extends(Identifier, _super);
        function Identifier(actualText, hasEscapeSequence) {
                _super.call(this, 25 /* Name */ );
            this.actualText = actualText;
            this.hasEscapeSequence = hasEscapeSequence;
            this.sym = null;
            this.cloId = -1;
            this.setText(actualText, hasEscapeSequence);
        }
        Identifier.prototype.setText = function (actualText, hasEscapeSequence) {
            this.actualText = actualText;
            if(hasEscapeSequence) {
                this.text = AST.getResolvedIdentifierName(actualText);
            } else {
                this.text = actualText;
            }
        };
        Identifier.prototype.isMissing = function () {
            return false;
        };
        Identifier.prototype.isLeaf = function () {
            return true;
        };
        Identifier.prototype.treeViewLabel = function () {
            return "id: " + this.actualText;
        };
        Identifier.prototype.printLabel = function () {
            if(this.actualText) {
                return "id: " + this.actualText;
            } else {
                return "name node";
            }
        };
        Identifier.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckName(this);
        };
        Identifier.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitJavascriptName(this, true);
        };
        Identifier.fromToken = function fromToken(token) {
            return new Identifier(token.getText(), (token).hasEscapeSequence);
        }
        return Identifier;
    })(AST);
    TypeScript.Identifier = Identifier;    
    var MissingIdentifier = (function (_super) {
        __extends(MissingIdentifier, _super);
        function MissingIdentifier() {
                _super.call(this, "__missing");
        }
        MissingIdentifier.prototype.isMissing = function () {
            return true;
        };
        MissingIdentifier.prototype.emit = function (emitter, tokenId, startLine) {
        };
        return MissingIdentifier;
    })(Identifier);
    TypeScript.MissingIdentifier = MissingIdentifier;    
    var Label = (function (_super) {
        __extends(Label, _super);
        function Label(id) {
                _super.call(this, 99 /* Label */ );
            this.id = id;
        }
        Label.prototype.printLabel = function () {
            return this.id.actualText + ":";
        };
        Label.prototype.typeCheck = function (typeFlow) {
            this.type = typeFlow.voidType;
            return this;
        };
        Label.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            emitter.recordSourceMappingStart(this.id);
            emitter.writeToOutput(this.id.actualText);
            emitter.recordSourceMappingEnd(this.id);
            emitter.writeLineToOutput(":");
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        return Label;
    })(AST);
    TypeScript.Label = Label;    
    var Expression = (function (_super) {
        __extends(Expression, _super);
        function Expression(nodeType) {
                _super.call(this, nodeType);
        }
        Expression.prototype.isExpression = function () {
            return true;
        };
        Expression.prototype.isStatementOrExpression = function () {
            return true;
        };
        return Expression;
    })(AST);
    TypeScript.Expression = Expression;    
    var UnaryExpression = (function (_super) {
        __extends(UnaryExpression, _super);
        function UnaryExpression(nodeType, operand) {
                _super.call(this, nodeType);
            this.operand = operand;
            this.targetType = null;
            this.castTerm = null;
        }
        UnaryExpression.prototype.addToControlFlow = function (context) {
            _super.prototype.addToControlFlow.call(this, context);
            if(this.nodeType == 78 /* Throw */ ) {
                context.returnStmt();
            }
        };
        UnaryExpression.prototype.typeCheck = function (typeFlow) {
            switch(this.nodeType) {
                case 64 /* Not */ : {
                    return typeFlow.typeCheckBitNot(this);

                }
                case 65 /* LogNot */ : {
                    return typeFlow.typeCheckLogNot(this);

                }
                case 14 /* Pos */ :
                case 15 /* Neg */ : {
                    return typeFlow.typeCheckUnaryNumberOperator(this);

                }
                case 68 /* IncPost */ :
                case 66 /* IncPre */ :
                case 69 /* DecPost */ :
                case 67 /* DecPre */ : {
                    return typeFlow.typeCheckIncOrDec(this);

                }
                case 10 /* ArrayLit */ : {
                    typeFlow.typeCheckArrayLit(this);
                    return this;

                }
                case 11 /* ObjectLit */ : {
                    typeFlow.typeCheckObjectLit(this);
                    return this;

                }
                case 78 /* Throw */ : {
                    this.operand = typeFlow.typeCheck(this.operand);
                    this.type = typeFlow.voidType;
                    return this;

                }
                case 23 /* Typeof */ : {
                    this.operand = typeFlow.typeCheck(this.operand);
                    this.type = typeFlow.stringType;
                    return this;

                }
                case 16 /* Delete */ : {
                    this.operand = typeFlow.typeCheck(this.operand);
                    this.type = typeFlow.booleanType;
                    break;

                }
                case 70 /* TypeAssertion */ : {
                    this.castTerm = typeFlow.typeCheck(this.castTerm);
                    var applyTargetType = !this.operand.isParenthesized;
                    var targetType = applyTargetType ? this.castTerm.type : null;
                    typeFlow.checker.typeCheckWithContextualType(targetType, typeFlow.checker.inProvisionalTypecheckMode(), true, this.operand);
                    typeFlow.castWithCoercion(this.operand, this.castTerm.type, false, true);
                    this.type = this.castTerm.type;
                    return this;

                }
                case 12 /* Void */ : {
                    this.operand = typeFlow.typeCheck(this.operand);
                    this.type = typeFlow.checker.undefinedType;
                    break;

                }
                default: {
                    throw new Error("please implement in derived class");

                }
            }
            return this;
        };
        UnaryExpression.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            switch(this.nodeType) {
                case 68 /* IncPost */ : {
                    emitter.emitJavascript(this.operand, 99 /* PlusPlus */ , false);
                    emitter.writeToOutput("++");
                    break;

                }
                case 65 /* LogNot */ : {
                    emitter.writeToOutput("!");
                    emitter.emitJavascript(this.operand, 98 /* Exclamation */ , false);
                    break;

                }
                case 69 /* DecPost */ : {
                    emitter.emitJavascript(this.operand, 100 /* MinusMinus */ , false);
                    emitter.writeToOutput("--");
                    break;

                }
                case 11 /* ObjectLit */ : {
                    emitter.emitObjectLiteral(this.operand);
                    break;

                }
                case 10 /* ArrayLit */ : {
                    emitter.emitArrayLiteral(this.operand);
                    break;

                }
                case 64 /* Not */ : {
                    emitter.writeToOutput("~");
                    emitter.emitJavascript(this.operand, 97 /* Tilde */ , false);
                    break;

                }
                case 15 /* Neg */ : {
                    emitter.writeToOutput("-");
                    if(this.operand.nodeType == 15 /* Neg */ ) {
                        this.operand.isParenthesized = true;
                    }
                    emitter.emitJavascript(this.operand, 93 /* Minus */ , false);
                    break;

                }
                case 14 /* Pos */ : {
                    emitter.writeToOutput("+");
                    if(this.operand.nodeType == 14 /* Pos */ ) {
                        this.operand.isParenthesized = true;
                    }
                    emitter.emitJavascript(this.operand, 92 /* Plus */ , false);
                    break;

                }
                case 66 /* IncPre */ : {
                    emitter.writeToOutput("++");
                    emitter.emitJavascript(this.operand, 99 /* PlusPlus */ , false);
                    break;

                }
                case 67 /* DecPre */ : {
                    emitter.writeToOutput("--");
                    emitter.emitJavascript(this.operand, 100 /* MinusMinus */ , false);
                    break;

                }
                case 78 /* Throw */ : {
                    emitter.writeToOutput("throw ");
                    emitter.emitJavascript(this.operand, 97 /* Tilde */ , false);
                    emitter.writeToOutput(";");
                    break;

                }
                case 23 /* Typeof */ : {
                    emitter.writeToOutput("typeof ");
                    emitter.emitJavascript(this.operand, 97 /* Tilde */ , false);
                    break;

                }
                case 16 /* Delete */ : {
                    emitter.writeToOutput("delete ");
                    emitter.emitJavascript(this.operand, 97 /* Tilde */ , false);
                    break;

                }
                case 12 /* Void */ : {
                    emitter.writeToOutput("void ");
                    emitter.emitJavascript(this.operand, 97 /* Tilde */ , false);
                    break;

                }
                case 70 /* TypeAssertion */ : {
                    emitter.emitJavascript(this.operand, 97 /* Tilde */ , false);
                    break;

                }
                default: {
                    throw new Error("please implement in derived class");

                }
            }
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        return UnaryExpression;
    })(Expression);
    TypeScript.UnaryExpression = UnaryExpression;    
    var CallExpression = (function (_super) {
        __extends(CallExpression, _super);
        function CallExpression(nodeType, target, arguments) {
                _super.call(this, nodeType);
            this.target = target;
            this.arguments = arguments;
            this.signature = null;
            this.minChar = this.target.minChar;
        }
        CallExpression.prototype.typeCheck = function (typeFlow) {
            if(this.nodeType == 29 /* New */ ) {
                return typeFlow.typeCheckNew(this);
            } else {
                return typeFlow.typeCheckCall(this);
            }
        };
        CallExpression.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            if(this.nodeType == 29 /* New */ ) {
                emitter.emitNew(this.target, this.arguments);
            } else {
                emitter.emitCall(this, this.target, this.arguments);
            }
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        return CallExpression;
    })(Expression);
    TypeScript.CallExpression = CallExpression;    
    var BinaryExpression = (function (_super) {
        __extends(BinaryExpression, _super);
        function BinaryExpression(nodeType, operand1, operand2) {
                _super.call(this, nodeType);
            this.operand1 = operand1;
            this.operand2 = operand2;
        }
        BinaryExpression.prototype.typeCheck = function (typeFlow) {
            switch(this.nodeType) {
                case 19 /* Dot */ : {
                    return typeFlow.typeCheckDotOperator(this);

                }
                case 30 /* Asg */ : {
                    return typeFlow.typeCheckAsgOperator(this);

                }
                case 56 /* Add */ :
                case 57 /* Sub */ :
                case 58 /* Mul */ :
                case 59 /* Div */ :
                case 60 /* Mod */ :
                case 45 /* Or */ :
                case 47 /* And */ : {
                    return typeFlow.typeCheckArithmeticOperator(this, false);

                }
                case 46 /* Xor */ : {
                    return typeFlow.typeCheckBitwiseOperator(this, false);

                }
                case 49 /* Ne */ :
                case 48 /* Eq */ : {
                    var text;
                    if(typeFlow.checker.styleSettings.eqeqeq) {
                        text = TypeScript.nodeTypeTable[this.nodeType];
                        typeFlow.checker.errorReporter.styleError(this, "use of " + text);
                    } else {
                        if(typeFlow.checker.styleSettings.eqnull) {
                            text = TypeScript.nodeTypeTable[this.nodeType];
                            if((this.operand2 !== null) && (this.operand2.nodeType == 9 /* Null */ )) {
                                typeFlow.checker.errorReporter.styleError(this, "use of " + text + " to compare with null");
                            }
                        }
                    }

                }
                case 50 /* Eqv */ :
                case 51 /* NEqv */ :
                case 52 /* Lt */ :
                case 53 /* Le */ :
                case 55 /* Ge */ :
                case 54 /* Gt */ : {
                    return typeFlow.typeCheckBooleanOperator(this);

                }
                case 27 /* Index */ : {
                    return typeFlow.typeCheckIndex(this);

                }
                case 72 /* Member */ : {
                    this.type = typeFlow.voidType;
                    return this;

                }
                case 43 /* LogOr */ : {
                    return typeFlow.typeCheckLogOr(this);

                }
                case 44 /* LogAnd */ : {
                    return typeFlow.typeCheckLogAnd(this);

                }
                case 31 /* AsgAdd */ :
                case 32 /* AsgSub */ :
                case 34 /* AsgMul */ :
                case 33 /* AsgDiv */ :
                case 35 /* AsgMod */ :
                case 38 /* AsgOr */ :
                case 36 /* AsgAnd */ : {
                    return typeFlow.typeCheckArithmeticOperator(this, true);

                }
                case 37 /* AsgXor */ : {
                    return typeFlow.typeCheckBitwiseOperator(this, true);

                }
                case 61 /* Lsh */ :
                case 62 /* Rsh */ :
                case 63 /* Rs2 */ : {
                    return typeFlow.typeCheckShift(this, false);

                }
                case 39 /* AsgLsh */ :
                case 40 /* AsgRsh */ :
                case 41 /* AsgRs2 */ : {
                    return typeFlow.typeCheckShift(this, true);

                }
                case 13 /* Comma */ : {
                    return typeFlow.typeCheckCommaOperator(this);

                }
                case 22 /* InstOf */ : {
                    return typeFlow.typeCheckInstOf(this);

                }
                case 18 /* In */ : {
                    return typeFlow.typeCheckInOperator(this);

                }
                case 20 /* From */ : {
                    typeFlow.checker.errorReporter.simpleError(this, "Illegal use of 'from' keyword in binary expression");
                    break;

                }
                default: {
                    throw new Error("please implement in derived class");

                }
            }
            return this;
        };
        BinaryExpression.prototype.emit = function (emitter, tokenId, startLine) {
            var binTokenId = TypeScript.nodeTypeToTokTable[this.nodeType];
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            if(binTokenId != undefined) {
                emitter.emitJavascript(this.operand1, binTokenId, false);
                if(TypeScript.tokenTable[binTokenId].text == "instanceof") {
                    emitter.writeToOutput(" instanceof ");
                } else {
                    if(TypeScript.tokenTable[binTokenId].text == "in") {
                        emitter.writeToOutput(" in ");
                    } else {
                        emitter.writeToOutputTrimmable(" " + TypeScript.tokenTable[binTokenId].text + " ");
                    }
                }
                emitter.emitJavascript(this.operand2, binTokenId, false);
            } else {
                switch(this.nodeType) {
                    case 19 /* Dot */ : {
                        if(!emitter.tryEmitConstant(this)) {
                            emitter.emitJavascript(this.operand1, 101 /* Dot */ , false);
                            emitter.writeToOutput(".");
                            emitter.emitJavascriptName(this.operand2, false);
                        }
                        break;

                    }
                    case 27 /* Index */ : {
                        emitter.emitIndex(this.operand1, this.operand2);
                        break;

                    }
                    case 72 /* Member */ : {
                        if(this.operand2.nodeType == 71 /* FuncDecl */  && (this.operand2).isAccessor()) {
                            var funcDecl = this.operand2;
                            if(TypeScript.hasFlag(funcDecl.fncFlags, 64 /* GetAccessor */ )) {
                                emitter.writeToOutput("get ");
                            } else {
                                emitter.writeToOutput("set ");
                            }
                            emitter.emitJavascript(this.operand1, 75 /* Colon */ , false);
                        } else {
                            emitter.emitJavascript(this.operand1, 75 /* Colon */ , false);
                            emitter.writeToOutputTrimmable(": ");
                        }
                        emitter.emitJavascript(this.operand2, 61 /* Comma */ , false);
                        break;

                    }
                    case 13 /* Comma */ : {
                        emitter.emitJavascript(this.operand1, 61 /* Comma */ , false);
                        if(emitter.emitState.inObjectLiteral) {
                            emitter.writeLineToOutput(", ");
                        } else {
                            emitter.writeToOutput(",");
                        }
                        emitter.emitJavascript(this.operand2, 61 /* Comma */ , false);
                        break;

                    }
                    case 21 /* Is */ : {
                        throw new Error("should be de-sugared during type check");

                    }
                    default: {
                        throw new Error("please implement in derived class");

                    }
                }
            }
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        return BinaryExpression;
    })(Expression);
    TypeScript.BinaryExpression = BinaryExpression;    
    var ConditionalExpression = (function (_super) {
        __extends(ConditionalExpression, _super);
        function ConditionalExpression(operand1, operand2, operand3) {
                _super.call(this, 42 /* ConditionalExpression */ );
            this.operand1 = operand1;
            this.operand2 = operand2;
            this.operand3 = operand3;
        }
        ConditionalExpression.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckQMark(this);
        };
        ConditionalExpression.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            emitter.emitJavascript(this.operand1, 74 /* Question */ , false);
            emitter.writeToOutput(" ? ");
            emitter.emitJavascript(this.operand2, 74 /* Question */ , false);
            emitter.writeToOutput(" : ");
            emitter.emitJavascript(this.operand3, 74 /* Question */ , false);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        return ConditionalExpression;
    })(Expression);
    TypeScript.ConditionalExpression = ConditionalExpression;    
    var NumberLiteral = (function (_super) {
        __extends(NumberLiteral, _super);
        function NumberLiteral(value, hasEmptyFraction) {
                _super.call(this, 24 /* NumberLit */ );
            this.value = value;
            this.hasEmptyFraction = hasEmptyFraction;
            this.isNegativeZero = false;
        }
        NumberLiteral.prototype.typeCheck = function (typeFlow) {
            this.type = typeFlow.doubleType;
            return this;
        };
        NumberLiteral.prototype.treeViewLabel = function () {
            return "num: " + this.printLabel();
        };
        NumberLiteral.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            if(this.isNegativeZero) {
                emitter.writeToOutput("-");
            }
            emitter.writeToOutput(this.value.toString());
            if(this.hasEmptyFraction) {
                emitter.writeToOutput(".0");
            }
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        NumberLiteral.prototype.printLabel = function () {
            if(Math.floor(this.value) != this.value) {
                return this.value.toFixed(2).toString();
            } else {
                if(this.hasEmptyFraction) {
                    return this.value.toString() + ".0";
                } else {
                    return this.value.toString();
                }
            }
        };
        return NumberLiteral;
    })(Expression);
    TypeScript.NumberLiteral = NumberLiteral;    
    var RegexLiteral = (function (_super) {
        __extends(RegexLiteral, _super);
        function RegexLiteral(regex) {
                _super.call(this, 8 /* Regex */ );
            this.regex = regex;
        }
        RegexLiteral.prototype.typeCheck = function (typeFlow) {
            this.type = typeFlow.regexType;
            return this;
        };
        RegexLiteral.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            emitter.writeToOutput(this.regex.toString());
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        return RegexLiteral;
    })(Expression);
    TypeScript.RegexLiteral = RegexLiteral;    
    var StringLiteral = (function (_super) {
        __extends(StringLiteral, _super);
        function StringLiteral(text) {
                _super.call(this, 7 /* QString */ );
            this.text = text;
        }
        StringLiteral.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            emitter.emitStringLiteral(this.text);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        StringLiteral.prototype.typeCheck = function (typeFlow) {
            this.type = typeFlow.stringType;
            return this;
        };
        StringLiteral.prototype.treeViewLabel = function () {
            return "st: " + this.text;
        };
        StringLiteral.prototype.printLabel = function () {
            return this.text;
        };
        return StringLiteral;
    })(Expression);
    TypeScript.StringLiteral = StringLiteral;    
    var ModuleElement = (function (_super) {
        __extends(ModuleElement, _super);
        function ModuleElement(nodeType) {
                _super.call(this, nodeType);
        }
        return ModuleElement;
    })(AST);
    TypeScript.ModuleElement = ModuleElement;    
    var ImportDeclaration = (function (_super) {
        __extends(ImportDeclaration, _super);
        function ImportDeclaration(id, alias) {
                _super.call(this, 97 /* ImportDeclaration */ );
            this.id = id;
            this.alias = alias;
            this.varFlags = 0 /* None */ ;
            this.isDynamicImport = false;
        }
        ImportDeclaration.prototype.isStatementOrExpression = function () {
            return true;
        };
        ImportDeclaration.prototype.emit = function (emitter, tokenId, startLine) {
            var mod = this.alias.type;
            if(!this.isDynamicImport || (this.id.sym && !(this.id.sym).onlyReferencedAsTypeRef)) {
                var prevModAliasId = emitter.modAliasId;
                var prevFirstModAlias = emitter.firstModAlias;
                emitter.recordSourceMappingStart(this);
                emitter.emitParensAndCommentsInPlace(this, true);
                emitter.writeToOutput("var " + this.id.actualText + " = ");
                emitter.modAliasId = this.id.actualText;
                emitter.firstModAlias = this.firstAliasedModToString();
                emitter.emitJavascript(this.alias, 97 /* Tilde */ , false);
                if(!this.isDynamicImport) {
                    emitter.writeToOutput(";");
                }
                emitter.emitParensAndCommentsInPlace(this, false);
                emitter.recordSourceMappingEnd(this);
                emitter.modAliasId = prevModAliasId;
                emitter.firstModAlias = prevFirstModAlias;
            }
        };
        ImportDeclaration.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckImportDecl(this);
        };
        ImportDeclaration.prototype.getAliasName = function (aliasAST) {
            if (typeof aliasAST === "undefined") { aliasAST = this.alias; }
            if(aliasAST.nodeType == 25 /* Name */ ) {
                return (aliasAST).actualText;
            } else {
                var dotExpr = aliasAST;
                return this.getAliasName(dotExpr.operand1) + "." + this.getAliasName(dotExpr.operand2);
            }
        };
        ImportDeclaration.prototype.firstAliasedModToString = function () {
            if(this.alias.nodeType == 25 /* Name */ ) {
                return (this.alias).actualText;
            } else {
                var dotExpr = this.alias;
                var firstMod = dotExpr.operand1;
                return firstMod.actualText;
            }
        };
        return ImportDeclaration;
    })(ModuleElement);
    TypeScript.ImportDeclaration = ImportDeclaration;    
    var BoundDecl = (function (_super) {
        __extends(BoundDecl, _super);
        function BoundDecl(id, nodeType, nestingLevel) {
                _super.call(this, nodeType);
            this.id = id;
            this.nestingLevel = nestingLevel;
            this.init = null;
            this.typeExpr = null;
            this.varFlags = 0 /* None */ ;
            this.sym = null;
        }
        BoundDecl.prototype.isStatementOrExpression = function () {
            return true;
        };
        BoundDecl.prototype.isPrivate = function () {
            return TypeScript.hasFlag(this.varFlags, 2 /* Private */ );
        };
        BoundDecl.prototype.isPublic = function () {
            return TypeScript.hasFlag(this.varFlags, 4 /* Public */ );
        };
        BoundDecl.prototype.isProperty = function () {
            return TypeScript.hasFlag(this.varFlags, 512 /* Property */ );
        };
        BoundDecl.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckBoundDecl(this);
        };
        BoundDecl.prototype.printLabel = function () {
            return this.treeViewLabel();
        };
        return BoundDecl;
    })(AST);
    TypeScript.BoundDecl = BoundDecl;    
    var VarDecl = (function (_super) {
        __extends(VarDecl, _super);
        function VarDecl(id, nest) {
                _super.call(this, id, 73 /* VarDecl */ , nest);
        }
        VarDecl.prototype.isAmbient = function () {
            return TypeScript.hasFlag(this.varFlags, 8 /* Ambient */ );
        };
        VarDecl.prototype.isExported = function () {
            return TypeScript.hasFlag(this.varFlags, 1 /* Exported */ );
        };
        VarDecl.prototype.isStatic = function () {
            return TypeScript.hasFlag(this.varFlags, 16 /* Static */ );
        };
        VarDecl.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitJavascriptVarDecl(this, tokenId);
        };
        VarDecl.prototype.treeViewLabel = function () {
            return "var " + this.id.actualText;
        };
        return VarDecl;
    })(BoundDecl);
    TypeScript.VarDecl = VarDecl;    
    var ArgDecl = (function (_super) {
        __extends(ArgDecl, _super);
        function ArgDecl(id) {
                _super.call(this, id, 74 /* ArgDecl */ , 0);
            this.isOptional = false;
            this.parameterPropertySym = null;
        }
        ArgDecl.prototype.isOptionalArg = function () {
            return this.isOptional || this.init;
        };
        ArgDecl.prototype.treeViewLabel = function () {
            return "arg: " + this.id.actualText;
        };
        ArgDecl.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            emitter.writeToOutput(this.id.actualText);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        return ArgDecl;
    })(BoundDecl);
    TypeScript.ArgDecl = ArgDecl;    
    var internalId = 0;
    var FuncDecl = (function (_super) {
        __extends(FuncDecl, _super);
        function FuncDecl(name, bod, isConstructor, arguments, vars, scopes, statics, nodeType) {
                _super.call(this, nodeType);
            this.name = name;
            this.bod = bod;
            this.isConstructor = isConstructor;
            this.arguments = arguments;
            this.vars = vars;
            this.scopes = scopes;
            this.statics = statics;
            this.hint = null;
            this.fncFlags = 0 /* None */ ;
            this.returnTypeAnnotation = null;
            this.variableArgList = false;
            this.jumpRefs = null;
            this.internalNameCache = null;
            this.tmp1Declared = false;
            this.enclosingFnc = null;
            this.freeVariables = [];
            this.unitIndex = -1;
            this.classDecl = null;
            this.boundToProperty = null;
            this.isOverload = false;
            this.innerStaticFuncs = [];
            this.isTargetTypedAsMethod = false;
            this.isInlineCallLiteral = false;
            this.accessorSymbol = null;
            this.leftCurlyCount = 0;
            this.rightCurlyCount = 0;
            this.returnStatementsWithExpressions = [];
            this.scopeType = null;
            this.endingToken = null;
        }
        FuncDecl.prototype.internalName = function () {
            if(this.internalNameCache == null) {
                var extName = this.getNameText();
                if(extName) {
                    this.internalNameCache = "_internal_" + extName;
                } else {
                    this.internalNameCache = "_internal_" + internalId++;
                }
            }
            return this.internalNameCache;
        };
        FuncDecl.prototype.hasSelfReference = function () {
            return TypeScript.hasFlag(this.fncFlags, 16384 /* HasSelfReference */ );
        };
        FuncDecl.prototype.setHasSelfReference = function () {
            this.fncFlags |= 16384 /* HasSelfReference */ ;
        };
        FuncDecl.prototype.addCloRef = function (id, sym) {
            if(this.envids == null) {
                this.envids = new Array();
            }
            this.envids[this.envids.length] = id;
            var outerFnc = this.enclosingFnc;
            if(sym) {
                while(outerFnc && (outerFnc.type.symbol != sym.container)) {
                    outerFnc.addJumpRef(sym);
                    outerFnc = outerFnc.enclosingFnc;
                }
            }
            return this.envids.length - 1;
        };
        FuncDecl.prototype.addJumpRef = function (sym) {
            if(this.jumpRefs == null) {
                this.jumpRefs = new Array();
            }
            var id = new Identifier(sym.name);
            this.jumpRefs[this.jumpRefs.length] = id;
            id.sym = sym;
            id.cloId = this.addCloRef(id, null);
        };
        FuncDecl.prototype.buildControlFlow = function () {
            var entry = new TypeScript.BasicBlock();
            var exit = new TypeScript.BasicBlock();
            var context = new TypeScript.ControlFlowContext(entry, exit);
            var controlFlowPrefix = function (ast, parent, walker) {
                ast.addToControlFlow(walker.state);
                return ast;
            };
            var walker = TypeScript.getAstWalkerFactory().getWalker(controlFlowPrefix, null, null, context);
            context.walker = walker;
            walker.walk(this.bod, this);
            return context;
        };
        FuncDecl.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckFunction(this);
        };
        FuncDecl.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitJavascriptFunction(this);
        };
        FuncDecl.prototype.getNameText = function () {
            if(this.name) {
                return this.name.actualText;
            } else {
                return this.hint;
            }
        };
        FuncDecl.prototype.isMethod = function () {
            return (this.fncFlags & 1024 /* Method */ ) != 0 /* None */ ;
        };
        FuncDecl.prototype.isCallMember = function () {
            return TypeScript.hasFlag(this.fncFlags, 4096 /* CallMember */ );
        };
        FuncDecl.prototype.isConstructMember = function () {
            return TypeScript.hasFlag(this.fncFlags, 8192 /* ConstructMember */ );
        };
        FuncDecl.prototype.isIndexerMember = function () {
            return TypeScript.hasFlag(this.fncFlags, 65536 /* IndexerMember */ );
        };
        FuncDecl.prototype.isSpecialFn = function () {
            return this.isCallMember() || this.isIndexerMember() || this.isConstructMember();
        };
        FuncDecl.prototype.isAnonymousFn = function () {
            return this.name === null;
        };
        FuncDecl.prototype.isAccessor = function () {
            return TypeScript.hasFlag(this.fncFlags, 64 /* GetAccessor */ ) || TypeScript.hasFlag(this.fncFlags, 128 /* SetAccessor */ );
        };
        FuncDecl.prototype.isGetAccessor = function () {
            return TypeScript.hasFlag(this.fncFlags, 64 /* GetAccessor */ );
        };
        FuncDecl.prototype.isSetAccessor = function () {
            return TypeScript.hasFlag(this.fncFlags, 128 /* SetAccessor */ );
        };
        FuncDecl.prototype.isAmbient = function () {
            return TypeScript.hasFlag(this.fncFlags, 8 /* Ambient */ );
        };
        FuncDecl.prototype.isExported = function () {
            return TypeScript.hasFlag(this.fncFlags, 1 /* Exported */ );
        };
        FuncDecl.prototype.isPrivate = function () {
            return TypeScript.hasFlag(this.fncFlags, 2 /* Private */ );
        };
        FuncDecl.prototype.isPublic = function () {
            return TypeScript.hasFlag(this.fncFlags, 4 /* Public */ );
        };
        FuncDecl.prototype.isStatic = function () {
            return TypeScript.hasFlag(this.fncFlags, 16 /* Static */ );
        };
        FuncDecl.prototype.treeViewLabel = function () {
            if(this.name == null) {
                return "funcExpr";
            } else {
                return "func: " + this.name.actualText;
            }
        };
        FuncDecl.prototype.ClearFlags = function () {
            this.fncFlags = 0 /* None */ ;
        };
        FuncDecl.prototype.isSignature = function () {
            return (this.fncFlags & 512 /* Signature */ ) != 0 /* None */ ;
        };
        FuncDecl.prototype.hasStaticDeclarations = function () {
            return (!this.isConstructor && (this.statics.members.length > 0 || this.innerStaticFuncs.length > 0));
        };
        return FuncDecl;
    })(AST);
    TypeScript.FuncDecl = FuncDecl;    
    var LocationInfo = (function () {
        function LocationInfo(filename, lineMap, unitIndex) {
            this.filename = filename;
            this.lineMap = lineMap;
            this.unitIndex = unitIndex;
        }
        return LocationInfo;
    })();
    TypeScript.LocationInfo = LocationInfo;    
    TypeScript.unknownLocationInfo = new LocationInfo("unknown", null, -1);
    var Script = (function (_super) {
        __extends(Script, _super);
        function Script(vars, scopes) {
                _super.call(this, new Identifier("script"), null, false, null, vars, scopes, null, 93 /* Script */ );
            this.locationInfo = null;
            this.referencedFiles = [];
            this.requiresGlobal = false;
            this.requiresInherits = false;
            this.isResident = false;
            this.isDeclareFile = false;
            this.hasBeenTypeChecked = false;
            this.topLevelMod = null;
            this.leftCurlyCount = 0;
            this.rightCurlyCount = 0;
            this.containsUnicodeChar = false;
            this.containsUnicodeCharInComment = false;
            this.vars = vars;
            this.scopes = scopes;
        }
        Script.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckScript(this);
        };
        Script.prototype.treeViewLabel = function () {
            return "Script";
        };
        Script.prototype.emitRequired = function () {
            if(!this.isDeclareFile && !this.isResident && this.bod) {
                for(var i = 0, len = this.bod.members.length; i < len; i++) {
                    var stmt = this.bod.members[i];
                    if(stmt.nodeType == 96 /* ModuleDeclaration */ ) {
                        if(!TypeScript.hasFlag((stmt).modFlags, 512 /* ShouldEmitModuleDecl */  | 8 /* Ambient */ )) {
                            return true;
                        }
                    } else {
                        if(stmt.nodeType == 94 /* ClassDeclaration */ ) {
                            if(!TypeScript.hasFlag((stmt).varFlags, 8 /* Ambient */ )) {
                                return true;
                            }
                        } else {
                            if(stmt.nodeType == 73 /* VarDecl */ ) {
                                if(!TypeScript.hasFlag((stmt).varFlags, 8 /* Ambient */ )) {
                                    return true;
                                }
                            } else {
                                if(stmt.nodeType == 71 /* FuncDecl */ ) {
                                    if(!(stmt).isSignature()) {
                                        return true;
                                    }
                                } else {
                                    if(stmt.nodeType != 95 /* InterfaceDeclaration */  && stmt.nodeType != 1 /* Empty */ ) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return false;
        };
        Script.prototype.emit = function (emitter, tokenId, startLine) {
            if(this.emitRequired()) {
                emitter.emitParensAndCommentsInPlace(this, true);
                emitter.recordSourceMappingStart(this);
                emitter.emitJavascriptList(this.bod, null, 54 /* Semicolon */ , true, false, false, true, this.requiresInherits);
                emitter.recordSourceMappingEnd(this);
                emitter.emitParensAndCommentsInPlace(this, false);
            }
        };
        return Script;
    })(FuncDecl);
    TypeScript.Script = Script;    
    var NamedDeclaration = (function (_super) {
        __extends(NamedDeclaration, _super);
        function NamedDeclaration(nodeType, name, members) {
                _super.call(this, nodeType);
            this.name = name;
            this.members = members;
            this.leftCurlyCount = 0;
            this.rightCurlyCount = 0;
        }
        return NamedDeclaration;
    })(ModuleElement);
    TypeScript.NamedDeclaration = NamedDeclaration;    
    var ModuleDeclaration = (function (_super) {
        __extends(ModuleDeclaration, _super);
        function ModuleDeclaration(name, members, vars, scopes, endingToken) {
                _super.call(this, 96 /* ModuleDeclaration */ , name, members);
            this.endingToken = endingToken;
            this.modFlags = 512 /* ShouldEmitModuleDecl */ ;
            this.amdDependencies = [];
            this.containsUnicodeChar = false;
            this.containsUnicodeCharInComment = false;
            this.vars = vars;
            this.scopes = scopes;
            this.prettyName = this.name.actualText;
        }
        ModuleDeclaration.prototype.isExported = function () {
            return TypeScript.hasFlag(this.modFlags, 1 /* Exported */ );
        };
        ModuleDeclaration.prototype.isAmbient = function () {
            return TypeScript.hasFlag(this.modFlags, 8 /* Ambient */ );
        };
        ModuleDeclaration.prototype.isEnum = function () {
            return TypeScript.hasFlag(this.modFlags, 256 /* IsEnum */ );
        };
        ModuleDeclaration.prototype.recordNonInterface = function () {
            this.modFlags &= ~512 /* ShouldEmitModuleDecl */ ;
        };
        ModuleDeclaration.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckModule(this);
        };
        ModuleDeclaration.prototype.emit = function (emitter, tokenId, startLine) {
            if(!TypeScript.hasFlag(this.modFlags, 512 /* ShouldEmitModuleDecl */ )) {
                emitter.emitParensAndCommentsInPlace(this, true);
                emitter.recordSourceMappingStart(this);
                emitter.emitJavascriptModule(this);
                emitter.recordSourceMappingEnd(this);
                emitter.emitParensAndCommentsInPlace(this, false);
            }
        };
        return ModuleDeclaration;
    })(NamedDeclaration);
    TypeScript.ModuleDeclaration = ModuleDeclaration;    
    var TypeDeclaration = (function (_super) {
        __extends(TypeDeclaration, _super);
        function TypeDeclaration(nodeType, name, extendsList, implementsList, members) {
                _super.call(this, nodeType, name, members);
            this.extendsList = extendsList;
            this.implementsList = implementsList;
            this.varFlags = 0 /* None */ ;
        }
        TypeDeclaration.prototype.isExported = function () {
            return TypeScript.hasFlag(this.varFlags, 1 /* Exported */ );
        };
        TypeDeclaration.prototype.isAmbient = function () {
            return TypeScript.hasFlag(this.varFlags, 8 /* Ambient */ );
        };
        return TypeDeclaration;
    })(NamedDeclaration);
    TypeScript.TypeDeclaration = TypeDeclaration;    
    var ClassDeclaration = (function (_super) {
        __extends(ClassDeclaration, _super);
        function ClassDeclaration(name, members, extendsList, implementsList) {
                _super.call(this, 94 /* ClassDeclaration */ , name, extendsList, implementsList, members);
            this.knownMemberNames = {
            };
            this.constructorDecl = null;
            this.constructorNestingLevel = 0;
            this.endingToken = null;
        }
        ClassDeclaration.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckClass(this);
        };
        ClassDeclaration.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitJavascriptClass(this);
        };
        return ClassDeclaration;
    })(TypeDeclaration);
    TypeScript.ClassDeclaration = ClassDeclaration;    
    var InterfaceDeclaration = (function (_super) {
        __extends(InterfaceDeclaration, _super);
        function InterfaceDeclaration(name, members, extendsList, implementsList) {
                _super.call(this, 95 /* InterfaceDeclaration */ , name, extendsList, implementsList, members);
        }
        InterfaceDeclaration.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckInterface(this);
        };
        InterfaceDeclaration.prototype.emit = function (emitter, tokenId, startLine) {
        };
        return InterfaceDeclaration;
    })(TypeDeclaration);
    TypeScript.InterfaceDeclaration = InterfaceDeclaration;    
    var Statement = (function (_super) {
        __extends(Statement, _super);
        function Statement(nodeType) {
                _super.call(this, nodeType);
            this.flags |= 64 /* IsStatement */ ;
        }
        Statement.prototype.isLoop = function () {
            return false;
        };
        Statement.prototype.isStatementOrExpression = function () {
            return true;
        };
        Statement.prototype.isCompoundStatement = function () {
            return this.isLoop();
        };
        Statement.prototype.typeCheck = function (typeFlow) {
            this.type = typeFlow.voidType;
            return this;
        };
        return Statement;
    })(ModuleElement);
    TypeScript.Statement = Statement;    
    var LabeledStatement = (function (_super) {
        __extends(LabeledStatement, _super);
        function LabeledStatement(labels, stmt) {
                _super.call(this, 100 /* LabeledStatement */ );
            this.labels = labels;
            this.stmt = stmt;
        }
        LabeledStatement.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            if(this.labels) {
                var labelsLen = this.labels.members.length;
                for(var i = 0; i < labelsLen; i++) {
                    this.labels.members[i].emit(emitter, tokenId, startLine);
                }
            }
            this.stmt.emit(emitter, tokenId, true);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        LabeledStatement.prototype.typeCheck = function (typeFlow) {
            typeFlow.typeCheck(this.labels);
            this.stmt = this.stmt.typeCheck(typeFlow);
            return this;
        };
        LabeledStatement.prototype.addToControlFlow = function (context) {
            var beforeBB = context.current;
            var bb = new TypeScript.BasicBlock();
            context.current = bb;
            beforeBB.addSuccessor(bb);
        };
        return LabeledStatement;
    })(Statement);
    TypeScript.LabeledStatement = LabeledStatement;    
    var Block = (function (_super) {
        __extends(Block, _super);
        function Block(statements, isStatementBlock) {
                _super.call(this, 84 /* Block */ );
            this.statements = statements;
            this.isStatementBlock = isStatementBlock;
        }
        Block.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            if(this.isStatementBlock) {
                emitter.writeLineToOutput(" {");
                emitter.indenter.increaseIndent();
            } else {
                emitter.setInVarBlock(this.statements.members.length);
            }
            var temp = emitter.setInObjectLiteral(false);
            if(this.statements) {
                emitter.emitJavascriptList(this.statements, null, 54 /* Semicolon */ , true, false, false);
            }
            if(this.isStatementBlock) {
                emitter.indenter.decreaseIndent();
                emitter.emitIndent();
                emitter.writeToOutput("}");
            }
            emitter.setInObjectLiteral(temp);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        Block.prototype.addToControlFlow = function (context) {
            var afterIfNeeded = new TypeScript.BasicBlock();
            context.pushStatement(this, context.current, afterIfNeeded);
            if(this.statements) {
                context.walk(this.statements, this);
            }
            context.walker.options.goChildren = false;
            context.popStatement();
            if(afterIfNeeded.predecessors.length > 0) {
                context.current.addSuccessor(afterIfNeeded);
                context.current = afterIfNeeded;
            }
        };
        Block.prototype.typeCheck = function (typeFlow) {
            if(!typeFlow.checker.styleSettings.emptyBlocks) {
                if((this.statements === null) || (this.statements.members.length == 0)) {
                    typeFlow.checker.errorReporter.styleError(this, "empty block");
                }
            }
            typeFlow.typeCheck(this.statements);
            return this;
        };
        return Block;
    })(Statement);
    TypeScript.Block = Block;    
    var Jump = (function (_super) {
        __extends(Jump, _super);
        function Jump(nodeType) {
                _super.call(this, nodeType);
            this.target = null;
            this.resolvedTarget = null;
        }
        Jump.prototype.hasExplicitTarget = function () {
            return (this.target);
        };
        Jump.prototype.setResolvedTarget = function (parser, stmt) {
            if(stmt.isLoop()) {
                this.resolvedTarget = stmt;
                return true;
            }
            if(this.nodeType === 77 /* Continue */ ) {
                parser.reportParseError("continue statement applies only to loops");
                return false;
            } else {
                if((stmt.nodeType == 86 /* Switch */ ) || this.hasExplicitTarget()) {
                    this.resolvedTarget = stmt;
                    return true;
                } else {
                    parser.reportParseError("break statement with no label can apply only to a loop or switch statement");
                    return false;
                }
            }
        };
        Jump.prototype.addToControlFlow = function (context) {
            _super.prototype.addToControlFlow.call(this, context);
            context.unconditionalBranch(this.resolvedTarget, (this.nodeType == 77 /* Continue */ ));
        };
        Jump.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            if(this.nodeType == 76 /* Break */ ) {
                emitter.writeToOutput("break");
            } else {
                emitter.writeToOutput("continue");
            }
            if(this.hasExplicitTarget()) {
                emitter.writeToOutput(" " + this.target);
            }
            emitter.recordSourceMappingEnd(this);
            emitter.writeToOutput(";");
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        return Jump;
    })(Statement);
    TypeScript.Jump = Jump;    
    var WhileStatement = (function (_super) {
        __extends(WhileStatement, _super);
        function WhileStatement(cond) {
                _super.call(this, 82 /* While */ );
            this.cond = cond;
            this.body = null;
        }
        WhileStatement.prototype.isLoop = function () {
            return true;
        };
        WhileStatement.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            var temp = emitter.setInObjectLiteral(false);
            emitter.writeToOutput("while(");
            emitter.emitJavascript(this.cond, 52 /* While */ , false);
            emitter.writeToOutput(")");
            emitter.emitJavascriptStatements(this.body, false, false);
            emitter.setInObjectLiteral(temp);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        WhileStatement.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckWhile(this);
        };
        WhileStatement.prototype.addToControlFlow = function (context) {
            var loopHeader = context.current;
            var loopStart = new TypeScript.BasicBlock();
            var afterLoop = new TypeScript.BasicBlock();
            loopHeader.addSuccessor(loopStart);
            context.current = loopStart;
            context.addContent(this.cond);
            var condBlock = context.current;
            var targetInfo = null;
            if(this.body) {
                context.current = new TypeScript.BasicBlock();
                condBlock.addSuccessor(context.current);
                context.pushStatement(this, loopStart, afterLoop);
                context.walk(this.body, this);
                targetInfo = context.popStatement();
            }
            if(!(context.noContinuation)) {
                var loopEnd = context.current;
                loopEnd.addSuccessor(loopStart);
            }
            context.current = afterLoop;
            condBlock.addSuccessor(afterLoop);
            context.noContinuation = false;
            context.walker.options.goChildren = false;
        };
        return WhileStatement;
    })(Statement);
    TypeScript.WhileStatement = WhileStatement;    
    var DoWhileStatement = (function (_super) {
        __extends(DoWhileStatement, _super);
        function DoWhileStatement() {
                _super.call(this, 83 /* DoWhile */ );
            this.body = null;
            this.whileAST = null;
            this.cond = null;
        }
        DoWhileStatement.prototype.isLoop = function () {
            return true;
        };
        DoWhileStatement.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            var temp = emitter.setInObjectLiteral(false);
            emitter.writeToOutput("do");
            emitter.emitJavascriptStatements(this.body, true, false);
            emitter.recordSourceMappingStart(this.whileAST);
            emitter.writeToOutput("while");
            emitter.recordSourceMappingEnd(this.whileAST);
            emitter.writeToOutput('(');
            emitter.emitJavascript(this.cond, 56 /* CloseParen */ , false);
            emitter.writeToOutput(")");
            emitter.setInObjectLiteral(temp);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        DoWhileStatement.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckDoWhile(this);
        };
        DoWhileStatement.prototype.addToControlFlow = function (context) {
            var loopHeader = context.current;
            var loopStart = new TypeScript.BasicBlock();
            var afterLoop = new TypeScript.BasicBlock();
            loopHeader.addSuccessor(loopStart);
            context.current = loopStart;
            var targetInfo = null;
            if(this.body) {
                context.pushStatement(this, loopStart, afterLoop);
                context.walk(this.body, this);
                targetInfo = context.popStatement();
            }
            if(!(context.noContinuation)) {
                var loopEnd = context.current;
                loopEnd.addSuccessor(loopStart);
                context.addContent(this.cond);
                context.current = afterLoop;
                loopEnd.addSuccessor(afterLoop);
            } else {
                context.addUnreachable(this.cond);
            }
            context.walker.options.goChildren = false;
        };
        return DoWhileStatement;
    })(Statement);
    TypeScript.DoWhileStatement = DoWhileStatement;    
    var IfStatement = (function (_super) {
        __extends(IfStatement, _super);
        function IfStatement(cond) {
                _super.call(this, 81 /* If */ );
            this.cond = cond;
            this.elseBod = null;
            this.statement = new ASTSpan();
        }
        IfStatement.prototype.isCompoundStatement = function () {
            return true;
        };
        IfStatement.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            var temp = emitter.setInObjectLiteral(false);
            emitter.recordSourceMappingStart(this.statement);
            emitter.writeToOutput("if(");
            emitter.emitJavascript(this.cond, 23 /* If */ , false);
            emitter.writeToOutput(")");
            emitter.recordSourceMappingEnd(this.statement);
            emitter.emitJavascriptStatements(this.thenBod, true, false);
            if(this.elseBod) {
                emitter.writeToOutput(" else");
                emitter.emitJavascriptStatements(this.elseBod, true, true);
            }
            emitter.setInObjectLiteral(temp);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        IfStatement.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckIf(this);
        };
        IfStatement.prototype.addToControlFlow = function (context) {
            this.cond.addToControlFlow(context);
            var afterIf = new TypeScript.BasicBlock();
            var beforeIf = context.current;
            context.pushStatement(this, beforeIf, afterIf);
            var hasContinuation = false;
            context.current = new TypeScript.BasicBlock();
            beforeIf.addSuccessor(context.current);
            context.walk(this.thenBod, this);
            if(!context.noContinuation) {
                hasContinuation = true;
                context.current.addSuccessor(afterIf);
            }
            if(this.elseBod) {
                context.current = new TypeScript.BasicBlock();
                context.noContinuation = false;
                beforeIf.addSuccessor(context.current);
                context.walk(this.elseBod, this);
                if(!context.noContinuation) {
                    hasContinuation = true;
                    context.current.addSuccessor(afterIf);
                } else {
                    if(hasContinuation) {
                        context.noContinuation = false;
                    }
                }
            } else {
                beforeIf.addSuccessor(afterIf);
                context.noContinuation = false;
                hasContinuation = true;
            }
            var targetInfo = context.popStatement();
            if(afterIf.predecessors.length > 0) {
                context.noContinuation = false;
                hasContinuation = true;
            }
            if(hasContinuation) {
                context.current = afterIf;
            }
            context.walker.options.goChildren = false;
        };
        return IfStatement;
    })(Statement);
    TypeScript.IfStatement = IfStatement;    
    var ReturnStatement = (function (_super) {
        __extends(ReturnStatement, _super);
        function ReturnStatement() {
                _super.call(this, 75 /* Return */ );
            this.returnExpression = null;
        }
        ReturnStatement.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            var temp = emitter.setInObjectLiteral(false);
            if(this.returnExpression) {
                emitter.writeToOutput("return ");
                emitter.emitJavascript(this.returnExpression, 54 /* Semicolon */ , false);
            } else {
                emitter.writeToOutput("return;");
            }
            emitter.setInObjectLiteral(temp);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        ReturnStatement.prototype.addToControlFlow = function (context) {
            _super.prototype.addToControlFlow.call(this, context);
            context.returnStmt();
        };
        ReturnStatement.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckReturn(this);
        };
        return ReturnStatement;
    })(Statement);
    TypeScript.ReturnStatement = ReturnStatement;    
    var EndCode = (function (_super) {
        __extends(EndCode, _super);
        function EndCode() {
                _super.call(this, 103 /* EndCode */ );
        }
        return EndCode;
    })(AST);
    TypeScript.EndCode = EndCode;    
    var ForInStatement = (function (_super) {
        __extends(ForInStatement, _super);
        function ForInStatement(lval, obj) {
                _super.call(this, 80 /* ForIn */ );
            this.lval = lval;
            this.obj = obj;
            this.statement = new ASTSpan();
            if(this.lval && (this.lval.nodeType == 73 /* VarDecl */ )) {
                (this.lval).varFlags |= 256 /* AutoInit */ ;
            }
        }
        ForInStatement.prototype.isLoop = function () {
            return true;
        };
        ForInStatement.prototype.isFiltered = function () {
            if(this.body) {
                var singleItem = null;
                if(this.body.nodeType == 92 /* List */ ) {
                    var stmts = this.body;
                    if(stmts.members.length == 1) {
                        singleItem = stmts.members[0];
                    }
                } else {
                    singleItem = this.body;
                }
                if(singleItem !== null) {
                    if(singleItem.nodeType == 84 /* Block */ ) {
                        var block = singleItem;
                        if((block.statements !== null) && (block.statements.members.length == 1)) {
                            singleItem = block.statements.members[0];
                        }
                    }
                    if(singleItem.nodeType == 81 /* If */ ) {
                        var cond = (singleItem).cond;
                        if(cond.nodeType == 28 /* Call */ ) {
                            var target = (cond).target;
                            if(target.nodeType == 19 /* Dot */ ) {
                                var binex = target;
                                if((binex.operand1.nodeType == 25 /* Name */ ) && (this.obj.nodeType == 25 /* Name */ ) && ((binex.operand1).actualText == (this.obj).actualText)) {
                                    var prop = binex.operand2;
                                    if(prop.actualText == "hasOwnProperty") {
                                        var args = (cond).arguments;
                                        if((args !== null) && (args.members.length == 1)) {
                                            var arg = args.members[0];
                                            if((arg.nodeType == 25 /* Name */ ) && (this.lval.nodeType == 25 /* Name */ )) {
                                                if(((this.lval).actualText) == (arg).actualText) {
                                                    return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return false;
        };
        ForInStatement.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            var temp = emitter.setInObjectLiteral(false);
            emitter.recordSourceMappingStart(this.statement);
            emitter.writeToOutput("for(");
            emitter.emitJavascript(this.lval, 19 /* For */ , false);
            emitter.writeToOutput(" in ");
            emitter.emitJavascript(this.obj, 19 /* For */ , false);
            emitter.writeToOutput(")");
            emitter.recordSourceMappingEnd(this.statement);
            emitter.emitJavascriptStatements(this.body, true, false);
            emitter.setInObjectLiteral(temp);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        ForInStatement.prototype.typeCheck = function (typeFlow) {
            if(typeFlow.checker.styleSettings.forin) {
                if(!this.isFiltered()) {
                    typeFlow.checker.errorReporter.styleError(this, "no hasOwnProperty filter");
                }
            }
            return typeFlow.typeCheckForIn(this);
        };
        ForInStatement.prototype.addToControlFlow = function (context) {
            if(this.lval) {
                context.addContent(this.lval);
            }
            if(this.obj) {
                context.addContent(this.obj);
            }
            var loopHeader = context.current;
            var loopStart = new TypeScript.BasicBlock();
            var afterLoop = new TypeScript.BasicBlock();
            loopHeader.addSuccessor(loopStart);
            context.current = loopStart;
            if(this.body) {
                context.pushStatement(this, loopStart, afterLoop);
                context.walk(this.body, this);
                context.popStatement();
            }
            if(!(context.noContinuation)) {
                var loopEnd = context.current;
                loopEnd.addSuccessor(loopStart);
            }
            context.current = afterLoop;
            context.noContinuation = false;
            loopHeader.addSuccessor(afterLoop);
            context.walker.options.goChildren = false;
        };
        return ForInStatement;
    })(Statement);
    TypeScript.ForInStatement = ForInStatement;    
    var ForStatement = (function (_super) {
        __extends(ForStatement, _super);
        function ForStatement(init) {
                _super.call(this, 79 /* For */ );
            this.init = init;
        }
        ForStatement.prototype.isLoop = function () {
            return true;
        };
        ForStatement.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            var temp = emitter.setInObjectLiteral(false);
            emitter.writeToOutput("for(");
            if(this.init) {
                if(this.init.nodeType != 92 /* List */ ) {
                    emitter.emitJavascript(this.init, 19 /* For */ , false);
                } else {
                    emitter.setInVarBlock((this.init).members.length);
                    emitter.emitJavascriptList(this.init, null, 19 /* For */ , false, false, false);
                }
            }
            emitter.writeToOutput("; ");
            emitter.emitJavascript(this.cond, 19 /* For */ , false);
            emitter.writeToOutput("; ");
            emitter.emitJavascript(this.incr, 19 /* For */ , false);
            emitter.writeToOutput(")");
            emitter.emitJavascriptStatements(this.body, true, false);
            emitter.setInObjectLiteral(temp);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        ForStatement.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckFor(this);
        };
        ForStatement.prototype.addToControlFlow = function (context) {
            if(this.init) {
                context.addContent(this.init);
            }
            var loopHeader = context.current;
            var loopStart = new TypeScript.BasicBlock();
            var afterLoop = new TypeScript.BasicBlock();
            loopHeader.addSuccessor(loopStart);
            context.current = loopStart;
            var condBlock = null;
            var continueTarget = loopStart;
            var incrBB = null;
            if(this.incr) {
                incrBB = new TypeScript.BasicBlock();
                continueTarget = incrBB;
            }
            if(this.cond) {
                condBlock = context.current;
                context.addContent(this.cond);
                context.current = new TypeScript.BasicBlock();
                condBlock.addSuccessor(context.current);
            }
            var targetInfo = null;
            if(this.body) {
                context.pushStatement(this, continueTarget, afterLoop);
                context.walk(this.body, this);
                targetInfo = context.popStatement();
            }
            if(this.incr) {
                if(context.noContinuation) {
                    if(incrBB.predecessors.length == 0) {
                        context.addUnreachable(this.incr);
                    }
                } else {
                    context.current.addSuccessor(incrBB);
                    context.current = incrBB;
                    context.addContent(this.incr);
                }
            }
            var loopEnd = context.current;
            if(!(context.noContinuation)) {
                loopEnd.addSuccessor(loopStart);
            }
            if(condBlock) {
                condBlock.addSuccessor(afterLoop);
                context.noContinuation = false;
            }
            if(afterLoop.predecessors.length > 0) {
                context.noContinuation = false;
                context.current = afterLoop;
            }
            context.walker.options.goChildren = false;
        };
        return ForStatement;
    })(Statement);
    TypeScript.ForStatement = ForStatement;    
    var WithStatement = (function (_super) {
        __extends(WithStatement, _super);
        function WithStatement(expr) {
                _super.call(this, 98 /* With */ );
            this.expr = expr;
            this.withSym = null;
        }
        WithStatement.prototype.isCompoundStatement = function () {
            return true;
        };
        WithStatement.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            emitter.writeToOutput("with (");
            if(this.expr) {
                emitter.emitJavascript(this.expr, 51 /* With */ , false);
            }
            emitter.writeToOutput(")");
            emitter.emitJavascriptStatements(this.body, true, false);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        WithStatement.prototype.typeCheck = function (typeFlow) {
            return typeFlow.typeCheckWith(this);
        };
        return WithStatement;
    })(Statement);
    TypeScript.WithStatement = WithStatement;    
    var SwitchStatement = (function (_super) {
        __extends(SwitchStatement, _super);
        function SwitchStatement(val) {
                _super.call(this, 86 /* Switch */ );
            this.val = val;
            this.defaultCase = null;
            this.statement = new ASTSpan();
        }
        SwitchStatement.prototype.isCompoundStatement = function () {
            return true;
        };
        SwitchStatement.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            var temp = emitter.setInObjectLiteral(false);
            emitter.recordSourceMappingStart(this.statement);
            emitter.writeToOutput("switch(");
            emitter.emitJavascript(this.val, 106 /* Identifier */ , false);
            emitter.writeToOutput(")");
            emitter.recordSourceMappingEnd(this.statement);
            emitter.writeLineToOutput(" {");
            emitter.indenter.increaseIndent();
            var casesLen = this.caseList.members.length;
            for(var i = 0; i < casesLen; i++) {
                var caseExpr = this.caseList.members[i];
                emitter.emitJavascript(caseExpr, 3 /* Case */ , true);
                emitter.writeLineToOutput("");
            }
            emitter.indenter.decreaseIndent();
            emitter.emitIndent();
            emitter.writeToOutput("}");
            emitter.setInObjectLiteral(temp);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        SwitchStatement.prototype.typeCheck = function (typeFlow) {
            var len = this.caseList.members.length;
            this.val = typeFlow.typeCheck(this.val);
            for(var i = 0; i < len; i++) {
                this.caseList.members[i] = typeFlow.typeCheck(this.caseList.members[i]);
            }
            this.defaultCase = typeFlow.typeCheck(this.defaultCase);
            this.type = typeFlow.voidType;
            return this;
        };
        SwitchStatement.prototype.addToControlFlow = function (context) {
            var condBlock = context.current;
            context.addContent(this.val);
            var execBlock = new TypeScript.BasicBlock();
            var afterSwitch = new TypeScript.BasicBlock();
            condBlock.addSuccessor(execBlock);
            context.pushSwitch(execBlock);
            context.current = execBlock;
            context.pushStatement(this, execBlock, afterSwitch);
            context.walk(this.caseList, this);
            context.popSwitch();
            var targetInfo = context.popStatement();
            var hasCondContinuation = (this.defaultCase == null);
            if(this.defaultCase == null) {
                condBlock.addSuccessor(afterSwitch);
            }
            if(afterSwitch.predecessors.length > 0) {
                context.noContinuation = false;
                context.current = afterSwitch;
            } else {
                context.noContinuation = true;
            }
            context.walker.options.goChildren = false;
        };
        return SwitchStatement;
    })(Statement);
    TypeScript.SwitchStatement = SwitchStatement;    
    var CaseStatement = (function (_super) {
        __extends(CaseStatement, _super);
        function CaseStatement() {
                _super.call(this, 85 /* Case */ );
            this.expr = null;
        }
        CaseStatement.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            if(this.expr) {
                emitter.writeToOutput("case ");
                emitter.emitJavascript(this.expr, 106 /* Identifier */ , false);
            } else {
                emitter.writeToOutput("default");
            }
            emitter.writeToOutput(":");
            emitter.emitJavascriptStatements(this.body, false, false);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        CaseStatement.prototype.typeCheck = function (typeFlow) {
            this.expr = typeFlow.typeCheck(this.expr);
            typeFlow.typeCheck(this.body);
            this.type = typeFlow.voidType;
            return this;
        };
        CaseStatement.prototype.addToControlFlow = function (context) {
            var execBlock = new TypeScript.BasicBlock();
            var sw = context.currentSwitch[context.currentSwitch.length - 1];
            if(this.expr) {
                var exprBlock = new TypeScript.BasicBlock();
                context.current = exprBlock;
                sw.addSuccessor(exprBlock);
                context.addContent(this.expr);
                exprBlock.addSuccessor(execBlock);
            } else {
                sw.addSuccessor(execBlock);
            }
            context.current = execBlock;
            if(this.body) {
                context.walk(this.body, this);
            }
            context.noContinuation = false;
            context.walker.options.goChildren = false;
        };
        return CaseStatement;
    })(Statement);
    TypeScript.CaseStatement = CaseStatement;    
    var TypeReference = (function (_super) {
        __extends(TypeReference, _super);
        function TypeReference(term, arrayCount) {
                _super.call(this, 26 /* TypeRef */ );
            this.term = term;
            this.arrayCount = arrayCount;
        }
        TypeReference.prototype.emit = function (emitter, tokenId, startLine) {
            throw new Error("should not emit a type ref");
        };
        TypeReference.prototype.typeCheck = function (typeFlow) {
            var prevInTCTR = typeFlow.inTypeRefTypeCheck;
            typeFlow.inTypeRefTypeCheck = true;
            var typeLink = TypeScript.getTypeLink(this, typeFlow.checker, true);
            typeFlow.checker.resolveTypeLink(typeFlow.scope, typeLink, false);
            if(this.term) {
                typeFlow.typeCheck(this.term);
            }
            typeFlow.checkForVoidConstructor(typeLink.type, this);
            this.type = typeLink.type;
            if(this.term) {
                this.term.type = this.type;
            }
            typeFlow.inTypeRefTypeCheck = prevInTCTR;
            return this;
        };
        return TypeReference;
    })(AST);
    TypeScript.TypeReference = TypeReference;    
    var TryFinally = (function (_super) {
        __extends(TryFinally, _super);
        function TryFinally(tryNode, finallyNode) {
                _super.call(this, 89 /* TryFinally */ );
            this.tryNode = tryNode;
            this.finallyNode = finallyNode;
        }
        TryFinally.prototype.isCompoundStatement = function () {
            return true;
        };
        TryFinally.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.recordSourceMappingStart(this);
            emitter.emitJavascript(this.tryNode, 47 /* Try */ , false);
            emitter.emitJavascript(this.finallyNode, 18 /* Finally */ , false);
            emitter.recordSourceMappingEnd(this);
        };
        TryFinally.prototype.typeCheck = function (typeFlow) {
            this.tryNode = typeFlow.typeCheck(this.tryNode);
            this.finallyNode = typeFlow.typeCheck(this.finallyNode);
            this.type = typeFlow.voidType;
            return this;
        };
        TryFinally.prototype.addToControlFlow = function (context) {
            var afterFinally = new TypeScript.BasicBlock();
            context.walk(this.tryNode, this);
            var finBlock = new TypeScript.BasicBlock();
            if(context.current) {
                context.current.addSuccessor(finBlock);
            }
            context.current = finBlock;
            context.pushStatement(this, null, afterFinally);
            context.walk(this.finallyNode, this);
            if(!context.noContinuation && context.current) {
                context.current.addSuccessor(afterFinally);
            }
            if(afterFinally.predecessors.length > 0) {
                context.current = afterFinally;
            } else {
                context.noContinuation = true;
            }
            context.popStatement();
            context.walker.options.goChildren = false;
        };
        return TryFinally;
    })(Statement);
    TypeScript.TryFinally = TryFinally;    
    var TryCatch = (function (_super) {
        __extends(TryCatch, _super);
        function TryCatch(tryNode, catchNode) {
                _super.call(this, 88 /* TryCatch */ );
            this.tryNode = tryNode;
            this.catchNode = catchNode;
        }
        TryCatch.prototype.isCompoundStatement = function () {
            return true;
        };
        TryCatch.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            emitter.emitJavascript(this.tryNode, 47 /* Try */ , false);
            emitter.emitJavascript(this.catchNode, 4 /* Catch */ , false);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        TryCatch.prototype.addToControlFlow = function (context) {
            var beforeTry = context.current;
            var tryBlock = new TypeScript.BasicBlock();
            beforeTry.addSuccessor(tryBlock);
            context.current = tryBlock;
            var afterTryCatch = new TypeScript.BasicBlock();
            context.pushStatement(this, null, afterTryCatch);
            context.walk(this.tryNode, this);
            if(!context.noContinuation) {
                if(context.current) {
                    context.current.addSuccessor(afterTryCatch);
                }
            }
            context.current = new TypeScript.BasicBlock();
            beforeTry.addSuccessor(context.current);
            context.walk(this.catchNode, this);
            context.popStatement();
            if(!context.noContinuation) {
                if(context.current) {
                    context.current.addSuccessor(afterTryCatch);
                }
            }
            context.current = afterTryCatch;
            context.walker.options.goChildren = false;
        };
        TryCatch.prototype.typeCheck = function (typeFlow) {
            this.tryNode = typeFlow.typeCheck(this.tryNode);
            this.catchNode = typeFlow.typeCheck(this.catchNode);
            this.type = typeFlow.voidType;
            return this;
        };
        return TryCatch;
    })(Statement);
    TypeScript.TryCatch = TryCatch;    
    var Try = (function (_super) {
        __extends(Try, _super);
        function Try(body) {
                _super.call(this, 87 /* Try */ );
            this.body = body;
        }
        Try.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            emitter.writeToOutput("try ");
            emitter.emitJavascript(this.body, 47 /* Try */ , false);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        Try.prototype.typeCheck = function (typeFlow) {
            this.body = typeFlow.typeCheck(this.body);
            return this;
        };
        Try.prototype.addToControlFlow = function (context) {
            if(this.body) {
                context.walk(this.body, this);
            }
            context.walker.options.goChildren = false;
            context.noContinuation = false;
        };
        return Try;
    })(Statement);
    TypeScript.Try = Try;    
    var Catch = (function (_super) {
        __extends(Catch, _super);
        function Catch(param, body) {
                _super.call(this, 91 /* Catch */ );
            this.param = param;
            this.body = body;
            this.statement = new ASTSpan();
            this.containedScope = null;
            if(this.param) {
                this.param.varFlags |= 256 /* AutoInit */ ;
            }
        }
        Catch.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            emitter.writeToOutput(" ");
            emitter.recordSourceMappingStart(this.statement);
            emitter.writeToOutput("catch (");
            emitter.emitJavascript(this.param, 55 /* OpenParen */ , false);
            emitter.writeToOutput(")");
            emitter.recordSourceMappingEnd(this.statement);
            emitter.emitJavascript(this.body, 4 /* Catch */ , false);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        Catch.prototype.addToControlFlow = function (context) {
            if(this.param) {
                context.addContent(this.param);
                var bodBlock = new TypeScript.BasicBlock();
                context.current.addSuccessor(bodBlock);
                context.current = bodBlock;
            }
            if(this.body) {
                context.walk(this.body, this);
            }
            context.noContinuation = false;
            context.walker.options.goChildren = false;
        };
        Catch.prototype.typeCheck = function (typeFlow) {
            var prevScope = typeFlow.scope;
            typeFlow.scope = this.containedScope;
            this.param = typeFlow.typeCheck(this.param);
            var exceptVar = new TypeScript.ValueLocation();
            var varSym = new TypeScript.VariableSymbol((this.param).id.text, this.param.minChar, typeFlow.checker.locationInfo.unitIndex, exceptVar);
            exceptVar.symbol = varSym;
            exceptVar.typeLink = new TypeScript.TypeLink();
            exceptVar.typeLink.type = typeFlow.anyType;
            var thisFnc = typeFlow.thisFnc;
            if(thisFnc && thisFnc.type) {
                exceptVar.symbol.container = thisFnc.type.symbol;
            } else {
                exceptVar.symbol.container = null;
            }
            this.param.sym = exceptVar.symbol;
            typeFlow.scope.enter(exceptVar.symbol.container, this.param, exceptVar.symbol, typeFlow.checker.errorReporter, false, false, false);
            this.body = typeFlow.typeCheck(this.body);
            if(typeFlow.checker.inProvisionalTypecheckMode()) {
                var table = typeFlow.scope.getTable();
                (table).secondaryTable.table[exceptVar.symbol.name] = undefined;
            }
            this.type = typeFlow.voidType;
            typeFlow.scope = prevScope;
            return this;
        };
        return Catch;
    })(Statement);
    TypeScript.Catch = Catch;    
    var Finally = (function (_super) {
        __extends(Finally, _super);
        function Finally(body) {
                _super.call(this, 90 /* Finally */ );
            this.body = body;
        }
        Finally.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            emitter.writeToOutput("finally");
            emitter.emitJavascript(this.body, 18 /* Finally */ , false);
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        Finally.prototype.addToControlFlow = function (context) {
            if(this.body) {
                context.walk(this.body, this);
            }
            context.walker.options.goChildren = false;
            context.noContinuation = false;
        };
        Finally.prototype.typeCheck = function (typeFlow) {
            this.body = typeFlow.typeCheck(this.body);
            return this;
        };
        return Finally;
    })(Statement);
    TypeScript.Finally = Finally;    
    var Comment = (function (_super) {
        __extends(Comment, _super);
        function Comment(content, isBlockComment, endsLine) {
                _super.call(this, 105 /* Comment */ );
            this.content = content;
            this.isBlockComment = isBlockComment;
            this.endsLine = endsLine;
            this.text = null;
        }
        Comment.prototype.getText = function () {
            if(this.text == null) {
                if(this.isBlockComment) {
                    this.text = this.content.split("\n");
                    for(var i = 0; i < this.text.length; i++) {
                        this.text[i] = this.text[i].replace(/^\s+|\s+$/g, '');
                    }
                } else {
                    this.text = [
                        (this.content.replace(/^\s+|\s+$/g, ''))
                    ];
                }
            }
            return this.text;
        };
        return Comment;
    })(AST);
    TypeScript.Comment = Comment;    
    var DebuggerStatement = (function (_super) {
        __extends(DebuggerStatement, _super);
        function DebuggerStatement() {
                _super.call(this, 106 /* Debugger */ );
        }
        DebuggerStatement.prototype.emit = function (emitter, tokenId, startLine) {
            emitter.emitParensAndCommentsInPlace(this, true);
            emitter.recordSourceMappingStart(this);
            emitter.writeLineToOutput("debugger;");
            emitter.recordSourceMappingEnd(this);
            emitter.emitParensAndCommentsInPlace(this, false);
        };
        return DebuggerStatement;
    })(Statement);
    TypeScript.DebuggerStatement = DebuggerStatement;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var AstWalkOptions = (function () {
        function AstWalkOptions() {
            this.goChildren = true;
            this.goNextSibling = true;
            this.reverseSiblings = false;
        }
        AstWalkOptions.prototype.stopWalk = function (stop) {
            if (typeof stop === "undefined") { stop = true; }
            this.goChildren = !stop;
            this.goNextSibling = !stop;
        };
        return AstWalkOptions;
    })();
    TypeScript.AstWalkOptions = AstWalkOptions;    
    var AstWalker = (function () {
        function AstWalker(childrenWalkers, pre, post, options, state) {
            this.childrenWalkers = childrenWalkers;
            this.pre = pre;
            this.post = post;
            this.options = options;
            this.state = state;
        }
        AstWalker.prototype.walk = function (ast, parent) {
            var preAst = this.pre(ast, parent, this);
            if(preAst === undefined) {
                preAst = ast;
            }
            if(this.options.goChildren) {
                var svGoSib = this.options.goNextSibling;
                this.options.goNextSibling = true;
                this.childrenWalkers[ast.nodeType](ast, parent, this);
                this.options.goNextSibling = svGoSib;
            } else {
                this.options.goChildren = true;
            }
            if(this.post) {
                var postAst = this.post(preAst, parent, this);
                if(postAst === undefined) {
                    postAst = preAst;
                }
                return postAst;
            } else {
                return preAst;
            }
        };
        return AstWalker;
    })();    
    var AstWalkerFactory = (function () {
        function AstWalkerFactory() {
            this.childrenWalkers = [];
            this.initChildrenWalkers();
        }
        AstWalkerFactory.prototype.walk = function (ast, pre, post, options, state) {
            return this.getWalker(pre, post, options, state).walk(ast, null);
        };
        AstWalkerFactory.prototype.getWalker = function (pre, post, options, state) {
            return this.getSlowWalker(pre, post, options, state);
        };
        AstWalkerFactory.prototype.getSlowWalker = function (pre, post, options, state) {
            if(!options) {
                options = new AstWalkOptions();
            }
            return new AstWalker(this.childrenWalkers, pre, post, options, state);
        };
        AstWalkerFactory.prototype.initChildrenWalkers = function () {
            this.childrenWalkers[0 /* None */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[1 /* Empty */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[2 /* EmptyExpr */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[3 /* True */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[4 /* False */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[5 /* This */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[6 /* Super */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[7 /* QString */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[8 /* Regex */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[9 /* Null */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[10 /* ArrayLit */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[11 /* ObjectLit */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[12 /* Void */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[13 /* Comma */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[14 /* Pos */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[15 /* Neg */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[16 /* Delete */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[17 /* Await */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[18 /* In */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[19 /* Dot */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[20 /* From */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[21 /* Is */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[22 /* InstOf */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[23 /* Typeof */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[24 /* NumberLit */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[25 /* Name */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[26 /* TypeRef */ ] = ChildrenWalkers.walkTypeReferenceChildren;
            this.childrenWalkers[27 /* Index */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[28 /* Call */ ] = ChildrenWalkers.walkCallExpressionChildren;
            this.childrenWalkers[29 /* New */ ] = ChildrenWalkers.walkCallExpressionChildren;
            this.childrenWalkers[30 /* Asg */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[31 /* AsgAdd */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[32 /* AsgSub */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[33 /* AsgDiv */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[34 /* AsgMul */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[35 /* AsgMod */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[36 /* AsgAnd */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[37 /* AsgXor */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[38 /* AsgOr */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[39 /* AsgLsh */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[40 /* AsgRsh */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[41 /* AsgRs2 */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[42 /* ConditionalExpression */ ] = ChildrenWalkers.walkTrinaryExpressionChildren;
            this.childrenWalkers[43 /* LogOr */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[44 /* LogAnd */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[45 /* Or */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[46 /* Xor */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[47 /* And */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[48 /* Eq */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[49 /* Ne */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[50 /* Eqv */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[51 /* NEqv */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[52 /* Lt */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[53 /* Le */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[54 /* Gt */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[55 /* Ge */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[56 /* Add */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[57 /* Sub */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[58 /* Mul */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[59 /* Div */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[60 /* Mod */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[61 /* Lsh */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[62 /* Rsh */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[63 /* Rs2 */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[64 /* Not */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[65 /* LogNot */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[66 /* IncPre */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[67 /* DecPre */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[68 /* IncPost */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[69 /* DecPost */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[70 /* TypeAssertion */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[71 /* FuncDecl */ ] = ChildrenWalkers.walkFuncDeclChildren;
            this.childrenWalkers[72 /* Member */ ] = ChildrenWalkers.walkBinaryExpressionChildren;
            this.childrenWalkers[73 /* VarDecl */ ] = ChildrenWalkers.walkBoundDeclChildren;
            this.childrenWalkers[74 /* ArgDecl */ ] = ChildrenWalkers.walkBoundDeclChildren;
            this.childrenWalkers[75 /* Return */ ] = ChildrenWalkers.walkReturnStatementChildren;
            this.childrenWalkers[76 /* Break */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[77 /* Continue */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[78 /* Throw */ ] = ChildrenWalkers.walkUnaryExpressionChildren;
            this.childrenWalkers[79 /* For */ ] = ChildrenWalkers.walkForStatementChildren;
            this.childrenWalkers[80 /* ForIn */ ] = ChildrenWalkers.walkForInStatementChildren;
            this.childrenWalkers[81 /* If */ ] = ChildrenWalkers.walkIfStatementChildren;
            this.childrenWalkers[82 /* While */ ] = ChildrenWalkers.walkWhileStatementChildren;
            this.childrenWalkers[83 /* DoWhile */ ] = ChildrenWalkers.walkDoWhileStatementChildren;
            this.childrenWalkers[84 /* Block */ ] = ChildrenWalkers.walkBlockChildren;
            this.childrenWalkers[85 /* Case */ ] = ChildrenWalkers.walkCaseStatementChildren;
            this.childrenWalkers[86 /* Switch */ ] = ChildrenWalkers.walkSwitchStatementChildren;
            this.childrenWalkers[87 /* Try */ ] = ChildrenWalkers.walkTryChildren;
            this.childrenWalkers[88 /* TryCatch */ ] = ChildrenWalkers.walkTryCatchChildren;
            this.childrenWalkers[89 /* TryFinally */ ] = ChildrenWalkers.walkTryFinallyChildren;
            this.childrenWalkers[90 /* Finally */ ] = ChildrenWalkers.walkFinallyChildren;
            this.childrenWalkers[91 /* Catch */ ] = ChildrenWalkers.walkCatchChildren;
            this.childrenWalkers[92 /* List */ ] = ChildrenWalkers.walkListChildren;
            this.childrenWalkers[93 /* Script */ ] = ChildrenWalkers.walkScriptChildren;
            this.childrenWalkers[94 /* ClassDeclaration */ ] = ChildrenWalkers.walkClassDeclChildren;
            this.childrenWalkers[95 /* InterfaceDeclaration */ ] = ChildrenWalkers.walkTypeDeclChildren;
            this.childrenWalkers[96 /* ModuleDeclaration */ ] = ChildrenWalkers.walkModuleDeclChildren;
            this.childrenWalkers[97 /* ImportDeclaration */ ] = ChildrenWalkers.walkImportDeclChildren;
            this.childrenWalkers[98 /* With */ ] = ChildrenWalkers.walkWithStatementChildren;
            this.childrenWalkers[99 /* Label */ ] = ChildrenWalkers.walkLabelChildren;
            this.childrenWalkers[100 /* LabeledStatement */ ] = ChildrenWalkers.walkLabeledStatementChildren;
            this.childrenWalkers[101 /* EBStart */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[102 /* GotoEB */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[103 /* EndCode */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[104 /* Error */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[105 /* Comment */ ] = ChildrenWalkers.walkNone;
            this.childrenWalkers[106 /* Debugger */ ] = ChildrenWalkers.walkNone;
            for(var e in (TypeScript.NodeType)._map) {
                if((this.childrenWalkers)[e] === undefined) {
                    throw new Error("initWalkers function is not up to date with enum content!");
                }
            }
        };
        return AstWalkerFactory;
    })();
    TypeScript.AstWalkerFactory = AstWalkerFactory;    
    var globalAstWalkerFactory;
    function getAstWalkerFactory() {
        if(!globalAstWalkerFactory) {
            globalAstWalkerFactory = new AstWalkerFactory();
        }
        return globalAstWalkerFactory;
    }
    TypeScript.getAstWalkerFactory = getAstWalkerFactory;
    var ChildrenWalkers;
    (function (ChildrenWalkers) {
        function walkNone(preAst, parent, walker) {
        }
        ChildrenWalkers.walkNone = walkNone;
        function walkListChildren(preAst, parent, walker) {
            var len = preAst.members.length;
            if(walker.options.reverseSiblings) {
                for(var i = len - 1; i >= 0; i--) {
                    if(walker.options.goNextSibling) {
                        preAst.members[i] = walker.walk(preAst.members[i], preAst);
                    }
                }
            } else {
                for(var i = 0; i < len; i++) {
                    if(walker.options.goNextSibling) {
                        preAst.members[i] = walker.walk(preAst.members[i], preAst);
                    }
                }
            }
        }
        ChildrenWalkers.walkListChildren = walkListChildren;
        function walkUnaryExpressionChildren(preAst, parent, walker) {
            if(preAst.castTerm) {
                preAst.castTerm = walker.walk(preAst.castTerm, preAst);
            }
            if(preAst.operand) {
                preAst.operand = walker.walk(preAst.operand, preAst);
            }
        }
        ChildrenWalkers.walkUnaryExpressionChildren = walkUnaryExpressionChildren;
        function walkBinaryExpressionChildren(preAst, parent, walker) {
            if(walker.options.reverseSiblings) {
                if(preAst.operand2) {
                    preAst.operand2 = walker.walk(preAst.operand2, preAst);
                }
                if((preAst.operand1) && (walker.options.goNextSibling)) {
                    preAst.operand1 = walker.walk(preAst.operand1, preAst);
                }
            } else {
                if(preAst.operand1) {
                    preAst.operand1 = walker.walk(preAst.operand1, preAst);
                }
                if((preAst.operand2) && (walker.options.goNextSibling)) {
                    preAst.operand2 = walker.walk(preAst.operand2, preAst);
                }
            }
        }
        ChildrenWalkers.walkBinaryExpressionChildren = walkBinaryExpressionChildren;
        function walkTypeReferenceChildren(preAst, parent, walker) {
            if(preAst.term) {
                preAst.term = walker.walk(preAst.term, preAst);
            }
        }
        ChildrenWalkers.walkTypeReferenceChildren = walkTypeReferenceChildren;
        function walkCallExpressionChildren(preAst, parent, walker) {
            if(!walker.options.reverseSiblings) {
                preAst.target = walker.walk(preAst.target, preAst);
            }
            if(preAst.arguments && (walker.options.goNextSibling)) {
                preAst.arguments = walker.walk(preAst.arguments, preAst);
            }
            if((walker.options.reverseSiblings) && (walker.options.goNextSibling)) {
                preAst.target = walker.walk(preAst.target, preAst);
            }
        }
        ChildrenWalkers.walkCallExpressionChildren = walkCallExpressionChildren;
        function walkTrinaryExpressionChildren(preAst, parent, walker) {
            if(preAst.operand1) {
                preAst.operand1 = walker.walk(preAst.operand1, preAst);
            }
            if(preAst.operand2 && (walker.options.goNextSibling)) {
                preAst.operand2 = walker.walk(preAst.operand2, preAst);
            }
            if(preAst.operand3 && (walker.options.goNextSibling)) {
                preAst.operand3 = walker.walk(preAst.operand3, preAst);
            }
        }
        ChildrenWalkers.walkTrinaryExpressionChildren = walkTrinaryExpressionChildren;
        function walkFuncDeclChildren(preAst, parent, walker) {
            if(preAst.name) {
                preAst.name = walker.walk(preAst.name, preAst);
            }
            if(preAst.arguments && (preAst.arguments.members.length > 0) && (walker.options.goNextSibling)) {
                preAst.arguments = walker.walk(preAst.arguments, preAst);
            }
            if(preAst.returnTypeAnnotation && (walker.options.goNextSibling)) {
                preAst.returnTypeAnnotation = walker.walk(preAst.returnTypeAnnotation, preAst);
            }
            if(preAst.bod && (preAst.bod.members.length > 0) && (walker.options.goNextSibling)) {
                preAst.bod = walker.walk(preAst.bod, preAst);
            }
        }
        ChildrenWalkers.walkFuncDeclChildren = walkFuncDeclChildren;
        function walkBoundDeclChildren(preAst, parent, walker) {
            if(preAst.id) {
                preAst.id = walker.walk(preAst.id, preAst);
            }
            if(preAst.init) {
                preAst.init = walker.walk(preAst.init, preAst);
            }
            if((preAst.typeExpr) && (walker.options.goNextSibling)) {
                preAst.typeExpr = walker.walk(preAst.typeExpr, preAst);
            }
        }
        ChildrenWalkers.walkBoundDeclChildren = walkBoundDeclChildren;
        function walkReturnStatementChildren(preAst, parent, walker) {
            if(preAst.returnExpression) {
                preAst.returnExpression = walker.walk(preAst.returnExpression, preAst);
            }
        }
        ChildrenWalkers.walkReturnStatementChildren = walkReturnStatementChildren;
        function walkForStatementChildren(preAst, parent, walker) {
            if(preAst.init) {
                preAst.init = walker.walk(preAst.init, preAst);
            }
            if(preAst.cond && walker.options.goNextSibling) {
                preAst.cond = walker.walk(preAst.cond, preAst);
            }
            if(preAst.incr && walker.options.goNextSibling) {
                preAst.incr = walker.walk(preAst.incr, preAst);
            }
            if(preAst.body && walker.options.goNextSibling) {
                preAst.body = walker.walk(preAst.body, preAst);
            }
        }
        ChildrenWalkers.walkForStatementChildren = walkForStatementChildren;
        function walkForInStatementChildren(preAst, parent, walker) {
            preAst.lval = walker.walk(preAst.lval, preAst);
            if(walker.options.goNextSibling) {
                preAst.obj = walker.walk(preAst.obj, preAst);
            }
            if(preAst.body && (walker.options.goNextSibling)) {
                preAst.body = walker.walk(preAst.body, preAst);
            }
        }
        ChildrenWalkers.walkForInStatementChildren = walkForInStatementChildren;
        function walkIfStatementChildren(preAst, parent, walker) {
            preAst.cond = walker.walk(preAst.cond, preAst);
            if(preAst.thenBod && (walker.options.goNextSibling)) {
                preAst.thenBod = walker.walk(preAst.thenBod, preAst);
            }
            if(preAst.elseBod && (walker.options.goNextSibling)) {
                preAst.elseBod = walker.walk(preAst.elseBod, preAst);
            }
        }
        ChildrenWalkers.walkIfStatementChildren = walkIfStatementChildren;
        function walkWhileStatementChildren(preAst, parent, walker) {
            preAst.cond = walker.walk(preAst.cond, preAst);
            if(preAst.body && (walker.options.goNextSibling)) {
                preAst.body = walker.walk(preAst.body, preAst);
            }
        }
        ChildrenWalkers.walkWhileStatementChildren = walkWhileStatementChildren;
        function walkDoWhileStatementChildren(preAst, parent, walker) {
            preAst.cond = walker.walk(preAst.cond, preAst);
            if(preAst.body && (walker.options.goNextSibling)) {
                preAst.body = walker.walk(preAst.body, preAst);
            }
        }
        ChildrenWalkers.walkDoWhileStatementChildren = walkDoWhileStatementChildren;
        function walkBlockChildren(preAst, parent, walker) {
            if(preAst.statements) {
                preAst.statements = walker.walk(preAst.statements, preAst);
            }
        }
        ChildrenWalkers.walkBlockChildren = walkBlockChildren;
        function walkCaseStatementChildren(preAst, parent, walker) {
            if(preAst.expr) {
                preAst.expr = walker.walk(preAst.expr, preAst);
            }
            if(preAst.body && walker.options.goNextSibling) {
                preAst.body = walker.walk(preAst.body, preAst);
            }
        }
        ChildrenWalkers.walkCaseStatementChildren = walkCaseStatementChildren;
        function walkSwitchStatementChildren(preAst, parent, walker) {
            if(preAst.val) {
                preAst.val = walker.walk(preAst.val, preAst);
            }
            if((preAst.caseList) && walker.options.goNextSibling) {
                preAst.caseList = walker.walk(preAst.caseList, preAst);
            }
        }
        ChildrenWalkers.walkSwitchStatementChildren = walkSwitchStatementChildren;
        function walkTryChildren(preAst, parent, walker) {
            if(preAst.body) {
                preAst.body = walker.walk(preAst.body, preAst);
            }
        }
        ChildrenWalkers.walkTryChildren = walkTryChildren;
        function walkTryCatchChildren(preAst, parent, walker) {
            if(preAst.tryNode) {
                preAst.tryNode = walker.walk(preAst.tryNode, preAst);
            }
            if((preAst.catchNode) && walker.options.goNextSibling) {
                preAst.catchNode = walker.walk(preAst.catchNode, preAst);
            }
        }
        ChildrenWalkers.walkTryCatchChildren = walkTryCatchChildren;
        function walkTryFinallyChildren(preAst, parent, walker) {
            if(preAst.tryNode) {
                preAst.tryNode = walker.walk(preAst.tryNode, preAst);
            }
            if(preAst.finallyNode && walker.options.goNextSibling) {
                preAst.finallyNode = walker.walk(preAst.finallyNode, preAst);
            }
        }
        ChildrenWalkers.walkTryFinallyChildren = walkTryFinallyChildren;
        function walkFinallyChildren(preAst, parent, walker) {
            if(preAst.body) {
                preAst.body = walker.walk(preAst.body, preAst);
            }
        }
        ChildrenWalkers.walkFinallyChildren = walkFinallyChildren;
        function walkCatchChildren(preAst, parent, walker) {
            if(preAst.param) {
                preAst.param = walker.walk(preAst.param, preAst);
            }
            if((preAst.body) && walker.options.goNextSibling) {
                preAst.body = walker.walk(preAst.body, preAst);
            }
        }
        ChildrenWalkers.walkCatchChildren = walkCatchChildren;
        function walkRecordChildren(preAst, parent, walker) {
            preAst.name = walker.walk(preAst.name, preAst);
            if(walker.options.goNextSibling && preAst.members) {
                preAst.members = walker.walk(preAst.members, preAst);
            }
        }
        ChildrenWalkers.walkRecordChildren = walkRecordChildren;
        function walkNamedTypeChildren(preAst, parent, walker) {
            walkRecordChildren(preAst, parent, walker);
        }
        ChildrenWalkers.walkNamedTypeChildren = walkNamedTypeChildren;
        function walkClassDeclChildren(preAst, parent, walker) {
            walkNamedTypeChildren(preAst, parent, walker);
            if(walker.options.goNextSibling && preAst.extendsList) {
                preAst.extendsList = walker.walk(preAst.extendsList, preAst);
            }
            if(walker.options.goNextSibling && preAst.implementsList) {
                preAst.implementsList = walker.walk(preAst.implementsList, preAst);
            }
        }
        ChildrenWalkers.walkClassDeclChildren = walkClassDeclChildren;
        function walkScriptChildren(preAst, parent, walker) {
            if(preAst.bod) {
                preAst.bod = walker.walk(preAst.bod, preAst);
            }
        }
        ChildrenWalkers.walkScriptChildren = walkScriptChildren;
        function walkTypeDeclChildren(preAst, parent, walker) {
            walkNamedTypeChildren(preAst, parent, walker);
            if(walker.options.goNextSibling && preAst.extendsList) {
                preAst.extendsList = walker.walk(preAst.extendsList, preAst);
            }
            if(walker.options.goNextSibling && preAst.implementsList) {
                preAst.implementsList = walker.walk(preAst.implementsList, preAst);
            }
        }
        ChildrenWalkers.walkTypeDeclChildren = walkTypeDeclChildren;
        function walkModuleDeclChildren(preAst, parent, walker) {
            walkRecordChildren(preAst, parent, walker);
        }
        ChildrenWalkers.walkModuleDeclChildren = walkModuleDeclChildren;
        function walkImportDeclChildren(preAst, parent, walker) {
            if(preAst.id) {
                preAst.id = walker.walk(preAst.id, preAst);
            }
            if(preAst.alias) {
                preAst.alias = walker.walk(preAst.alias, preAst);
            }
        }
        ChildrenWalkers.walkImportDeclChildren = walkImportDeclChildren;
        function walkWithStatementChildren(preAst, parent, walker) {
            if(preAst.expr) {
                preAst.expr = walker.walk(preAst.expr, preAst);
            }
            if(preAst.body && walker.options.goNextSibling) {
                preAst.body = walker.walk(preAst.body, preAst);
            }
        }
        ChildrenWalkers.walkWithStatementChildren = walkWithStatementChildren;
        function walkLabelChildren(preAst, parent, walker) {
        }
        ChildrenWalkers.walkLabelChildren = walkLabelChildren;
        function walkLabeledStatementChildren(preAst, parent, walker) {
            preAst.labels = walker.walk(preAst.labels, preAst);
            if(walker.options.goNextSibling) {
                preAst.stmt = walker.walk(preAst.stmt, preAst);
            }
        }
        ChildrenWalkers.walkLabeledStatementChildren = walkLabeledStatementChildren;
    })(ChildrenWalkers || (ChildrenWalkers = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (AstWalkerWithDetailCallback) {
        function walk(script, callback) {
            var pre = function (cur, parent) {
                walker.options.goChildren = AstWalkerCallback(true, cur, callback);
                return cur;
            };
            var post = function (cur, parent) {
                AstWalkerCallback(false, cur, callback);
                return cur;
            };
            var walker = TypeScript.getAstWalkerFactory().getWalker(pre, post);
            walker.walk(script, null);
        }
        AstWalkerWithDetailCallback.walk = walk;
        function AstWalkerCallback(pre, ast, callback) {
            var nodeType = ast.nodeType;
            var callbackString = (TypeScript.NodeType)._map[nodeType] + "Callback";
            if(callback[callbackString]) {
                return callback[callbackString](pre, ast);
            }
            if(callback.DefaultCallback) {
                return callback.DefaultCallback(pre, ast);
            }
            return true;
        }
    })(TypeScript.AstWalkerWithDetailCallback || (TypeScript.AstWalkerWithDetailCallback = {}));
    var AstWalkerWithDetailCallback = TypeScript.AstWalkerWithDetailCallback;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    function lastOf(items) {
        return (items === null || items.length === 0) ? null : items[items.length - 1];
    }
    TypeScript.lastOf = lastOf;
    function max(a, b) {
        return a >= b ? a : b;
    }
    TypeScript.max = max;
    function min(a, b) {
        return a <= b ? a : b;
    }
    TypeScript.min = min;
    var AstPath = (function () {
        function AstPath() {
            this.asts = [];
            this.top = -1;
        }
        AstPath.reverseIndexOf = function reverseIndexOf(items, index) {
            return (items === null || items.length <= index) ? null : items[items.length - index - 1];
        }
        AstPath.prototype.clone = function () {
            var clone = new AstPath();
            clone.asts = this.asts.map(function (value) {
                return value;
            });
            clone.top = this.top;
            return clone;
        };
        AstPath.prototype.pop = function () {
            var head = this.ast();
            this.up();
            while(this.asts.length > this.count()) {
                this.asts.pop();
            }
            return head;
        };
        AstPath.prototype.push = function (ast) {
            while(this.asts.length > this.count()) {
                this.asts.pop();
            }
            this.top = this.asts.length;
            this.asts.push(ast);
        };
        AstPath.prototype.up = function () {
            if(this.top <= -1) {
                throw new Error("Invalid call to 'up'");
            }
            this.top--;
        };
        AstPath.prototype.down = function () {
            if(this.top == this.ast.length - 1) {
                throw new Error("Invalid call to 'down'");
            }
            this.top++;
        };
        AstPath.prototype.nodeType = function () {
            if(this.ast() == null) {
                return 0 /* None */ ;
            }
            return this.ast().nodeType;
        };
        AstPath.prototype.ast = function () {
            return AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1));
        };
        AstPath.prototype.parent = function () {
            return AstPath.reverseIndexOf(this.asts, this.asts.length - this.top);
        };
        AstPath.prototype.count = function () {
            return this.top + 1;
        };
        AstPath.prototype.get = function (index) {
            return this.asts[index];
        };
        AstPath.prototype.isNameOfClass = function () {
            if(this.ast() === null || this.parent() === null) {
                return false;
            }
            return (this.ast().nodeType === 25 /* Name */ ) && (this.parent().nodeType === 94 /* ClassDeclaration */ ) && ((this.parent()).name === this.ast());
        };
        AstPath.prototype.isNameOfInterface = function () {
            if(this.ast() === null || this.parent() === null) {
                return false;
            }
            return (this.ast().nodeType === 25 /* Name */ ) && (this.parent().nodeType === 95 /* InterfaceDeclaration */ ) && ((this.parent()).name === this.ast());
        };
        AstPath.prototype.isNameOfArgument = function () {
            if(this.ast() === null || this.parent() === null) {
                return false;
            }
            return (this.ast().nodeType === 25 /* Name */ ) && (this.parent().nodeType === 74 /* ArgDecl */ ) && ((this.parent()).id === this.ast());
        };
        AstPath.prototype.isNameOfVariable = function () {
            if(this.ast() === null || this.parent() === null) {
                return false;
            }
            return (this.ast().nodeType === 25 /* Name */ ) && (this.parent().nodeType === 73 /* VarDecl */ ) && ((this.parent()).id === this.ast());
        };
        AstPath.prototype.isNameOfModule = function () {
            if(this.ast() === null || this.parent() === null) {
                return false;
            }
            return (this.ast().nodeType === 25 /* Name */ ) && (this.parent().nodeType === 96 /* ModuleDeclaration */ ) && ((this.parent()).name === this.ast());
        };
        AstPath.prototype.isNameOfFunction = function () {
            if(this.ast() === null || this.parent() === null) {
                return false;
            }
            return (this.ast().nodeType === 25 /* Name */ ) && (this.parent().nodeType === 71 /* FuncDecl */ ) && ((this.parent()).name === this.ast());
        };
        AstPath.prototype.isChildOfScript = function () {
            var ast = lastOf(this.asts);
            return this.count() >= 3 && this.asts[this.top] === ast && this.asts[this.top - 1].nodeType === 92 /* List */  && this.asts[this.top - 2].nodeType === 93 /* Script */ ;
        };
        AstPath.prototype.isChildOfModule = function () {
            var ast = lastOf(this.asts);
            return this.count() >= 3 && this.asts[this.top] === ast && this.asts[this.top - 1].nodeType === 92 /* List */  && this.asts[this.top - 2].nodeType === 96 /* ModuleDeclaration */ ;
        };
        AstPath.prototype.isChildOfClass = function () {
            var ast = lastOf(this.asts);
            return this.count() >= 3 && this.asts[this.top] === ast && this.asts[this.top - 1].nodeType === 92 /* List */  && this.asts[this.top - 2].nodeType === 94 /* ClassDeclaration */ ;
        };
        AstPath.prototype.isArgumentOfClassConstructor = function () {
            var ast = lastOf(this.asts);
            return this.count() >= 5 && this.asts[this.top] === ast && this.asts[this.top - 1].nodeType === 92 /* List */  && this.asts[this.top - 2].nodeType === 71 /* FuncDecl */  && this.asts[this.top - 3].nodeType === 92 /* List */  && this.asts[this.top - 4].nodeType === 94 /* ClassDeclaration */  && ((this.asts[this.top - 2]).isConstructor) && ((this.asts[this.top - 2]).arguments === this.asts[this.top - 1]) && ((this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2]);
        };
        AstPath.prototype.isChildOfInterface = function () {
            var ast = lastOf(this.asts);
            return this.count() >= 3 && this.asts[this.top] === ast && this.asts[this.top - 1].nodeType === 92 /* List */  && this.asts[this.top - 2].nodeType === 95 /* InterfaceDeclaration */ ;
        };
        AstPath.prototype.isTopLevelImplicitModule = function () {
            return this.count() >= 1 && this.asts[this.top].nodeType === 96 /* ModuleDeclaration */  && TypeScript.hasFlag((this.asts[this.top]).modFlags, 1024 /* IsWholeFile */ );
        };
        AstPath.prototype.isBodyOfTopLevelImplicitModule = function () {
            return this.count() >= 2 && this.asts[this.top - 0].nodeType === 92 /* List */  && this.asts[this.top - 1].nodeType === 96 /* ModuleDeclaration */  && (this.asts[this.top - 1]).members == this.asts[this.top - 0] && TypeScript.hasFlag((this.asts[this.top - 1]).modFlags, 1024 /* IsWholeFile */ );
        };
        AstPath.prototype.isBodyOfScript = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 93 /* Script */  && (this.asts[this.top - 1]).bod == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfSwitch = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 86 /* Switch */  && (this.asts[this.top - 1]).caseList == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfModule = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 96 /* ModuleDeclaration */  && (this.asts[this.top - 1]).members == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfClass = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 94 /* ClassDeclaration */  && (this.asts[this.top - 1]).members == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfFunction = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 71 /* FuncDecl */  && (this.asts[this.top - 1]).bod == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfInterface = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 95 /* InterfaceDeclaration */  && (this.asts[this.top - 1]).members == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfBlock = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 84 /* Block */  && (this.asts[this.top - 1]).statements == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfFor = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 79 /* For */  && (this.asts[this.top - 1]).body == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfCase = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 85 /* Case */  && (this.asts[this.top - 1]).body == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfTry = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 87 /* Try */  && (this.asts[this.top - 1]).body == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfCatch = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 91 /* Catch */  && (this.asts[this.top - 1]).body == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfDoWhile = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 83 /* DoWhile */  && (this.asts[this.top - 1]).body == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfWhile = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 82 /* While */  && (this.asts[this.top - 1]).body == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfForIn = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 80 /* ForIn */  && (this.asts[this.top - 1]).body == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfWith = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 98 /* With */  && (this.asts[this.top - 1]).body == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfFinally = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 90 /* Finally */  && (this.asts[this.top - 1]).body == this.asts[this.top - 0];
        };
        AstPath.prototype.isCaseOfSwitch = function () {
            return this.count() >= 3 && this.asts[this.top - 2].nodeType === 86 /* Switch */  && this.asts[this.top - 1].nodeType === 92 /* List */  && (this.asts[this.top - 2]).caseList == this.asts[this.top - 1];
        };
        AstPath.prototype.isDefaultCaseOfSwitch = function () {
            return this.count() >= 3 && this.asts[this.top - 2].nodeType === 86 /* Switch */  && this.asts[this.top - 1].nodeType === 92 /* List */  && (this.asts[this.top - 2]).caseList == this.asts[this.top - 1] && (this.asts[this.top - 2]).defaultCase == this.asts[this.top - 0];
        };
        AstPath.prototype.isListOfObjectLit = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 11 /* ObjectLit */  && this.asts[this.top - 0].nodeType === 92 /* List */  && (this.asts[this.top - 1]).operand == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfObjectLit = function () {
            return this.isListOfObjectLit();
        };
        AstPath.prototype.isEmptyListOfObjectLit = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 11 /* ObjectLit */  && this.asts[this.top - 0].nodeType === 92 /* List */  && (this.asts[this.top - 1]).operand == this.asts[this.top - 0] && (this.asts[this.top - 0]).members.length == 0;
        };
        AstPath.prototype.isMemberOfObjectLit = function () {
            return this.count() >= 3 && this.asts[this.top - 2].nodeType === 11 /* ObjectLit */  && this.asts[this.top - 1].nodeType === 92 /* List */  && this.asts[this.top - 0].nodeType === 72 /* Member */  && (this.asts[this.top - 2]).operand == this.asts[this.top - 1];
        };
        AstPath.prototype.isNameOfMemberOfObjectLit = function () {
            return this.count() >= 4 && this.asts[this.top - 3].nodeType === 11 /* ObjectLit */  && this.asts[this.top - 2].nodeType === 92 /* List */  && this.asts[this.top - 1].nodeType === 72 /* Member */  && this.asts[this.top - 0].nodeType === 25 /* Name */  && (this.asts[this.top - 3]).operand == this.asts[this.top - 2];
        };
        AstPath.prototype.isListOfArrayLit = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 10 /* ArrayLit */  && this.asts[this.top - 0].nodeType === 92 /* List */  && (this.asts[this.top - 1]).operand == this.asts[this.top - 0];
        };
        AstPath.prototype.isTargetOfMember = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 72 /* Member */  && (this.asts[this.top - 1]).operand1 === this.asts[this.top - 0];
        };
        AstPath.prototype.isMemberOfMember = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 72 /* Member */  && (this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];
        };
        AstPath.prototype.isItemOfList = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 92 /* List */ ;
        };
        AstPath.prototype.isThenOfIf = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 81 /* If */  && (this.asts[this.top - 1]).thenBod == this.asts[this.top - 0];
        };
        AstPath.prototype.isElseOfIf = function () {
            return this.count() >= 2 && this.asts[this.top - 1].nodeType === 81 /* If */  && (this.asts[this.top - 1]).elseBod == this.asts[this.top - 0];
        };
        AstPath.prototype.isBodyOfDefaultCase = function () {
            return this.isBodyOfCase();
        };
        AstPath.prototype.isSingleStatementList = function () {
            return this.count() >= 1 && this.asts[this.top].nodeType === 92 /* List */  && (this.asts[this.top]).members.length === 1;
        };
        AstPath.prototype.isArgumentListOfFunction = function () {
            return this.count() >= 2 && this.asts[this.top - 0].nodeType === 92 /* List */  && this.asts[this.top - 1].nodeType === 71 /* FuncDecl */  && (this.asts[this.top - 1]).arguments === this.asts[this.top - 0];
        };
        AstPath.prototype.isArgumentOfFunction = function () {
            return this.count() >= 3 && this.asts[this.top - 1].nodeType === 92 /* List */  && this.asts[this.top - 2].nodeType === 71 /* FuncDecl */  && (this.asts[this.top - 2]).arguments === this.asts[this.top - 1];
        };
        AstPath.prototype.isArgumentListOfCall = function () {
            return this.count() >= 2 && this.asts[this.top - 0].nodeType === 92 /* List */  && this.asts[this.top - 1].nodeType === 28 /* Call */  && (this.asts[this.top - 1]).arguments === this.asts[this.top - 0];
        };
        AstPath.prototype.isArgumentListOfNew = function () {
            return this.count() >= 2 && this.asts[this.top - 0].nodeType === 92 /* List */  && this.asts[this.top - 1].nodeType === 29 /* New */  && (this.asts[this.top - 1]).arguments === this.asts[this.top - 0];
        };
        AstPath.prototype.isSynthesizedBlock = function () {
            return this.count() >= 1 && this.asts[this.top - 0].nodeType === 84 /* Block */  && (this.asts[this.top - 0]).isStatementBlock === false;
        };
        return AstPath;
    })();
    TypeScript.AstPath = AstPath;    
    function isValidAstNode(ast) {
        if(ast === null) {
            return false;
        }
        if(ast.minChar === -1 || ast.limChar === -1) {
            return false;
        }
        return true;
    }
    TypeScript.isValidAstNode = isValidAstNode;
    var AstPathContext = (function () {
        function AstPathContext() {
            this.path = new TypeScript.AstPath();
        }
        return AstPathContext;
    })();
    TypeScript.AstPathContext = AstPathContext;    
    (function (GetAstPathOptions) {
        GetAstPathOptions._map = [];
        GetAstPathOptions.Default = 0;
        GetAstPathOptions.EdgeInclusive = 1;
        GetAstPathOptions.DontPruneSearchBasedOnPosition = 1 << 1;
    })(TypeScript.GetAstPathOptions || (TypeScript.GetAstPathOptions = {}));
    var GetAstPathOptions = TypeScript.GetAstPathOptions;
    function getAstPathToPosition(script, pos, options) {
        if (typeof options === "undefined") { options = 0 /* Default */ ; }
        var lookInComments = function (comments) {
            if(comments && comments.length > 0) {
                for(var i = 0; i < comments.length; i++) {
                    var minChar = comments[i].minChar;
                    var limChar = comments[i].limChar;
                    if(!comments[i].isBlockComment) {
                        limChar++;
                    }
                    if(pos >= minChar && pos < limChar) {
                        ctx.path.push(comments[i]);
                    }
                }
            }
        };
        var pre = function (cur, parent, walker) {
            if(isValidAstNode(cur)) {
                var inclusive = TypeScript.hasFlag(options, 1 /* EdgeInclusive */ ) || cur.nodeType === 25 /* Name */  || pos === script.limChar;
                var minChar = cur.minChar;
                var limChar = cur.limChar + (inclusive ? 1 : 0);
                if(pos >= minChar && pos < limChar) {
                    var previous = ctx.path.ast();
                    if(previous == null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {
                        ctx.path.push(cur);
                    } else {
                    }
                }
                if(pos < limChar) {
                    lookInComments(cur.preComments);
                }
                if(pos >= minChar) {
                    lookInComments(cur.postComments);
                }
                if(!TypeScript.hasFlag(options, 2 /* DontPruneSearchBasedOnPosition */ )) {
                    walker.options.goChildren = (minChar <= pos && pos <= limChar);
                }
            }
            return cur;
        };
        var ctx = new AstPathContext();
        TypeScript.getAstWalkerFactory().walk(script, pre, null, null, ctx);
        return ctx.path;
    }
    TypeScript.getAstPathToPosition = getAstPathToPosition;
    function getTokenizationOffset(script, position) {
        var bestOffset = 0;
        var pre = function (cur, parent, walker) {
            if(TypeScript.isValidAstNode(cur)) {
                if(cur.minChar <= position) {
                    bestOffset = max(bestOffset, cur.minChar);
                }
                if(cur.minChar > position || cur.limChar < bestOffset) {
                    walker.options.goChildren = false;
                }
            }
            return cur;
        };
        TypeScript.getAstWalkerFactory().walk(script, pre);
        return bestOffset;
    }
    TypeScript.getTokenizationOffset = getTokenizationOffset;
    function walkAST(ast, callback) {
        var pre = function (cur, parent, walker) {
            var path = walker.state;
            path.push(cur);
            callback(path, walker);
            return cur;
        };
        var post = function (cur, parent, walker) {
            var path = walker.state;
            path.pop();
            return cur;
        };
        var path = new AstPath();
        TypeScript.getAstWalkerFactory().walk(ast, pre, post, null, path);
    }
    TypeScript.walkAST = walkAST;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var AstLogger = (function () {
        function AstLogger(logger) {
            this.logger = logger;
        }
        AstLogger.prototype.logScript = function (script) {
            var _this = this;
            this.logLinemap(script.locationInfo.lineMap);
            var stack = [];
            var pre = function (cur, parent) {
                stack.push(cur);
                var indent = (stack.length - 1) * 2;
                _this.logComments(script, cur.preComments, indent);
                _this.logNode(script, cur, indent);
                _this.logComments(script, cur.postComments, indent);
                return cur;
            };
            var post = function (cur, parent) {
                stack.pop();
                return cur;
            };
            TypeScript.getAstWalkerFactory().walk(script, pre, post);
        };
        AstLogger.prototype.logNode = function (script, cur, indent) {
            var msg = this.addPadding("", indent, "| ", true);
            msg = msg.concat("+ " + cur.treeViewLabel());
            msg = this.addPadding(msg, 70, " ", false);
            msg = msg + this.addLineColumn(script, cur.minChar);
            msg = this.addPadding(msg, 80, " ", false);
            msg = msg + "=> ";
            msg = msg + this.addLineColumn(script, cur.limChar);
            msg = this.addPadding(msg, 102, " ", false);
            msg = msg.concat("[" + this.addPadding(cur.minChar.toString(), 1, " ", true) + ", " + this.addPadding(cur.limChar.toString(), 1, " ", true) + "]");
            msg = this.addPadding(msg, 115, " ", false);
            msg = msg.concat("sym=" + (cur).sym);
            msg = this.addPadding(msg, 135, " ", false);
            msg = msg.concat("type=" + (cur.type === null ? "null" : cur.type.getTypeName()));
            this.logger.log(msg);
        };
        AstLogger.prototype.logComments = function (script, comments, indent) {
            if(comments == null) {
                return;
            }
            for(var i = 0; i < comments.length; i++) {
                this.logNode(script, comments[i], indent);
            }
        };
        AstLogger.prototype.logLinemap = function (linemap) {
            var result = "[";
            for(var i = 0; i < linemap.length; i++) {
                if(i > 0) {
                    result += ",";
                }
                result += linemap[i];
            }
            result += "]";
            this.logger.log("linemap: " + result);
        };
        AstLogger.prototype.addPadding = function (s, targetLength, paddingString, leftPadding) {
            var result = (leftPadding ? "" : s);
            for(var i = s.length; i < targetLength; i++) {
                result = result + paddingString;
            }
            result = result + (leftPadding ? s : "");
            return result;
        };
        AstLogger.prototype.addLineColumn = function (script, position) {
            var lineInfo = {
                line: -1,
                col: -1
            };
            TypeScript.getSourceLineColFromMap(lineInfo, position, script.locationInfo.lineMap);
            if(lineInfo.col !== -1) {
                lineInfo.col++;
            }
            return "(" + lineInfo.line + ", " + lineInfo.col + ")";
        };
        return AstLogger;
    })();
    TypeScript.AstLogger = AstLogger;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Binder = (function () {
        function Binder(checker) {
            this.checker = checker;
        }
        Binder.prototype.resolveBaseTypeLinks = function (typeLinks, scope) {
            var extendsList = null;
            if(typeLinks) {
                extendsList = new Array();
                for(var i = 0, len = typeLinks.length; i < len; i++) {
                    var typeLink = typeLinks[i];
                    this.checker.resolvingBases = true;
                    this.checker.resolveTypeLink(scope, typeLink, true);
                    this.checker.resolvingBases = false;
                    if(typeLink.type.isClass()) {
                        extendsList[i] = typeLink.type.instanceType;
                    } else {
                        extendsList[i] = typeLink.type;
                    }
                }
            }
            return extendsList;
        };
        Binder.prototype.resolveBases = function (scope, type) {
            type.extendsList = this.resolveBaseTypeLinks(type.extendsTypeLinks, scope);
            var i = 0, len = type.extendsList.length;
            var derivedIsClass = type.isClassInstance();
            for(; i < len; i++) {
                var baseIsClass = type.extendsList[i].isClassInstance();
                if(type.extendsList[i] != this.checker.anyType) {
                    if(derivedIsClass) {
                        if(!baseIsClass) {
                            this.checker.errorReporter.simpleErrorFromSym(type.symbol, "A export class may only extend other classes, " + type.extendsList[i].symbol.fullName() + " is an interface.");
                        }
                    } else {
                        if(baseIsClass) {
                            this.checker.errorReporter.simpleErrorFromSym(type.symbol, "An interface may only extend other interfaces, " + type.extendsList[i].symbol.fullName() + " is a class.");
                        }
                    }
                }
            }
            type.implementsList = this.resolveBaseTypeLinks(type.implementsTypeLinks, scope);
            if(type.implementsList) {
                for(i = 0 , len = type.implementsList.length; i < len; i++) {
                    var iface = type.implementsList[i];
                    if(iface.isClassInstance()) {
                        if(derivedIsClass) {
                            this.checker.errorReporter.simpleErrorFromSym(type.symbol, "A class may only implement an interface; " + iface.symbol.fullName() + " is a class.");
                        }
                    }
                }
            }
        };
        Binder.prototype.resolveSignatureGroup = function (signatureGroup, scope, instanceType) {
            var supplyVar = !(signatureGroup.hasImplementation);
            for(var i = 0, len = signatureGroup.signatures.length; i < len; i++) {
                var signature = signatureGroup.signatures[i];
                if(instanceType) {
                    signature.returnType.type = instanceType;
                } else {
                    this.checker.resolveTypeLink(scope, signature.returnType, supplyVar);
                }
                var paramLen = signature.parameters.length;
                for(var j = 0; j < paramLen; j++) {
                    this.bindSymbol(scope, signature.parameters[j]);
                }
                if(signature.hasVariableArgList) {
                    var lastParam = signature.parameters[paramLen - 1];
                    lastParam.argsOffset = paramLen - 1;
                    if(!lastParam.getType().isArray()) {
                        this.checker.errorReporter.simpleErrorFromSym(lastParam, "... parameter must have array type");
                        lastParam.parameter.typeLink.type = this.checker.makeArrayType(lastParam.parameter.typeLink.type);
                    }
                }
            }
        };
        Binder.prototype.bindType = function (scope, type, instanceType) {
            if(instanceType) {
                this.bindType(scope, instanceType, null);
            }
            if(type.hasMembers()) {
                var members = type.members;
                var ambientMembers = type.ambientMembers;
                var typeMembers = type.getAllEnclosedTypes();
                var ambientTypeMembers = type.getAllAmbientEnclosedTypes();
                var memberScope = new TypeScript.SymbolTableScope(members, ambientMembers, typeMembers, ambientTypeMembers, type.symbol);
                var agg = new TypeScript.SymbolAggregateScope(type.symbol);
                var prevCurrentModDecl = this.checker.currentModDecl;
                var prevBindStatus = this.checker.inBind;
                agg.addParentScope(memberScope);
                agg.addParentScope(scope);
                if(type.isModuleType()) {
                    this.checker.currentModDecl = type.symbol.declAST;
                    this.checker.inBind = true;
                }
                if(members) {
                    this.bind(agg, type.members.allMembers);
                }
                if(typeMembers) {
                    this.bind(agg, typeMembers.allMembers);
                }
                if(ambientMembers) {
                    this.bind(agg, ambientMembers.allMembers);
                }
                if(ambientTypeMembers) {
                    this.bind(agg, ambientTypeMembers.allMembers);
                }
                this.checker.currentModDecl = prevCurrentModDecl;
                this.checker.inBind = prevBindStatus;
            }
            if(type.extendsTypeLinks) {
                this.resolveBases(scope, type);
            }
            if(type.construct) {
                this.resolveSignatureGroup(type.construct, scope, instanceType);
            }
            if(type.call) {
                this.resolveSignatureGroup(type.call, scope, null);
            }
            if(type.index) {
                this.resolveSignatureGroup(type.index, scope, null);
            }
            if(type.elementType) {
                this.bindType(scope, type.elementType, null);
            }
        };
        Binder.prototype.bindSymbol = function (scope, symbol) {
            if(!symbol.bound) {
                var prevLocationInfo = this.checker.locationInfo;
                if((this.checker.units) && (symbol.unitIndex >= 0) && (symbol.unitIndex < this.checker.units.length)) {
                    this.checker.locationInfo = this.checker.units[symbol.unitIndex];
                }
                switch(symbol.kind()) {
                    case 1 /* Type */ : {
                        if(symbol.flags & 262144 /* Bound */ ) {
                            break;
                        }
                        var typeSymbol = symbol;
                        typeSymbol.flags |= 262144 /* Bound */ ;
                        if(typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == 25 /* Name */ ) {
                            var modPath = (typeSymbol.aliasLink.alias).text;
                            var modSym = this.checker.findSymbolForDynamicModule(modPath, this.checker.locationInfo.filename, function (id) {
                                return scope.find(id, false, true);
                            });
                            if(modSym) {
                                typeSymbol.type = modSym.getType();
                            }
                        }
                        if(typeSymbol.type && typeSymbol.type != this.checker.gloModType) {
                            this.bindType(scope, typeSymbol.type, typeSymbol.instanceType);
                            if(typeSymbol.type.isModuleType()) {
                                for(var i = 0; i < typeSymbol.expansions.length; i++) {
                                    this.bindType(scope, typeSymbol.expansions[i], typeSymbol.instanceType);
                                }
                            }
                        }
                        break;

                    }
                    case 2 /* Field */ : {
                        this.checker.resolveTypeLink(scope, (symbol).field.typeLink, false);
                        break;

                    }
                    case 3 /* Parameter */ : {
                        this.checker.resolveTypeLink(scope, (symbol).parameter.typeLink, true);
                        break;

                    }
                }
                this.checker.locationInfo = prevLocationInfo;
            }
            symbol.bound = true;
        };
        Binder.prototype.bind = function (scope, table) {
            table.map(function (key, sym, binder) {
                binder.bindSymbol(scope, sym);
            }, this);
        };
        return Binder;
    })();
    TypeScript.Binder = Binder;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Base64Format = (function () {
        function Base64Format() { }
        Base64Format.encodedValues = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        Base64Format.encode = function encode(inValue) {
            if(inValue < 64) {
                return Base64Format.encodedValues.charAt(inValue);
            }
            throw TypeError(inValue + ": not a 64 based value");
        }
        Base64Format.decodeChar = function decodeChar(inChar) {
            if(inChar.length === 1) {
                return Base64Format.encodedValues.indexOf(inChar);
            } else {
                throw TypeError('"' + inChar + '" must have length 1');
            }
        }
        return Base64Format;
    })();    
    var Base64VLQFormat = (function () {
        function Base64VLQFormat() { }
        Base64VLQFormat.encode = function encode(inValue) {
            if(inValue < 0) {
                inValue = ((-inValue) << 1) + 1;
            } else {
                inValue = inValue << 1;
            }
            var encodedStr = "";
            do {
                var currentDigit = inValue & 31;
                inValue = inValue >> 5;
                if(inValue > 0) {
                    currentDigit = currentDigit | 32;
                }
                encodedStr = encodedStr + Base64Format.encode(currentDigit);
            }while(inValue > 0)
            return encodedStr;
        }
        Base64VLQFormat.decode = function decode(inString) {
            var result = 0;
            var negative = false;
            var shift = 0;
            for(var i = 0; i < inString.length; i++) {
                var byte = Base64Format.decodeChar(inString[i]);
                if(i === 0) {
                    if((byte & 1) === 1) {
                        negative = true;
                    }
                    result = (byte >> 1) & 15;
                } else {
                    result = result | ((byte & 31) << shift);
                }
                shift += (i == 0) ? 4 : 5;
                if((byte & 32) === 32) {
                } else {
                    return {
                        value: negative ? -(result) : result,
                        rest: inString.substr(i + 1)
                    };
                }
            }
            throw new Error('Base64 value "' + inString + '" finished with a continuation bit');
        }
        return Base64VLQFormat;
    })();
    TypeScript.Base64VLQFormat = Base64VLQFormat;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var SourceMapPosition = (function () {
        function SourceMapPosition() { }
        return SourceMapPosition;
    })();
    TypeScript.SourceMapPosition = SourceMapPosition;    
    var SourceMapping = (function () {
        function SourceMapping() {
            this.start = new SourceMapPosition();
            this.end = new SourceMapPosition();
            this.nameIndex = -1;
            this.childMappings = [];
        }
        return SourceMapping;
    })();
    TypeScript.SourceMapping = SourceMapping;    
    var SourceMapper = (function () {
        function SourceMapper(tsFileName, jsFileName, jsFile, sourceMapOut) {
            this.jsFile = jsFile;
            this.sourceMapOut = sourceMapOut;
            this.sourceMappings = [];
            this.currentMappings = [];
            this.names = [];
            this.currentNameIndex = [];
            this.currentMappings.push(this.sourceMappings);
            jsFileName = TypeScript.switchToForwardSlashes(jsFileName);
            this.jsFileName = TypeScript.getPrettyName(jsFileName, false, true);
            var removalIndex = jsFileName.lastIndexOf(this.jsFileName);
            var fixedPath = jsFileName.substring(0, removalIndex);
            this.tsFileName = TypeScript.getRelativePathToFixedPath(fixedPath, tsFileName);
        }
        SourceMapper.MapFileExtension = ".map";
        SourceMapper.EmitSourceMapping = function EmitSourceMapping(allSourceMappers) {
            var sourceMapper = allSourceMappers[0];
            sourceMapper.jsFile.WriteLine("//@ sourceMappingURL=" + sourceMapper.jsFileName + SourceMapper.MapFileExtension);
            var sourceMapOut = sourceMapper.sourceMapOut;
            var mappingsString = "";
            var tsFiles = [];
            var prevEmittedColumn = 0;
            var prevEmittedLine = 0;
            var prevSourceColumn = 0;
            var prevSourceLine = 0;
            var prevSourceIndex = 0;
            var prevNameIndex = 0;
            var namesList = [];
            var namesCount = 0;
            var emitComma = false;
            var recordedPosition = null;
            for(var sourceMapperIndex = 0; sourceMapperIndex < allSourceMappers.length; sourceMapperIndex++) {
                sourceMapper = allSourceMappers[sourceMapperIndex];
                var currentSourceIndex = tsFiles.length;
                tsFiles.push(sourceMapper.tsFileName);
                if(sourceMapper.names.length > 0) {
                    namesList.push(sourceMapper.names.join('","'));
                }
                var recordSourceMapping = function (mappedPosition, nameIndex) {
                    if(recordedPosition != null && recordedPosition.emittedColumn == mappedPosition.emittedColumn && recordedPosition.emittedLine == mappedPosition.emittedLine) {
                        return;
                    }
                    if(prevEmittedLine !== mappedPosition.emittedLine) {
                        while(prevEmittedLine < mappedPosition.emittedLine) {
                            prevEmittedColumn = 0;
                            mappingsString = mappingsString + ";";
                            prevEmittedLine++;
                        }
                        emitComma = false;
                    } else {
                        if(emitComma) {
                            mappingsString = mappingsString + ",";
                        }
                    }
                    mappingsString = mappingsString + TypeScript.Base64VLQFormat.encode(mappedPosition.emittedColumn - prevEmittedColumn);
                    prevEmittedColumn = mappedPosition.emittedColumn;
                    mappingsString = mappingsString + TypeScript.Base64VLQFormat.encode(currentSourceIndex - prevSourceIndex);
                    prevSourceIndex = currentSourceIndex;
                    mappingsString = mappingsString + TypeScript.Base64VLQFormat.encode(mappedPosition.sourceLine - 1 - prevSourceLine);
                    prevSourceLine = mappedPosition.sourceLine - 1;
                    mappingsString = mappingsString + TypeScript.Base64VLQFormat.encode(mappedPosition.sourceColumn - prevSourceColumn);
                    prevSourceColumn = mappedPosition.sourceColumn;
                    if(nameIndex >= 0) {
                        mappingsString = mappingsString + TypeScript.Base64VLQFormat.encode(namesCount + nameIndex - prevNameIndex);
                        prevNameIndex = namesCount + nameIndex;
                    }
                    emitComma = true;
                    recordedPosition = mappedPosition;
                };
                var recordSourceMappingSiblings = function (sourceMappings) {
                    for(var i = 0; i < sourceMappings.length; i++) {
                        var sourceMapping = sourceMappings[i];
                        recordSourceMapping(sourceMapping.start, sourceMapping.nameIndex);
                        recordSourceMappingSiblings(sourceMapping.childMappings);
                        recordSourceMapping(sourceMapping.end, sourceMapping.nameIndex);
                    }
                };
                recordSourceMappingSiblings(sourceMapper.sourceMappings, -1);
                namesCount = namesCount + sourceMapper.names.length;
            }
            if(mappingsString != "") {
                sourceMapOut.Write('{');
                sourceMapOut.Write('"version":3,');
                sourceMapOut.Write('"file":"' + sourceMapper.jsFileName + '",');
                sourceMapOut.Write('"sources":["' + tsFiles.join('","') + '"],');
                sourceMapOut.Write('"names":["' + namesList.join('","') + '"],');
                sourceMapOut.Write('"mappings":"' + mappingsString);
                sourceMapOut.Write('"');
                sourceMapOut.Write('}');
            }
            sourceMapOut.Close();
        }
        return SourceMapper;
    })();
    TypeScript.SourceMapper = SourceMapper;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (EmitContainer) {
        EmitContainer._map = [];
        EmitContainer._map[0] = "Prog";
        EmitContainer.Prog = 0;
        EmitContainer._map[1] = "Module";
        EmitContainer.Module = 1;
        EmitContainer._map[2] = "DynamicModule";
        EmitContainer.DynamicModule = 2;
        EmitContainer._map[3] = "Class";
        EmitContainer.Class = 3;
        EmitContainer._map[4] = "Constructor";
        EmitContainer.Constructor = 4;
        EmitContainer._map[5] = "Function";
        EmitContainer.Function = 5;
        EmitContainer._map[6] = "Args";
        EmitContainer.Args = 6;
        EmitContainer._map[7] = "Interface";
        EmitContainer.Interface = 7;
    })(TypeScript.EmitContainer || (TypeScript.EmitContainer = {}));
    var EmitContainer = TypeScript.EmitContainer;
    var EmitState = (function () {
        function EmitState() {
            this.column = 0;
            this.line = 0;
            this.pretty = false;
            this.inObjectLiteral = false;
            this.container = 0 /* Prog */ ;
        }
        return EmitState;
    })();
    TypeScript.EmitState = EmitState;    
    var Indenter = (function () {
        function Indenter() {
            this.indentAmt = 0;
        }
        Indenter.indentStep = 4;
        Indenter.indentStepString = "    ";
        Indenter.indentStrings = [];
        Indenter.prototype.increaseIndent = function () {
            this.indentAmt += Indenter.indentStep;
        };
        Indenter.prototype.decreaseIndent = function () {
            this.indentAmt -= Indenter.indentStep;
        };
        Indenter.prototype.getIndent = function () {
            var indentString = Indenter.indentStrings[this.indentAmt];
            if(indentString === undefined) {
                indentString = "";
                for(var i = 0; i < this.indentAmt; i = i + Indenter.indentStep) {
                    indentString += Indenter.indentStepString;
                }
                Indenter.indentStrings[this.indentAmt] = indentString;
            }
            return indentString;
        };
        return Indenter;
    })();
    TypeScript.Indenter = Indenter;    
    var Emitter = (function () {
        function Emitter(checker, outfile, emitOptions) {
            this.checker = checker;
            this.outfile = outfile;
            this.emitOptions = emitOptions;
            this.prologueEmitted = false;
            this.thisClassNode = null;
            this.thisFnc = null;
            this.moduleDeclList = [];
            this.moduleName = "";
            this.emitState = new EmitState();
            this.indenter = new Indenter();
            this.ambientModule = false;
            this.modAliasId = null;
            this.firstModAlias = null;
            this.allSourceMappers = [];
            this.sourceMapper = null;
            this.captureThisStmtString = "var _this = this;";
            this.varListCount = 0;
        }
        Emitter.prototype.setSourceMappings = function (mapper) {
            this.allSourceMappers.push(mapper);
            this.sourceMapper = mapper;
        };
        Emitter.prototype.writeToOutput = function (s) {
            this.outfile.Write(s);
            this.emitState.column += s.length;
        };
        Emitter.prototype.writeToOutputTrimmable = function (s) {
            if(this.emitOptions.minWhitespace) {
                s = s.replace(/[\s]*/g, '');
            }
            this.writeToOutput(s);
        };
        Emitter.prototype.writeLineToOutput = function (s) {
            if(this.emitOptions.minWhitespace) {
                this.writeToOutput(s);
                var c = s.charCodeAt(s.length - 1);
                if(!((c == TypeScript.LexCodeSpace) || (c == TypeScript.LexCodeSMC) || (c == TypeScript.LexCodeLBR))) {
                    this.writeToOutput(' ');
                }
            } else {
                this.outfile.WriteLine(s);
                this.emitState.column = 0;
                this.emitState.line++;
            }
        };
        Emitter.prototype.writeCaptureThisStatement = function (ast) {
            this.emitIndent();
            this.recordSourceMappingStart(ast);
            this.writeToOutput(this.captureThisStmtString);
            this.recordSourceMappingEnd(ast);
            this.writeLineToOutput("");
        };
        Emitter.prototype.setInVarBlock = function (count) {
            this.varListCount = count;
        };
        Emitter.prototype.setInObjectLiteral = function (val) {
            var temp = this.emitState.inObjectLiteral;
            this.emitState.inObjectLiteral = val;
            return temp;
        };
        Emitter.prototype.setContainer = function (c) {
            var temp = this.emitState.container;
            this.emitState.container = c;
            return temp;
        };
        Emitter.prototype.getIndentString = function () {
            if(this.emitOptions.minWhitespace) {
                return "";
            } else {
                return this.indenter.getIndent();
            }
        };
        Emitter.prototype.emitIndent = function () {
            this.writeToOutput(this.getIndentString());
        };
        Emitter.prototype.emitCommentInPlace = function (comment) {
            this.recordSourceMappingStart(comment);
            var text = comment.getText();
            var hadNewLine = false;
            if(comment.isBlockComment) {
                if(this.emitState.column == 0) {
                    this.emitIndent();
                }
                this.writeToOutput(text[0]);
                if(text.length > 1 || comment.endsLine) {
                    this.writeLineToOutput("");
                    for(var i = 1; i < text.length; i++) {
                        this.emitIndent();
                        this.writeLineToOutput(text[i]);
                    }
                    hadNewLine = true;
                }
            } else {
                if(this.emitState.column == 0) {
                    this.emitIndent();
                }
                this.writeLineToOutput(text[0]);
                hadNewLine = true;
            }
            if(hadNewLine) {
                this.emitIndent();
            } else {
                this.writeToOutput(" ");
            }
            this.recordSourceMappingEnd(comment);
        };
        Emitter.prototype.emitParensAndCommentsInPlace = function (ast, pre) {
            var comments = pre ? ast.preComments : ast.postComments;
            if(ast.isParenthesized && !pre) {
                this.writeToOutput(")");
            }
            if(this.emitOptions.emitComments && comments && comments.length != 0) {
                for(var i = 0; i < comments.length; i++) {
                    this.emitCommentInPlace(comments[i]);
                }
            }
            if(ast.isParenthesized && pre) {
                this.writeToOutput("(");
            }
        };
        Emitter.prototype.emitObjectLiteral = function (content) {
            this.writeLineToOutput("{");
            this.indenter.increaseIndent();
            var inObjectLiteral = this.setInObjectLiteral(true);
            this.emitJavascriptList(content, ",", 61 /* Comma */ , true, false, false);
            this.setInObjectLiteral(inObjectLiteral);
            this.indenter.decreaseIndent();
            this.emitIndent();
            this.writeToOutput("}");
        };
        Emitter.prototype.emitArrayLiteral = function (content) {
            this.writeToOutput("[");
            if(content) {
                this.writeLineToOutput("");
                this.indenter.increaseIndent();
                this.emitJavascriptList(content, ", ", 61 /* Comma */ , true, false, false);
                this.indenter.decreaseIndent();
                this.emitIndent();
            }
            this.writeToOutput("]");
        };
        Emitter.prototype.emitNew = function (target, args) {
            this.writeToOutput("new ");
            if(target.nodeType == 26 /* TypeRef */ ) {
                this.writeToOutput("Array()");
            } else {
                this.emitJavascript(target, 97 /* Tilde */ , false);
                this.recordSourceMappingStart(args);
                this.writeToOutput("(");
                this.emitJavascriptList(args, ", ", 61 /* Comma */ , false, false, false);
                this.writeToOutput(")");
                this.recordSourceMappingEnd(args);
            }
        };
        Emitter.prototype.tryEmitConstant = function (dotExpr) {
            if(!this.emitOptions.propagateConstants) {
                return false;
            }
            var propertyName = dotExpr.operand2;
            if(propertyName && propertyName.sym && propertyName.sym.isVariable()) {
                if(TypeScript.hasFlag(propertyName.sym.flags, 32768 /* Constant */ )) {
                    if(propertyName.sym.declAST) {
                        var boundDecl = propertyName.sym.declAST;
                        if(boundDecl.init) {
                            if(boundDecl.init.nodeType === 24 /* NumberLit */ ) {
                                var numLit = boundDecl.init;
                                this.writeToOutput(numLit.value.toString());
                                var comment = " /* ";
                                comment += propertyName.actualText;
                                comment += " */ ";
                                this.writeToOutput(comment);
                                return true;
                            } else {
                                if(boundDecl.init.nodeType === 61 /* Lsh */ ) {
                                    var binop = boundDecl.init;
                                    if(binop.operand1.nodeType === 24 /* NumberLit */  && binop.operand2.nodeType === 24 /* NumberLit */ ) {
                                        var result = (binop.operand1).value << (binop.operand2).value;
                                        this.writeToOutput(result.toString());
                                        var comment = " /* ";
                                        comment += propertyName.actualText;
                                        comment += " */ ";
                                        this.writeToOutput(comment);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return false;
        };
        Emitter.prototype.emitCall = function (callNode, target, args) {
            if(!this.emitSuperCall(callNode)) {
                if(!TypeScript.hasFlag(callNode.flags, 512 /* ClassBaseConstructorCall */ )) {
                    if(target.nodeType == 71 /* FuncDecl */  && !target.isParenthesized) {
                        this.writeToOutput("(");
                    }
                    this.emitJavascript(target, 55 /* OpenParen */ , false);
                    if(target.nodeType == 71 /* FuncDecl */  && !target.isParenthesized) {
                        this.writeToOutput(")");
                    }
                    this.recordSourceMappingStart(args);
                    this.writeToOutput("(");
                    this.emitJavascriptList(args, ", ", 61 /* Comma */ , false, false, false);
                    this.writeToOutput(")");
                    this.recordSourceMappingEnd(args);
                } else {
                    this.indenter.decreaseIndent();
                    this.indenter.decreaseIndent();
                    var constructorCall = new TypeScript.ASTList();
                    constructorCall.members[0] = callNode;
                    this.emitConstructorCalls(constructorCall, this.thisClassNode);
                    this.indenter.increaseIndent();
                    this.indenter.increaseIndent();
                }
            }
        };
        Emitter.prototype.defaultValue = function (type) {
            if(type == this.checker.anyType) {
                return "undefined";
            } else {
                if(type == this.checker.numberType) {
                    return "0";
                } else {
                    if(type == this.checker.stringType) {
                        return '""';
                    } else {
                        if(type == this.checker.booleanType) {
                            return "false";
                        } else {
                            return "null";
                        }
                    }
                }
            }
        };
        Emitter.prototype.emitConstructorCalls = function (bases, classDecl) {
            if(bases == null) {
                return;
            }
            var basesLen = bases.members.length;
            this.recordSourceMappingStart(classDecl);
            for(var i = 0; i < basesLen; i++) {
                var baseExpr = bases.members[i];
                var baseSymbol = null;
                if(baseExpr.nodeType == 28 /* Call */ ) {
                    baseSymbol = (baseExpr).target.type.symbol;
                } else {
                    baseSymbol = baseExpr.type.symbol;
                }
                var baseName = baseSymbol.name;
                if(baseSymbol.declModule != classDecl.type.symbol.declModule) {
                    baseName = baseSymbol.fullName();
                }
                if(baseExpr.nodeType == 28 /* Call */ ) {
                    this.emitIndent();
                    this.writeToOutput("_super.call(this");
                    var args = (baseExpr).arguments;
                    if(args && (args.members.length > 0)) {
                        this.writeToOutput(", ");
                        this.emitJavascriptList(args, ", ", 61 /* Comma */ , false, false, false);
                    }
                    this.writeToOutput(")");
                } else {
                    if(baseExpr.type && (baseExpr.type.isClassInstance())) {
                        this.emitIndent();
                        this.writeToOutput(classDecl.name.actualText + "._super.constructor");
                        this.writeToOutput(".call(this)");
                    }
                }
            }
            this.recordSourceMappingEnd(classDecl);
        };
        Emitter.prototype.emitInnerFunction = function (funcDecl, printName, isProtoMember, bases, hasSelfRef, classDecl) {
            var isClassConstructor = funcDecl.isConstructor && TypeScript.hasFlag(funcDecl.fncFlags, 262144 /* ClassMethod */ );
            var hasNonObjectBaseType = isClassConstructor && TypeScript.hasFlag(this.thisClassNode.type.instanceType.typeFlags, 32 /* HasBaseType */ ) && !TypeScript.hasFlag(this.thisClassNode.type.instanceType.typeFlags, 64 /* HasBaseTypeOfObject */ );
            var classPropertiesMustComeAfterSuperCall = hasNonObjectBaseType && TypeScript.hasFlag((this.thisClassNode).varFlags, 32768 /* ClassSuperMustBeFirstCallInConstructor */ );
            this.emitParensAndCommentsInPlace(funcDecl, true);
            this.recordSourceMappingStart(funcDecl);
            if(!(funcDecl.isAccessor() && (funcDecl.accessorSymbol).isObjectLitField)) {
                this.writeToOutput("function ");
            }
            if(printName) {
                var id = funcDecl.getNameText();
                if(id && !funcDecl.isAccessor()) {
                    if(funcDecl.name) {
                        this.recordSourceMappingStart(funcDecl.name);
                    }
                    this.writeToOutput(id);
                    if(funcDecl.name) {
                        this.recordSourceMappingEnd(funcDecl.name);
                    }
                }
            }
            this.writeToOutput("(");
            var argsLen = 0;
            var i = 0;
            var arg;
            var defaultArgs = [];
            if(funcDecl.arguments) {
                var tempContainer = this.setContainer(6 /* Args */ );
                argsLen = funcDecl.arguments.members.length;
                var printLen = argsLen;
                if(funcDecl.variableArgList) {
                    printLen--;
                }
                for(i = 0; i < printLen; i++) {
                    arg = funcDecl.arguments.members[i];
                    if(arg.init) {
                        defaultArgs.push(arg);
                    }
                    this.emitJavascript(arg, 55 /* OpenParen */ , false);
                    if(i < (printLen - 1)) {
                        this.writeToOutput(", ");
                    }
                }
                this.setContainer(tempContainer);
            }
            this.writeLineToOutput(") {");
            if(funcDecl.isConstructor) {
                this.recordSourceMappingNameStart("constructor");
            } else {
                if(funcDecl.isGetAccessor()) {
                    this.recordSourceMappingNameStart("get_" + funcDecl.getNameText());
                } else {
                    if(funcDecl.isSetAccessor()) {
                        this.recordSourceMappingNameStart("set_" + funcDecl.getNameText());
                    } else {
                        this.recordSourceMappingNameStart(funcDecl.getNameText());
                    }
                }
            }
            this.indenter.increaseIndent();
            for(i = 0; i < defaultArgs.length; i++) {
                var arg = defaultArgs[i];
                this.emitIndent();
                this.recordSourceMappingStart(arg);
                this.writeToOutput("if (typeof " + arg.id.actualText + " === \"undefined\") { ");
                this.recordSourceMappingStart(arg.id);
                this.writeToOutput(arg.id.actualText);
                this.recordSourceMappingEnd(arg.id);
                this.writeToOutput(" = ");
                this.emitJavascript(arg.init, 55 /* OpenParen */ , false);
                this.writeLineToOutput("; }");
                this.recordSourceMappingEnd(arg);
            }
            if(funcDecl.isConstructor && ((funcDecl.classDecl).varFlags & 131072 /* MustCaptureThis */ )) {
                this.writeCaptureThisStatement(funcDecl);
            }
            if(funcDecl.isConstructor && !classPropertiesMustComeAfterSuperCall) {
                if(funcDecl.arguments) {
                    argsLen = funcDecl.arguments.members.length;
                    for(i = 0; i < argsLen; i++) {
                        arg = funcDecl.arguments.members[i];
                        if((arg.varFlags & 512 /* Property */ ) != 0 /* None */ ) {
                            this.emitIndent();
                            this.recordSourceMappingStart(arg);
                            this.recordSourceMappingStart(arg.id);
                            this.writeToOutput("this." + arg.id.actualText);
                            this.recordSourceMappingEnd(arg.id);
                            this.writeToOutput(" = ");
                            this.recordSourceMappingStart(arg.id);
                            this.writeToOutput(arg.id.actualText);
                            this.recordSourceMappingEnd(arg.id);
                            this.writeLineToOutput(";");
                            this.recordSourceMappingEnd(arg);
                        }
                    }
                }
                if(!TypeScript.hasFlag(funcDecl.fncFlags, 262144 /* ClassMethod */ )) {
                    this.emitConstructorCalls(bases, classDecl);
                }
            }
            if(hasSelfRef) {
                this.writeCaptureThisStatement(funcDecl);
            }
            if(funcDecl.variableArgList) {
                argsLen = funcDecl.arguments.members.length;
                var lastArg = funcDecl.arguments.members[argsLen - 1];
                this.emitIndent();
                this.recordSourceMappingStart(lastArg);
                this.writeToOutput("var ");
                this.recordSourceMappingStart(lastArg.id);
                this.writeToOutput(lastArg.id.actualText);
                this.recordSourceMappingEnd(lastArg.id);
                this.writeLineToOutput(" = [];");
                this.recordSourceMappingEnd(lastArg);
                this.emitIndent();
                this.writeToOutput("for (");
                this.recordSourceMappingStart(lastArg);
                this.writeToOutput("var _i = 0;");
                this.recordSourceMappingEnd(lastArg);
                this.writeToOutput(" ");
                this.recordSourceMappingStart(lastArg);
                this.writeToOutput("_i < (arguments.length - " + (argsLen - 1) + ")");
                this.recordSourceMappingEnd(lastArg);
                this.writeToOutput("; ");
                this.recordSourceMappingStart(lastArg);
                this.writeToOutput("_i++");
                this.recordSourceMappingEnd(lastArg);
                this.writeLineToOutput(") {");
                this.indenter.increaseIndent();
                this.emitIndent();
                this.recordSourceMappingStart(lastArg);
                this.writeToOutput(lastArg.id.actualText + "[_i] = arguments[_i + " + (argsLen - 1) + "];");
                this.recordSourceMappingEnd(lastArg);
                this.writeLineToOutput("");
                this.indenter.decreaseIndent();
                this.emitIndent();
                this.writeLineToOutput("}");
            }
            if(funcDecl.isConstructor && TypeScript.hasFlag(funcDecl.fncFlags, 262144 /* ClassMethod */ ) && !classPropertiesMustComeAfterSuperCall) {
                var nProps = (this.thisClassNode.members).members.length;
                for(var i = 0; i < nProps; i++) {
                    if((this.thisClassNode.members).members[i].nodeType == 73 /* VarDecl */ ) {
                        var varDecl = (this.thisClassNode.members).members[i];
                        if(!TypeScript.hasFlag(varDecl.varFlags, 16 /* Static */ ) && varDecl.init) {
                            this.emitIndent();
                            this.emitJavascriptVarDecl(varDecl, 97 /* Tilde */ );
                            this.writeLineToOutput("");
                        }
                    }
                }
            }
            this.emitBareJavascriptStatements(funcDecl.bod, classPropertiesMustComeAfterSuperCall);
            this.indenter.decreaseIndent();
            this.emitIndent();
            this.recordSourceMappingStart(funcDecl.endingToken);
            this.writeToOutput("}");
            this.recordSourceMappingNameEnd();
            this.recordSourceMappingEnd(funcDecl.endingToken);
            this.recordSourceMappingEnd(funcDecl);
            this.recordSourceMappingEnd(funcDecl);
            if(!isProtoMember && !TypeScript.hasFlag(funcDecl.fncFlags, 131072 /* IsFunctionExpression */ ) && (TypeScript.hasFlag(funcDecl.fncFlags, 256 /* Definition */ ) || funcDecl.isConstructor)) {
                this.writeLineToOutput("");
            }
            if(funcDecl.hasStaticDeclarations()) {
                this.writeLineToOutput("");
                this.emitIndent();
                var funcName = funcDecl.getNameText();
                this.writeLineToOutput("(function (" + funcName + ") {");
                this.indenter.increaseIndent();
                var len = 0;
                var i = 0;
                len = funcDecl.innerStaticFuncs.length;
                for(i = 0; i < len; i++) {
                    var innerFunc = funcDecl.innerStaticFuncs[i];
                    if(innerFunc.isOverload) {
                        continue;
                    }
                    this.emitIndent();
                    if(innerFunc.isAccessor()) {
                        this.emitPropertyAccessor(innerFunc, funcDecl.name.actualText, false);
                    } else {
                        this.recordSourceMappingStart(innerFunc);
                        this.writeToOutput(funcName + "." + innerFunc.name.actualText + " = ");
                        this.emitInnerFunction(innerFunc, (innerFunc.name && !innerFunc.name.isMissing()), false, null, innerFunc.hasSelfReference(), null);
                    }
                }
                if(funcDecl.statics) {
                    this.recordSourceMappingStart(funcDecl.statics);
                    len = funcDecl.statics.members.length;
                    for(i = 0; i < len; i++) {
                        this.emitIndent();
                        this.writeToOutput(funcName);
                        this.emitJavascript(funcDecl.statics.members[i], 97 /* Tilde */ , false);
                        this.writeLineToOutput("");
                    }
                    this.recordSourceMappingEnd(funcDecl.statics);
                }
                this.indenter.decreaseIndent();
                this.emitIndent();
                var printProto = isProtoMember && this.thisClassNode;
                var prefix = printProto ? this.thisClassNode.name.actualText + ".prototype." : "";
                this.writeLineToOutput("})(" + prefix + funcName + ");");
            }
            this.emitParensAndCommentsInPlace(funcDecl, false);
        };
        Emitter.prototype.emitJavascriptModule = function (moduleDecl) {
            var modName = moduleDecl.name.actualText;
            if(TypeScript.isTSFile(modName)) {
                moduleDecl.name.setText(modName.substring(0, modName.length - 3));
            } else {
                if(TypeScript.isSTRFile(modName)) {
                    moduleDecl.name.setText(modName.substring(0, modName.length - 4));
                }
            }
            if(!TypeScript.hasFlag(moduleDecl.modFlags, 8 /* Ambient */ )) {
                var isDynamicMod = TypeScript.hasFlag(moduleDecl.modFlags, 2048 /* IsDynamic */ );
                var prevOutFile = this.outfile;
                var prevAllSourceMappers = this.allSourceMappers;
                var prevSourceMapper = this.sourceMapper;
                var prevColumn = this.emitState.column;
                var prevLine = this.emitState.line;
                var temp = this.setContainer(1 /* Module */ );
                var svModuleName = this.moduleName;
                var isExported = TypeScript.hasFlag(moduleDecl.modFlags, 1 /* Exported */ );
                this.moduleDeclList[this.moduleDeclList.length] = moduleDecl;
                var isWholeFile = TypeScript.hasFlag(moduleDecl.modFlags, 1024 /* IsWholeFile */ );
                this.moduleName = moduleDecl.name.actualText;
                if(isDynamicMod) {
                    var tsModFileName = TypeScript.stripQuotes(moduleDecl.name.actualText);
                    var modFilePath = TypeScript.trimModName(tsModFileName) + ".js";
                    if(this.emitOptions.createFile) {
                        if(TypeScript.switchToForwardSlashes(modFilePath) != TypeScript.switchToForwardSlashes(this.emitOptions.path)) {
                            var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.emitComments && moduleDecl.containsUnicodeCharInComment);
                            this.outfile = this.emitOptions.createFile(modFilePath, useUTF8InOutputfile);
                            if(prevSourceMapper != null) {
                                this.allSourceMappers = [];
                                this.setSourceMappings(new TypeScript.SourceMapper(tsModFileName, modFilePath, this.outfile, this.emitOptions.createFile(modFilePath + TypeScript.SourceMapper.MapFileExtension)));
                                this.emitState.column = 0;
                                this.emitState.line = 0;
                            }
                        } else {
                            if(!this.emitOptions.outputMany) {
                                this.checker.errorReporter.emitterError(moduleDecl, "Module emit collides with emitted script: " + modFilePath);
                            }
                        }
                    }
                    this.setContainer(2 /* DynamicModule */ );
                    this.recordSourceMappingStart(moduleDecl);
                    if(TypeScript.moduleGenTarget == 1 /* Asynchronous */ ) {
                        var dependencyList = "[\"require\", \"exports\"";
                        var importList = "require, exports";
                        var importStatement = null;
                        for(var i = 0; i < (moduleDecl.mod).importedModules.length; i++) {
                            importStatement = (moduleDecl.mod).importedModules[i];
                            if(importStatement.id.sym && !(importStatement.id.sym).onlyReferencedAsTypeRef) {
                                if(i <= (moduleDecl.mod).importedModules.length - 1) {
                                    dependencyList += ", ";
                                    importList += ", ";
                                }
                                importList += "__" + importStatement.id.actualText + "__";
                                dependencyList += importStatement.firstAliasedModToString();
                            }
                        }
                        for(var i = 0; i < moduleDecl.amdDependencies.length; i++) {
                            dependencyList += ", \"" + moduleDecl.amdDependencies[i] + "\"";
                        }
                        dependencyList += "]";
                        this.writeLineToOutput("define(" + dependencyList + "," + " function(" + importList + ") {");
                    } else {
                    }
                } else {
                    if(!isExported) {
                        this.recordSourceMappingStart(moduleDecl);
                        this.writeToOutput("var ");
                        this.recordSourceMappingStart(moduleDecl.name);
                        this.writeToOutput(this.moduleName);
                        this.recordSourceMappingEnd(moduleDecl.name);
                        this.writeLineToOutput(";");
                        this.recordSourceMappingEnd(moduleDecl);
                        this.emitIndent();
                    }
                    this.writeToOutput("(");
                    this.recordSourceMappingStart(moduleDecl);
                    this.writeToOutput("function (");
                    this.recordSourceMappingStart(moduleDecl.name);
                    this.writeToOutput(this.moduleName);
                    this.recordSourceMappingEnd(moduleDecl.name);
                    this.writeLineToOutput(") {");
                }
                if(!isWholeFile) {
                    this.recordSourceMappingNameStart(this.moduleName);
                }
                if(!isDynamicMod || TypeScript.moduleGenTarget == 1 /* Asynchronous */ ) {
                    this.indenter.increaseIndent();
                }
                if(moduleDecl.modFlags & 4096 /* MustCaptureThis */ ) {
                    this.writeCaptureThisStatement(moduleDecl);
                }
                this.emitJavascriptList(moduleDecl.members, null, 54 /* Semicolon */ , true, false, false);
                if(!isDynamicMod || TypeScript.moduleGenTarget == 1 /* Asynchronous */ ) {
                    this.indenter.decreaseIndent();
                }
                this.emitIndent();
                if(isDynamicMod) {
                    if(TypeScript.moduleGenTarget == 1 /* Asynchronous */ ) {
                        this.writeLineToOutput("})");
                    } else {
                    }
                    if(!isWholeFile) {
                        this.recordSourceMappingNameEnd();
                    }
                    this.recordSourceMappingEnd(moduleDecl);
                    if(this.outfile != prevOutFile) {
                        if(prevSourceMapper != null) {
                            this.emitSourceMappings();
                            this.allSourceMappers = prevAllSourceMappers;
                            this.sourceMapper = prevSourceMapper;
                            this.emitState.column = prevColumn;
                            this.emitState.line = prevLine;
                        }
                        this.outfile.Close();
                        this.outfile = prevOutFile;
                    }
                } else {
                    var containingMod = null;
                    if(moduleDecl.type && moduleDecl.type.symbol.container && moduleDecl.type.symbol.container.declAST) {
                        containingMod = moduleDecl.type.symbol.container.declAST;
                    }
                    var parentIsDynamic = containingMod && TypeScript.hasFlag(containingMod.modFlags, 2048 /* IsDynamic */ );
                    this.recordSourceMappingStart(moduleDecl.endingToken);
                    if(temp == 0 /* Prog */  && isExported) {
                        this.writeToOutput("}");
                        if(!isWholeFile) {
                            this.recordSourceMappingNameEnd();
                        }
                        this.recordSourceMappingEnd(moduleDecl.endingToken);
                        this.writeLineToOutput(")(this." + this.moduleName + " || (this." + this.moduleName + " = {}));");
                    } else {
                        if(isExported || temp == 0 /* Prog */ ) {
                            var dotMod = svModuleName != "" ? (parentIsDynamic ? "exports" : svModuleName) + "." : svModuleName;
                            this.writeToOutput("}");
                            if(!isWholeFile) {
                                this.recordSourceMappingNameEnd();
                            }
                            this.recordSourceMappingEnd(moduleDecl.endingToken);
                            this.writeLineToOutput(")(" + dotMod + this.moduleName + " || (" + dotMod + this.moduleName + " = {}));");
                        } else {
                            if(!isExported && temp != 0 /* Prog */ ) {
                                this.writeToOutput("}");
                                if(!isWholeFile) {
                                    this.recordSourceMappingNameEnd();
                                }
                                this.recordSourceMappingEnd(moduleDecl.endingToken);
                                this.writeLineToOutput(")(" + this.moduleName + " || (" + this.moduleName + " = {}));");
                            } else {
                                this.writeToOutput("}");
                                if(!isWholeFile) {
                                    this.recordSourceMappingNameEnd();
                                }
                                this.recordSourceMappingEnd(moduleDecl.endingToken);
                                this.writeLineToOutput(")();");
                            }
                        }
                    }
                    this.recordSourceMappingEnd(moduleDecl);
                    if(temp != 0 /* Prog */  && isExported) {
                        this.emitIndent();
                        this.recordSourceMappingStart(moduleDecl);
                        if(parentIsDynamic) {
                            this.writeLineToOutput("var " + this.moduleName + " = exports." + this.moduleName + ";");
                        } else {
                            this.writeLineToOutput("var " + this.moduleName + " = " + svModuleName + "." + this.moduleName + ";");
                        }
                        this.recordSourceMappingEnd(moduleDecl);
                    }
                }
                this.setContainer(temp);
                this.moduleName = svModuleName;
                this.moduleDeclList.length--;
            }
        };
        Emitter.prototype.emitIndex = function (operand1, operand2) {
            var temp = this.setInObjectLiteral(false);
            this.emitJavascript(operand1, 97 /* Tilde */ , false);
            this.writeToOutput("[");
            this.emitJavascriptList(operand2, ", ", 61 /* Comma */ , false, false, false);
            this.writeToOutput("]");
            this.setInObjectLiteral(temp);
        };
        Emitter.prototype.emitStringLiteral = function (text) {
            this.writeToOutput(text);
        };
        Emitter.prototype.emitJavascriptFunction = function (funcDecl) {
            if(TypeScript.hasFlag(funcDecl.fncFlags, 512 /* Signature */ ) || funcDecl.isOverload) {
                return;
            }
            var temp;
            var tempFnc = this.thisFnc;
            this.thisFnc = funcDecl;
            if(funcDecl.isConstructor) {
                temp = this.setContainer(4 /* Constructor */ );
            } else {
                temp = this.setContainer(5 /* Function */ );
            }
            var bases = null;
            var hasSelfRef = false;
            var funcName = funcDecl.getNameText();
            if((this.emitState.inObjectLiteral || !funcDecl.isAccessor()) && ((temp != 4 /* Constructor */ ) || ((funcDecl.fncFlags & 1024 /* Method */ ) == 0 /* None */ ))) {
                var tempLit = this.setInObjectLiteral(false);
                if(this.thisClassNode) {
                    bases = this.thisClassNode.extendsList;
                }
                hasSelfRef = funcDecl.hasSelfReference();
                this.recordSourceMappingStart(funcDecl);
                if(TypeScript.hasFlag(funcDecl.fncFlags, 1 /* Exported */  | 524288 /* ClassPropertyMethodExported */ ) && funcDecl.type.symbol.container == this.checker.gloMod && !funcDecl.isConstructor) {
                    this.writeToOutput("this." + funcName + " = ");
                    this.emitInnerFunction(funcDecl, false, false, bases, hasSelfRef, this.thisClassNode);
                } else {
                    this.emitInnerFunction(funcDecl, (funcDecl.name && !funcDecl.name.isMissing()), false, bases, hasSelfRef, this.thisClassNode);
                }
                this.setInObjectLiteral(tempLit);
            }
            this.setContainer(temp);
            this.thisFnc = tempFnc;
            if(TypeScript.hasFlag(funcDecl.fncFlags, 256 /* Definition */ )) {
                if(TypeScript.hasFlag(funcDecl.fncFlags, 16 /* Static */ )) {
                    if(this.thisClassNode) {
                        if(funcDecl.isAccessor()) {
                            this.emitPropertyAccessor(funcDecl, this.thisClassNode.name.actualText, false);
                        } else {
                            this.emitIndent();
                            this.recordSourceMappingStart(funcDecl);
                            this.writeLineToOutput(this.thisClassNode.name.actualText + "." + funcName + " = " + funcName + ";");
                            this.recordSourceMappingEnd(funcDecl);
                        }
                    }
                } else {
                    if((this.emitState.container == 1 /* Module */  || this.emitState.container == 2 /* DynamicModule */ ) && TypeScript.hasFlag(funcDecl.fncFlags, 1 /* Exported */  | 524288 /* ClassPropertyMethodExported */ )) {
                        this.emitIndent();
                        var modName = this.emitState.container == 1 /* Module */  ? this.moduleName : "exports";
                        this.recordSourceMappingStart(funcDecl);
                        this.writeLineToOutput(modName + "." + funcName + " = " + funcName + ";");
                        this.recordSourceMappingEnd(funcDecl);
                    }
                }
            }
        };
        Emitter.prototype.emitAmbientVarDecl = function (varDecl) {
            if(varDecl.init) {
                this.emitParensAndCommentsInPlace(varDecl, true);
                this.recordSourceMappingStart(varDecl);
                this.recordSourceMappingStart(varDecl.id);
                this.writeToOutput(varDecl.id.actualText);
                this.recordSourceMappingEnd(varDecl.id);
                this.writeToOutput(" = ");
                this.emitJavascript(varDecl.init, 61 /* Comma */ , false);
                this.recordSourceMappingEnd(varDecl);
                this.writeToOutput(";");
                this.emitParensAndCommentsInPlace(varDecl, false);
            }
        };
        Emitter.prototype.emitVarDeclVar = function () {
            if(this.varListCount >= 0) {
                this.writeToOutput("var ");
                this.varListCount = -this.varListCount;
            }
            return true;
        };
        Emitter.prototype.onEmitVar = function () {
            if(this.varListCount > 0) {
                this.varListCount--;
            } else {
                if(this.varListCount < 0) {
                    this.varListCount++;
                }
            }
        };
        Emitter.prototype.emitJavascriptVarDecl = function (varDecl, tokenId) {
            if((varDecl.varFlags & 8 /* Ambient */ ) == 8 /* Ambient */ ) {
                this.emitAmbientVarDecl(varDecl);
                this.onEmitVar();
            } else {
                var sym = varDecl.sym;
                var hasInitializer = (varDecl.init != null);
                this.emitParensAndCommentsInPlace(varDecl, true);
                this.recordSourceMappingStart(varDecl);
                if(sym && sym.isMember() && sym.container && (sym.container.kind() == 1 /* Type */ )) {
                    var type = (sym.container).type;
                    if(type.isClass() && (!TypeScript.hasFlag(sym.flags, 1024 /* ModuleMember */ ))) {
                        if(this.emitState.container != 6 /* Args */ ) {
                            if(TypeScript.hasFlag(sym.flags, 16 /* Static */ )) {
                                this.writeToOutput(sym.container.name + ".");
                            } else {
                                this.writeToOutput("this.");
                            }
                        }
                    } else {
                        if(type.hasImplementation()) {
                            if(!TypeScript.hasFlag(sym.flags, 1 /* Exported */ ) && (sym.container == this.checker.gloMod || !TypeScript.hasFlag(sym.flags, 256 /* Property */ ))) {
                                this.emitVarDeclVar();
                            } else {
                                if(TypeScript.hasFlag(varDecl.varFlags, 32 /* LocalStatic */ )) {
                                    this.writeToOutput(".");
                                } else {
                                    if(this.emitState.container == 2 /* DynamicModule */ ) {
                                        this.writeToOutput("exports.");
                                    } else {
                                        this.writeToOutput(this.moduleName + ".");
                                    }
                                }
                            }
                        } else {
                            if(tokenId != 55 /* OpenParen */ ) {
                                if(TypeScript.hasFlag(sym.flags, 1 /* Exported */ ) && sym.container == this.checker.gloMod) {
                                    this.writeToOutput("this.");
                                } else {
                                    this.emitVarDeclVar();
                                }
                            }
                        }
                    }
                } else {
                    if(tokenId != 55 /* OpenParen */ ) {
                        this.emitVarDeclVar();
                    }
                }
                this.recordSourceMappingStart(varDecl.id);
                this.writeToOutput(varDecl.id.actualText);
                this.recordSourceMappingEnd(varDecl.id);
                if(hasInitializer) {
                    this.writeToOutputTrimmable(" = ");
                    this.emitJavascript(varDecl.init, 61 /* Comma */ , false);
                } else {
                    if(sym && sym.isMember() && (this.emitState.container == 4 /* Constructor */ )) {
                        this.writeToOutputTrimmable(" = ");
                        this.writeToOutput(this.defaultValue(varDecl.type));
                    }
                }
                this.onEmitVar();
                if((tokenId != 55 /* OpenParen */ )) {
                    if(this.varListCount < 0) {
                        this.writeToOutput(", ");
                    } else {
                        if(tokenId != 19 /* For */ ) {
                            this.writeToOutputTrimmable(";");
                        }
                    }
                }
                this.recordSourceMappingEnd(varDecl);
                this.emitParensAndCommentsInPlace(varDecl, false);
            }
        };
        Emitter.prototype.declEnclosed = function (moduleDecl) {
            if(moduleDecl == null) {
                return true;
            }
            for(var i = 0, len = this.moduleDeclList.length; i < len; i++) {
                if(this.moduleDeclList[i] == moduleDecl) {
                    return true;
                }
            }
            return false;
        };
        Emitter.prototype.emitJavascriptName = function (name, addThis) {
            var sym = name.sym;
            this.emitParensAndCommentsInPlace(name, true);
            this.recordSourceMappingStart(name);
            if(!name.isMissing()) {
                if(addThis && (this.emitState.container != 6 /* Args */ ) && sym) {
                    if(sym.container && (sym.container.name != TypeScript.globalId)) {
                        if(TypeScript.hasFlag(sym.flags, 16 /* Static */ ) && (TypeScript.hasFlag(sym.flags, 256 /* Property */ ))) {
                            if(sym.declModule && TypeScript.hasFlag(sym.declModule.modFlags, 2048 /* IsDynamic */ )) {
                                this.writeToOutput("exports.");
                            } else {
                                this.writeToOutput(sym.container.name + ".");
                            }
                        } else {
                            if(sym.kind() == 2 /* Field */ ) {
                                var fieldSym = sym;
                                if(TypeScript.hasFlag(fieldSym.flags, 1024 /* ModuleMember */ )) {
                                    if((sym.container != this.checker.gloMod) && ((TypeScript.hasFlag(sym.flags, 256 /* Property */ )) || TypeScript.hasFlag(sym.flags, 1 /* Exported */ ))) {
                                        if(TypeScript.hasFlag(sym.declModule.modFlags, 2048 /* IsDynamic */ )) {
                                            this.writeToOutput("exports.");
                                        } else {
                                            this.writeToOutput(sym.container.name + ".");
                                        }
                                    }
                                } else {
                                    if(sym.isInstanceProperty()) {
                                        if(this.thisFnc && !this.thisFnc.isMethod() && (!this.thisFnc.isConstructor)) {
                                            this.writeToOutput("_this.");
                                        } else {
                                            this.writeToOutput("this.");
                                        }
                                    }
                                }
                            } else {
                                if(sym.kind() == 1 /* Type */ ) {
                                    if(sym.isInstanceProperty()) {
                                        var typeSym = sym;
                                        var type = typeSym.type;
                                        if(type.call && !TypeScript.hasFlag(sym.flags, 1024 /* ModuleMember */ )) {
                                            if(this.thisFnc && !this.thisFnc.isMethod() && !this.thisFnc.isConstructor) {
                                                this.writeToOutput("_this.");
                                            } else {
                                                this.writeToOutput("this.");
                                            }
                                        }
                                    } else {
                                        if((sym.unitIndex != this.checker.locationInfo.unitIndex) || (!this.declEnclosed(sym.declModule))) {
                                            this.writeToOutput(sym.container.name + ".");
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if(sym.container == this.checker.gloMod && TypeScript.hasFlag(sym.flags, 1 /* Exported */ ) && !TypeScript.hasFlag(sym.flags, 8 /* Ambient */ ) && !((sym.isType() || sym.isMember()) && sym.declModule && TypeScript.hasFlag(sym.declModule.modFlags, 8 /* Ambient */ )) && this.emitState.container == 0 /* Prog */  && sym.declAST.nodeType != 71 /* FuncDecl */ ) {
                            this.writeToOutput("this.");
                        }
                    }
                }
                if(sym && sym.declAST && sym.declAST.nodeType == 96 /* ModuleDeclaration */  && (TypeScript.hasFlag((sym.declAST).modFlags, 2048 /* IsDynamic */ ))) {
                    var moduleDecl = sym.declAST;
                    if(TypeScript.moduleGenTarget == 1 /* Asynchronous */ ) {
                        this.writeLineToOutput("__" + this.modAliasId + "__;");
                    } else {
                        var modPath = name.actualText;
                        var isAmbient = moduleDecl.mod.symbol.declAST && TypeScript.hasFlag((moduleDecl.mod.symbol.declAST).modFlags, 8 /* Ambient */ );
                        modPath = isAmbient ? modPath : this.firstModAlias ? this.firstModAlias : TypeScript.quoteBaseName(modPath);
                        modPath = isAmbient ? modPath : (!TypeScript.isRelative(TypeScript.stripQuotes(modPath)) ? TypeScript.quoteStr("./" + TypeScript.stripQuotes(modPath)) : modPath);
                        this.writeToOutput("require(" + modPath + ")");
                    }
                } else {
                    this.writeToOutput(name.actualText);
                }
            }
            this.recordSourceMappingEnd(name);
            this.emitParensAndCommentsInPlace(name, false);
        };
        Emitter.prototype.emitJavascriptStatements = function (stmts, emitEmptyBod, newlineAfterBlock) {
            if(stmts) {
                if(stmts.nodeType != 84 /* Block */ ) {
                    var hasContents = (stmts && (stmts.nodeType != 92 /* List */  || ((stmts).members.length > 0)));
                    if(emitEmptyBod || hasContents) {
                        var hasOnlyBlockStatement = ((stmts.nodeType == 84 /* Block */ ) || ((stmts.nodeType == 92 /* List */ ) && ((stmts).members.length == 1) && ((stmts).members[0].nodeType == 84 /* Block */ )));
                        this.recordSourceMappingStart(stmts);
                        if(!hasOnlyBlockStatement) {
                            this.writeLineToOutput(" {");
                            this.indenter.increaseIndent();
                        }
                        this.emitJavascriptList(stmts, null, 54 /* Semicolon */ , true, false, false);
                        if(!hasOnlyBlockStatement) {
                            this.writeLineToOutput("");
                            this.indenter.decreaseIndent();
                            this.emitIndent();
                            this.writeToOutput("}");
                        }
                        this.recordSourceMappingEnd(stmts);
                    }
                } else {
                    this.emitJavascript(stmts, 54 /* Semicolon */ , true);
                }
            } else {
                if(emitEmptyBod) {
                    this.writeToOutput("{ }");
                }
            }
        };
        Emitter.prototype.emitBareJavascriptStatements = function (stmts, emitClassPropertiesAfterSuperCall) {
            if(stmts.nodeType != 84 /* Block */ ) {
                if(stmts.nodeType == 92 /* List */ ) {
                    var stmtList = stmts;
                    if((stmtList.members.length == 2) && (stmtList.members[0].nodeType == 84 /* Block */ ) && (stmtList.members[1].nodeType == 103 /* EndCode */ )) {
                        this.emitJavascript(stmtList.members[0], 54 /* Semicolon */ , true);
                        this.writeLineToOutput("");
                    } else {
                        this.emitJavascriptList(stmts, null, 54 /* Semicolon */ , true, false, emitClassPropertiesAfterSuperCall);
                    }
                } else {
                    this.emitJavascript(stmts, 54 /* Semicolon */ , true);
                }
            } else {
                this.emitJavascript(stmts, 54 /* Semicolon */ , true);
            }
        };
        Emitter.prototype.recordSourceMappingNameStart = function (name) {
            if(this.sourceMapper) {
                var finalName = name;
                if(!name) {
                    finalName = "";
                } else {
                    if(this.sourceMapper.currentNameIndex.length > 0) {
                        finalName = this.sourceMapper.names[this.sourceMapper.currentNameIndex.length - 1] + "." + name;
                    }
                }
                this.sourceMapper.names.push(finalName);
                this.sourceMapper.currentNameIndex.push(this.sourceMapper.names.length - 1);
            }
        };
        Emitter.prototype.recordSourceMappingNameEnd = function () {
            if(this.sourceMapper) {
                this.sourceMapper.currentNameIndex.pop();
            }
        };
        Emitter.prototype.recordSourceMappingStart = function (ast) {
            if(this.sourceMapper && TypeScript.isValidAstNode(ast)) {
                var lineCol = {
                    line: -1,
                    col: -1
                };
                var sourceMapping = new TypeScript.SourceMapping();
                sourceMapping.start.emittedColumn = this.emitState.column;
                sourceMapping.start.emittedLine = this.emitState.line;
                TypeScript.getSourceLineColFromMap(lineCol, ast.minChar, this.checker.locationInfo.lineMap);
                sourceMapping.start.sourceColumn = lineCol.col;
                sourceMapping.start.sourceLine = lineCol.line;
                TypeScript.getSourceLineColFromMap(lineCol, ast.limChar, this.checker.locationInfo.lineMap);
                sourceMapping.end.sourceColumn = lineCol.col;
                sourceMapping.end.sourceLine = lineCol.line;
                if(this.sourceMapper.currentNameIndex.length > 0) {
                    sourceMapping.nameIndex = this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length - 1];
                }
                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];
                siblings.push(sourceMapping);
                this.sourceMapper.currentMappings.push(sourceMapping.childMappings);
            }
        };
        Emitter.prototype.recordSourceMappingEnd = function (ast) {
            if(this.sourceMapper && TypeScript.isValidAstNode(ast)) {
                this.sourceMapper.currentMappings.pop();
                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];
                var sourceMapping = siblings[siblings.length - 1];
                sourceMapping.end.emittedColumn = this.emitState.column;
                sourceMapping.end.emittedLine = this.emitState.line;
            }
        };
        Emitter.prototype.emitSourceMappings = function () {
            TypeScript.SourceMapper.EmitSourceMapping(this.allSourceMappers);
        };
        Emitter.prototype.emitJavascriptList = function (ast, delimiter, tokenId, startLine, onlyStatics, emitClassPropertiesAfterSuperCall, emitPrologue, requiresInherit) {
            if (typeof emitPrologue === "undefined") { emitPrologue = false; }
            if(ast == null) {
                return;
            } else {
                if(ast.nodeType != 92 /* List */ ) {
                    this.emitPrologue(emitPrologue);
                    this.emitJavascript(ast, tokenId, startLine);
                } else {
                    var list = ast;
                    if(list.members.length == 0) {
                        return;
                    }
                    this.emitParensAndCommentsInPlace(ast, true);
                    var len = list.members.length;
                    for(var i = 0; i < len; i++) {
                        if(emitPrologue) {
                            if(i == 1 || !TypeScript.hasFlag(list.flags, 128 /* StrictMode */ )) {
                                this.emitPrologue(requiresInherit);
                                emitPrologue = false;
                            }
                        }
                        if(i == 1 && emitClassPropertiesAfterSuperCall) {
                            var constructorDecl = (this.thisClassNode).constructorDecl;
                            if(constructorDecl && constructorDecl.arguments) {
                                var argsLen = constructorDecl.arguments.members.length;
                                for(var iArg = 0; iArg < argsLen; iArg++) {
                                    var arg = constructorDecl.arguments.members[iArg];
                                    if((arg.varFlags & 512 /* Property */ ) != 0 /* None */ ) {
                                        this.emitIndent();
                                        this.recordSourceMappingStart(arg);
                                        this.recordSourceMappingStart(arg.id);
                                        this.writeToOutput("this." + arg.id.actualText);
                                        this.recordSourceMappingEnd(arg.id);
                                        this.writeToOutput(" = ");
                                        this.recordSourceMappingStart(arg.id);
                                        this.writeToOutput(arg.id.actualText);
                                        this.recordSourceMappingEnd(arg.id);
                                        this.writeLineToOutput(";");
                                        this.recordSourceMappingEnd(arg);
                                    }
                                }
                            }
                            var nProps = (this.thisClassNode.members).members.length;
                            for(var iMember = 0; iMember < nProps; iMember++) {
                                if((this.thisClassNode.members).members[iMember].nodeType == 73 /* VarDecl */ ) {
                                    var varDecl = (this.thisClassNode.members).members[iMember];
                                    if(!TypeScript.hasFlag(varDecl.varFlags, 16 /* Static */ ) && varDecl.init) {
                                        this.emitIndent();
                                        this.emitJavascriptVarDecl(varDecl, 97 /* Tilde */ );
                                        this.writeLineToOutput("");
                                    }
                                }
                            }
                        }
                        var emitNode = list.members[i];
                        var isStaticDecl = (emitNode.nodeType == 71 /* FuncDecl */  && TypeScript.hasFlag((emitNode).fncFlags, 16 /* Static */ )) || (emitNode.nodeType == 73 /* VarDecl */  && TypeScript.hasFlag((emitNode).varFlags, 16 /* Static */ ));
                        if(onlyStatics ? !isStaticDecl : isStaticDecl) {
                            continue;
                        }
                        this.emitJavascript(emitNode, tokenId, startLine);
                        if(delimiter && (i < (len - 1))) {
                            if(startLine) {
                                this.writeLineToOutput(delimiter);
                            } else {
                                this.writeToOutput(delimiter);
                            }
                        } else {
                            if(startLine && (emitNode.nodeType != 96 /* ModuleDeclaration */ ) && (emitNode.nodeType != 95 /* InterfaceDeclaration */ ) && (!((emitNode.nodeType == 73 /* VarDecl */ ) && ((((emitNode).varFlags) & 8 /* Ambient */ ) == 8 /* Ambient */ ) && (((emitNode).init) == null)) && this.varListCount >= 0) && (emitNode.nodeType != 84 /* Block */  || (emitNode).isStatementBlock) && (emitNode.nodeType != 103 /* EndCode */ ) && (emitNode.nodeType != 71 /* FuncDecl */ )) {
                                this.writeLineToOutput("");
                            }
                        }
                    }
                    this.emitParensAndCommentsInPlace(ast, false);
                }
            }
        };
        Emitter.prototype.emitJavascript = function (ast, tokenId, startLine) {
            if(ast == null) {
                return;
            }
            var parenthesize = false;
            if(startLine && (this.indenter.indentAmt > 0) && (ast.nodeType != 92 /* List */ ) && (ast.nodeType != 84 /* Block */ )) {
                if((ast.nodeType != 95 /* InterfaceDeclaration */ ) && (!((ast.nodeType == 73 /* VarDecl */ ) && ((((ast).varFlags) & 8 /* Ambient */ ) == 8 /* Ambient */ ) && (((ast).init) == null)) && this.varListCount >= 0) && (ast.nodeType != 103 /* EndCode */ ) && ((ast.nodeType != 71 /* FuncDecl */ ) || (this.emitState.container != 4 /* Constructor */ ))) {
                    this.emitIndent();
                }
            }
            if(parenthesize) {
                this.writeToOutput("(");
            }
            ast.emit(this, tokenId, startLine);
            if(parenthesize) {
                this.writeToOutput(")");
            }
            if((tokenId == 54 /* Semicolon */ ) && (ast.nodeType < TypeScript.NodeType.GeneralNode)) {
                this.writeToOutput(";");
            }
        };
        Emitter.prototype.emitPropertyAccessor = function (funcDecl, className, isProto) {
            if(!(funcDecl.accessorSymbol).hasBeenEmitted) {
                var accessorSymbol = funcDecl.accessorSymbol;
                this.emitIndent();
                this.recordSourceMappingStart(funcDecl);
                this.writeLineToOutput("Object.defineProperty(" + className + (isProto ? ".prototype, \"" : ", \"") + funcDecl.name.actualText + "\"" + ", {");
                this.indenter.increaseIndent();
                if(accessorSymbol.getter) {
                    var getter = accessorSymbol.getter.declAST;
                    this.emitIndent();
                    this.recordSourceMappingStart(getter);
                    this.writeToOutput("get: ");
                    this.emitInnerFunction(getter, false, isProto, null, funcDecl.hasSelfReference(), null);
                    this.writeLineToOutput(",");
                }
                if(accessorSymbol.setter) {
                    var setter = accessorSymbol.setter.declAST;
                    this.emitIndent();
                    this.recordSourceMappingStart(setter);
                    this.writeToOutput("set: ");
                    this.emitInnerFunction(setter, false, isProto, null, funcDecl.hasSelfReference(), null);
                    this.writeLineToOutput(",");
                }
                this.emitIndent();
                this.writeLineToOutput("enumerable: true,");
                this.emitIndent();
                this.writeLineToOutput("configurable: true");
                this.indenter.decreaseIndent();
                this.emitIndent();
                this.writeLineToOutput("});");
                this.recordSourceMappingEnd(funcDecl);
                accessorSymbol.hasBeenEmitted = true;
            }
        };
        Emitter.prototype.emitPrototypeMember = function (member, className) {
            if(member.nodeType == 71 /* FuncDecl */ ) {
                var funcDecl = member;
                if(funcDecl.isAccessor()) {
                    this.emitPropertyAccessor(funcDecl, className, true);
                } else {
                    this.emitIndent();
                    this.recordSourceMappingStart(funcDecl);
                    this.writeToOutput(className + ".prototype." + funcDecl.getNameText() + " = ");
                    this.emitInnerFunction(funcDecl, false, true, null, funcDecl.hasSelfReference(), null);
                    this.writeLineToOutput(";");
                }
            } else {
                if(member.nodeType == 73 /* VarDecl */ ) {
                    var varDecl = member;
                    if(varDecl.init) {
                        this.emitIndent();
                        this.recordSourceMappingStart(varDecl);
                        this.recordSourceMappingStart(varDecl.id);
                        this.writeToOutput(className + ".prototype." + varDecl.id.actualText);
                        this.recordSourceMappingEnd(varDecl.id);
                        this.writeToOutput(" = ");
                        this.emitJavascript(varDecl.init, 62 /* Equals */ , false);
                        this.recordSourceMappingEnd(varDecl);
                        this.writeLineToOutput(";");
                    }
                }
            }
        };
        Emitter.prototype.emitAddBaseMethods = function (className, base, classDecl) {
            if(base.members) {
                var baseSymbol = base.symbol;
                var baseName = baseSymbol.name;
                if(baseSymbol.declModule != classDecl.type.symbol.declModule) {
                    baseName = baseSymbol.fullName();
                }
                base.members.allMembers.map(function (key, s, c) {
                    var sym = s;
                    if((sym.kind() == 1 /* Type */ ) && (sym).type.call) {
                        this.recordSourceMappingStart(sym.declAST);
                        this.writeLineToOutput(className + ".prototype." + sym.name + " = " + baseName + ".prototype." + sym.name + ";");
                        this.recordSourceMappingEnd(sym.declAST);
                    }
                }, null);
            }
            if(base.extendsList) {
                for(var i = 0, len = base.extendsList.length; i < len; i++) {
                    this.emitAddBaseMethods(className, base.extendsList[i], classDecl);
                }
            }
        };
        Emitter.prototype.emitJavascriptClass = function (classDecl) {
            if(!TypeScript.hasFlag(classDecl.varFlags, 8 /* Ambient */ )) {
                var svClassNode = this.thisClassNode;
                var i = 0;
                this.thisClassNode = classDecl;
                var className = classDecl.name.actualText;
                this.emitParensAndCommentsInPlace(classDecl, true);
                var temp = this.setContainer(3 /* Class */ );
                this.recordSourceMappingStart(classDecl);
                if(TypeScript.hasFlag(classDecl.varFlags, 1 /* Exported */ ) && classDecl.type.symbol.container == this.checker.gloMod) {
                    this.writeToOutput("this." + className);
                } else {
                    this.writeToOutput("var " + className);
                }
                var _class = classDecl.type;
                var instanceType = _class.instanceType;
                var baseClass = instanceType ? instanceType.baseClass() : null;
                var baseNameDecl = null;
                var baseName = null;
                if(baseClass) {
                    this.writeLineToOutput(" = (function (_super) {");
                } else {
                    this.writeLineToOutput(" = (function () {");
                }
                this.recordSourceMappingNameStart(className);
                this.indenter.increaseIndent();
                if(baseClass) {
                    baseNameDecl = classDecl.extendsList.members[0];
                    baseName = baseNameDecl.nodeType == 28 /* Call */  ? (baseNameDecl).target : baseNameDecl;
                    this.emitIndent();
                    this.writeLineToOutput("__extends(" + className + ", _super);");
                    var elen = instanceType.extendsList.length;
                    if(elen > 1) {
                        for(var i = 1; i < elen; i++) {
                            var base = instanceType.extendsList[i];
                            this.emitAddBaseMethods(className, base, classDecl);
                        }
                    }
                }
                this.emitIndent();
                var constrDecl = classDecl.constructorDecl;
                if(constrDecl) {
                    this.emitJavascript(classDecl.constructorDecl, 55 /* OpenParen */ , false);
                } else {
                    var wroteProps = 0;
                    this.recordSourceMappingStart(classDecl);
                    this.indenter.increaseIndent();
                    this.writeToOutput("function " + classDecl.name.actualText + "() {");
                    this.recordSourceMappingNameStart("constructor");
                    if(baseClass) {
                        this.writeLineToOutput("");
                        this.emitIndent();
                        this.writeLineToOutput("_super.apply(this, arguments);");
                        wroteProps++;
                    }
                    if(classDecl.varFlags & 131072 /* MustCaptureThis */ ) {
                        this.writeCaptureThisStatement(classDecl);
                    }
                    var members = (this.thisClassNode.members).members;
                    for(var i = 0; i < members.length; i++) {
                        if(members[i].nodeType == 73 /* VarDecl */ ) {
                            var varDecl = members[i];
                            if(!TypeScript.hasFlag(varDecl.varFlags, 16 /* Static */ ) && varDecl.init) {
                                this.writeLineToOutput("");
                                this.emitIndent();
                                this.emitJavascriptVarDecl(varDecl, 97 /* Tilde */ );
                                wroteProps++;
                            }
                        }
                    }
                    if(wroteProps) {
                        this.writeLineToOutput("");
                        this.indenter.decreaseIndent();
                        this.emitIndent();
                        this.writeLineToOutput("}");
                    } else {
                        this.writeLineToOutput(" }");
                        this.indenter.decreaseIndent();
                    }
                    this.recordSourceMappingNameEnd();
                    this.recordSourceMappingEnd(classDecl);
                }
                var membersLen = classDecl.members.members.length;
                for(var j = 0; j < membersLen; j++) {
                    var memberDecl = classDecl.members.members[j];
                    if(memberDecl.nodeType == 71 /* FuncDecl */ ) {
                        var fn = memberDecl;
                        if(TypeScript.hasFlag(fn.fncFlags, 1024 /* Method */ ) && !fn.isSignature()) {
                            if(!TypeScript.hasFlag(fn.fncFlags, 16 /* Static */ )) {
                                this.emitPrototypeMember(fn, className);
                            } else {
                                if(fn.isAccessor()) {
                                    this.emitPropertyAccessor(fn, this.thisClassNode.name.actualText, false);
                                } else {
                                    this.emitIndent();
                                    this.recordSourceMappingStart(fn);
                                    this.writeToOutput(classDecl.name.actualText + "." + fn.name.actualText + " = ");
                                    this.emitInnerFunction(fn, (fn.name && !fn.name.isMissing()), false, null, fn.hasSelfReference(), null);
                                }
                            }
                        }
                    } else {
                        if(memberDecl.nodeType == 73 /* VarDecl */ ) {
                            var varDecl = memberDecl;
                            if(TypeScript.hasFlag(varDecl.varFlags, 16 /* Static */ )) {
                                this.emitIndent();
                                this.recordSourceMappingStart(varDecl);
                                this.writeToOutput(classDecl.name.actualText + "." + varDecl.id.actualText + " = ");
                                if(varDecl.init) {
                                    this.emitJavascript(varDecl.init, 62 /* Equals */ , false);
                                    this.writeLineToOutput(";");
                                } else {
                                    this.writeLineToOutput(this.defaultValue(varDecl.type) + ";");
                                }
                                this.recordSourceMappingEnd(varDecl);
                            }
                        } else {
                            throw Error("We want to catch this");
                        }
                    }
                }
                this.emitIndent();
                this.recordSourceMappingStart(classDecl.endingToken);
                this.writeLineToOutput("return " + className + ";");
                this.recordSourceMappingEnd(classDecl.endingToken);
                this.indenter.decreaseIndent();
                this.emitIndent();
                this.recordSourceMappingStart(classDecl.endingToken);
                this.writeToOutput("}");
                this.recordSourceMappingNameEnd();
                this.recordSourceMappingEnd(classDecl.endingToken);
                this.recordSourceMappingStart(classDecl);
                this.writeToOutput(")(");
                if(baseClass) {
                    this.emitJavascript(baseName, 97 /* Tilde */ , false);
                }
                this.writeToOutput(");");
                this.recordSourceMappingEnd(classDecl);
                if((temp == 1 /* Module */  || temp == 2 /* DynamicModule */ ) && TypeScript.hasFlag(classDecl.varFlags, 1 /* Exported */ )) {
                    this.writeLineToOutput("");
                    this.emitIndent();
                    var modName = temp == 1 /* Module */  ? this.moduleName : "exports";
                    this.recordSourceMappingStart(classDecl);
                    this.writeToOutput(modName + "." + className + " = " + className + ";");
                    this.recordSourceMappingEnd(classDecl);
                }
                this.emitIndent();
                this.recordSourceMappingEnd(classDecl);
                this.emitParensAndCommentsInPlace(classDecl, false);
                this.setContainer(temp);
                this.thisClassNode = svClassNode;
            }
        };
        Emitter.prototype.emitPrologue = function (reqInherits) {
            if(!this.prologueEmitted) {
                if(reqInherits) {
                    this.prologueEmitted = true;
                    this.writeLineToOutput("var __extends = this.__extends || function (d, b) {");
                    this.writeLineToOutput("    function __() { this.constructor = d; }");
                    this.writeLineToOutput("    __.prototype = b.prototype;");
                    this.writeLineToOutput("    d.prototype = new __();");
                    this.writeLineToOutput("};");
                }
                if(this.checker.mustCaptureGlobalThis) {
                    this.prologueEmitted = true;
                    this.writeLineToOutput(this.captureThisStmtString);
                }
            }
        };
        Emitter.prototype.emitSuperReference = function () {
            this.writeToOutput("_super.prototype");
        };
        Emitter.prototype.emitSuperCall = function (callEx) {
            if(callEx.target.nodeType == 19 /* Dot */ ) {
                var dotNode = callEx.target;
                if(dotNode.operand1.nodeType == 6 /* Super */ ) {
                    this.emitJavascript(dotNode, 55 /* OpenParen */ , false);
                    this.writeToOutput(".call(this");
                    if(callEx.arguments && callEx.arguments.members.length > 0) {
                        this.writeToOutput(", ");
                        this.emitJavascriptList(callEx.arguments, ", ", 61 /* Comma */ , false, false, false);
                    }
                    this.writeToOutput(")");
                    return true;
                }
            }
            return false;
        };
        return Emitter;
    })();
    TypeScript.Emitter = Emitter;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var ErrorReporter = (function () {
        function ErrorReporter(outfile) {
            this.outfile = outfile;
            this.parser = null;
            this.checker = null;
            this.lineCol = {
                line: 0,
                col: 0
            };
            this.emitAsComments = true;
            this.hasErrors = false;
            this.pushToErrorSink = false;
            this.errorSink = [];
        }
        ErrorReporter.prototype.getCapturedErrors = function () {
            return this.errorSink;
        };
        ErrorReporter.prototype.freeCapturedErrors = function () {
            this.errorSink = [];
        };
        ErrorReporter.prototype.captureError = function (emsg) {
            this.errorSink[this.errorSink.length] = emsg;
        };
        ErrorReporter.prototype.setErrOut = function (outerr) {
            this.outfile = outerr;
            this.emitAsComments = false;
        };
        ErrorReporter.prototype.emitPrefix = function () {
            if(this.emitAsComments) {
                this.outfile.Write("// ");
            }
            this.outfile.Write(this.checker.locationInfo.filename + "(" + this.lineCol.line + "," + this.lineCol.col + "): ");
        };
        ErrorReporter.prototype.writePrefix = function (ast) {
            if(ast) {
                this.setError(ast);
            } else {
                this.lineCol.line = -1;
                this.lineCol.col = -1;
            }
            this.emitPrefix();
        };
        ErrorReporter.prototype.writePrefixFromSym = function (symbol) {
            if(symbol && this.checker.locationInfo.lineMap) {
                TypeScript.getSourceLineColFromMap(this.lineCol, symbol.location, this.checker.locationInfo.lineMap);
            } else {
                this.lineCol.line = -1;
                this.lineCol.col = -1;
            }
            this.emitPrefix();
        };
        ErrorReporter.prototype.setError = function (ast) {
            if(ast) {
                ast.flags |= 8 /* Error */ ;
                if(this.checker.locationInfo.lineMap) {
                    TypeScript.getSourceLineColFromMap(this.lineCol, ast.minChar, this.checker.locationInfo.lineMap);
                }
            }
        };
        ErrorReporter.prototype.reportError = function (ast, message) {
            if(this.pushToErrorSink) {
                this.captureError(message);
                return;
            }
            this.hasErrors = true;
            var len = (ast.limChar - ast.minChar);
            if(this.parser.errorRecovery && this.parser.errorCallback) {
                this.parser.errorCallback(ast.minChar, len, message, this.checker.locationInfo.unitIndex);
            } else {
                this.writePrefix(ast);
                this.outfile.WriteLine(message);
            }
        };
        ErrorReporter.prototype.reportErrorFromSym = function (symbol, message) {
            if(this.pushToErrorSink) {
                this.captureError(message);
                return;
            }
            this.hasErrors = true;
            if(this.parser.errorRecovery && this.parser.errorCallback) {
                this.parser.errorCallback(symbol.location, 1, message, this.checker.locationInfo.unitIndex);
            } else {
                this.writePrefixFromSym(symbol);
                this.outfile.WriteLine(message);
            }
        };
        ErrorReporter.prototype.emitterError = function (ast, message) {
            this.reportError(ast, message);
            throw Error("EmitError");
        };
        ErrorReporter.prototype.duplicateIdentifier = function (ast, name) {
            this.reportError(ast, "Duplicate identifier '" + name + "'");
        };
        ErrorReporter.prototype.showRef = function (ast, text, symbol) {
            var defLineCol = {
                line: -1,
                col: -1
            };
            this.parser.getSourceLineCol(defLineCol, symbol.location);
            this.reportError(ast, "symbol " + text + " defined at (" + defLineCol.line + "," + defLineCol.col + ")");
        };
        ErrorReporter.prototype.unresolvedSymbol = function (ast, name) {
            this.reportError(ast, "The name '" + name + "' does not exist in the current scope");
        };
        ErrorReporter.prototype.symbolDoesNotReferToAValue = function (ast, name) {
            this.reportError(ast, "The name '" + name + "' does not refer to a value");
        };
        ErrorReporter.prototype.styleError = function (ast, msg) {
            var bkThrow = this.pushToErrorSink;
            this.pushToErrorSink = false;
            this.reportError(ast, "STYLE: " + msg);
            this.pushToErrorSink = bkThrow;
        };
        ErrorReporter.prototype.simpleError = function (ast, msg) {
            this.reportError(ast, msg);
        };
        ErrorReporter.prototype.simpleErrorFromSym = function (sym, msg) {
            this.reportErrorFromSym(sym, msg);
        };
        ErrorReporter.prototype.invalidSuperReference = function (ast) {
            this.simpleError(ast, "Keyword 'super' can only be used inside a class instance method");
        };
        ErrorReporter.prototype.valueCannotBeModified = function (ast) {
            this.simpleError(ast, "The left-hand side of an assignment expression must be a variable, property or indexer");
        };
        ErrorReporter.prototype.invalidCall = function (ast, nodeType, scope) {
            var targetType = ast.target.type;
            var typeName = targetType.getScopedTypeName(scope);
            if(targetType.construct && (nodeType == 28 /* Call */ )) {
                this.reportError(ast, "Value of type '" + typeName + "' is not callable.  Did you mean to include 'new'?");
            } else {
                var catString = (nodeType == 28 /* Call */ ) ? "callable" : "newable";
                this.reportError(ast, "Value of type '" + typeName + "' is not " + catString);
            }
        };
        ErrorReporter.prototype.indexLHS = function (ast, scope) {
            var targetType = ast.operand1.type.getScopedTypeName(scope);
            var indexType = ast.operand2.type.getScopedTypeName(scope);
            this.simpleError(ast, "Value of type '" + targetType + "' is not indexable by type '" + indexType + "'");
        };
        ErrorReporter.prototype.incompatibleTypes = function (ast, t1, t2, op, scope, comparisonInfo) {
            if(!t1) {
                t1 = this.checker.anyType;
            }
            if(!t2) {
                t2 = this.checker.anyType;
            }
            var reason = comparisonInfo ? comparisonInfo.message : "";
            if(op) {
                this.reportError(ast, "Operator '" + op + "' cannot be applied to types '" + t1.getScopedTypeName(scope) + "' and '" + t2.getScopedTypeName(scope) + "'" + (reason ? ": " + reason : ""));
            } else {
                this.reportError(ast, "Cannot convert '" + t1.getScopedTypeName(scope) + "' to '" + t2.getScopedTypeName(scope) + "'" + (reason ? ": " + reason : ""));
            }
        };
        ErrorReporter.prototype.expectedClassOrInterface = function (ast) {
            this.simpleError(ast, "Expected var, class, interface, or module");
        };
        ErrorReporter.prototype.unaryOperatorTypeError = function (ast, op, type) {
            this.reportError(ast, "Operator '" + op + "' cannot be applied to type '" + type.getTypeName() + "'");
        };
        return ErrorReporter;
    })();
    TypeScript.ErrorReporter = ErrorReporter;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var PrintContext = (function () {
        function PrintContext(outfile, parser) {
            this.outfile = outfile;
            this.parser = parser;
            this.builder = "";
            this.indent1 = "  ";
            this.indentStrings = [];
            this.indentAmt = 0;
        }
        PrintContext.prototype.increaseIndent = function () {
            this.indentAmt++;
        };
        PrintContext.prototype.decreaseIndent = function () {
            this.indentAmt--;
        };
        PrintContext.prototype.startLine = function () {
            if(this.builder.length > 0) {
                TypeScript.CompilerDiagnostics.Alert(this.builder);
            }
            var indentString = this.indentStrings[this.indentAmt];
            if(indentString === undefined) {
                indentString = "";
                for(var i = 0; i < this.indentAmt; i++) {
                    indentString += this.indent1;
                }
                this.indentStrings[this.indentAmt] = indentString;
            }
            this.builder += indentString;
        };
        PrintContext.prototype.write = function (s) {
            this.builder += s;
        };
        PrintContext.prototype.writeLine = function (s) {
            this.builder += s;
            this.outfile.WriteLine(this.builder);
            this.builder = "";
        };
        return PrintContext;
    })();
    TypeScript.PrintContext = PrintContext;    
    function prePrintAST(ast, parent, walker) {
        var pc = walker.state;
        ast.print(pc);
        pc.increaseIndent();
        return ast;
    }
    TypeScript.prePrintAST = prePrintAST;
    function postPrintAST(ast, parent, walker) {
        var pc = walker.state;
        pc.decreaseIndent();
        return ast;
    }
    TypeScript.postPrintAST = postPrintAST;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    TypeScript.LexEOF = (-1);
    TypeScript.LexCodeNWL = 10;
    TypeScript.LexCodeRET = 13;
    TypeScript.LexCodeTAB = 9;
    TypeScript.LexCodeVTAB = 11;
    TypeScript.LexCode_e = 'e'.charCodeAt(0);
    TypeScript.LexCode_E = 'E'.charCodeAt(0);
    TypeScript.LexCode_x = 'x'.charCodeAt(0);
    TypeScript.LexCode_X = 'X'.charCodeAt(0);
    TypeScript.LexCode_a = 'a'.charCodeAt(0);
    TypeScript.LexCode_A = 'A'.charCodeAt(0);
    TypeScript.LexCode_f = 'f'.charCodeAt(0);
    TypeScript.LexCode_F = 'F'.charCodeAt(0);
    TypeScript.LexCode_g = 'g'.charCodeAt(0);
    TypeScript.LexCode_m = 'm'.charCodeAt(0);
    TypeScript.LexCode_i = 'i'.charCodeAt(0);
    TypeScript.LexCode_u = 'u'.charCodeAt(0);
    TypeScript.LexCode_0 = '0'.charCodeAt(0);
    TypeScript.LexCode_9 = '9'.charCodeAt(0);
    TypeScript.LexCode_8 = '8'.charCodeAt(0);
    TypeScript.LexCode_7 = '7'.charCodeAt(0);
    TypeScript.LexCodeBSL = '\\'.charCodeAt(0);
    TypeScript.LexCodeSHP = '#'.charCodeAt(0);
    TypeScript.LexCodeBNG = '!'.charCodeAt(0);
    TypeScript.LexCodeQUO = '"'.charCodeAt(0);
    TypeScript.LexCodeAPO = '\''.charCodeAt(0);
    TypeScript.LexCodePCT = '%'.charCodeAt(0);
    TypeScript.LexCodeAMP = '&'.charCodeAt(0);
    TypeScript.LexCodeLPR = '('.charCodeAt(0);
    TypeScript.LexCodeRPR = ')'.charCodeAt(0);
    TypeScript.LexCodePLS = '+'.charCodeAt(0);
    TypeScript.LexCodeMIN = '-'.charCodeAt(0);
    TypeScript.LexCodeMUL = '*'.charCodeAt(0);
    TypeScript.LexCodeSLH = '/'.charCodeAt(0);
    TypeScript.LexCodeXOR = '^'.charCodeAt(0);
    TypeScript.LexCodeCMA = ','.charCodeAt(0);
    TypeScript.LexCodeDOT = '.'.charCodeAt(0);
    TypeScript.LexCodeLT = '<'.charCodeAt(0);
    TypeScript.LexCodeEQ = '='.charCodeAt(0);
    TypeScript.LexCodeGT = '>'.charCodeAt(0);
    TypeScript.LexCodeQUE = '?'.charCodeAt(0);
    TypeScript.LexCodeLBR = '['.charCodeAt(0);
    TypeScript.LexCodeRBR = ']'.charCodeAt(0);
    TypeScript.LexCodeUSC = '_'.charCodeAt(0);
    TypeScript.LexCodeLC = '{'.charCodeAt(0);
    TypeScript.LexCodeRC = '}'.charCodeAt(0);
    TypeScript.LexCodeBAR = '|'.charCodeAt(0);
    TypeScript.LexCodeTIL = '~'.charCodeAt(0);
    TypeScript.LexCodeCOL = ':'.charCodeAt(0);
    TypeScript.LexCodeSMC = ';'.charCodeAt(0);
    TypeScript.LexCodeUnderscore = '_'.charCodeAt(0);
    TypeScript.LexCodeDollar = '$'.charCodeAt(0);
    TypeScript.LexCodeSpace = 32;
    TypeScript.LexCodeASCIIChars = 128;
    TypeScript.LexKeywordTable = undefined;
    var autoToken = new Array(TypeScript.LexCodeASCIIChars);
    var lexIdStartTable = new Array(TypeScript.LexCodeASCIIChars);
    var unicodeES3IdStart = [
        170, 
        170, 
        181, 
        181, 
        186, 
        186, 
        192, 
        214, 
        216, 
        246, 
        248, 
        543, 
        546, 
        563, 
        592, 
        685, 
        688, 
        696, 
        699, 
        705, 
        720, 
        721, 
        736, 
        740, 
        750, 
        750, 
        890, 
        890, 
        902, 
        902, 
        904, 
        906, 
        908, 
        908, 
        910, 
        929, 
        931, 
        974, 
        976, 
        983, 
        986, 
        1011, 
        1024, 
        1153, 
        1164, 
        1220, 
        1223, 
        1224, 
        1227, 
        1228, 
        1232, 
        1269, 
        1272, 
        1273, 
        1329, 
        1366, 
        1369, 
        1369, 
        1377, 
        1415, 
        1488, 
        1514, 
        1520, 
        1522, 
        1569, 
        1594, 
        1600, 
        1610, 
        1649, 
        1747, 
        1749, 
        1749, 
        1765, 
        1766, 
        1786, 
        1788, 
        1808, 
        1808, 
        1810, 
        1836, 
        1920, 
        1957, 
        2309, 
        2361, 
        2365, 
        2365, 
        2384, 
        2384, 
        2392, 
        2401, 
        2437, 
        2444, 
        2447, 
        2448, 
        2451, 
        2472, 
        2474, 
        2480, 
        2482, 
        2482, 
        2486, 
        2489, 
        2524, 
        2525, 
        2527, 
        2529, 
        2544, 
        2545, 
        2565, 
        2570, 
        2575, 
        2576, 
        2579, 
        2600, 
        2602, 
        2608, 
        2610, 
        2611, 
        2613, 
        2614, 
        2616, 
        2617, 
        2649, 
        2652, 
        2654, 
        2654, 
        2674, 
        2676, 
        2693, 
        2699, 
        2701, 
        2701, 
        2703, 
        2705, 
        2707, 
        2728, 
        2730, 
        2736, 
        2738, 
        2739, 
        2741, 
        2745, 
        2749, 
        2749, 
        2768, 
        2768, 
        2784, 
        2784, 
        2821, 
        2828, 
        2831, 
        2832, 
        2835, 
        2856, 
        2858, 
        2864, 
        2866, 
        2867, 
        2870, 
        2873, 
        2877, 
        2877, 
        2908, 
        2909, 
        2911, 
        2913, 
        2949, 
        2954, 
        2958, 
        2960, 
        2962, 
        2965, 
        2969, 
        2970, 
        2972, 
        2972, 
        2974, 
        2975, 
        2979, 
        2980, 
        2984, 
        2986, 
        2990, 
        2997, 
        2999, 
        3001, 
        3077, 
        3084, 
        3086, 
        3088, 
        3090, 
        3112, 
        3114, 
        3123, 
        3125, 
        3129, 
        3168, 
        3169, 
        3205, 
        3212, 
        3214, 
        3216, 
        3218, 
        3240, 
        3242, 
        3251, 
        3253, 
        3257, 
        3294, 
        3294, 
        3296, 
        3297, 
        3333, 
        3340, 
        3342, 
        3344, 
        3346, 
        3368, 
        3370, 
        3385, 
        3424, 
        3425, 
        3461, 
        3478, 
        3482, 
        3505, 
        3507, 
        3515, 
        3517, 
        3517, 
        3520, 
        3526, 
        3585, 
        3632, 
        3634, 
        3635, 
        3648, 
        3654, 
        3713, 
        3714, 
        3716, 
        3716, 
        3719, 
        3720, 
        3722, 
        3722, 
        3725, 
        3725, 
        3732, 
        3735, 
        3737, 
        3743, 
        3745, 
        3747, 
        3749, 
        3749, 
        3751, 
        3751, 
        3754, 
        3755, 
        3757, 
        3760, 
        3762, 
        3763, 
        3773, 
        3773, 
        3776, 
        3780, 
        3782, 
        3782, 
        3804, 
        3805, 
        3840, 
        3840, 
        3904, 
        3911, 
        3913, 
        3946, 
        3976, 
        3979, 
        4096, 
        4129, 
        4131, 
        4135, 
        4137, 
        4138, 
        4176, 
        4181, 
        4256, 
        4293, 
        4304, 
        4342, 
        4352, 
        4441, 
        4447, 
        4514, 
        4520, 
        4601, 
        4608, 
        4614, 
        4616, 
        4678, 
        4680, 
        4680, 
        4682, 
        4685, 
        4688, 
        4694, 
        4696, 
        4696, 
        4698, 
        4701, 
        4704, 
        4742, 
        4744, 
        4744, 
        4746, 
        4749, 
        4752, 
        4782, 
        4784, 
        4784, 
        4786, 
        4789, 
        4792, 
        4798, 
        4800, 
        4800, 
        4802, 
        4805, 
        4808, 
        4814, 
        4816, 
        4822, 
        4824, 
        4846, 
        4848, 
        4878, 
        4880, 
        4880, 
        4882, 
        4885, 
        4888, 
        4894, 
        4896, 
        4934, 
        4936, 
        4954, 
        5024, 
        5108, 
        5121, 
        5740, 
        5743, 
        5750, 
        5761, 
        5786, 
        5792, 
        5866, 
        6016, 
        6067, 
        6176, 
        6263, 
        6272, 
        6312, 
        7680, 
        7835, 
        7840, 
        7929, 
        7936, 
        7957, 
        7960, 
        7965, 
        7968, 
        8005, 
        8008, 
        8013, 
        8016, 
        8023, 
        8025, 
        8025, 
        8027, 
        8027, 
        8029, 
        8029, 
        8031, 
        8061, 
        8064, 
        8116, 
        8118, 
        8124, 
        8126, 
        8126, 
        8130, 
        8132, 
        8134, 
        8140, 
        8144, 
        8147, 
        8150, 
        8155, 
        8160, 
        8172, 
        8178, 
        8180, 
        8182, 
        8188, 
        8319, 
        8319, 
        8450, 
        8450, 
        8455, 
        8455, 
        8458, 
        8467, 
        8469, 
        8469, 
        8473, 
        8477, 
        8484, 
        8484, 
        8486, 
        8486, 
        8488, 
        8488, 
        8490, 
        8493, 
        8495, 
        8497, 
        8499, 
        8505, 
        8544, 
        8579, 
        12293, 
        12295, 
        12321, 
        12329, 
        12337, 
        12341, 
        12344, 
        12346, 
        12353, 
        12436, 
        12445, 
        12446, 
        12449, 
        12538, 
        12540, 
        12542, 
        12549, 
        12588, 
        12593, 
        12686, 
        12704, 
        12727, 
        13312, 
        13312, 
        19893, 
        19893, 
        19968, 
        19968, 
        40869, 
        40869, 
        40960, 
        42124, 
        44032, 
        44032, 
        55203, 
        55203, 
        63744, 
        64045, 
        64256, 
        64262, 
        64275, 
        64279, 
        64285, 
        64285, 
        64287, 
        64296, 
        64298, 
        64310, 
        64312, 
        64316, 
        64318, 
        64318, 
        64320, 
        64321, 
        64323, 
        64324, 
        64326, 
        64433, 
        64467, 
        64829, 
        64848, 
        64911, 
        64914, 
        64967, 
        65008, 
        65019, 
        65136, 
        65138, 
        65140, 
        65140, 
        65142, 
        65276, 
        65313, 
        65338, 
        65345, 
        65370, 
        65382, 
        65470, 
        65474, 
        65479, 
        65482, 
        65487, 
        65490, 
        65495, 
        65498, 
        65500
    ];
    var unicodeES3IdCont = [
        768, 
        846, 
        864, 
        866, 
        1155, 
        1158, 
        1425, 
        1441, 
        1443, 
        1465, 
        1467, 
        1469, 
        1471, 
        1471, 
        1473, 
        1474, 
        1476, 
        1476, 
        1611, 
        1621, 
        1632, 
        1641, 
        1648, 
        1648, 
        1750, 
        1756, 
        1759, 
        1764, 
        1767, 
        1768, 
        1770, 
        1773, 
        1776, 
        1785, 
        1809, 
        1809, 
        1840, 
        1866, 
        1958, 
        1968, 
        2305, 
        2307, 
        2364, 
        2364, 
        2366, 
        2381, 
        2385, 
        2388, 
        2402, 
        2403, 
        2406, 
        2415, 
        2433, 
        2435, 
        2492, 
        2492, 
        2494, 
        2500, 
        2503, 
        2504, 
        2507, 
        2509, 
        2519, 
        2519, 
        2530, 
        2531, 
        2534, 
        2543, 
        2562, 
        2562, 
        2620, 
        2620, 
        2622, 
        2626, 
        2631, 
        2632, 
        2635, 
        2637, 
        2662, 
        2673, 
        2689, 
        2691, 
        2748, 
        2748, 
        2750, 
        2757, 
        2759, 
        2761, 
        2763, 
        2765, 
        2790, 
        2799, 
        2817, 
        2819, 
        2876, 
        2876, 
        2878, 
        2883, 
        2887, 
        2888, 
        2891, 
        2893, 
        2902, 
        2903, 
        2918, 
        2927, 
        2946, 
        2947, 
        3006, 
        3010, 
        3014, 
        3016, 
        3018, 
        3021, 
        3031, 
        3031, 
        3047, 
        3055, 
        3073, 
        3075, 
        3134, 
        3140, 
        3142, 
        3144, 
        3146, 
        3149, 
        3157, 
        3158, 
        3174, 
        3183, 
        3202, 
        3203, 
        3262, 
        3268, 
        3270, 
        3272, 
        3274, 
        3277, 
        3285, 
        3286, 
        3302, 
        3311, 
        3330, 
        3331, 
        3390, 
        3395, 
        3398, 
        3400, 
        3402, 
        3405, 
        3415, 
        3415, 
        3430, 
        3439, 
        3458, 
        3459, 
        3530, 
        3530, 
        3535, 
        3540, 
        3542, 
        3542, 
        3544, 
        3551, 
        3570, 
        3571, 
        3633, 
        3633, 
        3636, 
        3642, 
        3655, 
        3662, 
        3664, 
        3673, 
        3761, 
        3761, 
        3764, 
        3769, 
        3771, 
        3772, 
        3784, 
        3789, 
        3792, 
        3801, 
        3864, 
        3865, 
        3872, 
        3881, 
        3893, 
        3893, 
        3895, 
        3895, 
        3897, 
        3897, 
        3902, 
        3903, 
        3953, 
        3972, 
        3974, 
        3975, 
        3984, 
        3991, 
        3993, 
        4028, 
        4038, 
        4038, 
        4140, 
        4146, 
        4150, 
        4153, 
        4160, 
        4169, 
        4182, 
        4185, 
        4969, 
        4977, 
        6068, 
        6099, 
        6112, 
        6121, 
        6160, 
        6169, 
        6313, 
        6313, 
        8255, 
        8256, 
        8400, 
        8412, 
        8417, 
        8417, 
        12330, 
        12335, 
        12441, 
        12442, 
        12539, 
        12539, 
        64286, 
        64286, 
        65056, 
        65059, 
        65075, 
        65076, 
        65101, 
        65103, 
        65296, 
        65305, 
        65343, 
        65343, 
        65381, 
        65381
    ];
    var unicodeES5IdStart = [
        170, 
        170, 
        181, 
        181, 
        186, 
        186, 
        192, 
        214, 
        216, 
        246, 
        248, 
        705, 
        710, 
        721, 
        736, 
        740, 
        748, 
        748, 
        750, 
        750, 
        880, 
        884, 
        886, 
        887, 
        890, 
        893, 
        902, 
        902, 
        904, 
        906, 
        908, 
        908, 
        910, 
        929, 
        931, 
        1013, 
        1015, 
        1153, 
        1162, 
        1319, 
        1329, 
        1366, 
        1369, 
        1369, 
        1377, 
        1415, 
        1488, 
        1514, 
        1520, 
        1522, 
        1568, 
        1610, 
        1646, 
        1647, 
        1649, 
        1747, 
        1749, 
        1749, 
        1765, 
        1766, 
        1774, 
        1775, 
        1786, 
        1788, 
        1791, 
        1791, 
        1808, 
        1808, 
        1810, 
        1839, 
        1869, 
        1957, 
        1969, 
        1969, 
        1994, 
        2026, 
        2036, 
        2037, 
        2042, 
        2042, 
        2048, 
        2069, 
        2074, 
        2074, 
        2084, 
        2084, 
        2088, 
        2088, 
        2112, 
        2136, 
        2208, 
        2208, 
        2210, 
        2220, 
        2308, 
        2361, 
        2365, 
        2365, 
        2384, 
        2384, 
        2392, 
        2401, 
        2417, 
        2423, 
        2425, 
        2431, 
        2437, 
        2444, 
        2447, 
        2448, 
        2451, 
        2472, 
        2474, 
        2480, 
        2482, 
        2482, 
        2486, 
        2489, 
        2493, 
        2493, 
        2510, 
        2510, 
        2524, 
        2525, 
        2527, 
        2529, 
        2544, 
        2545, 
        2565, 
        2570, 
        2575, 
        2576, 
        2579, 
        2600, 
        2602, 
        2608, 
        2610, 
        2611, 
        2613, 
        2614, 
        2616, 
        2617, 
        2649, 
        2652, 
        2654, 
        2654, 
        2674, 
        2676, 
        2693, 
        2701, 
        2703, 
        2705, 
        2707, 
        2728, 
        2730, 
        2736, 
        2738, 
        2739, 
        2741, 
        2745, 
        2749, 
        2749, 
        2768, 
        2768, 
        2784, 
        2785, 
        2821, 
        2828, 
        2831, 
        2832, 
        2835, 
        2856, 
        2858, 
        2864, 
        2866, 
        2867, 
        2869, 
        2873, 
        2877, 
        2877, 
        2908, 
        2909, 
        2911, 
        2913, 
        2929, 
        2929, 
        2947, 
        2947, 
        2949, 
        2954, 
        2958, 
        2960, 
        2962, 
        2965, 
        2969, 
        2970, 
        2972, 
        2972, 
        2974, 
        2975, 
        2979, 
        2980, 
        2984, 
        2986, 
        2990, 
        3001, 
        3024, 
        3024, 
        3077, 
        3084, 
        3086, 
        3088, 
        3090, 
        3112, 
        3114, 
        3123, 
        3125, 
        3129, 
        3133, 
        3133, 
        3160, 
        3161, 
        3168, 
        3169, 
        3205, 
        3212, 
        3214, 
        3216, 
        3218, 
        3240, 
        3242, 
        3251, 
        3253, 
        3257, 
        3261, 
        3261, 
        3294, 
        3294, 
        3296, 
        3297, 
        3313, 
        3314, 
        3333, 
        3340, 
        3342, 
        3344, 
        3346, 
        3386, 
        3389, 
        3389, 
        3406, 
        3406, 
        3424, 
        3425, 
        3450, 
        3455, 
        3461, 
        3478, 
        3482, 
        3505, 
        3507, 
        3515, 
        3517, 
        3517, 
        3520, 
        3526, 
        3585, 
        3632, 
        3634, 
        3635, 
        3648, 
        3654, 
        3713, 
        3714, 
        3716, 
        3716, 
        3719, 
        3720, 
        3722, 
        3722, 
        3725, 
        3725, 
        3732, 
        3735, 
        3737, 
        3743, 
        3745, 
        3747, 
        3749, 
        3749, 
        3751, 
        3751, 
        3754, 
        3755, 
        3757, 
        3760, 
        3762, 
        3763, 
        3773, 
        3773, 
        3776, 
        3780, 
        3782, 
        3782, 
        3804, 
        3807, 
        3840, 
        3840, 
        3904, 
        3911, 
        3913, 
        3948, 
        3976, 
        3980, 
        4096, 
        4138, 
        4159, 
        4159, 
        4176, 
        4181, 
        4186, 
        4189, 
        4193, 
        4193, 
        4197, 
        4198, 
        4206, 
        4208, 
        4213, 
        4225, 
        4238, 
        4238, 
        4256, 
        4293, 
        4295, 
        4295, 
        4301, 
        4301, 
        4304, 
        4346, 
        4348, 
        4680, 
        4682, 
        4685, 
        4688, 
        4694, 
        4696, 
        4696, 
        4698, 
        4701, 
        4704, 
        4744, 
        4746, 
        4749, 
        4752, 
        4784, 
        4786, 
        4789, 
        4792, 
        4798, 
        4800, 
        4800, 
        4802, 
        4805, 
        4808, 
        4822, 
        4824, 
        4880, 
        4882, 
        4885, 
        4888, 
        4954, 
        4992, 
        5007, 
        5024, 
        5108, 
        5121, 
        5740, 
        5743, 
        5759, 
        5761, 
        5786, 
        5792, 
        5866, 
        5870, 
        5872, 
        5888, 
        5900, 
        5902, 
        5905, 
        5920, 
        5937, 
        5952, 
        5969, 
        5984, 
        5996, 
        5998, 
        6000, 
        6016, 
        6067, 
        6103, 
        6103, 
        6108, 
        6108, 
        6176, 
        6263, 
        6272, 
        6312, 
        6314, 
        6314, 
        6320, 
        6389, 
        6400, 
        6428, 
        6480, 
        6509, 
        6512, 
        6516, 
        6528, 
        6571, 
        6593, 
        6599, 
        6656, 
        6678, 
        6688, 
        6740, 
        6823, 
        6823, 
        6917, 
        6963, 
        6981, 
        6987, 
        7043, 
        7072, 
        7086, 
        7087, 
        7098, 
        7141, 
        7168, 
        7203, 
        7245, 
        7247, 
        7258, 
        7293, 
        7401, 
        7404, 
        7406, 
        7409, 
        7413, 
        7414, 
        7424, 
        7615, 
        7680, 
        7957, 
        7960, 
        7965, 
        7968, 
        8005, 
        8008, 
        8013, 
        8016, 
        8023, 
        8025, 
        8025, 
        8027, 
        8027, 
        8029, 
        8029, 
        8031, 
        8061, 
        8064, 
        8116, 
        8118, 
        8124, 
        8126, 
        8126, 
        8130, 
        8132, 
        8134, 
        8140, 
        8144, 
        8147, 
        8150, 
        8155, 
        8160, 
        8172, 
        8178, 
        8180, 
        8182, 
        8188, 
        8305, 
        8305, 
        8319, 
        8319, 
        8336, 
        8348, 
        8450, 
        8450, 
        8455, 
        8455, 
        8458, 
        8467, 
        8469, 
        8469, 
        8473, 
        8477, 
        8484, 
        8484, 
        8486, 
        8486, 
        8488, 
        8488, 
        8490, 
        8493, 
        8495, 
        8505, 
        8508, 
        8511, 
        8517, 
        8521, 
        8526, 
        8526, 
        8544, 
        8584, 
        11264, 
        11310, 
        11312, 
        11358, 
        11360, 
        11492, 
        11499, 
        11502, 
        11506, 
        11507, 
        11520, 
        11557, 
        11559, 
        11559, 
        11565, 
        11565, 
        11568, 
        11623, 
        11631, 
        11631, 
        11648, 
        11670, 
        11680, 
        11686, 
        11688, 
        11694, 
        11696, 
        11702, 
        11704, 
        11710, 
        11712, 
        11718, 
        11720, 
        11726, 
        11728, 
        11734, 
        11736, 
        11742, 
        11823, 
        11823, 
        12293, 
        12295, 
        12321, 
        12329, 
        12337, 
        12341, 
        12344, 
        12348, 
        12353, 
        12438, 
        12445, 
        12447, 
        12449, 
        12538, 
        12540, 
        12543, 
        12549, 
        12589, 
        12593, 
        12686, 
        12704, 
        12730, 
        12784, 
        12799, 
        13312, 
        13312, 
        19893, 
        19893, 
        19968, 
        19968, 
        40908, 
        40908, 
        40960, 
        42124, 
        42192, 
        42237, 
        42240, 
        42508, 
        42512, 
        42527, 
        42538, 
        42539, 
        42560, 
        42606, 
        42623, 
        42647, 
        42656, 
        42735, 
        42775, 
        42783, 
        42786, 
        42888, 
        42891, 
        42894, 
        42896, 
        42899, 
        42912, 
        42922, 
        43000, 
        43009, 
        43011, 
        43013, 
        43015, 
        43018, 
        43020, 
        43042, 
        43072, 
        43123, 
        43138, 
        43187, 
        43250, 
        43255, 
        43259, 
        43259, 
        43274, 
        43301, 
        43312, 
        43334, 
        43360, 
        43388, 
        43396, 
        43442, 
        43471, 
        43471, 
        43520, 
        43560, 
        43584, 
        43586, 
        43588, 
        43595, 
        43616, 
        43638, 
        43642, 
        43642, 
        43648, 
        43695, 
        43697, 
        43697, 
        43701, 
        43702, 
        43705, 
        43709, 
        43712, 
        43712, 
        43714, 
        43714, 
        43739, 
        43741, 
        43744, 
        43754, 
        43762, 
        43764, 
        43777, 
        43782, 
        43785, 
        43790, 
        43793, 
        43798, 
        43808, 
        43814, 
        43816, 
        43822, 
        43968, 
        44002, 
        44032, 
        44032, 
        55203, 
        55203, 
        55216, 
        55238, 
        55243, 
        55291, 
        63744, 
        64109, 
        64112, 
        64217, 
        64256, 
        64262, 
        64275, 
        64279, 
        64285, 
        64285, 
        64287, 
        64296, 
        64298, 
        64310, 
        64312, 
        64316, 
        64318, 
        64318, 
        64320, 
        64321, 
        64323, 
        64324, 
        64326, 
        64433, 
        64467, 
        64829, 
        64848, 
        64911, 
        64914, 
        64967, 
        65008, 
        65019, 
        65136, 
        65140, 
        65142, 
        65276, 
        65313, 
        65338, 
        65345, 
        65370, 
        65382, 
        65470, 
        65474, 
        65479, 
        65482, 
        65487, 
        65490, 
        65495, 
        65498, 
        65500
    ];
    var unicodeES5IdCont = [
        768, 
        879, 
        1155, 
        1159, 
        1425, 
        1469, 
        1471, 
        1471, 
        1473, 
        1474, 
        1476, 
        1477, 
        1479, 
        1479, 
        1552, 
        1562, 
        1611, 
        1641, 
        1648, 
        1648, 
        1750, 
        1756, 
        1759, 
        1764, 
        1767, 
        1768, 
        1770, 
        1773, 
        1776, 
        1785, 
        1809, 
        1809, 
        1840, 
        1866, 
        1958, 
        1968, 
        1984, 
        1993, 
        2027, 
        2035, 
        2070, 
        2073, 
        2075, 
        2083, 
        2085, 
        2087, 
        2089, 
        2093, 
        2137, 
        2139, 
        2276, 
        2302, 
        2304, 
        2307, 
        2362, 
        2364, 
        2366, 
        2383, 
        2385, 
        2391, 
        2402, 
        2403, 
        2406, 
        2415, 
        2433, 
        2435, 
        2492, 
        2492, 
        2494, 
        2500, 
        2503, 
        2504, 
        2507, 
        2509, 
        2519, 
        2519, 
        2530, 
        2531, 
        2534, 
        2543, 
        2561, 
        2563, 
        2620, 
        2620, 
        2622, 
        2626, 
        2631, 
        2632, 
        2635, 
        2637, 
        2641, 
        2641, 
        2662, 
        2673, 
        2677, 
        2677, 
        2689, 
        2691, 
        2748, 
        2748, 
        2750, 
        2757, 
        2759, 
        2761, 
        2763, 
        2765, 
        2786, 
        2787, 
        2790, 
        2799, 
        2817, 
        2819, 
        2876, 
        2876, 
        2878, 
        2884, 
        2887, 
        2888, 
        2891, 
        2893, 
        2902, 
        2903, 
        2914, 
        2915, 
        2918, 
        2927, 
        2946, 
        2946, 
        3006, 
        3010, 
        3014, 
        3016, 
        3018, 
        3021, 
        3031, 
        3031, 
        3046, 
        3055, 
        3073, 
        3075, 
        3134, 
        3140, 
        3142, 
        3144, 
        3146, 
        3149, 
        3157, 
        3158, 
        3170, 
        3171, 
        3174, 
        3183, 
        3202, 
        3203, 
        3260, 
        3260, 
        3262, 
        3268, 
        3270, 
        3272, 
        3274, 
        3277, 
        3285, 
        3286, 
        3298, 
        3299, 
        3302, 
        3311, 
        3330, 
        3331, 
        3390, 
        3396, 
        3398, 
        3400, 
        3402, 
        3405, 
        3415, 
        3415, 
        3426, 
        3427, 
        3430, 
        3439, 
        3458, 
        3459, 
        3530, 
        3530, 
        3535, 
        3540, 
        3542, 
        3542, 
        3544, 
        3551, 
        3570, 
        3571, 
        3633, 
        3633, 
        3636, 
        3642, 
        3655, 
        3662, 
        3664, 
        3673, 
        3761, 
        3761, 
        3764, 
        3769, 
        3771, 
        3772, 
        3784, 
        3789, 
        3792, 
        3801, 
        3864, 
        3865, 
        3872, 
        3881, 
        3893, 
        3893, 
        3895, 
        3895, 
        3897, 
        3897, 
        3902, 
        3903, 
        3953, 
        3972, 
        3974, 
        3975, 
        3981, 
        3991, 
        3993, 
        4028, 
        4038, 
        4038, 
        4139, 
        4158, 
        4160, 
        4169, 
        4182, 
        4185, 
        4190, 
        4192, 
        4194, 
        4196, 
        4199, 
        4205, 
        4209, 
        4212, 
        4226, 
        4237, 
        4239, 
        4253, 
        4957, 
        4959, 
        5906, 
        5908, 
        5938, 
        5940, 
        5970, 
        5971, 
        6002, 
        6003, 
        6068, 
        6099, 
        6109, 
        6109, 
        6112, 
        6121, 
        6155, 
        6157, 
        6160, 
        6169, 
        6313, 
        6313, 
        6432, 
        6443, 
        6448, 
        6459, 
        6470, 
        6479, 
        6576, 
        6592, 
        6600, 
        6601, 
        6608, 
        6617, 
        6679, 
        6683, 
        6741, 
        6750, 
        6752, 
        6780, 
        6783, 
        6793, 
        6800, 
        6809, 
        6912, 
        6916, 
        6964, 
        6980, 
        6992, 
        7001, 
        7019, 
        7027, 
        7040, 
        7042, 
        7073, 
        7085, 
        7088, 
        7097, 
        7142, 
        7155, 
        7204, 
        7223, 
        7232, 
        7241, 
        7248, 
        7257, 
        7376, 
        7378, 
        7380, 
        7400, 
        7405, 
        7405, 
        7410, 
        7412, 
        7616, 
        7654, 
        7676, 
        7679, 
        8204, 
        8205, 
        8255, 
        8256, 
        8276, 
        8276, 
        8400, 
        8412, 
        8417, 
        8417, 
        8421, 
        8432, 
        11503, 
        11505, 
        11647, 
        11647, 
        11744, 
        11775, 
        12330, 
        12335, 
        12441, 
        12442, 
        42528, 
        42537, 
        42607, 
        42607, 
        42612, 
        42621, 
        42655, 
        42655, 
        42736, 
        42737, 
        43010, 
        43010, 
        43014, 
        43014, 
        43019, 
        43019, 
        43043, 
        43047, 
        43136, 
        43137, 
        43188, 
        43204, 
        43216, 
        43225, 
        43232, 
        43249, 
        43264, 
        43273, 
        43302, 
        43309, 
        43335, 
        43347, 
        43392, 
        43395, 
        43443, 
        43456, 
        43472, 
        43481, 
        43561, 
        43574, 
        43587, 
        43587, 
        43596, 
        43597, 
        43600, 
        43609, 
        43643, 
        43643, 
        43696, 
        43696, 
        43698, 
        43700, 
        43703, 
        43704, 
        43710, 
        43711, 
        43713, 
        43713, 
        43755, 
        43759, 
        43765, 
        43766, 
        44003, 
        44010, 
        44012, 
        44013, 
        44016, 
        44025, 
        64286, 
        64286, 
        65024, 
        65039, 
        65056, 
        65062, 
        65075, 
        65076, 
        65101, 
        65103, 
        65296, 
        65305, 
        65343, 
        65343
    ];
    function LexLookUpUnicodeMap(code, map) {
        var lo = 0;
        var hi = map.length;
        var mid;
        while(lo + 1 < hi) {
            mid = lo + (hi - lo) / 2;
            mid -= mid % 2;
            if(map[mid] <= code && code <= map[mid + 1]) {
                return true;
            }
            if(code < map[mid]) {
                hi = mid;
            } else {
                lo = mid + 2;
            }
        }
        return false;
    }
    TypeScript.LexLookUpUnicodeMap = LexLookUpUnicodeMap;
    function LexIsUnicodeDigit(code) {
        if(TypeScript.codeGenTarget == 0 /* ES3 */ ) {
            return LexLookUpUnicodeMap(code, unicodeES3IdCont);
        } else {
            return LexLookUpUnicodeMap(code, unicodeES5IdCont);
        }
    }
    TypeScript.LexIsUnicodeDigit = LexIsUnicodeDigit;
    function LexIsUnicodeIdStart(code) {
        if(TypeScript.codeGenTarget == 0 /* ES3 */ ) {
            return LexLookUpUnicodeMap(code, unicodeES3IdStart);
        } else {
            return LexLookUpUnicodeMap(code, unicodeES5IdStart);
        }
    }
    TypeScript.LexIsUnicodeIdStart = LexIsUnicodeIdStart;
    function LexInitialize() {
        TypeScript.initializeStaticTokens();
        autoToken[TypeScript.LexCodeLPR] = TypeScript.staticTokens[55 /* OpenParen */ ];
        autoToken[TypeScript.LexCodeRPR] = TypeScript.staticTokens[56 /* CloseParen */ ];
        autoToken[TypeScript.LexCodeCMA] = TypeScript.staticTokens[61 /* Comma */ ];
        autoToken[TypeScript.LexCodeSMC] = TypeScript.staticTokens[54 /* Semicolon */ ];
        autoToken[TypeScript.LexCodeLBR] = TypeScript.staticTokens[57 /* OpenBracket */ ];
        autoToken[TypeScript.LexCodeRBR] = TypeScript.staticTokens[58 /* CloseBracket */ ];
        autoToken[TypeScript.LexCodeTIL] = TypeScript.staticTokens[97 /* Tilde */ ];
        autoToken[TypeScript.LexCodeQUE] = TypeScript.staticTokens[74 /* Question */ ];
        autoToken[TypeScript.LexCodeLC] = TypeScript.staticTokens[59 /* OpenBrace */ ];
        autoToken[TypeScript.LexCodeRC] = TypeScript.staticTokens[60 /* CloseBrace */ ];
        autoToken[TypeScript.LexCodeCOL] = TypeScript.staticTokens[75 /* Colon */ ];
        TypeScript.LexKeywordTable = new TypeScript.StringHashTable();
        for(var i in (TypeScript.TokenID)._map) {
            if((i) <= TypeScript.TokenID.LimKeyword) {
                TypeScript.LexKeywordTable.add((TypeScript.TokenID)._map[i].toLowerCase(), i);
            }
        }
        for(var j = 0; j < TypeScript.LexCodeASCIIChars; j++) {
            if(LexIsIdentifierStartChar(j)) {
                lexIdStartTable[j] = true;
            } else {
                lexIdStartTable[j] = false;
            }
        }
    }
    TypeScript.LexInitialize = LexInitialize;
    function LexAdjustIndent(code, indentAmt) {
        if((code == TypeScript.LexCodeLBR) || (code == TypeScript.LexCodeLC) || (code == TypeScript.LexCodeLPR)) {
            return indentAmt + 1;
        } else {
            if((code == TypeScript.LexCodeRBR) || (code == TypeScript.LexCodeRC) || (code == TypeScript.LexCodeRPR)) {
                return indentAmt - 1;
            } else {
                return indentAmt;
            }
        }
    }
    TypeScript.LexAdjustIndent = LexAdjustIndent;
    function LexIsIdentifierStartChar(code) {
        return (((code >= 97) && (code <= 122)) || ((code >= 65) && (code <= 90)) || (code == TypeScript.LexCodeDollar) || (code == TypeScript.LexCodeUnderscore));
    }
    TypeScript.LexIsIdentifierStartChar = LexIsIdentifierStartChar;
    function LexIsDigit(code) {
        return ((code >= 48) && (code <= 57));
    }
    TypeScript.LexIsDigit = LexIsDigit;
    function LexIsIdentifierChar(code) {
        return lexIdStartTable[code] || LexIsDigit(code);
    }
    TypeScript.LexIsIdentifierChar = LexIsIdentifierChar;
    function LexMatchingOpen(code) {
        if(code == TypeScript.LexCodeRBR) {
            return TypeScript.LexCodeLBR;
        } else {
            if(code == TypeScript.LexCodeRC) {
                return TypeScript.LexCodeLC;
            } else {
                if(code == TypeScript.LexCodeRPR) {
                    return TypeScript.LexCodeLPR;
                } else {
                    return 0;
                }
            }
        }
    }
    TypeScript.LexMatchingOpen = LexMatchingOpen;
    (function (NumberScanState) {
        NumberScanState._map = [];
        NumberScanState._map[0] = "Start";
        NumberScanState.Start = 0;
        NumberScanState._map[1] = "InFraction";
        NumberScanState.InFraction = 1;
        NumberScanState._map[2] = "InEmptyFraction";
        NumberScanState.InEmptyFraction = 2;
        NumberScanState._map[3] = "InExponent";
        NumberScanState.InExponent = 3;
    })(TypeScript.NumberScanState || (TypeScript.NumberScanState = {}));
    var NumberScanState = TypeScript.NumberScanState;
    (function (LexState) {
        LexState._map = [];
        LexState._map[0] = "Start";
        LexState.Start = 0;
        LexState._map[1] = "InMultilineComment";
        LexState.InMultilineComment = 1;
    })(TypeScript.LexState || (TypeScript.LexState = {}));
    var LexState = TypeScript.LexState;
    (function (LexMode) {
        LexMode._map = [];
        LexMode._map[0] = "Line";
        LexMode.Line = 0;
        LexMode._map[1] = "File";
        LexMode.File = 1;
    })(TypeScript.LexMode || (TypeScript.LexMode = {}));
    var LexMode = TypeScript.LexMode;
    (function (CommentStyle) {
        CommentStyle._map = [];
        CommentStyle._map[0] = "Line";
        CommentStyle.Line = 0;
        CommentStyle._map[1] = "Block";
        CommentStyle.Block = 1;
    })(TypeScript.CommentStyle || (TypeScript.CommentStyle = {}));
    var CommentStyle = TypeScript.CommentStyle;
    var StringSourceText = (function () {
        function StringSourceText(text) {
            this.text = text;
        }
        StringSourceText.prototype.getText = function (start, end) {
            return this.text.substring(start, end);
        };
        StringSourceText.prototype.getLength = function () {
            return this.text.length;
        };
        return StringSourceText;
    })();
    TypeScript.StringSourceText = StringSourceText;    
    var SourceTextSegment = (function () {
        function SourceTextSegment(segmentStart, segmentEnd, segment) {
            this.segmentStart = segmentStart;
            this.segmentEnd = segmentEnd;
            this.segment = segment;
        }
        SourceTextSegment.prototype.charCodeAt = function (index) {
            return this.segment.charCodeAt(index - this.segmentStart);
        };
        SourceTextSegment.prototype.substring = function (start, end) {
            return this.segment.substring(start - this.segmentStart, end - this.segmentStart);
        };
        return SourceTextSegment;
    })();
    TypeScript.SourceTextSegment = SourceTextSegment;    
    var AggerateSourceTextSegment = (function () {
        function AggerateSourceTextSegment(seg1, seg2) {
            this.seg1 = seg1;
            this.seg2 = seg2;
        }
        AggerateSourceTextSegment.prototype.charCodeAt = function (index) {
            if(this.seg1.segmentStart <= index && index < this.seg1.segmentEnd) {
                return this.seg1.segment.charCodeAt(index - this.seg1.segmentStart);
            }
            return this.seg2.segment.charCodeAt(index - this.seg2.segmentStart);
        };
        AggerateSourceTextSegment.prototype.substring = function (start, end) {
            if(this.seg1.segmentStart <= start && end <= this.seg1.segmentEnd) {
                return this.seg1.segment.substring(start - this.seg1.segmentStart, end - this.seg1.segmentStart);
            }
            return this.seg2.segment.substring(start - this.seg2.segmentStart) + this.seg1.segment.substring(0, end - this.seg1.segmentStart);
        };
        return AggerateSourceTextSegment;
    })();
    TypeScript.AggerateSourceTextSegment = AggerateSourceTextSegment;    
    var ScannerTextStream = (function () {
        function ScannerTextStream(sourceText) {
            this.sourceText = sourceText;
            this.agg = new AggerateSourceTextSegment(ScannerTextStream.emptySegment, ScannerTextStream.emptySegment);
            this.len = this.sourceText.getLength();
        }
        ScannerTextStream.emptySegment = new SourceTextSegment(0, 0, "");
        ScannerTextStream.prototype.max = function (a, b) {
            return a >= b ? a : b;
        };
        ScannerTextStream.prototype.min = function (a, b) {
            return a <= b ? a : b;
        };
        ScannerTextStream.prototype.fetchSegment = function (start, end) {
            if(this.agg.seg1.segmentStart <= start && end <= this.agg.seg1.segmentEnd) {
                return this.agg.seg1;
            }
            if(this.agg.seg2.segmentStart <= start && end <= this.agg.seg1.segmentEnd) {
                return this.agg;
            }
            var prev = this.agg.seg1;
            var s = prev.segmentEnd;
            var e = TypeScript.max(s + 512, end);
            e = TypeScript.min(e, this.len);
            var src = this.sourceText.getText(s, e);
            var newSeg = new SourceTextSegment(s, e, src);
            this.agg.seg2 = prev;
            this.agg.seg1 = newSeg;
            return this.agg;
        };
        ScannerTextStream.prototype.charCodeAt = function (index) {
            return this.fetchSegment(index, index + 1).charCodeAt(index);
        };
        ScannerTextStream.prototype.substring = function (start, end) {
            return this.fetchSegment(start, end).substring(start, end);
        };
        return ScannerTextStream;
    })();
    TypeScript.ScannerTextStream = ScannerTextStream;    
    var SavedTokens = (function () {
        function SavedTokens() {
            this.prevToken = null;
            this.curSavedToken = null;
            this.prevSavedToken = null;
            this.prevToken = null;
            this.currentToken = 0;
            this.tokens = new Array();
            this.seenUnicodeChar = false;
            this.seenUnicodeCharInComment = false;
            this.prevLine = 1;
            this.line = 1;
            this.col = 0;
            this.lexState = 0 /* Start */ ;
            this.commentStack = new Array();
            this.lineMap = [];
        }
        SavedTokens.prototype.previousToken = function () {
            return this.prevToken;
        };
        SavedTokens.prototype.close = function () {
            this.currentToken = 0;
        };
        SavedTokens.prototype.addToken = function (tok, scanner) {
            this.tokens[this.currentToken++] = new TypeScript.SavedToken(tok, scanner.startPos, scanner.pos);
        };
        SavedTokens.prototype.scan = function () {
            this.startLine = this.line;
            this.startPos = this.col;
            if(this.currentTokenIndex == this.currentTokens.length) {
                if(this.line < this.lineMap.length) {
                    this.line++;
                    this.col = 0;
                    this.currentTokenIndex = 0;
                    this.currentTokens = this.tokensByLine[this.line];
                } else {
                    return TypeScript.staticTokens[104 /* EndOfFile */ ];
                }
            }
            if(this.currentTokenIndex < this.currentTokens.length) {
                this.prevToken = this.curSavedToken.tok;
                this.prevSavedToken = this.curSavedToken;
                this.curSavedToken = this.currentTokens[this.currentTokenIndex++];
                var curToken = this.curSavedToken.tok;
                this.pos = this.curSavedToken.limChar;
                this.col += (this.curSavedToken.limChar - this.curSavedToken.minChar);
                this.startPos = this.curSavedToken.minChar;
                this.prevLine = this.line;
                return curToken;
            } else {
                return TypeScript.staticTokens[104 /* EndOfFile */ ];
            }
        };
        SavedTokens.prototype.syncToTok = function (offset) {
            this.line = getLineNumberFromPosition(this.lineMap, offset);
            this.currentTokenIndex = 0;
            var tmpCol = offset - this.lineMap[this.line];
            while((this.lexStateByLine[this.line] == 1 /* InMultilineComment */ ) && (this.line > 0)) {
                this.line--;
                tmpCol = 0;
            }
            var lenMin1 = this.lineMap.length - 1;
            this.currentTokens = this.tokensByLine[this.line];
            while((this.currentTokens.length == 0) && (this.line < lenMin1)) {
                this.line++;
                this.currentTokens = this.tokensByLine[this.line];
                tmpCol = 0;
            }
            if(this.line <= lenMin1) {
                while((this.currentTokenIndex < this.currentTokens.length) && (tmpCol > this.currentTokens[this.currentTokenIndex].limChar)) {
                    this.currentTokenIndex++;
                }
                if(this.currentTokenIndex < this.currentTokens.length) {
                    this.col = this.currentTokens[this.currentTokenIndex].minChar;
                    return this.col + this.lineMap[this.line];
                }
            }
            return -1;
        };
        SavedTokens.prototype.lastTokenLimChar = function () {
            if(this.prevSavedToken !== null) {
                return this.prevSavedToken.limChar;
            } else {
                return 0;
            }
        };
        SavedTokens.prototype.lastTokenHadNewline = function () {
            return this.prevLine != this.startLine;
        };
        SavedTokens.prototype.pushComment = function (comment) {
            this.commentStack.push(comment);
        };
        SavedTokens.prototype.getComments = function () {
            var stack = this.commentStack;
            this.commentStack = [];
            return stack;
        };
        SavedTokens.prototype.getCommentsForLine = function (line) {
            var comments = null;
            while((this.commentStack.length > 0) && (this.commentStack[0].line == line)) {
                if(comments == null) {
                    comments = [
                        this.commentStack.shift()
                    ];
                } else {
                    comments = comments.concat([
                        this.commentStack.shift()
                    ]);
                }
            }
            return comments;
        };
        SavedTokens.prototype.resetComments = function () {
            this.commentStack = [];
        };
        SavedTokens.prototype.setSourceText = function (newSrc, textMode) {
        };
        SavedTokens.prototype.setErrorHandler = function (reportError) {
        };
        SavedTokens.prototype.getLookAheadToken = function () {
            throw new Error("Invalid operation.");
        };
        return SavedTokens;
    })();
    TypeScript.SavedTokens = SavedTokens;    
    var Scanner = (function () {
        function Scanner() {
            this.prevLine = 1;
            this.line = 1;
            this.col = 0;
            this.pos = 0;
            this.startPos = 0;
            this.len = 0;
            this.lineMap = [];
            this.ch = TypeScript.LexEOF;
            this.lexState = 0 /* Start */ ;
            this.mode = 1 /* File */ ;
            this.scanComments = true;
            this.interveningWhitespace = false;
            this.interveningWhitespacePos = 0;
            this.leftCurlyCount = 0;
            this.rightCurlyCount = 0;
            this.commentStack = new Array();
            this.saveScan = null;
            this.seenUnicodeChar = false;
            this.seenUnicodeCharInComment = false;
            this.prevTok = TypeScript.staticTokens[104 /* EndOfFile */ ];
            this.startCol = this.col;
            this.startLine = this.line;
            this.lineMap[1] = 0;
            if(!TypeScript.LexKeywordTable) {
                LexInitialize();
            }
        }
        Scanner.prototype.previousToken = function () {
            return this.prevTok;
        };
        Scanner.prototype.setSourceText = function (newSrc, textMode) {
            this.mode = textMode;
            this.scanComments = (this.mode === 0 /* Line */ );
            this.pos = 0;
            this.interveningWhitespacePos = 0;
            this.startPos = 0;
            this.line = 1;
            this.col = 0;
            this.startCol = this.col;
            this.startLine = this.line;
            this.len = 0;
            this.src = newSrc.getText(0, newSrc.getLength());
            this.len = this.src.length;
            this.lineMap = [];
            this.lineMap[1] = 0;
            this.commentStack = [];
            this.leftCurlyCount = 0;
            this.rightCurlyCount = 0;
            this.seenUnicodeChar = false;
            this.seenUnicodeCharInComment = false;
        };
        Scanner.prototype.setErrorHandler = function (reportError) {
            this.reportError = reportError;
        };
        Scanner.prototype.setSaveScan = function (savedTokens) {
            this.saveScan = savedTokens;
        };
        Scanner.prototype.setText = function (newSrc, textMode) {
            this.setSourceText(new StringSourceText(newSrc), textMode);
        };
        Scanner.prototype.setScanComments = function (value) {
            this.scanComments = value;
        };
        Scanner.prototype.getLexState = function () {
            return this.lexState;
        };
        Scanner.prototype.scanLine = function (line, initialState) {
            this.lexState = initialState;
            var result = new Array();
            this.setText(line, 0 /* Line */ );
            var t = this.scan();
            while(t.tokenId != 104 /* EndOfFile */ ) {
                result[result.length] = t;
                t = this.scan();
            }
            return result;
        };
        Scanner.prototype.tokenStart = function () {
            this.startPos = this.pos;
            this.startLine = this.line;
            this.startCol = this.col;
            this.interveningWhitespace = false;
        };
        Scanner.prototype.peekChar = function () {
            if(this.pos < this.len) {
                return this.src.charCodeAt(this.pos);
            } else {
                return TypeScript.LexEOF;
            }
        };
        Scanner.prototype.peekCharAt = function (index) {
            if(index < this.len) {
                return this.src.charCodeAt(index);
            } else {
                return TypeScript.LexEOF;
            }
        };
        Scanner.prototype.IsHexDigit = function (c) {
            return ((c >= TypeScript.LexCode_0) && (c <= TypeScript.LexCode_9)) || ((c >= TypeScript.LexCode_A) && (c <= TypeScript.LexCode_F)) || ((c >= TypeScript.LexCode_a) && (c <= TypeScript.LexCode_f));
        };
        Scanner.prototype.IsOctalDigit = function (c) {
            return ((c >= TypeScript.LexCode_0) && (c <= TypeScript.LexCode_7)) || ((c >= TypeScript.LexCode_a) && (c <= TypeScript.LexCode_f));
        };
        Scanner.prototype.scanHexDigits = function () {
            var atLeastOneDigit = false;
            for(; ; ) {
                if(this.IsHexDigit(this.ch)) {
                    this.nextChar();
                    atLeastOneDigit = true;
                } else {
                    if(atLeastOneDigit) {
                        return new TypeScript.NumberLiteralToken(parseInt(this.src.substring(this.startPos, this.pos)));
                    } else {
                        return null;
                    }
                }
            }
        };
        Scanner.prototype.scanOctalDigits = function () {
            var atLeastOneDigit = false;
            for(; ; ) {
                if(this.IsOctalDigit(this.ch)) {
                    this.nextChar();
                    atLeastOneDigit = true;
                } else {
                    if(atLeastOneDigit) {
                        return new TypeScript.NumberLiteralToken(parseInt(this.src.substring(this.startPos, this.pos)));
                    } else {
                        return null;
                    }
                }
            }
        };
        Scanner.prototype.scanDecimalNumber = function (state) {
            var atLeastOneDigit = false;
            var svPos = this.pos;
            var svCol = this.col;
            for(; ; ) {
                if(LexIsDigit(this.ch)) {
                    atLeastOneDigit = true;
                    if(this.ch != TypeScript.LexCode_0 && state == 2 /* InEmptyFraction */ ) {
                        state = 1 /* InFraction */ ;
                    }
                    this.nextChar();
                } else {
                    if(this.ch == TypeScript.LexCodeDOT) {
                        if(state == 0 /* Start */ ) {
                            this.nextChar();
                            state = 2 /* InEmptyFraction */ ;
                        } else {
                            if(atLeastOneDigit) {
                                return new TypeScript.NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == 2 /* InEmptyFraction */ );
                            } else {
                                this.pos = svPos;
                                this.col = svCol;
                                return null;
                            }
                        }
                    } else {
                        if((this.ch == TypeScript.LexCode_e) || (this.ch == TypeScript.LexCode_E)) {
                            if(state == 0 /* Start */ ) {
                                if(atLeastOneDigit) {
                                    atLeastOneDigit = false;
                                    this.nextChar();
                                    state = 3 /* InExponent */ ;
                                } else {
                                    this.pos = svPos;
                                    this.col = svCol;
                                    return null;
                                }
                            } else {
                                if(state == 1 /* InFraction */  || state == 2 /* InEmptyFraction */ ) {
                                    this.nextChar();
                                    state = 3 /* InExponent */ ;
                                    atLeastOneDigit = false;
                                } else {
                                    if(atLeastOneDigit) {
                                        return new TypeScript.NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)));
                                    } else {
                                        this.pos = svPos;
                                        this.col = svCol;
                                        return null;
                                    }
                                }
                            }
                        } else {
                            if((this.ch == TypeScript.LexCodePLS) || (this.ch == TypeScript.LexCodeMIN)) {
                                if(state == 3 /* InExponent */ ) {
                                    if(!atLeastOneDigit) {
                                        this.nextChar();
                                    } else {
                                        this.pos = svPos;
                                        this.col = svCol;
                                        return null;
                                    }
                                } else {
                                    if(state == 2 /* InEmptyFraction */  || state == 1 /* InFraction */ ) {
                                        return new TypeScript.NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == 2 /* InEmptyFraction */ );
                                    } else {
                                        if(!atLeastOneDigit) {
                                            this.pos = svPos;
                                            this.col = svCol;
                                            return null;
                                        } else {
                                            return new TypeScript.NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)));
                                        }
                                    }
                                }
                            } else {
                                if(!atLeastOneDigit) {
                                    this.pos = svPos;
                                    this.col = svCol;
                                    return null;
                                } else {
                                    return new TypeScript.NumberLiteralToken(parseFloat(this.src.substring(this.startPos, this.pos)), state == 2 /* InEmptyFraction */ );
                                }
                            }
                        }
                    }
                }
            }
        };
        Scanner.prototype.scanNumber = function () {
            if(this.peekChar() == TypeScript.LexCode_0) {
                switch(this.peekCharAt(this.pos + 1)) {
                    case TypeScript.LexCode_x:
                    case TypeScript.LexCode_X: {
                        this.advanceChar(2);
                        return this.scanHexDigits();

                    }
                    case TypeScript.LexCode_8:
                    case TypeScript.LexCode_9:
                    case TypeScript.LexCodeDOT: {
                        return this.scanDecimalNumber(0 /* Start */ );

                    }
                    default: {
                        return this.scanOctalDigits();

                    }
                }
            } else {
                return this.scanDecimalNumber(0 /* Start */ );
            }
        };
        Scanner.prototype.scanFraction = function () {
            return this.scanDecimalNumber(1 /* InFraction */ );
        };
        Scanner.prototype.newLine = function () {
            this.col = 0;
            if(this.mode == 1 /* File */ ) {
                this.line++;
                this.lineMap[this.line] = this.pos + 1;
            }
        };
        Scanner.prototype.finishMultilineComment = function () {
            var ch2;
            this.lexState = 1 /* InMultilineComment */ ;
            while(this.pos < this.len) {
                if(this.ch == TypeScript.LexCodeMUL) {
                    ch2 = this.peekCharAt(this.pos + 1);
                    if(ch2 == TypeScript.LexCodeSLH) {
                        this.advanceChar(2);
                        if(this.mode == 1 /* File */ ) {
                            this.tokenStart();
                        }
                        this.lexState = 0 /* Start */ ;
                        return true;
                    }
                } else {
                    if(this.ch == TypeScript.LexCodeNWL) {
                        this.newLine();
                        if(this.mode == 0 /* Line */ ) {
                            this.nextChar();
                            return false;
                        }
                    } else {
                        if(this.ch >= TypeScript.LexCodeASCIIChars) {
                            this.seenUnicodeCharInComment = true;
                        }
                    }
                }
                this.nextChar();
            }
            return false;
        };
        Scanner.prototype.pushComment = function (comment) {
            this.commentStack.push(comment);
        };
        Scanner.prototype.getComments = function () {
            var stack = this.commentStack;
            this.commentStack = [];
            return stack;
        };
        Scanner.prototype.getCommentsForLine = function (line) {
            var comments = null;
            while((this.commentStack.length > 0) && (this.commentStack[0].line == line)) {
                if(comments == null) {
                    comments = [
                        this.commentStack.shift()
                    ];
                } else {
                    comments = comments.concat([
                        this.commentStack.shift()
                    ]);
                }
            }
            return comments;
        };
        Scanner.prototype.resetComments = function () {
            this.commentStack = [];
        };
        Scanner.prototype.endsLine = function (c) {
            return (c == TypeScript.LexCodeNWL) || (c == TypeScript.LexCodeRET) || (c == 8232) || (c == 8233);
        };
        Scanner.prototype.finishSinglelineComment = function () {
            while(this.pos < this.len) {
                if(this.endsLine(this.ch)) {
                    break;
                }
                if(this.ch >= TypeScript.LexCodeASCIIChars) {
                    this.seenUnicodeCharInComment = true;
                }
                this.nextChar();
            }
            if(this.mode == 1 /* File */ ) {
                this.tokenStart();
            }
        };
        Scanner.prototype.tokenText = function () {
            return this.src.substring(this.startPos, this.pos);
        };
        Scanner.prototype.findClosingSLH = function () {
            var index = this.pos;
            var ch2 = this.src.charCodeAt(index);
            var prevCh = 0;
            var liveEsc = false;
            while(!this.endsLine(ch2) && (index < this.len)) {
                if((ch2 == TypeScript.LexCodeSLH) && (!liveEsc)) {
                    return index;
                }
                prevCh = ch2;
                index++;
                if(liveEsc) {
                    liveEsc = false;
                } else {
                    liveEsc = (prevCh == TypeScript.LexCodeBSL);
                }
                ch2 = this.src.charCodeAt(index);
            }
            return -1;
        };
        Scanner.prototype.speculateRegex = function () {
            if(TypeScript.noRegexTable[this.prevTok.tokenId] != undefined) {
                return null;
            }
            var svPos = this.pos;
            var svCol = this.col;
            var index = this.findClosingSLH();
            if(index > 0) {
                var pattern = this.src.substring(svPos, index);
                var flags = "";
                this.pos = index + 1;
                this.ch = this.peekChar();
                var flagsStart = this.pos;
                while((this.ch == TypeScript.LexCode_i) || (this.ch == TypeScript.LexCode_g) || (this.ch == TypeScript.LexCode_m)) {
                    this.nextChar();
                }
                if((this.pos - flagsStart) > 3) {
                    return null;
                } else {
                    flags = this.src.substring(flagsStart, this.pos);
                }
                var regex = undefined;
                try  {
                    regex = new RegExp(pattern, flags);
                } catch (regexException) {
                }
                if(regex) {
                    this.col = svCol + (this.pos - this.startPos);
                    return new TypeScript.RegularExpressionLiteralToken(regex);
                }
            }
            this.pos = svPos;
            this.col = svCol;
            return null;
        };
        Scanner.prototype.lastTokenHadNewline = function () {
            return this.prevLine != this.startLine;
        };
        Scanner.prototype.lastTokenLimChar = function () {
            return this.interveningWhitespace ? this.interveningWhitespacePos : this.startPos;
        };
        Scanner.prototype.advanceChar = function (amt) {
            this.pos += amt;
            this.col += amt;
            this.ch = this.peekChar();
        };
        Scanner.prototype.nextChar = function () {
            this.pos++;
            this.col++;
            this.ch = this.peekChar();
        };
        Scanner.prototype.getLookAheadToken = function () {
            var prevLine = this.prevLine;
            var line = this.line;
            var col = this.col;
            var pos = this.pos;
            var startPos = this.startPos;
            var startCol = this.startCol;
            var startLine = this.startLine;
            var ch = this.ch;
            var prevTok = this.prevTok;
            var lexState = this.lexState;
            var interveningWhitespace = this.interveningWhitespace;
            var interveningWhitespacePos = this.interveningWhitespacePos;
            var leftCurlyCount = this.leftCurlyCount;
            var rightCurlyCount = this.rightCurlyCount;
            var seenUnicodeChar = this.seenUnicodeChar;
            var seenUnicodeCharInComment = this.seenUnicodeCharInComment;
            var commentStackLength = this.commentStack.length;
            var lookAheadToken = this.scan();
            this.prevLine = prevLine;
            this.line = line;
            this.col = col;
            this.pos = pos;
            this.startPos = startPos;
            this.startCol = startCol;
            this.startLine = startLine;
            this.ch = ch;
            this.prevTok = prevTok;
            this.lexState = lexState;
            this.interveningWhitespace = interveningWhitespace;
            this.interveningWhitespacePos = interveningWhitespacePos;
            this.leftCurlyCount = leftCurlyCount;
            this.rightCurlyCount = rightCurlyCount;
            this.seenUnicodeChar = seenUnicodeChar;
            this.seenUnicodeCharInComment = seenUnicodeCharInComment;
            this.commentStack.length = commentStackLength;
            return lookAheadToken;
        };
        Scanner.prototype.scan = function () {
            if((this.lexState == 1 /* InMultilineComment */ ) && (this.scanComments)) {
                this.ch = this.peekChar();
                var commentLine = this.line;
                this.finishMultilineComment();
                if(this.startPos < this.pos) {
                    var commentText = this.src.substring(this.startPos, this.pos);
                    this.tokenStart();
                    return new TypeScript.CommentToken(111 /* Comment */ , commentText, true, this.startPos, commentLine, true);
                } else {
                    return TypeScript.staticTokens[104 /* EndOfFile */ ];
                }
            }
            this.prevLine = this.line;
            this.prevTok = this.innerScan();
            if(this.saveScan) {
                this.saveScan.addToken(this.prevTok, this);
            }
            return this.prevTok;
        };
        Scanner.prototype.isValidUnicodeIdentifierChar = function () {
            var valid = LexIsUnicodeIdStart(this.ch) || LexIsUnicodeDigit(this.ch);
            this.seenUnicodeChar = this.seenUnicodeChar || valid;
            return valid;
        };
        Scanner.prototype.scanIdentifier = function () {
            var hasEscape = false;
            var isFirstChar = (this.ch == TypeScript.LexCodeBSL);
            var hasUnicode = false;
            for(; ; ) {
                while(lexIdStartTable[this.ch] || LexIsDigit(this.ch) || (this.ch >= TypeScript.LexCodeASCIIChars && this.isValidUnicodeIdentifierChar())) {
                    this.nextChar();
                }
                if(this.ch == TypeScript.LexCodeBSL) {
                    this.nextChar();
                    if(this.ch == TypeScript.LexCode_u) {
                        this.nextChar();
                        for(var h = 0; h < 4; h++) {
                            if(this.IsHexDigit(this.ch)) {
                                this.nextChar();
                            } else {
                                this.reportScannerError("Invalid unicode escape sequence");
                                return TypeScript.staticTokens[103 /* Error */ ];
                            }
                        }
                        var hexChar = parseInt(this.src.substring(this.pos - 4, this.pos), 16);
                        if(lexIdStartTable[hexChar] || (!isFirstChar && LexIsDigit(hexChar)) || (hexChar >= TypeScript.LexCodeASCIIChars && (LexIsUnicodeIdStart(hexChar) || (!isFirstChar && LexIsUnicodeDigit(hexChar))))) {
                        } else {
                            this.reportScannerError("Invalid identifier character");
                            return TypeScript.staticTokens[103 /* Error */ ];
                        }
                        hasEscape = true;
                        isFirstChar = false;
                        continue;
                    }
                    this.reportScannerError("Invalid unicode escape sequence");
                    return TypeScript.staticTokens[103 /* Error */ ];
                }
                break;
            }
            var id;
            var text = this.src.substring(this.startPos, this.pos);
            if(!hasEscape && (id = TypeScript.LexKeywordTable.lookup(text)) != null) {
                return TypeScript.staticTokens[id];
            } else {
                return new TypeScript.IdentifierToken(text, hasEscape);
            }
        };
        Scanner.prototype.innerScan = function () {
            var rtok;
            this.tokenStart();
            this.ch = this.peekChar();
            start:
while(this.pos < this.len) {
                if(lexIdStartTable[this.ch] || this.ch == TypeScript.LexCodeBSL || (this.ch >= TypeScript.LexCodeASCIIChars && LexIsUnicodeIdStart(this.ch))) {
                    return this.scanIdentifier();
                } else {
                    if(this.ch == TypeScript.LexCodeSpace) {
                        if(!this.interveningWhitespace) {
                            this.interveningWhitespacePos = this.pos;
                        }
                        do {
                            this.nextChar();
                        }while(this.ch == TypeScript.LexCodeSpace)
                        if(this.mode == 0 /* Line */ ) {
                            var whitespaceText = this.src.substring(this.startPos, this.pos);
                            return new TypeScript.WhitespaceToken(110 /* Whitespace */ , whitespaceText);
                        } else {
                            this.tokenStart();
                            this.interveningWhitespace = true;
                        }
                    } else {
                        if(this.ch == TypeScript.LexCodeSLH) {
                            this.nextChar();
                            var commentText;
                            if(this.ch == TypeScript.LexCodeSLH) {
                                if(!this.interveningWhitespace) {
                                    this.interveningWhitespacePos = this.pos - 1;
                                }
                                var commentStartPos = this.pos - 1;
                                var commentStartLine = this.line;
                                this.finishSinglelineComment();
                                var commentText = this.src.substring(commentStartPos, this.pos);
                                var commentToken = new TypeScript.CommentToken(111 /* Comment */ , commentText, false, commentStartPos, commentStartLine, false);
                                if(this.scanComments) {
                                    this.startPos = commentStartPos;
                                    return commentToken;
                                } else {
                                    this.pushComment(commentToken);
                                }
                                this.interveningWhitespace = true;
                            } else {
                                if(this.ch == TypeScript.LexCodeMUL) {
                                    if(!this.interveningWhitespace) {
                                        this.interveningWhitespacePos = this.pos - 1;
                                    }
                                    var commentStartPos = this.pos - 1;
                                    var commentStartLine = this.line;
                                    this.nextChar();
                                    this.finishMultilineComment();
                                    var commentText = this.src.substring(commentStartPos, this.pos);
                                    var endsLine = this.peekChar() == TypeScript.LexCodeNWL || this.peekChar() == TypeScript.LexCodeRET;
                                    var commentToken = new TypeScript.CommentToken(111 /* Comment */ , commentText, true, commentStartPos, commentStartLine, endsLine);
                                    if(this.scanComments) {
                                        this.startPos = commentStartPos;
                                        return commentToken;
                                    } else {
                                        this.pushComment(commentToken);
                                    }
                                    this.interveningWhitespace = true;
                                } else {
                                    var regexTok = this.speculateRegex();
                                    if(regexTok) {
                                        return regexTok;
                                    } else {
                                        if(this.peekCharAt(this.pos) == TypeScript.LexCodeEQ) {
                                            this.nextChar();
                                            return TypeScript.staticTokens[66 /* SlashEquals */ ];
                                        } else {
                                            return TypeScript.staticTokens[95 /* Slash */ ];
                                        }
                                    }
                                }
                            }
                        } else {
                            if(this.ch == TypeScript.LexCodeSMC) {
                                this.nextChar();
                                return TypeScript.staticTokens[54 /* Semicolon */ ];
                            } else {
                                if((this.ch == TypeScript.LexCodeAPO) || (this.ch == TypeScript.LexCodeQUO)) {
                                    var endCode = this.ch;
                                    var prevCh = 0;
                                    var liveEsc = false;
                                    do {
                                        prevCh = this.ch;
                                        if(liveEsc) {
                                            liveEsc = false;
                                        } else {
                                            liveEsc = (prevCh == TypeScript.LexCodeBSL);
                                        }
                                        if(prevCh >= TypeScript.LexCodeASCIIChars) {
                                            this.seenUnicodeChar = true;
                                        }
                                        this.nextChar();
                                    }while((this.ch != TypeScript.LexEOF) && (liveEsc || (this.ch != endCode)))
                                    if(this.ch != TypeScript.LexEOF) {
                                        this.nextChar();
                                    }
                                    return new TypeScript.StringLiteralToken(this.src.substring(this.startPos, this.pos));
                                } else {
                                    if(autoToken[this.ch]) {
                                        var atok = autoToken[this.ch];
                                        if(atok.tokenId == 59 /* OpenBrace */ ) {
                                            this.leftCurlyCount++;
                                        } else {
                                            if(atok.tokenId == 60 /* CloseBrace */ ) {
                                                this.rightCurlyCount++;
                                            }
                                        }
                                        this.nextChar();
                                        return atok;
                                    } else {
                                        if((this.ch >= TypeScript.LexCode_0) && (this.ch <= TypeScript.LexCode_9)) {
                                            rtok = this.scanNumber();
                                            if(rtok) {
                                                return rtok;
                                            } else {
                                                this.nextChar();
                                                return TypeScript.staticTokens[103 /* Error */ ];
                                            }
                                        } else {
                                            switch(this.ch) {
                                                case TypeScript.LexCodeTAB:
                                                case TypeScript.LexCodeVTAB: {
                                                    if(!this.interveningWhitespace) {
                                                        this.interveningWhitespacePos = this.pos;
                                                    }
                                                    if(this.mode == 0 /* Line */ ) {
                                                        do {
                                                            this.nextChar();
                                                        }while((this.ch == TypeScript.LexCodeSpace) || (this.ch == 9))
                                                        var wsText = this.src.substring(this.startPos, this.pos);
                                                        return new TypeScript.WhitespaceToken(110 /* Whitespace */ , wsText);
                                                    } else {
                                                        this.interveningWhitespace = true;
                                                    }

                                                }
                                                case 255:
                                                case 254:
                                                case 239:
                                                case 187:
                                                case 191:
                                                case 8232:
                                                case 8233:
                                                case TypeScript.LexCodeNWL:
                                                case TypeScript.LexCodeRET: {
                                                    if(this.ch == TypeScript.LexCodeNWL) {
                                                        this.newLine();
                                                        if(this.mode == 0 /* Line */ ) {
                                                            return TypeScript.staticTokens[104 /* EndOfFile */ ];
                                                        }
                                                    }
                                                    if(!this.interveningWhitespace) {
                                                        this.interveningWhitespacePos = this.pos;
                                                    }
                                                    this.nextChar();
                                                    this.tokenStart();
                                                    this.interveningWhitespace = true;
                                                    break;

                                                }
                                                case TypeScript.LexCodeDOT: {
                                                    if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeDOT) {
                                                        if(this.peekCharAt(this.pos + 2) == TypeScript.LexCodeDOT) {
                                                            this.advanceChar(3);
                                                            return TypeScript.staticTokens[102 /* DotDotDot */ ];
                                                        } else {
                                                            this.nextChar();
                                                            return TypeScript.staticTokens[101 /* Dot */ ];
                                                        }
                                                    } else {
                                                        this.nextChar();
                                                        rtok = this.scanFraction();
                                                        if(rtok) {
                                                            return rtok;
                                                        } else {
                                                            return TypeScript.staticTokens[101 /* Dot */ ];
                                                        }
                                                    }
                                                }

                                                case TypeScript.LexCodeEQ: {
                                                    if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeEQ) {
                                                        if(this.peekCharAt(this.pos + 2) == TypeScript.LexCodeEQ) {
                                                            this.advanceChar(3);
                                                            return TypeScript.staticTokens[83 /* EqualsEqualsEquals */ ];
                                                        } else {
                                                            this.advanceChar(2);
                                                            return TypeScript.staticTokens[81 /* EqualsEquals */ ];
                                                        }
                                                    } else {
                                                        if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeGT) {
                                                            this.advanceChar(2);
                                                            return TypeScript.staticTokens[105 /* EqualsGreaterThan */ ];
                                                        } else {
                                                            this.nextChar();
                                                            return TypeScript.staticTokens[62 /* Equals */ ];
                                                        }
                                                    }

                                                }
                                                case TypeScript.LexCodeBNG: {
                                                    if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeEQ) {
                                                        if(this.peekCharAt(this.pos + 2) == TypeScript.LexCodeEQ) {
                                                            this.advanceChar(3);
                                                            return TypeScript.staticTokens[84 /* ExclamationEqualsEquals */ ];
                                                        } else {
                                                            this.advanceChar(2);
                                                            return TypeScript.staticTokens[82 /* ExclamationEquals */ ];
                                                        }
                                                    } else {
                                                        this.nextChar();
                                                        return TypeScript.staticTokens[98 /* Exclamation */ ];
                                                    }

                                                }
                                                case TypeScript.LexCodePLS: {
                                                    if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeEQ) {
                                                        this.advanceChar(2);
                                                        return TypeScript.staticTokens[63 /* PlusEquals */ ];
                                                    } else {
                                                        if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodePLS) {
                                                            this.advanceChar(2);
                                                            return TypeScript.staticTokens[99 /* PlusPlus */ ];
                                                        } else {
                                                            this.nextChar();
                                                            return TypeScript.staticTokens[92 /* Plus */ ];
                                                        }
                                                    }

                                                }
                                                case TypeScript.LexCodeMIN: {
                                                    if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeEQ) {
                                                        this.advanceChar(2);
                                                        return TypeScript.staticTokens[64 /* MinusEquals */ ];
                                                    } else {
                                                        if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeMIN) {
                                                            this.advanceChar(2);
                                                            return TypeScript.staticTokens[100 /* MinusMinus */ ];
                                                        } else {
                                                            this.nextChar();
                                                            return TypeScript.staticTokens[93 /* Minus */ ];
                                                        }
                                                    }

                                                }
                                                case TypeScript.LexCodeMUL: {
                                                    if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeEQ) {
                                                        this.advanceChar(2);
                                                        return TypeScript.staticTokens[65 /* AsteriskEquals */ ];
                                                    } else {
                                                        this.nextChar();
                                                        return TypeScript.staticTokens[94 /* Asterisk */ ];
                                                    }

                                                }
                                                case TypeScript.LexCodePCT: {
                                                    if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeEQ) {
                                                        this.advanceChar(2);
                                                        return TypeScript.staticTokens[67 /* PercentEquals */ ];
                                                    } else {
                                                        this.nextChar();
                                                        return TypeScript.staticTokens[96 /* Percent */ ];
                                                    }

                                                }
                                                case TypeScript.LexCodeLT: {
                                                    if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeLT) {
                                                        if(this.peekCharAt(this.pos + 2) == TypeScript.LexCodeEQ) {
                                                            this.advanceChar(3);
                                                            return TypeScript.staticTokens[71 /* LessThanLessThanEquals */ ];
                                                        } else {
                                                            this.advanceChar(2);
                                                            return TypeScript.staticTokens[89 /* LessThanLessThan */ ];
                                                        }
                                                    } else {
                                                        if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeEQ) {
                                                            this.advanceChar(2);
                                                            return TypeScript.staticTokens[86 /* LessThanEquals */ ];
                                                        } else {
                                                            this.nextChar();
                                                            return TypeScript.staticTokens[85 /* LessThan */ ];
                                                        }
                                                    }

                                                }
                                                case TypeScript.LexCodeGT: {
                                                    if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeGT) {
                                                        if(this.peekCharAt(this.pos + 2) == TypeScript.LexCodeEQ) {
                                                            this.advanceChar(3);
                                                            return TypeScript.staticTokens[72 /* GreaterThanGreaterThanEquals */ ];
                                                        } else {
                                                            if(this.peekCharAt(this.pos + 2) == TypeScript.LexCodeGT) {
                                                                if(this.peekCharAt(this.pos + 3) == TypeScript.LexCodeEQ) {
                                                                    this.advanceChar(4);
                                                                    return TypeScript.staticTokens[73 /* GreaterThanGreaterThanGreaterThanEquals */ ];
                                                                } else {
                                                                    this.advanceChar(3);
                                                                    return TypeScript.staticTokens[91 /* GreaterThanGreaterThanGreaterThan */ ];
                                                                }
                                                            } else {
                                                                this.advanceChar(2);
                                                                return TypeScript.staticTokens[90 /* GreaterThanGreaterThan */ ];
                                                            }
                                                        }
                                                    } else {
                                                        if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeEQ) {
                                                            this.advanceChar(2);
                                                            return TypeScript.staticTokens[88 /* GreaterThanEquals */ ];
                                                        } else {
                                                            this.nextChar();
                                                            return TypeScript.staticTokens[87 /* GreaterThan */ ];
                                                        }
                                                    }

                                                }
                                                case TypeScript.LexCodeXOR: {
                                                    if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeEQ) {
                                                        this.advanceChar(2);
                                                        return TypeScript.staticTokens[69 /* CaretEquals */ ];
                                                    } else {
                                                        this.nextChar();
                                                        return TypeScript.staticTokens[79 /* Caret */ ];
                                                    }

                                                }
                                                case TypeScript.LexCodeBAR: {
                                                    if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeEQ) {
                                                        this.advanceChar(2);
                                                        return TypeScript.staticTokens[70 /* BarEquals */ ];
                                                    } else {
                                                        if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeBAR) {
                                                            this.advanceChar(2);
                                                            return TypeScript.staticTokens[76 /* BarBar */ ];
                                                        } else {
                                                            this.nextChar();
                                                            return TypeScript.staticTokens[78 /* Bar */ ];
                                                        }
                                                    }

                                                }
                                                case TypeScript.LexCodeAMP: {
                                                    if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeEQ) {
                                                        this.advanceChar(2);
                                                        return TypeScript.staticTokens[68 /* AmpersandEquals */ ];
                                                    } else {
                                                        if(this.peekCharAt(this.pos + 1) == TypeScript.LexCodeAMP) {
                                                            this.advanceChar(2);
                                                            return TypeScript.staticTokens[77 /* AmpersandAmpersand */ ];
                                                        } else {
                                                            this.nextChar();
                                                            return TypeScript.staticTokens[80 /* And */ ];
                                                        }
                                                    }

                                                }
                                                default: {
                                                    this.reportScannerError("Invalid character");
                                                    this.nextChar();
                                                    continue start;

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return TypeScript.staticTokens[104 /* EndOfFile */ ];
        };
        Scanner.prototype.reportScannerError = function (message) {
            if(this.reportError) {
                this.reportError(message);
            }
        };
        return Scanner;
    })();
    TypeScript.Scanner = Scanner;    
    function convertTokToIDName(tok) {
        return convertTokToIDBase(tok, true, false);
    }
    TypeScript.convertTokToIDName = convertTokToIDName;
    function convertTokToID(tok, strictMode) {
        return convertTokToIDBase(tok, false, strictMode);
    }
    TypeScript.convertTokToID = convertTokToID;
    function convertTokToIDBase(tok, identifierName, strictMode) {
        if(tok.tokenId <= TypeScript.TokenID.LimKeyword) {
            var tokInfo = TypeScript.lookupToken(tok.tokenId);
            if(tokInfo != undefined) {
                var resFlags = 1 /* Javascript */  | 2 /* JavascriptFuture */ ;
                if(strictMode) {
                    resFlags |= 8 /* JavascriptFutureStrict */ ;
                }
                if(identifierName || !TypeScript.hasFlag(tokInfo.reservation, resFlags)) {
                    return true;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
    function getLineNumberFromPosition(lineMap, position) {
        if(position === -1) {
            return 0;
        }
        var min = 0;
        var max = lineMap.length - 1;
        while(min < max) {
            var med = (min + max) >> 1;
            if(position < lineMap[med]) {
                max = med - 1;
            } else {
                if(position < lineMap[med + 1]) {
                    min = max = med;
                } else {
                    min = med + 1;
                }
            }
        }
        return min;
    }
    TypeScript.getLineNumberFromPosition = getLineNumberFromPosition;
    function getSourceLineColFromMap(lineCol, minChar, lineMap) {
        var line = getLineNumberFromPosition(lineMap, minChar);
        if(line > 0) {
            lineCol.line = line;
            lineCol.col = (minChar - lineMap[line]);
        }
    }
    TypeScript.getSourceLineColFromMap = getSourceLineColFromMap;
    function getLineColumnFromPosition(script, position) {
        var result = {
            line: -1,
            col: -1
        };
        getSourceLineColFromMap(result, position, script.locationInfo.lineMap);
        if(result.col >= 0) {
            result.col++;
        }
        return result;
    }
    TypeScript.getLineColumnFromPosition = getLineColumnFromPosition;
    function getPositionFromLineColumn(script, line, column) {
        return script.locationInfo.lineMap[line] + (column - 1);
    }
    TypeScript.getPositionFromLineColumn = getPositionFromLineColumn;
    function isPrimitiveTypeToken(token) {
        switch(token.tokenId) {
            case 0 /* Any */ :
            case 1 /* Bool */ :
            case 32 /* Number */ :
            case 41 /* String */ : {
                return true;

            }
        }
        return false;
    }
    TypeScript.isPrimitiveTypeToken = isPrimitiveTypeToken;
    function isModifier(token) {
        switch(token.tokenId) {
            case 37 /* Public */ :
            case 35 /* Private */ :
            case 40 /* Static */ : {
                return true;

            }
        }
        return false;
    }
    TypeScript.isModifier = isModifier;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var AssignScopeContext = (function () {
        function AssignScopeContext(scopeChain, typeFlow, modDeclChain) {
            this.scopeChain = scopeChain;
            this.typeFlow = typeFlow;
            this.modDeclChain = modDeclChain;
        }
        return AssignScopeContext;
    })();
    TypeScript.AssignScopeContext = AssignScopeContext;    
    function pushAssignScope(scope, context, type, classType, fnc) {
        var chain = new TypeScript.ScopeChain(null, context.scopeChain, scope);
        chain.thisType = type;
        chain.classType = classType;
        chain.fnc = fnc;
        context.scopeChain = chain;
    }
    TypeScript.pushAssignScope = pushAssignScope;
    function popAssignScope(context) {
        context.scopeChain = context.scopeChain.previous;
    }
    TypeScript.popAssignScope = popAssignScope;
    function instanceCompare(a, b) {
        if(((a == null) || (!a.isInstanceProperty()))) {
            return b;
        } else {
            return a;
        }
    }
    TypeScript.instanceCompare = instanceCompare;
    function instanceFilterStop(s) {
        return s.isInstanceProperty();
    }
    TypeScript.instanceFilterStop = instanceFilterStop;
    var ScopeSearchFilter = (function () {
        function ScopeSearchFilter(select, stop) {
            this.select = select;
            this.stop = stop;
            this.result = null;
        }
        ScopeSearchFilter.prototype.reset = function () {
            this.result = null;
        };
        ScopeSearchFilter.prototype.update = function (b) {
            this.result = this.select(this.result, b);
            if(this.result) {
                return this.stop(this.result);
            } else {
                return false;
            }
        };
        return ScopeSearchFilter;
    })();
    TypeScript.ScopeSearchFilter = ScopeSearchFilter;    
    TypeScript.instanceFilter = new ScopeSearchFilter(instanceCompare, instanceFilterStop);
    function preAssignModuleScopes(ast, context) {
        var moduleDecl = ast;
        var memberScope = null;
        var aggScope = null;
        if(moduleDecl.name && moduleDecl.mod) {
            moduleDecl.name.sym = moduleDecl.mod.symbol;
        }
        var mod = moduleDecl.mod;
        if(!mod) {
            return;
        }
        memberScope = new TypeScript.SymbolTableScope(mod.members, mod.ambientMembers, mod.enclosedTypes, mod.ambientEnclosedTypes, mod.symbol);
        mod.memberScope = memberScope;
        context.modDeclChain.push(moduleDecl);
        context.typeFlow.checker.currentModDecl = moduleDecl;
        aggScope = new TypeScript.SymbolAggregateScope(mod.symbol);
        aggScope.addParentScope(memberScope);
        aggScope.addParentScope(context.scopeChain.scope);
        pushAssignScope(aggScope, context, null, null, null);
        mod.containedScope = aggScope;
        if(mod.symbol) {
            context.typeFlow.addLocalsFromScope(mod.containedScope, mod.symbol, moduleDecl.vars, mod.members.privateMembers, true);
        }
    }
    TypeScript.preAssignModuleScopes = preAssignModuleScopes;
    function preAssignClassScopes(ast, context) {
        var classDecl = ast;
        var memberScope = null;
        var aggScope = null;
        if(classDecl.name && classDecl.type) {
            classDecl.name.sym = classDecl.type.symbol;
        }
        var classType = ast.type;
        if(classType) {
            var classSym = classType.symbol;
            memberScope = context.typeFlow.checker.scopeOf(classType);
            aggScope = new TypeScript.SymbolAggregateScope(classType.symbol);
            aggScope.addParentScope(memberScope);
            aggScope.addParentScope(context.scopeChain.scope);
            classType.containedScope = aggScope;
            classType.memberScope = memberScope;
            var instanceType = classType.instanceType;
            memberScope = context.typeFlow.checker.scopeOf(instanceType);
            instanceType.memberScope = memberScope;
            aggScope = new TypeScript.SymbolAggregateScope(instanceType.symbol);
            aggScope.addParentScope(context.scopeChain.scope);
            pushAssignScope(aggScope, context, instanceType, classType, null);
            instanceType.containedScope = aggScope;
        } else {
            ast.type = context.typeFlow.anyType;
        }
    }
    TypeScript.preAssignClassScopes = preAssignClassScopes;
    function preAssignInterfaceScopes(ast, context) {
        var interfaceDecl = ast;
        var memberScope = null;
        var aggScope = null;
        if(interfaceDecl.name && interfaceDecl.type) {
            interfaceDecl.name.sym = interfaceDecl.type.symbol;
        }
        var interfaceType = ast.type;
        memberScope = context.typeFlow.checker.scopeOf(interfaceType);
        interfaceType.memberScope = memberScope;
        aggScope = new TypeScript.SymbolAggregateScope(interfaceType.symbol);
        aggScope.addParentScope(memberScope);
        aggScope.addParentScope(context.scopeChain.scope);
        pushAssignScope(aggScope, context, null, null, null);
        interfaceType.containedScope = aggScope;
    }
    TypeScript.preAssignInterfaceScopes = preAssignInterfaceScopes;
    function preAssignWithScopes(ast, context) {
        var withStmt = ast;
        var withType = withStmt.type;
        var members = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
        var ambientMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
        var withType = new TypeScript.Type();
        var withSymbol = new TypeScript.WithSymbol(withStmt.minChar, context.typeFlow.checker.locationInfo.unitIndex, withType);
        withType.members = members;
        withType.ambientMembers = ambientMembers;
        withType.symbol = withSymbol;
        withType.setHasImplementation();
        withStmt.type = withType;
        var withScope = new TypeScript.SymbolScopeBuilder(withType.members, withType.ambientMembers, null, null, context.scopeChain.scope, withType.symbol);
        pushAssignScope(withScope, context, null, null, null);
        withType.containedScope = withScope;
    }
    TypeScript.preAssignWithScopes = preAssignWithScopes;
    function preAssignFuncDeclScopes(ast, context) {
        var funcDecl = ast;
        var container = null;
        var localContainer = null;
        if(funcDecl.type) {
            localContainer = ast.type.symbol;
        }
        var isStatic = TypeScript.hasFlag(funcDecl.fncFlags, 16 /* Static */ );
        var isInnerStatic = isStatic && context.scopeChain.fnc != null;
        var parentScope = isInnerStatic ? context.scopeChain.fnc.type.memberScope : context.scopeChain.scope;
        if(context.scopeChain.thisType && (!funcDecl.isConstructor || TypeScript.hasFlag(funcDecl.fncFlags, 262144 /* ClassMethod */ ))) {
            var instType = context.scopeChain.thisType;
            if(!(instType.typeFlags & 128 /* IsClass */ ) && !TypeScript.hasFlag(funcDecl.fncFlags, 262144 /* ClassMethod */ )) {
                if(!funcDecl.isMethod() || isStatic) {
                    parentScope = instType.constructorScope;
                } else {
                    parentScope = instType.containedScope;
                }
            } else {
                if(context.scopeChain.previous.scope.container && context.scopeChain.previous.scope.container.declAST && context.scopeChain.previous.scope.container.declAST.nodeType == 71 /* FuncDecl */  && (context.scopeChain.previous.scope.container.declAST).isConstructor) {
                    parentScope = instType.constructorScope;
                } else {
                    if(isStatic && context.scopeChain.classType) {
                        parentScope = context.scopeChain.classType.containedScope;
                    } else {
                        parentScope = instType.containedScope;
                    }
                }
            }
            container = instType.symbol;
        } else {
            if(funcDecl.isConstructor && context.scopeChain.thisType) {
                container = context.scopeChain.thisType.symbol;
            }
        }
        if(funcDecl.type == null || TypeScript.hasFlag(funcDecl.type.symbol.flags, 16384 /* TypeSetDuringScopeAssignment */ )) {
            if(context.scopeChain.fnc && context.scopeChain.fnc.type) {
                container = context.scopeChain.fnc.type.symbol;
            }
            var funcScope = null;
            var outerFnc = context.scopeChain.fnc;
            var nameText = funcDecl.name ? funcDecl.name.actualText : null;
            var fgSym = null;
            if(isStatic) {
                if(outerFnc.type.members == null && container.getType().memberScope) {
                    outerFnc.type.members = ((container).type.memberScope).valueMembers;
                }
                funcScope = context.scopeChain.fnc.type.memberScope;
                outerFnc.innerStaticFuncs[outerFnc.innerStaticFuncs.length] = funcDecl;
            } else {
                if(!funcDecl.isConstructor && container && container.declAST && container.declAST.nodeType == 71 /* FuncDecl */  && (container.declAST).isConstructor && !funcDecl.isMethod()) {
                    funcScope = context.scopeChain.thisType.constructorScope;
                } else {
                    funcScope = context.scopeChain.scope;
                }
            }
            if(nameText && nameText != "__missing" && !funcDecl.isAccessor()) {
                if(isStatic) {
                    fgSym = funcScope.findLocal(nameText, false, false);
                } else {
                    fgSym = funcScope.findLocal(nameText, false, false);
                }
            }
            context.typeFlow.checker.createFunctionSignature(funcDecl, container, funcScope, fgSym, fgSym == null);
            if(!funcDecl.accessorSymbol && (funcDecl.fncFlags & 262144 /* ClassMethod */ ) && container && ((!fgSym || fgSym.declAST.nodeType != 71 /* FuncDecl */ ) && funcDecl.isAccessor()) || (fgSym && fgSym.isAccessor())) {
                funcDecl.accessorSymbol = context.typeFlow.checker.createAccessorSymbol(funcDecl, fgSym, container.getType(), (funcDecl.isMethod() && isStatic), true, funcScope, container);
            }
            funcDecl.type.symbol.flags |= 16384 /* TypeSetDuringScopeAssignment */ ;
        }
        if(funcDecl.name && funcDecl.type) {
            funcDecl.name.sym = funcDecl.type.symbol;
        }
        funcDecl.scopeType = funcDecl.type;
        if(funcDecl.isOverload) {
            return;
        }
        var funcTable = new TypeScript.StringHashTable();
        var funcMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(funcTable, new TypeScript.StringHashTable()));
        var ambientFuncTable = new TypeScript.StringHashTable();
        var ambientFuncMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(ambientFuncTable, new TypeScript.StringHashTable()));
        var funcStaticTable = new TypeScript.StringHashTable();
        var funcStaticMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(funcStaticTable, new TypeScript.StringHashTable()));
        var ambientFuncStaticTable = new TypeScript.StringHashTable();
        var ambientFuncStaticMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(ambientFuncStaticTable, new TypeScript.StringHashTable()));
        funcDecl.unitIndex = context.typeFlow.checker.locationInfo.unitIndex;
        var locals = new TypeScript.SymbolScopeBuilder(funcMembers, ambientFuncMembers, null, null, parentScope, localContainer);
        var statics = new TypeScript.SymbolScopeBuilder(funcStaticMembers, ambientFuncStaticMembers, null, null, parentScope, null);
        if(funcDecl.isConstructor && context.scopeChain.thisType) {
            context.scopeChain.thisType.constructorScope = locals;
        }
        funcDecl.symbols = funcTable;
        if(!funcDecl.isSpecialFn()) {
            var group = funcDecl.type;
            var signature = funcDecl.signature;
            if(!funcDecl.isConstructor) {
                group.containedScope = locals;
                locals.container = group.symbol;
                group.memberScope = statics;
                statics.container = group.symbol;
            }
            funcDecl.enclosingFnc = context.scopeChain.fnc;
            group.enclosingType = isStatic ? context.scopeChain.classType : context.scopeChain.thisType;
            var fgSym = ast.type.symbol;
            if(((funcDecl.fncFlags & 512 /* Signature */ ) == 0 /* None */ ) && funcDecl.vars) {
                context.typeFlow.addLocalsFromScope(locals, fgSym, funcDecl.vars, funcTable, false);
                context.typeFlow.addLocalsFromScope(statics, fgSym, funcDecl.statics, funcStaticTable, false);
            }
            if(signature.parameters) {
                var len = signature.parameters.length;
                for(var i = 0; i < len; i++) {
                    var paramSym = signature.parameters[i];
                    context.typeFlow.checker.resolveTypeLink(locals, paramSym.parameter.typeLink, true);
                }
            }
            context.typeFlow.checker.resolveTypeLink(locals, signature.returnType, funcDecl.isSignature());
        }
        if(!funcDecl.isConstructor || TypeScript.hasFlag(funcDecl.fncFlags, 262144 /* ClassMethod */ )) {
            var thisType = (funcDecl.isConstructor && TypeScript.hasFlag(funcDecl.fncFlags, 262144 /* ClassMethod */ )) ? context.scopeChain.thisType : null;
            pushAssignScope(locals, context, thisType, null, funcDecl);
        }
    }
    TypeScript.preAssignFuncDeclScopes = preAssignFuncDeclScopes;
    function preAssignCatchScopes(ast, context) {
        var catchBlock = ast;
        if(catchBlock.param) {
            var catchTable = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
            var catchLocals = new TypeScript.SymbolScopeBuilder(catchTable, null, null, null, context.scopeChain.scope, context.scopeChain.scope.container);
            catchBlock.containedScope = catchLocals;
            pushAssignScope(catchLocals, context, context.scopeChain.thisType, context.scopeChain.classType, context.scopeChain.fnc);
        }
    }
    TypeScript.preAssignCatchScopes = preAssignCatchScopes;
    function preAssignScopes(ast, parent, walker) {
        var context = walker.state;
        var go = true;
        if(ast) {
            if(ast.nodeType == 92 /* List */ ) {
                var list = ast;
                list.enclosingScope = context.scopeChain.scope;
            } else {
                if(ast.nodeType == 96 /* ModuleDeclaration */ ) {
                    preAssignModuleScopes(ast, context);
                } else {
                    if(ast.nodeType == 94 /* ClassDeclaration */ ) {
                        preAssignClassScopes(ast, context);
                    } else {
                        if(ast.nodeType == 95 /* InterfaceDeclaration */ ) {
                            preAssignInterfaceScopes(ast, context);
                        } else {
                            if(ast.nodeType == 98 /* With */ ) {
                                preAssignWithScopes(ast, context);
                            } else {
                                if(ast.nodeType == 71 /* FuncDecl */ ) {
                                    preAssignFuncDeclScopes(ast, context);
                                } else {
                                    if(ast.nodeType == 91 /* Catch */ ) {
                                        preAssignCatchScopes(ast, context);
                                    } else {
                                        if(ast.nodeType == 26 /* TypeRef */ ) {
                                            go = false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        walker.options.goChildren = go;
        return ast;
    }
    TypeScript.preAssignScopes = preAssignScopes;
    function postAssignScopes(ast, parent, walker) {
        var context = walker.state;
        var go = true;
        if(ast) {
            if(ast.nodeType == 96 /* ModuleDeclaration */ ) {
                var prevModDecl = ast;
                popAssignScope(context);
                context.modDeclChain.pop();
                if(context.modDeclChain.length >= 1) {
                    context.typeFlow.checker.currentModDecl = context.modDeclChain[context.modDeclChain.length - 1];
                }
            } else {
                if(ast.nodeType == 94 /* ClassDeclaration */ ) {
                    popAssignScope(context);
                } else {
                    if(ast.nodeType == 95 /* InterfaceDeclaration */ ) {
                        popAssignScope(context);
                    } else {
                        if(ast.nodeType == 98 /* With */ ) {
                            popAssignScope(context);
                        } else {
                            if(ast.nodeType == 71 /* FuncDecl */ ) {
                                var funcDecl = ast;
                                if((!funcDecl.isConstructor || TypeScript.hasFlag(funcDecl.fncFlags, 262144 /* ClassMethod */ )) && !funcDecl.isOverload) {
                                    popAssignScope(context);
                                }
                            } else {
                                if(ast.nodeType == 91 /* Catch */ ) {
                                    var catchBlock = ast;
                                    if(catchBlock.param) {
                                        popAssignScope(context);
                                    }
                                } else {
                                    go = false;
                                }
                            }
                        }
                    }
                }
            }
        }
        walker.options.goChildren = go;
        return ast;
    }
    TypeScript.postAssignScopes = postAssignScopes;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var TypeCollectionContext = (function () {
        function TypeCollectionContext(scopeChain, checker) {
            this.scopeChain = scopeChain;
            this.checker = checker;
            this.script = null;
        }
        return TypeCollectionContext;
    })();
    TypeScript.TypeCollectionContext = TypeCollectionContext;    
    var MemberScopeContext = (function () {
        function MemberScopeContext(flow, pos, matchFlag) {
            this.flow = flow;
            this.pos = pos;
            this.matchFlag = matchFlag;
            this.type = null;
            this.ast = null;
            this.options = new TypeScript.AstWalkOptions();
        }
        return MemberScopeContext;
    })();
    TypeScript.MemberScopeContext = MemberScopeContext;    
    var EnclosingScopeContext = (function () {
        function EnclosingScopeContext(logger, script, text, pos, isMemberCompletion) {
            this.logger = logger;
            this.script = script;
            this.text = text;
            this.pos = pos;
            this.isMemberCompletion = isMemberCompletion;
            this.scopeGetter = null;
            this.objectLiteralScopeGetter = null;
            this.scopeStartAST = null;
            this.skipNextFuncDeclForClass = false;
            this.deepestModuleDecl = null;
            this.enclosingClassDecl = null;
            this.enclosingObjectLit = null;
            this.publicsOnly = true;
            this.useFullAst = false;
        }
        EnclosingScopeContext.prototype.getScope = function () {
            return this.scopeGetter();
        };
        EnclosingScopeContext.prototype.getObjectLiteralScope = function () {
            return this.objectLiteralScopeGetter();
        };
        EnclosingScopeContext.prototype.getScopeAST = function () {
            return this.scopeStartAST;
        };
        EnclosingScopeContext.prototype.getScopePosition = function () {
            return this.scopeStartAST.minChar;
        };
        EnclosingScopeContext.prototype.getScriptFragmentStartAST = function () {
            return this.scopeStartAST;
        };
        EnclosingScopeContext.prototype.getScriptFragmentPosition = function () {
            return this.getScriptFragmentStartAST().minChar;
        };
        EnclosingScopeContext.prototype.getScriptFragment = function () {
            if(this.scriptFragment == null) {
                var ast = this.getScriptFragmentStartAST();
                var minChar = ast.minChar;
                var limChar = (this.isMemberCompletion ? this.pos : this.pos + 1);
                this.scriptFragment = TypeScript.quickParse(this.logger, ast, this.text, minChar, limChar, null).Script;
            }
            return this.scriptFragment;
        };
        return EnclosingScopeContext;
    })();
    TypeScript.EnclosingScopeContext = EnclosingScopeContext;    
    function preFindMemberScope(ast, parent, walker) {
        var memScope = walker.state;
        if(TypeScript.hasFlag(ast.flags, memScope.matchFlag) && ((memScope.pos < 0) || (memScope.pos == ast.limChar))) {
            memScope.ast = ast;
            if((ast.type == null) && (memScope.pos >= 0)) {
                memScope.flow.inScopeTypeCheck(ast, memScope.scope);
            }
            memScope.type = ast.type;
            memScope.options.stopWalk();
        }
        return ast;
    }
    TypeScript.preFindMemberScope = preFindMemberScope;
    function pushTypeCollectionScope(container, valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, context, thisType, classType, moduleDecl) {
        var builder = new TypeScript.SymbolScopeBuilder(valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, null, container);
        var chain = new TypeScript.ScopeChain(container, context.scopeChain, builder);
        chain.thisType = thisType;
        chain.classType = classType;
        chain.moduleDecl = moduleDecl;
        context.scopeChain = chain;
    }
    TypeScript.pushTypeCollectionScope = pushTypeCollectionScope;
    function popTypeCollectionScope(context) {
        context.scopeChain = context.scopeChain.previous;
    }
    TypeScript.popTypeCollectionScope = popTypeCollectionScope;
    function preFindEnclosingScope(ast, parent, walker) {
        var context = walker.state;
        var minChar = ast.minChar;
        var limChar = ast.limChar;
        if(ast.nodeType == 93 /* Script */  && context.pos > limChar) {
            limChar = context.pos;
        }
        if((minChar <= context.pos) && (limChar >= context.pos)) {
            switch(ast.nodeType) {
                case 93 /* Script */ : {
                    var script = ast;
                    context.scopeGetter = function () {
                        return script.bod === null ? null : script.bod.enclosingScope;
                    };
                    context.scopeStartAST = script;
                    break;

                }
                case 94 /* ClassDeclaration */ : {
                    context.scopeGetter = function () {
                        return (ast.type === null || ast.type.instanceType.containedScope === null) ? null : ast.type.instanceType.containedScope;
                    };
                    context.scopeStartAST = ast;
                    context.enclosingClassDecl = ast;
                    break;

                }
                case 11 /* ObjectLit */ : {
                    var objectLit = ast;
                    if(objectLit.targetType) {
                        context.scopeGetter = function () {
                            return objectLit.targetType.containedScope;
                        };
                        context.objectLiteralScopeGetter = function () {
                            return objectLit.targetType.memberScope;
                        };
                        context.enclosingObjectLit = objectLit;
                    }
                    break;

                }
                case 96 /* ModuleDeclaration */ : {
                    context.deepestModuleDecl = ast;
                    context.scopeGetter = function () {
                        return ast.type === null ? null : ast.type.containedScope;
                    };
                    context.scopeStartAST = ast;
                    break;

                }
                case 95 /* InterfaceDeclaration */ : {
                    context.scopeGetter = function () {
                        return (ast.type === null) ? null : ast.type.containedScope;
                    };
                    context.scopeStartAST = ast;
                    break;

                }
                case 71 /* FuncDecl */ : {
 {
                        var funcDecl = ast;
                        if(context.skipNextFuncDeclForClass) {
                            context.skipNextFuncDeclForClass = false;
                        } else {
                            context.scopeGetter = function () {
                                if(funcDecl.isConstructor && TypeScript.hasFlag(funcDecl.fncFlags, 262144 /* ClassMethod */ )) {
                                    if(ast.type && ast.type.enclosingType) {
                                        return ast.type.enclosingType.constructorScope;
                                    }
                                }
                                if(funcDecl.scopeType) {
                                    return funcDecl.scopeType.containedScope;
                                }
                                if(funcDecl.type) {
                                    return funcDecl.type.containedScope;
                                }
                                return null;
                            };
                            context.scopeStartAST = ast;
                        }
                    }
                    break;

                }
            }
            walker.options.goChildren = true;
        } else {
            walker.options.goChildren = false;
        }
        return ast;
    }
    TypeScript.preFindEnclosingScope = preFindEnclosingScope;
    function findEnclosingScopeAt(logger, script, text, pos, isMemberCompletion) {
        var context = new EnclosingScopeContext(logger, script, text, pos, isMemberCompletion);
        TypeScript.getAstWalkerFactory().walk(script, preFindEnclosingScope, null, null, context);
        if(context.scopeStartAST === null) {
            return null;
        }
        return context;
    }
    TypeScript.findEnclosingScopeAt = findEnclosingScopeAt;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Signature = (function () {
        function Signature() {
            this.hasVariableArgList = false;
            this.parameters = null;
            this.declAST = null;
            this.typeCheckStatus = 0 /* NotStarted */ ;
            this.nonOptionalParameterCount = 0;
        }
        Signature.prototype.specializeType = function (pattern, replacement, checker) {
            var result = new Signature();
            if(this.hasVariableArgList) {
                result.hasVariableArgList = true;
            }
            result.returnType = new TypeScript.TypeLink();
            if(this.returnType.type) {
                result.returnType.type = this.returnType.type.specializeType(pattern, replacement, checker, false);
            } else {
                result.returnType.type = checker.anyType;
            }
            if(this.parameters) {
                result.parameters = [];
                for(var i = 0, len = this.parameters.length; i < len; i++) {
                    var oldSym = this.parameters[i];
                    var paramDef = new TypeScript.ValueLocation();
                    var paramSym = new TypeScript.ParameterSymbol(oldSym.name, oldSym.location, checker.locationInfo.unitIndex, paramDef);
                    paramSym.declAST = this.declAST;
                    paramDef.symbol = paramSym;
                    paramDef.typeLink = new TypeScript.TypeLink();
                    result.parameters[i] = paramSym;
                    var oldType = oldSym.getType();
                    if(oldType) {
                        paramDef.typeLink.type = oldType.specializeType(pattern, replacement, checker, false);
                        paramSym.declAST.type = paramDef.typeLink.type;
                    } else {
                        paramDef.typeLink.type = checker.anyType;
                    }
                }
            }
            result.nonOptionalParameterCount = this.nonOptionalParameterCount;
            result.declAST = this.declAST;
            return result;
        };
        Signature.prototype.toString = function () {
            return this.toStringHelper(false, false, null);
        };
        Signature.prototype.toStringHelper = function (shortform, brackets, scope) {
            return this.toStringHelperEx(shortform, brackets, scope).toString();
        };
        Signature.prototype.toStringHelperEx = function (shortform, brackets, scope, prefix) {
            if (typeof prefix === "undefined") { prefix = ""; }
            var builder = new TypeScript.MemberNameArray();
            if(brackets) {
                builder.prefix = prefix + "[";
            } else {
                builder.prefix = prefix + "(";
            }
            var paramLen = this.parameters.length;
            var len = this.hasVariableArgList ? paramLen - 1 : paramLen;
            for(var i = 0; i < len; i++) {
                builder.add(TypeScript.MemberName.create(this.parameters[i].name + (this.parameters[i].isOptional() ? "?" : "") + ": "));
                builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));
                if(i < paramLen - 1) {
                    builder.add(TypeScript.MemberName.create(", "));
                }
            }
            if(this.hasVariableArgList) {
                builder.add(TypeScript.MemberName.create("..." + this.parameters[i].name + ": "));
                builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));
            }
            if(shortform) {
                if(brackets) {
                    builder.add(TypeScript.MemberName.create("] => "));
                } else {
                    builder.add(TypeScript.MemberName.create(") => "));
                }
            } else {
                if(brackets) {
                    builder.add(TypeScript.MemberName.create("]: "));
                } else {
                    builder.add(TypeScript.MemberName.create("): "));
                }
            }
            if(this.returnType.type) {
                builder.add(this.returnType.type.getScopedTypeNameEx(scope));
            } else {
                builder.add(TypeScript.MemberName.create("any"));
            }
            return builder;
        };
        return Signature;
    })();
    TypeScript.Signature = Signature;    
    var SignatureGroup = (function () {
        function SignatureGroup() {
            this.signatures = [];
            this.hasImplementation = true;
            this.definitionSignature = null;
            this.hasBeenTypechecked = false;
            this.flags = 0 /* None */ ;
        }
        SignatureGroup.prototype.addSignature = function (signature) {
            if(this.signatures == null) {
                this.signatures = new Array();
            }
            this.signatures[this.signatures.length] = signature;
            if(signature.declAST && !signature.declAST.isOverload && !signature.declAST.isSignature() && !TypeScript.hasFlag(signature.declAST.fncFlags, 8 /* Ambient */ ) && TypeScript.hasFlag(signature.declAST.fncFlags, 256 /* Definition */ )) {
                this.definitionSignature = signature;
            }
        };
        SignatureGroup.prototype.toString = function () {
            return this.signatures.toString();
        };
        SignatureGroup.prototype.toStrings = function (prefix, shortform, scope) {
            var result = [];
            var len = this.signatures.length;
            if(len > 1) {
                shortform = false;
            }
            for(var i = 0; i < len; i++) {
                if(len > 1 && this.signatures[i] == this.definitionSignature) {
                    continue;
                }
                if(this.flags & 1 /* IsIndexer */ ) {
                    result.push(this.signatures[i].toStringHelperEx(shortform, true, scope));
                } else {
                    result.push(this.signatures[i].toStringHelperEx(shortform, false, scope, prefix));
                }
            }
            return result;
        };
        SignatureGroup.prototype.specializeType = function (pattern, replacement, checker) {
            var result = new SignatureGroup();
            if(this.signatures) {
                for(var i = 0, len = this.signatures.length; i < len; i++) {
                    result.addSignature(this.signatures[i].specializeType(pattern, replacement, checker));
                }
            }
            return result;
        };
        SignatureGroup.prototype.verifySignatures = function (checker) {
            var len = 0;
            if(this.signatures && ((len = this.signatures.length) > 0)) {
                for(var i = 0; i < len; i++) {
                    for(var j = i + 1; j < len; j++) {
                        if(this.signatures[i].declAST && this.signatures[j].declAST && (!TypeScript.hasFlag(this.signatures[i].declAST.fncFlags, 256 /* Definition */ ) && !TypeScript.hasFlag(this.signatures[j].declAST.fncFlags, 256 /* Definition */ )) && checker.signaturesAreIdentical(this.signatures[i], this.signatures[j])) {
                            checker.errorReporter.simpleError(this.signatures[i].declAST, (this.signatures[i].declAST && this.signatures[i].declAST.name) ? "Signature for '" + this.signatures[i].declAST.name.actualText + "' is duplicated" : "Signature is duplicated");
                        }
                    }
                    if(this.definitionSignature) {
                        if(!checker.signatureIsAssignableToTarget(this.definitionSignature, this.signatures[i])) {
                            checker.errorReporter.simpleError(this.signatures[i].declAST, "Overload signature is not compatible with function definition");
                        }
                    }
                }
            }
        };
        SignatureGroup.prototype.typeCheck = function (checker, ast, hasConstruct) {
            if(this.hasBeenTypechecked) {
                return;
            }
            this.hasBeenTypechecked = true;
            var len = 0;
            if(this.signatures && ((len = this.signatures.length) > 0)) {
                for(var i = 0; i < len; i++) {
                    if(!hasConstruct && !this.definitionSignature && this.signatures[i].declAST && this.signatures[i].declAST.isOverload && !TypeScript.hasFlag(this.signatures[i].declAST.fncFlags, 8 /* Ambient */ )) {
                        checker.errorReporter.simpleError(this.signatures[i].declAST, "Overload declaration lacks definition");
                    }
                    if(this.signatures[i].declAST && this.signatures[i].declAST.isConstructor && this.signatures[i].declAST.classDecl && this.signatures[i].declAST.classDecl.type.symbol.typeCheckStatus == 0 /* NotStarted */ ) {
                        checker.typeFlow.typeCheck(this.signatures[i].declAST.classDecl);
                    }
                    checker.typeFlow.typeCheck(this.signatures[i].declAST);
                }
                this.verifySignatures(checker);
            }
        };
        return SignatureGroup;
    })();
    TypeScript.SignatureGroup = SignatureGroup;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (TypeCheckStatus) {
        TypeCheckStatus._map = [];
        TypeCheckStatus._map[0] = "NotStarted";
        TypeCheckStatus.NotStarted = 0;
        TypeCheckStatus._map[1] = "Started";
        TypeCheckStatus.Started = 1;
        TypeCheckStatus._map[2] = "Finished";
        TypeCheckStatus.Finished = 2;
    })(TypeScript.TypeCheckStatus || (TypeScript.TypeCheckStatus = {}));
    var TypeCheckStatus = TypeScript.TypeCheckStatus;
    function aLexicallyEnclosesB(a, b) {
        if(a.declAST && b && b.declAST && a.declAST.nodeType == 71 /* FuncDecl */ ) {
            return a.declAST.minChar <= b.declAST.minChar && a.declAST.limChar >= b.declAST.limChar;
        } else {
            return false;
        }
    }
    TypeScript.aLexicallyEnclosesB = aLexicallyEnclosesB;
    function aEnclosesB(a, b) {
        while(a.container) {
            if(a == b || aLexicallyEnclosesB(a.container, b)) {
                return true;
            }
            a = a.container;
        }
        return false;
    }
    TypeScript.aEnclosesB = aEnclosesB;
    var Symbol = (function () {
        function Symbol(name, location, unitIndex) {
            this.name = name;
            this.location = location;
            this.unitIndex = unitIndex;
            this.bound = false;
            this.flags = 0 /* None */ ;
            this.isObjectLitField = false;
            this.declAST = null;
            this.declModule = null;
            this.passSymbolCreated = TypeScript.CompilerDiagnostics.analysisPass;
        }
        Symbol.prototype.instanceScope = function () {
            return null;
        };
        Symbol.prototype.isVariable = function () {
            return false;
        };
        Symbol.prototype.isMember = function () {
            return false;
        };
        Symbol.prototype.isInferenceSymbol = function () {
            return false;
        };
        Symbol.prototype.isWith = function () {
            return false;
        };
        Symbol.prototype.writeable = function () {
            return false;
        };
        Symbol.prototype.isType = function () {
            return false;
        };
        Symbol.prototype.getType = function () {
            return null;
        };
        Symbol.prototype.isAccessor = function () {
            return false;
        };
        Symbol.prototype.isInstanceProperty = function () {
            return TypeScript.hasFlag(this.flags, 256 /* Property */ ) && (!TypeScript.hasFlag(this.flags, 1024 /* ModuleMember */ ));
        };
        Symbol.prototype.getTypeName = function (scope) {
            return this.getTypeNameEx(scope).toString();
        };
        Symbol.prototype.getTypeNameEx = function (scope) {
            return TypeScript.MemberName.create(this.toString());
        };
        Symbol.prototype.getOptionalNameString = function () {
            return TypeScript.hasFlag(this.flags, 65536 /* Optional */ ) ? "?" : "";
        };
        Symbol.prototype.pathToRoot = function () {
            var path = new Array();
            var node = this;
            while(node && (node.name != TypeScript.globalId)) {
                path[path.length] = node;
                node = node.container;
            }
            return path;
        };
        Symbol.prototype.findCommonAncestorPath = function (b) {
            if(this.container == null) {
                return new Array();
            }
            var aPath = this.container.pathToRoot();
            var bPath;
            if(b) {
                bPath = b.pathToRoot();
            } else {
                bPath = new Array();
            }
            var commonNodeIndex = -1;
            for(var i = 0, aLen = aPath.length; i < aLen; i++) {
                var aNode = aPath[i];
                for(var j = 0, bLen = bPath.length; j < bLen; j++) {
                    var bNode = bPath[j];
                    if(aNode == bNode) {
                        commonNodeIndex = i;
                        break;
                    }
                }
                if(commonNodeIndex >= 0) {
                    break;
                }
            }
            if(commonNodeIndex >= 0) {
                return aPath.slice(0, commonNodeIndex);
            } else {
                return aPath;
            }
        };
        Symbol.prototype.getPrettyName = function (scopeSymbol, searchTillRoot) {
            return this.name;
        };
        Symbol.prototype.scopeRelativeName = function (scope) {
            if(scope == null) {
                return this.name;
            }
            var lca = this.findCommonAncestorPath(scope.container);
            var builder = "";
            for(var i = 0, len = lca.length; i < len; i++) {
                builder = lca[i].name + "." + builder;
            }
            builder += this.name;
            return builder;
        };
        Symbol.prototype.fullName = function () {
            var builder = this.name;
            var ancestor = this.container;
            while(ancestor && (ancestor.name != TypeScript.globalId)) {
                builder = ancestor.name + "." + builder;
                ancestor = ancestor.container;
            }
            return builder;
        };
        Symbol.prototype.isExternallyVisible = function (checker) {
            if(this == checker.gloMod) {
                return true;
            }
            if(TypeScript.hasFlag(this.flags, 2 /* Private */ )) {
                return false;
            }
            if(!TypeScript.hasFlag(this.flags, 1 /* Exported */ )) {
                return this.container == checker.gloMod;
            }
            return this.container.isExternallyVisible(checker);
        };
        Symbol.prototype.visible = function (scope, checker) {
            if(checker == null || this.container == checker.gloMod) {
                return true;
            }
            if(TypeScript.hasFlag(this.flags, 1024 /* ModuleMember */ )) {
                if(TypeScript.hasFlag(this.flags, 1 /* Exported */ )) {
                    if(!TypeScript.hasFlag(this.flags, 2 /* Private */ )) {
                        return true;
                    } else {
                        return aEnclosesB(this, scope.container);
                    }
                } else {
                    return checker && (checker.currentModDecl == this.declModule) || (checker.currentModDecl && checker.currentModDecl.mod && checker.currentModDecl.mod.symbol && this.declModule && this.declModule.mod && this.declModule.mod.symbol && aEnclosesB(checker.currentModDecl.mod.symbol, this.declModule.mod.symbol));
                }
            } else {
                var isFunction = this.declAST && this.declAST.nodeType == 71 /* FuncDecl */ ;
                var isMethod = isFunction && (this.declAST).isMethod();
                var isStaticFunction = isFunction && TypeScript.hasFlag((this.declAST).fncFlags, 16 /* Static */ );
                var isPrivateMethod = isMethod && TypeScript.hasFlag((this.declAST).fncFlags, 2 /* Private */ );
                var isAlias = this.isType() && (this).aliasLink;
                if(this.isMember() || isMethod || isStaticFunction || isAlias) {
                    if(TypeScript.hasFlag(this.flags, 2 /* Private */ ) || isPrivateMethod) {
                        if(scope.container == null && this.container != scope.container) {
                            return false;
                        } else {
                            return this.container == null ? true : aEnclosesB(scope.container, this.container);
                        }
                    } else {
                        return true;
                    }
                } else {
                    if(this.container) {
                        return aEnclosesB(this, scope.container);
                    } else {
                        return true;
                    }
                }
            }
        };
        Symbol.prototype.addRef = function (identifier) {
            if(!this.refs) {
                this.refs = [];
            }
            this.refs[this.refs.length] = identifier;
        };
        Symbol.prototype.toString = function () {
            if(this.name) {
                return this.name;
            } else {
                return "_anonymous";
            }
        };
        Symbol.prototype.print = function (outfile) {
            outfile.Write(this.toString());
        };
        Symbol.prototype.specializeType = function (pattern, replacement, checker) {
            throw new Error("please implement in derived class");
        };
        Symbol.prototype.setType = function (type) {
            throw new Error("please implement in derived class");
        };
        Symbol.prototype.kind = function () {
            throw new Error("please implement in derived class");
        };
        Symbol.prototype.getInterfaceDeclFromSymbol = function (checker) {
            if(this.declAST != null) {
                if(this.declAST.nodeType == 95 /* InterfaceDeclaration */ ) {
                    return this.declAST;
                } else {
                    if(this.container != null && this.container != checker.gloMod && this.container.declAST.nodeType == 95 /* InterfaceDeclaration */ ) {
                        return this.container.declAST;
                    }
                }
            }
            return null;
        };
        Symbol.prototype.getVarDeclFromSymbol = function () {
            if(this.declAST != null && this.declAST.nodeType == 73 /* VarDecl */ ) {
                return this.declAST;
            }
            return null;
        };
        Symbol.prototype.getImportDeclFromSymbol = function () {
            if(this.declAST != null && this.declAST.nodeType == 97 /* ImportDeclaration */ ) {
                return this.declAST;
            }
            return null;
        };
        return Symbol;
    })();
    TypeScript.Symbol = Symbol;    
    var ValueLocation = (function () {
        function ValueLocation() { }
        return ValueLocation;
    })();
    TypeScript.ValueLocation = ValueLocation;    
    var InferenceSymbol = (function (_super) {
        __extends(InferenceSymbol, _super);
        function InferenceSymbol(name, location, unitIndex) {
                _super.call(this, name, location, unitIndex);
            this.typeCheckStatus = 0 /* NotStarted */ ;
        }
        InferenceSymbol.prototype.isInferenceSymbol = function () {
            return true;
        };
        InferenceSymbol.prototype.transferVarFlags = function (varFlags) {
            if(TypeScript.hasFlag(varFlags, 8 /* Ambient */ )) {
                this.flags |= 8 /* Ambient */ ;
            }
            if(TypeScript.hasFlag(varFlags, 65536 /* Constant */ )) {
                this.flags |= 32768 /* Constant */ ;
            }
            if(TypeScript.hasFlag(varFlags, 16 /* Static */ )) {
                this.flags |= 16 /* Static */ ;
            }
            if(TypeScript.hasFlag(varFlags, 512 /* Property */ )) {
                this.flags |= 256 /* Property */ ;
            }
            if(TypeScript.hasFlag(varFlags, 2 /* Private */ )) {
                this.flags |= 2 /* Private */ ;
            }
            if(TypeScript.hasFlag(varFlags, 4 /* Public */ )) {
                this.flags |= 4 /* Public */ ;
            }
            if(TypeScript.hasFlag(varFlags, 1024 /* Readonly */ )) {
                this.flags |= 512 /* Readonly */ ;
            }
            if(TypeScript.hasFlag(varFlags, 1 /* Exported */ )) {
                this.flags |= 1 /* Exported */ ;
            }
        };
        return InferenceSymbol;
    })(Symbol);
    TypeScript.InferenceSymbol = InferenceSymbol;    
    var TypeSymbol = (function (_super) {
        __extends(TypeSymbol, _super);
        function TypeSymbol(locName, location, unitIndex, type) {
                _super.call(this, locName, location, unitIndex);
            this.type = type;
            this.expansions = [];
            this.isMethod = false;
            this.aliasLink = null;
            this.onlyReferencedAsTypeRef = TypeScript.optimizeModuleCodeGen;
            this.prettyName = this.name;
        }
        TypeSymbol.prototype.addLocation = function (loc) {
            if(this.additionalLocations == null) {
                this.additionalLocations = [];
            }
            this.additionalLocations[this.additionalLocations.length] = loc;
        };
        TypeSymbol.prototype.kind = function () {
            return 1 /* Type */ ;
        };
        TypeSymbol.prototype.isType = function () {
            return true;
        };
        TypeSymbol.prototype.getType = function () {
            return this.type;
        };
        TypeSymbol.prototype.getTypeNameEx = function (scope) {
            return this.type.getMemberTypeNameEx(this.name ? this.name + this.getOptionalNameString() : "", false, false, scope);
        };
        TypeSymbol.prototype.instanceScope = function () {
            if(!(this.type.typeFlags & 128 /* IsClass */ ) && this.type.isClass()) {
                return this.type.instanceType.constructorScope;
            } else {
                return this.type.containedScope;
            }
        };
        TypeSymbol.prototype.toString = function () {
            var result = this.type.getTypeName();
            if(this.name) {
                result = this.name + ":" + result;
            }
            return result;
        };
        TypeSymbol.prototype.isClass = function () {
            return this.instanceType != null;
        };
        TypeSymbol.prototype.isFunction = function () {
            return this.declAST != null && this.declAST.nodeType == 71 /* FuncDecl */ ;
        };
        TypeSymbol.prototype.specializeType = function (pattern, replacement, checker) {
            if(this.type == pattern) {
                return replacement.symbol;
            } else {
                var replType = this.type.specializeType(pattern, replacement, checker, false);
                if(replType != this.type) {
                    var result = new TypeSymbol(this.name, 0, -1, replType);
                    return result;
                } else {
                    return this;
                }
            }
        };
        TypeSymbol.prototype.getPrettyName = function (scopeSymbol, searchTillRoot) {
            if(TypeScript.isQuoted(this.prettyName) && this.type.isModuleType()) {
                var scopePath = searchTillRoot ? scopeSymbol.pathToRoot() : [
                    scopeSymbol
                ];
                var ignoreSymbols = [];
                for(var i = 0; i < scopePath.length; i++) {
                    var symbolType = scopePath[i].getType();
                    if(symbolType.isModuleType()) {
                        ignoreSymbols.push(scopePath[i]);
                        var moduleType = symbolType;
                        var prettyName = moduleType.findDynamicModuleName(this.type, "", false, ignoreSymbols);
                        if(prettyName != null) {
                            return prettyName;
                        }
                    }
                }
            }
            return this.prettyName;
        };
        TypeSymbol.prototype.scopeRelativeName = function (scope) {
            if(scope == null) {
                return this.prettyName + this.getOptionalNameString();
            }
            var lca = this.findCommonAncestorPath(scope.container);
            var builder = "";
            for(var i = 0, len = lca.length; i < len; i++) {
                var prettyName = lca[i].getPrettyName(i == len - 1 ? scope.container : lca[i + 1], i == len - 1);
                builder = prettyName + "." + builder;
            }
            builder += this.getPrettyName(len == 0 ? scope.container : lca[0], len == 0) + this.getOptionalNameString();
            return builder;
        };
        return TypeSymbol;
    })(InferenceSymbol);
    TypeScript.TypeSymbol = TypeSymbol;    
    var WithSymbol = (function (_super) {
        __extends(WithSymbol, _super);
        function WithSymbol(location, unitIndex, withType) {
                _super.call(this, "with", location, unitIndex, withType);
        }
        WithSymbol.prototype.isWith = function () {
            return true;
        };
        return WithSymbol;
    })(TypeSymbol);
    TypeScript.WithSymbol = WithSymbol;    
    var FieldSymbol = (function (_super) {
        __extends(FieldSymbol, _super);
        function FieldSymbol(name, location, unitIndex, canWrite, field) {
                _super.call(this, name, location, unitIndex);
            this.canWrite = canWrite;
            this.field = field;
            this.getter = null;
            this.setter = null;
            this.hasBeenEmitted = false;
            this.name = name;
            this.location = location;
        }
        FieldSymbol.prototype.kind = function () {
            return 2 /* Field */ ;
        };
        FieldSymbol.prototype.writeable = function () {
            return this.isAccessor() ? this.setter != null : this.canWrite;
        };
        FieldSymbol.prototype.getType = function () {
            return this.field.typeLink.type;
        };
        FieldSymbol.prototype.getTypeNameEx = function (scope) {
            return TypeScript.MemberName.create(this.field.typeLink.type.getScopedTypeNameEx(scope), this.name + this.getOptionalNameString() + ": ", "");
        };
        FieldSymbol.prototype.isMember = function () {
            return true;
        };
        FieldSymbol.prototype.setType = function (type) {
            this.field.typeLink.type = type;
        };
        FieldSymbol.prototype.isAccessor = function () {
            return this.getter != null || this.setter != null;
        };
        FieldSymbol.prototype.isVariable = function () {
            return true;
        };
        FieldSymbol.prototype.toString = function () {
            return this.getTypeNameEx(null).toString();
        };
        FieldSymbol.prototype.specializeType = function (pattern, replacement, checker) {
            var rType = this.field.typeLink.type.specializeType(pattern, replacement, checker, false);
            if(rType != this.field.typeLink.type) {
                var fieldDef = new ValueLocation();
                var result = new FieldSymbol(this.name, 0, checker.locationInfo.unitIndex, this.canWrite, fieldDef);
                result.flags = this.flags;
                fieldDef.symbol = result;
                fieldDef.typeLink = new TypeScript.TypeLink();
                result.setType(rType);
                result.typeCheckStatus = 2 /* Finished */ ;
                return result;
            } else {
                return this;
            }
        };
        return FieldSymbol;
    })(InferenceSymbol);
    TypeScript.FieldSymbol = FieldSymbol;    
    var ParameterSymbol = (function (_super) {
        __extends(ParameterSymbol, _super);
        function ParameterSymbol(name, location, unitIndex, parameter) {
                _super.call(this, name, location, unitIndex);
            this.parameter = parameter;
            this.argsOffset = (-1);
            this.name = name;
            this.location = location;
        }
        ParameterSymbol.prototype.kind = function () {
            return 3 /* Parameter */ ;
        };
        ParameterSymbol.prototype.writeable = function () {
            return true;
        };
        ParameterSymbol.prototype.getType = function () {
            return this.parameter.typeLink.type;
        };
        ParameterSymbol.prototype.setType = function (type) {
            this.parameter.typeLink.type = type;
        };
        ParameterSymbol.prototype.isVariable = function () {
            return true;
        };
        ParameterSymbol.prototype.isOptional = function () {
            if(this.parameter && this.parameter.symbol && this.parameter.symbol.declAST) {
                return (this.parameter.symbol.declAST).isOptional;
            } else {
                return false;
            }
        };
        ParameterSymbol.prototype.getTypeNameEx = function (scope) {
            return TypeScript.MemberName.create(this.getType().getScopedTypeNameEx(scope), this.name + (this.isOptional() ? "?" : "") + ": ", "");
        };
        ParameterSymbol.prototype.toString = function () {
            return this.getTypeNameEx(null).toString();
        };
        ParameterSymbol.prototype.specializeType = function (pattern, replacement, checker) {
            var rType = this.parameter.typeLink.type.specializeType(pattern, replacement, checker, false);
            if(this.parameter.typeLink.type != rType) {
                var paramDef = new ValueLocation();
                var result = new ParameterSymbol(this.name, 0, checker.locationInfo.unitIndex, paramDef);
                paramDef.symbol = result;
                result.setType(rType);
                return result;
            } else {
                return this;
            }
        };
        return ParameterSymbol;
    })(InferenceSymbol);
    TypeScript.ParameterSymbol = ParameterSymbol;    
    var VariableSymbol = (function (_super) {
        __extends(VariableSymbol, _super);
        function VariableSymbol(name, location, unitIndex, variable) {
                _super.call(this, name, location, unitIndex);
            this.variable = variable;
        }
        VariableSymbol.prototype.kind = function () {
            return 4 /* Variable */ ;
        };
        VariableSymbol.prototype.writeable = function () {
            return true;
        };
        VariableSymbol.prototype.getType = function () {
            return this.variable.typeLink.type;
        };
        VariableSymbol.prototype.getTypeNameEx = function (scope) {
            return TypeScript.MemberName.create(this.getType().getScopedTypeNameEx(scope), this.name + ": ", "");
        };
        VariableSymbol.prototype.setType = function (type) {
            this.variable.typeLink.type = type;
        };
        VariableSymbol.prototype.isVariable = function () {
            return true;
        };
        return VariableSymbol;
    })(InferenceSymbol);
    TypeScript.VariableSymbol = VariableSymbol;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var ScopedMembers = (function () {
        function ScopedMembers(dualMembers) {
            this.dualMembers = dualMembers;
            this.allMembers = this.dualMembers;
            this.publicMembers = this.dualMembers.primaryTable;
            this.privateMembers = this.dualMembers.secondaryTable;
        }
        ScopedMembers.prototype.addPublicMember = function (key, data) {
            return this.dualMembers.primaryTable.add(key, data);
        };
        ScopedMembers.prototype.addPrivateMember = function (key, data) {
            return this.dualMembers.secondaryTable.add(key, data);
        };
        return ScopedMembers;
    })();
    TypeScript.ScopedMembers = ScopedMembers;    
    (function (SymbolKind) {
        SymbolKind._map = [];
        SymbolKind._map[0] = "None";
        SymbolKind.None = 0;
        SymbolKind._map[1] = "Type";
        SymbolKind.Type = 1;
        SymbolKind._map[2] = "Field";
        SymbolKind.Field = 2;
        SymbolKind._map[3] = "Parameter";
        SymbolKind.Parameter = 3;
        SymbolKind._map[4] = "Variable";
        SymbolKind.Variable = 4;
    })(TypeScript.SymbolKind || (TypeScript.SymbolKind = {}));
    var SymbolKind = TypeScript.SymbolKind;
    var SymbolScope = (function () {
        function SymbolScope(container) {
            this.container = container;
        }
        SymbolScope.prototype.printLabel = function () {
            return "base";
        };
        SymbolScope.prototype.getAllSymbolNames = function (members) {
            return [
                "please", 
                "implement", 
                "in", 
                "derived", 
                "classes"
            ];
        };
        SymbolScope.prototype.getAllTypeSymbolNames = function (members) {
            return [
                "please", 
                "implement", 
                "in", 
                "derived", 
                "classes"
            ];
        };
        SymbolScope.prototype.getAllValueSymbolNames = function (members) {
            return [
                "please", 
                "implement", 
                "in", 
                "derived", 
                "classes"
            ];
        };
        SymbolScope.prototype.search = function (filter, name, publicOnly, typespace) {
            return null;
        };
        SymbolScope.prototype.findLocal = function (name, publicOnly, typespace) {
            return null;
        };
        SymbolScope.prototype.find = function (name, publicOnly, typespace) {
            return null;
        };
        SymbolScope.prototype.findImplementation = function (name, publicOnly, typespace) {
            return null;
        };
        SymbolScope.prototype.findAmbient = function (name, publicOnly, typespace) {
            return null;
        };
        SymbolScope.prototype.print = function (outfile) {
            if(this.container) {
                outfile.WriteLine(this.printLabel() + " scope with container: " + this.container.name + "...");
            } else {
                outfile.WriteLine(this.printLabel() + " scope...");
            }
        };
        SymbolScope.prototype.enter = function (container, ast, symbol, errorReporter, publicOnly, typespace, ambient) {
            throw new Error("please implement in derived class");
        };
        SymbolScope.prototype.getTable = function () {
            throw new Error("please implement in derived class");
        };
        return SymbolScope;
    })();
    TypeScript.SymbolScope = SymbolScope;    
    function symbolCanBeUsed(sym, publicOnly) {
        return publicOnly ? !(TypeScript.hasFlag(sym.flags, 2 /* Private */ ) || (sym.declAST && sym.declAST.nodeType == 71 /* FuncDecl */  && TypeScript.hasFlag((sym.declAST).fncFlags, 2 /* Private */ ))) : true;
    }
    var SymbolAggregateScope = (function (_super) {
        __extends(SymbolAggregateScope, _super);
        function SymbolAggregateScope(container) {
                _super.call(this, container);
            this.valueCache = null;
            this.valueImplCache = null;
            this.valueAmbientCache = null;
            this.typeCache = null;
            this.typeImplCache = null;
            this.typeAmbientCache = null;
            this.parents = null;
            this.container = container;
        }
        SymbolAggregateScope.prototype.printLabel = function () {
            return "agg";
        };
        SymbolAggregateScope.prototype.search = function (filter, name, publicOnly, typespace) {
            if(this.parents) {
                for(var i = 0; i < this.parents.length; i++) {
                    var sym = this.parents[i].search(filter, name, publicOnly, typespace);
                    if(sym) {
                        if(filter.update(sym)) {
                            return sym;
                        }
                    }
                }
            }
            return filter.result;
        };
        SymbolAggregateScope.prototype.getAllSymbolNames = function (members) {
            var result = [];
            if(this.parents) {
                for(var i = 0; i < this.parents.length; i++) {
                    var parentResult = this.parents[i].getAllSymbolNames(members);
                    if(parentResult) {
                        result = result.concat(parentResult);
                    }
                }
            }
            return result;
        };
        SymbolAggregateScope.prototype.getAllTypeSymbolNames = function (members) {
            var result = [];
            if(this.parents) {
                for(var i = 0; i < this.parents.length; i++) {
                    var parentResult = this.parents[i].getAllTypeSymbolNames(members);
                    if(parentResult) {
                        result = result.concat(parentResult);
                    }
                }
            }
            return result;
        };
        SymbolAggregateScope.prototype.getAllValueSymbolNames = function (members) {
            var result = [];
            if(this.parents) {
                for(var i = 0; i < this.parents.length; i++) {
                    var parentResult = this.parents[i].getAllValueSymbolNames(members);
                    if(parentResult) {
                        result = result.concat(parentResult);
                    }
                }
            }
            return result;
        };
        SymbolAggregateScope.prototype.print = function (outfile) {
            _super.prototype.print.call(this, outfile);
            if(this.parents) {
                for(var i = 0; i < this.parents.length; i++) {
                    this.parents[i].print(outfile);
                }
            }
        };
        SymbolAggregateScope.prototype.findImplementation = function (name, publicOnly, typespace) {
            var sym = null;
            var i = 0;
            var implCache = this.valueImplCache;
            if(typespace) {
                implCache = this.typeImplCache;
            }
            if(implCache && ((sym = implCache.lookup(name)) != null) && (publicOnly ? !(TypeScript.hasFlag(sym.flags, 2 /* Private */ ) || (sym.declAST && sym.declAST.nodeType == 71 /* FuncDecl */  && TypeScript.hasFlag((sym.declAST).fncFlags, 2 /* Private */ ))) : true)) {
                return sym;
            }
            if(this.parents) {
                for(i = 0; i < this.parents.length; i++) {
                    sym = this.parents[i].findImplementation(name, publicOnly, typespace);
                    if(sym) {
                        break;
                    }
                }
            }
            if(implCache) {
                if(typespace) {
                    this.typeImplCache = new TypeScript.StringHashTable();
                    implCache = this.typeImplCache;
                } else {
                    this.valueImplCache = new TypeScript.StringHashTable();
                    implCache = this.valueImplCache;
                }
            }
            implCache.add(name, sym);
            return sym;
        };
        SymbolAggregateScope.prototype.find = function (name, publicOnly, typespace) {
            var sym = null;
            var i = 0;
            var cache = this.valueCache;
            if(typespace) {
                cache = this.typeCache;
            }
            if(cache && ((sym = cache.lookup(name)) != null) && (publicOnly ? !(TypeScript.hasFlag(sym.flags, 2 /* Private */ ) || (sym.declAST && sym.declAST.nodeType == 71 /* FuncDecl */  && TypeScript.hasFlag((sym.declAST).fncFlags, 2 /* Private */ ))) : true)) {
                return sym;
            }
            if(this.parents) {
                for(i = 0; i < this.parents.length; i++) {
                    sym = this.parents[i].find(name, publicOnly, typespace);
                    if(sym) {
                        break;
                    }
                }
            }
            if(cache == null) {
                if(typespace) {
                    this.typeCache = new TypeScript.StringHashTable();
                    cache = this.typeCache;
                } else {
                    this.valueCache = new TypeScript.StringHashTable();
                    cache = this.valueCache;
                }
            }
            cache.add(name, sym);
            return sym;
        };
        SymbolAggregateScope.prototype.findAmbient = function (name, publicOnly, typespace) {
            var sym = null;
            var i = 0;
            var cache = this.valueAmbientCache;
            if(typespace) {
                cache = this.typeAmbientCache;
            }
            if(cache && ((sym = cache.lookup(name)) != null)) {
                return sym;
            }
            if(this.parents) {
                for(i = 0; i < this.parents.length; i++) {
                    sym = this.parents[i].findAmbient(name, publicOnly, typespace);
                    if(sym) {
                        break;
                    }
                }
            }
            if(cache == null) {
                if(typespace) {
                    this.typeAmbientCache = new TypeScript.StringHashTable();
                    cache = this.typeAmbientCache;
                } else {
                    this.valueAmbientCache = new TypeScript.StringHashTable();
                    cache = this.valueAmbientCache;
                }
            }
            cache.add(name, sym);
            return sym;
        };
        SymbolAggregateScope.prototype.addParentScope = function (parent) {
            if(this.parents == null) {
                this.parents = new Array();
            }
            this.parents[this.parents.length] = parent;
        };
        return SymbolAggregateScope;
    })(SymbolScope);
    TypeScript.SymbolAggregateScope = SymbolAggregateScope;    
    var SymbolTableScope = (function (_super) {
        __extends(SymbolTableScope, _super);
        function SymbolTableScope(valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, container) {
                _super.call(this, container);
            this.valueMembers = valueMembers;
            this.ambientValueMembers = ambientValueMembers;
            this.enclosedTypes = enclosedTypes;
            this.ambientEnclosedTypes = ambientEnclosedTypes;
            this.container = container;
        }
        SymbolTableScope.prototype.printLabel = function () {
            return "table";
        };
        SymbolTableScope.prototype.getAllSymbolNames = function (members) {
            var result = this.getAllTypeSymbolNames(members);
            return result.concat(this.getAllValueSymbolNames(members));
        };
        SymbolTableScope.prototype.getAllTypeSymbolNames = function (members) {
            var result = [];
            if(this.ambientEnclosedTypes) {
                result = result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());
            }
            if(this.enclosedTypes) {
                result = result.concat(this.enclosedTypes.allMembers.getAllKeys());
            }
            return result;
        };
        SymbolTableScope.prototype.getAllValueSymbolNames = function (members) {
            var result = [];
            if(this.ambientValueMembers) {
                result = result.concat(this.ambientValueMembers.allMembers.getAllKeys());
            }
            if(this.valueMembers) {
                result = result.concat(this.valueMembers.allMembers.getAllKeys());
            }
            return result;
        };
        SymbolTableScope.prototype.search = function (filter, name, publicOnly, typespace) {
            var sym = this.find(name, publicOnly, typespace);
            filter.update(sym);
            return filter.result;
        };
        SymbolTableScope.prototype.find = function (name, publicOnly, typespace) {
            var table = null;
            var ambientTable = null;
            if(typespace) {
                table = (this.enclosedTypes == null) ? null : publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;
                ambientTable = (this.ambientEnclosedTypes == null) ? null : publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;
            } else {
                table = (this.valueMembers == null) ? null : publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;
                ambientTable = (this.ambientValueMembers == null) ? null : publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;
            }
            if(ambientTable) {
                var s = ambientTable.lookup(name);
                if(s) {
                    return s;
                }
            }
            if(table) {
                var s = table.lookup(name);
                if(s) {
                    return s;
                }
            }
            return null;
        };
        SymbolTableScope.prototype.findAmbient = function (name, publicOnly, typespace) {
            var ambientTable = (this.ambientValueMembers == null) ? null : publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;
            if(typespace) {
                ambientTable = (this.ambientEnclosedTypes == null) ? null : publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;
            }
            if(ambientTable) {
                var s = ambientTable.lookup(name);
                if(s) {
                    return s;
                }
            }
            return null;
        };
        SymbolTableScope.prototype.print = function (outfile) {
            _super.prototype.print.call(this, outfile);
            if(this.ambientValueMembers) {
                this.ambientValueMembers.allMembers.map(function (key, sym, context) {
                    outfile.WriteLine("  " + key);
                }, null);
            }
            if(this.valueMembers) {
                this.valueMembers.allMembers.map(function (key, sym, context) {
                    outfile.WriteLine("  " + key);
                }, null);
            }
            if(this.ambientEnclosedTypes) {
                this.ambientEnclosedTypes.allMembers.map(function (key, sym, context) {
                    outfile.WriteLine("  " + key);
                }, null);
            }
            if(this.enclosedTypes) {
                this.enclosedTypes.allMembers.map(function (key, sym, context) {
                    outfile.WriteLine("  " + key);
                }, null);
            }
        };
        SymbolTableScope.prototype.findImplementation = function (name, publicOnly, typespace) {
            var sym = this.find(name, publicOnly, typespace);
            if(sym) {
                if(sym.kind() == 1 /* Type */ ) {
                    var typeSym = sym;
                    if(!typeSym.type.hasImplementation()) {
                        sym = null;
                    }
                } else {
                    if(sym.container) {
                        if(sym.container.kind() == 1 /* Type */ ) {
                            var ctypeSym = sym.container;
                            if(!ctypeSym.type.hasImplementation()) {
                                sym = null;
                            }
                        }
                    }
                }
            }
            return sym;
        };
        SymbolTableScope.prototype.getTable = function () {
            return this.valueMembers.publicMembers;
        };
        return SymbolTableScope;
    })(SymbolScope);
    TypeScript.SymbolTableScope = SymbolTableScope;    
    var SymbolScopeBuilder = (function (_super) {
        __extends(SymbolScopeBuilder, _super);
        function SymbolScopeBuilder(valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, parent, container) {
                _super.call(this, container);
            this.valueMembers = valueMembers;
            this.ambientValueMembers = ambientValueMembers;
            this.enclosedTypes = enclosedTypes;
            this.ambientEnclosedTypes = ambientEnclosedTypes;
            this.parent = parent;
            this.container = container;
        }
        SymbolScopeBuilder.prototype.printLabel = function () {
            return "builder";
        };
        SymbolScopeBuilder.prototype.getAllSymbolNames = function (members) {
            var result = this.getAllTypeSymbolNames(members);
            return result.concat(this.getAllValueSymbolNames(members));
        };
        SymbolScopeBuilder.prototype.getAllTypeSymbolNames = function (members) {
            var result = [];
            if(this.ambientEnclosedTypes) {
                result = result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());
            }
            if(this.enclosedTypes) {
                result = result.concat(this.enclosedTypes.allMembers.getAllKeys());
            }
            if(!members && this.parent) {
                var parentResult = this.parent.getAllTypeSymbolNames(members);
                if(parentResult) {
                    result = result.concat(parentResult);
                }
            }
            return result;
        };
        SymbolScopeBuilder.prototype.getAllValueSymbolNames = function (members) {
            var result = [];
            if(this.ambientValueMembers) {
                result = result.concat(this.ambientValueMembers.allMembers.getAllKeys());
            }
            if(this.valueMembers) {
                result = result.concat(this.valueMembers.allMembers.getAllKeys());
            }
            if(!members && this.parent) {
                var parentResult = this.parent.getAllValueSymbolNames(members);
                if(parentResult) {
                    result = result.concat(parentResult);
                }
            }
            return result;
        };
        SymbolScopeBuilder.prototype.search = function (filter, name, publicOnly, typespace) {
            var sym = null;
            var table = (this.valueMembers == null) ? null : publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;
            var ambientTable = (this.ambientValueMembers == null) ? null : publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;
            if(typespace) {
                table = (this.enclosedTypes == null) ? null : publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;
                ambientTable = (this.ambientEnclosedTypes == null) ? null : publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;
            }
            if(ambientTable) {
                if((sym = ambientTable.lookup(name)) != null) {
                    if(filter.update(sym)) {
                        return sym;
                    }
                }
            }
            if(table) {
                if((sym = table.lookup(name)) != null) {
                    if(filter.update(sym)) {
                        return sym;
                    }
                }
            }
            if(this.parent) {
                sym = this.parent.search(filter, name, publicOnly, typespace);
                if(sym) {
                    if(filter.update(sym)) {
                        return sym;
                    }
                }
            }
            return filter.result;
        };
        SymbolScopeBuilder.prototype.print = function (outfile) {
            _super.prototype.print.call(this, outfile);
            if(this.ambientValueMembers) {
                this.ambientValueMembers.allMembers.map(function (key, s, context) {
                    var sym = s;
                    outfile.WriteLine("  " + key);
                }, null);
            }
            if(this.valueMembers) {
                this.valueMembers.allMembers.map(function (key, s, context) {
                    var sym = s;
                    outfile.WriteLine("  " + key);
                }, null);
            }
            if(this.ambientEnclosedTypes) {
                this.ambientEnclosedTypes.allMembers.map(function (key, s, context) {
                    var sym = s;
                    outfile.WriteLine("  " + key);
                }, null);
            }
            if(this.enclosedTypes) {
                this.enclosedTypes.allMembers.map(function (key, s, context) {
                    var sym = s;
                    outfile.WriteLine("  " + key);
                }, null);
            }
            if(this.parent) {
                this.parent.print(outfile);
            }
        };
        SymbolScopeBuilder.prototype.find = function (name, publicOnly, typespace) {
            var sym = null;
            var table = (this.valueMembers == null) ? null : publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;
            var ambientTable = (this.ambientValueMembers == null) ? null : publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;
            if(typespace) {
                table = (this.enclosedTypes == null) ? null : publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;
                ambientTable = (this.ambientEnclosedTypes == null) ? null : publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;
            }
            if(ambientTable && ((sym = ambientTable.lookup(name)) != null)) {
                return sym;
            }
            if(table && ((sym = table.lookup(name)) != null)) {
                return sym;
            }
            if(this.parent) {
                return this.parent.find(name, publicOnly, typespace);
            }
            return null;
        };
        SymbolScopeBuilder.prototype.findAmbient = function (name, publicOnly, typespace) {
            var sym = null;
            var ambientTable = (this.ambientValueMembers == null) ? null : publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;
            if(typespace) {
                ambientTable = (this.ambientEnclosedTypes == null) ? null : publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;
            }
            if(ambientTable && ((sym = ambientTable.lookup(name)) != null)) {
                return sym;
            }
            if(this.parent) {
                return this.parent.findAmbient(name, publicOnly, typespace);
            }
            return null;
        };
        SymbolScopeBuilder.prototype.findLocal = function (name, publicOnly, typespace) {
            var sym = null;
            var table = (this.valueMembers == null) ? null : publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;
            var ambientTable = (this.ambientValueMembers == null) ? null : publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;
            if(typespace) {
                table = (this.enclosedTypes == null) ? null : publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;
                ambientTable = (this.ambientEnclosedTypes == null) ? null : publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;
            }
            if(table) {
                if((sym = table.lookup(name)) != null) {
                    if(sym) {
                        return sym;
                    }
                }
            }
            if(ambientTable) {
                if((sym = ambientTable.lookup(name)) != null) {
                    if(sym) {
                        return sym;
                    }
                }
            }
            return null;
        };
        SymbolScopeBuilder.prototype.enter = function (container, ast, symbol, errorReporter, insertAsPublic, typespace, ambient) {
            var table = null;
            if(ambient) {
                if(typespace) {
                    table = (this.ambientEnclosedTypes == null) ? null : insertAsPublic ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.privateMembers;
                } else {
                    table = (this.ambientValueMembers == null) ? null : insertAsPublic ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.privateMembers;
                }
            } else {
                if(typespace) {
                    table = (this.enclosedTypes == null) ? null : insertAsPublic ? this.enclosedTypes.publicMembers : this.enclosedTypes.privateMembers;
                } else {
                    table = (this.valueMembers == null) ? null : insertAsPublic ? this.valueMembers.publicMembers : this.valueMembers.privateMembers;
                }
            }
            if(table) {
                if(!table.add(symbol.name, symbol)) {
                    errorReporter.duplicateIdentifier(ast, symbol.name);
                }
            } else {
                TypeScript.CompilerDiagnostics.Alert("YYYYY");
            }
            symbol.container = container;
        };
        SymbolScopeBuilder.prototype.getTable = function () {
            return this.valueMembers.allMembers;
        };
        return SymbolScopeBuilder;
    })(SymbolScope);
    TypeScript.SymbolScopeBuilder = SymbolScopeBuilder;    
    var FilteredSymbolScope = (function (_super) {
        __extends(FilteredSymbolScope, _super);
        function FilteredSymbolScope(scope, container, filter) {
                _super.call(this, container);
            this.scope = scope;
            this.filter = filter;
        }
        FilteredSymbolScope.prototype.print = function (outfile) {
            this.scope.print(outfile);
        };
        FilteredSymbolScope.prototype.find = function (name, publicOnly, typespace) {
            this.filter.reset();
            return this.scope.search(this.filter, name, publicOnly, typespace);
        };
        FilteredSymbolScope.prototype.findLocal = function (name, publicOnly, typespace) {
            return this.scope.findLocal(name, publicOnly, typespace);
        };
        return FilteredSymbolScope;
    })(SymbolScope);
    TypeScript.FilteredSymbolScope = FilteredSymbolScope;    
    var FilteredSymbolScopeBuilder = (function (_super) {
        __extends(FilteredSymbolScopeBuilder, _super);
        function FilteredSymbolScopeBuilder(valueMembers, parent, container, filter) {
                _super.call(this, valueMembers, null, null, null, parent, container);
            this.filter = filter;
        }
        FilteredSymbolScopeBuilder.prototype.findLocal = function (name, publicOnly, typespace) {
            var sym = _super.prototype.findLocal.call(this, name, publicOnly, typespace);
            if(sym) {
                if(!this.filter(sym)) {
                    return null;
                }
            }
            return sym;
        };
        FilteredSymbolScopeBuilder.prototype.search = function (filter, name, publicOnly, typespace) {
            throw new Error("please implement");
        };
        FilteredSymbolScopeBuilder.prototype.find = function (name, publicOnly, typespace) {
            var sym = _super.prototype.findLocal.call(this, name, publicOnly, typespace);
            if(sym) {
                if(!this.filter(sym)) {
                    return null;
                }
            }
            return _super.prototype.find.call(this, name, publicOnly, typespace);
        };
        return FilteredSymbolScopeBuilder;
    })(SymbolScopeBuilder);
    TypeScript.FilteredSymbolScopeBuilder = FilteredSymbolScopeBuilder;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (TokenID) {
        TokenID._map = [];
        TokenID._map[0] = "Any";
        TokenID.Any = 0;
        TokenID._map[1] = "Bool";
        TokenID.Bool = 1;
        TokenID._map[2] = "Break";
        TokenID.Break = 2;
        TokenID._map[3] = "Case";
        TokenID.Case = 3;
        TokenID._map[4] = "Catch";
        TokenID.Catch = 4;
        TokenID._map[5] = "Class";
        TokenID.Class = 5;
        TokenID._map[6] = "Const";
        TokenID.Const = 6;
        TokenID._map[7] = "Continue";
        TokenID.Continue = 7;
        TokenID._map[8] = "Debugger";
        TokenID.Debugger = 8;
        TokenID._map[9] = "Default";
        TokenID.Default = 9;
        TokenID._map[10] = "Delete";
        TokenID.Delete = 10;
        TokenID._map[11] = "Do";
        TokenID.Do = 11;
        TokenID._map[12] = "Else";
        TokenID.Else = 12;
        TokenID._map[13] = "Enum";
        TokenID.Enum = 13;
        TokenID._map[14] = "Export";
        TokenID.Export = 14;
        TokenID._map[15] = "Extends";
        TokenID.Extends = 15;
        TokenID._map[16] = "Declare";
        TokenID.Declare = 16;
        TokenID._map[17] = "False";
        TokenID.False = 17;
        TokenID._map[18] = "Finally";
        TokenID.Finally = 18;
        TokenID._map[19] = "For";
        TokenID.For = 19;
        TokenID._map[20] = "Function";
        TokenID.Function = 20;
        TokenID._map[21] = "Constructor";
        TokenID.Constructor = 21;
        TokenID._map[22] = "Get";
        TokenID.Get = 22;
        TokenID._map[23] = "If";
        TokenID.If = 23;
        TokenID._map[24] = "Implements";
        TokenID.Implements = 24;
        TokenID._map[25] = "Import";
        TokenID.Import = 25;
        TokenID._map[26] = "In";
        TokenID.In = 26;
        TokenID._map[27] = "InstanceOf";
        TokenID.InstanceOf = 27;
        TokenID._map[28] = "Interface";
        TokenID.Interface = 28;
        TokenID._map[29] = "Let";
        TokenID.Let = 29;
        TokenID._map[30] = "Module";
        TokenID.Module = 30;
        TokenID._map[31] = "New";
        TokenID.New = 31;
        TokenID._map[32] = "Number";
        TokenID.Number = 32;
        TokenID._map[33] = "Null";
        TokenID.Null = 33;
        TokenID._map[34] = "Package";
        TokenID.Package = 34;
        TokenID._map[35] = "Private";
        TokenID.Private = 35;
        TokenID._map[36] = "Protected";
        TokenID.Protected = 36;
        TokenID._map[37] = "Public";
        TokenID.Public = 37;
        TokenID._map[38] = "Return";
        TokenID.Return = 38;
        TokenID._map[39] = "Set";
        TokenID.Set = 39;
        TokenID._map[40] = "Static";
        TokenID.Static = 40;
        TokenID._map[41] = "String";
        TokenID.String = 41;
        TokenID._map[42] = "Super";
        TokenID.Super = 42;
        TokenID._map[43] = "Switch";
        TokenID.Switch = 43;
        TokenID._map[44] = "This";
        TokenID.This = 44;
        TokenID._map[45] = "Throw";
        TokenID.Throw = 45;
        TokenID._map[46] = "True";
        TokenID.True = 46;
        TokenID._map[47] = "Try";
        TokenID.Try = 47;
        TokenID._map[48] = "TypeOf";
        TokenID.TypeOf = 48;
        TokenID._map[49] = "Var";
        TokenID.Var = 49;
        TokenID._map[50] = "Void";
        TokenID.Void = 50;
        TokenID._map[51] = "With";
        TokenID.With = 51;
        TokenID._map[52] = "While";
        TokenID.While = 52;
        TokenID._map[53] = "Yield";
        TokenID.Yield = 53;
        TokenID._map[54] = "Semicolon";
        TokenID.Semicolon = 54;
        TokenID._map[55] = "OpenParen";
        TokenID.OpenParen = 55;
        TokenID._map[56] = "CloseParen";
        TokenID.CloseParen = 56;
        TokenID._map[57] = "OpenBracket";
        TokenID.OpenBracket = 57;
        TokenID._map[58] = "CloseBracket";
        TokenID.CloseBracket = 58;
        TokenID._map[59] = "OpenBrace";
        TokenID.OpenBrace = 59;
        TokenID._map[60] = "CloseBrace";
        TokenID.CloseBrace = 60;
        TokenID._map[61] = "Comma";
        TokenID.Comma = 61;
        TokenID._map[62] = "Equals";
        TokenID.Equals = 62;
        TokenID._map[63] = "PlusEquals";
        TokenID.PlusEquals = 63;
        TokenID._map[64] = "MinusEquals";
        TokenID.MinusEquals = 64;
        TokenID._map[65] = "AsteriskEquals";
        TokenID.AsteriskEquals = 65;
        TokenID._map[66] = "SlashEquals";
        TokenID.SlashEquals = 66;
        TokenID._map[67] = "PercentEquals";
        TokenID.PercentEquals = 67;
        TokenID._map[68] = "AmpersandEquals";
        TokenID.AmpersandEquals = 68;
        TokenID._map[69] = "CaretEquals";
        TokenID.CaretEquals = 69;
        TokenID._map[70] = "BarEquals";
        TokenID.BarEquals = 70;
        TokenID._map[71] = "LessThanLessThanEquals";
        TokenID.LessThanLessThanEquals = 71;
        TokenID._map[72] = "GreaterThanGreaterThanEquals";
        TokenID.GreaterThanGreaterThanEquals = 72;
        TokenID._map[73] = "GreaterThanGreaterThanGreaterThanEquals";
        TokenID.GreaterThanGreaterThanGreaterThanEquals = 73;
        TokenID._map[74] = "Question";
        TokenID.Question = 74;
        TokenID._map[75] = "Colon";
        TokenID.Colon = 75;
        TokenID._map[76] = "BarBar";
        TokenID.BarBar = 76;
        TokenID._map[77] = "AmpersandAmpersand";
        TokenID.AmpersandAmpersand = 77;
        TokenID._map[78] = "Bar";
        TokenID.Bar = 78;
        TokenID._map[79] = "Caret";
        TokenID.Caret = 79;
        TokenID._map[80] = "And";
        TokenID.And = 80;
        TokenID._map[81] = "EqualsEquals";
        TokenID.EqualsEquals = 81;
        TokenID._map[82] = "ExclamationEquals";
        TokenID.ExclamationEquals = 82;
        TokenID._map[83] = "EqualsEqualsEquals";
        TokenID.EqualsEqualsEquals = 83;
        TokenID._map[84] = "ExclamationEqualsEquals";
        TokenID.ExclamationEqualsEquals = 84;
        TokenID._map[85] = "LessThan";
        TokenID.LessThan = 85;
        TokenID._map[86] = "LessThanEquals";
        TokenID.LessThanEquals = 86;
        TokenID._map[87] = "GreaterThan";
        TokenID.GreaterThan = 87;
        TokenID._map[88] = "GreaterThanEquals";
        TokenID.GreaterThanEquals = 88;
        TokenID._map[89] = "LessThanLessThan";
        TokenID.LessThanLessThan = 89;
        TokenID._map[90] = "GreaterThanGreaterThan";
        TokenID.GreaterThanGreaterThan = 90;
        TokenID._map[91] = "GreaterThanGreaterThanGreaterThan";
        TokenID.GreaterThanGreaterThanGreaterThan = 91;
        TokenID._map[92] = "Plus";
        TokenID.Plus = 92;
        TokenID._map[93] = "Minus";
        TokenID.Minus = 93;
        TokenID._map[94] = "Asterisk";
        TokenID.Asterisk = 94;
        TokenID._map[95] = "Slash";
        TokenID.Slash = 95;
        TokenID._map[96] = "Percent";
        TokenID.Percent = 96;
        TokenID._map[97] = "Tilde";
        TokenID.Tilde = 97;
        TokenID._map[98] = "Exclamation";
        TokenID.Exclamation = 98;
        TokenID._map[99] = "PlusPlus";
        TokenID.PlusPlus = 99;
        TokenID._map[100] = "MinusMinus";
        TokenID.MinusMinus = 100;
        TokenID._map[101] = "Dot";
        TokenID.Dot = 101;
        TokenID._map[102] = "DotDotDot";
        TokenID.DotDotDot = 102;
        TokenID._map[103] = "Error";
        TokenID.Error = 103;
        TokenID._map[104] = "EndOfFile";
        TokenID.EndOfFile = 104;
        TokenID._map[105] = "EqualsGreaterThan";
        TokenID.EqualsGreaterThan = 105;
        TokenID._map[106] = "Identifier";
        TokenID.Identifier = 106;
        TokenID._map[107] = "StringLiteral";
        TokenID.StringLiteral = 107;
        TokenID._map[108] = "RegularExpressionLiteral";
        TokenID.RegularExpressionLiteral = 108;
        TokenID._map[109] = "NumberLiteral";
        TokenID.NumberLiteral = 109;
        TokenID._map[110] = "Whitespace";
        TokenID.Whitespace = 110;
        TokenID._map[111] = "Comment";
        TokenID.Comment = 111;
        TokenID._map[112] = "Lim";
        TokenID.Lim = 112;
        TokenID.LimFixed = TokenID.EqualsGreaterThan;
        TokenID.LimKeyword = TokenID.Yield;
    })(TypeScript.TokenID || (TypeScript.TokenID = {}));
    var TokenID = TypeScript.TokenID;
    TypeScript.tokenTable = new Array();
    TypeScript.nodeTypeTable = new Array();
    TypeScript.nodeTypeToTokTable = new Array();
    TypeScript.noRegexTable = new Array();
    TypeScript.noRegexTable[106 /* Identifier */ ] = true;
    TypeScript.noRegexTable[107 /* StringLiteral */ ] = true;
    TypeScript.noRegexTable[109 /* NumberLiteral */ ] = true;
    TypeScript.noRegexTable[108 /* RegularExpressionLiteral */ ] = true;
    TypeScript.noRegexTable[44 /* This */ ] = true;
    TypeScript.noRegexTable[99 /* PlusPlus */ ] = true;
    TypeScript.noRegexTable[100 /* MinusMinus */ ] = true;
    TypeScript.noRegexTable[56 /* CloseParen */ ] = true;
    TypeScript.noRegexTable[58 /* CloseBracket */ ] = true;
    TypeScript.noRegexTable[60 /* CloseBrace */ ] = true;
    TypeScript.noRegexTable[46 /* True */ ] = true;
    TypeScript.noRegexTable[17 /* False */ ] = true;
    (function (OperatorPrecedence) {
        OperatorPrecedence._map = [];
        OperatorPrecedence._map[0] = "None";
        OperatorPrecedence.None = 0;
        OperatorPrecedence._map[1] = "Comma";
        OperatorPrecedence.Comma = 1;
        OperatorPrecedence._map[2] = "Assignment";
        OperatorPrecedence.Assignment = 2;
        OperatorPrecedence._map[3] = "Conditional";
        OperatorPrecedence.Conditional = 3;
        OperatorPrecedence._map[4] = "LogicalOr";
        OperatorPrecedence.LogicalOr = 4;
        OperatorPrecedence._map[5] = "LogicalAnd";
        OperatorPrecedence.LogicalAnd = 5;
        OperatorPrecedence._map[6] = "BitwiseOr";
        OperatorPrecedence.BitwiseOr = 6;
        OperatorPrecedence._map[7] = "BitwiseExclusiveOr";
        OperatorPrecedence.BitwiseExclusiveOr = 7;
        OperatorPrecedence._map[8] = "BitwiseAnd";
        OperatorPrecedence.BitwiseAnd = 8;
        OperatorPrecedence._map[9] = "Equality";
        OperatorPrecedence.Equality = 9;
        OperatorPrecedence._map[10] = "Relational";
        OperatorPrecedence.Relational = 10;
        OperatorPrecedence._map[11] = "Shift";
        OperatorPrecedence.Shift = 11;
        OperatorPrecedence._map[12] = "Additive";
        OperatorPrecedence.Additive = 12;
        OperatorPrecedence._map[13] = "Multiplicative";
        OperatorPrecedence.Multiplicative = 13;
        OperatorPrecedence._map[14] = "Unary";
        OperatorPrecedence.Unary = 14;
        OperatorPrecedence._map[15] = "Lim";
        OperatorPrecedence.Lim = 15;
    })(TypeScript.OperatorPrecedence || (TypeScript.OperatorPrecedence = {}));
    var OperatorPrecedence = TypeScript.OperatorPrecedence;
    (function (Reservation) {
        Reservation._map = [];
        Reservation.None = 0;
        Reservation.Javascript = 1;
        Reservation.JavascriptFuture = 2;
        Reservation.TypeScript = 4;
        Reservation.JavascriptFutureStrict = 8;
        Reservation.TypeScriptAndJS = Reservation.Javascript | Reservation.TypeScript;
        Reservation.TypeScriptAndJSFuture = Reservation.JavascriptFuture | Reservation.TypeScript;
        Reservation.TypeScriptAndJSFutureStrict = Reservation.JavascriptFutureStrict | Reservation.TypeScript;
    })(TypeScript.Reservation || (TypeScript.Reservation = {}));
    var Reservation = TypeScript.Reservation;
    var TokenInfo = (function () {
        function TokenInfo(tokenId, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text, ers) {
            this.tokenId = tokenId;
            this.reservation = reservation;
            this.binopPrecedence = binopPrecedence;
            this.binopNodeType = binopNodeType;
            this.unopPrecedence = unopPrecedence;
            this.unopNodeType = unopNodeType;
            this.text = text;
            this.ers = ers;
        }
        return TokenInfo;
    })();
    TypeScript.TokenInfo = TokenInfo;    
    function setTokenInfo(tokenId, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text, ers) {
        if(tokenId !== undefined) {
            TypeScript.tokenTable[tokenId] = new TokenInfo(tokenId, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text, ers);
            if(binopNodeType != 0 /* None */ ) {
                TypeScript.nodeTypeTable[binopNodeType] = text;
                TypeScript.nodeTypeToTokTable[binopNodeType] = tokenId;
            }
            if(unopNodeType != 0 /* None */ ) {
                TypeScript.nodeTypeTable[unopNodeType] = text;
            }
        }
    }
    setTokenInfo(0 /* Any */ , 4 /* TypeScript */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "any", 512 /* PrimType */ );
    setTokenInfo(1 /* Bool */ , 4 /* TypeScript */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "bool", 512 /* PrimType */ );
    setTokenInfo(2 /* Break */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "break", 4194304 /* Stmt */ );
    setTokenInfo(3 /* Case */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "case", 262144 /* SCase */ );
    setTokenInfo(4 /* Catch */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "catch", 1048576 /* Catch */ );
    setTokenInfo(5 /* Class */ , Reservation.TypeScriptAndJSFuture, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "class", 1073741824 /* TypeScriptS */ );
    setTokenInfo(6 /* Const */ , Reservation.TypeScriptAndJSFuture, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "const", 2097152 /* Var */ );
    setTokenInfo(7 /* Continue */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "continue", 4194304 /* Stmt */ );
    setTokenInfo(8 /* Debugger */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 106 /* Debugger */ , "debugger", 4194304 /* Stmt */ );
    setTokenInfo(9 /* Default */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "default", 262144 /* SCase */ );
    setTokenInfo(10 /* Delete */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 14 /* Unary */ , 16 /* Delete */ , "delete", 33554432 /* Prefix */ );
    setTokenInfo(11 /* Do */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "do", 4194304 /* Stmt */ );
    setTokenInfo(12 /* Else */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "else", 524288 /* Else */ );
    setTokenInfo(13 /* Enum */ , Reservation.TypeScriptAndJSFuture, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "enum", 1073741824 /* TypeScriptS */ );
    setTokenInfo(14 /* Export */ , Reservation.TypeScriptAndJSFuture, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "export", 1073741824 /* TypeScriptS */ );
    setTokenInfo(15 /* Extends */ , Reservation.TypeScriptAndJSFuture, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "extends", 0 /* None */ );
    setTokenInfo(16 /* Declare */ , 4 /* TypeScript */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "declare", 4194304 /* Stmt */ );
    setTokenInfo(17 /* False */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "false", 134217728 /* RLit */ );
    setTokenInfo(18 /* Finally */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "finally", 1048576 /* Catch */ );
    setTokenInfo(19 /* For */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "for", 4194304 /* Stmt */ );
    setTokenInfo(20 /* Function */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "function", 268435456 /* Func */ );
    setTokenInfo(21 /* Constructor */ , Reservation.TypeScriptAndJSFutureStrict, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "constructor", 268435456 /* Func */ );
    setTokenInfo(22 /* Get */ , 4 /* TypeScript */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "get", 268435456 /* Func */ );
    setTokenInfo(39 /* Set */ , 4 /* TypeScript */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "set", 268435456 /* Func */ );
    setTokenInfo(23 /* If */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "if", 4194304 /* Stmt */ );
    setTokenInfo(24 /* Implements */ , Reservation.TypeScriptAndJSFutureStrict, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "implements", 0 /* None */ );
    setTokenInfo(25 /* Import */ , Reservation.TypeScriptAndJSFuture, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "import", 1073741824 /* TypeScriptS */ );
    setTokenInfo(26 /* In */ , Reservation.TypeScriptAndJS, 10 /* Relational */ , 18 /* In */ , 0 /* None */ , 0 /* None */ , "in", 0 /* None */ );
    setTokenInfo(27 /* InstanceOf */ , Reservation.TypeScriptAndJS, 10 /* Relational */ , 22 /* InstOf */ , 0 /* None */ , 0 /* None */ , "instanceof", 8 /* BinOp */ );
    setTokenInfo(28 /* Interface */ , Reservation.TypeScriptAndJSFutureStrict, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "interface", 1073741824 /* TypeScriptS */ );
    setTokenInfo(29 /* Let */ , 8 /* JavascriptFutureStrict */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "let", 0 /* None */ );
    setTokenInfo(30 /* Module */ , 4 /* TypeScript */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "module", 1073741824 /* TypeScriptS */ );
    setTokenInfo(31 /* New */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "new", 4096 /* PreOp */ );
    setTokenInfo(32 /* Number */ , 4 /* TypeScript */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "number", 512 /* PrimType */ );
    setTokenInfo(33 /* Null */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "null", 134217728 /* RLit */ );
    setTokenInfo(34 /* Package */ , 8 /* JavascriptFutureStrict */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "package", 0 /* None */ );
    setTokenInfo(35 /* Private */ , Reservation.TypeScriptAndJSFutureStrict, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "private", 1073741824 /* TypeScriptS */ );
    setTokenInfo(36 /* Protected */ , 8 /* JavascriptFutureStrict */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "protected", 0 /* None */ );
    setTokenInfo(37 /* Public */ , Reservation.TypeScriptAndJSFutureStrict, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "public", 1073741824 /* TypeScriptS */ );
    setTokenInfo(38 /* Return */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "return", 4194304 /* Stmt */ );
    setTokenInfo(40 /* Static */ , Reservation.TypeScriptAndJSFutureStrict, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "static", 0 /* None */ );
    setTokenInfo(41 /* String */ , 4 /* TypeScript */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "string", 512 /* PrimType */ );
    setTokenInfo(42 /* Super */ , Reservation.TypeScriptAndJSFuture, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "super", 134217728 /* RLit */ );
    setTokenInfo(43 /* Switch */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "switch", 4194304 /* Stmt */ );
    setTokenInfo(44 /* This */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "this", 134217728 /* RLit */ );
    setTokenInfo(45 /* Throw */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "throw", 4194304 /* Stmt */ );
    setTokenInfo(46 /* True */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "true", 134217728 /* RLit */ );
    setTokenInfo(47 /* Try */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "try", 4194304 /* Stmt */ );
    setTokenInfo(48 /* TypeOf */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 14 /* Unary */ , 23 /* Typeof */ , "typeof", 33554432 /* Prefix */ );
    setTokenInfo(49 /* Var */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "var", 2097152 /* Var */ );
    setTokenInfo(50 /* Void */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 14 /* Unary */ , 12 /* Void */ , "void", 33554432 /* Prefix */ );
    setTokenInfo(51 /* With */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 98 /* With */ , "with", 4194304 /* Stmt */ );
    setTokenInfo(52 /* While */ , Reservation.TypeScriptAndJS, 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "while", 8388608 /* While */ );
    setTokenInfo(53 /* Yield */ , 8 /* JavascriptFutureStrict */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "yield", 0 /* None */ );
    setTokenInfo(106 /* Identifier */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "identifier", 16777216 /* ID */ );
    setTokenInfo(109 /* NumberLiteral */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "numberLiteral", 67108864 /* Literal */ );
    setTokenInfo(108 /* RegularExpressionLiteral */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "regex", 8192 /* RegExp */ );
    setTokenInfo(107 /* StringLiteral */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "qstring", 67108864 /* Literal */ );
    setTokenInfo(54 /* Semicolon */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , ";", 2 /* SColon */ );
    setTokenInfo(56 /* CloseParen */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , ")", 64 /* RParen */ );
    setTokenInfo(58 /* CloseBracket */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "]", 16 /* RBrack */ );
    setTokenInfo(59 /* OpenBrace */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "{", 2048 /* LCurly */ );
    setTokenInfo(60 /* CloseBrace */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "}", 32 /* RCurly */ );
    setTokenInfo(102 /* DotDotDot */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "...", 0 /* None */ );
    setTokenInfo(61 /* Comma */ , 0 /* None */ , 1 /* Comma */ , 13 /* Comma */ , 0 /* None */ , 0 /* None */ , ",", 1 /* Comma */ );
    setTokenInfo(62 /* Equals */ , 0 /* None */ , 2 /* Assignment */ , 30 /* Asg */ , 0 /* None */ , 0 /* None */ , "=", 4 /* Asg */ );
    setTokenInfo(63 /* PlusEquals */ , 0 /* None */ , 2 /* Assignment */ , 31 /* AsgAdd */ , 0 /* None */ , 0 /* None */ , "+=", 8 /* BinOp */ );
    setTokenInfo(64 /* MinusEquals */ , 0 /* None */ , 2 /* Assignment */ , 32 /* AsgSub */ , 0 /* None */ , 0 /* None */ , "-=", 8 /* BinOp */ );
    setTokenInfo(65 /* AsteriskEquals */ , 0 /* None */ , 2 /* Assignment */ , 34 /* AsgMul */ , 0 /* None */ , 0 /* None */ , "*=", 8 /* BinOp */ );
    setTokenInfo(66 /* SlashEquals */ , 0 /* None */ , 2 /* Assignment */ , 33 /* AsgDiv */ , 0 /* None */ , 0 /* None */ , "/=", 8 /* BinOp */ );
    setTokenInfo(67 /* PercentEquals */ , 0 /* None */ , 2 /* Assignment */ , 35 /* AsgMod */ , 0 /* None */ , 0 /* None */ , "%=", 8 /* BinOp */ );
    setTokenInfo(68 /* AmpersandEquals */ , 0 /* None */ , 2 /* Assignment */ , 36 /* AsgAnd */ , 0 /* None */ , 0 /* None */ , "&=", 8 /* BinOp */ );
    setTokenInfo(69 /* CaretEquals */ , 0 /* None */ , 2 /* Assignment */ , 37 /* AsgXor */ , 0 /* None */ , 0 /* None */ , "^=", 8 /* BinOp */ );
    setTokenInfo(70 /* BarEquals */ , 0 /* None */ , 2 /* Assignment */ , 38 /* AsgOr */ , 0 /* None */ , 0 /* None */ , "|=", 8 /* BinOp */ );
    setTokenInfo(71 /* LessThanLessThanEquals */ , 0 /* None */ , 2 /* Assignment */ , 39 /* AsgLsh */ , 0 /* None */ , 0 /* None */ , "<<=", 8 /* BinOp */ );
    setTokenInfo(72 /* GreaterThanGreaterThanEquals */ , 0 /* None */ , 2 /* Assignment */ , 40 /* AsgRsh */ , 0 /* None */ , 0 /* None */ , ">>=", 8 /* BinOp */ );
    setTokenInfo(73 /* GreaterThanGreaterThanGreaterThanEquals */ , 0 /* None */ , 2 /* Assignment */ , 41 /* AsgRs2 */ , 0 /* None */ , 0 /* None */ , ">>>=", 8 /* BinOp */ );
    setTokenInfo(74 /* Question */ , 0 /* None */ , 3 /* Conditional */ , 42 /* ConditionalExpression */ , 0 /* None */ , 0 /* None */ , "?", 8 /* BinOp */ );
    setTokenInfo(75 /* Colon */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , ":", 256 /* Colon */ );
    setTokenInfo(76 /* BarBar */ , 0 /* None */ , 4 /* LogicalOr */ , 43 /* LogOr */ , 0 /* None */ , 0 /* None */ , "||", 8 /* BinOp */ );
    setTokenInfo(77 /* AmpersandAmpersand */ , 0 /* None */ , 5 /* LogicalAnd */ , 44 /* LogAnd */ , 0 /* None */ , 0 /* None */ , "&&", 8 /* BinOp */ );
    setTokenInfo(78 /* Bar */ , 0 /* None */ , 6 /* BitwiseOr */ , 45 /* Or */ , 0 /* None */ , 0 /* None */ , "|", 8 /* BinOp */ );
    setTokenInfo(79 /* Caret */ , 0 /* None */ , 7 /* BitwiseExclusiveOr */ , 46 /* Xor */ , 0 /* None */ , 0 /* None */ , "^", 8 /* BinOp */ );
    setTokenInfo(80 /* And */ , 0 /* None */ , 8 /* BitwiseAnd */ , 47 /* And */ , 0 /* None */ , 0 /* None */ , "&", 8 /* BinOp */ );
    setTokenInfo(81 /* EqualsEquals */ , 0 /* None */ , 9 /* Equality */ , 48 /* Eq */ , 0 /* None */ , 0 /* None */ , "==", 8 /* BinOp */ );
    setTokenInfo(82 /* ExclamationEquals */ , 0 /* None */ , 9 /* Equality */ , 49 /* Ne */ , 0 /* None */ , 0 /* None */ , "!=", 8 /* BinOp */ );
    setTokenInfo(83 /* EqualsEqualsEquals */ , 0 /* None */ , 9 /* Equality */ , 50 /* Eqv */ , 0 /* None */ , 0 /* None */ , "===", 8 /* BinOp */ );
    setTokenInfo(84 /* ExclamationEqualsEquals */ , 0 /* None */ , 9 /* Equality */ , 51 /* NEqv */ , 0 /* None */ , 0 /* None */ , "!==", 8 /* BinOp */ );
    setTokenInfo(85 /* LessThan */ , 0 /* None */ , 10 /* Relational */ , 52 /* Lt */ , 0 /* None */ , 0 /* None */ , "<", 8 /* BinOp */ );
    setTokenInfo(86 /* LessThanEquals */ , 0 /* None */ , 10 /* Relational */ , 53 /* Le */ , 0 /* None */ , 0 /* None */ , "<=", 8 /* BinOp */ );
    setTokenInfo(87 /* GreaterThan */ , 0 /* None */ , 10 /* Relational */ , 54 /* Gt */ , 0 /* None */ , 0 /* None */ , ">", 8 /* BinOp */ );
    setTokenInfo(88 /* GreaterThanEquals */ , 0 /* None */ , 10 /* Relational */ , 55 /* Ge */ , 0 /* None */ , 0 /* None */ , ">=", 8 /* BinOp */ );
    setTokenInfo(89 /* LessThanLessThan */ , 0 /* None */ , 11 /* Shift */ , 61 /* Lsh */ , 0 /* None */ , 0 /* None */ , "<<", 8 /* BinOp */ );
    setTokenInfo(90 /* GreaterThanGreaterThan */ , 0 /* None */ , 11 /* Shift */ , 62 /* Rsh */ , 0 /* None */ , 0 /* None */ , ">>", 8 /* BinOp */ );
    setTokenInfo(91 /* GreaterThanGreaterThanGreaterThan */ , 0 /* None */ , 11 /* Shift */ , 63 /* Rs2 */ , 0 /* None */ , 0 /* None */ , ">>>", 8 /* BinOp */ );
    setTokenInfo(92 /* Plus */ , 0 /* None */ , 12 /* Additive */ , 56 /* Add */ , 14 /* Unary */ , 14 /* Pos */ , "+", 1024 /* AddOp */ );
    setTokenInfo(93 /* Minus */ , 0 /* None */ , 12 /* Additive */ , 57 /* Sub */ , 14 /* Unary */ , 15 /* Neg */ , "-", 1024 /* AddOp */ );
    setTokenInfo(94 /* Asterisk */ , 0 /* None */ , 13 /* Multiplicative */ , 58 /* Mul */ , 0 /* None */ , 0 /* None */ , "*", 8 /* BinOp */ );
    setTokenInfo(95 /* Slash */ , 0 /* None */ , 13 /* Multiplicative */ , 59 /* Div */ , 0 /* None */ , 0 /* None */ , "/", 8 /* BinOp */ );
    setTokenInfo(96 /* Percent */ , 0 /* None */ , 13 /* Multiplicative */ , 60 /* Mod */ , 0 /* None */ , 0 /* None */ , "%", 8 /* BinOp */ );
    setTokenInfo(97 /* Tilde */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 14 /* Unary */ , 64 /* Not */ , "~", 4096 /* PreOp */ );
    setTokenInfo(98 /* Exclamation */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 14 /* Unary */ , 65 /* LogNot */ , "!", 4096 /* PreOp */ );
    setTokenInfo(99 /* PlusPlus */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 14 /* Unary */ , 66 /* IncPre */ , "++", 4096 /* PreOp */ );
    setTokenInfo(100 /* MinusMinus */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 14 /* Unary */ , 67 /* DecPre */ , "--", 4096 /* PreOp */ );
    setTokenInfo(55 /* OpenParen */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "(", 16384 /* LParen */ );
    setTokenInfo(57 /* OpenBracket */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "[", 32768 /* LBrack */ );
    setTokenInfo(101 /* Dot */ , 0 /* None */ , 14 /* Unary */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , ".", 128 /* Dot */ );
    setTokenInfo(104 /* EndOfFile */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "<EOF>", 536870912 /* EOF */ );
    setTokenInfo(105 /* EqualsGreaterThan */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , 0 /* None */ , "=>", 0 /* None */ );
    function lookupToken(tokenId) {
        return TypeScript.tokenTable[tokenId];
    }
    TypeScript.lookupToken = lookupToken;
    (function (TokenClass) {
        TokenClass._map = [];
        TokenClass._map[0] = "Punctuation";
        TokenClass.Punctuation = 0;
        TokenClass._map[1] = "Keyword";
        TokenClass.Keyword = 1;
        TokenClass._map[2] = "Operator";
        TokenClass.Operator = 2;
        TokenClass._map[3] = "Comment";
        TokenClass.Comment = 3;
        TokenClass._map[4] = "Whitespace";
        TokenClass.Whitespace = 4;
        TokenClass._map[5] = "Identifier";
        TokenClass.Identifier = 5;
        TokenClass._map[6] = "Literal";
        TokenClass.Literal = 6;
    })(TypeScript.TokenClass || (TypeScript.TokenClass = {}));
    var TokenClass = TypeScript.TokenClass;
    var SavedToken = (function () {
        function SavedToken(tok, minChar, limChar) {
            this.tok = tok;
            this.minChar = minChar;
            this.limChar = limChar;
        }
        return SavedToken;
    })();
    TypeScript.SavedToken = SavedToken;    
    var Token = (function () {
        function Token(tokenId) {
            this.tokenId = tokenId;
        }
        Token.prototype.toString = function () {
            return "token: " + this.tokenId + " " + this.getText() + " (" + (TokenID)._map[this.tokenId] + ")";
        };
        Token.prototype.print = function (line, outfile) {
            outfile.WriteLine(this.toString() + ",on line" + line);
        };
        Token.prototype.getText = function () {
            return TypeScript.tokenTable[this.tokenId].text;
        };
        Token.prototype.classification = function () {
            if(this.tokenId <= TokenID.LimKeyword) {
                return 1 /* Keyword */ ;
            } else {
                var tokenInfo = lookupToken(this.tokenId);
                if(tokenInfo != undefined) {
                    if((tokenInfo.unopNodeType != 0 /* None */ ) || (tokenInfo.binopNodeType != 0 /* None */ )) {
                        return 2 /* Operator */ ;
                    }
                }
            }
            return 0 /* Punctuation */ ;
        };
        return Token;
    })();
    TypeScript.Token = Token;    
    var NumberLiteralToken = (function (_super) {
        __extends(NumberLiteralToken, _super);
        function NumberLiteralToken(value, hasEmptyFraction) {
                _super.call(this, 109 /* NumberLiteral */ );
            this.value = value;
            this.hasEmptyFraction = hasEmptyFraction;
        }
        NumberLiteralToken.prototype.getText = function () {
            return this.hasEmptyFraction ? this.value.toString() + ".0" : this.value.toString();
        };
        NumberLiteralToken.prototype.classification = function () {
            return 6 /* Literal */ ;
        };
        return NumberLiteralToken;
    })(Token);
    TypeScript.NumberLiteralToken = NumberLiteralToken;    
    var StringLiteralToken = (function (_super) {
        __extends(StringLiteralToken, _super);
        function StringLiteralToken(value) {
                _super.call(this, 107 /* StringLiteral */ );
            this.value = value;
        }
        StringLiteralToken.prototype.getText = function () {
            return this.value;
        };
        StringLiteralToken.prototype.classification = function () {
            return 6 /* Literal */ ;
        };
        return StringLiteralToken;
    })(Token);
    TypeScript.StringLiteralToken = StringLiteralToken;    
    var IdentifierToken = (function (_super) {
        __extends(IdentifierToken, _super);
        function IdentifierToken(value, hasEscapeSequence) {
                _super.call(this, 106 /* Identifier */ );
            this.value = value;
            this.hasEscapeSequence = hasEscapeSequence;
        }
        IdentifierToken.prototype.getText = function () {
            return this.value;
        };
        IdentifierToken.prototype.classification = function () {
            return 5 /* Identifier */ ;
        };
        return IdentifierToken;
    })(Token);
    TypeScript.IdentifierToken = IdentifierToken;    
    var WhitespaceToken = (function (_super) {
        __extends(WhitespaceToken, _super);
        function WhitespaceToken(tokenId, value) {
                _super.call(this, tokenId);
            this.value = value;
        }
        WhitespaceToken.prototype.getText = function () {
            return this.value;
        };
        WhitespaceToken.prototype.classification = function () {
            return 4 /* Whitespace */ ;
        };
        return WhitespaceToken;
    })(Token);
    TypeScript.WhitespaceToken = WhitespaceToken;    
    var CommentToken = (function (_super) {
        __extends(CommentToken, _super);
        function CommentToken(tokenID, value, isBlock, startPos, line, endsLine) {
                _super.call(this, tokenID);
            this.value = value;
            this.isBlock = isBlock;
            this.startPos = startPos;
            this.line = line;
            this.endsLine = endsLine;
        }
        CommentToken.prototype.getText = function () {
            return this.value;
        };
        CommentToken.prototype.classification = function () {
            return 3 /* Comment */ ;
        };
        return CommentToken;
    })(Token);
    TypeScript.CommentToken = CommentToken;    
    var RegularExpressionLiteralToken = (function (_super) {
        __extends(RegularExpressionLiteralToken, _super);
        function RegularExpressionLiteralToken(regex) {
                _super.call(this, 108 /* RegularExpressionLiteral */ );
            this.regex = regex;
        }
        RegularExpressionLiteralToken.prototype.getText = function () {
            return this.regex.toString();
        };
        RegularExpressionLiteralToken.prototype.classification = function () {
            return 6 /* Literal */ ;
        };
        return RegularExpressionLiteralToken;
    })(Token);
    TypeScript.RegularExpressionLiteralToken = RegularExpressionLiteralToken;    
    TypeScript.staticTokens = new Array();
    function initializeStaticTokens() {
        for(var i = 0; i <= TokenID.LimFixed; i++) {
            TypeScript.staticTokens[i] = new Token(i);
        }
    }
    TypeScript.initializeStaticTokens = initializeStaticTokens;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var ArrayCache = (function () {
        function ArrayCache() {
            this.arrayBase = null;
        }
        ArrayCache.prototype.specialize = function (arrInstType, checker) {
            if(this.arrayBase == null) {
                this.arrayBase = arrInstType.specializeType(checker.wildElm.type, this.arrayType.elementType, checker, true);
            }
            return this.arrayBase;
        };
        return ArrayCache;
    })();
    TypeScript.ArrayCache = ArrayCache;    
    var TypeComparisonInfo = (function () {
        function TypeComparisonInfo() {
            this.onlyCaptureFirstError = false;
            this.flags = 0 /* SuccessfulComparison */ ;
            this.message = "";
        }
        TypeComparisonInfo.prototype.addMessageToFront = function (message) {
            if(!this.onlyCaptureFirstError) {
                this.message = this.message ? message + ":\n\t" + this.message : message;
            } else {
                this.setMessage(message);
            }
        };
        TypeComparisonInfo.prototype.setMessage = function (message) {
            this.message = message;
        };
        return TypeComparisonInfo;
    })();
    TypeScript.TypeComparisonInfo = TypeComparisonInfo;    
    (function (TypeCheckCollectionMode) {
        TypeCheckCollectionMode._map = [];
        TypeCheckCollectionMode._map[0] = "Resident";
        TypeCheckCollectionMode.Resident = 0;
        TypeCheckCollectionMode._map[1] = "Transient";
        TypeCheckCollectionMode.Transient = 1;
    })(TypeScript.TypeCheckCollectionMode || (TypeScript.TypeCheckCollectionMode = {}));
    var TypeCheckCollectionMode = TypeScript.TypeCheckCollectionMode;
    var PersistentGlobalTypeState = (function () {
        function PersistentGlobalTypeState(errorReporter) {
            this.errorReporter = errorReporter;
            this.importedGlobalsTable = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
            this.importedGlobalsTypeTable = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
            this.globals = null;
            this.globalTypes = null;
            this.ambientGlobals = null;
            this.ambientGlobalTypes = null;
            this.residentGlobalValues = new TypeScript.StringHashTable();
            this.residentGlobalTypes = new TypeScript.StringHashTable();
            this.residentGlobalAmbientValues = new TypeScript.StringHashTable();
            this.residentGlobalAmbientTypes = new TypeScript.StringHashTable();
            this.residentTypeCheck = true;
            this.mod = null;
            this.gloMod = null;
            this.wildElm = null;
            this.importedGlobals = new TypeScript.SymbolScopeBuilder(null, this.importedGlobalsTable, null, this.importedGlobalsTypeTable, null, null);
            this.dualGlobalValues = new TypeScript.DualStringHashTable(this.residentGlobalValues, new TypeScript.StringHashTable());
            this.dualGlobalTypes = new TypeScript.DualStringHashTable(this.residentGlobalTypes, new TypeScript.StringHashTable());
            this.dualAmbientGlobalValues = new TypeScript.DualStringHashTable(this.residentGlobalAmbientValues, new TypeScript.StringHashTable());
            this.dualAmbientGlobalTypes = new TypeScript.DualStringHashTable(this.residentGlobalAmbientTypes, new TypeScript.StringHashTable());
            var dualGlobalScopedMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(this.dualGlobalValues, new TypeScript.StringHashTable()));
            var dualGlobalScopedAmbientMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(this.dualAmbientGlobalValues, new TypeScript.StringHashTable()));
            var dualGlobalScopedEnclosedTypes = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(this.dualGlobalTypes, new TypeScript.StringHashTable()));
            var dualGlobalScopedAmbientEnclosedTypes = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(this.dualAmbientGlobalTypes, new TypeScript.StringHashTable()));
            this.globalScope = new TypeScript.SymbolScopeBuilder(dualGlobalScopedMembers, dualGlobalScopedAmbientMembers, dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes, this.importedGlobals, null);
            this.voidType = this.enterPrimitive(1 /* Void */ , "void");
            this.booleanType = this.enterPrimitive(8 /* Boolean */ , "bool");
            this.doubleType = this.enterPrimitive(2 /* Double */ , "number");
            this.importedGlobals.ambientEnclosedTypes.addPublicMember("number", this.doubleType.symbol);
            this.stringType = this.enterPrimitive(4 /* String */ , "string");
            this.anyType = this.enterPrimitive(16 /* Any */ , "any");
            this.nullType = this.enterPrimitive(32 /* Null */ , "null");
            this.undefinedType = this.enterPrimitive(64 /* Undefined */ , "undefined");
            this.setCollectionMode(0 /* Resident */ );
            this.wildElm = new TypeScript.TypeSymbol("_element", 0, -1, new TypeScript.Type());
            this.importedGlobalsTypeTable.addPublicMember(this.wildElm.name, this.wildElm);
            this.mod = new TypeScript.ModuleType(dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes);
            this.mod.members = dualGlobalScopedMembers;
            this.mod.ambientMembers = dualGlobalScopedAmbientMembers;
            this.mod.containedScope = this.globalScope;
            this.gloMod = new TypeScript.TypeSymbol(TypeScript.globalId, 0, -1, this.mod);
            this.mod.members.addPublicMember(this.gloMod.name, this.gloMod);
            this.defineGlobalValue("undefined", this.undefinedType);
        }
        PersistentGlobalTypeState.prototype.enterPrimitive = function (flags, name) {
            var primitive = new TypeScript.Type();
            primitive.primitiveTypeClass = flags;
            var symbol = new TypeScript.TypeSymbol(name, 0, -1, primitive);
            symbol.typeCheckStatus = 2 /* Finished */ ;
            primitive.symbol = symbol;
            this.importedGlobals.enter(null, null, symbol, this.errorReporter, true, true, true);
            return primitive;
        };
        PersistentGlobalTypeState.prototype.setCollectionMode = function (mode) {
            this.residentTypeCheck = this.dualGlobalValues.insertPrimary = this.dualGlobalTypes.insertPrimary = this.dualAmbientGlobalValues.insertPrimary = this.dualAmbientGlobalTypes.insertPrimary = mode == 0 /* Resident */ ;
        };
        PersistentGlobalTypeState.prototype.refreshPersistentState = function () {
            this.globals = new TypeScript.StringHashTable();
            this.globalTypes = new TypeScript.StringHashTable();
            this.ambientGlobals = new TypeScript.StringHashTable();
            this.ambientGlobalTypes = new TypeScript.StringHashTable();
            this.globalTypes.add(this.voidType.symbol.name, this.voidType.symbol);
            this.globalTypes.add(this.booleanType.symbol.name, this.booleanType.symbol);
            this.globalTypes.add(this.doubleType.symbol.name, this.doubleType.symbol);
            this.globalTypes.add("number", this.doubleType.symbol);
            this.globalTypes.add(this.stringType.symbol.name, this.stringType.symbol);
            this.globalTypes.add(this.anyType.symbol.name, this.anyType.symbol);
            this.globalTypes.add(this.nullType.symbol.name, this.nullType.symbol);
            this.globalTypes.add(this.undefinedType.symbol.name, this.undefinedType.symbol);
            this.dualGlobalValues.secondaryTable = this.globals;
            this.dualGlobalTypes.secondaryTable = this.globalTypes;
            this.dualAmbientGlobalValues.secondaryTable = this.ambientGlobals;
            this.dualAmbientGlobalTypes.secondaryTable = this.ambientGlobalTypes;
        };
        PersistentGlobalTypeState.prototype.defineGlobalValue = function (name, type) {
            var valueLocation = new TypeScript.ValueLocation();
            valueLocation.typeLink = new TypeScript.TypeLink();
            var sym = new TypeScript.VariableSymbol(name, 0, -1, valueLocation);
            sym.setType(type);
            sym.typeCheckStatus = 2 /* Finished */ ;
            sym.container = this.gloMod;
            this.importedGlobalsTable.addPublicMember(name, sym);
        };
        return PersistentGlobalTypeState;
    })();
    TypeScript.PersistentGlobalTypeState = PersistentGlobalTypeState;    
    var ContextualTypeContext = (function () {
        function ContextualTypeContext(contextualType, provisional, contextID) {
            this.contextualType = contextualType;
            this.provisional = provisional;
            this.contextID = contextID;
            this.targetSig = null;
            this.targetThis = null;
            this.targetAccessorType = null;
        }
        return ContextualTypeContext;
    })();
    TypeScript.ContextualTypeContext = ContextualTypeContext;    
    var ContextualTypingContextStack = (function () {
        function ContextualTypingContextStack(checker) {
            this.checker = checker;
            this.contextStack = [];
            this.hadProvisionalErrors = false;
        }
        ContextualTypingContextStack.contextID = 2 /* Finished */  + 1;
        ContextualTypingContextStack.prototype.pushContextualType = function (type, provisional) {
            this.contextStack.push(new ContextualTypeContext(type, provisional, ContextualTypingContextStack.contextID++));
            this.checker.errorReporter.pushToErrorSink = provisional;
        };
        ContextualTypingContextStack.prototype.popContextualType = function () {
            var tc = this.contextStack.pop();
            this.checker.errorReporter.pushToErrorSink = this.isProvisional();
            this.hadProvisionalErrors = this.hadProvisionalErrors || (tc.provisional && (this.checker.errorReporter.getCapturedErrors().length));
            this.checker.errorReporter.freeCapturedErrors();
            return tc;
        };
        ContextualTypingContextStack.prototype.getContextualType = function () {
            return (!this.contextStack.length ? null : this.contextStack[this.contextStack.length - 1]);
        };
        ContextualTypingContextStack.prototype.getContextID = function () {
            return (!this.contextStack.length ? 2 /* Finished */  : this.contextStack[this.contextStack.length - 1].contextID);
        };
        ContextualTypingContextStack.prototype.isProvisional = function () {
            return (!this.contextStack.length ? false : this.contextStack[this.contextStack.length - 1].provisional);
        };
        return ContextualTypingContextStack;
    })();
    TypeScript.ContextualTypingContextStack = ContextualTypingContextStack;    
    var TypeChecker = (function () {
        function TypeChecker(persistentState) {
            this.persistentState = persistentState;
            this.errorReporter = null;
            this.checkControlFlow = false;
            this.printControlFlowGraph = false;
            this.checkControlFlowUseDef = false;
            this.styleSettings = null;
            this.units = null;
            this.anon = "_anonymous";
            this.locationInfo = null;
            this.typeFlow = null;
            this.currentCompareA = null;
            this.currentCompareB = null;
            this.currentModDecl = null;
            this.inBind = false;
            this.inWith = false;
            this.errorsOnWith = true;
            this.currentContextualTypeContext = null;
            this.resolvingBases = false;
            this.canCallDefinitionSignature = false;
            this.assignableCache = {
            };
            this.subtypeCache = {
            };
            this.identicalCache = {
            };
            this.provisionalStartedTypecheckObjects = [];
            this.mustCaptureGlobalThis = false;
            this.voidType = this.persistentState.voidType;
            this.booleanType = this.persistentState.booleanType;
            this.numberType = this.persistentState.doubleType;
            this.stringType = this.persistentState.stringType;
            this.anyType = this.persistentState.anyType;
            this.nullType = this.persistentState.nullType;
            this.undefinedType = this.persistentState.undefinedType;
            this.globals = this.persistentState.dualGlobalValues;
            this.globalTypes = this.persistentState.dualGlobalTypes;
            this.ambientGlobals = this.persistentState.dualAmbientGlobalValues;
            this.ambientGlobalTypes = this.persistentState.dualAmbientGlobalTypes;
            this.gloModType = this.persistentState.mod;
            this.gloMod = this.persistentState.gloMod;
            this.wildElm = this.persistentState.wildElm;
            this.globalScope = this.persistentState.globalScope;
            this.typingContextStack = new ContextualTypingContextStack(this);
        }
        TypeChecker.prototype.setStyleOptions = function (style) {
            this.styleSettings = style;
        };
        TypeChecker.prototype.setContextualType = function (type, provisional) {
            this.typingContextStack.pushContextualType(type, provisional);
            this.currentContextualTypeContext = this.typingContextStack.getContextualType();
        };
        TypeChecker.prototype.unsetContextualType = function () {
            var lastTC = this.typingContextStack.popContextualType();
            this.currentContextualTypeContext = this.typingContextStack.getContextualType();
            return lastTC;
        };
        TypeChecker.prototype.hadProvisionalErrors = function () {
            return this.typingContextStack.hadProvisionalErrors;
        };
        TypeChecker.prototype.resetProvisionalErrors = function () {
            if(!this.typingContextStack.getContextualType()) {
                this.typingContextStack.hadProvisionalErrors = false;
            }
        };
        TypeChecker.prototype.typeCheckWithContextualType = function (contextType, provisional, condition, ast) {
            if(condition) {
                this.setContextualType(contextType, this.typingContextStack.isProvisional() || provisional);
            }
            this.typeFlow.typeCheck(ast);
            if(condition) {
                this.unsetContextualType();
            }
        };
        TypeChecker.prototype.resetTargetType = function () {
            this.currentContextualTypeContext = this.typingContextStack.getContextualType();
        };
        TypeChecker.prototype.killCurrentContextualType = function () {
            this.currentContextualTypeContext = null;
            this.errorReporter.pushToErrorSink = false;
        };
        TypeChecker.prototype.hasTargetType = function () {
            return this.currentContextualTypeContext && this.currentContextualTypeContext.contextualType;
        };
        TypeChecker.prototype.getTargetTypeContext = function () {
            return this.currentContextualTypeContext;
        };
        TypeChecker.prototype.inProvisionalTypecheckMode = function () {
            return this.typingContextStack.isProvisional();
        };
        TypeChecker.prototype.getTypeCheckFinishedStatus = function () {
            if(this.inProvisionalTypecheckMode()) {
                return this.typingContextStack.getContextID();
            }
            return 2 /* Finished */ ;
        };
        TypeChecker.prototype.typeStatusIsFinished = function (status) {
            return status == 2 /* Finished */  || (this.inProvisionalTypecheckMode() && status == this.typingContextStack.getContextID());
        };
        TypeChecker.prototype.addStartedPTO = function (pto) {
            if(this.inProvisionalTypecheckMode()) {
                this.provisionalStartedTypecheckObjects[this.provisionalStartedTypecheckObjects.length] = pto;
            }
        };
        TypeChecker.prototype.cleanStartedPTO = function () {
            for(var i = 0; i < this.provisionalStartedTypecheckObjects.length; i++) {
                if(this.provisionalStartedTypecheckObjects[i].typeCheckStatus == this.typingContextStack.getContextID()) {
                    this.provisionalStartedTypecheckObjects[i].typeCheckStatus = 0 /* NotStarted */ ;
                }
            }
            this.provisionalStartedTypecheckObjects = [];
        };
        TypeChecker.prototype.collectTypes = function (ast) {
            if(ast.nodeType == 93 /* Script */ ) {
                var script = ast;
                this.locationInfo = script.locationInfo;
            }
            var globalChain = new TypeScript.ScopeChain(this.gloMod, null, this.globalScope);
            var context = new TypeScript.TypeCollectionContext(globalChain, this);
            TypeScript.getAstWalkerFactory().walk(ast, TypeScript.preCollectTypes, TypeScript.postCollectTypes, null, context);
        };
        TypeChecker.prototype.makeArrayType = function (type) {
            if(type.arrayCache == null) {
                type.arrayCache = new ArrayCache();
                type.arrayCache.arrayType = new TypeScript.Type();
                type.arrayCache.arrayType.elementType = type;
                type.arrayCache.arrayType.symbol = type.symbol;
            }
            return type.arrayCache.arrayType;
        };
        TypeChecker.prototype.getParameterList = function (args, container) {
            var parameterTable = null;
            var parameterBuilder = null;
            var len = args.members.length;
            var nonOptionalParams = 0;
            var result = [];
            if(len > 0) {
                parameterTable = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
                parameterBuilder = new TypeScript.SymbolScopeBuilder(parameterTable, null, null, null, null, container);
                for(var i = 0; i < len; i++) {
                    var parameter = args.members[i];
                    var paramDef = new TypeScript.ValueLocation();
                    var parameterSymbol = new TypeScript.ParameterSymbol(parameter.id.text, parameter.minChar, this.locationInfo.unitIndex, paramDef);
                    parameterSymbol.declAST = parameter;
                    parameter.id.sym = parameterSymbol;
                    parameter.sym = parameterSymbol;
                    paramDef.symbol = parameterSymbol;
                    paramDef.typeLink = TypeScript.getTypeLink(parameter.typeExpr, this, false);
                    parameterBuilder.enter(null, parameter, parameterSymbol, this.errorReporter, true, false, false);
                    result[result.length] = parameterSymbol;
                    if(!parameter.isOptionalArg()) {
                        nonOptionalParams++;
                    }
                }
            }
            return {
                parameters: result,
                nonOptionalParameterCount: nonOptionalParams
            };
        };
        TypeChecker.prototype.createFunctionSignature = function (funcDecl, container, scope, overloadGroupSym, addToScope) {
            var isExported = TypeScript.hasFlag(funcDecl.fncFlags, 1 /* Exported */  | 524288 /* ClassPropertyMethodExported */ ) || container == this.gloMod;
            var isStatic = TypeScript.hasFlag(funcDecl.fncFlags, 16 /* Static */ );
            var isPrivate = TypeScript.hasFlag(funcDecl.fncFlags, 2 /* Private */ );
            var isDefinition = TypeScript.hasFlag(funcDecl.fncFlags, 256 /* Definition */ );
            var isAmbient = TypeScript.hasFlag(funcDecl.fncFlags, 8 /* Ambient */ );
            var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;
            var isGlobal = container == this.gloMod;
            var signature = new TypeScript.Signature();
            var isLambda = funcDecl.fncFlags & 131072 /* IsFunctionExpression */ ;
            if(funcDecl.returnTypeAnnotation || isDefinition) {
                signature.returnType = TypeScript.getTypeLink(funcDecl.returnTypeAnnotation, this, false);
            } else {
                signature.returnType = new TypeScript.TypeLink();
                signature.returnType.type = this.anyType;
            }
            signature.hasVariableArgList = funcDecl.variableArgList;
            var sigData = this.getParameterList(funcDecl.arguments, container);
            signature.parameters = sigData.parameters;
            signature.nonOptionalParameterCount = sigData.nonOptionalParameterCount;
            funcDecl.signature = signature;
            signature.declAST = funcDecl;
            var useOverloadGroupSym = overloadGroupSym && overloadGroupSym.getType() && !overloadGroupSym.isAccessor() && (funcDecl.isSignature() || (isAmbient == TypeScript.hasFlag(overloadGroupSym.flags, 8 /* Ambient */ )));
            if(useOverloadGroupSym && isPrivate != TypeScript.hasFlag(overloadGroupSym.flags, 2 /* Private */ )) {
                this.errorReporter.simpleError(funcDecl, "Public/Private visibility of overloads does not agree");
            }
            var groupType = useOverloadGroupSym ? overloadGroupSym.getType() : new TypeScript.Type();
            if(isConstructor) {
                if(groupType.construct == null) {
                    groupType.construct = new TypeScript.SignatureGroup();
                }
                groupType.construct.addSignature(signature);
                groupType.construct.hasImplementation = !(funcDecl.isSignature());
                if(groupType.construct.hasImplementation) {
                    groupType.setHasImplementation();
                }
            } else {
                if(funcDecl.isIndexerMember()) {
                    if(groupType.index == null) {
                        groupType.index = new TypeScript.SignatureGroup();
                        groupType.index.flags |= 1 /* IsIndexer */ ;
                    }
                    groupType.index.addSignature(signature);
                    groupType.index.hasImplementation = !(funcDecl.isSignature());
                    if(groupType.index.hasImplementation) {
                        groupType.setHasImplementation();
                    }
                } else {
                    if(groupType.call == null) {
                        groupType.call = new TypeScript.SignatureGroup();
                    }
                    groupType.call.addSignature(signature);
                    groupType.call.hasImplementation = !(funcDecl.isSignature());
                    if(groupType.call.hasImplementation) {
                        groupType.setHasImplementation();
                    }
                }
            }
            var instanceType = groupType.instanceType;
            var funcName = null;
            var usedHint = false;
            if(funcDecl.name && !funcDecl.name.isMissing()) {
                funcName = funcDecl.name.text;
            } else {
                if(funcDecl.hint) {
                    funcName = funcDecl.hint;
                    usedHint = true;
                }
            }
            if(groupType.symbol == null) {
                groupType.symbol = new TypeScript.TypeSymbol(funcName ? funcName : this.anon, funcDecl.minChar, this.locationInfo.unitIndex, groupType);
                if(!useOverloadGroupSym) {
                    groupType.symbol.declAST = funcDecl;
                }
            }
            if(isStatic) {
                groupType.symbol.flags |= 16 /* Static */ ;
            }
            if(isAmbient) {
                groupType.symbol.flags |= 8 /* Ambient */ ;
            }
            if(isPrivate) {
                groupType.symbol.flags |= 2 /* Private */ ;
            }
            groupType.symbol.isMethod = funcDecl.isMethod();
            if(groupType.symbol.isMethod) {
                groupType.symbol.flags |= 256 /* Property */ ;
            }
            funcDecl.type = groupType;
            if(!isConstructor) {
                if(funcName && !isLambda && !funcDecl.isAccessor() && !usedHint) {
                    if(addToScope) {
                        if(funcDecl.isMethod() && isStatic) {
                            if(!(container).type.members.publicMembers.add(funcName, groupType.symbol)) {
                                this.errorReporter.duplicateIdentifier(funcDecl, funcName);
                            }
                            groupType.symbol.container = container;
                        } else {
                            if(overloadGroupSym == null || (overloadGroupSym.declAST && !(overloadGroupSym.declAST).isOverload && (container.isType()))) {
                                scope.enter(container, funcDecl, groupType.symbol, this.errorReporter, !isPrivate && (isExported || isStatic || isGlobal), false, isAmbient);
                            }
                        }
                    } else {
                        if(!funcDecl.isSpecialFn()) {
                            groupType.symbol.container = container;
                        }
                    }
                } else {
                    if(!funcDecl.isSpecialFn()) {
                        groupType.symbol.container = container;
                    }
                }
            }
            if(useOverloadGroupSym) {
                var overloadGroupType = overloadGroupSym ? overloadGroupSym.getType() : null;
                var classType = groupType;
                if(classType != overloadGroupType) {
                    if(classType.construct == null) {
                        if(overloadGroupType && overloadGroupType.construct) {
                            classType.construct = overloadGroupType.construct;
                        } else {
                            classType.construct = new TypeScript.SignatureGroup();
                        }
                    } else {
                        if(overloadGroupType) {
                            if(overloadGroupType.construct) {
                                classType.construct.signatures.concat(overloadGroupType.construct.signatures);
                            }
                        }
                    }
                    if(overloadGroupType) {
                        if(classType.call == null) {
                            classType.call = overloadGroupType.call;
                        } else {
                            if(overloadGroupType.call) {
                                classType.call.signatures.concat(overloadGroupType.call.signatures);
                            }
                        }
                        if(!isStatic) {
                            if(classType.instanceType == null) {
                                classType.instanceType = overloadGroupType.instanceType;
                            }
                            var instanceType = classType.instanceType;
                            if(instanceType) {
                                if(instanceType.call == null) {
                                    instanceType.call = overloadGroupType.call;
                                } else {
                                    if(overloadGroupType.call) {
                                        instanceType.call.signatures.concat(overloadGroupType.call.signatures);
                                    }
                                }
                            }
                        }
                        if(classType.index == null) {
                            classType.index = overloadGroupType.index;
                        } else {
                            if(overloadGroupType.index) {
                                classType.index.signatures.concat(overloadGroupType.index.signatures);
                            }
                        }
                    }
                }
            }
            return signature;
        };
        TypeChecker.prototype.createAccessorSymbol = function (funcDecl, fgSym, enclosingClass, addToMembers, isClassProperty, scope, container) {
            var accessorSym = null;
            var sig = funcDecl.signature;
            var nameText = funcDecl.name.text;
            var isStatic = TypeScript.hasFlag(funcDecl.fncFlags, 16 /* Static */ );
            var isPrivate = TypeScript.hasFlag(funcDecl.fncFlags, 2 /* Private */ );
            if(fgSym == null) {
                var field = new TypeScript.ValueLocation();
                accessorSym = new TypeScript.FieldSymbol(nameText, funcDecl.minChar, this.locationInfo.unitIndex, false, field);
                field.symbol = accessorSym;
                accessorSym.declAST = funcDecl;
                if(TypeScript.hasFlag(funcDecl.fncFlags, 64 /* GetAccessor */ )) {
                    if(accessorSym.getter) {
                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property getter");
                    }
                    accessorSym.getter = sig.declAST.type.symbol;
                } else {
                    if(accessorSym.setter) {
                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property setter");
                    }
                    accessorSym.setter = sig.declAST.type.symbol;
                }
                field.typeLink = TypeScript.getTypeLink(null, this, false);
                if(addToMembers) {
                    if(enclosingClass) {
                        if(!enclosingClass.members.publicMembers.add(nameText, accessorSym)) {
                            this.errorReporter.duplicateIdentifier(funcDecl, accessorSym.name);
                        }
                        accessorSym.container = enclosingClass.symbol;
                    } else {
                        this.errorReporter.simpleError(funcDecl, "Accessor property may not be added in this context");
                    }
                } else {
                    scope.enter(container, funcDecl, accessorSym, this.errorReporter, !isPrivate || isStatic, false, false);
                }
                if(isClassProperty) {
                    accessorSym.flags |= 256 /* Property */ ;
                }
                if(isStatic) {
                    accessorSym.flags |= 16 /* Static */ ;
                }
                if(isPrivate) {
                    accessorSym.flags |= 2 /* Private */ ;
                } else {
                    accessorSym.flags |= 4 /* Public */ ;
                }
            } else {
                accessorSym = (fgSym);
                if(isPrivate != TypeScript.hasFlag(accessorSym.flags, 2 /* Private */ )) {
                    this.errorReporter.simpleError(funcDecl, "Getter and setter accessors do not agree in visibility");
                }
                if(TypeScript.hasFlag(funcDecl.fncFlags, 64 /* GetAccessor */ )) {
                    if(accessorSym.getter) {
                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property getter");
                    }
                    accessorSym.getter = funcDecl.type.symbol;
                } else {
                    if(accessorSym.setter) {
                        this.errorReporter.simpleError(funcDecl, "Redeclaration of property setter");
                    }
                    accessorSym.setter = funcDecl.type.symbol;
                }
            }
            return accessorSym;
        };
        TypeChecker.prototype.addBases = function (resultScope, type, baseContext) {
            resultScope.addParentScope(new TypeScript.SymbolTableScope(type.members, type.ambientMembers, type.getAllEnclosedTypes(), type.getAllAmbientEnclosedTypes(), type.symbol));
            var i = 0;
            var parent;
            if(type.extendsList) {
                for(var len = type.extendsList.length; i < len; i++) {
                    parent = type.extendsList[i];
                    if(baseContext.baseId == parent.typeID) {
                        this.errorReporter.reportErrorFromSym(parent.symbol, "Type '" + baseContext.base + "' is recursively referenced as a base class of itself");
                        parent.symbol.flags |= 131072 /* RecursivelyReferenced */ ;
                        break;
                    }
                    this.addBases(resultScope, parent, baseContext);
                }
            }
        };
        TypeChecker.prototype.scopeOf = function (type) {
            var resultScope = new TypeScript.SymbolAggregateScope(type.symbol);
            var baseContext = {
                base: type.symbol && type.symbol.name ? type.symbol.name : "{}",
                baseId: type.typeID
            };
            this.addBases(resultScope, type, baseContext);
            return resultScope;
        };
        TypeChecker.prototype.lookupMemberType = function (containingType, name) {
            var symbol = null;
            if(containingType.containedScope) {
                symbol = containingType.containedScope.find(name, false, true);
            } else {
                if(containingType.members) {
                    symbol = containingType.members.allMembers.lookup(name);
                    if(symbol == null && containingType.ambientMembers) {
                        symbol = containingType.ambientMembers.allMembers.lookup(name);
                    }
                }
            }
            if(symbol == null) {
                var typeMembers = containingType.getAllEnclosedTypes();
                var ambientTypeMembers = containingType.getAllAmbientEnclosedTypes();
                if(typeMembers) {
                    symbol = typeMembers.allMembers.lookup(name);
                    if(symbol == null && ambientTypeMembers) {
                        symbol = ambientTypeMembers.allMembers.lookup(name);
                    }
                }
            }
            if(symbol && symbol.isType()) {
                return symbol.getType();
            } else {
                return null;
            }
        };
        TypeChecker.prototype.findSymbolForDynamicModule = function (idText, currentFileName, search) {
            var originalIdText = idText;
            var symbol = search(idText);
            if(symbol == null) {
                if(!symbol) {
                    idText = TypeScript.swapQuotes(originalIdText);
                    symbol = search(idText);
                }
                if(!symbol) {
                    idText = TypeScript.stripQuotes(originalIdText) + ".ts";
                    symbol = search(idText);
                }
                if(!symbol) {
                    idText = TypeScript.stripQuotes(originalIdText) + ".str";
                    symbol = search(idText);
                }
                if(!symbol) {
                    idText = TypeScript.stripQuotes(originalIdText) + ".d.ts";
                    symbol = search(idText);
                }
                if(!symbol) {
                    idText = TypeScript.stripQuotes(originalIdText) + ".d.str";
                    symbol = search(idText);
                }
                if(!symbol && !TypeScript.isRelative(originalIdText)) {
                    idText = originalIdText;
                    var strippedIdText = TypeScript.stripQuotes(idText);
                    var path = TypeScript.getRootFilePath(TypeScript.switchToForwardSlashes(currentFileName));
                    while(symbol == null && path != "") {
                        idText = TypeScript.normalizePath(path + strippedIdText + ".ts");
                        symbol = search(idText);
                        if(symbol == null) {
                            idText = TypeScript.changePathToSTR(idText);
                            symbol = search(idText);
                        }
                        if(symbol == null) {
                            idText = TypeScript.changePathToDTS(idText);
                            symbol = search(idText);
                        }
                        if(symbol == null) {
                            idText = TypeScript.changePathToDSTR(idText);
                            symbol = search(idText);
                        }
                        if(symbol == null) {
                            if(path === '/') {
                                path = '';
                            } else {
                                path = TypeScript.normalizePath(path + "..");
                                path = path && path != '/' ? path + '/' : path;
                            }
                        }
                    }
                }
            }
            return symbol;
        };
        TypeChecker.prototype.resolveTypeMember = function (scope, dotNode) {
            var lhs = dotNode.operand1;
            var rhs = dotNode.operand2;
            var resultType = this.anyType;
            var lhsType = this.anyType;
            if(lhs && rhs && (rhs.nodeType == 25 /* Name */ )) {
                if(lhs.nodeType == 19 /* Dot */ ) {
                    lhsType = this.resolveTypeMember(scope, lhs);
                } else {
                    if(lhs.nodeType == 25 /* Name */ ) {
                        var identifier = lhs;
                        var symbol = scope.find(identifier.text, false, true);
                        if(symbol == null) {
                            this.errorReporter.unresolvedSymbol(identifier, identifier.actualText);
                        } else {
                            if(symbol.isType()) {
                                var typeSymbol = symbol;
                                if(typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == 25 /* Name */ ) {
                                    var modPath = (typeSymbol.aliasLink.alias).text;
                                    var modSym = this.findSymbolForDynamicModule(modPath, this.locationInfo.filename, function (id) {
                                        return scope.find(id, false, true);
                                    });
                                    if(modSym) {
                                        typeSymbol.type = modSym.getType();
                                    }
                                }
                                if(TypeScript.optimizeModuleCodeGen && symbol) {
                                    var symType = symbol.getType();
                                    if(symType && typeSymbol.aliasLink && typeSymbol.onlyReferencedAsTypeRef) {
                                        var modDecl = symType.symbol.declAST;
                                        if(modDecl && TypeScript.hasFlag(modDecl.modFlags, 2048 /* IsDynamic */ )) {
                                            typeSymbol.onlyReferencedAsTypeRef = !this.resolvingBases;
                                        }
                                    }
                                }
                                if(!symbol.visible(scope, this)) {
                                    this.errorReporter.simpleError(lhs, "The symbol '" + identifier.actualText + "' is not visible at this point");
                                }
                                lhsType = symbol.getType();
                                identifier.sym = symbol;
                            } else {
                                this.errorReporter.simpleError(lhs, "Expected type");
                            }
                        }
                    }
                }
                if(!lhsType) {
                    lhsType = this.anyType;
                }
                if(lhsType != this.anyType) {
                    var rhsIdentifier = rhs;
                    resultType = this.lookupMemberType(lhsType, rhsIdentifier.text);
                    if(resultType == null) {
                        resultType = this.anyType;
                        this.errorReporter.simpleError(dotNode, "Expected type");
                    } else {
                        if(!resultType.symbol.visible(scope, this)) {
                            this.errorReporter.simpleError(lhs, "The symbol '" + (rhs).actualText + "' is not visible at this point");
                        }
                    }
                    rhsIdentifier.sym = resultType.symbol;
                }
            }
            if(resultType.isClass()) {
                resultType = resultType.instanceType;
            }
            return resultType;
        };
        TypeChecker.prototype.resolveFuncDecl = function (funcDecl, scope, fgSym) {
            var functionGroupSymbol = this.createFunctionSignature(funcDecl, scope.container, scope, fgSym, false).declAST.type.symbol;
            var signatures;
            if(funcDecl.isConstructMember()) {
                signatures = functionGroupSymbol.type.construct.signatures;
            } else {
                if(funcDecl.isIndexerMember()) {
                    signatures = functionGroupSymbol.type.getInstanceType().index.signatures;
                } else {
                    signatures = functionGroupSymbol.type.call.signatures;
                }
            }
            var signature = signatures[signatures.length - 1];
            var len = signature.parameters.length;
            for(var i = 0; i < len; i++) {
                var paramSym = signature.parameters[i];
                this.resolveTypeLink(scope, paramSym.parameter.typeLink, true);
            }
            if(len && funcDecl.variableArgList) {
                if(!signature.parameters[len - 1].parameter.typeLink.type.elementType) {
                    this.errorReporter.simpleErrorFromSym(signature.parameters[len - 1].parameter.symbol, "... parameter must have array type");
                    signature.parameters[len - 1].parameter.typeLink.type = this.makeArrayType(signature.parameters[len - 1].parameter.typeLink.type);
                }
            }
            this.resolveTypeLink(scope, signature.returnType, funcDecl.isSignature());
            return functionGroupSymbol;
        };
        TypeChecker.prototype.resolveVarDecl = function (varDecl, scope) {
            var field = new TypeScript.ValueLocation();
            var fieldSymbol = new TypeScript.FieldSymbol(varDecl.id.text, varDecl.minChar, this.locationInfo.unitIndex, (varDecl.varFlags & 1024 /* Readonly */ ) == 0 /* None */ , field);
            fieldSymbol.transferVarFlags(varDecl.varFlags);
            field.symbol = fieldSymbol;
            fieldSymbol.declAST = varDecl;
            field.typeLink = TypeScript.getTypeLink(varDecl.typeExpr, this, varDecl.init == null);
            this.resolveTypeLink(scope, field.typeLink, true);
            varDecl.sym = fieldSymbol;
            varDecl.type = field.typeLink.type;
            return fieldSymbol;
        };
        TypeChecker.prototype.resolveTypeLink = function (scope, typeLink, supplyVar) {
            var arrayCount = 0;
            if(typeLink.type == null) {
                var ast = typeLink.ast;
                if(ast) {
                    while(typeLink.type == null) {
                        switch(ast.nodeType) {
                            case 25 /* Name */ : {
                                var identifier = ast;
                                var symbol = scope.find(identifier.text, false, true);
                                if(symbol == null) {
                                    typeLink.type = this.anyType;
                                    this.errorReporter.unresolvedSymbol(identifier, identifier.actualText);
                                } else {
                                    if(symbol.isType()) {
                                        if(!symbol.visible(scope, this)) {
                                            this.errorReporter.simpleError(ast, "The symbol '" + identifier.actualText + "' is not visible at this point");
                                        }
                                        identifier.sym = symbol;
                                        typeLink.type = symbol.getType();
                                        if(typeLink.type) {
                                            if(typeLink.type.isClass()) {
                                                typeLink.type = typeLink.type.instanceType;
                                            }
                                        } else {
                                            typeLink.type = this.anyType;
                                        }
                                    } else {
                                        typeLink.type = this.anyType;
                                        this.errorReporter.simpleError(ast, "Expected type");
                                    }
                                }
                                break;

                            }
                            case 19 /* Dot */ : {
                                typeLink.type = this.resolveTypeMember(scope, ast);
                                break;

                            }
                            case 26 /* TypeRef */ : {
                                var typeRef = ast;
                                arrayCount = typeRef.arrayCount;
                                ast = typeRef.term;
                                if(ast == null) {
                                    typeLink.type = this.anyType;
                                }
                                break;

                            }
                            case 95 /* InterfaceDeclaration */ : {
                                var interfaceDecl = ast;
                                var interfaceType = new TypeScript.Type();
                                var interfaceSymbol = new TypeScript.TypeSymbol((interfaceDecl.name).text, ast.minChar, this.locationInfo.unitIndex, interfaceType);
                                interfaceType.symbol = interfaceSymbol;
                                interfaceType.members = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
                                interfaceType.containedScope = new TypeScript.SymbolTableScope(interfaceType.members, null, null, null, interfaceSymbol);
                                interfaceType.containedScope.container = interfaceSymbol;
                                interfaceType.memberScope = interfaceType.containedScope;
                                var memberList = interfaceDecl.members;
                                var props = memberList.members;
                                var propsLen = props.length;
                                for(var j = 0; j < propsLen; j++) {
                                    var propDecl = props[j];
                                    var propSym = null;
                                    var addMember = true;
                                    var id = null;
                                    if(propDecl.nodeType == 71 /* FuncDecl */ ) {
                                        var funcDecl = propDecl;
                                        id = funcDecl.name;
                                        propSym = interfaceType.members.allMembers.lookup(funcDecl.getNameText());
                                        addMember = (propSym == null);
                                        if(funcDecl.isSpecialFn()) {
                                            addMember = false;
                                            propSym = this.resolveFuncDecl(funcDecl, scope, interfaceSymbol);
                                        } else {
                                            propSym = this.resolveFuncDecl(funcDecl, scope, propSym);
                                        }
                                        funcDecl.type = (propSym).type;
                                    } else {
                                        id = (propDecl).id;
                                        propSym = this.resolveVarDecl(propDecl, scope);
                                    }
                                    if(addMember) {
                                        if(id && TypeScript.hasFlag(id.flags, 1024 /* OptionalName */ )) {
                                            propSym.flags |= 65536 /* Optional */ ;
                                        }
                                        if(!interfaceType.members.allMembers.add(propSym.name, propSym)) {
                                            this.errorReporter.duplicateIdentifier(ast, propSym.name);
                                        }
                                    }
                                }
                                ast.type = interfaceType;
                                typeLink.type = interfaceType;
                                break;

                            }
                            case 71 /* FuncDecl */ : {
                                var tsym = this.resolveFuncDecl(ast, scope, null);
                                typeLink.type = tsym.type;
                                break;

                            }
                            default: {
                                typeLink.type = this.anyType;
                                this.errorReporter.simpleError(ast, "Expected type");
                                break;

                            }
                        }
                    }
                }
                for(var count = arrayCount; count > 0; count--) {
                    typeLink.type = this.makeArrayType(typeLink.type);
                }
                if(supplyVar && (typeLink.type == null)) {
                    typeLink.type = this.anyType;
                }
                if(typeLink.ast) {
                    typeLink.ast.type = typeLink.type;
                }
            }
        };
        TypeChecker.prototype.findMostApplicableSignature = function (signatures, args) {
            if(signatures.length == 1) {
                return {
                    sig: signatures[0].signature,
                    ambiguous: false
                };
            }
            var best = signatures[0];
            var Q = null;
            var AType = null;
            var PType = null;
            var QType = null;
            var ambiguous = false;
            for(var qSig = 1; qSig < signatures.length; qSig++) {
                Q = signatures[qSig];
                var i = 0;
                for(i = 0; args && i < args.members.length; i++) {
                    AType = args.members[i].type;
                    PType = i < best.signature.parameters.length ? best.signature.parameters[i].getType() : best.signature.parameters[best.signature.parameters.length - 1].getType().elementType;
                    QType = i < Q.signature.parameters.length ? Q.signature.parameters[i].getType() : Q.signature.parameters[Q.signature.parameters.length - 1].getType().elementType;
                    if(this.typesAreIdentical(PType, QType)) {
                        continue;
                    } else {
                        if(this.typesAreIdentical(AType, PType)) {
                            break;
                        } else {
                            if(this.typesAreIdentical(AType, QType)) {
                                best = Q;
                                break;
                            } else {
                                if(this.sourceIsSubtypeOfTarget(PType, QType)) {
                                    break;
                                } else {
                                    if(this.sourceIsSubtypeOfTarget(QType, PType)) {
                                        best = Q;
                                        break;
                                    } else {
                                        if(Q.hadProvisionalErrors) {
                                            break;
                                        } else {
                                            if(best.hadProvisionalErrors) {
                                                best = Q;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if(!args || i == args.members.length) {
                    var collection = {
                        getLength: function () {
                            return 2;
                        },
                        setTypeAtIndex: function (index, type) {
                        },
                        getTypeAtIndex: function (index) {
                            return index ? Q.signature.returnType.type : best.signature.returnType.type;
                        }
                    };
                    var bct = this.findBestCommonType(best.signature.returnType.type, null, collection, false);
                    ambiguous = !bct;
                } else {
                    ambiguous = false;
                }
            }
            return {
                sig: best.signature,
                ambiguous: ambiguous
            };
        };
        TypeChecker.prototype.getApplicableSignatures = function (signatures, args, comparisonInfo) {
            var applicableSigs = [];
            var memberType = null;
            var miss = false;
            var cxt = null;
            var hadProvisionalErrors = false;
            for(var i = 0; i < signatures.length; i++) {
                miss = false;
                for(var j = 0; j < args.members.length; j++) {
                    if(j >= signatures[i].parameters.length) {
                        continue;
                    }
                    memberType = signatures[i].parameters[j].getType();
                    if(signatures[i].declAST.variableArgList && (j >= signatures[i].nonOptionalParameterCount - 1) && memberType.isArray()) {
                        memberType = memberType.elementType;
                    }
                    if(memberType == this.anyType) {
                        continue;
                    } else {
                        if(args.members[j].nodeType == 71 /* FuncDecl */ ) {
                            if(this.typeFlow.functionInterfaceType && memberType == this.typeFlow.functionInterfaceType) {
                                continue;
                            }
                            if(!this.canContextuallyTypeFunction(memberType, args.members[j], true)) {
                                if(this.canContextuallyTypeFunction(memberType, args.members[j], false)) {
                                    this.typeFlow.typeCheck(args.members[j]);
                                    if(!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {
                                        break;
                                    }
                                } else {
                                    break;
                                }
                            } else {
                                this.typeCheckWithContextualType(memberType, true, true, args.members[j]);
                                this.cleanStartedPTO();
                                hadProvisionalErrors = this.hadProvisionalErrors();
                                if(!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {
                                    if(comparisonInfo) {
                                        comparisonInfo.setMessage("Could not apply type '" + memberType.getTypeName() + "' to argument " + (j + 1) + ", which is of type '" + args.members[j].type.getTypeName() + "'");
                                    }
                                    miss = true;
                                }
                                this.resetProvisionalErrors();
                                if(miss) {
                                    break;
                                }
                            }
                        } else {
                            if(args.members[j].nodeType == 11 /* ObjectLit */ ) {
                                if(this.typeFlow.objectInterfaceType && memberType == this.typeFlow.objectInterfaceType) {
                                    continue;
                                }
                                this.typeCheckWithContextualType(memberType, true, true, args.members[j]);
                                this.cleanStartedPTO();
                                hadProvisionalErrors = this.hadProvisionalErrors();
                                if(!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {
                                    if(comparisonInfo) {
                                        comparisonInfo.setMessage("Could not apply type '" + memberType.getTypeName() + "' to argument " + (j + 1) + ", which is of type '" + args.members[j].type.getTypeName() + "'");
                                    }
                                    miss = true;
                                }
                                this.resetProvisionalErrors();
                                if(miss) {
                                    break;
                                }
                            } else {
                                if(args.members[j].nodeType == 10 /* ArrayLit */ ) {
                                    if(this.typeFlow.arrayInterfaceType && memberType == this.typeFlow.arrayInterfaceType) {
                                        continue;
                                    }
                                    this.typeCheckWithContextualType(memberType, true, true, args.members[j]);
                                    this.cleanStartedPTO();
                                    hadProvisionalErrors = this.hadProvisionalErrors();
                                    if(!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {
                                        if(comparisonInfo) {
                                            comparisonInfo.setMessage("Could not apply type '" + memberType.getTypeName() + "' to argument " + (j + 1) + ", which is of type '" + args.members[j].type.getTypeName() + "'");
                                        }
                                        break;
                                    }
                                    this.resetProvisionalErrors();
                                    if(miss) {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if(j == args.members.length) {
                    applicableSigs[applicableSigs.length] = {
                        signature: signatures[i],
                        hadProvisionalErrors: hadProvisionalErrors
                    };
                }
                hadProvisionalErrors = false;
            }
            return applicableSigs;
        };
        TypeChecker.prototype.canContextuallyTypeFunction = function (candidateType, funcDecl, beStringent) {
            if(funcDecl.isParenthesized || funcDecl.isMethod() || beStringent && funcDecl.returnTypeAnnotation || funcDecl.isInlineCallLiteral) {
                return false;
            }
            beStringent = beStringent || (this.typeFlow.functionInterfaceType == candidateType);
            if(!beStringent) {
                return true;
            }
            if(!funcDecl.signature) {
                this.createFunctionSignature(funcDecl, this.typeFlow.scope.container, this.typeFlow.scope, null, null);
                this.typeFlow.typeCheck(funcDecl);
            }
            var signature = funcDecl.signature;
            var paramLen = signature.parameters.length;
            for(var i = 0; i < paramLen; i++) {
                var param = signature.parameters[i];
                var symbol = param;
                var argDecl = symbol.declAST;
                if(beStringent && argDecl.typeExpr) {
                    return false;
                }
            }
            if(candidateType.construct && candidateType.call) {
                return false;
            }
            var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;
            if(!candidateSigs || candidateSigs.signatures.length > 1) {
                return false;
            }
            return true;
        };
        TypeChecker.prototype.canContextuallyTypeObjectLiteral = function (targetType, objectLit) {
            if(targetType == this.typeFlow.objectInterfaceType) {
                return true;
            }
            var memberDecls = objectLit.operand;
            if(!(memberDecls && targetType.memberScope)) {
                return false;
            }
            var id = null;
            var targetMember = null;
            var text = "";
            var foundSyms = {
            };
            for(var i = 0; i < memberDecls.members.length; i++) {
                id = (memberDecls.members[i]).operand1;
                if(id.nodeType == 25 /* Name */ ) {
                    text = (id).text;
                } else {
                    if(id.nodeType == 7 /* QString */ ) {
                        var idText = (id).text;
                        text = idText.substring(1, idText.length - 1);
                    } else {
                        return false;
                    }
                }
                targetMember = targetType.memberScope.find(text, true, false);
                if(!targetMember) {
                    return false;
                }
                foundSyms[text] = true;
            }
            var targetMembers = targetType.memberScope.getAllValueSymbolNames(true);
            for(var i = 0; i < targetMembers.length; i++) {
                var memberName = targetMembers[i];
                var memberSym = targetType.memberScope.find(memberName, true, false);
                if(!foundSyms[targetMembers[i]] && !TypeScript.hasFlag(memberSym.flags, 65536 /* Optional */ )) {
                    return false;
                }
            }
            return true;
        };
        TypeChecker.prototype.widenType = function (t) {
            if(t == this.undefinedType || t == this.nullType) {
                return this.anyType;
            }
            return t;
        };
        TypeChecker.prototype.isNullOrUndefinedType = function (t) {
            return t == this.undefinedType || t == this.nullType;
        };
        TypeChecker.prototype.findBestCommonType = function (initialType, targetType, collection, acceptVoid, comparisonInfo) {
            var i = 0;
            var len = collection.getLength();
            var nlastChecked = 0;
            var bestCommonType = initialType;
            if(targetType) {
                bestCommonType = bestCommonType ? bestCommonType.mergeOrdered(targetType, this, acceptVoid) : targetType;
            }
            var convergenceType = bestCommonType;
            while(nlastChecked < len) {
                for(i = 0; i < len; i++) {
                    if(i == nlastChecked) {
                        continue;
                    }
                    if(convergenceType && (bestCommonType = convergenceType.mergeOrdered(collection.getTypeAtIndex(i), this, acceptVoid, comparisonInfo))) {
                        convergenceType = bestCommonType;
                    }
                    if(bestCommonType == this.anyType || bestCommonType == null) {
                        break;
                    } else {
                        if(targetType) {
                            collection.setTypeAtIndex(i, targetType);
                        }
                    }
                }
                if(convergenceType && bestCommonType) {
                    break;
                }
                nlastChecked++;
                if(nlastChecked < len) {
                    convergenceType = collection.getTypeAtIndex(nlastChecked);
                }
            }
            return acceptVoid ? bestCommonType : (bestCommonType == this.voidType ? null : bestCommonType);
        };
        TypeChecker.prototype.typesAreIdentical = function (t1, t2) {
            if(t1 == t2) {
                return true;
            }
            if(!t1 || !t2) {
                return false;
            }
            if(t1.isClass() || t1.isClassInstance()) {
                return false;
            }
            var comboId = (t2.typeID << 16) | t1.typeID;
            if(this.identicalCache[comboId]) {
                return true;
            }
            if((t1.typeFlags & 8 /* IsEnum */ ) || (t2.typeFlags & 8 /* IsEnum */ )) {
                return false;
            }
            if(t1.isArray() || t2.isArray()) {
                if(!(t1.isArray() && t2.isArray())) {
                    return false;
                }
                this.identicalCache[comboId] = false;
                var ret = this.typesAreIdentical(t1.elementType, t2.elementType);
                if(ret) {
                    this.subtypeCache[comboId] = true;
                } else {
                    this.subtypeCache[comboId] = undefined;
                }
                return ret;
            }
            if(t1.primitiveTypeClass != t2.primitiveTypeClass) {
                return false;
            }
            this.identicalCache[comboId] = false;
            if(t1.memberScope && t2.memberScope) {
                var t1MemberKeys = t1.memberScope.getAllValueSymbolNames(true).sort();
                var t2MemberKeys = t2.memberScope.getAllValueSymbolNames(true).sort();
                if(t1MemberKeys.length != t2MemberKeys.length) {
                    this.identicalCache[comboId] = undefined;
                    return false;
                }
                var t1MemberSymbol = null;
                var t2MemberSymbol = null;
                var t1MemberType = null;
                var t2MemberType = null;
                for(var iMember = 0; iMember < t1MemberKeys.length; iMember++) {
                    if(t1MemberKeys[iMember] != t2MemberKeys[iMember]) {
                        this.identicalCache[comboId] = undefined;
                        return false;
                    }
                    t1MemberSymbol = t1.memberScope.find(t1MemberKeys[iMember], false, false);
                    t2MemberSymbol = t2.memberScope.find(t2MemberKeys[iMember], false, false);
                    if((t1MemberSymbol.flags & 65536 /* Optional */ ) != (t2MemberSymbol.flags & 65536 /* Optional */ )) {
                        this.identicalCache[comboId] = undefined;
                        return false;
                    }
                    t1MemberType = t1MemberSymbol.getType();
                    t2MemberType = t2MemberSymbol.getType();
                    if(t1MemberType && t2MemberType && (this.identicalCache[(t2MemberType.typeID << 16) | t1MemberType.typeID] != undefined)) {
                        continue;
                    }
                    if(!this.typesAreIdentical(t1MemberType, t2MemberType)) {
                        this.identicalCache[comboId] = undefined;
                        return false;
                    }
                }
            } else {
                if(t1.memberScope || t2.memberScope) {
                    this.identicalCache[comboId] = undefined;
                    return false;
                }
            }
            if(!this.signatureGroupsAreIdentical(t1.call, t2.call)) {
                this.identicalCache[comboId] = undefined;
                return false;
            }
            if(!this.signatureGroupsAreIdentical(t1.construct, t2.construct)) {
                this.identicalCache[comboId] = undefined;
                return false;
            }
            if(!this.signatureGroupsAreIdentical(t1.index, t2.index)) {
                this.identicalCache[comboId] = undefined;
                return false;
            }
            this.identicalCache[comboId] = true;
            return true;
        };
        TypeChecker.prototype.signatureGroupsAreIdentical = function (sg1, sg2) {
            if(sg1 == sg2) {
                return true;
            }
            if(!sg1 || !sg2) {
                return false;
            }
            if(sg1.signatures.length != sg2.signatures.length) {
                return false;
            }
            var sig1 = null;
            var sig2 = null;
            var sigsMatch = false;
            for(var iSig1 = 0; iSig1 < sg1.signatures.length; iSig1++) {
                sig1 = sg1.signatures[iSig1];
                for(var iSig2 = 0; iSig2 < sg2.signatures.length; iSig2++) {
                    sig2 = sg2.signatures[iSig2];
                    if(this.signaturesAreIdentical(sig1, sig2)) {
                        sigsMatch = true;
                        break;
                    }
                }
                if(sigsMatch) {
                    sigsMatch = false;
                    continue;
                }
                return false;
            }
            return true;
        };
        TypeChecker.prototype.signaturesAreIdentical = function (s1, s2) {
            if(s1.hasVariableArgList != s2.hasVariableArgList) {
                return false;
            }
            if(s1.nonOptionalParameterCount != s2.nonOptionalParameterCount) {
                return false;
            }
            if(s1.parameters.length != s2.parameters.length) {
                return false;
            }
            if(!this.typesAreIdentical(s1.returnType.type, s2.returnType.type)) {
                return false;
            }
            for(var iParam = 0; iParam < s1.parameters.length; iParam++) {
                if(!this.typesAreIdentical(s1.parameters[iParam].parameter.typeLink.type, s2.parameters[iParam].parameter.typeLink.type)) {
                    return false;
                }
            }
            return true;
        };
        TypeChecker.prototype.sourceIsSubtypeOfTarget = function (source, target, comparisonInfo) {
            return this.sourceIsRelatableToTarget(source, target, false, this.subtypeCache, comparisonInfo);
        };
        TypeChecker.prototype.signatureGroupIsSubtypeOfTarget = function (sg1, sg2, comparisonInfo) {
            return this.signatureGroupIsRelatableToTarget(sg1, sg2, false, this.subtypeCache, comparisonInfo);
        };
        TypeChecker.prototype.signatureIsSubtypeOfTarget = function (s1, s2, comparisonInfo) {
            return this.signatureIsRelatableToTarget(s1, s2, false, this.subtypeCache, comparisonInfo);
        };
        TypeChecker.prototype.sourceIsAssignableToTarget = function (source, target, comparisonInfo) {
            return this.sourceIsRelatableToTarget(source, target, true, this.assignableCache, comparisonInfo);
        };
        TypeChecker.prototype.signatureGroupIsAssignableToTarget = function (sg1, sg2, comparisonInfo) {
            return this.signatureGroupIsRelatableToTarget(sg1, sg2, true, this.assignableCache, comparisonInfo);
        };
        TypeChecker.prototype.signatureIsAssignableToTarget = function (s1, s2, comparisonInfo) {
            return this.signatureIsRelatableToTarget(s1, s2, true, this.assignableCache, comparisonInfo);
        };
        TypeChecker.prototype.sourceIsRelatableToTarget = function (source, target, assignableTo, comparisonCache, comparisonInfo) {
            if(source == target) {
                return true;
            }
            if(!(source && target)) {
                return true;
            }
            var comboId = (source.typeID << 16) | target.typeID;
            if(comparisonCache[comboId] != undefined) {
                return true;
            }
            if(assignableTo) {
                if(source == this.anyType || target == this.anyType) {
                    return true;
                }
            } else {
                if(target == this.anyType) {
                    return true;
                }
            }
            if(source == this.undefinedType) {
                return true;
            }
            if((source == this.nullType) && (target != this.undefinedType && target != this.voidType)) {
                return true;
            }
            if(target == this.numberType && (source.typeFlags & 8 /* IsEnum */ )) {
                return true;
            }
            if(source == this.numberType && (target.typeFlags & 8 /* IsEnum */ )) {
                return true;
            }
            if((source.typeFlags & 8 /* IsEnum */ ) || (target.typeFlags & 8 /* IsEnum */ )) {
                return false;
            }
            if(source.isArray() || target.isArray()) {
                if(!(source.isArray() && target.isArray())) {
                    return false;
                }
                comparisonCache[comboId] = false;
                var ret = this.sourceIsRelatableToTarget(source.elementType, target.elementType, assignableTo, comparisonCache, comparisonInfo);
                if(ret) {
                    comparisonCache[comboId] = true;
                } else {
                    comparisonCache[comboId] = undefined;
                }
                return ret;
            }
            if(source.primitiveTypeClass != target.primitiveTypeClass) {
                if(target.primitiveTypeClass == 0 /* None */ ) {
                    if(source == this.numberType && this.typeFlow.numberInterfaceType) {
                        source = this.typeFlow.numberInterfaceType;
                    } else {
                        if(source == this.stringType && this.typeFlow.stringInterfaceType) {
                            source = this.typeFlow.stringInterfaceType;
                        } else {
                            if(source == this.booleanType && this.typeFlow.booleanInterfaceType) {
                                source = this.typeFlow.booleanInterfaceType;
                            } else {
                                return false;
                            }
                        }
                    }
                } else {
                    return false;
                }
            }
            comparisonCache[comboId] = false;
            if(source.hasBase(target)) {
                comparisonCache[comboId] = true;
                return true;
            }
            if(this.typeFlow.objectInterfaceType && target == this.typeFlow.objectInterfaceType) {
                return true;
            }
            if(this.typeFlow.functionInterfaceType && (source.call || source.construct) && target == this.typeFlow.functionInterfaceType) {
                return true;
            }
            if(target.isClass() || target.isClassInstance()) {
                comparisonCache[comboId] = undefined;
                return false;
            }
            if(target.memberScope && source.memberScope) {
                var mPropKeys = target.memberScope.getAllValueSymbolNames(true);
                var mProp = null;
                var nProp = null;
                var mPropType = null;
                var nPropType = null;
                var inferenceSymbol = null;
                for(var iMProp = 0; iMProp < mPropKeys.length; iMProp++) {
                    mProp = target.memberScope.find(mPropKeys[iMProp], false, false);
                    nProp = source.memberScope.find(mPropKeys[iMProp], false, false);
                    if(mProp.name == "arguments" && this.typeFlow.iargumentsInterfaceType && (this.typeFlow.iargumentsInterfaceType.symbol.flags & 524288 /* CompilerGenerated */ ) && mProp.kind() == 4 /* Variable */  && (mProp).variable.typeLink.type == this.typeFlow.iargumentsInterfaceType) {
                        continue;
                    }
                    if(mProp.isInferenceSymbol()) {
                        inferenceSymbol = mProp;
                        if(inferenceSymbol.typeCheckStatus == 0 /* NotStarted */ ) {
                            this.typeFlow.typeCheck(mProp.declAST);
                        }
                    }
                    mPropType = mProp.getType();
                    if(!nProp) {
                        if(this.typeFlow.objectInterfaceType) {
                            nProp = this.typeFlow.objectInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);
                        }
                        if(!nProp) {
                            if(this.typeFlow.functionInterfaceType && (mPropType.call || mPropType.construct)) {
                                nProp = this.typeFlow.functionInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);
                            }
                            if(!nProp) {
                                if(!(mProp.flags & 65536 /* Optional */ )) {
                                    comparisonCache[comboId] = undefined;
                                    if(comparisonInfo) {
                                        comparisonInfo.flags |= 2 /* RequiredPropertyIsMissing */ ;
                                        comparisonInfo.addMessageToFront("Type '" + source.getTypeName() + "' is missing property '" + mPropKeys[iMProp] + "' from type '" + target.getTypeName() + "'");
                                    }
                                    return false;
                                } else {
                                    continue;
                                }
                            }
                        }
                    }
                    if(nProp.isInferenceSymbol()) {
                        inferenceSymbol = nProp;
                        if(inferenceSymbol.typeCheckStatus == 0 /* NotStarted */ ) {
                            this.typeFlow.typeCheck(nProp.declAST);
                        }
                    }
                    nPropType = nProp.getType();
                    if(mPropType && nPropType && (comparisonCache[(nPropType.typeID << 16) | mPropType.typeID] != undefined)) {
                        continue;
                    }
                    if(!this.sourceIsRelatableToTarget(nPropType, mPropType, assignableTo, comparisonCache, comparisonInfo)) {
                        comparisonCache[comboId] = undefined;
                        if(comparisonInfo) {
                            comparisonInfo.flags |= 32 /* IncompatiblePropertyTypes */ ;
                            comparisonInfo.addMessageToFront("Types of property '" + mProp.name + "' of types '" + source.getTypeName() + "' and '" + target.getTypeName() + "' are incompatible");
                        }
                        return false;
                    }
                }
            }
            if(source.call || target.call) {
                if(!this.signatureGroupIsRelatableToTarget(source.call, target.call, assignableTo, comparisonCache, comparisonInfo)) {
                    if(comparisonInfo) {
                        if(source.call && target.call) {
                            comparisonInfo.addMessageToFront("Call signatures of types '" + source.getTypeName() + "' and '" + target.getTypeName() + "' are incompatible");
                        } else {
                            var hasSig = target.call ? target.getTypeName() : source.getTypeName();
                            var lacksSig = !target.call ? target.getTypeName() : source.getTypeName();
                            comparisonInfo.setMessage("Type '" + hasSig + "' requires a call signature, but Type '" + lacksSig + "' lacks one");
                        }
                        comparisonInfo.flags |= 4 /* IncompatibleSignatures */ ;
                    }
                    comparisonCache[comboId] = undefined;
                    return false;
                }
            }
            if(source.construct || target.construct) {
                if(!this.signatureGroupIsRelatableToTarget(source.construct, target.construct, assignableTo, comparisonCache, comparisonInfo)) {
                    if(comparisonInfo) {
                        if(source.construct && target.construct) {
                            comparisonInfo.addMessageToFront("Construct signatures of types '" + source.getTypeName() + "' and '" + target.getTypeName() + "' are incompatible");
                        } else {
                            var hasSig = target.construct ? target.getTypeName() : source.getTypeName();
                            var lacksSig = !target.construct ? target.getTypeName() : source.getTypeName();
                            comparisonInfo.setMessage("Type '" + hasSig + "' requires a construct signature, but Type '" + lacksSig + "' lacks one");
                        }
                        comparisonInfo.flags |= 4 /* IncompatibleSignatures */ ;
                    }
                    comparisonCache[comboId] = undefined;
                    return false;
                }
            }
            if(target.index) {
                var targetIndex = !target.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : target.index;
                var sourceIndex = !source.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : source.index;
                if(!this.signatureGroupIsRelatableToTarget(sourceIndex, targetIndex, assignableTo, comparisonCache, comparisonInfo)) {
                    if(comparisonInfo) {
                        comparisonInfo.addMessageToFront("Index signatures of types '" + source.getTypeName() + "' and '" + target.getTypeName() + "' are incompatible");
                        comparisonInfo.flags |= 4 /* IncompatibleSignatures */ ;
                    }
                    comparisonCache[comboId] = undefined;
                    return false;
                }
            }
            comparisonCache[comboId] = true;
            return true;
        };
        TypeChecker.prototype.signatureGroupIsRelatableToTarget = function (sourceSG, targetSG, assignableTo, comparisonCache, comparisonInfo) {
            if(sourceSG == targetSG) {
                return true;
            }
            if(!(sourceSG && targetSG)) {
                return false;
            }
            var mSig = null;
            var nSig = null;
            var foundMatch = false;
            for(var iMSig = 0; iMSig < targetSG.signatures.length; iMSig++) {
                mSig = targetSG.signatures[iMSig];
                for(var iNSig = 0; iNSig < sourceSG.signatures.length; iNSig++) {
                    nSig = sourceSG.signatures[iNSig];
                    if(this.signatureIsRelatableToTarget(nSig, mSig, assignableTo, comparisonCache, comparisonInfo)) {
                        foundMatch = true;
                        break;
                    }
                }
                if(foundMatch) {
                    foundMatch = false;
                    continue;
                }
                return false;
            }
            return true;
        };
        TypeChecker.prototype.signatureIsRelatableToTarget = function (sourceSig, targetSig, assignableTo, comparisonCache, comparisonInfo) {
            if(!sourceSig.parameters || !targetSig.parameters) {
                return false;
            }
            var targetVarArgCount = targetSig.hasVariableArgList ? targetSig.nonOptionalParameterCount - 1 : targetSig.nonOptionalParameterCount;
            var sourceVarArgCount = sourceSig.hasVariableArgList ? sourceSig.nonOptionalParameterCount - 1 : sourceSig.nonOptionalParameterCount;
            if(sourceVarArgCount > targetVarArgCount && !targetSig.hasVariableArgList) {
                if(comparisonInfo) {
                    comparisonInfo.flags |= 3 /* SourceSignatureHasTooManyParameters */ ;
                    comparisonInfo.addMessageToFront("Call signature expects " + targetVarArgCount + " or fewer parameters");
                }
                return false;
            }
            var sourceReturnType = sourceSig.returnType.type;
            var targetReturnType = targetSig.returnType.type;
            if(targetReturnType != this.voidType) {
                if(!this.sourceIsRelatableToTarget(sourceReturnType, targetReturnType, assignableTo, comparisonCache, comparisonInfo)) {
                    if(comparisonInfo) {
                        comparisonInfo.flags |= 16 /* IncompatibleReturnTypes */ ;
                    }
                    return false;
                }
            }
            var len = (sourceVarArgCount < targetVarArgCount && sourceSig.hasVariableArgList) ? targetVarArgCount : sourceVarArgCount;
            var sourceParamType = null;
            var targetParamType = null;
            var sourceParamName = "";
            var targetParamName = "";
            for(var iSource = 0, iTarget = 0; iSource < len; iSource++ , iTarget++) {
                if(!sourceSig.hasVariableArgList || iSource < sourceVarArgCount) {
                    sourceParamType = (sourceSig.parameters[iSource]).parameter.typeLink.type;
                    sourceParamName = (sourceSig.parameters[iSource]).parameter.symbol.name;
                } else {
                    if(iSource == sourceVarArgCount) {
                        sourceParamType = (sourceSig.parameters[iSource]).parameter.typeLink.type;
                        if(sourceParamType.elementType) {
                            sourceParamType = sourceParamType.elementType;
                        }
                        sourceParamName = (sourceSig.parameters[iSource]).parameter.symbol.name;
                    }
                }
                if(iTarget < targetSig.parameters.length && iTarget < targetVarArgCount) {
                    targetParamType = (targetSig.parameters[iTarget]).parameter.typeLink.type;
                    targetParamName = (targetSig.parameters[iTarget]).parameter.symbol.name;
                } else {
                    if(targetSig.hasVariableArgList && iTarget == targetVarArgCount) {
                        targetParamType = (targetSig.parameters[iTarget]).parameter.typeLink.type;
                        if(targetParamType.elementType) {
                            targetParamType = targetParamType.elementType;
                        }
                        targetParamName = (targetSig.parameters[iTarget]).parameter.symbol.name;
                    }
                }
                if(!(this.sourceIsRelatableToTarget(sourceParamType, targetParamType, assignableTo, comparisonCache, comparisonInfo) || this.sourceIsRelatableToTarget(targetParamType, sourceParamType, assignableTo, comparisonCache, comparisonInfo))) {
                    if(comparisonInfo) {
                        comparisonInfo.flags |= 64 /* IncompatibleParameterTypes */ ;
                    }
                    return false;
                }
            }
            return true;
        };
        return TypeChecker;
    })();
    TypeScript.TypeChecker = TypeChecker;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Continuation = (function () {
        function Continuation(normalBlock) {
            this.normalBlock = normalBlock;
            this.exceptionBlock = -1;
        }
        return Continuation;
    })();
    TypeScript.Continuation = Continuation;    
    function getBaseTypeLinks(bases, baseTypeLinks) {
        if(bases) {
            var len = bases.members.length;
            if(baseTypeLinks == null) {
                baseTypeLinks = new Array();
            }
            for(var i = 0; i < len; i++) {
                var baseExpr = bases.members[i];
                var name = baseExpr;
                var typeLink = new TypeScript.TypeLink();
                typeLink.ast = name;
                baseTypeLinks[baseTypeLinks.length] = typeLink;
            }
        }
        return baseTypeLinks;
    }
    function getBases(type, typeDecl) {
        type.extendsTypeLinks = getBaseTypeLinks(typeDecl.extendsList, type.extendsTypeLinks);
        type.implementsTypeLinks = getBaseTypeLinks(typeDecl.implementsList, type.implementsTypeLinks);
    }
    function addPrototypeField(classType, ast, context) {
        var field = new TypeScript.ValueLocation();
        field.typeLink = new TypeScript.TypeLink();
        field.typeLink.ast = ast;
        field.typeLink.type = classType.instanceType;
        var fieldSymbol = new TypeScript.FieldSymbol("prototype", ast.minChar, context.checker.locationInfo.unitIndex, true, field);
        fieldSymbol.flags |= (256 /* Property */  | 8192 /* BuiltIn */ );
        field.symbol = fieldSymbol;
        fieldSymbol.declAST = ast;
        classType.members.addPublicMember("prototype", fieldSymbol);
    }
    function createNewConstructGroupForType(type) {
        var signature = new TypeScript.Signature();
        signature.returnType = new TypeScript.TypeLink();
        signature.returnType.type = type.instanceType;
        signature.parameters = [];
        type.construct = new TypeScript.SignatureGroup();
        type.construct.addSignature(signature);
    }
    TypeScript.createNewConstructGroupForType = createNewConstructGroupForType;
    function cloneParentConstructGroupForChildType(child, parent) {
        child.construct = new TypeScript.SignatureGroup();
        var sig = null;
        if(!parent.construct) {
            createNewConstructGroupForType(parent);
        }
        for(var i = 0; i < parent.construct.signatures.length; i++) {
            sig = new TypeScript.Signature();
            sig.parameters = parent.construct.signatures[i].parameters;
            sig.nonOptionalParameterCount = parent.construct.signatures[i].nonOptionalParameterCount;
            sig.typeCheckStatus = parent.construct.signatures[i].typeCheckStatus;
            sig.declAST = parent.construct.signatures[i].declAST;
            sig.returnType = new TypeScript.TypeLink();
            sig.returnType.type = child.instanceType;
            child.construct.addSignature(sig);
        }
    }
    TypeScript.cloneParentConstructGroupForChildType = cloneParentConstructGroupForChildType;
    TypeScript.globalId = "__GLO";
    function findTypeSymbolInScopeChain(name, scopeChain) {
        var symbol = scopeChain.scope.find(name, false, true);
        if(symbol == null && scopeChain.previous) {
            symbol = findTypeSymbolInScopeChain(name, scopeChain.previous);
        }
        return symbol;
    }
    function findSymbolFromAlias(alias, context) {
        var symbol = null;
        switch(alias.nodeType) {
            case 25 /* Name */ : {
                var name = (alias).text;
                var isDynamic = TypeScript.isQuoted(name);
                var findSym = function (id) {
                    if(context.members) {
                        return context.members.lookup(name);
                    } else {
                        return findTypeSymbolInScopeChain(name, context.topLevelScope);
                    }
                };
                if(isDynamic) {
                    symbol = context.tcContext.checker.findSymbolForDynamicModule(name, context.tcContext.script.locationInfo.filename, findSym);
                } else {
                    symbol = findSym(name);
                }
                break;

            }
            case 19 /* Dot */ : {
                var dottedExpr = alias;
                var op1Sym = findSymbolFromAlias(dottedExpr.operand1, context);
                if(op1Sym && op1Sym.getType()) {
                    symbol = findSymbolFromAlias(dottedExpr.operand2, context);
                }
                break;

            }
            default: {
                break;

            }
        }
        if(symbol) {
            var symType = symbol.getType();
            if(symType) {
                var members = symType.members;
                if(members) {
                    context.members = members.publicMembers;
                }
            }
        }
        return symbol;
    }
    function preCollectImportTypes(ast, parent, context) {
        var scopeChain = context.scopeChain;
        var typeSymbol = null;
        var modType = null;
        var importDecl = ast;
        var isExported = TypeScript.hasFlag(importDecl.varFlags, 1 /* Exported */ );
        var aliasedModSymbol = findSymbolFromAlias(importDecl.alias, {
            topLevelScope: scopeChain,
            members: null,
            tcContext: context
        });
        var isGlobal = context.scopeChain.container == context.checker.gloMod;
        if(aliasedModSymbol) {
            var aliasedModType = aliasedModSymbol.getType();
            if(aliasedModType) {
                modType = aliasedModType;
            }
        }
        typeSymbol = new TypeScript.TypeSymbol(importDecl.id.text, importDecl.minChar, context.checker.locationInfo.unitIndex, modType);
        typeSymbol.aliasLink = importDecl;
        if(context.scopeChain.moduleDecl) {
            typeSymbol.declModule = context.scopeChain.moduleDecl;
        }
        typeSymbol.declAST = importDecl;
        importDecl.id.sym = typeSymbol;
        scopeChain.scope.enter(scopeChain.container, ast, typeSymbol, context.checker.errorReporter, isExported || isGlobal, true, false);
        scopeChain.scope.enter(scopeChain.container, ast, typeSymbol, context.checker.errorReporter, isExported || isGlobal, false, false);
        return true;
    }
    TypeScript.preCollectImportTypes = preCollectImportTypes;
    function preCollectModuleTypes(ast, parent, context) {
        var scopeChain = context.scopeChain;
        var moduleDecl = ast;
        var isAmbient = TypeScript.hasFlag(moduleDecl.modFlags, 8 /* Ambient */ );
        var isEnum = TypeScript.hasFlag(moduleDecl.modFlags, 256 /* IsEnum */ );
        var isGlobal = context.scopeChain.container == context.checker.gloMod;
        var isExported = TypeScript.hasFlag(moduleDecl.modFlags, 1 /* Exported */ );
        var modName = (moduleDecl.name).text;
        var isDynamic = TypeScript.isQuoted(modName);
        var symbol = scopeChain.scope.findLocal(modName, false, false);
        var typeSymbol = null;
        var modType = null;
        if((symbol == null) || (symbol.kind() != 1 /* Type */ )) {
            if(modType == null) {
                var enclosedTypes = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
                var ambientEnclosedTypes = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
                modType = new TypeScript.ModuleType(enclosedTypes, ambientEnclosedTypes);
                if(isEnum) {
                    modType.typeFlags |= 8 /* IsEnum */ ;
                }
                modType.members = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
                modType.ambientMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
                modType.setHasImplementation();
            }
            typeSymbol = new TypeScript.TypeSymbol(modName, moduleDecl.minChar, context.checker.locationInfo.unitIndex, modType);
            if(context.scopeChain.moduleDecl) {
                typeSymbol.declModule = context.scopeChain.moduleDecl;
            }
            typeSymbol.declAST = moduleDecl;
            typeSymbol.prettyName = moduleDecl.prettyName;
            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol, context.checker.errorReporter, isExported || isGlobal, true, isAmbient);
            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol, context.checker.errorReporter, isExported || isGlobal, false, isAmbient);
            modType.symbol = typeSymbol;
        } else {
            if(symbol && symbol.declAST && symbol.declAST.nodeType != 96 /* ModuleDeclaration */ ) {
                context.checker.errorReporter.simpleError(moduleDecl, "Conflicting symbol name for module '" + modName + "'");
            }
            typeSymbol = symbol;
            var publicEnclosedTypes = typeSymbol.type.getAllEnclosedTypes().publicMembers;
            var publicEnclosedTypesTable = (publicEnclosedTypes == null) ? new TypeScript.StringHashTable() : publicEnclosedTypes;
            var enclosedTypes = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(publicEnclosedTypesTable, new TypeScript.StringHashTable()));
            var publicEnclosedAmbientTypes = typeSymbol.type.getAllAmbientEnclosedTypes().publicMembers;
            var publicAmbientEnclosedTypesTable = (publicEnclosedAmbientTypes == null) ? new TypeScript.StringHashTable() : publicEnclosedAmbientTypes;
            var ambientEnclosedTypes = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(publicAmbientEnclosedTypesTable, new TypeScript.StringHashTable()));
            var publicMembers = typeSymbol.type.members.publicMembers;
            var publicMembersTable = (publicMembers == null) ? new TypeScript.StringHashTable() : publicMembers;
            var members = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(publicMembersTable, new TypeScript.StringHashTable()));
            var publicAmbientMembers = typeSymbol.type.ambientMembers.publicMembers;
            var publicAmbientMembersTable = (publicAmbientMembers == null) ? new TypeScript.StringHashTable() : publicAmbientMembers;
            var ambientMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(publicAmbientMembersTable, new TypeScript.StringHashTable()));
            modType = new TypeScript.ModuleType(enclosedTypes, ambientEnclosedTypes);
            if(isEnum) {
                modType.typeFlags |= 8 /* IsEnum */ ;
            }
            modType.members = members;
            modType.ambientMembers = ambientMembers;
            modType.setHasImplementation();
            modType.symbol = typeSymbol;
            typeSymbol.addLocation(moduleDecl.minChar);
            typeSymbol.expansions.push(modType);
        }
        if(context.scopeChain.moduleDecl) {
            context.scopeChain.moduleDecl.recordNonInterface();
        }
        if(isExported) {
            typeSymbol.flags |= 1 /* Exported */ ;
        }
        if((context.scopeChain.moduleDecl) || (context.scopeChain.container == context.checker.gloMod)) {
            typeSymbol.flags |= 1024 /* ModuleMember */ ;
        }
        moduleDecl.mod = modType;
        TypeScript.pushTypeCollectionScope(typeSymbol, modType.members, modType.ambientMembers, modType.enclosedTypes, modType.ambientEnclosedTypes, context, null, null, moduleDecl);
        return true;
    }
    TypeScript.preCollectModuleTypes = preCollectModuleTypes;
    function preCollectClassTypes(ast, parent, context) {
        var scopeChain = context.scopeChain;
        var classDecl = ast;
        var classType;
        var instanceType;
        var typeSymbol = null;
        var className = (classDecl.name).text;
        var alreadyInScope = false;
        var isAmbient = TypeScript.hasFlag(classDecl.varFlags, 8 /* Ambient */ );
        var isExported = TypeScript.hasFlag(classDecl.varFlags, 1 /* Exported */ );
        var isGlobal = context.scopeChain.container == context.checker.gloMod;
        var containerMod = scopeChain.container;
        var foundValSymbol = false;
        typeSymbol = scopeChain.scope.findLocal(className, false, true);
        if(!typeSymbol) {
            var valTypeSymbol = scopeChain.scope.findLocal(className, false, false);
            if(valTypeSymbol && valTypeSymbol.isType() && valTypeSymbol.declAST && valTypeSymbol.declAST.nodeType == 71 /* FuncDecl */  && (valTypeSymbol.declAST).isSignature()) {
                typeSymbol = valTypeSymbol;
                foundValSymbol = true;
                if(isExported) {
                    typeSymbol.flags |= 1 /* Exported */ ;
                }
                if(isAmbient) {
                    typeSymbol.flags |= 8 /* Ambient */ ;
                }
                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol, context.checker.errorReporter, isExported || isGlobal, true, isAmbient);
            }
        }
        if(typeSymbol && !foundValSymbol && (typeSymbol.declAST != classDecl)) {
            typeSymbol = null;
        }
        if(typeSymbol == null) {
            var valueSymbol = scopeChain.scope.findLocal(className, false, false);
            classType = new TypeScript.Type();
            classType.setHasImplementation();
            instanceType = new TypeScript.Type();
            instanceType.setHasImplementation();
            classType.instanceType = instanceType;
            classType.members = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
            classType.ambientMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
            addPrototypeField(classType, classDecl, context);
            instanceType.members = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
            instanceType.ambientMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
            typeSymbol = new TypeScript.TypeSymbol(className, classDecl.minChar, context.checker.locationInfo.unitIndex, classType);
            typeSymbol.declAST = classDecl;
            typeSymbol.instanceType = instanceType;
            classType.symbol = typeSymbol;
            instanceType.symbol = typeSymbol;
            if(context.scopeChain.moduleDecl) {
                context.scopeChain.moduleDecl.recordNonInterface();
                typeSymbol.declModule = context.scopeChain.moduleDecl;
                typeSymbol.flags |= 1024 /* ModuleMember */ ;
            }
            if(isExported) {
                typeSymbol.flags |= 1 /* Exported */ ;
            }
            if(isAmbient) {
                typeSymbol.flags |= 8 /* Ambient */ ;
            }
            ast.type = classType;
            context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol, context.checker.errorReporter, isExported || isGlobal, true, isAmbient);
            if(valueSymbol == null) {
                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol, context.checker.errorReporter, isExported || isGlobal, false, isAmbient);
            }
        } else {
            classType = typeSymbol.type;
            if(classType.instanceType == null) {
                classType.instanceType = new TypeScript.Type();
                classType.instanceType.setHasImplementation();
                classType.instanceType.members = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
                classType.instanceType.symbol = classType.symbol;
                classType.members = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
                classType.ambientMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
            }
            instanceType = classType.instanceType;
            ast.type = classType;
        }
        if(!classDecl.constructorDecl) {
            if(typeSymbol && typeSymbol.declAST && typeSymbol.declAST.type && typeSymbol.declAST.type.call && !(typeSymbol.declAST).isOverload) {
                context.checker.errorReporter.duplicateIdentifier(typeSymbol.declAST, typeSymbol.name);
            }
            createNewConstructGroupForType(classDecl.type);
        }
        classType.typeFlags |= 128 /* IsClass */ ;
        instanceType.typeFlags |= 128 /* IsClass */ ;
        getBases(instanceType, classDecl);
        TypeScript.pushTypeCollectionScope(typeSymbol, instanceType.members, instanceType.ambientMembers, null, null, context, instanceType, classType, null);
        return true;
    }
    TypeScript.preCollectClassTypes = preCollectClassTypes;
    function preCollectInterfaceTypes(ast, parent, context) {
        var scopeChain = context.scopeChain;
        var interfaceDecl = ast;
        var interfaceSymbol = null;
        var interfaceType = null;
        var isExported = TypeScript.hasFlag(interfaceDecl.varFlags, 1 /* Exported */ );
        var isGlobal = context.scopeChain.container == context.checker.gloMod;
        var alreadyInScope = true;
        alreadyInScope = false;
        var interfaceName = (interfaceDecl.name).text;
        interfaceSymbol = scopeChain.scope.findLocal(interfaceName, false, true);
        if(interfaceSymbol == null) {
            interfaceType = new TypeScript.Type();
            interfaceSymbol = new TypeScript.TypeSymbol(interfaceName, ast.minChar, context.checker.locationInfo.unitIndex, interfaceType);
            interfaceType.symbol = interfaceSymbol;
            interfaceType.members = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
            interfaceType.ambientMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
            interfaceSymbol.declAST = interfaceDecl;
            interfaceSymbol.declModule = context.scopeChain.moduleDecl;
        } else {
            alreadyInScope = true;
            interfaceType = interfaceSymbol.type;
        }
        if(!interfaceType) {
            interfaceType = context.checker.anyType;
        }
        ast.type = interfaceType;
        getBases(interfaceType, interfaceDecl);
        if(isExported) {
            interfaceSymbol.flags |= 1 /* Exported */ ;
        }
        if(context.scopeChain.moduleDecl) {
            interfaceSymbol.flags |= 1024 /* ModuleMember */ ;
        }
        if(!alreadyInScope) {
            context.scopeChain.scope.enter(context.scopeChain.container, ast, interfaceSymbol, context.checker.errorReporter, isGlobal || isExported, true, false);
        }
        TypeScript.pushTypeCollectionScope(interfaceSymbol, interfaceType.members, interfaceType.ambientMembers, null, null, context, interfaceType, null, null);
        return true;
    }
    TypeScript.preCollectInterfaceTypes = preCollectInterfaceTypes;
    function preCollectArgDeclTypes(ast, parent, context) {
        var scopeChain = context.scopeChain;
        var argDecl = ast;
        if(TypeScript.hasFlag(argDecl.varFlags, 4 /* Public */  | 2 /* Private */ )) {
            var field = new TypeScript.ValueLocation();
            var isPrivate = TypeScript.hasFlag(argDecl.varFlags, 2 /* Private */ );
            var fieldSymbol = new TypeScript.FieldSymbol(argDecl.id.text, argDecl.minChar, context.checker.locationInfo.unitIndex, !TypeScript.hasFlag(argDecl.varFlags, 1024 /* Readonly */ ), field);
            fieldSymbol.transferVarFlags(argDecl.varFlags);
            field.symbol = fieldSymbol;
            fieldSymbol.declAST = ast;
            argDecl.parameterPropertySym = fieldSymbol;
            context.scopeChain.scope.enter(context.scopeChain.container, ast, fieldSymbol, context.checker.errorReporter, !isPrivate, false, false);
            field.typeLink = TypeScript.getTypeLink(argDecl.typeExpr, context.checker, argDecl.init == null);
            argDecl.sym = fieldSymbol;
        }
        return false;
    }
    TypeScript.preCollectArgDeclTypes = preCollectArgDeclTypes;
    function preCollectVarDeclTypes(ast, parent, context) {
        var scopeChain = context.scopeChain;
        var varDecl = ast;
        var isAmbient = TypeScript.hasFlag(varDecl.varFlags, 8 /* Ambient */ );
        var isExported = TypeScript.hasFlag(varDecl.varFlags, 1 /* Exported */ );
        var isGlobal = context.scopeChain.container == context.checker.gloMod;
        var isProperty = TypeScript.hasFlag(varDecl.varFlags, 512 /* Property */ );
        var isStatic = TypeScript.hasFlag(varDecl.varFlags, 16 /* Static */ );
        var isPrivate = TypeScript.hasFlag(varDecl.varFlags, 2 /* Private */ );
        var isOptional = TypeScript.hasFlag(varDecl.id.flags, 1024 /* OptionalName */ );
        if(context.scopeChain.moduleDecl) {
            context.scopeChain.moduleDecl.recordNonInterface();
        }
        if(isProperty || isExported || (context.scopeChain.container == context.checker.gloMod) || context.scopeChain.moduleDecl) {
            if(isAmbient) {
                var existingSym = scopeChain.scope.findLocal(varDecl.id.text, false, false);
                if(existingSym) {
                    varDecl.sym = existingSym;
                    return false;
                }
            }
            if(varDecl.id == null) {
                context.checker.errorReporter.simpleError(varDecl, "Expected variable identifier at this location");
                return false;
            }
            var field = new TypeScript.ValueLocation();
            var fieldSymbol = new TypeScript.FieldSymbol(varDecl.id.text, varDecl.minChar, context.checker.locationInfo.unitIndex, (varDecl.varFlags & 1024 /* Readonly */ ) == 0 /* None */ , field);
            fieldSymbol.transferVarFlags(varDecl.varFlags);
            if(isOptional) {
                fieldSymbol.flags |= 65536 /* Optional */ ;
            }
            field.symbol = fieldSymbol;
            fieldSymbol.declAST = ast;
            if((context.scopeChain.moduleDecl) || (context.scopeChain.container == context.checker.gloMod)) {
                fieldSymbol.flags |= 1024 /* ModuleMember */ ;
                fieldSymbol.declModule = context.scopeChain.moduleDecl;
            }
            if(TypeScript.hasFlag(varDecl.varFlags, 512 /* Property */ ) && isStatic && context.scopeChain.classType) {
                if(!context.scopeChain.classType.members.publicMembers.add(varDecl.id.text, fieldSymbol)) {
                    context.checker.errorReporter.duplicateIdentifier(ast, fieldSymbol.name);
                }
                fieldSymbol.container = context.scopeChain.classType.symbol;
            } else {
                context.scopeChain.scope.enter(context.scopeChain.container, ast, fieldSymbol, context.checker.errorReporter, !isPrivate && (isProperty || isExported || isGlobal || isStatic), false, isAmbient);
            }
            if(TypeScript.hasFlag(varDecl.varFlags, 1 /* Exported */ )) {
                fieldSymbol.flags |= 1 /* Exported */ ;
            }
            field.typeLink = TypeScript.getTypeLink(varDecl.typeExpr, context.checker, varDecl.init == null);
            varDecl.sym = fieldSymbol;
        }
        return false;
    }
    TypeScript.preCollectVarDeclTypes = preCollectVarDeclTypes;
    function preCollectFuncDeclTypes(ast, parent, context) {
        var scopeChain = context.scopeChain;
        if(context.scopeChain.moduleDecl) {
            context.scopeChain.moduleDecl.recordNonInterface();
        }
        var funcDecl = ast;
        var fgSym = null;
        var nameText = funcDecl.getNameText();
        var isExported = TypeScript.hasFlag(funcDecl.fncFlags, 1 /* Exported */  | 524288 /* ClassPropertyMethodExported */ );
        var isStatic = TypeScript.hasFlag(funcDecl.fncFlags, 16 /* Static */ );
        var isPrivate = TypeScript.hasFlag(funcDecl.fncFlags, 2 /* Private */ );
        var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;
        var containerSym = (((funcDecl.isMethod() && isStatic) || funcDecl.isAccessor()) && context.scopeChain.classType ? context.scopeChain.classType.symbol : context.scopeChain.container);
        var containerScope = context.scopeChain.scope;
        var isGlobal = containerSym == context.checker.gloMod;
        var isOptional = funcDecl.name && TypeScript.hasFlag(funcDecl.name.flags, 1024 /* OptionalName */ );
        var go = false;
        var foundSymbol = false;
        if(isConstructor && TypeScript.hasFlag(funcDecl.fncFlags, 262144 /* ClassMethod */ )) {
            containerSym = containerSym.container;
            containerScope = scopeChain.previous.scope;
        }
        funcDecl.unitIndex = context.checker.locationInfo.unitIndex;
        if(!funcDecl.isConstructor && containerSym && containerSym.declAST && containerSym.declAST.nodeType == 71 /* FuncDecl */  && (containerSym.declAST).isConstructor && !funcDecl.isMethod()) {
            return go;
        }
        if(TypeScript.hasFlag(funcDecl.fncFlags, 512 /* Signature */ )) {
            var instType = context.scopeChain.thisType;
            if(nameText && nameText != "__missing") {
                if(isStatic) {
                    fgSym = containerSym.type.members.allMembers.lookup(nameText);
                } else {
                    fgSym = containerScope.findLocal(nameText, false, false);
                    if(fgSym == null) {
                        fgSym = containerScope.findLocal(nameText, false, true);
                    }
                }
                if(fgSym) {
                    foundSymbol = true;
                    if(!funcDecl.isSignature() && (TypeScript.hasFlag(funcDecl.fncFlags, 8 /* Ambient */ ) != TypeScript.hasFlag(fgSym.flags, 8 /* Ambient */ ))) {
                        fgSym = null;
                    }
                }
            }
            if(fgSym == null) {
                if(!(funcDecl.isSpecialFn())) {
                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, null, !foundSymbol).declAST.type.symbol;
                } else {
                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, containerSym, false).declAST.type.symbol;
                }
                if(fgSym.declAST == null || !funcDecl.isSpecialFn()) {
                    fgSym.declAST = ast;
                }
            } else {
                if((fgSym.kind() == 1 /* Type */ )) {
                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, false).declAST.type.symbol;
                } else {
                    context.checker.errorReporter.simpleError(funcDecl, "Function or method '" + funcDecl.name.actualText + "' already declared as a property");
                }
            }
            if(funcDecl.isSpecialFn() && !isStatic) {
                funcDecl.type = instType ? instType : fgSym.type;
            } else {
                funcDecl.type = fgSym.type;
            }
        } else {
            if(nameText) {
                if(isStatic) {
                    fgSym = containerSym.type.members.allMembers.lookup(nameText);
                } else {
                    if(funcDecl.isConstructor && context.scopeChain.previous) {
                        fgSym = context.scopeChain.previous.scope.findLocal(nameText, false, false);
                    }
                    if(fgSym == null) {
                        fgSym = containerScope.findLocal(nameText, false, false);
                    }
                }
                if(fgSym) {
                    foundSymbol = true;
                    if(!isConstructor && fgSym.declAST.nodeType == 71 /* FuncDecl */  && !(fgSym.declAST).isAccessor() && !(fgSym.declAST).isSignature()) {
                        fgSym = null;
                        foundSymbol = false;
                    }
                }
            }
            if(fgSym && !fgSym.isAccessor() && fgSym.type && fgSym.type.construct && fgSym.type.construct.signatures != [] && (fgSym.type.construct.signatures[0].declAST == null || !TypeScript.hasFlag(fgSym.type.construct.signatures[0].declAST.fncFlags, 8 /* Ambient */ )) && !funcDecl.isConstructor) {
                context.checker.errorReporter.simpleError(funcDecl, "Functions may not have class overloads");
            }
            if(fgSym && !(fgSym.kind() == 1 /* Type */ ) && funcDecl.isMethod() && !funcDecl.isAccessor() && !funcDecl.isConstructor) {
                context.checker.errorReporter.simpleError(funcDecl, "Function or method '" + funcDecl.name.actualText + "' already declared as a property");
                fgSym.type = context.checker.anyType;
            }
            var sig = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, !foundSymbol);
            if(((!fgSym || fgSym.declAST.nodeType != 71 /* FuncDecl */ ) && funcDecl.isAccessor()) || (fgSym && fgSym.isAccessor())) {
                funcDecl.accessorSymbol = context.checker.createAccessorSymbol(funcDecl, fgSym, containerSym.type, (funcDecl.isMethod() && isStatic), true, containerScope, containerSym);
            }
            funcDecl.type.symbol.declAST = ast;
            if(funcDecl.isConstructor) {
                go = true;
            }
            ; ;
        }
        if(isExported) {
            if(funcDecl.type.call) {
                funcDecl.type.symbol.flags |= 1 /* Exported */ ;
            }
            if(fgSym && !fgSym.isAccessor() && fgSym.kind() == 1 /* Type */  && fgSym.type.call) {
                fgSym.flags |= 1 /* Exported */ ;
            }
        }
        if(context.scopeChain.moduleDecl && !funcDecl.isSpecialFn()) {
            funcDecl.type.symbol.flags |= 1024 /* ModuleMember */ ;
            funcDecl.type.symbol.declModule = context.scopeChain.moduleDecl;
        }
        if(fgSym && isOptional) {
            fgSym.flags |= 65536 /* Optional */ ;
        }
        return go;
    }
    TypeScript.preCollectFuncDeclTypes = preCollectFuncDeclTypes;
    function preCollectTypes(ast, parent, walker) {
        var context = walker.state;
        var go = false;
        var scopeChain = context.scopeChain;
        if(ast.nodeType == 93 /* Script */ ) {
            var script = ast;
            context.script = script;
            go = true;
        } else {
            if(ast.nodeType == 92 /* List */ ) {
                go = true;
            } else {
                if(ast.nodeType == 97 /* ImportDeclaration */ ) {
                    go = preCollectImportTypes(ast, parent, context);
                } else {
                    if(ast.nodeType == 98 /* With */ ) {
                        go = false;
                    } else {
                        if(ast.nodeType == 96 /* ModuleDeclaration */ ) {
                            go = preCollectModuleTypes(ast, parent, context);
                        } else {
                            if(ast.nodeType == 94 /* ClassDeclaration */ ) {
                                go = preCollectClassTypes(ast, parent, context);
                            } else {
                                if(ast.nodeType == 84 /* Block */ ) {
                                    go = true;
                                } else {
                                    if(ast.nodeType == 95 /* InterfaceDeclaration */ ) {
                                        go = preCollectInterfaceTypes(ast, parent, context);
                                    } else {
                                        if(ast.nodeType == 74 /* ArgDecl */ ) {
                                            go = preCollectArgDeclTypes(ast, parent, context);
                                        } else {
                                            if(ast.nodeType == 73 /* VarDecl */ ) {
                                                go = preCollectVarDeclTypes(ast, parent, context);
                                            } else {
                                                if(ast.nodeType == 71 /* FuncDecl */ ) {
                                                    go = preCollectFuncDeclTypes(ast, parent, context);
                                                } else {
                                                    if(ast.isStatementOrExpression() && context.scopeChain.moduleDecl) {
                                                        context.scopeChain.moduleDecl.recordNonInterface();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        walker.options.goChildren = go;
        return ast;
    }
    TypeScript.preCollectTypes = preCollectTypes;
    function postCollectTypes(ast, parent, walker) {
        var context = walker.state;
        if(ast.nodeType == 96 /* ModuleDeclaration */ ) {
            TypeScript.popTypeCollectionScope(context);
        } else {
            if(ast.nodeType == 94 /* ClassDeclaration */ ) {
                TypeScript.popTypeCollectionScope(context);
            } else {
                if(ast.nodeType == 95 /* InterfaceDeclaration */ ) {
                    TypeScript.popTypeCollectionScope(context);
                }
            }
        }
        return ast;
    }
    TypeScript.postCollectTypes = postCollectTypes;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var ScopeChain = (function () {
        function ScopeChain(container, previous, scope) {
            this.container = container;
            this.previous = previous;
            this.scope = scope;
        }
        return ScopeChain;
    })();
    TypeScript.ScopeChain = ScopeChain;    
    var BBUseDefInfo = (function () {
        function BBUseDefInfo(bb) {
            this.bb = bb;
            this.defsBySymbol = new Array();
            this.useIndexBySymbol = new Array();
        }
        BBUseDefInfo.prototype.updateTop = function () {
            var temp = new BitVector(this.top.bitCount);
            for(var i = 0, succLen = this.bb.successors.length; i < succLen; i++) {
                var succ = this.bb.successors[i];
                if(succ.useDef) {
                    temp.union(succ.useDef.top);
                }
            }
            temp.difference(this.kill);
            temp.union(this.gen);
            var changed = temp.notEq(this.top);
            this.top = temp;
            return changed;
        };
        BBUseDefInfo.prototype.initialize = function (useDefContext) {
            var _this = this;
            var defSym = function (sym, context) {
                if(context.isLocalSym(sym)) {
                    var index = context.getSymbolIndex(sym);
                    _this.useIndexBySymbol[index] = new Array();
                    _this.defsBySymbol[index] = true;
                }
            };
            var useSym = function (sym, context, ast) {
                if(context.isLocalSym(sym)) {
                    var symIndex = context.getSymbolIndex(sym);
                    if(_this.useIndexBySymbol[symIndex] == undefined) {
                        _this.useIndexBySymbol[symIndex] = new Array();
                    }
                    var symUses = _this.useIndexBySymbol[symIndex];
                    var astIndex = context.getUseIndex(ast);
                    context.addUse(symIndex, astIndex);
                    symUses.push(astIndex);
                }
            };
            function initUseDefPre(cur, parent, walker) {
                var context = walker.state;
                if(cur == null) {
                    cur = null;
                }
                if(cur.nodeType == 73 /* VarDecl */ ) {
                    var varDecl = cur;
                    if(varDecl.init || TypeScript.hasFlag(varDecl.varFlags, 256 /* AutoInit */ )) {
                        defSym(varDecl.sym, context);
                    }
                } else {
                    if(cur.nodeType == 25 /* Name */ ) {
                        if(parent) {
                            if(parent.nodeType == 30 /* Asg */ ) {
                                var asg = parent;
                                if(asg.operand1 == cur) {
                                    return cur;
                                }
                            } else {
                                if(parent.nodeType == 73 /* VarDecl */ ) {
                                    var parentDecl = parent;
                                    if(parentDecl.id == cur) {
                                        return cur;
                                    }
                                }
                            }
                        }
                        var id = cur;
                        useSym(id.sym, context, cur);
                    } else {
                        if((cur.nodeType >= 30 /* Asg */ ) && (cur.nodeType <= TypeScript.NodeType.LastAsg)) {
                            var asg = cur;
                            if(asg.operand1 && (asg.operand1.nodeType == 25 /* Name */ )) {
                                var id = asg.operand1;
                                defSym(id.sym, context);
                            }
                        } else {
                            if(cur.nodeType == 71 /* FuncDecl */ ) {
                                walker.options.goChildren = false;
                            }
                        }
                    }
                }
                return cur;
            }
            var options = new TypeScript.AstWalkOptions();
            options.reverseSiblings = true;
            TypeScript.getAstWalkerFactory().walk(this.bb.content, initUseDefPre, null, options, useDefContext);
        };
        BBUseDefInfo.prototype.initializeGen = function (useDefContext) {
            var symbolLen = this.useIndexBySymbol.length;
            var bitCount = useDefContext.uses.length;
            this.gen = new BitVector(bitCount);
            for(var s = 0; s < symbolLen; s++) {
                var symUses = this.useIndexBySymbol[s];
                if((symUses != undefined) && (symUses.length > 0)) {
                    for(var u = 0, uLen = symUses.length; u < uLen; u++) {
                        this.gen.set(symUses[u], true);
                    }
                }
            }
            this.top = this.gen;
        };
        BBUseDefInfo.prototype.initializeKill = function (useDefContext) {
            this.kill = new BitVector(this.gen.bitCount);
            for(var s = 0, symbolLen = this.defsBySymbol.length; s < symbolLen; s++) {
                if(this.defsBySymbol[s]) {
                    var globalSymUses = useDefContext.useIndexBySymbol[s];
                    if(globalSymUses) {
                        for(var u = 0, useLen = globalSymUses.length; u < useLen; u++) {
                            this.kill.set(globalSymUses[u], true);
                        }
                    }
                }
            }
        };
        return BBUseDefInfo;
    })();
    TypeScript.BBUseDefInfo = BBUseDefInfo;    
    var UseDefContext = (function () {
        function UseDefContext() {
            this.useIndexBySymbol = new Array();
            this.uses = new Array();
            this.symbols = new Array();
            this.symbolMap = new TypeScript.StringHashTable();
            this.symbolCount = 0;
        }
        UseDefContext.prototype.getSymbolIndex = function (sym) {
            var name = sym.name;
            var index = (this.symbolMap.lookup(name));
            if(index == null) {
                index = this.symbolCount++;
                this.symbols[index] = sym;
                this.symbolMap.add(name, index);
            }
            return index;
        };
        UseDefContext.prototype.addUse = function (symIndex, astIndex) {
            var useBySym = this.useIndexBySymbol[symIndex];
            if(useBySym == undefined) {
                useBySym = new Array();
                this.useIndexBySymbol[symIndex] = useBySym;
            }
            useBySym[useBySym.length] = astIndex;
        };
        UseDefContext.prototype.getUseIndex = function (ast) {
            this.uses[this.uses.length] = ast;
            return this.uses.length - 1;
        };
        UseDefContext.prototype.isLocalSym = function (sym) {
            return (sym && (sym.container == this.func) && (sym.kind() == 4 /* Variable */ ));
        };
        UseDefContext.prototype.killSymbol = function (sym, bbUses) {
            var index = this.symbolMap.lookup(sym.name);
            var usesOfSym = this.useIndexBySymbol[index];
            for(var k = 0, len = usesOfSym.length; k < len; k++) {
                bbUses.set(usesOfSym[k], true);
            }
        };
        return UseDefContext;
    })();
    TypeScript.UseDefContext = UseDefContext;    
    var BitVector = (function () {
        function BitVector(bitCount) {
            this.bitCount = bitCount;
            this.firstBits = 0;
            this.restOfBits = null;
            if(this.bitCount > BitVector.packBits) {
                this.restOfBits = new Array();
                var len = Math.floor(this.bitCount / BitVector.packBits);
                for(var i = 0; i < len; i++) {
                    this.restOfBits[i] = 0;
                }
            }
        }
        BitVector.packBits = 30;
        BitVector.prototype.set = function (bitIndex, value) {
            if(bitIndex < BitVector.packBits) {
                if(value) {
                    this.firstBits |= (1 << bitIndex);
                } else {
                    this.firstBits &= (~(1 << bitIndex));
                }
            } else {
                var offset = Math.floor(bitIndex / BitVector.packBits) - 1;
                var localIndex = bitIndex % BitVector.packBits;
                if(value) {
                    this.restOfBits[offset] |= (1 << localIndex);
                } else {
                    this.restOfBits[offset] &= (~(1 << localIndex));
                }
            }
        };
        BitVector.prototype.map = function (fn) {
            var k;
            for(k = 0; k < BitVector.packBits; k++) {
                if(k == this.bitCount) {
                    return;
                }
                if(((1 << k) & this.firstBits) != 0) {
                    fn(k);
                }
            }
            if(this.restOfBits) {
                var len;
                var cumu = BitVector.packBits;
                for(k = 0 , len = this.restOfBits.length; k < len; k++) {
                    var myBits = this.restOfBits[k];
                    for(var j = 0; j < BitVector.packBits; j++) {
                        if(((1 << j) & myBits) != 0) {
                            fn(cumu);
                        }
                        cumu++;
                        if(cumu == this.bitCount) {
                            return;
                        }
                    }
                }
            }
        };
        BitVector.prototype.union = function (b) {
            this.firstBits |= b.firstBits;
            if(this.restOfBits) {
                for(var k = 0, len = this.restOfBits.length; k < len; k++) {
                    var myBits = this.restOfBits[k];
                    var bBits = b.restOfBits[k];
                    this.restOfBits[k] = myBits | bBits;
                }
            }
        };
        BitVector.prototype.intersection = function (b) {
            this.firstBits &= b.firstBits;
            if(this.restOfBits) {
                for(var k = 0, len = this.restOfBits.length; k < len; k++) {
                    var myBits = this.restOfBits[k];
                    var bBits = b.restOfBits[k];
                    this.restOfBits[k] = myBits & bBits;
                }
            }
        };
        BitVector.prototype.notEq = function (b) {
            if(this.firstBits != b.firstBits) {
                return true;
            }
            if(this.restOfBits) {
                for(var k = 0, len = this.restOfBits.length; k < len; k++) {
                    var myBits = this.restOfBits[k];
                    var bBits = b.restOfBits[k];
                    if(myBits != bBits) {
                        return true;
                    }
                }
            }
            return false;
        };
        BitVector.prototype.difference = function (b) {
            var oldFirstBits = this.firstBits;
            this.firstBits &= (~b.firstBits);
            if(this.restOfBits) {
                for(var k = 0, len = this.restOfBits.length; k < len; k++) {
                    var myBits = this.restOfBits[k];
                    var bBits = b.restOfBits[k];
                    this.restOfBits[k] &= (~bBits);
                }
            }
        };
        return BitVector;
    })();
    TypeScript.BitVector = BitVector;    
    var BasicBlock = (function () {
        function BasicBlock() {
            this.predecessors = new Array();
            this.index = -1;
            this.markValue = 0;
            this.successors = new Array();
            this.useDef = null;
            this.content = new TypeScript.ASTList();
        }
        BasicBlock.prototype.marked = function (markBase) {
            return this.markValue > markBase;
        };
        BasicBlock.prototype.mark = function () {
            this.markValue++;
        };
        BasicBlock.prototype.addSuccessor = function (successor) {
            this.successors[this.successors.length] = successor;
            successor.predecessors[successor.predecessors.length] = this;
        };
        return BasicBlock;
    })();
    TypeScript.BasicBlock = BasicBlock;    
    var ControlFlowContext = (function () {
        function ControlFlowContext(current, exit) {
            this.current = current;
            this.exit = exit;
            this.entry = null;
            this.unreachable = null;
            this.noContinuation = false;
            this.statementStack = new Array();
            this.currentSwitch = new Array();
            this.markBase = 0;
            this.linearBBs = new Array();
            this.entry = this.current;
        }
        ControlFlowContext.prototype.walk = function (ast, parent) {
            return this.walker.walk(ast, parent);
        };
        ControlFlowContext.prototype.pushSwitch = function (bb) {
            this.currentSwitch.push(bb);
        };
        ControlFlowContext.prototype.popSwitch = function () {
            return this.currentSwitch.pop();
        };
        ControlFlowContext.prototype.reportUnreachable = function (er) {
            if(this.unreachable && (this.unreachable.length > 0)) {
                var len = this.unreachable.length;
                for(var i = 0; i < len; i++) {
                    var unreachableAST = this.unreachable[i];
                    if(unreachableAST.nodeType != 103 /* EndCode */ ) {
                        er.simpleError(unreachableAST, "unreachable code");
                    }
                }
            }
        };
        ControlFlowContext.prototype.printAST = function (ast, outfile) {
            var printContext = new TypeScript.PrintContext(outfile, null);
            printContext.increaseIndent();
            TypeScript.getAstWalkerFactory().walk(ast, TypeScript.prePrintAST, TypeScript.postPrintAST, null, printContext);
            printContext.decreaseIndent();
        };
        ControlFlowContext.prototype.printBlockContent = function (bb, outfile) {
            var content = bb.content;
            for(var i = 0, len = content.members.length; i < len; i++) {
                var ast = content.members[i];
                this.printAST(ast, outfile);
            }
        };
        ControlFlowContext.prototype.bfs = function (nodeFunc, edgeFunc, preEdges, postEdges) {
            var markValue = this.markBase++;
            var q = new Array();
            q[q.length] = this.entry;
            while(q.length > 0) {
                var bb = q.pop();
                if(!(bb.marked(markValue))) {
                    bb.mark();
                    if(nodeFunc) {
                        nodeFunc(bb);
                    }
                    var succLen = bb.successors.length;
                    if(succLen > 0) {
                        if(preEdges) {
                            preEdges();
                        }
                        for(var j = succLen - 1; j >= 0; j--) {
                            var successor = bb.successors[j];
                            if(!(successor.marked(this.markBase))) {
                                if(edgeFunc) {
                                    edgeFunc(bb, successor);
                                }
                                q[q.length] = successor;
                            }
                        }
                        if(postEdges) {
                            postEdges();
                        }
                    }
                }
            }
        };
        ControlFlowContext.prototype.useDef = function (er, funcSym) {
            var _this = this;
            var useDefContext = new UseDefContext();
            useDefContext.func = funcSym;
            var useDefInit = function (bb) {
                bb.useDef = new BBUseDefInfo(bb);
                bb.useDef.initialize(useDefContext);
                _this.linearBBs[_this.linearBBs.length] = bb;
            };
            this.bfs(useDefInit, null, null, null);
            var i, bbLen;
            for(i = 0 , bbLen = this.linearBBs.length; i < bbLen; i++) {
                this.linearBBs[i].useDef.initializeGen(useDefContext);
                this.linearBBs[i].useDef.initializeKill(useDefContext);
            }
            var changed = true;
            while(changed) {
                changed = false;
                for(i = 0; i < bbLen; i++) {
                    changed = this.linearBBs[i].useDef.updateTop() || changed;
                }
            }
            var top = this.entry.useDef.top;
            top.map(function (index) {
                var ast = useDefContext.uses[index];
                er.simpleError(ast, "use of variable '" + ast.actualText + "' that is not definitely assigned");
            });
        };
        ControlFlowContext.prototype.print = function (outfile) {
            var _this = this;
            var index = 0;
            var node = function (bb) {
                if(bb.index < 0) {
                    bb.index = index++;
                }
                if(bb == _this.exit) {
                    outfile.WriteLine("Exit block with index " + bb.index);
                } else {
                    outfile.WriteLine("Basic block with index " + bb.index);
                    _this.printBlockContent(bb, outfile);
                }
            };
            function preEdges() {
                outfile.Write("  Branches to ");
            }
            function postEdges() {
                outfile.WriteLine("");
            }
            function edge(node1, node2) {
                if(node2.index < 0) {
                    node2.index = index++;
                }
                outfile.Write(node2.index + " ");
            }
            this.bfs(node, edge, preEdges, postEdges);
            if(this.unreachable != null) {
                for(var i = 0, len = this.unreachable.length; i < len; i++) {
                    outfile.WriteLine("Unreachable basic block ...");
                    this.printAST(this.unreachable[i], outfile);
                }
            }
        };
        ControlFlowContext.prototype.pushStatement = function (stmt, continueBB, breakBB) {
            this.statementStack.push({
                stmt: stmt,
                continueBB: continueBB,
                breakBB: breakBB
            });
        };
        ControlFlowContext.prototype.popStatement = function () {
            return this.statementStack.pop();
        };
        ControlFlowContext.prototype.returnStmt = function () {
            this.current.addSuccessor(this.exit);
            this.setUnreachable();
        };
        ControlFlowContext.prototype.setUnreachable = function () {
            this.current = null;
            this.noContinuation = true;
        };
        ControlFlowContext.prototype.addUnreachable = function (ast) {
            if(this.unreachable === null) {
                this.unreachable = new Array();
            }
            this.unreachable[this.unreachable.length] = ast;
        };
        ControlFlowContext.prototype.unconditionalBranch = function (target, isContinue) {
            var targetBB = null;
            for(var i = 0, len = this.statementStack.length; i < len; i++) {
                var targetInfo = this.statementStack[i];
                if(targetInfo.stmt == target) {
                    if(isContinue) {
                        targetBB = targetInfo.continueBB;
                    } else {
                        targetBB = targetInfo.breakBB;
                    }
                    break;
                }
            }
            if(targetBB) {
                this.current.addSuccessor(targetBB);
            }
            this.setUnreachable();
        };
        ControlFlowContext.prototype.addContent = function (ast) {
            if(this.current) {
                this.current.content.append(ast);
            }
        };
        return ControlFlowContext;
    })();
    TypeScript.ControlFlowContext = ControlFlowContext;    
    var ResolutionDataCache = (function () {
        function ResolutionDataCache() {
            this.cacheSize = 16;
            this.rdCache = [];
            this.nextUp = 0;
            for(var i = 0; i < this.cacheSize; i++) {
                this.rdCache[i] = {
                    actuals: new Array(),
                    exactCandidates: new Array(),
                    conversionCandidates: new Array(),
                    id: i
                };
            }
        }
        ResolutionDataCache.prototype.getResolutionData = function () {
            var rd = null;
            if(this.nextUp < this.cacheSize) {
                rd = this.rdCache[this.nextUp];
            }
            if(rd == null) {
                this.cacheSize++;
                rd = {
                    actuals: new Array(),
                    exactCandidates: new Array(),
                    conversionCandidates: new Array(),
                    id: this.cacheSize
                };
                this.rdCache[this.cacheSize] = rd;
            }
            this.nextUp++;
            return rd;
        };
        ResolutionDataCache.prototype.returnResolutionData = function (rd) {
            rd.actuals.length = 0;
            rd.exactCandidates.length = 0;
            rd.conversionCandidates.length = 0;
            this.nextUp = rd.id;
        };
        return ResolutionDataCache;
    })();
    TypeScript.ResolutionDataCache = ResolutionDataCache;    
    var TypeFlow = (function () {
        function TypeFlow(logger, initScope, parser, checker) {
            this.logger = logger;
            this.initScope = initScope;
            this.parser = parser;
            this.checker = checker;
            this.thisFnc = null;
            this.thisClassNode = null;
            this.enclosingFncIsMethod = false;
            this.arrayInterfaceType = null;
            this.stringInterfaceType = null;
            this.objectInterfaceType = null;
            this.functionInterfaceType = null;
            this.numberInterfaceType = null;
            this.booleanInterfaceType = null;
            this.iargumentsInterfaceType = null;
            this.currentScript = null;
            this.inImportTypeCheck = false;
            this.inTypeRefTypeCheck = false;
            this.inArrayElementTypeCheck = false;
            this.resolutionDataCache = new ResolutionDataCache();
            this.nestingLevel = 0;
            this.inBoundPropTypeCheck = false;
            this.inSuperCall = false;
            this.checker.typeFlow = this;
            this.scope = this.initScope;
            this.globalScope = this.initScope;
            this.doubleType = this.checker.numberType;
            this.booleanType = this.checker.booleanType;
            this.stringType = this.checker.stringType;
            this.anyType = this.checker.anyType;
            this.regexType = this.anyType;
            this.nullType = this.checker.nullType;
            this.voidType = this.checker.voidType;
            this.arrayAnyType = this.checker.makeArrayType(this.anyType);
        }
        TypeFlow.prototype.initLibs = function () {
            var arraySym = this.globalScope.find("Array", false, true);
            if(arraySym && (arraySym.kind() == 1 /* Type */ )) {
                this.arrayInterfaceType = (arraySym).type;
            }
            var stringSym = this.globalScope.find("String", false, true);
            if(stringSym && (stringSym.kind() == 1 /* Type */ )) {
                this.stringInterfaceType = (stringSym).type;
            }
            var objectSym = this.globalScope.find("Object", false, true);
            if(objectSym && (objectSym.kind() == 1 /* Type */ )) {
                this.objectInterfaceType = (objectSym).type;
            }
            var fnSym = this.globalScope.find("Function", false, true);
            if(fnSym && (fnSym.kind() == 1 /* Type */ )) {
                this.functionInterfaceType = (fnSym).type;
            }
            var numberSym = this.globalScope.find("Number", false, true);
            if(numberSym && (numberSym.kind() == 1 /* Type */ )) {
                this.numberInterfaceType = (numberSym).type;
            }
            var booleanSym = this.globalScope.find("Boolean", false, true);
            if(booleanSym && (booleanSym.kind() == 1 /* Type */ )) {
                this.booleanInterfaceType = (booleanSym).type;
            }
            var regexSym = this.globalScope.find("RegExp", false, true);
            if(regexSym && (regexSym.kind() == 1 /* Type */ )) {
                this.regexType = (regexSym).type;
            }
        };
        TypeFlow.prototype.cast = function (ast, type) {
            return this.castWithCoercion(ast, type, true, false);
        };
        TypeFlow.prototype.castWithCoercion = function (ast, type, applyCoercion, typeAssertion) {
            var comparisonInfo = new TypeScript.TypeComparisonInfo();
            if(this.checker.sourceIsAssignableToTarget(ast.type, type, comparisonInfo) || (typeAssertion && this.checker.sourceIsAssignableToTarget(type, ast.type, comparisonInfo))) {
                if(applyCoercion) {
                    if(type == null) {
                        ast.type = this.anyType;
                    } else {
                        if(type.isClass()) {
                            ast.type = type.instanceType;
                        } else {
                            ast.type = type;
                        }
                    }
                }
                return ast;
            } else {
                this.checker.errorReporter.incompatibleTypes(ast, ast.type, type, null, this.scope, comparisonInfo);
                return ast;
            }
        };
        TypeFlow.prototype.inScopeTypeCheck = function (ast, enclosingScope) {
            var prevScope = this.scope;
            this.scope = enclosingScope;
            var svThisFnc = this.thisFnc;
            var svThisType = this.thisType;
            var svThisClassNode = this.thisClassNode;
            var svCurrentModDecl = this.checker.currentModDecl;
            var prevMethodStatus = this.enclosingFncIsMethod;
            var container = this.scope.container;
            var fnc = null;
            while(container) {
                if(container.kind() == 1 /* Type */ ) {
                    var typeSym = container;
                    var type = typeSym.type;
                    if(type.call) {
                        if(fnc == null) {
                            this.enclosingFncIsMethod = typeSym.isMethod;
                            fnc = container.declAST;
                        }
                    }
                    if(type.isClass()) {
                        this.thisType = type.instanceType;
                        if(typeSym.declAST && (typeSym.declAST.nodeType == 94 /* ClassDeclaration */ )) {
                            this.thisClassNode = typeSym.declAST;
                        }
                        break;
                    }
                    if(type.isModuleType()) {
                        this.checker.currentModDecl = typeSym.declAST;
                        break;
                    }
                }
                container = container.container;
            }
            this.thisFnc = fnc;
            var updated = this.typeCheck(ast);
            this.thisFnc = svThisFnc;
            this.thisType = svThisType;
            this.thisClassNode = svThisClassNode;
            this.checker.currentModDecl = svCurrentModDecl;
            this.enclosingFncIsMethod = prevMethodStatus;
            this.scope = prevScope;
            return updated;
        };
        TypeFlow.prototype.typeCheck = function (ast) {
            if(ast) {
                return ast.typeCheck(this);
            } else {
                return null;
            }
        };
        TypeFlow.prototype.inScopeTypeCheckDecl = function (ast) {
            if(ast.nodeType == 73 /* VarDecl */  || ast.nodeType == 74 /* ArgDecl */ ) {
                this.inScopeTypeCheckBoundDecl(ast);
            } else {
                if(ast.nodeType == 71 /* FuncDecl */ ) {
                    var funcDecl = ast;
                    if(funcDecl.isAccessor()) {
                        this.typeCheckFunction(funcDecl);
                    }
                }
            }
        };
        TypeFlow.prototype.inScopeTypeCheckBoundDecl = function (varDecl) {
            var sym = varDecl.sym;
            var svThisFnc = this.thisFnc;
            var svThisType = this.thisType;
            var prevMethodStatus = this.enclosingFncIsMethod;
            var prevLocationInfo = this.checker.locationInfo;
            if(sym && sym.container) {
                var instanceScope = TypeScript.hasFlag(varDecl.varFlags, 16384 /* ClassConstructorProperty */ ) ? sym.container.getType().constructorScope : sym.container.instanceScope();
                if(TypeScript.hasFlag(varDecl.varFlags, 512 /* Property */ ) && sym.container.declAST.nodeType == 71 /* FuncDecl */ ) {
                    this.thisFnc = sym.container.declAST;
                }
                if(instanceScope) {
                    var prevScope = this.scope;
                    this.scope = instanceScope;
                    var container = sym.container;
                    if(this.checker.units && (sym.unitIndex >= 0) && (sym.unitIndex < this.checker.units.length)) {
                        this.checker.locationInfo = this.checker.units[sym.unitIndex];
                    } else {
                        this.checker.locationInfo = TypeScript.unknownLocationInfo;
                    }
                    while(container) {
                        if(container.kind() == 1 /* Type */ ) {
                            var typeSym = container;
                            var type = typeSym.type;
                            if(type.call) {
                                this.enclosingFncIsMethod = typeSym.isMethod;
                            }
                            if(type.isClass()) {
                                this.thisType = type.instanceType;
                                break;
                            }
                        }
                        container = container.container;
                    }
                    this.typeCheckBoundDecl(varDecl);
                    this.scope = prevScope;
                }
            }
            this.thisFnc = svThisFnc;
            this.thisType = svThisType;
            this.checker.locationInfo = prevLocationInfo;
            this.enclosingFncIsMethod = prevMethodStatus;
        };
        TypeFlow.prototype.resolveBoundDecl = function (varDecl) {
            if(varDecl.typeExpr) {
                if(varDecl.typeExpr.type == null || (varDecl.typeExpr.type && varDecl.typeExpr.type == this.anyType && this.scope) || varDecl.typeExpr.type.symbol == null || !this.checker.typeStatusIsFinished(varDecl.typeExpr.type.symbol.typeCheckStatus)) {
                    this.typeCheck(varDecl.typeExpr);
                }
                varDecl.type = varDecl.typeExpr.type;
                if(varDecl.sym) {
                    varDecl.sym.setType(varDecl.type);
                }
            } else {
                if(varDecl.init == null) {
                    if(this.checker.styleSettings.implicitAny) {
                        this.checker.errorReporter.styleError(varDecl, "type implicitly set to 'any'");
                    }
                    varDecl.type = this.anyType;
                    if(varDecl.sym) {
                        if(varDecl.sym.isType()) {
                            var tsym = varDecl.sym;
                            if(tsym.isMethod) {
                                this.checker.errorReporter.simpleError(varDecl, "Cannot bind method group to variable.  (Did you mean to use 'declare function' instead of 'declare var'?)");
                                return;
                            } else {
                                this.checker.errorReporter.simpleError(varDecl, "Cannot bind type to variable");
                                return;
                            }
                        }
                        varDecl.sym.setType(varDecl.type);
                    }
                }
            }
        };
        TypeFlow.prototype.typeCheckBoundDecl = function (varDecl) {
            var _this = this;
            var infSym = varDecl.sym;
            if(infSym == null) {
                if(varDecl.init) {
                    varDecl.init = this.typeCheck(varDecl.init);
                    varDecl.type = this.checker.widenType(varDecl.init.type);
                } else {
                    if(this.checker.styleSettings.implicitAny) {
                        this.checker.errorReporter.styleError(varDecl, "type implicitly set to 'any'");
                    }
                    varDecl.type = this.anyType;
                }
            } else {
                if(infSym.typeCheckStatus == 1 /* Started */ ) {
                    if(this.checker.styleSettings.implicitAny) {
                        this.checker.errorReporter.styleError(varDecl, "type implicitly set to 'any'");
                    }
                    varDecl.type = this.anyType;
                    infSym.setType(this.anyType);
                } else {
                    if(infSym.typeCheckStatus == 0 /* NotStarted */ ) {
                        infSym.typeCheckStatus = 1 /* Started */ ;
                        this.checker.addStartedPTO(infSym);
                        var resolved = false;
                        if(varDecl.type == null) {
                            if(varDecl.typeExpr) {
                                this.resolveBoundDecl(varDecl);
                                resolved = true;
                                varDecl.type = varDecl.typeExpr.type;
                                infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();
                            }
                        }
                        if(varDecl.init) {
                            var isLocalStatic = TypeScript.hasFlag(varDecl.varFlags, 32 /* LocalStatic */ );
                            var prevScope = this.scope;
                            var applyTargetType = !varDecl.init.isParenthesized;
                            if(isLocalStatic) {
                                this.scope = varDecl.sym.container.getType().memberScope;
                            }
                            if(varDecl.varFlags & 512 /* Property */ ) {
                                this.inBoundPropTypeCheck = true;
                            }
                            this.checker.typeCheckWithContextualType(varDecl.type, this.checker.inProvisionalTypecheckMode(), applyTargetType, varDecl.init);
                            if(this.inBoundPropTypeCheck) {
                                this.inBoundPropTypeCheck = false;
                            }
                            this.scope = prevScope;
                            if(varDecl.type) {
                                var preserveScope = false;
                                var preservedContainedScope = null;
                                if(varDecl.init.type) {
                                    preservedContainedScope = varDecl.init.type.containedScope;
                                    preserveScope = true;
                                    if(varDecl.init.type == this.voidType) {
                                        this.checker.errorReporter.simpleError(varDecl, "Cannot assign type 'void' to variable '" + varDecl.id.actualText + "'");
                                    }
                                }
                                varDecl.init = this.castWithCoercion(varDecl.init, varDecl.type, applyTargetType && !this.checker.inProvisionalTypecheckMode(), false);
                                if(preserveScope && varDecl.init.type.containedScope == null) {
                                    varDecl.init.type.containedScope = preservedContainedScope;
                                }
                            } else {
                                varDecl.type = this.checker.widenType(varDecl.init.type);
                                if(varDecl.type == this.voidType) {
                                    this.checker.errorReporter.simpleError(varDecl, "Cannot assign type 'void' to variable '" + varDecl.id.actualText + "'");
                                    varDecl.type = this.anyType;
                                }
                            }
                            infSym.setType(varDecl.type);
                        } else {
                            if(!resolved) {
                                this.resolveBoundDecl(varDecl);
                            }
                        }
                        infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();
                    } else {
                        if(this.checker.typeStatusIsFinished(infSym.typeCheckStatus) && (infSym.declAST != varDecl)) {
                            if(varDecl.init) {
                                varDecl.init = this.typeCheck(varDecl.init);
                                varDecl.type = infSym.getType();
                                varDecl.init = this.cast(varDecl.init, varDecl.type);
                            }
                        }
                    }
                }
            }
            if(varDecl.id && varDecl.sym) {
                varDecl.id.sym = varDecl.sym;
            }
            if(varDecl.sym && varDecl.sym.container) {
                this.checkTypePrivacy(varDecl.sym.getType(), varDecl.sym, function (typeName) {
                    return _this.varPrivacyErrorReporter(varDecl, typeName);
                });
            }
            return varDecl;
        };
        TypeFlow.prototype.varPrivacyErrorReporter = function (varDecl, typeName) {
            if(TypeScript.hasFlag(varDecl.varFlags, 4 /* Public */ )) {
                if(varDecl.sym.container.declAST.nodeType == 95 /* InterfaceDeclaration */ ) {
                    this.checker.errorReporter.simpleError(varDecl, "property '" + varDecl.sym.name + "' of exported interface has or is using private type '" + typeName + "'");
                } else {
                    this.checker.errorReporter.simpleError(varDecl, "public member '" + varDecl.sym.name + "' of exported class has or is using private type '" + typeName + "'");
                }
            } else {
                this.checker.errorReporter.simpleError(varDecl, "exported variable '" + varDecl.sym.name + "' has or is using private type '" + typeName + "'");
            }
        };
        TypeFlow.prototype.typeCheckSuper = function (ast) {
            if(this.thisType && (this.enclosingFncIsMethod && !this.thisFnc.isStatic()) && this.thisType.baseClass()) {
                ast.type = this.thisType.baseClass();
            } else {
                ast.type = this.anyType;
                this.checker.errorReporter.invalidSuperReference(ast);
            }
            return ast;
        };
        TypeFlow.prototype.typeCheckThis = function (ast) {
            var illegalThisRef = false;
            if(this.thisFnc == null) {
                if(this.thisType) {
                    if(this.thisClassNode && this.thisClassNode.nodeType == 94 /* ClassDeclaration */ ) {
                        illegalThisRef = true;
                        ast.type = this.anyType;
                    } else {
                        ast.type = this.thisType;
                    }
                } else {
                    if(this.checker.currentModDecl) {
                        this.checker.errorReporter.simpleError(ast, "'this' may not be referenced within module bodies");
                    }
                    ast.type = this.anyType;
                }
            } else {
                if(this.thisClassNode && (this.inBoundPropTypeCheck || (this.inSuperCall && TypeScript.hasFlag((this.thisClassNode).varFlags, 32768 /* ClassSuperMustBeFirstCallInConstructor */ )))) {
                    illegalThisRef = true;
                }
                if(this.thisFnc.isMethod() || this.thisFnc.isConstructor || this.thisFnc.isTargetTypedAsMethod) {
                    if(this.thisType && !(this.thisFnc.fncFlags & 16 /* Static */ )) {
                        ast.type = this.thisType;
                    } else {
                        ast.type = this.anyType;
                    }
                } else {
                    ast.type = this.anyType;
                }
            }
            if(!this.enclosingFncIsMethod && this.thisFnc && TypeScript.hasFlag(this.thisFnc.fncFlags, 32768 /* IsFatArrowFunction */ )) {
                if(this.thisFnc.boundToProperty) {
                    var container = this.thisFnc.boundToProperty.sym.container;
                    if(container.declAST.nodeType == 71 /* FuncDecl */ ) {
                        (container.declAST).setHasSelfReference();
                    }
                } else {
                    var encFnc = this.thisFnc.enclosingFnc;
                    var firstEncFnc = encFnc;
                    var foundMeth = false;
                    while(encFnc) {
                        if(encFnc.isMethod() || encFnc.isConstructor || encFnc.hasSelfReference()) {
                            encFnc.setHasSelfReference();
                            foundMeth = true;
                            break;
                        }
                        encFnc = encFnc.enclosingFnc;
                    }
                    if(!foundMeth && firstEncFnc) {
                        firstEncFnc.setHasSelfReference();
                    } else {
                        if(!foundMeth) {
                            if(this.thisClassNode) {
                                (this.thisClassNode).varFlags |= 131072 /* MustCaptureThis */ ;
                            } else {
                                if(this.checker.currentModDecl) {
                                    this.checker.currentModDecl.modFlags |= 4096 /* MustCaptureThis */ ;
                                } else {
                                    this.checker.mustCaptureGlobalThis = true;
                                }
                            }
                        }
                    }
                    if(foundMeth && this.thisType) {
                        ast.type = this.thisType;
                    }
                }
            }
            if(illegalThisRef) {
                this.checker.errorReporter.simpleError(ast, "Keyword 'this' cannot be referenced in initializers in a class body, or in super constructor calls");
            }
            return ast;
        };
        TypeFlow.prototype.setTypeFromSymbol = function (ast, symbol) {
            if(symbol.isVariable()) {
                if(symbol.isInferenceSymbol()) {
                    var infSym = symbol;
                    if(infSym.declAST && !this.checker.typeStatusIsFinished(infSym.typeCheckStatus)) {
                        this.inScopeTypeCheckDecl(infSym.declAST);
                    }
                    if(!this.checker.styleSettings.innerScopeDeclEscape) {
                        if(infSym.declAST && (infSym.declAST.nodeType == 73 /* VarDecl */ )) {
                            if(this.nestingLevel < (infSym.declAST).nestingLevel) {
                                this.checker.errorReporter.styleError(ast, "Illegal reference to a variable defined in more nested scope");
                            }
                        }
                    }
                }
                ast.type = symbol.getType();
                if(!symbol.writeable()) {
                    ast.flags = ast.flags & (~(4 /* Writeable */ ));
                }
            } else {
                if(symbol.isType()) {
                    ast.type = symbol.getType();
                    ast.flags = ast.flags & (~(4 /* Writeable */ ));
                } else {
                    ast.type = this.anyType;
                    this.checker.errorReporter.symbolDoesNotReferToAValue(ast, symbol.name);
                }
            }
        };
        TypeFlow.prototype.typeCheckName = function (ast) {
            var _this = this;
            var identifier = ast;
            if(this.checker.inWith) {
                identifier.type = this.anyType;
            } else {
                var typespace = this.inTypeRefTypeCheck;
                var idText = identifier.text;
                var originalIdText = idText;
                var isDynamicModuleName = TypeScript.isQuoted(identifier.text);
                var symbol = this.scope.find(idText, false, typespace);
                if(symbol == null && isDynamicModuleName) {
                    symbol = this.checker.findSymbolForDynamicModule(idText, this.currentScript.locationInfo.filename, function (id) {
                        return _this.scope.find(id, false, typespace);
                    });
                }
                if(!symbol) {
                    if(!identifier.isMissing()) {
                        this.checker.errorReporter.unresolvedSymbol(identifier, identifier.text);
                    }
                    identifier.type = this.anyType;
                } else {
                    if(TypeScript.optimizeModuleCodeGen && symbol && symbol.isType()) {
                        var symType = symbol.getType();
                        if(symType && (symbol).aliasLink && (symbol).onlyReferencedAsTypeRef) {
                            var modDecl = symType.symbol.declAST;
                            if(modDecl && TypeScript.hasFlag(modDecl.modFlags, 2048 /* IsDynamic */ )) {
                                (symbol).onlyReferencedAsTypeRef = this.inTypeRefTypeCheck;
                            }
                        }
                    }
                    if(symbol.declAST && symbol.declAST.nodeType == 71 /* FuncDecl */  && !(symbol.declAST).returnTypeAnnotation && (symbol.declAST).signature.typeCheckStatus == 1 /* Started */ ) {
                        (symbol.declAST).type.symbol.flags |= 131072 /* RecursivelyReferenced */ ;
                        (symbol.declAST).signature.returnType.type = this.anyType;
                    }
                    this.setTypeFromSymbol(ast, symbol);
                    identifier.sym = symbol;
                    if(this.thisFnc) {
                        if(this.thisFnc.type && symbol.container != this.thisFnc.type.symbol) {
                            this.thisFnc.freeVariables[this.thisFnc.freeVariables.length] = symbol;
                        }
                    }
                }
            }
            return ast;
        };
        TypeFlow.prototype.typeCheckScript = function (script) {
            this.checker.locationInfo = script.locationInfo;
            this.scope = this.checker.globalScope;
            if(!script.topLevelMod) {
                this.addLocalsFromScope(this.scope, this.checker.gloMod, script.vars, this.checker.globals, true);
            }
            this.currentScript = script;
            script.bod = this.typeCheck(script.bod);
            this.currentScript = null;
            return script;
        };
        TypeFlow.prototype.typeCheckBitNot = function (ast) {
            var unex = ast;
            unex.operand = this.typeCheck(unex.operand);
            unex.type = this.doubleType;
            return unex;
        };
        TypeFlow.prototype.typeCheckUnaryNumberOperator = function (ast) {
            var unex = ast;
            unex.operand = this.typeCheck(unex.operand);
            unex.type = this.doubleType;
            return ast;
        };
        TypeFlow.prototype.typeCheckLogNot = function (ast) {
            var unex = ast;
            unex.operand = this.typeCheck(unex.operand);
            unex.type = this.booleanType;
            return unex;
        };
        TypeFlow.prototype.astIsWriteable = function (ast) {
            return TypeScript.hasFlag(ast.flags, 4 /* Writeable */ );
        };
        TypeFlow.prototype.typeCheckIncOrDec = function (ast) {
            var unex = ast;
            var lval = unex.operand;
            if(!this.astIsWriteable(unex)) {
                this.checker.errorReporter.valueCannotBeModified(unex);
                unex.type = this.doubleType;
            } else {
                unex = this.typeCheckUnaryNumberOperator(ast);
                if(unex.operand.type != this.checker.numberType && unex.operand.type != this.checker.anyType && !(unex.operand.type.typeFlags & 8 /* IsEnum */ )) {
                    this.checker.errorReporter.simpleError(ast, "'++' and '--' may only be applied to operands of type 'number' or 'any'");
                }
            }
            return unex;
        };
        TypeFlow.prototype.typeCheckBitwiseOperator = function (ast, assignment) {
            var binex = ast;
            var resultType = null;
            binex.operand1 = this.typeCheck(binex.operand1);
            binex.operand2 = this.typeCheck(binex.operand2);
            var leftType = binex.operand1.type;
            var rightType = binex.operand2.type;
            if(assignment && (!this.astIsWriteable(binex))) {
                this.checker.errorReporter.valueCannotBeModified(binex);
            }
            if(this.checker.styleSettings.bitwise) {
                this.checker.errorReporter.styleError(ast, "use of " + TypeScript.nodeTypeTable[binex.nodeType]);
            }
            if(this.checker.sourceIsSubtypeOfTarget(leftType, this.doubleType) && (this.checker.sourceIsSubtypeOfTarget(rightType, this.doubleType))) {
                resultType = this.doubleType;
            } else {
                if((leftType == this.booleanType) && (rightType == this.booleanType)) {
                    resultType = this.booleanType;
                } else {
                    if(leftType == this.anyType) {
                        if((rightType == this.anyType) || (rightType == this.doubleType) || (rightType == this.booleanType)) {
                            resultType = this.anyType;
                        }
                    } else {
                        if(rightType == this.anyType) {
                            if((leftType == this.anyType) || (leftType == this.doubleType) || (leftType == this.booleanType)) {
                                resultType = this.anyType;
                            }
                        }
                    }
                }
            }
            if(resultType == null) {
                resultType = this.anyType;
                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType, binex.printLabel(), this.scope);
            }
            binex.type = resultType;
            return binex;
        };
        TypeFlow.prototype.typeCheckArithmeticOperator = function (ast, assignment) {
            var binex = ast;
            binex.operand1 = this.typeCheck(binex.operand1);
            binex.operand2 = this.typeCheck(binex.operand2);
            var leftType = binex.operand1.type;
            var rightType = binex.operand2.type;
            if(assignment && (!this.astIsWriteable(binex.operand1))) {
                this.checker.errorReporter.valueCannotBeModified(binex);
            }
            if(this.checker.styleSettings.bitwise && ((binex.nodeType == 47 /* And */ ) || (binex.nodeType == 45 /* Or */ ) || (binex.nodeType == 36 /* AsgAnd */ ) || (binex.nodeType == 38 /* AsgOr */ ))) {
                this.checker.errorReporter.styleError(ast, "use of " + TypeScript.nodeTypeTable[binex.nodeType]);
            }
            if(leftType == null || rightType == null) {
                this.checker.errorReporter.simpleError(binex, "Could not typecheck arithmetic operation.  Possible recursive typecheck error?");
                binex.type = this.anyType;
                return binex;
            }
            var nodeType = binex.nodeType;
            if(this.checker.isNullOrUndefinedType(leftType)) {
                leftType = rightType;
            }
            if(this.checker.isNullOrUndefinedType(rightType)) {
                rightType = leftType;
            }
            leftType = this.checker.widenType(leftType);
            rightType = this.checker.widenType(rightType);
            if(nodeType == 56 /* Add */  || nodeType == 31 /* AsgAdd */ ) {
                if(leftType == this.checker.stringType || rightType == this.checker.stringType) {
                    binex.type = this.checker.stringType;
                } else {
                    if(leftType == this.checker.numberType && rightType == this.checker.numberType) {
                        binex.type = this.checker.numberType;
                    } else {
                        if(this.checker.sourceIsSubtypeOfTarget(leftType, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.checker.numberType)) {
                            binex.type = this.checker.numberType;
                        } else {
                            if(leftType == this.checker.anyType || rightType == this.checker.anyType) {
                                binex.type = this.checker.anyType;
                            } else {
                                binex.type = this.anyType;
                                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType, binex.printLabel(), this.scope);
                            }
                        }
                    }
                }
            } else {
                if(leftType == this.checker.numberType && rightType == this.checker.numberType) {
                    binex.type = this.checker.numberType;
                } else {
                    if(this.checker.sourceIsSubtypeOfTarget(leftType, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.checker.numberType)) {
                        binex.type = this.checker.numberType;
                    } else {
                        if(leftType == this.checker.anyType || rightType == this.checker.anyType) {
                            binex.type = this.checker.numberType;
                        } else {
                            binex.type = this.anyType;
                            this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType, binex.printLabel(), this.scope);
                        }
                    }
                }
            }
            return binex;
        };
        TypeFlow.prototype.typeCheckDotOperator = function (ast) {
            var binex = ast;
            var leftIsFnc = false;
            binex.operand1 = this.typeCheck(binex.operand1);
            var leftType = binex.operand1.type;
            var leftScope = null;
            if(leftType) {
                if(leftType == this.anyType) {
                    binex.type = this.anyType;
                    return binex;
                } else {
                    if(leftType == this.stringType) {
                        if(this.stringInterfaceType) {
                            leftScope = this.stringInterfaceType.memberScope;
                        } else {
                            binex.type = this.anyType;
                            return binex;
                        }
                    } else {
                        if(leftType == this.doubleType) {
                            if(this.numberInterfaceType) {
                                leftScope = this.numberInterfaceType.memberScope;
                            } else {
                                binex.type = this.anyType;
                                return binex;
                            }
                        } else {
                            if(leftType == this.booleanType) {
                                if(this.booleanInterfaceType) {
                                    leftScope = this.booleanInterfaceType.memberScope;
                                } else {
                                    binex.type = this.anyType;
                                    return binex;
                                }
                            } else {
                                if((leftType.call || leftType.construct) && leftType.members == null) {
                                    if(this.functionInterfaceType) {
                                        leftScope = this.functionInterfaceType.memberScope;
                                    } else {
                                        binex.type = this.anyType;
                                        return binex;
                                    }
                                } else {
                                    if(leftType.elementType) {
                                        if(this.arrayInterfaceType) {
                                            var arrInstType = leftType.elementType.getArrayBase(this.arrayInterfaceType, this.checker);
                                            leftScope = arrInstType.memberScope;
                                        } else {
                                            binex.type = this.anyType;
                                            return binex;
                                        }
                                    } else {
                                        leftScope = leftType.memberScope;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if(leftScope == null) {
                this.checker.errorReporter.expectedClassOrInterface(binex);
                binex.type = this.anyType;
            } else {
                var propertyName = binex.operand2;
                var lhsIsEnclosingType = (this.thisClassNode && binex.operand1.type == this.thisClassNode.type.instanceType) || this.inTypeRefTypeCheck;
                var symbol = leftScope.find(propertyName.text, !lhsIsEnclosingType, this.inTypeRefTypeCheck);
                if(!symbol) {
                    if(this.objectInterfaceType && leftType) {
                        if(leftType.isReferenceType()) {
                            symbol = this.objectInterfaceType.memberScope.find(propertyName.text, false, this.inTypeRefTypeCheck);
                        }
                        if(!symbol) {
                            if(this.functionInterfaceType && (leftType.call || leftType.construct)) {
                                symbol = this.functionInterfaceType.memberScope.find(propertyName.text, false, this.inTypeRefTypeCheck);
                            }
                        }
                    }
                }
                if(!symbol || (!symbol.visible(leftScope, this.checker))) {
                    binex.type = this.anyType;
                    if(symbol == null) {
                        this.checker.errorReporter.simpleError(propertyName, "The property '" + propertyName.actualText + "' does not exist on value of type '" + leftType.getScopedTypeName(this.scope) + "'");
                    } else {
                        if(!this.inTypeRefTypeCheck) {
                            this.checker.errorReporter.simpleError(binex, "The property '" + propertyName.actualText + " on type '" + leftType.getScopedTypeName(this.scope) + "' is not visible");
                        }
                    }
                } else {
                    if(symbol.isVariable()) {
                        if(symbol.isInferenceSymbol()) {
                            var infSym = symbol;
                            if(infSym.declAST && !this.checker.typeStatusIsFinished(infSym.typeCheckStatus)) {
                                this.inScopeTypeCheckDecl(infSym.declAST);
                            }
                        }
                    }
                    propertyName.sym = symbol;
                    binex.type = symbol.getType();
                }
            }
            if(binex.type == null) {
                binex.type = this.anyType;
            }
            return binex;
        };
        TypeFlow.prototype.typeCheckBooleanOperator = function (ast) {
            var binex = ast;
            binex.operand1 = this.typeCheck(binex.operand1);
            binex.operand2 = this.typeCheck(binex.operand2);
            var leftType = binex.operand1.type;
            var rightType = binex.operand2.type;
            if((!(this.checker.sourceIsAssignableToTarget(leftType, rightType))) && (!(this.checker.sourceIsAssignableToTarget(rightType, leftType)))) {
                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType, binex.printLabel(), this.scope);
            }
            binex.type = this.booleanType;
            return binex;
        };
        TypeFlow.prototype.typeCheckAsgOperator = function (ast) {
            var binex = ast;
            var applyTargetType = !binex.operand2.isParenthesized;
            binex.operand1 = this.typeCheck(binex.operand1);
            this.checker.typeCheckWithContextualType(binex.operand1.type, this.checker.inProvisionalTypecheckMode(), applyTargetType, binex.operand2);
            var leftType = binex.operand1.type;
            var rightType = binex.operand2.type;
            if(!(this.astIsWriteable(binex.operand1))) {
                this.checker.errorReporter.valueCannotBeModified(binex);
            }
            if(binex.operand1.nodeType == 28 /* Call */ ) {
                var callEx = binex.operand1;
            }
            var preserveScope = false;
            var preservedContainedScope = null;
            if(binex.operand2.type) {
                preservedContainedScope = binex.operand2.type.containedScope;
                preserveScope = true;
            }
            binex.operand2 = this.castWithCoercion(binex.operand2, leftType, applyTargetType && !this.checker.inProvisionalTypecheckMode(), false);
            if(preserveScope && binex.operand2.type.containedScope == null) {
                binex.operand2.type.containedScope = preservedContainedScope;
            }
            binex.type = rightType;
            return binex;
        };
        TypeFlow.prototype.typeCheckIndex = function (ast) {
            var binex = ast;
            binex.operand1 = this.typeCheck(binex.operand1);
            binex.operand2 = this.typeCheck(binex.operand2);
            if(!this.checker.styleSettings.literalSubscript) {
                if(binex.operand2.nodeType == 7 /* QString */ ) {
                    this.checker.errorReporter.styleError(ast, "use literal subscript ('.') notation instead)");
                }
            }
            var objExprType = binex.operand1.type;
            var indexExprType = binex.operand2.type;
            if(objExprType.elementType) {
                if(indexExprType == this.checker.anyType || indexExprType == this.checker.numberType || TypeScript.hasFlag(indexExprType.typeFlags, 8 /* IsEnum */ )) {
                    binex.type = objExprType.elementType;
                } else {
                    if(indexExprType == this.checker.stringType) {
                        binex.type = this.checker.anyType;
                    } else {
                        this.checker.errorReporter.simpleError(binex, "Illegal property access");
                        binex.type = this.checker.anyType;
                    }
                }
            } else {
                if(objExprType.index) {
                    if(indexExprType == this.checker.anyType || !((objExprType.index.flags & 2 /* IsStringIndexer */ ) || (objExprType.index.flags & 4 /* IsNumberIndexer */ )) || ((objExprType.index.flags & 2 /* IsStringIndexer */ ) && indexExprType == this.checker.stringType) || ((objExprType.index.flags & 4 /* IsNumberIndexer */ ) && (indexExprType == this.checker.numberType || TypeScript.hasFlag(indexExprType.typeFlags, 8 /* IsEnum */ )))) {
                        var sig = this.resolveOverload(ast, objExprType.index);
                        if(sig) {
                            binex.type = sig.returnType.type;
                        } else {
                            binex.type = this.checker.anyType;
                        }
                    } else {
                        if(indexExprType == this.checker.stringType) {
                            binex.type = this.checker.anyType;
                        } else {
                            this.checker.errorReporter.simpleError(binex, "Illegal property access");
                            binex.type = this.checker.anyType;
                        }
                    }
                } else {
                    if((objExprType == this.checker.anyType || objExprType == this.checker.stringType || objExprType == this.checker.numberType || objExprType == this.checker.booleanType || objExprType.isReferenceType()) && (indexExprType == this.checker.anyType || indexExprType == this.checker.stringType || (indexExprType == this.checker.numberType || TypeScript.hasFlag(indexExprType.typeFlags, 8 /* IsEnum */ )))) {
                        binex.type = this.checker.anyType;
                    } else {
                        this.checker.errorReporter.simpleError(binex, "Illegal property access");
                        binex.type = this.checker.anyType;
                    }
                }
            }
            return binex;
        };
        TypeFlow.prototype.typeCheckInOperator = function (binex) {
            binex.operand1 = this.cast(this.typeCheck(binex.operand1), this.stringType);
            binex.operand2 = this.typeCheck(binex.operand2);
            if(!((binex.operand1.type == this.checker.anyType || binex.operand1.type == this.checker.stringType) && (binex.operand2.type == this.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand2.type, this.objectInterfaceType)))) {
                this.checker.errorReporter.simpleError(binex, "The in operator requires the left operand to be of type Any or the String primitive type, and the right operand to be of type Any or an object type");
            }
            binex.type = this.booleanType;
            return binex;
        };
        TypeFlow.prototype.typeCheckShift = function (binex, assignment) {
            binex.operand1 = this.cast(this.typeCheck(binex.operand1), this.doubleType);
            binex.operand2 = this.cast(this.typeCheck(binex.operand2), this.doubleType);
            if(assignment && (!(this.astIsWriteable(binex.operand1)))) {
                this.checker.errorReporter.valueCannotBeModified(binex);
            }
            binex.type = this.doubleType;
            return binex;
        };
        TypeFlow.prototype.typeCheckQMark = function (trinex) {
            trinex.operand1 = this.typeCheck(trinex.operand1);
            trinex.operand2 = this.typeCheck(trinex.operand2);
            trinex.operand3 = this.typeCheck(trinex.operand3);
            var leftType = trinex.operand2.type;
            var rightType = trinex.operand3.type;
            if(leftType == rightType) {
                trinex.type = leftType;
            } else {
                if(this.checker.sourceIsSubtypeOfTarget(leftType, rightType)) {
                    trinex.type = rightType;
                } else {
                    if(this.checker.sourceIsSubtypeOfTarget(rightType, leftType)) {
                        trinex.type = leftType;
                    } else {
                        trinex.type = this.anyType;
                        this.checker.errorReporter.incompatibleTypes(trinex, leftType, rightType, trinex.printLabel(), this.scope);
                    }
                }
            }
            return trinex;
        };
        TypeFlow.prototype.addFormals = function (container, signature, table) {
            var len = signature.parameters.length;
            for(var i = 0; i < len; i++) {
                var symbol = signature.parameters[i];
                symbol.container = container;
                table.add(symbol.name, symbol);
            }
        };
        TypeFlow.prototype.addLocalsFromScope = function (scope, container, vars, table, isModContainer) {
            var len = vars.members.length;
            var hasArgsDef = false;
            for(var i = 0; i < len; i++) {
                var local = vars.members[i];
                if(((local.sym == null) || (local.sym.kind() != 2 /* Field */ ))) {
                    var result = null;
                    if((result = table.lookup(local.id.text)) == null) {
                        var localVar = new TypeScript.ValueLocation();
                        localVar.typeLink = new TypeScript.TypeLink();
                        var varSym = null;
                        if(TypeScript.hasFlag(local.varFlags, 16 /* Static */ )) {
                            local.varFlags |= 32 /* LocalStatic */ ;
                            varSym = new TypeScript.FieldSymbol(local.id.text, local.minChar, this.checker.locationInfo.unitIndex, true, localVar);
                        } else {
                            varSym = new TypeScript.VariableSymbol(local.id.text, local.minChar, this.checker.locationInfo.unitIndex, localVar);
                        }
                        varSym.transferVarFlags(local.varFlags);
                        localVar.symbol = varSym;
                        varSym.declAST = local;
                        localVar.typeLink.ast = local.typeExpr;
                        this.checker.resolveTypeLink(scope, localVar.typeLink, false);
                        if((local.type == null) && (local.init == null)) {
                            local.type = this.anyType;
                        }
                        localVar.typeLink.type = local.type;
                        localVar.symbol.container = container;
                        local.sym = localVar.symbol;
                        table.add(local.id.text, varSym);
                        if(local.id.text == "arguments") {
                            hasArgsDef = true;
                        }
                    } else {
                        local.type = result.getType();
                        local.sym = result;
                    }
                }
            }
            if(!isModContainer) {
                if(!hasArgsDef) {
                    var argLoc = new TypeScript.ValueLocation();
                    argLoc.typeLink = new TypeScript.TypeLink();
                    var theArgSym = new TypeScript.VariableSymbol("arguments", vars.minChar, this.checker.locationInfo.unitIndex, argLoc);
                    if(!this.iargumentsInterfaceType) {
                        var argumentsSym = scope.find("IArguments", false, true);
                        if(argumentsSym) {
                            argumentsSym.flags |= 524288 /* CompilerGenerated */ ;
                            this.iargumentsInterfaceType = argumentsSym.getType();
                        } else {
                            this.iargumentsInterfaceType = this.anyType;
                        }
                    }
                    argLoc.typeLink.type = this.iargumentsInterfaceType;
                    table.add("arguments", theArgSym);
                }
            }
        };
        TypeFlow.prototype.addConstructorLocalArgs = function (container, args, table, isClass) {
            if(args) {
                var len = args.members.length;
                for(var i = 0; i < len; i++) {
                    var local = args.members[i];
                    if((local.sym == null) || (isClass || (local.sym.kind() != 2 /* Field */ ))) {
                        var result = null;
                        if((result = table.lookup(local.id.text)) == null) {
                            this.resolveBoundDecl(local);
                            var localVar = new TypeScript.ValueLocation();
                            localVar.typeLink = new TypeScript.TypeLink();
                            var varSym = new TypeScript.ParameterSymbol(local.id.text, local.minChar, this.checker.locationInfo.unitIndex, localVar);
                            varSym.declAST = local;
                            localVar.symbol = varSym;
                            localVar.typeLink.type = local.type;
                            localVar.symbol.container = container;
                            local.sym = localVar.symbol;
                            table.add(local.id.text, varSym);
                        } else {
                            local.type = result.getType();
                            local.sym = result;
                        }
                    }
                }
            }
        };
        TypeFlow.prototype.checkInitSelf = function (funcDecl) {
            if(!funcDecl.isMethod()) {
                var freeVars = funcDecl.freeVariables;
                for(var k = 0, len = freeVars.length; k < len; k++) {
                    var sym = freeVars[k];
                    if(sym.isInstanceProperty()) {
                        return true;
                    }
                }
            }
            var fns = funcDecl.scopes;
            var fnsLen = fns.members.length;
            for(var j = 0; j < fnsLen; j++) {
                var fn = fns.members[j];
                if(this.checkInitSelf(fn)) {
                    return true;
                }
            }
            return false;
        };
        TypeFlow.prototype.checkPromoteFreeVars = function (funcDecl, constructorSym) {
            var freeVars = funcDecl.freeVariables;
            for(var k = 0, len = freeVars.length; k < len; k++) {
                var sym = freeVars[k];
                if((!sym.isInstanceProperty()) && (sym.container == constructorSym)) {
                    TypeScript.instanceFilter.reset();
                    if(this.scope.search(TypeScript.instanceFilter, sym.name, false, false)) {
                        this.checker.errorReporter.simpleError(funcDecl, "Constructor-local variable shadows class property '" + sym.name + "'. To access the class property, use 'self." + sym.name + "'");
                    }
                    this.checker.errorReporter.simpleError(funcDecl, "Constructor-local variables may not be accessed from instance method bodies. Consider changing local variable '" + sym.name + "' to a class property");
                }
            }
        };
        TypeFlow.prototype.allReturnsAreVoid = function (funcDecl) {
            var allReturnsAreVoid = true;
            if(funcDecl.signature.returnType.type == null) {
                var preFindReturnExpressionTypes = function (ast, parent, walker) {
                    var go = true;
                    switch(ast.nodeType) {
                        case 71 /* FuncDecl */ : {
                            go = false;
                            break;

                        }
                        case 75 /* Return */ : {
                            var returnStmt = ast;
                            if(returnStmt.returnExpression) {
                                allReturnsAreVoid = false;
                                go = false;
                            }

                        }
                        default: {
                            break;

                        }
                    }
                    walker.options.goChildren = go;
                    walker.options.goNextSibling = go;
                    return ast;
                };
                TypeScript.getAstWalkerFactory().walk(funcDecl.bod, preFindReturnExpressionTypes);
            }
            return allReturnsAreVoid;
        };
        TypeFlow.prototype.classConstructorHasSuperCall = function (funcDecl) {
            var foundSuper = false;
            var preFindSuperCall = function (ast, parent, walker) {
                var go = true;
                switch(ast.nodeType) {
                    case 71 /* FuncDecl */ : {
                        go = false;
                        break;

                    }
                    case 28 /* Call */ : {
                        var call = ast;
                        if(call.target.nodeType == 6 /* Super */ ) {
                            go = false;
                            foundSuper = true;
                            break;
                        }
                        break;

                    }
                    default: {
                        break;

                    }
                }
                walker.options.goChildren = go;
                return ast;
            };
            TypeScript.getAstWalkerFactory().walk(funcDecl.bod, preFindSuperCall);
            return foundSuper;
        };
        TypeFlow.prototype.baseListPrivacyErrorReporter = function (bases, i, declSymbol, extendsList, typeName, isModuleName) {
            var baseSymbol = bases.members[i].type.symbol;
            var declTypeString = (declSymbol.declAST.nodeType == 95 /* InterfaceDeclaration */ ) ? "interface" : "class";
            var baseListTypeString = extendsList ? "extends" : "implements";
            var baseTypeString = (baseSymbol.declAST.nodeType == 95 /* InterfaceDeclaration */ ) ? "interface" : "class";
            if(isModuleName) {
                baseTypeString = " " + baseTypeString + " from private module";
            } else {
                baseTypeString = " private " + baseTypeString;
            }
            this.checker.errorReporter.simpleError(bases.members[i], "exported " + declTypeString + " '" + declSymbol.name + "' " + baseListTypeString + baseTypeString + " '" + typeName + "'");
        };
        TypeFlow.prototype.typeCheckBaseListPrivacy = function (bases, declSymbol, extendsList) {
            var _this = this;
            if(bases) {
                var basesLen = bases.members.length;
                for(var i = 0; i < basesLen; i++) {
                    if(bases.members[i].type == this.checker.anyType) {
                        continue;
                    }
                    this.checkSymbolPrivacy(bases.members[i].type.symbol, declSymbol, function (typeName, isModuleName) {
                        return _this.baseListPrivacyErrorReporter(bases, i, declSymbol, extendsList, typeName, isModuleName);
                    });
                }
            }
        };
        TypeFlow.prototype.checkSymbolPrivacy = function (typeSymbol, declSymbol, errorCallback) {
            var isImportedTypeSymbol = false;
            var declSymbolPath = null;
            var declSymbolPathLength = 0;
            var topTypeSymbol = null;
            if(typeSymbol.isExternallyVisible(this.checker)) {
                var typeSymbolPath = typeSymbol.pathToRoot();
                declSymbolPath = declSymbol.pathToRoot();
                var typeSymbolLength = typeSymbolPath.length;
                declSymbolPathLength = declSymbolPath.length;
                if(typeSymbolLength > 0 && declSymbolPathLength > 0) {
                    topTypeSymbol = typeSymbolPath[typeSymbolLength - 1];
                    var topDeclSymbol = declSymbolPath[declSymbolPathLength - 1];
                    if(topTypeSymbol != topDeclSymbol && topTypeSymbol.getType().isModuleType() && TypeScript.isQuoted(topTypeSymbol.prettyName)) {
                        isImportedTypeSymbol = true;
                    }
                }
                if(!isImportedTypeSymbol) {
                    return;
                }
            }
            var interfaceDecl = declSymbol.getInterfaceDeclFromSymbol(this.checker);
            if(interfaceDecl && !TypeScript.hasFlag(interfaceDecl.varFlags, 1 /* Exported */ )) {
                return;
            }
            var checkVisibilitySymbol = declSymbol;
            var varDecl = declSymbol.getVarDeclFromSymbol();
            if(varDecl) {
                if(TypeScript.hasFlag(varDecl.varFlags, 2 /* Private */ )) {
                    return;
                } else {
                    if(TypeScript.hasFlag(varDecl.varFlags, 4 /* Public */ )) {
                        checkVisibilitySymbol = declSymbol.container;
                    }
                }
            }
            var importDecl = declSymbol.getImportDeclFromSymbol();
            if(importDecl) {
                if(!TypeScript.hasFlag(importDecl.varFlags, 1 /* Exported */ )) {
                    return;
                }
                checkVisibilitySymbol = declSymbol.container;
            }
            if(checkVisibilitySymbol.isExternallyVisible(this.checker)) {
                var privateSymbolName = typeSymbol.name;
                if(isImportedTypeSymbol) {
                    var ignoreSymbols = [];
                    privateSymbolName = null;
                    for(var i = 0; i < declSymbolPathLength; i++) {
                        var symbolType = declSymbolPath[i].getType();
                        if(symbolType.isModuleType()) {
                            ignoreSymbols.push(declSymbolPath[i]);
                            var moduleType = symbolType;
                            var prettyName = moduleType.findDynamicModuleName(topTypeSymbol.type, "", true, ignoreSymbols);
                            if(prettyName != null) {
                                return;
                            }
                            if(privateSymbolName == null) {
                                privateSymbolName = moduleType.findDynamicModuleName(topTypeSymbol.type, "", false, ignoreSymbols);
                            }
                        }
                    }
                }
                errorCallback(privateSymbolName, typeSymbol.name != privateSymbolName);
            }
        };
        TypeFlow.prototype.checkTypePrivacy = function (type, declSymbol, errorCallback) {
            var _this = this;
            if(!(type && type.primitiveTypeClass == 0 /* None */ )) {
                return;
            }
            if(type.isArray()) {
                return this.checkTypePrivacy(type.elementType, declSymbol, errorCallback);
            }
            if(type.symbol && type.symbol.name && type.symbol.name != "_anonymous" && (((type.call == null) && (type.construct == null) && (type.index == null)) || (type.members && (!type.isClass())))) {
                return this.checkSymbolPrivacy(type.symbol, declSymbol, errorCallback);
            }
            if(type.members) {
                type.members.allMembers.map(function (key, s, unused) {
                    var sym = s;
                    if(!TypeScript.hasFlag(sym.flags, 8192 /* BuiltIn */ )) {
                        _this.checkTypePrivacy(sym.getType(), declSymbol, errorCallback);
                    }
                }, null);
            }
            this.checkSignatureGroupPrivacy(type.call, declSymbol, errorCallback);
            this.checkSignatureGroupPrivacy(type.construct, declSymbol, errorCallback);
            this.checkSignatureGroupPrivacy(type.index, declSymbol, errorCallback);
        };
        TypeFlow.prototype.checkSignatureGroupPrivacy = function (sgroup, declSymbol, errorCallback) {
            if(sgroup) {
                var len = sgroup.signatures.length;
                for(var i = 0; i < sgroup.signatures.length; i++) {
                    var signature = sgroup.signatures[i];
                    if(len > 1 && signature == sgroup.definitionSignature) {
                        continue;
                    }
                    if(signature.returnType) {
                        this.checkTypePrivacy(signature.returnType.type, declSymbol, errorCallback);
                    }
                    var paramLen = signature.parameters.length;
                    for(var j = 0; j < paramLen; j++) {
                        var param = signature.parameters[j];
                        this.checkTypePrivacy(param.getType(), declSymbol, errorCallback);
                    }
                }
            }
        };
        TypeFlow.prototype.functionArgumentPrivacyErrorReporter = function (funcDecl, p, paramSymbol, typeName) {
            var isGetter = funcDecl.isAccessor() && TypeScript.hasFlag(funcDecl.fncFlags, 64 /* GetAccessor */ );
            var isSetter = funcDecl.isAccessor() && TypeScript.hasFlag(funcDecl.fncFlags, 128 /* SetAccessor */ );
            var isPublicFunc = TypeScript.hasFlag(funcDecl.fncFlags, 4 /* Public */ );
            var isContainerInterface = funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker) != null;
            if(!isContainerInterface) {
                if(funcDecl.isConstructor) {
                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported class's constructor parameter '" + paramSymbol.name + "' has or is using private type '" + typeName + "'");
                } else {
                    if(isSetter) {
                        this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], (isPublicFunc ? "public" : "exported") + " setter parameter '" + paramSymbol.name + "' has or is using private type '" + typeName + "'");
                    } else {
                        if(!isGetter) {
                            this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], (isPublicFunc ? "public" : "exported") + " function parameter '" + paramSymbol.name + "' has or is using private type '" + typeName + "'");
                        }
                    }
                }
            } else {
                if(funcDecl.isConstructMember()) {
                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface's constructor parameter '" + paramSymbol.name + "' has or is using private type '" + typeName + "'");
                } else {
                    if(funcDecl.isCallMember()) {
                        this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface's call parameter '" + paramSymbol.name + "' has or is using private type '" + typeName + "'");
                    } else {
                        if(!funcDecl.isIndexerMember()) {
                            this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], "exported interface's function parameter '" + paramSymbol.name + "' has or is using private type '" + typeName + "'");
                        }
                    }
                }
            }
        };
        TypeFlow.prototype.returnTypePrivacyError = function (astError, funcDecl, typeName) {
            var isGetter = funcDecl.isAccessor() && TypeScript.hasFlag(funcDecl.fncFlags, 64 /* GetAccessor */ );
            var isSetter = funcDecl.isAccessor() && TypeScript.hasFlag(funcDecl.fncFlags, 128 /* SetAccessor */ );
            var isPublicFunc = TypeScript.hasFlag(funcDecl.fncFlags, 4 /* Public */ );
            var isContainerInterface = funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker) != null;
            if(!isContainerInterface) {
                if(isGetter) {
                    this.checker.errorReporter.simpleError(astError, (isPublicFunc ? "public" : "exported") + " getter return type has or is using private type '" + typeName + "'");
                } else {
                    if(!isSetter) {
                        this.checker.errorReporter.simpleError(astError, (isPublicFunc ? "public" : "exported") + " function return type has or is using private type '" + typeName + "'");
                    }
                }
            } else {
                if(funcDecl.isConstructMember()) {
                    this.checker.errorReporter.simpleError(astError, "exported interface's constructor return type has or is using private type '" + typeName + "'");
                } else {
                    if(funcDecl.isCallMember()) {
                        this.checker.errorReporter.simpleError(astError, "exported interface's call return type has or is using private type '" + typeName + "'");
                    } else {
                        if(funcDecl.isIndexerMember()) {
                            this.checker.errorReporter.simpleError(astError, "exported interface's indexer return type has or is using private type '" + typeName + "'");
                        } else {
                            this.checker.errorReporter.simpleError(astError, "exported interface's function return type has or is using private type '" + typeName + "'");
                        }
                    }
                }
            }
        };
        TypeFlow.prototype.functionReturnTypePrivacyErrorReporter = function (funcDecl, signature, typeName) {
            var reportOnFuncDecl = false;
            if(funcDecl.returnTypeAnnotation != null && funcDecl.returnTypeAnnotation.type == signature.returnType.type) {
                this.returnTypePrivacyError(funcDecl.returnTypeAnnotation, funcDecl, typeName);
            }
            for(var i = 0; i < funcDecl.returnStatementsWithExpressions.length; i++) {
                if(funcDecl.returnStatementsWithExpressions[i].type == signature.returnType.type) {
                    this.returnTypePrivacyError(funcDecl.returnStatementsWithExpressions[i], funcDecl, typeName);
                } else {
                    reportOnFuncDecl = true;
                }
            }
            if(reportOnFuncDecl) {
                this.returnTypePrivacyError(funcDecl, funcDecl, typeName);
            }
        };
        TypeFlow.prototype.typeCheckFunction = function (funcDecl) {
            var _this = this;
            this.nestingLevel = 0;
            var fnType = funcDecl.type;
            var fgSym = fnType.symbol;
            var signature = funcDecl.signature;
            if(this.checker.typeStatusIsFinished(signature.typeCheckStatus)) {
                return funcDecl;
            } else {
                if(signature.typeCheckStatus == 1 /* Started */ ) {
                    if(!funcDecl.returnTypeAnnotation && funcDecl.bod && !funcDecl.isSignature() && !(funcDecl.isConstructor) && this.allReturnsAreVoid(funcDecl)) {
                        signature.returnType.type = this.voidType;
                        return funcDecl;
                    } else {
                        if(funcDecl.returnTypeAnnotation == null) {
                            if(this.checker.styleSettings.implicitAny) {
                                this.checker.errorReporter.styleError(funcDecl, "type implicitly set to 'any'");
                            }
                            signature.returnType.type = this.anyType;
                            fgSym.flags |= 131072 /* RecursivelyReferenced */ ;
                        }
                        return funcDecl;
                    }
                }
            }
            signature.typeCheckStatus = 1 /* Started */ ;
            this.checker.addStartedPTO(signature);
            var prevScope = this.scope;
            var prevFnc = this.thisFnc;
            var prevMethodStatus = this.enclosingFncIsMethod;
            var prevClassNode = this.thisClassNode;
            this.enclosingFncIsMethod = funcDecl.isMethod() || funcDecl.isConstructor;
            this.thisFnc = funcDecl;
            var container = funcDecl.type.symbol;
            var prevThisType = this.thisType;
            var prevLocationInfo = this.checker.locationInfo;
            var funcTable = null;
            var acceptedContextualType = false;
            var targetParams = null;
            var targetReturnType = null;
            var isGetter = funcDecl.isAccessor() && TypeScript.hasFlag(funcDecl.fncFlags, 64 /* GetAccessor */ );
            var isSetter = funcDecl.isAccessor() && TypeScript.hasFlag(funcDecl.fncFlags, 128 /* SetAccessor */ );
            var accessorType = (isGetter || isSetter) && funcDecl.accessorSymbol ? funcDecl.accessorSymbol.getType() : null;
            var prevModDecl = this.checker.currentModDecl;
            if(funcDecl.isConstructor && !funcDecl.isOverload) {
                if(fnType.instanceType == null) {
                    this.checker.errorReporter.simpleError(funcDecl, "Malformed function body (is this a class named the same as an existing interface?)");
                    return funcDecl;
                }
                this.scope = fnType.instanceType.constructorScope;
                var ssb = this.scope;
                funcTable = ssb.valueMembers.allMembers;
            } else {
                if((funcDecl.isSpecialFn() && !(funcDecl.fncFlags & 512 /* Signature */ )) || funcDecl.isOverload) {
                    funcTable = funcDecl.symbols;
                    if(!TypeScript.hasFlag(funcDecl.fncFlags, 16 /* Static */ ) && fnType.containedScope) {
                        this.scope = fnType.containedScope;
                    }
                } else {
                    if(funcDecl.bod) {
                        this.scope = fnType.containedScope;
                    }
                    var ssb = this.scope;
                    if(ssb && ssb.valueMembers) {
                        funcTable = ssb.valueMembers.allMembers;
                    }
                }
            }
            if(funcDecl.isConstructor && funcDecl.bod && TypeScript.hasFlag(funcDecl.fncFlags, 262144 /* ClassMethod */ )) {
                var hasBaseType = TypeScript.hasFlag(funcDecl.classDecl.type.instanceType.typeFlags, 32 /* HasBaseType */ );
                var noSuperCallAllowed = !hasBaseType || TypeScript.hasFlag(funcDecl.classDecl.type.instanceType.typeFlags, 64 /* HasBaseTypeOfObject */ );
                var superCallMustBeFirst = TypeScript.hasFlag((funcDecl.classDecl).varFlags, 32768 /* ClassSuperMustBeFirstCallInConstructor */ );
                if(noSuperCallAllowed && this.classConstructorHasSuperCall(funcDecl)) {
                    this.checker.errorReporter.simpleError(funcDecl, "Calls to 'super' constructor are not allowed in classes that either inherit directly from 'Object' or have no base class");
                } else {
                    if(hasBaseType) {
                        if(superCallMustBeFirst) {
                            if(!funcDecl.bod || !funcDecl.bod.members.length || !((funcDecl.bod.members[0].nodeType == 28 /* Call */  && (funcDecl.bod.members[0]).target.nodeType == 6 /* Super */ ) || (TypeScript.hasFlag(funcDecl.bod.flags, 128 /* StrictMode */ ) && funcDecl.bod.members.length > 1 && funcDecl.bod.members[1].nodeType == 28 /* Call */  && (funcDecl.bod.members[1]).target.nodeType == 6 /* Super */ ))) {
                                this.checker.errorReporter.simpleError(funcDecl, "If a derived class contains initialized properties or constructor parameter properties, the first statement in the constructor body must be a call to the super constructor");
                            }
                        } else {
                            if(!this.classConstructorHasSuperCall(funcDecl)) {
                                this.checker.errorReporter.simpleError(funcDecl, "Constructors for derived classes must contain a call to the class's 'super' constructor");
                            }
                        }
                    }
                }
            }
            if(funcDecl.isMethod() && funcDecl.type.enclosingType) {
                var enclosingClassNode = null;
                if(funcDecl.type.enclosingType.symbol.declAST.nodeType == 71 /* FuncDecl */ ) {
                    enclosingClassNode = (funcDecl.type.enclosingType.symbol.declAST).classDecl;
                } else {
                    if(funcDecl.type.enclosingType.symbol.declAST.nodeType == 94 /* ClassDeclaration */ ) {
                        enclosingClassNode = funcDecl.type.enclosingType.symbol.declAST;
                    }
                }
                if(enclosingClassNode) {
                    this.thisClassNode = enclosingClassNode;
                }
            }
            if(fnType.enclosingType) {
                ; ;
                var enclosingSym = fnType.symbol.container;
                if(enclosingSym && enclosingSym.isType() && enclosingSym.getType().isClass()) {
                    enclosingSym = enclosingSym.container;
                }
                if(enclosingSym && enclosingSym.declAST && enclosingSym.declAST.nodeType == 96 /* ModuleDeclaration */ ) {
                    this.checker.currentModDecl = enclosingSym.declAST;
                }
            }
            if(funcDecl.unitIndex > 0) {
                if(this.checker.units && (funcDecl.unitIndex < this.checker.units.length)) {
                    this.checker.locationInfo = this.checker.units[funcDecl.unitIndex];
                } else {
                    this.checker.locationInfo = TypeScript.unknownLocationInfo;
                }
            }
            if(fnType.enclosingType) {
                this.thisType = fnType.enclosingType;
            } else {
                this.thisType = prevThisType;
            }
            var paramLen = signature.parameters.length;
            if(!funcDecl.isConstructor && funcDecl.bod && !funcDecl.isSignature()) {
                var tmpParamScope = this.scope;
                var ssb = this.scope;
                if(!funcDecl.isMethod() && funcDecl.returnTypeAnnotation == null) {
                    if(prevScope && funcDecl.name && !funcDecl.name.isMissing()) {
                        var considerSym = prevScope.findAmbient(funcDecl.name.text, false, false);
                        if(considerSym && considerSym.declAST && considerSym.declAST.type) {
                            this.checker.setContextualType(considerSym.declAST.type, false);
                        }
                    }
                    if(this.checker.hasTargetType()) {
                        var candidateTypeContext = this.checker.getTargetTypeContext();
                        var candidateType = candidateTypeContext.contextualType;
                        if(this.checker.canContextuallyTypeFunction(candidateType, funcDecl, true)) {
                            var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;
                            candidateTypeContext.targetSig = candidateSigs.signatures[0];
                            var candidateParams = candidateTypeContext.targetSig.parameters;
                            targetParams = candidateParams;
                            targetReturnType = candidateTypeContext.targetSig.returnType.type;
                            if(candidateTypeContext.targetSig.declAST) {
                                if(candidateTypeContext.targetSig.declAST.isConstructor) {
                                    funcDecl.isTargetTypedAsMethod = true;
                                } else {
                                    if(candidateTypeContext.targetSig.declAST.isMethod()) {
                                        funcDecl.isTargetTypedAsMethod = true;
                                    }
                                }
                            }
                            fgSym.type = candidateTypeContext.contextualType;
                            acceptedContextualType = true;
                        } else {
                            if(candidateType && funcDecl.isAccessor()) {
                                accessorType = candidateType;
                                candidateTypeContext.targetAccessorType = accessorType;
                            } else {
                                this.checker.killCurrentContextualType();
                            }
                        }
                    }
                }
                var paramTable = ssb.valueMembers;
                this.scope = new TypeScript.SymbolScopeBuilder(paramTable, null, null, null, prevScope, container);
                for(var p = 0; p < paramLen; p++) {
                    var symbol = signature.parameters[p];
                    var ast = symbol.declAST;
                    if(this.checker.hasTargetType() && (targetParams && (this.checker.getTargetTypeContext().targetSig.hasVariableArgList || p < targetParams.length))) {
                        var candidateTypeContext = this.checker.getTargetTypeContext();
                        var hasVarArgList = candidateTypeContext.targetSig.hasVariableArgList;
                        ast.type = hasVarArgList && p >= targetParams.length - 1 ? targetParams[targetParams.length - 1].getType().elementType : targetParams[p].getType();
                        ast.sym.setType(ast.type);
                        (ast.sym).typeCheckStatus = this.checker.getTypeCheckFinishedStatus();
                    } else {
                        this.typeCheck(ast);
                    }
                    if(isSetter && accessorType) {
                        ast = this.cast(ast, accessorType);
                    }
                    symbol.container = container;
                    this.checkTypePrivacy(symbol.getType(), container, function (typeName) {
                        return _this.functionArgumentPrivacyErrorReporter(funcDecl, p, symbol, typeName);
                    });
                    paramTable.publicMembers.add(symbol.name, symbol);
                }
                this.scope = tmpParamScope;
            } else {
                this.typeCheck(funcDecl.arguments);
                for(var p = 0; p < paramLen; p++) {
                    signature.parameters[p].parameter.typeLink.type = funcDecl.arguments.members[p].type;
                    this.checkTypePrivacy(signature.parameters[p].getType(), container, function (typeName) {
                        return _this.functionArgumentPrivacyErrorReporter(funcDecl, p, signature.parameters[p], typeName);
                    });
                    if((funcDecl.arguments.members[p]).parameterPropertySym) {
                        (funcDecl.arguments.members[p]).parameterPropertySym.setType(funcDecl.arguments.members[p].type);
                    }
                }
                if((funcDecl.fncFlags & 65536 /* IndexerMember */ )) {
                    if(!paramLen || paramLen > 1) {
                        this.checker.errorReporter.simpleError(funcDecl, "Index signatures may take one and only one parameter");
                    } else {
                        if(funcDecl.arguments.members[0].type == this.checker.numberType) {
                            fnType.index.flags |= 4 /* IsNumberIndexer */ ;
                        } else {
                            if(funcDecl.arguments.members[0].type == this.checker.stringType) {
                                fnType.index.flags |= 2 /* IsStringIndexer */ ;
                            } else {
                                this.checker.errorReporter.simpleError(funcDecl.arguments.members[0], "Index signatures may only take 'string' or 'number' as their parameter");
                            }
                        }
                    }
                }
            }
            if(funcDecl.bod && (!funcDecl.isSignature())) {
                if(!(funcDecl.isConstructor)) {
                    this.addFormals(container, signature, funcTable);
                } else {
                    this.addConstructorLocalArgs(funcDecl.type.symbol, funcDecl.arguments, funcTable, TypeScript.hasFlag(funcDecl.fncFlags, 262144 /* ClassMethod */ ));
                    if(this.thisClassNode && this.thisClassNode.extendsList) {
                        var tmpScope = this.scope;
                        var funcMembers = new TypeScript.ScopedMembers(funcTable);
                        this.scope = new TypeScript.FilteredSymbolScopeBuilder(funcMembers, prevScope, funcDecl.type.symbol, function (sym) {
                            return sym.kind() == 3 /* Parameter */ ;
                        });
                        this.typeCheckBaseCalls(this.thisClassNode.extendsList);
                        this.scope = tmpScope;
                    }
                }
                var prevMod = this.checker.currentModDecl;
                if(funcDecl.type && funcDecl.type.symbol && !funcDecl.isMethod() && funcDecl.type.symbol.declModule) {
                    this.checker.currentModDecl = funcDecl.type.symbol.declModule;
                }
                if(acceptedContextualType) {
                    this.checker.setContextualType(null, this.checker.inProvisionalTypecheckMode());
                }
                this.typeCheck(funcDecl.bod);
                if(acceptedContextualType) {
                    this.checker.unsetContextualType();
                }
                this.checker.currentModDecl = prevMod;
                if(this.checker.checkControlFlow) {
                    var cfg = funcDecl.buildControlFlow();
                    if(this.checker.printControlFlowGraph) {
                        cfg.print(this.checker.errorReporter.outfile);
                    }
                    cfg.reportUnreachable(this.checker.errorReporter);
                    if(this.checker.checkControlFlowUseDef) {
                        cfg.useDef(this.checker.errorReporter, funcDecl.type.symbol);
                    }
                }
                if(funcDecl.isConstructor) {
                    var fns = funcDecl.scopes;
                    var fnsLen = fns.members.length;
                    var freeVars;
                    var sym;
                    var j = 0;
                    for(; j < fnsLen; j++) {
                        var fn = fns.members[j];
                        if(!fn.isSignature()) {
                            if(TypeScript.hasFlag(fn.fncFlags, 1024 /* Method */ ) && (!TypeScript.hasFlag(fn.fncFlags, 16 /* Static */ ))) {
                                this.checkPromoteFreeVars(fn, funcDecl.type.symbol);
                            }
                        }
                    }
                }
            }
            this.scope = prevScope;
            this.thisFnc = prevFnc;
            this.thisClassNode = prevClassNode;
            this.enclosingFncIsMethod = prevMethodStatus;
            this.thisType = prevThisType;
            this.checker.locationInfo = prevLocationInfo;
            this.checker.currentModDecl = prevModDecl;
            signature.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();
            if(funcDecl.returnTypeAnnotation) {
                this.checkForVoidConstructor(funcDecl.returnTypeAnnotation.type, funcDecl.returnTypeAnnotation);
                if(signature.returnType.type == null) {
                    this.checker.resolveTypeLink(this.scope, signature.returnType, false);
                }
            } else {
                if(targetReturnType) {
                    signature.returnType.type = targetReturnType;
                }
            }
            if(!(fgSym.flags & 131072 /* RecursivelyReferenced */ ) && funcDecl.returnStatementsWithExpressions.length > 0) {
                var collection = {
                    getLength: function () {
                        return funcDecl.returnStatementsWithExpressions.length;
                    },
                    setTypeAtIndex: function (index, type) {
                        funcDecl.returnStatementsWithExpressions[index].type = type;
                    },
                    getTypeAtIndex: function (index) {
                        return funcDecl.returnStatementsWithExpressions[index].type;
                    }
                };
                var bestCommonReturnType = funcDecl.returnStatementsWithExpressions[0].type;
                bestCommonReturnType = this.checker.findBestCommonType(bestCommonReturnType, null, collection, true);
                if(bestCommonReturnType) {
                    signature.returnType.type = this.checker.widenType(bestCommonReturnType);
                } else {
                    for(var i = 0; i < funcDecl.returnStatementsWithExpressions.length; i++) {
                        this.checker.errorReporter.simpleError(funcDecl.returnStatementsWithExpressions[i], "Incompatible return type");
                    }
                    signature.returnType.type = this.anyType;
                }
            }
            if(signature.returnType.type == null) {
                if(TypeScript.hasFlag(funcDecl.fncFlags, 2048 /* HasReturnExpression */ )) {
                    if(this.checker.styleSettings.implicitAny) {
                        this.checker.errorReporter.styleError(funcDecl, "type implicitly set to 'any'");
                    }
                    signature.returnType.type = this.anyType;
                } else {
                    signature.returnType.type = this.voidType;
                }
            } else {
                if(signature.returnType.type == this.nullType || signature.returnType.type == this.checker.undefinedType) {
                    signature.returnType.type = this.anyType;
                } else {
                    if((signature.returnType.type != this.voidType && signature.returnType.type != this.checker.undefinedType && signature.returnType.type != this.anyType)) {
                        if(!funcDecl.isSignature() && !funcDecl.isConstructor && !TypeScript.hasFlag(funcDecl.fncFlags, 2048 /* HasReturnExpression */ ) && !TypeScript.hasFlag(funcDecl.fncFlags, 32768 /* IsFatArrowFunction */ )) {
                            var onlyHasThrow = (funcDecl.bod.members.length > 0) && (funcDecl.bod.members[0].nodeType == 78 /* Throw */ );
                            if(!onlyHasThrow) {
                                this.checker.errorReporter.simpleError(funcDecl, "Function declared a non-void return type, but has no return expression");
                            }
                        }
                        this.checkTypePrivacy(signature.returnType.type, container, function (typeName) {
                            return _this.functionReturnTypePrivacyErrorReporter(funcDecl, signature, typeName);
                        });
                    }
                }
            }
            if(funcDecl.accessorSymbol) {
                var accessorType = funcDecl.accessorSymbol.getType();
                if(TypeScript.hasFlag(funcDecl.fncFlags, 64 /* GetAccessor */ ) && !TypeScript.hasFlag(funcDecl.fncFlags, 2048 /* HasReturnExpression */ )) {
                    this.checker.errorReporter.simpleError(funcDecl, "Getters must return a value");
                }
                if(accessorType) {
                    if((TypeScript.hasFlag(funcDecl.fncFlags, 64 /* GetAccessor */ ) && accessorType != signature.returnType.type) || (funcDecl.arguments.members.length > 0 && accessorType != funcDecl.arguments.members[0].type)) {
                        this.checker.errorReporter.simpleError(funcDecl, "Getter and setter types do not agree");
                    }
                } else {
                    if(TypeScript.hasFlag(funcDecl.fncFlags, 64 /* GetAccessor */ )) {
                        funcDecl.accessorSymbol.setType(signature.returnType.type);
                    } else {
                        if(funcDecl.arguments.members.length != 1) {
                            this.checker.errorReporter.simpleError(funcDecl, "Setters may have one and only one argument");
                        } else {
                            funcDecl.accessorSymbol.setType(funcDecl.arguments.members[0].type);
                        }
                    }
                }
            }
            this.typeCheckOverloadSignatures(fnType, funcDecl);
            return funcDecl;
        };
        TypeFlow.prototype.typeCheckBases = function (type) {
            var seenInterface = false;
            var bases = type.extendsList;
            if(bases) {
                var len = bases.length;
                if(len > 0) {
                    type.typeFlags |= 32 /* HasBaseType */ ;
                }
                for(var i = 0; i < len; i++) {
                    var base = bases[i];
                    var baseTypeOfObject = base.symbol && base.symbol.name == "Object" && base.symbol.container == this.checker.gloMod;
                    if(baseTypeOfObject) {
                        type.typeFlags |= 64 /* HasBaseTypeOfObject */ ;
                    }
                    if(base.isClassInstance()) {
                        if(this.currentScript) {
                            this.currentScript.requiresInherits = true;
                        }
                        if(!(type.isClassInstance())) {
                            this.checker.errorReporter.simpleErrorFromSym(base.symbol, "Interface base type must be interface");
                        } else {
                            if(seenInterface) {
                                this.checker.errorReporter.simpleErrorFromSym(base.symbol, "Class may not follow interface as base type");
                            }
                        }
                    } else {
                        if(base.isModuleType()) {
                            this.checker.errorReporter.simpleErrorFromSym(base.symbol, "Types may not be derived from module types");
                        } else {
                            if(base.members) {
                                if(!seenInterface) {
                                    seenInterface = true;
                                }
                            } else {
                                if(!(type.isClassInstance())) {
                                    this.checker.errorReporter.simpleErrorFromSym(base.symbol, "Interface base type must be interface");
                                } else {
                                    this.checker.errorReporter.simpleErrorFromSym(base.symbol, "Base type must be interface or class");
                                }
                                break;
                            }
                        }
                    }
                }
            }
        };
        TypeFlow.prototype.checkMembersImplementInterfaces = function (implementingType) {
            var instanceType = implementingType.getInstanceType();
            if(instanceType.implementsList) {
                var len = instanceType.implementsList.length;
                for(var i = 0; i < len; i++) {
                    var interfaceType = instanceType.implementsList[i];
                    var comparisonInfo = new TypeScript.TypeComparisonInfo();
                    if(!this.checker.sourceIsSubtypeOfTarget(instanceType, interfaceType, comparisonInfo)) {
                        var emsg = "Class '" + instanceType.getTypeName() + "' declares interface '" + interfaceType.getTypeName() + "' but does not implement it";
                        if(!comparisonInfo.message) {
                            this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol, emsg);
                        } else {
                            this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol, emsg + ": " + comparisonInfo.message);
                        }
                    }
                }
            }
        };
        TypeFlow.prototype.typeCheckBaseCalls = function (bases) {
            if(bases == null) {
                return;
            }
            var basesLen = bases.members.length;
            for(var i = 0; i < basesLen; i++) {
                var baseExpr = bases.members[i];
                var baseSymbol = null;
                if(baseExpr.nodeType == 28 /* Call */ ) {
                    this.typeCheckNew(baseExpr);
                }
            }
        };
        TypeFlow.prototype.assertUniqueNamesInBaseTypes = function (names, type, classDecl, checkUnique) {
            var _this = this;
            if(type) {
                if(type.members) {
                    type.members.publicMembers.map(function (key, s, c) {
                        var sym = s;
                        var dup = names.lookup(sym.name);
                        if(dup) {
                            if(checkUnique) {
                                _this.checker.errorReporter.simpleError(classDecl, "duplicate member name in bases for " + classDecl.name.actualText + ": " + type.symbol.name + " and " + dup.container.name + " both contain member with name " + sym.name);
                            }
                        } else {
                            names.add(sym.name, sym);
                        }
                    }, null);
                }
                if(type.extendsList) {
                    var len = type.extendsList.length;
                    for(var i = 0; i < len; i++) {
                        if(!(type.extendsList[i].symbol.flags & 131072 /* RecursivelyReferenced */ )) {
                            this.assertUniqueNamesInBaseTypes(names, type.extendsList[i], classDecl, checkUnique);
                        }
                    }
                }
            }
        };
        TypeFlow.prototype.checkBaseTypeMemberInheritance = function (derivedType, derivedTypeDecl) {
            var _this = this;
            var instanceType = derivedType.getInstanceType();
            if(instanceType.extendsList == null) {
                return;
            }
            var len = instanceType.extendsList.length;
            if(len > 0) {
                var names = new TypeScript.StringHashTable();
                if(instanceType.isClassInstance()) {
                    for(var i = 0; i < len; i++) {
                        this.assertUniqueNamesInBaseTypes(names, instanceType.extendsList[i], derivedTypeDecl, i > 0);
                    }
                }
                if(instanceType.members) {
                    instanceType.members.publicMembers.map(function (key, s, c) {
                        var sym = s;
                        for(var j = 0; j < len; j++) {
                            var base = instanceType.extendsList[j];
                            if(base.memberScope == null) {
                                _this.checker.errorReporter.simpleError(derivedTypeDecl, "Base type '" + base.symbol.name + "' lacks an implementation.");
                            } else {
                                var bSym = base.memberScope.find(sym.name, false, false);
                                if(bSym) {
                                    var aType = sym.getType();
                                    var bType = bSym.getType();
                                    if(!(_this.checker.sourceIsSubtypeOfTarget(aType, bType))) {
                                        _this.checker.errorReporter.simpleErrorFromSym(sym, "Type of overridden member '" + sym.name + "' is not subtype of original member defined by type '" + bSym.container.name + "'");
                                    } else {
                                        if((sym.kind() == 1 /* Type */ ) && (bSym.kind() == 2 /* Field */ )) {
                                            _this.checker.errorReporter.simpleErrorFromSym(sym, "Cannot override field '" + sym.name + "' with method");
                                        }
                                    }
                                }
                            }
                        }
                    }, null);
                }
            }
        };
        TypeFlow.prototype.typeCheckClass = function (classDecl) {
            var typeSymbol = classDecl.type.symbol;
            if(typeSymbol.typeCheckStatus == 2 /* Finished */ ) {
                return classDecl;
            } else {
                if(typeSymbol.typeCheckStatus == 1 /* Started */ ) {
                    return classDecl;
                } else {
                    typeSymbol.typeCheckStatus = 1 /* Started */ ;
                    this.checker.addStartedPTO(typeSymbol);
                }
            }
            var prevScope = this.scope;
            var prevInBoundPropTypeCheck = this.inBoundPropTypeCheck;
            this.inBoundPropTypeCheck = false;
            var svClassNode = this.thisClassNode;
            this.thisClassNode = classDecl;
            var classType = classDecl.type;
            this.typeCheckBases(classType.instanceType);
            this.typeCheckBaseListPrivacy(classDecl.extendsList, typeSymbol, true);
            this.typeCheckBaseListPrivacy(classDecl.implementsList, typeSymbol, false);
            var prevThisType = this.thisType;
            this.thisType = classType.instanceType;
            this.scope = classType.instanceType.containedScope;
            if(classDecl.constructorDecl) {
                this.scope = classType.instanceType.constructorScope;
                var ssb = this.scope;
                var funcTable = ssb.valueMembers.allMembers;
                this.addConstructorLocalArgs(classDecl.constructorDecl.type.symbol, classDecl.constructorDecl.arguments, funcTable, true);
            }
            this.typeCheck(classDecl.members);
            typeSymbol.typeCheckStatus = 2 /* Finished */ ;
            this.checkBaseTypeMemberInheritance(classType, classDecl);
            this.checkMembersImplementInterfaces(classType);
            this.typeCheckOverloadSignatures(classType, classDecl);
            this.typeCheckOverloadSignatures(classType.instanceType, classDecl);
            if(!classDecl.constructorDecl) {
                if(classDecl.extendsList && classDecl.extendsList.members.length && classDecl.extendsList.members[0].type && classDecl.extendsList.members[0].type.symbol.type.isClass()) {
                    TypeScript.cloneParentConstructGroupForChildType(classDecl.type, classDecl.extendsList.members[0].type.symbol.type);
                }
            }
            this.inBoundPropTypeCheck = prevInBoundPropTypeCheck;
            this.thisType = prevThisType;
            this.thisClassNode = svClassNode;
            this.scope = prevScope;
            return classDecl;
        };
        TypeFlow.prototype.typeCheckOverloadSignatures = function (type, ast) {
            if(type.call) {
                type.call.typeCheck(this.checker, ast, type.construct != null);
            }
            if(type.construct) {
                type.construct.typeCheck(this.checker, ast, false);
            }
            if(type.index) {
                type.index.typeCheck(this.checker, ast, false);
            }
        };
        TypeFlow.prototype.typeCheckInterface = function (interfaceDecl) {
            this.typeCheckBases(interfaceDecl.type);
            this.typeCheckBaseListPrivacy(interfaceDecl.extendsList, interfaceDecl.type.symbol, true);
            this.typeCheck(interfaceDecl.members);
            this.checkBaseTypeMemberInheritance(interfaceDecl.type, interfaceDecl);
            if(interfaceDecl.extendsList) {
                for(var i = 0; i < interfaceDecl.extendsList.members.length; i++) {
                    if(interfaceDecl.extendsList.members[i].type.call) {
                        if(interfaceDecl.type.call) {
                            interfaceDecl.type.call.signatures = interfaceDecl.type.call.signatures.concat(interfaceDecl.extendsList.members[i].type.call.signatures);
                        } else {
                            interfaceDecl.type.call = interfaceDecl.extendsList.members[i].type.call;
                        }
                    }
                    if(interfaceDecl.extendsList.members[i].type.construct) {
                        if(interfaceDecl.type.construct) {
                            interfaceDecl.type.construct.signatures = interfaceDecl.type.construct.signatures.concat(interfaceDecl.extendsList.members[i].type.construct.signatures);
                        } else {
                            interfaceDecl.type.construct = interfaceDecl.extendsList.members[i].type.construct;
                        }
                    }
                    if(interfaceDecl.extendsList.members[i].type.index) {
                        if(interfaceDecl.type.index) {
                            interfaceDecl.type.index.signatures = interfaceDecl.type.index.signatures.concat(interfaceDecl.extendsList.members[i].type.index.signatures);
                        } else {
                            interfaceDecl.type.index = interfaceDecl.extendsList.members[i].type.index;
                        }
                    }
                }
            }
            return interfaceDecl;
        };
        TypeFlow.prototype.typeCheckImportDecl = function (importDecl) {
            var _this = this;
            var mod = importDecl.alias.type;
            var sym = null;
            var prevInImportTC = this.inImportTypeCheck;
            this.inImportTypeCheck = true;
            this.typeCheck(importDecl.alias);
            mod = importDecl.alias.type;
            if(mod == null) {
                this.checker.errorReporter.simpleError(importDecl.alias, "Could not resolve module alias '" + importDecl.id.actualText + "'");
                mod = this.checker.anyType;
                (importDecl.id.sym).type = mod;
            }
            importDecl.id.type = mod;
            sym = mod.symbol;
            if(!mod.isModuleType()) {
                this.checker.errorReporter.simpleError(importDecl.alias, "A module cannot be aliased to a non-module type");
            } else {
                sym.type = mod;
                if(this.checker.typeFlow.currentScript && this.checker.typeFlow.currentScript.topLevelMod && this.checker.typeFlow.currentScript.topLevelMod.mod) {
                    this.checker.typeFlow.currentScript.topLevelMod.mod.importedModules.push(importDecl);
                }
                (importDecl.id.sym).type = mod;
                if(mod.symbol && mod.symbol.declAST) {
                    (mod.symbol.declAST).modFlags &= ~512 /* ShouldEmitModuleDecl */ ;
                }
                this.checkSymbolPrivacy(mod.symbol, importDecl.id.sym, function (typeName) {
                    var quotes = "";
                    if(!TypeScript.isQuoted(mod.symbol.name)) {
                        quotes = "'";
                    }
                    _this.checker.errorReporter.simpleError(importDecl, "exported module '" + importDecl.id.sym.name + "' imports non exported module " + quotes + mod.symbol.name + quotes);
                });
            }
            this.inImportTypeCheck = prevInImportTC;
            return importDecl;
        };
        TypeFlow.prototype.typeCheckModule = function (moduleDecl) {
            if(!moduleDecl.mod) {
                return moduleDecl;
            }
            if(this.currentScript) {
                this.currentScript.requiresGlobal = true;
            }
            var mod = moduleDecl.mod;
            var sym = null;
            var prevInBoundPropTypeCheck = this.inBoundPropTypeCheck;
            var prevScope = this.scope;
            var prevThisType = this.thisType;
            var prevCurrentModDecl = this.checker.currentModDecl;
            this.checker.currentModDecl = moduleDecl;
            this.inBoundPropTypeCheck = false;
            if(!this.inImportTypeCheck && prevCurrentModDecl && TypeScript.hasFlag(moduleDecl.modFlags, 2048 /* IsDynamic */ ) && !TypeScript.hasFlag(moduleDecl.modFlags, 8 /* Ambient */ )) {
                this.checker.errorReporter.simpleError(moduleDecl, "Dynamic modules may not be nested within other modules");
            }
            this.thisType = null;
            this.scope = mod.containedScope;
            this.typeCheck(moduleDecl.members);
            sym = mod.symbol;
            this.checker.currentModDecl = prevCurrentModDecl;
            this.thisType = prevThisType;
            this.scope = prevScope;
            this.inBoundPropTypeCheck = prevInBoundPropTypeCheck;
            moduleDecl.type = mod;
            if(sym) {
                sym.typeCheckStatus = 2 /* Finished */ ;
            }
            return moduleDecl;
        };
        TypeFlow.prototype.typeCheckFor = function (forStmt) {
            forStmt.init = this.typeCheck(forStmt.init);
            this.nestingLevel++;
            forStmt.cond = this.typeCheck(forStmt.cond);
            this.typeCheckCondExpr(forStmt.cond);
            forStmt.incr = this.typeCheck(forStmt.incr);
            this.nestingLevel--;
            forStmt.body = this.typeCheck(forStmt.body);
            this.typeCheckCompoundStmtBlock(forStmt.body, "for statement");
            forStmt.type = this.voidType;
            return forStmt;
        };
        TypeFlow.prototype.typeCheckWith = function (withStmt) {
            if(this.checker.errorsOnWith) {
                this.checker.errorReporter.simpleError(withStmt.expr, "All symbols within a 'with' block will be typed as 'any'");
            }
            withStmt.expr = this.typeCheck(withStmt.expr);
            this.checker.inWith = true;
            withStmt.body = this.typeCheck(withStmt.body);
            this.typeCheckCompoundStmtBlock(withStmt.body, "with statement");
            this.checker.inWith = false;
            return withStmt;
        };
        TypeFlow.prototype.typeCheckForIn = function (forInStmt) {
            forInStmt.obj = this.typeCheck(forInStmt.obj);
            forInStmt.lval = this.cast(this.typeCheck(forInStmt.lval), this.checker.stringType);
            if(forInStmt.lval.nodeType == 73 /* VarDecl */ ) {
                var varDecl = forInStmt.lval;
                if(varDecl.typeExpr) {
                    this.checker.errorReporter.simpleError(varDecl, "Variable declarations for for/in expressions may not contain a type annotation");
                }
                if(varDecl.sym) {
                    varDecl.sym.setType(this.checker.stringType);
                }
            }
            forInStmt.body = this.typeCheck(forInStmt.body);
            this.typeCheckCompoundStmtBlock(forInStmt.body, "for in statement");
            return forInStmt;
        };
        TypeFlow.prototype.typeCheckWhile = function (whileStmt) {
            whileStmt.cond = this.typeCheck(whileStmt.cond);
            this.typeCheckCondExpr(whileStmt.cond);
            whileStmt.body = this.typeCheck(whileStmt.body);
            this.typeCheckCompoundStmtBlock(whileStmt.body, "while statement");
            whileStmt.type = this.voidType;
            return whileStmt;
        };
        TypeFlow.prototype.typeCheckDoWhile = function (doWhileStmt) {
            doWhileStmt.cond = this.typeCheck(doWhileStmt.cond);
            this.typeCheckCondExpr(doWhileStmt.cond);
            doWhileStmt.body = this.typeCheck(doWhileStmt.body);
            this.typeCheckCompoundStmtBlock(doWhileStmt.body, "do while statement");
            doWhileStmt.type = this.voidType;
            return doWhileStmt;
        };
        TypeFlow.prototype.typeCheckCondExpr = function (cond) {
            if(this.checker.styleSettings.assignmentInCond) {
                if((cond !== null) && (cond.nodeType >= 30 /* Asg */ ) && (cond.nodeType <= TypeScript.NodeType.LastAsg)) {
                    this.checker.errorReporter.simpleError(cond, "top-level assignment statement in conditional expression");
                }
            }
        };
        TypeFlow.prototype.typeCheckCompoundStmtBlock = function (stmts, stmtType) {
            if(this.checker.styleSettings.blockInCompoundStmt && stmts) {
                if(stmts.nodeType != 84 /* Block */ ) {
                    this.checker.errorReporter.styleError(stmts, stmtType + " requires a block");
                }
            }
        };
        TypeFlow.prototype.typeCheckIf = function (ifStmt) {
            ifStmt.cond = this.typeCheck(ifStmt.cond);
            this.typeCheckCondExpr(ifStmt.cond);
            ifStmt.thenBod = this.typeCheck(ifStmt.thenBod);
            ifStmt.elseBod = this.typeCheck(ifStmt.elseBod);
            this.typeCheckCompoundStmtBlock(ifStmt.thenBod, "if statement");
            this.typeCheckCompoundStmtBlock(ifStmt.elseBod, "if statement");
            ifStmt.type = this.voidType;
            return ifStmt;
        };
        TypeFlow.prototype.typeFromAccessorFuncDecl = function (funcDecl) {
            if(!funcDecl.isAccessor()) {
                return null;
            }
            if(TypeScript.hasFlag(funcDecl.fncFlags, 64 /* GetAccessor */ )) {
                return funcDecl.type.call.signatures[0].returnType.type;
            } else {
                return funcDecl.type.call.signatures[0].parameters[0].getType();
            }
        };
        TypeFlow.prototype.typeCheckObjectLit = function (objectLit) {
            var resultType = new TypeScript.Type();
            resultType.symbol = new TypeScript.TypeSymbol(this.checker.anon, objectLit.minChar, this.checker.locationInfo.unitIndex, resultType);
            resultType.members = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
            resultType.memberScope = new TypeScript.SymbolTableScope(resultType.members, null, null, null, null);
            var aggScope = new TypeScript.SymbolAggregateScope(resultType.symbol);
            aggScope.addParentScope(resultType.memberScope);
            aggScope.addParentScope(this.scope);
            resultType.containedScope = aggScope;
            var memberDecls = objectLit.operand;
            var prevThisType = this.thisType;
            var acceptTargetType = false;
            var targetType = null;
            if(this.checker.hasTargetType()) {
                targetType = this.checker.getTargetTypeContext().contextualType;
                if(targetType && targetType.symbol && !this.checker.typeStatusIsFinished(targetType.symbol.typeCheckStatus)) {
                    if(targetType.symbol.declAST) {
                        this.typeCheck(targetType.symbol.declAST);
                    }
                }
                acceptTargetType = true;
            }
            if(memberDecls) {
                for(var i = 0, len = memberDecls.members.length; i < len; i++) {
                    var binex = memberDecls.members[i];
                    var id = binex.operand1;
                    var text;
                    var targetMember = null;
                    var fieldSymbol = null;
                    if(id.nodeType == 25 /* Name */ ) {
                        text = (id).text;
                    } else {
                        if(id.nodeType == 7 /* QString */ ) {
                            var idText = (id).text;
                            text = idText.substring(1, idText.length - 1);
                        } else {
                            this.checker.errorReporter.simpleError(objectLit, "malformed object literal");
                            resultType = this.anyType;
                            break;
                        }
                    }
                    if(acceptTargetType && targetType.memberScope) {
                        targetMember = targetType.memberScope.find(text, false, false);
                    }
                    if(binex.operand2.nodeType == 71 /* FuncDecl */  && (binex.operand2).isAccessor()) {
                        var funcDecl = binex.operand2;
                        var accessorSym = resultType.members.publicMembers.lookup(text);
                        accessorSym = this.checker.createAccessorSymbol(funcDecl, accessorSym, resultType, true, false, resultType.memberScope, null);
                        funcDecl.accessorSymbol = accessorSym;
                        fieldSymbol = accessorSym;
                        if(id.nodeType == 25 /* Name */ ) {
                            (id).sym = accessorSym;
                        }
                    }
                    this.checker.typeCheckWithContextualType(acceptTargetType && targetMember ? targetMember.getType() : null, false, acceptTargetType, binex.operand2);
                    if(acceptTargetType && targetMember) {
                        if((binex.operand2.type == this.anyType || this.checker.sourceIsAssignableToTarget(binex.operand2.type, targetMember.getType())) || (binex.operand2.nodeType == 71 /* FuncDecl */  && (binex.operand2).isAccessor() && this.typeFromAccessorFuncDecl(binex.operand2) == targetMember.getType())) {
                            binex.operand1.type = targetMember.getType();
                        }
                    } else {
                        binex.operand2.type = binex.operand2.type == this.checker.undefinedType ? this.anyType : binex.operand2.type;
                    }
                    if(fieldSymbol == null) {
                        var memberType = binex.operand2.type;
                        var field = new TypeScript.ValueLocation();
                        fieldSymbol = new TypeScript.FieldSymbol(text, id.minChar, this.checker.locationInfo.unitIndex, true, field);
                        fieldSymbol.flags |= 256 /* Property */ ;
                        field.symbol = fieldSymbol;
                        fieldSymbol.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();
                        field.typeLink = new TypeScript.TypeLink();
                        field.typeLink.type = memberType;
                        resultType.members.publicMembers.add(text, fieldSymbol);
                    }
                    fieldSymbol.isObjectLitField = true;
                }
            }
            this.thisType = prevThisType;
            objectLit.type = resultType;
            if(targetType) {
                objectLit.targetType = targetType;
            }
        };
        TypeFlow.prototype.typeCheckArrayLit = function (arrayLit) {
            var elements = arrayLit.operand;
            var elementType = this.anyType;
            var targetElementType = null;
            var comparisonInfo = new TypeScript.TypeComparisonInfo();
            comparisonInfo.onlyCaptureFirstError = true;
            if(this.checker.hasTargetType()) {
                var targetType = this.checker.getTargetTypeContext().contextualType;
                if(targetType.elementType) {
                    targetElementType = targetType.elementType;
                }
            }
            if(elements) {
                var prevInArrayElemTypeCheck = this.inArrayElementTypeCheck;
                this.inArrayElementTypeCheck = true;
                this.checker.typeCheckWithContextualType(targetElementType, this.checker.inProvisionalTypecheckMode(), targetElementType != null, elements);
                this.inArrayElementTypeCheck = prevInArrayElemTypeCheck;
                elementType = elements.members[0].type;
                var collection = {
                    getLength: function () {
                        return elements.members.length;
                    },
                    setTypeAtIndex: function (index, type) {
                        elements.members[index].type = type;
                    },
                    getTypeAtIndex: function (index) {
                        return elements.members[index].type;
                    }
                };
                elementType = this.checker.findBestCommonType(elementType, targetElementType, collection, false, comparisonInfo);
                if(elementType == this.checker.undefinedType || (!prevInArrayElemTypeCheck && elementType == this.nullType)) {
                    elementType = this.anyType;
                }
            }
            if(!elementType) {
                var emsg = "Incompatible types in array literal expression";
                if(!comparisonInfo.message) {
                    this.checker.errorReporter.simpleError(arrayLit, emsg);
                } else {
                    this.checker.errorReporter.simpleError(arrayLit, emsg + ": " + comparisonInfo.message);
                }
                elementType = this.anyType;
            } else {
                if(targetElementType) {
                    if(this.checker.sourceIsAssignableToTarget(elementType, targetElementType)) {
                        elementType = targetElementType;
                    }
                }
            }
            arrayLit.type = this.checker.makeArrayType(elementType);
        };
        TypeFlow.prototype.checkForVoidConstructor = function (type, ast) {
            if(type && type.construct && type.construct.signatures.length > 0) {
                for(var i = 0; i < type.construct.signatures.length; i++) {
                    if(type.construct.signatures[i].returnType.type == this.checker.voidType) {
                        this.checker.errorReporter.simpleError(ast, "Constructors may not have a return type of 'void'");
                        break;
                    }
                }
            }
        };
        TypeFlow.prototype.typeCheckReturn = function (returnStmt) {
            if(this.thisFnc) {
                var targetType = null;
                if(this.checker.hasTargetType()) {
                    var tcContext = this.checker.getTargetTypeContext();
                    var accessorType = tcContext.targetAccessorType;
                    if(accessorType) {
                        targetType = accessorType;
                    } else {
                        var targetSig = this.checker.getTargetTypeContext().targetSig;
                        if(targetSig && targetSig.returnType.type != this.voidType) {
                            targetType = targetSig.returnType.type;
                        }
                    }
                }
                if(returnStmt.returnExpression) {
                    this.thisFnc.fncFlags |= 2048 /* HasReturnExpression */ ;
                    if(targetType == null && this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type && this.thisFnc.returnTypeAnnotation.type != this.voidType) {
                        targetType = this.thisFnc.returnTypeAnnotation.type;
                    }
                    this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), targetType != null, returnStmt.returnExpression);
                    var expectedReturnType = (this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type) ? this.thisFnc.returnTypeAnnotation.type : targetType;
                    if(expectedReturnType) {
                        if(expectedReturnType == this.voidType && returnStmt.returnExpression.type != this.voidType) {
                            this.checker.errorReporter.simpleError(returnStmt, "Return with value expression in void function");
                            returnStmt.type = returnStmt.returnExpression.type;
                        } else {
                            returnStmt.returnExpression = this.cast(returnStmt.returnExpression, expectedReturnType);
                            returnStmt.type = expectedReturnType;
                        }
                    } else {
                        if(targetType) {
                            if(returnStmt.returnExpression.type != this.voidType) {
                                returnStmt.returnExpression = this.cast(returnStmt.returnExpression, targetType);
                            } else {
                                returnStmt.returnExpression.type = targetType;
                            }
                        }
                        returnStmt.type = returnStmt.returnExpression.type;
                    }
                    this.thisFnc.returnStatementsWithExpressions[this.thisFnc.returnStatementsWithExpressions.length] = returnStmt;
                } else {
                    returnStmt.type = targetType == null ? this.checker.voidType : targetType;
                }
            }
            return returnStmt;
        };
        TypeFlow.prototype.typeCheckInstOf = function (ast) {
            var binex = ast;
            binex.operand1 = this.typeCheck(binex.operand1);
            binex.operand2 = this.typeCheck(binex.operand2);
            if(!((binex.operand1.type == this.checker.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand1.type, this.objectInterfaceType)) && (binex.operand2.type == this.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand2.type, this.functionInterfaceType)))) {
                this.checker.errorReporter.simpleError(ast, "The instanceof operator requires the left operand to be of type Any or an object type, and the right operand to be of type Any or a subtype of the Function interface type");
            }
            binex.type = this.booleanType;
            return binex;
        };
        TypeFlow.prototype.typeCheckCommaOperator = function (ast) {
            var binex = ast;
            binex.operand1 = this.typeCheck(binex.operand1);
            binex.operand2 = this.typeCheck(binex.operand2);
            binex.type = binex.operand2.type;
            return binex;
        };
        TypeFlow.prototype.typeCheckLogOr = function (binex) {
            binex.operand1 = this.typeCheck(binex.operand1);
            binex.operand2 = this.typeCheck(binex.operand2);
            var leftType = binex.operand1.type;
            var rightType = binex.operand2.type;
            if(leftType == this.checker.anyType || rightType == this.checker.anyType) {
                binex.type = this.checker.anyType;
            } else {
                if(leftType == this.checker.booleanType) {
                    if(rightType == this.checker.booleanType) {
                        binex.type = this.checker.booleanType;
                    } else {
                        binex.type = this.checker.anyType;
                    }
                } else {
                    if(leftType == this.checker.numberType) {
                        if(rightType == this.checker.numberType) {
                            binex.type = this.checker.numberType;
                        } else {
                            binex.type = this.checker.anyType;
                        }
                    } else {
                        if(leftType == this.checker.stringType) {
                            if(rightType == this.checker.stringType) {
                                binex.type = this.checker.stringType;
                            } else {
                                binex.type = this.checker.anyType;
                            }
                        } else {
                            if(this.checker.sourceIsSubtypeOfTarget(leftType, rightType)) {
                                binex.type = rightType;
                            } else {
                                if(this.checker.sourceIsSubtypeOfTarget(rightType, leftType)) {
                                    binex.type = leftType;
                                } else {
                                    binex.type = this.checker.anyType;
                                }
                            }
                        }
                    }
                }
            }
            return binex;
        };
        TypeFlow.prototype.typeCheckLogAnd = function (binex) {
            binex.operand1 = this.typeCheck(binex.operand1);
            binex.operand2 = this.typeCheck(binex.operand2);
            binex.type = binex.operand2.type;
            return binex;
        };
        TypeFlow.prototype.tryAddCandidates = function (signature, actuals, exactCandidates, conversionCandidates, comparisonInfo) {
            var lowerBound = signature.nonOptionalParameterCount;
            var upperBound = signature.parameters.length;
            var formalLen = lowerBound;
            var acceptable = false;
            if((actuals.length >= lowerBound) && (signature.hasVariableArgList || actuals.length <= upperBound)) {
                formalLen = (signature.hasVariableArgList ? signature.parameters.length : actuals.length);
                acceptable = true;
            }
            var repeatType = null;
            if(acceptable || signature.hasVariableArgList) {
                if(signature.hasVariableArgList) {
                    formalLen -= 1;
                    repeatType = (signature.parameters[formalLen]).parameter.typeLink.type;
                    repeatType = repeatType.elementType;
                    acceptable = actuals.length >= formalLen;
                }
                var len = actuals.length;
                var exact = acceptable;
                var convert = acceptable;
                for(var i = 0; i < len; i++) {
                    var typeA;
                    if(i < formalLen) {
                        typeA = (signature.parameters[i]).parameter.typeLink.type;
                    } else {
                        typeA = repeatType;
                    }
                    var typeB = actuals[i];
                    if(!typeA || !typeB || !(this.checker.typesAreIdentical(typeA, typeB))) {
                        exact = false;
                    }
                    if(!this.checker.sourceIsAssignableToTarget(typeB, typeA, comparisonInfo)) {
                        convert = false;
                    }
                    if(!(exact || convert)) {
                        break;
                    }
                }
                if(exact) {
                    exactCandidates[exactCandidates.length] = signature;
                } else {
                    if(convert && (exactCandidates.length == 0)) {
                        conversionCandidates[conversionCandidates.length] = signature;
                    }
                }
            }
        };
        TypeFlow.prototype.resolveOverload = function (application, group) {
            var rd = this.resolutionDataCache.getResolutionData();
            var actuals = rd.actuals;
            var exactCandidates = rd.exactCandidates;
            var conversionCandidates = rd.conversionCandidates;
            var candidate = null;
            var hasOverloads = group.signatures.length > 1;
            var comparisonInfo = new TypeScript.TypeComparisonInfo();
            var args = null;
            var target = null;
            if(application.nodeType == 28 /* Call */  || application.nodeType == 29 /* New */ ) {
                var callEx = application;
                args = callEx.arguments;
                target = callEx.target;
                if(callEx.arguments) {
                    var len = callEx.arguments.members.length;
                    for(var i = 0; i < len; i++) {
                        actuals[i] = callEx.arguments.members[i].type;
                    }
                }
            } else {
                if(application.nodeType == 27 /* Index */ ) {
                    var binExp = application;
                    target = binExp.operand1;
                    args = new TypeScript.ASTList();
                    args.members[0] = binExp.operand2;
                    actuals[0] = binExp.operand2.type;
                }
            }
            for(var j = 0, groupLen = group.signatures.length; j < groupLen; j++) {
                var signature = group.signatures[j];
                if(hasOverloads && signature == group.definitionSignature && !this.checker.canCallDefinitionSignature) {
                    continue;
                }
                if(!signature.returnType.type && signature.declAST && (signature.typeCheckStatus != 2 /* Finished */ )) {
                    this.typeCheckFunction(signature.declAST);
                }
                this.tryAddCandidates(signature, actuals, exactCandidates, conversionCandidates, comparisonInfo);
            }
            if(exactCandidates.length == 0) {
                var applicableCandidates = this.checker.getApplicableSignatures(conversionCandidates, args, comparisonInfo);
                if(applicableCandidates.length > 0) {
                    var candidateInfo = this.checker.findMostApplicableSignature(applicableCandidates, args);
                    if(candidateInfo.ambiguous) {
                        this.checker.errorReporter.simpleError(target, "Ambiguous call expression - could not choose overload");
                    }
                    candidate = candidateInfo.sig;
                } else {
                    var emsg = "Supplied parameters do not match any signature of call target";
                    if(comparisonInfo.message) {
                        this.checker.errorReporter.simpleError(target, emsg + ":\n\t" + comparisonInfo.message);
                    } else {
                        this.checker.errorReporter.simpleError(target, emsg);
                    }
                }
            } else {
                if(exactCandidates.length > 1) {
                    var applicableSigs = [];
                    for(var i = 0; i < exactCandidates.length; i++) {
                        applicableSigs[i] = {
                            signature: exactCandidates[i],
                            hadProvisionalErrors: false
                        };
                    }
                    var candidateInfo = this.checker.findMostApplicableSignature(applicableSigs, args);
                    if(candidateInfo.ambiguous) {
                        this.checker.errorReporter.simpleError(target, "Ambiguous call expression - could not choose overload");
                    }
                    candidate = candidateInfo.sig;
                } else {
                    candidate = exactCandidates[0];
                }
            }
            this.resolutionDataCache.returnResolutionData(rd);
            return candidate;
        };
        TypeFlow.prototype.typeCheckNew = function (ast) {
            var callEx = ast;
            callEx.target = this.typeCheck(callEx.target);
            var target = callEx.target;
            if(target.type.construct || target.type.call) {
                this.preTypeCheckCallArgs(callEx.arguments);
            } else {
                callEx.arguments = this.typeCheck(callEx.arguments);
            }
            if(target.type == this.anyType) {
                callEx.type = this.anyType;
                callEx.arguments = this.typeCheck(callEx.arguments);
            } else {
                if(target.type.construct) {
                    var signature = this.resolveOverload(callEx, target.type.construct);
                    if(signature == null) {
                        callEx.type = this.anyType;
                    } else {
                        if(signature.returnType.type == this.voidType) {
                            callEx.type = this.anyType;
                            callEx.signature = signature;
                        } else {
                            callEx.type = signature.returnType.type;
                            callEx.signature = signature;
                        }
                    }
                } else {
                    if(target.type.call) {
                        var signature = this.resolveOverload(callEx, target.type.call);
                        if(signature == null) {
                            callEx.type = this.anyType;
                        } else {
                            if((signature.returnType.type == this.voidType) || (signature.returnType.type == this.anyType)) {
                                callEx.type = this.anyType;
                                callEx.signature = signature;
                            } else {
                                this.checker.errorReporter.simpleError(callEx.target, "new expression only valid on constructors");
                            }
                        }
                    } else {
                        if(target.type.elementType) {
                            callEx.type = target.type;
                        } else {
                            this.checker.errorReporter.invalidCall(callEx, callEx.nodeType, this.scope);
                            callEx.type = this.anyType;
                        }
                    }
                }
            }
            this.postTypeCheckCallArgs(callEx);
            return callEx;
        };
        TypeFlow.prototype.preTypeCheckCallArgs = function (args) {
            if(!args) {
                return;
            }
            for(var i = 0; i < args.members.length; i++) {
                switch(args.members[i].nodeType) {
                    case 71 /* FuncDecl */ :
                    case 11 /* ObjectLit */ :
                    case 10 /* ArrayLit */ : {
                        continue;

                    }
                    default: {
                        this.typeCheck(args.members[i]);
                        break;

                    }
                }
            }
        };
        TypeFlow.prototype.postTypeCheckCallArgs = function (callEx) {
            var acceptedTargetType = false;
            var i = 0;
            if(callEx.target && callEx.target.type && callEx.signature && callEx.arguments) {
                var sig = callEx.signature;
                if(sig && callEx.arguments.members.length >= sig.nonOptionalParameterCount) {
                    acceptedTargetType = true;
                    var targetType = null;
                    var len = callEx.arguments.members.length < sig.parameters.length ? callEx.arguments.members.length : sig.parameters.length;
                    for(i = 0; i < len; i++) {
                        targetType = sig.parameters[i].getType();
                        if(targetType && sig.hasVariableArgList && i >= sig.nonOptionalParameterCount - 1) {
                            targetType = targetType.elementType;
                        }
                        switch(callEx.arguments.members[i].nodeType) {
                            case 71 /* FuncDecl */ :
                            case 11 /* ObjectLit */ :
                            case 10 /* ArrayLit */ : {
                                this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), !sig.parameters[i].declAST.isParenthesized, callEx.arguments.members[i]);
                                break;

                            }
                            default: {
                                continue;

                            }
                        }
                    }
                }
            }
            if(!acceptedTargetType && callEx.arguments) {
                this.checker.killCurrentContextualType();
                for(i = 0; i < callEx.arguments.members.length; i++) {
                    switch(callEx.arguments.members[i].nodeType) {
                        case 71 /* FuncDecl */ :
                        case 11 /* ObjectLit */ :
                        case 10 /* ArrayLit */ : {
                            this.typeCheck(callEx.arguments.members[i]);
                            break;

                        }
                        default: {
                            continue;

                        }
                    }
                }
            }
        };
        TypeFlow.prototype.typeCheckCall = function (ast) {
            var callEx = ast;
            if(this.checker.styleSettings.newMustBeUsed && (ast.nodeType == 29 /* New */ )) {
                if(TypeScript.hasFlag(ast.flags, 64 /* IsStatement */ )) {
                    this.checker.errorReporter.styleError(ast, "use of new expression as a statement");
                }
            } else {
                if((!this.checker.styleSettings.evalOK) && (ast.nodeType == 28 /* Call */ )) {
                    if((callEx.target.nodeType == 25 /* Name */ ) && ((callEx.target).text == "eval")) {
                        this.checker.errorReporter.styleError(callEx, "eval not permitted");
                    }
                }
            }
            if(callEx.target.nodeType == 71 /* FuncDecl */ ) {
                (callEx.target).isInlineCallLiteral = true;
            }
            var prevInSuperCall = this.inSuperCall;
            if(callEx.target.nodeType == 6 /* Super */ ) {
                this.inSuperCall = true;
            }
            callEx.target = this.typeCheck(callEx.target);
            this.preTypeCheckCallArgs(callEx.arguments);
            var target = callEx.target;
            if((target.type == null) || (target.type == this.anyType) || (this.functionInterfaceType && target.type == this.functionInterfaceType)) {
                callEx.type = this.anyType;
            } else {
                var fnType = target.type;
                if(fnType.call) {
                    var signature = this.resolveOverload(callEx, fnType.call);
                    if(signature == null) {
                        callEx.type = this.anyType;
                    } else {
                        callEx.type = signature.returnType.type;
                        callEx.signature = signature;
                    }
                } else {
                    if(callEx.target.nodeType == 6 /* Super */  && this.thisFnc && this.thisFnc.isConstructor && TypeScript.hasFlag(this.thisFnc.fncFlags, 262144 /* ClassMethod */ )) {
                        var signature = fnType.symbol.type.construct ? this.resolveOverload(callEx, fnType.symbol.type.construct) : null;
                        if(signature == null) {
                            callEx.type = this.anyType;
                        } else {
                            callEx.flags |= 512 /* ClassBaseConstructorCall */ ;
                            callEx.type = signature.returnType.type;
                            callEx.signature = signature;
                        }
                    } else {
                        callEx.type = this.anyType;
                        this.checker.errorReporter.invalidCall(callEx, callEx.nodeType, this.scope);
                    }
                }
            }
            this.postTypeCheckCallArgs(callEx);
            this.inSuperCall = prevInSuperCall;
            return callEx;
        };
        TypeFlow.prototype.assignScopes = function (ast) {
            var script = ast;
            this.checker.locationInfo = script.locationInfo;
            var globalChain = new ScopeChain(this.checker.gloMod, null, this.globalScope);
            var context = new TypeScript.AssignScopeContext(globalChain, this, [
                this.checker.currentModDecl
            ]);
            TypeScript.getAstWalkerFactory().walk(ast, TypeScript.preAssignScopes, TypeScript.postAssignScopes, null, context);
        };
        TypeFlow.prototype.findMemberScope = function (enclosingScopeContext, matchFlag) {
            var enclosingScope = enclosingScopeContext.getScope();
            var pos = enclosingScopeContext.pos - enclosingScopeContext.getScriptFragmentPosition();
            var scriptFragment = enclosingScopeContext.getScriptFragment();
            var memContext = new TypeScript.MemberScopeContext(this, pos, matchFlag);
            memContext.scope = enclosingScope;
            if(scriptFragment.nodeType == 25 /* Name */ ) {
                return scriptFragment.type.getMemberScope(this);
            } else {
                TypeScript.getAstWalkerFactory().walk(scriptFragment, TypeScript.preFindMemberScope, null, null, memContext);
                if(memContext.ast && enclosingScopeContext.enclosingClassDecl && memContext.ast.type == enclosingScopeContext.enclosingClassDecl.type.instanceType) {
                    enclosingScopeContext.publicsOnly = false;
                }
                if(memContext.type) {
                    return memContext.type.getMemberScope(this);
                } else {
                    return null;
                }
            }
        };
        TypeFlow.prototype.findMemberScopeAt = function (enclosingScopeContext) {
            return this.findMemberScope(enclosingScopeContext, 32 /* DotLHS */ );
        };
        TypeFlow.prototype.findMemberScopeAtFullAst = function (enclosingScopeContext) {
            var matchFlag = 32 /* DotLHS */ ;
            var pos = enclosingScopeContext.pos;
            var astResult = null;
            var preFindMemberScopeFullAst = function (ast, parent, walker) {
                if(TypeScript.isValidAstNode(ast)) {
                    if(TypeScript.hasFlag(ast.flags, matchFlag) && (pos == ast.limChar || (pos - 1) == ast.limChar)) {
                        astResult = ast;
                        walker.options.stopWalk();
                    }
                    walker.options.goChildren = (ast.minChar <= pos) && (pos <= ast.limChar);
                }
                return ast;
            };
            var preFindMemberScopeFullAstFuzy = function (ast, parent, walker) {
                if(TypeScript.isValidAstNode(ast)) {
                    if(TypeScript.hasFlag(ast.flags, matchFlag) && ((ast.minChar < pos) && (pos <= ast.limChar))) {
                        astResult = ast;
                    }
                    walker.options.goChildren = (ast.minChar <= pos) && (pos <= ast.limChar);
                }
                return ast;
            };
            TypeScript.getAstWalkerFactory().walk(enclosingScopeContext.script, preFindMemberScopeFullAst);
            if(astResult == null) {
                TypeScript.getAstWalkerFactory().walk(enclosingScopeContext.script, preFindMemberScopeFullAstFuzy);
            }
            if(astResult && enclosingScopeContext.enclosingClassDecl && astResult.type == enclosingScopeContext.enclosingClassDecl.type.instanceType) {
                enclosingScopeContext.publicsOnly = false;
            }
            if(astResult && astResult.type) {
                return astResult.type.getMemberScope(this);
            } else {
                return null;
            }
        };
        return TypeFlow;
    })();
    TypeScript.TypeFlow = TypeFlow;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Primitive) {
        Primitive._map = [];
        Primitive.None = 0;
        Primitive.Void = 1;
        Primitive.Double = 2;
        Primitive.String = 4;
        Primitive.Boolean = 8;
        Primitive.Any = 16;
        Primitive.Null = 32;
        Primitive.Undefined = 64;
    })(TypeScript.Primitive || (TypeScript.Primitive = {}));
    var Primitive = TypeScript.Primitive;
    var MemberName = (function () {
        function MemberName() {
            this.prefix = "";
            this.suffix = "";
        }
        MemberName.prototype.isString = function () {
            return false;
        };
        MemberName.prototype.isArray = function () {
            return false;
        };
        MemberName.prototype.toString = function () {
            return MemberName.memberNameToString(this);
        };
        MemberName.memberNameToString = function memberNameToString(memberName) {
            var result = memberName.prefix;
            if(memberName.isString()) {
                result += (memberName).text;
            } else {
                var ar = memberName;
                for(var index = 0; index < ar.entries.length; index++) {
                    result += MemberName.memberNameToString(ar.entries[index]);
                    result += ar.delim;
                }
            }
            result += memberName.suffix;
            return result;
        }
        MemberName.create = function create(arg1, arg2, arg3) {
            if(typeof arg1 == "string") {
                return new MemberNameString(arg1);
            } else {
                var result = new MemberNameArray();
                if(arg2) {
                    result.prefix = arg2;
                }
                if(arg3) {
                    result.suffix = arg3;
                }
                result.entries.push(arg1);
                return result;
            }
        }
        return MemberName;
    })();
    TypeScript.MemberName = MemberName;    
    var MemberNameString = (function (_super) {
        __extends(MemberNameString, _super);
        function MemberNameString(text) {
                _super.call(this);
            this.text = text;
        }
        MemberNameString.prototype.isString = function () {
            return true;
        };
        return MemberNameString;
    })(MemberName);
    TypeScript.MemberNameString = MemberNameString;    
    var MemberNameArray = (function (_super) {
        __extends(MemberNameArray, _super);
        function MemberNameArray() {
            _super.apply(this, arguments);

            this.delim = "";
            this.entries = [];
        }
        MemberNameArray.prototype.isArray = function () {
            return true;
        };
        MemberNameArray.prototype.add = function (entry) {
            this.entries.push(entry);
        };
        MemberNameArray.prototype.addAll = function (entries) {
            for(var i = 0; i < entries.length; i++) {
                this.entries.push(entries[i]);
            }
        };
        return MemberNameArray;
    })(MemberName);
    TypeScript.MemberNameArray = MemberNameArray;    
    var currentTypeID = -1;
    var Type = (function () {
        function Type() {
            this.typeID = currentTypeID++;
            this.construct = null;
            this.call = null;
            this.index = null;
            this.passTypeCreated = TypeScript.CompilerDiagnostics.analysisPass;
            this.primitiveTypeClass = 0 /* None */ ;
            this.typeFlags = 0 /* None */ ;
        }
        Type.prototype.baseClass = function () {
            if(this.extendsList && (this.extendsList.length > 0)) {
                return this.extendsList[0];
            } else {
                return null;
            }
        };
        Type.prototype.getArrayBase = function (arrInstType, checker) {
            return this.arrayCache.specialize(arrInstType, checker);
        };
        Type.prototype.isClass = function () {
            return this.instanceType != null;
        };
        Type.prototype.isArray = function () {
            return this.elementType != null;
        };
        Type.prototype.isClassInstance = function () {
            return this.symbol && !this.elementType && (this.symbol).type.isClass();
        };
        Type.prototype.getInstanceType = function () {
            if(this.isClass()) {
                return this.instanceType;
            } else {
                return this;
            }
        };
        Type.prototype.hasImplementation = function () {
            return TypeScript.hasFlag(this.typeFlags, 1 /* HasImplementation */ );
        };
        Type.prototype.setHasImplementation = function () {
            this.typeFlags |= 1 /* HasImplementation */ ;
        };
        Type.prototype.isDouble = function () {
            return TypeScript.hasFlag(this.primitiveTypeClass, 2 /* Double */ );
        };
        Type.prototype.isString = function () {
            return TypeScript.hasFlag(this.primitiveTypeClass, 4 /* String */ );
        };
        Type.prototype.isBoolean = function () {
            return TypeScript.hasFlag(this.primitiveTypeClass, 8 /* Boolean */ );
        };
        Type.prototype.isNull = function () {
            return TypeScript.hasFlag(this.primitiveTypeClass, 32 /* Null */ );
        };
        Type.prototype.getTypeName = function () {
            return this.getMemberTypeName("", true, false, null);
        };
        Type.prototype.getScopedTypeName = function (scope) {
            return this.getMemberTypeName("", true, false, scope);
        };
        Type.prototype.getScopedTypeNameEx = function (scope) {
            return this.getMemberTypeNameEx("", true, false, scope);
        };
        Type.prototype.callCount = function () {
            var total = 0;
            if(this.call) {
                total += this.call.signatures.length;
            }
            if(this.construct) {
                total += this.construct.signatures.length;
            }
            if(this.index) {
                total += this.index.signatures.length;
            }
            return total;
        };
        Type.prototype.getMemberTypeName = function (prefix, topLevel, isElementType, scope) {
            var memberName = this.getMemberTypeNameEx(prefix, topLevel, isElementType, scope);
            return memberName.toString();
        };
        Type.prototype.getMemberTypeNameEx = function (prefix, topLevel, isElementType, scope) {
            if(this.elementType) {
                return MemberName.create(this.elementType.getMemberTypeNameEx(prefix, false, true, scope), "", "[]");
            } else {
                if(this.symbol && this.symbol.name && this.symbol.name != "_anonymous" && (((this.call == null) && (this.construct == null) && (this.index == null)) || (TypeScript.hasFlag(this.typeFlags, 16 /* BuildingName */ )) || (this.members && (!this.isClass())))) {
                    var tn = this.symbol.scopeRelativeName(scope);
                    return MemberName.create(tn == "null" ? "any" : tn);
                } else {
                    if(this.members || this.call || this.construct) {
                        if(TypeScript.hasFlag(this.typeFlags, 16 /* BuildingName */ )) {
                            return MemberName.create("this");
                        }
                        this.typeFlags |= 16 /* BuildingName */ ;
                        var builder = "";
                        var allMemberNames = new MemberNameArray();
                        var curlies = isElementType || this.index != null;
                        var memCount = 0;
                        var delim = "; ";
                        if(this.members) {
                            this.members.allMembers.map(function (key, s, unused) {
                                var sym = s;
                                if(!TypeScript.hasFlag(sym.flags, 8192 /* BuiltIn */ )) {
                                    var typeNameMember = sym.getTypeNameEx(scope);
                                    if(typeNameMember.isArray() && (typeNameMember).delim == delim) {
                                        allMemberNames.addAll((typeNameMember).entries);
                                    } else {
                                        allMemberNames.add(typeNameMember);
                                    }
                                    memCount++;
                                    curlies = true;
                                }
                            }, null);
                        }
                        var signatureCount = this.callCount();
                        var j;
                        var len = 0;
                        var shortform = !curlies && signatureCount == 1 && topLevel;
                        if(this.call) {
                            allMemberNames.addAll(this.call.toStrings(prefix, shortform, scope));
                        }
                        if(this.construct) {
                            allMemberNames.addAll(this.construct.toStrings("new", shortform, scope));
                        }
                        if(this.index) {
                            allMemberNames.addAll(this.index.toStrings("", shortform, scope));
                        }
                        if((curlies) || ((signatureCount > 1) && topLevel)) {
                            allMemberNames.prefix = "{ ";
                            allMemberNames.suffix = "}";
                            allMemberNames.delim = delim;
                        } else {
                            if(allMemberNames.entries.length > 1) {
                                allMemberNames.delim = delim;
                            }
                        }
                        this.typeFlags &= (~16 /* BuildingName */ );
                        if((signatureCount == 0) && (memCount == 0)) {
                            return MemberName.create("{}");
                        } else {
                            return allMemberNames;
                        }
                    } else {
                        return MemberName.create("{}");
                    }
                }
            }
        };
        Type.prototype.checkDecl = function (checker) {
            if(this.isClassInstance() || this.isClass()) {
                if(this.symbol.declAST) {
                    checker.typeFlow.inScopeTypeCheckDecl(this.symbol.declAST);
                }
            }
        };
        Type.prototype.getMemberScope = function (flow) {
            if(this == flow.anyType) {
                return null;
            } else {
                if(this.isDouble()) {
                    if(flow.numberInterfaceType) {
                        return flow.numberInterfaceType.memberScope;
                    } else {
                        return null;
                    }
                } else {
                    if(this.isBoolean()) {
                        if(flow.booleanInterfaceType) {
                            return flow.booleanInterfaceType.memberScope;
                        } else {
                            return null;
                        }
                    } else {
                        if(this == flow.stringType) {
                            if(flow.stringInterfaceType) {
                                return flow.stringInterfaceType.memberScope;
                            } else {
                                return null;
                            }
                        } else {
                            if(this.elementType) {
                                if(flow.arrayInterfaceType) {
                                    var arrInstType = this.elementType.getArrayBase(flow.arrayInterfaceType, flow.checker);
                                    return arrInstType.memberScope;
                                } else {
                                    return null;
                                }
                            } else {
                                return this.memberScope;
                            }
                        }
                    }
                }
            }
        };
        Type.prototype.isReferenceType = function () {
            return this.members || this.extendsList || this.construct || this.call || this.index || this.elementType;
        };
        Type.prototype.specializeType = function (pattern, replacement, checker, membersOnly) {
            if(pattern == this) {
                return replacement;
            }
            var result = this;
            if(membersOnly) {
                if(this.isReferenceType()) {
                    result = new Type();
                    if(this.members) {
                        result.members = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
                        this.members.publicMembers.map(function (key, s, unused) {
                            var sym = s;
                            var bSym = sym.specializeType(pattern, replacement, checker);
                            result.members.addPublicMember(bSym.name, bSym);
                        }, null);
                        this.members.privateMembers.map(function (key, s, unused) {
                            var sym = s;
                            var bSym = sym.specializeType(pattern, replacement, checker);
                            result.members.addPrivateMember(bSym.name, bSym);
                        }, null);
                    }
                    if(this.ambientMembers) {
                        result.ambientMembers = new TypeScript.ScopedMembers(new TypeScript.DualStringHashTable(new TypeScript.StringHashTable(), new TypeScript.StringHashTable()));
                        this.ambientMembers.publicMembers.map(function (key, s, unused) {
                            var sym = s;
                            var bSym = sym.specializeType(pattern, replacement, checker);
                            result.ambientMembers.addPublicMember(bSym.name, bSym);
                        }, null);
                        this.ambientMembers.privateMembers.map(function (key, s, unused) {
                            var sym = s;
                            var bSym = sym.specializeType(pattern, replacement, checker);
                            result.ambientMembers.addPrivateMember(bSym.name, bSym);
                        }, null);
                    }
                    result.containedScope = checker.scopeOf(result);
                    result.memberScope = result.containedScope;
                }
            } else {
                if(this.elementType) {
                    if(this.elementType == pattern) {
                        result = checker.makeArrayType(replacement);
                    } else {
                        if(this.elementType.elementType == pattern) {
                            result = checker.makeArrayType(checker.makeArrayType(replacement));
                        }
                    }
                } else {
                    if(this.call) {
                        result = new Type();
                        result.call = this.call.specializeType(pattern, replacement, checker);
                    }
                }
            }
            return result;
        };
        Type.prototype.hasBase = function (baseType) {
            if(baseType == this) {
                return true;
            } else {
                if(this.extendsList) {
                    for(var i = 0, len = this.extendsList.length; i < len; i++) {
                        if(this.extendsList[i].hasBase(baseType)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        Type.prototype.mergeOrdered = function (b, checker, acceptVoid, comparisonInfo) {
            if((this == checker.anyType) || (b == checker.anyType)) {
                return checker.anyType;
            } else {
                if(this == b) {
                    return this;
                } else {
                    if((b == checker.nullType) && this != checker.nullType) {
                        return this;
                    } else {
                        if((this == checker.nullType) && (b != checker.nullType)) {
                            return b;
                        } else {
                            if(acceptVoid && (b == checker.voidType) && this != checker.voidType) {
                                return this;
                            } else {
                                if(acceptVoid && (this == checker.voidType) && (b != checker.voidType)) {
                                    return b;
                                } else {
                                    if((b == checker.undefinedType) && this != checker.undefinedType) {
                                        return this;
                                    } else {
                                        if((this == checker.undefinedType) && (b != checker.undefinedType)) {
                                            return b;
                                        } else {
                                            if(this.elementType && b.elementType) {
                                                if(this.elementType == b.elementType) {
                                                    return this;
                                                } else {
                                                    var mergedET = this.elementType.mergeOrdered(b.elementType, checker, acceptVoid, comparisonInfo);
                                                    if(mergedET == null) {
                                                        return checker.makeArrayType(checker.anyType);
                                                    } else {
                                                        return checker.makeArrayType(mergedET);
                                                    }
                                                }
                                            } else {
                                                if(checker.sourceIsSubtypeOfTarget(this, b, comparisonInfo)) {
                                                    return b;
                                                } else {
                                                    if(checker.sourceIsSubtypeOfTarget(b, this, comparisonInfo)) {
                                                        return this;
                                                    } else {
                                                        return null;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
        Type.prototype.isModuleType = function () {
            return false;
        };
        Type.prototype.hasMembers = function () {
            return this.members != null;
        };
        Type.prototype.getAllEnclosedTypes = function () {
            return null;
        };
        Type.prototype.getAllAmbientEnclosedTypes = function () {
            return null;
        };
        Type.prototype.getPublicEnclosedTypes = function () {
            return null;
        };
        Type.prototype.getpublicAmbientEnclosedTypes = function () {
            return null;
        };
        return Type;
    })();
    TypeScript.Type = Type;    
    var ModuleType = (function (_super) {
        __extends(ModuleType, _super);
        function ModuleType(enclosedTypes, ambientEnclosedTypes) {
                _super.call(this);
            this.enclosedTypes = enclosedTypes;
            this.ambientEnclosedTypes = ambientEnclosedTypes;
            this.importedModules = [];
            this.prettyNames = new TypeScript.SimpleHashTable();
        }
        ModuleType.prototype.isModuleType = function () {
            return true;
        };
        ModuleType.prototype.hasMembers = function () {
            return this.members != null || this.enclosedTypes != null;
        };
        ModuleType.prototype.getAllEnclosedTypes = function () {
            return this.enclosedTypes;
        };
        ModuleType.prototype.getAllAmbientEnclosedTypes = function () {
            return this.ambientEnclosedTypes;
        };
        ModuleType.prototype.getPublicEnclosedTypes = function () {
            return null;
        };
        ModuleType.prototype.getpublicAmbientEnclosedTypes = function () {
            return null;
        };
        ModuleType.findDynamicModuleNameInHashTable = function findDynamicModuleNameInHashTable(moduleType, members, ignoreSymbols) {
            var moduleName = null;
            members.map(function (key, s, c) {
                if(moduleName == null && !TypeScript.isQuoted(key)) {
                    var symbol = s;
                    var type = symbol.getType();
                    if(type == moduleType) {
                        moduleName = key;
                    } else {
                        if(type) {
                            var i = ignoreSymbols.length - 1;
                            for(; i >= 0; i--) {
                                if(ignoreSymbols[i] == s) {
                                    break;
                                }
                            }
                            if(i < 0 && type.isModuleType()) {
                                ignoreSymbols.push(s);
                                var keyBaseName = key + ".";
                                var keyModuleType = type;
                                moduleName = keyModuleType.findDynamicModuleName(moduleType, keyBaseName, true, ignoreSymbols);
                                if(moduleName != null) {
                                    moduleName = keyModuleType.findDynamicModuleName(moduleType, keyBaseName, true, ignoreSymbols);
                                }
                            }
                        }
                    }
                }
            }, null);
            return moduleName;
        }
        ModuleType.prototype.findDynamicModuleName = function (moduleType, baseName, onlyPublic, ignoreSymbols) {
            var moduleName = null;
            var lookupInfo = this.prettyNames.lookup(moduleType);
            if(lookupInfo != null) {
                moduleName = (!lookupInfo.data.isPrivate || !onlyPublic) ? lookupInfo.data.moduleName : null;
            } else {
                moduleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.members.publicMembers, ignoreSymbols);
                if(moduleName != null) {
                    this.prettyNames.add(moduleType, {
                        moduleName: moduleName,
                        isPrivate: false
                    });
                } else {
                    moduleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.ambientMembers.publicMembers, ignoreSymbols);
                    if(moduleName != null) {
                        this.prettyNames.add(moduleType, {
                            moduleName: moduleName,
                            isPrivate: false
                        });
                    } else {
                        var privateModuleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.members.privateMembers, ignoreSymbols);
                        if(privateModuleName != null) {
                            this.prettyNames.add(moduleType, {
                                moduleName: privateModuleName,
                                isPrivate: true
                            });
                        } else {
                            privateModuleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.ambientMembers.privateMembers, ignoreSymbols);
                            this.prettyNames.add(moduleType, {
                                moduleName: privateModuleName,
                                isPrivate: true
                            });
                        }
                        if(!onlyPublic) {
                            moduleName = privateModuleName;
                        }
                    }
                }
            }
            if(moduleName != null) {
                return baseName + moduleName;
            }
            return moduleName;
        };
        return ModuleType;
    })(Type);
    TypeScript.ModuleType = ModuleType;    
    var TypeLink = (function () {
        function TypeLink() {
            this.type = null;
            this.ast = null;
        }
        return TypeLink;
    })();
    TypeScript.TypeLink = TypeLink;    
    function getTypeLink(ast, checker, autoVar) {
        var result = new TypeLink();
        result.ast = ast;
        if((ast == null) && (autoVar)) {
            result.type = checker.anyType;
        } else {
            result.type = null;
        }
        return result;
    }
    TypeScript.getTypeLink = getTypeLink;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    function stripQuotes(str) {
        return str.replace("\"", "").replace("'", "").replace("'", "").replace("\"", "");
    }
    TypeScript.stripQuotes = stripQuotes;
    function isQuoted(str) {
        return str.indexOf("\"") != -1 || str.indexOf("'") != -1 || str.indexOf("'") != -1 || str.indexOf("\"") != -1;
    }
    TypeScript.isQuoted = isQuoted;
    function quoteStr(str) {
        return "\"" + str + "\"";
    }
    TypeScript.quoteStr = quoteStr;
    function swapQuotes(str) {
        if(str.indexOf("\"") != -1) {
            str = str.replace("\"", "'");
            str = str.replace("\"", "'");
        } else {
            str = str.replace("'", "\"");
            str = str.replace("'", "\"");
        }
        return str;
    }
    TypeScript.swapQuotes = swapQuotes;
    function switchToForwardSlashes(path) {
        return path.replace(/\\/g, "/");
    }
    TypeScript.switchToForwardSlashes = switchToForwardSlashes;
    function trimModName(modName) {
        if(modName.length > 6 && modName.substring(modName.length - 6, modName.length) == ".d.str") {
            return modName.substring(0, modName.length - 6);
        }
        if(modName.length > 4 && modName.substring(modName.length - 4, modName.length) == ".str") {
            return modName.substring(0, modName.length - 4);
        }
        if(modName.length > 5 && modName.substring(modName.length - 5, modName.length) == ".d.ts") {
            return modName.substring(0, modName.length - 5);
        }
        if(modName.length > 3 && modName.substring(modName.length - 3, modName.length) == ".ts") {
            return modName.substring(0, modName.length - 3);
        }
        if(modName.length > 3 && modName.substring(modName.length - 3, modName.length) == ".js") {
            return modName.substring(0, modName.length - 3);
        }
        return modName;
    }
    TypeScript.trimModName = trimModName;
    function getDeclareFilePath(fname) {
        return isSTRFile(fname) ? changePathToDSTR(fname) : isTSFile(fname) ? changePathToDTS(fname) : changePathToDTS(fname);
    }
    TypeScript.getDeclareFilePath = getDeclareFilePath;
    function isSTRFile(fname) {
        return fname.length > 4 && fname.substring(fname.length - 4, fname.length) == ".str";
    }
    TypeScript.isSTRFile = isSTRFile;
    function isTSFile(fname) {
        return fname.length > 3 && fname.substring(fname.length - 3, fname.length) == ".ts";
    }
    TypeScript.isTSFile = isTSFile;
    function isDSTRFile(fname) {
        return fname.length > 6 && fname.substring(fname.length - 6, fname.length) == ".d.str";
    }
    TypeScript.isDSTRFile = isDSTRFile;
    function isDTSFile(fname) {
        return fname.length > 5 && fname.substring(fname.length - 5, fname.length) == ".d.ts";
    }
    TypeScript.isDTSFile = isDTSFile;
    function getPrettyName(modPath, quote, treatAsFileName) {
        if (typeof quote === "undefined") { quote = true; }
        if (typeof treatAsFileName === "undefined") { treatAsFileName = false; }
        var modName = treatAsFileName ? switchToForwardSlashes(modPath) : trimModName(stripQuotes(modPath));
        var components = modName.split("/");
        return components.length ? (quote ? quoteStr(components[components.length - 1]) : components[components.length - 1]) : modPath;
    }
    TypeScript.getPrettyName = getPrettyName;
    function getRelativePathToFixedPath(fixedModFilePath, absoluteModPath) {
        absoluteModPath = switchToForwardSlashes(absoluteModPath);
        var fileNameIndex = absoluteModPath.indexOf(fixedModFilePath);
        if(fileNameIndex == 0) {
            return absoluteModPath.substring(fixedModFilePath.length);
        }
        return absoluteModPath;
    }
    TypeScript.getRelativePathToFixedPath = getRelativePathToFixedPath;
    function quoteBaseName(modPath) {
        var modName = trimModName(stripQuotes(modPath));
        var path = getRootFilePath(modName);
        if(path == "") {
            return modPath;
        } else {
            var components = modName.split(path);
            var fileIndex = components.length > 1 ? 1 : 0;
            return quoteStr(components[fileIndex]);
        }
    }
    TypeScript.quoteBaseName = quoteBaseName;
    function changePathToSTR(modPath) {
        return trimModName(stripQuotes(modPath)) + ".str";
    }
    TypeScript.changePathToSTR = changePathToSTR;
    function changePathToDSTR(modPath) {
        return trimModName(stripQuotes(modPath)) + ".d.str";
    }
    TypeScript.changePathToDSTR = changePathToDSTR;
    function changePathToTS(modPath) {
        return trimModName(stripQuotes(modPath)) + ".ts";
    }
    TypeScript.changePathToTS = changePathToTS;
    function changePathToDTS(modPath) {
        return trimModName(stripQuotes(modPath)) + ".d.ts";
    }
    TypeScript.changePathToDTS = changePathToDTS;
    function isRelative(path) {
        return path.charAt(0) == ".";
    }
    TypeScript.isRelative = isRelative;
    function isRooted(path) {
        return path.charAt(0) == "\\" || path.charAt(0) == "/" || (path.indexOf(":\\") != -1) || (path.indexOf(":/") != -1);
    }
    TypeScript.isRooted = isRooted;
    function getRootFilePath(outFname) {
        if(outFname == "") {
            return outFname;
        } else {
            var isPath = outFname.indexOf("/") != -1;
            return isPath ? filePath(outFname) : "";
        }
    }
    TypeScript.getRootFilePath = getRootFilePath;
    function filePath(fullPath) {
        fullPath = switchToForwardSlashes(fullPath);
        var components = fullPath.split("/");
        var path = components.slice(0, components.length - 1);
        return path.join("/") + "/";
    }
    TypeScript.filePath = filePath;
    function normalizeURL(url) {
        var hostDomainAndPortRegex = /^(https?:\/\/[\-\w\.]+(:\d+)?\/)(.*)$/i;
        var matches = hostDomainAndPortRegex.exec(url);
        if(matches) {
            var hostDomainAndPort = matches[1];
            var actualPath = matches[3];
            return hostDomainAndPort + normalizePath(actualPath);
        }
        return normalizePath(url);
    }
    TypeScript.normalizeURL = normalizeURL;
    TypeScript.pathNormalizeRegExp = /\//g;
    function normalizePath(path) {
        path = switchToForwardSlashes(path);
        var startedWithSep = path.charAt(0) === "/";
        var parts = path.split("/");
        for(var i = 0; i < parts.length; i++) {
            if(parts[i] === "." || parts[i] === "") {
                parts.splice(i, 1);
                i--;
            }
            if(i > 0 && parts[i] === ".." && parts[i - 1] !== "..") {
                parts.splice(i - 1, 2);
                i -= 2;
            }
        }
        return (startedWithSep ? "/" : "") + parts.join("/");
    }
    TypeScript.normalizePath = normalizePath;
    function normalizeImportPath(path) {
        return normalizePath(path);
    }
    TypeScript.normalizeImportPath = normalizeImportPath;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var SourceUnit = (function () {
        function SourceUnit(path, content) {
            this.path = path;
            this.content = content;
            this.referencedFiles = null;
        }
        SourceUnit.prototype.getText = function (start, end) {
            return this.content.substring(start, end);
        };
        SourceUnit.prototype.getLength = function () {
            return this.content.length;
        };
        return SourceUnit;
    })();
    TypeScript.SourceUnit = SourceUnit;    
    var CompilationEnvironment = (function () {
        function CompilationEnvironment(compilationSettings, ioHost) {
            this.compilationSettings = compilationSettings;
            this.ioHost = ioHost;
            this.residentCode = [];
            this.code = [];
        }
        return CompilationEnvironment;
    })();
    TypeScript.CompilationEnvironment = CompilationEnvironment;    
    var CodeResolver = (function () {
        function CodeResolver(environment) {
            this.environment = environment;
            this.visited = {
            };
        }
        CodeResolver.prototype.resolveCode = function (referencePath, parentPath, performSearch, resolutionDispatcher) {
            var resolvedFile = {
                content: "",
                path: referencePath
            };
            var ioHost = this.environment.ioHost;
            var isRelativePath = TypeScript.isRelative(referencePath);
            var isRootedPath = isRelativePath ? false : TypeScript.isRooted(referencePath);
            var normalizedPath = isRelativePath ? ioHost.resolvePath(parentPath + "/" + referencePath) : (isRootedPath || !parentPath || performSearch ? referencePath : parentPath + "/" + referencePath);
            if(!TypeScript.isSTRFile(normalizedPath) && !TypeScript.isTSFile(normalizedPath)) {
                normalizedPath += ".ts";
            }
            normalizedPath = TypeScript.switchToForwardSlashes(TypeScript.stripQuotes(normalizedPath));
            var absoluteModuleID = this.environment.compilationSettings.useCaseSensitiveFileResolution ? normalizedPath : normalizedPath.toLocaleUpperCase();
            if(!this.visited[absoluteModuleID]) {
                if(isRelativePath || isRootedPath || !performSearch) {
                    try  {
                        TypeScript.CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);
                        try  {
                            resolvedFile.content = ioHost.readFile(normalizedPath);
                        } catch (err) {
                            try  {
                                if(TypeScript.isSTRFile(normalizedPath)) {
                                    normalizedPath = TypeScript.changePathToTS(normalizedPath);
                                } else {
                                    if(TypeScript.isTSFile(normalizedPath)) {
                                        normalizedPath = TypeScript.changePathToSTR(normalizedPath);
                                    }
                                }
                                TypeScript.CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);
                                resolvedFile.content = ioHost.readFile(normalizedPath);
                            } catch (err) {
                                normalizedPath = TypeScript.changePathToDSTR(normalizedPath);
                                TypeScript.CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);
                                try  {
                                    resolvedFile.content = ioHost.readFile(normalizedPath);
                                } catch (err) {
                                    normalizedPath = TypeScript.changePathToDTS(normalizedPath);
                                    TypeScript.CompilerDiagnostics.debugPrint("   Reading code from " + normalizedPath);
                                    resolvedFile.content = ioHost.readFile(normalizedPath);
                                }
                            }
                        }
                        TypeScript.CompilerDiagnostics.debugPrint("   Found code at " + normalizedPath);
                        resolvedFile.path = normalizedPath;
                        this.visited[absoluteModuleID] = true;
                    } catch (err) {
                        TypeScript.CompilerDiagnostics.debugPrint("   Did not find code for " + referencePath);
                    }
                } else {
                    resolvedFile = ioHost.findFile(parentPath, normalizedPath);
                    if(!resolvedFile) {
                        if(TypeScript.isSTRFile(normalizedPath)) {
                            normalizedPath = TypeScript.changePathToTS(normalizedPath);
                        } else {
                            if(TypeScript.isTSFile(normalizedPath)) {
                                normalizedPath = TypeScript.changePathToSTR(normalizedPath);
                            }
                        }
                        resolvedFile = ioHost.findFile(parentPath, normalizedPath);
                    }
                    if(!resolvedFile) {
                        normalizedPath = TypeScript.changePathToDTS(normalizedPath);
                        resolvedFile = ioHost.findFile(parentPath, normalizedPath);
                        if(!resolvedFile) {
                            normalizedPath = TypeScript.changePathToDSTR(normalizedPath);
                            resolvedFile = ioHost.findFile(parentPath, normalizedPath);
                        }
                    }
                    if(resolvedFile) {
                        resolvedFile.path = TypeScript.switchToForwardSlashes(TypeScript.stripQuotes(resolvedFile.path));
                        TypeScript.CompilerDiagnostics.debugPrint(referencePath + " resolved to: " + resolvedFile.path);
                        resolvedFile.content = resolvedFile.content;
                        this.visited[absoluteModuleID] = true;
                    } else {
                        TypeScript.CompilerDiagnostics.debugPrint("Could not find " + referencePath);
                    }
                }
                if(resolvedFile && resolvedFile.content) {
                    var rootDir = ioHost.dirName(resolvedFile.path);
                    var sourceUnit = new SourceUnit(resolvedFile.path, resolvedFile.content);
                    var preProcessedFileInfo = TypeScript.preProcessFile(sourceUnit, this.environment.compilationSettings);
                    sourceUnit.referencedFiles = preProcessedFileInfo.referencedFiles;
                    for(var i = 0; i < preProcessedFileInfo.referencedFiles.length; i++) {
                        var referencedFile = preProcessedFileInfo.referencedFiles[i];
                        var normalizedPath = TypeScript.isRooted(referencedFile.path) ? referencedFile.path : rootDir + "/" + referencedFile.path;
                        normalizedPath = ioHost.resolvePath(normalizedPath);
                        if(referencePath == normalizedPath) {
                            resolutionDispatcher.postResolutionError(normalizedPath, "File contains reference to itself", null);
                            continue;
                        }
                        this.resolveCode(referencedFile.path, rootDir, false, resolutionDispatcher);
                    }
                    for(var i = 0; i < preProcessedFileInfo.importedFiles.length; i++) {
                        this.resolveCode(preProcessedFileInfo.importedFiles[i].path, rootDir, true, resolutionDispatcher);
                    }
                    resolutionDispatcher.postResolution(sourceUnit.path, sourceUnit);
                }
            }
        };
        return CodeResolver;
    })();
    TypeScript.CodeResolver = CodeResolver;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var StyleSettings = (function () {
        function StyleSettings() {
            this.bitwise = false;
            this.blockInCompoundStmt = false;
            this.eqeqeq = false;
            this.forin = false;
            this.emptyBlocks = true;
            this.newMustBeUsed = false;
            this.requireSemi = false;
            this.assignmentInCond = false;
            this.eqnull = false;
            this.evalOK = true;
            this.innerScopeDeclEscape = true;
            this.funcInLoop = true;
            this.reDeclareLocal = true;
            this.literalSubscript = true;
            this.implicitAny = false;
        }
        StyleSettings.prototype.setOption = function (opt, val) {
            var optExists = this[opt];
            if(optExists !== undefined) {
                this[opt] = val;
                return true;
            } else {
                return false;
            }
        };
        StyleSettings.prototype.parseOptions = function (str) {
            var opts = str.split(";");
            for(var i = 0, len = opts.length; i < len; i++) {
                var opt = opts[i];
                var val = true;
                var colonIndex = opt.lastIndexOf(":");
                if(colonIndex >= 0) {
                    var valStr = opt.substring(colonIndex + 1);
                    opt = opt.substring(0, colonIndex);
                    if(valStr == "off") {
                        val = false;
                    }
                }
                if(!this.setOption(opt, val)) {
                    return false;
                }
            }
            return true;
        };
        return StyleSettings;
    })();
    TypeScript.StyleSettings = StyleSettings;    
    var CompilationSettings = (function () {
        function CompilationSettings() {
            this.styleSettings = new StyleSettings();
            this.propagateConstants = false;
            this.minWhitespace = false;
            this.parseOnly = false;
            this.outputMany = true;
            this.errorRecovery = false;
            this.emitComments = false;
            this.watch = false;
            this.exec = false;
            this.resolve = true;
            this.controlFlow = false;
            this.printControlFlow = false;
            this.controlFlowUseDef = false;
            this.errorOnWith = true;
            this.preprocess = true;
            this.canCallDefinitionSignature = false;
            this.inferPropertiesFromThisAssignment = false;
            this.useDefaultLib = true;
            this.codeGenTarget = 0 /* ES3 */ ;
            this.moduleGenTarget = 0 /* Synchronous */ ;
            this.outputFileName = "";
            this.mapSourceFiles = false;
            this.generateDeclarationFiles = false;
            this.useCaseSensitiveFileResolution = false;
        }
        CompilationSettings.prototype.setStyleOptions = function (str) {
            this.styleSettings.parseOptions(str);
        };
        CompilationSettings.prototype.outputOne = function (outFile) {
            this.outputFileName = outFile;
            this.outputMany = false;
        };
        return CompilationSettings;
    })();
    TypeScript.CompilationSettings = CompilationSettings;    
    function getFileReferenceFromReferencePath(comment) {
        var referencesRegEx = /^(\/\/\/\s*<reference\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/igm;
        var match = referencesRegEx.exec(comment);
        if(match) {
            var path = TypeScript.normalizePath(match[3]);
            var adjustedPath = TypeScript.normalizePath(path);
            var isResident = match.length >= 7 && match[6] == "true";
            if(isResident) {
                TypeScript.CompilerDiagnostics.debugPrint(path + " is resident");
            }
            return {
                minChar: 0,
                limChar: 0,
                path: TypeScript.switchToForwardSlashes(adjustedPath),
                isResident: isResident
            };
        } else {
            return null;
        }
    }
    function getAdditionalDependencyPath(comment) {
        var amdDependencyRegEx = /^(\/\/\/\s*<amd-dependency\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/igm;
        var match = amdDependencyRegEx.exec(comment);
        if(match) {
            var path = match[3];
            return path;
        } else {
            return null;
        }
    }
    TypeScript.getAdditionalDependencyPath = getAdditionalDependencyPath;
    function getImplicitImport(comment) {
        var implicitImportRegEx = /^(\/\/\/\s*<implicit-import\s*)*\/>/igm;
        var match = implicitImportRegEx.exec(comment);
        if(match) {
            return true;
        }
        return false;
    }
    TypeScript.getImplicitImport = getImplicitImport;
    function getStyleSettings(comment, styleSettings) {
        var styleRegEx = /^(\/\/\/\s*<style\s+)(([a-zA-Z])+=('|").+('|"))\s*\/>/igm;
        var settings = styleRegEx.exec(comment);
        if(settings) {
            var settingsRegEx = /^([a-zA-Z]+=['"]on['|"])/igm;
            settings = settingsRegEx.exec(settings[2]);
            if(settings) {
                for(var i = 0; i < settings.length; i++) {
                    var setting = (settings[i]).split("=");
                    var on = "\"on\"";
                    switch(setting[0]) {
                        case "blockInCompoundStmt": {
                            styleSettings.blockInCompoundStmt = setting[1] == on;
                            break;

                        }
                        case "eqeqeq": {
                            styleSettings.eqeqeq = setting[1] == on;
                            break;

                        }
                        case "forin": {
                            styleSettings.forin = setting[1] == on;
                            break;

                        }
                        case "emptyBlocks": {
                            styleSettings.emptyBlocks = setting[1] == on;
                            break;

                        }
                        case "newMustBeUsed": {
                            styleSettings.newMustBeUsed = setting[1] == on;
                            break;

                        }
                        case "requireSemi": {
                            styleSettings.requireSemi = setting[1] == on;
                            break;

                        }
                        case "assignmentInCond": {
                            styleSettings.assignmentInCond = setting[1] == on;
                            break;

                        }
                        case "eqnull": {
                            styleSettings.eqnull = setting[1] == on;
                            break;

                        }
                        case "evalOK": {
                            styleSettings.evalOK = setting[1] == on;
                            break;

                        }
                        case "innerScopeDeclEscape": {
                            styleSettings.innerScopeDeclEscape = setting[1] == on;
                            break;

                        }
                        case "funcInLoop": {
                            styleSettings.funcInLoop = setting[1] == on;
                            break;

                        }
                        case "reDeclareLocal": {
                            styleSettings.reDeclareLocal = setting[1] == on;
                            break;

                        }
                        case "literalSubscript": {
                            styleSettings.literalSubscript = setting[1] == on;
                            break;

                        }
                        case "implicitAny": {
                            styleSettings.implicitAny = setting[1] == on;
                            break;

                        }
                    }
                }
            }
        }
    }
    TypeScript.getStyleSettings = getStyleSettings;
    function getReferencedFiles(sourceText) {
        var preProcessInfo = preProcessFile(sourceText, null, false);
        return preProcessInfo.referencedFiles;
    }
    TypeScript.getReferencedFiles = getReferencedFiles;
    function preProcessFile(sourceText, options, readImportFiles) {
        if (typeof options === "undefined") { options = new CompilationSettings(); }
        if (typeof readImportFiles === "undefined") { readImportFiles = true; }
        var scanner = new TypeScript.Scanner();
        scanner.resetComments();
        scanner.setSourceText(sourceText, 1 /* File */ );
        var tok = scanner.scan();
        var comments = [];
        var comment = null;
        var leftCurlies = [];
        var settings = options;
        var referencedFiles = [];
        var importedFiles = [];
        var isLibFile = false;
        while(tok.tokenId != 104 /* EndOfFile */ ) {
            if(readImportFiles && tok.tokenId == 25 /* Import */ ) {
                tok = scanner.scan();
                if(tok.tokenId == 106 /* Identifier */  || TypeScript.convertTokToID(tok, false)) {
                    tok = scanner.scan();
                    if(tok.tokenId == 62 /* Equals */ ) {
                        tok = scanner.scan();
                        if(tok.tokenId == 30 /* Module */ ) {
                            tok = scanner.scan();
                            if(tok.tokenId == 55 /* OpenParen */ ) {
                                tok = scanner.scan();
                                if(tok.tokenId == 107 /* StringLiteral */ ) {
                                    var ref = {
                                        minChar: scanner.startPos,
                                        limChar: scanner.pos,
                                        path: TypeScript.stripQuotes(TypeScript.switchToForwardSlashes(tok.getText())),
                                        isResident: false
                                    };
                                    importedFiles.push(ref);
                                }
                            }
                        }
                    }
                }
            }
            if(tok.tokenId == 59 /* OpenBrace */ ) {
                leftCurlies.push(tok);
            }
            if(tok.tokenId == 60 /* CloseBrace */ ) {
                leftCurlies.pop();
            }
            tok = scanner.scan();
        }
        comments = scanner.getComments();
        for(var iComment = 0; iComment < comments.length; iComment++) {
            comment = comments[iComment];
            if(!comment.isBlock) {
                var referencedCode = getFileReferenceFromReferencePath(comment.getText());
                if(referencedCode) {
                    referencedCode.minChar = comment.startPos;
                    referencedCode.limChar = referencedCode.minChar + comment.value.length;
                    referencedFiles.push(referencedCode);
                }
                if(settings) {
                    getStyleSettings(comment.getText(), settings.styleSettings);
                    var isNoLibRegex = /^(\/\/\/\s*<reference\s+no-default-lib=)('|")(.+?)\2\s*\/>/igm;
                    var isNoLibMatch = isNoLibRegex.exec(comment.getText());
                    if(isNoLibMatch) {
                        isLibFile = (isNoLibMatch[3] == "true");
                    }
                }
            }
        }
        return {
            settings: settings,
            referencedFiles: referencedFiles,
            importedFiles: importedFiles,
            isLibFile: isLibFile
        };
    }
    TypeScript.preProcessFile = preProcessFile;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var IncrementalParser = (function () {
        function IncrementalParser(logger) {
            this.logger = logger;
            this.astLogger = new TypeScript.AstLogger(this.logger);
        }
        IncrementalParser.prototype.getEnclosingScopeContextIfSingleScopeEdit = function (previousScript, scriptId, newSourceText, editRange) {
            this.logger.log("checkEditsInsideSingleScope(\"" + scriptId + "\")");
            if(editRange === null) {
                throw new Error("editRange should be valid");
            }
            if(editRange.isUnknown()) {
                this.logger.log("  Bailing out because edit range is unknown");
                return null;
            }
            var scope1 = TypeScript.findEnclosingScopeAt(this.logger, previousScript, newSourceText, editRange.minChar, false);
            var scope2 = TypeScript.findEnclosingScopeAt(this.logger, previousScript, newSourceText, editRange.limChar, false);
            if(scope1 == null || scope2 == null) {
                this.logger.log("  Bailing out because containing scopes cannot be determined");
                return null;
            }
            if(scope1.scopeStartAST !== scope2.scopeStartAST) {
                this.logger.log("  Bailing out because edit overlaps 2 disctint scopes");
                return null;
            }
            var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta;
            if(newScopeLength <= 0) {
                this.logger.log("  Bailing out because scope has been entirely removed from new source text");
                return null;
            }
            return scope1;
        };
        IncrementalParser.prototype.attemptIncrementalUpdateUnit = function (previousScript, scriptId, newSourceText, editRange) {
            this.logger.log("attemptIncrementalUpdateUnit(\"" + scriptId + "\")");
            if(editRange === null) {
                throw new Error("editRange should be valid");
            }
            var scope1 = this.getEnclosingScopeContextIfSingleScopeEdit(previousScript, scriptId, newSourceText, editRange);
            if(scope1 === null) {
                return null;
            }
            var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta;
            if(newScopeLength >= newSourceText.getLength() / 2) {
                this.logger.log("  Bailing out because range of scope to reparse (" + newScopeLength + " characters) is greater than half the size of the source text");
                return null;
            }
            var parseErrors = [];
            var errorCapture = function (minChar, charLen, message, unitIndex) {
                parseErrors.push(new TypeScript.ErrorEntry(unitIndex, minChar, minChar + charLen, message));
            };
            var quickParseResult = TypeScript.quickParse(this.logger, scope1.scopeStartAST, newSourceText, scope1.scopeStartAST.minChar, scope1.scopeStartAST.minChar + newScopeLength, errorCapture);
            if(quickParseResult.endLexState != 0 /* Start */ ) {
                this.logger.log("  Bailing out because scope contains unterminated comment");
                return null;
            }
            var scriptFragment = quickParseResult.Script;
            if(scriptFragment.vars.members.length !== 0) {
                this.logger.log("  Bailing out because new source text defines variables");
                return null;
            }
            if(scriptFragment.bod.members.length !== 1) {
                this.logger.log("  Bailing out because new source text defines more than one scope (or none)");
                return null;
            }
            var oldScope = scope1.scopeStartAST;
            var newScope = scriptFragment.bod.members[0];
            if(oldScope.nodeType != newScope.nodeType) {
                this.logger.log("  Bailing out because new source text does not define the same scope type as the existing scope");
                return null;
            }
            if(!(oldScope).leftCurlyCount || !(oldScope).rightCurlyCount) {
                this.logger.log("  Bailing out because sopce doesn't have left/right curly count");
                return null;
            }
            if((oldScope).leftCurlyCount !== (newScope).leftCurlyCount) {
                this.logger.log("  Bailing out because new source text contains more (or fewer) left curly braces");
                return null;
            }
            if((oldScope).rightCurlyCount !== (newScope).rightCurlyCount) {
                this.logger.log("  Bailing out because new source text contains more (or fewer) right curly braces");
                return null;
            }
            if(newScope.minChar !== 0) {
                this.logger.log("  Bailing out because new function declaration does not start at position 0");
                return null;
            }
            if(newScope.limChar !== newScopeLength) {
                this.logger.log("  Bailing out because new function declaration does not end at the new end position");
                return null;
            }
            return TypeScript.UpdateUnitResult.singleScopeEdits(previousScript, scriptFragment, oldScope, newScope, editRange, parseErrors);
        };
        IncrementalParser.prototype.mergeTrees = function (updateResult) {
            var _this = this;
            TypeScript.timeFunction(this.logger, "mergeTrees()", function () {
                var editRange = new TypeScript.ScriptEditRange(updateResult.scope1.minChar, updateResult.scope1.limChar, updateResult.editRange.delta);
                _this.applyDeltaPosition(updateResult.script1, editRange.limChar, editRange.delta);
                _this.applyDeltaPosition(updateResult.script2, 0, editRange.minChar);
                _this.mergeLocationInfo(updateResult.script1, updateResult.script2, editRange);
                _this.replaceAST(updateResult.script1, updateResult.scope1, updateResult.scope2);
            });
        };
        IncrementalParser.prototype.replaceAST = function (script, oldAst, newAst) {
            var _this = this;
            var pre = function (cur, parent, walker) {
                if(cur === oldAst) {
                    newAst.preComments = cur.preComments;
                    newAst.postComments = cur.postComments;
                    _this.logger.log("replaced old AST node with new one in script AST");
                    walker.options.stopWalk();
                    return newAst;
                }
                if(TypeScript.isValidAstNode(cur)) {
                    if(cur.limChar < oldAst.minChar || cur.minChar > oldAst.limChar) {
                        walker.options.goChildren = false;
                    }
                }
                return cur;
            };
            TypeScript.getAstWalkerFactory().walk(script, pre);
        };
        IncrementalParser.prototype.mergeLocationInfo = function (script, partial, editRange) {
            var lineMap1 = script.locationInfo.lineMap;
            var lineMap2 = partial.locationInfo.lineMap;
            if(this.logger.information()) {
                this.logger.log("lineMap1 (before):");
                this.astLogger.logLinemap(lineMap1);
                this.logger.log("lineMap2 (quick parse):");
                this.astLogger.logLinemap(lineMap2);
                this.logger.log("EditRange=" + editRange);
            }
            var i1 = 2;
            var i2 = 2;
            var len1 = lineMap1.length;
            var len2 = lineMap2.length;
            while(i1 < len1 || i2 < len2) {
                if(i1 < len1) {
                    if(lineMap1[i1] <= editRange.minChar) {
                        i1++;
                    } else {
                        if(lineMap1[i1] >= editRange.limChar) {
                            lineMap1[i1] += editRange.delta;
                            i1++;
                        } else {
                            if(i2 < len2) {
                                lineMap1.splice(i1, 0, lineMap2[i2] + editRange.minChar);
                                i1++;
                                len1++;
                                i2++;
                            } else {
                                lineMap1.splice(i1, 1);
                                len1--;
                            }
                        }
                    }
                } else {
                    lineMap1.push(lineMap2[i2] + editRange.minChar);
                    i2++;
                }
            }
            if(this.logger.information()) {
                this.logger.log("lineMap1 (after merge):");
                this.astLogger.logLinemap(lineMap1);
            }
        };
        IncrementalParser.prototype.applyDeltaPosition = function (ast, start, delta) {
            var applyDelta = function (ast) {
                if(ast.minChar !== -1 && ast.minChar >= start) {
                    ast.minChar += delta;
                }
                if(ast.limChar !== -1 && ast.limChar >= start) {
                    ast.limChar += delta;
                }
            };
            var applyDeltaToComments = function (comments) {
                if(comments && comments.length > 0) {
                    for(var i = 0; i < comments.length; i++) {
                        applyDelta(comments[i]);
                    }
                }
            };
            var pre = function (cur, parent, walker) {
                if(cur.limChar !== -1 && cur.limChar < start) {
                    walker.options.goChildren = false;
                }
                applyDelta(cur);
                applyDeltaToComments(cur.preComments);
                applyDeltaToComments(cur.postComments);
                return cur;
            };
            TypeScript.getAstWalkerFactory().walk(ast, pre);
        };
        return IncrementalParser;
    })();
    TypeScript.IncrementalParser = IncrementalParser;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var DeclarationEmitter = (function () {
        function DeclarationEmitter(checker, emitOptions) {
            this.checker = checker;
            this.emitOptions = emitOptions;
            this.declFile = null;
            this.indenter = new TypeScript.Indenter();
            this.declarationContainerStack = [];
            this.isDottedModuleName = [];
            this.ignoreCallbackAst = null;
            this.singleDeclFile = null;
            this.varListCount = 0;
        }
        DeclarationEmitter.prototype.getAstDeclarationContainer = function () {
            return this.declarationContainerStack[this.declarationContainerStack.length - 1];
        };
        DeclarationEmitter.prototype.emitDottedModuleName = function () {
            return (this.isDottedModuleName.length == 0) ? false : this.isDottedModuleName[this.isDottedModuleName.length - 1];
        };
        DeclarationEmitter.prototype.setDeclarationFile = function (file) {
            this.declFile = file;
        };
        DeclarationEmitter.prototype.emitDeclarations = function (script) {
            TypeScript.AstWalkerWithDetailCallback.walk(script, this);
        };
        DeclarationEmitter.prototype.getIndentString = function (declIndent) {
            if (typeof declIndent === "undefined") { declIndent = false; }
            if(this.emitOptions.minWhitespace) {
                return "";
            } else {
                return this.indenter.getIndent();
            }
        };
        DeclarationEmitter.prototype.emitIndent = function () {
            this.declFile.Write(this.getIndentString());
        };
        DeclarationEmitter.prototype.canEmitSignature = function (declFlags, canEmitGlobalAmbientDecl, useDeclarationContainerTop) {
            if (typeof canEmitGlobalAmbientDecl === "undefined") { canEmitGlobalAmbientDecl = true; }
            if (typeof useDeclarationContainerTop === "undefined") { useDeclarationContainerTop = true; }
            var container;
            if(useDeclarationContainerTop) {
                container = this.getAstDeclarationContainer();
            } else {
                container = this.declarationContainerStack[this.declarationContainerStack.length - 2];
            }
            if(container.nodeType == 96 /* ModuleDeclaration */  && !TypeScript.hasFlag(declFlags, 1 /* Exported */ )) {
                return false;
            }
            if(!canEmitGlobalAmbientDecl && container.nodeType == 93 /* Script */  && TypeScript.hasFlag(declFlags, 8 /* Ambient */ )) {
                return false;
            }
            return true;
        };
        DeclarationEmitter.prototype.canEmitPrePostAstSignature = function (declFlags, astWithPrePostCallback, preCallback) {
            if(this.ignoreCallbackAst) {
                TypeScript.CompilerDiagnostics.assert(this.ignoreCallbackAst != astWithPrePostCallback, "Ignore Callback AST mismatch");
                this.ignoreCallbackAst = null;
                return false;
            } else {
                if(preCallback && !this.canEmitSignature(declFlags, true, preCallback)) {
                    this.ignoreCallbackAst = astWithPrePostCallback;
                    return false;
                }
            }
            return true;
        };
        DeclarationEmitter.prototype.emitDeclFlags = function (declFlags, typeString) {
            this.emitIndent();
            var accessorString = "";
            if(TypeScript.hasFlag(declFlags, 64 /* GetAccessor */ )) {
                accessorString = "get ";
            } else {
                if(TypeScript.hasFlag(declFlags, 128 /* SetAccessor */ )) {
                    accessorString = "set ";
                }
            }
            var container = this.getAstDeclarationContainer();
            if(container.nodeType == 96 /* ModuleDeclaration */  && TypeScript.hasFlag((container).modFlags, 1024 /* IsWholeFile */ ) && TypeScript.hasFlag(declFlags, 1 /* Exported */ )) {
                this.declFile.Write("export ");
            }
            if(TypeScript.hasFlag(declFlags, 32 /* LocalStatic */ ) || TypeScript.hasFlag(declFlags, 16 /* Static */ )) {
                this.declFile.Write("static " + accessorString);
            } else {
                if(TypeScript.hasFlag(declFlags, 2 /* Private */ )) {
                    this.declFile.Write("private " + accessorString);
                } else {
                    if(TypeScript.hasFlag(declFlags, 4 /* Public */ )) {
                        this.declFile.Write("public " + accessorString);
                    } else {
                        if(accessorString == "") {
                            this.declFile.Write(typeString + " ");
                        } else {
                            this.declFile.Write(accessorString);
                        }
                    }
                }
            }
        };
        DeclarationEmitter.prototype.canEmitTypeAnnotationSignature = function (declFlag) {
            if (typeof declFlag === "undefined") { declFlag = 0 /* None */ ; }
            return !TypeScript.hasFlag(declFlag, 2 /* Private */ );
        };
        DeclarationEmitter.prototype.pushDeclarationContainer = function (ast) {
            this.declarationContainerStack.push(ast);
        };
        DeclarationEmitter.prototype.popDeclarationContainer = function (ast) {
            TypeScript.CompilerDiagnostics.assert(ast != this.getAstDeclarationContainer(), 'Declaration container mismatch');
            this.declarationContainerStack.pop();
        };
        DeclarationEmitter.prototype.emitTypeNamesMember = function (memberName, emitIndent) {
            if (typeof emitIndent === "undefined") { emitIndent = false; }
            if(memberName.prefix == "{ ") {
                if(emitIndent) {
                    this.emitIndent();
                }
                this.declFile.WriteLine("{");
                this.indenter.increaseIndent();
                emitIndent = true;
            } else {
                if(memberName.prefix != "") {
                    if(emitIndent) {
                        this.emitIndent();
                    }
                    this.declFile.Write(memberName.prefix);
                    emitIndent = false;
                }
            }
            if(memberName.isString()) {
                if(emitIndent) {
                    this.emitIndent();
                }
                this.declFile.Write((memberName).text);
            } else {
                var ar = memberName;
                for(var index = 0; index < ar.entries.length; index++) {
                    this.emitTypeNamesMember(ar.entries[index], emitIndent);
                    if(ar.delim == "; ") {
                        this.declFile.WriteLine(";");
                    }
                }
            }
            if(memberName.suffix == "}") {
                this.indenter.decreaseIndent();
                this.emitIndent();
                this.declFile.Write(memberName.suffix);
            } else {
                this.declFile.Write(memberName.suffix);
            }
        };
        DeclarationEmitter.prototype.emitTypeSignature = function (type) {
            var containingScope = null;
            var declarationContainerAst = this.getAstDeclarationContainer();
            switch(declarationContainerAst.nodeType) {
                case 96 /* ModuleDeclaration */ :
                case 95 /* InterfaceDeclaration */ :
                case 71 /* FuncDecl */ : {
                    if(declarationContainerAst.type) {
                        containingScope = declarationContainerAst.type.containedScope;
                    }
                    break;

                }
                case 93 /* Script */ : {
                    var script = declarationContainerAst;
                    if(script.bod) {
                        containingScope = script.bod.enclosingScope;
                    }
                    break;

                }
                case 94 /* ClassDeclaration */ : {
                    if(declarationContainerAst.type) {
                        containingScope = declarationContainerAst.type.instanceType.containedScope;
                    }
                    break;

                }
                default: {
                    TypeScript.CompilerDiagnostics.debugPrint("Unknown containing scope");

                }
            }
            var typeNameMembers = type.getScopedTypeNameEx(containingScope);
            this.emitTypeNamesMember(typeNameMembers);
        };
        DeclarationEmitter.prototype.VarDeclCallback = function (pre, varDecl) {
            if(pre && this.canEmitSignature(TypeScript.ToDeclFlags(varDecl.varFlags), false)) {
                var interfaceMember = (this.getAstDeclarationContainer().nodeType == 95 /* InterfaceDeclaration */ );
                if(!interfaceMember) {
                    if(this.varListCount >= 0) {
                        this.emitDeclFlags(TypeScript.ToDeclFlags(varDecl.varFlags), "var");
                        this.varListCount = -this.varListCount;
                    }
                    this.declFile.Write(varDecl.id.text);
                } else {
                    this.emitIndent();
                    this.declFile.Write(varDecl.id.text);
                    if(TypeScript.hasFlag(varDecl.id.flags, 1024 /* OptionalName */ )) {
                        this.declFile.Write("?");
                    }
                }
                var type = null;
                if(varDecl.typeExpr && varDecl.typeExpr.type) {
                    type = varDecl.typeExpr.type;
                } else {
                    if(varDecl.sym) {
                        type = (varDecl.sym).getType();
                        if(type == this.checker.anyType) {
                            type = null;
                        }
                    }
                }
                if(type && this.canEmitTypeAnnotationSignature(TypeScript.ToDeclFlags(varDecl.varFlags))) {
                    this.declFile.Write(": ");
                    this.emitTypeSignature(type);
                }
                if(this.varListCount > 0) {
                    this.varListCount--;
                } else {
                    if(this.varListCount < 0) {
                        this.varListCount++;
                    }
                }
                if(this.varListCount < 0) {
                    this.declFile.Write(", ");
                } else {
                    this.declFile.WriteLine(";");
                }
            }
            return false;
        };
        DeclarationEmitter.prototype.BlockCallback = function (pre, block) {
            if(!block.isStatementBlock) {
                if(pre) {
                    this.varListCount = block.statements.members.length;
                } else {
                    this.varListCount = 0;
                }
                return true;
            }
            return false;
        };
        DeclarationEmitter.prototype.emitArgDecl = function (argDecl, funcDecl) {
            this.declFile.Write(argDecl.id.text);
            if(argDecl.isOptionalArg()) {
                this.declFile.Write("?");
            }
            if((argDecl.typeExpr || argDecl.type != this.checker.anyType) && this.canEmitTypeAnnotationSignature(TypeScript.ToDeclFlags(funcDecl.fncFlags))) {
                this.declFile.Write(": ");
                this.emitTypeSignature(argDecl.type);
            }
        };
        DeclarationEmitter.prototype.FuncDeclCallback = function (pre, funcDecl) {
            if(!pre) {
                return false;
            }
            if(funcDecl.isAccessor()) {
                return this.emitPropertyAccessorSignature(funcDecl);
            }
            var isInterfaceMember = (this.getAstDeclarationContainer().nodeType == 95 /* InterfaceDeclaration */ );
            if(funcDecl.bod) {
                if(funcDecl.isConstructor) {
                    if(funcDecl.type.construct && funcDecl.type.construct.signatures.length > 1) {
                        return false;
                    }
                } else {
                    if(funcDecl.type.call && funcDecl.type.call.signatures.length > 1) {
                        return false;
                    }
                }
            } else {
                if(!isInterfaceMember && TypeScript.hasFlag(funcDecl.fncFlags, 2 /* Private */ ) && funcDecl.type.call && funcDecl.type.call.signatures.length > 1) {
                    var signatures = funcDecl.type.call.signatures;
                    var firstSignature = signatures[0].declAST;
                    if(firstSignature.bod) {
                        firstSignature = signatures[1].declAST;
                    }
                    if(firstSignature != funcDecl) {
                        return false;
                    }
                }
            }
            if(!this.canEmitSignature(TypeScript.ToDeclFlags(funcDecl.fncFlags), false)) {
                return false;
            }
            if(funcDecl.isConstructor) {
                this.emitIndent();
                this.declFile.Write("constructor ");
            } else {
                var id = funcDecl.getNameText();
                if(!isInterfaceMember) {
                    this.emitDeclFlags(TypeScript.ToDeclFlags(funcDecl.fncFlags), "function");
                    this.declFile.Write(id);
                } else {
                    this.emitIndent();
                    if(funcDecl.isConstructMember()) {
                        this.declFile.Write("new");
                    } else {
                        if(!funcDecl.isCallMember() && !funcDecl.isIndexerMember()) {
                            this.declFile.Write(id);
                            if(TypeScript.hasFlag(funcDecl.name.flags, 1024 /* OptionalName */ )) {
                                this.declFile.Write("? ");
                            }
                        }
                    }
                }
            }
            if(!funcDecl.isIndexerMember()) {
                this.declFile.Write("(");
            } else {
                this.declFile.Write("[");
            }
            if(funcDecl.arguments) {
                var argsLen = funcDecl.arguments.members.length;
                if(funcDecl.variableArgList) {
                    argsLen--;
                }
                for(var i = 0; i < argsLen; i++) {
                    var argDecl = funcDecl.arguments.members[i];
                    this.emitArgDecl(argDecl, funcDecl);
                    if(i < (argsLen - 1)) {
                        this.declFile.Write(", ");
                    }
                }
            }
            if(funcDecl.variableArgList) {
                var lastArg = funcDecl.arguments.members[funcDecl.arguments.members.length - 1];
                if(funcDecl.arguments.members.length > 1) {
                    this.declFile.Write(", ...");
                } else {
                    this.declFile.Write("...");
                }
                this.emitArgDecl(lastArg, funcDecl);
            }
            if(!funcDecl.isIndexerMember()) {
                this.declFile.Write(")");
            } else {
                this.declFile.Write("]");
            }
            if(!funcDecl.isConstructor && (funcDecl.returnTypeAnnotation || funcDecl.signature.returnType.type != this.checker.anyType) && this.canEmitTypeAnnotationSignature(TypeScript.ToDeclFlags(funcDecl.fncFlags))) {
                this.declFile.Write(": ");
                this.emitTypeSignature(funcDecl.signature.returnType.type);
            }
            if(funcDecl.hasStaticDeclarations()) {
                this.declFile.WriteLine(" {");
            } else {
                this.declFile.WriteLine(";");
            }
            return false;
        };
        DeclarationEmitter.prototype.emitBaseList = function (bases, qual) {
            if(bases && (bases.members.length > 0)) {
                this.declFile.Write(" " + qual + " ");
                var basesLen = bases.members.length;
                for(var i = 0; i < basesLen; i++) {
                    var baseExpr = bases.members[i];
                    var baseSymbol = baseExpr.type.symbol;
                    var baseType = baseExpr.type;
                    if(i > 0) {
                        this.declFile.Write(", ");
                    }
                    this.emitTypeSignature(baseType);
                }
            }
        };
        DeclarationEmitter.prototype.emitPropertyAccessorSignature = function (funcDecl) {
            var accessorSymbol = funcDecl.accessorSymbol;
            if(accessorSymbol.getter && accessorSymbol.getter.declAST != funcDecl) {
                return false;
            }
            this.emitDeclFlags(TypeScript.ToDeclFlags(accessorSymbol.flags), "var");
            this.declFile.Write(funcDecl.name.text);
            var propertyType = accessorSymbol.getType();
            if(this.canEmitTypeAnnotationSignature(TypeScript.ToDeclFlags(accessorSymbol.flags))) {
                this.declFile.Write(" : ");
                this.emitTypeSignature(propertyType);
            }
            this.declFile.WriteLine(";");
            return false;
        };
        DeclarationEmitter.prototype.emitClassMembersFromConstructorDefinition = function (funcDecl) {
            if(funcDecl.arguments) {
                var argsLen = funcDecl.arguments.members.length;
                if(funcDecl.variableArgList) {
                    argsLen--;
                }
                for(var i = 0; i < argsLen; i++) {
                    var argDecl = funcDecl.arguments.members[i];
                    if(TypeScript.hasFlag(argDecl.varFlags, 512 /* Property */ )) {
                        this.emitDeclFlags(TypeScript.ToDeclFlags(argDecl.varFlags), "var");
                        this.declFile.Write(argDecl.id.text);
                        if(argDecl.typeExpr && this.canEmitTypeAnnotationSignature(TypeScript.ToDeclFlags(argDecl.varFlags))) {
                            this.declFile.Write(": ");
                            this.emitTypeSignature(argDecl.type);
                        }
                        this.declFile.WriteLine(";");
                    }
                }
            }
        };
        DeclarationEmitter.prototype.ClassDeclarationCallback = function (pre, classDecl) {
            if(!this.canEmitPrePostAstSignature(TypeScript.ToDeclFlags(classDecl.varFlags), classDecl, pre)) {
                return false;
            }
            if(pre) {
                var className = classDecl.name.text;
                this.emitDeclFlags(TypeScript.ToDeclFlags(classDecl.varFlags), "class");
                this.declFile.Write(className);
                this.emitBaseList(classDecl.extendsList, "extends");
                this.emitBaseList(classDecl.implementsList, "implements");
                this.declFile.WriteLine(" {");
                this.pushDeclarationContainer(classDecl);
                this.indenter.increaseIndent();
                if(classDecl.constructorDecl) {
                    this.emitClassMembersFromConstructorDefinition(classDecl.constructorDecl);
                }
            } else {
                this.indenter.decreaseIndent();
                this.popDeclarationContainer(classDecl);
                this.emitIndent();
                this.declFile.WriteLine("}");
            }
            return true;
        };
        DeclarationEmitter.prototype.InterfaceDeclarationCallback = function (pre, interfaceDecl) {
            if(!this.canEmitPrePostAstSignature(TypeScript.ToDeclFlags(interfaceDecl.varFlags), interfaceDecl, pre)) {
                return false;
            }
            if(pre) {
                var interfaceName = interfaceDecl.name.text;
                this.emitDeclFlags(TypeScript.ToDeclFlags(interfaceDecl.varFlags), "interface");
                this.declFile.Write(interfaceName);
                this.emitBaseList(interfaceDecl.extendsList, "extends");
                this.declFile.WriteLine(" {");
                this.indenter.increaseIndent();
                this.pushDeclarationContainer(interfaceDecl);
            } else {
                this.indenter.decreaseIndent();
                this.popDeclarationContainer(interfaceDecl);
                this.emitIndent();
                this.declFile.WriteLine("}");
            }
            return true;
        };
        DeclarationEmitter.prototype.ImportDeclarationCallback = function (pre, importDecl) {
            if(pre && this.canEmitSignature(TypeScript.ToDeclFlags(importDecl.varFlags))) {
                this.emitDeclFlags(TypeScript.ToDeclFlags(importDecl.varFlags), "import");
                this.declFile.Write(importDecl.id.text + " = ");
                if(importDecl.isDynamicImport) {
                    this.declFile.WriteLine("module (" + importDecl.getAliasName() + ");");
                } else {
                    this.declFile.WriteLine(importDecl.getAliasName() + ";");
                }
            }
            return false;
        };
        DeclarationEmitter.prototype.emitEnumSignature = function (moduleDecl) {
            if(!this.canEmitSignature(TypeScript.ToDeclFlags(moduleDecl.modFlags))) {
                return false;
            }
            this.emitDeclFlags(TypeScript.ToDeclFlags(moduleDecl.modFlags), "enum");
            this.declFile.WriteLine(moduleDecl.name.text + " {");
            this.indenter.increaseIndent();
            var membersLen = moduleDecl.members.members.length;
            for(var j = 1; j < membersLen; j++) {
                var memberDecl = moduleDecl.members.members[j];
                if(memberDecl.nodeType == 73 /* VarDecl */ ) {
                    this.emitIndent();
                    this.declFile.WriteLine((memberDecl).id.text + ",");
                } else {
                    TypeScript.CompilerDiagnostics.assert(memberDecl.nodeType != 30 /* Asg */ , "We want to catch this");
                }
            }
            this.indenter.decreaseIndent();
            this.emitIndent();
            this.declFile.WriteLine("}");
            return false;
        };
        DeclarationEmitter.prototype.ModuleDeclarationCallback = function (pre, moduleDecl) {
            if(TypeScript.hasFlag(moduleDecl.modFlags, 1024 /* IsWholeFile */ )) {
                if(TypeScript.hasFlag(moduleDecl.modFlags, 2048 /* IsDynamic */ )) {
                    if(pre) {
                        if(!this.emitOptions.outputMany) {
                            this.singleDeclFile = this.declFile;
                            TypeScript.CompilerDiagnostics.assert(this.indenter.indentAmt == 0, "Indent has to be 0 when outputing new file");
                            var declareFileName = TypeScript.getDeclareFilePath(TypeScript.stripQuotes(moduleDecl.name.sym.name));
                            this.declFile = this.emitOptions.createFile(declareFileName);
                        }
                        this.pushDeclarationContainer(moduleDecl);
                    } else {
                        if(!this.emitOptions.outputMany) {
                            TypeScript.CompilerDiagnostics.assert(this.singleDeclFile != this.declFile, "singleDeclFile cannot be null as we are going to revert back to it");
                            TypeScript.CompilerDiagnostics.assert(this.indenter.indentAmt == 0, "Indent has to be 0 when outputing new file");
                            this.declFile.Close();
                            this.declFile = this.singleDeclFile;
                        }
                        this.popDeclarationContainer(moduleDecl);
                    }
                }
                return true;
            }
            if(moduleDecl.isEnum()) {
                if(pre) {
                    this.emitEnumSignature(moduleDecl);
                }
                return false;
            }
            if(!this.canEmitPrePostAstSignature(TypeScript.ToDeclFlags(moduleDecl.modFlags), moduleDecl, pre)) {
                return false;
            }
            if(pre) {
                if(this.emitDottedModuleName()) {
                    this.declFile.Write(".");
                } else {
                    this.emitDeclFlags(TypeScript.ToDeclFlags(moduleDecl.modFlags), "module");
                }
                this.declFile.Write(moduleDecl.name.text);
                var isCurrentModuleDotted = (moduleDecl.members.members.length == 1 && moduleDecl.members.members[0].nodeType == 96 /* ModuleDeclaration */  && !(moduleDecl.members.members[0]).isEnum() && TypeScript.hasFlag((moduleDecl.members.members[0]).modFlags, 1 /* Exported */ ));
                this.isDottedModuleName.push(isCurrentModuleDotted);
                this.pushDeclarationContainer(moduleDecl);
                if(!isCurrentModuleDotted) {
                    this.declFile.WriteLine(" {");
                    this.indenter.increaseIndent();
                }
            } else {
                if(!this.emitDottedModuleName()) {
                    this.indenter.decreaseIndent();
                    this.emitIndent();
                    this.declFile.WriteLine("}");
                }
                this.popDeclarationContainer(moduleDecl);
                this.isDottedModuleName.pop();
            }
            return true;
        };
        DeclarationEmitter.prototype.ScriptCallback = function (pre, script) {
            if(pre) {
                if(this.emitOptions.outputMany) {
                    for(var i = 0; i < script.referencedFiles.length; i++) {
                        var declareFileName = TypeScript.getDeclareFilePath(script.referencedFiles[i].path);
                        this.declFile.WriteLine('/// <reference path="' + declareFileName + '" />');
                    }
                }
                this.pushDeclarationContainer(script);
            } else {
                this.popDeclarationContainer(script);
            }
            return true;
        };
        DeclarationEmitter.prototype.DefaultCallback = function (pre, ast) {
            return !TypeScript.hasFlag(ast.flags, 64 /* IsStatement */ );
        };
        return DeclarationEmitter;
    })();
    TypeScript.DeclarationEmitter = DeclarationEmitter;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (UpdateUnitKind) {
        UpdateUnitKind._map = [];
        UpdateUnitKind._map[0] = "Unknown";
        UpdateUnitKind.Unknown = 0;
        UpdateUnitKind._map[1] = "NoEdits";
        UpdateUnitKind.NoEdits = 1;
        UpdateUnitKind._map[2] = "EditsInsideSingleScope";
        UpdateUnitKind.EditsInsideSingleScope = 2;
    })(TypeScript.UpdateUnitKind || (TypeScript.UpdateUnitKind = {}));
    var UpdateUnitKind = TypeScript.UpdateUnitKind;
    var ScriptEditRange = (function () {
        function ScriptEditRange(minChar, limChar, delta) {
            this.minChar = minChar;
            this.limChar = limChar;
            this.delta = delta;
        }
        ScriptEditRange.unknown = function unknown() {
            return new ScriptEditRange(-1, -1, -1);
        }
        ScriptEditRange.prototype.isUnknown = function () {
            return this.minChar === -1 && this.limChar === -1 && this.delta === -1;
        };
        ScriptEditRange.prototype.containsPosition = function (pos) {
            return (this.minChar <= pos && pos < this.limChar) || (this.minChar <= pos && pos < this.limChar + this.delta);
        };
        ScriptEditRange.prototype.toString = function () {
            return "editRange(minChar=" + this.minChar + ", limChar=" + this.limChar + ", delta=" + this.delta + ")";
        };
        return ScriptEditRange;
    })();
    TypeScript.ScriptEditRange = ScriptEditRange;    
    var UpdateUnitResult = (function () {
        function UpdateUnitResult(kind, unitIndex, script1, script2) {
            this.kind = kind;
            this.unitIndex = unitIndex;
            this.script1 = script1;
            this.script2 = script2;
            this.scope1 = null;
            this.scope2 = null;
            this.editRange = null;
            this.parseErrors = [];
        }
        UpdateUnitResult.noEdits = function noEdits(unitIndex) {
            return new UpdateUnitResult(1 /* NoEdits */ , unitIndex, null, null);
        }
        UpdateUnitResult.unknownEdits = function unknownEdits(script1, script2, parseErrors) {
            var result = new UpdateUnitResult(0 /* Unknown */ , script1.locationInfo.unitIndex, script1, script2);
            result.parseErrors = parseErrors;
            return result;
        }
        UpdateUnitResult.singleScopeEdits = function singleScopeEdits(script1, script2, scope1, scope2, editRange, parseErrors) {
            var result = new UpdateUnitResult(2 /* EditsInsideSingleScope */ , script1.locationInfo.unitIndex, script1, script2);
            result.scope1 = scope1;
            result.scope2 = scope2;
            result.editRange = editRange;
            result.parseErrors = parseErrors;
            return result;
        }
        return UpdateUnitResult;
    })();
    TypeScript.UpdateUnitResult = UpdateUnitResult;    
    var ErrorEntry = (function () {
        function ErrorEntry(unitIndex, minChar, limChar, message) {
            this.unitIndex = unitIndex;
            this.minChar = minChar;
            this.limChar = limChar;
            this.message = message;
        }
        return ErrorEntry;
    })();
    TypeScript.ErrorEntry = ErrorEntry;    
    TypeScript.defaultSettings = new TypeScript.CompilationSettings();
    var TypeScriptCompiler = (function () {
        function TypeScriptCompiler(errorOutput, logger, settings) {
            if (typeof logger === "undefined") { logger = new TypeScript.NullLogger(); }
            if (typeof settings === "undefined") { settings = TypeScript.defaultSettings; }
            this.errorOutput = errorOutput;
            this.logger = logger;
            this.settings = settings;
            this.parser = new TypeScript.Parser();
            this.typeFlow = null;
            this.scripts = new TypeScript.ASTList();
            this.units = new Array();
            this.errorReporter = new TypeScript.ErrorReporter(this.errorOutput);
            this.persistentTypeState = new TypeScript.PersistentGlobalTypeState(this.errorReporter);
            this.errorReporter.parser = this.parser;
            this.initTypeChecker(this.errorOutput);
            this.parser.style_requireSemi = this.settings.styleSettings.requireSemi;
            this.parser.style_funcInLoop = this.settings.styleSettings.funcInLoop;
            this.parser.inferPropertiesFromThisAssignment = this.settings.inferPropertiesFromThisAssignment;
            this.emitSettings = {
                minWhitespace: this.settings.minWhitespace,
                propagateConstants: this.settings.propagateConstants,
                emitComments: this.settings.emitComments,
                path: this.settings.outputFileName,
                createFile: null,
                outputMany: this.settings.outputMany
            };
            TypeScript.codeGenTarget = settings.codeGenTarget;
        }
        TypeScriptCompiler.prototype.timeFunction = function (funcDescription, func) {
            return TypeScript.timeFunction(this.logger, funcDescription, func);
        };
        TypeScriptCompiler.prototype.initTypeChecker = function (errorOutput) {
            this.persistentTypeState.refreshPersistentState();
            this.typeChecker = new TypeScript.TypeChecker(this.persistentTypeState);
            this.typeChecker.errorReporter = this.errorReporter;
            this.typeChecker.checkControlFlow = this.settings.controlFlow;
            this.typeChecker.checkControlFlowUseDef = this.settings.controlFlowUseDef;
            this.typeChecker.printControlFlowGraph = this.settings.printControlFlow;
            this.typeChecker.errorsOnWith = this.settings.errorOnWith;
            this.typeChecker.styleSettings = this.settings.styleSettings;
            this.typeChecker.canCallDefinitionSignature = this.settings.canCallDefinitionSignature;
            this.errorReporter.checker = this.typeChecker;
            this.setErrorOutput(this.errorOutput);
        };
        TypeScriptCompiler.prototype.setErrorOutput = function (outerr) {
            this.errorOutput = outerr;
            this.errorReporter.setErrOut(outerr);
            this.parser.outfile = outerr;
        };
        TypeScriptCompiler.prototype.emitCommentsToOutput = function () {
            this.emitSettings = {
                minWhitespace: this.settings.minWhitespace,
                propagateConstants: this.settings.propagateConstants,
                emitComments: this.settings.emitComments,
                path: this.settings.outputFileName,
                createFile: null,
                outputMany: this.settings.outputMany
            };
        };
        TypeScriptCompiler.prototype.setErrorCallback = function (fn) {
            this.parser.errorCallback = fn;
        };
        TypeScriptCompiler.prototype.updateUnit = function (prog, filename, setRecovery) {
            return this.updateSourceUnit(new TypeScript.StringSourceText(prog), filename, setRecovery);
        };
        TypeScriptCompiler.prototype.updateSourceUnit = function (sourceText, filename, setRecovery) {
            var _this = this;
            return this.timeFunction("updateSourceUnit(" + filename + ")", function () {
                var updateResult = _this.partialUpdateUnit(sourceText, filename, setRecovery);
                return _this.applyUpdateResult(updateResult);
            });
        };
        TypeScriptCompiler.prototype.applyUpdateResult = function (updateResult) {
            switch(updateResult.kind) {
                case 1 /* NoEdits */ : {
                    return false;

                }
                case 0 /* Unknown */ : {
                    this.scripts.members[updateResult.unitIndex] = updateResult.script2;
                    this.units[updateResult.unitIndex] = updateResult.script2.locationInfo;
                    for(var i = 0, len = updateResult.parseErrors.length; i < len; i++) {
                        var e = updateResult.parseErrors[i];
                        if(this.parser.errorCallback) {
                            this.parser.errorCallback(e.minChar, e.limChar - e.minChar, e.message, e.unitIndex);
                        }
                    }
                    return true;

                }
                case 2 /* EditsInsideSingleScope */ : {
                    new TypeScript.IncrementalParser(this.logger).mergeTrees(updateResult);
                    return true;

                }
            }
        };
        TypeScriptCompiler.prototype.partialUpdateUnit = function (sourceText, filename, setRecovery) {
            var _this = this;
            return this.timeFunction("partialUpdateUnit(" + filename + ")", function () {
                for(var i = 0, len = _this.units.length; i < len; i++) {
                    if(_this.units[i].filename == filename) {
                        if((_this.scripts.members[i]).isResident) {
                            return UpdateUnitResult.noEdits(i);
                        }
                        if(setRecovery) {
                            _this.parser.setErrorRecovery(null);
                        }
                        var updateResult;
                        var parseErrors = [];
                        var errorCapture = function (minChar, charLen, message, unitIndex) {
                            parseErrors.push(new ErrorEntry(unitIndex, minChar, minChar + charLen, message));
                        };
                        var svErrorCallback = _this.parser.errorCallback;
                        if(svErrorCallback) {
                            _this.parser.errorCallback = errorCapture;
                        }
                        var oldScript = _this.scripts.members[i];
                        var newScript = _this.parser.parse(sourceText, filename, i);
                        if(svErrorCallback) {
                            _this.parser.errorCallback = svErrorCallback;
                        }
                        updateResult = UpdateUnitResult.unknownEdits(oldScript, newScript, parseErrors);
                        return updateResult;
                    }
                }
                throw new Error("Unknown file \"" + filename + "\"");
            });
        };
        TypeScriptCompiler.prototype.addUnit = function (prog, filename, keepResident, referencedFiles) {
            if (typeof keepResident === "undefined") { keepResident = false; }
            if (typeof referencedFiles === "undefined") { referencedFiles = []; }
            return this.addSourceUnit(new TypeScript.StringSourceText(prog), filename, keepResident, referencedFiles);
        };
        TypeScriptCompiler.prototype.addSourceUnit = function (sourceText, filename, keepResident, referencedFiles) {
            if (typeof referencedFiles === "undefined") { referencedFiles = []; }
            var _this = this;
            return this.timeFunction("addSourceUnit(" + filename + ", " + keepResident + ")", function () {
                var script = _this.parser.parse(sourceText, filename, _this.units.length, TypeScript.AllowedElements.Global);
                script.referencedFiles = referencedFiles;
                script.isResident = keepResident;
                _this.persistentTypeState.setCollectionMode(keepResident ? 0 /* Resident */  : 1 /* Transient */ );
                var index = _this.units.length;
                _this.units[index] = script.locationInfo;
                _this.typeChecker.collectTypes(script);
                _this.scripts.append(script);
                return script;
            });
        };
        TypeScriptCompiler.prototype.parseUnit = function (prog, filename) {
            return this.parseSourceUnit(new TypeScript.StringSourceText(prog), filename);
        };
        TypeScriptCompiler.prototype.parseSourceUnit = function (sourceText, filename) {
            this.parser.setErrorRecovery(this.errorOutput);
            var script = this.parser.parse(sourceText, filename, 0);
            var index = this.units.length;
            this.units[index] = script.locationInfo;
            this.typeChecker.collectTypes(script);
            this.scripts.append(script);
        };
        TypeScriptCompiler.prototype.typeCheck = function () {
            var _this = this;
            return this.timeFunction("typeCheck()", function () {
                var binder = new TypeScript.Binder(_this.typeChecker);
                _this.typeChecker.units = _this.units;
                binder.bind(_this.typeChecker.globalScope, _this.typeChecker.globals);
                binder.bind(_this.typeChecker.globalScope, _this.typeChecker.ambientGlobals);
                binder.bind(_this.typeChecker.globalScope, _this.typeChecker.globalTypes);
                binder.bind(_this.typeChecker.globalScope, _this.typeChecker.ambientGlobalTypes);
                _this.typeFlow = new TypeScript.TypeFlow(_this.logger, _this.typeChecker.globalScope, _this.parser, _this.typeChecker);
                var i = 0;
                var script = null;
                var len = _this.scripts.members.length;
                _this.persistentTypeState.setCollectionMode(0 /* Resident */ );
                for(i = 0; i < len; i++) {
                    script = _this.scripts.members[i];
                    if(!script.isResident || script.hasBeenTypeChecked) {
                        continue;
                    }
                    _this.typeFlow.assignScopes(script);
                    _this.typeFlow.initLibs();
                }
                for(i = 0; i < len; i++) {
                    script = _this.scripts.members[i];
                    if(!script.isResident || script.hasBeenTypeChecked) {
                        continue;
                    }
                    _this.typeFlow.typeCheck(script);
                    script.hasBeenTypeChecked = true;
                }
                _this.persistentTypeState.setCollectionMode(1 /* Transient */ );
                len = _this.scripts.members.length;
                for(i = 0; i < len; i++) {
                    script = _this.scripts.members[i];
                    if(script.isResident) {
                        continue;
                    }
                    _this.typeFlow.assignScopes(script);
                    _this.typeFlow.initLibs();
                }
                for(i = 0; i < len; i++) {
                    script = _this.scripts.members[i];
                    if(script.isResident) {
                        continue;
                    }
                    _this.typeFlow.typeCheck(script);
                }
                return null;
            });
        };
        TypeScriptCompiler.prototype.cleanASTTypesForReTypeCheck = function (ast) {
            function cleanASTType(ast, parent) {
                ast.type = null;
                if(ast.nodeType == 73 /* VarDecl */ ) {
                    var vardecl = ast;
                    vardecl.sym = null;
                } else {
                    if(ast.nodeType == 74 /* ArgDecl */ ) {
                        var argdecl = ast;
                        argdecl.sym = null;
                    } else {
                        if(ast.nodeType == 25 /* Name */ ) {
                            var name = ast;
                            name.sym = null;
                        } else {
                            if(ast.nodeType == 71 /* FuncDecl */ ) {
                                var funcdecl = ast;
                                funcdecl.signature = null;
                                funcdecl.freeVariables = new Array();
                                funcdecl.symbols = null;
                                funcdecl.accessorSymbol = null;
                                funcdecl.scopeType = null;
                            } else {
                                if(ast.nodeType == 96 /* ModuleDeclaration */ ) {
                                    var modDecl = ast;
                                    modDecl.mod = null;
                                } else {
                                    if(ast.nodeType == 98 /* With */ ) {
                                        (ast).withSym = null;
                                    } else {
                                        if(ast.nodeType == 91 /* Catch */ ) {
                                            (ast).containedScope = null;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return ast;
            }
            TypeScript.getAstWalkerFactory().walk(ast, cleanASTType);
        };
        TypeScriptCompiler.prototype.cleanTypesForReTypeCheck = function () {
            var _this = this;
            return this.timeFunction("cleanTypesForReTypeCheck()", function () {
                for(var i = 0, len = _this.scripts.members.length; i < len; i++) {
                    var script = _this.scripts.members[i];
                    if((script).isResident) {
                        continue;
                    }
                    _this.cleanASTTypesForReTypeCheck(script);
                    _this.typeChecker.collectTypes(script);
                }
                return null;
            });
        };
        TypeScriptCompiler.prototype.attemptIncrementalTypeCheck = function (updateResult) {
            return this.timeFunction("attemptIncrementalTypeCheck()", function () {
                return false;
            });
        };
        TypeScriptCompiler.prototype.reTypeCheck = function () {
            var _this = this;
            return this.timeFunction("reTypeCheck()", function () {
                TypeScript.CompilerDiagnostics.analysisPass++;
                _this.initTypeChecker(_this.errorOutput);
                _this.persistentTypeState.setCollectionMode(1 /* Transient */ );
                _this.cleanTypesForReTypeCheck();
                return _this.typeCheck();
            });
        };
        TypeScriptCompiler.prototype.emitDeclarationFile = function (createFile) {
            if(!this.settings.generateDeclarationFiles) {
                return;
            }
            if(this.errorReporter.hasErrors) {
                return;
            }
            var declarationEmitter = new TypeScript.DeclarationEmitter(this.typeChecker, this.emitSettings);
            var declareFile = null;
            for(var i = 0, len = this.scripts.members.length; i < len; i++) {
                var script = this.scripts.members[i];
                if(script.isDeclareFile || script.isResident || script.bod == null) {
                    continue;
                }
                if(this.emitSettings.outputMany) {
                    var fname = this.units[i].filename;
                    var declareFileName = TypeScript.getDeclareFilePath(fname);
                    declareFile = createFile(declareFileName, this.outputScriptToUTF8(script));
                    declarationEmitter.setDeclarationFile(declareFile);
                } else {
                    if(declareFile == null) {
                        var outfname = TypeScript.getDeclareFilePath(this.settings.outputFileName);
                        declareFile = createFile(outfname, this.outputScriptsToUTF8((this.scripts.members)));
                        declarationEmitter.setDeclarationFile(declareFile);
                    }
                }
                declarationEmitter.emitDeclarations(script);
                if(this.emitSettings.outputMany) {
                    declareFile.Close();
                }
            }
            if(!this.emitSettings.outputMany && declareFile) {
                declareFile.Close();
            }
        };
        TypeScriptCompiler.prototype.emit = function (createFile) {
            var emitter = null;
            this.emitSettings.createFile = createFile;
            var outFile = null;
            for(var i = 0, len = this.scripts.members.length; i < len; i++) {
                var script = this.scripts.members[i];
                if(!script.emitRequired()) {
                    continue;
                }
                if(this.emitSettings.outputMany) {
                    var fname = this.units[i].filename;
                    var splitFname = fname.split(".");
                    splitFname.pop();
                    var baseName = splitFname.join(".");
                    var outFname = baseName + ".js";
                    this.emitSettings.path = outFname;
                    var useUTF8ForOutputFile = this.outputScriptToUTF8(script);
                    outFile = createFile(outFname, useUTF8ForOutputFile);
                    emitter = new TypeScript.Emitter(this.typeChecker, outFile, this.emitSettings);
                    if(this.settings.mapSourceFiles) {
                        emitter.setSourceMappings(new TypeScript.SourceMapper(fname, outFname, outFile, createFile(outFname + TypeScript.SourceMapper.MapFileExtension)));
                    }
                } else {
                    if(emitter == null) {
                        var useUTF8ForOutputFile = this.outputScriptsToUTF8((this.scripts.members));
                        outFile = createFile(this.settings.outputFileName, useUTF8ForOutputFile);
                        emitter = new TypeScript.Emitter(this.typeChecker, outFile, this.emitSettings);
                        if(this.settings.mapSourceFiles) {
                            emitter.setSourceMappings(new TypeScript.SourceMapper(script.locationInfo.filename, this.settings.outputFileName, outFile, createFile(this.settings.outputFileName + TypeScript.SourceMapper.MapFileExtension)));
                        }
                    } else {
                        if(this.settings.mapSourceFiles) {
                            emitter.setSourceMappings(new TypeScript.SourceMapper(script.locationInfo.filename, this.settings.outputFileName, outFile, emitter.sourceMapper.sourceMapOut));
                        }
                    }
                }
                this.typeChecker.locationInfo = script.locationInfo;
                emitter.emitJavascript(script, 61 /* Comma */ , false);
                if(this.emitSettings.outputMany) {
                    if(this.settings.mapSourceFiles) {
                        emitter.emitSourceMappings();
                    }
                    outFile.Close();
                }
            }
            if(!this.emitSettings.outputMany) {
                if(this.settings.mapSourceFiles) {
                    emitter.emitSourceMappings();
                }
                outFile.Close();
            }
        };
        TypeScriptCompiler.prototype.emitToOutfile = function (outFile) {
            var emitter = null;
            if(this.settings.mapSourceFiles) {
                throw Error("Cannot generate source map");
            }
            if(this.settings.generateDeclarationFiles) {
                throw Error("Cannot generate declaration files");
            }
            for(var i = 0, len = this.scripts.members.length; i < len; i++) {
                if(emitter == null) {
                    emitter = new TypeScript.Emitter(this.typeChecker, outFile, this.emitSettings);
                }
                var script = this.scripts.members[i];
                this.typeChecker.locationInfo = script.locationInfo;
                emitter.emitJavascript(script, 61 /* Comma */ , false);
            }
        };
        TypeScriptCompiler.prototype.emitAST = function (outputMany, createFile) {
            var outFile = null;
            var context = null;
            for(var i = 0, len = this.scripts.members.length; i < len; i++) {
                var script = this.scripts.members[i];
                if(outputMany) {
                    var fname = this.units[i].filename;
                    var splitFname = fname.split(".");
                    splitFname.pop();
                    var baseName = splitFname.join(".");
                    var outFname = baseName + ".txt";
                    this.emitSettings.path = outFname;
                    outFile = createFile(outFname, this.outputScriptToUTF8(script));
                    context = new TypeScript.PrintContext(outFile, this.parser);
                } else {
                    if(context == null) {
                        outFile = createFile(this.settings.outputFileName, this.outputScriptsToUTF8((this.scripts.members)));
                        context = new TypeScript.PrintContext(outFile, this.parser);
                    }
                }
                TypeScript.getAstWalkerFactory().walk(script, TypeScript.prePrintAST, TypeScript.postPrintAST, null, context);
                if(outputMany) {
                    outFile.Close();
                }
            }
            if(!outputMany) {
                outFile.Close();
            }
        };
        TypeScriptCompiler.prototype.outputScriptToUTF8 = function (script) {
            return script.containsUnicodeChar || (this.emitSettings.emitComments && script.containsUnicodeCharInComment);
        };
        TypeScriptCompiler.prototype.outputScriptsToUTF8 = function (scripts) {
            for(var i = 0, len = scripts.length; i < len; i++) {
                var script = scripts[i];
                if(this.outputScriptToUTF8(script)) {
                    return true;
                }
            }
            return false;
        };
        return TypeScriptCompiler;
    })();
    TypeScript.TypeScriptCompiler = TypeScriptCompiler;    
    var ScopeEntry = (function () {
        function ScopeEntry(name, type, sym) {
            this.name = name;
            this.type = type;
            this.sym = sym;
        }
        return ScopeEntry;
    })();
    TypeScript.ScopeEntry = ScopeEntry;    
    var ScopeTraversal = (function () {
        function ScopeTraversal(compiler) {
            this.compiler = compiler;
        }
        ScopeTraversal.prototype.getScope = function (enclosingScopeContext) {
            if(enclosingScopeContext.enclosingObjectLit && enclosingScopeContext.isMemberCompletion) {
                return enclosingScopeContext.getObjectLiteralScope();
            } else {
                if(enclosingScopeContext.isMemberCompletion) {
                    if(enclosingScopeContext.useFullAst) {
                        return this.compiler.typeFlow.findMemberScopeAtFullAst(enclosingScopeContext);
                    } else {
                        return this.compiler.typeFlow.findMemberScopeAt(enclosingScopeContext);
                    }
                } else {
                    return enclosingScopeContext.getScope();
                }
            }
        };
        ScopeTraversal.prototype.getScopeEntries = function (enclosingScopeContext) {
            var scope = this.getScope(enclosingScopeContext);
            if(scope == null) {
                return [];
            }
            var inScopeNames = new TypeScript.StringHashTable();
            var allSymbolNames = scope.getAllSymbolNames(enclosingScopeContext.isMemberCompletion);
            for(var i = 0; i < allSymbolNames.length; i++) {
                var name = allSymbolNames[i];
                if(name == TypeScript.globalId || name == "_Core" || name == "_element") {
                    continue;
                }
                inScopeNames.add(name, "");
            }
            var svModuleDecl = this.compiler.typeChecker.currentModDecl;
            this.compiler.typeChecker.currentModDecl = enclosingScopeContext.deepestModuleDecl;
            var result = this.getTypeNamesForNames(enclosingScopeContext, inScopeNames.getAllKeys(), scope);
            this.compiler.typeChecker.currentModDecl = svModuleDecl;
            return result;
        };
        ScopeTraversal.prototype.getTypeNamesForNames = function (enclosingScopeContext, allNames, scope) {
            var result = [];
            var enclosingScope = enclosingScopeContext.getScope();
            for(var i = 0; i < allNames.length; i++) {
                var name = allNames[i];
                var publicsOnly = enclosingScopeContext.publicsOnly && enclosingScopeContext.isMemberCompletion;
                var symbol = scope.find(name, publicsOnly, false);
                if(symbol == null) {
                    symbol = scope.find(name, publicsOnly, true);
                }
                var displayThisMember = symbol && symbol.flags & 2 /* Private */  ? symbol.container == scope.container : true;
                if(symbol) {
                    if(displayThisMember && !TypeScript.isQuoted(symbol.name) && !TypeScript.isRelative(symbol.name)) {
                        var typeName = symbol.getType().getScopedTypeName(enclosingScope);
                        result.push(new ScopeEntry(name, typeName, symbol));
                    }
                } else {
                    if(name == "true" || name == "false") {
                        result.push(new ScopeEntry(name, "bool", this.compiler.typeChecker.booleanType.symbol));
                    }
                }
            }
            return result;
        };
        return ScopeTraversal;
    })();
    TypeScript.ScopeTraversal = ScopeTraversal;    
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (TypeContext) {
        TypeContext._map = [];
        TypeContext.NoTypes = 0;
        TypeContext.ArraySuffix = 1;
        TypeContext.Primitive = 2;
        TypeContext.Named = 4;
        TypeContext.AllSimpleTypes = TypeContext.Primitive | TypeContext.Named;
        TypeContext.AllTypes = TypeContext.Primitive | TypeContext.Named | TypeContext.ArraySuffix;
    })(TypeScript.TypeContext || (TypeScript.TypeContext = {}));
    var TypeContext = TypeScript.TypeContext;
    (function (ParseState) {
        ParseState._map = [];
        ParseState._map[0] = "None";
        ParseState.None = 0;
        ParseState._map[1] = "StartScript";
        ParseState.StartScript = 1;
        ParseState._map[2] = "StartStatementList";
        ParseState.StartStatementList = 2;
        ParseState._map[3] = "StartStatement";
        ParseState.StartStatement = 3;
        ParseState._map[4] = "StartFncDecl";
        ParseState.StartFncDecl = 4;
        ParseState._map[5] = "FncDeclName";
        ParseState.FncDeclName = 5;
        ParseState._map[6] = "FncDeclArgs";
        ParseState.FncDeclArgs = 6;
        ParseState._map[7] = "FncDeclReturnType";
        ParseState.FncDeclReturnType = 7;
        ParseState._map[8] = "ForInit";
        ParseState.ForInit = 8;
        ParseState._map[9] = "ForInitAfterVar";
        ParseState.ForInitAfterVar = 9;
        ParseState._map[10] = "ForCondStart";
        ParseState.ForCondStart = 10;
        ParseState._map[11] = "EndStmtList";
        ParseState.EndStmtList = 11;
        ParseState._map[12] = "EndScript";
        ParseState.EndScript = 12;
    })(TypeScript.ParseState || (TypeScript.ParseState = {}));
    var ParseState = TypeScript.ParseState;
    var QuickParseResult = (function () {
        function QuickParseResult(Script, endLexState) {
            this.Script = Script;
            this.endLexState = endLexState;
        }
        return QuickParseResult;
    })();
    TypeScript.QuickParseResult = QuickParseResult;    
    var Parser = (function () {
        function Parser() {
            this.varLists = [];
            this.scopeLists = [];
            this.staticsLists = [];
            this.scanner = new TypeScript.Scanner();
            this.currentToken = null;
            this.needTerminator = false;
            this.inFunction = false;
            this.inInterfaceDecl = false;
            this.currentClassDecl = null;
            this.inFncDecl = false;
            this.anonId = new TypeScript.Identifier("_anonymous");
            this.style_requireSemi = false;
            this.style_funcInLoop = true;
            this.incremental = false;
            this.errorRecovery = false;
            this.outfile = undefined;
            this.errorCallback = null;
            this.state = 2 /* StartStatementList */ ;
            this.ambientModule = false;
            this.ambientClass = false;
            this.topLevel = true;
            this.currentUnitIndex = (-1);
            this.prevIDTok = null;
            this.statementInfoStack = new Array();
            this.hasTopLevelImportOrExport = false;
            this.strictMode = false;
            this.nestingLevel = 0;
            this.prevExpr = null;
            this.currentClassDefinition = null;
            this.parsingClassConstructorDefinition = false;
            this.parsingDeclareFile = false;
            this.amdDependencies = [];
            this.inferPropertiesFromThisAssignment = false;
            this.fname = "";
        }
        Parser.prototype.resetStmtStack = function () {
            this.statementInfoStack = new Array();
        };
        Parser.prototype.inLoop = function () {
            for(var j = this.statementInfoStack.length - 1; j >= 0; j--) {
                if(this.statementInfoStack[j].stmt.isLoop()) {
                    return true;
                }
            }
            return false;
        };
        Parser.prototype.pushStmt = function (stmt, labels) {
            var info = {
                stmt: stmt,
                labels: labels
            };
            this.statementInfoStack.push(info);
        };
        Parser.prototype.popStmt = function () {
            return this.statementInfoStack.pop();
        };
        Parser.prototype.resolveJumpTarget = function (jump) {
            var resolvedTarget = TypeScript.AST.getResolvedIdentifierName(jump.target);
            var len = this.statementInfoStack.length;
            for(var i = len - 1; i >= 0; i--) {
                var info = this.statementInfoStack[i];
                if(jump.target) {
                    if(info.labels && (info.labels.members.length > 0)) {
                        for(var j = 0, labLen = info.labels.members.length; j < labLen; j++) {
                            var label = info.labels.members[j];
                            if(label.id.text == resolvedTarget) {
                                jump.setResolvedTarget(this, info.stmt);
                                return;
                            }
                        }
                    }
                } else {
                    if(info.stmt.isLoop()) {
                        jump.setResolvedTarget(this, info.stmt);
                        return;
                    } else {
                        if((info.stmt.nodeType == 86 /* Switch */ ) && (jump.nodeType == 76 /* Break */ )) {
                            jump.setResolvedTarget(this, info.stmt);
                            return;
                        }
                    }
                }
            }
            if(jump.target) {
                this.reportParseError("could not find enclosing statement with label " + jump.target);
            } else {
                if(jump.nodeType == 76 /* Break */ ) {
                    this.reportParseError("break statement requires enclosing loop or switch");
                } else {
                    this.reportParseError("continue statement requires enclosing loop");
                }
            }
        };
        Parser.prototype.setErrorRecovery = function (outfile) {
            this.outfile = outfile;
            this.errorRecovery = true;
        };
        Parser.prototype.getSourceLineCol = function (lineCol, minChar) {
            TypeScript.getSourceLineColFromMap(lineCol, minChar, this.scanner.lineMap);
        };
        Parser.prototype.createRef = function (text, hasEscapeSequence, minChar) {
            var id = new TypeScript.Identifier(text, hasEscapeSequence);
            id.minChar = minChar;
            return id;
        };
        Parser.prototype.reportParseStyleError = function (message) {
            this.reportParseError("STYLE: " + message);
        };
        Parser.prototype.reportParseError = function (message, startPos, pos) {
            if (typeof startPos === "undefined") { startPos = this.scanner.startPos; }
            if (typeof pos === "undefined") { pos = this.scanner.pos; }
            var len = Math.max(1, pos - startPos);
            if(this.errorCallback) {
                this.errorCallback(startPos, len, message, this.currentUnitIndex);
            } else {
                if(this.errorRecovery) {
                    var lineCol = {
                        line: -1,
                        col: -1
                    };
                    this.getSourceLineCol(lineCol, startPos);
                    if(this.outfile) {
                        this.outfile.WriteLine("// " + this.fname + " (" + lineCol.line + "," + lineCol.col + "): " + message);
                    }
                } else {
                    throw new SyntaxError(this.fname + " (" + this.scanner.line + "," + this.scanner.col + "): " + message);
                }
            }
        };
        Parser.prototype.checkNextToken = function (tokenId, errorRecoverySet, errorText) {
            if (typeof errorText === "undefined") { errorText = null; }
            this.currentToken = this.scanner.scan();
            this.checkCurrentToken(tokenId, errorRecoverySet, errorText);
        };
        Parser.prototype.skip = function (errorRecoverySet) {
            errorRecoverySet |= 536870912 /* EOF */ ;
            var ersTok = 0 /* None */ ;
            var tokenInfo = TypeScript.lookupToken(this.currentToken.tokenId);
            if(tokenInfo != undefined) {
                ersTok = tokenInfo.ers;
            }
            var pendingRightCurlies = 0;
            while(((ersTok & errorRecoverySet) == 0 /* None */ ) || (this.currentToken.tokenId == 60 /* CloseBrace */ ) && (pendingRightCurlies > 0)) {
                if(this.currentToken.tokenId == 59 /* OpenBrace */ ) {
                    pendingRightCurlies++;
                } else {
                    if(this.currentToken.tokenId == 60 /* CloseBrace */ ) {
                        pendingRightCurlies--;
                    }
                }
                this.currentToken = this.scanner.scan();
                ersTok = 0 /* None */ ;
                tokenInfo = TypeScript.lookupToken(this.currentToken.tokenId);
                if(tokenInfo != undefined) {
                    ersTok = tokenInfo.ers;
                }
            }
        };
        Parser.prototype.checkCurrentToken = function (tokenId, errorRecoverySet, errorText) {
            if (typeof errorText === "undefined") { errorText = null; }
            if(this.currentToken.tokenId != tokenId) {
                errorText = errorText == null ? ("Expected '" + TypeScript.tokenTable[tokenId].text + "'") : errorText;
                this.reportParseError(errorText);
                if(this.errorRecovery) {
                    this.skip(errorRecoverySet);
                }
            } else {
                this.currentToken = this.scanner.scan();
            }
        };
        Parser.prototype.pushDeclLists = function () {
            this.staticsLists.push(new TypeScript.ASTList());
            this.varLists.push(new TypeScript.ASTList());
            this.scopeLists.push(new TypeScript.ASTList());
        };
        Parser.prototype.popDeclLists = function () {
            this.staticsLists.pop();
            this.varLists.pop();
            this.scopeLists.pop();
        };
        Parser.prototype.topVarList = function () {
            return this.varLists[this.varLists.length - 1];
        };
        Parser.prototype.topScopeList = function () {
            return this.scopeLists[this.scopeLists.length - 1];
        };
        Parser.prototype.topStaticsList = function () {
            return this.staticsLists[this.staticsLists.length - 1];
        };
        Parser.prototype.parseComment = function (comment) {
            if(comment) {
                var c = new TypeScript.Comment(comment.value, comment.isBlock, comment.endsLine);
                c.minChar = comment.startPos;
                c.limChar = comment.startPos + comment.value.length;
                if(!comment.isBlock && comment.value.length > 3 && comment.value.substring(0, 3) == "///") {
                    var dependencyPath = TypeScript.getAdditionalDependencyPath(comment.value);
                    if(dependencyPath) {
                        this.amdDependencies.push(dependencyPath);
                    }
                    if(TypeScript.getImplicitImport(comment.value)) {
                        this.hasTopLevelImportOrExport = true;
                    }
                }
                return c;
            } else {
                return null;
            }
        };
        Parser.prototype.parseCommentsInner = function (comments) {
            if(comments) {
                var commentASTs = new Array();
                for(var i = 0; i < comments.length; i++) {
                    commentASTs.push(this.parseComment(comments[i]));
                }
                return commentASTs;
            } else {
                return null;
            }
        };
        Parser.prototype.parseComments = function () {
            var comments = this.scanner.getComments();
            return this.parseCommentsInner(comments);
        };
        Parser.prototype.parseCommentsForLine = function (line) {
            var comments = this.scanner.getCommentsForLine(line);
            return this.parseCommentsInner(comments);
        };
        Parser.prototype.combineComments = function (comment1, comment2) {
            if(comment1 == null) {
                return comment2;
            } else {
                if(comment2 == null) {
                    return comment1;
                } else {
                    return comment1.concat(comment2);
                }
            }
        };
        Parser.prototype.parseEnumDecl = function (errorRecoverySet, modifiers) {
            var leftCurlyCount = this.scanner.leftCurlyCount;
            var rightCurlyCount = this.scanner.rightCurlyCount;
            var name = null;
            if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                name = TypeScript.Identifier.fromToken(this.currentToken);
                name.minChar = this.scanner.startPos;
                name.limChar = this.scanner.pos;
                this.currentToken = this.scanner.scan();
            } else {
                this.reportParseError("Enum declaration requires identifier");
                if(this.errorRecovery) {
                    name = new TypeScript.MissingIdentifier();
                    name.minChar = this.scanner.startPos;
                    name.limChar = this.scanner.startPos;
                    name.flags |= 8 /* Error */ ;
                }
            }
            var membersMinChar = this.scanner.startPos;
            this.checkCurrentToken(59 /* OpenBrace */ , errorRecoverySet | 16777216 /* ID */ );
            this.pushDeclLists();
            var members = new TypeScript.ASTList();
            members.minChar = membersMinChar;
            var mapDecl = new TypeScript.VarDecl(new TypeScript.Identifier("_map"), 0);
            mapDecl.varFlags |= 1 /* Exported */ ;
            mapDecl.varFlags |= 2 /* Private */ ;
            mapDecl.varFlags |= (512 /* Property */  | 4 /* Public */ );
            mapDecl.init = new TypeScript.UnaryExpression(10 /* ArrayLit */ , null);
            members.append(mapDecl);
            var lastValue = null;
            for(; ; ) {
                var minChar = this.scanner.startPos;
                var limChar;
                var memberName = null;
                var memberValue = null;
                var preComments = null;
                var postComments = null;
                if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToIDName(this.currentToken)) {
                    memberName = TypeScript.Identifier.fromToken(this.currentToken);
                    memberName.minChar = this.scanner.startPos;
                    memberName.limChar = this.scanner.pos;
                } else {
                    if(this.currentToken.tokenId == 60 /* CloseBrace */ ) {
                        break;
                    } else {
                        this.reportParseError("Expected identifer of enum member");
                        if(this.errorRecovery) {
                            memberName = new TypeScript.MissingIdentifier();
                            memberName.minChar = this.scanner.startPos;
                            memberName.limChar = this.scanner.startPos;
                            memberName.flags |= 8 /* Error */ ;
                        }
                    }
                }
                limChar = this.scanner.pos;
                preComments = this.parseComments();
                this.currentToken = this.scanner.scan();
                postComments = this.parseComments();
                if(this.currentToken.tokenId == 62 /* Equals */ ) {
                    this.currentToken = this.scanner.scan();
                    memberValue = this.parseExpr(errorRecoverySet, 1 /* Comma */ , true, 0 /* NoTypes */ );
                    lastValue = memberValue;
                    limChar = memberValue.limChar;
                } else {
                    if(lastValue == null) {
                        memberValue = new TypeScript.NumberLiteral(0);
                        lastValue = memberValue;
                    } else {
                        memberValue = new TypeScript.NumberLiteral(lastValue.value + 1);
                        lastValue = memberValue;
                    }
                    var map = new TypeScript.BinaryExpression(30 /* Asg */ , new TypeScript.BinaryExpression(27 /* Index */ , new TypeScript.Identifier("_map"), memberValue), new TypeScript.StringLiteral('"' + memberName.actualText + '"'));
                    members.append(map);
                }
                var member = new TypeScript.VarDecl(memberName, this.nestingLevel);
                member.minChar = minChar;
                member.limChar = limChar;
                member.init = memberValue;
                member.typeExpr = new TypeScript.TypeReference(this.createRef(name.actualText, name.hasEscapeSequence, -1), 0);
                member.varFlags |= (1024 /* Readonly */  | 512 /* Property */ );
                if(memberValue.nodeType == 24 /* NumberLit */ ) {
                    member.varFlags |= 65536 /* Constant */ ;
                }
                if(memberValue.nodeType === 61 /* Lsh */ ) {
                    var binop = memberValue;
                    if(binop.operand1.nodeType === 24 /* NumberLit */  && binop.operand2.nodeType === 24 /* NumberLit */ ) {
                        member.varFlags |= 65536 /* Constant */ ;
                    }
                }
                member.preComments = preComments;
                members.append(member);
                member.postComments = postComments;
                member.varFlags |= 1 /* Exported */ ;
                if(this.currentToken.tokenId == 61 /* Comma */ ) {
                    this.currentToken = this.scanner.scan();
                    member.postComments = this.combineComments(member.postComments, this.parseCommentsForLine(this.scanner.prevLine));
                    if((this.currentToken.tokenId == 106 /* Identifier */ ) || (TypeScript.convertTokToIDName(this.currentToken))) {
                        continue;
                    }
                }
                break;
            }
            var endingToken = new TypeScript.ASTSpan();
            endingToken.minChar = this.scanner.startPos;
            endingToken.limChar = this.scanner.pos;
            this.checkCurrentToken(60 /* CloseBrace */ , errorRecoverySet);
            members.limChar = this.scanner.lastTokenLimChar();
            var modDecl = new TypeScript.ModuleDeclaration(name, members, this.topVarList(), this.topScopeList(), endingToken);
            modDecl.modFlags |= 256 /* IsEnum */ ;
            this.popDeclLists();
            modDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;
            modDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;
            return modDecl;
        };
        Parser.prototype.parseDottedName = function (enclosedList) {
            this.currentToken = this.scanner.scan();
            if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                var id = TypeScript.Identifier.fromToken(this.currentToken);
                id.preComments = this.parseComments();
                enclosedList[enclosedList.length] = id;
                id.minChar = this.scanner.startPos;
                id.limChar = this.scanner.pos;
                this.currentToken = this.scanner.scan();
                if(this.currentToken.tokenId == 101 /* Dot */ ) {
                    this.parseDottedName(enclosedList);
                }
            } else {
                this.reportParseError("need identifier after '.'");
            }
        };
        Parser.prototype.isValidImportPath = function (importPath) {
            importPath = TypeScript.stripQuotes(importPath);
            if(!importPath || importPath.indexOf(':') != -1 || importPath.indexOf('\\') != -1 || importPath.charAt(0) == '/') {
                return false;
            }
            return true;
        };
        Parser.prototype.parseImportDeclaration = function (errorRecoverySet, modifiers) {
            var name = null;
            var alias = null;
            var importDecl = null;
            var minChar = this.scanner.startPos;
            var isDynamicImport = false;
            this.currentToken = this.scanner.scan();
            if(this.currentToken.tokenId == 106 /* Identifier */  || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                name = TypeScript.Identifier.fromToken(this.currentToken);
            } else {
                this.reportParseError("Expected identifer after 'import'");
                name = new TypeScript.MissingIdentifier();
            }
            name.minChar = this.scanner.startPos;
            name.limChar = this.scanner.pos;
            this.currentToken = this.scanner.scan();
            this.checkCurrentToken(62 /* Equals */ , errorRecoverySet | 16777216 /* ID */ );
            var aliasPreComments = this.parseComments();
            var limChar;
            if(this.currentToken.tokenId == 106 /* Identifier */  || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                if(this.currentToken.tokenId == 30 /* Module */ ) {
                    limChar = this.scanner.pos;
                    this.currentToken = this.scanner.scan();
                    if(this.currentToken.tokenId == 55 /* OpenParen */ ) {
                        this.currentToken = this.scanner.scan();
                        if(this.currentToken.tokenId == 107 /* StringLiteral */  || this.currentToken.tokenId == 106 /* Identifier */  || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                            if(this.currentToken.tokenId == 107 /* StringLiteral */ ) {
                                if(this.topLevel) {
                                    this.hasTopLevelImportOrExport = true;
                                }
                                var aliasText = this.currentToken.getText();
                                alias = TypeScript.Identifier.fromToken(this.currentToken);
                                alias.minChar = this.scanner.startPos;
                                alias.limChar = this.scanner.pos;
                                if(!this.isValidImportPath((alias).text)) {
                                    this.reportParseError("Invalid import path");
                                }
                                isDynamicImport = true;
                                this.currentToken = this.scanner.scan();
                                alias.preComments = aliasPreComments;
                            } else {
                                alias = this.parseExpr(errorRecoverySet | 2 /* SColon */ , 2 /* Assignment */ , true, 0 /* NoTypes */ );
                                alias.preComments = aliasPreComments;
                            }
                        }
                        limChar = this.scanner.pos;
                        this.checkCurrentToken(56 /* CloseParen */ , errorRecoverySet | 16777216 /* ID */ );
                        if(alias) {
                            alias.postComments = this.parseComments();
                        }
                    }
                } else {
                    alias = this.parseExpr(errorRecoverySet | 2 /* SColon */ , 2 /* Assignment */ , true, 0 /* NoTypes */ );
                    limChar = this.scanner.pos;
                }
            } else {
                this.reportParseError("Expected module name");
                alias = new TypeScript.MissingIdentifier();
                alias.minChar = this.scanner.startPos;
                if(this.currentToken.tokenId == 54 /* Semicolon */ ) {
                    alias.limChar = this.scanner.startPos;
                } else {
                    alias.limChar = this.scanner.pos;
                    this.currentToken = this.scanner.scan();
                }
                alias.flags |= 8 /* Error */ ;
                limChar = alias.limChar;
            }
            importDecl = new TypeScript.ImportDeclaration(name, alias);
            importDecl.isDynamicImport = isDynamicImport;
            if(TypeScript.hasFlag(modifiers, 16 /* Exported */ )) {
                importDecl.varFlags |= 1 /* Exported */ ;
            }
            importDecl.minChar = minChar;
            importDecl.limChar = limChar;
            return importDecl;
        };
        Parser.prototype.parseModuleDecl = function (errorRecoverySet, modifiers) {
            var leftCurlyCount = this.scanner.leftCurlyCount;
            var rightCurlyCount = this.scanner.rightCurlyCount;
            var svAmbient = this.ambientModule;
            var svTopLevel = this.topLevel;
            this.topLevel = false;
            if(this.parsingDeclareFile || TypeScript.hasFlag(modifiers, 8 /* Ambient */ )) {
                this.ambientModule = true;
            }
            this.currentToken = this.scanner.scan();
            var name = null;
            var enclosedList = null;
            this.pushDeclLists();
            var modulePreComments = this.parseComments();
            var minChar = this.scanner.startPos;
            var isDynamicMod = false;
            if((this.currentToken.tokenId == 106 /* Identifier */ ) || (this.currentToken.tokenId == 107 /* StringLiteral */ ) || (!TypeScript.isPrimitiveTypeToken(this.currentToken) && TypeScript.convertTokToID(this.currentToken, this.strictMode))) {
                var nameText = this.currentToken.getText();
                if(this.currentToken.tokenId == 107 /* StringLiteral */ ) {
                    isDynamicMod = true;
                    if(!this.ambientModule) {
                        this.reportParseError("Only ambient dynamic modules may have string literal names");
                    }
                }
                name = TypeScript.Identifier.fromToken(this.currentToken);
                name.minChar = this.scanner.startPos;
                name.limChar = this.scanner.pos;
                this.currentToken = this.scanner.scan();
            } else {
                if(this.currentToken.tokenId == 59 /* OpenBrace */ ) {
                    this.reportParseError("Module name missing");
                    name = new TypeScript.Identifier("");
                    name.minChar = minChar;
                    name.limChar = minChar;
                }
            }
            if(this.currentToken.tokenId == 101 /* Dot */ ) {
                enclosedList = new Array();
                this.parseDottedName(enclosedList);
            }
            if(name == null) {
                name = new TypeScript.MissingIdentifier();
            }
            var moduleBody = new TypeScript.ASTList();
            var bodyMinChar = this.scanner.startPos;
            this.checkCurrentToken(59 /* OpenBrace */ , errorRecoverySet | 16777216 /* ID */ );
            this.parseStatementList(errorRecoverySet | 32 /* RCurly */ , moduleBody, true, true, TypeScript.AllowedElements.Global, modifiers);
            moduleBody.minChar = bodyMinChar;
            moduleBody.limChar = this.scanner.pos;
            var endingToken = new TypeScript.ASTSpan();
            endingToken.minChar = this.scanner.startPos;
            endingToken.limChar = this.scanner.pos;
            this.checkCurrentToken(60 /* CloseBrace */ , errorRecoverySet);
            var limChar = this.scanner.lastTokenLimChar();
            var moduleDecl;
            if(enclosedList && (enclosedList.length > 0)) {
                var len = enclosedList.length;
                var innerName = enclosedList[len - 1];
                var innerDecl = new TypeScript.ModuleDeclaration(innerName, moduleBody, this.topVarList(), this.topScopeList(), endingToken);
                if(this.parsingDeclareFile || TypeScript.hasFlag(modifiers, 8 /* Ambient */ )) {
                    innerDecl.modFlags |= 8 /* Ambient */ ;
                }
                innerDecl.modFlags |= 1 /* Exported */ ;
                innerDecl.minChar = minChar;
                innerDecl.limChar = limChar;
                this.popDeclLists();
                var outerModBod;
                for(var i = len - 2; i >= 0; i--) {
                    outerModBod = new TypeScript.ASTList();
                    outerModBod.append(innerDecl);
                    innerName = enclosedList[i];
                    innerDecl = new TypeScript.ModuleDeclaration(innerName, outerModBod, new TypeScript.ASTList(), new TypeScript.ASTList(), endingToken);
                    outerModBod.minChar = innerDecl.minChar = minChar;
                    outerModBod.limChar = innerDecl.limChar = limChar;
                    if(this.parsingDeclareFile || TypeScript.hasFlag(modifiers, 8 /* Ambient */ )) {
                        innerDecl.modFlags |= 8 /* Ambient */ ;
                    }
                    innerDecl.modFlags |= 1 /* Exported */ ;
                }
                outerModBod = new TypeScript.ASTList();
                outerModBod.append(innerDecl);
                outerModBod.minChar = minChar;
                outerModBod.limChar = limChar;
                moduleDecl = new TypeScript.ModuleDeclaration(name, outerModBod, new TypeScript.ASTList(), new TypeScript.ASTList(), endingToken);
            } else {
                moduleDecl = new TypeScript.ModuleDeclaration(name, moduleBody, this.topVarList(), this.topScopeList(), endingToken);
                this.popDeclLists();
            }
            if(this.parsingDeclareFile || TypeScript.hasFlag(modifiers, 8 /* Ambient */ )) {
                moduleDecl.modFlags |= 8 /* Ambient */ ;
            }
            if(this.parsingDeclareFile || svAmbient || TypeScript.hasFlag(modifiers, 16 /* Exported */ )) {
                moduleDecl.modFlags |= 1 /* Exported */ ;
            }
            if(isDynamicMod) {
                moduleDecl.modFlags |= 2048 /* IsDynamic */ ;
            }
            moduleDecl.preComments = modulePreComments;
            moduleDecl.postComments = this.parseComments();
            this.ambientModule = svAmbient;
            this.topLevel = svTopLevel;
            moduleDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;
            moduleDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;
            moduleDecl.limChar = moduleBody.limChar;
            return moduleDecl;
        };
        Parser.prototype.parseTypeReferenceTail = function (errorRecoverySet, minChar, term) {
            var result = new TypeScript.TypeReference(term, 0);
            result.minChar = minChar;
            while(this.currentToken.tokenId == 57 /* OpenBracket */ ) {
                this.currentToken = this.scanner.scan();
                result.arrayCount++;
                this.checkCurrentToken(58 /* CloseBracket */ , errorRecoverySet | 32768 /* LBrack */ );
            }
            result.limChar = this.scanner.lastTokenLimChar();
            return result;
        };
        Parser.prototype.parseNamedType = function (errorRecoverySet, minChar, term, tail) {
            this.currentToken = this.scanner.scan();
            if(this.currentToken.tokenId == 101 /* Dot */ ) {
                var curpos = this.scanner.pos;
                this.currentToken = this.scanner.scan();
                if((this.currentToken.tokenId == 106 /* Identifier */ ) || ((!this.errorRecovery || !this.scanner.lastTokenHadNewline()) && TypeScript.convertTokToID(this.currentToken, this.strictMode))) {
                    var op2 = TypeScript.Identifier.fromToken(this.currentToken);
                    op2.minChar = this.scanner.startPos;
                    op2.limChar = this.scanner.pos;
                    var dotNode = new TypeScript.BinaryExpression(19 /* Dot */ , term, op2);
                    dotNode.minChar = term.minChar;
                    dotNode.limChar = op2.limChar;
                    return this.parseNamedType(errorRecoverySet, minChar, dotNode, tail);
                } else {
                    this.reportParseError("need identifier after '.'");
                    if(this.errorRecovery) {
                        term.flags |= 32 /* DotLHS */ ;
                        term.limChar = this.scanner.lastTokenLimChar();
                        return term;
                    } else {
                        var eop2 = new TypeScript.MissingIdentifier();
                        eop2.minChar = this.scanner.pos;
                        eop2.limChar = this.scanner.pos;
                        var edotNode = new TypeScript.BinaryExpression(19 /* Dot */ , term, eop2);
                        edotNode.flags |= 8 /* Error */ ;
                        edotNode.minChar = term.minChar;
                        edotNode.limChar = eop2.limChar;
                        return this.parseNamedType(errorRecoverySet, minChar, edotNode, tail);
                    }
                }
            } else {
                if(tail) {
                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, term);
                } else {
                    return term;
                }
            }
        };
        Parser.prototype.parseTypeReference = function (errorRecoverySet, allowVoid) {
            var minChar = this.scanner.startPos;
            var isConstructorMember = false;
            switch(this.currentToken.tokenId) {
                case 50 /* Void */ : {
                    if(!allowVoid) {
                        this.reportParseError("void not a valid type in this context");
                    }

                }
                case 0 /* Any */ :
                case 32 /* Number */ :
                case 1 /* Bool */ :
                case 41 /* String */ : {
                    var text = TypeScript.tokenTable[this.currentToken.tokenId].text;
                    var predefinedIdentifier = new TypeScript.Identifier(text);
                    predefinedIdentifier.minChar = minChar;
                    predefinedIdentifier.limChar = this.scanner.pos;
                    this.currentToken = this.scanner.scan();
                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, predefinedIdentifier);
                }

                case 106 /* Identifier */ : {
                    var ident = this.createRef(this.currentToken.getText(), (this.currentToken).hasEscapeSequence, minChar);
                    ident.limChar = this.scanner.pos;
                    return this.parseNamedType(errorRecoverySet, minChar, ident, true);

                }
                case 59 /* OpenBrace */ : {
                    return this.parseObjectType(minChar, errorRecoverySet);

                }
                case 31 /* New */ : {
                    this.currentToken = this.scanner.scan();
                    if(this.currentToken.tokenId != 55 /* OpenParen */ ) {
                        this.reportParseError("Expected '('");
                    } else {
                        isConstructorMember = true;
                    }

                }
                case 55 /* OpenParen */ : {
                    var formals = new TypeScript.ASTList();
                    var variableArgList = this.parseFormalParameterList(errorRecoverySet | 64 /* RParen */ , formals, false, true, false, false, false, false, null, true);
                    this.checkCurrentToken(105 /* EqualsGreaterThan */ , errorRecoverySet);
                    var returnType = this.parseTypeReference(errorRecoverySet, true);
                    var funcDecl = new TypeScript.FuncDecl(null, null, false, formals, null, null, null, 71 /* FuncDecl */ );
                    funcDecl.returnTypeAnnotation = returnType;
                    funcDecl.variableArgList = variableArgList;
                    funcDecl.fncFlags |= 512 /* Signature */ ;
                    if(isConstructorMember) {
                        funcDecl.fncFlags |= 8192 /* ConstructMember */ ;
                        funcDecl.hint = "_construct";
                        funcDecl.classDecl = null;
                    }
                    funcDecl.minChar = minChar;
                    return this.parseTypeReferenceTail(errorRecoverySet, minChar, funcDecl);
                }

                default: {
                    this.reportParseError("Expected type name");
                    var etr = new TypeScript.TypeReference(null, 0);
                    etr.flags |= 8 /* Error */ ;
                    etr.minChar = this.scanner.pos;
                    etr.limChar = this.scanner.pos;
                    return etr;

                }
            }
        };
        Parser.prototype.parseObjectType = function (minChar, errorRecoverySet) {
            this.currentToken = this.scanner.scan();
            var members = new TypeScript.ASTList();
            members.minChar = minChar;
            var prevInInterfaceDecl = this.inInterfaceDecl;
            this.inInterfaceDecl = true;
            this.parseTypeMemberList(errorRecoverySet | 32 /* RCurly */ , members);
            this.inInterfaceDecl = prevInInterfaceDecl;
            this.checkCurrentToken(60 /* CloseBrace */ , errorRecoverySet);
            var interfaceDecl = new TypeScript.InterfaceDeclaration(this.anonId, members, null, null);
            interfaceDecl.minChar = minChar;
            interfaceDecl.limChar = members.limChar;
            return this.parseTypeReferenceTail(errorRecoverySet, minChar, interfaceDecl);
        };
        Parser.prototype.parseFunctionStatements = function (errorRecoverySet, name, isConstructor, isMethod, args, allowedElements, minChar, requiresSignature, parentModifiers) {
            this.pushDeclLists();
            var svStmtStack = this.statementInfoStack;
            this.resetStmtStack();
            var bod = null;
            var wasShorthand = false;
            var isAnonLambda = false;
            if(!requiresSignature) {
                bod = new TypeScript.ASTList();
                var bodMinChar = this.scanner.startPos;
                if(this.currentToken.tokenId == 105 /* EqualsGreaterThan */ ) {
                    if(isMethod) {
                        this.reportParseError("'=>' may not be used for class methods");
                    }
                    wasShorthand = true;
                    this.currentToken = this.scanner.scan();
                }
                if(wasShorthand && this.currentToken.tokenId != 59 /* OpenBrace */ ) {
                    var retExpr = this.parseExpr(errorRecoverySet | 2 /* SColon */ , 2 /* Assignment */ , true, 0 /* NoTypes */ );
                    var retStmt = new TypeScript.ReturnStatement();
                    retStmt.returnExpression = retExpr;
                    retStmt.minChar = retExpr.minChar;
                    retStmt.limChar = retExpr.limChar;
                    bod.minChar = bodMinChar;
                    bod.append(retStmt);
                } else {
                    this.state = 2 /* StartStatementList */ ;
                    this.checkCurrentToken(59 /* OpenBrace */ , errorRecoverySet | TypeScript.ErrorRecoverySet.StmtStart);
                    var savedInFunction = this.inFunction;
                    isAnonLambda = wasShorthand;
                    this.inFunction = true;
                    this.parseStatementList(errorRecoverySet | 32 /* RCurly */  | TypeScript.ErrorRecoverySet.StmtStart, bod, true, false, allowedElements, parentModifiers);
                    bod.minChar = bodMinChar;
                    bod.limChar = this.scanner.pos;
                    this.inFunction = savedInFunction;
                    var ec = new TypeScript.EndCode();
                    ec.minChar = bod.limChar;
                    ec.limChar = ec.minChar;
                    bod.append(ec);
                }
            }
            var funcDecl = new TypeScript.FuncDecl(name, bod, isConstructor, args, this.topVarList(), this.topScopeList(), this.topStaticsList(), 71 /* FuncDecl */ );
            this.popDeclLists();
            var scopeList = this.topScopeList();
            scopeList.append(funcDecl);
            var staticFuncDecl = false;
            var limChar = this.scanner.pos;
            if(requiresSignature) {
                this.checkCurrentToken(54 /* Semicolon */ , errorRecoverySet, this.currentToken.tokenId == 59 /* OpenBrace */  ? "Function declarations are not permitted within interfaces, ambient modules or classes" : "Expected ';'");
            } else {
                if(!wasShorthand || isAnonLambda) {
                    funcDecl.endingToken = new TypeScript.ASTSpan();
                    funcDecl.endingToken.minChar = this.scanner.startPos;
                    funcDecl.endingToken.limChar = this.scanner.pos;
                    this.checkCurrentToken(60 /* CloseBrace */ , errorRecoverySet);
                    if(isAnonLambda) {
                        funcDecl.fncFlags |= 32768 /* IsFatArrowFunction */ ;
                    }
                } else {
                    funcDecl.fncFlags |= 32768 /* IsFatArrowFunction */ ;
                    funcDecl.endingToken = new TypeScript.ASTSpan();
                    funcDecl.endingToken.minChar = bod.members[0].minChar;
                    funcDecl.endingToken.limChar = bod.members[0].limChar;
                }
            }
            funcDecl.minChar = minChar;
            funcDecl.limChar = limChar;
            if(!requiresSignature) {
                funcDecl.fncFlags |= 256 /* Definition */ ;
            }
            this.statementInfoStack = svStmtStack;
            return funcDecl;
        };
        Parser.prototype.transformAnonymousArgsIntoFormals = function (formals, argList) {
            var _this = this;
            var translateBinExOperand = function (operand) {
                if(operand.nodeType == 13 /* Comma */ ) {
                    return _this.transformAnonymousArgsIntoFormals(formals, operand);
                } else {
                    if(operand.nodeType == 25 /* Name */  || operand.nodeType == 30 /* Asg */ ) {
                        var opArg = operand.nodeType == 30 /* Asg */  ? (operand).operand1 : operand;
                        var arg = new TypeScript.ArgDecl(opArg);
                        arg.preComments = opArg.preComments;
                        arg.postComments = opArg.postComments;
                        arg.minChar = operand.minChar;
                        arg.limChar = operand.limChar;
                        if(TypeScript.hasFlag(opArg.flags, 256 /* PossibleOptionalParameter */ )) {
                            arg.isOptional = true;
                        }
                        if(operand.nodeType == 30 /* Asg */ ) {
                            arg.init = (operand).operand2;
                        }
                        formals.append(arg);
                        return arg.isOptional || arg.init;
                    } else {
                        _this.reportParseError("Invalid lambda argument");
                    }
                }
                return false;
            };
            if(argList) {
                if(argList.nodeType == 13 /* Comma */ ) {
                    var commaList = argList;
                    if(commaList.operand1.isParenthesized) {
                        this.reportParseError("Invalid lambda argument", commaList.operand1.minChar, commaList.operand1.limChar);
                    }
                    if(commaList.operand2.isParenthesized) {
                        this.reportParseError("Invalid lambda argument", commaList.operand2.minChar, commaList.operand2.limChar);
                    }
                    var isOptional = translateBinExOperand(commaList.operand1);
                    isOptional = translateBinExOperand(commaList.operand2) || isOptional;
                    return isOptional;
                } else {
                    return translateBinExOperand(argList);
                }
            }
        };
        Parser.prototype.parseFormalParameterList = function (errorRecoverySet, formals, isClassConstr, isSig, isIndexer, isGetter, isSetter, isLambda, preProcessedLambdaArgs, expectClosingRParen) {
            formals.minChar = this.scanner.startPos;
            if(isIndexer) {
                this.currentToken = this.scanner.scan();
            } else {
                if(!isLambda) {
                    this.checkCurrentToken(55 /* OpenParen */ , errorRecoverySet | 64 /* RParen */ );
                }
            }
            var sawEllipsis = false;
            var firstArg = true;
            var hasOptional = false;
            var haveFirstArgID = false;
            if(isLambda && preProcessedLambdaArgs && preProcessedLambdaArgs.nodeType != 2 /* EmptyExpr */ ) {
                hasOptional = this.transformAnonymousArgsIntoFormals(formals, preProcessedLambdaArgs);
                haveFirstArgID = true;
            }
            while(true) {
                var munchedArg = false;
                var argFlags = 0 /* None */ ;
                var argMinChar = this.scanner.startPos;
                if(this.inferPropertiesFromThisAssignment && this.currentToken.tokenId == 44 /* This */ ) {
                    if(!isClassConstr) {
                        this.reportParseError("Instance property declarations using 'this' may only be used in class constructors");
                    }
                    this.currentToken = this.scanner.scan();
                    argFlags |= (4 /* Public */  | 512 /* Property */ );
                    if(this.currentClassDefinition) {
                        this.currentClassDefinition.varFlags |= 32768 /* ClassSuperMustBeFirstCallInConstructor */ ;
                    }
                }
                if(this.currentToken.tokenId == 37 /* Public */ ) {
                    argFlags |= (4 /* Public */  | 512 /* Property */ );
                    if(this.currentClassDefinition) {
                        this.currentClassDefinition.varFlags |= 32768 /* ClassSuperMustBeFirstCallInConstructor */ ;
                    }
                } else {
                    if(this.currentToken.tokenId == 35 /* Private */ ) {
                        argFlags |= (2 /* Private */  | 512 /* Property */ );
                        if(this.currentClassDefinition) {
                            this.currentClassDefinition.varFlags |= 32768 /* ClassSuperMustBeFirstCallInConstructor */ ;
                        }
                    } else {
                        if(this.currentToken.tokenId == 40 /* Static */  && isClassConstr) {
                            this.reportParseError("Static properties can not be declared as parameter properties");
                            this.currentToken = this.scanner.scan();
                        }
                    }
                }
                if(argFlags != 0 /* None */ ) {
                    if(!isClassConstr) {
                        this.reportParseError("only constructor parameters can be properties");
                    }
                    this.currentToken = this.scanner.scan();
                    if(TypeScript.isModifier(this.currentToken)) {
                        this.reportParseError("Multiple modifiers may not be applied to parameters");
                        this.currentToken = this.scanner.scan();
                    }
                    if(this.inferPropertiesFromThisAssignment && this.currentToken.tokenId == 44 /* This */ ) {
                        if(!isClassConstr) {
                            this.reportParseError("Instance property declarations using 'this' may only be used in class constructors");
                        }
                        this.currentToken = this.scanner.scan();
                        this.currentToken = this.scanner.scan();
                    }
                } else {
                    if(this.currentToken.tokenId == 102 /* DotDotDot */ ) {
                        sawEllipsis = true;
                        this.currentToken = this.scanner.scan();
                        if(!(this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                            this.reportParseError("'...' parameters require both a parameter name and an array type annotation to be specified");
                            sawEllipsis = false;
                        }
                    }
                }
                var argId = null;
                if(!haveFirstArgID && (this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                    argId = TypeScript.Identifier.fromToken(this.currentToken);
                    argId.minChar = this.scanner.startPos;
                    argId.limChar = this.scanner.pos;
                }
                if(haveFirstArgID || argId) {
                    munchedArg = true;
                    var type = null;
                    var arg = null;
                    if(haveFirstArgID && formals.members.length) {
                        arg = formals.members[formals.members.length - 1];
                        if(arg.isOptional) {
                            hasOptional = true;
                        }
                    } else {
                        arg = new TypeScript.ArgDecl(argId);
                        if(isGetter) {
                            this.reportParseError("Property getters may not take any arguments");
                        }
                        if(isSetter && !firstArg) {
                            this.reportParseError("Property setters may only take one argument");
                        }
                        arg.minChar = argMinChar;
                        arg.preComments = this.parseComments();
                        this.currentToken = this.scanner.scan();
                    }
                    if(this.currentToken.tokenId == 74 /* Question */ ) {
                        arg.isOptional = true;
                        hasOptional = true;
                        this.currentToken = this.scanner.scan();
                    }
                    if(this.currentToken.tokenId == 75 /* Colon */ ) {
                        this.currentToken = this.scanner.scan();
                        type = this.parseTypeReference(errorRecoverySet, false);
                    }
                    if(this.currentToken.tokenId == 62 /* Equals */ ) {
                        if(isSig) {
                            this.reportParseError("Arguments in signatures may not have default values");
                        }
                        hasOptional = true;
                        this.currentToken = this.scanner.scan();
                        arg.init = this.parseExpr(1 /* Comma */  | errorRecoverySet, 1 /* Comma */ , false, 0 /* NoTypes */ );
                    }
                    if(hasOptional && !arg.isOptionalArg() && !sawEllipsis) {
                        this.reportParseError("Optional parameters may only be followed by other optional parameters");
                    }
                    if(sawEllipsis && arg.isOptionalArg()) {
                        this.reportParseError("Varargs may not be optional or have default parameters");
                    }
                    if(sawEllipsis && !type) {
                        this.reportParseError("'...' parameters require both a parameter name and an array type annotation to be specified");
                    }
                    arg.postComments = this.parseComments();
                    arg.typeExpr = type;
                    arg.limChar = this.scanner.lastTokenLimChar();
                    arg.varFlags |= argFlags;
                    if(!haveFirstArgID) {
                        formals.append(arg);
                    } else {
                        haveFirstArgID = false;
                    }
                }
                firstArg = false;
                if(this.currentToken.tokenId == 61 /* Comma */ ) {
                    if((munchedArg) && (!sawEllipsis)) {
                        this.currentToken = this.scanner.scan();
                        continue;
                    } else {
                        this.reportParseError("Unexpected ',' in argument list");
                        if(this.errorRecovery) {
                            this.currentToken = this.scanner.scan();
                            continue;
                        }
                    }
                } else {
                    break;
                }
            }
            if(isIndexer) {
                this.checkCurrentToken(58 /* CloseBracket */ , errorRecoverySet | 2048 /* LCurly */  | 2 /* SColon */ );
            } else {
                if(expectClosingRParen) {
                    this.checkCurrentToken(56 /* CloseParen */ , errorRecoverySet | 2048 /* LCurly */  | 2 /* SColon */ );
                }
            }
            formals.limChar = this.scanner.lastTokenLimChar();
            return sawEllipsis;
        };
        Parser.prototype.parseFncDecl = function (errorRecoverySet, isDecl, requiresSignature, isMethod, methodName, indexer, isStatic, markedAsAmbient, modifiers, lambdaArgContext, expectClosingRParen) {
            var leftCurlyCount = this.scanner.leftCurlyCount;
            var rightCurlyCount = this.scanner.rightCurlyCount;
            var prevInConstr = this.parsingClassConstructorDefinition;
            this.parsingClassConstructorDefinition = false;
            var name = null;
            var fnMin = this.scanner.startPos;
            var minChar = this.scanner.pos;
            var prevNestingLevel = this.nestingLevel;
            this.nestingLevel = 0;
            if((!this.style_funcInLoop) && this.inLoop()) {
                this.reportParseStyleError("function declaration in loop");
            }
            if(!isMethod && !isStatic && !indexer && !lambdaArgContext) {
                this.currentToken = this.scanner.scan();
                this.state = 4 /* StartFncDecl */ ;
                if((this.currentToken.tokenId != 106 /* Identifier */ ) && (!TypeScript.convertTokToID(this.currentToken, this.strictMode))) {
                    if(isDecl) {
                        this.reportParseError("Function declaration must include identifier");
                        this.nestingLevel = prevNestingLevel;
                        return new TypeScript.IncompleteAST(fnMin, this.scanner.pos);
                    }
                } else {
                    name = TypeScript.Identifier.fromToken(this.currentToken);
                    name.minChar = this.scanner.startPos;
                    name.limChar = this.scanner.pos;
                    this.currentToken = this.scanner.scan();
                }
            } else {
                if(methodName) {
                    name = methodName;
                }
            }
            this.state = 5 /* FncDeclName */ ;
            var args = new TypeScript.ASTList();
            var variableArgList = false;
            var isOverload = false;
            var isGetter = TypeScript.hasFlag(modifiers, 32 /* Getter */ );
            var isSetter = TypeScript.hasFlag(modifiers, 64 /* Setter */ );
            if((this.currentToken.tokenId == 55 /* OpenParen */ ) || (indexer && (this.currentToken.tokenId == 57 /* OpenBracket */ )) || (lambdaArgContext && (lambdaArgContext.preProcessedLambdaArgs || this.currentToken.tokenId == 102 /* DotDotDot */ ))) {
                variableArgList = this.parseFormalParameterList(errorRecoverySet, args, false, requiresSignature, indexer, isGetter, isSetter, !!lambdaArgContext, lambdaArgContext ? lambdaArgContext.preProcessedLambdaArgs : null, expectClosingRParen);
            }
            this.state = 6 /* FncDeclArgs */ ;
            var returnType = null;
            if(this.currentToken.tokenId == 75 /* Colon */ ) {
                this.currentToken = this.scanner.scan();
                if(TypeScript.hasFlag(modifiers, 64 /* Setter */ )) {
                    this.reportParseError("Property setters may not declare a return type");
                }
                returnType = this.parseTypeReference(errorRecoverySet, true);
            }
            if(indexer && args.members.length == 0) {
                this.reportParseError("Index signatures require a parameter type to be specified");
            }
            this.state = 7 /* FncDeclReturnType */ ;
            if(isDecl && !(this.parsingDeclareFile || markedAsAmbient) && (!isMethod || !(this.ambientModule || this.ambientClass || this.inInterfaceDecl)) && this.currentToken.tokenId == 54 /* Semicolon */ ) {
                isOverload = true;
                isDecl = false;
                requiresSignature = true;
            }
            var svInFncDecl = this.inFncDecl;
            this.inFncDecl = true;
            var funcDecl = this.parseFunctionStatements(errorRecoverySet | 32 /* RCurly */ , name, false, isMethod, args, 0 /* None */ , minChar, requiresSignature, 0 /* None */ );
            this.inFncDecl = svInFncDecl;
            funcDecl.variableArgList = variableArgList;
            funcDecl.isOverload = isOverload;
            if(!requiresSignature) {
                funcDecl.fncFlags |= 256 /* Definition */ ;
            }
            if(isStatic) {
                funcDecl.fncFlags |= 16 /* Static */ ;
            }
            if(requiresSignature) {
                funcDecl.fncFlags |= 512 /* Signature */ ;
            }
            if(indexer) {
                funcDecl.fncFlags |= 65536 /* IndexerMember */ ;
            }
            funcDecl.returnTypeAnnotation = returnType;
            if(isMethod) {
                funcDecl.fncFlags |= 1024 /* Method */ ;
                funcDecl.fncFlags |= 524288 /* ClassPropertyMethodExported */ ;
            }
            funcDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;
            funcDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;
            this.nestingLevel = prevNestingLevel;
            this.parsingClassConstructorDefinition = prevInConstr;
            return funcDecl;
        };
        Parser.prototype.convertToTypeReference = function (ast) {
            var result;
            switch(ast.nodeType) {
                case 26 /* TypeRef */ : {
                    return ast;

                }
                case 25 /* Name */ : {
                    result = new TypeScript.TypeReference(ast, 0);
                    result.minChar = ast.minChar;
                    result.limChar = ast.limChar;
                    return result;

                }
                case 27 /* Index */ : {
                    var expr = ast;
                    result = this.convertToTypeReference(expr.operand1);
                    if(result) {
                        result.arrayCount++;
                        result.minChar = expr.minChar;
                        result.limChar = expr.limChar;
                        return result;
                    } else {
                        var etr = new TypeScript.AST(104 /* Error */ );
                        return etr;
                    }
                }

            }
            return null;
        };
        Parser.prototype.parseArgList = function (errorRecoverySet) {
            var args = new TypeScript.ASTList();
            args.minChar = this.scanner.startPos;
            this.currentToken = this.scanner.scan();
            if(this.currentToken.tokenId !== 56 /* CloseParen */ ) {
                while(true) {
                    if(args.members.length > 65535) {
                        this.reportParseError("max number of args exceeded");
                        break;
                    }
                    var arg = this.parseExpr(1 /* Comma */  | errorRecoverySet, 1 /* Comma */ , false, 0 /* NoTypes */ );
                    args.append(arg);
                    if(this.currentToken.tokenId != 61 /* Comma */ ) {
                        break;
                    }
                    this.currentToken = this.scanner.scan();
                }
            }
            args.limChar = this.scanner.pos;
            return args;
        };
        Parser.prototype.parseBaseList = function (extendsList, implementsList, errorRecoverySet, interfaceOnly, isClass) {
            var keyword = true;
            var currentList = extendsList;
            for(; ; ) {
                if(keyword) {
                    if(this.currentToken.tokenId == 24 /* Implements */ ) {
                        if(interfaceOnly) {
                            this.reportParseError("interfaces can not implement other types");
                        }
                        currentList = implementsList;
                    }
                    this.currentToken = this.scanner.scan();
                    keyword = false;
                }
                var baseName = null;
                if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                    var minChar = this.scanner.startPos;
                    baseName = TypeScript.Identifier.fromToken(this.currentToken);
                    baseName.minChar = minChar;
                    baseName.limChar = this.scanner.pos;
                    baseName = this.parseNamedType(errorRecoverySet | 2048 /* LCurly */ , minChar, baseName, false);
                } else {
                    this.reportParseError("Expected base name");
                    if(this.errorRecovery) {
                        baseName = new TypeScript.MissingIdentifier();
                        baseName.minChar = this.scanner.pos;
                        baseName.limChar = this.scanner.pos;
                        baseName.flags |= 8 /* Error */ ;
                    }
                }
                if(this.currentToken.tokenId == 55 /* OpenParen */ ) {
                    if(isClass) {
                        this.reportParseError("Base classes may only be initialized via a 'super' call within the constructor body");
                    } else {
                        this.reportParseError("Interfaces may not be extended with a call expression");
                    }
                } else {
                    currentList.append(baseName);
                }
                if(!interfaceOnly && currentList == extendsList && extendsList.members.length > 1) {
                    this.reportParseError("A class may only extend one other class");
                }
                if(this.currentToken.tokenId == 61 /* Comma */ ) {
                    this.currentToken = this.scanner.scan();
                    continue;
                } else {
                    if((this.currentToken.tokenId == 15 /* Extends */ ) || (this.currentToken.tokenId == 24 /* Implements */ )) {
                        currentList = extendsList;
                        keyword = true;
                        continue;
                    }
                }
                break;
            }
        };
        Parser.prototype.parseClassDecl = function (errorRecoverySet, minChar, modifiers) {
            var leftCurlyCount = this.scanner.leftCurlyCount;
            var rightCurlyCount = this.scanner.rightCurlyCount;
            if((modifiers & 4 /* Readonly */ ) != 0 /* None */ ) {
                this.reportParseError("const modifier is implicit for class");
            }
            if(this.parsingDeclareFile || this.ambientModule) {
                modifiers |= 8 /* Ambient */ ;
                modifiers |= 16 /* Exported */ ;
            }
            var classIsMarkedAsAmbient = this.parsingDeclareFile || (modifiers & 8 /* Ambient */ ) != 0 /* None */ ;
            var svAmbientClass = this.ambientClass;
            this.ambientClass = classIsMarkedAsAmbient;
            this.currentToken = this.scanner.scan();
            var name = null;
            if((this.currentToken.tokenId == 106 /* Identifier */ ) || (!TypeScript.isPrimitiveTypeToken(this.currentToken) && TypeScript.convertTokToID(this.currentToken, this.strictMode))) {
                name = TypeScript.Identifier.fromToken(this.currentToken);
                name.minChar = this.scanner.startPos;
                name.limChar = this.scanner.pos;
                this.currentToken = this.scanner.scan();
            } else {
                this.reportParseError("class missing name");
                if(this.errorRecovery) {
                    name = new TypeScript.MissingIdentifier();
                    name.minChar = this.scanner.pos;
                    name.limChar = this.scanner.pos;
                    name.flags |= 8 /* Error */ ;
                }
            }
            var baseClass = null;
            var interfacesImplemented = null;
            var requiresSignature = false;
            if((this.currentToken.tokenId == 15 /* Extends */ ) || (this.currentToken.tokenId == 24 /* Implements */ )) {
                baseClass = new TypeScript.ASTList();
                interfacesImplemented = new TypeScript.ASTList();
                this.parseBaseList(baseClass, interfacesImplemented, errorRecoverySet, false, true);
            }
            var classDecl = new TypeScript.ClassDeclaration(name, new TypeScript.ASTList(), baseClass, interfacesImplemented);
            this.currentClassDefinition = classDecl;
            this.parseClassElements(classDecl, errorRecoverySet, modifiers);
            if(this.ambientModule || this.parsingDeclareFile || TypeScript.hasFlag(modifiers, 16 /* Exported */ )) {
                classDecl.varFlags |= 1 /* Exported */ ;
            }
            if(this.ambientModule || TypeScript.hasFlag(modifiers, 8 /* Ambient */ )) {
                classDecl.varFlags |= 8 /* Ambient */ ;
            }
            classDecl.varFlags |= 2048 /* Class */ ;
            this.ambientClass = svAmbientClass;
            classDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;
            classDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;
            return classDecl;
        };
        Parser.prototype.parseClassElements = function (classDecl, errorRecoverySet, parentModifiers) {
            var modifiers = parentModifiers;
            var resetModifiers = false;
            var membersMinChar = this.scanner.startPos;
            this.checkCurrentToken(59 /* OpenBrace */ , errorRecoverySet);
            this.nestingLevel++;
            var currentMemberMinChar = this.scanner.startPos;
            var wasGetOrSetId = false;
            while(!(this.currentToken.tokenId == 60 /* CloseBrace */  || this.currentToken.tokenId == 104 /* EndOfFile */ )) {
                var scanNext = true;
                var publicOrPrivateFlags = 2 /* Public */  | 1 /* Private */ ;
                if(this.currentToken.tokenId == 22 /* Get */ ) {
                    if(modifiers & 32 /* Getter */ ) {
                        this.reportParseError("Duplicate 'get' declaration in class body");
                    }
                    if(modifiers & 64 /* Setter */ ) {
                        this.reportParseError("Getter already marked as a setter");
                    }
                    modifiers |= 32 /* Getter */ ;
                } else {
                    if(this.currentToken.tokenId == 39 /* Set */ ) {
                        if(modifiers & 64 /* Setter */ ) {
                            this.reportParseError("Duplicate 'set' declaration in class body");
                        }
                        if(modifiers & 32 /* Getter */ ) {
                            this.reportParseError("Setter already marked as a getter");
                        }
                        modifiers |= 64 /* Setter */ ;
                    } else {
                        if(this.currentToken.tokenId == 35 /* Private */ ) {
                            if(modifiers & publicOrPrivateFlags) {
                                this.reportParseError("Multiple modifiers may not be applied to class members");
                            }
                            modifiers |= 1 /* Private */ ;
                        } else {
                            if(this.currentToken.tokenId == 37 /* Public */ ) {
                                if(modifiers & publicOrPrivateFlags) {
                                    this.reportParseError("Multiple modifiers may not be applied to class members");
                                }
                                modifiers |= 2 /* Public */ ;
                            } else {
                                if(this.currentToken.tokenId == 40 /* Static */ ) {
                                    if(modifiers & 128 /* Static */ ) {
                                        this.reportParseError("Multiple modifiers may not be applied to class members");
                                    }
                                    modifiers |= 128 /* Static */ ;
                                } else {
                                    if(this.currentToken.tokenId == 21 /* Constructor */ ) {
                                        if(modifiers != parentModifiers) {
                                            this.reportParseError("Constructors may not have modifiers");
                                        }
                                        this.parseClassConstructorDeclaration(currentMemberMinChar, errorRecoverySet, modifiers);
                                        scanNext = false;
                                        resetModifiers = true;
                                    } else {
                                        if(wasGetOrSetId || this.currentToken.tokenId == 106 /* Identifier */  || TypeScript.convertTokToIDName(this.currentToken)) {
                                            var idText = wasGetOrSetId ? ((modifiers & 32 /* Getter */ ) ? "get" : "set") : this.currentToken.getText();
                                            var id = wasGetOrSetId ? new TypeScript.Identifier(idText) : TypeScript.Identifier.fromToken(this.currentToken);
                                            id.minChar = this.scanner.startPos;
                                            id.limChar = this.scanner.pos;
                                            if(wasGetOrSetId) {
                                                modifiers = modifiers ^ ((modifiers & 32 /* Getter */ ) ? 32 /* Getter */  : 64 /* Setter */ );
                                                wasGetOrSetId = false;
                                            } else {
                                                this.currentToken = this.scanner.scan();
                                            }
                                            if(this.currentToken.tokenId == 55 /* OpenParen */ ) {
                                                this.parseClassMemberFunctionDeclaration(id, currentMemberMinChar, errorRecoverySet, modifiers);
                                                scanNext = false;
                                            } else {
                                                if(modifiers & 32 /* Getter */  || modifiers & 64 /* Setter */ ) {
                                                    this.reportParseError("Property accessors must be functions");
                                                }
                                                var varDecl = this.parseClassMemberVariableDeclaration(id, currentMemberMinChar, false, errorRecoverySet, modifiers);
                                                if(varDecl.init && varDecl.init.nodeType == 71 /* FuncDecl */ ) {
                                                    if(this.currentToken.tokenId == 60 /* CloseBrace */ ) {
                                                        scanNext = false;
                                                    }
                                                } else {
                                                    if(varDecl.init && varDecl.init.nodeType == 11 /* ObjectLit */  && this.currentToken.tokenId != 54 /* Semicolon */ ) {
                                                        scanNext = false;
                                                        varDecl.init.flags |= 2 /* AutomaticSemicolon */ ;
                                                    } else {
                                                        if(this.currentToken.tokenId != 54 /* Semicolon */ ) {
                                                            this.reportParseError("Expected ';'");
                                                            scanNext = false;
                                                        }
                                                    }
                                                }
                                            }
                                            resetModifiers = true;
                                        } else {
                                            if(this.currentToken.tokenId == 42 /* Super */ ) {
                                                this.reportParseError("Base class initializers must be the first statement in a class definition");
                                            } else {
                                                if(!wasGetOrSetId && ((modifiers & 32 /* Getter */ ) || (modifiers & 64 /* Setter */ )) && (this.currentToken.tokenId == 55 /* OpenParen */ ) || (this.currentToken.tokenId == 62 /* Equals */ )) {
                                                    wasGetOrSetId = true;
                                                    scanNext = false;
                                                } else {
                                                    if(this.currentToken.tokenId != 54 /* Semicolon */ ) {
                                                        this.reportParseError("Unexpected '" + this.currentToken.getText() + "' in class definition");
                                                        resetModifiers = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if(scanNext) {
                    this.currentToken = this.scanner.scan();
                }
                if(resetModifiers) {
                    modifiers = parentModifiers;
                    currentMemberMinChar = this.scanner.startPos;
                    resetModifiers = false;
                }
            }
            var membersLimChar = this.scanner.pos;
            if(this.currentToken.tokenId == 60 /* CloseBrace */ ) {
                classDecl.endingToken = new TypeScript.ASTSpan();
                classDecl.endingToken.minChar = this.scanner.startPos;
                classDecl.endingToken.limChar = this.scanner.pos;
                if(!this.currentClassDefinition.members.members.length) {
                    this.currentClassDefinition.preComments = this.parseComments();
                }
                this.currentToken = this.scanner.scan();
            }
            this.nestingLevel--;
            this.currentClassDefinition.members.minChar = membersMinChar;
            this.currentClassDefinition.members.limChar = membersLimChar;
            this.currentClassDefinition.limChar = membersLimChar;
            this.currentClassDefinition = null;
        };
        Parser.prototype.parseClassConstructorDeclaration = function (minChar, errorRecoverySet, modifiers) {
            this.parsingClassConstructorDefinition = true;
            var isAmbient = this.parsingDeclareFile || TypeScript.hasFlag(modifiers, 8 /* Ambient */ );
            var args = new TypeScript.ASTList();
            var variableArgList = false;
            var preComments = this.parseComments();
            this.currentToken = this.scanner.scan();
            if(this.currentToken.tokenId == 55 /* OpenParen */ ) {
                variableArgList = this.parseFormalParameterList(errorRecoverySet, args, true, isAmbient, false, false, false, false, null, true);
                if(args.members.length > 0) {
                    var lastArg = args.members[args.members.length - 1];
                }
            }
            var requiresSignature = isAmbient || this.currentToken.tokenId == 54 /* Semicolon */ ;
            if(requiresSignature) {
                for(var i = 0; i < args.members.length; i++) {
                    var arg = args.members[i];
                    if(TypeScript.hasFlag(arg.varFlags, 512 /* Property */ )) {
                        this.reportParseError("Overload or ambient signatures may not specify parameter properties", arg.minChar, arg.limChar);
                    }
                }
            }
            if(!requiresSignature) {
                this.currentClassDefinition.constructorNestingLevel = this.nestingLevel + 1;
            }
            var constructorFuncDecl = this.parseFunctionStatements(errorRecoverySet | 32 /* RCurly */ , this.currentClassDefinition.name, true, false, args, 2048 /* Properties */ , minChar, requiresSignature, modifiers);
            constructorFuncDecl.preComments = preComments;
            if(requiresSignature && !isAmbient) {
                constructorFuncDecl.isOverload = true;
            }
            constructorFuncDecl.variableArgList = variableArgList;
            this.currentClassDecl = null;
            constructorFuncDecl.returnTypeAnnotation = this.convertToTypeReference(this.currentClassDefinition.name);
            constructorFuncDecl.classDecl = this.currentClassDefinition;
            if(isAmbient) {
                constructorFuncDecl.fncFlags |= 8 /* Ambient */ ;
            }
            if(requiresSignature) {
                constructorFuncDecl.fncFlags |= 512 /* Signature */ ;
            }
            if(this.ambientModule || TypeScript.hasFlag(modifiers, 16 /* Exported */ )) {
                constructorFuncDecl.fncFlags |= 1 /* Exported */ ;
            }
            if(this.currentClassDefinition.constructorDecl) {
                if(!isAmbient && !this.currentClassDefinition.constructorDecl.isSignature() && !constructorFuncDecl.isSignature()) {
                    this.reportParseError("Duplicate constructor definition");
                }
            }
            if(isAmbient || !constructorFuncDecl.isSignature()) {
                this.currentClassDefinition.constructorDecl = constructorFuncDecl;
            }
            constructorFuncDecl.fncFlags |= 262144 /* ClassMethod */ ;
            this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = constructorFuncDecl;
            this.parsingClassConstructorDefinition = false;
            constructorFuncDecl.postComments = this.parseComments();
            return constructorFuncDecl;
        };
        Parser.prototype.parseClassMemberVariableDeclaration = function (text, minChar, isDeclaredInConstructor, errorRecoverySet, modifiers) {
            var varDecl = new TypeScript.VarDecl(text, this.nestingLevel);
            varDecl.minChar = minChar;
            var isStatic = false;
            varDecl.preComments = this.parseComments();
            if(this.currentToken.tokenId == 75 /* Colon */ ) {
                this.currentToken = this.scanner.scan();
                varDecl.typeExpr = this.parseTypeReference(errorRecoverySet | 4 /* Asg */  | 1 /* Comma */ , false);
            }
            if(this.currentToken.tokenId == 62 /* Equals */ ) {
                if(this.parsingDeclareFile || TypeScript.hasFlag(modifiers, 8 /* Ambient */ )) {
                    this.reportParseError("context does not permit variable initializer");
                    if(this.errorRecovery) {
                        this.skip(errorRecoverySet);
                        varDecl.flags |= 8 /* Error */ ;
                        varDecl.limChar = this.scanner.lastTokenLimChar();
                        return varDecl;
                    }
                }
                this.currentToken = this.scanner.scan();
                varDecl.init = this.parseExpr(1 /* Comma */  | errorRecoverySet, 1 /* Comma */ , true, 0 /* NoTypes */ );
                varDecl.limChar = varDecl.init.limChar;
                if(!(modifiers & 128 /* Static */ )) {
                    this.currentClassDefinition.varFlags |= 32768 /* ClassSuperMustBeFirstCallInConstructor */ ;
                }
            } else {
                varDecl.limChar = this.scanner.pos;
            }
            if(modifiers & 128 /* Static */ ) {
                varDecl.varFlags |= 16 /* Static */ ;
                isStatic = true;
            }
            if((modifiers & 1 /* Private */ ) != 0 /* None */ ) {
                varDecl.varFlags |= 2 /* Private */ ;
            } else {
                varDecl.varFlags |= 4 /* Public */ ;
            }
            varDecl.varFlags |= 512 /* Property */ ;
            if(isDeclaredInConstructor) {
                varDecl.varFlags |= 16384 /* ClassConstructorProperty */ ;
            }
            if(!isDeclaredInConstructor && !isStatic) {
                varDecl.varFlags |= 8192 /* ClassBodyProperty */ ;
            }
            this.currentClassDefinition.knownMemberNames[text.actualText] = true;
            if(!isDeclaredInConstructor) {
                this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = varDecl;
            }
            varDecl.postComments = this.parseComments();
            return varDecl;
        };
        Parser.prototype.parseClassMemberFunctionDeclaration = function (methodName, minChar, errorRecoverySet, modifiers) {
            var wasAccessorID = this.prevIDTok != null;
            var isAccessor = TypeScript.hasFlag(modifiers, 32 /* Getter */ ) || TypeScript.hasFlag(modifiers, 64 /* Setter */ );
            var isStatic = TypeScript.hasFlag(modifiers, 128 /* Static */ );
            var isAmbient = this.ambientModule || TypeScript.hasFlag(modifiers, 8 /* Ambient */ );
            errorRecoverySet |= 64 /* RParen */ ;
            var preComments = this.parseComments();
            if(isAccessor && (modifiers & 8 /* Ambient */ )) {
                this.reportParseError("Property accessors may not be declared in ambient classes");
            }
            var ast = this.parseFncDecl(errorRecoverySet, true, isAmbient, true, methodName, false, isStatic, isAmbient, modifiers, null, true);
            if(ast.nodeType == 104 /* Error */ ) {
                return ast;
            }
            var funcDecl = ast;
            funcDecl.preComments = preComments;
            funcDecl.minChar = minChar;
            if(funcDecl.bod !== null) {
                funcDecl.limChar = funcDecl.bod.limChar;
            }
            if(modifiers & 1 /* Private */ ) {
                funcDecl.fncFlags |= 2 /* Private */ ;
            } else {
                funcDecl.fncFlags |= 4 /* Public */ ;
            }
            if(isStatic) {
                funcDecl.fncFlags |= 16 /* Static */ ;
            }
            if(isAccessor) {
                if(TypeScript.hasFlag(modifiers, 32 /* Getter */ )) {
                    funcDecl.fncFlags |= 64 /* GetAccessor */ ;
                    funcDecl.hint = "get" + funcDecl.name.actualText;
                } else {
                    funcDecl.fncFlags |= 128 /* SetAccessor */ ;
                    funcDecl.hint = "set" + funcDecl.name.actualText;
                }
                funcDecl.fncFlags |= 131072 /* IsFunctionExpression */ ;
                if(TypeScript.codeGenTarget < 1 /* ES5 */ ) {
                    this.reportParseError("Property accessors are only available when targeting ES5 or greater", funcDecl.minChar, funcDecl.limChar);
                }
            }
            funcDecl.fncFlags |= 262144 /* ClassMethod */ ;
            this.currentClassDefinition.knownMemberNames[methodName.actualText] = true;
            this.currentClassDefinition.members.members[this.currentClassDefinition.members.members.length] = funcDecl;
            funcDecl.postComments = this.parseComments();
            return funcDecl;
        };
        Parser.prototype.parseTypeMember = function (errorRecoverySet) {
            var minChar = this.scanner.startPos;
            var propertyDecl = this.parsePropertyDeclaration(errorRecoverySet, 2 /* Public */ , true, false);
            if(propertyDecl) {
                propertyDecl.minChar = minChar;
                if(propertyDecl.nodeType == 73 /* VarDecl */ ) {
                    this.checkCurrentToken(54 /* Semicolon */ , errorRecoverySet);
                }
            }
            return propertyDecl;
        };
        Parser.prototype.parseTypeMemberList = function (errorRecoverySet, members) {
            errorRecoverySet |= 1073741824 /* TypeScriptS */ ;
            while(true) {
                switch(this.currentToken.tokenId) {
                    case 60 /* CloseBrace */ :
                    case 104 /* EndOfFile */ : {
                        members.limChar = this.scanner.pos;
                        return;

                    }
                }
                var element = this.parseTypeMember(errorRecoverySet);
                if(element) {
                    members.append(element);
                }
            }
        };
        Parser.prototype.parseInterfaceDecl = function (errorRecoverySet, modifiers) {
            var leftCurlyCount = this.scanner.leftCurlyCount;
            var rightCurlyCount = this.scanner.rightCurlyCount;
            this.currentToken = this.scanner.scan();
            var minChar = this.scanner.pos;
            var name = null;
            if((this.currentToken.tokenId == 106 /* Identifier */ ) || (!TypeScript.isPrimitiveTypeToken(this.currentToken) && TypeScript.convertTokToID(this.currentToken, this.strictMode))) {
                name = TypeScript.Identifier.fromToken(this.currentToken);
                name.minChar = this.scanner.startPos;
                name.limChar = this.scanner.pos;
                this.currentToken = this.scanner.scan();
            } else {
                this.reportParseError("interface missing name");
                if(this.errorRecovery) {
                    name = new TypeScript.MissingIdentifier();
                    name.minChar = this.scanner.pos;
                    name.limChar = this.scanner.pos;
                    name.flags |= 8 /* Error */ ;
                }
            }
            var interfaces = null;
            if(this.currentToken.tokenId == 15 /* Extends */ ) {
                interfaces = new TypeScript.ASTList();
                interfaces.minChar = this.scanner.startPos;
                this.parseBaseList(interfaces, null, errorRecoverySet, true, false);
            }
            var membersMinChar = this.scanner.startPos;
            this.checkCurrentToken(59 /* OpenBrace */ , errorRecoverySet | 1073741824 /* TypeScriptS */ );
            var members = new TypeScript.ASTList();
            members.minChar = membersMinChar;
            var prevInInterfaceDecl = this.inInterfaceDecl;
            this.inInterfaceDecl = true;
            this.parseTypeMemberList(errorRecoverySet | 32 /* RCurly */ , members);
            this.inInterfaceDecl = prevInInterfaceDecl;
            this.checkCurrentToken(60 /* CloseBrace */ , errorRecoverySet);
            var interfaceDecl = new TypeScript.InterfaceDeclaration(name, members, interfaces, null);
            if(TypeScript.hasFlag(modifiers, 1 /* Private */ )) {
                interfaceDecl.varFlags |= 2 /* Private */ ;
            }
            if(TypeScript.hasFlag(modifiers, 2 /* Public */ )) {
                interfaceDecl.varFlags |= 4 /* Public */ ;
            }
            if(this.parsingDeclareFile || this.ambientModule || TypeScript.hasFlag(modifiers, 16 /* Exported */ )) {
                interfaceDecl.varFlags |= 1 /* Exported */ ;
            }
            interfaceDecl.limChar = members.limChar;
            interfaceDecl.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;
            interfaceDecl.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;
            return interfaceDecl;
        };
        Parser.prototype.makeVarDecl = function (id, nest) {
            var varDecl = new TypeScript.VarDecl(id, nest);
            var currentVarList = this.topVarList();
            if(currentVarList) {
                currentVarList.append(varDecl);
            }
            return varDecl;
        };
        Parser.prototype.parsePropertyDeclaration = function (errorRecoverySet, modifiers, requireSignature, isStatic) {
            var text = null;
            var minChar = this.scanner.startPos;
            var nameLimChar = minChar;
            var isNew = false;
            var isIndexer = false;
            var wasAccessorID = this.prevIDTok != null;
            var isAccessor = TypeScript.hasFlag(modifiers, 32 /* Getter */ ) || TypeScript.hasFlag(modifiers, 64 /* Setter */ );
            if(this.parsingDeclareFile || this.ambientModule || TypeScript.hasFlag(modifiers, 8 /* Ambient */ )) {
                requireSignature = true;
            }
            if(this.currentToken.tokenId == 55 /* OpenParen */  && !wasAccessorID) {
                if(!requireSignature && !isStatic) {
                    this.reportParseError("Expected identifier in property declaration");
                    if(this.errorRecovery) {
                        this.skip(errorRecoverySet);
                        text = new TypeScript.MissingIdentifier();
                    }
                }
            } else {
                if(this.currentToken.tokenId == 31 /* New */ ) {
                    if(requireSignature) {
                        this.currentToken = this.scanner.scan();
                        if(this.currentToken.tokenId == 55 /* OpenParen */ ) {
                            isNew = true;
                        }
                    }
                    if(!isNew) {
                        if(!requireSignature) {
                            this.currentToken = this.scanner.scan();
                        }
                        text = new TypeScript.Identifier("new");
                        text.minChar = this.scanner.pos - 3;
                        text.limChar = this.scanner.pos;
                        nameLimChar = this.scanner.pos;
                    }
                } else {
                    if((this.currentToken.tokenId == 57 /* OpenBracket */ ) && requireSignature) {
                        isIndexer = true;
                        text = new TypeScript.Identifier("__item");
                    } else {
                        if((this.currentToken.tokenId != 106 /* Identifier */ ) && (!TypeScript.convertTokToIDName(this.currentToken)) && !wasAccessorID) {
                            this.reportParseError("Expected identifier in property declaration");
                            if(this.errorRecovery) {
                                var eminChar = this.scanner.startPos;
                                var curpos = this.scanner.pos;
                                this.skip(errorRecoverySet & (~1 /* Comma */ ));
                                if(this.scanner.pos == curpos) {
                                    this.currentToken = this.scanner.scan();
                                }
                                var epd = new TypeScript.VarDecl(new TypeScript.MissingIdentifier(), this.nestingLevel);
                                epd.flags |= 8 /* Error */ ;
                                epd.minChar = eminChar;
                                epd.limChar = this.scanner.lastTokenLimChar();
                                return epd;
                            }
                        } else {
                            if(wasAccessorID) {
                                text = TypeScript.Identifier.fromToken(this.prevIDTok);
                                text.minChar = this.scanner.lastTokenLimChar() - 3;
                                text.limChar = this.scanner.lastTokenLimChar();
                                nameLimChar = text.limChar;
                                if(TypeScript.codeGenTarget < 1 /* ES5 */ ) {
                                    this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                                }
                                if(this.currentToken.getText() == text.actualText && this.currentToken != this.prevIDTok) {
                                    this.currentToken = this.scanner.scan();
                                }
                                this.prevIDTok = null;
                            } else {
                                text = TypeScript.Identifier.fromToken(this.currentToken);
                                text.minChar = this.scanner.startPos;
                                text.limChar = this.scanner.pos;
                                nameLimChar = this.scanner.pos;
                                this.currentToken = this.scanner.scan();
                            }
                        }
                    }
                }
            }
            if(this.currentToken.tokenId == 74 /* Question */ ) {
                if(this.inInterfaceDecl && text) {
                    text.flags |= 1024 /* OptionalName */ ;
                } else {
                    this.reportParseError("Optional properties may only be declared on interface or object types");
                }
                this.currentToken = this.scanner.scan();
            }
            if((this.currentToken.tokenId == 55 /* OpenParen */ ) || (isIndexer && (this.currentToken.tokenId == 57 /* OpenBracket */ ))) {
                var ers = errorRecoverySet | 64 /* RParen */ ;
                if(isIndexer) {
                    ers = errorRecoverySet | 16 /* RBrack */ ;
                }
                var ast = this.parseFncDecl(ers, true, requireSignature, !this.inFncDecl, text, isIndexer, isStatic, (this.parsingDeclareFile || TypeScript.hasFlag(modifiers, 8 /* Ambient */ )), modifiers, null, true);
                var funcDecl;
                if(ast.nodeType == 104 /* Error */ ) {
                    return ast;
                } else {
                    funcDecl = ast;
                }
                if(funcDecl.name) {
                    funcDecl.name.minChar = minChar;
                    funcDecl.name.limChar = nameLimChar;
                }
                if((modifiers & 2 /* Public */ ) != 0 /* None */ ) {
                    funcDecl.fncFlags |= 4 /* Public */ ;
                }
                if((modifiers & 1 /* Private */ ) != 0 /* None */ ) {
                    funcDecl.fncFlags |= 2 /* Private */ ;
                }
                if(isStatic) {
                    funcDecl.fncFlags |= 16 /* Static */ ;
                }
                if(this.parsingDeclareFile || TypeScript.hasFlag(modifiers, 8 /* Ambient */ )) {
                    funcDecl.fncFlags |= 8 /* Ambient */ ;
                }
                if(isAccessor) {
                    if(TypeScript.hasFlag(modifiers, 32 /* Getter */ )) {
                        funcDecl.fncFlags |= 64 /* GetAccessor */ ;
                        funcDecl.hint = "get" + funcDecl.name.actualText;
                    } else {
                        funcDecl.fncFlags |= 128 /* SetAccessor */ ;
                        funcDecl.hint = "set" + funcDecl.name.actualText;
                    }
                    funcDecl.fncFlags |= 131072 /* IsFunctionExpression */ ;
                    if(modifiers & 8 /* Ambient */ ) {
                        this.reportParseError("Property accessors may not be declared in ambient types");
                    }
                }
                if(text == null) {
                    if(isNew) {
                        funcDecl.fncFlags |= 8192 /* ConstructMember */ ;
                        funcDecl.hint = "_construct";
                        funcDecl.classDecl = this.currentClassDecl;
                    } else {
                        funcDecl.hint = "_call";
                        funcDecl.fncFlags |= 4096 /* CallMember */ ;
                    }
                }
                return funcDecl;
            } else {
                var varDecl = new TypeScript.VarDecl(text, this.nestingLevel);
                varDecl.minChar = minChar;
                if(this.currentToken.tokenId == 75 /* Colon */ ) {
                    this.currentToken = this.scanner.scan();
                    varDecl.typeExpr = this.parseTypeReference(errorRecoverySet | 4 /* Asg */  | 1 /* Comma */ , false);
                }
                if(this.currentToken.tokenId == 62 /* Equals */ ) {
                    if(requireSignature) {
                        this.reportParseError("context does not permit variable initializer");
                        if(this.errorRecovery) {
                            this.skip(errorRecoverySet);
                            varDecl.flags |= 8 /* Error */ ;
                            varDecl.limChar = this.scanner.lastTokenLimChar();
                            return varDecl;
                        }
                    }
                    this.currentToken = this.scanner.scan();
                    varDecl.init = this.parseExpr(1 /* Comma */  | errorRecoverySet, 1 /* Comma */ , true, 0 /* NoTypes */ );
                    varDecl.limChar = varDecl.init.limChar;
                    if(varDecl.init.nodeType == 71 /* FuncDecl */ ) {
                        var funcDecl = varDecl.init;
                        funcDecl.hint = varDecl.id.text;
                        funcDecl.boundToProperty = varDecl;
                    } else {
                        if(isAccessor) {
                            this.reportParseError("Accessors may only be functions");
                        }
                    }
                } else {
                    varDecl.limChar = this.scanner.pos;
                }
                if((modifiers & 4 /* Readonly */ ) != 0 /* None */ ) {
                    varDecl.varFlags |= 1024 /* Readonly */ ;
                }
                if(isStatic) {
                    varDecl.varFlags |= 16 /* Static */ ;
                }
                if((modifiers & 2 /* Public */ ) != 0 /* None */ ) {
                    varDecl.varFlags |= 4 /* Public */ ;
                }
                if((modifiers & 1 /* Private */ ) != 0 /* None */ ) {
                    varDecl.varFlags |= 2 /* Private */ ;
                }
                varDecl.varFlags |= 512 /* Property */ ;
                return varDecl;
            }
        };
        Parser.prototype.parseVariableDeclaration = function (errorRecoverySet, modifiers, allowIn, isStatic) {
            var isConst = TypeScript.hasFlag(modifiers, 4 /* Readonly */ );
            var minChar = this.scanner.startPos;
            var varDecl = null;
            var declList = null;
            var multivar = false;
            this.currentToken = this.scanner.scan();
            var varDeclPreComments = this.parseComments();
            while(true) {
                if((this.currentToken.tokenId != 106 /* Identifier */ ) && (!TypeScript.convertTokToID(this.currentToken, this.strictMode))) {
                    this.reportParseError("Expected identifier in variable declaration");
                    if(this.errorRecovery) {
                        varDecl = new TypeScript.VarDecl(new TypeScript.MissingIdentifier(), this.nestingLevel);
                        varDecl.minChar = minChar;
                        this.skip(errorRecoverySet);
                        varDecl.flags |= 8 /* Error */ ;
                        varDecl.limChar = this.scanner.lastTokenLimChar();
                        return varDecl;
                    }
                }
                var varDeclName = TypeScript.Identifier.fromToken(this.currentToken);
                if(this.strictMode && (varDeclName.text == "eval")) {
                    this.reportParseError("'eval' may not name a variable in strict mode");
                }
                varDecl = this.makeVarDecl(varDeclName, this.nestingLevel);
                varDecl.id.minChar = this.scanner.startPos;
                varDecl.id.limChar = this.scanner.pos;
                varDecl.preComments = varDeclPreComments;
                if(isStatic) {
                    varDecl.varFlags |= 16 /* Static */ ;
                }
                if(TypeScript.hasFlag(modifiers, 4 /* Readonly */ )) {
                    varDecl.varFlags |= 1024 /* Readonly */ ;
                }
                if(this.parsingDeclareFile || this.ambientModule || TypeScript.hasFlag(modifiers, 8 /* Ambient */ )) {
                    varDecl.varFlags |= 8 /* Ambient */ ;
                }
                if(this.parsingDeclareFile || this.ambientModule || TypeScript.hasFlag(modifiers, 16 /* Exported */ )) {
                    varDecl.varFlags |= 1 /* Exported */ ;
                }
                varDecl.minChar = minChar;
                if(declList) {
                    declList.append(varDecl);
                }
                this.currentToken = this.scanner.scan();
                if(this.currentToken.tokenId == 75 /* Colon */ ) {
                    this.currentToken = this.scanner.scan();
                    var prevInFncDecl = this.inFncDecl;
                    this.inFncDecl = false;
                    varDecl.typeExpr = this.parseTypeReference(errorRecoverySet | 4 /* Asg */  | 1 /* Comma */ , false);
                    this.inFncDecl = prevInFncDecl;
                }
                if(this.currentToken.tokenId == 62 /* Equals */ ) {
                    if(TypeScript.hasFlag(varDecl.varFlags, 8 /* Ambient */ )) {
                        this.reportParseError("Ambient variable can not have an initializer");
                    }
                    this.currentToken = this.scanner.scan();
                    varDecl.init = this.parseExpr(1 /* Comma */  | errorRecoverySet, 1 /* Comma */ , allowIn, 0 /* NoTypes */ );
                    varDecl.limChar = varDecl.init.limChar;
                    if(varDecl.init.nodeType == 71 /* FuncDecl */ ) {
                        var funcDecl = varDecl.init;
                        funcDecl.hint = varDecl.id.actualText;
                    }
                } else {
                    if(isConst) {
                        this.reportParseError("const declaration requires initializer");
                    }
                    varDecl.limChar = this.scanner.pos;
                }
                varDecl.postComments = this.parseCommentsForLine(this.scanner.line);
                if(this.currentToken.tokenId != 61 /* Comma */ ) {
                    if(declList) {
                        declList.limChar = varDecl.limChar;
                        return declList;
                    } else {
                        return varDecl;
                    }
                }
                if(!multivar) {
                    declList = new TypeScript.ASTList();
                    declList.minChar = varDecl.minChar;
                    declList.append(varDecl);
                    multivar = true;
                }
                this.currentToken = this.scanner.scan();
                minChar = this.scanner.startPos;
            }
        };
        Parser.prototype.parseMemberList = function (errorRecoverySet) {
            var elements = new TypeScript.ASTList();
            if(this.currentToken.tokenId == 60 /* CloseBrace */ ) {
                return elements;
            }
            var idHint = null;
            var memberName = null;
            var memberExpr = null;
            var member = null;
            var minChar = this.scanner.startPos;
            var isSet = false;
            var skippedTokenForGetSetId = false;
            var getSetTok = null;
            var getSetStartPos = 0;
            var getSetPos = 0;
            for(; ; ) {
                var accessorPattern = false;
                if(this.currentToken.tokenId == 22 /* Get */  || this.currentToken.tokenId == 39 /* Set */ ) {
                    isSet = this.currentToken.tokenId == 39 /* Set */ ;
                    getSetTok = this.currentToken;
                    getSetStartPos = this.scanner.startPos;
                    getSetPos = this.scanner.pos;
                    this.currentToken = this.scanner.scan();
                    if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToIDName(this.currentToken)) {
                        idHint = isSet ? "set" : "get";
                        idHint = idHint + this.currentToken.getText();
                        memberName = TypeScript.Identifier.fromToken(this.currentToken);
                        memberName.minChar = this.scanner.startPos;
                        accessorPattern = true;
                        if(TypeScript.codeGenTarget < 1 /* ES5 */ ) {
                            this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                        }
                    } else {
                        if(this.currentToken.tokenId != 75 /* Colon */ ) {
                            this.reportParseError("Expected identifier, string or number as accessor name");
                        } else {
                            skippedTokenForGetSetId = true;
                            memberName = TypeScript.Identifier.fromToken(getSetTok);
                            memberName.minChar = getSetStartPos;
                            memberName.limChar = getSetPos;
                        }
                    }
                } else {
                    if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToIDName(this.currentToken)) {
                        idHint = this.currentToken.getText();
                        memberName = TypeScript.Identifier.fromToken(this.currentToken);
                        memberName.minChar = this.scanner.startPos;
                        memberName.limChar = this.scanner.pos;
                    } else {
                        if(this.currentToken.tokenId == 107 /* StringLiteral */ ) {
                            idHint = this.currentToken.getText();
                            memberName = new TypeScript.StringLiteral(idHint);
                            memberName.minChar = this.scanner.startPos;
                            memberName.limChar = this.scanner.pos;
                        } else {
                            if(this.currentToken.tokenId == 109 /* NumberLiteral */ ) {
                                var ntok = this.currentToken;
                                idHint = ntok.value.toString();
                                memberName = new TypeScript.StringLiteral(idHint);
                                memberName.minChar = this.scanner.startPos;
                                memberName.limChar = this.scanner.pos;
                            } else {
                                this.reportParseError("Expected identifier, string or number as member name");
                                if(this.errorRecovery) {
                                    memberName = new TypeScript.MissingIdentifier();
                                    memberName.minChar = this.scanner.startPos;
                                    memberName.flags |= 8 /* Error */ ;
                                    this.skip(errorRecoverySet | 1 /* Comma */ );
                                    memberName.limChar = this.scanner.lastTokenLimChar();
                                }
                            }
                        }
                    }
                }
                if(!skippedTokenForGetSetId) {
                    this.currentToken = this.scanner.scan();
                } else {
                    skippedTokenForGetSetId = false;
                }
                if(this.currentToken.tokenId == 74 /* Question */ ) {
                    memberName.flags |= 1024 /* OptionalName */ ;
                    this.currentToken = this.scanner.scan();
                }
                if(accessorPattern) {
                    var args = new TypeScript.ASTList();
                    this.parseFormalParameterList(errorRecoverySet | 64 /* RParen */ , args, false, true, false, !isSet, isSet, false, null, true);
                    var funcDecl = this.parseFunctionStatements(errorRecoverySet | 32 /* RCurly */ , memberName, false, true, args, 0 /* None */ , this.scanner.startPos, false, 0 /* None */ );
                    if(isSet && funcDecl.returnTypeAnnotation) {
                        this.reportParseError("Property setters may not declare a return type");
                    }
                    funcDecl.fncFlags |= isSet ? 128 /* SetAccessor */  : 64 /* GetAccessor */ ;
                    funcDecl.fncFlags |= 131072 /* IsFunctionExpression */ ;
                    funcDecl.hint = idHint;
                    memberExpr = funcDecl;
                    member = new TypeScript.BinaryExpression(72 /* Member */ , memberName, memberExpr);
                    member.minChar = memberName.minChar;
                    if(memberExpr.nodeType == 71 /* FuncDecl */ ) {
                        var funcDecl = memberExpr;
                        funcDecl.hint = idHint;
                    }
                } else {
                    if(this.currentToken.tokenId == 75 /* Colon */ ) {
                        this.currentToken = this.scanner.scan();
                        memberExpr = this.parseExpr(1 /* Comma */  | errorRecoverySet, 1 /* Comma */ , true, 0 /* NoTypes */ );
                        if(memberExpr.nodeType == 26 /* TypeRef */ ) {
                            this.reportParseError("Expected 'new' on array declaration in member definition");
                        }
                        member = new TypeScript.BinaryExpression(72 /* Member */ , memberName, memberExpr);
                        member.minChar = memberName.minChar;
                        if(memberExpr.nodeType == 71 /* FuncDecl */ ) {
                            var funcDecl = memberExpr;
                            funcDecl.hint = idHint;
                        }
                    } else {
                        this.reportParseError("Expected ':' in member definition");
                        if(this.errorRecovery) {
                            this.skip(errorRecoverySet);
                            elements.flags |= 8 /* Error */ ;
                            elements.minChar = minChar;
                            elements.limChar = this.scanner.lastTokenLimChar();
                            return elements;
                        }
                    }
                }
                idHint = null;
                elements.append(member);
                member.limChar = this.scanner.lastTokenLimChar();
                if(this.currentToken.tokenId != 61 /* Comma */ ) {
                    break;
                } else {
                    this.currentToken = this.scanner.scan();
                }
                if(this.currentToken.tokenId == 60 /* CloseBrace */ ) {
                    break;
                }
            }
            if(member) {
                elements.limChar = member.limChar;
            }
            elements.minChar = minChar;
            return elements;
        };
        Parser.prototype.parseArrayList = function (errorRecoverySet) {
            var elements = null;
            if(this.currentToken.tokenId == 58 /* CloseBracket */ ) {
                return elements;
            } else {
                elements = new TypeScript.ASTList();
                elements.minChar = this.scanner.startPos;
            }
            var arg;
            for(; ; ) {
                if((this.currentToken.tokenId == 61 /* Comma */ ) || (this.currentToken.tokenId == 58 /* CloseBracket */ )) {
                    arg = new TypeScript.AST(2 /* EmptyExpr */ );
                } else {
                    arg = this.parseExpr(1 /* Comma */  | errorRecoverySet, 1 /* Comma */ , true, 0 /* NoTypes */ );
                }
                elements.append(arg);
                if(this.currentToken.tokenId != 61 /* Comma */ ) {
                    break;
                }
                this.currentToken = this.scanner.scan();
            }
            elements.limChar = this.scanner.lastTokenLimChar();
            return elements;
        };
        Parser.prototype.parseArrayLiteral = function (errorRecoverySet) {
            var arrayLiteral = null;
            arrayLiteral = new TypeScript.UnaryExpression(10 /* ArrayLit */ , this.parseArrayList(errorRecoverySet));
            return arrayLiteral;
        };
        Parser.prototype.parseTerm = function (errorRecoverySet, allowCall, typeContext, inCast) {
            var ast = null;
            var sawId = false;
            var inNew = false;
            var minChar = this.scanner.startPos;
            var limChar = this.scanner.pos;
            var parseAsLambda = false;
            var expectlambdaRParen = false;
            switch(this.currentToken.tokenId) {
                case 32 /* Number */ :
                case 1 /* Bool */ :
                case 0 /* Any */ :
                case 41 /* String */ : {
                    var tid = new TypeScript.Identifier(TypeScript.tokenTable[this.currentToken.tokenId].text);
                    if(TypeScript.hasFlag(typeContext, 2 /* Primitive */ )) {
                        ast = new TypeScript.TypeReference(tid, 0);
                        sawId = true;
                    } else {
                        ast = tid;
                        sawId = true;
                    }
                    ast.minChar = minChar;
                    this.currentToken = this.scanner.scan();
                    limChar = this.scanner.lastTokenLimChar();
                    break;

                }
                case 44 /* This */ : {
                    ast = new TypeScript.AST(5 /* This */ );
                    ast.minChar = minChar;
                    this.currentToken = this.scanner.scan();
                    limChar = this.scanner.lastTokenLimChar();
                    break;

                }
                case 42 /* Super */ : {
                    ast = new TypeScript.AST(6 /* Super */ );
                    ast.minChar = minChar;
                    this.currentToken = this.scanner.scan();
                    limChar = this.scanner.lastTokenLimChar();
                    break;

                }
                case 46 /* True */ : {
                    ast = new TypeScript.AST(3 /* True */ );
                    this.currentToken = this.scanner.scan();
                    ast.minChar = minChar;
                    break;

                }
                case 17 /* False */ : {
                    ast = new TypeScript.AST(4 /* False */ );
                    this.currentToken = this.scanner.scan();
                    ast.minChar = minChar;
                    break;

                }
                case 33 /* Null */ : {
                    ast = new TypeScript.AST(9 /* Null */ );
                    this.currentToken = this.scanner.scan();
                    ast.minChar = minChar;
                    break;

                }
                case 31 /* New */ : {
                    minChar = this.scanner.pos;
                    this.currentToken = this.scanner.scan();
                    ast = new TypeScript.CallExpression(29 /* New */ , this.parseTerm(errorRecoverySet, false, TypeContext.AllSimpleTypes, inCast), null);
                    ast.minChar = minChar;
                    limChar = this.scanner.lastTokenLimChar();
                    inNew = true;
                    break;

                }
                case 20 /* Function */ : {
                    minChar = this.scanner.pos;
                    ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, 0 /* None */ , null, true);
                    (ast).fncFlags |= 131072 /* IsFunctionExpression */ ;
                    ast.minChar = minChar;
                    limChar = this.scanner.lastTokenLimChar();
                    ast.limChar = limChar;
                    break;

                }
            }
            if(ast == null) {
                if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                    var idText = this.currentToken.getText();
                    ast = this.createRef(idText, (this.currentToken).hasEscapeSequence, minChar);
                    sawId = true;
                    ast.minChar = minChar;
                    this.currentToken = this.scanner.scan();
                    if(this.currentToken.tokenId == 74 /* Question */ ) {
                        ast.flags |= 256 /* PossibleOptionalParameter */ ;
                    }
                    limChar = this.scanner.lastTokenLimChar();
                }
            }
            if(inCast) {
                this.checkCurrentToken(87 /* GreaterThan */ , errorRecoverySet);
            }
            if(ast == null) {
                switch(this.currentToken.tokenId) {
                    case 55 /* OpenParen */ : {
                        minChar = this.scanner.pos;
                        var prevTokId = this.scanner.previousToken().tokenId;
                        this.currentToken = this.scanner.scan();
                        var couldBeLambda = prevTokId == 55 /* OpenParen */  || prevTokId == 61 /* Comma */  || prevTokId == 81 /* EqualsEquals */  || prevTokId == 75 /* Colon */ ;
                        if(couldBeLambda && this.currentToken.tokenId == 56 /* CloseParen */ ) {
                            parseAsLambda = true;
                            expectlambdaRParen = false;
                            this.currentToken = this.scanner.scan();
                        } else {
                            if(couldBeLambda && this.currentToken.tokenId == 102 /* DotDotDot */ ) {
                                parseAsLambda = true;
                                expectlambdaRParen = true;
                            } else {
                                ast = this.parseExpr(errorRecoverySet | 64 /* RParen */ , 0 /* None */ , true, 0 /* NoTypes */ , couldBeLambda);
                                limChar = this.scanner.lastTokenLimChar();
                                parseAsLambda = couldBeLambda && (ast.nodeType == 25 /* Name */  || ast.nodeType == 13 /* Comma */ ) && (this.currentToken.tokenId == 75 /* Colon */  || this.currentToken.tokenId == 74 /* Question */ );
                                expectlambdaRParen = true;
                            }
                        }
                        if((ast && !parseAsLambda)) {
                            if(TypeScript.hasFlag(ast.flags, 2048 /* SkipNextRParen */ )) {
                                ast.flags = ast.flags & (~(2048 /* SkipNextRParen */ ));
                                break;
                            }
                            this.checkCurrentToken(56 /* CloseParen */ , errorRecoverySet);
                            ast.isParenthesized = true;
                        }
                        break;

                    }
                    case 109 /* NumberLiteral */ : {
                        var numTok = this.currentToken;
                        this.currentToken = this.scanner.scan();
                        ast = new TypeScript.NumberLiteral(numTok.value, numTok.hasEmptyFraction);
                        ast.minChar = minChar;
                        limChar = this.scanner.lastTokenLimChar();
                        break;
                    }

                    case 107 /* StringLiteral */ : {
                        ast = new TypeScript.StringLiteral(this.currentToken.getText());
                        this.currentToken = this.scanner.scan();
                        ast.minChar = minChar;
                        limChar = this.scanner.lastTokenLimChar();
                        break;

                    }
                    case 108 /* RegularExpressionLiteral */ : {
                        var rtok = this.currentToken;
                        ast = new TypeScript.RegexLiteral(rtok.regex);
                        this.currentToken = this.scanner.scan();
                        ast.minChar = minChar;
                        limChar = this.scanner.lastTokenLimChar();
                        break;
                    }

                    case 57 /* OpenBracket */ : {
                        minChar = this.scanner.startPos;
                        this.currentToken = this.scanner.scan();
                        ast = this.parseArrayLiteral(16 /* RBrack */  | errorRecoverySet);
                        ast.minChar = minChar;
                        limChar = this.scanner.pos;
                        this.checkCurrentToken(58 /* CloseBracket */ , errorRecoverySet);
                        break;

                    }
                    case 59 /* OpenBrace */ : {
                        minChar = this.scanner.startPos;
                        this.currentToken = this.scanner.scan();
                        var members = this.parseMemberList(32 /* RCurly */  | errorRecoverySet);
                        this.checkCurrentToken(60 /* CloseBrace */ , errorRecoverySet);
                        ast = new TypeScript.UnaryExpression(11 /* ObjectLit */ , members);
                        ast.minChar = minChar;
                        limChar = this.scanner.lastTokenLimChar();
                        members.minChar = minChar;
                        members.limChar = limChar;
                        break;

                    }
                    case 85 /* LessThan */ : {
                        minChar = this.scanner.startPos;
                        this.currentToken = this.scanner.scan();
                        var term = this.parseTypeReference(8 /* BinOp */ , false);
                        this.checkCurrentToken(87 /* GreaterThan */ , errorRecoverySet);
                        ast = new TypeScript.UnaryExpression(70 /* TypeAssertion */ , this.parseExpr(errorRecoverySet, 14 /* Unary */ , false, 0 /* NoTypes */ ));
                        (ast).castTerm = term;
                        break;

                    }
                    default: {
                        if(this.prevExpr && TypeScript.hasFlag(this.prevExpr.flags, 256 /* PossibleOptionalParameter */ )) {
                            parseAsLambda = true;
                            ast = this.prevExpr;
                        } else {
                            this.reportParseError("Check format of expression term");
                            if(this.errorRecovery) {
                                var ident = new TypeScript.MissingIdentifier();
                                ident.minChar = minChar;
                                ident.flags |= 8 /* Error */ ;
                                this.skip(errorRecoverySet | TypeScript.ErrorRecoverySet.Postfix);
                                if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                                    ident.setText(this.currentToken.getText(), (this.currentToken).hasEscapeSequence);
                                    this.currentToken = this.scanner.scan();
                                    limChar = this.scanner.lastTokenLimChar();
                                } else {
                                    limChar = this.scanner.lastTokenLimChar();
                                }
                                ast = ident;
                            }
                        }

                    }
                }
            }
            if(parseAsLambda) {
                if(this.currentToken.tokenId == 75 /* Colon */  || this.currentToken.tokenId == 61 /* Comma */  || this.currentToken.tokenId == 56 /* CloseParen */  || this.currentToken.tokenId == 102 /* DotDotDot */ ) {
                    ast = this.parseLambdaExpr(errorRecoverySet, ast, true, expectlambdaRParen);
                    ast.minChar = minChar;
                    limChar = this.scanner.lastTokenLimChar();
                    ast.limChar = limChar;
                } else {
                    if(ast) {
                        ast.isParenthesized = true;
                    }
                }
            }
            if(sawId && (typeContext != 0 /* NoTypes */ )) {
                typeContext |= 1 /* ArraySuffix */ ;
            }
            var postFix = this.parsePostfixOperators(errorRecoverySet, ast, allowCall, inNew, typeContext, minChar, limChar);
            if(postFix) {
                if(sawId && (postFix.nodeType == 27 /* Index */ )) {
                    var binExpr = postFix;
                    if(binExpr.operand2 == null) {
                        postFix = this.convertToTypeReference(postFix);
                    }
                }
                postFix.minChar = minChar;
                postFix.limChar = TypeScript.max(postFix.limChar, this.scanner.lastTokenLimChar());
                return postFix;
            } else {
                return new TypeScript.AST(104 /* Error */ );
            }
        };
        Parser.prototype.parseLambdaExpr = function (errorRecoverySet, lambdaArgs, skipNextRParen, expectClosingRParen) {
            var ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, 0 /* None */ , {
                preProcessedLambdaArgs: lambdaArgs
            }, expectClosingRParen);
            (ast).fncFlags |= 131072 /* IsFunctionExpression */ ;
            (ast).fncFlags |= 32768 /* IsFatArrowFunction */ ;
            if(!skipNextRParen) {
                ast.flags |= 2048 /* SkipNextRParen */ ;
            }
            ast.limChar = this.scanner.lastTokenLimChar();
            ; ;
            return ast;
        };
        Parser.prototype.parseExpr = function (errorRecoverySet, minPrecedence, allowIn, typeContext, possiblyInLambda) {
            if (typeof possiblyInLambda === "undefined") { possiblyInLambda = false; }
            var ast = null;
            var tokenInfo = TypeScript.lookupToken(this.currentToken.tokenId);
            var canAssign = true;
            var idHint = null;
            var minChar = this.scanner.startPos;
            var preComments = this.parseComments();
            var exprIsAnonLambda = false;
            if((tokenInfo != undefined) && (tokenInfo.unopNodeType != 0 /* None */ )) {
                canAssign = false;
                this.currentToken = this.scanner.scan();
                var tempExpr = this.parseExpr(8 /* BinOp */  | errorRecoverySet, tokenInfo.unopPrecedence, allowIn, 0 /* NoTypes */ );
                if((tokenInfo.unopNodeType == 14 /* Pos */ ) && (tempExpr.nodeType == 24 /* NumberLit */ )) {
                    ast = tempExpr;
                } else {
                    if((tokenInfo.unopNodeType == 15 /* Neg */ ) && (tempExpr.nodeType == 24 /* NumberLit */ )) {
                        var numLit = tempExpr;
                        numLit.value = (-numLit.value);
                        if(numLit.value == 0) {
                            numLit.isNegativeZero = true;
                        }
                        ast = tempExpr;
                    } else {
                        ast = new TypeScript.UnaryExpression(tokenInfo.unopNodeType, tempExpr);
                        ast.limChar = tempExpr.limChar;
                    }
                }
                ast.minChar = minChar;
            } else {
                ast = this.parseTerm(8 /* BinOp */  | 1024 /* AddOp */  | errorRecoverySet, true, typeContext, false);
                var id;
                var temp;
                if(ast.nodeType == 25 /* Name */ ) {
                    id = ast;
                    idHint = id.actualText;
                } else {
                    if(ast.nodeType == 19 /* Dot */ ) {
                        var subsumedExpr = false;
                        if(this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId == 75 /* Colon */  || this.currentToken.tokenId == 62 /* Equals */ ) && this.parsingClassConstructorDefinition && this.nestingLevel == this.currentClassDefinition.constructorNestingLevel && (ast).operand1.nodeType == 5 /* This */ ) {
                            if((ast).operand2.nodeType == 25 /* Name */ ) {
                                var op2ID = ((ast).operand2);
                                if(!this.currentClassDefinition.knownMemberNames[op2ID.actualText]) {
                                    ast = this.parseClassMemberVariableDeclaration(op2ID, ast.minChar, true, errorRecoverySet, 2 /* Public */ );
                                    subsumedExpr = true;
                                }
                            }
                        }
                        if(!subsumedExpr) {
                            temp = ast;
                            while(temp.nodeType == 19 /* Dot */ ) {
                                var binExpr = temp;
                                temp = binExpr.operand2;
                            }
                            if(temp.nodeType == 25 /* Name */ ) {
                                id = temp;
                                idHint = id.actualText;
                            }
                        }
                    }
                }
                if((!this.scanner.lastTokenHadNewline()) && ((this.currentToken.tokenId == 99 /* PlusPlus */ ) || (this.currentToken.tokenId == 100 /* MinusMinus */ ))) {
                    canAssign = false;
                    var operand = ast;
                    ast = new TypeScript.UnaryExpression((this.currentToken.tokenId == 99 /* PlusPlus */ ) ? 68 /* IncPost */  : 69 /* DecPost */ , operand);
                    ast.limChar = this.scanner.pos;
                    ast.minChar = operand.minChar;
                    this.currentToken = this.scanner.scan();
                }
            }
            for(; ; ) {
                tokenInfo = TypeScript.lookupToken(this.currentToken.tokenId);
                if((tokenInfo == undefined) || (tokenInfo.binopNodeType == 0 /* None */ )) {
                    break;
                }
                if((!allowIn) && (tokenInfo.binopNodeType == 18 /* In */ )) {
                    break;
                }
                if(tokenInfo.binopPrecedence == 2 /* Assignment */ ) {
                    if(tokenInfo.binopPrecedence < minPrecedence) {
                        break;
                    }
                    if(!canAssign) {
                        this.reportParseError("illegal assignment");
                    }
                } else {
                    if(tokenInfo.binopPrecedence <= minPrecedence) {
                        break;
                    }
                }
                if(possiblyInLambda && this.currentToken.tokenId == 61 /* Comma */  && this.scanner.getLookAheadToken().tokenId == 102 /* DotDotDot */ ) {
                    exprIsAnonLambda = true;
                    canAssign = false;
                    ast = this.parseLambdaExpr(errorRecoverySet, ast, false, true);
                    break;
                }
                this.currentToken = this.scanner.scan();
                canAssign = false;
                if(tokenInfo.binopNodeType == 42 /* ConditionalExpression */ ) {
                    if(possiblyInLambda && (this.currentToken.tokenId == 62 /* Equals */  || this.currentToken.tokenId == 75 /* Colon */  || this.currentToken.tokenId == 56 /* CloseParen */  || this.currentToken.tokenId == 61 /* Comma */ )) {
                        exprIsAnonLambda = true;
                        canAssign = true;
                    } else {
                        this.prevExpr = ast;
                        var whenTrue = this.parseExpr(errorRecoverySet | 256 /* Colon */ , 2 /* Assignment */ , allowIn, 0 /* NoTypes */ );
                        this.prevExpr = null;
                        this.checkCurrentToken(75 /* Colon */ , errorRecoverySet | TypeScript.ErrorRecoverySet.ExprStart);
                        var whenFalse = this.parseExpr(errorRecoverySet | 8 /* BinOp */ , 2 /* Assignment */ , allowIn, 0 /* NoTypes */ );
                        ast = new TypeScript.ConditionalExpression(ast, whenTrue, whenFalse);
                    }
                } else {
                    var tc = 0 /* NoTypes */ ;
                    var binExpr2;
                    binExpr2 = new TypeScript.BinaryExpression(tokenInfo.binopNodeType, ast, this.parseExpr(errorRecoverySet | 8 /* BinOp */ , tokenInfo.binopPrecedence, allowIn, 0 /* NoTypes */ , possiblyInLambda));
                    if(binExpr2.operand2.nodeType == 71 /* FuncDecl */ ) {
                        var funcDecl = binExpr2.operand2;
                        funcDecl.hint = idHint;
                    }
                    binExpr2.minChar = ast.minChar;
                    binExpr2.limChar = this.scanner.lastTokenLimChar();
                    idHint = null;
                    ast = binExpr2;
                }
            }
            if(canAssign) {
                ast.flags |= 4 /* Writeable */ ;
            }
            if(!exprIsAnonLambda) {
                ast.minChar = minChar;
                ast.limChar = TypeScript.max(ast.limChar, this.scanner.lastTokenLimChar());
                ast.preComments = preComments;
                ast.postComments = this.parseCommentsForLine(this.scanner.line);
            }
            return ast;
        };
        Parser.prototype.parsePostfixOperators = function (errorRecoverySet, ast, allowCall, inNew, typeContext, lhsMinChar, lhsLimChar) {
            var count = 0;
            if(!ast) {
                ast = new TypeScript.AST(2 /* EmptyExpr */ );
                ast.isParenthesized = true;
            }
            ast.minChar = lhsMinChar;
            ast.limChar = lhsLimChar;
            for(; ; ) {
                switch(this.currentToken.tokenId) {
                    case 55 /* OpenParen */ : {
                        if(inNew) {
                            var callExpr = ast;
                            callExpr.arguments = this.parseArgList(errorRecoverySet);
                            inNew = false;
                        } else {
                            if(!allowCall) {
                                return ast;
                            }
                            ast = new TypeScript.CallExpression(28 /* Call */ , ast, this.parseArgList(errorRecoverySet));
                            ast.minChar = lhsMinChar;
                        }
                        ast.limChar = this.scanner.pos;
                        this.checkCurrentToken(56 /* CloseParen */ , errorRecoverySet);
                        break;

                    }
                    case 57 /* OpenBracket */ : {
                        this.currentToken = this.scanner.scan();
                        if(this.currentToken.tokenId == 58 /* CloseBracket */ ) {
                            if(TypeScript.hasFlag(typeContext, 1 /* ArraySuffix */ )) {
                                this.currentToken = this.scanner.scan();
                                if(ast.nodeType == 26 /* TypeRef */ ) {
                                    var typeRef = ast;
                                    typeRef.arrayCount++;
                                } else {
                                    ast = new TypeScript.BinaryExpression(27 /* Index */ , ast, null);
                                }
                                ast.limChar = this.scanner.pos;
                                break;
                            }
                        }
                        ast = new TypeScript.BinaryExpression(27 /* Index */ , ast, this.parseExpr(errorRecoverySet | 16 /* RBrack */ , 0 /* None */ , true, 0 /* NoTypes */ ));
                        ast.minChar = lhsMinChar;
                        ast.limChar = this.scanner.pos;
                        this.checkCurrentToken(58 /* CloseBracket */ , errorRecoverySet);
                        break;

                    }
                    case 101 /* Dot */ : {
                        var name = null;
                        var curpos = this.scanner.pos;
                        this.currentToken = this.scanner.scan();
                        if((this.currentToken.tokenId == 106 /* Identifier */ ) || ((!this.errorRecovery || !this.scanner.lastTokenHadNewline()) && TypeScript.convertTokToIDName(this.currentToken))) {
                            ast.flags |= 32 /* DotLHS */ ;
                            name = this.createRef(this.currentToken.getText(), (this.currentToken).hasEscapeSequence, this.scanner.startPos);
                            name.limChar = this.scanner.pos;
                            this.currentToken = this.scanner.scan();
                        } else {
                            this.reportParseError("Expected identifier following dot");
                            if(this.errorRecovery) {
                                this.skip(errorRecoverySet);
                                ast.flags |= (8 /* Error */  | 32 /* DotLHS */ );
                                return ast;
                            } else {
                                name = new TypeScript.MissingIdentifier();
                            }
                        }
                        ast = new TypeScript.BinaryExpression(19 /* Dot */ , ast, name);
                        ast.minChar = lhsMinChar;
                        ast.limChar = this.scanner.lastTokenLimChar();
                        break;
                    }

                    case 105 /* EqualsGreaterThan */ : {
                        ast = this.parseFncDecl(errorRecoverySet, false, false, false, null, false, false, false, 0 /* None */ , {
                            preProcessedLambdaArgs: ast
                        }, false);
                        (ast).fncFlags |= 131072 /* IsFunctionExpression */ ;
                        ast.minChar = lhsMinChar;
                        ast.limChar = this.scanner.lastTokenLimChar();
                        break;

                    }
                    default: {
                        return ast;

                    }
                }
            }
        };
        Parser.prototype.parseTry = function (tryNode, errorRecoverySet, parentModifiers) {
            var minChar = this.scanner.startPos;
            var preComments = this.parseComments();
            this.currentToken = this.scanner.scan();
            if(this.currentToken.tokenId != 59 /* OpenBrace */ ) {
                this.reportParseError("Expected '{'");
                if(this.errorRecovery) {
                    var etryNode = tryNode;
                    etryNode.minChar = minChar;
                    etryNode.limChar = this.scanner.lastTokenLimChar();
                    etryNode.flags |= 8 /* Error */ ;
                    return etryNode;
                }
            }
            tryNode.body = this.parseStatement(errorRecoverySet, 0 /* None */ , parentModifiers);
            tryNode.minChar = minChar;
            tryNode.limChar = tryNode.body.limChar;
            tryNode.preComments = preComments;
            tryNode.postComments = this.parseComments();
            return tryNode;
        };
        Parser.prototype.parseCatch = function (errorRecoverySet, parentModifiers) {
            var catchMinChar = this.scanner.startPos;
            var preComments = this.parseComments();
            this.currentToken = this.scanner.scan();
            this.checkCurrentToken(55 /* OpenParen */ , errorRecoverySet | TypeScript.ErrorRecoverySet.ExprStart);
            if((this.currentToken.tokenId != 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                this.reportParseError("Expected identifier in catch header");
                if(this.errorRecovery) {
                    this.skip(errorRecoverySet);
                    var ecatch = new TypeScript.Catch(new TypeScript.VarDecl(new TypeScript.MissingIdentifier(), this.nestingLevel), new TypeScript.Statement(1 /* Empty */ ));
                    ecatch.statement.minChar = catchMinChar;
                    ecatch.statement.limChar = this.scanner.pos;
                    ecatch.minChar = this.scanner.startPos;
                    ecatch.limChar = this.scanner.pos;
                    ecatch.flags |= 8 /* Error */ ;
                    return ecatch;
                }
            }
            var param = new TypeScript.VarDecl(TypeScript.Identifier.fromToken(this.currentToken), this.nestingLevel);
            param.id.minChar = this.scanner.startPos;
            param.id.limChar = this.scanner.pos;
            param.minChar = param.id.minChar;
            param.limChar = param.id.limChar;
            this.currentToken = this.scanner.scan();
            var statementPos = this.scanner.pos;
            this.checkCurrentToken(56 /* CloseParen */ , errorRecoverySet | TypeScript.ErrorRecoverySet.StmtStart);
            if(this.currentToken.tokenId != 59 /* OpenBrace */ ) {
                this.reportParseError("Expected '{' to start catch body");
                if(this.errorRecovery) {
                    this.skip(errorRecoverySet);
                    var ecatch = new TypeScript.Catch(new TypeScript.VarDecl(new TypeScript.MissingIdentifier(), this.nestingLevel), new TypeScript.Statement(1 /* Empty */ ));
                    ecatch.statement.minChar = catchMinChar;
                    ecatch.statement.limChar = statementPos;
                    ecatch.minChar = this.scanner.startPos;
                    ecatch.limChar = this.scanner.pos;
                    ecatch.flags |= 8 /* Error */ ;
                    return ecatch;
                }
            }
            var catchStmt = this.parseStatement(errorRecoverySet, 0 /* None */ , parentModifiers);
            var catchNode = new TypeScript.Catch(param, catchStmt);
            catchNode.statement.minChar = catchMinChar;
            catchNode.statement.limChar = statementPos;
            catchNode.minChar = catchMinChar;
            catchNode.limChar = catchStmt.limChar;
            catchNode.preComments = preComments;
            catchNode.postComments = this.parseComments();
            return catchNode;
        };
        Parser.prototype.parseFinally = function (errorRecoverySet, parentModifiers) {
            var finMinChar = this.scanner.startPos;
            var preComments = this.parseComments();
            this.currentToken = this.scanner.scan();
            if(this.currentToken.tokenId != 59 /* OpenBrace */ ) {
                this.reportParseError("Expected '{' to start body of finally statement");
                if(this.errorRecovery) {
                    this.skip(errorRecoverySet);
                    var efin = new TypeScript.Finally(new TypeScript.Statement(1 /* Empty */ ));
                    efin.flags |= 8 /* Error */ ;
                    efin.minChar = this.scanner.startPos;
                    efin.limChar = this.scanner.pos;
                    return efin;
                }
            }
            var finBody = this.parseStatement(errorRecoverySet, 0 /* None */ , parentModifiers);
            var fin = new TypeScript.Finally(finBody);
            fin.minChar = finMinChar;
            fin.limChar = fin.body.limChar;
            fin.preComments = preComments;
            fin.postComments = this.parseComments();
            return fin;
        };
        Parser.prototype.parseTryCatchFinally = function (errorRecoverySet, parentModifiers, labelList) {
            var tryPart = new TypeScript.Try(null);
            var tryMinChar = this.scanner.startPos;
            this.pushStmt(tryPart, labelList);
            this.parseTry(tryPart, errorRecoverySet | 1048576 /* Catch */ , parentModifiers);
            this.popStmt();
            var tc = null;
            var tf = null;
            if(this.currentToken.tokenId == 4 /* Catch */ ) {
                var catchPart = this.parseCatch(errorRecoverySet | 1048576 /* Catch */ , parentModifiers);
                tc = new TypeScript.TryCatch(tryPart, catchPart);
                tc.minChar = tryPart.minChar;
                tc.limChar = catchPart.limChar;
            }
            if(this.currentToken.tokenId != 18 /* Finally */ ) {
                if(tc == null) {
                    this.reportParseError("try with neither catch nor finally");
                    if(this.errorRecovery) {
                        var etf = new TypeScript.TryFinally(tryPart, new TypeScript.Finally(new TypeScript.AST(1 /* Empty */ )));
                        etf.flags |= 8 /* Error */ ;
                        etf.minChar = this.scanner.startPos;
                        etf.limChar = this.scanner.pos;
                        return etf;
                    }
                    return new TypeScript.TryFinally(tryPart, new TypeScript.Finally(new TypeScript.AST(1 /* Empty */ )));
                } else {
                    return tc;
                }
            } else {
                if(tc) {
                    tryPart = tc;
                }
                var finallyPart = this.parseFinally(errorRecoverySet, parentModifiers);
                tf = new TypeScript.TryFinally(tryPart, finallyPart);
                tf.minChar = tryMinChar;
                tf.limChar = finallyPart.limChar;
                return tf;
            }
        };
        Parser.prototype.parseStatement = function (errorRecoverySet, allowedElements, parentModifiers) {
            var ast = null;
            var labelList = null;
            var astList = null;
            var temp;
            var modifiers = 0 /* None */ ;
            var minChar = this.scanner.startPos;
            var forInOk = false;
            var needTerminator = false;
            var fnOrVar = null;
            var preComments = this.parseComments();
            this.state = 3 /* StartStatement */ ;
            function isAmbient() {
                return TypeScript.hasFlag(modifiers, 8 /* Ambient */ ) || TypeScript.hasFlag(parentModifiers, 8 /* Ambient */ );
            }
            function mayNotBeExported() {
                if(TypeScript.hasFlag(modifiers, 16 /* Exported */ )) {
                    this.reportError("Statement may not be exported");
                }
            }
            for(; ; ) {
                switch(this.currentToken.tokenId) {
                    case 104 /* EndOfFile */ : {
                        ast = new TypeScript.AST(104 /* Error */ );
                        ast.minChar = minChar;
                        ast.limChar = this.scanner.pos;
                        break;

                    }
                    case 20 /* Function */ : {
                        if(this.parsingDeclareFile || isAmbient() || this.ambientModule) {
                            this.currentToken = this.scanner.scan();
                            fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | 2 /* SColon */ , modifiers, true, false);
                            if(fnOrVar.nodeType == 73 /* VarDecl */ ) {
                                this.reportParseError("function keyword can only introduce function declaration");
                            } else {
                                if((fnOrVar.nodeType == 71 /* FuncDecl */ ) && ((fnOrVar).fncFlags , 32768 /* IsFatArrowFunction */ )) {
                                    needTerminator = true;
                                }
                            }
                            ast = fnOrVar;
                            if(this.parsingDeclareFile || this.ambientModule && ast.nodeType == 71 /* FuncDecl */ ) {
                                (ast).fncFlags |= 1 /* Exported */ ;
                            }
                        } else {
                            ast = this.parseFncDecl(errorRecoverySet, true, false, false, null, false, false, isAmbient(), modifiers, null, true);
                            if(TypeScript.hasFlag((ast).fncFlags, 32768 /* IsFatArrowFunction */ )) {
                                needTerminator = true;
                            }
                            if(this.ambientModule) {
                                this.reportParseError("function declaration not permitted within ambient module");
                            }
                            if(TypeScript.hasFlag(modifiers, 16 /* Exported */ )) {
                                (ast).fncFlags |= 1 /* Exported */ ;
                            }
                        }
                        break;

                    }
                    case 30 /* Module */ : {
                        if((allowedElements & 4 /* ModuleDeclarations */ ) == 0 /* None */ ) {
                            this.reportParseError("module not allowed in this context");
                            this.currentToken = this.scanner.scan();
                            ast = new TypeScript.AST(104 /* Error */ );
                            ast.minChar = minChar;
                            ast.limChar = this.scanner.lastTokenLimChar();
                        } else {
                            ast = this.parseModuleDecl(errorRecoverySet, modifiers);
                        }
                        break;

                    }
                    case 25 /* Import */ : {
                        if((allowedElements & 4 /* ModuleDeclarations */ ) == 0 /* None */ ) {
                            this.reportParseError("module not allowed in this context");
                            this.currentToken = this.scanner.scan();
                            ast = new TypeScript.AST(104 /* Error */ );
                            ast.minChar = minChar;
                            ast.limChar = this.scanner.lastTokenLimChar();
                        } else {
                            ast = this.parseImportDeclaration(errorRecoverySet, modifiers);
                            needTerminator = true;
                        }
                        break;

                    }
                    case 14 /* Export */ : {
                        if((allowedElements & 4 /* ModuleDeclarations */ ) == 0 /* None */ ) {
                            this.reportParseError("'export' statements are only allowed at the global and module levels");
                            this.currentToken = this.scanner.scan();
                            ast = new TypeScript.AST(104 /* Error */ );
                            ast.minChar = minChar;
                            ast.limChar = this.scanner.lastTokenLimChar();
                        }
                        if(this.topLevel) {
                            this.hasTopLevelImportOrExport = true;
                        }
                        modifiers |= 16 /* Exported */ ;
                        this.currentToken = this.scanner.scan();
                        break;

                    }
                    case 35 /* Private */ : {
                        modifiers |= 1 /* Private */ ;
                        this.currentToken = this.scanner.scan();
                        if(this.parsingClassConstructorDefinition) {
                            if(!this.inferPropertiesFromThisAssignment) {
                                this.reportParseError("Property declarations are not permitted within constructor bodies");
                            }
                            minChar = this.scanner.pos;
                            if(this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId != 44 /* This */  || (this.currentToken = this.scanner.scan()).tokenId != 101 /* Dot */ )) {
                                this.reportParseError("Expected 'this.' for property declaration");
                                this.currentToken = this.scanner.scan();
                                ast = new TypeScript.AST(104 /* Error */ );
                                ast.minChar = minChar;
                                ast.limChar = this.scanner.lastTokenLimChar();
                            } else {
                                this.currentToken = this.scanner.scan();
                                var id = TypeScript.Identifier.fromToken(this.currentToken);
                                id.minChar = this.scanner.startPos;
                                id.limChar = this.scanner.pos;
                                this.currentToken = this.scanner.scan();
                                ast = this.parseClassMemberVariableDeclaration(id, minChar, this.parsingClassConstructorDefinition, errorRecoverySet, modifiers);
                            }
                        } else {
                            if(this.currentToken.tokenId != 28 /* Interface */ ) {
                                if(this.currentToken.tokenId == 22 /* Get */ ) {
                                    this.prevIDTok = this.currentToken;
                                    this.currentToken = this.scanner.scan();
                                    if(TypeScript.codeGenTarget < 1 /* ES5 */ ) {
                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                                    }
                                    if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                                        modifiers |= 32 /* Getter */ ;
                                        this.prevIDTok = null;
                                    }
                                } else {
                                    if(this.currentToken.tokenId == 39 /* Set */ ) {
                                        this.prevIDTok = this.currentToken;
                                        this.currentToken = this.scanner.scan();
                                        if(TypeScript.codeGenTarget < 1 /* ES5 */ ) {
                                            this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                                        }
                                        if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                                            modifiers |= 64 /* Setter */ ;
                                            this.prevIDTok = null;
                                        }
                                    }
                                }
                                fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | 2 /* SColon */ , modifiers, isAmbient(), false);
                                if((fnOrVar.nodeType == 73 /* VarDecl */ ) || ((fnOrVar.nodeType == 71 /* FuncDecl */ ) && (TypeScript.hasFlag((fnOrVar).fncFlags, 32768 /* IsFatArrowFunction */ )))) {
                                    needTerminator = true;
                                }
                                ast = fnOrVar;
                            }
                        }
                        break;

                    }
                    case 37 /* Public */ : {
                        if(this.parsingClassConstructorDefinition) {
                            if(!this.inferPropertiesFromThisAssignment) {
                                this.reportParseError("Property declarations are not permitted within constructor bodies");
                            }
                            this.currentToken = this.scanner.scan();
                            minChar = this.scanner.pos;
                            modifiers |= 2 /* Public */ ;
                            if(this.inferPropertiesFromThisAssignment && (this.currentToken.tokenId != 44 /* This */  || (this.currentToken = this.scanner.scan()).tokenId != 101 /* Dot */ )) {
                                this.reportParseError("Expected 'this.' for property declaration");
                                this.currentToken = this.scanner.scan();
                                ast = new TypeScript.AST(104 /* Error */ );
                                ast.minChar = minChar;
                                ast.limChar = this.scanner.lastTokenLimChar();
                            } else {
                                this.currentToken = this.scanner.scan();
                                var id = TypeScript.Identifier.fromToken(this.currentToken);
                                id.minChar = this.scanner.startPos;
                                id.limChar = this.scanner.pos;
                                this.currentToken = this.scanner.scan();
                                ast = this.parseClassMemberVariableDeclaration(id, minChar, this.parsingClassConstructorDefinition, errorRecoverySet, modifiers);
                            }
                        } else {
                            if((allowedElements & 2048 /* Properties */ ) == 0 /* None */ ) {
                                this.reportParseError("'property' statements are only allowed within classes");
                                this.currentToken = this.scanner.scan();
                                ast = new TypeScript.AST(104 /* Error */ );
                                ast.minChar = minChar;
                                ast.limChar = this.scanner.lastTokenLimChar();
                            } else {
                                modifiers |= 2 /* Public */ ;
                                this.currentToken = this.scanner.scan();
                                if(this.currentToken.tokenId == 22 /* Get */ ) {
                                    this.prevIDTok = this.currentToken;
                                    this.currentToken = this.scanner.scan();
                                    if(TypeScript.codeGenTarget < 1 /* ES5 */ ) {
                                        this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                                    }
                                    if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                                        modifiers |= 32 /* Getter */ ;
                                        this.prevIDTok = null;
                                    }
                                } else {
                                    if(this.currentToken.tokenId == 39 /* Set */ ) {
                                        this.prevIDTok = this.currentToken;
                                        this.currentToken = this.scanner.scan();
                                        if(TypeScript.codeGenTarget < 1 /* ES5 */ ) {
                                            this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                                        }
                                        if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                                            modifiers |= 64 /* Setter */ ;
                                            this.prevIDTok = null;
                                        }
                                    }
                                }
                                fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | 2 /* SColon */ , modifiers, isAmbient(), false);
                                if((fnOrVar.nodeType == 73 /* VarDecl */ ) || ((fnOrVar.nodeType == 71 /* FuncDecl */ ) && TypeScript.hasFlag((fnOrVar).fncFlags, 32768 /* IsFatArrowFunction */ ))) {
                                    needTerminator = true;
                                }
                                ast = fnOrVar;
                            }
                        }
                        break;

                    }
                    case 16 /* Declare */ : {
                        if(!(allowedElements & 1024 /* AmbientDeclarations */ )) {
                            this.reportParseError("Ambient declarations are only allowed at the top-level or module scopes");
                        }
                        if(!this.parsingDeclareFile && TypeScript.hasFlag(parentModifiers, 8 /* Ambient */ )) {
                            this.reportParseError("Duplicate ambient declaration in this context. (Is the enclosing module or class already ambient?)");
                        }
                        modifiers |= 8 /* Ambient */ ;
                        this.currentToken = this.scanner.scan();
                        break;

                    }
                    case 5 /* Class */ : {
                        if((allowedElements & 8 /* ClassDeclarations */ ) == 0 /* None */ ) {
                            this.reportParseError("class not allowed in this context");
                            this.currentToken = this.scanner.scan();
                            ast = new TypeScript.AST(104 /* Error */ );
                            ast.minChar = minChar;
                            ast.limChar = this.scanner.lastTokenLimChar();
                        } else {
                            ast = this.parseClassDecl(errorRecoverySet, minChar, modifiers);
                        }
                        break;

                    }
                    case 28 /* Interface */ : {
                        if((allowedElements & 16 /* InterfaceDeclarations */ ) == 0 /* None */ ) {
                            this.reportParseError("interface not allowed in this context");
                            this.currentToken = this.scanner.scan();
                            ast = new TypeScript.AST(104 /* Error */ );
                            ast.minChar = minChar;
                            ast.limChar = this.scanner.lastTokenLimChar();
                        } else {
                            ast = this.parseInterfaceDecl(errorRecoverySet, modifiers);
                        }
                        break;

                    }
                    case 49 /* Var */ : {
                        var declAst = this.parseVariableDeclaration(errorRecoverySet | TypeScript.ErrorRecoverySet.StmtStart, modifiers, true, false);
                        if(declAst.nodeType == 73 /* VarDecl */ ) {
                            ast = declAst;
                        } else {
                            ast = new TypeScript.Block(declAst, false);
                        }
                        needTerminator = true;
                        break;

                    }
                    case 40 /* Static */ : {
                        if(this.currentClassDecl == null) {
                            this.reportParseError("Statics may only be class members");
                        }
                        mayNotBeExported();
                        modifiers |= 2 /* Public */ ;
                        this.currentToken = this.scanner.scan();
                        if(this.currentToken.tokenId == 22 /* Get */ ) {
                            this.prevIDTok = this.currentToken;
                            this.currentToken = this.scanner.scan();
                            if(TypeScript.codeGenTarget < 1 /* ES5 */ ) {
                                this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                            }
                            if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                                modifiers |= 32 /* Getter */ ;
                                this.prevIDTok = null;
                            }
                        } else {
                            if(this.currentToken.tokenId == 39 /* Set */ ) {
                                this.currentToken = this.scanner.scan();
                                if(TypeScript.codeGenTarget < 1 /* ES5 */ ) {
                                    this.reportParseError("Property accessors are only available when targeting ES5 or greater");
                                }
                                if((this.currentToken.tokenId == 106 /* Identifier */ ) || TypeScript.convertTokToID(this.currentToken, this.strictMode)) {
                                    modifiers |= 64 /* Setter */ ;
                                }
                            }
                        }
                        if(isAmbient()) {
                            modifiers |= 8 /* Ambient */ ;
                        }
                        fnOrVar = this.parsePropertyDeclaration(errorRecoverySet | 2 /* SColon */ , modifiers, this.parsingDeclareFile || (modifiers & 8 /* Ambient */ ) != 0 /* None */ , true);
                        var staticsList = this.topStaticsList();
                        if(staticsList && fnOrVar.nodeType == 73 /* VarDecl */ ) {
                            staticsList.append(fnOrVar);
                        }
                        if(fnOrVar.nodeType == 73 /* VarDecl */  || ((fnOrVar.nodeType == 71 /* FuncDecl */ ) && TypeScript.hasFlag((fnOrVar).fncFlags, 32768 /* IsFatArrowFunction */ ))) {
                            needTerminator = true;
                        }
                        ast = fnOrVar;
                        break;

                    }
                    case 19 /* For */ : {
                        mayNotBeExported();
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("syntax error: for statement does not take modifiers");
                        }
                        minChar = this.scanner.startPos;
                        this.checkNextToken(55 /* OpenParen */ , errorRecoverySet | TypeScript.ErrorRecoverySet.ExprStart | 2097152 /* Var */ );
                        this.state = 8 /* ForInit */ ;
                        forInOk = true;
                        switch(this.currentToken.tokenId) {
                            case 49 /* Var */ : {
                                temp = this.parseVariableDeclaration(errorRecoverySet | 2 /* SColon */  | 131072 /* In */ , 0 /* None */ , false, false);
                                break;

                            }
                            case 54 /* Semicolon */ : {
                                temp = null;
                                this.state = 10 /* ForCondStart */ ;
                                break;

                            }
                            default: {
                                temp = this.parseExpr(errorRecoverySet | 2 /* SColon */  | 131072 /* In */ , 0 /* None */ , false, 0 /* NoTypes */ );
                                break;

                            }
                        }
                        this.state = 9 /* ForInitAfterVar */ ;
                        if(this.currentToken.tokenId == 26 /* In */ ) {
                            if((temp == null) || (!forInOk)) {
                                this.reportParseError("malformed for statement");
                                if(this.errorRecovery) {
                                    this.skip(errorRecoverySet | TypeScript.ErrorRecoverySet.StmtStart);
                                    ast = new TypeScript.AST(1 /* Empty */ );
                                    ast.flags |= 8 /* Error */ ;
                                }
                            } else {
                                this.currentToken = this.scanner.scan();
                                var forInStmt = new TypeScript.ForInStatement(temp, this.parseExpr(64 /* RParen */  | errorRecoverySet, 1 /* Comma */ , false, 0 /* NoTypes */ ));
                                forInStmt.limChar = this.scanner.pos;
                                forInStmt.statement.minChar = minChar;
                                forInStmt.statement.limChar = this.scanner.pos;
                                this.checkCurrentToken(56 /* CloseParen */ , TypeScript.ErrorRecoverySet.StmtStart | errorRecoverySet);
                                this.pushStmt(forInStmt, labelList);
                                forInStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);
                                this.popStmt();
                                forInStmt.minChar = minChar;
                                ast = forInStmt;
                            }
                        } else {
                            var forStmt = new TypeScript.ForStatement(temp);
                            forStmt.minChar = minChar;
                            this.checkCurrentToken(54 /* Semicolon */ , errorRecoverySet);
                            if(this.currentToken.tokenId == 54 /* Semicolon */ ) {
                                forStmt.cond = null;
                            } else {
                                forStmt.cond = this.parseExpr(errorRecoverySet | 2 /* SColon */  | 64 /* RParen */ , 0 /* None */ , true, 0 /* NoTypes */ );
                                if(this.currentToken.tokenId != 54 /* Semicolon */ ) {
                                    this.skip(errorRecoverySet | TypeScript.ErrorRecoverySet.StmtStart);
                                    ast = forStmt;
                                    ast.flags |= 8 /* Error */ ;
                                }
                            }
                            this.currentToken = this.scanner.scan();
                            if(this.currentToken.tokenId == 56 /* CloseParen */ ) {
                                forStmt.incr = null;
                            } else {
                                forStmt.incr = this.parseExpr(errorRecoverySet | 2 /* SColon */  | 64 /* RParen */ , 0 /* None */ , true, 0 /* NoTypes */ );
                            }
                            this.checkCurrentToken(56 /* CloseParen */ , errorRecoverySet | 2048 /* LCurly */ );
                            this.pushStmt(forStmt, labelList);
                            forStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);
                            this.popStmt();
                            forStmt.limChar = forStmt.body.limChar;
                            ast = forStmt;
                        }
                        break;

                    }
                    case 51 /* With */ : {
 {
                            if(TypeScript.codeGenTarget < 1 /* ES5 */ ) {
                                this.reportParseError("'with' statements are only available in ES5 codegen mode or better");
                            }
                            if(this.strictMode) {
                                this.reportParseError("'with' statements are not available in strict mode");
                            }
                            mayNotBeExported();
                            if(modifiers != 0 /* None */ ) {
                                this.reportParseError("'with' statement does not take modifiers");
                            }
                            minChar = this.scanner.startPos;
                            this.checkNextToken(55 /* OpenParen */ , errorRecoverySet | TypeScript.ErrorRecoverySet.ExprStart | 2097152 /* Var */ );
                            var expr = this.parseExpr(errorRecoverySet | 256 /* Colon */ , 0 /* None */ , true, 0 /* NoTypes */ );
                            this.checkCurrentToken(56 /* CloseParen */ , errorRecoverySet | 2048 /* LCurly */ );
                            var withStmt = new TypeScript.WithStatement(expr);
                            withStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);
                            withStmt.minChar = minChar;
                            withStmt.limChar = withStmt.body.limChar;
                            ast = withStmt;
                        }
                        break;

                    }
                    case 43 /* Switch */ : {
                        mayNotBeExported();
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("'switch' statement does not take modifiers");
                        }
                        this.checkNextToken(55 /* OpenParen */ , errorRecoverySet | TypeScript.ErrorRecoverySet.ExprStart);
                        var switchStmt = new TypeScript.SwitchStatement(this.parseExpr(errorRecoverySet | 64 /* RParen */ , 0 /* None */ , true, 0 /* NoTypes */ ));
                        switchStmt.statement.minChar = minChar;
                        switchStmt.statement.limChar = this.scanner.pos;
                        this.checkCurrentToken(56 /* CloseParen */ , errorRecoverySet | 2048 /* LCurly */ );
                        var caseListMinChar = this.scanner.startPos;
                        this.checkCurrentToken(59 /* OpenBrace */ , errorRecoverySet | 262144 /* SCase */ );
                        switchStmt.defaultCase = null;
                        switchStmt.caseList = new TypeScript.ASTList();
                        var caseStmt = null;
                        this.pushStmt(switchStmt, labelList);
                        for(; ; ) {
                            if((this.currentToken.tokenId == 3 /* Case */ ) || (this.currentToken.tokenId == 9 /* Default */ )) {
                                var isDefault = (this.currentToken.tokenId == 9 /* Default */ );
                                caseStmt = new TypeScript.CaseStatement();
                                caseStmt.minChar = this.scanner.startPos;
                                this.currentToken = this.scanner.scan();
                                if(isDefault) {
                                    switchStmt.defaultCase = caseStmt;
                                } else {
                                    caseStmt.expr = this.parseExpr(errorRecoverySet | 256 /* Colon */ , 0 /* None */ , true, 0 /* NoTypes */ );
                                }
                                this.checkCurrentToken(75 /* Colon */ , errorRecoverySet | TypeScript.ErrorRecoverySet.StmtStart);
                                caseStmt.body = new TypeScript.ASTList();
                                this.parseStatementList(errorRecoverySet | 32 /* RCurly */ , caseStmt.body, false, true, allowedElements, modifiers);
                                caseStmt.limChar = caseStmt.body.limChar;
                                switchStmt.caseList.append(caseStmt);
                            } else {
                                break;
                            }
                        }
                        switchStmt.caseList.minChar = caseListMinChar;
                        switchStmt.caseList.limChar = this.scanner.pos;
                        switchStmt.limChar = switchStmt.caseList.limChar;
                        this.checkCurrentToken(60 /* CloseBrace */ , errorRecoverySet);
                        this.popStmt();
                        ast = switchStmt;
                        break;
                    }

                    case 52 /* While */ : {
                        mayNotBeExported();
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("'while' statement does not take modifiers");
                        }
                        minChar = this.scanner.startPos;
                        this.checkNextToken(55 /* OpenParen */ , TypeScript.ErrorRecoverySet.ExprStart | errorRecoverySet);
                        var whileStmt = new TypeScript.WhileStatement(this.parseExpr(errorRecoverySet | 64 /* RParen */ , 0 /* None */ , true, 0 /* NoTypes */ ));
                        whileStmt.minChar = minChar;
                        this.checkCurrentToken(56 /* CloseParen */ , errorRecoverySet | TypeScript.ErrorRecoverySet.StmtStart);
                        this.pushStmt(whileStmt, labelList);
                        whileStmt.body = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);
                        whileStmt.limChar = whileStmt.body.limChar;
                        this.popStmt();
                        ast = whileStmt;
                        break;
                    }

                    case 11 /* Do */ : {
                        mayNotBeExported();
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("'do' statement does not take modifiers");
                        }
                        minChar = this.scanner.startPos;
                        this.currentToken = this.scanner.scan();
                        var doStmt = new TypeScript.DoWhileStatement();
                        doStmt.minChar = minChar;
                        this.pushStmt(doStmt, labelList);
                        doStmt.body = this.parseStatement(errorRecoverySet | 8388608 /* While */ , allowedElements, parentModifiers);
                        this.popStmt();
                        doStmt.whileAST = new TypeScript.Identifier("while");
                        doStmt.whileAST.minChar = this.scanner.startPos;
                        this.checkCurrentToken(52 /* While */ , errorRecoverySet | 16384 /* LParen */ );
                        doStmt.whileAST.limChar = doStmt.whileAST.minChar + 5;
                        this.checkCurrentToken(55 /* OpenParen */ , errorRecoverySet | TypeScript.ErrorRecoverySet.ExprStart);
                        doStmt.cond = this.parseExpr(errorRecoverySet | 64 /* RParen */ , 0 /* None */ , true, 0 /* NoTypes */ );
                        doStmt.limChar = this.scanner.pos;
                        this.checkCurrentToken(56 /* CloseParen */ , errorRecoverySet);
                        ast = doStmt;
                        if(this.currentToken.tokenId == 54 /* Semicolon */ ) {
                            this.currentToken = this.scanner.scan();
                        }
                        break;
                    }

                    case 23 /* If */ : {
                        mayNotBeExported();
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("if statement does not take modifiers");
                        }
                        minChar = this.scanner.startPos;
                        this.checkNextToken(55 /* OpenParen */ , errorRecoverySet | TypeScript.ErrorRecoverySet.ExprStart);
                        var ifStmt = new TypeScript.IfStatement(this.parseExpr(errorRecoverySet | 16384 /* LParen */ , 0 /* None */ , true, 0 /* NoTypes */ ));
                        ifStmt.minChar = minChar;
                        ifStmt.statement.minChar = minChar;
                        ifStmt.statement.limChar = this.scanner.pos;
                        this.checkCurrentToken(56 /* CloseParen */ , errorRecoverySet | TypeScript.ErrorRecoverySet.StmtStart);
                        this.pushStmt(ifStmt, labelList);
                        ifStmt.thenBod = this.parseStatement(524288 /* Else */  | errorRecoverySet, allowedElements, parentModifiers);
                        ifStmt.limChar = ifStmt.thenBod.limChar;
                        if(this.currentToken.tokenId == 12 /* Else */ ) {
                            this.currentToken = this.scanner.scan();
                            ifStmt.elseBod = this.parseStatement(errorRecoverySet, allowedElements, parentModifiers);
                            ifStmt.limChar = ifStmt.elseBod.limChar;
                        }
                        this.popStmt();
                        ast = ifStmt;
                        break;
                    }

                    case 47 /* Try */ : {
                        mayNotBeExported();
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("try statement does not take modifiers");
                        }
                        minChar = this.scanner.startPos;
                        ast = this.parseTryCatchFinally(errorRecoverySet, parentModifiers, labelList);
                        break;
                    }

                    case 59 /* OpenBrace */ : {
                        mayNotBeExported();
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("block does not take modifiers");
                        }
                        minChar = this.scanner.startPos;
                        this.currentToken = this.scanner.scan();
                        var block = new TypeScript.Block(new TypeScript.ASTList(), true);
                        this.pushStmt(block, labelList);
                        this.parseStatementList(errorRecoverySet | 32 /* RCurly */ , block.statements, false, false, 0 /* None */ , modifiers);
                        this.popStmt();
                        block.statements.minChar = minChar;
                        block.statements.limChar = this.scanner.pos;
                        block.minChar = block.statements.minChar;
                        block.limChar = block.statements.limChar;
                        this.checkCurrentToken(60 /* CloseBrace */ , errorRecoverySet);
                        ast = block;
                        break;
                    }

                    case 54 /* Semicolon */ : {
                        mayNotBeExported();
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("modifier can not appear here");
                        }
                        ast = new TypeScript.AST(1 /* Empty */ );
                        this.currentToken = this.scanner.scan();
                        break;

                    }
                    case 2 /* Break */ :
                    case 7 /* Continue */ : {
                        mayNotBeExported();
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("modifiers can not appear before jump statement");
                        }
                        var jump = new TypeScript.Jump((this.currentToken.tokenId == 2 /* Break */ ) ? 76 /* Break */  : 77 /* Continue */ );
                        this.currentToken = this.scanner.scan();
                        if((this.currentToken.tokenId == 106 /* Identifier */ ) && (!this.scanner.lastTokenHadNewline())) {
                            jump.target = this.currentToken.getText();
                            this.currentToken = this.scanner.scan();
                        }
                        this.resolveJumpTarget(jump);
                        ast = jump;
                        needTerminator = true;
                        break;
                    }

                    case 38 /* Return */ : {
                        mayNotBeExported();
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("modifiers can not appear before return statement");
                        }
                        if(!this.inFunction) {
                            this.reportParseError("return statement outside of function body");
                        }
                        minChar = this.scanner.startPos;
                        this.currentToken = this.scanner.scan();
                        var retStmt = new TypeScript.ReturnStatement();
                        retStmt.minChar = minChar;
                        if((this.currentToken.tokenId != 54 /* Semicolon */ ) && (this.currentToken.tokenId != 60 /* CloseBrace */ ) && (!(this.scanner.lastTokenHadNewline()))) {
                            retStmt.returnExpression = this.parseExpr(errorRecoverySet | 2 /* SColon */ , 0 /* None */ , true, 0 /* NoTypes */ );
                        }
                        needTerminator = true;
                        retStmt.limChar = this.scanner.lastTokenLimChar();
                        ast = retStmt;
                        break;
                    }

                    case 45 /* Throw */ : {
                        mayNotBeExported();
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("modifiers can not appear before a throw statement");
                        }
                        minChar = this.scanner.startPos;
                        this.currentToken = this.scanner.scan();
                        if((this.currentToken.tokenId != 54 /* Semicolon */ ) && (this.currentToken.tokenId != 60 /* CloseBrace */ ) && (!(this.scanner.lastTokenHadNewline()))) {
                            temp = this.parseExpr(errorRecoverySet | 2 /* SColon */ , 0 /* None */ , true, 0 /* NoTypes */ );
                        } else {
                            this.reportParseError("throw with no target");
                            temp = null;
                        }
                        ast = new TypeScript.UnaryExpression(78 /* Throw */ , temp);
                        ast.limChar = this.scanner.lastTokenLimChar();
                        needTerminator = true;
                        break;

                    }
                    case 13 /* Enum */ : {
                        this.currentToken = this.scanner.scan();
                        ast = this.parseEnumDecl(errorRecoverySet, modifiers);
                        ast.minChar = minChar;
                        ast.limChar = this.scanner.lastTokenLimChar();
                        if(this.parsingDeclareFile || this.ambientModule || TypeScript.hasFlag(modifiers, 8 /* Ambient */ )) {
                            (ast).modFlags |= 8 /* Ambient */ ;
                        }
                        if(this.parsingDeclareFile || this.ambientModule || TypeScript.hasFlag(modifiers, 16 /* Exported */ )) {
                            (ast).modFlags |= 1 /* Exported */ ;
                        }
                        break;

                    }
                    case 8 /* Debugger */ : {
                        mayNotBeExported();
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("modifiers can not appear before debugger statement");
                        }
                        minChar = this.scanner.startPos;
                        this.currentToken = this.scanner.scan();
                        var debuggerStmt = new TypeScript.DebuggerStatement();
                        debuggerStmt.minChar = minChar;
                        needTerminator = true;
                        debuggerStmt.limChar = this.scanner.lastTokenLimChar();
                        ast = debuggerStmt;
                        break;

                    }
                    default: {
                        if(modifiers != 0 /* None */ ) {
                            this.reportParseError("modifiers can not appear before an expression statement or label");
                        }
                        minChar = this.scanner.startPos;
                        var svPos = this.scanner.pos;
                        temp = this.parseExpr(256 /* Colon */  | TypeScript.ErrorRecoverySet.StmtStart | errorRecoverySet, 0 /* None */ , true, 0 /* NoTypes */ );
                        if(this.scanner.pos == svPos) {
                            this.currentToken = this.scanner.scan();
                            ast = temp;
                        } else {
                            if((this.currentToken.tokenId == 75 /* Colon */ ) && (!this.scanner.lastTokenHadNewline()) && temp && (temp.nodeType == 25 /* Name */ )) {
                                if(labelList == null) {
                                    labelList = new TypeScript.ASTList();
                                }
                                labelList.append(new TypeScript.Label(temp));
                                this.currentToken = this.scanner.scan();
                            } else {
                                ast = temp;
                                needTerminator = true;
                            }
                        }

                    }
                }
                if(ast) {
                    break;
                }
            }
            if(needTerminator) {
                switch(this.currentToken.tokenId) {
                    case 54 /* Semicolon */ : {
                        this.currentToken = this.scanner.scan();
                        ast.flags |= 1 /* ExplicitSemicolon */ ;
                        break;

                    }
                    case 104 /* EndOfFile */ : {
                        ast.limChar = this.scanner.pos;

                    }
                    case 60 /* CloseBrace */ : {
                        ast.flags |= 2 /* AutomaticSemicolon */ ;
                        if(this.style_requireSemi) {
                            this.reportParseStyleError("no automatic semicolon");
                        }
                        break;

                    }
                    default: {
                        if(!this.scanner.lastTokenHadNewline()) {
                            this.reportParseError("Expected ';'");
                        } else {
                            ast.flags |= 2 /* AutomaticSemicolon */ ;
                            if(this.style_requireSemi) {
                                this.reportParseStyleError("no automatic semicolon");
                            }
                        }
                        break;

                    }
                }
            }
            if(labelList) {
                ast = new TypeScript.LabeledStatement(labelList, ast);
            }
            ast.minChar = minChar;
            ast.limChar = TypeScript.max(ast.limChar, this.scanner.lastTokenLimChar());
            ast.preComments = preComments;
            if(this.ambientModule && (!this.okAmbientModuleMember(ast))) {
                this.reportParseError("statement not permitted within ambient module");
            }
            ast.flags |= 64 /* IsStatement */ ;
            return ast;
        };
        Parser.prototype.okAmbientModuleMember = function (ast) {
            var nt = ast.nodeType;
            return (nt == 94 /* ClassDeclaration */ ) || (nt == 97 /* ImportDeclaration */ ) || (nt == 95 /* InterfaceDeclaration */ ) || (nt == 96 /* ModuleDeclaration */ ) || (nt == 1 /* Empty */ ) || (nt == 73 /* VarDecl */ ) || ((nt == 84 /* Block */ ) && !(ast).isStatementBlock) || ((nt == 71 /* FuncDecl */ ) && ((ast).isMethod()));
        };
        Parser.prototype.parseStatementList = function (errorRecoverySet, statements, sourceElms, noLeadingCase, allowedElements, parentModifiers) {
            var directivePrologue = sourceElms;
            statements.minChar = this.scanner.startPos;
            var limChar = this.scanner.pos;
            var innerStmts = (allowedElements & 4 /* ModuleDeclarations */ ) == 0 /* None */ ;
            var classNope = (allowedElements & 8 /* ClassDeclarations */ ) == 0 /* None */ ;
            errorRecoverySet |= 1073741824 /* TypeScriptS */  | 32 /* RCurly */ ;
            this.state = 2 /* StartStatementList */ ;
            var oldStrictMode = this.strictMode;
            this.nestingLevel++;
            for(; ; ) {
                if((this.currentToken.tokenId == 60 /* CloseBrace */ ) || (noLeadingCase && ((this.currentToken.tokenId == 3 /* Case */ ) || (this.currentToken.tokenId == 9 /* Default */ ))) || (innerStmts && (this.currentToken.tokenId == 14 /* Export */ )) || (classNope && (this.currentToken.tokenId == 5 /* Class */ )) || (this.currentToken.tokenId == 104 /* EndOfFile */ )) {
                    this.state = 11 /* EndStmtList */ ;
                    statements.limChar = limChar;
                    if(statements.members.length == 0) {
                        statements.preComments = this.parseComments();
                    } else {
                        statements.postComments = this.parseComments();
                    }
                    this.strictMode = oldStrictMode;
                    this.nestingLevel--;
                    return;
                }
                var stmt = this.parseStatement(errorRecoverySet & (~(524288 /* Else */  | 64 /* RParen */  | 1048576 /* Catch */  | 256 /* Colon */ )), allowedElements, parentModifiers);
                if(stmt) {
                    stmt.postComments = this.combineComments(stmt.postComments, this.parseCommentsForLine(this.scanner.prevLine));
                    statements.append(stmt);
                    limChar = stmt.limChar;
                    if(directivePrologue) {
                        if(stmt.nodeType == 7 /* QString */ ) {
                            var qstring = stmt;
                            if(qstring.text == "\"use strict\"") {
                                statements.flags |= 128 /* StrictMode */ ;
                                this.strictMode = true;
                            } else {
                                directivePrologue = false;
                            }
                        } else {
                            directivePrologue = false;
                        }
                    }
                }
            }
        };
        Parser.prototype.quickParse = function (sourceText, filename, unitIndex) {
            var svGenTarget = TypeScript.moduleGenTarget;
            try  {
                TypeScript.moduleGenTarget = 2 /* Local */ ;
                var script = this.parse(sourceText, filename, unitIndex, TypeScript.AllowedElements.QuickParse);
                return new QuickParseResult(script, this.scanner.lexState);
            }finally {
                TypeScript.moduleGenTarget = svGenTarget;
            }
        };
        Parser.prototype.parse = function (sourceText, filename, unitIndex, allowedElements) {
            if (typeof allowedElements === "undefined") { allowedElements = TypeScript.AllowedElements.Global; }
            var _this = this;
            this.ambientModule = false;
            this.topLevel = true;
            this.hasTopLevelImportOrExport = false;
            this.fname = filename;
            this.currentUnitIndex = unitIndex;
            this.amdDependencies = [];
            this.scanner.resetComments();
            this.scanner.setErrorHandler(function (message) {
                return _this.reportParseError(message);
            });
            this.scanner.setSourceText(sourceText, 1 /* File */ );
            var leftCurlyCount = this.scanner.leftCurlyCount;
            var rightCurlyCount = this.scanner.rightCurlyCount;
            var minChar = this.scanner.pos;
            this.currentToken = this.scanner.scan();
            this.pushDeclLists();
            var bod = new TypeScript.ASTList();
            bod.minChar = minChar;
            this.state = 1 /* StartScript */ ;
            this.parsingDeclareFile = TypeScript.isDSTRFile(filename) || TypeScript.isDTSFile(filename);
            this.parseStatementList(536870912 /* EOF */  | 268435456 /* Func */ , bod, true, false, allowedElements, 0 /* None */ );
            if(this.currentToken.tokenId != 104 /* EndOfFile */ ) {
                var badToken = TypeScript.tokenTable[this.currentToken.tokenId];
                this.reportParseError("Unexpected statement block terminator '" + badToken.text + "'");
            }
            this.state = 12 /* EndScript */ ;
            bod.limChar = this.scanner.pos;
            var topLevelMod = null;
            if(TypeScript.moduleGenTarget != 2 /* Local */  && this.hasTopLevelImportOrExport) {
                var correctedFileName = TypeScript.switchToForwardSlashes(filename);
                var id = new TypeScript.Identifier(correctedFileName);
                topLevelMod = new TypeScript.ModuleDeclaration(id, bod, this.topVarList(), this.topScopeList(), null);
                topLevelMod.modFlags |= 2048 /* IsDynamic */ ;
                topLevelMod.modFlags |= 1024 /* IsWholeFile */ ;
                topLevelMod.modFlags |= 1 /* Exported */ ;
                if(this.parsingDeclareFile) {
                    topLevelMod.modFlags |= 8 /* Ambient */ ;
                }
                topLevelMod.minChar = minChar;
                topLevelMod.limChar = this.scanner.pos;
                topLevelMod.prettyName = TypeScript.getPrettyName(correctedFileName);
                topLevelMod.containsUnicodeChar = this.scanner.seenUnicodeChar;
                topLevelMod.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;
                topLevelMod.amdDependencies = this.amdDependencies;
                bod = new TypeScript.ASTList();
                bod.minChar = topLevelMod.minChar;
                bod.limChar = topLevelMod.limChar;
                bod.append(topLevelMod);
            }
            var script = new TypeScript.Script(this.topVarList(), this.topScopeList());
            script.bod = bod;
            this.popDeclLists();
            script.minChar = minChar;
            script.limChar = this.scanner.pos;
            script.locationInfo = new TypeScript.LocationInfo(filename, this.scanner.lineMap, unitIndex);
            script.leftCurlyCount = this.scanner.leftCurlyCount - leftCurlyCount;
            script.rightCurlyCount = this.scanner.rightCurlyCount - rightCurlyCount;
            script.isDeclareFile = this.parsingDeclareFile;
            script.topLevelMod = topLevelMod;
            script.containsUnicodeChar = this.scanner.seenUnicodeChar;
            script.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;
            return script;
        };
        return Parser;
    })();
    TypeScript.Parser = Parser;    
    function quickParse(logger, scopeStartAST, sourceText, minChar, limChar, errorCapture) {
        var fragment = sourceText.getText(minChar, limChar);
        logger.log("Quick parse range (" + minChar + "," + limChar + "): \"" + TypeScript.stringToLiteral(fragment, 100) + "\"");
        var quickParser = new Parser();
        quickParser.setErrorRecovery(null);
        quickParser.errorCallback = errorCapture;
        var quickClassDecl = new TypeScript.ClassDeclaration(null, null, null, null);
        quickParser.currentClassDecl = quickClassDecl;
        var result = quickParser.quickParse(new TypeScript.StringSourceText(fragment), "", 0);
        return result;
    }
    TypeScript.quickParse = quickParse;
})(TypeScript || (TypeScript = {}));
var negative262ExpectedResults = {
    'Sbp_12.5_A9_T3.js': false,
    'Sbp_12.6.1_A13_T3.js': false,
    'Sbp_12.6.2_A13_T3.js': false,
    'Sbp_12.6.4_A13_T3.js': false,
    'Sbp_7.8.4_A6.1_T4.js': false,
    'Sbp_7.8.4_A6.2_T1.js': false,
    'Sbp_7.8.4_A6.2_T2.js': false,
    'Sbp_A1_T1.js': true,
    'Sbp_A2_T1.js': true,
    'Sbp_A2_T2.js': true,
    'Sbp_A3_T1.js': true,
    'Sbp_A3_T2.js': true,
    'Sbp_A4_T1.js': true,
    'Sbp_A4_T2.js': true,
    'Sbp_A5_T1.js': true,
    'Sbp_A5_T2.js': true,
    'S7.2_A5_T1.js': false,
    'S7.2_A5_T2.js': false,
    'S7.2_A5_T3.js': false,
    'S7.2_A5_T4.js': false,
    'S7.2_A5_T5.js': false,
    'S7.3_A2.1_T1.js': true,
    'S7.3_A2.1_T2.js': false,
    'S7.3_A2.2_T1.js': true,
    'S7.3_A2.2_T2.js': false,
    'S7.3_A2.3.js': true,
    'S7.3_A2.4.js': true,
    'S7.3_A3.1_T1.js': true,
    'S7.3_A3.1_T2.js': true,
    'S7.3_A3.1_T3.js': false,
    'S7.3_A3.2_T1.js': true,
    'S7.3_A3.2_T2.js': true,
    'S7.3_A3.2_T3.js': false,
    'S7.3_A3.3_T1.js': true,
    'S7.3_A3.3_T2.js': true,
    'S7.3_A3.4_T1.js': true,
    'S7.3_A3.4_T2.js': true,
    'S7.3_A6_T1.js': false,
    'S7.3_A6_T2.js': false,
    'S7.3_A6_T3.js': false,
    'S7.3_A6_T4.js': false,
    'S7.4_A2_T2.js': false,
    'S7.4_A3.js': false,
    'S7.4_A4_T1.js': false,
    'S7.4_A4_T4.js': false,
    'S7.6.1.1_A1.1.js': false,
    'S7.6.1.1_A1.10.js': false,
    'S7.6.1.1_A1.11.js': false,
    'S7.6.1.1_A1.12.js': false,
    'S7.6.1.1_A1.13.js': false,
    'S7.6.1.1_A1.14.js': false,
    'S7.6.1.1_A1.15.js': false,
    'S7.6.1.1_A1.16.js': false,
    'S7.6.1.1_A1.17.js': false,
    'S7.6.1.1_A1.18.js': true,
    'S7.6.1.1_A1.19.js': false,
    'S7.6.1.1_A1.2.js': false,
    'S7.6.1.1_A1.20.js': false,
    'S7.6.1.1_A1.21.js': false,
    'S7.6.1.1_A1.22.js': false,
    'S7.6.1.1_A1.23.js': false,
    'S7.6.1.1_A1.24.js': false,
    'S7.6.1.1_A1.25.js': false,
    'S7.6.1.1_A1.3.js': false,
    'S7.6.1.1_A1.4.js': false,
    'S7.6.1.1_A1.5.js': false,
    'S7.6.1.1_A1.6.js': false,
    'S7.6.1.1_A1.7.js': false,
    'S7.6.1.1_A1.8.js': false,
    'S7.6.1.1_A1.9.js': false,
    'S7.6.1.2_A1.10.js': false,
    'S7.6.1.2_A1.11.js': false,
    'S7.6.1.2_A1.15.js': false,
    'S7.6.1.2_A1.16.js': false,
    'S7.6.1.2_A1.18.js': false,
    'S7.6.1.2_A1.21.js': false,
    'S7.6.1.2_A1.22.js': false,
    'S7.6.1.2_A1.23.js': false,
    'S7.6.1.2_A1.24.js': false,
    'S7.6.1.2_A1.26.js': false,
    'S7.6.1.2_A1.27.js': false,
    'S7.6.1.2_A1.5.js': false,
    'S7.6.1.2_A1.6.js': false,
    'S7.6.1.2_A1.7.js': false,
    'S7.6.1.2_A1.9.js': false,
    '7.6.1.2-1gs.js': false,
    'S7.6.1_A1.1.js': true,
    'S7.6.1_A1.2.js': true,
    'S7.6.1_A1.3.js': true,
    'S7.7_A2_T1.js': false,
    'S7.7_A2_T10.js': false,
    'S7.7_A2_T2.js': false,
    'S7.7_A2_T3.js': false,
    'S7.7_A2_T4.js': false,
    'S7.7_A2_T5.js': false,
    'S7.7_A2_T6.js': false,
    'S7.7_A2_T7.js': false,
    'S7.7_A2_T8.js': false,
    'S7.7_A2_T9.js': false,
    '7.8.3-1gs.js': true,
    '7.8.3-2gs.js': true,
    '7.8.3-3gs.js': true,
    'S7.8.3_A4.1_T1.js': true,
    'S7.8.3_A4.1_T2.js': true,
    'S7.8.3_A4.1_T3.js': true,
    'S7.8.3_A4.1_T4.js': true,
    'S7.8.3_A4.1_T5.js': true,
    'S7.8.3_A4.1_T6.js': true,
    'S7.8.3_A4.1_T7.js': true,
    'S7.8.3_A4.1_T8.js': true,
    'S7.8.3_A6.1_T1.js': false,
    'S7.8.3_A6.1_T2.js': false,
    'S7.8.3_A6.2_T1.js': false,
    'S7.8.3_A6.2_T2.js': false,
    '7.8.4-1gs.js': true,
    'S7.8.4_A1.1_T1.js': false,
    'S7.8.4_A1.1_T2.js': false,
    'S7.8.4_A1.2_T1.js': false,
    'S7.8.4_A1.2_T2.js': false,
    'S7.8.4_A3.1_T1.js': false,
    'S7.8.4_A3.1_T2.js': false,
    'S7.8.4_A3.2_T1.js': false,
    'S7.8.4_A3.2_T2.js': false,
    'S7.8.4_A4.3_T1.js': true,
    'S7.8.4_A4.3_T2.js': true,
    'S7.8.4_A7.1_T4.js': false,
    'S7.8.4_A7.2_T1.js': false,
    'S7.8.4_A7.2_T2.js': false,
    'S7.8.4_A7.2_T3.js': false,
    'S7.8.4_A7.2_T4.js': false,
    'S7.8.4_A7.2_T5.js': false,
    'S7.8.4_A7.2_T6.js': false,
    '7.8.5-1gs.js': false,
    'S7.8.5_A1.2_T1.js': false,
    'S7.8.5_A1.2_T2.js': false,
    'S7.8.5_A1.2_T3.js': false,
    'S7.8.5_A1.2_T4.js': false,
    'S7.8.5_A1.3_T1.js': false,
    'S7.8.5_A1.3_T3.js': false,
    'S7.8.5_A1.5_T1.js': false,
    'S7.8.5_A1.5_T3.js': false,
    'S7.8.5_A2.2_T1.js': false,
    'S7.8.5_A2.2_T2.js': false,
    'S7.8.5_A2.3_T1.js': false,
    'S7.8.5_A2.3_T3.js': false,
    'S7.8.5_A2.5_T1.js': false,
    'S7.8.5_A2.5_T3.js': false,
    'S7.9.2_A1_T1.js': false,
    'S7.9.2_A1_T3.js': false,
    'S7.9.2_A1_T6.js': false,
    'S7.9_A10_T2.js': false,
    'S7.9_A10_T4.js': false,
    'S7.9_A10_T6.js': false,
    'S7.9_A10_T8.js': false,
    'S7.9_A11_T4.js': false,
    'S7.9_A11_T8.js': false,
    'S7.9_A4.js': false,
    'S7.9_A5.1_T1.js': false,
    'S7.9_A5.3_T1.js': false,
    'S7.9_A5.7_T1.js': true,
    'S7.9_A6.2_T1.js': false,
    'S7.9_A6.2_T10.js': false,
    'S7.9_A6.2_T2.js': false,
    'S7.9_A6.2_T3.js': false,
    'S7.9_A6.2_T4.js': false,
    'S7.9_A6.2_T5.js': false,
    'S7.9_A6.2_T6.js': false,
    'S7.9_A6.2_T7.js': false,
    'S7.9_A6.2_T8.js': false,
    'S7.9_A6.2_T9.js': false,
    'S7.9_A6.3_T1.js': false,
    'S7.9_A6.3_T2.js': false,
    'S7.9_A6.3_T3.js': false,
    'S7.9_A6.3_T4.js': false,
    'S7.9_A6.3_T5.js': false,
    'S7.9_A6.3_T6.js': false,
    'S7.9_A6.3_T7.js': false,
    'S7.9_A6.4_T1.js': false,
    'S7.9_A6.4_T2.js': false,
    'S7.9_A7_T7.js': true,
    'S7.9_A9_T6.js': false,
    'S7.9_A9_T7.js': false,
    'S7.9_A9_T8.js': false,
    'S8.2_A2.js': false,
    'S8.3_A2.1.js': true,
    'S8.3_A2.2.js': true,
    'S8.4_A13_T1.js': false,
    'S8.4_A13_T2.js': false,
    'S8.4_A13_T3.js': false,
    'S8.4_A14_T1.js': false,
    'S8.4_A14_T2.js': false,
    'S8.4_A14_T3.js': false,
    'S8.4_A7.1.js': true,
    'S8.4_A7.2.js': true,
    'S8.4_A7.3.js': true,
    'S8.4_A7.4.js': true,
    'S8.6.2_A7.js': true,
    '8.7.2-3-a-1gs.js': true,
    '8.7.2-3-a-2gs.js': true,
    'S8.7.2_A1_T1.js': true,
    'S8.7.2_A1_T2.js': true,
    '10.1.1-2gs.js': false,
    '10.1.1-5gs.js': false,
    '10.1.1-8gs.js': false,
    '10.4.2.1-1gs.js': true,
    '10.5-1gs.js': true,
    '10.6-2gs.js': true,
    'S11.1.1_A1.js': true,
    '11.1.5-1gs.js': true,
    '11.1.5-2gs.js': true,
    '11.13.1-4-28gs.js': true,
    '11.13.1-4-29gs.js': true,
    'S11.13.1_A2.1_T3.js': true,
    '11.13.2-6-1gs.js': true,
    'S11.13.2_A2.2_T1.js': true,
    'S11.13.2_A2.2_T10.js': true,
    'S11.13.2_A2.2_T11.js': true,
    'S11.13.2_A2.2_T2.js': true,
    'S11.13.2_A2.2_T3.js': true,
    'S11.13.2_A2.2_T4.js': true,
    'S11.13.2_A2.2_T5.js': true,
    'S11.13.2_A2.2_T6.js': true,
    'S11.13.2_A2.2_T7.js': true,
    'S11.13.2_A2.2_T8.js': true,
    'S11.13.2_A2.2_T9.js': true,
    'S11.2.4_A1.3_T1.js': false,
    '11.3.1-2-1gs.js': true,
    'S11.3.1_A1.1_T1.js': true,
    'S11.3.1_A1.1_T2.js': true,
    'S11.3.1_A1.1_T3.js': true,
    'S11.3.1_A1.1_T4.js': true,
    'S11.3.1_A2.1_T3.js': true,
    'S11.3.2_A1.1_T1.js': true,
    'S11.3.2_A1.1_T2.js': true,
    'S11.3.2_A1.1_T3.js': true,
    'S11.3.2_A1.1_T4.js': true,
    'S11.3.2_A2.1_T3.js': true,
    '11.4.1-5-a-5gs.js': true,
    'S11.4.2_A2_T2.js': true,
    'S11.4.4_A2.1_T3.js': true,
    '11.4.5-2-2gs.js': true,
    'S11.4.5_A2.1_T3.js': true,
    'S12.1_A4_T1.js': false,
    'S12.1_A4_T2.js': false,
    '12.10.1-11gs.js': true,
    'S12.11_A2_T1.js': true,
    'S12.11_A3_T1.js': false,
    'S12.11_A3_T2.js': false,
    'S12.11_A3_T3.js': false,
    'S12.11_A3_T4.js': false,
    'S12.11_A3_T5.js': false,
    'S12.13_A1.js': true,
    '12.14.1-1gs.js': true,
    'S12.14_A16_T1.js': false,
    'S12.14_A16_T10.js': false,
    'S12.14_A16_T11.js': false,
    'S12.14_A16_T12.js': false,
    'S12.14_A16_T13.js': false,
    'S12.14_A16_T14.js': false,
    'S12.14_A16_T15.js': false,
    'S12.14_A16_T2.js': false,
    'S12.14_A16_T3.js': false,
    'S12.14_A16_T4.js': false,
    'S12.14_A16_T5.js': false,
    'S12.14_A16_T6.js': false,
    'S12.14_A16_T7.js': false,
    'S12.14_A16_T8.js': false,
    'S12.14_A16_T9.js': false,
    '12.2.1-1gs.js': true,
    '12.2.1-4gs.js': true,
    'S12.2_A8_T1.js': false,
    'S12.2_A8_T2.js': false,
    'S12.2_A8_T3.js': false,
    'S12.2_A8_T4.js': false,
    'S12.2_A8_T5.js': false,
    'S12.2_A8_T6.js': false,
    'S12.2_A8_T7.js': false,
    'S12.2_A8_T8.js': false,
    'S12.4_A1.js': false,
    'S12.5_A11.js': false,
    'S12.5_A2.js': true,
    'S12.5_A6_T1.js': false,
    'S12.5_A6_T2.js': false,
    'S12.5_A8.js': false,
    'S12.6.1_A12.js': false,
    'S12.6.1_A15.js': false,
    'S12.6.1_A6_T1.js': false,
    'S12.6.1_A6_T2.js': false,
    'S12.6.1_A6_T3.js': false,
    'S12.6.1_A6_T4.js': false,
    'S12.6.1_A6_T5.js': false,
    'S12.6.1_A6_T6.js': false,
    'S12.6.2_A15.js': false,
    'S12.6.2_A6_T1.js': false,
    'S12.6.2_A6_T2.js': false,
    'S12.6.2_A6_T3.js': false,
    'S12.6.2_A6_T4.js': false,
    'S12.6.2_A6_T5.js': false,
    'S12.6.2_A6_T6.js': false,
    'S12.6.3_A11.1_T3.js': true,
    'S12.6.3_A11_T3.js': true,
    'S12.6.3_A12.1_T3.js': true,
    'S12.6.3_A12_T3.js': true,
    'S12.6.3_A4.1.js': false,
    'S12.6.3_A4_T1.js': false,
    'S12.6.3_A4_T2.js': false,
    'S12.6.3_A7.1_T1.js': false,
    'S12.6.3_A7.1_T2.js': false,
    'S12.6.3_A7_T1.js': false,
    'S12.6.3_A7_T2.js': false,
    'S12.6.3_A8.1_T1.js': false,
    'S12.6.3_A8.1_T2.js': false,
    'S12.6.3_A8.1_T3.js': false,
    'S12.6.3_A8_T1.js': false,
    'S12.6.3_A8_T2.js': false,
    'S12.6.3_A8_T3.js': false,
    'S12.6.4_A15.js': false,
    'S12.7_A1_T1.js': true,
    'S12.7_A1_T2.js': true,
    'S12.7_A1_T3.js': true,
    'S12.7_A1_T4.js': true,
    'S12.7_A5_T1.js': true,
    'S12.7_A5_T2.js': true,
    'S12.7_A5_T3.js': true,
    'S12.7_A6.js': true,
    'S12.7_A8_T1.js': true,
    'S12.7_A8_T2.js': true,
    'S12.8_A1_T1.js': true,
    'S12.8_A1_T2.js': true,
    'S12.8_A1_T3.js': true,
    'S12.8_A1_T4.js': true,
    'S12.8_A5_T1.js': true,
    'S12.8_A5_T2.js': true,
    'S12.8_A5_T3.js': true,
    'S12.8_A6.js': true,
    'S12.8_A8_T1.js': true,
    'S12.8_A8_T2.js': true,
    'S12.9_A1_T1.js': true,
    'S12.9_A1_T10.js': true,
    'S12.9_A1_T2.js': true,
    'S12.9_A1_T3.js': true,
    'S12.9_A1_T4.js': true,
    'S12.9_A1_T5.js': true,
    'S12.9_A1_T6.js': true,
    'S12.9_A1_T7.js': true,
    'S12.9_A1_T8.js': true,
    'S12.9_A1_T9.js': true,
    '13.0_4-17gs.js': true,
    '13.0_4-5gs.js': true,
    'S13_A7_T3.js': false,
    '13.1-13gs.js': true,
    '13.1-1gs.js': true,
    '13.1-4gs.js': true,
    '13.1-5gs.js': true,
    '13.1-8gs.js': true,
    '13.2-19-b-3gs.js': true,
    '14.1-4gs.js': true,
    '14.1-5gs.js': true,
    'S15.1.2.1_A2_T2.js': true,
    'S15.1_A1_T1.js': true,
    'S15.1_A1_T2.js': true,
    'S15.1_A2_T1.js': true,
    'S15.2.4.3_A12.js': true,
    'S15.2.4.3_A13.js': true,
    'S15.2.4.4_A12.js': true,
    'S15.2.4.4_A13.js': true,
    'S15.2.4.4_A14.js': true,
    'S15.2.4.4_A15.js': true,
    'S15.2.4.5_A12.js': true,
    'S15.2.4.5_A13.js': true,
    'S15.2.4.6_A12.js': true,
    'S15.2.4.6_A13.js': true,
    'S15.2.4.7_A12.js': true,
    'S15.2.4.7_A13.js': true,
    '15.3.2.1-10-4gs.js': true,
    '15.3.2.1-10-6gs.js': true,
    'S15.3.4.2_A12.js': true,
    'S15.3.4.2_A13.js': true,
    'S15.3.4.2_A14.js': true,
    'S15.3.4.2_A15.js': true,
    'S15.3.4.2_A16.js': true,
    'S15.3.4.3_A13.js': true,
    'S15.3.4.3_A14.js': true,
    'S15.3.4.3_A15.js': true,
    'S15.3.4.4_A13.js': true,
    'S15.3.4.4_A14.js': true,
    'S15.3.4.4_A15.js': true,
    'S15.3.4.5_A1.js': true,
    'S15.3.4.5_A13.js': true,
    'S15.3.4.5_A14.js': true,
    'S15.3.4.5_A15.js': true,
    'S15.3.4.5_A2.js': true,
    '15.3.5.4_2-10gs.js': true,
    '15.3.5.4_2-11gs.js': true,
    '15.3.5.4_2-13gs.js': true,
    '15.3.5.4_2-15gs.js': true,
    '15.3.5.4_2-16gs.js': true,
    '15.3.5.4_2-17gs.js': true,
    '15.3.5.4_2-18gs.js': true,
    '15.3.5.4_2-19gs.js': true,
    '15.3.5.4_2-1gs.js': true,
    '15.3.5.4_2-20gs.js': true,
    '15.3.5.4_2-21gs.js': true,
    '15.3.5.4_2-22gs.js': true,
    '15.3.5.4_2-23gs.js': true,
    '15.3.5.4_2-24gs.js': true,
    '15.3.5.4_2-25gs.js': true,
    '15.3.5.4_2-26gs.js': true,
    '15.3.5.4_2-27gs.js': true,
    '15.3.5.4_2-28gs.js': true,
    '15.3.5.4_2-29gs.js': true,
    '15.3.5.4_2-2gs.js': true,
    '15.3.5.4_2-30gs.js': true,
    '15.3.5.4_2-31gs.js': true,
    '15.3.5.4_2-32gs.js': true,
    '15.3.5.4_2-33gs.js': true,
    '15.3.5.4_2-34gs.js': true,
    '15.3.5.4_2-35gs.js': true,
    '15.3.5.4_2-36gs.js': true,
    '15.3.5.4_2-37gs.js': true,
    '15.3.5.4_2-38gs.js': true,
    '15.3.5.4_2-39gs.js': true,
    '15.3.5.4_2-3gs.js': true,
    '15.3.5.4_2-40gs.js': true,
    '15.3.5.4_2-41gs.js': true,
    '15.3.5.4_2-42gs.js': true,
    '15.3.5.4_2-43gs.js': true,
    '15.3.5.4_2-44gs.js': true,
    '15.3.5.4_2-45gs.js': true,
    '15.3.5.4_2-46gs.js': true,
    '15.3.5.4_2-47gs.js': true,
    '15.3.5.4_2-48gs.js': true,
    '15.3.5.4_2-49gs.js': true,
    '15.3.5.4_2-4gs.js': true,
    '15.3.5.4_2-50gs.js': true,
    '15.3.5.4_2-51gs.js': true,
    '15.3.5.4_2-52gs.js': true,
    '15.3.5.4_2-53gs.js': true,
    '15.3.5.4_2-54gs.js': true,
    '15.3.5.4_2-55gs.js': true,
    '15.3.5.4_2-56gs.js': true,
    '15.3.5.4_2-57gs.js': true,
    '15.3.5.4_2-58gs.js': true,
    '15.3.5.4_2-59gs.js': true,
    '15.3.5.4_2-5gs.js': true,
    '15.3.5.4_2-60gs.js': true,
    '15.3.5.4_2-61gs.js': true,
    '15.3.5.4_2-62gs.js': true,
    '15.3.5.4_2-63gs.js': true,
    '15.3.5.4_2-64gs.js': true,
    '15.3.5.4_2-65gs.js': true,
    '15.3.5.4_2-66gs.js': true,
    '15.3.5.4_2-67gs.js': true,
    '15.3.5.4_2-68gs.js': true,
    '15.3.5.4_2-69gs.js': true,
    '15.3.5.4_2-6gs.js': true,
    '15.3.5.4_2-70gs.js': true,
    '15.3.5.4_2-71gs.js': true,
    '15.3.5.4_2-72gs.js': true,
    '15.3.5.4_2-73gs.js': true,
    '15.3.5.4_2-74gs.js': true,
    '15.3.5.4_2-7gs.js': true,
    '15.3.5.4_2-8gs.js': true,
    '15.3.5.4_2-94gs.js': true,
    '15.3.5.4_2-95gs.js': true,
    '15.3.5.4_2-96gs.js': true,
    '15.3.5.4_2-97gs.js': true,
    '15.3.5.4_2-9gs.js': true,
    '15.3.5-1gs.js': true,
    '15.3.5-2gs.js': true
};
var expectedTop1000Failures = {
    "JSFile100\\4shared_com\\UploadModule.js": true,
    "JSFile100\\addthis_com\\addthis_widget.js": true,
    "JSFile100\\advertising_com\\SearchAdx.js": true,
    "JSFile100\\amazon_com\\31LH4rzJ12L.js": true,
    "JSFile100\\amazon_com\\41I6sSH7HlL.js": true,
    "JSFile100\\amazon_com\\jquery_generateId_min.js": true,
    "JSFile100\\amazon_com\\jquery_ui_1_7_2_full_min__V231321143_.js": true,
    "JSFile100\\amazon_com\\site_wide_9412776343_js__V176430692_.js": true,
    "JSFile100\\amazon_com\\site_wide_9412776343_js__V176430992_.js": true,
    "JSFile100\\amazon_com\\site_wide_9412776343_js__V176431069_.js": true,
    "JSFile100\\amazon_com\\twister_dpf_68eca0c5893503e830a51ce9f47cb26f__V1_.js": true,
    "JSFile100\\ameba_jp\\apm001.js": true,
    "JSFile100\\ameba_jp\\prototype.js": true,
    "JSFile100\\atdmt_com\\020295.js": true,
    "JSFile100\\atdmt_com\\036540.js": true,
    "JSFile100\\atdmt_com\\063181.js": true,
    "JSFile100\\atdmt_com\\099052.js": true,
    "JSFile100\\atdmt_com\\099483.js": true,
    "JSFile100\\atdmt_com\\251496.js": true,
    "JSFile100\\baidu_com\\common_logic.js": true,
    "JSFile100\\baidu_com\\tangram_1_3_4.js": true,
    "JSFile100\\bing_com\\Basics.js": true,
    "JSFile100\\bing_com\\common.js": true,
    "JSFile100\\bing_com\\ga_downloads.js": true,
    "JSFile100\\bing_com\\jquery_1_2_6_min.js": true,
    "JSFile100\\bing_com\\JScript.js": true,
    "JSFile100\\bing_com\\mm_other.js": true,
    "JSFile100\\bing_com\\store_v2011_06_22T15_54_10_029894.js": true,
    "JSFile100\\comcast_net\\date_functions.js": true,
    "JSFile100\\comcast_net\\navigation.js": true,
    "JSFile100\\comcast_net\\prototype.js": true,
    "JSFile100\\comcast_net\\ScriptResource.js": true,
    "JSFile100\\conduit_com\\ScriptResource.js": true,
    "JSFile100\\conduit_com\\ToolbarApi.js": true,
    "JSFile100\\daum_net\\dwi.js": true,
    "JSFile100\\doubleclick_net\\activityj_src_3053589_type_aetna278_cat_aetna630_ord_1594972658181_9756__oref_http_3A_2F_2Fwww_aetna.js": true,
    "JSFile100\\doubleclick_net\\activityj_src_3053589_type_aetna278_cat_aetna630_ord_4333618947225_845__oref_http_3A_2F_2Fwww_aetna_com_2Findex.js": true,
    "JSFile100\\ebay_com\\cb.js": true,
    "JSFile100\\ebay_com\\_W0QQ_kwZsterlingQ20silverQQ_ipcZ12QQ_sacatZ20081QQ_tccZ1QQ_trksidZp3910Q2ec0Q2em476.js": true,
    "JSFile100\\facebook_com\\ccPAy08Ly48.js": true,
    "JSFile100\\facebook_com\\connect_widget.js": true,
    "JSFile100\\facebook_com\\effects.js": true,
    "JSFile100\\facebook_com\\es_LA.js": true,
    "JSFile100\\facebook_com\\recaptcha_log_actions.js": true,
    "JSFile100\\facebook_com\\ro_RO.js": true,
    "JSFile100\\fbcdn_net\\6S8W9_zcvGH.js": true,
    "JSFile100\\fbcdn_net\\9_dckM9jIt0.js": true,
    "JSFile100\\fbcdn_net\\ccPAy08Ly48.js": true,
    "JSFile100\\fbcdn_net\\cjGVVT_Axlo.js": true,
    "JSFile100\\fbcdn_net\\core_debug.js": true,
    "JSFile100\\fbcdn_net\\kaB5S3IyTBe.js": true,
    "JSFile100\\fbcdn_net\\MqvK7VXJgCY.js": true,
    "JSFile100\\fbcdn_net\\sqp_kHZ_Qlq.js": true,
    "JSFile100\\fbcdn_net\\srR6tvfNW7A.js": true,
    "JSFile100\\fbcdn_net\\_cjnlpfdzsL.js": true,
    "JSFile100\\fbcdn_net\\_HGgdHuenxe.js": true,
    "JSFile100\\fc2_com\\jquery_1_3_1_min.js": true,
    "JSFile100\\fc2_com\\prototype_1_4_0.js": true,
    "JSFile100\\google_ca\\config.js": true,
    "JSFile100\\google_com\\1b0cae797ecab5178544982aac004575embedcompiled__ru.js": true,
    "JSFile100\\google_com\\277100262_v2_EmbedSlideshow.js": true,
    "JSFile100\\google_com\\2967097199_EmbedSlideshow_ru.js": true,
    "JSFile100\\google_com\\96fcbc293acd8d22835c209724b3e6c1embedcompiled__en.js": true,
    "JSFile100\\google_com\\96fcbc293acd8d22835c209724b3e6c1embedcompiled__ru.js": true,
    "JSFile100\\google_com\\aggregates.js": true,
    "JSFile100\\google_com\\com_google_checkout_gadgets_embeddedbuy2_client_embeddedbuy2_nocache.js": true,
    "JSFile100\\google_com\\config.js": true,
    "JSFile100\\google_com\\core.js": true,
    "JSFile100\\google_com\\default_browserchart_columnchart_I.js": true,
    "JSFile100\\google_com\\d_1.js": true,
    "JSFile100\\google_com\\j.js": true,
    "JSFile100\\google_com\\lang_dropdown.js": true,
    "JSFile100\\google_com\\main.js": true,
    "JSFile100\\google_com\\s.js": true,
    "JSFile100\\google_com\\sayt.js": true,
    "JSFile100\\google_com\\_7Bcommon_util_7D.js": true,
    "JSFile100\\google_com\\_7Bmod_api_gc_mod_drag_mod_ctrapi_7D.js": true,
    "JSFile100\\google_co_jp\\br.js": true,
    "JSFile100\\google_de\\brand.js": true,
    "JSFile100\\google_it\\config.js": true,
    "JSFile100\\go_com\\acm_placealink_com.js": true,
    "JSFile100\\go_com\\ActiveWidgets.js": true,
    "JSFile100\\go_com\\ad.js": true,
    "JSFile100\\go_com\\animals_slideshow_older.js": true,
    "JSFile100\\go_com\\animals_slideshow_older2.js": true,
    "JSFile100\\go_com\\applyfonts.js": true,
    "JSFile100\\go_com\\cctb.js": true,
    "JSFile100\\go_com\\checkenviroment_1_0_1.js": true,
    "JSFile100\\go_com\\ckeditor.js": true,
    "JSFile100\\go_com\\clearvalue.js": true,
    "JSFile100\\go_com\\cmdatatagutils.js": true,
    "JSFile100\\go_com\\commons.js": true,
    "JSFile100\\go_com\\common_functions.js": true,
    "JSFile100\\go_com\\cookieinfo.js": true,
    "JSFile100\\go_com\\default.js": true,
    "JSFile100\\go_com\\dhtmlSuite_calendar.js": true,
    "JSFile100\\go_com\\dolWebAnalytics.js": true,
    "JSFile100\\go_com\\droppy.js": true,
    "JSFile100\\go_com\\engine.js": true,
    "JSFile100\\go_com\\externallinks.js": true,
    "JSFile100\\go_com\\FlashStatsAPI_Parser.js": true,
    "JSFile100\\go_com\\FlashVersionCheck.js": true,
    "JSFile100\\go_com\\footer.js": true,
    "JSFile100\\go_com\\freegames0717.js": true,
    "JSFile100\\go_com\\globalscripts.js": true,
    "JSFile100\\go_com\\global_library.js": true,
    "JSFile100\\go_com\\GoBooking.js": true,
    "JSFile100\\go_com\\GoBooking_Hilton.js": true,
    "JSFile100\\go_com\\goSearch.js": true,
    "JSFile100\\go_com\\hbsCommon.js": true,
    "JSFile100\\go_com\\helper_functions.js": true,
    "JSFile100\\go_com\\home.js": true,
    "JSFile100\\go_com\\homepage.js": true,
    "JSFile100\\go_com\\incFadeImagesAPI.js": true,
    "JSFile100\\go_com\\index.js": true,
    "JSFile100\\go_com\\initOverlays.js": true,
    "JSFile100\\go_com\\JavaScript.js": true,
    "JSFile100\\go_com\\jquery_1_3_2.js": true,
    "JSFile100\\go_com\\jquery_1_3_2_min.js": true,
    "JSFile100\\go_com\\jquery_1_5_1_min.js": true,
    "JSFile100\\go_com\\jquery_hoverIntent.js": true,
    "JSFile100\\go_com\\jquery_hoverIntent_min.js": true,
    "JSFile100\\go_com\\jquery_rounded.js": true,
    "JSFile100\\go_com\\jquery_rounded_1_0_1.js": true,
    "JSFile100\\go_com\\js_1196d93e4398239d0fe9d3764fa666d1.js": true,
    "JSFile100\\go_com\\js_74ef26f1db507dbf19fe148d1c999ef1.js": true,
    "JSFile100\\go_com\\js_a3b83274849ef98f06846bf5505937d9_3.js": true,
    "JSFile100\\go_com\\js_rightclick.js": true,
    "JSFile100\\go_com\\masks.js": true,
    "JSFile100\\go_com\\mootools_1_3_2_core.js": true,
    "JSFile100\\go_com\\mootools_yui_compressed.js": true,
    "JSFile100\\go_com\\mplink.js": true,
    "JSFile100\\go_com\\nbc_javascript_library.js": true,
    "JSFile100\\go_com\\nycvisit.js": true,
    "JSFile100\\go_com\\oas_topright.js": true,
    "JSFile100\\go_com\\oas_x35.js": true,
    "JSFile100\\go_com\\openWin.js": true,
    "JSFile100\\go_com\\phocagalleryslideshow.js": true,
    "JSFile100\\go_com\\PogoHandler.js": true,
    "JSFile100\\go_com\\popupscripts.js": true,
    "JSFile100\\go_com\\portal.js": true,
    "JSFile100\\go_com\\preloadmenu.js": true,
    "JSFile100\\go_com\\preload_images.js": true,
    "JSFile100\\go_com\\public_common.js": true,
    "JSFile100\\go_com\\quote.js": true,
    "JSFile100\\go_com\\refercookie.js": true,
    "JSFile100\\go_com\\revenuescience.js": true,
    "JSFile100\\go_com\\rooms2.js": true,
    "JSFile100\\go_com\\ScriptResource.js": true,
    "JSFile100\\go_com\\search.js": true,
    "JSFile100\\go_com\\SessionFormat.js": true,
    "JSFile100\\go_com\\sifr.js": true,
    "JSFile100\\go_com\\site.js": true,
    "JSFile100\\go_com\\sms_vsSCLinkHandler.js": true,
    "JSFile100\\go_com\\splash.js": true,
    "JSFile100\\go_com\\std.js": true,
    "JSFile100\\go_com\\swNav.js": true,
    "JSFile100\\go_com\\Tools.js": true,
    "JSFile100\\go_com\\WBREO.js": true,
    "JSFile100\\go_com\\wdproloader_dom_event.js": true,
    "JSFile100\\go_com\\web.js": true,
    "JSFile100\\go_com\\wfwiblib.js": true,
    "JSFile100\\live_com\\1721.js": true,
    "JSFile100\\live_com\\187294839_x45_x46_x03_x02.js": true,
    "JSFile100\\live_com\\banner_photowall.js": true,
    "JSFile100\\live_com\\calendar.js": true,
    "JSFile100\\live_com\\com_pulselive_web_ipl2011scorexs_nocache.js": true,
    "JSFile100\\live_com\\dropdown.js": true,
    "JSFile100\\live_com\\flexcroll.js": true,
    "JSFile100\\live_com\\highslide_with_html.js": true,
    "JSFile100\\live_com\\inline.js": true,
    "JSFile100\\live_com\\jquery_1_2_3_min.js": true,
    "JSFile100\\live_com\\jquery_ui.js": true,
    "JSFile100\\live_com\\jsloader_php.js": true,
    "JSFile100\\live_com\\liveframework.js": true,
    "JSFile100\\live_com\\main_j.js": true,
    "JSFile100\\live_com\\mbMenu.js": true,
    "JSFile100\\live_com\\mootools_utils.js": true,
    "JSFile100\\live_com\\ntpagetag_aspx.js": true,
    "JSFile100\\live_com\\ScriptCombiner.js": true,
    "JSFile100\\live_com\\search.js": true,
    "JSFile100\\live_com\\stlfunc.js": true,
    "JSFile100\\live_com\\tdAllAdsJSON_aspx.js": true,
    "JSFile100\\live_com\\tojs.js": true,
    "JSFile100\\live_com\\util.js": true,
    "JSFile100\\live_com\\veshell2.js": true,
    "JSFile100\\live_com\\WLWorkflow.js": true,
    "JSFile100\\live_com\\wtid.js": true,
    "JSFile100\\live_com\\xajax_core.js": true,
    "JSFile100\\live_com\\zp_s_VJleF85ajwLnZLG73AV3Kc_40.js": true,
    "JSFile100\\mail_ru\\1834.js": true,
    "JSFile100\\mail_ru\\1835.js": true,
    "JSFile100\\mail_ru\\3.js": true,
    "JSFile100\\mail_ru\\3312.js": true,
    "JSFile100\\mail_ru\\4044.js": true,
    "JSFile100\\mail_ru\\browsercheck.js": true,
    "JSFile100\\mail_ru\\common_main.js": true,
    "JSFile100\\mail_ru\\core.js": true,
    "JSFile100\\mail_ru\\jquery.js": true,
    "JSFile100\\mail_ru\\receiver.js": true,
    "JSFile100\\microsoft_com\\BAM.js": true,
    "JSFile100\\microsoft_com\\base.js": true,
    "JSFile100\\microsoft_com\\bimapping.js": true,
    "JSFile100\\microsoft_com\\branding.js": true,
    "JSFile100\\microsoft_com\\ClientBISettings.js": true,
    "JSFile100\\microsoft_com\\commontop.js": true,
    "JSFile100\\microsoft_com\\default.js": true,
    "JSFile100\\microsoft_com\\EZControls.js": true,
    "JSFile100\\microsoft_com\\EZWidgets.js": true,
    "JSFile100\\microsoft_com\\hvSearchBox.js": true,
    "JSFile100\\microsoft_com\\jquery_1_4_1_min.js": true,
    "JSFile100\\microsoft_com\\jquery_1_4_2_min_11_05_05_0074.js": true,
    "JSFile100\\microsoft_com\\js.js": true,
    "JSFile100\\microsoft_com\\lts.js": true,
    "JSFile100\\microsoft_com\\MenuStandards.js": true,
    "JSFile100\\microsoft_com\\MicrosoftAjaxComponentModel.js": true,
    "JSFile100\\microsoft_com\\MicrosoftAjaxNetwork.js": true,
    "JSFile100\\microsoft_com\\MicrosoftAjaxSerialization.js": true,
    "JSFile100\\microsoft_com\\MicrosoftAjaxTimer.js": true,
    "JSFile100\\microsoft_com\\MicrosoftAjaxWebForms_debug.js": true,
    "JSFile100\\microsoft_com\\MiscUtils.js": true,
    "JSFile100\\microsoft_com\\mstoolbar.js": true,
    "JSFile100\\microsoft_com\\mtagconfig.js": true,
    "JSFile100\\microsoft_com\\MultiSelectControl2.js": true,
    "JSFile100\\microsoft_com\\ocs14_main.js": true,
    "JSFile100\\microsoft_com\\omniture_combined_11_05_05_0074.js": true,
    "JSFile100\\microsoft_com\\RioTrackingUnion.js": true,
    "JSFile100\\microsoft_com\\ScriptResource.js": true,
    "JSFile100\\microsoft_com\\Silverlight.js": true,
    "JSFile100\\microsoft_com\\SimpleSearch.js": true,
    "JSFile100\\microsoft_com\\SiteRecruit_PageConfiguration_2944mt.js": true,
    "JSFile100\\microsoft_com\\Start.js": true,
    "JSFile100\\microsoft_com\\toc.js": true,
    "JSFile100\\microsoft_com\\VideoPlayer.js": true,
    "JSFile100\\microsoft_com\\webcomtop.js": true,
    "JSFile100\\microsoft_com\\WebForms.js": true,
    "JSFile100\\microsoft_com\\webtrendsscript.js": true,
    "JSFile100\\microsoft_com\\WebUIValidation.js": true,
    "JSFile100\\msn_com\\4a0253de6eac448d8f2c39c53f8926.js": true,
    "JSFile100\\msn_com\\4fa981931d290c05f204f06cc927de.js": true,
    "JSFile100\\msn_com\\a96611e687e7618b4a57eeb8e513dc.js": true,
    "JSFile100\\msn_com\\ajaxGeo.js": true,
    "JSFile100\\msn_com\\All.js": true,
    "JSFile100\\msn_com\\AllNew.js": true,
    "JSFile100\\msn_com\\date_format.js": true,
    "JSFile100\\msn_com\\f33347c28ecec27b168748f73f377b.js": true,
    "JSFile100\\msn_com\\FaceBook.js": true,
    "JSFile100\\msn_com\\fb_google_intercept.js": true,
    "JSFile100\\msn_com\\footer_post_render.js": true,
    "JSFile100\\msn_com\\FormatHelper.js": true,
    "JSFile100\\msn_com\\geo.js": true,
    "JSFile100\\msn_com\\IEOverlay.js": true,
    "JSFile100\\msn_com\\Insite.js": true,
    "JSFile100\\msn_com\\jquery_sliding_carousel.js": true,
    "JSFile100\\msn_com\\js.js": true,
    "JSFile100\\msn_com\\js_384d57f37f2864fd053971f8a200032a.js": true,
    "JSFile100\\msn_com\\login.js": true,
    "JSFile100\\msn_com\\main.js": true,
    "JSFile100\\msn_com\\MasterLayout.js": true,
    "JSFile100\\msn_com\\mmNew.js": true,
    "JSFile100\\msn_com\\mmUsed.js": true,
    "JSFile100\\msn_com\\mru12.js": true,
    "JSFile100\\msn_com\\ninemsn_thirdparty_header_v4_0_0.js": true,
    "JSFile100\\msn_com\\omnitracking.js": true,
    "JSFile100\\msn_com\\PagePeelAds.js": true,
    "JSFile100\\msn_com\\promo.js": true,
    "JSFile100\\msn_com\\quickSearch.js": true,
    "JSFile100\\msn_com\\registration.js": true,
    "JSFile100\\msn_com\\ReplaceLinks.js": true,
    "JSFile100\\msn_com\\sbknav.js": true,
    "JSFile100\\msn_com\\spac_adx.js": true,
    "JSFile100\\msn_com\\track.js": true,
    "JSFile100\\msn_com\\uuid.js": true,
    "JSFile100\\msn_com\\validate.js": true,
    "JSFile100\\msn_com\\XmlHelper.js": true,
    "JSFile100\\msn_com\\XmlList.js": true,
    "JSFile100\\nate_com\\floatingSearch.js": true,
    "JSFile100\\nate_com\\nate_logout_v20101210.js": true,
    "JSFile100\\plentyoffish_com\\helperb.js": true,
    "JSFile100\\plentyoffish_com\\register_helper.js": true,
    "JSFile100\\qq_com\\crystal_min.js": true,
    "JSFile100\\sina_com_cn\\res_PGLS000022.js": true,
    "JSFile100\\sohu_com\\disp_by_ip.js": true,
    "JSFile100\\sohu_com\\j_1_5_2.js": true,
    "JSFile100\\sohu_com\\WebCalendar.js": true,
    "JSFile100\\terra_com_br\\core_modMan.js": true,
    "JSFile100\\terra_com_br\\helper_stringOBJ.js": true,
    "JSFile100\\terra_com_br\\jquery.js": true,
    "JSFile100\\terra_com_br\\modHeaderFooter.js": true,
    "Temp\\TopJSFiles\\JSFile100\\uol_com_br\\site_uolbr_chan_batepapo_subchan_capa_affiliate_uolbrbatepapo_size_125x125_page_7_conntype_1_expble_File not found: tile_215298826605972.jsFile not found: C:\\Temp\\TopJSFiles\\JSFile100\\uol_com_br\\site_uolbr_chan_batepapo_subchan_capa_affiliate_uolbrbatepapo_size_728x90_page_1_conntype_1_expble_0File not found: tile_215298826605972.jsC:\\Temp\\TopJSFiles\\JSFile100\\yandex_ru\\watch_visor.js": true,
    "JSFile100\\zynga_com\\connection_min.js": true,
    "JSFile100\\zynga_com\\yahoo_dom_event.js": true,
    "JSFile200\\alot_com\\swfobject.js": true,
    "JSFile200\\bankofamerica_com\\Activation.js": true,
    "JSFile200\\bankofamerica_com\\commonscript.js": true,
    "JSFile200\\bankofamerica_com\\global.js": true,
    "JSFile200\\bankofamerica_com\\homepagetopjawr_1_1.js": true,
    "JSFile200\\bankofamerica_com\\jquery_1_3_2_min.js": true,
    "JSFile200\\bankofamerica_com\\LaunchRemote.js": true,
    "JSFile200\\bankofamerica_com\\pm_fp.js": true,
    "JSFile200\\bankofamerica_com\\ScriptResource.js": true,
    "JSFile200\\bankofamerica_com\\tc_logging.js": true,
    "JSFile200\\bankofamerica_com\\utility.js": true,
    "JSFile200\\bankofamerica_com\\widget.js": true,
    "JSFile200\\bbc_co_uk\\conf.js": true,
    "JSFile200\\bbc_co_uk\\config.js": true,
    "JSFile200\\blocket_se\\blocket_all.js": true,
    "JSFile200\\chase_com\\jquery_1_4_2_min.js": true,
    "JSFile200\\chase_com\\navigation.js": true,
    "JSFile200\\chase_com\\script.js": true,
    "JSFile200\\chase_com\\supportFlashAd.js": true,
    "JSFile200\\chase_com\\wtid.js": true,
    "JSFile200\\cnn_com\\arabic_main.js": true,
    "JSFile200\\cnn_com\\PreloadImages.js": true,
    "JSFile200\\gmarket_co_kr\\IndexBodyBest.js": true,
    "JSFile200\\gmarket_co_kr\\IndexBodyData.js": true,
    "JSFile200\\gmarket_co_kr\\IndexBodyToday.js": true,
    "JSFile200\\gmarket_co_kr\\menu_top_import.js": true,
    "JSFile200\\googleusercontent_com\\core_dynamic_height.js": true,
    "JSFile200\\goo_ne_jp\\search.js": true,
    "JSFile200\\goo_ne_jp\\VLTraceDMD.js": true,
    "JSFile200\\ifeng_com\\ifengRotatorAd.js": true,
    "JSFile200\\match_com\\ajaxGeo.js": true,
    "JSFile200\\match_com\\clientModal.js": true,
    "JSFile200\\match_com\\core.js": true,
    "JSFile200\\match_com\\dcs_tag.js": true,
    "JSFile200\\match_com\\geo.js": true,
    "JSFile200\\match_com\\GetClientMessages.js": true,
    "JSFile200\\match_com\\header.js": true,
    "JSFile200\\match_com\\jquery_1_4_1_min.js": true,
    "JSFile200\\match_com\\jquery_1_4_2_min.js": true,
    "JSFile200\\match_com\\jquery_ui_min.js": true,
    "JSFile200\\match_com\\lib_login.js": true,
    "JSFile200\\match_com\\login.js": true,
    "JSFile200\\match_com\\main.js": true,
    "JSFile200\\match_com\\Mice07272007.js": true,
    "JSFile200\\match_com\\promo.js": true,
    "JSFile200\\match_com\\quickSearch.js": true,
    "JSFile200\\match_com\\registration.js": true,
    "JSFile200\\match_com\\wtid.js": true,
    "JSFile200\\match_com\\_jslib.js": true,
    "JSFile200\\meinvz_net\\resource_core.js": true,
    "JSFile200\\milliyet_com_tr\\BaseScript.js": true,
    "JSFile200\\milliyet_com_tr\\Comment.js": true,
    "JSFile200\\milliyet_com_tr\\dmcIst.js": true,
    "JSFile200\\milliyet_com_tr\\Emlak.js": true,
    "JSFile200\\milliyet_com_tr\\HizliErisim.js": true,
    "JSFile200\\milliyet_com_tr\\jquery_timeago.js": true,
    "JSFile200\\milliyet_com_tr\\JSListCombo.js": true,
    "JSFile200\\milliyet_com_tr\\MNetOrfad.js": true,
    "JSFile200\\milliyet_com_tr\\SharePlugin.js": true,
    "JSFile200\\milliyet_com_tr\\siteIst.js": true,
    "JSFile200\\milliyet_com_tr\\UFO.js": true,
    "JSFile200\\milliyet_com_tr\\video.js": true,
    "JSFile200\\netflix_com\\blogside_toolbar_combined_min.js": true,
    "JSFile200\\netflix_com\\pkg_Core_ffffffeffe0000ff878_s_888676.js": true,
    "JSFile200\\onemanga_com\\connection_min.js": true,
    "JSFile200\\onemanga_com\\search_autocomplete.js": true,
    "JSFile200\\onemanga_com\\yahoo_dom_event.js": true,
    "JSFile200\\onet_pl\\506b999ab5a67775ea492ec7953515b0_pack_main.js": true,
    "JSFile200\\onet_pl\\calendar013.js": true,
    "JSFile200\\onet_pl\\jquery.js": true,
    "JSFile200\\onet_pl\\main.js": true,
    "JSFile200\\onet_pl\\std.js": true,
    "JSFile200\\playdom_com\\jquery_1_4_2_min.js": true,
    "JSFile200\\pogo_com\\ad.js": true,
    "JSFile200\\pogo_com\\PogoHandler.js": true,
    "JSFile200\\pogo_com\\rooms2.js": true,
    "JSFile200\\pogo_com\\std.js": true,
    "JSFile200\\qidian_com\\MasterPageHeader.js": true,
    "JSFile200\\sapo_pt\\prototype.js": true,
    "JSFile200\\sapo_pt\\site_sapoao_chanao_aoother_adsize_234x60_type_halfbanner_affiliate_jornalangola.js": true,
    "JSFile200\\tom_com\\ektron_modal.js": true,
    "JSFile200\\tom_com\\en.js": true,
    "JSFile200\\tom_com\\general.js": true,
    "JSFile200\\trademe_co_nz\\GoogleAnalyticsBundled46718.js": true,
    "JSFile200\\wp_pl\\10275_20110624100.js": true,
    "JSFile200\\zing_vn\\dhtmlwindow.js": true,
    "JSFile200\\zing_vn\\System_Ad1.js": true,
    "JSFile300\\4399_com\\4399.js": true,
    "JSFile300\\7k7k_com\\index2.js": true,
    "JSFile300\\adobe_com\\foresee_surveydef.js": true,
    "JSFile300\\adobe_com\\jquery_ui_1_8_1.js": true,
    "JSFile300\\adobe_com\\jquery_ui_sortable.js": true,
    "JSFile300\\apple_com\\536335f805ce519f8211dd42787a37a0.js": true,
    "JSFile300\\apple_com\\autocomplete_min.js": true,
    "JSFile300\\apple_com\\d8cb4c093dd419faa56b117c0e67a20a.js": true,
    "JSFile300\\apple_com\\datasource_min.js": true,
    "JSFile300\\apple_com\\en_strings.js": true,
    "JSFile300\\apple_com\\functions.js": true,
    "JSFile300\\apple_com\\jquery_1_4_2.js": true,
    "JSFile300\\apple_com\\jquery_1_5_1_min.js": true,
    "JSFile300\\apple_com\\jquery_min.js": true,
    "JSFile300\\apple_com\\masks.js": true,
    "JSFile300\\apple_com\\popupAutoSize.js": true,
    "JSFile300\\apple_com\\SCReporting.js": true,
    "JSFile300\\apple_com\\shortcuts.js": true,
    "JSFile300\\apple_com\\yahoo_dom_event.js": true,
    "JSFile300\\blogger_com\\211018530_widgets.js": true,
    "JSFile300\\blogger_com\\921763132_widgets.js": true,
    "JSFile300\\blogger_com\\dropdown.js": true,
    "JSFile300\\charter_net\\dnn.js": true,
    "JSFile300\\charter_net\\dnn_controls.js": true,
    "JSFile300\\charter_net\\dnn_controls_dnnmenu.js": true,
    "JSFile300\\charter_net\\dnn_dom_positioning.js": true,
    "JSFile300\\charter_net\\dnn_xml.js": true,
    "JSFile300\\charter_net\\dnn_xmlhttp.js": true,
    "JSFile300\\charter_net\\ScriptResource.js": true,
    "JSFile300\\cpxinteractive_com\\ds.js": true,
    "JSFile300\\finn_no\\wtid.js": true,
    "JSFile300\\gmx_net\\homepage.js": true,
    "JSFile300\\hurriyet_com_tr\\MNetOrfad.js": true,
    "JSFile300\\ikea_com\\jonk.js": true,
    "JSFile300\\king_com\\77Tracking.js": true,
    "JSFile300\\king_com\\ac_autocomplete.js": true,
    "JSFile300\\king_com\\ac_setfacebooktheme.js": true,
    "JSFile300\\king_com\\blogchalking.js": true,
    "JSFile300\\king_com\\chrome.js": true,
    "JSFile300\\king_com\\core.js": true,
    "JSFile300\\king_com\\era_rl_aspx.js": true,
    "JSFile300\\king_com\\fckeditor.js": true,
    "JSFile300\\king_com\\frogweb.js": true,
    "JSFile300\\king_com\\fw_menu.js": true,
    "JSFile300\\king_com\\garages21u5.js": true,
    "JSFile300\\king_com\\garages_acoupons_funcs21u6.js": true,
    "JSFile300\\king_com\\infoBoxes.js": true,
    "JSFile300\\king_com\\jquery_1_2_3.js": true,
    "JSFile300\\king_com\\jquery_1_4_2_min.js": true,
    "JSFile300\\king_com\\jquery_colorbox.js": true,
    "JSFile300\\king_com\\jquery_scripts.js": true,
    "JSFile300\\king_com\\jquery_tools_min.js": true,
    "JSFile300\\king_com\\jquery_ui.js": true,
    "JSFile300\\king_com\\jquery_ui_1_8_1_custom_min.js": true,
    "JSFile300\\king_com\\jquery_wt_rotator.js": true,
    "JSFile300\\king_com\\mainNav.js": true,
    "JSFile300\\king_com\\mediaboxAdv_1_3_4b.js": true,
    "JSFile300\\king_com\\mootools_core_1_3_full_compat_yc.js": true,
    "JSFile300\\king_com\\mtagconfig.js": true,
    "JSFile300\\king_com\\navigation.js": true,
    "JSFile300\\king_com\\ob_box.js": true,
    "JSFile300\\king_com\\page_xml_php.js": true,
    "JSFile300\\king_com\\process.js": true,
    "JSFile300\\king_com\\Products.js": true,
    "JSFile300\\king_com\\rollovers.js": true,
    "JSFile300\\king_com\\script1.js": true,
    "JSFile300\\king_com\\ScriptResource.js": true,
    "JSFile300\\king_com\\search.js": true,
    "JSFile300\\king_com\\soft_add_mult.js": true,
    "JSFile300\\king_com\\Tracking.js": true,
    "JSFile300\\king_com\\VAM.js": true,
    "JSFile300\\king_com\\x.js": true,
    "JSFile300\\linkedin_com\\jquery.js": true,
    "JSFile300\\linkedin_com\\js.js": true,
    "JSFile300\\myvip_com\\prototype_17_min.js": true,
    "JSFile300\\ning_com\\.js": true,
    "JSFile300\\ning_com\\bnbridge.js": true,
    "JSFile300\\ning_com\\cookie.js": true,
    "JSFile300\\ning_com\\cookies.js": true,
    "JSFile300\\ning_com\\core.js": true,
    "JSFile300\\ning_com\\ddaccordion_minified.js": true,
    "JSFile300\\ning_com\\ddlevelsmenu.js": true,
    "JSFile300\\ning_com\\ek_flexmenu.js": true,
    "JSFile300\\ning_com\\general.js": true,
    "JSFile300\\ning_com\\hmc_head_nav.js": true,
    "JSFile300\\ning_com\\jcemediabox.js": true,
    "JSFile300\\ning_com\\jquery_1_3_2_min.js": true,
    "JSFile300\\ning_com\\jquery_hoverintent.js": true,
    "JSFile300\\ning_com\\jquery_hoverIntent_minified.js": true,
    "JSFile300\\ning_com\\jquery_ui_1_7_2_custom_min.js": true,
    "JSFile300\\ning_com\\jsexternal.js": true,
    "JSFile300\\ning_com\\js_b6691d3534a37960ffeb603e6212ae71.js": true,
    "JSFile300\\ning_com\\prototype.js": true,
    "JSFile300\\ning_com\\prototype_ext.js": true,
    "JSFile300\\ning_com\\radwin.js": true,
    "JSFile300\\ning_com\\rotation_home.js": true,
    "JSFile300\\ning_com\\ScriptResource.js": true,
    "JSFile300\\ning_com\\search.js": true,
    "JSFile300\\ning_com\\session_timeout.js": true,
    "JSFile300\\ning_com\\sound.js": true,
    "JSFile300\\ning_com\\utils.js": true,
    "JSFile300\\ning_com\\yahoo_dom_event.js": true,
    "JSFile300\\rr_com\\common.js": true,
    "JSFile300\\rr_com\\global.js": true,
    "JSFile300\\rr_com\\javascript.js": true,
    "JSFile300\\rr_com\\jquery.js": true,
    "JSFile300\\rr_com\\jquery_1_4_2.js": true,
    "JSFile300\\rr_com\\jquery_timers_1_2.js": true,
    "JSFile300\\rr_com\\RPcore.js": true,
    "JSFile300\\sky_com\\AC_RunActiveContent.js": true,
    "JSFile300\\sky_com\\behaviour.js": true,
    "JSFile300\\sky_com\\common_js_min_js_476213720.js": true,
    "JSFile300\\sky_com\\mm_menu.js": true,
    "JSFile300\\sky_com\\scriptaculous.js": true,
    "JSFile300\\sky_com\\stock_20quote.js": true,
    "JSFile300\\sky_com\\swfobject.js": true,
    "JSFile300\\tmz_com\\jquery_min_72a5bf5cc55d2eaaccbb6b332a3910dc_v2010_09_13_133815.js": true,
    "JSFile300\\tmz_com\\tmz_ver2_2_531e274a93f4d11e7def88950c250081_v2011_06_22_203315.js": true,
    "JSFile300\\travian_ae\\crypt.js": true,
    "JSFile300\\ustream_tv\\packed_www_socialstream_libs_13085842721.js": true,
    "JSFile300\\verizon_net\\dojo.js": true,
    "JSFile300\\walmart_com\\LHNCookie.js": true,
    "JSFile300\\walmart_com\\LHNSearch.js": true,
    "JSFile300\\walmart_com\\MultivariateSection.js": true,
    "JSFile300\\walmart_com\\webkitFix.js": true,
    "JSFile300\\weather_com\\a21_max.js": true,
    "JSFile300\\weather_com\\index.js": true,
    "JSFile300\\weather_com\\jquery_1_4_4_min.js": true,
    "JSFile300\\weather_com\\popup_layer.js": true,
    "JSFile300\\weather_com\\wclock.js": true,
    "JSFile300\\weather_com\\wtimes.js": true,
    "JSFile300\\wellsfargo_com\\hbsCommon.js": true,
    "JSFile300\\wellsfargo_com\\init.js": true,
    "JSFile300\\wellsfargo_com\\jquery_1_4_2_min.js": true,
    "JSFile300\\wellsfargo_com\\masks.js": true,
    "JSFile300\\wellsfargo_com\\public_common.js": true,
    "JSFile300\\wellsfargo_com\\ScriptResource.js": true,
    "JSFile300\\wellsfargo_com\\WBREO.js": true,
    "JSFile300\\wellsfargo_com\\wfwiblib.js": true,
    "JSFile300\\yoville_com\\utilities.js": true,
    "JSFile400\\alibaba_com\\ae_login.js": true,
    "JSFile400\\alibaba_com\\home_20110420.js": true,
    "JSFile400\\att_com\\autotab.js": true,
    "JSFile400\\att_com\\flashobjects.js": true,
    "JSFile400\\att_com\\incFadeImagesAPI.js": true,
    "JSFile400\\att_com\\jquery_1_5_1_min.js": true,
    "JSFile400\\att_com\\jquery_maskedinput.js": true,
    "JSFile400\\att_com\\modalValidSummary.js": true,
    "JSFile400\\att_com\\ScriptResource.js": true,
    "JSFile400\\att_com\\wbutil.js": true,
    "JSFile400\\att_com\\webKit.js": true,
    "JSFile400\\att_com\\WebResource.js": true,
    "JSFile400\\autotrader_com\\40": true,
    "JSFile400\\caixa_gov_br\\awstats_misc_tracker.js": true,
    "JSFile400\\china_com\\Common.js": true,
    "JSFile400\\china_com\\desk.js": true,
    "JSFile400\\china_com\\jquery.js": true,
    "JSFile400\\china_com\\NetBank.js": true,
    "JSFile400\\donga_com\\func.js": true,
    "JSFile400\\earthlink_net\\main_dropdown.js": true,
    "JSFile400\\ekolay_net\\CanliSkor.js": true,
    "JSFile400\\ekolay_net\\f.js": true,
    "JSFile400\\ekolay_net\\GreenBarNew.js": true,
    "JSFile400\\ekolay_net\\header.js": true,
    "JSFile400\\ekolay_net\\icerikler_custom_jQuery.js": true,
    "JSFile400\\ekolay_net\\jquery_1_6_1_min.js": true,
    "JSFile400\\ekolay_net\\jquery_hoverIntent_minified.js": true,
    "JSFile400\\ekolay_net\\Manset.js": true,
    "JSFile400\\ekolay_net\\menu.js": true,
    "JSFile400\\ekolay_net\\os.js": true,
    "JSFile400\\ekolay_net\\survey.js": true,
    "JSFile400\\fifa_com\\all.js": true,
    "JSFile400\\fifa_com\\theclub.js": true,
    "JSFile400\\fifa_com\\webanalytics.js": true,
    "JSFile400\\foxnews_com\\I_DJI_I_COMP_INX.js": true,
    "JSFile400\\foxnews_com\\video_synd_small.js": true,
    "JSFile400\\frontier_com\\jq_client_plugin.js": true,
    "JSFile400\\frontier_com\\VirtualCode.js": true,
    "JSFile400\\google_hu\\desktop_module_main.js": true,
    "JSFile400\\hp_com\\all_34499.js": true,
    "JSFile400\\hp_com\\ClientFunctions.js": true,
    "JSFile400\\hp_com\\custom_activex_override.js": true,
    "JSFile400\\hp_com\\na_num_clicks.js": true,
    "JSFile400\\hp_com\\popup.js": true,
    "JSFile400\\hp_com\\ScriptResource.js": true,
    "JSFile400\\hp_com\\sup_class.js": true,
    "JSFile400\\laredoute_fr\\CombineJS.js": true,
    "JSFile400\\laredoute_fr\\CookieHelpers.js": true,
    "JSFile400\\laredoute_fr\\google.js": true,
    "JSFile400\\laredoute_fr\\redoutespanV2.js": true,
    "JSFile400\\laredoute_fr\\s_code.js": true,
    "JSFile400\\marca_com\\accordian.js": true,
    "JSFile400\\marca_com\\toolbar_colapsada.js": true,
    "JSFile400\\megavideo_com\\jquery_1_4_2_min.js": true,
    "JSFile400\\mlb_com\\club_properties.js": true,
    "JSFile400\\mlb_com\\form_validation.js": true,
    "JSFile400\\mlb_com\\form_validation_vDate.js": true,
    "JSFile400\\mlb_com\\global.js": true,
    "JSFile400\\mlb_com\\mlb_player.js": true,
    "JSFile400\\mlb_com\\mplayer.js": true,
    "JSFile400\\mlb_com\\myaccount_js_tpl.js": true,
    "JSFile400\\mlb_com\\playMedia.js": true,
    "JSFile400\\mlb_com\\quick_login_js_tpl.js": true,
    "JSFile400\\mlb_com\\registration_links_js_tpl.js": true,
    "JSFile400\\mlxchange_com\\SignIn.js": true,
    "JSFile400\\nana10_co_il\\cg.js": true,
    "JSFile400\\nana10_co_il\\client.js": true,
    "JSFile400\\nana10_co_il\\Cliqa.js": true,
    "JSFile400\\nana10_co_il\\db.js": true,
    "JSFile400\\outlook_com\\jquery_1_4_1_min.js": true,
    "JSFile400\\phoenix_edu\\jquery_1_2_6_min.js": true,
    "JSFile400\\roblox_com\\index.js": true,
    "JSFile400\\roblox_com\\jquery_cookies_2_2_0_1.js": true,
    "JSFile400\\roblox_com\\jquery_extensions.js": true,
    "JSFile400\\roblox_com\\ScriptResource.js": true,
    "JSFile400\\verizonwireless_com\\device_detection.js": true,
    "JSFile400\\verizonwireless_com\\hbx_gin_defaults.js": true,
    "JSFile400\\verizonwireless_com\\hbx_vz_defaults.js": true,
    "JSFile400\\verizonwireless_com\\layers.js": true,
    "JSFile400\\verizonwireless_com\\proxy.js": true,
    "JSFile400\\y8_com\\application_min.js": true,
    "JSFile500\\amazonaws_com\\2Rr.js": true,
    "JSFile500\\amazonaws_com\\3Fk.js": true,
    "JSFile500\\amazonaws_com\\aller.js": true,
    "JSFile500\\amazonaws_com\\am.js": true,
    "JSFile500\\amazonaws_com\\anylinkcssmenu.js": true,
    "JSFile500\\amazonaws_com\\application_jq.js": true,
    "JSFile500\\amazonaws_com\\audio_player.js": true,
    "JSFile500\\amazonaws_com\\base.js": true,
    "JSFile500\\amazonaws_com\\base_41889.js": true,
    "JSFile500\\amazonaws_com\\core.js": true,
    "JSFile500\\amazonaws_com\\DisplayFromBottom.js": true,
    "JSFile500\\amazonaws_com\\easy_rotator_min.js": true,
    "JSFile500\\amazonaws_com\\highslide_with_gallery.js": true,
    "JSFile500\\amazonaws_com\\joined_base.js": true,
    "JSFile500\\amazonaws_com\\jquery1_3_2.js": true,
    "JSFile500\\amazonaws_com\\jquery_1_5_min.js": true,
    "JSFile500\\amazonaws_com\\jquery_hoverIntent_minified.js": true,
    "JSFile500\\amazonaws_com\\jquery_jcarousel_min.js": true,
    "JSFile500\\amazonaws_com\\jquery_prettyPhoto.js": true,
    "JSFile500\\amazonaws_com\\plugins08122010.js": true,
    "JSFile500\\amazonaws_com\\swfobject.js": true,
    "JSFile500\\amazonaws_com\\xd_receiver.js": true,
    "JSFile500\\atwola_com\\adsWrapper.js": true,
    "JSFile500\\bestbuy_com\\context_ns6.js": true,
    "JSFile500\\bestbuy_com\\expandfaqs.js": true,
    "JSFile500\\bestbuy_com\\foresee_surveydef.js": true,
    "JSFile500\\bestbuy_com\\foresee_trigger.js": true,
    "JSFile500\\bestbuy_com\\jquery.js": true,
    "JSFile500\\bestbuy_com\\jquery_scrollbar.js": true,
    "JSFile500\\bestbuy_com\\jquery_ui_1_8_5_custom.js": true,
    "JSFile500\\bestbuy_com\\js_jsp.js": true,
    "JSFile500\\bestbuy_com\\list.js": true,
    "JSFile500\\bestbuy_com\\offers.js": true,
    "JSFile500\\bestbuy_com\\panel.js": true,
    "JSFile500\\bestbuy_com\\personQ_ie.js": true,
    "JSFile500\\bestbuy_com\\tips.js": true,
    "JSFile500\\bestbuy_com\\wall.js": true,
    "JSFile500\\break_com\\bmnDoubleclickAd.js": true,
    "JSFile500\\break_com\\breakIn.js": true,
    "JSFile500\\break_com\\breakInTurns.js": true,
    "JSFile500\\dell_com\\common80.js": true,
    "JSFile500\\dell_com\\core.js": true,
    "JSFile500\\dell_com\\externalcode_min.js": true,
    "JSFile500\\dell_com\\home82.js": true,
    "JSFile500\\dell_com\\ie55up.js": true,
    "JSFile500\\dell_com\\init.js": true,
    "JSFile500\\dell_com\\jquery_1_2_2e.js": true,
    "JSFile500\\dell_com\\jquery_1_4_2_min.js": true,
    "JSFile500\\dell_com\\jquery_hoverIntent_minified.js": true,
    "JSFile500\\dell_com\\search.js": true,
    "JSFile500\\direct_gov_uk\\ScriptResource.js": true,
    "JSFile500\\expedia_com\\jsXML.js": true,
    "JSFile500\\expedia_com\\ScriptResource.js": true,
    "JSFile500\\expedia_com\\siteAnalytics.js": true,
    "JSFile500\\expedia_com\\yui_bundle_min.js": true,
    "JSFile500\\juegos_com\\jquery_1_2_1_pack.js": true,
    "JSFile500\\mapquest_com\\jquery.js": true,
    "JSFile500\\next_co_uk\\flashFunctions.js": true,
    "JSFile500\\pagerage_com\\AJAX.js": true,
    "JSFile500\\pagerage_com\\ApplyLayout.js": true,
    "JSFile500\\pagerage_com\\Browse.js": true,
    "JSFile500\\pagerage_com\\BrowserDetect.js": true,
    "JSFile500\\pagerage_com\\Channel.js": true,
    "JSFile500\\pagerage_com\\CSSNormalizer.js": true,
    "JSFile500\\pagerage_com\\DefaultLayout.js": true,
    "JSFile500\\pagerage_com\\FindObj.js": true,
    "JSFile500\\pagerage_com\\GetInstallId.js": true,
    "JSFile500\\pagerage_com\\GUIDTracker.js": true,
    "JSFile500\\pagerage_com\\SuccessTracker.js": true,
    "JSFile500\\qiyi_com\\config.js": true,
    "JSFile500\\singlesnet_com\\prototype.js": true,
    "JSFile500\\swedbank_se\\wtid.js": true,
    "JSFile500\\target_com\\copyright_year.js": true,
    "JSFile500\\target_com\\dnn.js": true,
    "JSFile500\\target_com\\dnn_xml.js": true,
    "JSFile500\\target_com\\dnn_xmlhttp.js": true,
    "JSFile500\\target_com\\foresee_analytics_e94bf.js": true,
    "JSFile500\\target_com\\jquery_blockUI.js": true,
    "JSFile500\\target_com\\pagescripts_0_294327_sid9_00.js": true,
    "JSFile500\\target_com\\ScriptResource.js": true,
    "JSFile500\\target_com\\VAM.js": true,
    "JSFile500\\tianya_cn\\urchin.js": true,
    "JSFile500\\victoriassecret_com\\mptrans.js": true,
    "JSFile500\\victoriassecret_com\\plugins.js": true,
    "JSFile500\\wachovia_com\\stats.js": true,
    "JSFile500\\windows_com\\BrowseApplication.js": true,
    "JSFile500\\windows_com\\Search.js": true,
    "JSFile500\\xfire_com\\product_tour.js": true,
    "JSFile500\\yomiuri_co_jp\\g_connect.js": true,
    "JSFile500\\yomiuri_co_jp\\kizasi.js": true,
    "JSFile500\\yomiuri_co_jp\\komachi_distribute.js": true,
    "JSFile600\\capitalone_com\\common.js": true,
    "JSFile600\\capitalone_com\\customer_info.js": true,
    "JSFile600\\capitalone_com\\toolTips.js": true,
    "JSFile600\\capitalone_com\\usage_analysis.js": true,
    "JSFile600\\capitalone_com\\VAM.js": true,
    "JSFile600\\cnet_com\\AC_RunActiveContent.js": true,
    "JSFile600\\cnet_com\\default_OAS.js": true,
    "JSFile600\\cnet_com\\jquery_ui_1_7_2_custom_min.js": true,
    "JSFile600\\cnet_com\\mac_ad.js": true,
    "JSFile600\\cnet_com\\telescope_Jquery_ddaccordion.js": true,
    "JSFile600\\cnet_com\\tmc_hp_pg.js": true,
    "JSFile600\\die_staemme_de\\game.js": true,
    "JSFile600\\discuss_com_hk\\index_rev09.js": true,
    "JSFile600\\jcpenney_com\\readCookie.js": true,
    "JSFile600\\jcpenney_com\\techpropsv1.js": true,
    "JSFile600\\kbs_co_kr\\jquery_1_4_4.js": true,
    "JSFile600\\lego_com\\applyfonts.js": true,
    "JSFile600\\lego_com\\checkenviroment_1_0_1.js": true,
    "JSFile600\\lego_com\\FlashStatsAPI_Parser.js": true,
    "JSFile600\\lego_com\\FlashVersionCheck.js": true,
    "JSFile600\\lego_com\\home.js": true,
    "JSFile600\\lego_com\\initOverlays.js": true,
    "JSFile600\\lego_com\\jquery_colorbox.js": true,
    "JSFile600\\lego_com\\jquery_rounded.js": true,
    "JSFile600\\lego_com\\jquery_rounded_1_0_1.js": true,
    "JSFile600\\lego_com\\popupscripts.js": true,
    "JSFile600\\lego_com\\portal.js": true,
    "JSFile600\\lego_com\\ScriptResource.js": true,
    "JSFile600\\lego_com\\splash.js": true,
    "JSFile600\\macys_com\\coremetrics_cmdatatagutils.js": true,
    "JSFile600\\macys_com\\coremetrics_eluminate.js": true,
    "JSFile600\\macys_com\\rules_90067660.js": true,
    "JSFile600\\nhaccuatui_com\\nct_widget_pack.js": true,
    "JSFile600\\schueler_cc\\merge.js": true,
    "JSFile600\\secureserver_net\\js.js": true,
    "JSFile600\\travelocity_com\\0_6713_hp_7C20110624_7CTRAVELOCITY_00.js": true,
    "JSFile600\\travelocity_com\\0__00.js": true,
    "JSFile600\\ups_com\\jqprint_obf_0_3_cache.js": true,
    "JSFile600\\ups_com\\jquery.js": true,
    "JSFile600\\ups_com\\stepcarousel.js": true,
    "JSFile600\\vk_com\\incAllPages.js": true,
    "JSFile600\\vk_com\\incFadeImagesAPI.js": true,
    "JSFile700\\adp_com\\WebResource.js": true,
    "JSFile700\\anz_com\\azgroupallthemagic_min.js": true,
    "JSFile700\\anz_com\\herobanner.js": true,
    "JSFile700\\cachefly_net\\djbooth8.js": true,
    "JSFile700\\carsales_com_au\\csn_adslider.js": true,
    "JSFile700\\carsales_com_au\\csn_carousel.js": true,
    "JSFile700\\carsales_com_au\\csn_feed.js": true,
    "JSFile700\\carsales_com_au\\csn_simpletabs.js": true,
    "JSFile700\\carsales_com_au\\csn_socialmediaplugin.js": true,
    "JSFile700\\carsales_com_au\\ui_hoverintent.js": true,
    "JSFile700\\carsales_com_au\\ui_tinymenu.js": true,
    "JSFile700\\filestube_com\\jquery_1_2_3.js": true,
    "JSFile700\\filestube_com\\jquery_1_2_6.js": true,
    "JSFile700\\filestube_com\\jquery_1_4_4_min.js": true,
    "JSFile700\\hattrick_org\\firebug.js": true,
    "JSFile700\\hattrick_org\\Hattrick_10.js": true,
    "JSFile700\\hattrick_org\\ScriptResource.js": true,
    "JSFile700\\homedepot_com\\dblclickCheck.js": true,
    "JSFile700\\homedepot_com\\global.js": true,
    "JSFile700\\homedepot_com\\menu_service.js": true,
    "JSFile700\\homedepot_com\\mm.js": true,
    "JSFile700\\homedepot_com\\sifr.js": true,
    "JSFile700\\hulu_com\\AC_RunActiveContent.js": true,
    "JSFile700\\imageshack_us\\is_comscore.js": true,
    "JSFile700\\incredimail_com\\common.js": true,
    "JSFile700\\incredimail_com\\fc3.js": true,
    "JSFile700\\jal_co_jp\\airportList2_3.js": true,
    "JSFile700\\jal_co_jp\\stayAreaControl.js": true,
    "JSFile700\\kohls_com\\inc_omniture_akamai.js": true,
    "JSFile700\\marketwatch_com\\pagefunctions.js": true,
    "JSFile700\\marketwatch_com\\yui_sc_all.js": true,
    "JSFile700\\nytimes_com\\FadingSlideShow.js": true,
    "JSFile700\\nytimes_com\\topic.js": true,
    "JSFile700\\nytimes_com\\wtid.js": true,
    "JSFile700\\qvc_com\\cmdatatagutils.js": true,
    "JSFile700\\qvc_com\\CoremetricIncludes.js": true,
    "JSFile700\\qvc_com\\jquery_global.js": true,
    "JSFile700\\qvc_com\\jquery_timer.js": true,
    "JSFile700\\qvc_com\\qvccommon.js": true,
    "JSFile700\\qvc_com\\QVCSiteJS.js": true,
    "JSFile700\\qvc_com\\rules_90040260.js": true,
    "JSFile700\\qvc_com\\ScriptResource.js": true,
    "JSFile700\\realtor_com\\jquery_1_4_2.js": true,
    "JSFile700\\realtor_com\\LinkButtons.js": true,
    "JSFile700\\realtor_com\\publicJavaScript15.js": true,
    "JSFile700\\repubblica_it\\jquery_min.js": true,
    "JSFile700\\skype_com\\wbr_complete.js": true,
    "JSFile700\\terra_es\\AddToFavorites.js": true,
    "JSFile700\\terra_es\\home.js": true,
    "JSFile700\\terra_es\\NewsControl.js": true,
    "JSFile700\\total_media_net\\glider_05.js": true,
    "JSFile700\\tradera_com\\adManager.js": true,
    "JSFile700\\tradera_com\\tradera.js": true,
    "JSFile700\\travian_com\\crypt.js": true,
    "JSFile700\\univision_com\\index.js": true,
    "JSFile700\\univision_com\\s_code_js_jsessionid_3LVIWWXIVOBCKCWIABTCFEYKZAABUIWC.js": true,
    "JSFile700\\usaa_com\\ent_core_js_loader_js_yahoo_dom_event_js_cp_std_js_cp_help_popup_min.js": true,
    "JSFile700\\usbank_com\\common.js": true,
    "JSFile700\\usbank_com\\jquery_hoverIntent_minified.js": true,
    "JSFile700\\usbank_com\\mp_hp.js": true,
    "JSFile700\\usbank_com\\SpryMenuBar.js": true,
    "JSFile700\\usbank_com\\swfobject.js": true,
    "JSFile700\\vnexpress_net\\Forex_Content.js": true,
    "JSFile700\\vnexpress_net\\Gold_Content.js": true,
    "JSFile700\\vnexpress_net\\Library.js": true,
    "JSFile700\\vnexpress_net\\Menu.js": true,
    "JSFile700\\vnexpress_net\\Vne.js": true,
    "JSFile700\\webs_com\\sifr.js": true,
    "JSFile700\\yahoo_net\\2010_ln.js": true,
    "JSFile700\\yahoo_net\\aaaremotes.js": true,
    "JSFile700\\yahoo_net\\animatedcollapse.js": true,
    "JSFile700\\yahoo_net\\b4.js": true,
    "JSFile700\\yahoo_net\\ccontent.js": true,
    "JSFile700\\yahoo_net\\cheroes.js": true,
    "JSFile700\\yahoo_net\\combined_min.js": true,
    "JSFile700\\yahoo_net\\combined_scripts.js": true,
    "JSFile700\\yahoo_net\\cycle.js": true,
    "JSFile700\\yahoo_net\\global.js": true,
    "JSFile700\\yahoo_net\\global_script2011.js": true,
    "JSFile700\\yahoo_net\\global_script_footer.js": true,
    "JSFile700\\yahoo_net\\headscripts.js": true,
    "JSFile700\\yahoo_net\\HeadScripts_aspx.js": true,
    "JSFile700\\yahoo_net\\highslide.js": true,
    "JSFile700\\yahoo_net\\hockeyjava.js": true,
    "JSFile700\\yahoo_net\\homepage.js": true,
    "JSFile700\\yahoo_net\\image_popup.js": true,
    "JSFile700\\yahoo_net\\inic_fnjs.js": true,
    "JSFile700\\yahoo_net\\jquery_1_3_1.js": true,
    "JSFile700\\yahoo_net\\jquery_1_4_2_min.js": true,
    "JSFile700\\yahoo_net\\jquery_corner.js": true,
    "JSFile700\\yahoo_net\\jquery_home.js": true,
    "JSFile700\\yahoo_net\\jquery_min.js": true,
    "JSFile700\\yahoo_net\\jquery_myk_autocomplete.js": true,
    "JSFile700\\yahoo_net\\leftnav_flyouts.js": true,
    "JSFile700\\yahoo_net\\newflash.js": true,
    "JSFile700\\yahoo_net\\print_page.js": true,
    "JSFile700\\yahoo_net\\reviewsClientScript.js": true,
    "JSFile700\\yahoo_net\\scroll.js": true,
    "JSFile700\\yahoo_net\\search_pulldown.js": true,
    "JSFile700\\yahoo_net\\show_cart2.js": true,
    "JSFile700\\yahoo_net\\slideshow.js": true,
    "JSFile700\\yahoo_net\\specific_size_popup.js": true,
    "JSFile700\\yahoo_net\\trisports.js": true,
    "JSFile700\\yahoo_net\\usfs.js": true,
    "JSFile700\\yahoo_net\\videoPopup.js": true,
    "JSFile700\\yahoo_net\\vwd_front_rotator.js": true,
    "JSFile700\\yahoo_net\\yst_external_java_script.js": true,
    "JSFile700\\yahoo_net\\yst_floating_cart1.js": true,
    "JSFile700\\yahoo_net\\yst_head_tags.js": true,
    "JSFile700\\yahoo_net\\ysw_combined_scripts.js": true,
    "JSFile800\\51_com\\ExternalRedirect.js": true,
    "JSFile800\\apartments_com\\Class.js": true,
    "JSFile800\\apartments_com\\global_new.js": true,
    "JSFile800\\apartments_com\\guestcard.js": true,
    "JSFile800\\apartments_com\\init.js": true,
    "JSFile800\\apartments_com\\omniture.js": true,
    "JSFile800\\apartments_com\\oo_engine_min.js": true,
    "JSFile800\\apartments_com\\pageload.js": true,
    "JSFile800\\apartments_com\\Specials.js": true,
    "JSFile800\\barclays_co_uk\\jquery_1_3_2_min.js": true,
    "JSFile800\\barclays_co_uk\\jquery_pack.js": true,
    "JSFile800\\ca_gov\\A8JSLib.js": true,
    "JSFile800\\ca_gov\\addmega.js": true,
    "JSFile800\\ca_gov\\CapBanner.js": true,
    "JSFile800\\ca_gov\\cbs.js": true,
    "JSFile800\\ca_gov\\chrome.js": true,
    "JSFile800\\ca_gov\\cocHeaderGlobal.js": true,
    "JSFile800\\ca_gov\\common.js": true,
    "JSFile800\\ca_gov\\cvmenufo.js": true,
    "JSFile800\\ca_gov\\dnn.js": true,
    "JSFile800\\ca_gov\\dnn_controls.js": true,
    "JSFile800\\ca_gov\\dnn_controls_dnnmenu.js": true,
    "JSFile800\\ca_gov\\dnn_dom_positioning.js": true,
    "JSFile800\\ca_gov\\dnn_xml.js": true,
    "JSFile800\\ca_gov\\dnn_xmlhttp.js": true,
    "JSFile800\\ca_gov\\dnn_xmlhttp_jsxmlhttprequest.js": true,
    "JSFile800\\ca_gov\\dnn_xml_jsparser.js": true,
    "JSFile800\\ca_gov\\dynamic.js": true,
    "JSFile800\\ca_gov\\dynamicdata.js": true,
    "JSFile800\\ca_gov\\fc.js": true,
    "JSFile800\\ca_gov\\global.js": true,
    "JSFile800\\ca_gov\\global_init.js": true,
    "JSFile800\\ca_gov\\home_images.js": true,
    "JSFile800\\ca_gov\\jquery_1_2_3_min.js": true,
    "JSFile800\\ca_gov\\jquery_1_4_4_min.js": true,
    "JSFile800\\ca_gov\\jquery_min.js": true,
    "JSFile800\\ca_gov\\m.js": true,
    "JSFile800\\ca_gov\\MenuAdapter.js": true,
    "JSFile800\\ca_gov\\mobileValidation.js": true,
    "JSFile800\\ca_gov\\navTab.js": true,
    "JSFile800\\ca_gov\\popupwin.js": true,
    "JSFile800\\ca_gov\\ScriptResource.js": true,
    "JSFile800\\ca_gov\\showHide.js": true,
    "JSFile800\\ca_gov\\supersleight_plugin.js": true,
    "JSFile800\\ca_gov\\wtid.js": true,
    "JSFile800\\cdiscount_com\\ScriptResource.js": true,
    "JSFile800\\cnbc_com\\contentBuffer_4.js": true,
    "JSFile800\\cnbc_com\\prototype_ajax.js": true,
    "JSFile800\\cnbc_com\\storyPagePagination2.js": true,
    "JSFile800\\esmas_com\\jquery_1_2_6.js": true,
    "JSFile800\\fedex_com\\printcheck_components.js": true,
    "JSFile800\\fidelity_com\\functions.js": true,
    "JSFile800\\fidelity_com\\welcome_core.js": true,
    "JSFile800\\gmx_com\\ckeditor_319982267.js": true,
    "JSFile800\\iol_pt\\homepage.js": true,
    "JSFile800\\iol_pt\\jquery_1_4_2_min.js": true,
    "JSFile800\\iol_pt\\jquery_jcarouselnav.js": true,
    "JSFile800\\kickasstorrents_com\\ajs.js": true,
    "JSFile800\\lancenet_com_br\\lance.js": true,
    "JSFile800\\literotica_com\\r.js": true,
    "JSFile800\\lowes_com\\accountType.js": true,
    "JSFile800\\lowes_com\\flashdetect.js": true,
    "JSFile800\\lowes_com\\lowesFunction.js": true,
    "JSFile800\\lowes_com\\mootools_release_1_11.js": true,
    "JSFile800\\lowes_com\\pm_fp.js": true,
    "JSFile800\\lowes_com\\recommendationWizard.js": true,
    "JSFile800\\monster_com\\allindex.js": true,
    "JSFile800\\monster_com\\categoryJavascript.js": true,
    "JSFile800\\monster_com\\dailytips.js": true,
    "JSFile800\\monster_com\\jamroom_javascript_inc.js": true,
    "JSFile800\\monster_com\\monster_1_296166612E_012_4A68F26884D68926E233CB37D13DABC6.js": true,
    "JSFile800\\monster_com\\tm_profile.js": true,
    "JSFile800\\monster_com\\wtid.js": true,
    "JSFile800\\musica_com\\gfeedfetcher.js": true,
    "JSFile800\\musica_com\\jquery_hoverIntent_minified.js": true,
    "JSFile800\\musica_com\\main.js": true,
    "JSFile800\\nickjr_com\\coda.js": true,
    "JSFile800\\nickjr_com\\jquery.js": true,
    "JSFile800\\nickjr_com\\jquery_min.js": true,
    "JSFile800\\pagesjaunes_fr\\sitecrm.js": true,
    "JSFile800\\ricardo_ch\\ajaxtools.js": true,
    "JSFile800\\ricardo_ch\\Common.js": true,
    "JSFile800\\ricardo_ch\\Cookies.js": true,
    "JSFile800\\sabah_com_tr\\anasayfa.js": true,
    "JSFile800\\sabah_com_tr\\jquery_cookie.js": true,
    "JSFile800\\sabah_com_tr\\paging.js": true,
    "JSFile800\\sabah_com_tr\\ShadowBox.js": true,
    "JSFile800\\sabah_com_tr\\sitebase.js": true,
    "JSFile800\\sanook_com\\iwpa.js": true,
    "JSFile800\\state_tx_us\\10carousel.js": true,
    "JSFile800\\state_tx_us\\ddaccordion.js": true,
    "JSFile800\\state_tx_us\\ek_flexmenu.js": true,
    "JSFile800\\state_tx_us\\emailvalid.js": true,
    "JSFile800\\state_tx_us\\fadebanner.js": true,
    "JSFile800\\state_tx_us\\HHS_Stas.js": true,
    "JSFile800\\state_tx_us\\index.js": true,
    "JSFile800\\state_tx_us\\javascript.js": true,
    "JSFile800\\state_tx_us\\jquery_1_3_2_min.js": true,
    "JSFile800\\state_tx_us\\jquery_banner.js": true,
    "JSFile800\\state_tx_us\\jquery_timers_1_2.js": true,
    "JSFile800\\state_tx_us\\locationsTab.js": true,
    "JSFile800\\state_tx_us\\locNav.js": true,
    "JSFile800\\state_tx_us\\navcheckFP.js": true,
    "JSFile800\\state_tx_us\\panelswap.js": true,
    "JSFile800\\state_tx_us\\person_ie.js": true,
    "JSFile800\\state_tx_us\\random_image.js": true,
    "JSFile800\\state_tx_us\\ScriptResource.js": true,
    "JSFile800\\state_tx_us\\stm31.js": true,
    "JSFile800\\state_tx_us\\txdotscripts.js": true,
    "JSFile800\\state_tx_us\\webkitFix.js": true,
    "JSFile800\\yad2_co_il\\scripts_min.js": true,
    "JSFile900\\7m_cn\\18_en.js": true,
    "JSFile900\\7m_cn\\basket_open_links.js": true,
    "JSFile900\\7m_cn\\default_b.js": true,
    "JSFile900\\7m_cn\\index.js": true,
    "JSFile900\\7m_cn\\live_fun1.js": true,
    "JSFile900\\7m_cn\\mainnews.js": true,
    "JSFile900\\7m_cn\\middle_rank.js": true,
    "JSFile900\\7m_cn\\open_link.js": true,
    "JSFile900\\7m_cn\\output.js": true,
    "JSFile900\\7m_cn\\scorllimg.js": true,
    "JSFile900\\7m_cn\\th.js": true,
    "JSFile900\\7m_cn\\winresult.js": true,
    "JSFile900\\7m_cn\\wnba_index_rank.js": true,
    "JSFile900\\aa_com\\application.js": true,
    "JSFile900\\aa_com\\belo_omnitureVarsComm.js": true,
    "JSFile900\\aa_com\\boxmodel.js": true,
    "JSFile900\\aa_com\\crmenu.js": true,
    "JSFile900\\aa_com\\dnn.js": true,
    "JSFile900\\aa_com\\dnn_xml.js": true,
    "JSFile900\\aa_com\\dnn_xmlhttp.js": true,
    "JSFile900\\aa_com\\ent_core_js_loader_js_yahoo_dom_event_js_cp_std_js_cp_help_popup_min.js": true,
    "JSFile900\\aa_com\\gfeedfetcher.js": true,
    "JSFile900\\aa_com\\jquery_min.js": true,
    "JSFile900\\aa_com\\jquery_ui.js": true,
    "JSFile900\\aa_com\\jquery_ui_1_8_7_min.js": true,
    "JSFile900\\aa_com\\ScriptResource.js": true,
    "JSFile900\\aa_com\\TeaLeaf.js": true,
    "JSFile900\\aa_com\\valid.js": true,
    "JSFile900\\aa_com\\widgets.js": true,
    "JSFile900\\abnamro_nl\\homepage.js": true,
    "JSFile900\\as_com\\animate.js": true,
    "JSFile900\\as_com\\barebone.js": true,
    "JSFile900\\as_com\\breadcrumbs.js": true,
    "JSFile900\\as_com\\cabovillas.js": true,
    "JSFile900\\as_com\\calendarUtil.js": true,
    "JSFile900\\as_com\\carrabbas_sdc.js": true,
    "JSFile900\\as_com\\categories.js": true,
    "JSFile900\\as_com\\cFrame.js": true,
    "JSFile900\\as_com\\coolmenu.js": true,
    "JSFile900\\as_com\\date3days.js": true,
    "JSFile900\\as_com\\dnn.js": true,
    "JSFile900\\as_com\\dnn_controls.js": true,
    "JSFile900\\as_com\\dnn_controls_dnnmenu.js": true,
    "JSFile900\\as_com\\dnn_dom_positioning.js": true,
    "JSFile900\\as_com\\dw_glidescroll.js": true,
    "JSFile900\\as_com\\dw_scroller.js": true,
    "JSFile900\\as_com\\emailinclude3.js": true,
    "JSFile900\\as_com\\EPlanning.js": true,
    "JSFile900\\as_com\\ext_base.js": true,
    "JSFile900\\as_com\\finalizestats.js": true,
    "JSFile900\\as_com\\flashobjects_js_pv2044f65aa1901c43.js": true,
    "JSFile900\\as_com\\flash_versions.js": true,
    "JSFile900\\as_com\\flexcroll.js": true,
    "JSFile900\\as_com\\floating.js": true,
    "JSFile900\\as_com\\fontselection.js": true,
    "JSFile900\\as_com\\FrontEnd.js": true,
    "JSFile900\\as_com\\gassets_FE_v025.js": true,
    "JSFile900\\as_com\\GasZipCode.js": true,
    "JSFile900\\as_com\\Global.js": true,
    "JSFile900\\as_com\\globalNavigation.js": true,
    "JSFile900\\as_com\\globalservices.js": true,
    "JSFile900\\as_com\\gngB.js": true,
    "JSFile900\\as_com\\home.js": true,
    "JSFile900\\as_com\\home_popup.js": true,
    "JSFile900\\as_com\\home_slideshow.js": true,
    "JSFile900\\as_com\\icws_generic.js": true,
    "JSFile900\\as_com\\ifc.js": true,
    "JSFile900\\as_com\\imageflow.js": true,
    "JSFile900\\as_com\\incFadeImagesAPI.js": true,
    "JSFile900\\as_com\\java_functions.js": true,
    "JSFile900\\as_com\\jquery_1_2_6.js": true,
    "JSFile900\\as_com\\jquery_1_2_6_min.js": true,
    "JSFile900\\as_com\\jquery_1_4_2_min.js": true,
    "JSFile900\\as_com\\jquery_1_5_1_min.js": true,
    "JSFile900\\as_com\\jquery_blockUI.js": true,
    "JSFile900\\as_com\\jquery_cycle.js": true,
    "JSFile900\\as_com\\jquery_datepick.js": true,
    "JSFile900\\as_com\\jquery_event_hoverIntent.js": true,
    "JSFile900\\as_com\\jquery_fancybox_1_2_6_min.js": true,
    "JSFile900\\as_com\\jquery_iframe_auto_height_plugin.js": true,
    "JSFile900\\as_com\\jquery_latest_min.js": true,
    "JSFile900\\as_com\\jquery_maskedinput_1_2_2_min.js": true,
    "JSFile900\\as_com\\jquery_query_2_1_7.js": true,
    "JSFile900\\as_com\\jquery_ui.js": true,
    "JSFile900\\as_com\\jquery_ui_min.js": true,
    "JSFile900\\as_com\\jssource.js": true,
    "JSFile900\\as_com\\js_188b8249c3f05ffbb551c66659817746.js": true,
    "JSFile900\\as_com\\js_859ab8889182ab70be3cdbcc0fd941e2.js": true,
    "JSFile900\\as_com\\js_faa7238616ee0a9d52a7230ad66b0cc5.js": true,
    "JSFile900\\as_com\\js_functions.js": true,
    "JSFile900\\as_com\\lansa_code.js": true,
    "JSFile900\\as_com\\lytebox.js": true,
    "JSFile900\\as_com\\main.js": true,
    "JSFile900\\as_com\\maxandermas.js": true,
    "JSFile900\\as_com\\menuarray_3_5.js": true,
    "JSFile900\\as_com\\menucontents.js": true,
    "JSFile900\\as_com\\MicrosoftMvcJQueryValidation_custom.js": true,
    "JSFile900\\as_com\\mm_menu.js": true,
    "JSFile900\\as_com\\modal.js": true,
    "JSFile900\\as_com\\MyBriefcase.js": true,
    "JSFile900\\as_com\\nav.js": true,
    "JSFile900\\as_com\\oqey_js_drag_iphone.js": true,
    "JSFile900\\as_com\\p7IRMscripts.js": true,
    "JSFile900\\as_com\\Print.js": true,
    "JSFile900\\as_com\\protoaculous1_6.js": true,
    "JSFile900\\as_com\\reloj.js": true,
    "JSFile900\\as_com\\rules_90120268.js": true,
    "JSFile900\\as_com\\ScriptResource.js": true,
    "JSFile900\\as_com\\scripts.js": true,
    "JSFile900\\as_com\\Scroller.js": true,
    "JSFile900\\as_com\\services.js": true,
    "JSFile900\\as_com\\soapclient.js": true,
    "JSFile900\\as_com\\sound.js": true,
    "JSFile900\\as_com\\stm31.js": true,
    "JSFile900\\as_com\\swfaddress.js": true,
    "JSFile900\\as_com\\s_code.js": true,
    "JSFile900\\as_com\\topnav.js": true,
    "JSFile900\\as_com\\weatherwidget.js": true,
    "JSFile900\\as_com\\xml.js": true,
    "JSFile900\\as_com\\__utm.js": true,
    "JSFile900\\cartoonnetwork_com\\ac_fl.js": true,
    "JSFile900\\cartoonnetwork_com\\common.js": true,
    "JSFile900\\cartoonnetwork_com\\previewPage.js": true,
    "JSFile900\\cartoonnetwork_com\\s_code_H15.js": true,
    "JSFile900\\cartoonnetwork_com\\utils.js": true,
    "JSFile900\\dailymail_co_uk\\dm1__46_FIX_SNAPSHOT_build_228.js": true,
    "JSFile900\\ed_gov\\gfeedfetcher.js": true,
    "JSFile900\\ed_gov\\jquery.js": true,
    "JSFile900\\ed_gov\\jquery_hoverIntent_minified.js": true,
    "JSFile900\\ed_gov\\jquery_min.js": true,
    "JSFile900\\ed_gov\\main.js": true,
    "JSFile900\\gumtree_com\\weather_widget.js": true,
    "JSFile900\\hilton_com\\adverpost_data_file_coco.js": true,
    "JSFile900\\hilton_com\\adverpost_data_file_perez.js": true,
    "JSFile900\\hilton_com\\brand_homepage.js": true,
    "JSFile900\\hilton_com\\default.js": true,
    "JSFile900\\hilton_com\\ResourceHandler.js": true,
    "JSFile900\\hilton_com\\wtbaseHilton.js": true,
    "JSFile900\\logmein_com\\ScriptResource.js": true,
    "JSFile900\\logmein_com\\wtid.js": true,
    "JSFile900\\netteller_com\\JHA_Core.js": true,
    "JSFile900\\netteller_com\\jquery_1_4_3_min.js": true,
    "JSFile900\\netteller_com\\jquery_ui_1_8_custom_min.js": true,
    "JSFile900\\netteller_com\\NetTellerCorners.js": true,
    "JSFile900\\one_lt\\xgemius.js": true,
    "JSFile900\\playhub_com\\xajax_core.js": true,
    "JSFile900\\snap_com\\jquery_1_3_1.js": true,
    "JSFile900\\snap_com\\jquery_hoverIntent.js": true,
    "JSFile900\\snap_com\\prototype.js": true,
    "JSFile900\\usatoday_com\\usataj.js": true,
    "JSFile900\\usps_com\\calendar.js": true,
    "JSFile900\\usps_com\\calendar_custom.js": true,
    "JSFile900\\usps_com\\calendar_en.js": true,
    "JSFile900\\usps_com\\calendar_setup.js": true,
    "JSFile900\\usps_com\\default.js": true,
    "JSFile900\\usps_com\\disclaimer.js": true,
    "JSFile900\\usps_com\\utils.js": true,
    "JSFile900\\usps_com\\wtid.js": true,
    "JSFile900\\washingtonpost_com\\utilsTextLinksXML.js": true,
    "JSFile900\\whitepages_com\\AAMSZ_teaser_link.js": true,
    "JSFileTop1000\\answers_com\\Flash.js": true,
    "JSFileTop1000\\answers_com\\generalFunctions.js": true,
    "JSFileTop1000\\answers_com\\PHAScript.js": true,
    "JSFileTop1000\\army_mil\\302.js": true,
    "JSFileTop1000\\army_mil\\bookmark.js": true,
    "JSFileTop1000\\army_mil\\centeredwindow.js": true,
    "JSFileTop1000\\army_mil\\coolmenus4.js": true,
    "JSFileTop1000\\army_mil\\ddlevelsmenu.js": true,
    "JSFileTop1000\\army_mil\\functions.js": true,
    "JSFileTop1000\\army_mil\\incBottom.js": true,
    "JSFileTop1000\\army_mil\\javascripts.js": true,
    "JSFileTop1000\\army_mil\\jquery_hoverIntent.js": true,
    "JSFileTop1000\\army_mil\\jquery_hoverIntent_min.js": true,
    "JSFileTop1000\\army_mil\\leavingmil.js": true,
    "JSFileTop1000\\army_mil\\main.js": true,
    "JSFileTop1000\\army_mil\\NewsSlide.js": true,
    "JSFileTop1000\\army_mil\\png.js": true,
    "JSFileTop1000\\army_mil\\random.js": true,
    "JSFileTop1000\\army_mil\\randompics.js": true,
    "JSFileTop1000\\army_mil\\randomtext.js": true,
    "JSFileTop1000\\army_mil\\skmmenu.js": true,
    "JSFileTop1000\\army_mil\\stmenu.js": true,
    "JSFileTop1000\\army_mil\\swfobject.js": true,
    "JSFileTop1000\\army_mil\\worldClock.js": true,
    "JSFileTop1000\\buienradar_nl\\checkscherm.js": true,
    "JSFileTop1000\\buienradar_nl\\comscore.js": true,
    "JSFileTop1000\\buienradar_nl\\comscore_clickout.js": true,
    "JSFileTop1000\\buienradar_nl\\floorad.js": true,
    "JSFileTop1000\\elmundo_es\\accordian.js": true,
    "JSFileTop1000\\elmundo_es\\toolbar_colapsada.js": true,
    "JSFileTop1000\\fulltono_com\\fulltono2.js": true,
    "JSFileTop1000\\fulltono_com\\invite.js": true,
    "JSFileTop1000\\fulltono_com\\mt.js": true,
    "JSFileTop1000\\fulltono_com\\swfobject.js": true,
    "JSFileTop1000\\hankooki_com\\main_hk.js": true,
    "JSFileTop1000\\hkjc_com\\globallogin.js": true,
    "JSFileTop1000\\hkjc_com\\homepage_feature_1.js": true,
    "JSFileTop1000\\hkjc_com\\homepage_feature_2.js": true,
    "JSFileTop1000\\hkjc_com\\homepage_feature_3.js": true,
    "JSFileTop1000\\hkjc_com\\home_news_headlines.js": true,
    "JSFileTop1000\\hkjc_com\\ssoConfig.js": true,
    "JSFileTop1000\\hkjc_com\\SSOCore.js": true,
    "JSFileTop1000\\hkjc_com\\swap_image.js": true,
    "JSFileTop1000\\hm_com\\globalJQ.js": true,
    "JSFileTop1000\\hm_com\\membership.js": true,
    "JSFileTop1000\\hm_com\\upp.js": true,
    "JSFileTop1000\\intellitxt_com\\coxtv_itxt.js": true,
    "JSFileTop1000\\intellitxt_com\\data_1307015294.js": true,
    "JSFileTop1000\\kbb_com\\optimostfoot.js": true,
    "JSFileTop1000\\kiwidisk_com\\default.js": true,
    "JSFileTop1000\\kiwidisk_com\\formchk.js": true,
    "JSFileTop1000\\lespac_com\\jquery_validate_pack.js": true,
    "JSFileTop1000\\lotte_com\\BIM_js_popwin.js": true,
    "JSFileTop1000\\mthai_com\\innerfade.js": true,
    "JSFileTop1000\\mthai_com\\jquery.js": true,
    "JSFileTop1000\\nab_com_au\\autoSharePrice.js": true,
    "JSFileTop1000\\nab_com_au\\Common_OpenWin.js": true,
    "JSFileTop1000\\nab_com_au\\national_search.js": true,
    "JSFileTop1000\\nhk_or_jp\\common.js": true,
    "JSFileTop1000\\nih_gov\\browserCheck2.js": true,
    "JSFileTop1000\\nih_gov\\googleTrackingCode.js": true,
    "JSFileTop1000\\nih_gov\\images2.js": true,
    "JSFileTop1000\\nih_gov\\jig_min.js": true,
    "JSFileTop1000\\nih_gov\\leavesite.js": true,
    "JSFileTop1000\\nih_gov\\MenuAdapter.js": true,
    "JSFileTop1000\\nih_gov\\portal.js": true,
    "JSFileTop1000\\nih_gov\\style_logic2.js": true,
    "JSFileTop1000\\nih_gov\\utils.js": true,
    "JSFileTop1000\\nih_gov\\vivisimo.js": true,
    "JSFileTop1000\\nih_gov\\wtid.js": true,
    "JSFileTop1000\\officelive_com\\WebResource.js": true,
    "JSFileTop1000\\people_com\\bhpoptin.js": true,
    "JSFileTop1000\\people_com\\functions.js": true,
    "JSFileTop1000\\people_com\\jquery_1_4_2_min.js": true,
    "JSFileTop1000\\people_com\\main.js": true,
    "JSFileTop1000\\people_com\\WebResource.js": true,
    "JSFileTop1000\\sears_com\\foresee_surveydef.js": true,
    "JSFileTop1000\\state_gov\\google_analytics.js": true,
    "JSFileTop1000\\state_gov\\WebUIValidation.js": true,
    "JSFileTop1000\\sympatico_ca\\jquery_blockUI.js": true,
    "JSFileTop1000\\uwants_com\\ajax.js": true,
    "JSFileTop1000\\uwants_com\\common_rev09.js": true,
    "JSFileTop1000\\verizon_com\\Ajax.js": true,
    "JSFileTop1000\\verizon_com\\Connect.js": true,
    "JSFileTop1000\\verizon_com\\custom_hbx.js": true,
    "JSFileTop1000\\verizon_com\\hbxscript.js": true,
    "JSFileTop1000\\verizon_com\\helper.js": true,
    "JSFileTop1000\\verizon_com\\javascriptConstants_jsp.js": true,
    "JSFileTop1000\\verizon_com\\jquery_latest.js": true,
    "JSFileTop1000\\verizon_com\\mpesp.js": true,
    "JSFileTop1000\\verizon_com\\Rating.js": true,
    "JSFileTop1000\\verizon_com\\ReviewIt.js": true,
    "JSFileTop1000\\verizon_com\\ShareIt.js": true,
    "JSFileTop1000\\verizon_com\\thickbox.js": true,
    "JSFileTop1000\\verizon_com\\UnAuthenticatedFunction.js": true,
    "JSFileTop1000\\vg_no\\adscript.js": true,
    "JSFileTop1000\\weebly_com\\effects_min.js": true,
    "JSFileTop1000\\xe_com\\dnn.js": true,
    "JSFileTop1000\\xe_com\\dnn_xml.js": true,
    "JSFileTop1000\\xe_com\\dnn_xmlhttp.js": true,
    "JSFile100\\amazon_com\\01Tr6v6ehxL.js": true,
    "JSFile100\\facebook_com\\6S8W9_zcvGH.js": true,
    "JSFile100\\bing_com\\s_code.js": true,
    "JSFile100\\comcast_net\\datechooser.js": true,
    "JSFile100\\amazon_com\\all_1.js": true,
    "JSFile100\\atdmt_com\\016758.js": true,
    "JSFile100\\yandex_ru\\watch_visor.js": true,
    "JSFile100\\uol_com_br\\site_uolbr_chan_batepapo_subchan_capa_affiliate_uolbrbatepapo_size_125x125_page_7_conntype_1_expble_0_reso_1756x1127_tile_215298826605972.js": true,
    "JSFile100\\uol_com_br\\site_uolbr_chan_batepapo_subchan_capa_affiliate_uolbrbatepapo_size_728x90_page_1_conntype_1_expble_0_reso_1756x1127_tile_215298826605972.js": true,
    "JSFile100\\aol_com\\ajax.js": true,
    "JSFile100\\aol_com\\ad_refresher.js": true,
    "JSFile100\\bing_com\\omniture.js": true,
    "JSFile100\\bing_com\\ScriptResource.js": true,
    "JSFile600\\xstreetsl_com\\mootools_1_2_3_production.js": true,
    "JSFile800\\fedex_com\\InstantInvite3.js": true
};
var stringTable = new StringTable();
var specificFile = undefined;
var Program = (function () {
    function Program() { }
    Program.prototype.runAllTests = function (environment, useTypeScript, verify) {
        var _this = this;
        environment.standardOut.WriteLine("");
        environment.standardOut.WriteLine("Testing trivia.");
        this.runTests(environment, "C:\\fidelity\\src\\prototype\\tests\\trivia\\ecmascript5", function (filePath) {
            return _this.runTrivia(environment, filePath, 1 /* EcmaScript5 */ , verify, false);
        });
        environment.standardOut.WriteLine("Testing emitter.");
        this.runTests(environment, "C:\\fidelity\\src\\prototype\\tests\\emitter\\ecmascript5", function (filePath) {
            return _this.runEmitter(environment, filePath, 1 /* EcmaScript5 */ , verify, false, null);
        });
        environment.standardOut.WriteLine("Testing emitter.");
        this.runTests(environment, "C:\\fidelity\\src\\prototype\\tests\\emitter2\\ecmascript5", function (filePath) {
            return _this.runEmitter(environment, filePath, 1 /* EcmaScript5 */ , verify, false, true);
        });
        environment.standardOut.WriteLine("Testing scanner.");
        this.runTests(environment, "C:\\fidelity\\src\\prototype\\tests\\scanner\\ecmascript5", function (filePath) {
            return _this.runScanner(environment, filePath, 1 /* EcmaScript5 */ , verify, false);
        });
        environment.standardOut.WriteLine("Testing parser.");
        this.runTests(environment, "C:\\fidelity\\src\\prototype\\tests\\parser\\ecmascript5", function (filePath) {
            return _this.runParser(environment, filePath, 1 /* EcmaScript5 */ , useTypeScript, verify, false);
        });
        environment.standardOut.WriteLine("Testing against monoco.");
        this.runTests(environment, "C:\\temp\\monoco-files", function (filePath) {
            return _this.runParser(environment, filePath, 1 /* EcmaScript5 */ , useTypeScript, false, false);
        });
        environment.standardOut.WriteLine("Testing against 262.");
        this.runTests(environment, "C:\\fidelity\\src\\prototype\\tests\\test262", function (filePath) {
            return _this.runParser(environment, filePath, 1 /* EcmaScript5 */ , useTypeScript, false, false);
        });
    };
    Program.prototype.handleException = function (environment, filePath, e) {
        environment.standardOut.WriteLine("");
        if((e.message).indexOf(filePath) < 0) {
            environment.standardOut.WriteLine("Exception: " + filePath + ": " + e.message);
        } else {
            environment.standardOut.WriteLine(e.message);
        }
    };
    Program.prototype.runTests = function (environment, path, action) {
        var testFiles = environment.listFiles(path, null, {
            recursive: true
        });
        for(var index in testFiles) {
            var filePath = testFiles[index];
            if(specificFile !== undefined && filePath.indexOf(specificFile) < 0) {
                continue;
            }
            try  {
                action(filePath);
            } catch (e) {
                this.handleException(environment, filePath, e);
            }
        }
    };
    Program.prototype.checkResult = function (filePath, result, verify, generateBaseline, justText) {
        if(generateBaseline) {
            var actualResult = justText ? result : JSON2.stringify(result, null, 4);
            var expectedFile = filePath + ".expected";
            Environment.writeFile(expectedFile, actualResult, true);
        } else {
            if(verify) {
                var actualResult = justText ? result : JSON2.stringify(result, null, 4);
                var expectedFile = filePath + ".expected";
                var actualFile = filePath + ".actual";
                var expectedResult = null;
                if(!Environment.fileExists(expectedFile)) {
                    Environment.writeFile(expectedFile, "", false);
                } else {
                    expectedResult = Environment.readFile(expectedFile, true);
                }
                if(expectedResult !== actualResult) {
                    Environment.standardOut.WriteLine(" !! Test Failed. Results written to: " + actualFile);
                    Environment.writeFile(actualFile, actualResult, true);
                }
            }
        }
    };
    Program.prototype.runEmitter = function (environment, filePath, languageVersion, verify, generateBaseline, justText) {
        if(true) {
        }
        if(!StringUtilities.endsWith(filePath, ".ts") && !StringUtilities.endsWith(filePath, ".js")) {
            return;
        }
        if(filePath.indexOf("RealSource") >= 0) {
            return;
        }
        var contents = environment.readFile(filePath, true);
        var start, end;
        start = new Date().getTime();
        totalSize += contents.length;
        var text = new StringText(contents);
        var parser = new Parser(text, languageVersion, stringTable);
        var tree = parser.parseSyntaxTree();
        var emitted = Emitter.emit(tree.sourceUnit());
        end = new Date().getTime();
        totalTime += (end - start);
        var result = justText ? emitted.fullText() : {
            fullText: emitted.fullText().split("\r\n"),
            sourceUnit: emitted
        };
        this.checkResult(filePath, result, verify, generateBaseline, justText);
    };
    Program.prototype.runParser = function (environment, filePath, languageVersion, useTypeScript, verify, generateBaseline) {
        if (typeof generateBaseline === "undefined") { generateBaseline = false; }
        if(!StringUtilities.endsWith(filePath, ".ts") && !StringUtilities.endsWith(filePath, ".js")) {
            return;
        }
        if(filePath.indexOf("RealSource") >= 0) {
            return;
        }
        var contents = environment.readFile(filePath, true);
        var start, end;
        start = new Date().getTime();
        totalSize += contents.length;
        if(useTypeScript) {
            var text1 = new TypeScript.StringSourceText(contents);
            var parser1 = new TypeScript.Parser();
            parser1.errorRecovery = true;
            var unit1 = parser1.parse(text1, filePath, 0);
            end = new Date().getTime();
            totalTime += (end - start);
        } else {
            var text = new StringText(contents);
            var parser = new Parser(text, languageVersion, stringTable);
            var unit = parser.parseSyntaxTree();
            end = new Date().getTime();
            totalTime += (end - start);
            this.checkResult(filePath, unit, verify, generateBaseline, false);
        }
    };
    Program.prototype.runTrivia = function (environment, filePath, languageVersion, verify, generateBaseline) {
        if (typeof generateBaseline === "undefined") { generateBaseline = false; }
        if(!StringUtilities.endsWith(filePath, ".ts")) {
            return;
        }
        var contents = environment.readFile(filePath, true);
        var start, end;
        start = new Date().getTime();
        var text = new StringText(contents);
        var scanner = Scanner.create(text, languageVersion);
        var tokens = [];
        var textArray = [];
        var diagnostics = [];
        while(true) {
            var token = scanner.scan(diagnostics, false);
            tokens.push(token.realize());
            if(token.tokenKind === 118 /* EndOfFileToken */ ) {
                break;
            }
        }
        end = new Date().getTime();
        totalTime += (end - start);
        this.checkResult(filePath, tokens, verify, generateBaseline, false);
    };
    Program.prototype.runScanner = function (environment, filePath, languageVersion, verify, generateBaseline) {
        if(!StringUtilities.endsWith(filePath, ".ts")) {
            return;
        }
        var contents = environment.readFile(filePath, true);
        var start, end;
        start = new Date().getTime();
        var text = new StringText(contents);
        var scanner = Scanner.create(text, languageVersion);
        var tokens = [];
        var textArray = [];
        var diagnostics = [];
        while(true) {
            var token = scanner.scan(diagnostics, false);
            tokens.push(token);
            if(token.tokenKind === 118 /* EndOfFileToken */ ) {
                break;
            }
        }
        end = new Date().getTime();
        totalTime += (end - start);
        if(verify) {
            var tokenText = ArrayUtilities.select(tokens, function (t) {
                return t.fullText();
            }).join("");
            if(tokenText !== contents) {
                throw new Error("Token invariant broken!");
            }
        }
        var result = diagnostics.length === 0 ? tokens : {
            diagnostics: diagnostics,
            tokens: tokens
        };
        this.checkResult(filePath, result, verify, generateBaseline, false);
    };
    Program.prototype.run = function (environment, useTypeScript) {
        environment.standardOut.WriteLine("Testing input files.");
        for(var index in environment.arguments) {
            var filePath = environment.arguments[index];
            if(specificFile !== undefined && filePath.indexOf(specificFile) < 0) {
                continue;
            }
            this.runParser(environment, filePath, 1 /* EcmaScript5 */ , useTypeScript, false, false);
        }
    };
    Program.prototype.run262 = function (environment) {
        var path = "C:\\temp\\test262\\suite";
        var testFiles = environment.listFiles(path, null, {
            recursive: true
        });
        var testCount = 0;
        var failCount = 0;
        var skippedTests = [];
        for(var index in testFiles) {
            var filePath = testFiles[index];
            if(specificFile !== undefined && filePath.indexOf(specificFile) < 0) {
                continue;
            }
            var contents = environment.readFile(filePath, true);
            var start, end;
            start = new Date().getTime();
            try  {
                totalSize += contents.length;
                var isNegative = contents.indexOf("@negative") >= 0;
                testCount++;
                try  {
                    var stringText = new StringText(contents);
                    var parser = new Parser(stringText, 1 /* EcmaScript5 */ , stringTable);
                    var syntaxTree = parser.parseSyntaxTree();
                    if(isNegative) {
                        var fileName = filePath.substr(filePath.lastIndexOf("\\") + 1);
                        var canParseSuccessfully = negative262ExpectedResults[fileName];
                        if(canParseSuccessfully) {
                            if(syntaxTree.diagnostics() && syntaxTree.diagnostics().length > 0) {
                                environment.standardOut.WriteLine("Negative test. Unexpected failure: " + filePath);
                                failCount++;
                            }
                        } else {
                            if(syntaxTree.diagnostics() === null || syntaxTree.diagnostics().length === 0) {
                                environment.standardOut.WriteLine("Negative test. Unexpected success: " + filePath);
                                failCount++;
                            }
                        }
                    } else {
                        if(syntaxTree.diagnostics() && syntaxTree.diagnostics().length > 0) {
                            environment.standardOut.WriteLine("Unexpected failure: " + filePath);
                            failCount++;
                        }
                    }
                } catch (e) {
                    failCount++;
                    this.handleException(environment, filePath, e);
                }
            }finally {
                end = new Date().getTime();
                totalTime += (end - start);
            }
        }
        environment.standardOut.WriteLine("");
        environment.standardOut.WriteLine("Test 262 results:");
        environment.standardOut.WriteLine("Test Count: " + testCount);
        environment.standardOut.WriteLine("Skip Count: " + skippedTests.length);
        environment.standardOut.WriteLine("Fail Count: " + failCount);
        for(var i = 0; i < skippedTests.length; i++) {
            environment.standardOut.WriteLine(skippedTests[i]);
        }
    };
    Program.prototype.runTop1000 = function (environment) {
        environment.standardOut.WriteLine("Testing top 1000 sites.");
        var path = "C:\\Temp\\TopJSFiles";
        var testFiles = environment.listFiles(path, null, {
            recursive: true
        });
        var testCount = 0;
        var failCount = 0;
        var skippedTests = [];
        for(var index in testFiles) {
            var filePath = testFiles[index];
            if(specificFile !== undefined && filePath.indexOf(specificFile) < 0) {
                continue;
            }
            var canParseSuccessfully = expectedTop1000Failures[filePath.substr(path.length + 1)] === undefined;
            var contents = environment.readFile(filePath, true);
            var start, end;
            start = new Date().getTime();
            try  {
                totalSize += contents.length;
                testCount++;
                try  {
                    var stringText = new StringText(contents);
                    var parser = new Parser(stringText, 1 /* EcmaScript5 */ , stringTable);
                    var syntaxTree = parser.parseSyntaxTree();
                    if(canParseSuccessfully) {
                        if(syntaxTree.diagnostics() && syntaxTree.diagnostics().length > 0) {
                            environment.standardOut.WriteLine("Unexpected failure: " + filePath);
                            failCount++;
                        }
                    } else {
                        if(syntaxTree.diagnostics() === null || syntaxTree.diagnostics().length === 0) {
                            environment.standardOut.WriteLine("Unexpected success: " + filePath);
                            failCount++;
                        }
                    }
                } catch (e) {
                    failCount++;
                    this.handleException(environment, filePath, e);
                }
            }finally {
                end = new Date().getTime();
                totalTime += (end - start);
            }
        }
        environment.standardOut.WriteLine("");
        environment.standardOut.WriteLine("Top 1000 results:");
        environment.standardOut.WriteLine("Test Count: " + testCount);
        environment.standardOut.WriteLine("Skip Count: " + skippedTests.length);
        environment.standardOut.WriteLine("Fail Count: " + failCount);
        for(var i = 0; i < skippedTests.length; i++) {
            environment.standardOut.WriteLine(skippedTests[i]);
        }
    };
    return Program;
})();
var totalSize = 0;
var totalTime = 0;
var program = new Program();
if(true) {
    totalTime = 0;
    totalSize = 0;
    program.runAllTests(Environment, false, true);
    program.run(Environment, false);
    Environment.standardOut.WriteLine("Total time: " + totalTime);
    Environment.standardOut.WriteLine("Total size: " + totalSize);
}
if(false) {
    totalTime = 0;
    totalSize = 0;
    program.runAllTests(Environment, true, false);
    program.run(Environment, true);
    Environment.standardOut.WriteLine("Total time: " + totalTime);
    Environment.standardOut.WriteLine("Total size: " + totalSize);
}
if(true) {
    totalTime = 0;
    totalSize = 0;
    program.run262(Environment);
    Environment.standardOut.WriteLine("Total time: " + totalTime);
    Environment.standardOut.WriteLine("Total size: " + totalSize);
}
if(false) {
    totalTime = 0;
    totalSize = 0;
    program.runTop1000(Environment);
    Environment.standardOut.WriteLine("Total time: " + totalTime);
    Environment.standardOut.WriteLine("Total size: " + totalSize);
}
