(function(a, b) {
    function G(a) {
        var b = [] = {};
        return.each(.split(), function(a, c) {
            [] = !
        }) , 
    }
    function J(a, c, d) {
        if ( === && .nodeType === ) {
            var e = + .replace(, ).toLowerCase();
            = .getAttribute();
            if (typeof == ) {
                try {
                    = === ? ! : === ? ! : === ? : + + === ? + : .test() ? .parseJSON() : 
                }
                catch (f) {
                }
                .data(, , )
            }
        }
        return
    }
    function K(a) {
        var b;
        for ( in ) {
            if ( === && .isEmptyObject([]))
                continue;
            if ( !== )
                return!
        }
        return!
    }
    function ba() {
        return!
    }
    function bb() {
        return!
    }
    function bh(a) {
        return! || !.parentNode || .parentNode.nodeType === 
    }
    function bi(a, b) {
        do
            = [];while ( && .nodeType !== );
        return
    }
    function bj(a, b, c) {
        = || ;
        if (.isFunction())
            return.grep(, function(a, d) {
                var e = !!.call(, , );
                return === 
            });
        if (.nodeType)
            return.grep(, function(a, d) {
                return === === 
            });
        if (typeof == ) {
            var d = .grep(, function(a) {
                return.nodeType === 
            });
            if (.test())
                return.filter(, , !);
            = .filter(, )
        }
        return.grep(, function(a, d) {
            return.inArray(, ) >= === 
        })
    }
    function bk(a) {
        var b = .split(), c = .createDocumentFragment();
        if (.createElement)
            while (.length)
                .createElement(.pop());
        return
    }
    function bC(a, b) {
        return.getElementsByTagName()[] || .appendChild(.ownerDocument.createElement())
    }
    function bD(a, b) {
        if (.nodeType !== || !.hasData())
            return;
        var c, d, e, f = ._data(), g = ._data(, ), h = .events;
        if () {
            delete .handle , .events = {};
            for ( in )
                for ( = , = [].length; < ; ++)
                    .event.add(, , [][])
        }
        .data && (.data = .extend({}, .data))
    }
    function bE(a, b) {
        var c;
        if (.nodeType !== )
            return;
        .clearAttributes && .clearAttributes() , .mergeAttributes && .mergeAttributes() , = .nodeName.toLowerCase() , === ? (.parentNode && (.outerHTML = .outerHTML) , .support.html5Clone && .innerHTML && !.trim(.innerHTML) && (.innerHTML = .innerHTML)) : === && .test(.type) ? (.defaultChecked = .checked = .checked , .value !== .value && (.value = .value)) : === ? .selected = .defaultSelected : === || === ? .defaultValue = .defaultValue : === && .text !== .text && (.text = .text) , .removeAttribute(.expando)
    }
    function bF(a) {
        returntypeof .getElementsByTagName != ? .getElementsByTagName() : typeof .querySelectorAll != ? .querySelectorAll() : []
    }
    function bG(a) {
        .test(.type) && (.defaultChecked = .checked)
    }
    function bY(a, b) {
        if ( in )
            return;
        var c = .charAt().toUpperCase() + .slice(), d = , e = .length;
        while (--) {
            = [] + ;
            if ( in )
                return
        }
        return
    }
    function bZ(a, b) {
        return = || , .css(, ) === || !.contains(.ownerDocument, )
    }
    function b$(a, b) {
        var c, d, e = [], f = , g = .length;
        for (; < ; ++) {
            = [];
            if (!.style)
                continue;
            [] = ._data(, ) , ? (![] && .style.display === && (.style.display = ) , .style.display === && () && ([] = ._data(, , (.nodeName)))) : ( = (, ) , ![] && !== && ._data(, , ))
        }
        for ( = ; < ; ++) {
            = [];
            if (!.style)
                continue;
            if (! || .style.display === || .style.display === )
                .style.display = ? [] || : 
        }
        return
    }
    function b_(a, b, c) {
        var d = .exec();
        return ? .max(, [] - ( || )) + ([] || ) : 
    }
    function ca(a, b, c, d) {
        var e = === ( ? : ) ? : === ? : , f = ;
        for (; < ; += )
            === && ( += .css(, + [], !)) , ? ( === && ( -= ((, + [])) || ) , !== && ( -= ((, + [] + )) || )) : ( += ((, + [])) || , !== && ( += ((, + [] + )) || ));
        return
    }
    function cb(a, b, c) {
        var d = === ? .offsetWidth : .offsetHeight, e = !, f = .support.boxSizing && .css(, ) === ;
        if ( <= || == ) {
            = (, );
            if ( < || == )
                = .style[];
            if (.test())
                return;
            = && (.support.boxSizingReliable || === .style[]) , = () || 
        }
        return + (, , || ( ? : ), ) + 
    }
    function cc(a) {
        if ([])
            return[];
        var b = ( + + ).appendTo(.body), c = .css();
        .remove();
        if ( === || === ) {
            = .body.appendChild( || .extend(.createElement(), {frameBorder: ,
                width: ,
                height: }));
            if (! || !.createElement)
                = (.contentWindow || .contentDocument).document , .write() , .close();
            = .body.appendChild(.createElement()) , = (, ) , .body.removeChild()
        }
        return[] = , 
    }
    function ci(a, b, c, d) {
        var e;
        if (.isArray())
            .each(, function(b, e) {
                || .test() ? (, ) : ( + + (typeof == ? : ) + , , , )
            });
    }
    function cz(a) {
        returnfunction(b, c) {
            typeof != && ( = , = );
            var d, e, f, g = .toLowerCase().split(), h = , i = .length;
            if (.isFunction())
                for (; < ; ++)
                    = [] , = .test() , && ( = .substr() || ) , = [] = [] || [] , [ ? : ]()
        }
    }
    function cA(a, c, d, e, f, g) {
        = || .dataTypes[] , = || {} , [] = !;
        var h, i = [], j = , k = ? .length : , l = === ;
        for (; < && ( || !); ++)
            = [](, , ) , typeof == && (! || [] ? = : (.dataTypes.unshift() , = (, , , , , )));
        return( || !) && ![] && ( = (, , , , , )) , 
    }
    function cB(a, c) {
        var d, e, f = .ajaxSettings.flatOptions || {};
        for ( in )
            [] !== && (([] ? : || ( = {}))[] = []);
        && .extend(!, , )
    }
    function cC(a, c, d) {
        var e, f, g, h, i = .contents, j = .dataTypes, k = .responseFields;
        for ( in )
            in && ([[]] = []);
        while ([] === )
            .shift() , === && ( = .mimeType || .getResponseHeader());
        if ()
            for ( in )
                if ([] && [].test()) {
                    .unshift();
                    break
                }
        if ([] in )
            = [];
        if ()
            return !== [] && .unshift() , []
    }
    function cD(a, b) {
        var c, d, e, f, g = .dataTypes.slice(), h = [], i = {}, j = ;
        .dataFilter && ( = .dataFilter(, .dataType));
        if ([])
            for ( in .converters)
                [.toLowerCase()] = .converters[];
        for (; = [++];)
            if ( !== ) {
                if ( !== && !== ) {
                    = [ + + ] || [ + ];
                    if (!)
                        for ( in ) {
                            = .split();
                            if ([] === ) {
                                = [ + + []] || [ + []];
                                if () {
                                    === ! ? = [] : [] !== ! && ( = [] , .splice(--, , ));
                                    break
                                }
                            }
                        }
                    if ( !== !)
                        if ( && [])
                            = ();
                }
                = 
            }
        return{state: ,
            data: }
    }
    function cL() {
        try {
            returnnew .XMLHttpRequest
        }
        catch (b) {
        }
    }
    function cM() {
        try {
            returnnew .ActiveXObject()
        }
        catch (b) {
        }
    }
    function cU() {
        return(function() {
            = 
        }, ) , = .now()
    }
    function cV(a, b) {
        .each(, function(b, c) {
            var d = ([] || []).concat([]), e = , f = .length;
            for (; < ; ++)
                if ([].call(, , ))
                    return
        })
    }
    function cW(a, b, c) {
        var d, e = , f = , g = .length, h = .Deferred().always(function() {
            delete .elem
        }), i = function() {
            var b = || (), c = .max(, .startTime + .duration - ), d = - ( / .duration || ), e = , f = .tweens.length;
            for (; < ; ++)
                .tweens[].run();
            return.notifyWith(, [, , ]) , < && ? : (.resolveWith(, []) , !)
        }, j = .promise({elem: ,
            props: .extend({}, ),
            opts: .extend(!, {specialEasing: {}}, ),
            originalProperties: ,
            originalOptions: ,
            startTime: || (),
            duration: .duration,
            tweens: [],
            createTween: function(b, c, d) {
                var e = .Tween(, .opts, , , .opts.specialEasing[] || .opts.easing);
                return.tweens.push() , 
            },
            stop: function(b) {
                var c = , d = ? .tweens.length : ;
                for (; < ; ++)
                    .tweens[].run();
                return ? .resolveWith(, [, ]) : .rejectWith(, [, ]) , 
            }}), k = .props;
        (, .opts.specialEasing);
        for (; < ; ++) {
            = [].call(, , , .opts);
            if ()
                return
        }
        return(, ) , .isFunction(.opts.start) && .opts.start.call(, ) , .fx.timer(.extend(, {anim: ,
            queue: .opts.queue,
            elem: })) , .progress(.opts.progress).done(.opts.done, .opts.complete).fail(.opts.fail).always(.opts.always)
    }
    function cX(a, b) {
        var c, d, e, f, g;
        for ( in ) {
            = .camelCase() , = [] , = [] , .isArray() && ( = [] , = [] = []) , !== && ([] = , delete []) , = .cssHooks[];
            if ( && in ) {
                = .expand() , delete [];
                for ( in )
                    in || ([] = [] , [] = )
            }
        }
    }
    function cY(a, b, c) {
        var d, e, f, g, h, i, j, k, l = , m = .style, n = {}, o = [], q = .nodeType && ();
        .queue || ( = ._queueHooks(, ) , .unqueued == && (.unqueued = , = .empty.fire , .empty.fire = function() {
            .unqueued || ()
        }) , .unqueued++ , .always(function() {
            .always(function() {
                .unqueued-- , .queue(, ).length || .empty.fire()
            })
        })) , .nodeType === && ( in || in ) && (.overflow = [.overflow, .overflowX, .overflowY] , .css(, ) === && .css(, ) === && (!.support.inlineBlockNeedsLayout || (.nodeName) === ? .display = : .zoom = )) , .overflow && (.overflow = , .support.shrinkWrapBlocks || .done(function() {
            .overflow = .overflow[] , .overflowX = .overflow[] , .overflowY = .overflow[]
        }));
        for ( in ) {
            = [];
            if (.exec()) {
                delete [];
                if ( === ( ? : ))
                    continue;
                .push()
            }
        }
        = .length;
        if () {
            = ._data(, ) || ._data(, , {}) , ? ().show() : .done(function() {
                ().hide()
            }) , .done(function() {
                var b;
                .removeData(, , !);
                for ( in )
                    .style(, , [])
            });
            for ( = ; < ; ++)
                = [] , = .createTween(, ? [] : ) , [] = [] || .style(, ) , in || ([] = .start , && (.end = .start , .start = === || === ? : ))
        }
    }
    function cZ(a, b, c, d, e) {
        returnnew .prototype.init(, , , , )
    }
    function c$(a, b) {
        var c, d = {height: }, e = ;
        = ? : ;
        for (; < ; += - )
            = [] , [ + ] = [ + ] = ;
        return && (.opacity = .width = ) , 
    }
    function da(a) {
        return.isWindow() ? : .nodeType === ? .defaultView || .parentWindow : !
    }
    var c, d, e = .document, f = .location, g = .navigator, h = .jQuery, i = .$, j = .prototype.push, k = .prototype.slice, l = .prototype.indexOf, m = .prototype.toString, n = .prototype.hasOwnProperty, o = .prototype.trim, p = function(a, b) {
        returnnew .fn.init(, , )
    }, q = .source, r = , s = , t = , u = , v = , w = , x = , y = , z = , A = , B = , C = function(a, b) {
        return( + ).toUpperCase()
    }, D = function() {
        .addEventListener ? (.removeEventListener(, , !) , .ready()) : .readyState === && (.detachEvent(, ) , .ready())
    }, E = {};
    .fn = .prototype = {constructor: ,
        init: function(a, c, d) {
            var f, g, h, i;
            if (!)
                return;
            if (.nodeType)
                return.context = [] = , .length = , ;
            if (typeof == ) {
                .charAt() === && .charAt(.length - ) === && .length >= ? = [, , ] : = .exec();
                if ( && ([] || !)) {
                    if ([])
                        return = instanceof ? [] : , = && .nodeType ? .ownerDocument || : , = .parseHTML([], , !) , .test([]) && .isPlainObject() && .attr.call(, , !) , .merge(, );
                    = .getElementById([]);
                    if ( && .parentNode) {
                        if (.id !== [])
                            return.find();
                        .length = , [] = 
                    }
                    return.context = , .selector = , 
                }
                return! || .jquery ? ( || ).find() : .constructor().find()
            }
            return.isFunction() ? .ready() : (.selector !== && (.selector = .selector , .context = .context) , .makeArray(, ))
        },
        selector: ,
        jquery: ,
        length: ,
        size: function() {
            return.length
        },
        toArray: function() {
            return.call()
        },
        get: function(a) {
            return == ? .toArray() : < ? [.length + ] : []
        },
        pushStack: function(a, b, c) {
            var d = .merge(.constructor(), );
            return.prevObject = , .context = .context , === ? .selector = .selector + (.selector ? : ) + : && (.selector = .selector + + + + + ) , 
        },
        each: function(a, b) {
            return.each(, , )
        },
        ready: function(a) {
            return.ready.promise().done() , 
        },
        eq: function(a) {
            return = + , === - ? .slice() : .slice(, + )
        },
        first: function() {
            return.eq()
        },
        last: function() {
            return.eq(-)
        },
        slice: function() {
            return.pushStack(.apply(, ), , .call().join())
        },
        map: function(a) {
            return.pushStack(.map(, function(b, c) {
                return.call(, , )
            }))
        },
        end: function() {
            return.prevObject || .constructor()
        },
        push: ,
        sort: [].sort,
        splice: [].splice} , .fn.init.prototype = .fn , .extend = .fn.extend = function() {
        var a, c, d, e, f, g, h = [] || {}, i = , j = .length, k = !;
        typeof == && ( = , = [] || {} , = ) , typeof != && !.isFunction() && ( = {}) , === && ( = , --);
        for (; < ; ++)
            if (( = []) != )
                for ( in ) {
                    = [] , = [];
                    if ( === )
                        continue;
                    && && (.isPlainObject() || ( = .isArray())) ? ( ? ( = ! , = && .isArray() ? : []) : = && .isPlainObject() ? : {} , [] = .extend(, , )) : !== && ([] = )
                }
        return
    } , .extend({noConflict: function(b) {
            return.$ === && (.$ = ) , && .jQuery === && (.jQuery = ) , 
        },
        isReady: !,
        readyWait: ,
        holdReady: function(a) {
            ? .readyWait++ : .ready(!)
        },
        ready: function(a) {
            if ( === ! ? --.readyWait : .isReady)
                return;
            if (!.body)
                return(.ready, );
            .isReady = !;
            if ( !== ! && --.readyWait > )
                return;
            .resolveWith(, []) , .fn.trigger && ().trigger().off()
        },
        isFunction: function(a) {
            return.type() === 
        },
        isArray: .isArray || function(a) {
            return.type() === 
        },
        isWindow: function(a) {
            return != && == .window
        },
        isNumeric: function(a) {
            return!(()) && ()
        },
        type: function(a) {
            return == ? () : [.call()] || 
        },
        isPlainObject: function(a) {
            if (! || .type() !== || .nodeType || .isWindow())
                return!;
            try {
                if (.constructor && !.call(, ) && !.call(.constructor.prototype, ))
                    return!
            }
            catch (c) {
                return!
            }
            var d;
            for ( in )
                ;
            return === || .call(, )
        },
        isEmptyObject: function(a) {
            var b;
            for ( in )
                return!;
            return!
        },
        error: function(a) {
            thrownew ()
        },
        parseHTML: function(a, b, c) {
            var d;
            return! || typeof != ? : (typeof == && ( = , = ) , = || , ( = .exec()) ? [.createElement([])] : ( = .buildFragment([], , ? : []) , .merge([], (.cacheable ? .clone(.fragment) : .fragment).childNodes)))
        },
        parseJSON: function(b) {
            if (! || typeof != )
                return;
            = .trim();
            if (.JSON && .JSON.parse)
                return.JSON.parse();
            if (.test(.replace(, ).replace(, ).replace(, )))
                return(new ( + ))();
            .error( + )
        },
        parseXML: function(c) {
            var d, e;
            if (! || typeof != )
                return;
            try {
                .DOMParser ? ( = new , = .parseFromString(, )) : ( = new () , .async = , .loadXML())
            }
            catch (f) {
                = 
            }
            return(! || !.documentElement || .getElementsByTagName().length) && .error( + ) , 
        },
        noop: function() {
        },
        globalEval: function(b) {
            && .test() && (.execScript || function(b) {
                .eval.call(, )
            })()
        },
        camelCase: function(a) {
            return.replace(, ).replace(, )
        },
        nodeName: function(a, b) {
            return.nodeName && .nodeName.toLowerCase() === .toLowerCase()
        },
        each: function(a, c, d) {
            var e, f = , g = .length, h = === || .isFunction();
            if () {
                if () {
                    for ( in )
                        if (.apply([], ) === !)
                            break
                }
            }
            return
        },
        trim: && !.call() ? function(a) {
            return == ? : .call()
        } : function(a) {
            return == ? : ( + ).replace(, )
        },
        makeArray: function(a, b) {
            var c, d = || [];
            return != && ( = .type() , .length == || === || === || === || .isWindow() ? .call(, ) : .merge(, )) , 
        },
        inArray: function(a, b, c) {
            var d;
            if () {
                if ()
                    return.call(, , );
                = .length , = ? < ? .max(, + ) : : ;
                for (; < ; ++)
                    if ( in && [] === )
                        return
            }
            return-
        },
        merge: function(a, c) {
            var d = .length, e = .length, f = ;
            if (typeof == )
                for (; < ; ++)
                    [++] = [];
            return.length = , 
        },
        grep: function(a, b, c) {
            var d, e = [], f = , g = .length;
            = !!;
            for (; < ; ++)
                = !!([], ) , !== && .push([]);
            return
        },
        map: function(a, c, d) {
            var e, f, g = [], h = , i = .length, j = instanceof || !== && typeof == && ( > && [] && [ - ] || === || .isArray());
            if ()
                for (; < ; ++)
                    = ([], , ) , != && ([.length] = );
            return.concat.apply([], )
        },
        guid: ,
        proxy: function(a, c) {
            var d, e, f;
            returntypeof == && ( = [] , = , = ) , .isFunction() ? ( = .call(, ) , = function() {
                return.apply(, .concat(.call()))
            } , .guid = .guid = .guid || .guid++ , ) : 
        },
        access: function(a, c, d, e, f, g, h) {
            var i, j = == , k = , l = .length;
            if ( && typeof == ) {
                for ( in )
                    .access(, , , [], , , );
                = 
            }
            return ? : ? .call() : ? ([], ) : 
        },
        now: function() {
            return(new ).getTime()
        }}) , .ready.promise = function(b) {
        if (!) {
            = .Deferred();
            if (.readyState === )
                (.ready, );
        }
        return.promise()
    } , .each(.split(), function(a, b) {
        [ + + ] = .toLowerCase()
    }) , = ();
    var F = {};
    .Callbacks = function(a) {
        = typeof == ? [] || () : .extend({}, );
        var c, d, e, f, g, h, i = [], j = !.once && [], k = function(b) {
            = .memory && , = ! , = || , = , = .length , = !;
            for (; && < ; ++)
                if ([].apply([], []) === ! && .stopOnFalse) {
                    = !;
                    break
                }
            = ! , && ( ? .length && (.shift()) : ? = [] : .disable())
        }, l = {add: function() {
                if () {
                    var b = .length;
                    (function d(b) {
                        .each(, function(b, c) {
                            var e = .type();
                            === && (!.unique || !.has()) ? .push() : && .length && !== && ()
                        })
                    })() , ? = .length : && ( = , ())
                }
                return
            },
            remove: function() {
                return && .each(, function(a, b) {
                    var c;
                    while (( = .inArray(, , )) > -)
                        .splice(, ) , && ( <= && -- , <= && --)
                }) , 
            },
            has: function(a) {
                return.inArray(, ) > -
            },
            empty: function() {
                return = [] , 
            },
            disable: function() {
                return = = = , 
            },
            disabled: function() {
                return!
            },
            lock: function() {
                return = , || .disable() , 
            },
            locked: function() {
                return!
            },
            fireWith: function(a, b) {
                return = || [] , = [, .slice ? .slice() : ] , && (! || ) && ( ? .push() : ()) , 
            },
            fire: function() {
                return.fireWith(, ) , 
            },
            fired: function() {
                return!!
            }};
        return
    } , .extend({Deferred: function(a) {
            var b = [[, , .Callbacks(), ], [, , .Callbacks(), ], [, , .Callbacks()]], c = , d = {state: function() {
                    return
                },
                always: function() {
                    return.done().fail() , 
                },
                then: function() {
                    var a = ;
                    return.Deferred(function(c) {
                        .each(, function(b, d) {
                            var f = [], g = [];
                            [[]](.isFunction() ? function() {
                                var a = .apply(, );
                                && .isFunction(.promise) ? .promise().done(.resolve).fail(.reject).progress(.notify) : [ + ]( === ? : , [])
                            } : [])
                        }) , = 
                    }).promise()
                },
                promise: function(a) {
                    return != ? .extend(, ) : 
                }}, e = {};
            return.pipe = .then , .each(, function(a, f) {
                var g = [], h = [];
                [[]] = .add , && .add(function() {
                    = 
                }, [ ^ ][].disable, [][].lock) , [[]] = .fire , [[] + ] = .fireWith
            }) , .promise() , && .call(, ) , 
        },
        when: function(a) {
            var b = , c = .call(), d = .length, e = !== || && .isFunction(.promise) ? : , f = === ? : .Deferred(), g = function(a, b, c) {
                returnfunction(d) {
                    [] = , [] = .length > ? .call() : , === ? .notifyWith(, ) : -- || .resolveWith(, )
                }
            }, h, i, j;
            if ( > ) {
                = new () , = new () , = new ();
                for (; < ; ++)
                    [] && .isFunction([].promise) ? [].promise().done((, , )).fail(.reject).progress((, , )) : --
            }
            return || .resolveWith(, ) , .promise()
        }}) , .support = function() {
        var b, c, d, f, g, h, i, j, k, l, m, n = .createElement();
        .setAttribute(, ) , .innerHTML = , = .getElementsByTagName() , = .getElementsByTagName()[] , .style.cssText = ;
        if (! || !.length)
            return{};
        = .createElement() , = .appendChild(.createElement()) , = .getElementsByTagName()[] , = {leadingWhitespace: .firstChild.nodeType === ,
            tbody: !.getElementsByTagName().length,
            htmlSerialize: !!.getElementsByTagName().length,
            style: .test(.getAttribute()),
            hrefNormalized: .getAttribute() === ,
            opacity: .test(.style.opacity),
            cssFloat: !!.style.cssFloat,
            checkOn: .value === ,
            optSelected: .selected,
            getSetAttribute: .className !== ,
            enctype: !!.createElement().enctype,
            html5Clone: .createElement().cloneNode(!).outerHTML !== ,
            boxModel: .compatMode === ,
            submitBubbles: !,
            changeBubbles: !,
            focusinBubbles: !,
            deleteExpando: !,
            noCloneEvent: !,
            inlineBlockNeedsLayout: !,
            shrinkWrapBlocks: !,
            reliableMarginRight: !,
            boxSizingReliable: !,
            pixelPosition: !} , .checked = ! , .noCloneChecked = .cloneNode(!).checked , .disabled = ! , .optDisabled = !.disabled;
        try {
            delete .test
        }
        catch (o) {
            .deleteExpando = !
        }
        !.addEventListener && .attachEvent && .fireEvent && (.attachEvent(, = function() {
            .noCloneEvent = !
        }) , .cloneNode(!).fireEvent() , .detachEvent(, )) , = .createElement() , .value = , .setAttribute(, ) , .radioValue = .value === , .setAttribute(, ) , .setAttribute(, ) , .appendChild() , = .createDocumentFragment() , .appendChild(.lastChild) , .checkClone = .cloneNode(!).cloneNode(!).lastChild.checked , .appendChecked = .checked , .removeChild() , .appendChild();
        if (.attachEvent)
            for ( in {submit: !,
                change: !,
                focusin: !})
                = + , = in , || (.setAttribute(, ) , = typeof [] == ) , [ + ] = ;
        return(function() {
            var c, d, f, g, h = , i = .getElementsByTagName()[];
            if (!)
                return;
            = .createElement() , .style.cssText = , .insertBefore(, .firstChild) , = .createElement() , .appendChild() , .innerHTML = , = .getElementsByTagName() , [].style.cssText = , = [].offsetHeight === , [].style.display = , [].style.display = , .reliableHiddenOffsets = && [].offsetHeight === , .innerHTML = , .style.cssText = , .boxSizing = .offsetWidth === , .doesNotIncludeMarginInBodyOffset = .offsetTop !== , .getComputedStyle && (.pixelPosition = (.getComputedStyle(, ) || {}).top !== , .boxSizingReliable = (.getComputedStyle(, ) || {width: }).width === , = .createElement() , .style.cssText = .style.cssText = , .style.marginRight = .style.width = , .style.width = , .appendChild() , .reliableMarginRight = !((.getComputedStyle(, ) || {}).marginRight)) , typeof .style.zoom != && (.innerHTML = , .style.cssText = + , .inlineBlockNeedsLayout = .offsetWidth === , .style.display = , .style.overflow = , .innerHTML = , .firstChild.style.width = , .shrinkWrapBlocks = .offsetWidth !== , .style.zoom = ) , .removeChild() , = = = = 
        }) , .removeChild() , = = = = = = = , 
    }();
    var H = , I = ;
    .extend({cache: {},
        deletedIds: [],
        uuid: ,
        expando: + (.fn.jquery + .random()).replace(, ),
        noData: {embed: !,
            object: ,
            applet: !},
        hasData: function(a) {
            return = .nodeType ? .cache[[.expando]] : [.expando] , !! && !()
        },
        data: function(a, c, d, e) {
            if (!.acceptData())
                return;
            var f, g, h = .expando, i = typeof == , j = .nodeType, k = ? .cache : , l = ? [] : [] && ;
            if ((! || ![] || ! && ![].data) && && === )
                return;
            || ( ? [] = = .deletedIds.pop() || .guid++ : = ) , [] || ([] = {} , || ([].toJSON = .noop));
            if (typeof == || typeof == )
                ? [] = .extend([], ) : [].data = .extend([].data, );
            return = [] , || (.data || (.data = {}) , = .data) , !== && ([.camelCase()] = ) , ? ( = [] , == && ( = [.camelCase()])) : = , 
        },
        removeData: function(a, b, c) {
            if (!.acceptData())
                return;
            var d, e, f, g = .nodeType, h = ? .cache : , i = ? [.expando] : .expando;
            if (![])
                return;
            if () {
                = ? [] : [].data;
                if () {
                    .isArray() || ( in ? = [] : ( = .camelCase() , in ? = [] : = .split()));
                    for ( = , = .length; < ; ++)
                        delete [[]];
                    if (!( ? : .isEmptyObject)())
                        return
                }
            }
            if (!) {
                delete [].data;
                if (!([]))
                    return
            }
            ? .cleanData([], !) : .support.deleteExpando || != .window ? delete [] : [] = 
        },
        _data: function(a, b, c) {
            return.data(, , , !)
        },
        acceptData: function(a) {
            var b = .nodeName && .noData[.nodeName.toLowerCase()];
            return! || !== ! && .getAttribute() === 
        }}) , .fn.extend({data: function(a, c) {
            var d, e, f, g, h, i = [], j = , k = ;
            if ( === ) {
                if (.length) {
                    = .data();
                    if (.nodeType === && !._data(, )) {
                        = .attributes;
                        for ( = .length; < ; ++)
                            = [].name , .indexOf() || ( = .camelCase(.substring()) , (, , []));
                        ._data(, , !)
                    }
                }
                return
            }
            returntypeof == ? .each(function() {
                .data(, )
            }) : ( = .split(, ) , [] = [] ? + [] : , = [] + , .access(, function(c) {
                if ( === )
                    return = .triggerHandler( + , [[]]) , === && && ( = .data(, ) , = (, , )) , === && [] ? .data([]) : ;
                [] = , .each(function() {
                    var b = ();
                    .triggerHandler( + , ) , .data(, , ) , .triggerHandler( + , )
                })
            }, , , .length > , , !))
        },
        removeData: function(a) {
            return.each(function() {
                .removeData(, )
            })
        }}) , .extend({queue: function(a, b, c) {
            var d;
            if ()
                return = ( || ) + , = ._data(, ) , && (! || .isArray() ? = ._data(, , .makeArray()) : .push()) , || []
        },
        dequeue: function(a, b) {
            = || ;
            var c = .queue(, ), d = .length, e = .shift(), f = ._queueHooks(, ), g = function() {
                .dequeue(, )
            };
            === && ( = .shift() , --) , && ( === && .unshift() , delete .stop , .call(, , )) , ! && && .empty.fire()
        },
        _queueHooks: function(a, b) {
            var c = + ;
            return._data(, ) || ._data(, , {empty: .Callbacks().add(function() {
                    .removeData(, + , !) , .removeData(, , !)
                })})
        }}) , .fn.extend({queue: function(a, c) {
            var d = ;
            returntypeof != && ( = , = , --) , .length < ? .queue([], ) : === ? : .each(function() {
                var b = .queue(, , );
                ._queueHooks(, ) , === && [] !== && .dequeue(, )
            })
        },
        dequeue: function(a) {
            return.each(function() {
                .dequeue(, )
            })
        },
        delay: function(a, b) {
            return = .fx ? .fx.speeds[] || : , = || , .queue(, function(b, c) {
                var d = (, );
                .stop = function() {
                    ()
                }
            })
        },
        clearQueue: function(a) {
            return.queue( || , [])
        },
        promise: function(a, c) {
            var d, e = , f = .Deferred(), g = , h = .length, i = function() {
                -- || .resolveWith(, [])
            };
            typeof != && ( = , = ) , = || ;
            while (--)
                = ._data([], + ) , && .empty && (++ , .empty.add());
            return() , .promise()
        }});
    var L, M, N, O = , P = , Q = , R = , S = , T = , U = .support.getSetAttribute;
    .fn.extend({attr: function(a, b) {
            return.access(, .attr, , , .length > )
        },
        removeAttr: function(a) {
            return.each(function() {
                .removeAttr(, )
            })
        },
        prop: function(a, b) {
            return.access(, .prop, , , .length > )
        },
        removeProp: function(a) {
            return = .propFix[] || , .each(function() {
                try {
                    [] = , delete []
                }
                catch (c) {
                }
            })
        },
        addClass: function(a) {
            var b, c, d, e, f, g, h;
            if (.isFunction())
                return.each(function(b) {
                    ().addClass(.call(, , .className))
                });
            if ( && typeof == ) {
                = .split();
                for ( = , = .length; < ; ++) {
                    = [];
                    if (.nodeType === )
                        if (!.className && .length === )
                            .className = ;
                }
            }
            return
        },
        removeClass: function(a) {
            var c, d, e, f, g, h, i;
            if (.isFunction())
                return.each(function(b) {
                    ().removeClass(.call(, , .className))
                });
            if ( && typeof == || === ) {
                = ( || ).split();
                for ( = , = .length; < ; ++) {
                    = [];
                    if (.nodeType === && .className) {
                        = ( + .className + ).replace(, );
                        for ( = , = .length; < ; ++)
                            while (.indexOf( + [] + ) >= )
                                = .replace( + [] + , );
                        .className = ? .trim() : 
                    }
                }
            }
            return
        },
        toggleClass: function(a, b) {
            var c = typeof , d = typeof == ;
            return.isFunction() ? .each(function(c) {
                ().toggleClass(.call(, , .className, ), )
            }) : .each(function() {
                if ( === ) {
                    var e, f = , g = (), h = , i = .split();
                    while ( = [++])
                        = ? : !.hasClass() , [ ? : ]()
                }
            })
        },
        hasClass: function(a) {
            var b = + + , c = , d = .length;
            for (; < ; ++)
                if ([].nodeType === && ( + [].className + ).replace(, ).indexOf() >= )
                    return!;
            return!
        },
        val: function(a) {
            var c, d, e, f = [];
            if (!.length) {
                if ()
                    return = .valHooks[.type] || .valHooks[.nodeName.toLowerCase()] , && in && ( = .get(, )) !== ? : ( = .value , typeof == ? .replace(, ) : == ? : );
                return
            }
            return = .isFunction() , .each(function(d) {
                var f, g = ();
                if (.nodeType !== )
                    return;
                ? = .call(, , .val()) : = , == ? = : typeof == ? += : .isArray() && ( = .map(, function(a) {
                    return == ? : + 
                })) , = .valHooks[.type] || .valHooks[.nodeName.toLowerCase()];
                if (! || !( in ) || .set(, , ) === )
                    .value = 
            })
        }}) , .extend({valHooks: {option: {get: function(a) {
                    var b = .attributes.value;
                    return! || .specified ? .value : .text
                }},
            select: {get: function(a) {
                    var b, c, d, e, f = .selectedIndex, g = [], h = .options, i = .type === ;
                    if ( < )
                        return;
                    = ? : , = ? + : .length;
                    for (; < ; ++) {
                        = [];
                        if (.selected && (.support.optDisabled ? !.disabled : .getAttribute() === ) && (!.parentNode.disabled || !.nodeName(.parentNode, ))) {
                            = ().val();
                            if ()
                                return;
                            .push()
                        }
                    }
                    return && !.length && .length ? ([]).val() : 
                },
                set: function(a, b) {
                    var c = .makeArray();
                    return().find().each(function() {
                        .selected = .inArray(().val(), ) >= 
                    }) , .length || (.selectedIndex = -) , 
                }}},
        attrFn: {},
        attr: function(a, c, d, e) {
            var f, g, h, i = .nodeType;
            if (! || === || === || === )
                return;
            if ( && .isFunction(.fn[]))
                return()[]();
            if (typeof .getAttribute == )
                return.prop(, , );
            = !== || !.isXMLDoc() , && ( = .toLowerCase() , = .attrHooks[] || (.test() ? : ));
            if ( !== ) {
                if ( === ) {
                    .removeAttr(, );
                    return
                }
                return && in && && ( = .set(, , )) !== ? : (.setAttribute(, + ) , )
            }
            return && in && && ( = .get(, )) !== ? : ( = .getAttribute() , === ? : )
        },
        removeAttr: function(a, b) {
            var c, d, e, f, g = ;
            if ( && .nodeType === ) {
                = .split();
                for (; < .length; ++)
                    = [] , && ( = .propFix[] || , = .test() , || .attr(, , ) , .removeAttribute( ? : ) , && in && ([] = !))
            }
        },
        attrHooks: {type: {set: function(a, b) {
                    if (.test(.nodeName) && .parentNode)
                        .error();
                }},
            value: {get: function(a, b) {
                    return && .nodeName(, ) ? .get(, ) : in ? .value : 
                },
                set: function(a, b, c) {
                    if ( && .nodeName(, ))
                        return.set(, , );
                    .value = 
                }}},
        propFix: {tabindex: ,
            readonly: ,
            "for": ,
            "class": ,
            maxlength: ,
            cellspacing: ,
            cellpadding: ,
            rowspan: ,
            colspan: ,
            usemap: ,
            frameborder: ,
            contenteditable: },
        prop: function(a, c, d) {
            var e, f, g, h = .nodeType;
            if (! || === || === || === )
                return;
            return = !== || !.isXMLDoc() , && ( = .propFix[] || , = .propHooks[]) , !== ? && in && ( = .set(, , )) !== ? : [] = : && in && ( = .get(, )) !== ? : []
        },
        propHooks: {tabIndex: {get: function(a) {
                    var c = .getAttributeNode();
                    return && .specified ? (.value, ) : .test(.nodeName) || .test(.nodeName) && .href ? : 
                }}}}) , = {get: function(a, c) {
            var d, e = .prop(, );
            return === ! || typeof != && ( = .getAttributeNode()) && .nodeValue !== ! ? .toLowerCase() : 
        },
        set: function(a, b, c) {
            var d;
            return === ! ? .removeAttr(, ) : ( = .propFix[] || , in && ([] = !) , .setAttribute(, .toLowerCase())) , 
        }} , || ( = {name: !,
        id: !,
        coords: !} , = .valHooks.button = {get: function(a, c) {
            var d;
            return = .getAttributeNode() , && ([] ? .value !== : .specified) ? .value : 
        },
        set: function(a, b, c) {
            var d = .getAttributeNode();
            return || ( = .createAttribute() , .setAttributeNode()) , .value = + 
        }} , .each([, ], function(a, b) {
        .attrHooks[] = .extend(.attrHooks[], {set: function(a, c) {
                if ( === )
                    return.setAttribute(, ) , 
            }})
    }) , .attrHooks.contenteditable = {get: .get,
        set: function(a, b, c) {
            === && ( = ) , .set(, , )
        }}) , .support.hrefNormalized || .each([, , , ], function(a, c) {
        .attrHooks[] = .extend(.attrHooks[], {get: function(a) {
                var d = .getAttribute(, );
                return === ? : 
            }})
    }) , .support.style || (.attrHooks.style = {get: function(a) {
            return.style.cssText.toLowerCase() || 
        },
        set: function(a, b) {
            return.style.cssText = + 
        }}) , .support.optSelected || (.propHooks.selected = .extend(.propHooks.selected, {get: function(a) {
            var b = .parentNode;
            return && (.selectedIndex , .parentNode && .parentNode.selectedIndex) , 
        }})) , .support.enctype || (.propFix.enctype = ) , .support.checkOn || .each([, ], function() {
        .valHooks[] = {get: function(a) {
                return.getAttribute() === ? : .value
            }}
    }) , .each([, ], function() {
        .valHooks[] = .extend(.valHooks[], {set: function(a, b) {
                if (.isArray())
                    return.checked = .inArray(().val(), ) >= 
            }})
    });
    var V = , W = , X = , Y = , Z = , $ = , _ = function(a) {
        return.event.special.hover ? : .replace(, )
    };
    .event = {add: function(a, c, d, e, f) {
            var g, h, i, j, k, l, m, n, o, q, r;
            if (.nodeType === || .nodeType === || ! || ! || !( = ._data()))
                return;
            .handler && ( = , = .handler , = .selector) , .guid || (.guid = .guid++) , = .events , || (.events = = {}) , = .handle , || (.handle = = function(a) {
                returntypeof != && (! || .event.triggered !== .type) ? .event.dispatch.apply(.elem, ) : 
            } , .elem = ) , = .trim(()).split();
            for ( = ; < .length; ++) {
                = .exec([]) || [] , = [] , = ([] || ).split().sort() , = .event.special[] || {} , = ( ? .delegateType : .bindType) || , = .event.special[] || {} , = .extend({type: ,
                    origType: [],
                    data: ,
                    handler: ,
                    guid: .guid,
                    selector: ,
                    needsContext: && .expr.match.needsContext.test(),
                    namespace: .join()}, ) , = [];
                if (!) {
                    = [] = [] , .delegateCount = ;
                    if (!.setup || .setup.call(, , , ) === !)
                        .addEventListener ? .addEventListener(, , !) : .attachEvent && .attachEvent( + , )
                }
                .add && (.add.call(, ) , .handler.guid || (.handler.guid = .guid)) , ? .splice(.delegateCount++, , ) : .push() , .event.global[] = !
            }
            = 
        },
        global: {},
        remove: function(a, b, c, d, e) {
            var f, g, h, i, j, k, l, m, n, o, q, r = .hasData() && ._data();
            if (! || !( = .events))
                return;
            = .trim(( || )).split();
            for ( = ; < .length; ++) {
                = .exec([]) || [] , = = [] , = [];
                if (!) {
                    for ( in )
                        .event.remove(, + [], , , !);
                    continue
                }
                = .event.special[] || {} , = ( ? .delegateType : .bindType) || , = [] || [] , = .length , = ? new ( + .split().sort().join() + ) : ;
                for ( = ; < .length; ++)
                    = [] , ( || === .origType) && (! || .guid === .guid) && (! || .test(.namespace)) && (! || === .selector || === && .selector) && (.splice(--, ) , .selector && .delegateCount-- , .remove && .remove.call(, ));
                .length === && !== .length && ((!.teardown || .teardown.call(, , .handle) === !) && .removeEvent(, , .handle) , delete [])
            }
            .isEmptyObject() && (delete .handle , .removeData(, , !))
        },
        customEvent: {getData: !,
            setData: !,
            changeData: !},
        trigger: function(c, d, f, g) {
            if (! || .nodeType !== && .nodeType !== ) {
                var h, i, j, k, l, m, n, o, q, r, s = .type || , t = [];
                if (.test( + .event.triggered))
                    return;
                .indexOf() >= && ( = .slice(, -) , = !) , .indexOf() >= && ( = .split() , = .shift() , .sort());
                if ((! || .event.customEvent[]) && !.event.global[])
                    return;
                = typeof == ? [.expando] ? : new .Event(, ) : new .Event() , .type = , .isTrigger = ! , .exclusive = , .namespace = .join() , .namespace_re = .namespace ? new ( + .join() + ) : , = .indexOf() < ? + : ;
                if (!) {
                    = .cache;
                    for ( in )
                        [].events && [].events[] && .event.trigger(, , [].handle.elem, !);
                    return
                }
                .result = , .target || (.target = ) , = != ? .makeArray() : [] , .unshift() , = .event.special[] || {};
                if (.trigger && .trigger.apply(, ) === !)
                    return;
                = [[, .bindType || ]];
                if (! && !.noBubble && !.isWindow()) {
                    = .delegateType || , = .test( + ) ? : .parentNode;
                    for ( = ; ; = .parentNode)
                        .push([, ]) , = ;
                    === (.ownerDocument || ) && .push([.defaultView || .parentWindow || , ])
                }
                for ( = ; < .length && !.isPropagationStopped(); ++)
                    = [][] , .type = [][] , = (._data(, ) || {})[.type] && ._data(, ) , && .apply(, ) , = && [] , && .acceptData() && .apply && .apply(, ) === ! && .preventDefault();
                return.type = , ! && !.isDefaultPrevented() && (!._default || ._default.apply(.ownerDocument, ) === !) && ( !== || !.nodeName(, )) && .acceptData() && && [] && ( !== && !== || .target.offsetWidth !== ) && !.isWindow() && ( = [] , && ([] = ) , .event.triggered = , []() , .event.triggered = , && ([] = )) , .result
            }
            return
        },
        dispatch: function(c) {
            = .event.fix( || .event);
            var d, e, f, g, h, i, j, l, m, n, o = (._data(, ) || {})[.type] || [], q = .delegateCount, r = .call(), s = !.exclusive && !.namespace, t = .event.special[.type] || {}, u = [];
            [] = , .delegateTarget = ;
            if (.preDispatch && .preDispatch.call(, ) === !)
                return;
            if ( && (!.button || .type !== ))
                for ( = .target; != ; = .parentNode || )
                    if (.disabled !== ! || .type !== ) {
                        = {} , = [];
                        for ( = ; < ; ++)
                            = [] , = .selector , [] === && ([] = .needsContext ? (, ).index() >= : .find(, , , []).length) , [] && .push();
                        .length && .push({elem: ,
                            matches: })
                    }
            .length > && .push({elem: ,
                matches: .slice()});
            for ( = ; < .length && !.isPropagationStopped(); ++) {
                = [] , .currentTarget = .elem;
                for ( = ; < .matches.length && !.isImmediatePropagationStopped(); ++) {
                    = .matches[];
                    if ( || !.namespace && !.namespace || .namespace_re && .namespace_re.test(.namespace))
                        .data = .data , .handleObj = , = ((.event.special[.origType] || {}).handle || .handler).apply(.elem, ) , !== && (.result = , === ! && (.preventDefault() , .stopPropagation()))
                }
            }
            return.postDispatch && .postDispatch.call(, ) , .result
        },
        props: .split(),
        fixHooks: {},
        keyHooks: {props: .split(),
            filter: function(a, b) {
                return.which == && (.which = .charCode != ? .charCode : .keyCode) , 
            }},
        mouseHooks: {props: .split(),
            filter: function(a, c) {
                var d, f, g, h = .button, i = .fromElement;
                return.pageX == && .clientX != && ( = .target.ownerDocument || , = .documentElement , = .body , .pageX = .clientX + ( && .scrollLeft || && .scrollLeft || ) - ( && .clientLeft || && .clientLeft || ) , .pageY = .clientY + ( && .scrollTop || && .scrollTop || ) - ( && .clientTop || && .clientTop || )) , !.relatedTarget && && (.relatedTarget = === .target ? .toElement : ) , !.which && !== && (.which = & ? : & ? : & ? : ) , 
            }},
        fix: function(a) {
            if ([.expando])
                return;
            var b, c, d = , f = .event.fixHooks[.type] || {}, g = .props ? .props.concat(.props) : .props;
            = .Event();
            for ( = .length; ;)
                = [--] , [] = [];
            return.target || (.target = .srcElement || ) , .target.nodeType === && (.target = .target.parentNode) , .metaKey = !!.metaKey , .filter ? .filter(, ) : 
        },
        special: {load: {noBubble: !},
            focus: {delegateType: },
            blur: {delegateType: },
            beforeunload: {setup: function(a, b, c) {
                    .isWindow() && (.onbeforeunload = )
                },
                teardown: function(a, b) {
                    .onbeforeunload === && (.onbeforeunload = )
                }}},
        simulate: function(a, b, c, d) {
            var e = .extend(new .Event, , {type: ,
                isSimulated: !,
                originalEvent: {}});
            ? .event.trigger(, , ) : .event.dispatch.call(, ) , .isDefaultPrevented() && .preventDefault()
        }} , .event.handle = .event.dispatch , .removeEvent = .removeEventListener ? function(a, b, c) {
        .removeEventListener && .removeEventListener(, , !)
    } : function(a, b, c) {
        var d = + ;
        .detachEvent && (typeof [] == && ([] = ) , .detachEvent(, ))
    } , .Event = function(a, b) {
        if ( instanceof .Event)
            && .type ? (.originalEvent = , .type = .type , .isDefaultPrevented = .defaultPrevented || .returnValue === ! || .getPreventDefault && .getPreventDefault() ? : ) : .type = , && .extend(, ) , .timeStamp = && .timeStamp || .now() , [.expando] = !;
    } , .Event.prototype = {preventDefault: function() {
            .isDefaultPrevented = ;
            var a = .originalEvent;
            if (!)
                return;
            .preventDefault ? .preventDefault() : .returnValue = !
        },
        stopPropagation: function() {
            .isPropagationStopped = ;
            var a = .originalEvent;
            if (!)
                return;
            .stopPropagation && .stopPropagation() , .cancelBubble = !
        },
        stopImmediatePropagation: function() {
            .isImmediatePropagationStopped = , .stopPropagation()
        },
        isDefaultPrevented: ,
        isPropagationStopped: ,
        isImmediatePropagationStopped: } , .each({mouseenter: ,
        mouseleave: }, function(a, b) {
        .event.special[] = {delegateType: ,
            bindType: ,
            handle: function(a) {
                var c, d = , e = .relatedTarget, f = .handleObj, g = .selector;
                if (! || !== && !.contains(, ))
                    .type = .origType , = .handler.apply(, ) , .type = ;
                return
            }}
    }) , .support.submitBubbles || (.event.special.submit = {setup: function() {
            if (.nodeName(, ))
                return!;
            .event.add(, , function(a) {
                var c = .target, d = .nodeName(, ) || .nodeName(, ) ? .form : ;
                && !._data(, ) && (.event.add(, , function(a) {
                    ._submit_bubble = !
                }) , ._data(, , !))
            })
        },
        postDispatch: function(a) {
            ._submit_bubble && (delete ._submit_bubble , .parentNode && !.isTrigger && .event.simulate(, .parentNode, , !))
        },
        teardown: function() {
            if (.nodeName(, ))
                return!;
            .event.remove(, )
        }}) , .support.changeBubbles || (.event.special.change = {setup: function() {
            if (.test(.nodeName)) {
                if (.type === || .type === )
                    .event.add(, , function(a) {
                        .originalEvent.propertyName === && (._just_changed = !)
                    }) , .event.add(, , function(a) {
                        ._just_changed && !.isTrigger && (._just_changed = !) , .event.simulate(, , , !)
                    });
                return!
            }
            .event.add(, , function(a) {
                var b = .target;
                .test(.nodeName) && !._data(, ) && (.event.add(, , function(a) {
                    .parentNode && !.isSimulated && !.isTrigger && .event.simulate(, .parentNode, , !)
                }) , ._data(, , !))
            })
        },
        handle: function(a) {
            var b = .target;
            if ( !== || .isSimulated || .isTrigger || .type !== && .type !== )
                return.handleObj.handler.apply(, )
        },
        teardown: function() {
            return.event.remove(, ) , !.test(.nodeName)
        }}) , .support.focusinBubbles || .each({focus: ,
        blur: }, function(a, b) {
        var c = , d = function(a) {
            .event.simulate(, .target, .event.fix(), !)
        };
        .event.special[] = {setup: function() {
                ++ === && .addEventListener(, , !)
            },
            teardown: function() {
                -- === && .removeEventListener(, , !)
            }}
    }) , .fn.extend({on: function(a, c, d, e, f) {
            var g, h;
            if (typeof == ) {
                typeof != && ( = || , = );
                for ( in )
                    .on(, , , [], );
                return
            }
            == && == ? ( = , = = ) : == && (typeof == ? ( = , = ) : ( = , = , = ));
            if ( === !)
                = ;
            return === && ( = , = function(a) {
                return().off() , .apply(, )
            } , .guid = .guid || (.guid = .guid++)) , .each(function() {
                .event.add(, , , , )
            })
        },
        one: function(a, b, c, d) {
            return.on(, , , , )
        },
        off: function(a, c, d) {
            var e, f;
            if ( && .preventDefault && .handleObj)
                return = .handleObj , (.delegateTarget).off(.namespace ? .origType + + .namespace : .origType, .selector, .handler) , ;
            if (typeof == ) {
                for ( in )
                    .off(, , []);
                return
            }
            if ( === ! || typeof == )
                = , = ;
            return === ! && ( = ) , .each(function() {
                .event.remove(, , , )
            })
        },
        bind: function(a, b, c) {
            return.on(, , , )
        },
        unbind: function(a, b) {
            return.off(, , )
        },
        live: function(a, b, c) {
            return(.context).on(, .selector, , ) , 
        },
        die: function(a, b) {
            return(.context).off(, .selector || , ) , 
        },
        delegate: function(a, b, c, d) {
            return.on(, , , )
        },
        undelegate: function(a, b, c) {
            return.length === ? .off(, ) : .off(, || , )
        },
        trigger: function(a, b) {
            return.each(function() {
                .event.trigger(, , )
            })
        },
        triggerHandler: function(a, b) {
            if ([])
                return.event.trigger(, , [], !)
        },
        toggle: function(a) {
            var b = , c = .guid || .guid++, d = , e = function(c) {
                var e = (._data(, + .guid) || ) % ;
                return._data(, + .guid, + ) , .preventDefault() , [].apply(, ) || !
            };
            .guid = ;
            while ( < .length)
                [++].guid = ;
            return.click()
        },
        hover: function(a, b) {
            return.mouseenter().mouseleave( || )
        }}) , .each(.split(), function(a, b) {
        .fn[] = function(a, c) {
            return == && ( = , = ) , .length > ? .on(, , , ) : .trigger()
        } , .test() && (.event.fixHooks[] = .event.keyHooks) , .test() && (.event.fixHooks[] = .event.mouseHooks)
    }) , function(a, b) {
        function bc(a, b, c, d) {
            = || [] , = || ;
            var e, f, i, j, k = .nodeType;
            if (! || typeof != )
                return;
            if ( !== && !== )
                return[];
            = ();
            if (! && !)
                if ( = .exec())
                    if ( = []) {
                        if ( === ) {
                            = .getElementById();
                            if (! || !.parentNode)
                                return;
                            if (.id === )
                                return.push() , 
                        }
                    }
            return(.replace(, ), , , , )
        }
        function bd(a) {
            returnfunction(b) {
                var c = .nodeName.toLowerCase();
                return === && .type === 
            }
        }
        function be(a) {
            returnfunction(b) {
                var c = .nodeName.toLowerCase();
                return( === || === ) && .type === 
            }
        }
        function bf(a) {
            return(function(b) {
                return = + , (function(c, d) {
                    var e, f = ([], .length, ), g = .length;
                    while (--)
                        [ = []] && ([] = !([] = []))
                })
            })
        }
        function bg(a, b, c) {
            if ( === )
                return;
            var d = .nextSibling;
            while () {
                if ( === )
                    return-;
                = .nextSibling
            }
            return
        }
        function bh(a, b) {
            var c, d, f, g, h, i, j, k = [][];
            if ()
                return ? : .slice();
            = , = [] , = .preFilter;
            while () {
                if (! || ( = .exec()))
                    && ( = .slice([].length)) , .push( = []);
                = !;
                if ( = .exec())
                    .push( = new (.shift())) , = .slice(.length) , .type = [].replace(, );
                for ( in .filter)
                    ( = [].exec()) && (![] || ( = [](, , !))) && (.push( = new (.shift())) , = .slice(.length) , .type = , .matches = );
                if (!)
                    break
            }
            return ? .length : ? .error() : (, ).slice()
        }
        function bi(a, b, d) {
            var e = .dir, f = && .dir === , g = ++;
            return.first ? function(b, c, d) {
                while ( = [])
                    if ( || .nodeType === )
                        return(, , )
            } : function(b, d, h) {
                if (!) {
                    var i, j = + + + , k = + ;
                    while ( = [])
                        if ( || .nodeType === ) {
                            if (( = []) === )
                                return.sizset;
                            if (typeof == && .indexOf() === ) {
                                if (.sizset)
                                    return
                            }
                        }
                }
            }
        }
        function bj(a) {
            return.length > ? function(b, c, d) {
                var e = .length;
                while (--)
                    if (![](, , ))
                        return!;
                return!
            } : []
        }
        function bk(a, b, c, d, e) {
            var f, g = [], h = , i = .length, j = != ;
            for (; < ; ++)
                if ( = [])
                    if (! || (, , ))
                        .push() , && .push();
            return
        }
        function bl(a, b, c, d, e, f) {
            return && ![] && ( = ()) , && ![] && ( = (, )) , (function(f, g, h, i) {
                if ( && )
                    return;
                var j, k, l, m = [], n = [], o = .length, p = || ( || , .nodeType ? [] : , [], ), q = && ( || !) ? (, , , , ) : , r = ? || ( ? : || ) ? [] : : ;
                && (, , , );
                if () {
                    = (, ) , (, [], , ) , = .length;
                    while (--)
                        if ( = [])
                            [[]] = !([[]] = )
                }
                if () {
                    = && .length;
                    while (--)
                        if ( = [])
                            [[]] = !([[]] = )
                }
            })
        }
        function bm(a) {
            var b, c, d, f = .length, g = .relative[[].type], h = || .relative[], i = ? : , j = (function(a) {
                return === 
            }, , !), k = (function(a) {
                return.call(, ) > -
            }, , !), m = [function(a, c, d) {
                return! && ( || !== ) || (( = ).nodeType ? (, , ) : (, , ))
            }];
            for (; < ; ++)
                if ( = .relative[[].type])
                    = [((), )];
            return()
        }
        function bn(a, b) {
            var d = .length > , f = .length > , g = function(h, i, j, k, m) {
                var n, o, p, q = [], s = , u = , x = && [], y = != , z = , A = || && .find.TAG(, && .parentNode || ), B = += == ? : .E;
                && ( = !== && , = .el);
                for (; ( = []) != ; ++) {
                    if ( && ) {
                        for ( = ; = []; ++)
                            if ((, , )) {
                                .push();
                                break
                            }
                        && ( = , = ++.el)
                    }
                    && (( = ! && ) && -- , && .push())
                }
                += ;
                if ( && !== ) {
                    for ( = ; = []; ++)
                        (, , , );
                    if () {
                        if ( > )
                            while (--)
                                ![] && ![] && ([] = .call());
                        = ()
                    }
                    .apply(, ) , && ! && .length > && + .length > && .uniqueSort()
                }
                return && ( = , = ) , 
            };
            return.el = , ? () : 
        }
        function bo(a, b, c, d) {
            var e = , f = .length;
            for (; < ; ++)
                (, [], , );
            return
        }
        function bp(a, b, c, d, f) {
            var g, h, j, k, l, m = (), n = .length;
            if (! && .length === ) {
                = [] = [].slice();
                if (.length > && ( = []).type === && .nodeType === && ! && .relative[[].type]) {
                    = .find.ID(.matches[].replace(, ), , )[];
                    if (!)
                        return;
                    = .slice(.shift().length)
                }
                for ( = .POS.test() ? - : .length - ; >= ; --) {
                    = [];
                    if (.relative[ = .type])
                        break;
                    if ( = .find[])
                        if ( = (.matches[].replace(, ), .test([].type) && .parentNode || , )) {
                            .splice(, ) , = .length && .join();
                            if (!)
                                return.apply(, .call(, )) , ;
                            break
                        }
                }
            }
            return(, )(, , , , .test()) , 
        }
        function bq() {
        }
        var c, d, e, f, g, h, i, j, k, l, m = !, n = , o = ( + .random()).replace(, ), q = , r = .document, s = .documentElement, t = , u = , v = [].pop, w = [].push, x = [].slice, y = [].indexOf || function(a) {
            var b = , c = .length;
            for (; < ; ++)
                if ([] === )
                    return;
            return-
        }, z = function(a, b) {
            return[] = == || , 
        }, A = function() {
            var a = {}, b = [];
            return(function(c, d) {
                return.push() > .cacheLength && delete [.shift()] , [] = 
            }, )
        }, B = (), C = (), D = (), E = , F = , G = .replace(, ), H = , I = + + + + + + + + + + + + + , J = + + + + , K = + + + + , L = new ( + + + + , ), M = new ( + + + + ), N = new ( + + + + ), O = new (), P = , Q = , R = , S = , T = , U = , V = , W = {ID: new ( + + ),
            CLASS: new ( + + ),
            NAME: new ( + + ),
            TAG: new ( + .replace(, ) + ),
            ATTR: new ( + ),
            PSEUDO: new ( + ),
            POS: new (, ),
            CHILD: new ( + + + + + + + + , ),
            needsContext: new ( + + + , )}, X = function(a) {
            var b = .createElement();
            try {
                return()
            }
            catch (c) {
                return!
            }
            finally
            {
                = 
            }
        }, Y = (function(a) {
            return.appendChild(.createComment()) , !.getElementsByTagName().length
        }), Z = (function(a) {
            return.innerHTML = , .firstChild && typeof .firstChild.getAttribute !== && .firstChild.getAttribute() === 
        }), $ = (function(a) {
            .innerHTML = ;
            var b = typeof .lastChild.getAttribute();
            return !== && !== 
        }), _ = (function(a) {
            return.innerHTML = , !.getElementsByClassName || !.getElementsByClassName().length ? ! : (.lastChild.className = , .getElementsByClassName().length === )
        }), ba = (function(a) {
            .id = + , .innerHTML = + + + + , .insertBefore(, .firstChild);
            var b = .getElementsByName && .getElementsByName().length === + .getElementsByName( + ).length;
            return = !.getElementById() , .removeChild() , 
        });
        try {
            .call(.childNodes, )[].nodeType
        }
        catch (bb) {
            = function(a) {
                var b, c = [];
                for (; = []; ++)
                    .push();
                return
            }
        }
        .matches = function(a, b) {
            return(, , , )
        } , .matchesSelector = function(a, b) {
            return(, , , []).length > 
        } , = .getText = function(a) {
            var b, c = , d = , e = .nodeType;
            if () {
                if ( === || === || === ) {
                    if (typeof .textContent == )
                        return.textContent;
                    for ( = .firstChild; ; = .nextSibling)
                        += ()
                }
            }
            return
        } , = .isXML = function(a) {
            var b = && (.ownerDocument || ).documentElement;
            return ? .nodeName !== : !
        } , = .contains = .contains ? function(a, b) {
            var c = .nodeType === ? .documentElement : , d = && .parentNode;
            return === || !!( && .nodeType === && .contains && .contains())
        } : .compareDocumentPosition ? function(a, b) {
            return && !!(.compareDocumentPosition() & )
        } : function(a, b) {
            while ( = .parentNode)
                if ( === )
                    return!;
            return!
        } , .attr = function(a, b) {
            var c, d = ();
            return || ( = .toLowerCase()) , ( = .attrHandle[]) ? () : || ? .getAttribute() : ( = .getAttributeNode() , ? typeof [] == ? [] ? : : .specified ? .value : : )
        } , = .selectors = {cacheLength: ,
            createPseudo: ,
            match: ,
            attrHandle: ? {} : {href: function(a) {
                    return.getAttribute(, )
                },
                type: function(a) {
                    return.getAttribute()
                }},
            find: {ID: ? function(a, b, c) {
                    if (typeof .getElementById !== && !) {
                        var d = .getElementById();
                        return && .parentNode ? [] : []
                    }
                } : function(a, c, d) {
                    if (typeof .getElementById !== && !) {
                        var e = .getElementById();
                        return ? .id === || typeof .getAttributeNode !== && .getAttributeNode().value === ? [] : : []
                    }
                },
                TAG: ? function(a, b) {
                    if (typeof .getElementsByTagName !== )
                        return.getElementsByTagName()
                } : function(a, b) {
                    var c = .getElementsByTagName();
                    if ( === ) {
                        var d, e = [], f = ;
                        for (; = []; ++)
                            .nodeType === && .push();
                        return
                    }
                    return
                },
                NAME: && function(a, b) {
                    if (typeof .getElementsByName !== )
                        return.getElementsByName()
                },
                CLASS: && function(a, b, c) {
                    if (typeof .getElementsByClassName !== && !)
                        return.getElementsByClassName()
                }},
            relative: {">": {dir: ,
                    first: !},
                " ": {dir: },
                "+": {dir: ,
                    first: !},
                "~": {dir: }},
            preFilter: {ATTR: function(a) {
                    return[] = [].replace(, ) , [] = ([] || [] || ).replace(, ) , [] === && ([] = + [] + ) , .slice(, )
                },
                CHILD: function(a) {
                    return[] = [].toLowerCase() , [] === ? ([] || .error([]) , [] = +([] ? [] + ([] || ) : * ([] === || [] === )) , [] = +([] + [] || [] === )) : [] && .error([]) , 
                },
                PSEUDO: function(a) {
                    var b, c;
                    if (.CHILD.test([]))
                        return;
                    if ([])
                        [] = [];
                    return.slice(, )
                }},
            filter: {ID: ? function(a) {
                    return = .replace(, ) , function(b) {
                        return.getAttribute() === 
                    }
                } : function(a) {
                    return = .replace(, ) , function(b) {
                        var c = typeof .getAttributeNode !== && .getAttributeNode();
                        return && .value === 
                    }
                },
                TAG: function(a) {
                    return === ? function() {
                        return!
                    } : ( = .replace(, ).toLowerCase() , function(b) {
                        return.nodeName && .nodeName.toLowerCase() === 
                    })
                },
                CLASS: function(a) {
                    var b = [][];
                    return || ( = (, new ( + + + + + + ))) , function(a) {
                        return.test(.className || typeof .getAttribute !== && .getAttribute() || )
                    }
                },
                ATTR: function(a, b, c) {
                    returnfunction(d, e) {
                        var f = .attr(, );
                        return == ? === : ? ( += , === ? === : === ? !== : === ? && .indexOf() === : === ? && .indexOf() > - : === ? && .substr(.length - .length) === : === ? ( + + ).indexOf() > - : === ? === || .substr(, .length + ) === + : !) : !
                    }
                },
                CHILD: function(a, b, c, d) {
                    return === ? function(a) {
                        var b, e, f = .parentNode;
                        if ( === && === )
                            return!;
                        if () {
                            = ;
                            for ( = .firstChild; ; = .nextSibling)
                                if (.nodeType === ) {
                                    ++;
                                    if ( === )
                                        break
                                }
                        }
                        return -= , === || % === && / >= 
                    } : function(b) {
                        var c = ;
                        switch () {
                        case :
                        case :
                            while ( = .previousSibling)
                                if (.nodeType === )
                                    return!;
                            if ( === )
                                return!;
                            = ;
                        case :
                            while ( = .nextSibling)
                                if (.nodeType === )
                                    return!;
                            return!}
                    }
                },
                PSEUDO: function(a, b) {
                    var c, d = .pseudos[] || .setFilters[.toLowerCase()] || .error( + );
                    return[] ? () : .length > ? ( = [, , , ] , .setFilters.hasOwnProperty(.toLowerCase()) ? (function(a, c) {
                        var e, f = (, ), g = .length;
                        while (--)
                            = .call(, []) , [] = !([] = [])
                    }) : function(a) {
                        return(, , )
                    }) : 
                }},
            pseudos: {not: (function(a) {
                    var b = [], c = [], d = (.replace(, ));
                    return[] ? (function(a, b, c, e) {
                        var f, g = (, , , []), h = .length;
                        while (--)
                            if ( = [])
                                [] = !([] = )
                    }) : function(a, e, f) {
                        return[] = , (, , , ) , !.pop()
                    }
                }),
                has: (function(a) {
                    returnfunction(b) {
                        return(, ).length > 
                    }
                }),
                contains: (function(a) {
                    returnfunction(b) {
                        return(.textContent || .innerText || ()).indexOf() > -
                    }
                }),
                enabled: function(a) {
                    return.disabled === !
                },
                disabled: function(a) {
                    return.disabled === !
                },
                checked: function(a) {
                    var b = .nodeName.toLowerCase();
                    return === && !!.checked || === && !!.selected
                },
                selected: function(a) {
                    return.parentNode && .parentNode.selectedIndex , .selected === !
                },
                parent: function(a) {
                    return!.pseudos.empty()
                },
                empty: function(a) {
                    var b;
                    = .firstChild;
                    while () {
                        if (.nodeName > || ( = .nodeType) === || === )
                            return!;
                        = .nextSibling
                    }
                    return!
                },
                header: function(a) {
                    return.test(.nodeName)
                },
                text: function(a) {
                    var b, c;
                    return.nodeName.toLowerCase() === && ( = .type) === && (( = .getAttribute()) == || .toLowerCase() === )
                },
                radio: (),
                checkbox: (),
                file: (),
                password: (),
                image: (),
                submit: (),
                reset: (),
                button: function(a) {
                    var b = .nodeName.toLowerCase();
                    return === && .type === || === 
                },
                input: function(a) {
                    return.test(.nodeName)
                },
                focus: function(a) {
                    var b = .ownerDocument;
                    return === .activeElement && (!.hasFocus || .hasFocus()) && (!!.type || !!.href)
                },
                active: function(a) {
                    return === .ownerDocument.activeElement
                },
                first: (function(a, b, c) {
                    return[]
                }),
                last: (function(a, b, c) {
                    return[ - ]
                }),
                eq: (function(a, b, c) {
                    return[ < ? + : ]
                }),
                even: (function(a, b, c) {
                    for (var d = ; < ; += )
                        .push();
                    return
                }),
                odd: (function(a, b, c) {
                    for (var d = ; < ; += )
                        .push();
                    return
                }),
                lt: (function(a, b, c) {
                    for (var d = < ? + : ; -- >= ;)
                        .push();
                    return
                }),
                gt: (function(a, b, c) {
                    for (var d = < ? + : ; ++ < ;)
                        .push();
                    return
                })}} , = .compareDocumentPosition ? function(a, b) {
            return === ? ( = ! , ) : (!.compareDocumentPosition || !.compareDocumentPosition ? .compareDocumentPosition : .compareDocumentPosition() & ) ? - : 
        } : function(a, b) {
            if ( === )
                return = ! , ;
            if (.sourceIndex && .sourceIndex)
                return.sourceIndex - .sourceIndex;
            var c, d, e = [], f = [], g = .parentNode, h = .parentNode, i = ;
            if ( === )
                return(, );
            if (!)
                return-;
            if (!)
                return;
            while ()
                .unshift() , = .parentNode;
            = ;
            while ()
                .unshift() , = .parentNode;
            = .length , = .length;
            for (var j = ; < && < ; ++)
                if ([] !== [])
                    return([], []);
            return === ? (, [], -) : ([], , )
        } , [, ].sort() , = ! , .uniqueSort = function(a) {
            var b, c = ;
            = , .sort();
            if ()
                for (; = []; ++)
                    === [ - ] && .splice(--, );
            return
        } , .error = function(a) {
            thrownew ( + )
        } , = .compile = function(a, b) {
            var c, d = [], e = [], f = [][];
            if (!) {
                || ( = ()) , = .length;
                while (--)
                    = ([]) , [] ? .push() : .push();
                = (, (, ))
            }
            return
        } , .querySelectorAll && function() {
            var a, b = , c = , d = , e = [], f = [, ], h = .matchesSelector || .mozMatchesSelector || .webkitMatchesSelector || .oMatchesSelector || .msMatchesSelector;
            (function(a) {
                .innerHTML = , .querySelectorAll().length || .push( + + ) , .querySelectorAll().length || .push()
            }) , (function(a) {
                .innerHTML = , .querySelectorAll().length && .push( + + ) , .innerHTML = , .querySelectorAll().length || .push(, )
            }) , = new (.join()) , = function(a, d, f, g, h) {
                if (! && ! && (! || !.test())) {
                    var i, j, k = !, l = , m = , n = .nodeType === && ;
                    if (.nodeType === && .nodeName.toLowerCase() !== ) {
                        = () , ( = .getAttribute()) ? = .replace(, ) : .setAttribute(, ) , = + + , = .length;
                        while (--)
                            [] = + [].join();
                        = .test() && .parentNode || , = .join()
                    }
                    if ()
                        try {
                            return.apply(, .call(.querySelectorAll(), )) , 
                        }
                        catch (p) {
                        }
                        finally
                        {
                            || .removeAttribute()
                        }
                }
                return(, , , , )
            } , && ((function(b) {
                = .call(, );
                try {
                    .call(, ) , .push(, )
                }
                catch (c) {
                }
            }) , = new (.join()) , .matchesSelector = function(b, c) {
                = .replace(, );
                if (!() && !.test() && (! || !.test()))
                    try {
                        var i = .call(, );
                        if ( || || .document && .document.nodeType !== )
                            return
                    }
                    catch (j) {
                    }
                return(, , , []).length > 
            })
        }() , .pseudos.nth = .pseudos.eq , .filters = .prototype = .pseudos , .setFilters = new , .attr = .attr , .find = , .expr = .selectors , .expr[] = .expr.pseudos , .unique = .uniqueSort , .text = .getText , .isXMLDoc = .isXML , .contains = .contains
    }();
    var bc = , bd = , be = , bf = .expr.match.needsContext, bg = {children: !,
        contents: !,
        next: !,
        prev: !};
    .fn.extend({find: function(a) {
            var b, c, d, e, f, g, h = ;
            if (typeof != )
                return().filter(function() {
                    for ( = , = .length; < ; ++)
                        if (.contains([], ))
                            return!
                });
            = .pushStack(, , );
            for ( = , = .length; < ; ++) {
                = .length , .find(, [], );
                if ( > )
                    for ( = ; < .length; ++)
                        for ( = ; < ; ++)
                            if ([] === []) {
                                .splice(--, );
                                break
                            }
            }
            return
        },
        has: function(a) {
            var b, c = (, ), d = .length;
            return.filter(function() {
                for ( = ; < ; ++)
                    if (.contains(, []))
                        return!
            })
        },
        not: function(a) {
            return.pushStack((, , !), , )
        },
        filter: function(a) {
            return.pushStack((, , !), , )
        },
        is: function(a) {
            return!! && (typeof == ? .test() ? (, .context).index([]) >= : .filter(, ).length > : .filter().length > )
        },
        closest: function(a, b) {
            var c, d = , e = .length, f = [], g = .test() || typeof != ? (, || .context) : ;
            for (; < ; ++) {
                = [];
                while ( && .ownerDocument && !== && .nodeType !== ) {
                    if ( ? .index() > - : .find.matchesSelector(, )) {
                        .push();
                        break
                    }
                    = .parentNode
                }
            }
            return = .length > ? .unique() : , .pushStack(, , )
        },
        index: function(a) {
            return ? typeof == ? .inArray([], ()) : .inArray(.jquery ? [] : , ) : [] && [].parentNode ? .prevAll().length : -
        },
        add: function(a, b) {
            var c = typeof == ? (, ) : .makeArray( && .nodeType ? [] : ), d = .merge(.get(), );
            return.pushStack(([]) || ([]) ? : .unique())
        },
        addBack: function(a) {
            return.add( == ? .prevObject : .prevObject.filter())
        }}) , .fn.andSelf = .fn.addBack , .each({parent: function(a) {
            var b = .parentNode;
            return && .nodeType !== ? : 
        },
        parents: function(a) {
            return.dir(, )
        },
        parentsUntil: function(a, b, c) {
            return.dir(, , )
        },
        next: function(a) {
            return(, )
        },
        prev: function(a) {
            return(, )
        },
        nextAll: function(a) {
            return.dir(, )
        },
        prevAll: function(a) {
            return.dir(, )
        },
        nextUntil: function(a, b, c) {
            return.dir(, , )
        },
        prevUntil: function(a, b, c) {
            return.dir(, , )
        },
        siblings: function(a) {
            return.sibling((.parentNode || {}).firstChild, )
        },
        children: function(a) {
            return.sibling(.firstChild)
        },
        contents: function(a) {
            return.nodeName(, ) ? .contentDocument || .contentWindow.document : .merge([], .childNodes)
        }}, function(a, b) {
        .fn[] = function(c, d) {
            var e = .map(, , );
            return.test() || ( = ) , && typeof == && ( = .filter(, )) , = .length > && ![] ? .unique() : , .length > && .test() && ( = .reverse()) , .pushStack(, , .call().join())
        }
    }) , .extend({filter: function(a, b, c) {
            return && ( = + + ) , .length === ? .find.matchesSelector([], ) ? [[]] : [] : .find.matches(, )
        },
        dir: function(a, c, d) {
            var e = [], f = [];
            while ( && .nodeType !== && ( === || .nodeType !== || !().is()))
                .nodeType === && .push() , = [];
            return
        },
        sibling: function(a, b) {
            var c = [];
            for (; ; = .nextSibling)
                .nodeType === && !== && .push();
            return
        }});
    var bl = , bm = , bn = , bo = , bp = , bq = , br = , bs = , bt = , bu = new ( + + , ), bv = , bw = , bx = , by = , bz = {option: [, , ],
        legend: [, , ],
        thead: [, , ],
        tr: [, , ],
        td: [, , ],
        col: [, , ],
        area: [, , ],
        _default: [, , ]}, bA = (), bB = .appendChild(.createElement());
    .optgroup = .option , .tbody = .tfoot = .colgroup = .caption = .thead , .th = .td , .support.htmlSerialize || (._default = [, , ]) , .fn.extend({text: function(a) {
            return.access(, function(a) {
                return === ? .text() : .empty().append(([] && [].ownerDocument || ).createTextNode())
            }, , , .length)
        },
        wrapAll: function(a) {
            if (.isFunction())
                return.each(function(b) {
                    ().wrapAll(.call(, ))
                });
            if ([]) {
                var b = (, [].ownerDocument).eq().clone(!);
                [].parentNode && .insertBefore([]) , .map(function() {
                    var a = ;
                    while (.firstChild && .firstChild.nodeType === )
                        = .firstChild;
                    return
                }).append()
            }
            return
        },
        wrapInner: function(a) {
            return.isFunction() ? .each(function(b) {
                ().wrapInner(.call(, ))
            }) : .each(function() {
                var b = (), c = .contents();
                .length ? .wrapAll() : .append()
            })
        },
        wrap: function(a) {
            var b = .isFunction();
            return.each(function(c) {
                ().wrapAll( ? .call(, ) : )
            })
        },
        unwrap: function() {
            return.parent().each(function() {
                .nodeName(, ) || ().replaceWith(.childNodes)
            }).end()
        },
        append: function() {
            return.domManip(, !, function(a) {
                (.nodeType === || .nodeType === ) && .appendChild()
            })
        },
        prepend: function() {
            return.domManip(, !, function(a) {
                (.nodeType === || .nodeType === ) && .insertBefore(, .firstChild)
            })
        },
        before: function() {
            if (!([]))
                return.domManip(, !, function(a) {
                    .parentNode.insertBefore(, )
                });
            if (.length) {
                var a = .clean();
                return.pushStack(.merge(, ), , .selector)
            }
        },
        after: function() {
            if (!([]))
                return.domManip(, !, function(a) {
                    .parentNode.insertBefore(, .nextSibling)
                });
            if (.length) {
                var a = .clean();
                return.pushStack(.merge(, ), , .selector)
            }
        },
        remove: function(a, b) {
            var c, d = ;
            for (; ( = []) != ; ++)
                if (! || .filter(, []).length)
                    ! && .nodeType === && (.cleanData(.getElementsByTagName()) , .cleanData([])) , .parentNode && .parentNode.removeChild();
            return
        },
        empty: function() {
            var a, b = ;
            for (; ( = []) != ; ++) {
                .nodeType === && .cleanData(.getElementsByTagName());
                while (.firstChild)
                    .removeChild(.firstChild)
            }
            return
        },
        clone: function(a, b) {
            return = == ? ! : , = == ? : , .map(function() {
                return.clone(, , )
            })
        },
        html: function(a) {
            return.access(, function(a) {
                var c = [] || {}, d = , e = .length;
                if ( === )
                    return.nodeType === ? .innerHTML.replace(, ) : ;
                if (typeof == && !.test() && (.support.htmlSerialize || !.test()) && (.support.leadingWhitespace || !.test()) && ![(.exec() || [, ])[].toLowerCase()]) {
                    = .replace(, );
                    try {
                        for (; < ; ++)
                            = [] || {} , .nodeType === && (.cleanData(.getElementsByTagName()) , .innerHTML = );
                        = 
                    }
                    catch (f) {
                    }
                }
                && .empty().append()
            }, , , .length)
        },
        replaceWith: function(a) {
            return([]) ? .length ? .pushStack((.isFunction() ? () : ), , ) : : .isFunction() ? .each(function(b) {
                var c = (), d = .html();
                .replaceWith(.call(, , ))
            }) : (typeof != && ( = ().detach()) , .each(function() {
                var b = .nextSibling, c = .parentNode;
                ().remove() , ? ().before() : ().append()
            }))
        },
        detach: function(a) {
            return.remove(, !)
        },
        domManip: function(a, c, d) {
            = [].concat.apply([], );
            var e, f, g, h, i = , j = [], k = [], l = .length;
            if (!.support.checkClone && > && typeof == && .test())
                return.each(function() {
                    ().domManip(, , )
                });
            if (.isFunction())
                return.each(function(e) {
                    var f = ();
                    [] = .call(, , ? .html() : ) , .domManip(, , )
                });
            if ([]) {
                = .buildFragment(, , ) , = .fragment , = .firstChild , .childNodes.length === && ( = );
                if () {
                    = && .nodeName(, );
                    for ( = .cacheable || - ; < ; ++)
                        .call( && .nodeName([], ) ? ([], ) : [], === ? : .clone(, !, !))
                }
                = = , .length && .each(, function(a, b) {
                    .src ? .ajax ? .ajax({url: .src,
                        type: ,
                        dataType: ,
                        async: !,
                        global: !,
                        "throws": !}) : .error() : .globalEval((.text || .textContent || .innerHTML || ).replace(, )) , .parentNode && .parentNode.removeChild()
                })
            }
            return
        }}) , .buildFragment = function(a, c, d) {
        var f, g, h, i = [];
        return = || , = !.nodeType && [] || , = .ownerDocument || , .length === && typeof == && .length < && === && .charAt() === && !.test() && (.support.checkClone || !.test()) && (.support.html5Clone || !.test()) && ( = ! , = .fragments[] , = !== ) , || ( = .createDocumentFragment() , .clean(, , , ) , && (.fragments[] = && )) , {fragment: ,
            cacheable: }
    } , .fragments = {} , .each({appendTo: ,
        prependTo: ,
        insertBefore: ,
        insertAfter: ,
        replaceAll: }, function(a, b) {
        .fn[] = function(c) {
            var d, e = , f = [], g = (), h = .length, i = .length === && [].parentNode;
            if (( == || && .nodeType === && .childNodes.length === ) && === )
                return[]([]) , ;
            for (; < ; ++)
                = ( > ? .clone(!) : ).get() , ([])[]() , = .concat();
            return.pushStack(, , .selector)
        }
    }) , .extend({clone: function(a, b, c) {
            var d, e, f, g;
            .support.html5Clone || .isXMLDoc() || !.test( + .nodeName + ) ? = .cloneNode(!) : (.innerHTML = .outerHTML , .removeChild( = .firstChild));
            if ((!.support.noCloneEvent || !.support.noCloneChecked) && (.nodeType === || .nodeType === ) && !.isXMLDoc()) {
                (, ) , = () , = ();
                for ( = ; []; ++)
                    [] && ([], [])
            }
            if () {
                (, );
                if () {
                    = () , = ();
                    for ( = ; []; ++)
                        ([], [])
                }
            }
            return = = , 
        },
        clean: function(a, b, c, d) {
            var f, g, h, i, j, k, l, m, n, o, q, r, s = === && , t = [];
            if (! || typeof .createDocumentFragment == )
                = ;
            for ( = ; ( = []) != ; ++) {
                typeof == && ( += );
                if (!)
                    continue;
                if (typeof == )
                    if (!.test())
                        = .createTextNode();
                .nodeType ? .push() : .merge(, )
            }
            && ( = = = );
            if (!.support.appendChecked)
                for ( = ; ( = []) != ; ++)
                    .nodeName(, ) ? () : typeof .getElementsByTagName != && .grep(.getElementsByTagName(), );
            if () {
                = function(a) {
                    if (!.type || .test(.type))
                        return ? .push(.parentNode ? .parentNode.removeChild() : ) : .appendChild()
                };
                for ( = ; ( = []) != ; ++)
                    if (!.nodeName(, ) || !())
                        .appendChild() , typeof .getElementsByTagName != && ( = .grep(.merge([], .getElementsByTagName()), ) , .splice.apply(, [ + , ].concat()) , += .length)
            }
            return
        },
        cleanData: function(a, b) {
            var c, d, e, f, g = , h = .expando, i = .cache, j = .support.deleteExpando, k = .event.special;
            for (; ( = []) != ; ++)
                if ( || .acceptData()) {
                    = [] , = && [];
                    if () {
                        if (.events)
                            for ( in .events)
                                [] ? .event.remove(, ) : .removeEvent(, , .handle);
                        [] && (delete [] , ? delete [] : .removeAttribute ? .removeAttribute() : [] = , .deletedIds.push())
                    }
                }
        }}) , function() {
        var a, b;
        .uaMatch = function(a) {
            = .toLowerCase();
            var b = .exec() || .exec() || .exec() || .exec() || .indexOf() < && .exec() || [];
            return{browser: [] || ,
                version: [] || }
        } , = .uaMatch(.userAgent) , = {} , .browser && ([.browser] = ! , .version = .version) , .chrome ? .webkit = ! : .webkit && (.safari = !) , .browser = , .sub = function() {
            function a(b, c) {
                returnnew .fn.init(, )
            }
            .extend(!, , ) , .superclass = , .fn = .prototype = () , .fn.constructor = , .sub = .sub , .fn.init = function c(c, d) {
                return && instanceof && !( instanceof ) && ( = ()) , .fn.init.call(, , , )
            } , .fn.init.prototype = .fn;
            var b = ();
            return
        }
    }();
    var bH, bI, bJ, bK = , bL = , bM = , bN = , bO = , bP = new ( + + , ), bQ = new ( + + , ), bR = new ( + + , ), bS = {}, bT = {position: ,
        visibility: ,
        display: }, bU = {letterSpacing: ,
        fontWeight: }, bV = [, , , ], bW = [, , , ], bX = .fn.toggle;
    .fn.extend({css: function(a, c) {
            return.access(, function(a, c, d) {
                return !== ? .style(, , ) : .css(, )
            }, , , .length > )
        },
        show: function() {
            return(, !)
        },
        hide: function() {
            return()
        },
        toggle: function(a, b) {
            var c = typeof == ;
            return.isFunction() && .isFunction() ? .apply(, ) : .each(function() {
                ( ? : ()) ? ().show() : ().hide()
            })
        }}) , .extend({cssHooks: {opacity: {get: function(a, b) {
                    if () {
                        var c = (, );
                        return === ? : 
                    }
                }}},
        cssNumber: {fillOpacity: !,
            fontWeight: !,
            lineHeight: !,
            opacity: !,
            orphans: !,
            widows: !,
            zIndex: !,
            zoom: !},
        cssProps: {"float": .support.cssFloat ? : },
        style: function(a, c, d, e) {
            if (! || .nodeType === || .nodeType === || !.style)
                return;
            var f, g, h, i = .camelCase(), j = .style;
            = .cssProps[] || (.cssProps[] = (, )) , = .cssHooks[] || .cssHooks[];
            if ( === )
                return && in && ( = .get(, !, )) !== ? : [];
            = typeof , === && ( = .exec()) && ( = ([] + ) * [] + (.css(, )) , = );
            if ( == || === && ())
                return;
            === && !.cssNumber[] && ( += );
            if (! || !( in ) || ( = .set(, , )) !== )
                try {
                    [] = 
                }
                catch (k) {
                }
        },
        css: function(a, c, d, e) {
            var f, g, h, i = .camelCase();
            return = .cssProps[] || (.cssProps[] = (.style, )) , = .cssHooks[] || .cssHooks[] , && in && ( = .get(, !, )) , === && ( = (, )) , === && in && ( = []) , || !== ? ( = () , || .isNumeric() ? || : ) : 
        },
        swap: function(a, b, c) {
            var d, e, f = {};
            for ( in )
                [] = .style[] , .style[] = [];
            = .call();
            for ( in )
                .style[] = [];
            return
        }}) , .getComputedStyle ? = function(b, c) {
        var d, e, f, g, h = .getComputedStyle(, ), i = .style;
        return && ( = [] , === && !.contains(.ownerDocument, ) && ( = .style(, )) , .test() && .test() && ( = .width , = .minWidth , = .maxWidth , .minWidth = .maxWidth = .width = , = .width , .width = , .minWidth = , .maxWidth = )) , 
    } : .documentElement.currentStyle && ( = function(a, b) {
        var c, d, e = .currentStyle && .currentStyle[], f = .style;
        return == && && [] && ( = []) , .test() && !.test() && ( = .left , = .runtimeStyle && .runtimeStyle.left , && (.runtimeStyle.left = .currentStyle.left) , .left = === ? : , = .pixelLeft + , .left = , && (.runtimeStyle.left = )) , === ? : 
    }) , .each([, ], function(a, b) {
        .cssHooks[] = {get: function(a, c, d) {
                if ()
                    return.offsetWidth === && .test((, )) ? .swap(, , function() {
                        return(, , )
                    }) : (, , )
            },
            set: function(a, c, d) {
                return(, , ? (, , , .support.boxSizing && .css(, ) === ) : )
            }}
    }) , .support.opacity || (.cssHooks.opacity = {get: function(a, b) {
            return.test(( && .currentStyle ? .currentStyle.filter : .style.filter) || ) ? * (.$1) + : ? : 
        },
        set: function(a, b) {
            var c = .style, d = .currentStyle, e = .isNumeric() ? + * + : , f = && .filter || .filter || ;
            .zoom = ;
            if ( >= && .trim(.replace(, )) === && .removeAttribute) {
                .removeAttribute();
                if ( && !.filter)
                    return
            }
            .filter = .test() ? .replace(, ) : + + 
        }}) , (function() {
        .support.reliableMarginRight || (.cssHooks.marginRight = {get: function(a, b) {
                return.swap(, {display: }, function() {
                    if ()
                        return(, )
                })
            }}) , !.support.pixelPosition && .fn.position && .each([, ], function(a, b) {
            .cssHooks[] = {get: function(a, c) {
                    if () {
                        var d = (, );
                        return.test() ? ().position()[] + : 
                    }
                }}
        })
    }) , .expr && .expr.filters && (.expr.filters.hidden = function(a) {
        return.offsetWidth === && .offsetHeight === || !.support.reliableHiddenOffsets && (.style && .style.display || (, )) === 
    } , .expr.filters.visible = function(a) {
        return!.expr.filters.hidden()
    }) , .each({margin: ,
        padding: ,
        border: }, function(a, b) {
        .cssHooks[ + ] = {expand: function(c) {
                var d, e = typeof == ? .split() : [], f = {};
                for ( = ; < ; ++)
                    [ + [] + ] = [] || [ - ] || [];
                return
            }} , .test() || (.cssHooks[ + ].set = )
    });
    var cd = , ce = , cf = , cg = , ch = ;
    .fn.extend({serialize: function() {
            return.param(.serializeArray())
        },
        serializeArray: function() {
            return.map(function() {
                return.elements ? .makeArray(.elements) : 
            }).filter(function() {
                return.name && !.disabled && (.checked || .test(.nodeName) || .test(.type))
            }).map(function(a, b) {
                var c = ().val();
                return == ? : .isArray() ? .map(, function(a, c) {
                    return{name: .name,
                        value: .replace(, )}
                }) : {name: .name,
                    value: .replace(, )}
            }).get()
        }}) , .param = function(a, c) {
        var d, e = [], f = function(a, b) {
            = .isFunction() ? () : == ? : , [.length] = () + + ()
        };
        === && ( = .ajaxSettings && .ajaxSettings.traditional);
        if (.isArray() || .jquery && !.isPlainObject())
            .each(, function() {
                (.name, .value)
            });
        return.join().replace(, )
    };
    var cj, ck, cl = , cm = , cn = , co = , cp = , cq = , cr = , cs = , ct = , cu = .fn.load, cv = {}, cw = {}, cx = [] + [];
    try {
        = .href
    }
    catch (cy) {
        = .createElement() , .href = , = .href
    }
    = .exec(.toLowerCase()) || [] , .fn.load = function(a, c, d) {
        if (typeof != && )
            return.apply(, );
        if (!.length)
            return;
        var e, f, g, h = , i = .indexOf();
        return >= && ( = .slice(, .length) , = .slice(, )) , .isFunction() ? ( = , = ) : && typeof == && ( = ) , .ajax({url: ,
            type: ,
            dataType: ,
            data: ,
            complete: function(a, b) {
                && .each(, || [.responseText, , ])
            }}).done(function(a) {
            = , .html( ? ().append(.replace(, )).find() : )
        }) , 
    } , .each(.split(), function(a, b) {
        .fn[] = function(a) {
            return.on(, )
        }
    }) , .each([, ], function(a, c) {
        [] = function(a, d, e, f) {
            return.isFunction() && ( = || , = , = ) , .ajax({type: ,
                url: ,
                data: ,
                success: ,
                dataType: })
        }
    }) , .extend({getScript: function(a, c) {
            return.get(, , , )
        },
        getJSON: function(a, b, c) {
            return.get(, , , )
        },
        ajaxSetup: function(a, b) {
            return ? (, .ajaxSettings) : ( = , = .ajaxSettings) , (, ) , 
        },
        ajaxSettings: {url: ,
            isLocal: .test([]),
            global: !,
            type: ,
            contentType: ,
            processData: !,
            async: !,
            accepts: {xml: ,
                html: ,
                text: ,
                json: ,
                "*": },
            contents: {xml: ,
                html: ,
                json: },
            responseFields: {xml: ,
                text: },
            converters: {"* text": .String,
                "text html": !,
                "text json": .parseJSON,
                "text xml": .parseXML},
            flatOptions: {context: !,
                url: !}},
        ajaxPrefilter: (),
        ajaxTransport: (),
        ajax: function(a, c) {
            function y(a, c, f, i) {
                var k, s, t, u, w, y = ;
                if ( === )
                    return;
                = , && () , = , = || , .readyState = > ? : , && ( = (, , ));
                if ( >= && < || === )
                    .ifModified && ( = .getResponseHeader() , && (.lastModified[] = ) , = .getResponseHeader() , && (.etag[] = )) , === ? ( = , = !) : ( = (, ) , = .state , = .data , = .error , = !);
                .status = , .statusText = ( || ) + , ? .resolveWith(, [, , ]) : .rejectWith(, [, , ]) , .statusCode() , = , && .trigger( + ( ? : ), [, , ? : ]) , .fireWith(, [, ]) , && (.trigger(, [, ]) , --.active || .event.trigger())
            }
            typeof == && ( = , = ) , = || {};
            var d, e, f, g, h, i, j, k, l = .ajaxSetup({}, ), m = .context || , n = !== && (.nodeType || instanceof ) ? () : .event, o = .Deferred(), q = .Callbacks(), r = .statusCode || {}, t = {}, u = {}, v = , w = , x = {readyState: ,
                setRequestHeader: function(a, b) {
                    if (!) {
                        var c = .toLowerCase();
                        = [] = [] || , [] = 
                    }
                    return
                },
                getAllResponseHeaders: function() {
                    return === ? : 
                },
                getResponseHeader: function(a) {
                    var c;
                    if ( === ) {
                        if (!) {
                            = {};
                            while ( = .exec())
                                [[].toLowerCase()] = []
                        }
                        = [.toLowerCase()]
                    }
                    return === ? : 
                },
                overrideMimeType: function(a) {
                    return || (.mimeType = ) , 
                },
                abort: function(a) {
                    return = || , && .abort() , (, ) , 
                }};
            .promise() , .success = .done , .error = .fail , .complete = .add , .statusCode = function(a) {
                if () {
                    var b;
                    if ( < )
                        for ( in )
                            [] = [[], []];
                }
                return
            } , .url = (( || .url) + ).replace(, ).replace(, [] + ) , .dataTypes = .trim(.dataType || ).toLowerCase().split() , .crossDomain == && ( = .exec(.url.toLowerCase()) || ! , .crossDomain = && .join() + ([] ? : [] === ? : ) !== .join() + ([] ? : [] === ? : )) , .data && .processData && typeof .data != && (.data = .param(.data, .traditional)) , (, , , );
            if ( === )
                return;
            = .global , .type = .type.toUpperCase() , .hasContent = !.test(.type) , && .active++ === && .event.trigger();
            if (!.hasContent) {
                .data && (.url += (.test(.url) ? : ) + .data , delete .data) , = .url;
                if (.cache === !) {
                    var z = .now(), A = .url.replace(, + );
                    .url = + ( === .url ? (.test(.url) ? : ) + + : )
                }
            }
            (.data && .hasContent && .contentType !== ! || .contentType) && .setRequestHeader(, .contentType) , .ifModified && ( = || .url , .lastModified[] && .setRequestHeader(, .lastModified[]) , .etag[] && .setRequestHeader(, .etag[])) , .setRequestHeader(, .dataTypes[] && .accepts[.dataTypes[]] ? .accepts[.dataTypes[]] + (.dataTypes[] !== ? + + : ) : .accepts[]);
            for ( in .headers)
                .setRequestHeader(, .headers[]);
            if (!.beforeSend || .beforeSend.call(, , ) !== ! && !== ) {
                = ;
                for ( in {success: ,
                    error: ,
                    complete: })
                    []([]);
                = (, , , );
                if (!)
                    (-, );
                return
            }
            return.abort()
        },
        active: ,
        lastModified: {},
        etag: {}});
    var cE = [], cF = , cG = , cH = .now();
    .ajaxSetup({jsonp: ,
        jsonpCallback: function() {
            var a = .pop() || .expando + + ++;
            return[] = ! , 
        }}) , .ajaxPrefilter(, function(c, d, e) {
        var f, g, h, i = .data, j = .url, k = .jsonp !== !, l = && .test(), m = && ! && typeof == && !(.contentType || ).indexOf() && .test();
        if (.dataTypes[] === || || )
            return = .jsonpCallback = .isFunction(.jsonpCallback) ? .jsonpCallback() : .jsonpCallback , = [] , ? .url = .replace(, + ) : ? .data = .replace(, + ) : && (.url += (.test() ? : ) + .jsonp + + ) , .converters[] = function() {
                return || .error( + ) , []
            } , .dataTypes[] = , [] = function() {
                = 
            } , .always(function() {
                [] = , [] && (.jsonpCallback = .jsonpCallback , .push()) , && .isFunction() && ([]) , = = 
            }) , 
    }) , .ajaxSetup({accepts: {script: },
        contents: {script: },
        converters: {"text script": function(a) {
                return.globalEval() , 
            }}}) , .ajaxPrefilter(, function(a) {
        .cache === && (.cache = !) , .crossDomain && (.type = , .global = !)
    }) , .ajaxTransport(, function(a) {
        if (.crossDomain) {
            var c, d = .head || .getElementsByTagName()[] || .documentElement;
            return{send: function(f, g) {
                    = .createElement() , .async = , .scriptCharset && (.charset = .scriptCharset) , .src = .url , .onload = .onreadystatechange = function(a, e) {
                        if ( || !.readyState || .test(.readyState))
                            .onload = .onreadystatechange = , && .parentNode && .removeChild() , = , || (, )
                    } , .insertBefore(, .firstChild)
                },
                abort: function() {
                    && .onload(, )
                }}
        }
    });
    var cI, cJ = .ActiveXObject ? function() {
        for (var a in )
            [](, )
    } : !, cK = ;
    .ajaxSettings.xhr = .ActiveXObject ? function() {
        return!.isLocal && () || ()
    } : , function(a) {
        .extend(.support, {ajax: !!,
            cors: !! && in })
    }(.ajaxSettings.xhr()) , .support.ajax && .ajaxTransport(function(c) {
        if (!.crossDomain || .support.cors) {
            var d;
            return{send: function(e, f) {
                    var g, h, i = .xhr();
                    .username ? .open(.type, .url, .async, .username, .password) : .open(.type, .url, .async);
                    if (.xhrFields)
                        for ( in .xhrFields)
                            [] = .xhrFields[];
                    .mimeType && .overrideMimeType && .overrideMimeType(.mimeType) , !.crossDomain && ![] && ([] = );
                    try {
                        for ( in )
                            .setRequestHeader(, [])
                    }
                    catch (j) {
                    }
                    .send(.hasContent && .data || ) , = function(a, e) {
                        var h, j, k, l, m;
                        try {
                            if ( && ( || .readyState === )) {
                                = , && (.onreadystatechange = .noop , && delete []);
                                if ()
                                    .readyState !== && .abort();
                            }
                        }
                        catch (o) {
                            || (-, )
                        }
                        && (, , , )
                    } , .async ? .readyState === ? (, ) : ( = ++ , && ( || ( = {} , ().unload()) , [] = ) , .onreadystatechange = ) : ()
                },
                abort: function() {
                    && (, )
                }}
        }
    });
    var cN, cO, cP = , cQ = new ( + + , ), cR = , cS = [], cT = {"*": [function(a, b) {
            var c, d, e = .createTween(, ), f = .exec(), g = .cur(), h = + || , i = , j = ;
            if () {
                = +[] , = [] || (.cssNumber[] ? : );
                if ( !== && ) {
                    = .css(.elem, , !) || || ;
                    do
                        = || , = / , .style(.elem, , + );while ( !== ( = .cur() / ) && !== && --)
                }
                .unit = , .start = , .end = [] ? + ([] + ) * : 
            }
            return
        }]};
    .Animation = .extend(, {tweener: function(a, b) {
            .isFunction() ? ( = , = []) : = .split();
            var c, d = , e = .length;
            for (; < ; ++)
                = [] , [] = [] || [] , [].unshift()
        },
        prefilter: function(a, b) {
            ? .unshift() : .push()
        }}) , .Tween = , .prototype = {constructor: ,
        init: function(a, b, c, d, e, f) {
            .elem = , .prop = , .easing = || , .options = , .start = .now = .cur() , .end = , .unit = || (.cssNumber[] ? : )
        },
        cur: function() {
            var a = .propHooks[.prop];
            return && .get ? .get() : .propHooks._default.get()
        },
        run: function(a) {
            var b, c = .propHooks[.prop];
            return.options.duration ? .pos = = .easing[.easing](, .options.duration * , , , .options.duration) : .pos = = , .now = (.end - .start) * + .start , .options.step && .options.step.call(.elem, .now, ) , && .set ? .set() : .propHooks._default.set() , 
        }} , .prototype.init.prototype = .prototype , .propHooks = {_default: {get: function(a) {
                var b;
                return.elem[.prop] == || !!.elem.style && .elem.style[.prop] != ? ( = .css(.elem, .prop, !, ) , ! || === ? : ) : .elem[.prop]
            },
            set: function(a) {
                .fx.step[.prop] ? .fx.step[.prop]() : .elem.style && (.elem.style[.cssProps[.prop]] != || .cssHooks[.prop]) ? .style(.elem, .prop, .now + .unit) : .elem[.prop] = .now
            }}} , .propHooks.scrollTop = .propHooks.scrollLeft = {set: function(a) {
            .elem.nodeType && .elem.parentNode && (.elem[.prop] = .now)
        }} , .each([, , ], function(a, b) {
        var c = .fn[];
        .fn[] = function(d, e, f) {
            return == || typeof == || ! && .isFunction() && .isFunction() ? .apply(, ) : .animate((, !), , , )
        }
    }) , .fn.extend({fadeTo: function(a, b, c, d) {
            return.filter().css(, ).show().end().animate({opacity: }, , , )
        },
        animate: function(a, b, c, d) {
            var e = .isEmptyObject(), f = .speed(, , ), g = function() {
                var b = (, .extend({}, ), );
                && .stop(!)
            };
            return || .queue === ! ? .each() : .queue(.queue, )
        },
        stop: function(a, c, d) {
            var e = function(a) {
                var b = .stop;
                delete .stop , ()
            };
            returntypeof != && ( = , = , = ) , && !== ! && .queue( || , []) , .each(function() {
                var b = !, c = != && + , f = .timers, g = ._data();
                if ()
                    [] && [].stop && ([]);
                for ( = .length; --;)
                    [].elem === && ( == || [].queue === ) && ([].anim.stop() , = ! , .splice(, ));
                ( || !) && .dequeue(, )
            })
        }}) , .each({slideDown: (),
        slideUp: (),
        slideToggle: (),
        fadeIn: {opacity: },
        fadeOut: {opacity: },
        fadeToggle: {opacity: }}, function(a, b) {
        .fn[] = function(a, c, d) {
            return.animate(, , , )
        }
    }) , .speed = function(a, b, c) {
        var d = && typeof == ? .extend({}, ) : {complete: || ! && || .isFunction() && ,
            duration: ,
            easing: && || && !.isFunction() && };
        .duration = .fx.off ? : typeof .duration == ? .duration : .duration in .fx.speeds ? .fx.speeds[.duration] : .fx.speeds._default;
        if (.queue == || .queue === !)
            .queue = ;
        return.old = .complete , .complete = function() {
            .isFunction(.old) && .old.call() , .queue && .dequeue(, .queue)
        } , 
    } , .easing = {linear: function(a) {
            return
        },
        swing: function(a) {
            return - .cos( * .PI) / 
        }} , .timers = [] , .fx = .prototype.init , .fx.tick = function() {
        var a, b = .timers, c = ;
        for (; < .length; ++)
            = [] , !() && [] === && .splice(--, );
        .length || .fx.stop()
    } , .fx.timer = function(a) {
        () && .timers.push() && ! && ( = (.fx.tick, .fx.interval))
    } , .fx.interval = , .fx.stop = function() {
        () , = 
    } , .fx.speeds = {slow: ,
        fast: ,
        _default: } , .fx.step = {} , .expr && .expr.filters && (.expr.filters.animated = function(a) {
        return.grep(.timers, function(b) {
            return === .elem
        }).length
    });
    var c_ = ;
    .fn.offset = function(a) {
        if (.length)
            return === ? : .each(function(b) {
                .offset.setOffset(, , )
            });
        var c, d, e, f, g, h, i, j = {top: ,
            left: }, k = [], l = && .ownerDocument;
        if (!)
            return;
        return( = .body) === ? .offset.bodyOffset() : ( = .documentElement , .contains(, ) ? (typeof .getBoundingClientRect != && ( = .getBoundingClientRect()) , = () , = .clientTop || .clientTop || , = .clientLeft || .clientLeft || , = .pageYOffset || .scrollTop , = .pageXOffset || .scrollLeft , {top: .top + - ,
            left: .left + - }) : )
    } , .offset = {bodyOffset: function(a) {
            var b = .offsetTop, c = .offsetLeft;
            return.support.doesNotIncludeMarginInBodyOffset && ( += (.css(, )) || , += (.css(, )) || ) , {top: ,
                left: }
        },
        setOffset: function(a, b, c) {
            var d = .css(, );
            === && (.style.position = );
            var e = (), f = .offset(), g = .css(, ), h = .css(, ), i = ( === || === ) && .inArray(, [, ]) > -, j = {}, k = {}, l, m;
            ? ( = .position() , = .top , = .left) : ( = () || , = () || ) , .isFunction() && ( = .call(, , )) , .top != && (.top = .top - .top + ) , .left != && (.left = .left - .left + ) , in ? .using.call(, ) : .css()
        }} , .fn.extend({position: function() {
            if (![])
                return;
            var a = [], b = .offsetParent(), c = .offset(), d = .test([].nodeName) ? {top: ,
                left: } : .offset();
            return.top -= (.css(, )) || , .left -= (.css(, )) || , .top += (.css([], )) || , .left += (.css([], )) || , {top: .top - .top,
                left: .left - .left}
        },
        offsetParent: function() {
            return.map(function() {
                var a = .offsetParent || .body;
                while ( && !.test(.nodeName) && .css(, ) === )
                    = .offsetParent;
                return || .body
            })
        }}) , .each({scrollLeft: ,
        scrollTop: }, function(a, c) {
        var d = .test();
        .fn[] = function(e) {
            return.access(, function(a, e, f) {
                var g = ();
                if ( === )
                    return ? in ? [] : .document.documentElement[] : [];
                ? .scrollTo( ? ().scrollLeft() : , ? : ().scrollTop()) : [] = 
            }, , , .length, )
        }
    }) , .each({Height: ,
        Width: }, function(a, c) {
        .each({padding: + ,
            content: ,
            "": + }, function(d, e) {
            .fn[] = function(e, f) {
                var g = .length && ( || typeof != ), h = || ( === ! || === ! ? : );
                return.access(, function(c, d, e) {
                    var f;
                    return.isWindow() ? .document.documentElement[ + ] : .nodeType === ? ( = .documentElement , .max(.body[ + ], [ + ], .body[ + ], [ + ], [ + ])) : === ? .css(, , , ) : .style(, , , )
                }, , ? : , , )
            }
        })
    }) , .jQuery = .$ = , typeof == && .amd && .amd.jQuery && (, [], function() {
        return
    })
})();