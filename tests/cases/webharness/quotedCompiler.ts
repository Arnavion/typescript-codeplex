var compilerString = "///<reference path=\'references.ts\' />\n\ndeclare var require: any;\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class ArrayUtilities {\n        public static isArray(value: any): boolean {\n            return Object.prototype.toString.apply(value, []) === \'[object Array]\';\n        }\n\n        public static sequenceEquals(array1: any[], array2: any[], equals: (v1, v2) => boolean) {\n            if (array1 === array2) {\n                return true;\n            }\n\n            if (array1 === null || array2 === null) {\n                return false;\n            }\n\n            if (array1.length !== array2.length) {\n                return false;\n            }\n\n            for (var i = 0, n = array1.length; i < n; i++) {\n                if (!equals(array1[i], array2[i])) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public static contains(array: any[], value: any): boolean {\n            for (var i = 0; i < array.length; i++) {\n                if (array[i] === value) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public static groupBy(array: any[], func: (v: any) => string): any {\n            var result = {};\n\n            for (var i = 0, n = array.length; i < n; i++) {\n                var v = array[i];\n                var k = func(v);\n\n                var list = result[k] || [];\n                list.push(v);\n                result[k] = list;\n            }\n\n            return result;\n        }\n\n        public static min(array: any[], func: (v: any) => number): number {\n            // Debug.assert(array.length > 0);\n            var min = func(array[0]);\n\n            for (var i = 1; i < array.length; i++) {\n                var next = func(array[i]);\n                if (next < min) {\n                    min = next;\n                }\n            }\n\n            return min;\n        }\n\n        public static max(array: any[], func: (v: any) => number): number {\n            // Debug.assert(array.length > 0);\n            var max = func(array[0]);\n\n            for (var i = 1; i < array.length; i++) {\n                var next = func(array[i]);\n                if (next > max) {\n                    max = next;\n                }\n            }\n\n            return max;\n        }\n\n        public static last(array: any[]) {\n            if (array.length === 0) {\n                throw Errors.argumentOutOfRange(\'array\');\n            }\n\n            return array[array.length - 1];\n        }\n\n        public static firstOrDefault(array: any[], func: (v: any) => boolean): any {\n            for (var i = 0, n = array.length; i < n; i++) {\n                var value = array[i];\n                if (func(value)) {\n                    return value;\n                }\n            }\n\n            return null;\n        }\n\n        public static sum(array: any[], func: (v: any) => number): number {\n            var result = 0;\n\n            for (var i = 0, n = array.length; i < n; i++) {\n                result += func(array[i]);\n            }\n\n            return result;\n        }\n\n        public static whereNotNull(array: any[]): any[] {\n            var result = [];\n            for (var i = 0; i < array.length; i++) {\n                var value = array[i];\n                if (value !== null) {\n                    result.push(value);\n                }\n            }\n\n            return result;\n        }\n\n        public static select(values: any[], func: (v: any) => any): any[] {\n            var result = [];\n\n            for (var i = 0; i < values.length; i++) {\n                result.push(func(values[i]));\n            }\n\n            return result;\n        }\n\n        public static where(values: any[], func: (v: any) => boolean): any[] {\n            var result = [];\n\n            for (var i = 0; i < values.length; i++) {\n                if (func(values[i])) {\n                    result.push(values[i]);\n                }\n            }\n\n            return result;\n        }\n\n        public static any(array: any[], func: (v: any) => boolean): boolean {\n            for (var i = 0, n = array.length; i < n; i++) {\n                if (func(array[i])) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public static all(array: any[], func: (v: any) => boolean): boolean {\n            for (var i = 0, n = array.length; i < n; i++) {\n                if (!func(array[i])) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public static binarySearch(array: number[], value: number): number {\n            var low = 0;\n            var high = array.length - 1;\n\n            while (low <= high) {\n                var middle = low + ((high - low) >> 1);\n                var midValue = array[middle];\n\n                if (midValue === value) {\n                    return middle;\n                }\n                else if (midValue > value) {\n                    high = middle - 1;\n                }\n                else {\n                    low = middle + 1;\n                }\n            }\n\n            return ~low;\n        }\n\n        public static createArray(length: number, defaultvalue: any): any[] {\n            var result = [];\n            for (var i = 0; i < length; i++) {\n                result.push(defaultvalue);\n            }\n\n            return result;\n        }\n\n        public static grow(array: any[], length: number, defaultValue: any): void {\n            var count = length - array.length;\n            for (var i = 0; i < count; i++) {\n                array.push(defaultValue);\n            }\n        }\n\n        public static copy(sourceArray: any[], sourceIndex: number, destinationArray: any[], destinationIndex: number, length: number): void {\n            for (var i = 0; i < length; i++) {\n                destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\n            }\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export enum Constants {\n        // 2^30-1\n        Max31BitInteger = 1073741823,\n        Min31BitInteger = -1073741824,\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class Contract {\n        public static requires(expression: boolean): void {\n            if (!expression) {\n                throw new Error(\"Contract violated. False expression.\");\n            }\n        }\n\n        public static throwIfFalse(expression: boolean): void {\n            if (!expression) {\n                throw new Error(\"Contract violated. False expression.\");\n            }\n        }\n\n        public static throwIfNull(value: any): void {\n            if (value === null) {\n                throw new Error(\"Contract violated. Null value.\");\n            }\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class Debug {\n        public static assert(expression: boolean, message?: string): void {\n            if (!expression) {\n                throw new Error(\"Debug Failure. False expression: \" + (message ? message : \"\"));\n            }\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export enum DiagnosticCategory {\n        Warning,\n        Error,\n        Message,\n        NoPrefix,\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export enum DiagnosticCode {\n        error_TS_0__1,\n        warning_TS_0__1,\n\n        _0__NL__1_TB__2,\n        _0_TB__1,\n\n        // Syntactic diagnostics.\n        Unrecognized_escape_sequence,\n        Unexpected_character_0,\n        Missing_closing_quote_character,\n        Identifier_expected,\n        _0_keyword_expected,\n        _0_expected,\n        Identifier_expected__0__is_a_keyword,\n        Automatic_semicolon_insertion_not_allowed,\n        Unexpected_token__0_expected,\n        Trailing_separator_not_allowed,\n        _StarSlash__expected,\n        _public_or_private_modifier_must_precede__static_,\n        Unexpected_token_,\n        A_catch_clause_variable_cannot_have_a_type_annotation,\n        Rest_parameter_must_be_last_in_list,\n        Parameter_cannot_have_question_mark_and_initializer,\n        Required_parameter_cannot_follow_optional_parameter,\n        Index_signatures_cannot_have_rest_parameters,\n        Index_signature_parameter_cannot_have_accessibility_modifiers,\n        Index_signature_parameter_cannot_have_a_question_mark,\n        Index_signature_parameter_cannot_have_an_initializer,\n        Index_signature_must_have_a_type_annotation,\n        Index_signature_parameter_must_have_a_type_annotation,\n        Index_signature_parameter_type_must_be__string__or__number_,\n        _extends__clause_already_seen,\n        _extends__clause_must_precede__implements__clause,\n        Class_can_only_extend_single_type,\n        _implements__clause_already_seen,\n        Accessibility_modifier_already_seen,\n        _0__modifier_must_precede__1__modifier,\n        _0__modifier_already_seen,\n        _0__modifier_cannot_appear_on_a_class_element,\n        Interface_declaration_cannot_have__implements__clause,\n        _super__invocation_cannot_have_type_arguments,\n        Non_ambient_modules_cannot_use_quoted_names,\n        Statements_are_not_allowed_in_ambient_contexts,\n        Implementations_are_not_allowed_in_ambient_contexts,\n        _declare__modifier_not_allowed_for_code_already_in_an_ambient_context,\n        Initializers_are_not_allowed_in_ambient_contexts,\n        Overload_and_ambient_signatures_cannot_specify_parameter_properties,\n        Function_implementation_expected,\n        Constructor_implementation_expected,\n        Function_overload_name_must_be__0_,\n        _0__modifier_cannot_appear_on_a_module_element,\n        _declare__modifier_cannot_appear_on_an_interface_declaration,\n        _declare__modifier_required_for_top_level_element,\n        _set__accessor_must_have_only_one_parameter,\n        _set__accessor_parameter_cannot_have_accessibility_modifier,\n        _set__accessor_parameter_cannot_be_optional,\n        _set__accessor_parameter_cannot_have_initializer,\n        _set__accessor_cannot_have_rest_parameter,\n        _get__accessor_cannot_have_parameters,\n        Rest_parameter_cannot_be_optional,\n        Rest_parameter_cannot_have_initializer,\n        Modifiers_cannot_appear_here,\n        Accessors_are_only_available_when_targeting_EcmaScript5_and_higher,\n        Class_name_cannot_be__0_,\n        Interface_name_cannot_be__0_,\n        Enum_name_cannot_be__0_,\n        Module_name_cannot_be__0_,\n        Enum_member_must_have_initializer,\n        _module_______is_deprecated__Use__require_______instead,\n\n\n\n        // Semantic diagnostics.\n        Duplicate_identifier__0_,\n        The_name__0__does_not_exist_in_the_current_scope,\n        The_name__0__does_not_refer_to_a_value,\n        Keyword__super__can_only_be_used_inside_a_class_instance_method,\n        The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer,\n        Value_of_type__0__is_not_callable__Did_you_mean_to_include__new__,\n        Value_of_type__0__is_not_callable,\n        Value_of_type__0__is_not_newable,\n        Value_of_type__0__is_not_indexable_by_type__1_,\n        Operator__0__cannot_be_applied_to_types__1__and__2_,\n        Operator__0__cannot_be_applied_to_types__1__and__2__3,\n        Cannot_convert__0__to__1_,\n        Cannot_convert__0__to__1__NL__2,\n        Expected_var__class__interface__or_module,\n        Operator__0__cannot_be_applied_to_type__1_,\n        Getter__0__already_declared,\n        Setter__0__already_declared,\n        Accessor_cannot_have_type_parameters,\n        Exported_class__0__extends_private_class__1_,\n        Exported_class__0__implements_private_interface__1_,\n        Exported_interface__0__extends_private_interface__1_,\n        Exported_class__0__extends_class_from_inaccessible_module__1_,\n        Exported_class__0__implements_interface_from_inaccessible_module__1_,\n        Exported_interface__0__extends_interface_from_inaccessible_module__1_,\n        Public_static_property__0__of__exported_class_has_or_is_using_private_type__1_,\n        Public_property__0__of__exported_class_has_or_is_using_private_type__1_,\n        Property__0__of__exported_interface_has_or_is_using_private_type__1_,\n        Exported_variable__0__has_or_is_using_private_type__1_,\n        Public_static_property__0__of__exported_class_is_using_inaccessible_module__1_,\n        Public_property__0__of__exported_class_is_using_inaccessible_module__1_,\n        Property__0__of__exported_interface_is_using_inaccessible_module__1_,\n        Exported_variable__0__is_using_inaccessible_module__1_,\n        Parameter__0__of_constructor_from_exported_class_has_or_is_using_private_type__1_,\n        Parameter__0__of_public_static_property_setter_from_exported_class_has_or_is_using_private_type__1_,\n        Parameter__0__of_public_property_setter_from_exported_class_has_or_is_using_private_type__1_,\n        Parameter__0__of_constructor_signature_from_exported_interface_has_or_is_using_private_type__1_,\n        Parameter__0__of_call_signature_from_exported_interface_has_or_is_using_private_type__1_,\n        Parameter__0__of_public_static_method_from_exported_class_has_or_is_using_private_type__1_,\n        Parameter__0__of_public_method_from_exported_class_has_or_is_using_private_type__1_,\n        Parameter__0__of_method_from_exported_interface_has_or_is_using_private_type__1_,\n        Parameter__0__of_exported_function_has_or_is_using_private_type__1_,\n        Parameter__0__of_constructor_from_exported_class_is_using_inaccessible_module__1_,\n        Parameter__0__of_public_static_property_setter_from_exported_class_is_using_inaccessible_module__1_,\n        Parameter__0__of_public_property_setter_from_exported_class_is_using_inaccessible_module__1_,\n        Parameter__0__of_constructor_signature_from_exported_interface_is_using_inaccessible_module__1_,\n        Parameter__0__of_call_signature_from_exported_interface_is_using_inaccessible_module__1_,\n        Parameter__0__of_public_static_method_from_exported_class_is_using_inaccessible_module__1_,\n        Parameter__0__of_public_method_from_exported_class_is_using_inaccessible_module__1_,\n        Parameter__0__of_method_from_exported_interface_is_using_inaccessible_module__1_,\n        Parameter__0__of_exported_function_is_using_inaccessible_module__1_,\n        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type__0_,\n        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type__0_,\n        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type__0_,\n        Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type__0_,\n        Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type__0_,\n        Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type__0_,\n        Return_type_of_public_method_from_exported_class_has_or_is_using_private_type__0_,\n        Return_type_of_method_from_exported_interface_has_or_is_using_private_type__0_,\n        Return_type_of_exported_function_has_or_is_using_private_type__0_,\n        Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module__0_,\n        Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module__0_,\n        Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module__0_,\n        Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module__0_,\n        Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module__0_,\n        Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module__0_,\n        Return_type_of_public_method_from_exported_class_is_using_inaccessible_module__0_,\n        Return_type_of_method_from_exported_interface_is_using_inaccessible_module__0_,\n        Return_type_of_exported_function_is_using_inaccessible_module__0_,\n        _new_T____cannot_be_used_to_create_an_array__Use__new_Array_T_____instead,\n        A_parameter_list_must_follow_a_generic_type_argument_list______expected,\n        Multiple_constructor_implementations_are_not_allowed,\n        Unable_to_resolve_external_module__0_,\n        Module_cannot_be_aliased_to_a_non_module_type,\n        A_class_may_only_extend_another_class,\n        A_class_may_only_implement_another_class_or_interface,\n        An_interface_may_only_extend_another_class_or_interface,\n        An_interface_cannot_implement_another_type,\n        Unable_to_resolve_type,\n        Unable_to_resolve_type_of__0_,\n        Unable_to_resolve_type_parameter_constraint,\n        Type_parameter_constraint_cannot_be_a_primitive_type,\n        Supplied_parameters_do_not_match_any_signature_of_call_target,\n        Supplied_parameters_do_not_match_any_signature_of_call_target__NL__0,\n        Invalid__new__expression,\n        Call_signatures_used_in_a__new__expression_must_have_a__void__return_type,\n        Could_not_select_overload_for__new__expression,\n        Type__0__does_not_satisfy_the_constraint__1__for_type_parameter__2_,\n        Could_not_select_overload_for__call__expression,\n        Unable_to_invoke_type_with_no_call_signatures,\n        Calls_to__super__are_only_valid_inside_a_class,\n        Generic_type__0__requires_1_type_argument_s_,\n        Type_of_conditional_expression_cannot_be_determined__Best_common_type_could_not_be_found_between__0__and__1_,\n        Type_of_array_literal_cannot_be_determined__Best_common_type_could_not_be_found_for_array_elements,\n        Could_not_find_enclosing_symbol_for_dotted_name__0_,\n        The_property__0__does_not_exist_on_value_of_type__1__,\n        Could_not_find_symbol__0_,\n        _get__and__set__accessor_must_have_the_same_type,\n        _this__cannot_be_referenced_in_current_location,\n        Use_of_deprecated__bool__type__Use__boolean__instead,\n\n        Class__0__is_recursively_referenced_as_a_base_type_of_itself,\n        Interface__0__is_recursively_referenced_as_a_base_type_of_itself,\n        _super__property_access_is_permitted_only_in_a_constructor__instance_member_function__or_instance_member_accessor_of_a_derived_class,\n        _super__cannot_be_referenced_in_non_derived_classes,\n        A__super__call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_intialized_properties_or_has_parameter_properties,\n        Constructors_for_derived_classes_must_contain_a__super__call,\n        Super_calls_are_not_permitted_outside_constructors_or_in_local_functions_inside_constructors,\n        _0_1__is_inaccessible,\n        _this__cannot_be_referenced_within_module_bodies,\n        _this__must_only_be_used_inside_a_function_or_script_context,\n        Invalid__addition__expression___types_do_not_agree,\n        The_right_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type,\n        The_left_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type,\n        The_type_of_a_unary_arithmetic_operation_operand_must_be_of_type__any____number__or_an_enum_type,\n        Variable_declarations_for_for_in_expressions_cannot_contain_a_type_annotation,\n        Variable_declarations_for_for_in_expressions_must_be_of_types__string__or__any_,\n        The_right_operand_of_a_for_in_expression_must_be_of_type__any____an_object_type_or_a_type_parameter,\n        The_left_hand_side_of_an__in__expression_must_be_of_types__string__or__any_,\n        The_right_hand_side_of_an__in__expression_must_be_of_type__any___an_object_type_or_a_type_parameter,\n        The_left_hand_side_of_an__instanceOf__expression_must_be_of_type__any___an_object_type_or_a_type_parameter,\n        The_right_hand_side_of_an__instanceOf__expression_must_be_of_type__any__or_a_subtype_of_the__Function__interface_type,\n        Setters_cannot_return_a_value,\n        Tried_to_set_variable_type_to_module_type__0__,\n        Tried_to_set_variable_type_to_uninitialized_module_type__0__,\n        Function__0__declared_a_non_void_return_type__but_has_no_return_expression,\n        Getters_must_return_a_value,\n        Getter_and_setter_accessors_do_not_agree_in_visibility,\n        Invalid_left_hand_side_of_assignment_expression,\n        Function_declared_a_non_void_return_type__but_has_no_return_expression,\n        Cannot_resolve_return_type_reference,\n        Constructors_cannot_have_a_return_type_of__void_ ,\n        Subsequent_variable_declarations_must_have_the_same_type___Variable__0__must_be_of_type__1___but_here_has_type___2_ ,\n        All_symbols_within_a__with__block_will_be_resolved_to__any__,\n        Import_declarations_in_an_internal_module_cannot_reference_an_external_module,\n        Class__0__declares_interface__1__but_does_not_implement_it__NL__2,\n        Class__0__declares_class__1__but_does_not_implement_it__NL__2,\n        The_operand_of_an_increment_or_decrement_operator_must_be_a_variable__property_or_indexer,\n        _this__cannot_be_referenced_in_initializers_in_a_class_body,\n        Class__0__cannot_extend_class__1__NL__2,\n        Interface__0__cannot_extend_class__1__NL__2,\n        Interface__0__cannot_extend_interface__1__NL__2,\n        Duplicate_overload_signature_for__0_,\n        Duplicate_constructor_overload_signature,\n        Duplicate_overload_call_signature,\n        Duplicate_overload_construct_signature,\n        Overload_signature_is_not_compatible_with_function_definition,\n        Overload_signature_is_not_compatible_with_function_definition__NL__0,\n        Overload_signatures_must_all_be_public_or_private,\n        Overload_signatures_must_all_be_exported_or_local,\n        Overload_signatures_must_all_be_ambient_or_non_ambient,\n        Overload_signatures_must_all_be_optional_or_required,\n        Specialized_overload_signature_is_not_subtype_of_any_non_specialized_signature,\n        _this__cannot_be_referenced_in_constructor_arguments,\n        Static_member_cannot_be_accessed_off_an_instance_variable,\n        Instance_member_cannot_be_accessed_off_a_class,\n        Untyped_function_calls_may_not_accept_type_arguments,\n        Non_generic_functions_may_not_accept_type_arguments,\n        A_generic_type_may_not_reference_itself_with_its_own_type_parameters,\n        Static_methods_cannot_reference_class_type_parameters,\n        Value_of_type__0__is_not_callable__Did_you_mean_to_include__new___,\n        Rest_parameters_must_be_array_types,\n        Overload_signature_implementation_cannot_use_specialized_type,\n        Export_assignments_may_only_be_used_in_External_modules,\n        Export_assignments_may_only_be_made_with_acceptable_kinds,\n\n\n        // Extra information that is used as part of other error message\n        Type__0__is_missing_property__1__from_type__2_,\n        Types_of_property__0__of_types__1__and__2__are_incompatible,\n        Types_of_property__0__of_types__1__and__2__are_incompatible__NL__3,\n        Property__0__defined_as_private_in_type__1__is_defined_as_public_in_type__2_,\n        Property__0__defined_as_public_in_type__1__is_defined_as_private_in_type__2_,\n        Types__0__and__1__define_property__2__as_private,\n        Call_signatures_of_types__0__and__1__are_incompatible,\n        Call_signatures_of_types__0__and__1__are_incompatible__NL__2,\n        Type__0__requires_a_call_signature__but_Type__1__lacks_one,\n        Construct_signatures_of_types__0__and__1__are_incompatible,\n        Construct_signatures_of_types__0__and__1__are_incompatible__NL__2,\n        Type__0__requires_a_construct_signature__but_Type__1__lacks_one,\n        Index_signatures_of_types__0__and__1__are_incompatible,\n        Index_signatures_of_types__0__and__1__are_incompatible__NL__2,\n        Call_signature_expects__0__or_fewer_parameters,\n        Could_not_apply_type__0__to_argument__1__which_is_of_type__2_,\n        Class__0__defines_instance_member_accessor__1___but_extended_class__2__defines_it_as_instance_member_function,\n        Class__0__defines_instance_member_property__1___but_extended_class__2__defines_it_as_instance_member_function,\n        Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_accessor,\n        Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_property,\n        Types_of_static_property__0__of_class__1__and_class__2__are_incompatible,\n        Types_of_static_property__0__of_class__1__and_class__2__are_incompatible__NL__3,\n\n\n        //Batch compiler diagnostics\n        Current_host_does_not_support__w_atch_option,\n        ECMAScript_target_version__0__not_supported___Using_default__1__code_generation,\n        Module_code_generation__0__not_supported___Using_default__1__code_generation,\n        Could_not_find_file___0_,\n        Unknown_extension_for_file___0__Only__ts_and_d_ts_extensions_are_allowed,\n        A_file_cannot_have_a_reference_itself,\n        Cannot_resolve_referenced_file___0_,\n        Cannot_resolve_imported_file___0_,\n        Cannot_find_the_common_subdirectory_path_for_the_input_files,\n        Cannot_compile_dynamic_modules_when_emitting_into_single_file,\n        Emit_Error__0,\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface DiagnosticInfo {\n        category: DiagnosticCategory;\n        message: string;\n        code: number;\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface IDiagnosticMessages {\n        error_TS_0__1: DiagnosticInfo;\n        warning_TS_0__1: DiagnosticInfo;\n\n        _0__NL__1_TB__2: DiagnosticInfo;\n        _0_TB__1: DiagnosticInfo;\n\n        // Syntactic diagnostics.\n        Unrecognized_escape_sequence: DiagnosticInfo;\n        Unexpected_character_0: DiagnosticInfo;\n        Missing_closing_quote_character: DiagnosticInfo;\n        Identifier_expected: DiagnosticInfo;\n        _0_keyword_expected: DiagnosticInfo;\n        _0_expected: DiagnosticInfo;\n        Identifier_expected__0__is_a_keyword: DiagnosticInfo;\n        Automatic_semicolon_insertion_not_allowed: DiagnosticInfo;\n        Unexpected_token__0_expected: DiagnosticInfo;\n        Trailing_separator_not_allowed: DiagnosticInfo;\n        _StarSlash__expected: DiagnosticInfo;\n        _public_or_private_modifier_must_precede__static_: DiagnosticInfo;\n        Unexpected_token_: DiagnosticInfo;\n        A_catch_clause_variable_cannot_have_a_type_annotation: DiagnosticInfo;\n        Rest_parameter_must_be_last_in_list: DiagnosticInfo;\n        Parameter_cannot_have_question_mark_and_initializer: DiagnosticInfo;\n        Required_parameter_cannot_follow_optional_parameter: DiagnosticInfo;\n        Index_signatures_cannot_have_rest_parameters: DiagnosticInfo;\n        Index_signature_parameter_cannot_have_accessibility_modifiers: DiagnosticInfo;\n        Index_signature_parameter_cannot_have_a_question_mark: DiagnosticInfo;\n        Index_signature_parameter_cannot_have_an_initializer: DiagnosticInfo;\n        Index_signature_must_have_a_type_annotation: DiagnosticInfo;\n        Index_signature_parameter_must_have_a_type_annotation: DiagnosticInfo;\n        Index_signature_parameter_type_must_be__string__or__number_: DiagnosticInfo;\n        _extends__clause_already_seen: DiagnosticInfo;\n        _extends__clause_must_precede__implements__clause: DiagnosticInfo;\n        Class_can_only_extend_single_type: DiagnosticInfo;\n        _implements__clause_already_seen: DiagnosticInfo;\n        Accessibility_modifier_already_seen: DiagnosticInfo;\n        _0__modifier_must_precede__1__modifier: DiagnosticInfo;\n        _0__modifier_already_seen: DiagnosticInfo;\n        _0__modifier_cannot_appear_on_a_class_element: DiagnosticInfo;\n        Interface_declaration_cannot_have__implements__clause: DiagnosticInfo;\n        _super__invocation_cannot_have_type_arguments: DiagnosticInfo;\n        Non_ambient_modules_cannot_use_quoted_names: DiagnosticInfo;\n        Statements_are_not_allowed_in_ambient_contexts: DiagnosticInfo;\n        Implementations_are_not_allowed_in_ambient_contexts: DiagnosticInfo;\n        _declare__modifier_not_allowed_for_code_already_in_an_ambient_context: DiagnosticInfo;\n        Initializers_are_not_allowed_in_ambient_contexts: DiagnosticInfo;\n        Overload_and_ambient_signatures_cannot_specify_parameter_properties: DiagnosticInfo;\n        Function_implementation_expected: DiagnosticInfo;\n        Constructor_implementation_expected: DiagnosticInfo;\n        Function_overload_name_must_be__0_: DiagnosticInfo;\n        _0__modifier_cannot_appear_on_a_module_element: DiagnosticInfo;\n        _declare__modifier_cannot_appear_on_an_interface_declaration: DiagnosticInfo;\n        _declare__modifier_required_for_top_level_element: DiagnosticInfo;\n        Rest_parameter_cannot_be_optional: DiagnosticInfo;\n        Rest_parameter_cannot_have_initializer: DiagnosticInfo;\n        _set__accessor_parameter_cannot_have_accessibility_modifier: DiagnosticInfo;\n        _set__accessor_parameter_cannot_be_optional: DiagnosticInfo;\n        _set__accessor_parameter_cannot_have_initializer: DiagnosticInfo;\n        _set__accessor_cannot_have_rest_parameter: DiagnosticInfo;\n        _get__accessor_cannot_have_parameters: DiagnosticInfo;\n        Modifiers_cannot_appear_here: DiagnosticInfo;\n        Accessors_are_only_available_when_targeting_EcmaScript5_and_higher: DiagnosticInfo;\n        Enum_member_must_have_initializer: DiagnosticInfo;\n        _module_______is_deprecated__Use__require_______instead: DiagnosticInfo;\n\n\n\n\n        // Semantic diagnostics.\n        Duplicate_identifier__0_: DiagnosticInfo;\n        The_name__0__does_not_exist_in_the_current_scope: DiagnosticInfo;\n        The_name__0__does_not_refer_to_a_value: DiagnosticInfo;\n        Keyword__super__can_only_be_used_inside_a_class_instance_method: DiagnosticInfo;\n        The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer: DiagnosticInfo;\n        Value_of_type__0__is_not_callable__Did_you_mean_to_include__new__: DiagnosticInfo;\n        Value_of_type__0__is_not_callable: DiagnosticInfo;\n        Value_of_type__0__is_not_newable: DiagnosticInfo;\n        Value_of_type__0__is_not_indexable_by_type__1_: DiagnosticInfo;\n        Operator__0__cannot_be_applied_to_types__1__and__2_: DiagnosticInfo;\n        Operator__0__cannot_be_applied_to_types__1__and__2__3: DiagnosticInfo;\n        Cannot_convert__0__to__1_: DiagnosticInfo;\n        Cannot_convert__0__to__1__NL__2: DiagnosticInfo;\n        Expected_var__class__interface__or_module: DiagnosticInfo;\n        Operator__0__cannot_be_applied_to_type__1_: DiagnosticInfo;\n        Getter__0__already_declared: DiagnosticInfo;\n        Setter__0__already_declared: DiagnosticInfo;\n        Accessor_cannot_have_type_parameters: DiagnosticInfo;\n        _set__accessor_must_have_only_one_parameter: DiagnosticInfo;\n        Use_of_deprecated__bool__type__Use__boolean__instead: DiagnosticInfo;\n\n\n\n        //Privacy error related diagnostics\n        Exported_class__0__extends_private_class__1_: DiagnosticInfo;\n        Exported_class__0__implements_private_interface__1_: DiagnosticInfo;\n        Exported_interface__0__extends_private_interface__1_: DiagnosticInfo;\n        Exported_class__0__extends_class_from_inaccessible_module__1_: DiagnosticInfo;\n        Exported_class__0__implements_interface_from_inaccessible_module__1_: DiagnosticInfo;\n        Exported_interface__0__extends_interface_from_inaccessible_module__1_: DiagnosticInfo;\n        Public_static_property__0__of__exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Public_property__0__of__exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Property__0__of__exported_interface_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Exported_variable__0__has_or_is_using_private_type__1_: DiagnosticInfo;\n        Public_static_property__0__of__exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Public_property__0__of__exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Property__0__of__exported_interface_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Exported_variable__0__is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_constructor_from_exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_public_static_property_setter_from_exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_public_property_setter_from_exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_constructor_signature_from_exported_interface_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_call_signature_from_exported_interface_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_public_static_method_from_exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_public_method_from_exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_method_from_exported_interface_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_exported_function_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_constructor_from_exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_public_static_property_setter_from_exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_public_property_setter_from_exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_constructor_signature_from_exported_interface_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_call_signature_from_exported_interface_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_public_static_method_from_exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_public_method_from_exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_method_from_exported_interface_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_exported_function_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_public_method_from_exported_class_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_method_from_exported_interface_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_exported_function_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_public_method_from_exported_class_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_method_from_exported_interface_is_using_inaccessible_module__0_: DiagnosticInfo;\n\n\n\n        _new_T____cannot_be_used_to_create_an_array__Use__new_Array_T_____instead: DiagnosticInfo;\n        A_parameter_list_must_follow_a_generic_type_argument_list______expected: DiagnosticInfo;\n        Multiple_constructor_implementations_are_not_allowed: DiagnosticInfo;\n        Unable_to_resolve_external_module__0_: DiagnosticInfo;\n        Module_cannot_be_aliased_to_a_non_module_type: DiagnosticInfo;\n        A_class_may_only_extend_another_class: DiagnosticInfo;\n        A_class_may_only_implement_another_class_or_interface: DiagnosticInfo;\n        An_interface_may_only_extend_another_class_or_interface: DiagnosticInfo;\n        An_interface_cannot_implement_another_type: DiagnosticInfo;\n        Unable_to_resolve_type: DiagnosticInfo;\n        Unable_to_resolve_type_of__0_: DiagnosticInfo;\n        Unable_to_resolve_type_parameter_constraint: DiagnosticInfo;\n        Type_parameter_constraint_cannot_be_a_primitive_type: DiagnosticInfo;\n        Supplied_parameters_do_not_match_any_signature_of_call_target: DiagnosticInfo;\n        Supplied_parameters_do_not_match_any_signature_of_call_target__NL__0: DiagnosticInfo;\n        Invalid__new__expression: DiagnosticInfo;\n        Call_signatures_used_in_a__new__expression_must_have_a__void__return_type: DiagnosticInfo;\n        Could_not_select_overload_for__new__expression: DiagnosticInfo;\n        Type__0__does_not_satisfy_the_constraint__1__for_type_parameter__2_: DiagnosticInfo;\n        Could_not_select_overload_for__call__expression: DiagnosticInfo;\n        Unable_to_invoke_type_with_no_call_signatures: DiagnosticInfo;\n        Calls_to__super__are_only_valid_inside_a_class: DiagnosticInfo;\n        Generic_type__0__requires_1_type_argument_s_: DiagnosticInfo;\n        Type_of_conditional_expression_cannot_be_determined__Best_common_type_could_not_be_found_between__0__and__1_: DiagnosticInfo;\n        Type_of_array_literal_cannot_be_determined__Best_common_type_could_not_be_found_for_array_elements: DiagnosticInfo;\n        Could_not_find_enclosing_symbol_for_dotted_name__0_: DiagnosticInfo;\n        The_property__0__does_not_exist_on_value_of_type__1__: DiagnosticInfo;\n        Could_not_find_symbol__0_: DiagnosticInfo;\n        _get__and__set__accessor_must_have_the_same_type: DiagnosticInfo;\n        _this__cannot_be_referenced_in_current_location: DiagnosticInfo;\n        Class__0__is_recursively_referenced_as_a_base_type_of_itself: DiagnosticInfo;\n        Interface__0__is_recursively_referenced_as_a_base_type_of_itself: DiagnosticInfo;\n        _super__property_access_is_permitted_only_in_a_constructor__instance_member_function__or_instance_member_accessor_of_a_derived_class: DiagnosticInfo;\n        _super__cannot_be_referenced_in_non_derived_classes: DiagnosticInfo;\n        A__super__call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_intialized_properties_or_has_parameter_properties: DiagnosticInfo;\n        Constructors_for_derived_classes_must_contain_a__super__call: DiagnosticInfo;\n        Super_calls_are_not_permitted_outside_constructors_or_in_local_functions_inside_constructors: DiagnosticInfo;\n        _0_1__is_inaccessible: DiagnosticInfo;\n        _this__cannot_be_referenced_within_module_bodies: DiagnosticInfo;\n        _this__must_only_be_used_inside_a_function_or_script_context: DiagnosticInfo;\n        Invalid__addition__expression___types_do_not_agree: DiagnosticInfo;\n        The_right_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type: DiagnosticInfo;\n        The_left_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type: DiagnosticInfo;\n        The_type_of_a_unary_arithmetic_operation_operand_must_be_of_type__any____number__or_an_enum_type: DiagnosticInfo;\n        Variable_declarations_for_for_in_expressions_cannot_contain_a_type_annotation: DiagnosticInfo;\n        Variable_declarations_for_for_in_expressions_must_be_of_types__string__or__any_: DiagnosticInfo;\n        The_right_operand_of_a_for_in_expression_must_be_of_type__any____an_object_type_or_a_type_parameter: DiagnosticInfo;\n        The_left_hand_side_of_an__in__expression_must_be_of_types__string__or__any_: DiagnosticInfo;\n        The_right_hand_side_of_an__in__expression_must_be_of_type__any___an_object_type_or_a_type_parameter: DiagnosticInfo;\n        The_left_hand_side_of_an__instanceOf__expression_must_be_of_type__any___an_object_type_or_a_type_parameter: DiagnosticInfo;\n        The_right_hand_side_of_an__instanceOf__expression_must_be_of_type__any__or_a_subtype_of_the__Function__interface_type: DiagnosticInfo;\n        Setters_cannot_return_a_value: DiagnosticInfo;\n        Tried_to_set_variable_type_to_module_type__0__: DiagnosticInfo;\n        Tried_to_set_variable_type_to_uninitialized_module_type__0__: DiagnosticInfo;\n        Function__0__declared_a_non_void_return_type__but_has_no_return_expression: DiagnosticInfo;\n        Getters_must_return_a_value: DiagnosticInfo;\n        Getter_and_setter_accessors_do_not_agree_in_visibility: DiagnosticInfo;\n        Invalid_left_hand_side_of_assignment_expression: DiagnosticInfo;\n        Function_declared_a_non_void_return_type__but_has_no_return_expression: DiagnosticInfo;\n        Cannot_resolve_return_type_reference: DiagnosticInfo;\n        Constructors_cannot_have_a_return_type_of__void_: DiagnosticInfo;\n        Import_declarations_in_an_internal_module_cannot_reference_an_external_module: DiagnosticInfo;\n        Class__0__declares_interface__1__but_does_not_implement_it__NL__2: DiagnosticInfo;\n        Class__0__declares_class__1__but_does_not_implement_it__NL__2: DiagnosticInfo;\n        The_operand_of_an_increment_or_decrement_operator_must_be_a_variable__property_or_indexer: DiagnosticInfo;\n        _this__cannot_be_referenced_in_initializers_in_a_class_body: DiagnosticInfo;\n        Class__0__cannot_extend_class__1__NL__2: DiagnosticInfo;\n        Interface__0__cannot_extend_class__1__NL__2: DiagnosticInfo;\n        Interface__0__cannot_extend_interface__1__NL__2: DiagnosticInfo;\n        Duplicate_overload_signature_for__0_: DiagnosticInfo;\n        Duplicate_constructor_overload_signature: DiagnosticInfo;\n        Duplicate_overload_call_signature: DiagnosticInfo;\n        Duplicate_overload_construct_signature: DiagnosticInfo;\n        Overload_signature_is_not_compatible_with_function_definition: DiagnosticInfo;\n        Overload_signature_is_not_compatible_with_function_definition__NL__0: DiagnosticInfo;\n        Overload_signatures_must_all_be_public_or_private: DiagnosticInfo;\n        Overload_signatures_must_all_be_exported_or_local: DiagnosticInfo;\n        Overload_signatures_must_all_be_ambient_or_non_ambient: DiagnosticInfo;\n        Overload_signatures_must_all_be_optional_or_required: DiagnosticInfo;\n        Specialized_overload_signature_is_not_subtype_of_any_non_specialized_signature: DiagnosticInfo;\n        _this__cannot_be_referenced_in_constructor_arguments: DiagnosticInfo;\n        Static_member_cannot_be_accessed_off_an_instance_variable: DiagnosticInfo;\n        Instance_member_cannot_be_accessed_off_a_class: DiagnosticInfo;\n        Untyped_function_calls_may_not_accept_type_arguments: DiagnosticInfo;\n        Non_generic_functions_may_not_accept_type_arguments: DiagnosticInfo;\n        Static_methods_cannot_reference_class_type_parameters: DiagnosticInfo;\n        Value_of_type__0__is_not_callable__Did_you_mean_to_include__new___: DiagnosticInfo;\n        Rest_parameters_must_be_array_types: DiagnosticInfo;\n        Overload_signature_implementation_cannot_use_specialized_type: DiagnosticInfo;\n        Export_assignments_may_only_be_used_in_External_modules;\n        Export_assignments_may_only_be_made_with_acceptable_kinds;\n\n        Type__0__is_missing_property__1__from_type__2_: DiagnosticInfo;\n        Types_of_property__0__of_types__1__and__2__are_incompatible: DiagnosticInfo;\n        Types_of_property__0__of_types__1__and__2__are_incompatible__NL__3: DiagnosticInfo;\n        Property__0__defined_as_private_in_type__1__is_defined_as_public_in_type__2_: DiagnosticInfo;\n        Property__0__defined_as_public_in_type__1__is_defined_as_private_in_type__2_: DiagnosticInfo;\n        Types__0__and__1__define_property__2__as_private: DiagnosticInfo;\n        Call_signatures_of_types__0__and__1__are_incompatible: DiagnosticInfo;\n        Call_signatures_of_types__0__and__1__are_incompatible__NL__2: DiagnosticInfo;\n        Type__0__requires_a_call_signature__but_Type__1__lacks_one: DiagnosticInfo;\n        Construct_signatures_of_types__0__and__1__are_incompatible: DiagnosticInfo;\n        Construct_signatures_of_types__0__and__1__are_incompatible__NL__2: DiagnosticInfo;\n        Type__0__requires_a_construct_signature__but_Type__1__lacks_one: DiagnosticInfo;\n        Index_signatures_of_types__0__and__1__are_incompatible: DiagnosticInfo;\n        Index_signatures_of_types__0__and__1__are_incompatible__NL__2: DiagnosticInfo;\n        Call_signature_expects__0__or_fewer_parameters: DiagnosticInfo;\n        Could_not_apply_type__0__to_argument__1__which_is_of_type__2_: DiagnosticInfo;\n        Class__0__defines_instance_member_accessor__1___but_extended_class__2__defines_it_as_instance_member_function: DiagnosticInfo;\n        Class__0__defines_instance_member_property__1___but_extended_class__2__defines_it_as_instance_member_function: DiagnosticInfo;\n        Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_accessor: DiagnosticInfo;\n        Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_property: DiagnosticInfo;\n        Types_of_static_property__0__of_class__1__and_class__2__are_incompatible: DiagnosticInfo;\n        Types_of_static_property__0__of_class__1__and_class__2__are_incompatible__NL__3: DiagnosticInfo;\n\n\n        //Batch compiler diagnostics\n        Current_host_does_not_support__w_atch_option: DiagnosticInfo;\n        ECMAScript_target_version__0__not_supported___Using_default__1__code_generation: DiagnosticInfo;\n        Module_code_generation__0__not_supported___Using_default__1__code_generation: DiagnosticInfo;\n        Could_not_find_file___0_: DiagnosticInfo;\n        Unknown_extension_for_file___0__Only__ts_and_d_ts_extensions_are_allowed: DiagnosticInfo;\n        A_file_cannot_have_a_reference_itself: DiagnosticInfo;\n        Cannot_resolve_referenced_file___0_: DiagnosticInfo;\n        Cannot_resolve_imported_file___0_: DiagnosticInfo;\n        Cannot_find_the_common_subdirectory_path_for_the_input_files: DiagnosticInfo;\n        Cannot_compile_dynamic_modules_when_emitting_into_single_file: DiagnosticInfo;\n        Emit_Error__0: DiagnosticInfo;\n    }\n\n    export var diagnosticMessages: IDiagnosticMessages = {\n        error_TS_0__1: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"error TS{0}: {1}\",\n            code: 0\n        },\n\n        warning_TS_0__1: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"warning TS{0}: {1}\",\n            code: 1\n        },\n\n        _0__NL__1_TB__2: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"{0}{NL}{{1}TB}{2}\",\n            code: 21\n        },\n\n        _0_TB__1: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"{{0}TB}{1}\",\n            code: 22\n        },\n\n        // Syntactic errors start at 100.\n        Unrecognized_escape_sequence: {\n            category: DiagnosticCategory.Error,\n            message: \"Unrecognized escape sequence.\",\n            code: 1000\n        },\n\n        Unexpected_character_0: {\n            category: DiagnosticCategory.Error,\n            message: \"Unexpected character {0}.\",\n            code: 1001\n        },\n\n        Missing_closing_quote_character: {\n            category: DiagnosticCategory.Error,\n            message: \"Missing close quote character.\",\n            code: 1002\n        },\n\n        Identifier_expected: {\n            category: DiagnosticCategory.Error,\n            message: \"Identifier expected.\",\n            code: 1003\n        },\n\n        _0_keyword_expected: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}\' keyword expected.\",\n            code: 1004\n        },\n\n        _0_expected: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}\' expected.\",\n            code: 1005\n        },\n\n        Identifier_expected__0__is_a_keyword: {\n            category: DiagnosticCategory.Error,\n            message: \"Identifier expected; \'{0}\' is a keyword.\",\n            code: 1006\n        },\n\n        Automatic_semicolon_insertion_not_allowed: {\n            category: DiagnosticCategory.Error,\n            message: \"Automatic semicolon insertion not allowed.\",\n            code: 1007\n        },\n\n        Unexpected_token__0_expected: {\n            category: DiagnosticCategory.Error,\n            message: \"Unexpected token; \'{0}\' expected.\",\n            code: 1008\n        },\n\n        Trailing_separator_not_allowed: {\n            category: DiagnosticCategory.Error,\n            message: \"Trailing separator not allowed.\",\n            code: 1009\n        },\n\n        _StarSlash__expected: {\n            category: DiagnosticCategory.Error,\n            message: \"\'*/\' expected.\",\n            code: 1010\n        },\n\n        _public_or_private_modifier_must_precede__static_: {\n            category: DiagnosticCategory.Error,\n            message: \"\'public\' or \'private\' modifier must precede \'static\'.\",\n            code: 1011\n        },\n\n        Unexpected_token_: {\n            category: DiagnosticCategory.Error,\n            message: \"Unexpected token.\",\n            code: 1012\n        },\n\n        A_catch_clause_variable_cannot_have_a_type_annotation: {\n            category: DiagnosticCategory.Error,\n            message: \"A catch clause variable cannot have a type annotation.\",\n            code: 1013\n        },\n\n        Rest_parameter_must_be_last_in_list: {\n            category: DiagnosticCategory.Error,\n            message: \"Rest parameter must be last in list.\",\n            code: 1014\n        },\n\n        Parameter_cannot_have_question_mark_and_initializer: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter cannot have question mark and initializer.\",\n            code: 1015\n        },\n\n        Required_parameter_cannot_follow_optional_parameter: {\n            category: DiagnosticCategory.Error,\n            message: \"Required parameter cannot follow optional parameter.\",\n            code: 1016\n        },\n\n        Index_signatures_cannot_have_rest_parameters: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signatures cannot have rest parameters.\",\n            code: 1017\n        },\n\n        Index_signature_parameter_cannot_have_accessibility_modifiers: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signature parameter cannot have accessibility modifiers.\",\n            code: 1018\n        },\n\n        Index_signature_parameter_cannot_have_a_question_mark: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signature parameter cannot have a question mark.\",\n            code: 1019\n        },\n\n        Index_signature_parameter_cannot_have_an_initializer: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signature parameter cannot have an initializer.\",\n            code: 1020\n        },\n\n        Index_signature_must_have_a_type_annotation: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signature must have a type annotation.\",\n            code: 1021\n        },\n\n        Index_signature_parameter_must_have_a_type_annotation: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signature parameter must have a type annotation.\",\n            code: 1022\n        },\n\n        Index_signature_parameter_type_must_be__string__or__number_: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signature parameter type must be \'string\' or \'number\'.\",\n            code: 1023\n        },\n\n        _extends__clause_already_seen: {\n            category: DiagnosticCategory.Error,\n            message: \"\'extends\' clause already seen.\",\n            code: 1024\n        },\n\n        _extends__clause_must_precede__implements__clause: {\n            category: DiagnosticCategory.Error,\n            message: \"\'extends\' clause must precede \'implements\' clause.\",\n            code: 1025\n        },\n\n        Class_can_only_extend_single_type: {\n            category: DiagnosticCategory.Error,\n            message: \"Class can only extend single type.\",\n            code: 1026\n        },\n\n        _implements__clause_already_seen: {\n            category: DiagnosticCategory.Error,\n            message: \"\'implements\' clause already seen.\",\n            code: 1027\n        },\n\n        Accessibility_modifier_already_seen: {\n            category: DiagnosticCategory.Error,\n            message: \"Accessibility modifier already seen.\",\n            code: 1028\n        },\n\n        _0__modifier_must_precede__1__modifier: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}\' modifier must precede \'{1}\' modifier.\",\n            code: 1029\n        },\n\n        _0__modifier_already_seen: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}\' modifier already seen.\",\n            code: 1030\n        },\n\n        _0__modifier_cannot_appear_on_a_class_element: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}\' modifier cannot appear on a class element.\",\n            code: 1031\n        },\n\n        Interface_declaration_cannot_have__implements__clause: {\n            category: DiagnosticCategory.Error,\n            message: \"Interface declaration cannot have \'implements\' clause.\",\n            code: 1032\n        },\n\n        _super__invocation_cannot_have_type_arguments: {\n            category: DiagnosticCategory.Error,\n            message: \"\'super\' invocation cannot have type arguments.\",\n            code: 1034\n        },\n\n        Non_ambient_modules_cannot_use_quoted_names: {\n            category: DiagnosticCategory.Error,\n            message: \"Non ambient modules cannot use quoted names.\",\n            code: 1035\n        },\n\n        Statements_are_not_allowed_in_ambient_contexts: {\n            category: DiagnosticCategory.Error,\n            message: \"Statements are not allowed in ambient contexts.\",\n            code: 1036\n        },\n\n        Implementations_are_not_allowed_in_ambient_contexts: {\n            category: DiagnosticCategory.Error,\n            message: \"Implementations are not allowed in ambient contexts.\",\n            code: 1037\n        },\n\n        _declare__modifier_not_allowed_for_code_already_in_an_ambient_context: {\n            category: DiagnosticCategory.Error,\n            message: \"\'declare\' modifier not allowed for code already in an ambient context.\",\n            code: 1038\n        },\n\n        Initializers_are_not_allowed_in_ambient_contexts: {\n            category: DiagnosticCategory.Error,\n            message: \"Initializers are not allowed in ambient contexts.\",\n            code: 1039\n        },\n\n        Overload_and_ambient_signatures_cannot_specify_parameter_properties: {\n            category: DiagnosticCategory.Error,\n            message: \"Overload and ambient signatures cannot specify parameter properties.\",\n            code: 1040\n        },\n\n        Function_implementation_expected: {\n            category: DiagnosticCategory.Error,\n            message: \"Function implementation expected.\",\n            code: 1041\n        },\n\n        Constructor_implementation_expected: {\n            category: DiagnosticCategory.Error,\n            message: \"Constructor implementation expected.\",\n            code: 1042\n        },\n\n        Function_overload_name_must_be__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Function overload name must be \'{0}\'.\",\n            code: 1043\n        },\n\n        _0__modifier_cannot_appear_on_a_module_element: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}\' modifier cannot appear on a module element.\",\n            code: 1044\n        },\n\n        _declare__modifier_cannot_appear_on_an_interface_declaration: {\n            category: DiagnosticCategory.Error,\n            message: \"\'declare\' modifier cannot appear on an interface declaration.\",\n            code: 1045\n        },\n\n        _declare__modifier_required_for_top_level_element: {\n            category: DiagnosticCategory.Error,\n            message: \"\'declare\' modifier required for top level element.\",\n            code: 1046\n        },\n\n        Rest_parameter_cannot_be_optional: {\n            category: DiagnosticCategory.Error,\n            message: \"Rest parameter cannot be optional.\",\n            code: 1047\n        },\n\n        Rest_parameter_cannot_have_initializer: {\n            category: DiagnosticCategory.Error,\n            message: \"Rest parameter cannot have initializer.\",\n            code: 1048\n        },\n\n        _set__accessor_must_have_only_one_parameter: {\n            category: DiagnosticCategory.Error,\n            message: \"\'set\' accessor must have one and only one parameter.\",\n            code: 1049\n        },\n\n        _set__accessor_parameter_cannot_have_accessibility_modifier: {\n            category: DiagnosticCategory.Error,\n            message: \"\'set\' accessor parameter cannot have accessibility modifier.\",\n            code: 1050\n        },\n\n        _set__accessor_parameter_cannot_be_optional: {\n            category: DiagnosticCategory.Error,\n            message: \"\'set\' accessor parameter cannot be optional.\",\n            code: 1051\n        },\n\n        _set__accessor_parameter_cannot_have_initializer: {\n            category: DiagnosticCategory.Error,\n            message: \"\'set\' accessor parameter cannot have initializer.\",\n            code: 1052\n        },\n\n        _set__accessor_cannot_have_rest_parameter: {\n            category: DiagnosticCategory.Error,\n            message: \"\'set\' accessor cannot have rest parameter.\",\n            code: 1053\n        },\n\n        _get__accessor_cannot_have_parameters: {\n            category: DiagnosticCategory.Error,\n            message: \"\'get\' accessor cannot have parameters.\",\n            code: 1054\n        },\n\n        Modifiers_cannot_appear_here: {\n            category: DiagnosticCategory.Error,\n            message: \"Modifiers cannot appear here.\",\n            code: 1055\n        },\n\n        Accessors_are_only_available_when_targeting_EcmaScript5_and_higher: {\n            category: DiagnosticCategory.Error,\n            message: \"Accessors are only when targeting EcmaScript5 and higher.\",\n            code: 1056\n        },\n\n        Class_name_cannot_be__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Class name cannot be \'{0}\'.\",\n            code: 1057\n        },\n\n        Interface_name_cannot_be__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Interface name cannot be \'{0}\'.\",\n            code: 1058\n        },\n\n        Enum_name_cannot_be__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Enum name cannot be \'{0}\'.\",\n            code: 1059\n        },\n\n        Module_name_cannot_be__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Module name cannot be \'{0}\'.\",\n            code: 1060\n        },\n\n        Enum_member_must_have_initializer: {\n            category: DiagnosticCategory.Error,\n            message: \"Enum member must have initializer.\",\n            code: 1061\n        },\n\n        _module_______is_deprecated__Use__require_______instead: {\n            category: DiagnosticCategory.Warning,\n            message: \"\'module(...)\' is deprecated. Use \'require(...)\' instead.\",\n            code: 1062\n        },\n\n\n\n\n\n\n\n\n\n        // Semantic errors start at 2000.\n        Duplicate_identifier__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Duplicate identifier \'{0}\'.\",\n            code: 2000\n        },\n\n        The_name__0__does_not_exist_in_the_current_scope: {\n            category: DiagnosticCategory.Error,\n            message: \"The name \'{0}\' does not exist in the current scope.\",\n            code: 2001\n        },\n\n        The_name__0__does_not_refer_to_a_value: {\n            category: DiagnosticCategory.Error,\n            message: \"The name \'{0}\' does not refer to a value.\",\n            code: 2002\n        },\n\n        Keyword__super__can_only_be_used_inside_a_class_instance_method: {\n            category: DiagnosticCategory.Error,\n            message: \"Keyword \'super\' can only be used inside a class instance method.\",\n            code: 2003\n        },\n\n        The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer: {\n            category: DiagnosticCategory.Error,\n            message: \"The left-hand side of an assignment expression must be a variable, property or indexer.\",\n            code: 2004\n        },\n\n        Value_of_type__0__is_not_callable__Did_you_mean_to_include__new__: {\n            category: DiagnosticCategory.Error,\n            message: \"Value of type \'{0}\' is not callable. Did you mean to include \'new\'?\",\n            code: 2005\n        },\n\n        Value_of_type__0__is_not_callable: {\n            category: DiagnosticCategory.Error,\n            message: \"Value of type \'{0}\' is not callable.\",\n            code: 2006\n        },\n\n        Value_of_type__0__is_not_newable: {\n            category: DiagnosticCategory.Error,\n            message: \"Value of type \'{0}\' is not newable.\",\n            code: 2007\n        },\n\n        Value_of_type__0__is_not_indexable_by_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Value of type \'{0}\' is not indexable by type \'{1}\'.\",\n            code: 2008\n        },\n\n        Operator__0__cannot_be_applied_to_types__1__and__2_: {\n            category: DiagnosticCategory.Error,\n            message: \"Operator \'{0}\' cannot be applied to types \'{1}\' and \'{2}\'.\",\n            code: 2009\n        },\n\n        Operator__0__cannot_be_applied_to_types__1__and__2__3: {\n            category: DiagnosticCategory.Error,\n            message: \"Operator \'{0}\' cannot be applied to types \'{1}\' and \'{2}\': {3}\",\n            code: 2010\n        },\n\n        Cannot_convert__0__to__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Cannot convert \'{0}\' to \'{1}\'.\",\n            code: 2011\n        },\n\n        Cannot_convert__0__to__1__NL__2: {\n            category: DiagnosticCategory.Error,\n            message: \"Cannot convert \'{0}\' to \'{1}\':{NL}{2}\",\n            code: 2012\n        },\n\n        Expected_var__class__interface__or_module: {\n            category: DiagnosticCategory.Error,\n            message: \"Expected var, class, interface, or module.\",\n            code: 2013\n        },\n\n        Operator__0__cannot_be_applied_to_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Operator \'{0}\' cannot be applied to type \'{1}\'.\",\n            code: 2014\n        },\n\n        Getter__0__already_declared: {\n            category: DiagnosticCategory.Error,\n            message: \"Getter \'{0}\' already declared.\",\n            code: 2015\n        },\n\n        Setter__0__already_declared: {\n            category: DiagnosticCategory.Error,\n            message: \"Setter \'{0}\' already declared.\",\n            code: 2016\n        },\n\n        Accessor_cannot_have_type_parameters: {\n            category: DiagnosticCategory.Error,\n            message: \"Accessors cannot have type parameters.\",\n            code: 2017\n        },\n\n        Exported_class__0__extends_private_class__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported class \'{0}\' extends private class \'{1}\'.\",\n            code: 2018\n        },\n        Exported_class__0__implements_private_interface__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported class \'{0}\' implements private interface \'{1}\'.\",\n            code: 2019\n        },\n        Exported_interface__0__extends_private_interface__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported interface \'{0}\' extends private interface \'{1}\'.\",\n            code: 2020\n        },\n        Exported_class__0__extends_class_from_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported class \'{0}\' extends class from inaccessible module {1}.\",\n            code: 2021\n        },\n        Exported_class__0__implements_interface_from_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported class \'{0}\' implements interface from inaccessible module {1}.\",\n            code: 2022\n        },\n        Exported_interface__0__extends_interface_from_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported interface \'{0}\' extends interface from inaccessible module {1}.\",\n            code: 2023\n        },\n        Public_static_property__0__of__exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Public static property \'{0}\' of exported class has or is using private type \'{1}\'.\",\n            code: 2024\n        },\n        Public_property__0__of__exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Public property \'{0}\' of exported class has or is using private type \'{1}\'.\",\n            code: 2025\n        },\n        Property__0__of__exported_interface_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Property \'{0}\' of exported interface has or is using private type \'{1}\'.\",\n            code: 2026\n        },\n        Exported_variable__0__has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported variable \'{0}\' has or is using private type \'{1}\'.\",\n            code: 2027\n        },\n        Public_static_property__0__of__exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Public static property \'{0}\' of exported class is using inaccessible module {1}.\",\n            code: 2028\n        },\n        Public_property__0__of__exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Public property \'{0}\' of exported class is using inaccessible module {1}.\",\n            code: 2029\n        },\n        Property__0__of__exported_interface_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Property \'{0}\' of exported interface is using inaccessible module {1}.\",\n            code: 2030\n        },\n        Exported_variable__0__is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported variable \'{0}\' is using inaccessible module {1}.\",\n            code: 2031\n        },\n        Parameter__0__of_constructor_from_exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of constructor from exported class has or is using private type \'{1}\'.\",\n            code: 2032\n        },\n        Parameter__0__of_public_static_property_setter_from_exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public static property setter from exported class has or is using private type \'{1}\'.\",\n            code: 2033\n        },\n        Parameter__0__of_public_property_setter_from_exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public property setter from exported class has or is using private type \'{1}\'.\",\n            code: 2034\n        },\n        Parameter__0__of_constructor_signature_from_exported_interface_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of constructor signature from exported interface has or is using private type \'{1}\'.\",\n            code: 2035\n        },\n        Parameter__0__of_call_signature_from_exported_interface_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of call signature from exported interface has or is using private type \'{1}\'.\",\n            code: 2036\n        },\n        Parameter__0__of_public_static_method_from_exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public static method from exported class has or is using private type \'{1}\'.\",\n            code: 2037\n        },\n        Parameter__0__of_public_method_from_exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public method from exported class has or is using private type \'{1}\'.\",\n            code: 2038\n        },\n        Parameter__0__of_method_from_exported_interface_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of method from exported interface has or is using private type \'{1}\'.\",\n            code: 2039\n        },\n        Parameter__0__of_exported_function_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of exported function has or is using private type \'{1}\'.\",\n            code: 2040\n        },\n        Parameter__0__of_constructor_from_exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of constructor from exported class is using inaccessible module {1}.\",\n            code: 2041\n        },\n        Parameter__0__of_public_static_property_setter_from_exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public static property setter from exported class is using inaccessible module {1}.\",\n            code: 2042\n        },\n        Parameter__0__of_public_property_setter_from_exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public property setter from exported class is using inaccessible module {1}.\",\n            code: 2043\n        },\n        Parameter__0__of_constructor_signature_from_exported_interface_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of constructor signature from exported interface is using inaccessible module {1}.\",\n            code: 2044\n        },\n        Parameter__0__of_call_signature_from_exported_interface_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of call signature from exported interface is using inaccessible module {1}\",\n            code: 2045\n        },\n        Parameter__0__of_public_static_method_from_exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public static method from exported class is using inaccessible module {1}.\",\n            code: 2046\n        },\n        Parameter__0__of_public_method_from_exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public method from exported class is using inaccessible module {1}.\",\n            code: 2047\n        },\n        Parameter__0__of_method_from_exported_interface_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of method from exported interface is using inaccessible module {1}.\",\n            code: 2048\n        },\n        Parameter__0__of_exported_function_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of exported function is using inaccessible module {1}.\",\n            code: 2049\n        },\n        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public static property getter from exported class has or is using private type \'{0}\'.\",\n            code: 2050\n        },\n        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public property getter from exported class has or is using private type \'{0}\'.\",\n            code: 2051\n        },\n        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of constructor signature from exported interface has or is using private type \'{0}\'.\",\n            code: 2052\n        },\n        Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of call signature from exported interface has or is using private type \'{0}\'.\",\n            code: 2053\n        },\n        Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of index signature from exported interface has or is using private type \'{0}\'.\",\n            code: 2054\n        },\n        Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public static method from exported class has or is using private type \'{0}\'.\",\n            code: 2055\n        },\n        Return_type_of_public_method_from_exported_class_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public method from exported class has or is using private type \'{0}\'.\",\n            code: 2056\n        },\n        Return_type_of_method_from_exported_interface_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of method from exported interface has or is using private type \'{0}\'.\",\n            code: 2057\n        },\n        Return_type_of_exported_function_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of exported function has or is using private type \'{0}\'.\",\n            code: 2058\n        },\n        Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public static property getter from exported class is using inaccessible module {0}.\",\n            code: 2059\n        },\n        Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public property getter from exported class is using inaccessible module {0}.\",\n            code: 2060\n        },\n        Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of constructor signature from exported interface is using inaccessible module {0}.\",\n            code: 2061\n        },\n        Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of call signature from exported interface is using inaccessible module {0}.\",\n            code: 2062\n        },\n        Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of index signature from exported interface is using inaccessible module {0}.\",\n            code: 2063\n        },\n        Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public static method from exported class is using inaccessible module {0}.\",\n            code: 2064\n        },\n        Return_type_of_public_method_from_exported_class_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public method from exported class is using inaccessible module {0}.\",\n            code: 2065\n        },\n        Return_type_of_method_from_exported_interface_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of method from exported interface is using inaccessible module {0}.\",\n            code: 2066\n        },\n        Return_type_of_exported_function_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of exported function is using inaccessible module {0}.\",\n            code: 2067\n        },\n        _new_T____cannot_be_used_to_create_an_array__Use__new_Array_T_____instead: {\n            category: DiagnosticCategory.Error,\n            message: \"\'new T[]\' cannot be used to create an array. Use \'new Array<T>()\' instead.\",\n            code: 2068\n        },\n        A_parameter_list_must_follow_a_generic_type_argument_list______expected: {\n            category: DiagnosticCategory.Error,\n            message: \"A parameter list must follow a generic type argument list. \'(\' expected.\",\n            code: 2069\n        },\n        Multiple_constructor_implementations_are_not_allowed: {\n            category: DiagnosticCategory.Error,\n            message: \"Multiple constructor implementations are not allowed.\",\n            code: 2070\n        },\n        Unable_to_resolve_external_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Unable to resolve external module \'{0}\'.\",\n            code: 2071\n        },\n        Module_cannot_be_aliased_to_a_non_module_type: {\n            category: DiagnosticCategory.Error,\n            message: \"Module cannot be aliased to a non-module type.\",\n            code: 2072\n        },\n        A_class_may_only_extend_another_class: {\n            category: DiagnosticCategory.Error,\n            message: \"A class may only extend another class.\",\n            code: 2073\n        },\n        A_class_may_only_implement_another_class_or_interface: {\n            category: DiagnosticCategory.Error,\n            message: \"A class may only implement another class or interface.\",\n            code: 2074\n        },\n        An_interface_may_only_extend_another_class_or_interface: {\n            category: DiagnosticCategory.Error,\n            message: \"An interface may only extend another class or interface.\",\n            code: 2075\n        },\n        An_interface_cannot_implement_another_type: {\n            category: DiagnosticCategory.Error,\n            message: \"An interface cannot implement another type.\",\n            code: 2076\n        },\n        Unable_to_resolve_type: {\n            category: DiagnosticCategory.Error,\n            message: \"Unable to resolve type.\",\n            code: 2077\n        },\n        Unable_to_resolve_type_of__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Unable to resolve type of \'{0}\'.\",\n            code: 2078\n        },\n        Unable_to_resolve_type_parameter_constraint: {\n            category: DiagnosticCategory.Error,\n            message: \"Unable to resolve type parameter constraint.\",\n            code: 2079\n        },\n        Type_parameter_constraint_cannot_be_a_primitive_type: {\n            category: DiagnosticCategory.Error,\n            message: \"Type parameter constraint cannot be a primitive type.\",\n            code: 2080\n        },\n        Supplied_parameters_do_not_match_any_signature_of_call_target: {\n            category: DiagnosticCategory.Error,\n            message: \"Supplied parameters do not match any signature of call target.\",\n            code: 2081\n        },\n        Supplied_parameters_do_not_match_any_signature_of_call_target__NL__0: {\n            category: DiagnosticCategory.Error,\n            message: \"Supplied parameters do not match any signature of call target:{NL}{0}\",\n            code: 2082\n        },\n        Invalid__new__expression: {\n            category: DiagnosticCategory.Error,\n            message: \"Invalid \'new\' expression.\",\n            code: 2083\n        },\n        Call_signatures_used_in_a__new__expression_must_have_a__void__return_type: {\n            category: DiagnosticCategory.Error,\n            message: \"Call signatures used in a \'new\' expression must have a \'void\' return type.\",\n            code: 2084\n        },\n        Could_not_select_overload_for__new__expression: {\n            category: DiagnosticCategory.Error,\n            message: \"Could not select overload for \'new\' expression.\",\n            code: 2085\n        },\n        Type__0__does_not_satisfy_the_constraint__1__for_type_parameter__2_: {\n            category: DiagnosticCategory.Error,\n            message: \"Type \'{0}\' does not satisfy the constraint \'{1}\' for type parameter \'{2}\'.\",\n            code: 2086\n        },\n        Could_not_select_overload_for__call__expression: {\n            category: DiagnosticCategory.Error,\n            message: \"Could not select overload for \'call\' expression.\",\n            code: 2087\n        },\n        Unable_to_invoke_type_with_no_call_signatures: {\n            category: DiagnosticCategory.Error,\n            message: \"Unable to invoke type with no call signatures.\",\n            code: 2088\n        },\n        Calls_to__super__are_only_valid_inside_a_class: {\n            category: DiagnosticCategory.Error,\n            message: \"Calls to \'super\' are only valid inside a class.\",\n            code: 2089\n        },\n        Generic_type__0__requires_1_type_argument_s_: {\n            category: DiagnosticCategory.Error,\n            message: \"Generic type \'{0}\' requires {1} type argument(s).\",\n            code: 2090\n        },\n        Type_of_conditional_expression_cannot_be_determined__Best_common_type_could_not_be_found_between__0__and__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Type of conditional expression cannot be determined. Best common type could not be found between \'{0}\' and \'{1}\'.\",\n            code: 2091\n        },\n        Type_of_array_literal_cannot_be_determined__Best_common_type_could_not_be_found_for_array_elements: {\n            category: DiagnosticCategory.Error,\n            message: \"Type of array literal cannot be determined. Best common type could not be found for array elements.\",\n            code: 2092\n        },\n        Could_not_find_enclosing_symbol_for_dotted_name__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Could not find enclosing symbol for dotted name \'{0}\'.\",\n            code: 2093\n        },\n        The_property__0__does_not_exist_on_value_of_type__1__: {\n            category: DiagnosticCategory.Error,\n            message: \"The property \'{0}\' does not exist on value of type \'{1}\'.\",\n            code: 2094\n        },\n        Could_not_find_symbol__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Could not find symbol \'{0}\'.\",\n            code: 2095\n        },\n        _get__and__set__accessor_must_have_the_same_type: {\n            category: DiagnosticCategory.Error,\n            message: \"\'get\' and \'set\' accessor must have the same type.\",\n            code: 2096\n        },\n        _this__cannot_be_referenced_in_current_location: {\n            category: DiagnosticCategory.Error,\n            message: \"\'this\' cannot be referenced in current location.\",\n            code: 2097\n        },\n        Use_of_deprecated__bool__type__Use__boolean__instead: {\n            category: DiagnosticCategory.Warning,\n            message: \"Use of deprecated type \'bool\'. Use \'boolean\' instead.\",\n            code: 2098\n        },\n        Static_methods_cannot_reference_class_type_parameters: {\n            category: DiagnosticCategory.Error,\n            message: \"Static methods cannot reference class type parameters.\",\n            code: 2099\n        },\n        Class__0__is_recursively_referenced_as_a_base_type_of_itself: {\n            category: DiagnosticCategory.Error,\n            message: \"Class \'{0}\' is recursively referenced as a base type of itself.\",\n            code: 2100\n        },\n        Interface__0__is_recursively_referenced_as_a_base_type_of_itself: {\n            category: DiagnosticCategory.Error,\n            message: \"Interface \'{0}\' is recursively referenced as a base type of itself.\",\n            code: 2101\n        },\n\n        _super__property_access_is_permitted_only_in_a_constructor__instance_member_function__or_instance_member_accessor_of_a_derived_class: {\n            category: DiagnosticCategory.Error,\n            message: \"\'super\' property access is permitted only in a constructor, instance member function, or instance member accessor of a derived class.\",\n            code: 2102\n        },\n        _super__cannot_be_referenced_in_non_derived_classes: {\n            category: DiagnosticCategory.Error,\n            message: \"\'super\' cannot be referenced in non-derived classes.\",\n            code: 2103\n        },\n        A__super__call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_intialized_properties_or_has_parameter_properties: {\n            category: DiagnosticCategory.Error,\n            message: \"A \'super\' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties.\",\n            code: 2104\n        },\n        Constructors_for_derived_classes_must_contain_a__super__call: {\n            category: DiagnosticCategory.Error,\n            message: \"Constructors for derived classes must contain a \'super\' call.\",\n            code: 2105\n        },\n        Super_calls_are_not_permitted_outside_constructors_or_in_local_functions_inside_constructors: {\n            category: DiagnosticCategory.Error,\n            message: \"Super calls are not permitted outside constructors or in local functions inside constructors.\",\n            code: 2106\n        },\n        _0_1__is_inaccessible: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}.{1}\' is inaccessible.\",\n            code: 2107\n        },\n        _this__cannot_be_referenced_within_module_bodies: {\n            category: DiagnosticCategory.Error,\n            message: \"\'this\' cannot be referenced within module bodies.\",\n            code: 2108\n        },\n        _this__must_only_be_used_inside_a_function_or_script_context: {\n            category: DiagnosticCategory.Error,\n            message: \"\'this\' must only be used inside a function or script context.\",\n            code: 2109\n        },\n        Invalid__addition__expression___types_do_not_agree: {\n            category: DiagnosticCategory.Error,\n            message: \"Invalid \'+\' expression - types not known to support the addition operator.\",\n            code: 2111\n        },\n        The_right_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type: {\n            category: DiagnosticCategory.Error,\n            message: \"The right-hand side of an arithmetic operation must be of type \'any\', \'number\' or an enum type.\",\n            code: 2112\n        },\n        The_left_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type: {\n            category: DiagnosticCategory.Error,\n            message: \"The left-hand side of an arithmetic operation must be of type \'any\', \'number\' or an enum type.\",\n            code: 2113\n        },\n        The_type_of_a_unary_arithmetic_operation_operand_must_be_of_type__any____number__or_an_enum_type: {\n            category: DiagnosticCategory.Error,\n            message: \"The type of a unary arithmetic operation operand must be of type \'any\', \'number\' or an enum type.\",\n            code: 2114\n        },\n        Variable_declarations_for_for_in_expressions_cannot_contain_a_type_annotation: {\n            category: DiagnosticCategory.Error,\n            message: \"Variable declarations for for/in expressions cannot contain a type annotation.\",\n            code: 2115\n        },\n        Variable_declarations_for_for_in_expressions_must_be_of_types__string__or__any_: {\n            category: DiagnosticCategory.Error,\n            message: \"Variable declarations for for/in expressions must be of types \'string\' or \'any\'.\",\n            code: 2116\n        },\n        The_right_operand_of_a_for_in_expression_must_be_of_type__any____an_object_type_or_a_type_parameter: {\n            category: DiagnosticCategory.Error,\n            message: \"The right operand of a for/in expression must be of type \'any\', an object type or a type parameter.\",\n            code: 2117\n        },\n        The_left_hand_side_of_an__in__expression_must_be_of_types__string__or__any_: {\n            category: DiagnosticCategory.Error,\n            message: \"The left-hand side of an \'in\' expression must be of types \'string\' or \'any\'.\",\n            code: 2118\n        },\n        The_right_hand_side_of_an__in__expression_must_be_of_type__any___an_object_type_or_a_type_parameter: {\n            category: DiagnosticCategory.Error,\n            message: \"The right-hand side of an \'in\' expression must be of type \'any\', an object type or a type parameter.\",\n            code: 2119\n        },\n        The_left_hand_side_of_an__instanceOf__expression_must_be_of_type__any___an_object_type_or_a_type_parameter: {\n            category: DiagnosticCategory.Error,\n            message: \"The left-hand side of an \'instanceOf\' expression must be of type \'any\', an object type or a type parameter.\",\n            code: 2120\n        },\n        The_right_hand_side_of_an__instanceOf__expression_must_be_of_type__any__or_a_subtype_of_the__Function__interface_type: {\n            category: DiagnosticCategory.Error,\n            message: \"The right-hand side of an \'instanceOf\' expression must be of type \'any\' or a subtype of the \'Function\' interface type.\",\n            code: 2121\n        },\n        Setters_cannot_return_a_value: {\n            category: DiagnosticCategory.Error,\n            message: \"Setters cannot return a value.\",\n            code: 2122\n        },\n        Tried_to_set_variable_type_to_module_type__0__: {\n            category: DiagnosticCategory.Error,\n            message: \"Tried to set variable type to container type \'{0}\'.\",\n            code: 2123\n        },\n        Tried_to_set_variable_type_to_uninitialized_module_type__0__: {\n            category: DiagnosticCategory.Error,\n            message: \"Tried to set variable type to uninitialized module type \'{0}\'.\",\n            code: 2124\n        },\n        Function__0__declared_a_non_void_return_type__but_has_no_return_expression: {\n            category: DiagnosticCategory.Error,\n            message: \"Function {0} declared a non-void return type, but has no return expression.\",\n            code: 2125\n        },\n        Getters_must_return_a_value: {\n            category: DiagnosticCategory.Error,\n            message: \"Getters must return a value.\",\n            code: 2126\n        },\n        Getter_and_setter_accessors_do_not_agree_in_visibility: {\n            category: DiagnosticCategory.Error,\n            message: \"Getter and setter accessors do not agree in visibility.\",\n            code: 2127\n        },\n        Invalid_left_hand_side_of_assignment_expression: {\n            category: DiagnosticCategory.Error,\n            message: \"Invalid left-hand side of assignment expression.\",\n            code: 2130\n        },\n        Function_declared_a_non_void_return_type__but_has_no_return_expression: {\n            category: DiagnosticCategory.Error,\n            message: \"Function declared a non-void return type, but has no return expression.\",\n            code: 2131\n        },\n        Cannot_resolve_return_type_reference: {\n            category: DiagnosticCategory.Error,\n            message: \"Cannot resolve return type reference.\",\n            code: 2132\n        },\n        Constructors_cannot_have_a_return_type_of__void_: {\n            category: DiagnosticCategory.Error,\n            message: \"Constructors cannot have a return type of \'void\'.\",\n            code: 2133\n        },\n        Subsequent_variable_declarations_must_have_the_same_type___Variable__0__must_be_of_type__1___but_here_has_type___2_: {\n            category: DiagnosticCategory.Error,\n            message: \"Subsequent variable declarations must have the same type.  Variable \'{0}\' must be of type \'{1}\', but here has type \'{2}\'\",\n            code: 2134\n        },\n        All_symbols_within_a__with__block_will_be_resolved_to__any__: {\n            category: DiagnosticCategory.Error,\n            message: \"All symbols within a with block will be resolved to \'any\'.\",\n            code: 2135\n        },\n        Import_declarations_in_an_internal_module_cannot_reference_an_external_module: {\n            category: DiagnosticCategory.Error,\n            message: \"Import declarations in an internal module cannot reference an external module.\",\n            code: 2136\n        },\n        Class__0__declares_interface__1__but_does_not_implement_it__NL__2: {\n            category: DiagnosticCategory.Error,\n            message: \"Class {0} declares interface {1} but does not implement it:{NL}{2}\",\n            code: 2137\n        },\n        Class__0__declares_class__1__but_does_not_implement_it__NL__2: {\n            category: DiagnosticCategory.Error,\n            message: \"Class {0} declares class {1} as an implemented interface but does not implement it:{NL}{2}\",\n            code: 2138\n        },\n        The_operand_of_an_increment_or_decrement_operator_must_be_a_variable__property_or_indexer: {\n            category: DiagnosticCategory.Error,\n            message: \"The operand of an increment or decrement operator must be a variable, property or indexer.\",\n            code: 2139\n        },\n        _this__cannot_be_referenced_in_initializers_in_a_class_body: {\n            category: DiagnosticCategory.Error,\n            message: \"\'this\' cannot be referenced in initializers in a class body.\",\n            code: 2140\n        },\n        Class__0__cannot_extend_class__1__NL__2: {\n            category: DiagnosticCategory.Error,\n            message: \"Class \'{0}\' cannot extend class \'{1}\':{NL}{2}\",\n            code: 2141\n        },\n        Interface__0__cannot_extend_class__1__NL__2: {\n            category: DiagnosticCategory.Error,\n            message: \"Interface \'{0}\' cannot extend class \'{1}\':{NL}{2}\",\n            code: 2142\n        },\n        Interface__0__cannot_extend_interface__1__NL__2: {\n            category: DiagnosticCategory.Error,\n            message: \"Interface \'{0}\' cannot extend interface \'{1}\':{NL}{2}\",\n            code: 2143\n        },\n        Duplicate_overload_signature_for__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Duplicate overload signature for \'{0}\'.\",\n            code: 2144\n        },\n        Duplicate_constructor_overload_signature: {\n            category: DiagnosticCategory.Error,\n            message: \"Duplicate constructor overload signature.\",\n            code: 2145\n        },\n        Duplicate_overload_call_signature: {\n            category: DiagnosticCategory.Error,\n            message: \"Duplicate overload call signature.\",\n            code: 2146\n        },\n        Duplicate_overload_construct_signature: {\n            category: DiagnosticCategory.Error,\n            message: \"Duplicate overload construct signature.\",\n            code: 2147\n        },\n        Overload_signature_is_not_compatible_with_function_definition: {\n            category: DiagnosticCategory.Error,\n            message: \"Overload signature is not compatible with function definition.\",\n            code: 2148\n        },\n        Overload_signature_is_not_compatible_with_function_definition__NL__0: {\n            category: DiagnosticCategory.Error,\n            message: \"Overload signature is not compatible with function definition:{NL}{0}\",\n            code: 2149\n        },\n        Overload_signatures_must_all_be_public_or_private: {\n            category: DiagnosticCategory.Error,\n            message: \"Overload signatures must all be public or private.\",\n            code: 2150\n        },\n        Overload_signatures_must_all_be_exported_or_local: {\n            category: DiagnosticCategory.Error,\n            message: \"Overload signatures must all be exported or local.\",\n            code: 2151\n        },\n        Overload_signatures_must_all_be_ambient_or_non_ambient: {\n            category: DiagnosticCategory.Error,\n            message: \"Overload signatures must all be ambient or non-ambient.\",\n            code: 2152\n        },\n        Overload_signatures_must_all_be_optional_or_required: {\n            category: DiagnosticCategory.Error,\n            message: \"Overload signatures must all be optional or required.\",\n            code: 2153\n        },\n        Specialized_overload_signature_is_not_subtype_of_any_non_specialized_signature: {\n            category: DiagnosticCategory.Error,\n            message: \"Specialized overload signature is not subtype of any non-specialized signature.\",\n            code: 2154\n        },\n        _this__cannot_be_referenced_in_constructor_arguments: {\n            category: DiagnosticCategory.Error,\n            message: \"\'this\' cannot be referenced in constructor arguments.\",\n            code: 2155\n        },\n        Static_member_cannot_be_accessed_off_an_instance_variable: {\n            category: DiagnosticCategory.Error,\n            message: \"Static member cannot be accessed off an instance variable.\",\n            code: 2156\n        },\n        Instance_member_cannot_be_accessed_off_a_class: {\n            category: DiagnosticCategory.Error,\n            message: \"Instance member cannot be accessed off a class.\",\n            code: 2157\n        },\n        Untyped_function_calls_may_not_accept_type_arguments: {\n            category: DiagnosticCategory.Error,\n            message: \"Untyped function calls may not accept type arguments.\",\n            code: 2158\n        },\n        Non_generic_functions_may_not_accept_type_arguments: {\n            category: DiagnosticCategory.Error,\n            message: \"Non-generic functions may not accept type arguments.\",\n            code: 2159\n        },\n        A_generic_type_may_not_reference_itself_with_its_own_type_parameters: {\n            category: DiagnosticCategory.Error,\n            message: \"A generic type may not reference itself with its own type parameters.\",\n            code: 2160\n        },\n        Value_of_type__0__is_not_callable__Did_you_mean_to_include__new___: {\n            category: DiagnosticCategory.Error,\n            message: \"Value of type \'{0}\' is not callable. Did you mean to include \'new\'?\",\n            code: 2161\n        },\n        Rest_parameters_must_be_array_types: {\n            category: DiagnosticCategory.Error,\n            message: \"Rest parameters must be array types.\",\n            code: 2162\n        },\n        Overload_signature_implementation_cannot_use_specialized_type: {\n            category: DiagnosticCategory.Error,\n            message: \"Overload signature implementation cannot use specialized type.\",\n            code: 2163\n        },\n\n        Export_assignments_may_only_be_used_in_External_modules: {\n            category: DiagnosticCategory.Error,\n            message: \"Export assignments may only be used at the top-level of external modules\",\n            code: 2164\n        },\n\n        Export_assignments_may_only_be_made_with_acceptable_kinds: {\n            category: DiagnosticCategory.Error,\n            message: \"Export assignments may only be made with variables, functions, classes, interfaces, enums and internal modules\",\n            code: 2165\n        },\n\n\n\n\n\n        Type__0__is_missing_property__1__from_type__2_: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Type \'{0}\' is missing property \'{1}\' from type \'{2}\'.\",\n            code: 4000\n        },\n        Types_of_property__0__of_types__1__and__2__are_incompatible: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Types of property \'{0}\' of types \'{1}\' and \'{2}\' are incompatible.\",\n            code: 4001\n        },\n        Types_of_property__0__of_types__1__and__2__are_incompatible__NL__3: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Types of property \'{0}\' of types \'{1}\' and \'{2}\' are incompatible:{NL}{3}\",\n            code: 4002\n        },\n        Property__0__defined_as_private_in_type__1__is_defined_as_public_in_type__2_: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Property \'{0}\' defined as private in type \'{1}\' is defined as public in type \'{2}\'.\",\n            code: 4003\n        },\n        Property__0__defined_as_public_in_type__1__is_defined_as_private_in_type__2_: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Property \'{0}\' defined as public in type \'{1}\' is defined as private in type \'{2}\'.\",\n            code: 4004\n        },\n        Types__0__and__1__define_property__2__as_private: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Types \'{0}\' and \'{1}\' define property \'{2}\' as private.\",\n            code: 4005\n        },\n        Call_signatures_of_types__0__and__1__are_incompatible: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Call signatures of types \'{0}\' and \'{1}\' are incompatible.\",\n            code: 4006\n        },\n        Call_signatures_of_types__0__and__1__are_incompatible__NL__2: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Call signatures of types \'{0}\' and \'{1}\' are incompatible:{NL}{2}\",\n            code: 4007\n        },\n        Type__0__requires_a_call_signature__but_Type__1__lacks_one: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Type \'{0}\' requires a call signature, but type \'{1}\' lacks one.\",\n            code: 4008\n        },\n        Construct_signatures_of_types__0__and__1__are_incompatible: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Construct signatures of types \'{0}\' and \'{1}\' are incompatible.\",\n            code: 4009\n        },\n        Construct_signatures_of_types__0__and__1__are_incompatible__NL__2: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Construct signatures of types \'{0}\' and \'{1}\' are incompatible:{NL}{2}\",\n            code: 40010\n        },\n        Type__0__requires_a_construct_signature__but_Type__1__lacks_one: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Type \'{0}\' requires a construct signature, but type \'{1}\' lacks one.\",\n            code: 4011\n        },\n        Index_signatures_of_types__0__and__1__are_incompatible: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Index signatures of types \'{0}\' and \'{1}\' are incompatible.\",\n            code: 4012\n        },\n        Index_signatures_of_types__0__and__1__are_incompatible__NL__2: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Index signatures of types \'{0}\' and \'{1}\' are incompatible:{NL}{2}\",\n            code: 4013\n        },\n        Call_signature_expects__0__or_fewer_parameters: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Call signature expects {0} or fewer parameters.\",\n            code: 4014\n        },\n        Could_not_apply_type__0__to_argument__1__which_is_of_type__2_: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Could not apply type\'{0}\' to argument {1} which is of type \'{2}\'.\",\n            code: 4015\n        },\n        Class__0__defines_instance_member_accessor__1___but_extended_class__2__defines_it_as_instance_member_function: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Class \'{0}\' defines instance member accessor \'{1}\', but extended class \'{2}\' defines it as instance member function.\",\n            code: 4016\n        },\n        Class__0__defines_instance_member_property__1___but_extended_class__2__defines_it_as_instance_member_function: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Class \'{0}\' defines instance member property \'{1}\', but extended class \'{2}\' defines it as instance member function.\",\n            code: 4017\n        },\n        Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_accessor: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Class \'{0}\' defines instance member function \'{1}\', but extended class \'{2}\' defines it as instance member accessor.\",\n            code: 4018\n        },\n        Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_property: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Class \'{0}\' defines instance member function \'{1}\', but extended class \'{2}\' defines it as instance member property.\",\n            code: 4019\n        },\n        Types_of_static_property__0__of_class__1__and_class__2__are_incompatible: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Types of static property \'{0}\' of class \'{1}\' and class \'{2}\' are incompatible.\",\n            code: 4020\n        },\n        Types_of_static_property__0__of_class__1__and_class__2__are_incompatible__NL__3: {\n            category: DiagnosticCategory.NoPrefix,\n            message: \"Types of static property \'{0}\' of class \'{1}\' and class \'{2}\' are incompatible:{NL}{3}\",\n            code: 4021\n        },\n\n\n\n\n\n        // Batch compiler errors start 500\n        Current_host_does_not_support__w_atch_option: {\n            category: DiagnosticCategory.Error,\n            message: \"Current host does not support -w[atch] option.\",\n            code: 5001\n        },\n        ECMAScript_target_version__0__not_supported___Using_default__1__code_generation: {\n            category: DiagnosticCategory.Warning,\n            message: \"ECMAScript target version \'{0}\' not supported.  Using default \'{1}\' code generation.\",\n            code: 5002\n        },\n        Module_code_generation__0__not_supported___Using_default__1__code_generation: {\n            category: DiagnosticCategory.Warning,\n            message: \"Module code generation \'{0}\' not supported.  Using default \'{1}\' code generation.\",\n            code: 5003\n        },\n        Could_not_find_file___0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Could not find file: \'{0}\'.\",\n            code: 5004\n        },\n        Unknown_extension_for_file___0__Only__ts_and_d_ts_extensions_are_allowed: {\n            category: DiagnosticCategory.Error,\n            message: \"Unknown extension for file: \'{0}\'. Only .ts and .d.ts extensions are allowed.\",\n            code: 5005\n        },\n        A_file_cannot_have_a_reference_itself: {\n            category: DiagnosticCategory.Error,\n            message: \"A file cannot have a reference itself.\",\n            code: 5006\n        },\n        Cannot_resolve_referenced_file___0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Cannot resolve referenced file: \'{0}\'.\",\n            code: 5007\n        },\n        Cannot_resolve_imported_file___0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Cannot resolve imported file: \'{0}\'.\",\n            code: 5008\n        },\n        Cannot_find_the_common_subdirectory_path_for_the_input_files: {\n            category: DiagnosticCategory.Error,\n            message: \"Cannot find the common subdirectory path for the input files\",\n            code: 5009\n        },\n        Cannot_compile_dynamic_modules_when_emitting_into_single_file: {\n            category: DiagnosticCategory.Error,\n            message: \"Cannot compile dynamic modules when emitting into single file\",\n            code: 5010\n        },\n        Emit_Error__0: {\n            category: DiagnosticCategory.Error,\n            message: \"Emit Error: {0}.\",\n            code: 5011\n        },\n\n    };\n\n    var seenCodes = [];\n    for (var name in diagnosticMessages) {\n        if (diagnosticMessages.hasOwnProperty(name)) {\n            var diagnosticMessage = <DiagnosticInfo>diagnosticMessages[name];\n            var value = seenCodes[diagnosticMessage.code];\n            if (value) {\n                throw new Error(\"Duplicate diagnostic code: \" + diagnosticMessage.code);\n            }\n\n            seenCodes[diagnosticMessage.code] = diagnosticMessage;\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class Errors {\n        public static argument(argument: string, message?: string): Error {\n            return new Error(\"Invalid argument: \" + argument + \".\"  + (message ? (\" \" + message) : \"\"));\n        }\n\n        public static argumentOutOfRange(argument: string): Error {\n            return new Error(\"Argument out of range: \" + argument + \".\");\n        }\n\n        public static argumentNull(argument: string): Error {\n            return new Error(\"Argument null: \" + argument + \".\");\n        }\n\n        public static abstract(): Error {\n            return new Error(\"Operation not implemented properly by subclass.\");\n        }\n\n        public static notYetImplemented(): Error {\n            return new Error(\"Not yet implemented.\");\n        }\n\n        public static invalidOperation(message?: string): Error {\n            return new Error(message ? (\"Invalid operation: \" + message) :\"Invalid operation.\");\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class Hash {\n        // This table uses FNV1a as a string hash\n        private static FNV_BASE = 2166136261;\n        private static FNV_PRIME = 16777619;\n\n        private static computeFnv1aCharArrayHashCode(text: number[], start: number, len: number): number {\n            var hashCode = Hash.FNV_BASE;\n            var end = start + len;\n\n            for (var i = start; i < end; i++) {\n                hashCode = (hashCode ^ text[i]) * Hash.FNV_PRIME;\n            }\n\n            return hashCode;\n        }\n\n        public static computeSimple31BitCharArrayHashCode(key: number[], start: number, len: number): number {\n            // Start with an int.\n            var hash = 0;\n\n            for (var i = 0; i < len; i++) {\n                var ch = key[start + i];\n\n                // Left shift keeps things as a 32bit int.  And we\'re only doing two adds.  Chakra and\n                // V8 recognize this as not needing to go past the 53 bits needed for the float \n                // mantissa.  Or\'ing with 0 keeps this 32 bits.\n                hash = (((hash << 5) + hash) + ch) | 0;\n            }\n\n            // Ensure we fit in 31 bits.  That way if/when this gets stored, it won\'t require any heap\n            // allocation.\n            return hash & 0x7FFFFFFF;\n        }\n\n        public static computeSimple31BitStringHashCode(key: string): number {\n            // Start with an int.\n            var hash = 0;\n\n            var start = 0;\n            var len = key.length;\n\n            for (var i = 0; i < len; i++) {\n                var ch = key.charCodeAt(start + i);\n\n                // Left shift keeps things as a 32bit int.  And we\'re only doing two adds.  Chakra and\n                // V8 recognize this as not needing to go past the 53 bits needed for the float \n                // mantissa.  Or\'ing with 0 keeps this 32 bits.\n                hash = (((hash << 5) + hash) + ch) | 0;\n            }\n\n            // Ensure we fit in 31 bits.  That way if/when this gets stored, it won\'t require any heap\n            // allocation.\n            return hash & 0x7FFFFFFF;\n        }\n\n        public static computeMurmur2CharArrayHashCode(key: number[], start: number, len: number): number {\n            // \'m\' and \'r\' are mixing constants generated offline.\n            // They\'re not really \'magic\', they just happen to work well.\n            var m = 0x5bd1e995;\n            var r = 24;\n\n            // Initialize the hash to a \'random\' value\n            var numberOfCharsLeft = len;\n            var h = (0 ^ numberOfCharsLeft);\n\n            // Mix 4 bytes at a time into the hash.  NOTE: 4 bytes is two chars, so we iterate\n            // through the string two chars at a time.\n            var index = start;\n            while (numberOfCharsLeft >= 2) {\n                var c1 = key[index];\n                var c2 = key[index + 1];\n\n                var k = c1 | (c2 << 16);\n\n                k *= m;\n                k ^= k >> r;\n                k *= m;\n\n                h *= m;\n                h ^= k;\n\n                index += 2;\n                numberOfCharsLeft -= 2;\n            }\n\n            // Handle the last char (or 2 bytes) if they exist.  This happens if the original string had\n            // odd length.\n            if (numberOfCharsLeft === 1) {\n                h ^= key[index];\n                h *= m;\n            }\n\n            // Do a few final mixes of the hash to ensure the last few bytes are well-incorporated.\n\n            h ^= h >> 13;\n            h *= m;\n            h ^= h >> 15;\n\n            return h;\n        }\n\n        public static computeMurmur2StringHashCode(key: string): number {\n            // \'m\' and \'r\' are mixing constants generated offline.\n            // They\'re not really \'magic\', they just happen to work well.\n            var m = 0x5bd1e995;\n            var r = 24;\n\n            var start = 0;\n            var len = key.length;\n            var numberOfCharsLeft = len;\n\n            // Initialize the hash to a \'random\' value.\n            var h = (0 ^ numberOfCharsLeft);\n\n            // Mix 4 bytes at a time into the hash.  NOTE: 4 bytes is two chars, so we iterate\n            // through the string two chars at a time.\n            var index = start;\n            while (numberOfCharsLeft >= 2) {\n                var c1 = key.charCodeAt(index);\n                var c2 = key.charCodeAt(index + 1);\n\n                var k = c1 | (c2 << 16);\n\n                k *= m;\n                k ^= k >> r;\n                k *= m;\n\n                h *= m;\n                h ^= k;\n\n                index += 2;\n                numberOfCharsLeft -= 2;\n            }\n\n            // Handle the last char (or 2 bytes) if they exist.  This happens if the original string had\n            // odd length.\n            if (numberOfCharsLeft === 1) {\n                h ^= key.charCodeAt(index);\n                h *= m;\n            }\n\n            // Do a few final mixes of the hash to ensure the last few bytes are well-incorporated.\n\n            h ^= h >> 13;\n            h *= m;\n            h ^= h >> 15;\n\n            return h;\n        }\n\n        private static primes =\n            [3, 7, 11, 17, 23, 29, 37, 47, 59, 71, 89, 107, 131, 163, 197, 239, 293, 353, 431, 521,\n              631, 761, 919, 1103, 1327, 1597, 1931, 2333, 2801, 3371, 4049, 4861, 5839, 7013, 8419,\n              10103, 12143, 14591, 17519, 21023, 25229, 30293, 36353, 43627, 52361, 62851, 75431,\n              90523, 108631, 130363, 156437, 187751, 225307, 270371, 324449, 389357, 467237, 560689,\n              672827, 807403, 968897, 1162687, 1395263, 1674319, 2009191, 2411033, 2893249, 3471899,\n              4166287, 4999559, 5999471, 7199369];\n\n        public static getPrime(min: number): number {\n            for (var i = 0; i < Hash.primes.length; i++) {\n                var num = Hash.primes[i];\n                if (num >= min) {\n                    return num;\n                }\n            }\n\n            throw Errors.notYetImplemented();\n        }\n\n        public static expandPrime(oldSize: number): number {\n            var num = oldSize << 1;\n            if (num > 2146435069 && 2146435069 > oldSize) {\n                // NOTE: 2146435069 fits in 31 bits.\n                return 2146435069;\n            }\n            return Hash.getPrime(num);\n        }\n\n        public static combine(value: number, currentHash: number): number {\n            // Ensure we stay within 31 bits.\n            return (((currentHash << 5) + currentHash) + value) & 0x7FFFFFFF;\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript.Collections {\n    export var DefaultHashTableCapacity = 256;\n\n    class HashTableEntry {\n        constructor(public Key: any,\n                    public Value: any,\n                    public HashCode: number,\n                    public Next: HashTableEntry) {\n        }\n    }\n\n    export class HashTable {\n        // TODO: figure out why the type checker dosn\'t like \"HashTableEntry[]\" here.\n        private entries: HashTableEntry[] = [];\n        private count: number = 0;\n\n        constructor(capacity: number,\n                    private hash: (k: any) => number,\n                    private equals: (k1: any, k2: any) => boolean) {\n            var size = Hash.getPrime(capacity);\n            this.hash = hash;\n            this.equals = equals;\n            this.entries = ArrayUtilities.createArray(size, null);\n        }\n\n        // Maps \'key\' to \'value\' in this table.  Does not throw if \'key\' is already in the table.\n        public set (key: any, value: any) {\n            this.addOrSet(key, value, /*throwOnExistingEntry:*/ false);\n        }\n\n        // Maps \'key\' to \'value\' in this table.  Throws if \'key\' is already in the table.\n        public add(key: any, value: any) {\n            this.addOrSet(key, value, /*throwOnExistingEntry:*/ true);\n        }\n\n        public containsKey(key: any): boolean {\n            var hashCode = this.computeHashCode(key);\n            var entry = this.findEntry(key, hashCode);\n            return entry !== null;\n        }\n\n        public get (key: any): any {\n            var hashCode = this.computeHashCode(key);\n            var entry = this.findEntry(key, hashCode);\n\n            return entry === null ? null : entry.Value;\n        }\n\n        private computeHashCode(key: any): number {\n            var hashCode = this.hash === null\n                ? key.hashCode()\n                : this.hash(key);\n\n            hashCode = hashCode & 0x7FFFFFFF;\n            Debug.assert(hashCode > 0);\n\n            return hashCode;\n        }\n\n        private addOrSet(key: any, value: any, throwOnExistingEntry: boolean) {\n            // Compute the hash for this key.  Also ensure that it\'s non negative.\n            var hashCode = this.computeHashCode(key);\n\n            var entry = this.findEntry(key, hashCode);\n            if (entry !== null) {\n                if (throwOnExistingEntry) {\n                    throw Errors.argument(\'key\', \'Key was already in table.\');\n                }\n\n                entry.Key = key;\n                entry.Value = value;\n                return;\n            }\n\n            return this.addEntry(key, value, hashCode);\n        }\n\n        private findEntry(key: any, hashCode: number) /*: HashTableEntry*/ {\n            for (var e = this.entries[hashCode % this.entries.length]; e !== null; e = e.Next) {\n                if (e.HashCode === hashCode) {\n                    var equals = this.equals === null\n                        ? key === e.Key\n                        : this.equals(key, e.Key);\n\n                    if (equals) {\n                        return e;\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        private addEntry(key: any, value: any, hashCode: number): any {\n            var index = hashCode % this.entries.length;\n\n            var e = new HashTableEntry(key, value, hashCode, this.entries[index]);\n\n            this.entries[index] = e;\n\n            // Right now we grow when we get a load factor of 1.  We\'re basically guaranteed to have had\n            // a collision at that point.  Should we potentially change this to a lower load factor?  It\n            // will require more space, but provide us with faster lookup.  We could potentially make this\n            // configurable as well.\n            if (this.count === this.entries.length) {\n                this.grow();\n            }\n\n            this.count++;\n            return e.Key;\n        }\n\n        //private dumpStats() {\n        //    var standardOut = Environment.standardOut;\n\n        //    standardOut.WriteLine(\"----------------------\")\n        //    standardOut.WriteLine(\"Hash table stats\");\n        //    standardOut.WriteLine(\"Count            : \" + this.count);\n        //    standardOut.WriteLine(\"Entries Length   : \" + this.entries.length);\n\n        //    var occupiedSlots = 0;\n        //    for (var i = 0; i < this.entries.length; i++) {\n        //        if (this.entries[i] !== null) {\n        //            occupiedSlots++;\n        //        }\n        //    }\n\n        //    standardOut.WriteLine(\"Occupied slots   : \" + occupiedSlots);\n        //    standardOut.WriteLine(\"Avg Length/Slot  : \" + (this.count / occupiedSlots));\n        //    standardOut.WriteLine(\"----------------------\");\n        //}\n\n        private grow(): void {\n            // this.dumpStats();\n\n            var newSize = Hash.expandPrime(this.entries.length);\n\n            var oldEntries = this.entries;\n            var newEntries: HashTableEntry[] = ArrayUtilities.createArray(newSize, null);\n\n            this.entries = newEntries;\n\n            for (var i = 0; i < oldEntries.length; i++) {\n                var e = oldEntries[i];\n\n                while (e !== null) {\n                    var newIndex = e.HashCode % newSize;\n                    var tmp = e.Next;\n                    e.Next = newEntries[newIndex];\n                    newEntries[newIndex] = e;\n                    e = tmp;\n                }\n            }\n\n            // this.dumpStats();\n        }\n    }\n\n    export function createHashTable(capacity: number = DefaultHashTableCapacity,\n        hash: (k: any) => number = null,\n        equals: (k1: any, k2: any) => boolean = null): HashTable {\n        return new HashTable(capacity, hash, equals);\n    }\n\n    var currentHashCode = 1;\n    export function identityHashCode(value: any): number {\n        if (value.__hash === undefined) {\n            value.__hash = currentHashCode;\n            currentHashCode++;\n        }\n\n        return value.__hash;\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface IDiagnostic {\n        fileName(): string;\n        start(): number;\n        length(): number;\n        diagnosticCode(): DiagnosticCode;\n        text(): string;\n        message(): string;\n    }\n\n    export class Diagnostic implements IDiagnostic {\n        private _fileName: string;\n        private _start: number;\n        private _originalStart: number;\n        private _length: number;\n        private _diagnosticCode: DiagnosticCode;\n        private _arguments: any[];\n\n        constructor(fileName: string, start: number, length: number, diagnosticCode: DiagnosticCode, arguments: any[] = null) {\n            this._diagnosticCode = diagnosticCode;\n            this._arguments = (arguments && arguments.length > 0) ? arguments : null;\n            this._fileName = fileName;\n            this._originalStart = this._start = start;\n            this._length = length;\n        }\n\n        public toJSON(key) {\n            var result: any = {};\n            result.start = this.start();\n            result.length = this.length();\n\n            result.diagnosticCode = DiagnosticCode[this.diagnosticCode()];\n\n            var arguments = (<any>this).arguments();\n            if (arguments && arguments.length > 0) {\n                result.arguments = arguments;\n            }\n\n            return result;\n        }\n\n        public fileName(): string {\n            return this._fileName;\n        }\n\n        public start(): number {\n            return this._start;\n        }\n\n        public length(): number {\n            return this._length;\n        }\n\n        public diagnosticCode(): DiagnosticCode {\n            return this._diagnosticCode;\n        }\n\n        public arguments(): any[] {\n            return this._arguments;\n        }\n\n        /// <summary>\n        /// Get the text of the message in the given language.\n        /// </summary>\n        public text(): string {\n            return TypeScript.getDiagnosticText(this._diagnosticCode, this._arguments);\n        }\n\n        /// <summary>\n        /// Get the text of the message including the error code in the given language.\n        /// </summary>\n        public message(): string {\n            return TypeScript.getDiagnosticMessage(this._diagnosticCode, this._arguments);\n        }\n\n        public adjustOffset(pos: number) {\n            this._start = this._originalStart + pos;\n        }\n\n        /// <summary>\n        /// If a derived class has additional information about other referenced symbols, it can\n        /// expose the locations of those symbols in a general way, so they can be reported along\n        /// with the error.\n        /// </summary>\n        public additionalLocations(): Location[] {\n            return [];\n        }\n\n        public static equals(diagnostic1: Diagnostic, diagnostic2: Diagnostic): boolean {\n            return diagnostic1._fileName === diagnostic2._fileName &&\n                diagnostic1._start === diagnostic2._start &&\n                diagnostic1._length === diagnostic2._length &&\n                diagnostic1._diagnosticCode === diagnostic2._diagnosticCode &&\n                ArrayUtilities.sequenceEquals(diagnostic1._arguments, diagnostic2._arguments, (v1, v2) => v1 === v2);\n        }\n    }\n\n    function getLargestIndex(diagnostic: string): number {\n        var largest = -1;\n        var stringComponents = diagnostic.split(\"_\");\n\n        for (var i = 0; i < stringComponents.length; i++) {\n            var val = parseInt(stringComponents[i]);\n            if (!isNaN(val) && val > largest) {\n                largest = val;\n            }\n        }\n\n        return largest;\n    }\n\n    export function getDiagnosticInfoFromCode(diagnosticCode: DiagnosticCode): DiagnosticInfo {\n        var diagnosticName: string = DiagnosticCode[diagnosticCode];\n        return <DiagnosticInfo>diagnosticMessages[diagnosticName];\n    }\n\n    export function getDiagnosticText(diagnosticCode: DiagnosticCode, args: any[]): string {\n        var diagnosticName: string = DiagnosticCode[diagnosticCode];\n\n        var diagnostic = <DiagnosticInfo>diagnosticMessages[diagnosticName];\n\n        var actualCount = args ? args.length : 0;\n        if (!diagnostic) {\n            throw new Error(\"Invalid diagnostic\");\n        }\n        else {\n            // We have a string like \"foo_0_bar_1\".  We want to find the largest integer there.\n            // (i.e.\'1\').  We then need one more arg than that to be correct.\n            var expectedCount = 1 + getLargestIndex(diagnosticName);\n\n            if (expectedCount !== actualCount) {\n                throw new Error(\"Expected \" + expectedCount + \" arguments to diagnostic, got \" + actualCount + \" instead\");\n            }\n        }\n\n        var diagnosticMessageText = diagnostic.message.replace(/{({(\\d+)})?TB}/g, function (match, p1, num) {\n            var tabChar = \"\\t\";\n            var result = tabChar;\n            if (num && args[num]) {\n                for (var i = 1; i < <number>args[num]; i++) {\n                    result += tabChar;\n                }\n            }\n\n            return result;\n        } );\n\n\n        diagnosticMessageText = diagnosticMessageText.replace(/{(\\d+)}/g, function (match, num) {\n            return typeof args[num] !== \'undefined\'\n                ? args[num]\n                : match;\n        } );\n\n        diagnosticMessageText = diagnosticMessageText.replace(/{(NL)}/g, function (match) {\n            return \"\\r\\n\";\n        } );\n\n        return diagnosticMessageText;\n    }\n\n    export function getDiagnosticMessage(diagnosticCode: DiagnosticCode, args: any[]): string {\n        var diagnostic = getDiagnosticInfoFromCode(diagnosticCode);\n        var diagnosticMessageText = getDiagnosticText(diagnosticCode, args);\n\n        var message: string;\n        if (diagnostic.category === DiagnosticCategory.Error) {\n            message = getDiagnosticText(DiagnosticCode.error_TS_0__1, [diagnostic.code, diagnosticMessageText]);\n        } else if (diagnostic.category === DiagnosticCategory.Warning) {\n            message = getDiagnosticText(DiagnosticCode.warning_TS_0__1, [diagnostic.code, diagnosticMessageText]);\n        } else {\n            message = diagnosticMessageText;\n        }\n\n        return message;\n    }\n}\ndeclare class Enumerator {\n    public atEnd(): boolean;\n    public moveNext();\n    public item(): any;\n    constructor (o: any);\n}\ndeclare module process {\n    export var argv: string[];\n    export var platform: string;\n    export function on(event: string, handler: (any) => void ): void;\n    export module stdout {\n        export function write(str: string);\n    }\n    export module stderr {\n        export function write(str: string);\n    }\n    export module mainModule {\n        export var filename: string;\n    }\n    export function exit(exitCode?: number);\n}\n///<reference path=\'references.ts\' />\n///<reference path=\'..\\enumerator.ts\' />\n///<reference path=\'..\\process.ts\' />\n\ninterface IEnvironment {\n    readFile(path: string, useUTF8?: boolean): string;\n    writeFile(path: string, contents: string, useUTF8?: boolean): void;\n    deleteFile(path: string): void;\n    fileExists(path: string): boolean;\n    directoryExists(path: string): boolean;\n    listFiles(path: string, re?: RegExp, options?: { recursive?: boolean; }): string[];\n\n    arguments: string[];\n    standardOut: ITextWriter;\n\n    currentDirectory(): string;\n}\n\nvar Environment = (function () {\n    // Create an IO object for use inside WindowsScriptHost hosts\n    // Depends on WSCript and FileSystemObject\n    function getWindowsScriptHostEnvironment(): IEnvironment {\n        try {\n            var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n        } catch (e) {\n            return null;\n        }\n\n        var streamObjectPool = [];\n\n        function getStreamObject(): any {\n            if (streamObjectPool.length > 0) {\n                return streamObjectPool.pop();\n            } else {\n                return new ActiveXObject(\"ADODB.Stream\");\n            }\n        }\n\n        function releaseStreamObject(obj: any) {\n            streamObjectPool.push(obj);\n        }\n\n        var args = [];\n        for (var i = 0; i < WScript.Arguments.length; i++) {\n            args[i] = WScript.Arguments.Item(i);\n        }\n\n        return {\n            currentDirectory: (): string => {\n                return (<any>WScript).CreateObject(\"WScript.Shell\").CurrentDirectory;\n            },\n\n            readFile: function (path, useUTF8: boolean = false) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Open();\n                    streamObj.Type = 2; // Text data\n                    streamObj.Charset = \'x-ansi\'; // Assume we are reading ansi text\n                    streamObj.LoadFromFile(path);\n                    var bomChar = streamObj.ReadText(2); // Read the BOM char\n                    streamObj.Position = 0; // Position has to be at 0 before changing the encoding\n                    if ((bomChar.charCodeAt(0) === 0xFE && bomChar.charCodeAt(1) === 0xFF) ||\n                        (bomChar.charCodeAt(0) === 0xFF && bomChar.charCodeAt(1) === 0xFE)) {\n                        streamObj.Charset = \'unicode\';\n                    } else if (bomChar.charCodeAt(0) === 0xEF && bomChar.charCodeAt(1) === 0xBB) {\n                        streamObj.Charset = \'utf-8\';\n                    }\n                    else {\n                        streamObj.Charset = useUTF8 ? \'utf-8\' : \'x-ansi\';\n                    }\n\n                // Read the whole file\n                    var str = streamObj.ReadText(-1 /* read from the current position to EOS */);\n                    streamObj.Close();\n                    releaseStreamObject(streamObj);\n                    return <string>str;\n                }\n                catch (err) {\n                    throw new Error(\"Error reading file \\\"\" + path + \"\\\": \" + err.message);\n                }\n            },\n\n            writeFile: function (path, contents, useUTF8: boolean = false) {\n                var file = this.createFile(path, useUTF8);\n                file.Write(contents);\n                file.Close();\n            },\n\n            fileExists: function (path: string): boolean {\n                return fso.FileExists(path);\n            },\n\n            deleteFile: function (path: string): void {\n                if (fso.FileExists(path)) {\n                    fso.DeleteFile(path, true); // true: delete read-only files\n                }\n            },\n\n            directoryExists: function (path) {\n                return <boolean>fso.FolderExists(path);\n            },\n\n            listFiles: function (path, spec?, options?) {\n                options = options || <{ recursive?: boolean; }>{};\n                function filesInFolder(folder, root): string[] {\n                    var paths = [];\n                    var fc: Enumerator;\n\n                    if (options.recursive) {\n                        fc = new Enumerator(folder.subfolders);\n\n                        for (; !fc.atEnd() ; fc.moveNext()) {\n                            paths = paths.concat(filesInFolder(fc.item(), root + \"\\\\\" + fc.item().Name));\n                        }\n                    }\n\n                    fc = new Enumerator(folder.files);\n\n                    for (; !fc.atEnd() ; fc.moveNext()) {\n                        if (!spec || fc.item().Name.match(spec)) {\n                            paths.push(root + \"\\\\\" + fc.item().Name);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                var folder = fso.GetFolder(path);\n                var paths = [];\n\n                return filesInFolder(folder, path);\n            },\n\n            createFile: function (path, useUTF8: boolean = false) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Charset = useUTF8 ? \'utf-8\' : \'x-ansi\';\n                    streamObj.Open();\n                    return {\n                        Write: function (str) { streamObj.WriteText(str, 0); },\n                        WriteLine: function (str) { streamObj.WriteText(str, 1); },\n                        Close: function () {\n                            streamObj.SaveToFile(path, 2);\n                            streamObj.Close();\n                            releaseStreamObject(streamObj);\n                        }\n                    };\n                } catch (ex) {\n                    WScript.StdErr.WriteLine(\"Couldn\'t write to file \'\" + path + \"\'\");\n                    throw ex;\n                }\n            },\n\n            arguments: <string[]>args,\n\n            standardOut: WScript.StdOut,\n        }\n    };\n\n    function getNodeEnvironment(): IEnvironment {\n        var _fs = require(\'fs\');\n        var _path = require(\'path\');\n        var _module = require(\'module\');\n\n        return {\n            currentDirectory: (): string => {\n                return (<any>process).cwd();\n            },\n\n            readFile: function (file: string, useUTF8?: boolean) {\n                var buffer = _fs.readFileSync(file);\n                switch (buffer[0]) {\n                    case 0xFE:\n                        if (buffer[1] === 0xFF) {\n                            // utf16-be. Reading the buffer as big endian is not supported, so convert it to \n                            // Little Endian first\n                            var i = 0;\n                            while ((i + 1) < buffer.length) {\n                                var temp = buffer[i]\n                                buffer[i] = buffer[i + 1];\n                                buffer[i + 1] = temp;\n                                i += 2;\n                            }\n                            return buffer.toString(\"ucs2\", 2);\n                        }\n                        break;\n                    case 0xFF:\n                        if (buffer[1] === 0xFE) {\n                            // utf16-le \n                            return buffer.toString(\"ucs2\", 2);\n                        }\n                        break;\n                    case 0xEF:\n                        if (buffer[1] === 0xBB) {\n                            // utf-8\n                            return buffer.toString(\"utf8\", 3);\n                        }\n                }\n\n                // Default behaviour\n                return useUTF8 ? buffer.toString(\"utf8\", 0) : buffer.toString();\n            },\n\n            writeFile: function (path: string, contents: string, useUTF?: boolean) {\n                if (useUTF) {\n                    _fs.writeFileSync(path, contents, \"utf8\");\n                }\n                else {\n                    _fs.writeFileSync(path, contents);\n                }\n            },\n            \n            fileExists: function(path): boolean {\n                return _fs.existsSync(path);\n            },\n\n            deleteFile: function(path) {\n                try {\n                    _fs.unlinkSync(path);\n                } catch (e) {\n                }\n            },\n            \n            directoryExists: function(path: string): boolean {\n                return _fs.existsSync(path) && _fs.statSync(path).isDirectory();\n            },\n\n            listFiles: function dir(path, spec?, options?) {\n                options = options || <{ recursive?: boolean; }>{};\n\n                function filesInFolder(folder: string): string[]{\n                    var paths = [];\n\n                    var files = _fs.readdirSync(folder);\n                    for (var i = 0; i < files.length; i++) {\n                        var stat = _fs.statSync(folder + \"\\\\\" + files[i]);\n                        if (options.recursive && stat.isDirectory()) {\n                            paths = paths.concat(filesInFolder(folder + \"\\\\\" + files[i]));\n                        } else if (stat.isFile() && (!spec || files[i].match(spec))) {\n                            paths.push(folder + \"\\\\\" + files[i]);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                return filesInFolder(path);\n            },\n\n            createFile: function(path, useUTF8?) {\n                function mkdirRecursiveSync(path) {\n                    var stats = _fs.statSync(path);\n                    if (stats.isFile()) {\n                        throw \"\\\"\" + path + \"\\\" exists but isn\'t a directory.\";\n                    } else if (stats.isDirectory()) {\n                        return;\n                    } else {\n                        mkdirRecursiveSync(_path.dirname(path));\n                        _fs.mkdirSync(path, 0775);\n                    }\n                }\n                mkdirRecursiveSync(_path.dirname(path));\n\n                var fd = _fs.openSync(path, \'w\');\n                return {\n                    Write: function(str) { _fs.writeSync(fd, str); },\n                    WriteLine: function(str) { _fs.writeSync(fd, str + \'\\r\\n\'); },\n                    Close: function() { _fs.closeSync(fd); fd = null; }\n                };\n            },\n\n            arguments: process.argv.slice(2),\n            \n            standardOut: {\n                Write: function(str) { process.stdout.write(str); },\n                WriteLine: function(str) { process.stdout.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n        }\n    };\n\n    if (typeof WScript !== \"undefined\" && typeof ActiveXObject === \"function\") {\n        return getWindowsScriptHostEnvironment();\n    }\n    else if (typeof require === \"function\") {\n        return getNodeEnvironment();\n    }\n    else {\n        return null; // Unsupported host\n    }\n})();\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class IntegerUtilities {\n        public static integerDivide(numerator: number, denominator: number): number {\n            return (numerator / denominator) >> 0;\n        }\n\n        public static integerMultiplyLow32Bits(n1: number, n2: number): number {\n            var n1Low16 = n1 & 0x0000ffff;\n            var n1High16 = n1 >>> 16;\n\n            var n2Low16 = n2 & 0x0000ffff;\n            var n2High16 = n2 >>> 16;\n\n            var resultLow32 = (((n1 & 0xffff0000) * n2) >>> 0) + (((n1 & 0x0000ffff) * n2) >>> 0) >>> 0;\n            return resultLow32;\n        }\n\n        public static integerMultiplyHigh32Bits(n1: number, n2: number): number {\n            var n1Low16 = n1 & 0x0000ffff;\n            var n1High16 = n1 >>> 16;\n\n            var n2Low16 = n2 & 0x0000ffff;\n            var n2High16 = n2 >>> 16;\n\n            var resultHigh32 = n1High16 * n2High16 + ((((n1Low16 * n2Low16) >>> 17) + n1Low16 * n2High16) >>> 15);\n            return resultHigh32;\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class MathPrototype {\n        public static max(a: number, b: number): number {\n            return a >= b ? a : b;\n        }\n\n        public static min(a: number, b: number): number {\n            return a <= b ? a : b;\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript.Collections {\n    export var DefaultStringTableCapacity = 256;\n\n    class StringTableEntry {\n        constructor(public Text: string,\n                    public HashCode: number,\n                    public Next: StringTableEntry) {\n        }\n    }\n\n    // A table of interned strings.  Faster and better than an arbitrary hashtable for the needs of the\n    // scanner. Specifically, the scanner operates over a sliding window of characters, with a start \n    // and end pointer for the current lexeme.  The scanner then wants to get the *interned* string\n    // represented by that subsection.\n    //\n    // Importantly, if the string is already interned, then it wants ask \"is the string represented by \n    // this section of a char array contained within the table\" in a non-allocating fashion.  i.e. if \n    // you have \"[\' \', \'p\', \'u\', \'b\', \'l\', \'i\', \'c\', \' \']\" and you ask to get the string represented by\n    //  range [1, 7), then this table will return \"public\" without any allocations if that value was \n    // already in the table.\n    //\n    // Of course, if the value is not in the table then there will be an initial cost to allocate the \n    // string and the bucket for the table.  However, that is only incurred the first time each unique \n    // string is added.\n    export class StringTable {\n        // TODO: uncomment this once typecheck bug is fixed.\n        private entries /*: StringTableEntry[]*/ = [];\n        private count: number = 0;\n\n        constructor(capacity) {\n            var size = Hash.getPrime(capacity);\n            this.entries = ArrayUtilities.createArray(size, null);\n        }\n\n        public addCharArray(key: number[], start: number, len: number): string {\n            // Compute the hash for this key.  Also ensure that it fits within 31 bits  (so that it \n            // stays a non-heap integer, and so we can index into the array safely).\n            var hashCode = Hash.computeSimple31BitCharArrayHashCode(key, start, len) & 0x7FFFFFFF;\n            // Debug.assert(hashCode > 0);\n\n            // First see if we already have the string represented by \"key[start, start + len)\" already\n            // present in this table.  If we do, just return that string.  Do this without any \n            // allocations\n            var entry = this.findCharArrayEntry(key, start, len, hashCode);\n            if (entry !== null) {\n                return entry.Text;\n            }\n\n            // We don\'t have an entry for that string in our table.  Convert that \n            var slice: number[] = key.slice(start, start + len);\n            return this.addEntry(StringUtilities.fromCharCodeArray(slice), hashCode);\n        }\n\n        private findCharArrayEntry(key: number[], start: number, len: number, hashCode: number) {\n            for (var e = this.entries[hashCode % this.entries.length]; e !== null; e = e.Next) {\n                if (e.HashCode === hashCode && StringTable.textCharArrayEquals(e.Text, key, start, len)) {\n                    return e;\n                }\n            }\n\n            return null;\n        }\n\n        private addEntry(text: string, hashCode: number): string {\n            var index = hashCode % this.entries.length;\n\n            var e = new StringTableEntry(text, hashCode, this.entries[index]);\n\n            this.entries[index] = e;\n\n            // We grow when our load factor equals 1.  I tried different load factors (like .75 and \n            // .5), however they seemed to have no effect on running time.  With a load factor of 1\n            // we seem to get about 80% slot fill rate with an average of around 1.25 table entries \n            // per slot.\n            if (this.count === this.entries.length) {\n                this.grow();\n            }\n\n            this.count++;\n            return e.Text;\n        }\n\n        //private dumpStats() {\n        //    var standardOut = Environment.standardOut;\n\n        //    standardOut.WriteLine(\"----------------------\")\n        //    standardOut.WriteLine(\"String table stats\");\n        //    standardOut.WriteLine(\"Count            : \" + this.count);\n        //    standardOut.WriteLine(\"Entries Length   : \" + this.entries.length);\n\n        //    var longestSlot = 0;\n        //    var occupiedSlots = 0;\n        //    for (var i = 0; i < this.entries.length; i++) {\n        //        if (this.entries[i] !== null) {\n        //            occupiedSlots++;\n\n        //            var current = this.entries[i];\n        //            var slotCount = 0;\n        //            while (current !== null) {\n        //                slotCount++;\n        //                current = current.Next;\n        //            }\n\n        //            longestSlot = MathPrototype.max(longestSlot, slotCount);\n        //        }\n        //    }\n\n        //    standardOut.WriteLine(\"Occupied slots   : \" + occupiedSlots);\n        //    standardOut.WriteLine(\"Longest  slot    : \" + longestSlot);\n        //    standardOut.WriteLine(\"Avg Length/Slot  : \" + (this.count / occupiedSlots));\n        //    standardOut.WriteLine(\"----------------------\");\n        //}\n\n        private grow(): void {\n            // this.dumpStats();\n\n            var newSize = Hash.expandPrime(this.entries.length);\n\n            var oldEntries = this.entries;\n            var newEntries: StringTableEntry[] = ArrayUtilities.createArray(newSize, null);\n\n            this.entries = newEntries;\n\n            for (var i = 0; i < oldEntries.length; i++) {\n                var e = oldEntries[i];\n                while (e !== null) {\n                    var newIndex = e.HashCode % newSize;\n                    var tmp = e.Next;\n                    e.Next = newEntries[newIndex];\n                    newEntries[newIndex] = e;\n                    e = tmp;\n                }\n            }\n\n            // this.dumpStats();\n        }\n\n        private static textCharArrayEquals(text: string, array: number[], start: number, length: number): boolean {\n            if (text.length !== length) {\n                return false;\n            }\n\n            var s = start;\n            for (var i = 0; i < length; i++) {\n                if (text.charCodeAt(i) !== array[s]) {\n                    return false;\n                }\n\n                s++;\n            }\n\n            return true;\n        }\n    }\n\n    export var DefaultStringTable = new StringTable(DefaultStringTableCapacity);\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class StringUtilities {\n        public static isString(value: any): boolean {\n            return Object.prototype.toString.apply(value, []) === \'[object String]\';\n        }\n\n        public static fromCharCodeArray(array: number[]): string {\n            return String.fromCharCode.apply(null, array);\n        }\n\n        public static endsWith(string: string, value: string): boolean {\n            return string.substring(string.length - value.length, string.length) === value;\n        }\n\n        public static startsWith(string: string, value: string): boolean {\n            return string.substr(0, value.length) === value;\n        }\n\n        public static copyTo(source: string, sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            for (var i = 0; i < count; i++) {\n                destination[destinationIndex + i] = source.charCodeAt(sourceIndex + i);\n            }\n        }\n\n        public static repeat(value: string, count: number) {\n            return Array(count + 1).join(value);\n        }\n\n        public static stringEquals(val1: string, val2: string): boolean {\n            return val1 === val2;\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nvar global = <any>Function(\"return this\").call(null);\n\nmodule TypeScript {\n    module Clock {\n        export var now: () => number;\n        export var resolution: number;\n\n        declare module WScript {\n            export function InitializeProjection();\n        }\n\n        declare module TestUtilities {\n            export function QueryPerformanceCounter(): number;\n            export function QueryPerformanceFrequency(): number;\n        }\n\n        if (typeof WScript !== \"undefined\" && typeof global[\'WScript\'].InitializeProjection !== \"undefined\") {\n            // Running in JSHost.\n            global[\'WScript\'].InitializeProjection();\n\n            now = function () {\n                return TestUtilities.QueryPerformanceCounter();\n            }\n\n            resolution = TestUtilities.QueryPerformanceFrequency();\n        } else {\n            now = function () {\n                return Date.now();\n            }\n\n            resolution = 1000;\n        }\n    }\n\n    export class Timer {\n        public startTime;\n        public time = 0;\n\n        public start() {\n            this.time = 0;\n            this.startTime = Clock.now();\n        }\n\n        public end() {\n            // Set time to MS.\n            this.time = (Clock.now() - this.startTime);\n        }\n    }\n}\n///<reference path=\'require.ts\' />\n\n///<reference path=\'arrayUtilities.ts\' />\n///<reference path=\'constants.ts\' />\n///<reference path=\'contract.ts\' />\n///<reference path=\'debug.ts\' />\n///<reference path=\'diagnosticCategory.ts\' />\n///<reference path=\'diagnosticCode.ts\' />\n///<reference path=\'diagnosticInfo.ts\' />\n///<reference path=\'diagnosticMessages.ts\' />\n///<reference path=\'errors.ts\' />\n///<reference path=\'hash.ts\' />\n///<reference path=\'hashTable.ts\' />\n///<reference path=\'diagnostic.ts\' />\n///<reference path=\'diagnosticMessages.ts\' />\n///<reference path=\'environment.ts\' />\n///<reference path=\'integerUtilities.ts\' />\n///<reference path=\'mathPrototype.ts\' />\n///<reference path=\'stringTable.ts\' />\n///<reference path=\'stringUtilities.ts\' />\n///<reference path=\'timer.ts\' />\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export enum CharacterCodes {\n        nullCharacter = 0,\n        maxAsciiCharacter = 127,\n\n        lineFeed = 10,              // \\n\n        carriageReturn = 13,        // \\r\n        lineSeparator = 0x2028,\n        paragraphSeparator = 0x2029,\n\n        // REVIEW: do we need to support this?  The scanner doesn\'t, but our IText does.  This seems \n        // like an odd disparity?  (Or maybe it\'s completely fine for them to be different).\n        nextLine = 0x0085,\n\n        // Unicode 3.0 space characters\n        space = 0x0020,   // \" \"\n        nonBreakingSpace = 0x00A0,   //\n        enQuad = 0x2000,\n        emQuad = 0x2001,\n        enSpace = 0x2002,\n        emSpace = 0x2003,\n        threePerEmSpace = 0x2004,\n        fourPerEmSpace = 0x2005,\n        sixPerEmSpace = 0x2006,\n        figureSpace = 0x2007,\n        punctuationSpace = 0x2008,\n        thinSpace = 0x2009,\n        hairSpace = 0x200A,\n        zeroWidthSpace = 0x200B,\n        narrowNoBreakSpace = 0x202F,\n        ideographicSpace = 0x3000,\n\n        _ = 95,\n        $ = 36,\n\n        _0 = 48,\n        _9 = 57,\n\n        a = 97,\n        b = 98,\n        c = 99,\n        d = 100,\n        e = 101,\n        f = 102,\n        g = 103,\n        h = 104,\n        i = 105,\n        k = 107,\n        l = 108,\n        m = 109,\n        n = 110,\n        o = 111,\n        p = 112,\n        q = 113,\n        r = 114,\n        s = 115,\n        t = 116,\n        u = 117,\n        v = 118,\n        w = 119,\n        x = 120,\n        y = 121,\n        z = 122,\n\n        A = 65,\n        E = 69,\n        F = 70,\n        X = 88,\n        Z = 90,\n\n        ampersand = 38,             // &\n        asterisk = 42,              // *\n        at = 64,                    // @\n        backslash = 92,             // \\\n        bar = 124,                  // |\n        caret = 94,                 // ^\n        closeBrace = 125,           // }\n        closeBracket = 93,          // ]\n        closeParen = 41,            // )\n        colon = 58,                 // : \n        comma = 44,                 // ,\n        dot = 46,                   // .\n        doubleQuote = 34,           // \"\n        equals = 61,                // =\n        exclamation = 33,           // !\n        greaterThan = 62,           // >\n        lessThan = 60,              // <\n        minus = 45,                 // -\n        openBrace = 123,            // {\n        openBracket = 91,           // [\n        openParen = 40,             // (\n        percent = 37,               // %\n        plus = 43,                  // +\n        question = 63,              // ?\n        semicolon = 59,             // ;\n        singleQuote = 39,           // \'\n        slash = 47,                 // /\n        tilde = 126,                // ~\n\n        backspace = 8,              // \\b\n        formFeed = 12,              // \\f\n        byteOrderMark = 0xFEFF,\n        tab = 9,                    // \\t\n        verticalTab = 11,           // \\v\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface ILineAndCharacter {\n        line: number;\n        character: number;\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    // Represents an immutable snapshot of a script at a specified time.  Once acquired, the \n    // snapshot is observably immutable.  i.e. the same calls with the same parameters will return\n    // the same values.\n    export interface IScriptSnapshot {\n        // Get\'s a portion of the script snapshot specified by [start, end).  \n        getText(start: number, end: number): string;\n\n        // Get\'s the length of this script snapshot.\n        getLength(): number;\n\n        // This call returns the array containing the start position of every line.  \n        // i.e.\"[0, 10, 55]\".  TODO: consider making this optional.  The language service could\n        // always determine this (albeit in a more expensive manner).\n        getLineStartPositions(): number[];\n\n        // Returns a text change range representing what text has changed since the specified version.\n        // If the change cannot be determined (say, because a file was opened/closed), then \'null\' \n        // should be returned.\n        getTextChangeRangeSinceVersion(scriptVersion: number): TextChangeRange;\n    }\n\n    export module ScriptSnapshot {\n        class StringScriptSnapshot implements IScriptSnapshot {\n            constructor(private text: string) {\n            }\n\n            public getText(start: number, end: number): string {\n                return this.text.substring(start, end);\n            }\n\n            public getLength(): number {\n                return this.text.length;\n            }\n\n            public getLineStartPositions(): number[] {\n                return TextUtilities.parseLineStarts(SimpleText.fromString(this.text));\n            }\n\n            public getTextChangeRangeSinceVersion(scriptVersion: number): TypeScript.TextChangeRange {\n                throw Errors.notYetImplemented();\n            }\n        }\n\n        export function fromString(text: string): IScriptSnapshot {\n            return new StringScriptSnapshot(text);\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\n/// <summary>\n/// Represents an immutable snapshot of text.\n/// </summary>\nmodule TypeScript {\n    export interface ISimpleText {\n        /// <summary>\n        /// Total number of characters in the text source.\n        /// </summary>\n        length(): number;\n\n        /// <summary>\n        /// Copy the count contents of IText starting from sourceIndex to destination starting at\n        /// destinationIndex.\n        /// </summary>\n        copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void;\n\n        substr(start: number, length: number, intern: boolean): string;\n\n        /// <summary>\n        /// Gets the a new IText that corresponds to the contents of this IText for the given span.\n        /// </summary>\n        subText(span: TextSpan): ISimpleText;\n\n        charCodeAt(index: number): number;\n        lineMap(): LineMap;\n    }\n\n    /// <summary>\n    /// Represents an immutable snapshot of text.\n    /// </summary>\n    export interface IText extends ISimpleText {\n        /// <summary>\n        /// Total number of lines in the text.\n        /// </summary>\n        lineCount(): number;\n\n        /// <summary>\n        /// Returns the collection of line information for the <see cref=\"T:IText\"/> instance.\n        /// </summary>\n        lines(): ITextLine[];\n\n        /// <summary>\n        /// Return the char at position in the IText.\n        /// </summary>\n        charCodeAt(position: number): number;\n\n        /// <summary>\n        /// Gets the line corresponding to the provided line number.\n        /// </summary>\n        getLineFromLineNumber(lineNumber: number): ITextLine;\n\n        /// <summary>\n        /// Gets the line which encompasses the provided position.\n        /// </summary>\n        getLineFromPosition(position: number): ITextLine;\n\n        /// <summary>\n        /// Gets the number of the line that contains the character at the specified position.\n        /// </summary>\n        getLineNumberFromPosition(position: number): number;\n\n        /// <summary>\n        /// Gets a line number, and position within that line, for the character at the \n        /// specified position\n        /// </summary>\n        getLinePosition(position: number): LineAndCharacter;\n\n        /// <summary>\n        /// Returns a string representation of the contents of this IText within the given span.\n        /// </summary>\n        toString(span?: TextSpan): string;\n    }\n}\n///<reference path=\'references.ts\' />\n\n/// <summary>\n/// Immutable representation of a line in an IText instance.\n/// </summary>\nmodule TypeScript {\n    export interface ITextLine {\n        /// <summary>\n        /// Start of the line.\n        /// </summary>\n        start(): number;\n\n        /// <summary>\n        /// End of the line not including the line break.\n        /// </summary>\n        end(): number;\n\n        /// <summary>\n        /// End of the line including the line break.\n        /// </summary>\n        endIncludingLineBreak(): number;\n\n        /// <summary>\n        /// Extent of the line not including the line break.\n        /// </summary>\n        extent(): TextSpan;\n\n        /// <summary>\n        /// Extent of the line including the line break.\n        /// </summary>\n        extentIncludingLineBreak(): TextSpan;\n\n        /// <summary>\n        /// Gets the text of the line excluding the line break.\n        /// </summary>\n        toString(): string;\n\n        /// <summary>\n        /// Gets the line number for this line.\n        /// </summary>\n        lineNumber(): number;\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class LineMap {\n        public static empty = new LineMap([0], 0);\n\n        constructor(private _lineStarts: number[], private length: number) {\n        }\n\n        public toJSON(key) {\n            return { lineStarts: this._lineStarts, length: this.length };\n        }\n\n        public equals(other: LineMap): boolean {\n            return this.length === other.length &&\n                   ArrayUtilities.sequenceEquals(this.lineStarts(), other.lineStarts(), (v1, v2) => v1 === v2);\n        }\n\n        public lineStarts(): number[] {\n            return this._lineStarts;\n        }\n\n        public lineCount(): number {\n            return this.lineStarts().length;\n        }\n\n        public getPosition(line: number, character: number): number {\n            return this.lineStarts()[line] + character;\n        }\n\n        public getLineNumberFromPosition(position: number): number {\n            if (position < 0 || position > this.length) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            if (position === this.length) {\n                // this can happen when the user tried to get the line of items\n                // that are at the absolute end of this text (i.e. the EndOfLine\n                // token, or missing tokens that are at the end of the text).\n                // In this case, we want the last line in the text.\n                return this.lineCount() - 1;\n            }\n\n            // Binary search to find the right line\n            var lineNumber = ArrayUtilities.binarySearch(this.lineStarts(), position);\n            if (lineNumber < 0) {\n                lineNumber = (~lineNumber) - 1;\n            }\n\n            return lineNumber;\n        }\n\n        public getLineStartPosition(lineNumber: number): number {\n            return this.lineStarts()[lineNumber];\n        }\n\n        public fillLineAndCharacterFromPosition(position: number, lineAndCharacter: ILineAndCharacter): void {\n            if (position < 0 || position > this.length) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            var lineNumber = this.getLineNumberFromPosition(position);\n            lineAndCharacter.line = lineNumber;\n            lineAndCharacter.character = position - this.lineStarts()[lineNumber];\n        }\n\n        public getLineAndCharacterFromPosition(position: number): LineAndCharacter {\n            if (position < 0 || position > this.length) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            var lineNumber = this.getLineNumberFromPosition(position);\n\n            return new LineAndCharacter(lineNumber, position - this.lineStarts()[lineNumber]);\n        }\n\n        public static fromSimpleText(text: ISimpleText): LineMap {\n            var lineStarts = TextUtilities.parseLineStarts(text);\n\n            return new LineMap(lineStarts, text.length());\n        }\n\n        public static fromScriptSnapshot(scriptSnapshot: IScriptSnapshot): LineMap {\n            return new LineMap(scriptSnapshot.getLineStartPositions(), scriptSnapshot.getLength());\n        }\n\n        public static fromString(text: string): LineMap {\n            return LineMap.fromSimpleText(SimpleText.fromString(text));\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class LineAndCharacter {\n        private _line: number = 0;\n        private _character: number = 0;\n\n        /// <summary>\n        /// Initializes a new instance of a <see cref=\"LinePosition\"/> with the given line and character.\n        /// </summary>\n        /// <param name=\"line\">\n        /// The line of the line position. The first line in a file is defined as line 0 (zero based line numbering).\n        /// </param>\n        /// <param name=\"character\">\n        /// The character position in the line.\n        /// </param>\n        /// <exception cref=\"ArgumentOutOfRangeException\"><paramref name=\"line\"/> or <paramref name=\"character\"/> is less than zero. </exception>\n        constructor(line: number, character: number) {\n            if (line < 0) {\n                throw Errors.argumentOutOfRange(\"line\");\n            }\n\n            if (character < 0) {\n                throw Errors.argumentOutOfRange(\"character\");\n            }\n\n            this._line = line;\n            this._character = character;\n        }\n\n        public line(): number {\n            return this._line;\n        }\n\n        public character(): number {\n            return this._character;\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript.TextFactory {\n    /// <summary>\n    /// Return startLineBreak = index-1, lengthLineBreak = 2   if there is a \\r\\n at index-1\n    /// Return startLineBreak = index,   lengthLineBreak = 1   if there is a 1-char newline at index\n    /// Return startLineBreak = index+1, lengthLineBreak = 0   if there is no newline at index.\n    /// </summary>\n    function getStartAndLengthOfLineBreakEndingAt(\n        text: IText, index: number, info: LinebreakInfo): void {\n\n        var c = text.charCodeAt(index);\n        if (c === CharacterCodes.lineFeed) {\n            if (index > 0 && text.charCodeAt(index - 1) === CharacterCodes.carriageReturn) {\n                // \"\\r\\n\" is the only 2-character line break.\n                info.startPosition = index - 1;\n                info.length = 2;\n            }\n            else {\n                info.startPosition = index;\n                info.length = 1;\n            }\n        }\n        else if (TextUtilities.isAnyLineBreakCharacter(c)) {\n            info.startPosition = index;\n            info.length = 1;\n        }\n        else {\n            info.startPosition = index + 1;\n            info.length = 0;\n        }\n    }\n\n    class LinebreakInfo {\n        constructor(public startPosition: number,\n                     public length: number) {\n        }\n    }\n\n    class TextLine implements ITextLine {\n        private _text: IText = null;\n        private _textSpan: TextSpan = null;\n        private _lineBreakLength: number;\n        private _lineNumber: number;\n\n        constructor(text: IText, body: TextSpan, lineBreakLength: number, lineNumber: number) {\n            Contract.throwIfNull(text);\n            Contract.throwIfFalse(lineBreakLength >= 0);\n            Contract.requires(lineNumber >= 0);\n            this._text = text;\n            this._textSpan = body;\n            this._lineBreakLength = lineBreakLength;\n            this._lineNumber = lineNumber;\n        }\n\n        public start(): number {\n            return this._textSpan.start();\n        }\n\n        public end(): number {\n            return this._textSpan.end();\n        }\n\n        public endIncludingLineBreak(): number {\n            return this.end() + this._lineBreakLength;\n        }\n\n        public extent(): TextSpan {\n            return this._textSpan;\n        }\n\n        public extentIncludingLineBreak(): TextSpan {\n            return TextSpan.fromBounds(this.start(), this.endIncludingLineBreak());\n        }\n\n        public toString(): string {\n            return this._text.toString(this._textSpan);\n        }\n\n        public lineNumber(): number {\n            return this._lineNumber;\n        }\n    }\n\n    class TextBase implements IText {\n        /// <summary>\n        /// The line start position of each line.\n        /// </summary>\n        private lazyLineStarts: number[] = null;\n\n        /// <summary>\n        /// The length of the text represented by <see cref=\"T:StringText\"/>.\n        /// </summary>\n        public length(): number {\n            throw Errors.abstract();\n        }\n\n        /// <summary>\n        /// Returns a character at given position.\n        /// </summary>\n        /// <param name=\"position\">The position to get the character from.</param>\n        /// <returns>The character.</returns>\n        /// <exception cref=\"T:ArgumentOutOfRangeException\">When position is negative or \n        /// greater than <see cref=\"T:\"/> length.</exception>\n        public charCodeAt(position: number): number {\n            throw Errors.abstract();\n        }\n\n        checkSubSpan(span: TextSpan): void {\n            if (span.start() < 0 || span.start() > this.length() || span.end() > this.length()) {\n                throw Errors.argumentOutOfRange(\"span\");\n            }\n        }\n\n        /// <summary>\n        /// Provides a string representation of the StringText located within given span.\n        /// </summary>\n        /// <exception cref=\"T:ArgumentOutOfRangeException\">When given span is outside of the text range.</exception>\n        public toString(span: TextSpan = null): string {\n            throw Errors.abstract();\n        }\n\n        public subText(span: TextSpan): IText {\n            this.checkSubSpan(span);\n\n            return new SubText(this, span);\n        }\n\n        public substr(start: number, length: number, intern: boolean): string {\n            throw Errors.abstract();\n        }\n\n        /// <summary>\n        /// Copy a range of characters from this IText to a destination array.\n        /// </summary>\n        public copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            throw Errors.abstract();\n        }\n\n        /// <summary>\n        /// The length of the text represented by <see cref=\"T:StringText\"/>.\n        /// </summary>\n        public lineCount(): number {\n            return this.lineStarts().length;\n        }\n\n        /// <summary>\n        /// The sequence of lines represented by <see cref=\"T:StringText\"/>.\n        /// </summary>\n        public lines(): ITextLine[] {\n            var lines: ITextLine[] = [];\n\n            var length = this.lineCount();\n            for (var i = 0; i < length; ++i) {\n                lines[i] = this.getLineFromLineNumber(i);\n            }\n\n            return lines;\n        }\n\n        public lineMap(): LineMap {\n            return new LineMap(this.lineStarts(), this.length());\n        }\n\n        private lineStarts(): number[] {\n            if (this.lazyLineStarts === null) {\n                this.lazyLineStarts = TextUtilities.parseLineStarts(this);\n            }\n\n            return this.lazyLineStarts;\n        }\n\n        private linebreakInfo = new LinebreakInfo(0, 0);\n        public getLineFromLineNumber(lineNumber: number): ITextLine {\n            var lineStarts = this.lineStarts();\n\n            if (lineNumber < 0 || lineNumber >= lineStarts.length) {\n                throw Errors.argumentOutOfRange(\"lineNumber\");\n            }\n\n            var first = lineStarts[lineNumber];\n            if (lineNumber === lineStarts.length - 1) {\n                return new TextLine(this, new TextSpan(first, this.length() - first), 0, lineNumber);\n            }\n            else {\n                getStartAndLengthOfLineBreakEndingAt(this, lineStarts[lineNumber + 1] - 1, this.linebreakInfo);\n                return new TextLine(this, new TextSpan(first, this.linebreakInfo.startPosition - first), this.linebreakInfo.length, lineNumber);\n            }\n\n        }\n\n        private lastLineFoundForPosition: ITextLine = null;\n        public getLineFromPosition(position: number): ITextLine {\n            // After asking about a location on a particular line\n            // it is common to ask about other position in the same line again.\n            // try to see if this is the case.\n            var lastFound = this.lastLineFoundForPosition;\n            if (lastFound !== null &&\n                lastFound.start() <= position &&\n                lastFound.endIncludingLineBreak() > position) {\n                return lastFound;\n            }\n\n            var lineNumber = this.getLineNumberFromPosition(position);\n\n            var result = this.getLineFromLineNumber(lineNumber);\n            this.lastLineFoundForPosition = result;\n            return result;\n        }\n\n        public getLineNumberFromPosition(position: number): number {\n            if (position < 0 || position > this.length()) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            if (position === this.length()) {\n                // this can happen when the user tried to get the line of items\n                // that are at the absolute end of this text (i.e. the EndOfLine\n                // token, or missing tokens that are at the end of the text).\n                // In this case, we want the last line in the text.\n                return this.lineCount() - 1;\n            }\n\n            // Binary search to find the right line\n            var lineNumber = ArrayUtilities.binarySearch(this.lineStarts(), position);\n            if (lineNumber < 0) {\n                lineNumber = (~lineNumber) - 1;\n            }\n\n            return lineNumber;\n        }\n\n        public getLinePosition(position: number): LineAndCharacter {\n            if (position < 0 || position > this.length()) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            var lineNumber = this.getLineNumberFromPosition(position);\n\n            return new LineAndCharacter(lineNumber, position - this.lineStarts()[lineNumber]);\n        }\n    }\n\n    /// <summary>\n    /// An IText that represents a subrange of another IText.\n    /// </summary>\n    class SubText extends TextBase {\n        private text: IText;\n        private span: TextSpan;\n\n        constructor(text: IText, span: TextSpan) {\n            super();\n\n            if (text === null) {\n                throw Errors.argumentNull(\"text\");\n            }\n\n            if (span.start() < 0 ||\n                span.start() >= text.length() ||\n                 span.end() < 0 ||\n                 span.end() > text.length()) {\n                throw Errors.argument(\"span\");\n            }\n\n            this.text = text;\n            this.span = span;\n        }\n\n        public length(): number {\n            return this.span.length();\n        }\n\n        public charCodeAt(position: number): number {\n            if (position < 0 || position > this.length()) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            return this.text.charCodeAt(this.span.start() + position);\n        }\n\n        public subText(span: TextSpan): IText {\n            this.checkSubSpan(span);\n\n            return new SubText(this.text, this.getCompositeSpan(span.start(), span.length()));\n        }\n\n        public copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            var span = this.getCompositeSpan(sourceIndex, count);\n            this.text.copyTo(span.start(), destination, destinationIndex, span.length());\n        }\n\n        private getCompositeSpan(start: number, length: number): TextSpan {\n            var compositeStart = MathPrototype.min(this.text.length(), this.span.start() + start);\n            var compositeEnd = MathPrototype.min(this.text.length(), compositeStart + length);\n            return new TextSpan(compositeStart, compositeEnd - compositeStart);\n        }\n    }\n\n    /// <summary>\n    /// Implementation of IText based on a <see cref=\"T:System.String\"/> input\n    /// </summary>\n    class StringText extends TextBase {\n        /// <summary>\n        /// Underlying string on which this IText instance is based\n        /// </summary>\n        private source: string = null;\n\n        /// <summary>\n        /// Initializes an instance of <see cref=\"T:StringText\"/> with provided data.\n        /// </summary>\n        constructor(data: string) {\n            super();\n\n            if (data === null) {\n                throw Errors.argumentNull(\"data\");\n            }\n\n            this.source = data;\n        }\n\n        /// <summary>\n        /// The length of the text represented by <see cref=\"T:StringText\"/>.\n        /// </summary>\n        public length(): number {\n            return this.source.length;\n        }\n\n        /// <summary>\n        /// Returns a character at given position.\n        /// </summary>\n        /// <param name=\"position\">The position to get the character from.</param>\n        /// <returns>The character.</returns>\n        /// <exception cref=\"T:ArgumentOutOfRangeException\">When position is negative or \n        /// greater than <see cref=\"T:\"/> length.</exception>\n        public charCodeAt(position: number): number {\n            if (position < 0 || position >= this.source.length) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            return this.source.charCodeAt(position);\n        }\n\n        public substr(start: number, length: number, intern: boolean) {\n            return this.source.substr(start, length);\n        }\n\n        /// <summary>\n        /// Provides a string representation of the StringText located within given span.\n        /// </summary>\n        /// <exception cref=\"T:ArgumentOutOfRangeException\">When given span is outside of the text range.</exception>\n        public toString(span: TextSpan = null): string {\n            if (span === null) {\n                span = new TextSpan(0, this.length());\n            }\n\n            this.checkSubSpan(span);\n\n            if (span.start() === 0 && span.length() === this.length()) {\n                return this.source;\n            }\n\n            return this.source.substr(span.start(), span.length());\n        }\n\n        public copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            StringUtilities.copyTo(this.source, sourceIndex, destination, destinationIndex, count);\n        }\n    }\n\n    export function createText(value: string): IText {\n        return new StringText(value);\n    }\n}\n\nmodule TypeScript.SimpleText {\n    /// <summary>\n    /// An IText that represents a subrange of another IText.\n    /// </summary>\n    class SimpleSubText implements ISimpleText {\n        private text: ISimpleText = null;\n        private span: TextSpan = null;\n\n        constructor(text: ISimpleText, span: TextSpan) {\n            if (text === null) {\n                throw Errors.argumentNull(\"text\");\n            }\n\n            if (span.start() < 0 ||\n                span.start() >= text.length() ||\n                 span.end() < 0 ||\n                 span.end() > text.length()) {\n                throw Errors.argument(\"span\");\n            }\n\n            this.text = text;\n            this.span = span;\n        }\n\n        private checkSubSpan(span: TextSpan): void {\n            if (span.start() < 0 || span.start() > this.length() || span.end() > this.length()) {\n                throw Errors.argumentOutOfRange(\"span\");\n            }\n        }\n\n        private checkSubPosition(position: number): void {\n            if (position < 0 || position >= this.length()) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n        }\n\n        public length(): number {\n            return this.span.length();\n        }\n\n        public subText(span: TextSpan): ISimpleText {\n            this.checkSubSpan(span);\n\n            return new SimpleSubText(this.text, this.getCompositeSpan(span.start(), span.length()));\n        }\n\n        public copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            var span = this.getCompositeSpan(sourceIndex, count);\n            this.text.copyTo(span.start(), destination, destinationIndex, span.length());\n        }\n\n        public substr(start: number, length: number, intern: boolean): string {\n            var span = this.getCompositeSpan(start, length);\n            return this.text.substr(span.start(), span.length(), intern);\n        }\n\n        private getCompositeSpan(start: number, length: number): TextSpan {\n            var compositeStart = MathPrototype.min(this.text.length(), this.span.start() + start);\n            var compositeEnd = MathPrototype.min(this.text.length(), compositeStart + length);\n            return new TextSpan(compositeStart, compositeEnd - compositeStart);\n        }\n\n        public charCodeAt(index: number): number {\n            this.checkSubPosition(index);\n            return this.text.charCodeAt(this.span.start() + index);\n        }\n\n        public lineMap(): LineMap {\n            return LineMap.fromSimpleText(this);\n        }\n    }\n\n    class SimpleStringText implements ISimpleText {\n        constructor(private value: string) {\n        }\n\n        public length(): number {\n            return this.value.length;\n        }\n\n        public copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            StringUtilities.copyTo(this.value, sourceIndex, destination, destinationIndex, count);\n        }\n\n        private static charArray: number[] = ArrayUtilities.createArray(1024, 0);\n\n        public substr(start: number, length: number, intern: boolean): string {\n            if (intern) {\n                // use a shared array instance of the length of this substring isn\'t too large.\n                var array = length <= SimpleStringText.charArray.length\n                    ? SimpleStringText.charArray\n                    : ArrayUtilities.createArray(length, /*defaultValue:*/0);\n                this.copyTo(start, array, 0, length);\n                return Collections.DefaultStringTable.addCharArray(array, 0, length);\n            }\n\n            return this.value.substr(start, length);\n        }\n\n        public subText(span: TextSpan): ISimpleText {\n            return new SimpleSubText(this, span);\n        }\n\n        public charCodeAt(index: number): number {\n            return this.value.charCodeAt(index);\n        }\n\n        public lineMap(): LineMap {\n            return LineMap.fromSimpleText(this);\n        }\n    }\n\n    // Class which wraps a host IScriptSnapshot and exposes an ISimpleText for newer compiler code. \n    class SimpleScriptSnapshotText implements ISimpleText {\n\n        constructor(public scriptSnapshot: IScriptSnapshot) {\n        }\n\n        public charCodeAt(index: number): number {\n            return this.scriptSnapshot.getText(index, index + 1).charCodeAt(0);\n        }\n\n        public length(): number {\n            return this.scriptSnapshot.getLength();\n        }\n\n        public copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            var text = this.scriptSnapshot.getText(sourceIndex, sourceIndex + count);\n            StringUtilities.copyTo(text, 0, destination, destinationIndex, count);\n        }\n\n        public substr(start: number, length: number, intern: boolean): string {\n            return this.scriptSnapshot.getText(start, start + length);\n        }\n\n        public subText(span: TextSpan): ISimpleText {\n            return new SimpleSubText(this, span);\n        }\n\n        public lineMap(): LineMap {\n            var lineStartPositions = this.scriptSnapshot.getLineStartPositions();\n            return new LineMap(lineStartPositions, this.length());\n        }\n    }\n\n    export function fromString(value: string): ISimpleText {\n        return new SimpleStringText(value);\n    }\n\n    export function fromScriptSnapshot(scriptSnapshot: IScriptSnapshot): ISimpleText {\n        return new SimpleScriptSnapshotText(scriptSnapshot);\n    }\n}\n   \n///<reference path=\'references.ts\' />\n\nmodule TypeScript.TextUtilities {\n    export function parseLineStarts(text: ISimpleText): number[]{\n        var length = text.length();\n\n        // Corner case check\n        if (0 === length) {\n            var result: number[] = [];\n            result.push(0);\n            return result;\n        }\n\n        var position = 0;\n        var index = 0;\n        var arrayBuilder: number[] = [];\n        var lineNumber = 0;\n\n        // The following loop goes through every character in the text. It is highly\n        // performance critical, and thus inlines knowledge about common line breaks\n        // and non-line breaks.\n        while (index < length) {\n            var c = text.charCodeAt(index);\n            var lineBreakLength;\n\n            // common case - ASCII & not a line break\n            if (c > CharacterCodes.carriageReturn && c <= 127) {\n                index++;\n                continue;\n            }\n            else if (c === CharacterCodes.carriageReturn && index + 1 < length && text.charCodeAt(index + 1) === CharacterCodes.lineFeed) {\n                lineBreakLength = 2;\n            }\n            else if (c === CharacterCodes.lineFeed) {\n                lineBreakLength = 1;\n            }\n            else {\n                lineBreakLength = TextUtilities.getLengthOfLineBreak(text, index);\n            }\n\n            if (0 === lineBreakLength) {\n                index++;\n            }\n            else {\n                arrayBuilder.push(position);\n                index += lineBreakLength;\n                position = index;\n                lineNumber++;\n            }\n        }\n\n        // Create a start for the final line.  \n        arrayBuilder.push(position);\n\n        return arrayBuilder;\n    }\n\n    export function getLengthOfLineBreakSlow(text: ISimpleText, index: number, c: number): number {\n        if (c === CharacterCodes.carriageReturn) {\n            var next = index + 1;\n            return (next < text.length()) && CharacterCodes.lineFeed === text.charCodeAt(next) ? 2 : 1;\n        }\n        else if (isAnyLineBreakCharacter(c)) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    export function getLengthOfLineBreak(text: ISimpleText, index: number): number {\n        var c = text.charCodeAt(index);\n\n        // common case - ASCII & not a line break\n        if (c > CharacterCodes.carriageReturn && c <= 127) {\n            return 0;\n        }\n\n        return getLengthOfLineBreakSlow(text, index, c);\n    }\n\n    export function isAnyLineBreakCharacter(c: number): boolean {\n        return c === CharacterCodes.lineFeed ||\n               c === CharacterCodes.carriageReturn ||\n               c === CharacterCodes.nextLine ||\n               c === CharacterCodes.lineSeparator ||\n               c === CharacterCodes.paragraphSeparator;\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class TextSpan {\n        private _start: number;\n        private _length: number;\n\n        /// <summary>\n        /// Creates a TextSpan instance beginning with the position Start and having the Length\n        /// specified with length.\n        /// </summary>\n        constructor(start: number, length: number) {\n            if (start < 0) {\n                Errors.argument(\"start\");\n            }\n\n            if (start + length < start) {\n                throw new Error(\"length\");\n            }\n\n            this._start = start;\n            this._length = length;\n        }\n\n        public start(): number {\n            return this._start;\n        }\n\n        public length(): number {\n            return this._length;\n        }\n\n        public end(): number {\n            return this._start + this._length;\n        }\n\n        public isEmpty(): boolean {\n            return this._length === 0;\n        }\n\n        /// <summary>\n        /// Determines whether the position lies within the span.\n        /// </summary>\n        /// <param name=\"position\">\n        /// The position to check.\n        /// </param>\n        /// <returns>\n        /// <c>true</c> if the position is greater than or equal to Start and strictly less \n        /// than End, otherwise <c>false</c>.\n        /// </returns>\n        public containsPosition(position: number): boolean {\n            return position >= this._start && position < this.end();\n        }\n\n        /// <summary>\n        /// Determines whether <paramref name=\"span\"/> falls completely within this span.\n        /// </summary>\n        /// <param name=\"span\">\n        /// The span to check.\n        /// </param>\n        /// <returns>\n        /// <c>true</c> if the specified span falls completely within this span, otherwise <c>false</c>.\n        /// </returns>\n        public containsTextSpan(span: TextSpan): boolean {\n            return span._start >= this._start && span.end() <= this.end();\n        }\n\n        /// <summary>\n        /// Determines whether <paramref name=\"span\"/> overlaps this span. Two spans are considered to overlap \n        /// if they have positions in common and neither is empty. Empty spans do not overlap with any \n        /// other span.\n        /// </summary>\n        /// <param name=\"span\">\n        /// The span to check.\n        /// </param>\n        /// <returns>\n        /// <c>true</c> if the spans overlap, otherwise <c>false</c>.\n        /// </returns>\n        public overlapsWith(span: TextSpan): boolean {\n            var overlapStart = MathPrototype.max(this._start, span._start);\n            var overlapEnd = MathPrototype.min(this.end(), span.end());\n\n            return overlapStart < overlapEnd;\n        }\n\n        /// <summary>\n        /// Returns the overlap with the given span, or null if there is no overlap.\n        /// </summary>\n        /// <param name=\"span\">\n        /// The span to check.\n        /// </param>\n        /// <returns>\n        /// The overlap of the spans, or null if the overlap is empty.\n        /// </returns>\n        public overlap(span: TextSpan): TextSpan {\n            var overlapStart = MathPrototype.max(this._start, span._start);\n            var overlapEnd = MathPrototype.min(this.end(), span.end());\n\n            if (overlapStart < overlapEnd) {\n                return TextSpan.fromBounds(overlapStart, overlapEnd);\n            }\n\n            return null;\n        }\n\n        /// <summary>\n        /// Determines whether <paramref name=\"span\"/> intersects this span. Two spans are considered to \n        /// intersect if they have positions in common or the end of one span \n        /// coincides with the start of the other span.\n        /// </summary>\n        /// <param name=\"span\">\n        /// The span to check.\n        /// </param>\n        /// <returns>\n        /// <c>true</c> if the spans intersect, otherwise <c>false</c>.\n        /// </returns>\n        public intersectsWithTextSpan(span: TextSpan): boolean {\n            return span._start <= this.end() && span.end() >= this._start;\n        }\n\n        public intersectsWith(start: number, length: number): boolean {\n            var end = start + length;\n            return start <= this.end() && end >= this._start;\n        }\n\n        /// <summary>\n        /// Determines whether <paramref name=\"position\"/> intersects this span. \n        /// A position is considered to intersect if it is between the start and\n        /// end positions (inclusive) of this span.\n        /// </summary>\n        /// <param name=\"position\">\n        /// The position to check.\n        /// </param>\n        /// <returns>\n        /// <c>true</c> if the position intersects, otherwise <c>false</c>.\n        /// </returns>\n        public intersectsWithPosition(position: number): boolean {\n            return position <= this.end() && position >= this._start;\n        }\n\n        /// <summary>\n        /// Returns the intersection with the given span, or null if there is no intersection.\n        /// </summary>\n        /// <param name=\"span\">\n        /// The span to check.\n        /// </param>\n        /// <returns>\n        /// The intersection of the spans, or null if the intersection is empty.\n        /// </returns>\n        public intersection(span: TextSpan): TextSpan {\n            var intersectStart = MathPrototype.max(this._start, span._start);\n            var intersectEnd = MathPrototype.min(this.end(), span.end());\n\n            if (intersectStart <= intersectEnd) {\n                return TextSpan.fromBounds(intersectStart, intersectEnd);\n            }\n\n            return null;\n        }\n\n        /// <summary>\n        /// Creates a new <see cref=\"T:TextSpan\"/> from <param name=\"start\" /> and <param\n        /// name=\"end\"/> positions as opposed to a position and length.\n        /// </summary>\n        public static fromBounds(start: number, end: number): TextSpan {\n            Contract.requires(start >= 0);\n            Contract.requires(end - start >= 0);\n            return new TextSpan(start, end - start);\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class TextChangeRange {\n        public static unchanged = new TextChangeRange(new TextSpan(0, 0), 0);\n\n        private _span: TextSpan;\n        private _newLength: number;\n\n        /// <summary>\n        /// Initializes a new instance of <see cref=\"T:TextChangeRange\"/>.\n        /// </summary>\n        /// <param name=\"span\"></param>\n        /// <param name=\"newLength\"></param>\n        constructor(span: TextSpan, newLength: number) {\n            if (newLength < 0) {\n                throw Errors.argumentOutOfRange(\"newLength\");\n            }\n\n            this._span = span;\n            this._newLength = newLength;\n        }\n\n        /// <summary>\n        /// The span of text before the edit which is being changed\n        /// </summary>\n        public span(): TextSpan {\n            return this._span;\n        }\n\n        /// <summary>\n        /// Width of the span after the edit.  A 0 here would represent a delete\n        /// </summary>\n        public newLength(): number {\n            return this._newLength;\n        }\n\n        public newSpan(): TextSpan {\n            return new TextSpan(this.span().start(), this.newLength());\n        }\n\n        public isUnchanged(): boolean {\n            return this.span().isEmpty() && this.newLength() === 0;\n        }\n\n        /// <summary>\n        /// Called to merge all the changes that occurred between one version of a script snapshot to \n        /// the next into a single change.  i.e. say a user did a box selection and made an edit.  That\n        /// will show up as N text change ranges between version V of a script and version V+1.  This\n        /// function collapses those N changes into a single change range valid between V and V+1.\n        /// </summary>\n        public static collapseChangesFromSingleVersion(changes: TextChangeRange[]): TextChangeRange {\n            var diff = 0;\n            var start = Constants.Max31BitInteger;\n            var end = 0;\n\n            // TODO: we are assuming that changes are normalized. That is currently not guaranteed,\n            // but changes that we get from IDE are normalized. Idealy changes should come in a kind\n            // of normalized change collection instead of IEnumerable to really guarantee that they\n            // are normalized.\n            for (var i = 0; i < changes.length; i++) {\n                var change = changes[i];\n                diff += change.newLength() - change.span().length();\n\n                if (change.span().start() < start) {\n                    start = change.span().start();\n                }\n\n                if (change.span().end() > end) {\n                    end = change.span().end();\n                }\n            }\n\n            if (start > end) {\n                return null;\n            }\n\n            var combined = TextSpan.fromBounds(start, end);\n            var newLen = combined.length() + diff;\n\n            return new TextChangeRange(combined, newLen);\n        }\n\n        /// <summary>\n        /// Called to merge all the changes that occurred across several versions of a script snapshot \n        /// into a single change.  i.e. if a user keeps making successive edits to a script we will\n        /// have a text change from V1 to V2, V2 to V3, ..., Vn.  \n        /// \n        /// This function will then merge those changes into a single change range valid between V1 and\n        /// Vn.\n        /// </summary>\n        public static collapseChangesAcrossMultipleVersions(changes: TextChangeRange[]): TextChangeRange {\n            if (changes.length === 0) {\n                return TextChangeRange.unchanged;\n            }\n\n            if (changes.length === 1) {\n                return changes[0];\n            }\n\n            // We change from talking about { { oldStart, oldLength }, newLength } to { oldStart, oldEnd, newEnd }\n            // as it makes things much easier to reason about.\n            var change0 = changes[0];\n\n            var oldStartN = change0.span().start();\n            var oldEndN = change0.span().end();\n            var newEndN = oldStartN + change0.newLength();\n\n            for (var i = 1; i < changes.length; i++) {\n                var nextChange = changes[i];\n\n                // Consider the following case:\n                // i.e. two edits.  The first represents the text change range { { 10, 50 }, 30 }.  i.e. The span starting\n                // at 10, with length 50 is reduced to length 30.  The second represents the text change range { { 30, 30 }, 40 }.\n                // i.e. the span starting at 30 with length 30 is increased to length 40.\n                //\n                //      0         10        20        30        40        50        60        70        80        90        100\n                //      -------------------------------------------------------------------------------------------------------\n                //                |                                                 /                                          \n                //                |                                            /----                                           \n                //  T1            |                                       /----                                                \n                //                |                                  /----                                                     \n                //                |                             /----                                                          \n                //      -------------------------------------------------------------------------------------------------------\n                //                                     |                            \\                                          \n                //                                     |                               \\                                       \n                //   T2                                |                                 \\                                     \n                //                                     |                                   \\                                   \n                //                                     |                                      \\                                \n                //      -------------------------------------------------------------------------------------------------------\n                //\n                // Merging these turns out to not be too difficult.  First, determining the new start of the change is trivial\n                // it\'s just the min of the old and new starts.  i.e.:\n                //\n                //      0         10        20        30        40        50        60        70        80        90        100\n                //      ------------------------------------------------------------*------------------------------------------\n                //                |                                                 /                                          \n                //                |                                            /----                                           \n                //  T1            |                                       /----                                                \n                //                |                                  /----                                                     \n                //                |                             /----                                                          \n                //      ----------------------------------------$-------------------$------------------------------------------\n                //                .                    |                            \\                                          \n                //                .                    |                               \\                                       \n                //   T2           .                    |                                 \\                                     \n                //                .                    |                                   \\                                   \n                //                .                    |                                      \\                                \n                //      ----------------------------------------------------------------------*--------------------------------\n                //\n                // (Note the dots represent the newly inferrred start.\n                // Determining the new and old end is also pretty simple.  Basically it boils down to paying attention to the\n                // absolute positions at the asterixes, and the relative change between the dollar signs. Basically, we see\n                // which if the two $\'s precedes the other, and we move that one forward until they line up.  in this case that\n                // means:\n                //\n                //      0         10        20        30        40        50        60        70        80        90        100\n                //      --------------------------------------------------------------------------------*----------------------\n                //                |                                                                     /                      \n                //                |                                                                /----                       \n                //  T1            |                                                           /----                            \n                //                |                                                      /----                                 \n                //                |                                                 /----                                      \n                //      ------------------------------------------------------------$------------------------------------------\n                //                .                    |                            \\                                          \n                //                .                    |                               \\                                       \n                //   T2           .                    |                                 \\                                     \n                //                .                    |                                   \\                                   \n                //                .                    |                                      \\                                \n                //      ----------------------------------------------------------------------*--------------------------------\n                //\n                // In other words (in this case), we\'re recognizing that the second edit happened after where the first edit\n                // ended with a delta of 20 characters (60 - 40).  Thus, if we go back in time to where the first edit started\n                // that\'s the same as if we started at char 80 instead of 60.  \n                //\n                // As it so happens, the same logic applies if the second edit precedes the first edit.  In that case rahter\n                // than pusing the first edit forward to match the second, we\'ll push the second edit forward to match the\n                // first.\n                //\n                // In this case that means we have { oldStart: 10, oldEnd: 80, newEnd: 70 } or, in TextChangeRange\n                // semantics: { { start: 10, length: 70 }, newLength: 60 }\n                //\n                // The math then works out as follows.\n                // If we have { oldStart1, oldEnd1, newEnd1 } and { oldStart2, oldEnd2, newEnd2 } then we can compute the \n                // final result like so:\n                //\n                // {\n                //      oldStart3: Min(oldStart1, oldStart2),\n                //      oldEnd3  : Max(oldEnd1, oldEnd1 + (oldEnd2 - newEnd1)),\n                //      newEnd3  : Max(newEnd2, newEnd2 + (newEnd1 - oldEnd2))\n                // }\n\n                var oldStart1 = oldStartN;\n                var oldEnd1 = oldEndN;\n                var newEnd1 = newEndN;\n\n                var oldStart2 = nextChange.span().start();\n                var oldEnd2 = nextChange.span().end();\n                var newEnd2 = oldStart2 + nextChange.newLength();\n\n                oldStartN = MathPrototype.min(oldStart1, oldStart2);\n                oldEndN = MathPrototype.max(oldEnd1, oldEnd1 + (oldEnd2 - newEnd1));\n                newEndN = MathPrototype.max(newEnd2, newEnd2 + (newEnd1 - oldEnd2));\n            }\n\n            return new TextChangeRange(TextSpan.fromBounds(oldStartN, oldEndN), /*newLength: */newEndN - oldStartN);\n        }\n    }\n}\n///<reference path=\'..\\core\\references.ts\' />\n\n///<reference path=\'characterCodes.ts\' />\n///<reference path=\'lineAndCharacter.ts\' />\n///<reference path=\'scriptSnapshot.ts\' />\n///<reference path=\'text.ts\' />\n///<reference path=\'textLine.ts\' />\n///<reference path=\'lineMap.ts\' />\n///<reference path=\'linePosition.ts\' />\n///<reference path=\'textFactory.ts\' />\n///<reference path=\'textUtilities.ts\' />\n///<reference path=\'textSpan.ts\' />\n\n// TextChangeRange depends on TextSpan.\n///<reference path=\'textChangeRange.ts\' />\n﻿/* -----------------------------------------------------------------------------\nThis file is based on or incorporates material from the projects listed below \n(collectively, \"Third Party Code\"). Microsoft is not the original author of the \nThird Party Code. The original copyright notice and the license, under which \nMicrosoft received such Third Party Code, are set forth below. Such licenses \nand notices are provided for informational purposes only. Microsoft, not the \nthird party, licenses the Third Party Code to you under the terms of the \nApache License, Version 2.0. See License.txt in the project root for complete \nlicense information. Microsoft reserves all rights not expressly granted under \nthe Apache 2.0 License, whether by implication, estoppel or otherwise. \n----------------------------------------------------------------------------- */\n\n/*\n    json2.js\n    2011-10-19\n\n    Public Domain.\n\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\n    See http://www.JSON.org/js.html\n\n\n    This code should be minified before deployment.\n    See http://javascript.crockford.com/jsmin.html\n\n    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n    NOT CONTROL.\n\n\n    This file creates a global JSON object containing two methods: stringify\n    and parse.\n\n        JSON.stringify(value, replacer, space)\n            value       any JavaScript value, usually an object or array.\n\n            replacer    an optional parameter that determines how object\n                        values are stringified for objects. It can be a\n                        function or an array of strings.\n\n            space       an optional parameter that specifies the indentation\n                        of nested structures. If it is omitted, the text will\n                        be packed without extra whitespace. If it is a number,\n                        it will specify the number of spaces to indent at each\n                        level. If it is a string (such as \'\\t\' or \'&nbsp;\'),\n                        it contains the characters used to indent at each level.\n\n            This method produces a JSON text from a JavaScript value.\n\n            When an object value is found, if the object contains a toJSON\n            method, its toJSON method will be called and the result will be\n            stringified. A toJSON method does not serialize: it returns the\n            value represented by the name/value pair that should be serialized,\n            or undefined if nothing should be serialized. The toJSON method\n            will be passed the key associated with the value, and this will be\n            bound to the value\n\n            For example, this would serialize Dates as ISO strings.\n\n                Date.prototype.toJSON = function (key) {\n                    function f(n) {\n                        // Format integers to have at least two digits.\n                        return n < 10 ? \'0\' + n : n;\n                    }\n\n                    return this.getUTCFullYear()   + \'-\' +\n                         f(this.getUTCMonth() + 1) + \'-\' +\n                         f(this.getUTCDate())      + \'T\' +\n                         f(this.getUTCHours())     + \':\' +\n                         f(this.getUTCMinutes())   + \':\' +\n                         f(this.getUTCSeconds())   + \'Z\';\n                };\n\n            You can provide an optional replacer method. It will be passed the\n            key and value of each member, with this bound to the containing\n            object. The value that is returned from your method will be\n            serialized. If your method returns undefined, then the member will\n            be excluded from the serialization.\n\n            If the replacer parameter is an array of strings, then it will be\n            used to select the members to be serialized. It filters the results\n            such that only members with keys listed in the replacer array are\n            stringified.\n\n            Values that do not have JSON representations, such as undefined or\n            functions, will not be serialized. Such values in objects will be\n            dropped; in arrays they will be replaced with null. You can use\n            a replacer function to replace those with JSON values.\n            JSON.stringify(undefined) returns undefined.\n\n            The optional space parameter produces a stringification of the\n            value that is filled with line breaks and indentation to make it\n            easier to read.\n\n            If the space parameter is a non-empty string, then that string will\n            be used for indentation. If the space parameter is a number, then\n            the indentation will be that many spaces.\n\n            Example:\n\n            text = JSON.stringify([\'e\', {pluribus: \'unum\'}]);\n            // text is \'[\"e\",{\"pluribus\":\"unum\"}]\'\n\n\n            text = JSON.stringify([\'e\', {pluribus: \'unum\'}], null, \'\\t\');\n            // text is \'[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]\'\n\n            text = JSON.stringify([new Date()], function (key, value) {\n                return this[key] instanceof Date ?\n                    \'Date(\' + this[key] + \')\' : value;\n            });\n            // text is \'[\"Date(---current time---)\"]\'\n\n\n        JSON.parse(text, reviver)\n            This method parses a JSON text to produce an object or array.\n            It can throw a SyntaxError exception.\n\n            The optional reviver parameter is a function that can filter and\n            transform the results. It receives each of the keys and values,\n            and its return value is used instead of the original value.\n            If it returns what it received, then the structure is not modified.\n            If it returns undefined then the member is deleted.\n\n            Example:\n\n            // Parse the text. Values that look like ISO date strings will\n            // be converted to Date objects.\n\n            myData = JSON.parse(text, function (key, value) {\n                var a;\n                if (typeof value === \'string\') {\n                    a =\n/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n                    if (a) {\n                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n                            +a[5], +a[6]));\n                    }\n                }\n                return value;\n            });\n\n            myData = JSON.parse(\'[\"Date(09/09/2001)\"]\', function (key, value) {\n                var d;\n                if (typeof value === \'string\' &&\n                        value.slice(0, 5) === \'Date(\' &&\n                        value.slice(-1) === \')\') {\n                    d = new Date(value.slice(5, -1));\n                    if (d) {\n                        return d;\n                    }\n                }\n                return value;\n            });\n\n\n    This is a reference implementation. You are free to copy, modify, or\n    redistribute.\n*/\n\n/*jslint evil: true, regexp: true */\n\n/*members \"\", \"\\b\", \"\\t\", \"\\n\", \"\\f\", \"\\r\", \"\\\"\", JSON, \"\\\\\", apply,\n    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\nvar JSON2: any = {};\n\n(function() {\n    \'use strict\';\n\n    function f(n) {\n        // Format integers to have at least two digits.\n        return n < 10 ? \'0\' + n : n;\n    }\n\n    if (typeof Date.prototype.toJSON !== \'function\') {\n\n        (<any>Date.prototype.toJSON) = <any>function (key) {\n\n            return isFinite(this.valueOf())\n                ? this.getUTCFullYear() + \'-\' +\n                    f(this.getUTCMonth() + 1) + \'-\' +\n                    f(this.getUTCDate()) + \'T\' +\n                    f(this.getUTCHours()) + \':\' +\n                    f(this.getUTCMinutes()) + \':\' +\n                    f(this.getUTCSeconds()) + \'Z\'\n                : null;\n        };\n\n        var strProto: any = String.prototype;\n        var numProto: any = Number.prototype;\n        numProto.JSON = strProto.JSON =\n            (<any>Boolean).prototype.toJSON = function (key) {\n                return this.valueOf();\n            };\n    }\n\n    var escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        gap,\n        indent,\n        meta = {    // table of character substitutions\n            \'\\b\': \'\\\\b\',\n            \'\\t\': \'\\\\t\',\n            \'\\n\': \'\\\\n\',\n            \'\\f\': \'\\\\f\',\n            \'\\r\': \'\\\\r\',\n            \'\"\': \'\\\\\"\',\n            \'\\\\\': \'\\\\\\\\\'\n        },\n        rep;\n\n\n    function quote(string) {\n\n        // If the string contains no control characters, no quote characters, and no\n        // backslash characters, then we can safely slap some quotes around it.\n        // Otherwise we must also replace the offending characters with safe escape\n        // sequences.\n\n        escapable.lastIndex = <any>0;\n        return escapable.test(string) ? \'\"\' + string.replace(escapable, function (a: string) {\n            var c = meta[a];\n            return typeof c === \'string\'\n                ? c\n                : \'\\\\u\' + (\'0000\' + a.charCodeAt(0).toString(16)).slice(-4);\n        }) + \'\"\' : \'\"\' + string + \'\"\';\n    }\n\n\n    function str(key, holder): string {\n\n        // Produce a string from holder[key].\n\n        var i,          // The loop counter.\n            k = null,          // The member key.\n            v,          // The member value.\n            length,\n            mind = gap,\n            partial,\n            value = holder[key];\n\n        // If the value has a toJSON method, call it to obtain a replacement value.\n\n        if (value && typeof value === \'object\' &&\n                typeof value.toJSON === \'function\') {\n            value = value.toJSON(key);\n        }\n\n        // If we were called with a replacer function, then call the replacer to\n        // obtain a replacement value.\n\n        if (typeof rep === \'function\') {\n            value = rep.call(holder, key, value);\n        }\n\n        // What happens next depends on the value\'s type.\n\n        switch (typeof value) {\n            case \'string\':\n                return quote(value);\n\n            case \'number\':\n\n                // JSON numbers must be finite. Encode non-finite numbers as null.\n\n                return isFinite(value) ? String(value) : \'null\';\n\n            case \'boolean\':\n            case \'null\':\n\n                // If the value is a boolean or null, convert it to a string. Note:\n                // typeof null does not produce \'null\'. The case is included here in\n                // the remote chance that this gets fixed someday.\n\n                return String(value);\n\n            // If the type is \'object\', we might be dealing with an object or an array or\n            // null.\n\n            case \'object\':\n\n                // Due to a specification blunder in ECMAScript, typeof null is \'object\',\n                // so watch out for that case.\n\n                if (!value) {\n                    return \'null\';\n                }\n\n                // Make an array to hold the partial results of stringifying this object value.\n\n                gap += indent;\n                partial = [];\n\n                // Is the value an array?\n\n                if (Object.prototype.toString.apply(value, []) === \'[object Array]\') {\n\n                    // The value is an array. Stringify every element. Use null as a placeholder\n                    // for non-JSON values.\n\n                    length = value.length;\n                    for (var i = 0; i < length; i += 1) {\n                        partial[i] = str(i, value) || \'null\';\n                    }\n\n                    // Join all of the elements together, separated with commas, and wrap them in\n                    // brackets.\n\n                    v = partial.length === 0\n                        ? \'[]\'\n                        : gap\n                        ? \'[\\n\' + gap + partial.join(\',\\n\' + gap) + \'\\n\' + mind + \']\'\n                        : \'[\' + partial.join(\',\') + \']\';\n                    gap = mind;\n                    return v;\n                }\n\n                // If the replacer is an array, use it to select the members to be stringified.\n\n                if (rep && typeof rep === \'object\') {\n                    length = rep.length;\n                    for (var i = 0; i < length; i += 1) {\n                        if (typeof rep[i] === \'string\') {\n                            k = rep[i];\n                            v = str(k, value);\n                            if (v) {\n                                partial.push(quote(k) + (gap ? \': \' : \':\') + v);\n                            }\n                        }\n                    }\n                } else {\n\n                    // Otherwise, iterate through all of the keys in the object.\n\n                    for (k in value) {\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {\n                            v = str(k, value);\n                            if (v) {\n                                partial.push(quote(k) + (gap ? \': \' : \':\') + v);\n                            }\n                        }\n                    }\n                }\n\n                // Join all of the member texts together, separated with commas,\n                // and wrap them in braces.\n\n                v = partial.length === 0\n                    ? \'{}\'\n                    : gap\n                    ? \'{\\n\' + gap + partial.join(\',\\n\' + gap) + \'\\n\' + mind + \'}\'\n                    : \'{\' + partial.join(\',\') + \'}\';\n                gap = mind;\n                return v;\n        }\n    }\n\n    // If the JSON object does not yet have a stringify method, give it one.\n\n    if (typeof JSON2.stringify !== \'function\') {\n        JSON2.stringify = function (value, replacer, space) {\n\n            // The stringify method takes a value and an optional replacer, and an optional\n            // space parameter, and returns a JSON text. The replacer can be a function\n            // that can replace values, or an array of strings that will select the keys.\n            // A default replacer method can be provided. Use of the space parameter can\n            // produce text that is more easily readable.\n\n            var i;\n            gap = \'\';\n            indent = \'\';\n\n            // If the space parameter is a number, make an indent string containing that\n            // many spaces.\n\n            if (typeof space === \'number\') {\n                for (var i = 0; i < space; i += 1) {\n                    indent += \' \';\n                }\n\n                // If the space parameter is a string, it will be used as the indent string.\n\n            } else if (typeof space === \'string\') {\n                indent = space;\n            }\n\n            // If there is a replacer, it must be a function or an array.\n            // Otherwise, throw an error.\n\n            rep = replacer;\n            if (replacer && typeof replacer !== \'function\' &&\n                    (typeof replacer !== \'object\' ||\n                    typeof replacer.length !== \'number\')) {\n                throw new Error(\'JSON.stringify\');\n            }\n\n            // Make a fake root object containing our value under the key of \'\'.\n            // Return the result of stringifying the value.\n\n            return str(\'\', { \'\': value });\n        };\n    }\n} ());\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class CharacterInfo {\n        public static isDecimalDigit(c: number): boolean {\n            return c >= CharacterCodes._0 && c <= CharacterCodes._9;\n        }\n\n        public static isHexDigit(c: number): boolean {\n            return CharacterInfo.isDecimalDigit(c) ||\n                   (c >= CharacterCodes.A && c <= CharacterCodes.F) ||\n                   (c >= CharacterCodes.a && c <= CharacterCodes.f);\n        }\n\n        public static hexValue(c: number): number {\n            // Debug.assert(isHexDigit(c));\n            return CharacterInfo.isDecimalDigit(c)\n                ? (c - CharacterCodes._0)\n                : (c >= CharacterCodes.A && c <= CharacterCodes.F)\n                    ? c - CharacterCodes.A + 10\n                    : c - CharacterCodes.a + 10;\n        }\n\n        public static isWhitespace(ch: number): boolean {\n            switch (ch) {\n                // Unicode 3.0 space characters.\n                case CharacterCodes.space:\n                case CharacterCodes.nonBreakingSpace:\n                case CharacterCodes.enQuad:\n                case CharacterCodes.emQuad:\n                case CharacterCodes.enSpace:\n                case CharacterCodes.emSpace:\n                case CharacterCodes.threePerEmSpace:\n                case CharacterCodes.fourPerEmSpace:\n                case CharacterCodes.sixPerEmSpace:\n                case CharacterCodes.figureSpace:\n                case CharacterCodes.punctuationSpace:\n                case CharacterCodes.thinSpace:\n                case CharacterCodes.hairSpace:\n                case CharacterCodes.zeroWidthSpace:\n                case CharacterCodes.narrowNoBreakSpace:\n                case CharacterCodes.ideographicSpace:\n\n                case CharacterCodes.tab:\n                case CharacterCodes.verticalTab:\n                case CharacterCodes.formFeed:\n                case CharacterCodes.byteOrderMark:\n                    return true;\n            }\n\n            return false;\n        }\n\n        public static isLineTerminator(ch: number): boolean {\n            switch (ch) {\n                case CharacterCodes.carriageReturn:\n                case CharacterCodes.lineFeed:\n                case CharacterCodes.paragraphSeparator:\n                case CharacterCodes.lineSeparator:\n                    return true;\n            }\n\n            return false;\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export enum SyntaxConstants {\n        // Masks that we use to place information about trivia into a single int. The first two flags \n        // mark bools that tell us if the trivia contains a comment or a newline. The width of the \n        // trivia is then stored in the rest of the int.  This allows trivia of nearly any length.\n        // However, nearly all of the time the trivia will be less than 511MB, and will fit into 31\n        // bits (which will only be stored a a single 32bit int in chakra).\n        TriviaNewLineMask = 0x00000001, //  0000 0000 0000 0000 0000 0000 0000 0001\n        TriviaCommentMask = 0x00000002, //  0000 0100 0000 0000 0000 0000 0000 0010\n        TriviaFullWidthShift = 2,       //  1111 1111 1111 1111 1111 1111 1111 1100\n\n        // Masks that we use to place information about a node into a single int.  The first bit tells\n        // us if we\'ve computed the data for a node.\n        //\n        // The second bit tells us if the node is incrementally reusable if it does not\n        // containe any skipped tokens, zero width tokens, regex tokens in it (\"/\", \"/=\" or \"/.../\"), \n        // and contains no tokens that were parser generated.\n        //\n        // The next bit lets us know if the nodes was parsed in a strict context or node.  A node can\n        // only be used by the incremental parser if it is parsed in the same strict context as before.\n        // last masks off the part of the int\n        //\n        // The width of the node is stored in the remainder of the int.  This allows us up to 512MB\n        // for a node by using all 29 bits.  However, in the common case, we\'ll use less than 29 bits\n        // for the width.  Thus, the info will be stored in a single int in chakra.\n        NodeDataComputed              = 0x00000001, // 0000 0000 0000 0000 0000 0000 0000 0001\n        NodeIncrementallyUnusableMask = 0x00000002, // 0000 0000 0000 0000 0000 0000 0000 0010\n        NodeParsedInStrictModeMask    = 0x00000004, // 0000 0000 0000 0000 0000 0000 0000 0100\n        NodeFullWidthShift            = 3,          // 1111 1111 1111 1111 1111 1111 1111 1000\n    }\n}\n///<reference path=\'references.ts\' />\n\nclass FormattingOptions {\n    constructor(public useTabs: boolean,\n                public spacesPerTab: number,\n                public indentSpaces: number,\n                public newLineCharacter: string) {\n    }\n\n    public static defaultOptions = new FormattingOptions(/*useTabs:*/ false, /*spacesPerTab:*/ 4, /*indentSpaces:*/ 4, /*newLineCharacter*/ \"\\r\\n\");\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript.Indentation {\n    export function columnForEndOfToken(token: ISyntaxToken,\n                                        syntaxInformationMap: SyntaxInformationMap,\n                                        options: FormattingOptions): number {\n        return columnForStartOfToken(token, syntaxInformationMap, options) + token.width();\n    }\n\n    export function columnForStartOfToken(token: ISyntaxToken,\n                                          syntaxInformationMap: SyntaxInformationMap,\n                                          options: FormattingOptions): number {\n        // Walk backward from this token until we find the first token in the line.  For each token \n        // we see (that is not the first tokem in line), push the entirety of the text into the text \n        // array.  Then, for the first token, add its text (without its leading trivia) to the text\n        // array.  i.e. if we have:\n        //\n        //      var foo = a => bar();\n        //\n        // And we want the column for the start of \'bar\', then we\'ll add the underlinded portions to\n        // the text array:\n        //\n        //      var foo = a => bar();\n        //                  ___\n        //                __\n        //              __\n        //          ____\n        //      ____\n        var firstTokenInLine = syntaxInformationMap.firstTokenInLineContainingToken(token);\n        var leadingTextInReverse: string[] = [];\n\n        var current = token;\n        while (current !== firstTokenInLine) {\n            current = syntaxInformationMap.previousToken(current);\n\n            if (current === firstTokenInLine) {\n                // We\'re at the first token in teh line.\n                // We don\'t want the leading trivia for this token.  That will be taken care of in\n                // columnForFirstNonWhitespaceCharacterInLine.  So just push the trailing trivia\n                // and then the token text.\n                leadingTextInReverse.push(current.trailingTrivia().fullText());\n                leadingTextInReverse.push(current.text());\n            }\n            else {\n                // We\'re at an intermediate token on the line.  Just push all its text into the array.\n                leadingTextInReverse.push(current.fullText());\n            }\n        }\n\n        // Now, add all trivia to the start of the line on the first token in the list.\n        collectLeadingTriviaTextToStartOfLine(firstTokenInLine, leadingTextInReverse);\n\n        return columnForLeadingTextInReverse(leadingTextInReverse, options);\n    }\n\n    export function columnForStartOfFirstTokenInLineContainingToken(\n            token: ISyntaxToken,\n            syntaxInformationMap: SyntaxInformationMap,\n            options: FormattingOptions): number {\n        // Walk backward through the tokens until we find the first one on the line.\n        var firstTokenInLine = syntaxInformationMap.firstTokenInLineContainingToken(token);\n        var leadingTextInReverse: string[] = [];\n\n        // Now, add all trivia to the start of the line on the first token in the list.\n        collectLeadingTriviaTextToStartOfLine(firstTokenInLine, leadingTextInReverse);\n\n        return columnForLeadingTextInReverse(leadingTextInReverse, options);\n    }\n\n    // Collect all the trivia that precedes this token.  Stopping when we hit a newline trivia\n    // or a multiline comment that spans multiple lines.  This is meant to be called on the first\n    // token in a line.\n    function collectLeadingTriviaTextToStartOfLine(firstTokenInLine: ISyntaxToken,\n                                                   leadingTextInReverse: string[]) {\n        var leadingTrivia = firstTokenInLine.leadingTrivia();\n\n        for (var i = leadingTrivia.count() - 1; i >= 0; i--) {\n            var trivia = leadingTrivia.syntaxTriviaAt(i);\n            if (trivia.kind() === SyntaxKind.NewLineTrivia) {\n                break;\n            }\n\n            if (trivia.kind() === SyntaxKind.MultiLineCommentTrivia) {\n                var lineSegments = Syntax.splitMultiLineCommentTriviaIntoMultipleLines(trivia);\n                leadingTextInReverse.push(ArrayUtilities.last(lineSegments));\n\n                if (lineSegments.length > 0) {\n                    // This multiline comment actually spanned multiple lines.  So we\'re done.\n                    break;\n                }\n\n                // It was only on a single line, so keep on going.\n            }\n\n            leadingTextInReverse.push(trivia.fullText());\n        }\n    }\n\n    function columnForLeadingTextInReverse(leadingTextInReverse: string[],\n                                           options: FormattingOptions): number {\n        var column = 0;\n\n        // walk backwards.  This means we\'re actually walking forward from column 0 to the start of\n        // the token.\n        for (var i = leadingTextInReverse.length - 1; i >= 0; i--) {\n            var text = leadingTextInReverse[i];\n            column = columnForPositionInStringWorker(text, text.length, column, options);\n       }\n\n        return column;\n    }\n\n    // Returns the column that this input string ends at (assuming it starts at column 0).\n    export function columnForPositionInString(input: string, position: number, options: FormattingOptions): number {\n        return columnForPositionInStringWorker(input, position, 0, options);\n    }\n    \n    function columnForPositionInStringWorker(input: string, position: number, startColumn: number, options: FormattingOptions): number {\n        var column = startColumn;\n        var spacesPerTab = options.spacesPerTab;\n\n        for (var j = 0; j < position; j++) {\n            var ch = input.charCodeAt(j);\n\n            if (ch === CharacterCodes.tab) {\n                column += spacesPerTab - column % spacesPerTab;\n            }\n            else {\n                column++;\n            }\n        }\n\n        return column;\n    }\n\n    export function indentationString(column: number, options: FormattingOptions): string {\n        var numberOfTabs = 0;\n        var numberOfSpaces = MathPrototype.max(0, column);\n\n        if (options.useTabs) {\n            numberOfTabs = Math.floor(column / options.spacesPerTab);\n            numberOfSpaces -= numberOfTabs * options.spacesPerTab;\n        }\n\n        return StringUtilities.repeat(\'\\t\', numberOfTabs) +\n               StringUtilities.repeat(\' \', numberOfSpaces);\n    }\n\n    export function indentationTrivia(column: number, options: FormattingOptions): ISyntaxTrivia {\n        return Syntax.whitespace(this.indentationString(column, options));\n    }\n\n    export function firstNonWhitespacePosition(value: string): number {\n        for (var i = 0; i < value.length; i++) {\n            var ch = value.charCodeAt(i);\n            if (!CharacterInfo.isWhitespace(ch)) {\n                return i;\n            }\n        }\n\n        return value.length;\n    }\n}\nmodule TypeScript {\n    export enum LanguageVersion {\n        EcmaScript3,\n        EcmaScript5,\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class ParseOptions {\n        private _allowAutomaticSemicolonInsertion: boolean;\n        private _allowModuleKeywordInExternalModuleReference: boolean;\n\n        constructor(allowAutomaticSemicolonInsertion, allowModuleKeywordInExternalModuleReference) {\n            this._allowAutomaticSemicolonInsertion = allowAutomaticSemicolonInsertion;\n            this._allowModuleKeywordInExternalModuleReference = allowModuleKeywordInExternalModuleReference;\n        }\n\n        public toJSON(key) {\n            return { allowAutomaticSemicolonInsertion: this._allowAutomaticSemicolonInsertion,\n                     allowModuleKeywordInExternalModuleReference: this._allowModuleKeywordInExternalModuleReference };\n        }\n\n        public allowAutomaticSemicolonInsertion(): boolean {\n            return this._allowAutomaticSemicolonInsertion;\n        }\n\n        public allowModuleKeywordInExternalModuleReference(): boolean {\n            return this._allowModuleKeywordInExternalModuleReference;\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class PositionedElement {\n        private _parent: PositionedElement;\n        private _element: ISyntaxElement;\n        private _fullStart: number;\n\n        constructor(parent: PositionedElement, element: ISyntaxElement, fullStart: number) {\n            this._parent = parent;\n            this._element = element;\n            this._fullStart = fullStart;\n        }\n\n        public static create(parent: PositionedElement, element: ISyntaxElement, fullStart: number): PositionedElement {\n            if (element === null) {\n                return null;\n            }\n\n            if (element.isNode()) {\n                return new PositionedNode(parent, <SyntaxNode>element, fullStart);\n            }\n            else if (element.isToken()) {\n                return new PositionedToken(parent, <ISyntaxToken>element, fullStart);\n            }\n            else if (element.isList()) {\n                return new PositionedList(parent, <ISyntaxList>element, fullStart);\n            }\n            else if (element.isSeparatedList()) {\n                return new PositionedSeparatedList(parent, <ISeparatedSyntaxList>element, fullStart);\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        public parent(): PositionedElement {\n            return this._parent;\n        }\n\n        public parentElement(): ISyntaxElement {\n            return this._parent && this._parent._element;\n        }\n\n        public element(): ISyntaxElement {\n            return this._element;\n        }\n\n        public kind(): SyntaxKind {\n            return this.element().kind();\n        }\n\n        public childCount(): number {\n            return this.element().childCount();\n        }\n\n        public childAt(index: number): PositionedElement {\n            var offset = 0;\n\n            for (var i = 0; i < index; i++) {\n                offset += this.element().childAt(i).fullWidth();\n            }\n\n            return PositionedElement.create(this, this.element().childAt(index), offset);\n        }\n\n        public getPositionedChild(child: ISyntaxElement) {\n            var offset = Syntax.childOffset(this.element(), child);\n\n            return PositionedElement.create(this, child, offset);\n        }\n\n        public fullStart(): number {\n            return this._fullStart;\n        }\n\n        public fullEnd(): number {\n            return this.fullStart() + this.element().fullWidth();\n        }\n\n        public fullWidth(): number {\n            return this.element().fullWidth();\n        }\n\n        public start(): number {\n            return this.fullStart() + this.element().leadingTriviaWidth();\n        }\n\n        public end(): number {\n            return this.fullStart() + this.element().leadingTriviaWidth() + this.element().width();\n        }\n\n        public root(): PositionedNode {\n            var current = this;\n            while (current.parent() !== null) {\n                current = current.parent();\n            }\n\n            return <PositionedNode>current;\n        }\n\n        public containingNode(): PositionedNode {\n            var current = this.parent();\n\n            while (current !== null && !current.element().isNode()) {\n                current = current.parent();\n            }\n\n            return <PositionedNode>current;\n        }\n    }\n\n    export class PositionedNodeOrToken extends PositionedElement {\n        constructor(parent: PositionedElement, nodeOrToken: ISyntaxNodeOrToken, fullStart: number) {\n            super(parent, nodeOrToken, fullStart);\n        }\n\n        public nodeOrToken(): ISyntaxNodeOrToken {\n            return <ISyntaxNodeOrToken>this.element();\n        }\n    }\n\n    export class PositionedNode extends PositionedNodeOrToken {\n        constructor(parent: PositionedElement, node: SyntaxNode, fullStart: number) {\n            super(parent, node, fullStart);\n        }\n\n        public node(): SyntaxNode {\n            return <SyntaxNode>this.element();\n        }\n    }\n\n    export class PositionedToken extends PositionedNodeOrToken {\n        constructor(parent: PositionedElement, token: ISyntaxToken, fullStart: number) {\n            super(parent, token, fullStart);\n        }\n\n        public token(): ISyntaxToken {\n            return <ISyntaxToken>this.element();\n        }\n\n        public previousToken(includeSkippedTokens: boolean = false): PositionedToken {\n            var triviaList = this.token().leadingTrivia();\n            if (includeSkippedTokens && triviaList && triviaList.hasSkippedToken()) {\n                var currentTriviaEndPosition = this.start();\n                for (var i = triviaList.count() - 1; i >= 0; i--) {\n                    var trivia = triviaList.syntaxTriviaAt(i);\n                    if (trivia.isSkippedToken()) {\n                        return new PositionedSkippedToken(this, trivia.skippedToken(), currentTriviaEndPosition - trivia.fullWidth());\n                    }\n\n                    currentTriviaEndPosition -= trivia.fullWidth();\n                }\n            }\n\n            var start = this.fullStart();\n            if (start === 0) {\n                return null;\n            }\n\n            return this.root().node().findToken(start - 1, includeSkippedTokens);\n        }\n\n        public nextToken(includeSkippedTokens: boolean = false): PositionedToken {\n            if (this.token().tokenKind === SyntaxKind.EndOfFileToken) {\n                return null;\n            }\n\n            var triviaList = this.token().trailingTrivia();\n            if (includeSkippedTokens && triviaList && triviaList.hasSkippedToken()) {\n                var fullStart = this.end();\n                for (var i =0, n = triviaList.count(); i < n; i++) {\n                    var trivia = triviaList.syntaxTriviaAt(i);\n                    if (trivia.isSkippedToken()) {\n                        return new PositionedSkippedToken(this, trivia.skippedToken(), fullStart);\n                    }\n\n                    fullStart += trivia.fullWidth();\n                }\n            }\n\n            return this.root().node().findToken(this.fullEnd(), includeSkippedTokens);\n        }\n    }\n\n    export class PositionedList extends PositionedElement {\n        constructor(parent: PositionedElement, list: ISyntaxList, fullStart: number) {\n            super(parent, list, fullStart);\n        }\n\n        public list(): ISyntaxList {\n            return <ISyntaxList>this.element();\n        }\n    }\n\n    export class PositionedSeparatedList extends PositionedElement {\n        constructor(parent: PositionedElement, list: ISeparatedSyntaxList, fullStart: number) {\n            super(parent, list, fullStart);\n        }\n\n        public list(): ISeparatedSyntaxList {\n            return <ISeparatedSyntaxList>this.element();\n        }\n    }\n\n    export class PositionedSkippedToken extends PositionedToken {\n        private _parentToken: PositionedToken;\n\n        constructor(parentToken: PositionedToken, token: ISyntaxToken, fullStart: number) {\n            super(parentToken.parent(), token, fullStart);\n            this._parentToken = parentToken;\n        }\n\n        public parentToken(): PositionedToken {\n            return this._parentToken;\n        }\n\n        public previousToken(includeSkippedTokens: boolean = false): PositionedToken {\n            var start = this.fullStart();\n\n            // find previous skipped token within the same parent\n            if (includeSkippedTokens) {\n                var previousToken: PositionedToken;\n\n                if (start >= this.parentToken().end()) {\n                    // This skipped token was on the right of positioned token, the skipped token found before it in the \n                    // trailing trivia, if the search for a previous skipped token in the same trivia list return it,\n                    // else return the parent token as the previous token\n                    previousToken = Syntax.findSkippedTokenInTrailingTriviaList(this.parentToken(), start - 1);\n\n                    if (previousToken) {\n                        return previousToken;\n                    }\n\n                    return this.parentToken();\n                }\n                else {\n                    previousToken = Syntax.findSkippedTokenInLeadingTriviaList(this.parentToken(), start - 1);\n\n                    if (previousToken) {\n                        return previousToken;\n                    }\n                }\n            }\n\n            var start = this.parentToken().fullStart();\n            if (start === 0) {\n                return null;\n            }\n\n            return this.root().node().findToken(start - 1, includeSkippedTokens);\n        }\n        \n        public nextToken(includeSkippedTokens: boolean = false): PositionedToken {\n            if (this.token().tokenKind === SyntaxKind.EndOfFileToken) {\n                return null;\n            }\n\n            if (includeSkippedTokens) {\n                var end = this.end();\n                var nextToken: PositionedToken;\n\n                if (end <= this.parentToken().start()) {\n                    // This skipped token was on the left of positioned token, the skipped token found after it in the \n                    // leading trivia, if the search for a next skipped token in the same trivia list return it,\n                    // else return the parent token as the next token\n                    nextToken = Syntax.findSkippedTokenInLeadingTriviaList(this.parentToken(), end);\n\n                    if (nextToken) {\n                        return nextToken;\n                    }\n\n                    return this.parentToken();\n                }\n                else {\n                    nextToken = Syntax.findSkippedTokenInTrailingTriviaList(this.parentToken(), end);\n\n                    if (nextToken) {\n                        return nextToken;\n                    }\n                }\n            }\n\n            return this.root().node().findToken(this.parentToken().fullEnd(), includeSkippedTokens);\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class Scanner implements ISlidingWindowSource {\n        private slidingWindow: SlidingWindow;\n\n        private fileName: string;\n        private text: ISimpleText;\n        private _languageVersion: LanguageVersion;\n\n        private static isKeywordStartCharacter: boolean[] = [];\n        private static isIdentifierStartCharacter: boolean[] = [];\n        public static isIdentifierPartCharacter: boolean[] = [];\n        private static isNumericLiteralStart: boolean[] = [];\n\n        private static initializeStaticData() {\n            if (Scanner.isKeywordStartCharacter.length === 0) {\n                Scanner.isKeywordStartCharacter = ArrayUtilities.createArray(CharacterCodes.maxAsciiCharacter, false);\n                Scanner.isIdentifierStartCharacter = ArrayUtilities.createArray(CharacterCodes.maxAsciiCharacter, false);\n                Scanner.isIdentifierPartCharacter = ArrayUtilities.createArray(CharacterCodes.maxAsciiCharacter, false);\n                Scanner.isNumericLiteralStart = ArrayUtilities.createArray(CharacterCodes.maxAsciiCharacter, false);\n\n                for (var character = 0; character < CharacterCodes.maxAsciiCharacter; character++) {\n                    if (character >= CharacterCodes.a && character <= CharacterCodes.z) {\n                        Scanner.isIdentifierStartCharacter[character] = true;\n                        Scanner.isIdentifierPartCharacter[character] = true;\n                    }\n                    else if ((character >= CharacterCodes.A && character <= CharacterCodes.Z) ||\n                             character === CharacterCodes._ ||\n                             character === CharacterCodes.$) {\n                        Scanner.isIdentifierStartCharacter[character] = true;\n                        Scanner.isIdentifierPartCharacter[character] = true;\n                    }\n                    else if (character >= CharacterCodes._0 && character <= CharacterCodes._9) {\n                        Scanner.isIdentifierPartCharacter[character] = true;\n                        Scanner.isNumericLiteralStart[character] = true;\n                    }\n                }\n\n                Scanner.isNumericLiteralStart[CharacterCodes.dot] = true;\n\n                for (var keywordKind = SyntaxKind.FirstKeyword; keywordKind <= SyntaxKind.LastKeyword; keywordKind++) {\n                    var keyword = SyntaxFacts.getText(keywordKind);\n                    Scanner.isKeywordStartCharacter[keyword.charCodeAt(0)] = true;\n                }\n            }\n        }\n\n        constructor(fileName: string,\n                    text: ISimpleText,\n                    languageVersion: LanguageVersion,\n                    window: number[] = ArrayUtilities.createArray(2048, 0)) {\n            Scanner.initializeStaticData();\n\n            this.slidingWindow = new SlidingWindow(this, window, 0, text.length());\n            this.fileName = fileName;\n            this.text = text;\n            this._languageVersion = languageVersion;\n        }\n\n        public languageVersion(): LanguageVersion {\n            return this._languageVersion;\n        }\n\n        public fetchMoreItems(argument: any, sourceIndex: number, window: number[], destinationIndex: number, spaceAvailable: number): number {\n            var charactersRemaining = this.text.length() - sourceIndex;\n            var amountToRead = MathPrototype.min(charactersRemaining, spaceAvailable);\n            this.text.copyTo(sourceIndex, window, destinationIndex, amountToRead);\n            return amountToRead;\n        }\n\n        private currentCharCode(): number {\n            return this.slidingWindow.currentItem(/*argument:*/ null);\n        }\n\n        public absoluteIndex(): number {\n            return this.slidingWindow.absoluteIndex();\n        }\n\n        // Set\'s the scanner to a specific position in the text.\n        public setAbsoluteIndex(index: number): void {\n            this.slidingWindow.setAbsoluteIndex(index);\n        }\n\n        // Scans a token starting at the current position.  Any errors encountered will be added to \n        // \'diagnostics\'.\n        public scan(diagnostics: SyntaxDiagnostic[], allowRegularExpression: boolean): ISyntaxToken {\n            var diagnosticsLength = diagnostics.length;\n            var fullStart = this.slidingWindow.absoluteIndex();\n            var leadingTriviaInfo = this.scanTriviaInfo(diagnostics, /*isTrailing: */ false);\n\n            var start = this.slidingWindow.absoluteIndex();\n            var kind = this.scanSyntaxToken(diagnostics, allowRegularExpression);\n            var end = this.slidingWindow.absoluteIndex();\n\n            var trailingTriviaInfo = this.scanTriviaInfo(diagnostics,/*isTrailing: */true);\n\n            var token = this.createToken(fullStart, leadingTriviaInfo, start, kind, end, trailingTriviaInfo);\n\n            // If we produced any diagnostics while creating this token, then realize the token so \n            // it won\'t be reused in incremental scenarios.\n            return diagnosticsLength !== diagnostics.length\n                ? Syntax.realizeToken(token)\n                : token;\n        }\n\n        private createToken(fullStart: number, leadingTriviaInfo: number, start: number, kind: SyntaxKind, end: number, trailingTriviaInfo: number): ISyntaxToken {\n            if (kind >= SyntaxKind.FirstFixedWidth) {\n                if (leadingTriviaInfo === 0) {\n                    if (trailingTriviaInfo === 0) {\n                        return new Syntax.FixedWidthTokenWithNoTrivia(kind);\n                    }\n                    else {\n                        return new Syntax.FixedWidthTokenWithTrailingTrivia(this.text, fullStart, kind, trailingTriviaInfo);\n                    }\n                }\n                else if (trailingTriviaInfo === 0) {\n                    return new Syntax.FixedWidthTokenWithLeadingTrivia(this.text, fullStart, kind, leadingTriviaInfo);\n                }\n                else {\n                    return new Syntax.FixedWidthTokenWithLeadingAndTrailingTrivia(this.text, fullStart, kind, leadingTriviaInfo, trailingTriviaInfo);\n                }\n            }\n            else {\n                var width = end - start;\n                if (leadingTriviaInfo === 0) {\n                    if (trailingTriviaInfo === 0) {\n                        return new Syntax.VariableWidthTokenWithNoTrivia(this.text, fullStart, kind, width);\n                    }\n                    else {\n                        return new Syntax.VariableWidthTokenWithTrailingTrivia(this.text, fullStart, kind, width, trailingTriviaInfo);\n                    }\n                }\n                else if (trailingTriviaInfo === 0) {\n                    return new Syntax.VariableWidthTokenWithLeadingTrivia(this.text, fullStart, kind, leadingTriviaInfo, width);\n                }\n                else {\n                    return new Syntax.VariableWidthTokenWithLeadingAndTrailingTrivia(this.text, fullStart, kind, leadingTriviaInfo, width, trailingTriviaInfo);\n                }\n            }\n        }\n\n        private static triviaWindow = ArrayUtilities.createArray(2048, 0);\n\n        // Scans a subsection of \'text\' as trivia.\n        public static scanTrivia(text: ISimpleText, start: number, length: number, isTrailing: boolean): ISyntaxTriviaList {\n            // Debug.assert(length > 0);\n            var scanner = new Scanner(/*fileName:*/ null, text.subText(new TextSpan(start, length)), LanguageVersion.EcmaScript5, Scanner.triviaWindow);\n            return scanner.scanTrivia(isTrailing);\n        }\n\n        private scanTrivia(isTrailing: boolean): ISyntaxTriviaList {\n            // Keep this exactly in sync with scanTriviaInfo\n            var trivia: ISyntaxTrivia[] = [];\n\n            while (true) {\n                if (!this.slidingWindow.isAtEndOfSource()) {\n                    var ch = this.currentCharCode();\n\n                    switch (ch) {\n                        // Unicode 3.0 space characters\n                        case CharacterCodes.space:\n                        case CharacterCodes.nonBreakingSpace:\n                        case CharacterCodes.enQuad:\n                        case CharacterCodes.emQuad:\n                        case CharacterCodes.enSpace:\n                        case CharacterCodes.emSpace:\n                        case CharacterCodes.threePerEmSpace:\n                        case CharacterCodes.fourPerEmSpace:\n                        case CharacterCodes.sixPerEmSpace:\n                        case CharacterCodes.figureSpace:\n                        case CharacterCodes.punctuationSpace:\n                        case CharacterCodes.thinSpace:\n                        case CharacterCodes.hairSpace:\n                        case CharacterCodes.zeroWidthSpace:\n                        case CharacterCodes.narrowNoBreakSpace:\n                        case CharacterCodes.ideographicSpace:\n\n                        case CharacterCodes.tab:\n                        case CharacterCodes.verticalTab:\n                        case CharacterCodes.formFeed:\n                        case CharacterCodes.byteOrderMark:\n                            // Normal whitespace.  Consume and continue.\n                            trivia.push(this.scanWhitespaceTrivia());\n                            continue;\n\n                        case CharacterCodes.slash:\n                            // Potential comment.  Consume if so.  Otherwise, break out and return.\n                            var ch2 = this.slidingWindow.peekItemN(1);\n                            if (ch2 === CharacterCodes.slash) {\n                                trivia.push(this.scanSingleLineCommentTrivia());\n                                continue;\n                            }\n\n                            if (ch2 === CharacterCodes.asterisk) {\n                                trivia.push(this.scanMultiLineCommentTrivia());\n                                continue;\n                            }\n\n                            // Not a comment.  Don\'t consume.\n                            throw Errors.invalidOperation();\n\n                        case CharacterCodes.carriageReturn:\n                        case CharacterCodes.lineFeed:\n                        case CharacterCodes.paragraphSeparator:\n                        case CharacterCodes.lineSeparator:\n                            trivia.push(this.scanLineTerminatorSequenceTrivia(ch));\n\n                            // If we\'re consuming leading trivia, then we will continue consuming more \n                            // trivia (including newlines) up to the first token we see.  If we\'re \n                            // consuming trailing trivia, then we break after the first newline we see.\n                            if (!isTrailing) {\n                                continue;\n                            }\n\n                            break;\n\n                        default:\n                            throw Errors.invalidOperation();\n                    }\n                }\n\n                // Debug.assert(trivia.length > 0);\n                return Syntax.triviaList(trivia);\n            }\n        }\n\n        private scanTriviaInfo(diagnostics: SyntaxDiagnostic[], isTrailing: boolean): number {\n            // Keep this exactly in sync with scanTrivia\n            var width = 0;\n            var hasCommentOrNewLine = 0;\n\n            while (true) {\n                var ch = this.currentCharCode();\n\n                switch (ch) {\n                    // Unicode 3.0 space characters\n                    case CharacterCodes.space:\n                    case CharacterCodes.nonBreakingSpace:\n                    case CharacterCodes.enQuad:\n                    case CharacterCodes.emQuad:\n                    case CharacterCodes.enSpace:\n                    case CharacterCodes.emSpace:\n                    case CharacterCodes.threePerEmSpace:\n                    case CharacterCodes.fourPerEmSpace:\n                    case CharacterCodes.sixPerEmSpace:\n                    case CharacterCodes.figureSpace:\n                    case CharacterCodes.punctuationSpace:\n                    case CharacterCodes.thinSpace:\n                    case CharacterCodes.hairSpace:\n                    case CharacterCodes.zeroWidthSpace:\n                    case CharacterCodes.narrowNoBreakSpace:\n                    case CharacterCodes.ideographicSpace:\n\n                    case CharacterCodes.tab:\n                    case CharacterCodes.verticalTab:\n                    case CharacterCodes.formFeed:\n                    case CharacterCodes.byteOrderMark:\n                        // Normal whitespace.  Consume and continue.\n                        this.slidingWindow.moveToNextItem();\n                        width++;\n                        continue;\n\n                    case CharacterCodes.slash:\n                        // Potential comment.  Consume if so.  Otherwise, break out and return.\n                        var ch2 = this.slidingWindow.peekItemN(1);\n                        if (ch2 === CharacterCodes.slash) {\n                            hasCommentOrNewLine |= SyntaxConstants.TriviaCommentMask;\n                            width += this.scanSingleLineCommentTriviaLength();\n                            continue;\n                        }\n\n                        if (ch2 === CharacterCodes.asterisk) {\n                            hasCommentOrNewLine |= SyntaxConstants.TriviaCommentMask;\n                            width += this.scanMultiLineCommentTriviaLength(diagnostics);\n                            continue;\n                        }\n\n                        // Not a comment.  Don\'t consume.\n                        break;\n\n                    case CharacterCodes.carriageReturn:\n                    case CharacterCodes.lineFeed:\n                    case CharacterCodes.paragraphSeparator:\n                    case CharacterCodes.lineSeparator:\n                        hasCommentOrNewLine |= SyntaxConstants.TriviaNewLineMask;\n                        width += this.scanLineTerminatorSequenceLength(ch);\n\n                        // If we\'re consuming leading trivia, then we will continue consuming more \n                        // trivia (including newlines) up to the first token we see.  If we\'re \n                        // consuming trailing trivia, then we break after the first newline we see.\n                        if (!isTrailing) {\n                            continue;\n                        }\n\n                        break;\n                }\n\n                return (width << SyntaxConstants.TriviaFullWidthShift) | hasCommentOrNewLine;\n            }\n        }\n\n        private isNewLineCharacter(ch: number): boolean {\n            switch (ch) {\n                case CharacterCodes.carriageReturn:\n                case CharacterCodes.lineFeed:\n                case CharacterCodes.paragraphSeparator:\n                case CharacterCodes.lineSeparator:\n                    return true;\n                default:\n                    return false;\n            }\n        }\n\n        private scanWhitespaceTrivia(): ISyntaxTrivia {\n            // We\'re going to be extracting text out of sliding window.  Make sure it can\'t move past\n            // this point.\n            var absoluteStartIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n\n            var width = 0;\n            while (true) {\n                var ch = this.currentCharCode();\n\n                switch (ch) {\n                    // Unicode 3.0 space characters\n                    case CharacterCodes.space:\n                    case CharacterCodes.nonBreakingSpace:\n                    case CharacterCodes.enQuad:\n                    case CharacterCodes.emQuad:\n                    case CharacterCodes.enSpace:\n                    case CharacterCodes.emSpace:\n                    case CharacterCodes.threePerEmSpace:\n                    case CharacterCodes.fourPerEmSpace:\n                    case CharacterCodes.sixPerEmSpace:\n                    case CharacterCodes.figureSpace:\n                    case CharacterCodes.punctuationSpace:\n                    case CharacterCodes.thinSpace:\n                    case CharacterCodes.hairSpace:\n                    case CharacterCodes.zeroWidthSpace:\n                    case CharacterCodes.narrowNoBreakSpace:\n                    case CharacterCodes.ideographicSpace:\n\n                    case CharacterCodes.tab:\n                    case CharacterCodes.verticalTab:\n                    case CharacterCodes.formFeed:\n                    case CharacterCodes.byteOrderMark:\n                        // Normal whitespace.  Consume and continue.\n                        this.slidingWindow.moveToNextItem();\n                        width++;\n                        continue;\n                }\n\n                break;\n            }\n\n            // TODO: we probably should intern whitespace.\n            var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, /*intern:*/ false);\n            this.slidingWindow.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);\n\n            return Syntax.whitespace(text);\n        }\n\n        private scanSingleLineCommentTrivia(): ISyntaxTrivia {\n            var absoluteStartIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n            var width = this.scanSingleLineCommentTriviaLength();\n\n            var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, /*intern:*/ false);\n            this.slidingWindow.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);\n\n            return Syntax.singleLineComment(text);\n        }\n\n        private scanSingleLineCommentTriviaLength(): number {\n            this.slidingWindow.moveToNextItem();\n            this.slidingWindow.moveToNextItem();\n\n            // The \'2\' is for the \"//\" we consumed.\n            var width = 2;\n            while (true) {\n                if (this.slidingWindow.isAtEndOfSource() || this.isNewLineCharacter(this.currentCharCode())) {\n                    return width;\n                }\n\n                this.slidingWindow.moveToNextItem();\n                width++;\n            }\n        }\n\n        private scanMultiLineCommentTrivia(): ISyntaxTrivia {\n            var absoluteStartIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n            var width = this.scanMultiLineCommentTriviaLength(null);\n\n            var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, /*intern:*/ false);\n            this.slidingWindow.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);\n\n            return Syntax.multiLineComment(text);\n        }\n\n        private scanMultiLineCommentTriviaLength(diagnostics: SyntaxDiagnostic[]): number {\n            this.slidingWindow.moveToNextItem();\n            this.slidingWindow.moveToNextItem();\n\n            // The \'2\' is for the \"/*\" we consumed.\n            var width = 2;\n            while (true) {\n                if (this.slidingWindow.isAtEndOfSource()) {\n                    if (diagnostics !== null) {\n                        diagnostics.push(new SyntaxDiagnostic(\n                            this.fileName,\n                            this.slidingWindow.absoluteIndex(), 0, DiagnosticCode._StarSlash__expected, null));\n                    }\n\n                    return width;\n                }\n\n                var ch = this.currentCharCode();\n                if (ch === CharacterCodes.asterisk && this.slidingWindow.peekItemN(1) === CharacterCodes.slash) {\n                    this.slidingWindow.moveToNextItem();\n                    this.slidingWindow.moveToNextItem();\n                    width += 2;\n                    return width;\n                }\n\n                this.slidingWindow.moveToNextItem();\n                width++;\n            }\n        }\n\n        private scanLineTerminatorSequenceTrivia(ch: number): ISyntaxTrivia {\n            var absoluteStartIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n            var width = this.scanLineTerminatorSequenceLength(ch);\n\n            var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, /*intern:*/ false);\n            this.slidingWindow.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);\n\n            return Syntax.trivia(SyntaxKind.NewLineTrivia, text);\n        }\n\n        private scanLineTerminatorSequenceLength(ch: number): number {\n            // Consume the first of the line terminator we saw.\n            this.slidingWindow.moveToNextItem();\n\n            // If it happened to be a \\r and there\'s a following \\n, then consume both.\n            if (ch === CharacterCodes.carriageReturn && this.currentCharCode() === CharacterCodes.lineFeed) {\n                this.slidingWindow.moveToNextItem();\n                return 2;\n            }\n            else {\n                return 1;\n            }\n        }\n\n        private scanSyntaxToken(diagnostics: SyntaxDiagnostic[], allowRegularExpression: boolean): SyntaxKind {\n            if (this.slidingWindow.isAtEndOfSource()) {\n                return SyntaxKind.EndOfFileToken;\n            }\n\n            var character = this.currentCharCode();\n\n            switch (character) {\n                case CharacterCodes.doubleQuote:\n                case CharacterCodes.singleQuote:\n                    return this.scanStringLiteral(diagnostics);\n\n                // These are the set of variable width punctuation tokens.\n                case CharacterCodes.slash:\n                    return this.scanSlashToken(allowRegularExpression);\n\n                case CharacterCodes.dot:\n                    return this.scanDotToken();\n\n                case CharacterCodes.minus:\n                    return this.scanMinusToken();\n\n                case CharacterCodes.exclamation:\n                    return this.scanExclamationToken();\n\n                case CharacterCodes.equals:\n                    return this.scanEqualsToken();\n\n                case CharacterCodes.bar:\n                    return this.scanBarToken();\n\n                case CharacterCodes.asterisk:\n                    return this.scanAsteriskToken();\n\n                case CharacterCodes.plus:\n                    return this.scanPlusToken();\n\n                case CharacterCodes.percent:\n                    return this.scanPercentToken();\n\n                case CharacterCodes.ampersand:\n                    return this.scanAmpersandToken();\n\n                case CharacterCodes.caret:\n                    return this.scanCaretToken();\n\n                case CharacterCodes.lessThan:\n                    return this.scanLessThanToken();\n\n                // These are the set of fixed, single character length punctuation tokens.\n                // The token kind does not depend on what follows.\n                case CharacterCodes.greaterThan:\n                    return this.advanceAndSetTokenKind(SyntaxKind.GreaterThanToken);\n\n                case CharacterCodes.comma:\n                    return this.advanceAndSetTokenKind(SyntaxKind.CommaToken);\n\n                case CharacterCodes.colon:\n                    return this.advanceAndSetTokenKind(SyntaxKind.ColonToken);\n\n                case CharacterCodes.semicolon:\n                    return this.advanceAndSetTokenKind(SyntaxKind.SemicolonToken);\n\n                case CharacterCodes.tilde:\n                    return this.advanceAndSetTokenKind(SyntaxKind.TildeToken);\n\n                case CharacterCodes.openParen:\n                    return this.advanceAndSetTokenKind(SyntaxKind.OpenParenToken);\n\n                case CharacterCodes.closeParen:\n                    return this.advanceAndSetTokenKind(SyntaxKind.CloseParenToken);\n\n                case CharacterCodes.openBrace:\n                    return this.advanceAndSetTokenKind(SyntaxKind.OpenBraceToken);\n\n                case CharacterCodes.closeBrace:\n                    return this.advanceAndSetTokenKind(SyntaxKind.CloseBraceToken);\n\n                case CharacterCodes.openBracket:\n                    return this.advanceAndSetTokenKind(SyntaxKind.OpenBracketToken);\n\n                case CharacterCodes.closeBracket:\n                    return this.advanceAndSetTokenKind(SyntaxKind.CloseBracketToken);\n\n                case CharacterCodes.question:\n                    return this.advanceAndSetTokenKind(SyntaxKind.QuestionToken);\n            }\n\n            if (Scanner.isNumericLiteralStart[character]) {\n                return this.scanNumericLiteral();\n            }\n\n            // We run into so many identifiers (and keywords) when scanning, that we want the code to\n            // be as fast as possible.  To that end, we have an extremely fast path for scanning that\n            // handles the 99.9% case of no-unicode characters and no unicode escapes.\n            if (Scanner.isIdentifierStartCharacter[character]) {\n                var result = this.tryFastScanIdentifierOrKeyword(character);\n                if (result !== SyntaxKind.None) {\n                    return result;\n                }\n            }\n\n            if (this.isIdentifierStart(this.peekCharOrUnicodeEscape())) {\n                return this.slowScanIdentifier(diagnostics);\n            }\n\n            return this.scanDefaultCharacter(character, diagnostics);\n        }\n\n        private isIdentifierStart(interpretedChar: number): boolean {\n            if (Scanner.isIdentifierStartCharacter[interpretedChar]) {\n                return true;\n            }\n\n            return interpretedChar > CharacterCodes.maxAsciiCharacter && Unicode.isIdentifierStart(interpretedChar, this._languageVersion);\n        }\n\n        private isIdentifierPart(interpretedChar: number): boolean {\n            if (Scanner.isIdentifierPartCharacter[interpretedChar]) {\n                return true;\n            }\n\n            return interpretedChar > CharacterCodes.maxAsciiCharacter && Unicode.isIdentifierPart(interpretedChar, this._languageVersion);\n        }\n\n        private tryFastScanIdentifierOrKeyword(firstCharacter: number): SyntaxKind {\n            var startIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n\n            while (true) {\n                var character = this.currentCharCode();\n                if (Scanner.isIdentifierPartCharacter[character]) {\n                    // Still part of an identifier.  Move to the next caracter.\n                    this.slidingWindow.moveToNextItem();\n                }\n                else if (character === CharacterCodes.backslash || character > CharacterCodes.maxAsciiCharacter) {\n                    // We saw a \\ (which could start a unicode escape), or we saw a unicode character.\n                    // This can\'t be scanned quickly.  Reset to the beginning and bail out.  We\'ll \n                    // go and try the slow path instead.\n                    this.slidingWindow.rewindToPinnedIndex(startIndex);\n                    this.slidingWindow.releaseAndUnpinAbsoluteIndex(startIndex);\n                    return SyntaxKind.None;\n                }\n                else {\n                    // Saw an ascii character that wasn\'t a backslash and wasn\'t an identifier \n                    // character.  This identifier is done.\n                    var endIndex = this.slidingWindow.absoluteIndex();\n\n                    // Also check if it a keyword if it started with a lowercase letter.\n                    var kind;\n                    if (Scanner.isKeywordStartCharacter[firstCharacter]) {\n                        var offset = startIndex - this.slidingWindow.windowAbsoluteStartIndex;\n                        kind = ScannerUtilities.identifierKind(this.slidingWindow.window, offset, endIndex - startIndex);\n                    }\n                    else {\n                        kind = SyntaxKind.IdentifierName;\n                    }\n\n                    this.slidingWindow.releaseAndUnpinAbsoluteIndex(startIndex);\n                    return kind;\n                }\n            }\n        }\n\n        // A slow path for scanning identifiers.  Called when we run into a unicode character or \n        // escape sequence while processing the fast path.\n        private slowScanIdentifier(diagnostics: SyntaxDiagnostic[]): SyntaxKind {\n            var startIndex = this.slidingWindow.absoluteIndex();\n\n            do {\n                this.scanCharOrUnicodeEscape(diagnostics);\n            }\n            while (this.isIdentifierPart(this.peekCharOrUnicodeEscape()));\n\n            return SyntaxKind.IdentifierName;\n        }\n\n        private scanNumericLiteral(): SyntaxKind {\n            if (this.isHexNumericLiteral()) {\n                return this.scanHexNumericLiteral();\n            }\n            else {\n                return this.scanDecimalNumericLiteral();\n            }\n        }\n\n        private scanDecimalNumericLiteral(): SyntaxKind {\n            while (CharacterInfo.isDecimalDigit(this.currentCharCode())) {\n                this.slidingWindow.moveToNextItem();\n            }\n\n            if (this.currentCharCode() === CharacterCodes.dot) {\n                this.slidingWindow.moveToNextItem();\n            }\n\n            while (CharacterInfo.isDecimalDigit(this.currentCharCode())) {\n                this.slidingWindow.moveToNextItem();\n            }\n\n            var ch = this.currentCharCode();\n            if (ch === CharacterCodes.e || ch === CharacterCodes.E) {\n                this.slidingWindow.moveToNextItem();\n\n                ch = this.currentCharCode();\n                if (ch === CharacterCodes.minus || ch === CharacterCodes.plus) {\n                    if (CharacterInfo.isDecimalDigit(this.slidingWindow.peekItemN(1))) {\n                        this.slidingWindow.moveToNextItem();\n                    }\n                }\n            }\n\n            while (CharacterInfo.isDecimalDigit(this.currentCharCode())) {\n                this.slidingWindow.moveToNextItem();\n            }\n\n            return SyntaxKind.NumericLiteral;\n        }\n\n        private scanHexNumericLiteral(): SyntaxKind {\n            // Debug.assert(this.isHexNumericLiteral());\n\n            // Move past the 0x.\n            this.slidingWindow.moveToNextItem();\n            this.slidingWindow.moveToNextItem();\n\n            while (CharacterInfo.isHexDigit(this.currentCharCode())) {\n                this.slidingWindow.moveToNextItem();\n            }\n\n            return SyntaxKind.NumericLiteral;\n        }\n\n        private isHexNumericLiteral(): boolean {\n            if (this.currentCharCode() === CharacterCodes._0) {\n                var ch = this.slidingWindow.peekItemN(1);\n\n                if (ch === CharacterCodes.x || ch === CharacterCodes.X) {\n                    ch = this.slidingWindow.peekItemN(2);\n\n                    return CharacterInfo.isHexDigit(ch);\n                }\n            }\n\n            return false;\n        }\n\n        private advanceAndSetTokenKind(kind: SyntaxKind): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            return kind;\n        }\n\n        private scanLessThanToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.LessThanEqualsToken;\n            }\n            else if (this.currentCharCode() === CharacterCodes.lessThan) {\n                this.slidingWindow.moveToNextItem();\n                if (this.currentCharCode() === CharacterCodes.equals) {\n                    this.slidingWindow.moveToNextItem();\n                    return SyntaxKind.LessThanLessThanEqualsToken;\n                }\n                else {\n                    return SyntaxKind.LessThanLessThanToken;\n                }\n            }\n            else {\n                return SyntaxKind.LessThanToken;\n            }\n        }\n\n        private scanBarToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.BarEqualsToken;\n            }\n            else if (this.currentCharCode() === CharacterCodes.bar) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.BarBarToken;\n            }\n            else {\n                return SyntaxKind.BarToken;\n            }\n        }\n\n        private scanCaretToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.CaretEqualsToken;\n            }\n            else {\n                return SyntaxKind.CaretToken;\n            }\n        }\n\n        private scanAmpersandToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            var character = this.currentCharCode();\n            if (character === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.AmpersandEqualsToken;\n            }\n            else if (this.currentCharCode() === CharacterCodes.ampersand) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.AmpersandAmpersandToken;\n            }\n            else {\n                return SyntaxKind.AmpersandToken;\n            }\n        }\n\n        private scanPercentToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.PercentEqualsToken;\n            }\n            else {\n                return SyntaxKind.PercentToken;\n            }\n        }\n\n        private scanMinusToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            var character = this.currentCharCode();\n\n            if (character === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.MinusEqualsToken;\n            }\n            else if (character === CharacterCodes.minus) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.MinusMinusToken;\n            }\n            else {\n                return SyntaxKind.MinusToken;\n            }\n        }\n\n        private scanPlusToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            var character = this.currentCharCode();\n            if (character === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.PlusEqualsToken;\n            }\n            else if (character === CharacterCodes.plus) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.PlusPlusToken;\n            }\n            else {\n                return SyntaxKind.PlusToken;\n            }\n        }\n\n        private scanAsteriskToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.AsteriskEqualsToken;\n            }\n            else {\n                return SyntaxKind.AsteriskToken;\n            }\n        }\n\n        private scanEqualsToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            var character = this.currentCharCode()\n            if (character === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n\n                if (this.currentCharCode() === CharacterCodes.equals) {\n                    this.slidingWindow.moveToNextItem();\n\n                    return SyntaxKind.EqualsEqualsEqualsToken;\n                }\n                else {\n                    return SyntaxKind.EqualsEqualsToken;\n                }\n            }\n            else if (character === CharacterCodes.greaterThan) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.EqualsGreaterThanToken;\n            }\n            else {\n                return SyntaxKind.EqualsToken;\n            }\n        }\n\n        private isDotPrefixedNumericLiteral(): boolean {\n            if (this.currentCharCode() === CharacterCodes.dot) {\n                var ch = this.slidingWindow.peekItemN(1);\n                return CharacterInfo.isDecimalDigit(ch);\n            }\n\n            return false;\n        }\n\n        private scanDotToken(): SyntaxKind {\n            if (this.isDotPrefixedNumericLiteral()) {\n                return this.scanNumericLiteral();\n            }\n\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.dot &&\n                this.slidingWindow.peekItemN(1) === CharacterCodes.dot) {\n\n                this.slidingWindow.moveToNextItem();\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.DotDotDotToken;\n            }\n            else {\n                return SyntaxKind.DotToken;\n            }\n        }\n\n        private scanSlashToken(allowRegularExpression: boolean): SyntaxKind {\n            // NOTE: By default, we do not try scanning a / as a regexp here.  We instead consider it a\n            // div or div-assign.  Later on, if the parser runs into a situation where it would like a \n            // term, and it sees one of these then it may restart us asking specifically if we could \n            // scan out a regex.\n            if (allowRegularExpression) {\n                var result = this.tryScanRegularExpressionToken();\n                if (result !== SyntaxKind.None) {\n                    return result;\n                }\n            }\n\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.SlashEqualsToken;\n            }\n            else {\n                return SyntaxKind.SlashToken;\n            }\n        }\n\n        private tryScanRegularExpressionToken(): SyntaxKind {\n            // Debug.assert(this.currentCharCode() === CharacterCodes.slash);\n\n            var startIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n            try {\n                this.slidingWindow.moveToNextItem();\n\n                var inEscape = false;\n                var inCharacterClass = false;\n                while (true) {\n                    var ch = this.currentCharCode();\n                    if (this.isNewLineCharacter(ch) || this.slidingWindow.isAtEndOfSource()) {\n                        this.slidingWindow.rewindToPinnedIndex(startIndex);\n                        return SyntaxKind.None;\n                    }\n\n                    this.slidingWindow.moveToNextItem();\n                    if (inEscape) {\n                        inEscape = false;\n                        continue;\n                    }\n\n                    switch (ch) {\n                        case CharacterCodes.backslash:\n                            // We\'re now in an escape.  Consume the next character we see (unless it\'s\n                            // a newline or null.\n                            inEscape = true;\n                            continue;\n\n                        case CharacterCodes.openBracket:\n                            // If we see a [ then we\'re starting an character class.  Note: it\'s ok if \n                            // we then hit another [ inside a character class.  We\'ll just set the value\n                            // to true again and that\'s ok.\n                            inCharacterClass = true;\n                            continue;\n\n                        case CharacterCodes.closeBracket:\n                            // If we ever hit a cloe bracket then we\'re now no longer in a character \n                            // class.  If we weren\'t in a character class to begin with, then this has \n                            // no effect.\n                            inCharacterClass = false;\n                            continue;\n\n                        case CharacterCodes.slash:\n                            // If we see a slash, and we\'re in a character class, then ignore it.\n                            if (inCharacterClass) {\n                                continue;\n                            }\n\n                            // We\'re done with the regex.  Break out of the switch (which will break \n                            // out of hte loop.\n                            break;\n\n                        default:\n                            // Just consume any other characters.\n                            continue;\n                    }\n\n                    break;\n                }\n\n                // TODO: The grammar says any identifier part is allowed here.  Do we need to support\n                // \\u identifiers here?  The existing typescript parser does not.  \n                while (Scanner.isIdentifierPartCharacter[this.currentCharCode()]) {\n                    this.slidingWindow.moveToNextItem();\n                }\n\n                return SyntaxKind.RegularExpressionLiteral;\n            }\n            finally {\n                this.slidingWindow.releaseAndUnpinAbsoluteIndex(startIndex);\n            }\n        }\n\n        private scanExclamationToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n\n                if (this.currentCharCode() === CharacterCodes.equals) {\n                    this.slidingWindow.moveToNextItem();\n\n                    return SyntaxKind.ExclamationEqualsEqualsToken;\n                }\n                else {\n                    return SyntaxKind.ExclamationEqualsToken;\n                }\n            }\n            else {\n                return SyntaxKind.ExclamationToken;\n            }\n        }\n\n        private scanDefaultCharacter(character: number, diagnostics: SyntaxDiagnostic[]): SyntaxKind {\n            var position = this.slidingWindow.absoluteIndex();\n            this.slidingWindow.moveToNextItem();\n\n            var text = String.fromCharCode(character);\n            var messageText = this.getErrorMessageText(text);\n            diagnostics.push(new SyntaxDiagnostic(this.fileName,\n                position, 1, DiagnosticCode.Unexpected_character_0, [messageText]));\n\n            return SyntaxKind.ErrorToken;\n        }\n\n        // Convert text into a printable form usable for an error message.  This will both quote the \n        // string, and ensure all characters printable (i.e. by using unicode escapes when they\'re not).\n        private getErrorMessageText(text: string): string {\n            // For just a simple backslash, we return it as is.  The default behavior of JSON2.stringify\n            // is not what we want here.\n            if (text === \"\\\\\") {\n                return \'\"\\\\\"\';\n            }\n\n            return JSON2.stringify(text);\n        }\n\n        private skipEscapeSequence(diagnostics: SyntaxDiagnostic[]): void {\n            // Debug.assert(this.currentCharCode() === CharacterCodes.backslash);\n\n            var rewindPoint = this.slidingWindow.getAndPinAbsoluteIndex();\n            try {\n                // Consume the backslash.\n                this.slidingWindow.moveToNextItem();\n\n                // Get the char after the backslash\n                var ch = this.currentCharCode();\n                this.slidingWindow.moveToNextItem();\n                switch (ch) {\n                    case CharacterCodes.x:\n                    case CharacterCodes.u:\n                        this.slidingWindow.rewindToPinnedIndex(rewindPoint);\n                        var value = this.scanUnicodeOrHexEscape(diagnostics);\n                        return;\n\n                    case CharacterCodes.carriageReturn:\n                        // If it\'s \\r\\n then consume both characters.\n                        if (this.currentCharCode() === CharacterCodes.lineFeed) {\n                            this.slidingWindow.moveToNextItem();\n                        }\n                        return;\n\n                    // We don\'t have to do anything special about these characters.  I\'m including them\n                    // Just so it\'s clear that we intentially process them in the exact same way:\n                    //case CharacterCodes.singleQuote:\n                    //case CharacterCodes.doubleQuote:\n                    //case CharacterCodes.backslash:\n                    //case CharacterCodes._0:\n                    //case CharacterCodes.b:\n                    //case CharacterCodes.f:\n                    //case CharacterCodes.n:\n                    //case CharacterCodes.r:\n                    //case CharacterCodes.t:\n                    //case CharacterCodes.v:\n                    //case CharacterCodes.lineFeed:\n                    //case CharacterCodes.paragraphSeparator:\n                    //case CharacterCodes.lineSeparator:\n                    default:\n                        // Any other character is ok as well.  As per rule:\n                        // EscapeSequence :: CharacterEscapeSequence\n                        // CharacterEscapeSequence :: NonEscapeCharacter\n                        // NonEscapeCharacter :: SourceCharacter but notEscapeCharacter or LineTerminator\n                        return;\n                }\n            }\n            finally {\n                this.slidingWindow.releaseAndUnpinAbsoluteIndex(rewindPoint);\n            }\n        }\n\n        private scanStringLiteral(diagnostics: SyntaxDiagnostic[]): SyntaxKind {\n            var quoteCharacter = this.currentCharCode();\n\n            // Debug.assert(quoteCharacter === CharacterCodes.singleQuote || quoteCharacter === CharacterCodes.doubleQuote);\n\n            this.slidingWindow.moveToNextItem();\n\n            while (true) {\n                var ch = this.currentCharCode();\n                if (ch === CharacterCodes.backslash) {\n                    this.skipEscapeSequence(diagnostics);\n                }\n                else if (ch === quoteCharacter) {\n                    this.slidingWindow.moveToNextItem();\n                    break;\n                }\n                else if (this.isNewLineCharacter(ch) || this.slidingWindow.isAtEndOfSource()) {\n                    diagnostics.push(new SyntaxDiagnostic(this.fileName,\n                        this.slidingWindow.absoluteIndex(), 1, DiagnosticCode.Missing_closing_quote_character, null));\n                    break;\n                }\n                else {\n                    this.slidingWindow.moveToNextItem();\n                }\n            }\n\n            return SyntaxKind.StringLiteral;\n        }\n\n        private isUnicodeOrHexEscape(character: number): boolean {\n            return this.isUnicodeEscape(character) || this.isHexEscape(character);\n        }\n\n        private isUnicodeEscape(character: number): boolean {\n            if (character === CharacterCodes.backslash) {\n                var ch2 = this.slidingWindow.peekItemN(1);\n                if (ch2 === CharacterCodes.u) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private isHexEscape(character: number): boolean {\n            if (character === CharacterCodes.backslash) {\n                var ch2 = this.slidingWindow.peekItemN(1);\n                if (ch2 === CharacterCodes.x) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private peekCharOrUnicodeOrHexEscape(): number {\n            var character = this.currentCharCode();\n            if (this.isUnicodeOrHexEscape(character)) {\n                return this.peekUnicodeOrHexEscape();\n            }\n            else {\n                return character;\n            }\n        }\n\n        private peekCharOrUnicodeEscape(): number {\n            var character = this.currentCharCode();\n            if (this.isUnicodeEscape(character)) {\n                return this.peekUnicodeOrHexEscape();\n            }\n            else {\n                return character;\n            }\n        }\n\n        private peekUnicodeOrHexEscape(): number {\n            var startIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n\n            // if we\'re peeking, then we don\'t want to change the position\n            var ch = this.scanUnicodeOrHexEscape(/*errors:*/ null);\n\n            this.slidingWindow.rewindToPinnedIndex(startIndex);\n            this.slidingWindow.releaseAndUnpinAbsoluteIndex(startIndex);\n\n            return ch;\n        }\n\n        private scanCharOrUnicodeEscape(errors: SyntaxDiagnostic[]): number {\n            var ch = this.currentCharCode();\n            if (ch === CharacterCodes.backslash) {\n                var ch2 = this.slidingWindow.peekItemN(1);\n                if (ch2 === CharacterCodes.u) {\n                    return this.scanUnicodeOrHexEscape(errors);\n                }\n            }\n\n            this.slidingWindow.moveToNextItem();\n            return ch;\n        }\n\n        private scanCharOrUnicodeOrHexEscape(errors: SyntaxDiagnostic[]): number {\n            var ch = this.currentCharCode();\n            if (ch === CharacterCodes.backslash) {\n                var ch2 = this.slidingWindow.peekItemN(1);\n                if (ch2 === CharacterCodes.u || ch2 === CharacterCodes.x) {\n                    return this.scanUnicodeOrHexEscape(errors);\n                }\n            }\n\n            this.slidingWindow.moveToNextItem();\n            return ch;\n        }\n\n        private scanUnicodeOrHexEscape(errors: SyntaxDiagnostic[]): number {\n            var start = this.slidingWindow.absoluteIndex();\n            var character = this.currentCharCode();\n            // Debug.assert(character === CharacterCodes.backslash);\n            this.slidingWindow.moveToNextItem();\n\n            character = this.currentCharCode();\n            // Debug.assert(character === CharacterCodes.u || character === CharacterCodes.x);\n\n            var intChar = 0;\n            this.slidingWindow.moveToNextItem();\n\n            var count = character === CharacterCodes.u ? 4 : 2;\n\n            for (var i = 0; i < count; i++) {\n                var ch2 = this.currentCharCode();\n                if (!CharacterInfo.isHexDigit(ch2)) {\n                    if (errors !== null) {\n                        var end = this.slidingWindow.absoluteIndex();\n                        var info = this.createIllegalEscapeDiagnostic(start, end);\n                        errors.push(info);\n                    }\n\n                    break;\n                }\n\n                intChar = (intChar << 4) + CharacterInfo.hexValue(ch2);\n                this.slidingWindow.moveToNextItem();\n            }\n\n            return intChar;\n        }\n\n        public substring(start: number, end: number, intern: boolean): string {\n            var length = end - start;\n            var offset = start - this.slidingWindow.windowAbsoluteStartIndex;\n\n            // Debug.assert(offset >= 0);\n            if (intern) {\n                return Collections.DefaultStringTable.addCharArray(this.slidingWindow.window, offset, length);\n            }\n            else {\n                return StringUtilities.fromCharCodeArray(this.slidingWindow.window.slice(offset, offset + length));\n            }\n        }\n\n        private createIllegalEscapeDiagnostic(start: number, end: number): SyntaxDiagnostic {\n            return new SyntaxDiagnostic(this.fileName, start, end - start,\n                DiagnosticCode.Unrecognized_escape_sequence, null);\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class ScannerUtilities {\n        public static identifierKind(array: number[], startIndex: number, length: number): SyntaxKind {\n            switch (length) {\n            case 2:\n                // do, if, in\n            switch(array[startIndex]) {\n            case CharacterCodes.d:\n                // do\n                return (array[startIndex + 1] === CharacterCodes.o) ? SyntaxKind.DoKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.i:\n                // if, in\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.f:\n                    // if\n                    return SyntaxKind.IfKeyword;\n                case CharacterCodes.n:\n                    // in\n                    return SyntaxKind.InKeyword;\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 3:\n                // for, new, try, var, let, any, get, set\n            switch(array[startIndex]) {\n            case CharacterCodes.f:\n                // for\n                return (array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.r) ? SyntaxKind.ForKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.n:\n                // new\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.w) ? SyntaxKind.NewKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.t:\n                // try\n                return (array[startIndex + 1] === CharacterCodes.r && array[startIndex + 2] === CharacterCodes.y) ? SyntaxKind.TryKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.v:\n                // var\n                return (array[startIndex + 1] === CharacterCodes.a && array[startIndex + 2] === CharacterCodes.r) ? SyntaxKind.VarKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.l:\n                // let\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.t) ? SyntaxKind.LetKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.a:\n                // any\n                return (array[startIndex + 1] === CharacterCodes.n && array[startIndex + 2] === CharacterCodes.y) ? SyntaxKind.AnyKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.g:\n                // get\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.t) ? SyntaxKind.GetKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.s:\n                // set\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.t) ? SyntaxKind.SetKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 4:\n                // case, else, null, this, true, void, with, enum, bool\n            switch(array[startIndex]) {\n            case CharacterCodes.c:\n                // case\n                return (array[startIndex + 1] === CharacterCodes.a && array[startIndex + 2] === CharacterCodes.s && array[startIndex + 3] === CharacterCodes.e) ? SyntaxKind.CaseKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.e:\n                // else, enum\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.l:\n                    // else\n                    return (array[startIndex + 2] === CharacterCodes.s && array[startIndex + 3] === CharacterCodes.e) ? SyntaxKind.ElseKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.n:\n                    // enum\n                    return (array[startIndex + 2] === CharacterCodes.u && array[startIndex + 3] === CharacterCodes.m) ? SyntaxKind.EnumKeyword : SyntaxKind.IdentifierName;\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            case CharacterCodes.n:\n                // null\n                return (array[startIndex + 1] === CharacterCodes.u && array[startIndex + 2] === CharacterCodes.l && array[startIndex + 3] === CharacterCodes.l) ? SyntaxKind.NullKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.t:\n                // this, true\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.h:\n                    // this\n                    return (array[startIndex + 2] === CharacterCodes.i && array[startIndex + 3] === CharacterCodes.s) ? SyntaxKind.ThisKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.r:\n                    // true\n                    return (array[startIndex + 2] === CharacterCodes.u && array[startIndex + 3] === CharacterCodes.e) ? SyntaxKind.TrueKeyword : SyntaxKind.IdentifierName;\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            case CharacterCodes.v:\n                // void\n                return (array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.i && array[startIndex + 3] === CharacterCodes.d) ? SyntaxKind.VoidKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.w:\n                // with\n                return (array[startIndex + 1] === CharacterCodes.i && array[startIndex + 2] === CharacterCodes.t && array[startIndex + 3] === CharacterCodes.h) ? SyntaxKind.WithKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.b:\n                // bool\n                return (array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.o && array[startIndex + 3] === CharacterCodes.l) ? SyntaxKind.BoolKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 5:\n                // break, catch, false, throw, while, class, const, super, yield\n            switch(array[startIndex]) {\n            case CharacterCodes.b:\n                // break\n                return (array[startIndex + 1] === CharacterCodes.r && array[startIndex + 2] === CharacterCodes.e && array[startIndex + 3] === CharacterCodes.a && array[startIndex + 4] === CharacterCodes.k) ? SyntaxKind.BreakKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.c:\n                // catch, class, const\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.a:\n                    // catch\n                    return (array[startIndex + 2] === CharacterCodes.t && array[startIndex + 3] === CharacterCodes.c && array[startIndex + 4] === CharacterCodes.h) ? SyntaxKind.CatchKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.l:\n                    // class\n                    return (array[startIndex + 2] === CharacterCodes.a && array[startIndex + 3] === CharacterCodes.s && array[startIndex + 4] === CharacterCodes.s) ? SyntaxKind.ClassKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.o:\n                    // const\n                    return (array[startIndex + 2] === CharacterCodes.n && array[startIndex + 3] === CharacterCodes.s && array[startIndex + 4] === CharacterCodes.t) ? SyntaxKind.ConstKeyword : SyntaxKind.IdentifierName;\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            case CharacterCodes.f:\n                // false\n                return (array[startIndex + 1] === CharacterCodes.a && array[startIndex + 2] === CharacterCodes.l && array[startIndex + 3] === CharacterCodes.s && array[startIndex + 4] === CharacterCodes.e) ? SyntaxKind.FalseKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.t:\n                // throw\n                return (array[startIndex + 1] === CharacterCodes.h && array[startIndex + 2] === CharacterCodes.r && array[startIndex + 3] === CharacterCodes.o && array[startIndex + 4] === CharacterCodes.w) ? SyntaxKind.ThrowKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.w:\n                // while\n                return (array[startIndex + 1] === CharacterCodes.h && array[startIndex + 2] === CharacterCodes.i && array[startIndex + 3] === CharacterCodes.l && array[startIndex + 4] === CharacterCodes.e) ? SyntaxKind.WhileKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.s:\n                // super\n                return (array[startIndex + 1] === CharacterCodes.u && array[startIndex + 2] === CharacterCodes.p && array[startIndex + 3] === CharacterCodes.e && array[startIndex + 4] === CharacterCodes.r) ? SyntaxKind.SuperKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.y:\n                // yield\n                return (array[startIndex + 1] === CharacterCodes.i && array[startIndex + 2] === CharacterCodes.e && array[startIndex + 3] === CharacterCodes.l && array[startIndex + 4] === CharacterCodes.d) ? SyntaxKind.YieldKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 6:\n                // delete, return, switch, typeof, export, import, public, static, module, number, string\n            switch(array[startIndex]) {\n            case CharacterCodes.d:\n                // delete\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.l && array[startIndex + 3] === CharacterCodes.e && array[startIndex + 4] === CharacterCodes.t && array[startIndex + 5] === CharacterCodes.e) ? SyntaxKind.DeleteKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.r:\n                // return\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.t && array[startIndex + 3] === CharacterCodes.u && array[startIndex + 4] === CharacterCodes.r && array[startIndex + 5] === CharacterCodes.n) ? SyntaxKind.ReturnKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.s:\n                // switch, static, string\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.w:\n                    // switch\n                    return (array[startIndex + 2] === CharacterCodes.i && array[startIndex + 3] === CharacterCodes.t && array[startIndex + 4] === CharacterCodes.c && array[startIndex + 5] === CharacterCodes.h) ? SyntaxKind.SwitchKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.t:\n                    // static, string\n                    switch(array[startIndex + 2]) {\n                    case CharacterCodes.a:\n                        // static\n                        return (array[startIndex + 3] === CharacterCodes.t && array[startIndex + 4] === CharacterCodes.i && array[startIndex + 5] === CharacterCodes.c) ? SyntaxKind.StaticKeyword : SyntaxKind.IdentifierName;\n                    case CharacterCodes.r:\n                        // string\n                        return (array[startIndex + 3] === CharacterCodes.i && array[startIndex + 4] === CharacterCodes.n && array[startIndex + 5] === CharacterCodes.g) ? SyntaxKind.StringKeyword : SyntaxKind.IdentifierName;\n                    default:\n                        return SyntaxKind.IdentifierName;\n                    }\n\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            case CharacterCodes.t:\n                // typeof\n                return (array[startIndex + 1] === CharacterCodes.y && array[startIndex + 2] === CharacterCodes.p && array[startIndex + 3] === CharacterCodes.e && array[startIndex + 4] === CharacterCodes.o && array[startIndex + 5] === CharacterCodes.f) ? SyntaxKind.TypeOfKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.e:\n                // export\n                return (array[startIndex + 1] === CharacterCodes.x && array[startIndex + 2] === CharacterCodes.p && array[startIndex + 3] === CharacterCodes.o && array[startIndex + 4] === CharacterCodes.r && array[startIndex + 5] === CharacterCodes.t) ? SyntaxKind.ExportKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.i:\n                // import\n                return (array[startIndex + 1] === CharacterCodes.m && array[startIndex + 2] === CharacterCodes.p && array[startIndex + 3] === CharacterCodes.o && array[startIndex + 4] === CharacterCodes.r && array[startIndex + 5] === CharacterCodes.t) ? SyntaxKind.ImportKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.p:\n                // public\n                return (array[startIndex + 1] === CharacterCodes.u && array[startIndex + 2] === CharacterCodes.b && array[startIndex + 3] === CharacterCodes.l && array[startIndex + 4] === CharacterCodes.i && array[startIndex + 5] === CharacterCodes.c) ? SyntaxKind.PublicKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.m:\n                // module\n                return (array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.d && array[startIndex + 3] === CharacterCodes.u && array[startIndex + 4] === CharacterCodes.l && array[startIndex + 5] === CharacterCodes.e) ? SyntaxKind.ModuleKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.n:\n                // number\n                return (array[startIndex + 1] === CharacterCodes.u && array[startIndex + 2] === CharacterCodes.m && array[startIndex + 3] === CharacterCodes.b && array[startIndex + 4] === CharacterCodes.e && array[startIndex + 5] === CharacterCodes.r) ? SyntaxKind.NumberKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 7:\n                // default, finally, extends, package, private, boolean, declare, require\n            switch(array[startIndex]) {\n            case CharacterCodes.d:\n                // default, declare\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.e:\n                    // default, declare\n                    switch(array[startIndex + 2]) {\n                    case CharacterCodes.f:\n                        // default\n                        return (array[startIndex + 3] === CharacterCodes.a && array[startIndex + 4] === CharacterCodes.u && array[startIndex + 5] === CharacterCodes.l && array[startIndex + 6] === CharacterCodes.t) ? SyntaxKind.DefaultKeyword : SyntaxKind.IdentifierName;\n                    case CharacterCodes.c:\n                        // declare\n                        return (array[startIndex + 3] === CharacterCodes.l && array[startIndex + 4] === CharacterCodes.a && array[startIndex + 5] === CharacterCodes.r && array[startIndex + 6] === CharacterCodes.e) ? SyntaxKind.DeclareKeyword : SyntaxKind.IdentifierName;\n                    default:\n                        return SyntaxKind.IdentifierName;\n                    }\n\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            case CharacterCodes.f:\n                // finally\n                return (array[startIndex + 1] === CharacterCodes.i && array[startIndex + 2] === CharacterCodes.n && array[startIndex + 3] === CharacterCodes.a && array[startIndex + 4] === CharacterCodes.l && array[startIndex + 5] === CharacterCodes.l && array[startIndex + 6] === CharacterCodes.y) ? SyntaxKind.FinallyKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.e:\n                // extends\n                return (array[startIndex + 1] === CharacterCodes.x && array[startIndex + 2] === CharacterCodes.t && array[startIndex + 3] === CharacterCodes.e && array[startIndex + 4] === CharacterCodes.n && array[startIndex + 5] === CharacterCodes.d && array[startIndex + 6] === CharacterCodes.s) ? SyntaxKind.ExtendsKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.p:\n                // package, private\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.a:\n                    // package\n                    return (array[startIndex + 2] === CharacterCodes.c && array[startIndex + 3] === CharacterCodes.k && array[startIndex + 4] === CharacterCodes.a && array[startIndex + 5] === CharacterCodes.g && array[startIndex + 6] === CharacterCodes.e) ? SyntaxKind.PackageKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.r:\n                    // private\n                    return (array[startIndex + 2] === CharacterCodes.i && array[startIndex + 3] === CharacterCodes.v && array[startIndex + 4] === CharacterCodes.a && array[startIndex + 5] === CharacterCodes.t && array[startIndex + 6] === CharacterCodes.e) ? SyntaxKind.PrivateKeyword : SyntaxKind.IdentifierName;\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            case CharacterCodes.b:\n                // boolean\n                return (array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.o && array[startIndex + 3] === CharacterCodes.l && array[startIndex + 4] === CharacterCodes.e && array[startIndex + 5] === CharacterCodes.a && array[startIndex + 6] === CharacterCodes.n) ? SyntaxKind.BooleanKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.r:\n                // require\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.q && array[startIndex + 3] === CharacterCodes.u && array[startIndex + 4] === CharacterCodes.i && array[startIndex + 5] === CharacterCodes.r && array[startIndex + 6] === CharacterCodes.e) ? SyntaxKind.RequireKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 8:\n                // continue, debugger, function\n            switch(array[startIndex]) {\n            case CharacterCodes.c:\n                // continue\n                return (array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.n && array[startIndex + 3] === CharacterCodes.t && array[startIndex + 4] === CharacterCodes.i && array[startIndex + 5] === CharacterCodes.n && array[startIndex + 6] === CharacterCodes.u && array[startIndex + 7] === CharacterCodes.e) ? SyntaxKind.ContinueKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.d:\n                // debugger\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.b && array[startIndex + 3] === CharacterCodes.u && array[startIndex + 4] === CharacterCodes.g && array[startIndex + 5] === CharacterCodes.g && array[startIndex + 6] === CharacterCodes.e && array[startIndex + 7] === CharacterCodes.r) ? SyntaxKind.DebuggerKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.f:\n                // function\n                return (array[startIndex + 1] === CharacterCodes.u && array[startIndex + 2] === CharacterCodes.n && array[startIndex + 3] === CharacterCodes.c && array[startIndex + 4] === CharacterCodes.t && array[startIndex + 5] === CharacterCodes.i && array[startIndex + 6] === CharacterCodes.o && array[startIndex + 7] === CharacterCodes.n) ? SyntaxKind.FunctionKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 9:\n                // interface, protected\n            switch(array[startIndex]) {\n            case CharacterCodes.i:\n                // interface\n                return (array[startIndex + 1] === CharacterCodes.n && array[startIndex + 2] === CharacterCodes.t && array[startIndex + 3] === CharacterCodes.e && array[startIndex + 4] === CharacterCodes.r && array[startIndex + 5] === CharacterCodes.f && array[startIndex + 6] === CharacterCodes.a && array[startIndex + 7] === CharacterCodes.c && array[startIndex + 8] === CharacterCodes.e) ? SyntaxKind.InterfaceKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.p:\n                // protected\n                return (array[startIndex + 1] === CharacterCodes.r && array[startIndex + 2] === CharacterCodes.o && array[startIndex + 3] === CharacterCodes.t && array[startIndex + 4] === CharacterCodes.e && array[startIndex + 5] === CharacterCodes.c && array[startIndex + 6] === CharacterCodes.t && array[startIndex + 7] === CharacterCodes.e && array[startIndex + 8] === CharacterCodes.d) ? SyntaxKind.ProtectedKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 10:\n                // instanceof, implements\n            switch(array[startIndex]) {\n            case CharacterCodes.i:\n                // instanceof, implements\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.n:\n                    // instanceof\n                    return (array[startIndex + 2] === CharacterCodes.s && array[startIndex + 3] === CharacterCodes.t && array[startIndex + 4] === CharacterCodes.a && array[startIndex + 5] === CharacterCodes.n && array[startIndex + 6] === CharacterCodes.c && array[startIndex + 7] === CharacterCodes.e && array[startIndex + 8] === CharacterCodes.o && array[startIndex + 9] === CharacterCodes.f) ? SyntaxKind.InstanceOfKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.m:\n                    // implements\n                    return (array[startIndex + 2] === CharacterCodes.p && array[startIndex + 3] === CharacterCodes.l && array[startIndex + 4] === CharacterCodes.e && array[startIndex + 5] === CharacterCodes.m && array[startIndex + 6] === CharacterCodes.e && array[startIndex + 7] === CharacterCodes.n && array[startIndex + 8] === CharacterCodes.t && array[startIndex + 9] === CharacterCodes.s) ? SyntaxKind.ImplementsKeyword : SyntaxKind.IdentifierName;\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 11:\n                // constructor\n            return (array[startIndex] === CharacterCodes.c && array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.n && array[startIndex + 3] === CharacterCodes.s && array[startIndex + 4] === CharacterCodes.t && array[startIndex + 5] === CharacterCodes.r && array[startIndex + 6] === CharacterCodes.u && array[startIndex + 7] === CharacterCodes.c && array[startIndex + 8] === CharacterCodes.t && array[startIndex + 9] === CharacterCodes.o && array[startIndex + 10] === CharacterCodes.r) ? SyntaxKind.ConstructorKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface ISeparatedSyntaxList extends ISyntaxElement {\n        childAt(index: number): ISyntaxNodeOrToken;\n\n        toArray(): ISyntaxNodeOrToken[];\n        toNonSeparatorArray(): ISyntaxNodeOrToken[];\n\n        separatorCount();\n        separatorAt(index: number): ISyntaxToken;\n\n        nonSeparatorCount();\n        nonSeparatorAt(index: number): ISyntaxNodeOrToken;\n\n        insertChildrenInto(array: ISyntaxElement[], index: number): void;\n    }\n}\n\nmodule TypeScript.Syntax {\n    class EmptySeparatedSyntaxList implements ISeparatedSyntaxList {\n        public kind() {\n            return SyntaxKind.SeparatedList;\n        }\n\n        public isNode() {\n            return false;\n        }\n\n        public isToken() {\n            return false;\n        }\n\n        public isList() {\n            return false;\n        }\n\n        public isSeparatedList() {\n            return true;\n        }\n\n        toJSON(key) {\n            return [];\n        }\n\n        public childCount() {\n            return 0;\n        }\n\n        public nonSeparatorCount() {\n            return 0;\n        }\n\n        public separatorCount() {\n            return 0;\n        }\n\n        public toArray(): ISyntaxNodeOrToken[] {\n            return [];\n        }\n\n        public toNonSeparatorArray(): ISyntaxNodeOrToken[] {\n            return [];\n        }\n\n        public childAt(index: number): ISyntaxNodeOrToken {\n            throw Errors.argumentOutOfRange(\"index\");\n        }\n\n        public nonSeparatorAt(index: number): ISyntaxNodeOrToken {\n            throw Errors.argumentOutOfRange(\"index\");\n        }\n\n        public separatorAt(index: number): ISyntaxToken {\n            throw Errors.argumentOutOfRange(\"index\");\n        }\n\n        collectTextElements(elements: string[]): void {\n        }\n\n        firstToken(): ISyntaxToken {\n            return null;\n        }\n\n        lastToken(): ISyntaxToken {\n            return null;\n        }\n\n        fullWidth() {\n            return 0;\n        }\n\n        fullText() {\n            return \"\";\n        }\n\n        width() {\n            return 0;\n        }\n\n        isTypeScriptSpecific() {\n            return false;\n        }\n\n        isIncrementallyUnusable() {\n            return false;\n        }\n\n        findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            // This should never have been called on this list.  It has a 0 width, so the client \n            // should have skipped over this.\n            throw Errors.invalidOperation();\n        }\n\n        insertChildrenInto(array: ISyntaxElement[], index: number): void {\n        }\n\n        leadingTrivia() {\n            return Syntax.emptyTriviaList;\n        }\n\n        trailingTrivia() {\n            return Syntax.emptyTriviaList;\n        }\n\n        leadingTriviaWidth() {\n            return 0;\n        }\n\n        trailingTriviaWidth() {\n            return 0;\n        }\n    }\n\n    export var emptySeparatedList: ISeparatedSyntaxList = new EmptySeparatedSyntaxList();\n\n    class SingletonSeparatedSyntaxList implements ISeparatedSyntaxList {\n        private item: ISyntaxNodeOrToken;\n\n        constructor(item: ISyntaxNodeOrToken) {\n            this.item = item;\n        }\n\n        public toJSON(key) {\n            return [this.item];\n        }\n\n        public kind() { return SyntaxKind.SeparatedList; }\n\n        public isNode(): boolean { return false; }\n        public isToken(): boolean { return false; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return true; }\n\n        public childCount() { return 1; }\n        public nonSeparatorCount() { return 1; }\n        public separatorCount() { return 0; }\n\n        public toArray() { return [this.item]; }\n        public toNonSeparatorArray() { return [this.item]; }\n\n        public childAt(index: number): ISyntaxNodeOrToken {\n            if (index !== 0) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.item;\n        }\n\n        public nonSeparatorAt(index: number): ISyntaxNodeOrToken {\n            if (index !== 0) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.item;\n        }\n\n        public separatorAt(index: number): ISyntaxToken {\n            throw Errors.argumentOutOfRange(\"index\");\n        }\n\n        public collectTextElements(elements: string[]): void {\n            this.item.collectTextElements(elements);\n        }\n\n        public firstToken(): ISyntaxToken {\n            return this.item.firstToken();\n        }\n\n        public lastToken(): ISyntaxToken {\n            return this.item.lastToken();\n        }\n\n        public fullWidth(): number {\n            return this.item.fullWidth();\n        }\n\n        public width(): number {\n            return this.item.width();\n        }\n\n        public fullText(): string {\n            return this.item.fullText();\n        }\n\n        public leadingTrivia(): ISyntaxTriviaList {\n            return this.item.leadingTrivia();\n        }\n\n        public trailingTrivia(): ISyntaxTriviaList {\n            return this.item.trailingTrivia();\n        }\n\n        public leadingTriviaWidth(): number {\n            return this.item.leadingTriviaWidth();\n        }\n\n        public trailingTriviaWidth(): number {\n            return this.item.trailingTriviaWidth();\n        }\n\n        public isTypeScriptSpecific(): boolean {\n            return this.item.isTypeScriptSpecific();\n        }\n\n        public isIncrementallyUnusable(): boolean {\n            return this.item.isIncrementallyUnusable();\n        }\n\n        public findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            // Debug.assert(position >= 0 && position < this.item.fullWidth());\n            return (<any>this.item).findTokenInternal(\n                new PositionedSeparatedList(parent, this, fullStart), position, fullStart);\n        }\n\n        public insertChildrenInto(array: ISyntaxElement[], index: number): void {\n            array.splice(index, 0, this.item);\n        }\n    }\n\n    class NormalSeparatedSyntaxList implements ISeparatedSyntaxList {\n        private elements: ISyntaxNodeOrToken[];\n        private _data: number = 0;\n\n        constructor(elements: ISyntaxNodeOrToken[]) {\n            this.elements = elements;\n        }\n\n        public kind() { return SyntaxKind.SeparatedList; }\n\n        public isToken(): boolean { return false; }\n        public isNode(): boolean { return false; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return true; }\n        public toJSON(key) { return this.elements; }\n\n        public childCount() { return this.elements.length; }\n        public nonSeparatorCount() { return IntegerUtilities.integerDivide(this.elements.length + 1, 2); }\n        public separatorCount() { return IntegerUtilities.integerDivide(this.elements.length, 2); }\n\n        public toArray(): ISyntaxNodeOrToken[] { return this.elements.slice(0); }\n\n        public toNonSeparatorArray(): ISyntaxNodeOrToken[] {\n            var result: ISyntaxNodeOrToken[] = [];\n            for (var i = 0, n = this.nonSeparatorCount(); i < n; i++) {\n                result.push(this.nonSeparatorAt(i));\n            }\n\n            return result;\n        }\n        \n        public childAt(index: number): ISyntaxNodeOrToken {\n            if (index < 0 || index >= this.elements.length) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.elements[index];\n        }\n\n        public nonSeparatorAt(index: number): ISyntaxNodeOrToken {\n            var value = index * 2;\n            if (value < 0 || value >= this.elements.length) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.elements[value];\n        }\n\n        public separatorAt(index: number): ISyntaxToken {\n            var value = index * 2 + 1;\n            if (value < 0 || value >= this.elements.length) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return <ISyntaxToken>this.elements[value];\n        }\n\n        public firstToken(): ISyntaxToken {\n            var token;\n            for (var i = 0, n = this.elements.length; i < n; i++) {\n                if (i % 2 === 0) {\n                    var nodeOrToken = this.elements[i];\n                    token = nodeOrToken.firstToken();\n                    if (token !== null) {\n                        return token;\n                    }\n                }\n                else {\n                    token = <ISyntaxToken>this.elements[i];\n                    if (token.width() > 0) {\n                        return token;\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public lastToken(): ISyntaxToken {\n            var token;\n            for (var i = this.elements.length - 1; i >= 0; i--) {\n                if (i % 2 === 0) {\n                    var nodeOrToken = this.elements[i];\n                    token = nodeOrToken.lastToken();\n                    if (token !== null) {\n                        return token;\n                    }\n                }\n                else {\n                    token = <ISyntaxToken>this.elements[i];\n                    if (token.width() > 0) {\n                        return token;\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public fullText(): string {\n            var elements: string[] = [];\n            this.collectTextElements(elements);\n            return elements.join(\"\");\n        }\n\n        public isTypeScriptSpecific(): boolean {\n            for (var i = 0, n = this.nonSeparatorCount(); i < n; i++) {\n                if (this.nonSeparatorAt(i).isTypeScriptSpecific()) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public isIncrementallyUnusable(): boolean {\n            return (this.data() & SyntaxConstants.NodeIncrementallyUnusableMask) !== 0;\n        }\n\n        public fullWidth(): number {\n            return this.data() >>> SyntaxConstants.NodeFullWidthShift;\n        }\n\n        public width(): number {\n            var fullWidth = this.fullWidth();\n            return fullWidth - this.leadingTriviaWidth() - this.trailingTriviaWidth();\n        }\n\n        public leadingTrivia(): ISyntaxTriviaList {\n            return this.firstToken().leadingTrivia();\n        }\n\n        public trailingTrivia(): ISyntaxTriviaList {\n            return this.lastToken().trailingTrivia();\n        }\n\n        public leadingTriviaWidth(): number {\n            return this.firstToken().leadingTriviaWidth();\n        }\n\n        public trailingTriviaWidth(): number {\n            return this.lastToken().trailingTriviaWidth();\n        }\n\n        private computeData(): number {\n            var fullWidth = 0;\n            var isIncrementallyUnusable = false;\n\n            for (var i = 0, n = this.elements.length; i < n; i++) {\n                var element = this.elements[i];\n\n                var childWidth = element.fullWidth();\n                fullWidth += childWidth;\n\n                isIncrementallyUnusable = isIncrementallyUnusable || element.isIncrementallyUnusable();\n            }\n\n            return (fullWidth << SyntaxConstants.NodeFullWidthShift)\n                 | (isIncrementallyUnusable ? SyntaxConstants.NodeIncrementallyUnusableMask : 0)\n                 | SyntaxConstants.NodeDataComputed;\n        }\n\n        private data(): number {\n            if ((this._data & SyntaxConstants.NodeDataComputed) === 0) {\n                this._data = this.computeData();\n            }\n\n            return this._data;\n        }\n\n        public findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            parent = new PositionedSeparatedList(parent, this, fullStart);\n            for (var i = 0, n = this.elements.length; i < n; i++) {\n                var element = this.elements[i];\n\n                var childWidth = element.fullWidth();\n                if (position < childWidth) {\n                    return (<any>element).findTokenInternal(parent, position, fullStart);\n                }\n\n                position -= childWidth;\n                fullStart += childWidth;\n            }\n\n            throw Errors.invalidOperation();\n        }\n\n        public collectTextElements(elements: string[]): void {\n            for (var i = 0, n = this.elements.length; i < n; i++) {\n                var element = this.elements[i];\n                element.collectTextElements(elements);\n            }\n        }\n\n        public insertChildrenInto(array: ISyntaxElement[], index: number): void {\n            if (index === 0) {\n                array.unshift.apply(array, this.elements);\n            }\n            else {\n                // TODO: this seems awfully innefficient.  Can we do better here?\n                array.splice.apply(array, [index, <any>0].concat(this.elements));\n            }\n        }\n    }\n\n    export function separatedList(nodes: ISyntaxNodeOrToken[]): ISeparatedSyntaxList {\n        return separatedListAndValidate(nodes, false);\n    }\n\n    function separatedListAndValidate(nodes: ISyntaxNodeOrToken[], validate: boolean): ISeparatedSyntaxList {\n        if (nodes === undefined || nodes === null || nodes.length === 0) {\n            return emptySeparatedList;\n        }\n\n        if (validate) {\n            for (var i = 0; i < nodes.length; i++) {\n                var item = nodes[i];\n\n                if (i % 2 === 1) {\n                    // Debug.assert(SyntaxFacts.isTokenKind(item.kind()));\n                }\n            }\n        }\n\n        if (nodes.length === 1) {\n            return new SingletonSeparatedSyntaxList(nodes[0]);\n        }\n\n        return new NormalSeparatedSyntaxList(nodes);\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface ISlidingWindowSource {\n        // Asks the source to copy items starting at sourceIndex into the window at \'destinationIndex\'\n        // with up to \'spaceAvailable\' items.  The actual number of items fetched should be given as \n        // the return value.\n        fetchMoreItems(argument: any, sourceIndex: number, window: any[], destinationIndex: number, spaceAvailable: number): number;\n    }\n\n    export class SlidingWindow {\n\n        // The number of valid items in window.\n        private windowCount: number = 0;\n\n        // The *absolute* index in the *full* array of items the *window* array starts at.  i.e.\n        // if there were 100 items, and window contains tokens [70, 80), then this value would be\n        // 70.\n        public windowAbsoluteStartIndex: number = 0;\n\n        // The index in the window array that we\'re at. i.e. if there 100 items and \n        // window contains tokens [70, 80), and we\'re on item 75, then this value would be \'5\'.\n        // Note: it is not absolute.  It is relative to the start of the window.\n        private currentRelativeItemIndex: number = 0;\n\n        // The number of pinned points there are.  As long as there is at least one  pinned point, we \n        // will not advance the start of the window array past the item marked by that pin point.\n        private _pinCount: number = 0;\n\n        // If there are any outstanding rewind points, this is index in the full array of items\n        // that the first rewind point points to.  If this is not -1, then we will not shift the\n        // start of the items array past this point.\n        private firstPinnedAbsoluteIndex: number = -1;\n\n        constructor(// Underlying source that we retrieve items from.\n                    private source: ISlidingWindowSource,\n                    // A window of items that has been read in from the underlying source.\n                    public window: any[],\n                    // The default value to return when there are no more items left in the window.\n                    private defaultValue: any,\n                    // The length of the source we\'re reading from if we know it up front.  -1 if we do not.\n                    private sourceLength = -1) {\n        }\n\n        // The last legal index of the window (exclusive).\n        private windowAbsoluteEndIndex(): number {\n            return this.windowAbsoluteStartIndex + this.windowCount;\n        }\n\n        private addMoreItemsToWindow(argument: any): boolean {\n            if (this.sourceLength >= 0 && this.absoluteIndex() >= this.sourceLength) {\n                return false;\n            }\n\n            // First, make room for the new items if we\'re out of room.\n            if (this.windowCount >= this.window.length) {\n                this.tryShiftOrGrowWindow();\n            }\n\n            var spaceAvailable = this.window.length - this.windowCount;\n            var amountFetched = this.source.fetchMoreItems(argument, this.windowAbsoluteEndIndex(), this.window, this.windowCount, spaceAvailable);\n\n            // Assert disabled because it is actually expensive enugh to affect perf.\n\n            this.windowCount += amountFetched;\n            return amountFetched > 0;\n        }\n\n        private tryShiftOrGrowWindow(): void {\n            // We want to shift if our current item is past the halfway point of the current item window.\n            var currentIndexIsPastWindowHalfwayPoint = this.currentRelativeItemIndex > (this.window.length >>> 1);\n\n            // However, we can only shift if we have no outstanding rewind points.  Or, if we have an \n            // outstanding rewind point, that it points to some point after the start of the window.\n            var isAllowedToShift =\n                this.firstPinnedAbsoluteIndex === -1 ||\n                this.firstPinnedAbsoluteIndex > this.windowAbsoluteStartIndex;\n\n            if (currentIndexIsPastWindowHalfwayPoint && isAllowedToShift) {\n                // Figure out where we\'re going to start shifting from. If we have no oustanding rewind \n                // points, then we\'ll start shifting over all the items starting from the current \n                // token we\'re point out.  Otherwise, we\'ll shift starting from the first item that \n                // the rewind point is pointing at.\n                // \n                // We\'ll call that point \'N\' from now on. \n                var shiftStartIndex = this.firstPinnedAbsoluteIndex === -1\n                    ? this.currentRelativeItemIndex\n                    : this.firstPinnedAbsoluteIndex - this.windowAbsoluteStartIndex;\n\n                // We have to shift the number of elements between the start index and the number of \n                // items in the window.\n                var shiftCount = this.windowCount - shiftStartIndex;\n\n                // Debug.assert(shiftStartIndex > 0);\n                if (shiftCount > 0) {\n                    ArrayUtilities.copy(this.window, shiftStartIndex, this.window, 0, shiftCount);\n                }\n\n                // The window has now moved over to the right by N.\n                this.windowAbsoluteStartIndex += shiftStartIndex;\n\n                // The number of valid items in the window has now decreased by N.\n                this.windowCount -= shiftStartIndex;\n\n                // The current item now starts further to the left in the window.\n                this.currentRelativeItemIndex -= shiftStartIndex;\n            }\n            else {\n                // Grow the exisitng array.\n                // this.window[this.window.length * 2 - 1] = this.defaultValue;\n                ArrayUtilities.grow(this.window, this.window.length * 2, this.defaultValue);\n            }\n        }\n\n        public absoluteIndex(): number {\n            return this.windowAbsoluteStartIndex + this.currentRelativeItemIndex;\n        }\n\n        public isAtEndOfSource(): boolean {\n            return this.absoluteIndex() >= this.sourceLength;\n        }\n\n        public getAndPinAbsoluteIndex(): number {\n            // Find the absolute index of this pin point.  i.e. it\'s the index as if we had an \n            // array containing *all* tokens.  \n            var absoluteIndex = this.absoluteIndex();\n            var pinCount = this._pinCount++;\n            if (pinCount === 0) {\n                // If this is the first pinned point, then store off this index.  We will ensure that\n                // we never shift the window past this point.\n                this.firstPinnedAbsoluteIndex = absoluteIndex;\n            }\n\n            return absoluteIndex;\n        }\n\n        public releaseAndUnpinAbsoluteIndex(absoluteIndex: number) {\n            this._pinCount--;\n            if (this._pinCount === 0) {\n                // If we just released the last outstanding pin, then we no longer need to \'fix\' the \n                // token window so it can\'t move forward.  Set the index to -1 so that we can shift \n                // things over the next time we read past the end of the array.\n                this.firstPinnedAbsoluteIndex = -1;\n            }\n        }\n\n        public rewindToPinnedIndex(absoluteIndex: number): void {\n            // The rewind point shows which absolute item we want to rewind to.  Get the relative \n            // index in the actual array that we want to point to.\n            var relativeIndex = absoluteIndex - this.windowAbsoluteStartIndex;\n\n            // Make sure we haven\'t screwed anything up.\n            // Debug.assert(relativeIndex >= 0 && relativeIndex < this.windowCount);\n\n            // Set ourselves back to that point.\n            this.currentRelativeItemIndex = relativeIndex;\n        }\n\n        public currentItem(argument: any): any {\n            if (this.currentRelativeItemIndex >= this.windowCount) {\n                if (!this.addMoreItemsToWindow(argument)) {\n                    return this.defaultValue;\n                }\n            }\n\n            return this.window[this.currentRelativeItemIndex];\n        }\n\n        public peekItemN(n: number): any {\n            // Assert disabled because it is actually expensive enugh to affect perf.\n            // Debug.assert(n >= 0);\n            while (this.currentRelativeItemIndex + n >= this.windowCount) {\n                if (!this.addMoreItemsToWindow(/*argument:*/ null)) {\n                    return this.defaultValue;\n                }\n            }\n\n            return this.window[this.currentRelativeItemIndex + n];\n        }\n\n        public moveToNextItem(): void {\n            this.currentRelativeItemIndex++;\n        }\n\n        public disgardAllItemsFromCurrentIndexOnwards(): void {\n            // By setting the window count to the current relative offset, we are effectively making\n            // any items we added to the window from the current offset onwards unusable.  When we\n            // try to get the next item, we\'ll be forced to refetch them from the underlying source.\n            this.windowCount = this.currentRelativeItemIndex;\n        }\n\n        public setAbsoluteIndex(absoluteIndex: number): void {\n            if (this.absoluteIndex() === absoluteIndex) {\n                // Nothing to do if we\'re setting hte absolute index to where we current are.\n                return;\n            }\n\n            if (this._pinCount > 0) {\n                // If we have any active pins, then the caller better be setting the index somewhere\n                // inside our active window.\n                // Debug.assert(absoluteIndex >= this.windowAbsoluteStartIndex && absoluteIndex < this.windowAbsoluteEndIndex());\n            }\n\n            if (absoluteIndex >= this.windowAbsoluteStartIndex && absoluteIndex < this.windowAbsoluteEndIndex()) {\n                // The caller is setting the index to some place inside our current window.  This is \n                // easy to handle (and should be the common case).\n                this.currentRelativeItemIndex = (absoluteIndex - this.windowAbsoluteStartIndex);\n            }\n            else {\n                // The caller is setting the index to a place not in the window.  Just throw away \n                // everything we\'ve got.\n\n                // First, set the window start to that index.\n                this.windowAbsoluteStartIndex = absoluteIndex;\n\n                // Now, set the count to 0.  So we\'ll be forced to fetch more items.\n                this.windowCount = 0;\n\n                // And set us back to the start of the window.\n                this.currentRelativeItemIndex = 0;\n            }\n        }\n\n        public pinCount(): number {\n            return this._pinCount;\n        }\n    }\n}\n// Localizable string constants.  TODO: Figure out a way to actually localize things.\n\nmodule TypeScript {\n    export class Strings {\n        public static module__class__interface__enum__import_or_statement: string = \"module, class, interface, enum, import or statement\";\n        public static constructor__function__accessor_or_variable: string = \"constructor, function, accessor or variable\";\n        public static statement: string = \"statement\";\n        public static case_or_default_clause: string = \"case or default clause\";\n        public static identifier: string = \"identifier\";\n        public static call__construct__index__property_or_function_signature: string = \"call, construct, index, property or function signature\";\n        public static expression: string = \"expression\";\n        public static type_name: string = \"type name\";\n        public static property_or_accessor: string = \"property or accessor\";\n        public static parameter: string = \"parameter\";\n        public static type: string = \"type\";\n        public static type_parameter: string = \"type parameter\";\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript.Syntax {\n    export function emptySourceUnit() {\n        return Syntax.normalModeFactory.sourceUnit(Syntax.emptyList, Syntax.token(SyntaxKind.EndOfFileToken, { text: \"\" }));\n    }\n\n    export function getStandaloneExpression(positionedToken: PositionedToken): PositionedNodeOrToken\n    {\n        var token = positionedToken.token();\n        if (positionedToken !== null && positionedToken.kind() === SyntaxKind.IdentifierName) {\n            var parentPositionedNode = positionedToken.containingNode();\n            var parentNode = parentPositionedNode.node();\n\n            if (parentNode.kind() === SyntaxKind.QualifiedName && (<QualifiedNameSyntax>parentNode).right === token) {\n                return parentPositionedNode;\n            }\n            else if (parentNode.kind() === SyntaxKind.MemberAccessExpression && (<MemberAccessExpressionSyntax>parentNode).name === token) {\n                return parentPositionedNode;\n            }\n        }\n\n        return positionedToken;\n    }\n\n    export function isInModuleOrTypeContext(positionedToken: PositionedToken): boolean {\n        if (positionedToken !== null) {\n            var positionedNodeOrToken = Syntax.getStandaloneExpression(positionedToken);\n            var parent = positionedNodeOrToken.containingNode();\n\n            if (parent !== null) {\n                switch (parent.kind()) {\n                    case SyntaxKind.ModuleNameModuleReference:\n                        return true;\n                    case SyntaxKind.QualifiedName:\n                        // left of QN is namespace or type.  Note: when you have \"a.b.c()\", then\n                        // \"a.b\" is not a qualified name, it is a member access expression.\n                        // Qualified names are only parsed when the parser knows it\'s a type only\n                        // context.\n                        return true;\n                    default:\n                        return isInTypeOnlyContext(positionedToken);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    export function isInTypeOnlyContext(positionedToken: PositionedToken): boolean {\n        var positionedNodeOrToken = Syntax.getStandaloneExpression(positionedToken);\n        var positionedParent = positionedNodeOrToken.containingNode();\n\n        var parent = positionedParent.node();\n        var nodeOrToken = positionedNodeOrToken.nodeOrToken();\n\n        if (parent !== null) {\n            switch (parent.kind()) {\n                case SyntaxKind.ArrayType:\n                    return (<ArrayTypeSyntax>parent).type === nodeOrToken;\n                case SyntaxKind.CastExpression:\n                    return (<CastExpressionSyntax>parent).type === nodeOrToken;\n                case SyntaxKind.TypeAnnotation:\n                case SyntaxKind.HeritageClause:\n                case SyntaxKind.TypeArgumentList:\n                    return true;\n                // TODO: add more cases if necessary.  This list may not be complete.\n            }\n        }\n\n        return false;\n    }\n\n    export function childOffset(parent: ISyntaxElement, child: ISyntaxElement): number {\n        var offset = 0;\n        for (var i = 0, n = parent.childCount(); i < n; i++) {\n            var current = parent.childAt(i);\n            if (current === child) {\n                return offset;\n            }\n\n            if (current !== null) {\n                offset += current.fullWidth();\n            }\n        }\n\n        throw Errors.invalidOperation();\n    }\n\n    export function nodeStructuralEquals(node1: SyntaxNode, node2: SyntaxNode): boolean {\n        if (node1 === null) {\n            return node2 === null;\n        }\n\n        return node1.structuralEquals(node2);\n    }\n\n    export function nodeOrTokenStructuralEquals(node1: ISyntaxNodeOrToken, node2: ISyntaxNodeOrToken): boolean {\n        if (node1 === node2) {\n            return true;\n        }\n\n        if (node1 === null || node2 === null) {\n            return false;\n        }\n\n        if (node1.isToken()) {\n            return node2.isToken() ? tokenStructuralEquals(<ISyntaxToken>node1, <ISyntaxToken>node2) : false;\n        }\n\n        return node2.isNode() ? nodeStructuralEquals(<SyntaxNode>node1, <SyntaxNode>node2) : false;\n    }\n\n    export function tokenStructuralEquals(token1: ISyntaxToken, token2: ISyntaxToken): boolean {\n        if (token1 === token2) {\n            return true;\n        }\n\n        if (token1 === null || token2 === null) {\n            return false;\n        }\n\n        return token1.kind() === token2.kind() &&\n               token1.width() === token2.width() &&\n               token1.fullWidth() === token2.fullWidth() &&\n               token1.text() === token2.text() &&\n               Syntax.triviaListStructuralEquals(token1.leadingTrivia(), token2.leadingTrivia()) &&\n               Syntax.triviaListStructuralEquals(token1.trailingTrivia(), token2.trailingTrivia());\n    }\n\n    export function triviaListStructuralEquals(triviaList1: ISyntaxTriviaList, triviaList2: ISyntaxTriviaList): boolean {\n        if (triviaList1.count() !== triviaList2.count()) {\n            return false;\n        }\n\n        for (var i = 0, n = triviaList1.count(); i < n; i++) {\n            if (!Syntax.triviaStructuralEquals(triviaList1.syntaxTriviaAt(i), triviaList2.syntaxTriviaAt(i))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    export function triviaStructuralEquals(trivia1: ISyntaxTrivia, trivia2: ISyntaxTrivia): boolean {\n        return trivia1.kind() === trivia2.kind() &&\n               trivia1.fullWidth() === trivia2.fullWidth() &&\n               trivia1.fullText() === trivia2.fullText();\n    }\n\n    export function listStructuralEquals(list1: ISyntaxList, list2: ISyntaxList): boolean {\n        if (list1.childCount() !== list2.childCount()) {\n            return false;\n        }\n\n        for (var i = 0, n = list1.childCount(); i < n; i++) {\n            var child1 = list1.childAt(i);\n            var child2 = list2.childAt(i);\n\n            if (!Syntax.nodeOrTokenStructuralEquals(<any>child1, <any>child2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    export function separatedListStructuralEquals(list1: ISeparatedSyntaxList, list2: ISeparatedSyntaxList): boolean {\n        if (list1.childCount() !== list2.childCount()) {\n            return false;\n        }\n\n        for (var i = 0, n = list1.childCount(); i < n; i++) {\n            var element1 = list1.childAt(i);\n            var element2 = list2.childAt(i);\n            if (!Syntax.nodeOrTokenStructuralEquals(<any>element1, <any>element2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n    \n    export function elementStructuralEquals(element1: ISyntaxElement, element2: ISyntaxElement) {\n        if (element1 === element2) {\n            return true;\n        }\n\n        if (element1 === null || element2 === null) {\n            return false;\n        }\n\n        if (element2.kind() !== element2.kind()) {\n            return false;\n        }\n\n        if (element1.isToken()) {\n            return tokenStructuralEquals(<ISyntaxToken>element1, <ISyntaxToken>element2);\n        }\n        else if (element1.isNode()) {\n            return nodeStructuralEquals(<SyntaxNode>element1, <SyntaxNode>element2) ;\n        }\n        else if (element1.isList()) {\n            return listStructuralEquals(<ISyntaxList>element1, <ISyntaxList>element2);\n        }\n        else if (element1.isSeparatedList()) {\n            return separatedListStructuralEquals(<ISeparatedSyntaxList>element1, <ISeparatedSyntaxList>element2);\n        }\n\n        throw Errors.invalidOperation();\n    }\n\n    export function identifierName(text: string, info: ITokenInfo = null): ISyntaxToken {\n        return identifier(text);\n    }\n\n    export function trueExpression(): IUnaryExpressionSyntax {\n        return Syntax.token(SyntaxKind.TrueKeyword);\n    }\n\n    export function falseExpression(): IUnaryExpressionSyntax {\n        return Syntax.token(SyntaxKind.FalseKeyword);\n    }\n\n    export function numericLiteralExpression(text: string): IUnaryExpressionSyntax {\n        return Syntax.token(SyntaxKind.NumericLiteral, { text: text });\n    }\n\n    export function stringLiteralExpression(text: string): IUnaryExpressionSyntax {\n        return Syntax.token(SyntaxKind.StringLiteral, { text: text });\n    }\n\n    export function isSuperInvocationExpression(node: IExpressionSyntax): boolean {\n        return node.kind() === SyntaxKind.InvocationExpression &&\n            (<InvocationExpressionSyntax>node).expression.kind() === SyntaxKind.SuperKeyword;\n    }\n\n    export function isSuperInvocationExpressionStatement(node: SyntaxNode): boolean {\n        return node.kind() === SyntaxKind.ExpressionStatement &&\n            isSuperInvocationExpression((<ExpressionStatementSyntax>node).expression);\n    }\n\n    export function isSuperMemberAccessExpression(node: IExpressionSyntax): boolean {\n        return node.kind() === SyntaxKind.MemberAccessExpression &&\n            (<MemberAccessExpressionSyntax>node).expression.kind() === SyntaxKind.SuperKeyword;\n    }\n\n    export function isSuperMemberAccessInvocationExpression(node: SyntaxNode): boolean {\n        return node.kind() === SyntaxKind.InvocationExpression &&\n            isSuperMemberAccessExpression((<InvocationExpressionSyntax>node).expression);\n    }\n\n    export function assignmentExpression(left: IExpressionSyntax, token: ISyntaxToken, right: IExpressionSyntax): BinaryExpressionSyntax {\n        return Syntax.normalModeFactory.binaryExpression(SyntaxKind.AssignmentExpression, left, token, right);\n    }\n\n    export function nodeHasSkippedOrMissingTokens(node: SyntaxNode): boolean {\n        for (var i = 0; i < node.childCount(); i++) {\n            var child = node.childAt(i);\n            if (child !== null && child.isToken()) {\n                var token = <ISyntaxToken>child;\n                // If a token is skipped, return true. Or if it is a missing token. The only empty token that is not missing is EOF\n                if (token.hasSkippedToken() || (token.width() === 0 && token.kind() !== SyntaxKind.EndOfFileToken)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    export function isUnterminatedStringLiteral(token: ISyntaxToken): boolean {\n        if (token && token.kind() === SyntaxKind.StringLiteral) {\n            var text = token.text();\n            return text.length < 2 || text.charCodeAt(text.length - 1) !== text.charCodeAt(0);\n        }\n\n        return false;\n    }\n\n    export function isUnterminatedMultilineCommentTrivia(trivia: ISyntaxTrivia): boolean {\n        if (trivia && trivia.kind() === SyntaxKind.MultiLineCommentTrivia) {\n            var text = trivia.fullText();\n            return text.length < 4 || text.substring(text.length - 2) !== \"*/\";\n        }\n        return false;\n    }\n\n    export function isEntirelyInsideCommentTrivia(trivia: ISyntaxTrivia, fullStart: number, position: number): boolean {\n        if (trivia && trivia.isComment() && position > fullStart) {\n            var end = fullStart + trivia.fullWidth();\n            if (position < end) {\n                return true;\n            } else if (position === end) {\n                return trivia.kind() === SyntaxKind.SingleLineCommentTrivia || isUnterminatedMultilineCommentTrivia(trivia);\n            }\n        }\n\n        return false;\n    }\n\n    export function isEntirelyInsideComment(sourceUnit: SourceUnitSyntax, position: number): boolean {\n        var positionedToken = sourceUnit.findToken(position);\n        var fullStart = positionedToken.fullStart();\n        var triviaList: ISyntaxTriviaList = null;\n        var lastTriviaBeforeToken: ISyntaxTrivia = null;\n\n        if (positionedToken.kind() === SyntaxKind.EndOfFileToken) {\n            // Check if the trivia is leading on the EndOfFile token\n            if (positionedToken.token().hasLeadingTrivia()) {\n                triviaList = positionedToken.token().leadingTrivia();\n            }\n            // Or trailing on the previous token\n            else {\n                positionedToken = positionedToken.previousToken();\n                if (positionedToken) {\n                    if (positionedToken && positionedToken.token().hasTrailingTrivia()) {\n                        triviaList = positionedToken.token().trailingTrivia();\n                        fullStart = positionedToken.end();\n                    }\n                }\n            }\n        }\n        else {\n            if (position <= (fullStart + positionedToken.token().leadingTriviaWidth())) {\n                triviaList = positionedToken.token().leadingTrivia();\n            }\n            else if (position >= (fullStart + positionedToken.token().width())) {\n                triviaList = positionedToken.token().trailingTrivia();\n                fullStart = positionedToken.end();\n            }\n        }\n\n        if (triviaList) {\n            // Try to find the trivia matching the position\n            for (var i = 0, n = triviaList.count(); i < n; i++) {\n                var trivia = triviaList.syntaxTriviaAt(i);\n                if (position <= fullStart) {\n                    // Moved passed the trivia we need\n                    break;\n                }\n                else if (position <= fullStart + trivia.fullWidth() && trivia.isComment()) {\n                    // Found the comment trivia we were looking for\n                    lastTriviaBeforeToken = trivia;\n                    break;\n                }\n\n                fullStart += trivia.fullWidth();\n            }\n        }\n\n        return lastTriviaBeforeToken && isEntirelyInsideCommentTrivia(lastTriviaBeforeToken, fullStart, position);\n    }\n\n    export function isEntirelyInStringOrRegularExpressionLiteral(sourceUnit: SourceUnitSyntax, position: number): boolean {\n        var positionedToken = sourceUnit.findToken(position);\n        \n        if (positionedToken) {\n            if (positionedToken.kind() === SyntaxKind.EndOfFileToken) {\n                // EndOfFile token, enusre it did not follow an unterminated string literal\n                positionedToken = positionedToken.previousToken();\n                return positionedToken && positionedToken.token().trailingTriviaWidth() === 0 && isUnterminatedStringLiteral(positionedToken.token());\n            }\n            else if (position > positionedToken.start()) {\n                // Ensure position falls enterily within the literal if it is terminated, or the line if it is not\n                return (position < positionedToken.end() && (positionedToken.kind() === TypeScript.SyntaxKind.StringLiteral || positionedToken.kind() === TypeScript.SyntaxKind.RegularExpressionLiteral)) ||\n                    (position <= positionedToken.end() && isUnterminatedStringLiteral(positionedToken.token()));\n            }\n        }\n\n        return false;\n    }\n\n    function findSkippedTokenInTriviaList(positionedToken: PositionedToken, position: number, lookInLeadingTriviaList: boolean): PositionedSkippedToken {\n        var triviaList: TypeScript.ISyntaxTriviaList = null;\n        var fullStart: number;\n\n        if (lookInLeadingTriviaList) {\n            triviaList = positionedToken.token().leadingTrivia();\n            fullStart = positionedToken.fullStart();\n        }\n        else {\n            triviaList = positionedToken.token().trailingTrivia();\n            fullStart = positionedToken.end();\n        }\n\n        if (triviaList && triviaList.hasSkippedToken()) {\n            for (var i = 0, n = triviaList.count(); i < n; i++) {\n                var trivia = triviaList.syntaxTriviaAt(i);\n                var triviaWidth = trivia.fullWidth();\n\n                if (trivia.isSkippedToken() && position >= fullStart && position <= fullStart + triviaWidth) {\n                    return new PositionedSkippedToken(positionedToken, trivia.skippedToken(), fullStart);\n                }\n\n                fullStart += triviaWidth;\n            }\n        }\n\n        return null;\n    }\n\n    export function findSkippedTokenInLeadingTriviaList(positionedToken: PositionedToken, position: number): PositionedSkippedToken {\n        return findSkippedTokenInTriviaList(positionedToken, position, /*lookInLeadingTriviaList*/ true);\n    }\n\n    export function findSkippedTokenInTrailingTriviaList(positionedToken: PositionedToken, position: number): PositionedSkippedToken {\n        return findSkippedTokenInTriviaList(positionedToken, position, /*lookInLeadingTriviaList*/ false);\n    }\n    \n    export function findSkippedTokenInPositionedToken(positionedToken: PositionedToken, position: number): PositionedSkippedToken {\n        var positionInLeadingTriviaList = (position < positionedToken.start());\n        return findSkippedTokenInTriviaList(positionedToken, position, /*lookInLeadingTriviaList*/ positionInLeadingTriviaList);\n    }\n\n    export function getAncestorOfKind(positionedToken: PositionedElement, kind: SyntaxKind): PositionedElement {\n        while (positionedToken && positionedToken.parent()) {\n            if (positionedToken.parent().kind() === kind) {\n                return positionedToken.parent();\n            }\n\n            positionedToken = positionedToken.parent();\n        }\n\n        return null;\n    }\n\n    export function hasAncestorOfKind(positionedToken: PositionedElement, kind: SyntaxKind): boolean {\n        return Syntax.getAncestorOfKind(positionedToken, kind) !== null;\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class SyntaxDiagnostic extends Diagnostic {\n        public static equals(diagnostic1: SyntaxDiagnostic, diagnostic2: SyntaxDiagnostic): boolean {\n            return Diagnostic.equals(diagnostic1, diagnostic2);\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxElement {\n        kind(): SyntaxKind;\n\n        isNode(): boolean;\n        isToken(): boolean;\n        isList(): boolean;\n        isSeparatedList(): boolean;\n\n        childCount(): number;\n        childAt(index: number): ISyntaxElement;\n\n        // True if this element is typescript specific and would not be legal in pure javascript.\n        isTypeScriptSpecific(): boolean;\n\n        // True if this element cannot be reused in incremental parsing.  There are several situations\n        // in which an element can not be reused.  They are:\n        //\n        // 1) The element contained skipped text.\n        // 2) The element contained zero width tokens.\n        // 3) The element contains tokens generated by the parser (like >> or a keyword -> identifier\n        //    conversion).\n        // 4) The element contains a regex token somewhere under it.  A regex token is either a \n        //    regex itself (i.e. /foo/), or is a token which could start a regex (i.e. \"/\" or \"/=\").  This\n        //    data is used by the incremental parser to decide if a node can be reused.  Due to the \n        //    lookahead nature of regex tokens, a node containing a regex token cannot be reused.  Normally,\n        //    changes to text only affect the tokens directly intersected.  However, because regex tokens \n        //    have such unbounded lookahead (technically bounded at the end of a line, but htat\'s minor), \n        //    we need to recheck them to see if they\'ve changed due to the edit.  For example, if you had:\n        //    \n        //         while (true) /3; return;\n        //    \n        //    And you changed it to:\n        //    \n        //         while (true) /3; return/;\n        //    \n        //    Then even though only the \'return\' and \';\' colons were touched, we\'d want to rescan the \'/\'\n        //    token which we would then realize was a regex.\n        isIncrementallyUnusable(): boolean;\n\n        // With of this element, including leading and trailing trivia.\n        fullWidth(): number;\n\n        // Width of this element, not including leading and trailing trivia.\n        width(): number;\n\n        // Text for this element, including leading and trailing trivia.\n        fullText(): string;\n\n        leadingTrivia(): ISyntaxTriviaList;\n        trailingTrivia(): ISyntaxTriviaList;\n\n        leadingTriviaWidth(): number;\n        trailingTriviaWidth(): number;\n\n        firstToken(): ISyntaxToken;\n        lastToken(): ISyntaxToken;\n\n        collectTextElements(elements: string[]): void;\n    }\n\n    export interface ISyntaxNode extends ISyntaxNodeOrToken {\n    }\n\n    export interface IModuleReferenceSyntax extends ISyntaxNode {\n    }\n\n    export interface IModuleElementSyntax extends ISyntaxNode {\n    }\n\n    export interface IStatementSyntax extends IModuleElementSyntax {\n    }\n\n    export interface ITypeMemberSyntax extends ISyntaxNode {\n    }\n\n    export interface IClassElementSyntax extends ISyntaxNode {\n    }\n\n    export interface IMemberDeclarationSyntax extends IClassElementSyntax {\n    }\n\n    export interface ISwitchClauseSyntax extends ISyntaxNode {\n    }\n\n    export interface IExpressionSyntax extends ISyntaxNodeOrToken {\n    }\n\n    export interface IUnaryExpressionSyntax extends IExpressionSyntax {\n    }\n\n    export interface ITypeSyntax extends IUnaryExpressionSyntax {\n    }\n\n    export interface INameSyntax extends ITypeSyntax {\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript.Syntax {\n    export interface IFactory {\n        sourceUnit(moduleElements: ISyntaxList, endOfFileToken: ISyntaxToken): SourceUnitSyntax;\n        externalModuleReference(moduleOrRequireKeyword: ISyntaxToken, openParenToken: ISyntaxToken, stringLiteral: ISyntaxToken, closeParenToken: ISyntaxToken): ExternalModuleReferenceSyntax;\n        moduleNameModuleReference(moduleName: INameSyntax): ModuleNameModuleReferenceSyntax;\n        importDeclaration(importKeyword: ISyntaxToken, identifier: ISyntaxToken, equalsToken: ISyntaxToken, moduleReference: ModuleReferenceSyntax, semicolonToken: ISyntaxToken): ImportDeclarationSyntax;\n        exportAssignment(exportKeyword: ISyntaxToken, equalsToken: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): ExportAssignmentSyntax;\n        classDeclaration(modifiers: ISyntaxList, classKeyword: ISyntaxToken, identifier: ISyntaxToken, typeParameterList: TypeParameterListSyntax, heritageClauses: ISyntaxList, openBraceToken: ISyntaxToken, classElements: ISyntaxList, closeBraceToken: ISyntaxToken): ClassDeclarationSyntax;\n        interfaceDeclaration(modifiers: ISyntaxList, interfaceKeyword: ISyntaxToken, identifier: ISyntaxToken, typeParameterList: TypeParameterListSyntax, heritageClauses: ISyntaxList, body: ObjectTypeSyntax): InterfaceDeclarationSyntax;\n        heritageClause(extendsOrImplementsKeyword: ISyntaxToken, typeNames: ISeparatedSyntaxList): HeritageClauseSyntax;\n        moduleDeclaration(modifiers: ISyntaxList, moduleKeyword: ISyntaxToken, moduleName: INameSyntax, stringLiteral: ISyntaxToken, openBraceToken: ISyntaxToken, moduleElements: ISyntaxList, closeBraceToken: ISyntaxToken): ModuleDeclarationSyntax;\n        functionDeclaration(modifiers: ISyntaxList, functionKeyword: ISyntaxToken, identifier: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): FunctionDeclarationSyntax;\n        variableStatement(modifiers: ISyntaxList, variableDeclaration: VariableDeclarationSyntax, semicolonToken: ISyntaxToken): VariableStatementSyntax;\n        variableDeclaration(varKeyword: ISyntaxToken, variableDeclarators: ISeparatedSyntaxList): VariableDeclarationSyntax;\n        variableDeclarator(identifier: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, equalsValueClause: EqualsValueClauseSyntax): VariableDeclaratorSyntax;\n        equalsValueClause(equalsToken: ISyntaxToken, value: IExpressionSyntax): EqualsValueClauseSyntax;\n        prefixUnaryExpression(kind: SyntaxKind, operatorToken: ISyntaxToken, operand: IUnaryExpressionSyntax): PrefixUnaryExpressionSyntax;\n        arrayLiteralExpression(openBracketToken: ISyntaxToken, expressions: ISeparatedSyntaxList, closeBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax;\n        omittedExpression(): OmittedExpressionSyntax;\n        parenthesizedExpression(openParenToken: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken): ParenthesizedExpressionSyntax;\n        simpleArrowFunctionExpression(identifier: ISyntaxToken, equalsGreaterThanToken: ISyntaxToken, body: ISyntaxNodeOrToken): SimpleArrowFunctionExpressionSyntax;\n        parenthesizedArrowFunctionExpression(callSignature: CallSignatureSyntax, equalsGreaterThanToken: ISyntaxToken, body: ISyntaxNodeOrToken): ParenthesizedArrowFunctionExpressionSyntax;\n        qualifiedName(left: INameSyntax, dotToken: ISyntaxToken, right: ISyntaxToken): QualifiedNameSyntax;\n        typeArgumentList(lessThanToken: ISyntaxToken, typeArguments: ISeparatedSyntaxList, greaterThanToken: ISyntaxToken): TypeArgumentListSyntax;\n        constructorType(newKeyword: ISyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, equalsGreaterThanToken: ISyntaxToken, type: ITypeSyntax): ConstructorTypeSyntax;\n        functionType(typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, equalsGreaterThanToken: ISyntaxToken, type: ITypeSyntax): FunctionTypeSyntax;\n        objectType(openBraceToken: ISyntaxToken, typeMembers: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): ObjectTypeSyntax;\n        arrayType(type: ITypeSyntax, openBracketToken: ISyntaxToken, closeBracketToken: ISyntaxToken): ArrayTypeSyntax;\n        genericType(name: INameSyntax, typeArgumentList: TypeArgumentListSyntax): GenericTypeSyntax;\n        typeAnnotation(colonToken: ISyntaxToken, type: ITypeSyntax): TypeAnnotationSyntax;\n        block(openBraceToken: ISyntaxToken, statements: ISyntaxList, closeBraceToken: ISyntaxToken): BlockSyntax;\n        parameter(dotDotDotToken: ISyntaxToken, publicOrPrivateKeyword: ISyntaxToken, identifier: ISyntaxToken, questionToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, equalsValueClause: EqualsValueClauseSyntax): ParameterSyntax;\n        memberAccessExpression(expression: IExpressionSyntax, dotToken: ISyntaxToken, name: ISyntaxToken): MemberAccessExpressionSyntax;\n        postfixUnaryExpression(kind: SyntaxKind, operand: IExpressionSyntax, operatorToken: ISyntaxToken): PostfixUnaryExpressionSyntax;\n        elementAccessExpression(expression: IExpressionSyntax, openBracketToken: ISyntaxToken, argumentExpression: IExpressionSyntax, closeBracketToken: ISyntaxToken): ElementAccessExpressionSyntax;\n        invocationExpression(expression: IExpressionSyntax, argumentList: ArgumentListSyntax): InvocationExpressionSyntax;\n        argumentList(typeArgumentList: TypeArgumentListSyntax, openParenToken: ISyntaxToken, arguments: ISeparatedSyntaxList, closeParenToken: ISyntaxToken): ArgumentListSyntax;\n        binaryExpression(kind: SyntaxKind, left: IExpressionSyntax, operatorToken: ISyntaxToken, right: IExpressionSyntax): BinaryExpressionSyntax;\n        conditionalExpression(condition: IExpressionSyntax, questionToken: ISyntaxToken, whenTrue: IExpressionSyntax, colonToken: ISyntaxToken, whenFalse: IExpressionSyntax): ConditionalExpressionSyntax;\n        constructSignature(newKeyword: ISyntaxToken, callSignature: CallSignatureSyntax): ConstructSignatureSyntax;\n        methodSignature(propertyName: ISyntaxToken, questionToken: ISyntaxToken, callSignature: CallSignatureSyntax): MethodSignatureSyntax;\n        indexSignature(openBracketToken: ISyntaxToken, parameter: ParameterSyntax, closeBracketToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax): IndexSignatureSyntax;\n        propertySignature(propertyName: ISyntaxToken, questionToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax): PropertySignatureSyntax;\n        callSignature(typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, typeAnnotation: TypeAnnotationSyntax): CallSignatureSyntax;\n        parameterList(openParenToken: ISyntaxToken, parameters: ISeparatedSyntaxList, closeParenToken: ISyntaxToken): ParameterListSyntax;\n        typeParameterList(lessThanToken: ISyntaxToken, typeParameters: ISeparatedSyntaxList, greaterThanToken: ISyntaxToken): TypeParameterListSyntax;\n        typeParameter(identifier: ISyntaxToken, constraint: ConstraintSyntax): TypeParameterSyntax;\n        constraint(extendsKeyword: ISyntaxToken, type: ITypeSyntax): ConstraintSyntax;\n        elseClause(elseKeyword: ISyntaxToken, statement: IStatementSyntax): ElseClauseSyntax;\n        ifStatement(ifKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax, elseClause: ElseClauseSyntax): IfStatementSyntax;\n        expressionStatement(expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ExpressionStatementSyntax;\n        constructorDeclaration(constructorKeyword: ISyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): ConstructorDeclarationSyntax;\n        memberFunctionDeclaration(modifiers: ISyntaxList, propertyName: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): MemberFunctionDeclarationSyntax;\n        getMemberAccessorDeclaration(modifiers: ISyntaxList, getKeyword: ISyntaxToken, propertyName: ISyntaxToken, parameterList: ParameterListSyntax, typeAnnotation: TypeAnnotationSyntax, block: BlockSyntax): GetMemberAccessorDeclarationSyntax;\n        setMemberAccessorDeclaration(modifiers: ISyntaxList, setKeyword: ISyntaxToken, propertyName: ISyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax): SetMemberAccessorDeclarationSyntax;\n        memberVariableDeclaration(modifiers: ISyntaxList, variableDeclarator: VariableDeclaratorSyntax, semicolonToken: ISyntaxToken): MemberVariableDeclarationSyntax;\n        throwStatement(throwKeyword: ISyntaxToken, expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ThrowStatementSyntax;\n        returnStatement(returnKeyword: ISyntaxToken, expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ReturnStatementSyntax;\n        objectCreationExpression(newKeyword: ISyntaxToken, expression: IExpressionSyntax, argumentList: ArgumentListSyntax): ObjectCreationExpressionSyntax;\n        switchStatement(switchKeyword: ISyntaxToken, openParenToken: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken, openBraceToken: ISyntaxToken, switchClauses: ISyntaxList, closeBraceToken: ISyntaxToken): SwitchStatementSyntax;\n        caseSwitchClause(caseKeyword: ISyntaxToken, expression: IExpressionSyntax, colonToken: ISyntaxToken, statements: ISyntaxList): CaseSwitchClauseSyntax;\n        defaultSwitchClause(defaultKeyword: ISyntaxToken, colonToken: ISyntaxToken, statements: ISyntaxList): DefaultSwitchClauseSyntax;\n        breakStatement(breakKeyword: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): BreakStatementSyntax;\n        continueStatement(continueKeyword: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): ContinueStatementSyntax;\n        forStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken, variableDeclaration: VariableDeclarationSyntax, initializer: IExpressionSyntax, firstSemicolonToken: ISyntaxToken, condition: IExpressionSyntax, secondSemicolonToken: ISyntaxToken, incrementor: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): ForStatementSyntax;\n        forInStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken, variableDeclaration: VariableDeclarationSyntax, left: IExpressionSyntax, inKeyword: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): ForInStatementSyntax;\n        whileStatement(whileKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): WhileStatementSyntax;\n        withStatement(withKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): WithStatementSyntax;\n        enumDeclaration(modifiers: ISyntaxList, enumKeyword: ISyntaxToken, identifier: ISyntaxToken, openBraceToken: ISyntaxToken, enumElements: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): EnumDeclarationSyntax;\n        enumElement(propertyName: ISyntaxToken, equalsValueClause: EqualsValueClauseSyntax): EnumElementSyntax;\n        castExpression(lessThanToken: ISyntaxToken, type: ITypeSyntax, greaterThanToken: ISyntaxToken, expression: IUnaryExpressionSyntax): CastExpressionSyntax;\n        objectLiteralExpression(openBraceToken: ISyntaxToken, propertyAssignments: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax;\n        simplePropertyAssignment(propertyName: ISyntaxToken, colonToken: ISyntaxToken, expression: IExpressionSyntax): SimplePropertyAssignmentSyntax;\n        functionPropertyAssignment(propertyName: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax): FunctionPropertyAssignmentSyntax;\n        getAccessorPropertyAssignment(getKeyword: ISyntaxToken, propertyName: ISyntaxToken, openParenToken: ISyntaxToken, closeParenToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, block: BlockSyntax): GetAccessorPropertyAssignmentSyntax;\n        setAccessorPropertyAssignment(setKeyword: ISyntaxToken, propertyName: ISyntaxToken, openParenToken: ISyntaxToken, parameter: ParameterSyntax, closeParenToken: ISyntaxToken, block: BlockSyntax): SetAccessorPropertyAssignmentSyntax;\n        functionExpression(functionKeyword: ISyntaxToken, identifier: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax): FunctionExpressionSyntax;\n        emptyStatement(semicolonToken: ISyntaxToken): EmptyStatementSyntax;\n        tryStatement(tryKeyword: ISyntaxToken, block: BlockSyntax, catchClause: CatchClauseSyntax, finallyClause: FinallyClauseSyntax): TryStatementSyntax;\n        catchClause(catchKeyword: ISyntaxToken, openParenToken: ISyntaxToken, identifier: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, closeParenToken: ISyntaxToken, block: BlockSyntax): CatchClauseSyntax;\n        finallyClause(finallyKeyword: ISyntaxToken, block: BlockSyntax): FinallyClauseSyntax;\n        labeledStatement(identifier: ISyntaxToken, colonToken: ISyntaxToken, statement: IStatementSyntax): LabeledStatementSyntax;\n        doStatement(doKeyword: ISyntaxToken, statement: IStatementSyntax, whileKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, semicolonToken: ISyntaxToken): DoStatementSyntax;\n        typeOfExpression(typeOfKeyword: ISyntaxToken, expression: IExpressionSyntax): TypeOfExpressionSyntax;\n        deleteExpression(deleteKeyword: ISyntaxToken, expression: IExpressionSyntax): DeleteExpressionSyntax;\n        voidExpression(voidKeyword: ISyntaxToken, expression: IExpressionSyntax): VoidExpressionSyntax;\n        debuggerStatement(debuggerKeyword: ISyntaxToken, semicolonToken: ISyntaxToken): DebuggerStatementSyntax;\n    }\n\n    export class NormalModeFactory implements IFactory {\n        sourceUnit(moduleElements: ISyntaxList, endOfFileToken: ISyntaxToken): SourceUnitSyntax {\n            return new SourceUnitSyntax(moduleElements, endOfFileToken, /*parsedInStrictMode:*/ false);\n        }\n        externalModuleReference(moduleOrRequireKeyword: ISyntaxToken, openParenToken: ISyntaxToken, stringLiteral: ISyntaxToken, closeParenToken: ISyntaxToken): ExternalModuleReferenceSyntax {\n            return new ExternalModuleReferenceSyntax(moduleOrRequireKeyword, openParenToken, stringLiteral, closeParenToken, /*parsedInStrictMode:*/ false);\n        }\n        moduleNameModuleReference(moduleName: INameSyntax): ModuleNameModuleReferenceSyntax {\n            return new ModuleNameModuleReferenceSyntax(moduleName, /*parsedInStrictMode:*/ false);\n        }\n        importDeclaration(importKeyword: ISyntaxToken, identifier: ISyntaxToken, equalsToken: ISyntaxToken, moduleReference: ModuleReferenceSyntax, semicolonToken: ISyntaxToken): ImportDeclarationSyntax {\n            return new ImportDeclarationSyntax(importKeyword, identifier, equalsToken, moduleReference, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        exportAssignment(exportKeyword: ISyntaxToken, equalsToken: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): ExportAssignmentSyntax {\n            return new ExportAssignmentSyntax(exportKeyword, equalsToken, identifier, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        classDeclaration(modifiers: ISyntaxList, classKeyword: ISyntaxToken, identifier: ISyntaxToken, typeParameterList: TypeParameterListSyntax, heritageClauses: ISyntaxList, openBraceToken: ISyntaxToken, classElements: ISyntaxList, closeBraceToken: ISyntaxToken): ClassDeclarationSyntax {\n            return new ClassDeclarationSyntax(modifiers, classKeyword, identifier, typeParameterList, heritageClauses, openBraceToken, classElements, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        interfaceDeclaration(modifiers: ISyntaxList, interfaceKeyword: ISyntaxToken, identifier: ISyntaxToken, typeParameterList: TypeParameterListSyntax, heritageClauses: ISyntaxList, body: ObjectTypeSyntax): InterfaceDeclarationSyntax {\n            return new InterfaceDeclarationSyntax(modifiers, interfaceKeyword, identifier, typeParameterList, heritageClauses, body, /*parsedInStrictMode:*/ false);\n        }\n        heritageClause(extendsOrImplementsKeyword: ISyntaxToken, typeNames: ISeparatedSyntaxList): HeritageClauseSyntax {\n            return new HeritageClauseSyntax(extendsOrImplementsKeyword, typeNames, /*parsedInStrictMode:*/ false);\n        }\n        moduleDeclaration(modifiers: ISyntaxList, moduleKeyword: ISyntaxToken, moduleName: INameSyntax, stringLiteral: ISyntaxToken, openBraceToken: ISyntaxToken, moduleElements: ISyntaxList, closeBraceToken: ISyntaxToken): ModuleDeclarationSyntax {\n            return new ModuleDeclarationSyntax(modifiers, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        functionDeclaration(modifiers: ISyntaxList, functionKeyword: ISyntaxToken, identifier: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): FunctionDeclarationSyntax {\n            return new FunctionDeclarationSyntax(modifiers, functionKeyword, identifier, callSignature, block, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        variableStatement(modifiers: ISyntaxList, variableDeclaration: VariableDeclarationSyntax, semicolonToken: ISyntaxToken): VariableStatementSyntax {\n            return new VariableStatementSyntax(modifiers, variableDeclaration, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        variableDeclaration(varKeyword: ISyntaxToken, variableDeclarators: ISeparatedSyntaxList): VariableDeclarationSyntax {\n            return new VariableDeclarationSyntax(varKeyword, variableDeclarators, /*parsedInStrictMode:*/ false);\n        }\n        variableDeclarator(identifier: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, equalsValueClause: EqualsValueClauseSyntax): VariableDeclaratorSyntax {\n            return new VariableDeclaratorSyntax(identifier, typeAnnotation, equalsValueClause, /*parsedInStrictMode:*/ false);\n        }\n        equalsValueClause(equalsToken: ISyntaxToken, value: IExpressionSyntax): EqualsValueClauseSyntax {\n            return new EqualsValueClauseSyntax(equalsToken, value, /*parsedInStrictMode:*/ false);\n        }\n        prefixUnaryExpression(kind: SyntaxKind, operatorToken: ISyntaxToken, operand: IUnaryExpressionSyntax): PrefixUnaryExpressionSyntax {\n            return new PrefixUnaryExpressionSyntax(kind, operatorToken, operand, /*parsedInStrictMode:*/ false);\n        }\n        arrayLiteralExpression(openBracketToken: ISyntaxToken, expressions: ISeparatedSyntaxList, closeBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax {\n            return new ArrayLiteralExpressionSyntax(openBracketToken, expressions, closeBracketToken, /*parsedInStrictMode:*/ false);\n        }\n        omittedExpression(): OmittedExpressionSyntax {\n            return new OmittedExpressionSyntax(/*parsedInStrictMode:*/ false);\n        }\n        parenthesizedExpression(openParenToken: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken): ParenthesizedExpressionSyntax {\n            return new ParenthesizedExpressionSyntax(openParenToken, expression, closeParenToken, /*parsedInStrictMode:*/ false);\n        }\n        simpleArrowFunctionExpression(identifier: ISyntaxToken, equalsGreaterThanToken: ISyntaxToken, body: ISyntaxNodeOrToken): SimpleArrowFunctionExpressionSyntax {\n            return new SimpleArrowFunctionExpressionSyntax(identifier, equalsGreaterThanToken, body, /*parsedInStrictMode:*/ false);\n        }\n        parenthesizedArrowFunctionExpression(callSignature: CallSignatureSyntax, equalsGreaterThanToken: ISyntaxToken, body: ISyntaxNodeOrToken): ParenthesizedArrowFunctionExpressionSyntax {\n            return new ParenthesizedArrowFunctionExpressionSyntax(callSignature, equalsGreaterThanToken, body, /*parsedInStrictMode:*/ false);\n        }\n        qualifiedName(left: INameSyntax, dotToken: ISyntaxToken, right: ISyntaxToken): QualifiedNameSyntax {\n            return new QualifiedNameSyntax(left, dotToken, right, /*parsedInStrictMode:*/ false);\n        }\n        typeArgumentList(lessThanToken: ISyntaxToken, typeArguments: ISeparatedSyntaxList, greaterThanToken: ISyntaxToken): TypeArgumentListSyntax {\n            return new TypeArgumentListSyntax(lessThanToken, typeArguments, greaterThanToken, /*parsedInStrictMode:*/ false);\n        }\n        constructorType(newKeyword: ISyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, equalsGreaterThanToken: ISyntaxToken, type: ITypeSyntax): ConstructorTypeSyntax {\n            return new ConstructorTypeSyntax(newKeyword, typeParameterList, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ false);\n        }\n        functionType(typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, equalsGreaterThanToken: ISyntaxToken, type: ITypeSyntax): FunctionTypeSyntax {\n            return new FunctionTypeSyntax(typeParameterList, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ false);\n        }\n        objectType(openBraceToken: ISyntaxToken, typeMembers: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): ObjectTypeSyntax {\n            return new ObjectTypeSyntax(openBraceToken, typeMembers, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        arrayType(type: ITypeSyntax, openBracketToken: ISyntaxToken, closeBracketToken: ISyntaxToken): ArrayTypeSyntax {\n            return new ArrayTypeSyntax(type, openBracketToken, closeBracketToken, /*parsedInStrictMode:*/ false);\n        }\n        genericType(name: INameSyntax, typeArgumentList: TypeArgumentListSyntax): GenericTypeSyntax {\n            return new GenericTypeSyntax(name, typeArgumentList, /*parsedInStrictMode:*/ false);\n        }\n        typeAnnotation(colonToken: ISyntaxToken, type: ITypeSyntax): TypeAnnotationSyntax {\n            return new TypeAnnotationSyntax(colonToken, type, /*parsedInStrictMode:*/ false);\n        }\n        block(openBraceToken: ISyntaxToken, statements: ISyntaxList, closeBraceToken: ISyntaxToken): BlockSyntax {\n            return new BlockSyntax(openBraceToken, statements, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        parameter(dotDotDotToken: ISyntaxToken, publicOrPrivateKeyword: ISyntaxToken, identifier: ISyntaxToken, questionToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, equalsValueClause: EqualsValueClauseSyntax): ParameterSyntax {\n            return new ParameterSyntax(dotDotDotToken, publicOrPrivateKeyword, identifier, questionToken, typeAnnotation, equalsValueClause, /*parsedInStrictMode:*/ false);\n        }\n        memberAccessExpression(expression: IExpressionSyntax, dotToken: ISyntaxToken, name: ISyntaxToken): MemberAccessExpressionSyntax {\n            return new MemberAccessExpressionSyntax(expression, dotToken, name, /*parsedInStrictMode:*/ false);\n        }\n        postfixUnaryExpression(kind: SyntaxKind, operand: IExpressionSyntax, operatorToken: ISyntaxToken): PostfixUnaryExpressionSyntax {\n            return new PostfixUnaryExpressionSyntax(kind, operand, operatorToken, /*parsedInStrictMode:*/ false);\n        }\n        elementAccessExpression(expression: IExpressionSyntax, openBracketToken: ISyntaxToken, argumentExpression: IExpressionSyntax, closeBracketToken: ISyntaxToken): ElementAccessExpressionSyntax {\n            return new ElementAccessExpressionSyntax(expression, openBracketToken, argumentExpression, closeBracketToken, /*parsedInStrictMode:*/ false);\n        }\n        invocationExpression(expression: IExpressionSyntax, argumentList: ArgumentListSyntax): InvocationExpressionSyntax {\n            return new InvocationExpressionSyntax(expression, argumentList, /*parsedInStrictMode:*/ false);\n        }\n        argumentList(typeArgumentList: TypeArgumentListSyntax, openParenToken: ISyntaxToken, _arguments: ISeparatedSyntaxList, closeParenToken: ISyntaxToken): ArgumentListSyntax {\n            return new ArgumentListSyntax(typeArgumentList, openParenToken, _arguments, closeParenToken, /*parsedInStrictMode:*/ false);\n        }\n        binaryExpression(kind: SyntaxKind, left: IExpressionSyntax, operatorToken: ISyntaxToken, right: IExpressionSyntax): BinaryExpressionSyntax {\n            return new BinaryExpressionSyntax(kind, left, operatorToken, right, /*parsedInStrictMode:*/ false);\n        }\n        conditionalExpression(condition: IExpressionSyntax, questionToken: ISyntaxToken, whenTrue: IExpressionSyntax, colonToken: ISyntaxToken, whenFalse: IExpressionSyntax): ConditionalExpressionSyntax {\n            return new ConditionalExpressionSyntax(condition, questionToken, whenTrue, colonToken, whenFalse, /*parsedInStrictMode:*/ false);\n        }\n        constructSignature(newKeyword: ISyntaxToken, callSignature: CallSignatureSyntax): ConstructSignatureSyntax {\n            return new ConstructSignatureSyntax(newKeyword, callSignature, /*parsedInStrictMode:*/ false);\n        }\n        methodSignature(propertyName: ISyntaxToken, questionToken: ISyntaxToken, callSignature: CallSignatureSyntax): MethodSignatureSyntax {\n            return new MethodSignatureSyntax(propertyName, questionToken, callSignature, /*parsedInStrictMode:*/ false);\n        }\n        indexSignature(openBracketToken: ISyntaxToken, parameter: ParameterSyntax, closeBracketToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax): IndexSignatureSyntax {\n            return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, typeAnnotation, /*parsedInStrictMode:*/ false);\n        }\n        propertySignature(propertyName: ISyntaxToken, questionToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax): PropertySignatureSyntax {\n            return new PropertySignatureSyntax(propertyName, questionToken, typeAnnotation, /*parsedInStrictMode:*/ false);\n        }\n        callSignature(typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, typeAnnotation: TypeAnnotationSyntax): CallSignatureSyntax {\n            return new CallSignatureSyntax(typeParameterList, parameterList, typeAnnotation, /*parsedInStrictMode:*/ false);\n        }\n        parameterList(openParenToken: ISyntaxToken, parameters: ISeparatedSyntaxList, closeParenToken: ISyntaxToken): ParameterListSyntax {\n            return new ParameterListSyntax(openParenToken, parameters, closeParenToken, /*parsedInStrictMode:*/ false);\n        }\n        typeParameterList(lessThanToken: ISyntaxToken, typeParameters: ISeparatedSyntaxList, greaterThanToken: ISyntaxToken): TypeParameterListSyntax {\n            return new TypeParameterListSyntax(lessThanToken, typeParameters, greaterThanToken, /*parsedInStrictMode:*/ false);\n        }\n        typeParameter(identifier: ISyntaxToken, constraint: ConstraintSyntax): TypeParameterSyntax {\n            return new TypeParameterSyntax(identifier, constraint, /*parsedInStrictMode:*/ false);\n        }\n        constraint(extendsKeyword: ISyntaxToken, type: ITypeSyntax): ConstraintSyntax {\n            return new ConstraintSyntax(extendsKeyword, type, /*parsedInStrictMode:*/ false);\n        }\n        elseClause(elseKeyword: ISyntaxToken, statement: IStatementSyntax): ElseClauseSyntax {\n            return new ElseClauseSyntax(elseKeyword, statement, /*parsedInStrictMode:*/ false);\n        }\n        ifStatement(ifKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax, elseClause: ElseClauseSyntax): IfStatementSyntax {\n            return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause, /*parsedInStrictMode:*/ false);\n        }\n        expressionStatement(expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ExpressionStatementSyntax {\n            return new ExpressionStatementSyntax(expression, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        constructorDeclaration(constructorKeyword: ISyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): ConstructorDeclarationSyntax {\n            return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, block, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        memberFunctionDeclaration(modifiers: ISyntaxList, propertyName: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): MemberFunctionDeclarationSyntax {\n            return new MemberFunctionDeclarationSyntax(modifiers, propertyName, callSignature, block, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        getMemberAccessorDeclaration(modifiers: ISyntaxList, getKeyword: ISyntaxToken, propertyName: ISyntaxToken, parameterList: ParameterListSyntax, typeAnnotation: TypeAnnotationSyntax, block: BlockSyntax): GetMemberAccessorDeclarationSyntax {\n            return new GetMemberAccessorDeclarationSyntax(modifiers, getKeyword, propertyName, parameterList, typeAnnotation, block, /*parsedInStrictMode:*/ false);\n        }\n        setMemberAccessorDeclaration(modifiers: ISyntaxList, setKeyword: ISyntaxToken, propertyName: ISyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax): SetMemberAccessorDeclarationSyntax {\n            return new SetMemberAccessorDeclarationSyntax(modifiers, setKeyword, propertyName, parameterList, block, /*parsedInStrictMode:*/ false);\n        }\n        memberVariableDeclaration(modifiers: ISyntaxList, variableDeclarator: VariableDeclaratorSyntax, semicolonToken: ISyntaxToken): MemberVariableDeclarationSyntax {\n            return new MemberVariableDeclarationSyntax(modifiers, variableDeclarator, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        throwStatement(throwKeyword: ISyntaxToken, expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ThrowStatementSyntax {\n            return new ThrowStatementSyntax(throwKeyword, expression, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        returnStatement(returnKeyword: ISyntaxToken, expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ReturnStatementSyntax {\n            return new ReturnStatementSyntax(returnKeyword, expression, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        objectCreationExpression(newKeyword: ISyntaxToken, expression: IExpressionSyntax, argumentList: ArgumentListSyntax): ObjectCreationExpressionSyntax {\n            return new ObjectCreationExpressionSyntax(newKeyword, expression, argumentList, /*parsedInStrictMode:*/ false);\n        }\n        switchStatement(switchKeyword: ISyntaxToken, openParenToken: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken, openBraceToken: ISyntaxToken, switchClauses: ISyntaxList, closeBraceToken: ISyntaxToken): SwitchStatementSyntax {\n            return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, switchClauses, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        caseSwitchClause(caseKeyword: ISyntaxToken, expression: IExpressionSyntax, colonToken: ISyntaxToken, statements: ISyntaxList): CaseSwitchClauseSyntax {\n            return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, statements, /*parsedInStrictMode:*/ false);\n        }\n        defaultSwitchClause(defaultKeyword: ISyntaxToken, colonToken: ISyntaxToken, statements: ISyntaxList): DefaultSwitchClauseSyntax {\n            return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, statements, /*parsedInStrictMode:*/ false);\n        }\n        breakStatement(breakKeyword: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): BreakStatementSyntax {\n            return new BreakStatementSyntax(breakKeyword, identifier, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        continueStatement(continueKeyword: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): ContinueStatementSyntax {\n            return new ContinueStatementSyntax(continueKeyword, identifier, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        forStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken, variableDeclaration: VariableDeclarationSyntax, initializer: IExpressionSyntax, firstSemicolonToken: ISyntaxToken, condition: IExpressionSyntax, secondSemicolonToken: ISyntaxToken, incrementor: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): ForStatementSyntax {\n            return new ForStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement, /*parsedInStrictMode:*/ false);\n        }\n        forInStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken, variableDeclaration: VariableDeclarationSyntax, left: IExpressionSyntax, inKeyword: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): ForInStatementSyntax {\n            return new ForInStatementSyntax(forKeyword, openParenToken, variableDeclaration, left, inKeyword, expression, closeParenToken, statement, /*parsedInStrictMode:*/ false);\n        }\n        whileStatement(whileKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): WhileStatementSyntax {\n            return new WhileStatementSyntax(whileKeyword, openParenToken, condition, closeParenToken, statement, /*parsedInStrictMode:*/ false);\n        }\n        withStatement(withKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): WithStatementSyntax {\n            return new WithStatementSyntax(withKeyword, openParenToken, condition, closeParenToken, statement, /*parsedInStrictMode:*/ false);\n        }\n        enumDeclaration(modifiers: ISyntaxList, enumKeyword: ISyntaxToken, identifier: ISyntaxToken, openBraceToken: ISyntaxToken, enumElements: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): EnumDeclarationSyntax {\n            return new EnumDeclarationSyntax(modifiers, enumKeyword, identifier, openBraceToken, enumElements, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        enumElement(propertyName: ISyntaxToken, equalsValueClause: EqualsValueClauseSyntax): EnumElementSyntax {\n            return new EnumElementSyntax(propertyName, equalsValueClause, /*parsedInStrictMode:*/ false);\n        }\n        castExpression(lessThanToken: ISyntaxToken, type: ITypeSyntax, greaterThanToken: ISyntaxToken, expression: IUnaryExpressionSyntax): CastExpressionSyntax {\n            return new CastExpressionSyntax(lessThanToken, type, greaterThanToken, expression, /*parsedInStrictMode:*/ false);\n        }\n        objectLiteralExpression(openBraceToken: ISyntaxToken, propertyAssignments: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax {\n            return new ObjectLiteralExpressionSyntax(openBraceToken, propertyAssignments, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        simplePropertyAssignment(propertyName: ISyntaxToken, colonToken: ISyntaxToken, expression: IExpressionSyntax): SimplePropertyAssignmentSyntax {\n            return new SimplePropertyAssignmentSyntax(propertyName, colonToken, expression, /*parsedInStrictMode:*/ false);\n        }\n        functionPropertyAssignment(propertyName: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax): FunctionPropertyAssignmentSyntax {\n            return new FunctionPropertyAssignmentSyntax(propertyName, callSignature, block, /*parsedInStrictMode:*/ false);\n        }\n        getAccessorPropertyAssignment(getKeyword: ISyntaxToken, propertyName: ISyntaxToken, openParenToken: ISyntaxToken, closeParenToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, block: BlockSyntax): GetAccessorPropertyAssignmentSyntax {\n            return new GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, typeAnnotation, block, /*parsedInStrictMode:*/ false);\n        }\n        setAccessorPropertyAssignment(setKeyword: ISyntaxToken, propertyName: ISyntaxToken, openParenToken: ISyntaxToken, parameter: ParameterSyntax, closeParenToken: ISyntaxToken, block: BlockSyntax): SetAccessorPropertyAssignmentSyntax {\n            return new SetAccessorPropertyAssignmentSyntax(setKeyword, propertyName, openParenToken, parameter, closeParenToken, block, /*parsedInStrictMode:*/ false);\n        }\n        functionExpression(functionKeyword: ISyntaxToken, identifier: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax): FunctionExpressionSyntax {\n            return new FunctionExpressionSyntax(functionKeyword, identifier, callSignature, block, /*parsedInStrictMode:*/ false);\n        }\n        emptyStatement(semicolonToken: ISyntaxToken): EmptyStatementSyntax {\n            return new EmptyStatementSyntax(semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        tryStatement(tryKeyword: ISyntaxToken, block: BlockSyntax, catchClause: CatchClauseSyntax, finallyClause: FinallyClauseSyntax): TryStatementSyntax {\n            return new TryStatementSyntax(tryKeyword, block, catchClause, finallyClause, /*parsedInStrictMode:*/ false);\n        }\n        catchClause(catchKeyword: ISyntaxToken, openParenToken: ISyntaxToken, identifier: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, closeParenToken: ISyntaxToken, block: BlockSyntax): CatchClauseSyntax {\n            return new CatchClauseSyntax(catchKeyword, openParenToken, identifier, typeAnnotation, closeParenToken, block, /*parsedInStrictMode:*/ false);\n        }\n        finallyClause(finallyKeyword: ISyntaxToken, block: BlockSyntax): FinallyClauseSyntax {\n            return new FinallyClauseSyntax(finallyKeyword, block, /*parsedInStrictMode:*/ false);\n        }\n        labeledStatement(identifier: ISyntaxToken, colonToken: ISyntaxToken, statement: IStatementSyntax): LabeledStatementSyntax {\n            return new LabeledStatementSyntax(identifier, colonToken, statement, /*parsedInStrictMode:*/ false);\n        }\n        doStatement(doKeyword: ISyntaxToken, statement: IStatementSyntax, whileKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, semicolonToken: ISyntaxToken): DoStatementSyntax {\n            return new DoStatementSyntax(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        typeOfExpression(typeOfKeyword: ISyntaxToken, expression: IExpressionSyntax): TypeOfExpressionSyntax {\n            return new TypeOfExpressionSyntax(typeOfKeyword, expression, /*parsedInStrictMode:*/ false);\n        }\n        deleteExpression(deleteKeyword: ISyntaxToken, expression: IExpressionSyntax): DeleteExpressionSyntax {\n            return new DeleteExpressionSyntax(deleteKeyword, expression, /*parsedInStrictMode:*/ false);\n        }\n        voidExpression(voidKeyword: ISyntaxToken, expression: IExpressionSyntax): VoidExpressionSyntax {\n            return new VoidExpressionSyntax(voidKeyword, expression, /*parsedInStrictMode:*/ false);\n        }\n        debuggerStatement(debuggerKeyword: ISyntaxToken, semicolonToken: ISyntaxToken): DebuggerStatementSyntax {\n            return new DebuggerStatementSyntax(debuggerKeyword, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n    }\n\n    export class StrictModeFactory implements IFactory {\n        sourceUnit(moduleElements: ISyntaxList, endOfFileToken: ISyntaxToken): SourceUnitSyntax {\n            return new SourceUnitSyntax(moduleElements, endOfFileToken, /*parsedInStrictMode:*/ true);\n        }\n        externalModuleReference(moduleOrRequireKeyword: ISyntaxToken, openParenToken: ISyntaxToken, stringLiteral: ISyntaxToken, closeParenToken: ISyntaxToken): ExternalModuleReferenceSyntax {\n            return new ExternalModuleReferenceSyntax(moduleOrRequireKeyword, openParenToken, stringLiteral, closeParenToken, /*parsedInStrictMode:*/ true);\n        }\n        moduleNameModuleReference(moduleName: INameSyntax): ModuleNameModuleReferenceSyntax {\n            return new ModuleNameModuleReferenceSyntax(moduleName, /*parsedInStrictMode:*/ true);\n        }\n        importDeclaration(importKeyword: ISyntaxToken, identifier: ISyntaxToken, equalsToken: ISyntaxToken, moduleReference: ModuleReferenceSyntax, semicolonToken: ISyntaxToken): ImportDeclarationSyntax {\n            return new ImportDeclarationSyntax(importKeyword, identifier, equalsToken, moduleReference, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        exportAssignment(exportKeyword: ISyntaxToken, equalsToken: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): ExportAssignmentSyntax {\n            return new ExportAssignmentSyntax(exportKeyword, equalsToken, identifier, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        classDeclaration(modifiers: ISyntaxList, classKeyword: ISyntaxToken, identifier: ISyntaxToken, typeParameterList: TypeParameterListSyntax, heritageClauses: ISyntaxList, openBraceToken: ISyntaxToken, classElements: ISyntaxList, closeBraceToken: ISyntaxToken): ClassDeclarationSyntax {\n            return new ClassDeclarationSyntax(modifiers, classKeyword, identifier, typeParameterList, heritageClauses, openBraceToken, classElements, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        interfaceDeclaration(modifiers: ISyntaxList, interfaceKeyword: ISyntaxToken, identifier: ISyntaxToken, typeParameterList: TypeParameterListSyntax, heritageClauses: ISyntaxList, body: ObjectTypeSyntax): InterfaceDeclarationSyntax {\n            return new InterfaceDeclarationSyntax(modifiers, interfaceKeyword, identifier, typeParameterList, heritageClauses, body, /*parsedInStrictMode:*/ true);\n        }\n        heritageClause(extendsOrImplementsKeyword: ISyntaxToken, typeNames: ISeparatedSyntaxList): HeritageClauseSyntax {\n            return new HeritageClauseSyntax(extendsOrImplementsKeyword, typeNames, /*parsedInStrictMode:*/ true);\n        }\n        moduleDeclaration(modifiers: ISyntaxList, moduleKeyword: ISyntaxToken, moduleName: INameSyntax, stringLiteral: ISyntaxToken, openBraceToken: ISyntaxToken, moduleElements: ISyntaxList, closeBraceToken: ISyntaxToken): ModuleDeclarationSyntax {\n            return new ModuleDeclarationSyntax(modifiers, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        functionDeclaration(modifiers: ISyntaxList, functionKeyword: ISyntaxToken, identifier: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): FunctionDeclarationSyntax {\n            return new FunctionDeclarationSyntax(modifiers, functionKeyword, identifier, callSignature, block, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        variableStatement(modifiers: ISyntaxList, variableDeclaration: VariableDeclarationSyntax, semicolonToken: ISyntaxToken): VariableStatementSyntax {\n            return new VariableStatementSyntax(modifiers, variableDeclaration, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        variableDeclaration(varKeyword: ISyntaxToken, variableDeclarators: ISeparatedSyntaxList): VariableDeclarationSyntax {\n            return new VariableDeclarationSyntax(varKeyword, variableDeclarators, /*parsedInStrictMode:*/ true);\n        }\n        variableDeclarator(identifier: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, equalsValueClause: EqualsValueClauseSyntax): VariableDeclaratorSyntax {\n            return new VariableDeclaratorSyntax(identifier, typeAnnotation, equalsValueClause, /*parsedInStrictMode:*/ true);\n        }\n        equalsValueClause(equalsToken: ISyntaxToken, value: IExpressionSyntax): EqualsValueClauseSyntax {\n            return new EqualsValueClauseSyntax(equalsToken, value, /*parsedInStrictMode:*/ true);\n        }\n        prefixUnaryExpression(kind: SyntaxKind, operatorToken: ISyntaxToken, operand: IUnaryExpressionSyntax): PrefixUnaryExpressionSyntax {\n            return new PrefixUnaryExpressionSyntax(kind, operatorToken, operand, /*parsedInStrictMode:*/ true);\n        }\n        arrayLiteralExpression(openBracketToken: ISyntaxToken, expressions: ISeparatedSyntaxList, closeBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax {\n            return new ArrayLiteralExpressionSyntax(openBracketToken, expressions, closeBracketToken, /*parsedInStrictMode:*/ true);\n        }\n        omittedExpression(): OmittedExpressionSyntax {\n            return new OmittedExpressionSyntax(/*parsedInStrictMode:*/ true);\n        }\n        parenthesizedExpression(openParenToken: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken): ParenthesizedExpressionSyntax {\n            return new ParenthesizedExpressionSyntax(openParenToken, expression, closeParenToken, /*parsedInStrictMode:*/ true);\n        }\n        simpleArrowFunctionExpression(identifier: ISyntaxToken, equalsGreaterThanToken: ISyntaxToken, body: ISyntaxNodeOrToken): SimpleArrowFunctionExpressionSyntax {\n            return new SimpleArrowFunctionExpressionSyntax(identifier, equalsGreaterThanToken, body, /*parsedInStrictMode:*/ true);\n        }\n        parenthesizedArrowFunctionExpression(callSignature: CallSignatureSyntax, equalsGreaterThanToken: ISyntaxToken, body: ISyntaxNodeOrToken): ParenthesizedArrowFunctionExpressionSyntax {\n            return new ParenthesizedArrowFunctionExpressionSyntax(callSignature, equalsGreaterThanToken, body, /*parsedInStrictMode:*/ true);\n        }\n        qualifiedName(left: INameSyntax, dotToken: ISyntaxToken, right: ISyntaxToken): QualifiedNameSyntax {\n            return new QualifiedNameSyntax(left, dotToken, right, /*parsedInStrictMode:*/ true);\n        }\n        typeArgumentList(lessThanToken: ISyntaxToken, typeArguments: ISeparatedSyntaxList, greaterThanToken: ISyntaxToken): TypeArgumentListSyntax {\n            return new TypeArgumentListSyntax(lessThanToken, typeArguments, greaterThanToken, /*parsedInStrictMode:*/ true);\n        }\n        constructorType(newKeyword: ISyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, equalsGreaterThanToken: ISyntaxToken, type: ITypeSyntax): ConstructorTypeSyntax {\n            return new ConstructorTypeSyntax(newKeyword, typeParameterList, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ true);\n        }\n        functionType(typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, equalsGreaterThanToken: ISyntaxToken, type: ITypeSyntax): FunctionTypeSyntax {\n            return new FunctionTypeSyntax(typeParameterList, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ true);\n        }\n        objectType(openBraceToken: ISyntaxToken, typeMembers: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): ObjectTypeSyntax {\n            return new ObjectTypeSyntax(openBraceToken, typeMembers, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        arrayType(type: ITypeSyntax, openBracketToken: ISyntaxToken, closeBracketToken: ISyntaxToken): ArrayTypeSyntax {\n            return new ArrayTypeSyntax(type, openBracketToken, closeBracketToken, /*parsedInStrictMode:*/ true);\n        }\n        genericType(name: INameSyntax, typeArgumentList: TypeArgumentListSyntax): GenericTypeSyntax {\n            return new GenericTypeSyntax(name, typeArgumentList, /*parsedInStrictMode:*/ true);\n        }\n        typeAnnotation(colonToken: ISyntaxToken, type: ITypeSyntax): TypeAnnotationSyntax {\n            return new TypeAnnotationSyntax(colonToken, type, /*parsedInStrictMode:*/ true);\n        }\n        block(openBraceToken: ISyntaxToken, statements: ISyntaxList, closeBraceToken: ISyntaxToken): BlockSyntax {\n            return new BlockSyntax(openBraceToken, statements, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        parameter(dotDotDotToken: ISyntaxToken, publicOrPrivateKeyword: ISyntaxToken, identifier: ISyntaxToken, questionToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, equalsValueClause: EqualsValueClauseSyntax): ParameterSyntax {\n            return new ParameterSyntax(dotDotDotToken, publicOrPrivateKeyword, identifier, questionToken, typeAnnotation, equalsValueClause, /*parsedInStrictMode:*/ true);\n        }\n        memberAccessExpression(expression: IExpressionSyntax, dotToken: ISyntaxToken, name: ISyntaxToken): MemberAccessExpressionSyntax {\n            return new MemberAccessExpressionSyntax(expression, dotToken, name, /*parsedInStrictMode:*/ true);\n        }\n        postfixUnaryExpression(kind: SyntaxKind, operand: IExpressionSyntax, operatorToken: ISyntaxToken): PostfixUnaryExpressionSyntax {\n            return new PostfixUnaryExpressionSyntax(kind, operand, operatorToken, /*parsedInStrictMode:*/ true);\n        }\n        elementAccessExpression(expression: IExpressionSyntax, openBracketToken: ISyntaxToken, argumentExpression: IExpressionSyntax, closeBracketToken: ISyntaxToken): ElementAccessExpressionSyntax {\n            return new ElementAccessExpressionSyntax(expression, openBracketToken, argumentExpression, closeBracketToken, /*parsedInStrictMode:*/ true);\n        }\n        invocationExpression(expression: IExpressionSyntax, argumentList: ArgumentListSyntax): InvocationExpressionSyntax {\n            return new InvocationExpressionSyntax(expression, argumentList, /*parsedInStrictMode:*/ true);\n        }\n        argumentList(typeArgumentList: TypeArgumentListSyntax, openParenToken: ISyntaxToken, _arguments: ISeparatedSyntaxList, closeParenToken: ISyntaxToken): ArgumentListSyntax {\n            return new ArgumentListSyntax(typeArgumentList, openParenToken, _arguments, closeParenToken, /*parsedInStrictMode:*/ true);\n        }\n        binaryExpression(kind: SyntaxKind, left: IExpressionSyntax, operatorToken: ISyntaxToken, right: IExpressionSyntax): BinaryExpressionSyntax {\n            return new BinaryExpressionSyntax(kind, left, operatorToken, right, /*parsedInStrictMode:*/ true);\n        }\n        conditionalExpression(condition: IExpressionSyntax, questionToken: ISyntaxToken, whenTrue: IExpressionSyntax, colonToken: ISyntaxToken, whenFalse: IExpressionSyntax): ConditionalExpressionSyntax {\n            return new ConditionalExpressionSyntax(condition, questionToken, whenTrue, colonToken, whenFalse, /*parsedInStrictMode:*/ true);\n        }\n        constructSignature(newKeyword: ISyntaxToken, callSignature: CallSignatureSyntax): ConstructSignatureSyntax {\n            return new ConstructSignatureSyntax(newKeyword, callSignature, /*parsedInStrictMode:*/ true);\n        }\n        methodSignature(propertyName: ISyntaxToken, questionToken: ISyntaxToken, callSignature: CallSignatureSyntax): MethodSignatureSyntax {\n            return new MethodSignatureSyntax(propertyName, questionToken, callSignature, /*parsedInStrictMode:*/ true);\n        }\n        indexSignature(openBracketToken: ISyntaxToken, parameter: ParameterSyntax, closeBracketToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax): IndexSignatureSyntax {\n            return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, typeAnnotation, /*parsedInStrictMode:*/ true);\n        }\n        propertySignature(propertyName: ISyntaxToken, questionToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax): PropertySignatureSyntax {\n            return new PropertySignatureSyntax(propertyName, questionToken, typeAnnotation, /*parsedInStrictMode:*/ true);\n        }\n        callSignature(typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, typeAnnotation: TypeAnnotationSyntax): CallSignatureSyntax {\n            return new CallSignatureSyntax(typeParameterList, parameterList, typeAnnotation, /*parsedInStrictMode:*/ true);\n        }\n        parameterList(openParenToken: ISyntaxToken, parameters: ISeparatedSyntaxList, closeParenToken: ISyntaxToken): ParameterListSyntax {\n            return new ParameterListSyntax(openParenToken, parameters, closeParenToken, /*parsedInStrictMode:*/ true);\n        }\n        typeParameterList(lessThanToken: ISyntaxToken, typeParameters: ISeparatedSyntaxList, greaterThanToken: ISyntaxToken): TypeParameterListSyntax {\n            return new TypeParameterListSyntax(lessThanToken, typeParameters, greaterThanToken, /*parsedInStrictMode:*/ true);\n        }\n        typeParameter(identifier: ISyntaxToken, constraint: ConstraintSyntax): TypeParameterSyntax {\n            return new TypeParameterSyntax(identifier, constraint, /*parsedInStrictMode:*/ true);\n        }\n        constraint(extendsKeyword: ISyntaxToken, type: ITypeSyntax): ConstraintSyntax {\n            return new ConstraintSyntax(extendsKeyword, type, /*parsedInStrictMode:*/ true);\n        }\n        elseClause(elseKeyword: ISyntaxToken, statement: IStatementSyntax): ElseClauseSyntax {\n            return new ElseClauseSyntax(elseKeyword, statement, /*parsedInStrictMode:*/ true);\n        }\n        ifStatement(ifKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax, elseClause: ElseClauseSyntax): IfStatementSyntax {\n            return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause, /*parsedInStrictMode:*/ true);\n        }\n        expressionStatement(expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ExpressionStatementSyntax {\n            return new ExpressionStatementSyntax(expression, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        constructorDeclaration(constructorKeyword: ISyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): ConstructorDeclarationSyntax {\n            return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, block, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        memberFunctionDeclaration(modifiers: ISyntaxList, propertyName: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): MemberFunctionDeclarationSyntax {\n            return new MemberFunctionDeclarationSyntax(modifiers, propertyName, callSignature, block, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        getMemberAccessorDeclaration(modifiers: ISyntaxList, getKeyword: ISyntaxToken, propertyName: ISyntaxToken, parameterList: ParameterListSyntax, typeAnnotation: TypeAnnotationSyntax, block: BlockSyntax): GetMemberAccessorDeclarationSyntax {\n            return new GetMemberAccessorDeclarationSyntax(modifiers, getKeyword, propertyName, parameterList, typeAnnotation, block, /*parsedInStrictMode:*/ true);\n        }\n        setMemberAccessorDeclaration(modifiers: ISyntaxList, setKeyword: ISyntaxToken, propertyName: ISyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax): SetMemberAccessorDeclarationSyntax {\n            return new SetMemberAccessorDeclarationSyntax(modifiers, setKeyword, propertyName, parameterList, block, /*parsedInStrictMode:*/ true);\n        }\n        memberVariableDeclaration(modifiers: ISyntaxList, variableDeclarator: VariableDeclaratorSyntax, semicolonToken: ISyntaxToken): MemberVariableDeclarationSyntax {\n            return new MemberVariableDeclarationSyntax(modifiers, variableDeclarator, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        throwStatement(throwKeyword: ISyntaxToken, expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ThrowStatementSyntax {\n            return new ThrowStatementSyntax(throwKeyword, expression, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        returnStatement(returnKeyword: ISyntaxToken, expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ReturnStatementSyntax {\n            return new ReturnStatementSyntax(returnKeyword, expression, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        objectCreationExpression(newKeyword: ISyntaxToken, expression: IExpressionSyntax, argumentList: ArgumentListSyntax): ObjectCreationExpressionSyntax {\n            return new ObjectCreationExpressionSyntax(newKeyword, expression, argumentList, /*parsedInStrictMode:*/ true);\n        }\n        switchStatement(switchKeyword: ISyntaxToken, openParenToken: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken, openBraceToken: ISyntaxToken, switchClauses: ISyntaxList, closeBraceToken: ISyntaxToken): SwitchStatementSyntax {\n            return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, switchClauses, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        caseSwitchClause(caseKeyword: ISyntaxToken, expression: IExpressionSyntax, colonToken: ISyntaxToken, statements: ISyntaxList): CaseSwitchClauseSyntax {\n            return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, statements, /*parsedInStrictMode:*/ true);\n        }\n        defaultSwitchClause(defaultKeyword: ISyntaxToken, colonToken: ISyntaxToken, statements: ISyntaxList): DefaultSwitchClauseSyntax {\n            return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, statements, /*parsedInStrictMode:*/ true);\n        }\n        breakStatement(breakKeyword: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): BreakStatementSyntax {\n            return new BreakStatementSyntax(breakKeyword, identifier, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        continueStatement(continueKeyword: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): ContinueStatementSyntax {\n            return new ContinueStatementSyntax(continueKeyword, identifier, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        forStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken, variableDeclaration: VariableDeclarationSyntax, initializer: IExpressionSyntax, firstSemicolonToken: ISyntaxToken, condition: IExpressionSyntax, secondSemicolonToken: ISyntaxToken, incrementor: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): ForStatementSyntax {\n            return new ForStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement, /*parsedInStrictMode:*/ true);\n        }\n        forInStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken, variableDeclaration: VariableDeclarationSyntax, left: IExpressionSyntax, inKeyword: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): ForInStatementSyntax {\n            return new ForInStatementSyntax(forKeyword, openParenToken, variableDeclaration, left, inKeyword, expression, closeParenToken, statement, /*parsedInStrictMode:*/ true);\n        }\n        whileStatement(whileKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): WhileStatementSyntax {\n            return new WhileStatementSyntax(whileKeyword, openParenToken, condition, closeParenToken, statement, /*parsedInStrictMode:*/ true);\n        }\n        withStatement(withKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): WithStatementSyntax {\n            return new WithStatementSyntax(withKeyword, openParenToken, condition, closeParenToken, statement, /*parsedInStrictMode:*/ true);\n        }\n        enumDeclaration(modifiers: ISyntaxList, enumKeyword: ISyntaxToken, identifier: ISyntaxToken, openBraceToken: ISyntaxToken, enumElements: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): EnumDeclarationSyntax {\n            return new EnumDeclarationSyntax(modifiers, enumKeyword, identifier, openBraceToken, enumElements, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        enumElement(propertyName: ISyntaxToken, equalsValueClause: EqualsValueClauseSyntax): EnumElementSyntax {\n            return new EnumElementSyntax(propertyName, equalsValueClause, /*parsedInStrictMode:*/ true);\n        }\n        castExpression(lessThanToken: ISyntaxToken, type: ITypeSyntax, greaterThanToken: ISyntaxToken, expression: IUnaryExpressionSyntax): CastExpressionSyntax {\n            return new CastExpressionSyntax(lessThanToken, type, greaterThanToken, expression, /*parsedInStrictMode:*/ true);\n        }\n        objectLiteralExpression(openBraceToken: ISyntaxToken, propertyAssignments: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax {\n            return new ObjectLiteralExpressionSyntax(openBraceToken, propertyAssignments, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        simplePropertyAssignment(propertyName: ISyntaxToken, colonToken: ISyntaxToken, expression: IExpressionSyntax): SimplePropertyAssignmentSyntax {\n            return new SimplePropertyAssignmentSyntax(propertyName, colonToken, expression, /*parsedInStrictMode:*/ true);\n        }\n        functionPropertyAssignment(propertyName: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax): FunctionPropertyAssignmentSyntax {\n            return new FunctionPropertyAssignmentSyntax(propertyName, callSignature, block, /*parsedInStrictMode:*/ true);\n        }\n        getAccessorPropertyAssignment(getKeyword: ISyntaxToken, propertyName: ISyntaxToken, openParenToken: ISyntaxToken, closeParenToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, block: BlockSyntax): GetAccessorPropertyAssignmentSyntax {\n            return new GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, typeAnnotation, block, /*parsedInStrictMode:*/ true);\n        }\n        setAccessorPropertyAssignment(setKeyword: ISyntaxToken, propertyName: ISyntaxToken, openParenToken: ISyntaxToken, parameter: ParameterSyntax, closeParenToken: ISyntaxToken, block: BlockSyntax): SetAccessorPropertyAssignmentSyntax {\n            return new SetAccessorPropertyAssignmentSyntax(setKeyword, propertyName, openParenToken, parameter, closeParenToken, block, /*parsedInStrictMode:*/ true);\n        }\n        functionExpression(functionKeyword: ISyntaxToken, identifier: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax): FunctionExpressionSyntax {\n            return new FunctionExpressionSyntax(functionKeyword, identifier, callSignature, block, /*parsedInStrictMode:*/ true);\n        }\n        emptyStatement(semicolonToken: ISyntaxToken): EmptyStatementSyntax {\n            return new EmptyStatementSyntax(semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        tryStatement(tryKeyword: ISyntaxToken, block: BlockSyntax, catchClause: CatchClauseSyntax, finallyClause: FinallyClauseSyntax): TryStatementSyntax {\n            return new TryStatementSyntax(tryKeyword, block, catchClause, finallyClause, /*parsedInStrictMode:*/ true);\n        }\n        catchClause(catchKeyword: ISyntaxToken, openParenToken: ISyntaxToken, identifier: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, closeParenToken: ISyntaxToken, block: BlockSyntax): CatchClauseSyntax {\n            return new CatchClauseSyntax(catchKeyword, openParenToken, identifier, typeAnnotation, closeParenToken, block, /*parsedInStrictMode:*/ true);\n        }\n        finallyClause(finallyKeyword: ISyntaxToken, block: BlockSyntax): FinallyClauseSyntax {\n            return new FinallyClauseSyntax(finallyKeyword, block, /*parsedInStrictMode:*/ true);\n        }\n        labeledStatement(identifier: ISyntaxToken, colonToken: ISyntaxToken, statement: IStatementSyntax): LabeledStatementSyntax {\n            return new LabeledStatementSyntax(identifier, colonToken, statement, /*parsedInStrictMode:*/ true);\n        }\n        doStatement(doKeyword: ISyntaxToken, statement: IStatementSyntax, whileKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, semicolonToken: ISyntaxToken): DoStatementSyntax {\n            return new DoStatementSyntax(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        typeOfExpression(typeOfKeyword: ISyntaxToken, expression: IExpressionSyntax): TypeOfExpressionSyntax {\n            return new TypeOfExpressionSyntax(typeOfKeyword, expression, /*parsedInStrictMode:*/ true);\n        }\n        deleteExpression(deleteKeyword: ISyntaxToken, expression: IExpressionSyntax): DeleteExpressionSyntax {\n            return new DeleteExpressionSyntax(deleteKeyword, expression, /*parsedInStrictMode:*/ true);\n        }\n        voidExpression(voidKeyword: ISyntaxToken, expression: IExpressionSyntax): VoidExpressionSyntax {\n            return new VoidExpressionSyntax(voidKeyword, expression, /*parsedInStrictMode:*/ true);\n        }\n        debuggerStatement(debuggerKeyword: ISyntaxToken, semicolonToken: ISyntaxToken): DebuggerStatementSyntax {\n            return new DebuggerStatementSyntax(debuggerKeyword, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n    }\n\n    export var normalModeFactory: IFactory = new NormalModeFactory();\n    export var strictModeFactory: IFactory = new StrictModeFactory();\n}\n// If you change anything in this enum, make sure you run SyntaxGenerator again!\n\nmodule TypeScript {\n    export enum SyntaxKind {\n        // Variable width tokens, trivia and lists.\n        None,\n        List,\n        SeparatedList,\n        TriviaList,\n\n        // Trivia\n        WhitespaceTrivia,\n        NewLineTrivia,\n        MultiLineCommentTrivia,\n        SingleLineCommentTrivia,\n        SkippedTokenTrivia,\n\n        // Note: all variable width tokens must come before all fixed width tokens.\n\n        ErrorToken,\n        EndOfFileToken,\n\n        // Tokens\n        IdentifierName,\n\n        // LiteralTokens\n        RegularExpressionLiteral,\n        NumericLiteral,\n        StringLiteral,\n\n        // All fixed width tokens follow.\n\n        // Keywords\n        BreakKeyword,\n        CaseKeyword,\n        CatchKeyword,\n        ContinueKeyword,\n        DebuggerKeyword,\n        DefaultKeyword,\n        DeleteKeyword,\n        DoKeyword,\n        ElseKeyword,\n        FalseKeyword,\n        FinallyKeyword,\n        ForKeyword,\n        FunctionKeyword,\n        IfKeyword,\n        InKeyword,\n        InstanceOfKeyword,\n        NewKeyword,\n        NullKeyword,\n        ReturnKeyword,\n        SwitchKeyword,\n        ThisKeyword,\n        ThrowKeyword,\n        TrueKeyword,\n        TryKeyword,\n        TypeOfKeyword,\n        VarKeyword,\n        VoidKeyword,\n        WhileKeyword,\n        WithKeyword,\n\n        // FutureReservedWords.\n        ClassKeyword,\n        ConstKeyword,\n        EnumKeyword,\n        ExportKeyword,\n        ExtendsKeyword,\n        ImportKeyword,\n        SuperKeyword,\n\n        // FutureReservedStrictWords.\n        ImplementsKeyword,\n        InterfaceKeyword,\n        LetKeyword,\n        PackageKeyword,\n        PrivateKeyword,\n        ProtectedKeyword,\n        PublicKeyword,\n        StaticKeyword,\n        YieldKeyword,\n\n        // TypeScript keywords.\n        AnyKeyword,\n        BooleanKeyword,\n        BoolKeyword,\n        ConstructorKeyword,\n        DeclareKeyword,\n        GetKeyword,\n        ModuleKeyword,\n        RequireKeyword,\n        NumberKeyword,\n        SetKeyword,\n        StringKeyword,\n\n        // Punctuators\n        OpenBraceToken,\n        CloseBraceToken,\n        OpenParenToken,\n        CloseParenToken,\n        OpenBracketToken,\n        CloseBracketToken,\n        DotToken,\n        DotDotDotToken,\n        SemicolonToken,\n        CommaToken,\n        LessThanToken,\n        GreaterThanToken,\n        LessThanEqualsToken,\n        GreaterThanEqualsToken,\n        EqualsEqualsToken,\n        EqualsGreaterThanToken,\n        ExclamationEqualsToken,\n        EqualsEqualsEqualsToken,\n        ExclamationEqualsEqualsToken,\n        PlusToken,\n        MinusToken,\n        AsteriskToken,\n        PercentToken,\n        PlusPlusToken,\n        MinusMinusToken,\n        LessThanLessThanToken,\n        GreaterThanGreaterThanToken,\n        GreaterThanGreaterThanGreaterThanToken,\n        AmpersandToken,\n        BarToken,\n        CaretToken,\n        ExclamationToken,\n        TildeToken,\n        AmpersandAmpersandToken,\n        BarBarToken,\n        QuestionToken,\n        ColonToken,\n        EqualsToken,\n        PlusEqualsToken,\n        MinusEqualsToken,\n        AsteriskEqualsToken,\n        PercentEqualsToken,\n        LessThanLessThanEqualsToken,\n        GreaterThanGreaterThanEqualsToken,\n        GreaterThanGreaterThanGreaterThanEqualsToken,\n        AmpersandEqualsToken,\n        BarEqualsToken,\n        CaretEqualsToken,\n        SlashToken,\n        SlashEqualsToken,\n\n        // SyntaxNodes\n        SourceUnit,\n\n        // Names\n        QualifiedName,\n\n        // Types\n        ObjectType,\n        FunctionType,\n        ArrayType,\n        ConstructorType,\n        GenericType,\n\n        // Module elements.\n        InterfaceDeclaration,\n        FunctionDeclaration,\n        ModuleDeclaration,\n        ClassDeclaration,\n        EnumDeclaration,\n        ImportDeclaration,\n        ExportAssignment,\n\n        // ClassElements\n        MemberFunctionDeclaration,\n        MemberVariableDeclaration,\n        ConstructorDeclaration,\n        GetMemberAccessorDeclaration,\n        SetMemberAccessorDeclaration,\n\n        // Type members.\n        PropertySignature,\n        CallSignature,\n        ConstructSignature,\n        IndexSignature,\n        MethodSignature,\n\n        // Statements\n        Block,\n        IfStatement,\n        VariableStatement,\n        ExpressionStatement,\n        ReturnStatement,\n        SwitchStatement,\n        BreakStatement,\n        ContinueStatement,\n        ForStatement,\n        ForInStatement,\n        EmptyStatement,\n        ThrowStatement,\n        WhileStatement,\n        TryStatement,\n        LabeledStatement,\n        DoStatement,\n        DebuggerStatement,\n        WithStatement,\n\n        // Expressions\n        PlusExpression,\n        NegateExpression,\n        BitwiseNotExpression,\n        LogicalNotExpression,\n        PreIncrementExpression,\n        PreDecrementExpression,\n        DeleteExpression,\n        TypeOfExpression,\n        VoidExpression,\n        CommaExpression,\n        AssignmentExpression,\n        AddAssignmentExpression,\n        SubtractAssignmentExpression,\n        MultiplyAssignmentExpression,\n        DivideAssignmentExpression,\n        ModuloAssignmentExpression,\n        AndAssignmentExpression,\n        ExclusiveOrAssignmentExpression,\n        OrAssignmentExpression,\n        LeftShiftAssignmentExpression,\n        SignedRightShiftAssignmentExpression,\n        UnsignedRightShiftAssignmentExpression,\n        ConditionalExpression,\n        LogicalOrExpression,\n        LogicalAndExpression,\n        BitwiseOrExpression,\n        BitwiseExclusiveOrExpression,\n        BitwiseAndExpression,\n        EqualsWithTypeConversionExpression,\n        NotEqualsWithTypeConversionExpression,\n        EqualsExpression,\n        NotEqualsExpression,\n        LessThanExpression,\n        GreaterThanExpression,\n        LessThanOrEqualExpression,\n        GreaterThanOrEqualExpression,\n        InstanceOfExpression,\n        InExpression,\n        LeftShiftExpression,\n        SignedRightShiftExpression,\n        UnsignedRightShiftExpression,\n        MultiplyExpression,\n        DivideExpression,\n        ModuloExpression,\n        AddExpression,\n        SubtractExpression,\n        PostIncrementExpression,\n        PostDecrementExpression,\n        MemberAccessExpression,\n        InvocationExpression,\n        ArrayLiteralExpression,\n        ObjectLiteralExpression,\n        ObjectCreationExpression,\n        ParenthesizedExpression,\n        ParenthesizedArrowFunctionExpression,\n        SimpleArrowFunctionExpression,\n        CastExpression,\n        ElementAccessExpression,\n        FunctionExpression,\n        OmittedExpression,\n\n        // Variable declarations\n        VariableDeclaration,\n        VariableDeclarator,\n\n        // Lists\n        ArgumentList,\n        ParameterList,\n        TypeArgumentList,\n        TypeParameterList,\n\n        // Clauses\n        HeritageClause,\n        EqualsValueClause,\n        CaseSwitchClause,\n        DefaultSwitchClause,\n        ElseClause,\n        CatchClause,\n        FinallyClause,\n\n        // Generics\n        TypeParameter,\n        Constraint,\n\n        // Property Assignment\n        SimplePropertyAssignment,\n        GetAccessorPropertyAssignment,\n        SetAccessorPropertyAssignment,\n        FunctionPropertyAssignment,\n\n        // Misc.\n        Parameter,\n        EnumElement,\n        TypeAnnotation,\n        ExternalModuleReference,\n        ModuleNameModuleReference,\n\n        FirstStandardKeyword = BreakKeyword,\n        LastStandardKeyword = WithKeyword,\n\n        FirstFutureReservedKeyword = ClassKeyword,\n        LastFutureReservedKeyword = SuperKeyword,\n\n        FirstFutureReservedStrictKeyword = ImplementsKeyword,\n        LastFutureReservedStrictKeyword = YieldKeyword,\n\n        FirstTypeScriptKeyword = AnyKeyword,\n        LastTypeScriptKeyword = StringKeyword,\n\n        FirstKeyword = FirstStandardKeyword,\n        LastKeyword = LastTypeScriptKeyword,\n\n        FirstToken = ErrorToken,\n        LastToken = SlashEqualsToken,\n\n        FirstPunctuation = OpenBraceToken,\n        LastPunctuation = SlashEqualsToken,\n\n        FirstFixedWidth = FirstKeyword,\n        LastFixedWidth = LastPunctuation,\n    }\n}\n///<reference path=\'syntaxKind.ts\' />\n\nmodule TypeScript.SyntaxFacts {\n    var textToKeywordKind: any = {\n        \"any\": SyntaxKind.AnyKeyword,\n        \"bool\": SyntaxKind.BoolKeyword,\n        \"boolean\": SyntaxKind.BooleanKeyword,\n        \"break\": SyntaxKind.BreakKeyword,\n        \"case\": SyntaxKind.CaseKeyword,\n        \"catch\": SyntaxKind.CatchKeyword,\n        \"class\": SyntaxKind.ClassKeyword,\n        \"continue\": SyntaxKind.ContinueKeyword,\n        \"const\": SyntaxKind.ConstKeyword,\n        \"constructor\": SyntaxKind.ConstructorKeyword,\n        \"debugger\": SyntaxKind.DebuggerKeyword,\n        \"declare\": SyntaxKind.DeclareKeyword,\n        \"default\": SyntaxKind.DefaultKeyword,\n        \"delete\": SyntaxKind.DeleteKeyword,\n        \"do\": SyntaxKind.DoKeyword,\n        \"else\": SyntaxKind.ElseKeyword,\n        \"enum\": SyntaxKind.EnumKeyword,\n        \"export\": SyntaxKind.ExportKeyword,\n        \"extends\": SyntaxKind.ExtendsKeyword,\n        \"false\": SyntaxKind.FalseKeyword,\n        \"finally\": SyntaxKind.FinallyKeyword,\n        \"for\": SyntaxKind.ForKeyword,\n        \"function\": SyntaxKind.FunctionKeyword,\n        \"get\": SyntaxKind.GetKeyword,\n        \"if\": SyntaxKind.IfKeyword,\n        \"implements\": SyntaxKind.ImplementsKeyword,\n        \"import\": SyntaxKind.ImportKeyword,\n        \"in\": SyntaxKind.InKeyword,\n        \"instanceof\": SyntaxKind.InstanceOfKeyword,\n        \"interface\": SyntaxKind.InterfaceKeyword,\n        \"let\": SyntaxKind.LetKeyword,\n        \"module\": SyntaxKind.ModuleKeyword,\n        \"new\": SyntaxKind.NewKeyword,\n        \"null\": SyntaxKind.NullKeyword,\n        \"number\":SyntaxKind.NumberKeyword,\n        \"package\": SyntaxKind.PackageKeyword,\n        \"private\": SyntaxKind.PrivateKeyword,\n        \"protected\": SyntaxKind.ProtectedKeyword,\n        \"public\": SyntaxKind.PublicKeyword,\n        \"require\": SyntaxKind.RequireKeyword,\n        \"return\": SyntaxKind.ReturnKeyword,\n        \"set\": SyntaxKind.SetKeyword,\n        \"static\": SyntaxKind.StaticKeyword,\n        \"string\": SyntaxKind.StringKeyword,\n        \"super\": SyntaxKind.SuperKeyword,\n        \"switch\": SyntaxKind.SwitchKeyword,\n        \"this\": SyntaxKind.ThisKeyword,\n        \"throw\": SyntaxKind.ThrowKeyword,\n        \"true\": SyntaxKind.TrueKeyword,\n        \"try\": SyntaxKind.TryKeyword,\n        \"typeof\": SyntaxKind.TypeOfKeyword,\n        \"var\": SyntaxKind.VarKeyword,\n        \"void\": SyntaxKind.VoidKeyword,\n        \"while\": SyntaxKind.WhileKeyword,\n        \"with\": SyntaxKind.WithKeyword,\n        \"yield\": SyntaxKind.YieldKeyword,\n\n        \"{\": SyntaxKind.OpenBraceToken,\n        \"}\": SyntaxKind.CloseBraceToken,\n        \"(\": SyntaxKind.OpenParenToken,\n        \")\": SyntaxKind.CloseParenToken,\n        \"[\": SyntaxKind.OpenBracketToken,\n        \"]\": SyntaxKind.CloseBracketToken,\n        \".\": SyntaxKind.DotToken,\n        \"...\": SyntaxKind.DotDotDotToken,\n        \";\": SyntaxKind.SemicolonToken,\n        \",\": SyntaxKind.CommaToken,\n        \"<\": SyntaxKind.LessThanToken,\n        \">\": SyntaxKind.GreaterThanToken,\n        \"<=\": SyntaxKind.LessThanEqualsToken,\n        \">=\": SyntaxKind.GreaterThanEqualsToken,\n        \"==\": SyntaxKind.EqualsEqualsToken,\n        \"=>\": SyntaxKind.EqualsGreaterThanToken,\n        \"!=\": SyntaxKind.ExclamationEqualsToken,\n        \"===\": SyntaxKind.EqualsEqualsEqualsToken,\n        \"!==\": SyntaxKind.ExclamationEqualsEqualsToken,\n        \"+\": SyntaxKind.PlusToken,\n        \"-\": SyntaxKind.MinusToken,\n        \"*\": SyntaxKind.AsteriskToken,\n        \"%\": SyntaxKind.PercentToken,\n        \"++\": SyntaxKind.PlusPlusToken,\n        \"--\": SyntaxKind.MinusMinusToken,\n        \"<<\": SyntaxKind.LessThanLessThanToken,\n        \">>\": SyntaxKind.GreaterThanGreaterThanToken,\n        \">>>\": SyntaxKind.GreaterThanGreaterThanGreaterThanToken,\n        \"&\": SyntaxKind.AmpersandToken,\n        \"|\": SyntaxKind.BarToken,\n        \"^\": SyntaxKind.CaretToken,\n        \"!\": SyntaxKind.ExclamationToken,\n        \"~\": SyntaxKind.TildeToken,\n        \"&&\": SyntaxKind.AmpersandAmpersandToken,\n        \"||\": SyntaxKind.BarBarToken,\n        \"?\": SyntaxKind.QuestionToken,\n        \":\": SyntaxKind.ColonToken,\n        \"=\": SyntaxKind.EqualsToken,\n        \"+=\": SyntaxKind.PlusEqualsToken,\n        \"-=\": SyntaxKind.MinusEqualsToken,\n        \"*=\": SyntaxKind.AsteriskEqualsToken,\n        \"%=\": SyntaxKind.PercentEqualsToken,\n        \"<<=\": SyntaxKind.LessThanLessThanEqualsToken,\n        \">>=\": SyntaxKind.GreaterThanGreaterThanEqualsToken,\n        \">>>=\": SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken,\n        \"&=\": SyntaxKind.AmpersandEqualsToken,\n        \"|=\": SyntaxKind.BarEqualsToken,\n        \"^=\": SyntaxKind.CaretEqualsToken,\n        \"/\": SyntaxKind.SlashToken,\n        \"/=\": SyntaxKind.SlashEqualsToken,\n    };\n\n    var kindToText: string[] = [];\n\n    for (var name in textToKeywordKind) {\n        if (textToKeywordKind.hasOwnProperty(name)) {\n            // Debug.assert(kindToText[textToKeywordKind[name]] === undefined);\n            kindToText[textToKeywordKind[name]] = name;\n        }\n    }\n\n    // Manually work around a bug in the CScript 5.8 runtime where \'constructor\' is not\n    // listed when SyntaxFacts.textToKeywordKind is enumerated because it is the name of\n    // the constructor function.\n    kindToText[SyntaxKind.ConstructorKeyword] = \"constructor\";\n\n    export function getTokenKind(text: string): SyntaxKind {\n        if (textToKeywordKind.hasOwnProperty(text)) {\n            return textToKeywordKind[text];\n        }\n\n        return SyntaxKind.None;\n    }\n\n    export function getText(kind: SyntaxKind): string {\n        var result = kindToText[kind];\n        return result !== undefined ? result : null;\n    }\n\n    export function isTokenKind(kind: SyntaxKind): boolean {\n        return kind >= SyntaxKind.FirstToken && kind <= SyntaxKind.LastToken;\n    }\n\n    export function isAnyKeyword(kind: SyntaxKind): boolean {\n        return kind >= SyntaxKind.FirstKeyword && kind <= SyntaxKind.LastKeyword;\n    }\n\n    export function isStandardKeyword(kind: SyntaxKind): boolean {\n        return kind >= SyntaxKind.FirstStandardKeyword && kind <= SyntaxKind.LastStandardKeyword;\n    }\n\n    export function isFutureReservedKeyword(kind: SyntaxKind): boolean {\n        return kind >= SyntaxKind.FirstFutureReservedKeyword && kind <= SyntaxKind.LastFutureReservedKeyword;\n    }\n\n    export function isFutureReservedStrictKeyword(kind: SyntaxKind): boolean {\n        return kind >= SyntaxKind.FirstFutureReservedStrictKeyword && kind <= SyntaxKind.LastFutureReservedStrictKeyword;\n    }\n\n    export function isAnyPunctuation(kind: SyntaxKind): boolean {\n        return kind >= SyntaxKind.FirstPunctuation && kind <= SyntaxKind.LastPunctuation;\n    }\n\n    export function isPrefixUnaryExpressionOperatorToken(tokenKind: SyntaxKind): boolean {\n        return getPrefixUnaryExpressionFromOperatorToken(tokenKind) !== SyntaxKind.None;\n    }\n\n    export function isBinaryExpressionOperatorToken(tokenKind: SyntaxKind): boolean {\n        return getBinaryExpressionFromOperatorToken(tokenKind) !== SyntaxKind.None;\n    }\n\n    export function getPrefixUnaryExpressionFromOperatorToken(tokenKind: SyntaxKind): SyntaxKind {\n        switch (tokenKind) {\n            case SyntaxKind.PlusToken:\n                return SyntaxKind.PlusExpression;\n            case SyntaxKind.MinusToken:\n                return SyntaxKind.NegateExpression;\n            case SyntaxKind.TildeToken:\n                return SyntaxKind.BitwiseNotExpression;\n            case SyntaxKind.ExclamationToken:\n                return SyntaxKind.LogicalNotExpression;\n            case SyntaxKind.PlusPlusToken:\n                return SyntaxKind.PreIncrementExpression;\n            case SyntaxKind.MinusMinusToken:\n                return SyntaxKind.PreDecrementExpression;\n            //case SyntaxKind.DeleteKeyword:\n            //    return SyntaxKind.DeleteExpression;\n            //case SyntaxKind.TypeOfKeyword:\n            //    return SyntaxKind.TypeOfExpression;\n            //case SyntaxKind.VoidKeyword:\n            //    return SyntaxKind.VoidExpression;\n            default:\n                return SyntaxKind.None;\n        }\n    }\n\n    export function getPostfixUnaryExpressionFromOperatorToken(tokenKind: SyntaxKind): SyntaxKind {\n        switch (tokenKind) {\n            case SyntaxKind.PlusPlusToken:\n                return SyntaxKind.PostIncrementExpression;\n            case SyntaxKind.MinusMinusToken:\n                return SyntaxKind.PostDecrementExpression;\n            default:\n                return SyntaxKind.None;\n        }\n    }\n\n    export function getBinaryExpressionFromOperatorToken(tokenKind: SyntaxKind): SyntaxKind {\n        switch (tokenKind) {\n            case SyntaxKind.AsteriskToken:\n                return SyntaxKind.MultiplyExpression;\n\n            case SyntaxKind.SlashToken:\n                return SyntaxKind.DivideExpression;\n\n            case SyntaxKind.PercentToken:\n                return SyntaxKind.ModuloExpression;\n\n            case SyntaxKind.PlusToken:\n                return SyntaxKind.AddExpression;\n\n            case SyntaxKind.MinusToken:\n                return SyntaxKind.SubtractExpression;\n\n            case SyntaxKind.LessThanLessThanToken:\n                return SyntaxKind.LeftShiftExpression;\n\n            case SyntaxKind.GreaterThanGreaterThanToken:\n                return SyntaxKind.SignedRightShiftExpression;\n\n            case SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\n                return SyntaxKind.UnsignedRightShiftExpression;\n\n            case SyntaxKind.LessThanToken:\n                return SyntaxKind.LessThanExpression;\n\n            case SyntaxKind.GreaterThanToken:\n                return SyntaxKind.GreaterThanExpression;\n\n            case SyntaxKind.LessThanEqualsToken:\n                return SyntaxKind.LessThanOrEqualExpression;\n\n            case SyntaxKind.GreaterThanEqualsToken:\n                return SyntaxKind.GreaterThanOrEqualExpression;\n\n            case SyntaxKind.InstanceOfKeyword:\n                return SyntaxKind.InstanceOfExpression;\n\n            case SyntaxKind.InKeyword:\n                return SyntaxKind.InExpression;\n\n            case SyntaxKind.EqualsEqualsToken:\n                return SyntaxKind.EqualsWithTypeConversionExpression;\n\n            case SyntaxKind.ExclamationEqualsToken:\n                return SyntaxKind.NotEqualsWithTypeConversionExpression;\n\n            case SyntaxKind.EqualsEqualsEqualsToken:\n                return SyntaxKind.EqualsExpression;\n\n            case SyntaxKind.ExclamationEqualsEqualsToken:\n                return SyntaxKind.NotEqualsExpression;\n\n            case SyntaxKind.AmpersandToken:\n                return SyntaxKind.BitwiseAndExpression;\n\n            case SyntaxKind.CaretToken:\n                return SyntaxKind.BitwiseExclusiveOrExpression;\n\n            case SyntaxKind.BarToken:\n                return SyntaxKind.BitwiseOrExpression;\n\n            case SyntaxKind.AmpersandAmpersandToken:\n                return SyntaxKind.LogicalAndExpression;\n\n            case SyntaxKind.BarBarToken:\n                return SyntaxKind.LogicalOrExpression;\n\n            case SyntaxKind.BarEqualsToken:\n                return SyntaxKind.OrAssignmentExpression;\n\n            case SyntaxKind.AmpersandEqualsToken:\n                return SyntaxKind.AndAssignmentExpression;\n\n            case SyntaxKind.CaretEqualsToken:\n                return SyntaxKind.ExclusiveOrAssignmentExpression;\n\n            case SyntaxKind.LessThanLessThanEqualsToken:\n                return SyntaxKind.LeftShiftAssignmentExpression;\n\n            case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                return SyntaxKind.SignedRightShiftAssignmentExpression;\n\n            case SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:\n                return SyntaxKind.UnsignedRightShiftAssignmentExpression;\n\n            case SyntaxKind.PlusEqualsToken:\n                return SyntaxKind.AddAssignmentExpression;\n\n            case SyntaxKind.MinusEqualsToken:\n                return SyntaxKind.SubtractAssignmentExpression;\n\n            case SyntaxKind.AsteriskEqualsToken:\n                return SyntaxKind.MultiplyAssignmentExpression;\n\n            case SyntaxKind.SlashEqualsToken:\n                return SyntaxKind.DivideAssignmentExpression;\n\n            case SyntaxKind.PercentEqualsToken:\n                return SyntaxKind.ModuloAssignmentExpression;\n\n            case SyntaxKind.EqualsToken:\n                return SyntaxKind.AssignmentExpression;\n\n            case SyntaxKind.CommaToken:\n                return SyntaxKind.CommaExpression;\n\n            default:\n                return SyntaxKind.None;\n        }\n    }\n\n    export function isAnyDivideToken(kind: SyntaxKind): boolean {\n        switch (kind) {\n            case SyntaxKind.SlashToken:\n            case SyntaxKind.SlashEqualsToken:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    export function isAnyDivideOrRegularExpressionToken(kind: SyntaxKind): boolean {\n        switch (kind) {\n            case SyntaxKind.SlashToken:\n            case SyntaxKind.SlashEqualsToken:\n            case SyntaxKind.RegularExpressionLiteral:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    export function isParserGenerated(kind: SyntaxKind): boolean {\n        switch (kind) {\n            case SyntaxKind.GreaterThanGreaterThanToken:\n            case SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\n            case SyntaxKind.GreaterThanEqualsToken:\n            case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n            case SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    export function isAnyBinaryExpression(kind: SyntaxKind): boolean {\n        switch (kind) {\n            case SyntaxKind.CommaExpression:\n            case SyntaxKind.AssignmentExpression:\n            case SyntaxKind.AddAssignmentExpression:\n            case SyntaxKind.SubtractAssignmentExpression:\n            case SyntaxKind.MultiplyAssignmentExpression:\n            case SyntaxKind.DivideAssignmentExpression:\n            case SyntaxKind.ModuloAssignmentExpression:\n            case SyntaxKind.AndAssignmentExpression:\n            case SyntaxKind.ExclusiveOrAssignmentExpression:\n            case SyntaxKind.OrAssignmentExpression:\n            case SyntaxKind.LeftShiftAssignmentExpression:\n            case SyntaxKind.SignedRightShiftAssignmentExpression:\n            case SyntaxKind.UnsignedRightShiftAssignmentExpression:\n            case SyntaxKind.LogicalOrExpression:\n            case SyntaxKind.LogicalAndExpression:\n            case SyntaxKind.BitwiseOrExpression:\n            case SyntaxKind.BitwiseExclusiveOrExpression:\n            case SyntaxKind.BitwiseAndExpression:\n            case SyntaxKind.EqualsWithTypeConversionExpression:\n            case SyntaxKind.NotEqualsWithTypeConversionExpression:\n            case SyntaxKind.EqualsExpression:\n            case SyntaxKind.NotEqualsExpression:\n            case SyntaxKind.LessThanExpression:\n            case SyntaxKind.GreaterThanExpression:\n            case SyntaxKind.LessThanOrEqualExpression:\n            case SyntaxKind.GreaterThanOrEqualExpression:\n            case SyntaxKind.InstanceOfExpression:\n            case SyntaxKind.InExpression:\n            case SyntaxKind.LeftShiftExpression:\n            case SyntaxKind.SignedRightShiftExpression:\n            case SyntaxKind.UnsignedRightShiftExpression:\n            case SyntaxKind.MultiplyExpression:\n            case SyntaxKind.DivideExpression:\n            case SyntaxKind.ModuloExpression:\n            case SyntaxKind.AddExpression:\n            case SyntaxKind.SubtractExpression:\n                return true;\n        }\n\n        return false;\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript.SyntaxFacts {\n    export function isDirectivePrologueElement(node: ISyntaxNodeOrToken): boolean {\n        if (node.kind() === SyntaxKind.ExpressionStatement) {\n            var expressionStatement = <ExpressionStatementSyntax>node;\n            var expression = expressionStatement.expression;\n\n            if (expression.kind() === SyntaxKind.StringLiteral) {\n                return true;\n            }\n        }\n\n        return false\n    }\n\n    export function isUseStrictDirective(node: ISyntaxNodeOrToken): boolean {\n        var expressionStatement = <ExpressionStatementSyntax>node;\n        var stringLiteral = <ISyntaxToken>expressionStatement.expression;\n\n        var text = stringLiteral.text();\n        return text === \'\"use strict\"\' || text === \"\'use strict\'\";\n    }\n\n    export function isIdentifierNameOrAnyKeyword(token: ISyntaxToken): boolean {\n        var tokenKind = token.tokenKind;\n        return tokenKind === SyntaxKind.IdentifierName || SyntaxFacts.isAnyKeyword(tokenKind);\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxList extends ISyntaxElement {\n        childAt(index: number): ISyntaxNodeOrToken;\n        toArray(): ISyntaxNodeOrToken[];\n\n        insertChildrenInto(array: ISyntaxElement[], index: number): void;\n    }\n}\n\nmodule TypeScript.Syntax {\n    // TODO: stop exporting this once typecheck bug is fixed.\n    export class EmptySyntaxList implements ISyntaxList {\n        public kind(): SyntaxKind { return SyntaxKind.List; }\n\n        public isNode(): boolean { return false; }\n        public isToken(): boolean { return false; }\n        public isList(): boolean { return true; }\n        public isSeparatedList(): boolean { return false; }\n\n        public toJSON(key) {\n            return [];\n        }\n\n        public childCount(): number {\n            return 0;\n        }\n\n        public childAt(index: number): ISyntaxNodeOrToken {\n            throw Errors.argumentOutOfRange(\"index\");\n        }\n\n        public toArray(): ISyntaxNodeOrToken[] {\n            return [];\n        }\n\n        public collectTextElements(elements: string[]): void {\n        }\n\n        public firstToken(): ISyntaxToken {\n            return null;\n        }\n\n        public lastToken(): ISyntaxToken {\n            return null;\n        }\n\n        public fullWidth(): number {\n            return 0;\n        }\n\n        public width(): number {\n            return 0;\n        }\n\n        public leadingTrivia(): ISyntaxTriviaList {\n            return Syntax.emptyTriviaList;\n        }\n\n        public trailingTrivia(): ISyntaxTriviaList {\n            return Syntax.emptyTriviaList;\n        }\n\n        public leadingTriviaWidth(): number {\n            return 0;\n        }\n\n        public trailingTriviaWidth(): number {\n            return 0;\n        }\n\n        public fullText(): string {\n            return \"\";\n        }\n\n        public isTypeScriptSpecific(): boolean {\n            return false;\n        }\n\n        public isIncrementallyUnusable(): boolean {\n            return false;\n        }\n\n        public findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            // This should never have been called on this list.  It has a 0 width, so the client \n            // should have skipped over this.\n            throw Errors.invalidOperation();\n        }\n\n        public insertChildrenInto(array: ISyntaxElement[], index: number): void {\n        }\n    }\n\n    export var emptyList: ISyntaxList = new EmptySyntaxList();\n\n    class SingletonSyntaxList implements ISyntaxList {\n        private item: ISyntaxNodeOrToken;\n\n        constructor(item: ISyntaxNodeOrToken) {\n            this.item = item;\n        }\n\n        public kind(): SyntaxKind { return SyntaxKind.List; }\n\n        public isToken(): boolean { return false; }\n        public isNode(): boolean { return false; }\n        public isList(): boolean { return true; }\n        public isSeparatedList(): boolean { return false; }\n\n        public toJSON(key) {\n            return [this.item];\n        }\n\n        public childCount() {\n            return 1;\n        }\n\n        public childAt(index: number): ISyntaxNodeOrToken {\n            if (index !== 0) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.item;\n        }\n\n        public toArray(): ISyntaxNodeOrToken[] {\n            return [this.item];\n        }\n\n        public collectTextElements(elements: string[]): void {\n            this.item.collectTextElements(elements);\n        }\n\n        public firstToken(): ISyntaxToken {\n            return this.item.firstToken();\n        }\n\n        public lastToken(): ISyntaxToken {\n            return this.item.lastToken();\n        }\n\n        public fullWidth(): number {\n            return this.item.fullWidth();\n        }\n\n        public width(): number {\n            return this.item.width();\n        }\n        \n        public leadingTrivia(): ISyntaxTriviaList {\n            return this.item.leadingTrivia();\n        }\n\n        public trailingTrivia(): ISyntaxTriviaList {\n            return this.item.trailingTrivia();\n        }\n\n        public leadingTriviaWidth(): number {\n            return this.item.leadingTriviaWidth();\n        }\n\n        public trailingTriviaWidth(): number {\n            return this.item.trailingTriviaWidth();\n        }\n\n        public fullText(): string {\n            return this.item.fullText();\n        }\n\n        public isTypeScriptSpecific(): boolean {\n            return this.item.isTypeScriptSpecific();\n        }\n\n        public isIncrementallyUnusable(): boolean {\n            return this.item.isIncrementallyUnusable();\n        }\n\n        public findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            // Debug.assert(position >= 0 && position < this.item.fullWidth());\n            return (<any>this.item).findTokenInternal(\n                new PositionedList(parent, this, fullStart), position, fullStart);\n        }\n\n        public insertChildrenInto(array: ISyntaxElement[], index: number): void {\n            array.splice(index, 0, this.item);\n        }\n    }\n\n    class NormalSyntaxList implements ISyntaxList {\n        private nodeOrTokens: ISyntaxNodeOrToken[];\n        private _data: number = 0;\n\n        constructor(nodeOrTokens: ISyntaxNodeOrToken[]) {\n            this.nodeOrTokens = nodeOrTokens;\n        }\n\n        public kind(): SyntaxKind { return SyntaxKind.List; }\n\n        public isNode(): boolean { return false; }\n        public isToken(): boolean { return false; }\n        public isList(): boolean { return true; }\n        public isSeparatedList(): boolean { return false; }\n\n        public toJSON(key) {\n            return this.nodeOrTokens;\n        }\n\n        public childCount() {\n            return this.nodeOrTokens.length;\n        }\n\n        public childAt(index: number): ISyntaxNodeOrToken {\n            if (index < 0 || index >= this.nodeOrTokens.length) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.nodeOrTokens[index];\n        }\n\n        public toArray(): ISyntaxNodeOrToken[] {\n            return this.nodeOrTokens.slice(0);\n        }\n\n        public collectTextElements(elements: string[]): void {\n            for (var i = 0, n = this.nodeOrTokens.length; i < n; i++) {\n                var element = this.nodeOrTokens[i];\n                element.collectTextElements(elements);\n            }\n        }\n\n        public firstToken(): ISyntaxToken {\n            for (var i = 0, n = this.nodeOrTokens.length; i < n; i++) {\n                var token = this.nodeOrTokens[i].firstToken();\n                if (token !== null) {\n                    return token;\n                }\n            }\n\n            return null;\n        }\n\n        public lastToken(): ISyntaxToken {\n            for (var i = this.nodeOrTokens.length - 1; i >= 0; i--) {\n                var token = this.nodeOrTokens[i].lastToken();\n                if (token !== null) {\n                    return token;\n                }\n            }\n\n            return null;\n        }\n\n        public fullText(): string {\n            var elements: string[] = [];\n            this.collectTextElements(elements);\n            return elements.join(\"\");\n        }\n\n        public isTypeScriptSpecific(): boolean {\n            for (var i = 0, n = this.nodeOrTokens.length; i < n; i++) {\n                if (this.nodeOrTokens[i].isTypeScriptSpecific()) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public isIncrementallyUnusable(): boolean {\n            return (this.data() & SyntaxConstants.NodeIncrementallyUnusableMask) !== 0;\n        }\n\n        public fullWidth(): number {\n            return this.data() >>> SyntaxConstants.NodeFullWidthShift;\n        }\n\n        public width(): number {\n            var fullWidth = this.fullWidth();\n            return fullWidth - this.leadingTriviaWidth() - this.trailingTriviaWidth();\n        }\n\n        public leadingTrivia(): ISyntaxTriviaList {\n            return this.firstToken().leadingTrivia();\n        }\n\n        public trailingTrivia(): ISyntaxTriviaList {\n            return this.lastToken().trailingTrivia();\n        }\n\n        public leadingTriviaWidth(): number {\n            return this.firstToken().leadingTriviaWidth();\n        }\n\n        public trailingTriviaWidth(): number {\n            return this.lastToken().trailingTriviaWidth();\n        }\n\n        private computeData(): number {\n            var fullWidth = 0;\n            var isIncrementallyUnusable = false;\n\n            for (var i = 0, n = this.nodeOrTokens.length; i < n; i++) {\n                var node = this.nodeOrTokens[i];\n                fullWidth += node.fullWidth();\n                isIncrementallyUnusable = isIncrementallyUnusable || node.isIncrementallyUnusable();\n            }\n\n            return (fullWidth << SyntaxConstants.NodeFullWidthShift)\n                 | (isIncrementallyUnusable ? SyntaxConstants.NodeIncrementallyUnusableMask : 0)\n                 | SyntaxConstants.NodeDataComputed;\n        }\n\n        private data(): number {\n            if ((this._data & SyntaxConstants.NodeDataComputed) === 0) {\n                this._data = this.computeData();\n            }\n\n            return this._data;\n        }\n\n        public findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            // Debug.assert(position >= 0 && position < this.fullWidth());\n            \n            parent = new PositionedList(parent, this, fullStart);\n            for (var i = 0, n = this.nodeOrTokens.length; i < n; i++) {\n                var nodeOrToken = this.nodeOrTokens[i];\n\n                var childWidth = nodeOrToken.fullWidth();\n                if (position < childWidth) {\n                    return (<any>nodeOrToken).findTokenInternal(parent, position, fullStart);\n                }\n\n                position -= childWidth;\n                fullStart += childWidth;\n            }\n\n            throw Errors.invalidOperation();\n        }\n\n        public insertChildrenInto(array: ISyntaxElement[], index: number): void {\n            if (index === 0) {\n                array.unshift.apply(array, this.nodeOrTokens);\n            }\n            else {\n                // TODO: this seems awfully innefficient.  Can we do better here?\n                array.splice.apply(array, [index, <any>0].concat(this.nodeOrTokens));\n            }\n        }\n    }\n\n    export function list(nodes: ISyntaxNodeOrToken[]): ISyntaxList {\n        if (nodes === undefined || nodes === null || nodes.length === 0) {\n            return emptyList;\n        }\n\n        if (nodes.length === 1) {\n            var item = nodes[0];\n            return new SingletonSyntaxList(item);\n        }\n\n        return new NormalSyntaxList(nodes);\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class SyntaxNode implements ISyntaxNodeOrToken {\n        private _data: number;\n\n        constructor(parsedInStrictMode: boolean) {\n            this._data = parsedInStrictMode ? SyntaxConstants.NodeParsedInStrictModeMask : 0;\n        }\n\n        public isNode(): boolean { return true; }\n        public isToken(): boolean { return false; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return false; }\n\n        public kind(): SyntaxKind {\n            throw Errors.abstract();\n        }\n\n        public childCount(): number {\n            throw Errors.abstract();\n        }\n\n        public childAt(slot: number): ISyntaxElement {\n            throw Errors.abstract();\n        }\n\n        // Returns the first non-missing token inside this node (or null if there are no such token).\n        public firstToken(): ISyntaxToken {\n            for (var i = 0, n = this.childCount(); i < n; i++) {\n                var element = this.childAt(i);\n\n                if (element !== null) {\n                    if (element.fullWidth() > 0 || element.kind() === SyntaxKind.EndOfFileToken) {\n                        return element.firstToken();\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        // Returns the last non-missing token inside this node (or null if there are no such token).\n        public lastToken(): ISyntaxToken {\n            for (var i = this.childCount() - 1; i >= 0; i--) {\n                var element = this.childAt(i);\n\n                if (element !== null) {\n                    if (element.fullWidth() > 0 || element.kind() === SyntaxKind.EndOfFileToken) {\n                        return element.lastToken();\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public insertChildrenInto(array: ISyntaxElement[], index: number) {\n            for (var i = this.childCount() - 1; i >= 0; i--) {\n                var element = this.childAt(i);\n\n                if (element !== null) {\n                    if (element.isNode() || element.isToken()) {\n                        array.splice(index, 0, element);\n                    }\n                    else if (element.isList()) {\n                        (<ISyntaxList>element).insertChildrenInto(array, index);\n                    }\n                    else if (element.isSeparatedList()) {\n                        (<ISeparatedSyntaxList>element).insertChildrenInto(array, index);\n                    }\n                    else {\n                        throw Errors.invalidOperation();\n                    }\n                }\n            }\n        }\n\n        public leadingTrivia(): ISyntaxTriviaList {\n            return this.firstToken().leadingTrivia();\n        }\n\n        public trailingTrivia(): ISyntaxTriviaList {\n            return this.lastToken().trailingTrivia();\n        }\n\n        public toJSON(key) {\n            var result: any = {\n                kind: SyntaxKind[this.kind()],\n                fullWidth: this.fullWidth()\n            };\n\n            if (this.isIncrementallyUnusable()) {\n                result.isIncrementallyUnusable = true;\n            }\n\n            if (this.parsedInStrictMode()) {\n                result.parsedInStrictMode = true;\n            }\n\n            for (var i = 0, n = this.childCount(); i < n; i++) {\n                var value = this.childAt(i);\n\n                if (value) {\n                    for (var name in this) {\n                        if (value === this[name]) {\n                            result[name] = value;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        public accept(visitor: ISyntaxVisitor): any {\n            throw Errors.abstract();\n        }\n\n        public fullText(): string {\n            var elements: string[] = [];\n            this.collectTextElements(elements);\n            return elements.join(\"\");\n        }\n\n        public collectTextElements(elements: string[]): void {\n            for (var i = 0, n = this.childCount(); i < n; i++) {\n                var element = this.childAt(i);\n\n                if (element !== null) {\n                    element.collectTextElements(elements)\n                }\n            }\n        }\n\n        public replaceToken(token1: ISyntaxToken, token2: ISyntaxToken): SyntaxNode {\n            if (token1 === token2) {\n                return this;\n            }\n\n            return this.accept(new SyntaxTokenReplacer(token1, token2));\n        }\n\n        public withLeadingTrivia(trivia: ISyntaxTriviaList): SyntaxNode {\n            return this.replaceToken(this.firstToken(), this.firstToken().withLeadingTrivia(trivia));\n        }\n\n        public withTrailingTrivia(trivia: ISyntaxTriviaList): SyntaxNode {\n            return this.replaceToken(this.lastToken(), this.lastToken().withTrailingTrivia(trivia));\n        }\n\n        public hasLeadingTrivia(): boolean {\n            return this.lastToken().hasLeadingTrivia();\n        }\n\n        public hasTrailingTrivia(): boolean {\n            return this.lastToken().hasTrailingTrivia();\n        }\n\n        public isTypeScriptSpecific(): boolean {\n            return false;\n        }\n\n        public isIncrementallyUnusable(): boolean {\n            return (this.data() & SyntaxConstants.NodeIncrementallyUnusableMask) !== 0;\n        }\n\n        // True if this node was parsed while the parser was in \'strict\' mode.  A node parsed in strict\n        // mode cannot be reused if the parser is non-strict mode (and vice versa).  This is because \n        // the parser parses things differently in strict mode and thus the tokens may be interpretted\n        // differently if the mode is changed. \n        public parsedInStrictMode(): boolean {\n            return (this.data() & SyntaxConstants.NodeParsedInStrictModeMask) !== 0;\n        }\n\n        public fullWidth(): number {\n            return this.data() >>> SyntaxConstants.NodeFullWidthShift;\n        }\n\n        private computeData(): number {\n            var slotCount = this.childCount();\n\n            var fullWidth = 0;\n            var childWidth = 0;\n\n            // If we\'re already set as incrementally unusable, then don\'t need to check children.\n            // If we have no children (like an OmmittedExpressionSyntax), we\'re automatically not reusable.\n            var isIncrementallyUnusable = ((this._data & SyntaxConstants.NodeIncrementallyUnusableMask) !== 0) || slotCount === 0;\n\n            for (var i = 0, n = slotCount; i < n; i++) {\n                var element = this.childAt(i);\n\n                if (element !== null) {\n                    childWidth = element.fullWidth();\n                    fullWidth += childWidth;\n\n                    if (!isIncrementallyUnusable) {\n                        isIncrementallyUnusable = element.isIncrementallyUnusable();\n                    }\n                }\n            }\n\n            return (fullWidth << SyntaxConstants.NodeFullWidthShift)\n                 | (isIncrementallyUnusable ? SyntaxConstants.NodeIncrementallyUnusableMask : 0)\n                 | SyntaxConstants.NodeDataComputed;\n        }\n\n        private data(): number {\n            if ((this._data & SyntaxConstants.NodeDataComputed) === 0) {\n                this._data |= this.computeData();\n            }\n\n            return this._data;\n        }\n\n        /// <summary>\n        /// Finds a token according to the following rules:\n        /// 1) If position matches the End of the node/s FullSpan and the node is SourceUnit,\n        ///    then the EOF token is returned. \n        /// \n        ///  2) If node.FullSpan.Contains(position) then the token that contains given position is\n        ///     returned.\n        /// \n        ///  3) Otherwise an ArgumentOutOfRangeException is thrown\n        ///\n        /// Note: findToken will always return a non-missing token with width greater than or equal to\n        /// 1 (except for EOF).  Empty tokens synthesized by the parser are never returned.\n        /// </summary>\n        public findToken(position: number, includeSkippedTokens: boolean = false): PositionedToken {\n            var endOfFileToken = this.tryGetEndOfFileAt(position);\n            if (endOfFileToken !== null) {\n                return endOfFileToken;\n            }\n\n            if (position < 0 || position >= this.fullWidth()) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            var positionedToken= this.findTokenInternal(null, position, 0);\n\n            if (includeSkippedTokens) {\n                return Syntax.findSkippedTokenInPositionedToken(positionedToken, position) || positionedToken;\n            }\n\n            // Could not find a better match\n            return positionedToken;\n\n        }\n\n        private tryGetEndOfFileAt(position: number): PositionedToken {\n            if (this.kind() === SyntaxKind.SourceUnit && position === this.fullWidth()) {\n                var sourceUnit = <SourceUnitSyntax>this;\n                return new PositionedToken(\n                    new PositionedNode(null, sourceUnit, 0),\n                    sourceUnit.endOfFileToken, sourceUnit.moduleElements.fullWidth());\n            }\n\n            return null;\n        }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            // Debug.assert(position >= 0 && position < this.fullWidth());\n\n            parent = new PositionedNode(parent, this, fullStart);\n            for (var i = 0, n = this.childCount(); i < n; i++) {\n                var element = this.childAt(i);\n\n                if (element !== null) {\n                    var childWidth = element.fullWidth();\n\n                    if (position < childWidth) {\n                        return (<any>element).findTokenInternal(parent, position, fullStart);\n                    }\n\n                    position -= childWidth;\n                    fullStart += childWidth;\n                }\n            }\n\n            throw Errors.invalidOperation();\n        }\n\n        public findTokenOnLeft(position: number, includeSkippedTokens: boolean = false): PositionedToken {\n            var positionedToken = this.findToken(position, includeSkippedTokens);\n            var start = positionedToken.start();\n\n            // Position better fall within this token.\n            // Debug.assert(position >= positionedToken.fullStart());\n            // Debug.assert(position < positionedToken.fullEnd() || positionedToken.token().tokenKind === SyntaxKind.EndOfFileToken);\n\n            // if position is after the start of the token, then this token is the token on the left.\n            if (position > start) {\n                return positionedToken;\n            }\n\n            // we\'re in the trivia before the start of the token.  Need to return the previous token.\n            if (positionedToken.fullStart() === 0) {\n                // Already on the first token.  Nothing before us.\n                return null;\n            }\n\n            return positionedToken.previousToken(includeSkippedTokens);\n        }\n\n        public findCompleteTokenOnLeft(position: number, includeSkippedTokens: boolean = false): PositionedToken {\n            var positionedToken = this.findToken(position, includeSkippedTokens);\n\n            // Position better fall within this token.\n            // Debug.assert(position >= positionedToken.fullStart());\n            // Debug.assert(position < positionedToken.fullEnd() || positionedToken.token().tokenKind === SyntaxKind.EndOfFileToken);\n\n            // if position is after the end of the token, then this token is the token on the left.\n            if (positionedToken.token().width() > 0 && position >= positionedToken.end()) {\n                return positionedToken;\n            }\n\n            return positionedToken.previousToken(includeSkippedTokens);\n        }\n\n        public isModuleElement(): boolean {\n            return false;\n        }\n\n        public isClassElement(): boolean {\n            return false;\n        }\n\n        public isTypeMember(): boolean {\n            return false\n        }\n\n        public isStatement(): boolean {\n            return false;\n        }\n\n        public isSwitchClause(): boolean {\n            return false;\n        }\n\n        public structuralEquals(node: SyntaxNode): boolean {\n            if (this === node) { return true; }\n            if (node === null) { return false; }\n            if (this.kind() !== node.kind()) { return false; }\n\n            for (var i = 0, n = this.childCount(); i < n; i++) {\n                var element1 = this.childAt(i);\n                var element2 = node.childAt(i);\n\n                if (!Syntax.elementStructuralEquals(element1, element2)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public width(): number {\n            return this.fullWidth() - this.leadingTriviaWidth() - this.trailingTriviaWidth();\n        }\n\n        public leadingTriviaWidth() {\n            var firstToken = this.firstToken();\n            return firstToken === null ? 0 : firstToken.leadingTriviaWidth();\n        }\n\n        public trailingTriviaWidth() {\n            var lastToken = this.lastToken();\n            return lastToken === null ? 0 : lastToken.trailingTriviaWidth();\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxNodeOrToken extends ISyntaxElement {\n        withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxNodeOrToken;\n        withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxNodeOrToken;\n\n        accept(visitor: ISyntaxVisitor): any;\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class SourceUnitSyntax extends SyntaxNode {\n\n        constructor(public moduleElements: ISyntaxList,\n                    public endOfFileToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitSourceUnit(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.SourceUnit;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.moduleElements;\n            case 1: return this.endOfFileToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(moduleElements: ISyntaxList,\n                  endOfFileToken: ISyntaxToken): SourceUnitSyntax {\n        if (this.moduleElements === moduleElements && this.endOfFileToken === endOfFileToken) {\n            return this;\n        }\n\n        return new SourceUnitSyntax(moduleElements, endOfFileToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(endOfFileToken: ISyntaxToken): SourceUnitSyntax {\n        return new SourceUnitSyntax(Syntax.emptyList, endOfFileToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(endOfFileToken: ISyntaxToken): SourceUnitSyntax {\n        return new SourceUnitSyntax(Syntax.emptyList, endOfFileToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SourceUnitSyntax {\n        return <SourceUnitSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SourceUnitSyntax {\n        return <SourceUnitSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModuleElements(moduleElements: ISyntaxList): SourceUnitSyntax {\n        return this.update(moduleElements, this.endOfFileToken);\n    }\n\n    public withModuleElement(moduleElement: IModuleElementSyntax): SourceUnitSyntax {\n        return this.withModuleElements(Syntax.list([moduleElement]));\n    }\n\n    public withEndOfFileToken(endOfFileToken: ISyntaxToken): SourceUnitSyntax {\n        return this.update(this.moduleElements, endOfFileToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.moduleElements.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ModuleReferenceSyntax extends SyntaxNode implements IModuleReferenceSyntax {\n        constructor(parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n        }\n\n    public isModuleReference(): boolean {\n        return true;\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ModuleReferenceSyntax {\n        return <ModuleReferenceSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ModuleReferenceSyntax {\n        return <ModuleReferenceSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ExternalModuleReferenceSyntax extends ModuleReferenceSyntax {\n\n        constructor(public moduleOrRequireKeyword: ISyntaxToken,\n                    public openParenToken: ISyntaxToken,\n                    public stringLiteral: ISyntaxToken,\n                    public closeParenToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitExternalModuleReference(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ExternalModuleReference;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.moduleOrRequireKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.stringLiteral;\n            case 3: return this.closeParenToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(moduleOrRequireKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  stringLiteral: ISyntaxToken,\n                  closeParenToken: ISyntaxToken): ExternalModuleReferenceSyntax {\n        if (this.moduleOrRequireKeyword === moduleOrRequireKeyword && this.openParenToken === openParenToken && this.stringLiteral === stringLiteral && this.closeParenToken === closeParenToken) {\n            return this;\n        }\n\n        return new ExternalModuleReferenceSyntax(moduleOrRequireKeyword, openParenToken, stringLiteral, closeParenToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(moduleOrRequireKeyword: ISyntaxToken,\n                          stringLiteral: ISyntaxToken): ExternalModuleReferenceSyntax {\n        return new ExternalModuleReferenceSyntax(moduleOrRequireKeyword, Syntax.token(SyntaxKind.OpenParenToken), stringLiteral, Syntax.token(SyntaxKind.CloseParenToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ExternalModuleReferenceSyntax {\n        return <ExternalModuleReferenceSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ExternalModuleReferenceSyntax {\n        return <ExternalModuleReferenceSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModuleOrRequireKeyword(moduleOrRequireKeyword: ISyntaxToken): ExternalModuleReferenceSyntax {\n        return this.update(moduleOrRequireKeyword, this.openParenToken, this.stringLiteral, this.closeParenToken);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): ExternalModuleReferenceSyntax {\n        return this.update(this.moduleOrRequireKeyword, openParenToken, this.stringLiteral, this.closeParenToken);\n    }\n\n    public withStringLiteral(stringLiteral: ISyntaxToken): ExternalModuleReferenceSyntax {\n        return this.update(this.moduleOrRequireKeyword, this.openParenToken, stringLiteral, this.closeParenToken);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): ExternalModuleReferenceSyntax {\n        return this.update(this.moduleOrRequireKeyword, this.openParenToken, this.stringLiteral, closeParenToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ModuleNameModuleReferenceSyntax extends ModuleReferenceSyntax {\n\n        constructor(public moduleName: INameSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitModuleNameModuleReference(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ModuleNameModuleReference;\n    }\n\n    public childCount(): number {\n        return 1;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.moduleName;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(moduleName: INameSyntax): ModuleNameModuleReferenceSyntax {\n        if (this.moduleName === moduleName) {\n            return this;\n        }\n\n        return new ModuleNameModuleReferenceSyntax(moduleName, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ModuleNameModuleReferenceSyntax {\n        return <ModuleNameModuleReferenceSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ModuleNameModuleReferenceSyntax {\n        return <ModuleNameModuleReferenceSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModuleName(moduleName: INameSyntax): ModuleNameModuleReferenceSyntax {\n        return this.update(moduleName);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ImportDeclarationSyntax extends SyntaxNode implements IModuleElementSyntax {\n\n        constructor(public importKeyword: ISyntaxToken,\n                    public identifier: ISyntaxToken,\n                    public equalsToken: ISyntaxToken,\n                    public moduleReference: ModuleReferenceSyntax,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitImportDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ImportDeclaration;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.importKeyword;\n            case 1: return this.identifier;\n            case 2: return this.equalsToken;\n            case 3: return this.moduleReference;\n            case 4: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(importKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  equalsToken: ISyntaxToken,\n                  moduleReference: ModuleReferenceSyntax,\n                  semicolonToken: ISyntaxToken): ImportDeclarationSyntax {\n        if (this.importKeyword === importKeyword && this.identifier === identifier && this.equalsToken === equalsToken && this.moduleReference === moduleReference && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ImportDeclarationSyntax(importKeyword, identifier, equalsToken, moduleReference, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(identifier: ISyntaxToken,\n                          moduleReference: ModuleReferenceSyntax): ImportDeclarationSyntax {\n        return new ImportDeclarationSyntax(Syntax.token(SyntaxKind.ImportKeyword), identifier, Syntax.token(SyntaxKind.EqualsToken), moduleReference, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ImportDeclarationSyntax {\n        return <ImportDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ImportDeclarationSyntax {\n        return <ImportDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withImportKeyword(importKeyword: ISyntaxToken): ImportDeclarationSyntax {\n        return this.update(importKeyword, this.identifier, this.equalsToken, this.moduleReference, this.semicolonToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): ImportDeclarationSyntax {\n        return this.update(this.importKeyword, identifier, this.equalsToken, this.moduleReference, this.semicolonToken);\n    }\n\n    public withEqualsToken(equalsToken: ISyntaxToken): ImportDeclarationSyntax {\n        return this.update(this.importKeyword, this.identifier, equalsToken, this.moduleReference, this.semicolonToken);\n    }\n\n    public withModuleReference(moduleReference: ModuleReferenceSyntax): ImportDeclarationSyntax {\n        return this.update(this.importKeyword, this.identifier, this.equalsToken, moduleReference, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ImportDeclarationSyntax {\n        return this.update(this.importKeyword, this.identifier, this.equalsToken, this.moduleReference, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ExportAssignmentSyntax extends SyntaxNode implements IModuleElementSyntax {\n\n        constructor(public exportKeyword: ISyntaxToken,\n                    public equalsToken: ISyntaxToken,\n                    public identifier: ISyntaxToken,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitExportAssignment(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ExportAssignment;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.exportKeyword;\n            case 1: return this.equalsToken;\n            case 2: return this.identifier;\n            case 3: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(exportKeyword: ISyntaxToken,\n                  equalsToken: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  semicolonToken: ISyntaxToken): ExportAssignmentSyntax {\n        if (this.exportKeyword === exportKeyword && this.equalsToken === equalsToken && this.identifier === identifier && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ExportAssignmentSyntax(exportKeyword, equalsToken, identifier, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(identifier: ISyntaxToken): ExportAssignmentSyntax {\n        return new ExportAssignmentSyntax(Syntax.token(SyntaxKind.ExportKeyword), Syntax.token(SyntaxKind.EqualsToken), identifier, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ExportAssignmentSyntax {\n        return <ExportAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ExportAssignmentSyntax {\n        return <ExportAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExportKeyword(exportKeyword: ISyntaxToken): ExportAssignmentSyntax {\n        return this.update(exportKeyword, this.equalsToken, this.identifier, this.semicolonToken);\n    }\n\n    public withEqualsToken(equalsToken: ISyntaxToken): ExportAssignmentSyntax {\n        return this.update(this.exportKeyword, equalsToken, this.identifier, this.semicolonToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): ExportAssignmentSyntax {\n        return this.update(this.exportKeyword, this.equalsToken, identifier, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ExportAssignmentSyntax {\n        return this.update(this.exportKeyword, this.equalsToken, this.identifier, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ClassDeclarationSyntax extends SyntaxNode implements IModuleElementSyntax {\n\n        constructor(public modifiers: ISyntaxList,\n                    public classKeyword: ISyntaxToken,\n                    public identifier: ISyntaxToken,\n                    public typeParameterList: TypeParameterListSyntax,\n                    public heritageClauses: ISyntaxList,\n                    public openBraceToken: ISyntaxToken,\n                    public classElements: ISyntaxList,\n                    public closeBraceToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitClassDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ClassDeclaration;\n    }\n\n    public childCount(): number {\n        return 8;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.classKeyword;\n            case 2: return this.identifier;\n            case 3: return this.typeParameterList;\n            case 4: return this.heritageClauses;\n            case 5: return this.openBraceToken;\n            case 6: return this.classElements;\n            case 7: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  classKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  typeParameterList: TypeParameterListSyntax,\n                  heritageClauses: ISyntaxList,\n                  openBraceToken: ISyntaxToken,\n                  classElements: ISyntaxList,\n                  closeBraceToken: ISyntaxToken): ClassDeclarationSyntax {\n        if (this.modifiers === modifiers && this.classKeyword === classKeyword && this.identifier === identifier && this.typeParameterList === typeParameterList && this.heritageClauses === heritageClauses && this.openBraceToken === openBraceToken && this.classElements === classElements && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new ClassDeclarationSyntax(modifiers, classKeyword, identifier, typeParameterList, heritageClauses, openBraceToken, classElements, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(classKeyword: ISyntaxToken,\n                         identifier: ISyntaxToken,\n                         openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): ClassDeclarationSyntax {\n        return new ClassDeclarationSyntax(Syntax.emptyList, classKeyword, identifier, null, Syntax.emptyList, openBraceToken, Syntax.emptyList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): ClassDeclarationSyntax {\n        return new ClassDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.ClassKeyword), identifier, null, Syntax.emptyList, Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptyList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ClassDeclarationSyntax {\n        return <ClassDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ClassDeclarationSyntax {\n        return <ClassDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): ClassDeclarationSyntax {\n        return this.update(modifiers, this.classKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.openBraceToken, this.classElements, this.closeBraceToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): ClassDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withClassKeyword(classKeyword: ISyntaxToken): ClassDeclarationSyntax {\n        return this.update(this.modifiers, classKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.openBraceToken, this.classElements, this.closeBraceToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): ClassDeclarationSyntax {\n        return this.update(this.modifiers, this.classKeyword, identifier, this.typeParameterList, this.heritageClauses, this.openBraceToken, this.classElements, this.closeBraceToken);\n    }\n\n    public withTypeParameterList(typeParameterList: TypeParameterListSyntax): ClassDeclarationSyntax {\n        return this.update(this.modifiers, this.classKeyword, this.identifier, typeParameterList, this.heritageClauses, this.openBraceToken, this.classElements, this.closeBraceToken);\n    }\n\n    public withHeritageClauses(heritageClauses: ISyntaxList): ClassDeclarationSyntax {\n        return this.update(this.modifiers, this.classKeyword, this.identifier, this.typeParameterList, heritageClauses, this.openBraceToken, this.classElements, this.closeBraceToken);\n    }\n\n    public withHeritageClause(heritageClause: HeritageClauseSyntax): ClassDeclarationSyntax {\n        return this.withHeritageClauses(Syntax.list([heritageClause]));\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): ClassDeclarationSyntax {\n        return this.update(this.modifiers, this.classKeyword, this.identifier, this.typeParameterList, this.heritageClauses, openBraceToken, this.classElements, this.closeBraceToken);\n    }\n\n    public withClassElements(classElements: ISyntaxList): ClassDeclarationSyntax {\n        return this.update(this.modifiers, this.classKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.openBraceToken, classElements, this.closeBraceToken);\n    }\n\n    public withClassElement(classElement: IClassElementSyntax): ClassDeclarationSyntax {\n        return this.withClassElements(Syntax.list([classElement]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): ClassDeclarationSyntax {\n        return this.update(this.modifiers, this.classKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.openBraceToken, this.classElements, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class InterfaceDeclarationSyntax extends SyntaxNode implements IModuleElementSyntax {\n\n        constructor(public modifiers: ISyntaxList,\n                    public interfaceKeyword: ISyntaxToken,\n                    public identifier: ISyntaxToken,\n                    public typeParameterList: TypeParameterListSyntax,\n                    public heritageClauses: ISyntaxList,\n                    public body: ObjectTypeSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitInterfaceDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.InterfaceDeclaration;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.interfaceKeyword;\n            case 2: return this.identifier;\n            case 3: return this.typeParameterList;\n            case 4: return this.heritageClauses;\n            case 5: return this.body;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  interfaceKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  typeParameterList: TypeParameterListSyntax,\n                  heritageClauses: ISyntaxList,\n                  body: ObjectTypeSyntax): InterfaceDeclarationSyntax {\n        if (this.modifiers === modifiers && this.interfaceKeyword === interfaceKeyword && this.identifier === identifier && this.typeParameterList === typeParameterList && this.heritageClauses === heritageClauses && this.body === body) {\n            return this;\n        }\n\n        return new InterfaceDeclarationSyntax(modifiers, interfaceKeyword, identifier, typeParameterList, heritageClauses, body, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(interfaceKeyword: ISyntaxToken,\n                         identifier: ISyntaxToken,\n                         body: ObjectTypeSyntax): InterfaceDeclarationSyntax {\n        return new InterfaceDeclarationSyntax(Syntax.emptyList, interfaceKeyword, identifier, null, Syntax.emptyList, body, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): InterfaceDeclarationSyntax {\n        return new InterfaceDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.InterfaceKeyword), identifier, null, Syntax.emptyList, ObjectTypeSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): InterfaceDeclarationSyntax {\n        return <InterfaceDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): InterfaceDeclarationSyntax {\n        return <InterfaceDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): InterfaceDeclarationSyntax {\n        return this.update(modifiers, this.interfaceKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.body);\n    }\n\n    public withModifier(modifier: ISyntaxToken): InterfaceDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withInterfaceKeyword(interfaceKeyword: ISyntaxToken): InterfaceDeclarationSyntax {\n        return this.update(this.modifiers, interfaceKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.body);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): InterfaceDeclarationSyntax {\n        return this.update(this.modifiers, this.interfaceKeyword, identifier, this.typeParameterList, this.heritageClauses, this.body);\n    }\n\n    public withTypeParameterList(typeParameterList: TypeParameterListSyntax): InterfaceDeclarationSyntax {\n        return this.update(this.modifiers, this.interfaceKeyword, this.identifier, typeParameterList, this.heritageClauses, this.body);\n    }\n\n    public withHeritageClauses(heritageClauses: ISyntaxList): InterfaceDeclarationSyntax {\n        return this.update(this.modifiers, this.interfaceKeyword, this.identifier, this.typeParameterList, heritageClauses, this.body);\n    }\n\n    public withHeritageClause(heritageClause: HeritageClauseSyntax): InterfaceDeclarationSyntax {\n        return this.withHeritageClauses(Syntax.list([heritageClause]));\n    }\n\n    public withBody(body: ObjectTypeSyntax): InterfaceDeclarationSyntax {\n        return this.update(this.modifiers, this.interfaceKeyword, this.identifier, this.typeParameterList, this.heritageClauses, body);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class HeritageClauseSyntax extends SyntaxNode {\n\n        constructor(public extendsOrImplementsKeyword: ISyntaxToken,\n                    public typeNames: ISeparatedSyntaxList,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitHeritageClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.HeritageClause;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.extendsOrImplementsKeyword;\n            case 1: return this.typeNames;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(extendsOrImplementsKeyword: ISyntaxToken,\n                  typeNames: ISeparatedSyntaxList): HeritageClauseSyntax {\n        if (this.extendsOrImplementsKeyword === extendsOrImplementsKeyword && this.typeNames === typeNames) {\n            return this;\n        }\n\n        return new HeritageClauseSyntax(extendsOrImplementsKeyword, typeNames, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): HeritageClauseSyntax {\n        return <HeritageClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): HeritageClauseSyntax {\n        return <HeritageClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExtendsOrImplementsKeyword(extendsOrImplementsKeyword: ISyntaxToken): HeritageClauseSyntax {\n        return this.update(extendsOrImplementsKeyword, this.typeNames);\n    }\n\n    public withTypeNames(typeNames: ISeparatedSyntaxList): HeritageClauseSyntax {\n        return this.update(this.extendsOrImplementsKeyword, typeNames);\n    }\n\n    public withTypeName(typeName: INameSyntax): HeritageClauseSyntax {\n        return this.withTypeNames(Syntax.separatedList([typeName]));\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ModuleDeclarationSyntax extends SyntaxNode implements IModuleElementSyntax {\n\n        constructor(public modifiers: ISyntaxList,\n                    public moduleKeyword: ISyntaxToken,\n                    public moduleName: INameSyntax,\n                    public stringLiteral: ISyntaxToken,\n                    public openBraceToken: ISyntaxToken,\n                    public moduleElements: ISyntaxList,\n                    public closeBraceToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitModuleDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ModuleDeclaration;\n    }\n\n    public childCount(): number {\n        return 7;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.moduleKeyword;\n            case 2: return this.moduleName;\n            case 3: return this.stringLiteral;\n            case 4: return this.openBraceToken;\n            case 5: return this.moduleElements;\n            case 6: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  moduleKeyword: ISyntaxToken,\n                  moduleName: INameSyntax,\n                  stringLiteral: ISyntaxToken,\n                  openBraceToken: ISyntaxToken,\n                  moduleElements: ISyntaxList,\n                  closeBraceToken: ISyntaxToken): ModuleDeclarationSyntax {\n        if (this.modifiers === modifiers && this.moduleKeyword === moduleKeyword && this.moduleName === moduleName && this.stringLiteral === stringLiteral && this.openBraceToken === openBraceToken && this.moduleElements === moduleElements && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new ModuleDeclarationSyntax(modifiers, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(moduleKeyword: ISyntaxToken,\n                         openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): ModuleDeclarationSyntax {\n        return new ModuleDeclarationSyntax(Syntax.emptyList, moduleKeyword, null, null, openBraceToken, Syntax.emptyList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ModuleDeclarationSyntax {\n        return new ModuleDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.ModuleKeyword), null, null, Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptyList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ModuleDeclarationSyntax {\n        return <ModuleDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ModuleDeclarationSyntax {\n        return <ModuleDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): ModuleDeclarationSyntax {\n        return this.update(modifiers, this.moduleKeyword, this.moduleName, this.stringLiteral, this.openBraceToken, this.moduleElements, this.closeBraceToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): ModuleDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withModuleKeyword(moduleKeyword: ISyntaxToken): ModuleDeclarationSyntax {\n        return this.update(this.modifiers, moduleKeyword, this.moduleName, this.stringLiteral, this.openBraceToken, this.moduleElements, this.closeBraceToken);\n    }\n\n    public withModuleName(moduleName: INameSyntax): ModuleDeclarationSyntax {\n        return this.update(this.modifiers, this.moduleKeyword, moduleName, this.stringLiteral, this.openBraceToken, this.moduleElements, this.closeBraceToken);\n    }\n\n    public withStringLiteral(stringLiteral: ISyntaxToken): ModuleDeclarationSyntax {\n        return this.update(this.modifiers, this.moduleKeyword, this.moduleName, stringLiteral, this.openBraceToken, this.moduleElements, this.closeBraceToken);\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): ModuleDeclarationSyntax {\n        return this.update(this.modifiers, this.moduleKeyword, this.moduleName, this.stringLiteral, openBraceToken, this.moduleElements, this.closeBraceToken);\n    }\n\n    public withModuleElements(moduleElements: ISyntaxList): ModuleDeclarationSyntax {\n        return this.update(this.modifiers, this.moduleKeyword, this.moduleName, this.stringLiteral, this.openBraceToken, moduleElements, this.closeBraceToken);\n    }\n\n    public withModuleElement(moduleElement: IModuleElementSyntax): ModuleDeclarationSyntax {\n        return this.withModuleElements(Syntax.list([moduleElement]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): ModuleDeclarationSyntax {\n        return this.update(this.modifiers, this.moduleKeyword, this.moduleName, this.stringLiteral, this.openBraceToken, this.moduleElements, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class FunctionDeclarationSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public modifiers: ISyntaxList,\n                    public functionKeyword: ISyntaxToken,\n                    public identifier: ISyntaxToken,\n                    public callSignature: CallSignatureSyntax,\n                    public block: BlockSyntax,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitFunctionDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.FunctionDeclaration;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.functionKeyword;\n            case 2: return this.identifier;\n            case 3: return this.callSignature;\n            case 4: return this.block;\n            case 5: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  functionKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  callSignature: CallSignatureSyntax,\n                  block: BlockSyntax,\n                  semicolonToken: ISyntaxToken): FunctionDeclarationSyntax {\n        if (this.modifiers === modifiers && this.functionKeyword === functionKeyword && this.identifier === identifier && this.callSignature === callSignature && this.block === block && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new FunctionDeclarationSyntax(modifiers, functionKeyword, identifier, callSignature, block, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(functionKeyword: ISyntaxToken,\n                         identifier: ISyntaxToken,\n                         callSignature: CallSignatureSyntax): FunctionDeclarationSyntax {\n        return new FunctionDeclarationSyntax(Syntax.emptyList, functionKeyword, identifier, callSignature, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): FunctionDeclarationSyntax {\n        return new FunctionDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.FunctionKeyword), identifier, CallSignatureSyntax.create1(), null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): FunctionDeclarationSyntax {\n        return <FunctionDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): FunctionDeclarationSyntax {\n        return <FunctionDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): FunctionDeclarationSyntax {\n        return this.update(modifiers, this.functionKeyword, this.identifier, this.callSignature, this.block, this.semicolonToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): FunctionDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withFunctionKeyword(functionKeyword: ISyntaxToken): FunctionDeclarationSyntax {\n        return this.update(this.modifiers, functionKeyword, this.identifier, this.callSignature, this.block, this.semicolonToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): FunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.functionKeyword, identifier, this.callSignature, this.block, this.semicolonToken);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): FunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.functionKeyword, this.identifier, callSignature, this.block, this.semicolonToken);\n    }\n\n    public withBlock(block: BlockSyntax): FunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.functionKeyword, this.identifier, this.callSignature, block, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): FunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.functionKeyword, this.identifier, this.callSignature, this.block, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.modifiers.isTypeScriptSpecific()) { return true; }\n        if (this.callSignature.isTypeScriptSpecific()) { return true; }\n        if (this.block !== null && this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class VariableStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public modifiers: ISyntaxList,\n                    public variableDeclaration: VariableDeclarationSyntax,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitVariableStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.VariableStatement;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.variableDeclaration;\n            case 2: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  variableDeclaration: VariableDeclarationSyntax,\n                  semicolonToken: ISyntaxToken): VariableStatementSyntax {\n        if (this.modifiers === modifiers && this.variableDeclaration === variableDeclaration && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new VariableStatementSyntax(modifiers, variableDeclaration, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(variableDeclaration: VariableDeclarationSyntax,\n                         semicolonToken: ISyntaxToken): VariableStatementSyntax {\n        return new VariableStatementSyntax(Syntax.emptyList, variableDeclaration, semicolonToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(variableDeclaration: VariableDeclarationSyntax): VariableStatementSyntax {\n        return new VariableStatementSyntax(Syntax.emptyList, variableDeclaration, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): VariableStatementSyntax {\n        return <VariableStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): VariableStatementSyntax {\n        return <VariableStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): VariableStatementSyntax {\n        return this.update(modifiers, this.variableDeclaration, this.semicolonToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): VariableStatementSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withVariableDeclaration(variableDeclaration: VariableDeclarationSyntax): VariableStatementSyntax {\n        return this.update(this.modifiers, variableDeclaration, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): VariableStatementSyntax {\n        return this.update(this.modifiers, this.variableDeclaration, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.modifiers.isTypeScriptSpecific()) { return true; }\n        if (this.variableDeclaration.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class VariableDeclarationSyntax extends SyntaxNode {\n\n        constructor(public varKeyword: ISyntaxToken,\n                    public variableDeclarators: ISeparatedSyntaxList,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitVariableDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.VariableDeclaration;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.varKeyword;\n            case 1: return this.variableDeclarators;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(varKeyword: ISyntaxToken,\n                  variableDeclarators: ISeparatedSyntaxList): VariableDeclarationSyntax {\n        if (this.varKeyword === varKeyword && this.variableDeclarators === variableDeclarators) {\n            return this;\n        }\n\n        return new VariableDeclarationSyntax(varKeyword, variableDeclarators, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(variableDeclarators: ISeparatedSyntaxList): VariableDeclarationSyntax {\n        return new VariableDeclarationSyntax(Syntax.token(SyntaxKind.VarKeyword), variableDeclarators, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): VariableDeclarationSyntax {\n        return <VariableDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): VariableDeclarationSyntax {\n        return <VariableDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withVarKeyword(varKeyword: ISyntaxToken): VariableDeclarationSyntax {\n        return this.update(varKeyword, this.variableDeclarators);\n    }\n\n    public withVariableDeclarators(variableDeclarators: ISeparatedSyntaxList): VariableDeclarationSyntax {\n        return this.update(this.varKeyword, variableDeclarators);\n    }\n\n    public withVariableDeclarator(variableDeclarator: VariableDeclaratorSyntax): VariableDeclarationSyntax {\n        return this.withVariableDeclarators(Syntax.separatedList([variableDeclarator]));\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.variableDeclarators.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class VariableDeclaratorSyntax extends SyntaxNode {\n\n        constructor(public identifier: ISyntaxToken,\n                    public typeAnnotation: TypeAnnotationSyntax,\n                    public equalsValueClause: EqualsValueClauseSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitVariableDeclarator(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.VariableDeclarator;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.identifier;\n            case 1: return this.typeAnnotation;\n            case 2: return this.equalsValueClause;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(identifier: ISyntaxToken,\n                  typeAnnotation: TypeAnnotationSyntax,\n                  equalsValueClause: EqualsValueClauseSyntax): VariableDeclaratorSyntax {\n        if (this.identifier === identifier && this.typeAnnotation === typeAnnotation && this.equalsValueClause === equalsValueClause) {\n            return this;\n        }\n\n        return new VariableDeclaratorSyntax(identifier, typeAnnotation, equalsValueClause, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(identifier: ISyntaxToken): VariableDeclaratorSyntax {\n        return new VariableDeclaratorSyntax(identifier, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): VariableDeclaratorSyntax {\n        return new VariableDeclaratorSyntax(identifier, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): VariableDeclaratorSyntax {\n        return <VariableDeclaratorSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): VariableDeclaratorSyntax {\n        return <VariableDeclaratorSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): VariableDeclaratorSyntax {\n        return this.update(identifier, this.typeAnnotation, this.equalsValueClause);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): VariableDeclaratorSyntax {\n        return this.update(this.identifier, typeAnnotation, this.equalsValueClause);\n    }\n\n    public withEqualsValueClause(equalsValueClause: EqualsValueClauseSyntax): VariableDeclaratorSyntax {\n        return this.update(this.identifier, this.typeAnnotation, equalsValueClause);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.typeAnnotation !== null) { return true; }\n        if (this.equalsValueClause !== null && this.equalsValueClause.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class EqualsValueClauseSyntax extends SyntaxNode {\n\n        constructor(public equalsToken: ISyntaxToken,\n                    public value: IExpressionSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitEqualsValueClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.EqualsValueClause;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.equalsToken;\n            case 1: return this.value;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(equalsToken: ISyntaxToken,\n                  value: IExpressionSyntax): EqualsValueClauseSyntax {\n        if (this.equalsToken === equalsToken && this.value === value) {\n            return this;\n        }\n\n        return new EqualsValueClauseSyntax(equalsToken, value, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(value: IExpressionSyntax): EqualsValueClauseSyntax {\n        return new EqualsValueClauseSyntax(Syntax.token(SyntaxKind.EqualsToken), value, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): EqualsValueClauseSyntax {\n        return <EqualsValueClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): EqualsValueClauseSyntax {\n        return <EqualsValueClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withEqualsToken(equalsToken: ISyntaxToken): EqualsValueClauseSyntax {\n        return this.update(equalsToken, this.value);\n    }\n\n    public withValue(value: IExpressionSyntax): EqualsValueClauseSyntax {\n        return this.update(this.equalsToken, value);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.value.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class PrefixUnaryExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n    private _kind: SyntaxKind;\n\n        constructor(kind: SyntaxKind,\n                    public operatorToken: ISyntaxToken,\n                    public operand: IUnaryExpressionSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n            this._kind = kind;\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitPrefixUnaryExpression(this);\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.operatorToken;\n            case 1: return this.operand;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public kind(): SyntaxKind {\n        return this._kind;\n    }\n\n    public update(kind: SyntaxKind,\n                  operatorToken: ISyntaxToken,\n                  operand: IUnaryExpressionSyntax): PrefixUnaryExpressionSyntax {\n        if (this._kind === kind && this.operatorToken === operatorToken && this.operand === operand) {\n            return this;\n        }\n\n        return new PrefixUnaryExpressionSyntax(kind, operatorToken, operand, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): PrefixUnaryExpressionSyntax {\n        return <PrefixUnaryExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): PrefixUnaryExpressionSyntax {\n        return <PrefixUnaryExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withKind(kind: SyntaxKind): PrefixUnaryExpressionSyntax {\n        return this.update(kind, this.operatorToken, this.operand);\n    }\n\n    public withOperatorToken(operatorToken: ISyntaxToken): PrefixUnaryExpressionSyntax {\n        return this.update(this._kind, operatorToken, this.operand);\n    }\n\n    public withOperand(operand: IUnaryExpressionSyntax): PrefixUnaryExpressionSyntax {\n        return this.update(this._kind, this.operatorToken, operand);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.operand.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ArrayLiteralExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n        constructor(public openBracketToken: ISyntaxToken,\n                    public expressions: ISeparatedSyntaxList,\n                    public closeBracketToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitArrayLiteralExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ArrayLiteralExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openBracketToken;\n            case 1: return this.expressions;\n            case 2: return this.closeBracketToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(openBracketToken: ISyntaxToken,\n                  expressions: ISeparatedSyntaxList,\n                  closeBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax {\n        if (this.openBracketToken === openBracketToken && this.expressions === expressions && this.closeBracketToken === closeBracketToken) {\n            return this;\n        }\n\n        return new ArrayLiteralExpressionSyntax(openBracketToken, expressions, closeBracketToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openBracketToken: ISyntaxToken,\n                         closeBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax {\n        return new ArrayLiteralExpressionSyntax(openBracketToken, Syntax.emptySeparatedList, closeBracketToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ArrayLiteralExpressionSyntax {\n        return new ArrayLiteralExpressionSyntax(Syntax.token(SyntaxKind.OpenBracketToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.CloseBracketToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ArrayLiteralExpressionSyntax {\n        return <ArrayLiteralExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ArrayLiteralExpressionSyntax {\n        return <ArrayLiteralExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenBracketToken(openBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax {\n        return this.update(openBracketToken, this.expressions, this.closeBracketToken);\n    }\n\n    public withExpressions(expressions: ISeparatedSyntaxList): ArrayLiteralExpressionSyntax {\n        return this.update(this.openBracketToken, expressions, this.closeBracketToken);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ArrayLiteralExpressionSyntax {\n        return this.withExpressions(Syntax.separatedList([expression]));\n    }\n\n    public withCloseBracketToken(closeBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax {\n        return this.update(this.openBracketToken, this.expressions, closeBracketToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expressions.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class OmittedExpressionSyntax extends SyntaxNode implements IExpressionSyntax {\n        constructor(parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitOmittedExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.OmittedExpression;\n    }\n\n    public childCount(): number {\n        return 0;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        throw Errors.invalidOperation();\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(): OmittedExpressionSyntax {\n        return this;\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): OmittedExpressionSyntax {\n        return <OmittedExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): OmittedExpressionSyntax {\n        return <OmittedExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return false;\n    }\n    }\n\n    export class ParenthesizedExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n        constructor(public openParenToken: ISyntaxToken,\n                    public expression: IExpressionSyntax,\n                    public closeParenToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitParenthesizedExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ParenthesizedExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openParenToken;\n            case 1: return this.expression;\n            case 2: return this.closeParenToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(openParenToken: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken): ParenthesizedExpressionSyntax {\n        if (this.openParenToken === openParenToken && this.expression === expression && this.closeParenToken === closeParenToken) {\n            return this;\n        }\n\n        return new ParenthesizedExpressionSyntax(openParenToken, expression, closeParenToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): ParenthesizedExpressionSyntax {\n        return new ParenthesizedExpressionSyntax(Syntax.token(SyntaxKind.OpenParenToken), expression, Syntax.token(SyntaxKind.CloseParenToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ParenthesizedExpressionSyntax {\n        return <ParenthesizedExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ParenthesizedExpressionSyntax {\n        return <ParenthesizedExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): ParenthesizedExpressionSyntax {\n        return this.update(openParenToken, this.expression, this.closeParenToken);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ParenthesizedExpressionSyntax {\n        return this.update(this.openParenToken, expression, this.closeParenToken);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): ParenthesizedExpressionSyntax {\n        return this.update(this.openParenToken, this.expression, closeParenToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ArrowFunctionExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n        constructor(public equalsGreaterThanToken: ISyntaxToken,\n                    public body: ISyntaxNodeOrToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n        }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ArrowFunctionExpressionSyntax {\n        return <ArrowFunctionExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ArrowFunctionExpressionSyntax {\n        return <ArrowFunctionExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class SimpleArrowFunctionExpressionSyntax extends ArrowFunctionExpressionSyntax {\n\n        constructor(public identifier: ISyntaxToken,\n                    equalsGreaterThanToken: ISyntaxToken,\n                    body: ISyntaxNodeOrToken,\n                    parsedInStrictMode: boolean) {\n            super(equalsGreaterThanToken, body, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitSimpleArrowFunctionExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.SimpleArrowFunctionExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.identifier;\n            case 1: return this.equalsGreaterThanToken;\n            case 2: return this.body;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(identifier: ISyntaxToken,\n                  equalsGreaterThanToken: ISyntaxToken,\n                  body: ISyntaxNodeOrToken): SimpleArrowFunctionExpressionSyntax {\n        if (this.identifier === identifier && this.equalsGreaterThanToken === equalsGreaterThanToken && this.body === body) {\n            return this;\n        }\n\n        return new SimpleArrowFunctionExpressionSyntax(identifier, equalsGreaterThanToken, body, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(identifier: ISyntaxToken,\n                          body: ISyntaxNodeOrToken): SimpleArrowFunctionExpressionSyntax {\n        return new SimpleArrowFunctionExpressionSyntax(identifier, Syntax.token(SyntaxKind.EqualsGreaterThanToken), body, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SimpleArrowFunctionExpressionSyntax {\n        return <SimpleArrowFunctionExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SimpleArrowFunctionExpressionSyntax {\n        return <SimpleArrowFunctionExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): SimpleArrowFunctionExpressionSyntax {\n        return this.update(identifier, this.equalsGreaterThanToken, this.body);\n    }\n\n    public withEqualsGreaterThanToken(equalsGreaterThanToken: ISyntaxToken): SimpleArrowFunctionExpressionSyntax {\n        return this.update(this.identifier, equalsGreaterThanToken, this.body);\n    }\n\n    public withBody(body: ISyntaxNodeOrToken): SimpleArrowFunctionExpressionSyntax {\n        return this.update(this.identifier, this.equalsGreaterThanToken, body);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ParenthesizedArrowFunctionExpressionSyntax extends ArrowFunctionExpressionSyntax {\n\n        constructor(public callSignature: CallSignatureSyntax,\n                    equalsGreaterThanToken: ISyntaxToken,\n                    body: ISyntaxNodeOrToken,\n                    parsedInStrictMode: boolean) {\n            super(equalsGreaterThanToken, body, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitParenthesizedArrowFunctionExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ParenthesizedArrowFunctionExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.callSignature;\n            case 1: return this.equalsGreaterThanToken;\n            case 2: return this.body;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(callSignature: CallSignatureSyntax,\n                  equalsGreaterThanToken: ISyntaxToken,\n                  body: ISyntaxNodeOrToken): ParenthesizedArrowFunctionExpressionSyntax {\n        if (this.callSignature === callSignature && this.equalsGreaterThanToken === equalsGreaterThanToken && this.body === body) {\n            return this;\n        }\n\n        return new ParenthesizedArrowFunctionExpressionSyntax(callSignature, equalsGreaterThanToken, body, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(body: ISyntaxNodeOrToken): ParenthesizedArrowFunctionExpressionSyntax {\n        return new ParenthesizedArrowFunctionExpressionSyntax(CallSignatureSyntax.create1(), Syntax.token(SyntaxKind.EqualsGreaterThanToken), body, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ParenthesizedArrowFunctionExpressionSyntax {\n        return <ParenthesizedArrowFunctionExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ParenthesizedArrowFunctionExpressionSyntax {\n        return <ParenthesizedArrowFunctionExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): ParenthesizedArrowFunctionExpressionSyntax {\n        return this.update(callSignature, this.equalsGreaterThanToken, this.body);\n    }\n\n    public withEqualsGreaterThanToken(equalsGreaterThanToken: ISyntaxToken): ParenthesizedArrowFunctionExpressionSyntax {\n        return this.update(this.callSignature, equalsGreaterThanToken, this.body);\n    }\n\n    public withBody(body: ISyntaxNodeOrToken): ParenthesizedArrowFunctionExpressionSyntax {\n        return this.update(this.callSignature, this.equalsGreaterThanToken, body);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class QualifiedNameSyntax extends SyntaxNode implements INameSyntax {\n\n        constructor(public left: INameSyntax,\n                    public dotToken: ISyntaxToken,\n                    public right: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitQualifiedName(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.QualifiedName;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.left;\n            case 1: return this.dotToken;\n            case 2: return this.right;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isName(): boolean {\n        return true;\n    }\n\n    public isType(): boolean {\n        return true;\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(left: INameSyntax,\n                  dotToken: ISyntaxToken,\n                  right: ISyntaxToken): QualifiedNameSyntax {\n        if (this.left === left && this.dotToken === dotToken && this.right === right) {\n            return this;\n        }\n\n        return new QualifiedNameSyntax(left, dotToken, right, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(left: INameSyntax,\n                          right: ISyntaxToken): QualifiedNameSyntax {\n        return new QualifiedNameSyntax(left, Syntax.token(SyntaxKind.DotToken), right, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): QualifiedNameSyntax {\n        return <QualifiedNameSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): QualifiedNameSyntax {\n        return <QualifiedNameSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withLeft(left: INameSyntax): QualifiedNameSyntax {\n        return this.update(left, this.dotToken, this.right);\n    }\n\n    public withDotToken(dotToken: ISyntaxToken): QualifiedNameSyntax {\n        return this.update(this.left, dotToken, this.right);\n    }\n\n    public withRight(right: ISyntaxToken): QualifiedNameSyntax {\n        return this.update(this.left, this.dotToken, right);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class TypeArgumentListSyntax extends SyntaxNode {\n\n        constructor(public lessThanToken: ISyntaxToken,\n                    public typeArguments: ISeparatedSyntaxList,\n                    public greaterThanToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitTypeArgumentList(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.TypeArgumentList;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.lessThanToken;\n            case 1: return this.typeArguments;\n            case 2: return this.greaterThanToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(lessThanToken: ISyntaxToken,\n                  typeArguments: ISeparatedSyntaxList,\n                  greaterThanToken: ISyntaxToken): TypeArgumentListSyntax {\n        if (this.lessThanToken === lessThanToken && this.typeArguments === typeArguments && this.greaterThanToken === greaterThanToken) {\n            return this;\n        }\n\n        return new TypeArgumentListSyntax(lessThanToken, typeArguments, greaterThanToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(lessThanToken: ISyntaxToken,\n                         greaterThanToken: ISyntaxToken): TypeArgumentListSyntax {\n        return new TypeArgumentListSyntax(lessThanToken, Syntax.emptySeparatedList, greaterThanToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): TypeArgumentListSyntax {\n        return new TypeArgumentListSyntax(Syntax.token(SyntaxKind.LessThanToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.GreaterThanToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): TypeArgumentListSyntax {\n        return <TypeArgumentListSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): TypeArgumentListSyntax {\n        return <TypeArgumentListSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withLessThanToken(lessThanToken: ISyntaxToken): TypeArgumentListSyntax {\n        return this.update(lessThanToken, this.typeArguments, this.greaterThanToken);\n    }\n\n    public withTypeArguments(typeArguments: ISeparatedSyntaxList): TypeArgumentListSyntax {\n        return this.update(this.lessThanToken, typeArguments, this.greaterThanToken);\n    }\n\n    public withTypeArgument(typeArgument: ITypeSyntax): TypeArgumentListSyntax {\n        return this.withTypeArguments(Syntax.separatedList([typeArgument]));\n    }\n\n    public withGreaterThanToken(greaterThanToken: ISyntaxToken): TypeArgumentListSyntax {\n        return this.update(this.lessThanToken, this.typeArguments, greaterThanToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ConstructorTypeSyntax extends SyntaxNode implements ITypeSyntax {\n\n        constructor(public newKeyword: ISyntaxToken,\n                    public typeParameterList: TypeParameterListSyntax,\n                    public parameterList: ParameterListSyntax,\n                    public equalsGreaterThanToken: ISyntaxToken,\n                    public type: ITypeSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitConstructorType(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ConstructorType;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.newKeyword;\n            case 1: return this.typeParameterList;\n            case 2: return this.parameterList;\n            case 3: return this.equalsGreaterThanToken;\n            case 4: return this.type;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isType(): boolean {\n        return true;\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(newKeyword: ISyntaxToken,\n                  typeParameterList: TypeParameterListSyntax,\n                  parameterList: ParameterListSyntax,\n                  equalsGreaterThanToken: ISyntaxToken,\n                  type: ITypeSyntax): ConstructorTypeSyntax {\n        if (this.newKeyword === newKeyword && this.typeParameterList === typeParameterList && this.parameterList === parameterList && this.equalsGreaterThanToken === equalsGreaterThanToken && this.type === type) {\n            return this;\n        }\n\n        return new ConstructorTypeSyntax(newKeyword, typeParameterList, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(newKeyword: ISyntaxToken,\n                         parameterList: ParameterListSyntax,\n                         equalsGreaterThanToken: ISyntaxToken,\n                         type: ITypeSyntax): ConstructorTypeSyntax {\n        return new ConstructorTypeSyntax(newKeyword, null, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(type: ITypeSyntax): ConstructorTypeSyntax {\n        return new ConstructorTypeSyntax(Syntax.token(SyntaxKind.NewKeyword), null, ParameterListSyntax.create1(), Syntax.token(SyntaxKind.EqualsGreaterThanToken), type, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ConstructorTypeSyntax {\n        return <ConstructorTypeSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ConstructorTypeSyntax {\n        return <ConstructorTypeSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withNewKeyword(newKeyword: ISyntaxToken): ConstructorTypeSyntax {\n        return this.update(newKeyword, this.typeParameterList, this.parameterList, this.equalsGreaterThanToken, this.type);\n    }\n\n    public withTypeParameterList(typeParameterList: TypeParameterListSyntax): ConstructorTypeSyntax {\n        return this.update(this.newKeyword, typeParameterList, this.parameterList, this.equalsGreaterThanToken, this.type);\n    }\n\n    public withParameterList(parameterList: ParameterListSyntax): ConstructorTypeSyntax {\n        return this.update(this.newKeyword, this.typeParameterList, parameterList, this.equalsGreaterThanToken, this.type);\n    }\n\n    public withEqualsGreaterThanToken(equalsGreaterThanToken: ISyntaxToken): ConstructorTypeSyntax {\n        return this.update(this.newKeyword, this.typeParameterList, this.parameterList, equalsGreaterThanToken, this.type);\n    }\n\n    public withType(type: ITypeSyntax): ConstructorTypeSyntax {\n        return this.update(this.newKeyword, this.typeParameterList, this.parameterList, this.equalsGreaterThanToken, type);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class FunctionTypeSyntax extends SyntaxNode implements ITypeSyntax {\n\n        constructor(public typeParameterList: TypeParameterListSyntax,\n                    public parameterList: ParameterListSyntax,\n                    public equalsGreaterThanToken: ISyntaxToken,\n                    public type: ITypeSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitFunctionType(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.FunctionType;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.typeParameterList;\n            case 1: return this.parameterList;\n            case 2: return this.equalsGreaterThanToken;\n            case 3: return this.type;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isType(): boolean {\n        return true;\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(typeParameterList: TypeParameterListSyntax,\n                  parameterList: ParameterListSyntax,\n                  equalsGreaterThanToken: ISyntaxToken,\n                  type: ITypeSyntax): FunctionTypeSyntax {\n        if (this.typeParameterList === typeParameterList && this.parameterList === parameterList && this.equalsGreaterThanToken === equalsGreaterThanToken && this.type === type) {\n            return this;\n        }\n\n        return new FunctionTypeSyntax(typeParameterList, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(parameterList: ParameterListSyntax,\n                         equalsGreaterThanToken: ISyntaxToken,\n                         type: ITypeSyntax): FunctionTypeSyntax {\n        return new FunctionTypeSyntax(null, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(type: ITypeSyntax): FunctionTypeSyntax {\n        return new FunctionTypeSyntax(null, ParameterListSyntax.create1(), Syntax.token(SyntaxKind.EqualsGreaterThanToken), type, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): FunctionTypeSyntax {\n        return <FunctionTypeSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): FunctionTypeSyntax {\n        return <FunctionTypeSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withTypeParameterList(typeParameterList: TypeParameterListSyntax): FunctionTypeSyntax {\n        return this.update(typeParameterList, this.parameterList, this.equalsGreaterThanToken, this.type);\n    }\n\n    public withParameterList(parameterList: ParameterListSyntax): FunctionTypeSyntax {\n        return this.update(this.typeParameterList, parameterList, this.equalsGreaterThanToken, this.type);\n    }\n\n    public withEqualsGreaterThanToken(equalsGreaterThanToken: ISyntaxToken): FunctionTypeSyntax {\n        return this.update(this.typeParameterList, this.parameterList, equalsGreaterThanToken, this.type);\n    }\n\n    public withType(type: ITypeSyntax): FunctionTypeSyntax {\n        return this.update(this.typeParameterList, this.parameterList, this.equalsGreaterThanToken, type);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ObjectTypeSyntax extends SyntaxNode implements ITypeSyntax {\n\n        constructor(public openBraceToken: ISyntaxToken,\n                    public typeMembers: ISeparatedSyntaxList,\n                    public closeBraceToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitObjectType(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ObjectType;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openBraceToken;\n            case 1: return this.typeMembers;\n            case 2: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isType(): boolean {\n        return true;\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(openBraceToken: ISyntaxToken,\n                  typeMembers: ISeparatedSyntaxList,\n                  closeBraceToken: ISyntaxToken): ObjectTypeSyntax {\n        if (this.openBraceToken === openBraceToken && this.typeMembers === typeMembers && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new ObjectTypeSyntax(openBraceToken, typeMembers, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): ObjectTypeSyntax {\n        return new ObjectTypeSyntax(openBraceToken, Syntax.emptySeparatedList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ObjectTypeSyntax {\n        return new ObjectTypeSyntax(Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ObjectTypeSyntax {\n        return <ObjectTypeSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ObjectTypeSyntax {\n        return <ObjectTypeSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): ObjectTypeSyntax {\n        return this.update(openBraceToken, this.typeMembers, this.closeBraceToken);\n    }\n\n    public withTypeMembers(typeMembers: ISeparatedSyntaxList): ObjectTypeSyntax {\n        return this.update(this.openBraceToken, typeMembers, this.closeBraceToken);\n    }\n\n    public withTypeMember(typeMember: ITypeMemberSyntax): ObjectTypeSyntax {\n        return this.withTypeMembers(Syntax.separatedList([typeMember]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): ObjectTypeSyntax {\n        return this.update(this.openBraceToken, this.typeMembers, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ArrayTypeSyntax extends SyntaxNode implements ITypeSyntax {\n\n        constructor(public type: ITypeSyntax,\n                    public openBracketToken: ISyntaxToken,\n                    public closeBracketToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitArrayType(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ArrayType;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.type;\n            case 1: return this.openBracketToken;\n            case 2: return this.closeBracketToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isType(): boolean {\n        return true;\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(type: ITypeSyntax,\n                  openBracketToken: ISyntaxToken,\n                  closeBracketToken: ISyntaxToken): ArrayTypeSyntax {\n        if (this.type === type && this.openBracketToken === openBracketToken && this.closeBracketToken === closeBracketToken) {\n            return this;\n        }\n\n        return new ArrayTypeSyntax(type, openBracketToken, closeBracketToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(type: ITypeSyntax): ArrayTypeSyntax {\n        return new ArrayTypeSyntax(type, Syntax.token(SyntaxKind.OpenBracketToken), Syntax.token(SyntaxKind.CloseBracketToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ArrayTypeSyntax {\n        return <ArrayTypeSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ArrayTypeSyntax {\n        return <ArrayTypeSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withType(type: ITypeSyntax): ArrayTypeSyntax {\n        return this.update(type, this.openBracketToken, this.closeBracketToken);\n    }\n\n    public withOpenBracketToken(openBracketToken: ISyntaxToken): ArrayTypeSyntax {\n        return this.update(this.type, openBracketToken, this.closeBracketToken);\n    }\n\n    public withCloseBracketToken(closeBracketToken: ISyntaxToken): ArrayTypeSyntax {\n        return this.update(this.type, this.openBracketToken, closeBracketToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class GenericTypeSyntax extends SyntaxNode implements ITypeSyntax {\n\n        constructor(public name: INameSyntax,\n                    public typeArgumentList: TypeArgumentListSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitGenericType(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.GenericType;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.name;\n            case 1: return this.typeArgumentList;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isType(): boolean {\n        return true;\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(name: INameSyntax,\n                  typeArgumentList: TypeArgumentListSyntax): GenericTypeSyntax {\n        if (this.name === name && this.typeArgumentList === typeArgumentList) {\n            return this;\n        }\n\n        return new GenericTypeSyntax(name, typeArgumentList, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(name: INameSyntax): GenericTypeSyntax {\n        return new GenericTypeSyntax(name, TypeArgumentListSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): GenericTypeSyntax {\n        return <GenericTypeSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): GenericTypeSyntax {\n        return <GenericTypeSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withName(name: INameSyntax): GenericTypeSyntax {\n        return this.update(name, this.typeArgumentList);\n    }\n\n    public withTypeArgumentList(typeArgumentList: TypeArgumentListSyntax): GenericTypeSyntax {\n        return this.update(this.name, typeArgumentList);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class TypeAnnotationSyntax extends SyntaxNode {\n\n        constructor(public colonToken: ISyntaxToken,\n                    public type: ITypeSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitTypeAnnotation(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.TypeAnnotation;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.colonToken;\n            case 1: return this.type;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(colonToken: ISyntaxToken,\n                  type: ITypeSyntax): TypeAnnotationSyntax {\n        if (this.colonToken === colonToken && this.type === type) {\n            return this;\n        }\n\n        return new TypeAnnotationSyntax(colonToken, type, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(type: ITypeSyntax): TypeAnnotationSyntax {\n        return new TypeAnnotationSyntax(Syntax.token(SyntaxKind.ColonToken), type, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): TypeAnnotationSyntax {\n        return <TypeAnnotationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): TypeAnnotationSyntax {\n        return <TypeAnnotationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withColonToken(colonToken: ISyntaxToken): TypeAnnotationSyntax {\n        return this.update(colonToken, this.type);\n    }\n\n    public withType(type: ITypeSyntax): TypeAnnotationSyntax {\n        return this.update(this.colonToken, type);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class BlockSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public openBraceToken: ISyntaxToken,\n                    public statements: ISyntaxList,\n                    public closeBraceToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitBlock(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.Block;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openBraceToken;\n            case 1: return this.statements;\n            case 2: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(openBraceToken: ISyntaxToken,\n                  statements: ISyntaxList,\n                  closeBraceToken: ISyntaxToken): BlockSyntax {\n        if (this.openBraceToken === openBraceToken && this.statements === statements && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new BlockSyntax(openBraceToken, statements, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): BlockSyntax {\n        return new BlockSyntax(openBraceToken, Syntax.emptyList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): BlockSyntax {\n        return new BlockSyntax(Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptyList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): BlockSyntax {\n        return <BlockSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): BlockSyntax {\n        return <BlockSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): BlockSyntax {\n        return this.update(openBraceToken, this.statements, this.closeBraceToken);\n    }\n\n    public withStatements(statements: ISyntaxList): BlockSyntax {\n        return this.update(this.openBraceToken, statements, this.closeBraceToken);\n    }\n\n    public withStatement(statement: IStatementSyntax): BlockSyntax {\n        return this.withStatements(Syntax.list([statement]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): BlockSyntax {\n        return this.update(this.openBraceToken, this.statements, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.statements.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ParameterSyntax extends SyntaxNode {\n\n        constructor(public dotDotDotToken: ISyntaxToken,\n                    public publicOrPrivateKeyword: ISyntaxToken,\n                    public identifier: ISyntaxToken,\n                    public questionToken: ISyntaxToken,\n                    public typeAnnotation: TypeAnnotationSyntax,\n                    public equalsValueClause: EqualsValueClauseSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitParameter(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.Parameter;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.dotDotDotToken;\n            case 1: return this.publicOrPrivateKeyword;\n            case 2: return this.identifier;\n            case 3: return this.questionToken;\n            case 4: return this.typeAnnotation;\n            case 5: return this.equalsValueClause;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(dotDotDotToken: ISyntaxToken,\n                  publicOrPrivateKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  questionToken: ISyntaxToken,\n                  typeAnnotation: TypeAnnotationSyntax,\n                  equalsValueClause: EqualsValueClauseSyntax): ParameterSyntax {\n        if (this.dotDotDotToken === dotDotDotToken && this.publicOrPrivateKeyword === publicOrPrivateKeyword && this.identifier === identifier && this.questionToken === questionToken && this.typeAnnotation === typeAnnotation && this.equalsValueClause === equalsValueClause) {\n            return this;\n        }\n\n        return new ParameterSyntax(dotDotDotToken, publicOrPrivateKeyword, identifier, questionToken, typeAnnotation, equalsValueClause, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(identifier: ISyntaxToken): ParameterSyntax {\n        return new ParameterSyntax(null, null, identifier, null, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): ParameterSyntax {\n        return new ParameterSyntax(null, null, identifier, null, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ParameterSyntax {\n        return <ParameterSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ParameterSyntax {\n        return <ParameterSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withDotDotDotToken(dotDotDotToken: ISyntaxToken): ParameterSyntax {\n        return this.update(dotDotDotToken, this.publicOrPrivateKeyword, this.identifier, this.questionToken, this.typeAnnotation, this.equalsValueClause);\n    }\n\n    public withPublicOrPrivateKeyword(publicOrPrivateKeyword: ISyntaxToken): ParameterSyntax {\n        return this.update(this.dotDotDotToken, publicOrPrivateKeyword, this.identifier, this.questionToken, this.typeAnnotation, this.equalsValueClause);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): ParameterSyntax {\n        return this.update(this.dotDotDotToken, this.publicOrPrivateKeyword, identifier, this.questionToken, this.typeAnnotation, this.equalsValueClause);\n    }\n\n    public withQuestionToken(questionToken: ISyntaxToken): ParameterSyntax {\n        return this.update(this.dotDotDotToken, this.publicOrPrivateKeyword, this.identifier, questionToken, this.typeAnnotation, this.equalsValueClause);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): ParameterSyntax {\n        return this.update(this.dotDotDotToken, this.publicOrPrivateKeyword, this.identifier, this.questionToken, typeAnnotation, this.equalsValueClause);\n    }\n\n    public withEqualsValueClause(equalsValueClause: EqualsValueClauseSyntax): ParameterSyntax {\n        return this.update(this.dotDotDotToken, this.publicOrPrivateKeyword, this.identifier, this.questionToken, this.typeAnnotation, equalsValueClause);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.dotDotDotToken !== null) { return true; }\n        if (this.publicOrPrivateKeyword !== null) { return true; }\n        if (this.questionToken !== null) { return true; }\n        if (this.typeAnnotation !== null) { return true; }\n        if (this.equalsValueClause !== null) { return true; }\n        return false;\n    }\n    }\n\n    export class MemberAccessExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n        constructor(public expression: IExpressionSyntax,\n                    public dotToken: ISyntaxToken,\n                    public name: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitMemberAccessExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.MemberAccessExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.expression;\n            case 1: return this.dotToken;\n            case 2: return this.name;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(expression: IExpressionSyntax,\n                  dotToken: ISyntaxToken,\n                  name: ISyntaxToken): MemberAccessExpressionSyntax {\n        if (this.expression === expression && this.dotToken === dotToken && this.name === name) {\n            return this;\n        }\n\n        return new MemberAccessExpressionSyntax(expression, dotToken, name, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax,\n                          name: ISyntaxToken): MemberAccessExpressionSyntax {\n        return new MemberAccessExpressionSyntax(expression, Syntax.token(SyntaxKind.DotToken), name, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): MemberAccessExpressionSyntax {\n        return <MemberAccessExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): MemberAccessExpressionSyntax {\n        return <MemberAccessExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExpression(expression: IExpressionSyntax): MemberAccessExpressionSyntax {\n        return this.update(expression, this.dotToken, this.name);\n    }\n\n    public withDotToken(dotToken: ISyntaxToken): MemberAccessExpressionSyntax {\n        return this.update(this.expression, dotToken, this.name);\n    }\n\n    public withName(name: ISyntaxToken): MemberAccessExpressionSyntax {\n        return this.update(this.expression, this.dotToken, name);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class PostfixUnaryExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n    private _kind: SyntaxKind;\n\n        constructor(kind: SyntaxKind,\n                    public operand: IExpressionSyntax,\n                    public operatorToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n            this._kind = kind;\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitPostfixUnaryExpression(this);\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.operand;\n            case 1: return this.operatorToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public kind(): SyntaxKind {\n        return this._kind;\n    }\n\n    public update(kind: SyntaxKind,\n                  operand: IExpressionSyntax,\n                  operatorToken: ISyntaxToken): PostfixUnaryExpressionSyntax {\n        if (this._kind === kind && this.operand === operand && this.operatorToken === operatorToken) {\n            return this;\n        }\n\n        return new PostfixUnaryExpressionSyntax(kind, operand, operatorToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): PostfixUnaryExpressionSyntax {\n        return <PostfixUnaryExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): PostfixUnaryExpressionSyntax {\n        return <PostfixUnaryExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withKind(kind: SyntaxKind): PostfixUnaryExpressionSyntax {\n        return this.update(kind, this.operand, this.operatorToken);\n    }\n\n    public withOperand(operand: IExpressionSyntax): PostfixUnaryExpressionSyntax {\n        return this.update(this._kind, operand, this.operatorToken);\n    }\n\n    public withOperatorToken(operatorToken: ISyntaxToken): PostfixUnaryExpressionSyntax {\n        return this.update(this._kind, this.operand, operatorToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.operand.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ElementAccessExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n        constructor(public expression: IExpressionSyntax,\n                    public openBracketToken: ISyntaxToken,\n                    public argumentExpression: IExpressionSyntax,\n                    public closeBracketToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitElementAccessExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ElementAccessExpression;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.expression;\n            case 1: return this.openBracketToken;\n            case 2: return this.argumentExpression;\n            case 3: return this.closeBracketToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(expression: IExpressionSyntax,\n                  openBracketToken: ISyntaxToken,\n                  argumentExpression: IExpressionSyntax,\n                  closeBracketToken: ISyntaxToken): ElementAccessExpressionSyntax {\n        if (this.expression === expression && this.openBracketToken === openBracketToken && this.argumentExpression === argumentExpression && this.closeBracketToken === closeBracketToken) {\n            return this;\n        }\n\n        return new ElementAccessExpressionSyntax(expression, openBracketToken, argumentExpression, closeBracketToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax,\n                          argumentExpression: IExpressionSyntax): ElementAccessExpressionSyntax {\n        return new ElementAccessExpressionSyntax(expression, Syntax.token(SyntaxKind.OpenBracketToken), argumentExpression, Syntax.token(SyntaxKind.CloseBracketToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ElementAccessExpressionSyntax {\n        return <ElementAccessExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ElementAccessExpressionSyntax {\n        return <ElementAccessExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ElementAccessExpressionSyntax {\n        return this.update(expression, this.openBracketToken, this.argumentExpression, this.closeBracketToken);\n    }\n\n    public withOpenBracketToken(openBracketToken: ISyntaxToken): ElementAccessExpressionSyntax {\n        return this.update(this.expression, openBracketToken, this.argumentExpression, this.closeBracketToken);\n    }\n\n    public withArgumentExpression(argumentExpression: IExpressionSyntax): ElementAccessExpressionSyntax {\n        return this.update(this.expression, this.openBracketToken, argumentExpression, this.closeBracketToken);\n    }\n\n    public withCloseBracketToken(closeBracketToken: ISyntaxToken): ElementAccessExpressionSyntax {\n        return this.update(this.expression, this.openBracketToken, this.argumentExpression, closeBracketToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        if (this.argumentExpression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class InvocationExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n        constructor(public expression: IExpressionSyntax,\n                    public argumentList: ArgumentListSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitInvocationExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.InvocationExpression;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.expression;\n            case 1: return this.argumentList;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(expression: IExpressionSyntax,\n                  argumentList: ArgumentListSyntax): InvocationExpressionSyntax {\n        if (this.expression === expression && this.argumentList === argumentList) {\n            return this;\n        }\n\n        return new InvocationExpressionSyntax(expression, argumentList, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): InvocationExpressionSyntax {\n        return new InvocationExpressionSyntax(expression, ArgumentListSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): InvocationExpressionSyntax {\n        return <InvocationExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): InvocationExpressionSyntax {\n        return <InvocationExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExpression(expression: IExpressionSyntax): InvocationExpressionSyntax {\n        return this.update(expression, this.argumentList);\n    }\n\n    public withArgumentList(argumentList: ArgumentListSyntax): InvocationExpressionSyntax {\n        return this.update(this.expression, argumentList);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        if (this.argumentList.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ArgumentListSyntax extends SyntaxNode {\n\n        constructor(public typeArgumentList: TypeArgumentListSyntax,\n                    public openParenToken: ISyntaxToken,\n                    public arguments: ISeparatedSyntaxList,\n                    public closeParenToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitArgumentList(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ArgumentList;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.typeArgumentList;\n            case 1: return this.openParenToken;\n            case 2: return this.arguments;\n            case 3: return this.closeParenToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(typeArgumentList: TypeArgumentListSyntax,\n                  openParenToken: ISyntaxToken,\n                  _arguments: ISeparatedSyntaxList,\n                  closeParenToken: ISyntaxToken): ArgumentListSyntax {\n        if (this.typeArgumentList === typeArgumentList && this.openParenToken === openParenToken && this.arguments === _arguments && this.closeParenToken === closeParenToken) {\n            return this;\n        }\n\n        return new ArgumentListSyntax(typeArgumentList, openParenToken, _arguments, closeParenToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openParenToken: ISyntaxToken,\n                         closeParenToken: ISyntaxToken): ArgumentListSyntax {\n        return new ArgumentListSyntax(null, openParenToken, Syntax.emptySeparatedList, closeParenToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ArgumentListSyntax {\n        return new ArgumentListSyntax(null, Syntax.token(SyntaxKind.OpenParenToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.CloseParenToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ArgumentListSyntax {\n        return <ArgumentListSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ArgumentListSyntax {\n        return <ArgumentListSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withTypeArgumentList(typeArgumentList: TypeArgumentListSyntax): ArgumentListSyntax {\n        return this.update(typeArgumentList, this.openParenToken, this.arguments, this.closeParenToken);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): ArgumentListSyntax {\n        return this.update(this.typeArgumentList, openParenToken, this.arguments, this.closeParenToken);\n    }\n\n    public withArguments(_arguments: ISeparatedSyntaxList): ArgumentListSyntax {\n        return this.update(this.typeArgumentList, this.openParenToken, _arguments, this.closeParenToken);\n    }\n\n    public withArgument(_argument: IExpressionSyntax): ArgumentListSyntax {\n        return this.withArguments(Syntax.separatedList([_argument]));\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): ArgumentListSyntax {\n        return this.update(this.typeArgumentList, this.openParenToken, this.arguments, closeParenToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.typeArgumentList !== null && this.typeArgumentList.isTypeScriptSpecific()) { return true; }\n        if (this.arguments.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class BinaryExpressionSyntax extends SyntaxNode implements IExpressionSyntax {\n    private _kind: SyntaxKind;\n\n        constructor(kind: SyntaxKind,\n                    public left: IExpressionSyntax,\n                    public operatorToken: ISyntaxToken,\n                    public right: IExpressionSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n            this._kind = kind;\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitBinaryExpression(this);\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.left;\n            case 1: return this.operatorToken;\n            case 2: return this.right;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public kind(): SyntaxKind {\n        return this._kind;\n    }\n\n    public update(kind: SyntaxKind,\n                  left: IExpressionSyntax,\n                  operatorToken: ISyntaxToken,\n                  right: IExpressionSyntax): BinaryExpressionSyntax {\n        if (this._kind === kind && this.left === left && this.operatorToken === operatorToken && this.right === right) {\n            return this;\n        }\n\n        return new BinaryExpressionSyntax(kind, left, operatorToken, right, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): BinaryExpressionSyntax {\n        return <BinaryExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): BinaryExpressionSyntax {\n        return <BinaryExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withKind(kind: SyntaxKind): BinaryExpressionSyntax {\n        return this.update(kind, this.left, this.operatorToken, this.right);\n    }\n\n    public withLeft(left: IExpressionSyntax): BinaryExpressionSyntax {\n        return this.update(this._kind, left, this.operatorToken, this.right);\n    }\n\n    public withOperatorToken(operatorToken: ISyntaxToken): BinaryExpressionSyntax {\n        return this.update(this._kind, this.left, operatorToken, this.right);\n    }\n\n    public withRight(right: IExpressionSyntax): BinaryExpressionSyntax {\n        return this.update(this._kind, this.left, this.operatorToken, right);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.left.isTypeScriptSpecific()) { return true; }\n        if (this.right.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ConditionalExpressionSyntax extends SyntaxNode implements IExpressionSyntax {\n\n        constructor(public condition: IExpressionSyntax,\n                    public questionToken: ISyntaxToken,\n                    public whenTrue: IExpressionSyntax,\n                    public colonToken: ISyntaxToken,\n                    public whenFalse: IExpressionSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitConditionalExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ConditionalExpression;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.condition;\n            case 1: return this.questionToken;\n            case 2: return this.whenTrue;\n            case 3: return this.colonToken;\n            case 4: return this.whenFalse;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(condition: IExpressionSyntax,\n                  questionToken: ISyntaxToken,\n                  whenTrue: IExpressionSyntax,\n                  colonToken: ISyntaxToken,\n                  whenFalse: IExpressionSyntax): ConditionalExpressionSyntax {\n        if (this.condition === condition && this.questionToken === questionToken && this.whenTrue === whenTrue && this.colonToken === colonToken && this.whenFalse === whenFalse) {\n            return this;\n        }\n\n        return new ConditionalExpressionSyntax(condition, questionToken, whenTrue, colonToken, whenFalse, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(condition: IExpressionSyntax,\n                          whenTrue: IExpressionSyntax,\n                          whenFalse: IExpressionSyntax): ConditionalExpressionSyntax {\n        return new ConditionalExpressionSyntax(condition, Syntax.token(SyntaxKind.QuestionToken), whenTrue, Syntax.token(SyntaxKind.ColonToken), whenFalse, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ConditionalExpressionSyntax {\n        return <ConditionalExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ConditionalExpressionSyntax {\n        return <ConditionalExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withCondition(condition: IExpressionSyntax): ConditionalExpressionSyntax {\n        return this.update(condition, this.questionToken, this.whenTrue, this.colonToken, this.whenFalse);\n    }\n\n    public withQuestionToken(questionToken: ISyntaxToken): ConditionalExpressionSyntax {\n        return this.update(this.condition, questionToken, this.whenTrue, this.colonToken, this.whenFalse);\n    }\n\n    public withWhenTrue(whenTrue: IExpressionSyntax): ConditionalExpressionSyntax {\n        return this.update(this.condition, this.questionToken, whenTrue, this.colonToken, this.whenFalse);\n    }\n\n    public withColonToken(colonToken: ISyntaxToken): ConditionalExpressionSyntax {\n        return this.update(this.condition, this.questionToken, this.whenTrue, colonToken, this.whenFalse);\n    }\n\n    public withWhenFalse(whenFalse: IExpressionSyntax): ConditionalExpressionSyntax {\n        return this.update(this.condition, this.questionToken, this.whenTrue, this.colonToken, whenFalse);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.condition.isTypeScriptSpecific()) { return true; }\n        if (this.whenTrue.isTypeScriptSpecific()) { return true; }\n        if (this.whenFalse.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ConstructSignatureSyntax extends SyntaxNode implements ITypeMemberSyntax {\n\n        constructor(public newKeyword: ISyntaxToken,\n                    public callSignature: CallSignatureSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitConstructSignature(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ConstructSignature;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.newKeyword;\n            case 1: return this.callSignature;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isTypeMember(): boolean {\n        return true;\n    }\n\n    public update(newKeyword: ISyntaxToken,\n                  callSignature: CallSignatureSyntax): ConstructSignatureSyntax {\n        if (this.newKeyword === newKeyword && this.callSignature === callSignature) {\n            return this;\n        }\n\n        return new ConstructSignatureSyntax(newKeyword, callSignature, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(): ConstructSignatureSyntax {\n        return new ConstructSignatureSyntax(Syntax.token(SyntaxKind.NewKeyword), CallSignatureSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ConstructSignatureSyntax {\n        return <ConstructSignatureSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ConstructSignatureSyntax {\n        return <ConstructSignatureSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withNewKeyword(newKeyword: ISyntaxToken): ConstructSignatureSyntax {\n        return this.update(newKeyword, this.callSignature);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): ConstructSignatureSyntax {\n        return this.update(this.newKeyword, callSignature);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class MethodSignatureSyntax extends SyntaxNode implements ITypeMemberSyntax {\n\n        constructor(public propertyName: ISyntaxToken,\n                    public questionToken: ISyntaxToken,\n                    public callSignature: CallSignatureSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitMethodSignature(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.MethodSignature;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.propertyName;\n            case 1: return this.questionToken;\n            case 2: return this.callSignature;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isTypeMember(): boolean {\n        return true;\n    }\n\n    public update(propertyName: ISyntaxToken,\n                  questionToken: ISyntaxToken,\n                  callSignature: CallSignatureSyntax): MethodSignatureSyntax {\n        if (this.propertyName === propertyName && this.questionToken === questionToken && this.callSignature === callSignature) {\n            return this;\n        }\n\n        return new MethodSignatureSyntax(propertyName, questionToken, callSignature, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(propertyName: ISyntaxToken,\n                         callSignature: CallSignatureSyntax): MethodSignatureSyntax {\n        return new MethodSignatureSyntax(propertyName, null, callSignature, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): MethodSignatureSyntax {\n        return new MethodSignatureSyntax(propertyName, null, CallSignatureSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): MethodSignatureSyntax {\n        return <MethodSignatureSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): MethodSignatureSyntax {\n        return <MethodSignatureSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): MethodSignatureSyntax {\n        return this.update(propertyName, this.questionToken, this.callSignature);\n    }\n\n    public withQuestionToken(questionToken: ISyntaxToken): MethodSignatureSyntax {\n        return this.update(this.propertyName, questionToken, this.callSignature);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): MethodSignatureSyntax {\n        return this.update(this.propertyName, this.questionToken, callSignature);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.callSignature.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class IndexSignatureSyntax extends SyntaxNode implements ITypeMemberSyntax, IClassElementSyntax {\n\n        constructor(public openBracketToken: ISyntaxToken,\n                    public parameter: ParameterSyntax,\n                    public closeBracketToken: ISyntaxToken,\n                    public typeAnnotation: TypeAnnotationSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitIndexSignature(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.IndexSignature;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openBracketToken;\n            case 1: return this.parameter;\n            case 2: return this.closeBracketToken;\n            case 3: return this.typeAnnotation;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isTypeMember(): boolean {\n        return true;\n    }\n\n    public isClassElement(): boolean {\n        return true;\n    }\n\n    public update(openBracketToken: ISyntaxToken,\n                  parameter: ParameterSyntax,\n                  closeBracketToken: ISyntaxToken,\n                  typeAnnotation: TypeAnnotationSyntax): IndexSignatureSyntax {\n        if (this.openBracketToken === openBracketToken && this.parameter === parameter && this.closeBracketToken === closeBracketToken && this.typeAnnotation === typeAnnotation) {\n            return this;\n        }\n\n        return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, typeAnnotation, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openBracketToken: ISyntaxToken,\n                         parameter: ParameterSyntax,\n                         closeBracketToken: ISyntaxToken): IndexSignatureSyntax {\n        return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(parameter: ParameterSyntax): IndexSignatureSyntax {\n        return new IndexSignatureSyntax(Syntax.token(SyntaxKind.OpenBracketToken), parameter, Syntax.token(SyntaxKind.CloseBracketToken), null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): IndexSignatureSyntax {\n        return <IndexSignatureSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): IndexSignatureSyntax {\n        return <IndexSignatureSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenBracketToken(openBracketToken: ISyntaxToken): IndexSignatureSyntax {\n        return this.update(openBracketToken, this.parameter, this.closeBracketToken, this.typeAnnotation);\n    }\n\n    public withParameter(parameter: ParameterSyntax): IndexSignatureSyntax {\n        return this.update(this.openBracketToken, parameter, this.closeBracketToken, this.typeAnnotation);\n    }\n\n    public withCloseBracketToken(closeBracketToken: ISyntaxToken): IndexSignatureSyntax {\n        return this.update(this.openBracketToken, this.parameter, closeBracketToken, this.typeAnnotation);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): IndexSignatureSyntax {\n        return this.update(this.openBracketToken, this.parameter, this.closeBracketToken, typeAnnotation);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class PropertySignatureSyntax extends SyntaxNode implements ITypeMemberSyntax {\n\n        constructor(public propertyName: ISyntaxToken,\n                    public questionToken: ISyntaxToken,\n                    public typeAnnotation: TypeAnnotationSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitPropertySignature(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.PropertySignature;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.propertyName;\n            case 1: return this.questionToken;\n            case 2: return this.typeAnnotation;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isTypeMember(): boolean {\n        return true;\n    }\n\n    public update(propertyName: ISyntaxToken,\n                  questionToken: ISyntaxToken,\n                  typeAnnotation: TypeAnnotationSyntax): PropertySignatureSyntax {\n        if (this.propertyName === propertyName && this.questionToken === questionToken && this.typeAnnotation === typeAnnotation) {\n            return this;\n        }\n\n        return new PropertySignatureSyntax(propertyName, questionToken, typeAnnotation, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(propertyName: ISyntaxToken): PropertySignatureSyntax {\n        return new PropertySignatureSyntax(propertyName, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): PropertySignatureSyntax {\n        return new PropertySignatureSyntax(propertyName, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): PropertySignatureSyntax {\n        return <PropertySignatureSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): PropertySignatureSyntax {\n        return <PropertySignatureSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): PropertySignatureSyntax {\n        return this.update(propertyName, this.questionToken, this.typeAnnotation);\n    }\n\n    public withQuestionToken(questionToken: ISyntaxToken): PropertySignatureSyntax {\n        return this.update(this.propertyName, questionToken, this.typeAnnotation);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): PropertySignatureSyntax {\n        return this.update(this.propertyName, this.questionToken, typeAnnotation);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class CallSignatureSyntax extends SyntaxNode implements ITypeMemberSyntax {\n\n        constructor(public typeParameterList: TypeParameterListSyntax,\n                    public parameterList: ParameterListSyntax,\n                    public typeAnnotation: TypeAnnotationSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitCallSignature(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.CallSignature;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.typeParameterList;\n            case 1: return this.parameterList;\n            case 2: return this.typeAnnotation;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isTypeMember(): boolean {\n        return true;\n    }\n\n    public update(typeParameterList: TypeParameterListSyntax,\n                  parameterList: ParameterListSyntax,\n                  typeAnnotation: TypeAnnotationSyntax): CallSignatureSyntax {\n        if (this.typeParameterList === typeParameterList && this.parameterList === parameterList && this.typeAnnotation === typeAnnotation) {\n            return this;\n        }\n\n        return new CallSignatureSyntax(typeParameterList, parameterList, typeAnnotation, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(parameterList: ParameterListSyntax): CallSignatureSyntax {\n        return new CallSignatureSyntax(null, parameterList, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): CallSignatureSyntax {\n        return new CallSignatureSyntax(null, ParameterListSyntax.create1(), null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): CallSignatureSyntax {\n        return <CallSignatureSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): CallSignatureSyntax {\n        return <CallSignatureSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withTypeParameterList(typeParameterList: TypeParameterListSyntax): CallSignatureSyntax {\n        return this.update(typeParameterList, this.parameterList, this.typeAnnotation);\n    }\n\n    public withParameterList(parameterList: ParameterListSyntax): CallSignatureSyntax {\n        return this.update(this.typeParameterList, parameterList, this.typeAnnotation);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): CallSignatureSyntax {\n        return this.update(this.typeParameterList, this.parameterList, typeAnnotation);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.typeParameterList !== null) { return true; }\n        if (this.parameterList.isTypeScriptSpecific()) { return true; }\n        if (this.typeAnnotation !== null) { return true; }\n        return false;\n    }\n    }\n\n    export class ParameterListSyntax extends SyntaxNode {\n\n        constructor(public openParenToken: ISyntaxToken,\n                    public parameters: ISeparatedSyntaxList,\n                    public closeParenToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitParameterList(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ParameterList;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openParenToken;\n            case 1: return this.parameters;\n            case 2: return this.closeParenToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(openParenToken: ISyntaxToken,\n                  parameters: ISeparatedSyntaxList,\n                  closeParenToken: ISyntaxToken): ParameterListSyntax {\n        if (this.openParenToken === openParenToken && this.parameters === parameters && this.closeParenToken === closeParenToken) {\n            return this;\n        }\n\n        return new ParameterListSyntax(openParenToken, parameters, closeParenToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openParenToken: ISyntaxToken,\n                         closeParenToken: ISyntaxToken): ParameterListSyntax {\n        return new ParameterListSyntax(openParenToken, Syntax.emptySeparatedList, closeParenToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ParameterListSyntax {\n        return new ParameterListSyntax(Syntax.token(SyntaxKind.OpenParenToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.CloseParenToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ParameterListSyntax {\n        return <ParameterListSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ParameterListSyntax {\n        return <ParameterListSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): ParameterListSyntax {\n        return this.update(openParenToken, this.parameters, this.closeParenToken);\n    }\n\n    public withParameters(parameters: ISeparatedSyntaxList): ParameterListSyntax {\n        return this.update(this.openParenToken, parameters, this.closeParenToken);\n    }\n\n    public withParameter(parameter: ParameterSyntax): ParameterListSyntax {\n        return this.withParameters(Syntax.separatedList([parameter]));\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): ParameterListSyntax {\n        return this.update(this.openParenToken, this.parameters, closeParenToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.parameters.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class TypeParameterListSyntax extends SyntaxNode {\n\n        constructor(public lessThanToken: ISyntaxToken,\n                    public typeParameters: ISeparatedSyntaxList,\n                    public greaterThanToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitTypeParameterList(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.TypeParameterList;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.lessThanToken;\n            case 1: return this.typeParameters;\n            case 2: return this.greaterThanToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(lessThanToken: ISyntaxToken,\n                  typeParameters: ISeparatedSyntaxList,\n                  greaterThanToken: ISyntaxToken): TypeParameterListSyntax {\n        if (this.lessThanToken === lessThanToken && this.typeParameters === typeParameters && this.greaterThanToken === greaterThanToken) {\n            return this;\n        }\n\n        return new TypeParameterListSyntax(lessThanToken, typeParameters, greaterThanToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(lessThanToken: ISyntaxToken,\n                         greaterThanToken: ISyntaxToken): TypeParameterListSyntax {\n        return new TypeParameterListSyntax(lessThanToken, Syntax.emptySeparatedList, greaterThanToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): TypeParameterListSyntax {\n        return new TypeParameterListSyntax(Syntax.token(SyntaxKind.LessThanToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.GreaterThanToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): TypeParameterListSyntax {\n        return <TypeParameterListSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): TypeParameterListSyntax {\n        return <TypeParameterListSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withLessThanToken(lessThanToken: ISyntaxToken): TypeParameterListSyntax {\n        return this.update(lessThanToken, this.typeParameters, this.greaterThanToken);\n    }\n\n    public withTypeParameters(typeParameters: ISeparatedSyntaxList): TypeParameterListSyntax {\n        return this.update(this.lessThanToken, typeParameters, this.greaterThanToken);\n    }\n\n    public withTypeParameter(typeParameter: TypeParameterSyntax): TypeParameterListSyntax {\n        return this.withTypeParameters(Syntax.separatedList([typeParameter]));\n    }\n\n    public withGreaterThanToken(greaterThanToken: ISyntaxToken): TypeParameterListSyntax {\n        return this.update(this.lessThanToken, this.typeParameters, greaterThanToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class TypeParameterSyntax extends SyntaxNode {\n\n        constructor(public identifier: ISyntaxToken,\n                    public constraint: ConstraintSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitTypeParameter(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.TypeParameter;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.identifier;\n            case 1: return this.constraint;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(identifier: ISyntaxToken,\n                  constraint: ConstraintSyntax): TypeParameterSyntax {\n        if (this.identifier === identifier && this.constraint === constraint) {\n            return this;\n        }\n\n        return new TypeParameterSyntax(identifier, constraint, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(identifier: ISyntaxToken): TypeParameterSyntax {\n        return new TypeParameterSyntax(identifier, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): TypeParameterSyntax {\n        return new TypeParameterSyntax(identifier, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): TypeParameterSyntax {\n        return <TypeParameterSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): TypeParameterSyntax {\n        return <TypeParameterSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): TypeParameterSyntax {\n        return this.update(identifier, this.constraint);\n    }\n\n    public withConstraint(constraint: ConstraintSyntax): TypeParameterSyntax {\n        return this.update(this.identifier, constraint);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ConstraintSyntax extends SyntaxNode {\n\n        constructor(public extendsKeyword: ISyntaxToken,\n                    public type: ITypeSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitConstraint(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.Constraint;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.extendsKeyword;\n            case 1: return this.type;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(extendsKeyword: ISyntaxToken,\n                  type: ITypeSyntax): ConstraintSyntax {\n        if (this.extendsKeyword === extendsKeyword && this.type === type) {\n            return this;\n        }\n\n        return new ConstraintSyntax(extendsKeyword, type, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(type: ITypeSyntax): ConstraintSyntax {\n        return new ConstraintSyntax(Syntax.token(SyntaxKind.ExtendsKeyword), type, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ConstraintSyntax {\n        return <ConstraintSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ConstraintSyntax {\n        return <ConstraintSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExtendsKeyword(extendsKeyword: ISyntaxToken): ConstraintSyntax {\n        return this.update(extendsKeyword, this.type);\n    }\n\n    public withType(type: ITypeSyntax): ConstraintSyntax {\n        return this.update(this.extendsKeyword, type);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ElseClauseSyntax extends SyntaxNode {\n\n        constructor(public elseKeyword: ISyntaxToken,\n                    public statement: IStatementSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitElseClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ElseClause;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.elseKeyword;\n            case 1: return this.statement;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(elseKeyword: ISyntaxToken,\n                  statement: IStatementSyntax): ElseClauseSyntax {\n        if (this.elseKeyword === elseKeyword && this.statement === statement) {\n            return this;\n        }\n\n        return new ElseClauseSyntax(elseKeyword, statement, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(statement: IStatementSyntax): ElseClauseSyntax {\n        return new ElseClauseSyntax(Syntax.token(SyntaxKind.ElseKeyword), statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ElseClauseSyntax {\n        return <ElseClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ElseClauseSyntax {\n        return <ElseClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withElseKeyword(elseKeyword: ISyntaxToken): ElseClauseSyntax {\n        return this.update(elseKeyword, this.statement);\n    }\n\n    public withStatement(statement: IStatementSyntax): ElseClauseSyntax {\n        return this.update(this.elseKeyword, statement);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class IfStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public ifKeyword: ISyntaxToken,\n                    public openParenToken: ISyntaxToken,\n                    public condition: IExpressionSyntax,\n                    public closeParenToken: ISyntaxToken,\n                    public statement: IStatementSyntax,\n                    public elseClause: ElseClauseSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitIfStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.IfStatement;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.ifKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.condition;\n            case 3: return this.closeParenToken;\n            case 4: return this.statement;\n            case 5: return this.elseClause;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(ifKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  condition: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  statement: IStatementSyntax,\n                  elseClause: ElseClauseSyntax): IfStatementSyntax {\n        if (this.ifKeyword === ifKeyword && this.openParenToken === openParenToken && this.condition === condition && this.closeParenToken === closeParenToken && this.statement === statement && this.elseClause === elseClause) {\n            return this;\n        }\n\n        return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(ifKeyword: ISyntaxToken,\n                         openParenToken: ISyntaxToken,\n                         condition: IExpressionSyntax,\n                         closeParenToken: ISyntaxToken,\n                         statement: IStatementSyntax): IfStatementSyntax {\n        return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(condition: IExpressionSyntax,\n                          statement: IStatementSyntax): IfStatementSyntax {\n        return new IfStatementSyntax(Syntax.token(SyntaxKind.IfKeyword), Syntax.token(SyntaxKind.OpenParenToken), condition, Syntax.token(SyntaxKind.CloseParenToken), statement, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): IfStatementSyntax {\n        return <IfStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): IfStatementSyntax {\n        return <IfStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withIfKeyword(ifKeyword: ISyntaxToken): IfStatementSyntax {\n        return this.update(ifKeyword, this.openParenToken, this.condition, this.closeParenToken, this.statement, this.elseClause);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): IfStatementSyntax {\n        return this.update(this.ifKeyword, openParenToken, this.condition, this.closeParenToken, this.statement, this.elseClause);\n    }\n\n    public withCondition(condition: IExpressionSyntax): IfStatementSyntax {\n        return this.update(this.ifKeyword, this.openParenToken, condition, this.closeParenToken, this.statement, this.elseClause);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): IfStatementSyntax {\n        return this.update(this.ifKeyword, this.openParenToken, this.condition, closeParenToken, this.statement, this.elseClause);\n    }\n\n    public withStatement(statement: IStatementSyntax): IfStatementSyntax {\n        return this.update(this.ifKeyword, this.openParenToken, this.condition, this.closeParenToken, statement, this.elseClause);\n    }\n\n    public withElseClause(elseClause: ElseClauseSyntax): IfStatementSyntax {\n        return this.update(this.ifKeyword, this.openParenToken, this.condition, this.closeParenToken, this.statement, elseClause);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.condition.isTypeScriptSpecific()) { return true; }\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        if (this.elseClause !== null && this.elseClause.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ExpressionStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public expression: IExpressionSyntax,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitExpressionStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ExpressionStatement;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.expression;\n            case 1: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(expression: IExpressionSyntax,\n                  semicolonToken: ISyntaxToken): ExpressionStatementSyntax {\n        if (this.expression === expression && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ExpressionStatementSyntax(expression, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): ExpressionStatementSyntax {\n        return new ExpressionStatementSyntax(expression, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ExpressionStatementSyntax {\n        return <ExpressionStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ExpressionStatementSyntax {\n        return <ExpressionStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ExpressionStatementSyntax {\n        return this.update(expression, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ExpressionStatementSyntax {\n        return this.update(this.expression, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ConstructorDeclarationSyntax extends SyntaxNode implements IClassElementSyntax {\n\n        constructor(public constructorKeyword: ISyntaxToken,\n                    public parameterList: ParameterListSyntax,\n                    public block: BlockSyntax,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitConstructorDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ConstructorDeclaration;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.constructorKeyword;\n            case 1: return this.parameterList;\n            case 2: return this.block;\n            case 3: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isClassElement(): boolean {\n        return true;\n    }\n\n    public update(constructorKeyword: ISyntaxToken,\n                  parameterList: ParameterListSyntax,\n                  block: BlockSyntax,\n                  semicolonToken: ISyntaxToken): ConstructorDeclarationSyntax {\n        if (this.constructorKeyword === constructorKeyword && this.parameterList === parameterList && this.block === block && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, block, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(constructorKeyword: ISyntaxToken,\n                         parameterList: ParameterListSyntax): ConstructorDeclarationSyntax {\n        return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ConstructorDeclarationSyntax {\n        return new ConstructorDeclarationSyntax(Syntax.token(SyntaxKind.ConstructorKeyword), ParameterListSyntax.create1(), null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ConstructorDeclarationSyntax {\n        return <ConstructorDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ConstructorDeclarationSyntax {\n        return <ConstructorDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withConstructorKeyword(constructorKeyword: ISyntaxToken): ConstructorDeclarationSyntax {\n        return this.update(constructorKeyword, this.parameterList, this.block, this.semicolonToken);\n    }\n\n    public withParameterList(parameterList: ParameterListSyntax): ConstructorDeclarationSyntax {\n        return this.update(this.constructorKeyword, parameterList, this.block, this.semicolonToken);\n    }\n\n    public withBlock(block: BlockSyntax): ConstructorDeclarationSyntax {\n        return this.update(this.constructorKeyword, this.parameterList, block, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ConstructorDeclarationSyntax {\n        return this.update(this.constructorKeyword, this.parameterList, this.block, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class MemberFunctionDeclarationSyntax extends SyntaxNode implements IMemberDeclarationSyntax {\n\n        constructor(public modifiers: ISyntaxList,\n                    public propertyName: ISyntaxToken,\n                    public callSignature: CallSignatureSyntax,\n                    public block: BlockSyntax,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitMemberFunctionDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.MemberFunctionDeclaration;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.propertyName;\n            case 2: return this.callSignature;\n            case 3: return this.block;\n            case 4: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isMemberDeclaration(): boolean {\n        return true;\n    }\n\n    public isClassElement(): boolean {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  propertyName: ISyntaxToken,\n                  callSignature: CallSignatureSyntax,\n                  block: BlockSyntax,\n                  semicolonToken: ISyntaxToken): MemberFunctionDeclarationSyntax {\n        if (this.modifiers === modifiers && this.propertyName === propertyName && this.callSignature === callSignature && this.block === block && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new MemberFunctionDeclarationSyntax(modifiers, propertyName, callSignature, block, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(propertyName: ISyntaxToken,\n                         callSignature: CallSignatureSyntax): MemberFunctionDeclarationSyntax {\n        return new MemberFunctionDeclarationSyntax(Syntax.emptyList, propertyName, callSignature, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): MemberFunctionDeclarationSyntax {\n        return new MemberFunctionDeclarationSyntax(Syntax.emptyList, propertyName, CallSignatureSyntax.create1(), null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): MemberFunctionDeclarationSyntax {\n        return <MemberFunctionDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): MemberFunctionDeclarationSyntax {\n        return <MemberFunctionDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): MemberFunctionDeclarationSyntax {\n        return this.update(modifiers, this.propertyName, this.callSignature, this.block, this.semicolonToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): MemberFunctionDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): MemberFunctionDeclarationSyntax {\n        return this.update(this.modifiers, propertyName, this.callSignature, this.block, this.semicolonToken);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): MemberFunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.propertyName, callSignature, this.block, this.semicolonToken);\n    }\n\n    public withBlock(block: BlockSyntax): MemberFunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.propertyName, this.callSignature, block, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): MemberFunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.propertyName, this.callSignature, this.block, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class MemberAccessorDeclarationSyntax extends SyntaxNode implements IMemberDeclarationSyntax {\n        constructor(public modifiers: ISyntaxList,\n                    public propertyName: ISyntaxToken,\n                    public parameterList: ParameterListSyntax,\n                    public block: BlockSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n        }\n\n    public isMemberDeclaration(): boolean {\n        return true;\n    }\n\n    public isClassElement(): boolean {\n        return true;\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): MemberAccessorDeclarationSyntax {\n        return <MemberAccessorDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): MemberAccessorDeclarationSyntax {\n        return <MemberAccessorDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class GetMemberAccessorDeclarationSyntax extends MemberAccessorDeclarationSyntax {\n\n        constructor(modifiers: ISyntaxList,\n                    public getKeyword: ISyntaxToken,\n                    propertyName: ISyntaxToken,\n                    parameterList: ParameterListSyntax,\n                    public typeAnnotation: TypeAnnotationSyntax,\n                    block: BlockSyntax,\n                    parsedInStrictMode: boolean) {\n            super(modifiers, propertyName, parameterList, block, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitGetMemberAccessorDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.GetMemberAccessorDeclaration;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.getKeyword;\n            case 2: return this.propertyName;\n            case 3: return this.parameterList;\n            case 4: return this.typeAnnotation;\n            case 5: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(modifiers: ISyntaxList,\n                  getKeyword: ISyntaxToken,\n                  propertyName: ISyntaxToken,\n                  parameterList: ParameterListSyntax,\n                  typeAnnotation: TypeAnnotationSyntax,\n                  block: BlockSyntax): GetMemberAccessorDeclarationSyntax {\n        if (this.modifiers === modifiers && this.getKeyword === getKeyword && this.propertyName === propertyName && this.parameterList === parameterList && this.typeAnnotation === typeAnnotation && this.block === block) {\n            return this;\n        }\n\n        return new GetMemberAccessorDeclarationSyntax(modifiers, getKeyword, propertyName, parameterList, typeAnnotation, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(getKeyword: ISyntaxToken,\n                         propertyName: ISyntaxToken,\n                         parameterList: ParameterListSyntax,\n                         block: BlockSyntax): GetMemberAccessorDeclarationSyntax {\n        return new GetMemberAccessorDeclarationSyntax(Syntax.emptyList, getKeyword, propertyName, parameterList, null, block, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): GetMemberAccessorDeclarationSyntax {\n        return new GetMemberAccessorDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.GetKeyword), propertyName, ParameterListSyntax.create1(), null, BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): GetMemberAccessorDeclarationSyntax {\n        return <GetMemberAccessorDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): GetMemberAccessorDeclarationSyntax {\n        return <GetMemberAccessorDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): GetMemberAccessorDeclarationSyntax {\n        return this.update(modifiers, this.getKeyword, this.propertyName, this.parameterList, this.typeAnnotation, this.block);\n    }\n\n    public withModifier(modifier: ISyntaxToken): GetMemberAccessorDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withGetKeyword(getKeyword: ISyntaxToken): GetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, getKeyword, this.propertyName, this.parameterList, this.typeAnnotation, this.block);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): GetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.getKeyword, propertyName, this.parameterList, this.typeAnnotation, this.block);\n    }\n\n    public withParameterList(parameterList: ParameterListSyntax): GetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.getKeyword, this.propertyName, parameterList, this.typeAnnotation, this.block);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): GetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.getKeyword, this.propertyName, this.parameterList, typeAnnotation, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): GetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.getKeyword, this.propertyName, this.parameterList, this.typeAnnotation, block);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class SetMemberAccessorDeclarationSyntax extends MemberAccessorDeclarationSyntax {\n\n        constructor(modifiers: ISyntaxList,\n                    public setKeyword: ISyntaxToken,\n                    propertyName: ISyntaxToken,\n                    parameterList: ParameterListSyntax,\n                    block: BlockSyntax,\n                    parsedInStrictMode: boolean) {\n            super(modifiers, propertyName, parameterList, block, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitSetMemberAccessorDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.SetMemberAccessorDeclaration;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.setKeyword;\n            case 2: return this.propertyName;\n            case 3: return this.parameterList;\n            case 4: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(modifiers: ISyntaxList,\n                  setKeyword: ISyntaxToken,\n                  propertyName: ISyntaxToken,\n                  parameterList: ParameterListSyntax,\n                  block: BlockSyntax): SetMemberAccessorDeclarationSyntax {\n        if (this.modifiers === modifiers && this.setKeyword === setKeyword && this.propertyName === propertyName && this.parameterList === parameterList && this.block === block) {\n            return this;\n        }\n\n        return new SetMemberAccessorDeclarationSyntax(modifiers, setKeyword, propertyName, parameterList, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(setKeyword: ISyntaxToken,\n                         propertyName: ISyntaxToken,\n                         parameterList: ParameterListSyntax,\n                         block: BlockSyntax): SetMemberAccessorDeclarationSyntax {\n        return new SetMemberAccessorDeclarationSyntax(Syntax.emptyList, setKeyword, propertyName, parameterList, block, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): SetMemberAccessorDeclarationSyntax {\n        return new SetMemberAccessorDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.SetKeyword), propertyName, ParameterListSyntax.create1(), BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SetMemberAccessorDeclarationSyntax {\n        return <SetMemberAccessorDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SetMemberAccessorDeclarationSyntax {\n        return <SetMemberAccessorDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): SetMemberAccessorDeclarationSyntax {\n        return this.update(modifiers, this.setKeyword, this.propertyName, this.parameterList, this.block);\n    }\n\n    public withModifier(modifier: ISyntaxToken): SetMemberAccessorDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withSetKeyword(setKeyword: ISyntaxToken): SetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, setKeyword, this.propertyName, this.parameterList, this.block);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): SetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.setKeyword, propertyName, this.parameterList, this.block);\n    }\n\n    public withParameterList(parameterList: ParameterListSyntax): SetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.setKeyword, this.propertyName, parameterList, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): SetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.setKeyword, this.propertyName, this.parameterList, block);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class MemberVariableDeclarationSyntax extends SyntaxNode implements IMemberDeclarationSyntax {\n\n        constructor(public modifiers: ISyntaxList,\n                    public variableDeclarator: VariableDeclaratorSyntax,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitMemberVariableDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.MemberVariableDeclaration;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.variableDeclarator;\n            case 2: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isMemberDeclaration(): boolean {\n        return true;\n    }\n\n    public isClassElement(): boolean {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  variableDeclarator: VariableDeclaratorSyntax,\n                  semicolonToken: ISyntaxToken): MemberVariableDeclarationSyntax {\n        if (this.modifiers === modifiers && this.variableDeclarator === variableDeclarator && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new MemberVariableDeclarationSyntax(modifiers, variableDeclarator, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(variableDeclarator: VariableDeclaratorSyntax,\n                         semicolonToken: ISyntaxToken): MemberVariableDeclarationSyntax {\n        return new MemberVariableDeclarationSyntax(Syntax.emptyList, variableDeclarator, semicolonToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(variableDeclarator: VariableDeclaratorSyntax): MemberVariableDeclarationSyntax {\n        return new MemberVariableDeclarationSyntax(Syntax.emptyList, variableDeclarator, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): MemberVariableDeclarationSyntax {\n        return <MemberVariableDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): MemberVariableDeclarationSyntax {\n        return <MemberVariableDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): MemberVariableDeclarationSyntax {\n        return this.update(modifiers, this.variableDeclarator, this.semicolonToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): MemberVariableDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withVariableDeclarator(variableDeclarator: VariableDeclaratorSyntax): MemberVariableDeclarationSyntax {\n        return this.update(this.modifiers, variableDeclarator, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): MemberVariableDeclarationSyntax {\n        return this.update(this.modifiers, this.variableDeclarator, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ThrowStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public throwKeyword: ISyntaxToken,\n                    public expression: IExpressionSyntax,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitThrowStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ThrowStatement;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.throwKeyword;\n            case 1: return this.expression;\n            case 2: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(throwKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  semicolonToken: ISyntaxToken): ThrowStatementSyntax {\n        if (this.throwKeyword === throwKeyword && this.expression === expression && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ThrowStatementSyntax(throwKeyword, expression, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): ThrowStatementSyntax {\n        return new ThrowStatementSyntax(Syntax.token(SyntaxKind.ThrowKeyword), expression, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ThrowStatementSyntax {\n        return <ThrowStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ThrowStatementSyntax {\n        return <ThrowStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withThrowKeyword(throwKeyword: ISyntaxToken): ThrowStatementSyntax {\n        return this.update(throwKeyword, this.expression, this.semicolonToken);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ThrowStatementSyntax {\n        return this.update(this.throwKeyword, expression, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ThrowStatementSyntax {\n        return this.update(this.throwKeyword, this.expression, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ReturnStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public returnKeyword: ISyntaxToken,\n                    public expression: IExpressionSyntax,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitReturnStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ReturnStatement;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.returnKeyword;\n            case 1: return this.expression;\n            case 2: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(returnKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  semicolonToken: ISyntaxToken): ReturnStatementSyntax {\n        if (this.returnKeyword === returnKeyword && this.expression === expression && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ReturnStatementSyntax(returnKeyword, expression, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(returnKeyword: ISyntaxToken,\n                         semicolonToken: ISyntaxToken): ReturnStatementSyntax {\n        return new ReturnStatementSyntax(returnKeyword, null, semicolonToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ReturnStatementSyntax {\n        return new ReturnStatementSyntax(Syntax.token(SyntaxKind.ReturnKeyword), null, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ReturnStatementSyntax {\n        return <ReturnStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ReturnStatementSyntax {\n        return <ReturnStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withReturnKeyword(returnKeyword: ISyntaxToken): ReturnStatementSyntax {\n        return this.update(returnKeyword, this.expression, this.semicolonToken);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ReturnStatementSyntax {\n        return this.update(this.returnKeyword, expression, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ReturnStatementSyntax {\n        return this.update(this.returnKeyword, this.expression, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression !== null && this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ObjectCreationExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n        constructor(public newKeyword: ISyntaxToken,\n                    public expression: IExpressionSyntax,\n                    public argumentList: ArgumentListSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitObjectCreationExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ObjectCreationExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.newKeyword;\n            case 1: return this.expression;\n            case 2: return this.argumentList;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(newKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  argumentList: ArgumentListSyntax): ObjectCreationExpressionSyntax {\n        if (this.newKeyword === newKeyword && this.expression === expression && this.argumentList === argumentList) {\n            return this;\n        }\n\n        return new ObjectCreationExpressionSyntax(newKeyword, expression, argumentList, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(newKeyword: ISyntaxToken,\n                         expression: IExpressionSyntax): ObjectCreationExpressionSyntax {\n        return new ObjectCreationExpressionSyntax(newKeyword, expression, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(expression: IExpressionSyntax): ObjectCreationExpressionSyntax {\n        return new ObjectCreationExpressionSyntax(Syntax.token(SyntaxKind.NewKeyword), expression, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ObjectCreationExpressionSyntax {\n        return <ObjectCreationExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ObjectCreationExpressionSyntax {\n        return <ObjectCreationExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withNewKeyword(newKeyword: ISyntaxToken): ObjectCreationExpressionSyntax {\n        return this.update(newKeyword, this.expression, this.argumentList);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ObjectCreationExpressionSyntax {\n        return this.update(this.newKeyword, expression, this.argumentList);\n    }\n\n    public withArgumentList(argumentList: ArgumentListSyntax): ObjectCreationExpressionSyntax {\n        return this.update(this.newKeyword, this.expression, argumentList);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        if (this.argumentList !== null && this.argumentList.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class SwitchStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public switchKeyword: ISyntaxToken,\n                    public openParenToken: ISyntaxToken,\n                    public expression: IExpressionSyntax,\n                    public closeParenToken: ISyntaxToken,\n                    public openBraceToken: ISyntaxToken,\n                    public switchClauses: ISyntaxList,\n                    public closeBraceToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitSwitchStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.SwitchStatement;\n    }\n\n    public childCount(): number {\n        return 7;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.switchKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.expression;\n            case 3: return this.closeParenToken;\n            case 4: return this.openBraceToken;\n            case 5: return this.switchClauses;\n            case 6: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(switchKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  openBraceToken: ISyntaxToken,\n                  switchClauses: ISyntaxList,\n                  closeBraceToken: ISyntaxToken): SwitchStatementSyntax {\n        if (this.switchKeyword === switchKeyword && this.openParenToken === openParenToken && this.expression === expression && this.closeParenToken === closeParenToken && this.openBraceToken === openBraceToken && this.switchClauses === switchClauses && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, switchClauses, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(switchKeyword: ISyntaxToken,\n                         openParenToken: ISyntaxToken,\n                         expression: IExpressionSyntax,\n                         closeParenToken: ISyntaxToken,\n                         openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): SwitchStatementSyntax {\n        return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, Syntax.emptyList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(expression: IExpressionSyntax): SwitchStatementSyntax {\n        return new SwitchStatementSyntax(Syntax.token(SyntaxKind.SwitchKeyword), Syntax.token(SyntaxKind.OpenParenToken), expression, Syntax.token(SyntaxKind.CloseParenToken), Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptyList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SwitchStatementSyntax {\n        return <SwitchStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SwitchStatementSyntax {\n        return <SwitchStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withSwitchKeyword(switchKeyword: ISyntaxToken): SwitchStatementSyntax {\n        return this.update(switchKeyword, this.openParenToken, this.expression, this.closeParenToken, this.openBraceToken, this.switchClauses, this.closeBraceToken);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): SwitchStatementSyntax {\n        return this.update(this.switchKeyword, openParenToken, this.expression, this.closeParenToken, this.openBraceToken, this.switchClauses, this.closeBraceToken);\n    }\n\n    public withExpression(expression: IExpressionSyntax): SwitchStatementSyntax {\n        return this.update(this.switchKeyword, this.openParenToken, expression, this.closeParenToken, this.openBraceToken, this.switchClauses, this.closeBraceToken);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): SwitchStatementSyntax {\n        return this.update(this.switchKeyword, this.openParenToken, this.expression, closeParenToken, this.openBraceToken, this.switchClauses, this.closeBraceToken);\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): SwitchStatementSyntax {\n        return this.update(this.switchKeyword, this.openParenToken, this.expression, this.closeParenToken, openBraceToken, this.switchClauses, this.closeBraceToken);\n    }\n\n    public withSwitchClauses(switchClauses: ISyntaxList): SwitchStatementSyntax {\n        return this.update(this.switchKeyword, this.openParenToken, this.expression, this.closeParenToken, this.openBraceToken, switchClauses, this.closeBraceToken);\n    }\n\n    public withSwitchClause(switchClause: SwitchClauseSyntax): SwitchStatementSyntax {\n        return this.withSwitchClauses(Syntax.list([switchClause]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): SwitchStatementSyntax {\n        return this.update(this.switchKeyword, this.openParenToken, this.expression, this.closeParenToken, this.openBraceToken, this.switchClauses, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        if (this.switchClauses.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class SwitchClauseSyntax extends SyntaxNode implements ISwitchClauseSyntax {\n        constructor(public colonToken: ISyntaxToken,\n                    public statements: ISyntaxList,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n        }\n\n    public isSwitchClause(): boolean {\n        return true;\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SwitchClauseSyntax {\n        return <SwitchClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SwitchClauseSyntax {\n        return <SwitchClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return false;\n    }\n    }\n\n    export class CaseSwitchClauseSyntax extends SwitchClauseSyntax {\n\n        constructor(public caseKeyword: ISyntaxToken,\n                    public expression: IExpressionSyntax,\n                    colonToken: ISyntaxToken,\n                    statements: ISyntaxList,\n                    parsedInStrictMode: boolean) {\n            super(colonToken, statements, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitCaseSwitchClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.CaseSwitchClause;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.caseKeyword;\n            case 1: return this.expression;\n            case 2: return this.colonToken;\n            case 3: return this.statements;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(caseKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  colonToken: ISyntaxToken,\n                  statements: ISyntaxList): CaseSwitchClauseSyntax {\n        if (this.caseKeyword === caseKeyword && this.expression === expression && this.colonToken === colonToken && this.statements === statements) {\n            return this;\n        }\n\n        return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, statements, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(caseKeyword: ISyntaxToken,\n                         expression: IExpressionSyntax,\n                         colonToken: ISyntaxToken): CaseSwitchClauseSyntax {\n        return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, Syntax.emptyList, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(expression: IExpressionSyntax): CaseSwitchClauseSyntax {\n        return new CaseSwitchClauseSyntax(Syntax.token(SyntaxKind.CaseKeyword), expression, Syntax.token(SyntaxKind.ColonToken), Syntax.emptyList, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): CaseSwitchClauseSyntax {\n        return <CaseSwitchClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): CaseSwitchClauseSyntax {\n        return <CaseSwitchClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withCaseKeyword(caseKeyword: ISyntaxToken): CaseSwitchClauseSyntax {\n        return this.update(caseKeyword, this.expression, this.colonToken, this.statements);\n    }\n\n    public withExpression(expression: IExpressionSyntax): CaseSwitchClauseSyntax {\n        return this.update(this.caseKeyword, expression, this.colonToken, this.statements);\n    }\n\n    public withColonToken(colonToken: ISyntaxToken): CaseSwitchClauseSyntax {\n        return this.update(this.caseKeyword, this.expression, colonToken, this.statements);\n    }\n\n    public withStatements(statements: ISyntaxList): CaseSwitchClauseSyntax {\n        return this.update(this.caseKeyword, this.expression, this.colonToken, statements);\n    }\n\n    public withStatement(statement: IStatementSyntax): CaseSwitchClauseSyntax {\n        return this.withStatements(Syntax.list([statement]));\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        if (this.statements.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class DefaultSwitchClauseSyntax extends SwitchClauseSyntax {\n\n        constructor(public defaultKeyword: ISyntaxToken,\n                    colonToken: ISyntaxToken,\n                    statements: ISyntaxList,\n                    parsedInStrictMode: boolean) {\n            super(colonToken, statements, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitDefaultSwitchClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.DefaultSwitchClause;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.defaultKeyword;\n            case 1: return this.colonToken;\n            case 2: return this.statements;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(defaultKeyword: ISyntaxToken,\n                  colonToken: ISyntaxToken,\n                  statements: ISyntaxList): DefaultSwitchClauseSyntax {\n        if (this.defaultKeyword === defaultKeyword && this.colonToken === colonToken && this.statements === statements) {\n            return this;\n        }\n\n        return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, statements, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(defaultKeyword: ISyntaxToken,\n                         colonToken: ISyntaxToken): DefaultSwitchClauseSyntax {\n        return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, Syntax.emptyList, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): DefaultSwitchClauseSyntax {\n        return new DefaultSwitchClauseSyntax(Syntax.token(SyntaxKind.DefaultKeyword), Syntax.token(SyntaxKind.ColonToken), Syntax.emptyList, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): DefaultSwitchClauseSyntax {\n        return <DefaultSwitchClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): DefaultSwitchClauseSyntax {\n        return <DefaultSwitchClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withDefaultKeyword(defaultKeyword: ISyntaxToken): DefaultSwitchClauseSyntax {\n        return this.update(defaultKeyword, this.colonToken, this.statements);\n    }\n\n    public withColonToken(colonToken: ISyntaxToken): DefaultSwitchClauseSyntax {\n        return this.update(this.defaultKeyword, colonToken, this.statements);\n    }\n\n    public withStatements(statements: ISyntaxList): DefaultSwitchClauseSyntax {\n        return this.update(this.defaultKeyword, this.colonToken, statements);\n    }\n\n    public withStatement(statement: IStatementSyntax): DefaultSwitchClauseSyntax {\n        return this.withStatements(Syntax.list([statement]));\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.statements.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class BreakStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public breakKeyword: ISyntaxToken,\n                    public identifier: ISyntaxToken,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitBreakStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.BreakStatement;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.breakKeyword;\n            case 1: return this.identifier;\n            case 2: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(breakKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  semicolonToken: ISyntaxToken): BreakStatementSyntax {\n        if (this.breakKeyword === breakKeyword && this.identifier === identifier && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new BreakStatementSyntax(breakKeyword, identifier, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(breakKeyword: ISyntaxToken,\n                         semicolonToken: ISyntaxToken): BreakStatementSyntax {\n        return new BreakStatementSyntax(breakKeyword, null, semicolonToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): BreakStatementSyntax {\n        return new BreakStatementSyntax(Syntax.token(SyntaxKind.BreakKeyword), null, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): BreakStatementSyntax {\n        return <BreakStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): BreakStatementSyntax {\n        return <BreakStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withBreakKeyword(breakKeyword: ISyntaxToken): BreakStatementSyntax {\n        return this.update(breakKeyword, this.identifier, this.semicolonToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): BreakStatementSyntax {\n        return this.update(this.breakKeyword, identifier, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): BreakStatementSyntax {\n        return this.update(this.breakKeyword, this.identifier, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return false;\n    }\n    }\n\n    export class ContinueStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public continueKeyword: ISyntaxToken,\n                    public identifier: ISyntaxToken,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitContinueStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ContinueStatement;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.continueKeyword;\n            case 1: return this.identifier;\n            case 2: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(continueKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  semicolonToken: ISyntaxToken): ContinueStatementSyntax {\n        if (this.continueKeyword === continueKeyword && this.identifier === identifier && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ContinueStatementSyntax(continueKeyword, identifier, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(continueKeyword: ISyntaxToken,\n                         semicolonToken: ISyntaxToken): ContinueStatementSyntax {\n        return new ContinueStatementSyntax(continueKeyword, null, semicolonToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ContinueStatementSyntax {\n        return new ContinueStatementSyntax(Syntax.token(SyntaxKind.ContinueKeyword), null, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ContinueStatementSyntax {\n        return <ContinueStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ContinueStatementSyntax {\n        return <ContinueStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withContinueKeyword(continueKeyword: ISyntaxToken): ContinueStatementSyntax {\n        return this.update(continueKeyword, this.identifier, this.semicolonToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): ContinueStatementSyntax {\n        return this.update(this.continueKeyword, identifier, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ContinueStatementSyntax {\n        return this.update(this.continueKeyword, this.identifier, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return false;\n    }\n    }\n\n    export class IterationStatementSyntax extends SyntaxNode implements IStatementSyntax {\n        constructor(public openParenToken: ISyntaxToken,\n                    public closeParenToken: ISyntaxToken,\n                    public statement: IStatementSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n        }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): IterationStatementSyntax {\n        return <IterationStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): IterationStatementSyntax {\n        return <IterationStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return false;\n    }\n    }\n\n    export class BaseForStatementSyntax extends IterationStatementSyntax {\n        constructor(public forKeyword: ISyntaxToken,\n                    openParenToken: ISyntaxToken,\n                    public variableDeclaration: VariableDeclarationSyntax,\n                    closeParenToken: ISyntaxToken,\n                    statement: IStatementSyntax,\n                    parsedInStrictMode: boolean) {\n            super(openParenToken, closeParenToken, statement, parsedInStrictMode); \n        }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): BaseForStatementSyntax {\n        return <BaseForStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): BaseForStatementSyntax {\n        return <BaseForStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return false;\n    }\n    }\n\n    export class ForStatementSyntax extends BaseForStatementSyntax {\n\n        constructor(forKeyword: ISyntaxToken,\n                    openParenToken: ISyntaxToken,\n                    variableDeclaration: VariableDeclarationSyntax,\n                    public initializer: IExpressionSyntax,\n                    public firstSemicolonToken: ISyntaxToken,\n                    public condition: IExpressionSyntax,\n                    public secondSemicolonToken: ISyntaxToken,\n                    public incrementor: IExpressionSyntax,\n                    closeParenToken: ISyntaxToken,\n                    statement: IStatementSyntax,\n                    parsedInStrictMode: boolean) {\n            super(forKeyword, openParenToken, variableDeclaration, closeParenToken, statement, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitForStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ForStatement;\n    }\n\n    public childCount(): number {\n        return 10;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.forKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.variableDeclaration;\n            case 3: return this.initializer;\n            case 4: return this.firstSemicolonToken;\n            case 5: return this.condition;\n            case 6: return this.secondSemicolonToken;\n            case 7: return this.incrementor;\n            case 8: return this.closeParenToken;\n            case 9: return this.statement;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(forKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  variableDeclaration: VariableDeclarationSyntax,\n                  initializer: IExpressionSyntax,\n                  firstSemicolonToken: ISyntaxToken,\n                  condition: IExpressionSyntax,\n                  secondSemicolonToken: ISyntaxToken,\n                  incrementor: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  statement: IStatementSyntax): ForStatementSyntax {\n        if (this.forKeyword === forKeyword && this.openParenToken === openParenToken && this.variableDeclaration === variableDeclaration && this.initializer === initializer && this.firstSemicolonToken === firstSemicolonToken && this.condition === condition && this.secondSemicolonToken === secondSemicolonToken && this.incrementor === incrementor && this.closeParenToken === closeParenToken && this.statement === statement) {\n            return this;\n        }\n\n        return new ForStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(forKeyword: ISyntaxToken,\n                         openParenToken: ISyntaxToken,\n                         firstSemicolonToken: ISyntaxToken,\n                         secondSemicolonToken: ISyntaxToken,\n                         closeParenToken: ISyntaxToken,\n                         statement: IStatementSyntax): ForStatementSyntax {\n        return new ForStatementSyntax(forKeyword, openParenToken, null, null, firstSemicolonToken, null, secondSemicolonToken, null, closeParenToken, statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(statement: IStatementSyntax): ForStatementSyntax {\n        return new ForStatementSyntax(Syntax.token(SyntaxKind.ForKeyword), Syntax.token(SyntaxKind.OpenParenToken), null, null, Syntax.token(SyntaxKind.SemicolonToken), null, Syntax.token(SyntaxKind.SemicolonToken), null, Syntax.token(SyntaxKind.CloseParenToken), statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ForStatementSyntax {\n        return <ForStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ForStatementSyntax {\n        return <ForStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withForKeyword(forKeyword: ISyntaxToken): ForStatementSyntax {\n        return this.update(forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): ForStatementSyntax {\n        return this.update(this.forKeyword, openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withVariableDeclaration(variableDeclaration: VariableDeclarationSyntax): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withInitializer(initializer: IExpressionSyntax): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withFirstSemicolonToken(firstSemicolonToken: ISyntaxToken): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withCondition(condition: IExpressionSyntax): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withSecondSemicolonToken(secondSemicolonToken: ISyntaxToken): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withIncrementor(incrementor: IExpressionSyntax): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, closeParenToken, this.statement);\n    }\n\n    public withStatement(statement: IStatementSyntax): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, statement);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.variableDeclaration !== null && this.variableDeclaration.isTypeScriptSpecific()) { return true; }\n        if (this.initializer !== null && this.initializer.isTypeScriptSpecific()) { return true; }\n        if (this.condition !== null && this.condition.isTypeScriptSpecific()) { return true; }\n        if (this.incrementor !== null && this.incrementor.isTypeScriptSpecific()) { return true; }\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ForInStatementSyntax extends BaseForStatementSyntax {\n\n        constructor(forKeyword: ISyntaxToken,\n                    openParenToken: ISyntaxToken,\n                    variableDeclaration: VariableDeclarationSyntax,\n                    public left: IExpressionSyntax,\n                    public inKeyword: ISyntaxToken,\n                    public expression: IExpressionSyntax,\n                    closeParenToken: ISyntaxToken,\n                    statement: IStatementSyntax,\n                    parsedInStrictMode: boolean) {\n            super(forKeyword, openParenToken, variableDeclaration, closeParenToken, statement, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitForInStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ForInStatement;\n    }\n\n    public childCount(): number {\n        return 8;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.forKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.variableDeclaration;\n            case 3: return this.left;\n            case 4: return this.inKeyword;\n            case 5: return this.expression;\n            case 6: return this.closeParenToken;\n            case 7: return this.statement;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(forKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  variableDeclaration: VariableDeclarationSyntax,\n                  left: IExpressionSyntax,\n                  inKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  statement: IStatementSyntax): ForInStatementSyntax {\n        if (this.forKeyword === forKeyword && this.openParenToken === openParenToken && this.variableDeclaration === variableDeclaration && this.left === left && this.inKeyword === inKeyword && this.expression === expression && this.closeParenToken === closeParenToken && this.statement === statement) {\n            return this;\n        }\n\n        return new ForInStatementSyntax(forKeyword, openParenToken, variableDeclaration, left, inKeyword, expression, closeParenToken, statement, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(forKeyword: ISyntaxToken,\n                         openParenToken: ISyntaxToken,\n                         inKeyword: ISyntaxToken,\n                         expression: IExpressionSyntax,\n                         closeParenToken: ISyntaxToken,\n                         statement: IStatementSyntax): ForInStatementSyntax {\n        return new ForInStatementSyntax(forKeyword, openParenToken, null, null, inKeyword, expression, closeParenToken, statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(expression: IExpressionSyntax,\n                          statement: IStatementSyntax): ForInStatementSyntax {\n        return new ForInStatementSyntax(Syntax.token(SyntaxKind.ForKeyword), Syntax.token(SyntaxKind.OpenParenToken), null, null, Syntax.token(SyntaxKind.InKeyword), expression, Syntax.token(SyntaxKind.CloseParenToken), statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ForInStatementSyntax {\n        return <ForInStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ForInStatementSyntax {\n        return <ForInStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withForKeyword(forKeyword: ISyntaxToken): ForInStatementSyntax {\n        return this.update(forKeyword, this.openParenToken, this.variableDeclaration, this.left, this.inKeyword, this.expression, this.closeParenToken, this.statement);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): ForInStatementSyntax {\n        return this.update(this.forKeyword, openParenToken, this.variableDeclaration, this.left, this.inKeyword, this.expression, this.closeParenToken, this.statement);\n    }\n\n    public withVariableDeclaration(variableDeclaration: VariableDeclarationSyntax): ForInStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, variableDeclaration, this.left, this.inKeyword, this.expression, this.closeParenToken, this.statement);\n    }\n\n    public withLeft(left: IExpressionSyntax): ForInStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, left, this.inKeyword, this.expression, this.closeParenToken, this.statement);\n    }\n\n    public withInKeyword(inKeyword: ISyntaxToken): ForInStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.left, inKeyword, this.expression, this.closeParenToken, this.statement);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ForInStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.left, this.inKeyword, expression, this.closeParenToken, this.statement);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): ForInStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.left, this.inKeyword, this.expression, closeParenToken, this.statement);\n    }\n\n    public withStatement(statement: IStatementSyntax): ForInStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.left, this.inKeyword, this.expression, this.closeParenToken, statement);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.variableDeclaration !== null && this.variableDeclaration.isTypeScriptSpecific()) { return true; }\n        if (this.left !== null && this.left.isTypeScriptSpecific()) { return true; }\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class WhileStatementSyntax extends IterationStatementSyntax {\n\n        constructor(public whileKeyword: ISyntaxToken,\n                    openParenToken: ISyntaxToken,\n                    public condition: IExpressionSyntax,\n                    closeParenToken: ISyntaxToken,\n                    statement: IStatementSyntax,\n                    parsedInStrictMode: boolean) {\n            super(openParenToken, closeParenToken, statement, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitWhileStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.WhileStatement;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.whileKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.condition;\n            case 3: return this.closeParenToken;\n            case 4: return this.statement;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(whileKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  condition: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  statement: IStatementSyntax): WhileStatementSyntax {\n        if (this.whileKeyword === whileKeyword && this.openParenToken === openParenToken && this.condition === condition && this.closeParenToken === closeParenToken && this.statement === statement) {\n            return this;\n        }\n\n        return new WhileStatementSyntax(whileKeyword, openParenToken, condition, closeParenToken, statement, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(condition: IExpressionSyntax,\n                          statement: IStatementSyntax): WhileStatementSyntax {\n        return new WhileStatementSyntax(Syntax.token(SyntaxKind.WhileKeyword), Syntax.token(SyntaxKind.OpenParenToken), condition, Syntax.token(SyntaxKind.CloseParenToken), statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): WhileStatementSyntax {\n        return <WhileStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): WhileStatementSyntax {\n        return <WhileStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withWhileKeyword(whileKeyword: ISyntaxToken): WhileStatementSyntax {\n        return this.update(whileKeyword, this.openParenToken, this.condition, this.closeParenToken, this.statement);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): WhileStatementSyntax {\n        return this.update(this.whileKeyword, openParenToken, this.condition, this.closeParenToken, this.statement);\n    }\n\n    public withCondition(condition: IExpressionSyntax): WhileStatementSyntax {\n        return this.update(this.whileKeyword, this.openParenToken, condition, this.closeParenToken, this.statement);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): WhileStatementSyntax {\n        return this.update(this.whileKeyword, this.openParenToken, this.condition, closeParenToken, this.statement);\n    }\n\n    public withStatement(statement: IStatementSyntax): WhileStatementSyntax {\n        return this.update(this.whileKeyword, this.openParenToken, this.condition, this.closeParenToken, statement);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.condition.isTypeScriptSpecific()) { return true; }\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class WithStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public withKeyword: ISyntaxToken,\n                    public openParenToken: ISyntaxToken,\n                    public condition: IExpressionSyntax,\n                    public closeParenToken: ISyntaxToken,\n                    public statement: IStatementSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitWithStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.WithStatement;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.withKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.condition;\n            case 3: return this.closeParenToken;\n            case 4: return this.statement;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(withKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  condition: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  statement: IStatementSyntax): WithStatementSyntax {\n        if (this.withKeyword === withKeyword && this.openParenToken === openParenToken && this.condition === condition && this.closeParenToken === closeParenToken && this.statement === statement) {\n            return this;\n        }\n\n        return new WithStatementSyntax(withKeyword, openParenToken, condition, closeParenToken, statement, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(condition: IExpressionSyntax,\n                          statement: IStatementSyntax): WithStatementSyntax {\n        return new WithStatementSyntax(Syntax.token(SyntaxKind.WithKeyword), Syntax.token(SyntaxKind.OpenParenToken), condition, Syntax.token(SyntaxKind.CloseParenToken), statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): WithStatementSyntax {\n        return <WithStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): WithStatementSyntax {\n        return <WithStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withWithKeyword(withKeyword: ISyntaxToken): WithStatementSyntax {\n        return this.update(withKeyword, this.openParenToken, this.condition, this.closeParenToken, this.statement);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): WithStatementSyntax {\n        return this.update(this.withKeyword, openParenToken, this.condition, this.closeParenToken, this.statement);\n    }\n\n    public withCondition(condition: IExpressionSyntax): WithStatementSyntax {\n        return this.update(this.withKeyword, this.openParenToken, condition, this.closeParenToken, this.statement);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): WithStatementSyntax {\n        return this.update(this.withKeyword, this.openParenToken, this.condition, closeParenToken, this.statement);\n    }\n\n    public withStatement(statement: IStatementSyntax): WithStatementSyntax {\n        return this.update(this.withKeyword, this.openParenToken, this.condition, this.closeParenToken, statement);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.condition.isTypeScriptSpecific()) { return true; }\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class EnumDeclarationSyntax extends SyntaxNode implements IModuleElementSyntax {\n\n        constructor(public modifiers: ISyntaxList,\n                    public enumKeyword: ISyntaxToken,\n                    public identifier: ISyntaxToken,\n                    public openBraceToken: ISyntaxToken,\n                    public enumElements: ISeparatedSyntaxList,\n                    public closeBraceToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitEnumDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.EnumDeclaration;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.enumKeyword;\n            case 2: return this.identifier;\n            case 3: return this.openBraceToken;\n            case 4: return this.enumElements;\n            case 5: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  enumKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  openBraceToken: ISyntaxToken,\n                  enumElements: ISeparatedSyntaxList,\n                  closeBraceToken: ISyntaxToken): EnumDeclarationSyntax {\n        if (this.modifiers === modifiers && this.enumKeyword === enumKeyword && this.identifier === identifier && this.openBraceToken === openBraceToken && this.enumElements === enumElements && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new EnumDeclarationSyntax(modifiers, enumKeyword, identifier, openBraceToken, enumElements, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(enumKeyword: ISyntaxToken,\n                         identifier: ISyntaxToken,\n                         openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): EnumDeclarationSyntax {\n        return new EnumDeclarationSyntax(Syntax.emptyList, enumKeyword, identifier, openBraceToken, Syntax.emptySeparatedList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): EnumDeclarationSyntax {\n        return new EnumDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.EnumKeyword), identifier, Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): EnumDeclarationSyntax {\n        return <EnumDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): EnumDeclarationSyntax {\n        return <EnumDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): EnumDeclarationSyntax {\n        return this.update(modifiers, this.enumKeyword, this.identifier, this.openBraceToken, this.enumElements, this.closeBraceToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): EnumDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withEnumKeyword(enumKeyword: ISyntaxToken): EnumDeclarationSyntax {\n        return this.update(this.modifiers, enumKeyword, this.identifier, this.openBraceToken, this.enumElements, this.closeBraceToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): EnumDeclarationSyntax {\n        return this.update(this.modifiers, this.enumKeyword, identifier, this.openBraceToken, this.enumElements, this.closeBraceToken);\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): EnumDeclarationSyntax {\n        return this.update(this.modifiers, this.enumKeyword, this.identifier, openBraceToken, this.enumElements, this.closeBraceToken);\n    }\n\n    public withEnumElements(enumElements: ISeparatedSyntaxList): EnumDeclarationSyntax {\n        return this.update(this.modifiers, this.enumKeyword, this.identifier, this.openBraceToken, enumElements, this.closeBraceToken);\n    }\n\n    public withEnumElement(enumElement: EnumElementSyntax): EnumDeclarationSyntax {\n        return this.withEnumElements(Syntax.separatedList([enumElement]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): EnumDeclarationSyntax {\n        return this.update(this.modifiers, this.enumKeyword, this.identifier, this.openBraceToken, this.enumElements, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class EnumElementSyntax extends SyntaxNode {\n\n        constructor(public propertyName: ISyntaxToken,\n                    public equalsValueClause: EqualsValueClauseSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitEnumElement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.EnumElement;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.propertyName;\n            case 1: return this.equalsValueClause;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(propertyName: ISyntaxToken,\n                  equalsValueClause: EqualsValueClauseSyntax): EnumElementSyntax {\n        if (this.propertyName === propertyName && this.equalsValueClause === equalsValueClause) {\n            return this;\n        }\n\n        return new EnumElementSyntax(propertyName, equalsValueClause, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(propertyName: ISyntaxToken): EnumElementSyntax {\n        return new EnumElementSyntax(propertyName, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): EnumElementSyntax {\n        return new EnumElementSyntax(propertyName, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): EnumElementSyntax {\n        return <EnumElementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): EnumElementSyntax {\n        return <EnumElementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): EnumElementSyntax {\n        return this.update(propertyName, this.equalsValueClause);\n    }\n\n    public withEqualsValueClause(equalsValueClause: EqualsValueClauseSyntax): EnumElementSyntax {\n        return this.update(this.propertyName, equalsValueClause);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.equalsValueClause !== null && this.equalsValueClause.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class CastExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n        constructor(public lessThanToken: ISyntaxToken,\n                    public type: ITypeSyntax,\n                    public greaterThanToken: ISyntaxToken,\n                    public expression: IUnaryExpressionSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitCastExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.CastExpression;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.lessThanToken;\n            case 1: return this.type;\n            case 2: return this.greaterThanToken;\n            case 3: return this.expression;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(lessThanToken: ISyntaxToken,\n                  type: ITypeSyntax,\n                  greaterThanToken: ISyntaxToken,\n                  expression: IUnaryExpressionSyntax): CastExpressionSyntax {\n        if (this.lessThanToken === lessThanToken && this.type === type && this.greaterThanToken === greaterThanToken && this.expression === expression) {\n            return this;\n        }\n\n        return new CastExpressionSyntax(lessThanToken, type, greaterThanToken, expression, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(type: ITypeSyntax,\n                          expression: IUnaryExpressionSyntax): CastExpressionSyntax {\n        return new CastExpressionSyntax(Syntax.token(SyntaxKind.LessThanToken), type, Syntax.token(SyntaxKind.GreaterThanToken), expression, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): CastExpressionSyntax {\n        return <CastExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): CastExpressionSyntax {\n        return <CastExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withLessThanToken(lessThanToken: ISyntaxToken): CastExpressionSyntax {\n        return this.update(lessThanToken, this.type, this.greaterThanToken, this.expression);\n    }\n\n    public withType(type: ITypeSyntax): CastExpressionSyntax {\n        return this.update(this.lessThanToken, type, this.greaterThanToken, this.expression);\n    }\n\n    public withGreaterThanToken(greaterThanToken: ISyntaxToken): CastExpressionSyntax {\n        return this.update(this.lessThanToken, this.type, greaterThanToken, this.expression);\n    }\n\n    public withExpression(expression: IUnaryExpressionSyntax): CastExpressionSyntax {\n        return this.update(this.lessThanToken, this.type, this.greaterThanToken, expression);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return true;\n    }\n    }\n\n    export class ObjectLiteralExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n        constructor(public openBraceToken: ISyntaxToken,\n                    public propertyAssignments: ISeparatedSyntaxList,\n                    public closeBraceToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitObjectLiteralExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ObjectLiteralExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openBraceToken;\n            case 1: return this.propertyAssignments;\n            case 2: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(openBraceToken: ISyntaxToken,\n                  propertyAssignments: ISeparatedSyntaxList,\n                  closeBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax {\n        if (this.openBraceToken === openBraceToken && this.propertyAssignments === propertyAssignments && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new ObjectLiteralExpressionSyntax(openBraceToken, propertyAssignments, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax {\n        return new ObjectLiteralExpressionSyntax(openBraceToken, Syntax.emptySeparatedList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ObjectLiteralExpressionSyntax {\n        return new ObjectLiteralExpressionSyntax(Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ObjectLiteralExpressionSyntax {\n        return <ObjectLiteralExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ObjectLiteralExpressionSyntax {\n        return <ObjectLiteralExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax {\n        return this.update(openBraceToken, this.propertyAssignments, this.closeBraceToken);\n    }\n\n    public withPropertyAssignments(propertyAssignments: ISeparatedSyntaxList): ObjectLiteralExpressionSyntax {\n        return this.update(this.openBraceToken, propertyAssignments, this.closeBraceToken);\n    }\n\n    public withPropertyAssignment(propertyAssignment: PropertyAssignmentSyntax): ObjectLiteralExpressionSyntax {\n        return this.withPropertyAssignments(Syntax.separatedList([propertyAssignment]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax {\n        return this.update(this.openBraceToken, this.propertyAssignments, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.propertyAssignments.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class PropertyAssignmentSyntax extends SyntaxNode {\n        constructor(public propertyName: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n        }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): PropertyAssignmentSyntax {\n        return <PropertyAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): PropertyAssignmentSyntax {\n        return <PropertyAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return false;\n    }\n    }\n\n    export class SimplePropertyAssignmentSyntax extends PropertyAssignmentSyntax {\n\n        constructor(propertyName: ISyntaxToken,\n                    public colonToken: ISyntaxToken,\n                    public expression: IExpressionSyntax,\n                    parsedInStrictMode: boolean) {\n            super(propertyName, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitSimplePropertyAssignment(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.SimplePropertyAssignment;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.propertyName;\n            case 1: return this.colonToken;\n            case 2: return this.expression;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(propertyName: ISyntaxToken,\n                  colonToken: ISyntaxToken,\n                  expression: IExpressionSyntax): SimplePropertyAssignmentSyntax {\n        if (this.propertyName === propertyName && this.colonToken === colonToken && this.expression === expression) {\n            return this;\n        }\n\n        return new SimplePropertyAssignmentSyntax(propertyName, colonToken, expression, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(propertyName: ISyntaxToken,\n                          expression: IExpressionSyntax): SimplePropertyAssignmentSyntax {\n        return new SimplePropertyAssignmentSyntax(propertyName, Syntax.token(SyntaxKind.ColonToken), expression, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SimplePropertyAssignmentSyntax {\n        return <SimplePropertyAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SimplePropertyAssignmentSyntax {\n        return <SimplePropertyAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): SimplePropertyAssignmentSyntax {\n        return this.update(propertyName, this.colonToken, this.expression);\n    }\n\n    public withColonToken(colonToken: ISyntaxToken): SimplePropertyAssignmentSyntax {\n        return this.update(this.propertyName, colonToken, this.expression);\n    }\n\n    public withExpression(expression: IExpressionSyntax): SimplePropertyAssignmentSyntax {\n        return this.update(this.propertyName, this.colonToken, expression);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class FunctionPropertyAssignmentSyntax extends PropertyAssignmentSyntax {\n\n        constructor(propertyName: ISyntaxToken,\n                    public callSignature: CallSignatureSyntax,\n                    public block: BlockSyntax,\n                    parsedInStrictMode: boolean) {\n            super(propertyName, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitFunctionPropertyAssignment(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.FunctionPropertyAssignment;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.propertyName;\n            case 1: return this.callSignature;\n            case 2: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(propertyName: ISyntaxToken,\n                  callSignature: CallSignatureSyntax,\n                  block: BlockSyntax): FunctionPropertyAssignmentSyntax {\n        if (this.propertyName === propertyName && this.callSignature === callSignature && this.block === block) {\n            return this;\n        }\n\n        return new FunctionPropertyAssignmentSyntax(propertyName, callSignature, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(propertyName: ISyntaxToken): FunctionPropertyAssignmentSyntax {\n        return new FunctionPropertyAssignmentSyntax(propertyName, CallSignatureSyntax.create1(), BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): FunctionPropertyAssignmentSyntax {\n        return <FunctionPropertyAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): FunctionPropertyAssignmentSyntax {\n        return <FunctionPropertyAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): FunctionPropertyAssignmentSyntax {\n        return this.update(propertyName, this.callSignature, this.block);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): FunctionPropertyAssignmentSyntax {\n        return this.update(this.propertyName, callSignature, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): FunctionPropertyAssignmentSyntax {\n        return this.update(this.propertyName, this.callSignature, block);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.callSignature.isTypeScriptSpecific()) { return true; }\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class AccessorPropertyAssignmentSyntax extends PropertyAssignmentSyntax {\n        constructor(propertyName: ISyntaxToken,\n                    public openParenToken: ISyntaxToken,\n                    public closeParenToken: ISyntaxToken,\n                    public block: BlockSyntax,\n                    parsedInStrictMode: boolean) {\n            super(propertyName, parsedInStrictMode); \n        }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): AccessorPropertyAssignmentSyntax {\n        return <AccessorPropertyAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): AccessorPropertyAssignmentSyntax {\n        return <AccessorPropertyAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return false;\n    }\n    }\n\n    export class GetAccessorPropertyAssignmentSyntax extends AccessorPropertyAssignmentSyntax {\n\n        constructor(public getKeyword: ISyntaxToken,\n                    propertyName: ISyntaxToken,\n                    openParenToken: ISyntaxToken,\n                    closeParenToken: ISyntaxToken,\n                    public typeAnnotation: TypeAnnotationSyntax,\n                    block: BlockSyntax,\n                    parsedInStrictMode: boolean) {\n            super(propertyName, openParenToken, closeParenToken, block, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitGetAccessorPropertyAssignment(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.GetAccessorPropertyAssignment;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.getKeyword;\n            case 1: return this.propertyName;\n            case 2: return this.openParenToken;\n            case 3: return this.closeParenToken;\n            case 4: return this.typeAnnotation;\n            case 5: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(getKeyword: ISyntaxToken,\n                  propertyName: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  closeParenToken: ISyntaxToken,\n                  typeAnnotation: TypeAnnotationSyntax,\n                  block: BlockSyntax): GetAccessorPropertyAssignmentSyntax {\n        if (this.getKeyword === getKeyword && this.propertyName === propertyName && this.openParenToken === openParenToken && this.closeParenToken === closeParenToken && this.typeAnnotation === typeAnnotation && this.block === block) {\n            return this;\n        }\n\n        return new GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, typeAnnotation, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(getKeyword: ISyntaxToken,\n                         propertyName: ISyntaxToken,\n                         openParenToken: ISyntaxToken,\n                         closeParenToken: ISyntaxToken,\n                         block: BlockSyntax): GetAccessorPropertyAssignmentSyntax {\n        return new GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, null, block, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): GetAccessorPropertyAssignmentSyntax {\n        return new GetAccessorPropertyAssignmentSyntax(Syntax.token(SyntaxKind.GetKeyword), propertyName, Syntax.token(SyntaxKind.OpenParenToken), Syntax.token(SyntaxKind.CloseParenToken), null, BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): GetAccessorPropertyAssignmentSyntax {\n        return <GetAccessorPropertyAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): GetAccessorPropertyAssignmentSyntax {\n        return <GetAccessorPropertyAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withGetKeyword(getKeyword: ISyntaxToken): GetAccessorPropertyAssignmentSyntax {\n        return this.update(getKeyword, this.propertyName, this.openParenToken, this.closeParenToken, this.typeAnnotation, this.block);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): GetAccessorPropertyAssignmentSyntax {\n        return this.update(this.getKeyword, propertyName, this.openParenToken, this.closeParenToken, this.typeAnnotation, this.block);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): GetAccessorPropertyAssignmentSyntax {\n        return this.update(this.getKeyword, this.propertyName, openParenToken, this.closeParenToken, this.typeAnnotation, this.block);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): GetAccessorPropertyAssignmentSyntax {\n        return this.update(this.getKeyword, this.propertyName, this.openParenToken, closeParenToken, this.typeAnnotation, this.block);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): GetAccessorPropertyAssignmentSyntax {\n        return this.update(this.getKeyword, this.propertyName, this.openParenToken, this.closeParenToken, typeAnnotation, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): GetAccessorPropertyAssignmentSyntax {\n        return this.update(this.getKeyword, this.propertyName, this.openParenToken, this.closeParenToken, this.typeAnnotation, block);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.typeAnnotation !== null && this.typeAnnotation.isTypeScriptSpecific()) { return true; }\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class SetAccessorPropertyAssignmentSyntax extends AccessorPropertyAssignmentSyntax {\n\n        constructor(public setKeyword: ISyntaxToken,\n                    propertyName: ISyntaxToken,\n                    openParenToken: ISyntaxToken,\n                    public parameter: ParameterSyntax,\n                    closeParenToken: ISyntaxToken,\n                    block: BlockSyntax,\n                    parsedInStrictMode: boolean) {\n            super(propertyName, openParenToken, closeParenToken, block, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitSetAccessorPropertyAssignment(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.SetAccessorPropertyAssignment;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.setKeyword;\n            case 1: return this.propertyName;\n            case 2: return this.openParenToken;\n            case 3: return this.parameter;\n            case 4: return this.closeParenToken;\n            case 5: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(setKeyword: ISyntaxToken,\n                  propertyName: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  parameter: ParameterSyntax,\n                  closeParenToken: ISyntaxToken,\n                  block: BlockSyntax): SetAccessorPropertyAssignmentSyntax {\n        if (this.setKeyword === setKeyword && this.propertyName === propertyName && this.openParenToken === openParenToken && this.parameter === parameter && this.closeParenToken === closeParenToken && this.block === block) {\n            return this;\n        }\n\n        return new SetAccessorPropertyAssignmentSyntax(setKeyword, propertyName, openParenToken, parameter, closeParenToken, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(propertyName: ISyntaxToken,\n                          parameter: ParameterSyntax): SetAccessorPropertyAssignmentSyntax {\n        return new SetAccessorPropertyAssignmentSyntax(Syntax.token(SyntaxKind.SetKeyword), propertyName, Syntax.token(SyntaxKind.OpenParenToken), parameter, Syntax.token(SyntaxKind.CloseParenToken), BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SetAccessorPropertyAssignmentSyntax {\n        return <SetAccessorPropertyAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SetAccessorPropertyAssignmentSyntax {\n        return <SetAccessorPropertyAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withSetKeyword(setKeyword: ISyntaxToken): SetAccessorPropertyAssignmentSyntax {\n        return this.update(setKeyword, this.propertyName, this.openParenToken, this.parameter, this.closeParenToken, this.block);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): SetAccessorPropertyAssignmentSyntax {\n        return this.update(this.setKeyword, propertyName, this.openParenToken, this.parameter, this.closeParenToken, this.block);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): SetAccessorPropertyAssignmentSyntax {\n        return this.update(this.setKeyword, this.propertyName, openParenToken, this.parameter, this.closeParenToken, this.block);\n    }\n\n    public withParameter(parameter: ParameterSyntax): SetAccessorPropertyAssignmentSyntax {\n        return this.update(this.setKeyword, this.propertyName, this.openParenToken, parameter, this.closeParenToken, this.block);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): SetAccessorPropertyAssignmentSyntax {\n        return this.update(this.setKeyword, this.propertyName, this.openParenToken, this.parameter, closeParenToken, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): SetAccessorPropertyAssignmentSyntax {\n        return this.update(this.setKeyword, this.propertyName, this.openParenToken, this.parameter, this.closeParenToken, block);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.parameter.isTypeScriptSpecific()) { return true; }\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class FunctionExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n        constructor(public functionKeyword: ISyntaxToken,\n                    public identifier: ISyntaxToken,\n                    public callSignature: CallSignatureSyntax,\n                    public block: BlockSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitFunctionExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.FunctionExpression;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.functionKeyword;\n            case 1: return this.identifier;\n            case 2: return this.callSignature;\n            case 3: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(functionKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  callSignature: CallSignatureSyntax,\n                  block: BlockSyntax): FunctionExpressionSyntax {\n        if (this.functionKeyword === functionKeyword && this.identifier === identifier && this.callSignature === callSignature && this.block === block) {\n            return this;\n        }\n\n        return new FunctionExpressionSyntax(functionKeyword, identifier, callSignature, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(functionKeyword: ISyntaxToken,\n                         callSignature: CallSignatureSyntax,\n                         block: BlockSyntax): FunctionExpressionSyntax {\n        return new FunctionExpressionSyntax(functionKeyword, null, callSignature, block, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): FunctionExpressionSyntax {\n        return new FunctionExpressionSyntax(Syntax.token(SyntaxKind.FunctionKeyword), null, CallSignatureSyntax.create1(), BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): FunctionExpressionSyntax {\n        return <FunctionExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): FunctionExpressionSyntax {\n        return <FunctionExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withFunctionKeyword(functionKeyword: ISyntaxToken): FunctionExpressionSyntax {\n        return this.update(functionKeyword, this.identifier, this.callSignature, this.block);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): FunctionExpressionSyntax {\n        return this.update(this.functionKeyword, identifier, this.callSignature, this.block);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): FunctionExpressionSyntax {\n        return this.update(this.functionKeyword, this.identifier, callSignature, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): FunctionExpressionSyntax {\n        return this.update(this.functionKeyword, this.identifier, this.callSignature, block);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.callSignature.isTypeScriptSpecific()) { return true; }\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class EmptyStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitEmptyStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.EmptyStatement;\n    }\n\n    public childCount(): number {\n        return 1;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(semicolonToken: ISyntaxToken): EmptyStatementSyntax {\n        if (this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new EmptyStatementSyntax(semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(): EmptyStatementSyntax {\n        return new EmptyStatementSyntax(Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): EmptyStatementSyntax {\n        return <EmptyStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): EmptyStatementSyntax {\n        return <EmptyStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): EmptyStatementSyntax {\n        return this.update(semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return false;\n    }\n    }\n\n    export class TryStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public tryKeyword: ISyntaxToken,\n                    public block: BlockSyntax,\n                    public catchClause: CatchClauseSyntax,\n                    public finallyClause: FinallyClauseSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitTryStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.TryStatement;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.tryKeyword;\n            case 1: return this.block;\n            case 2: return this.catchClause;\n            case 3: return this.finallyClause;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(tryKeyword: ISyntaxToken,\n                  block: BlockSyntax,\n                  catchClause: CatchClauseSyntax,\n                  finallyClause: FinallyClauseSyntax): TryStatementSyntax {\n        if (this.tryKeyword === tryKeyword && this.block === block && this.catchClause === catchClause && this.finallyClause === finallyClause) {\n            return this;\n        }\n\n        return new TryStatementSyntax(tryKeyword, block, catchClause, finallyClause, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(tryKeyword: ISyntaxToken,\n                         block: BlockSyntax): TryStatementSyntax {\n        return new TryStatementSyntax(tryKeyword, block, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): TryStatementSyntax {\n        return new TryStatementSyntax(Syntax.token(SyntaxKind.TryKeyword), BlockSyntax.create1(), null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): TryStatementSyntax {\n        return <TryStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): TryStatementSyntax {\n        return <TryStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withTryKeyword(tryKeyword: ISyntaxToken): TryStatementSyntax {\n        return this.update(tryKeyword, this.block, this.catchClause, this.finallyClause);\n    }\n\n    public withBlock(block: BlockSyntax): TryStatementSyntax {\n        return this.update(this.tryKeyword, block, this.catchClause, this.finallyClause);\n    }\n\n    public withCatchClause(catchClause: CatchClauseSyntax): TryStatementSyntax {\n        return this.update(this.tryKeyword, this.block, catchClause, this.finallyClause);\n    }\n\n    public withFinallyClause(finallyClause: FinallyClauseSyntax): TryStatementSyntax {\n        return this.update(this.tryKeyword, this.block, this.catchClause, finallyClause);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        if (this.catchClause !== null && this.catchClause.isTypeScriptSpecific()) { return true; }\n        if (this.finallyClause !== null && this.finallyClause.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class CatchClauseSyntax extends SyntaxNode {\n\n        constructor(public catchKeyword: ISyntaxToken,\n                    public openParenToken: ISyntaxToken,\n                    public identifier: ISyntaxToken,\n                    public typeAnnotation: TypeAnnotationSyntax,\n                    public closeParenToken: ISyntaxToken,\n                    public block: BlockSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitCatchClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.CatchClause;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.catchKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.identifier;\n            case 3: return this.typeAnnotation;\n            case 4: return this.closeParenToken;\n            case 5: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(catchKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  typeAnnotation: TypeAnnotationSyntax,\n                  closeParenToken: ISyntaxToken,\n                  block: BlockSyntax): CatchClauseSyntax {\n        if (this.catchKeyword === catchKeyword && this.openParenToken === openParenToken && this.identifier === identifier && this.typeAnnotation === typeAnnotation && this.closeParenToken === closeParenToken && this.block === block) {\n            return this;\n        }\n\n        return new CatchClauseSyntax(catchKeyword, openParenToken, identifier, typeAnnotation, closeParenToken, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(catchKeyword: ISyntaxToken,\n                         openParenToken: ISyntaxToken,\n                         identifier: ISyntaxToken,\n                         closeParenToken: ISyntaxToken,\n                         block: BlockSyntax): CatchClauseSyntax {\n        return new CatchClauseSyntax(catchKeyword, openParenToken, identifier, null, closeParenToken, block, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): CatchClauseSyntax {\n        return new CatchClauseSyntax(Syntax.token(SyntaxKind.CatchKeyword), Syntax.token(SyntaxKind.OpenParenToken), identifier, null, Syntax.token(SyntaxKind.CloseParenToken), BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): CatchClauseSyntax {\n        return <CatchClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): CatchClauseSyntax {\n        return <CatchClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withCatchKeyword(catchKeyword: ISyntaxToken): CatchClauseSyntax {\n        return this.update(catchKeyword, this.openParenToken, this.identifier, this.typeAnnotation, this.closeParenToken, this.block);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): CatchClauseSyntax {\n        return this.update(this.catchKeyword, openParenToken, this.identifier, this.typeAnnotation, this.closeParenToken, this.block);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): CatchClauseSyntax {\n        return this.update(this.catchKeyword, this.openParenToken, identifier, this.typeAnnotation, this.closeParenToken, this.block);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): CatchClauseSyntax {\n        return this.update(this.catchKeyword, this.openParenToken, this.identifier, typeAnnotation, this.closeParenToken, this.block);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): CatchClauseSyntax {\n        return this.update(this.catchKeyword, this.openParenToken, this.identifier, this.typeAnnotation, closeParenToken, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): CatchClauseSyntax {\n        return this.update(this.catchKeyword, this.openParenToken, this.identifier, this.typeAnnotation, this.closeParenToken, block);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.typeAnnotation !== null && this.typeAnnotation.isTypeScriptSpecific()) { return true; }\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class FinallyClauseSyntax extends SyntaxNode {\n\n        constructor(public finallyKeyword: ISyntaxToken,\n                    public block: BlockSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitFinallyClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.FinallyClause;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.finallyKeyword;\n            case 1: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(finallyKeyword: ISyntaxToken,\n                  block: BlockSyntax): FinallyClauseSyntax {\n        if (this.finallyKeyword === finallyKeyword && this.block === block) {\n            return this;\n        }\n\n        return new FinallyClauseSyntax(finallyKeyword, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(): FinallyClauseSyntax {\n        return new FinallyClauseSyntax(Syntax.token(SyntaxKind.FinallyKeyword), BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): FinallyClauseSyntax {\n        return <FinallyClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): FinallyClauseSyntax {\n        return <FinallyClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withFinallyKeyword(finallyKeyword: ISyntaxToken): FinallyClauseSyntax {\n        return this.update(finallyKeyword, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): FinallyClauseSyntax {\n        return this.update(this.finallyKeyword, block);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class LabeledStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public identifier: ISyntaxToken,\n                    public colonToken: ISyntaxToken,\n                    public statement: IStatementSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitLabeledStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.LabeledStatement;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.identifier;\n            case 1: return this.colonToken;\n            case 2: return this.statement;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(identifier: ISyntaxToken,\n                  colonToken: ISyntaxToken,\n                  statement: IStatementSyntax): LabeledStatementSyntax {\n        if (this.identifier === identifier && this.colonToken === colonToken && this.statement === statement) {\n            return this;\n        }\n\n        return new LabeledStatementSyntax(identifier, colonToken, statement, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(identifier: ISyntaxToken,\n                          statement: IStatementSyntax): LabeledStatementSyntax {\n        return new LabeledStatementSyntax(identifier, Syntax.token(SyntaxKind.ColonToken), statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): LabeledStatementSyntax {\n        return <LabeledStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): LabeledStatementSyntax {\n        return <LabeledStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): LabeledStatementSyntax {\n        return this.update(identifier, this.colonToken, this.statement);\n    }\n\n    public withColonToken(colonToken: ISyntaxToken): LabeledStatementSyntax {\n        return this.update(this.identifier, colonToken, this.statement);\n    }\n\n    public withStatement(statement: IStatementSyntax): LabeledStatementSyntax {\n        return this.update(this.identifier, this.colonToken, statement);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class DoStatementSyntax extends IterationStatementSyntax {\n\n        constructor(public doKeyword: ISyntaxToken,\n                    statement: IStatementSyntax,\n                    public whileKeyword: ISyntaxToken,\n                    openParenToken: ISyntaxToken,\n                    public condition: IExpressionSyntax,\n                    closeParenToken: ISyntaxToken,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(openParenToken, closeParenToken, statement, parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitDoStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.DoStatement;\n    }\n\n    public childCount(): number {\n        return 7;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.doKeyword;\n            case 1: return this.statement;\n            case 2: return this.whileKeyword;\n            case 3: return this.openParenToken;\n            case 4: return this.condition;\n            case 5: return this.closeParenToken;\n            case 6: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(doKeyword: ISyntaxToken,\n                  statement: IStatementSyntax,\n                  whileKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  condition: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  semicolonToken: ISyntaxToken): DoStatementSyntax {\n        if (this.doKeyword === doKeyword && this.statement === statement && this.whileKeyword === whileKeyword && this.openParenToken === openParenToken && this.condition === condition && this.closeParenToken === closeParenToken && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new DoStatementSyntax(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(statement: IStatementSyntax,\n                          condition: IExpressionSyntax): DoStatementSyntax {\n        return new DoStatementSyntax(Syntax.token(SyntaxKind.DoKeyword), statement, Syntax.token(SyntaxKind.WhileKeyword), Syntax.token(SyntaxKind.OpenParenToken), condition, Syntax.token(SyntaxKind.CloseParenToken), Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): DoStatementSyntax {\n        return <DoStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): DoStatementSyntax {\n        return <DoStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withDoKeyword(doKeyword: ISyntaxToken): DoStatementSyntax {\n        return this.update(doKeyword, this.statement, this.whileKeyword, this.openParenToken, this.condition, this.closeParenToken, this.semicolonToken);\n    }\n\n    public withStatement(statement: IStatementSyntax): DoStatementSyntax {\n        return this.update(this.doKeyword, statement, this.whileKeyword, this.openParenToken, this.condition, this.closeParenToken, this.semicolonToken);\n    }\n\n    public withWhileKeyword(whileKeyword: ISyntaxToken): DoStatementSyntax {\n        return this.update(this.doKeyword, this.statement, whileKeyword, this.openParenToken, this.condition, this.closeParenToken, this.semicolonToken);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): DoStatementSyntax {\n        return this.update(this.doKeyword, this.statement, this.whileKeyword, openParenToken, this.condition, this.closeParenToken, this.semicolonToken);\n    }\n\n    public withCondition(condition: IExpressionSyntax): DoStatementSyntax {\n        return this.update(this.doKeyword, this.statement, this.whileKeyword, this.openParenToken, condition, this.closeParenToken, this.semicolonToken);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): DoStatementSyntax {\n        return this.update(this.doKeyword, this.statement, this.whileKeyword, this.openParenToken, this.condition, closeParenToken, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): DoStatementSyntax {\n        return this.update(this.doKeyword, this.statement, this.whileKeyword, this.openParenToken, this.condition, this.closeParenToken, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        if (this.condition.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class TypeOfExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n        constructor(public typeOfKeyword: ISyntaxToken,\n                    public expression: IExpressionSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitTypeOfExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.TypeOfExpression;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.typeOfKeyword;\n            case 1: return this.expression;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(typeOfKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax): TypeOfExpressionSyntax {\n        if (this.typeOfKeyword === typeOfKeyword && this.expression === expression) {\n            return this;\n        }\n\n        return new TypeOfExpressionSyntax(typeOfKeyword, expression, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): TypeOfExpressionSyntax {\n        return new TypeOfExpressionSyntax(Syntax.token(SyntaxKind.TypeOfKeyword), expression, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): TypeOfExpressionSyntax {\n        return <TypeOfExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): TypeOfExpressionSyntax {\n        return <TypeOfExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withTypeOfKeyword(typeOfKeyword: ISyntaxToken): TypeOfExpressionSyntax {\n        return this.update(typeOfKeyword, this.expression);\n    }\n\n    public withExpression(expression: IExpressionSyntax): TypeOfExpressionSyntax {\n        return this.update(this.typeOfKeyword, expression);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class DeleteExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n        constructor(public deleteKeyword: ISyntaxToken,\n                    public expression: IExpressionSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitDeleteExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.DeleteExpression;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.deleteKeyword;\n            case 1: return this.expression;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(deleteKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax): DeleteExpressionSyntax {\n        if (this.deleteKeyword === deleteKeyword && this.expression === expression) {\n            return this;\n        }\n\n        return new DeleteExpressionSyntax(deleteKeyword, expression, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): DeleteExpressionSyntax {\n        return new DeleteExpressionSyntax(Syntax.token(SyntaxKind.DeleteKeyword), expression, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): DeleteExpressionSyntax {\n        return <DeleteExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): DeleteExpressionSyntax {\n        return <DeleteExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withDeleteKeyword(deleteKeyword: ISyntaxToken): DeleteExpressionSyntax {\n        return this.update(deleteKeyword, this.expression);\n    }\n\n    public withExpression(expression: IExpressionSyntax): DeleteExpressionSyntax {\n        return this.update(this.deleteKeyword, expression);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class VoidExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n        constructor(public voidKeyword: ISyntaxToken,\n                    public expression: IExpressionSyntax,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitVoidExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.VoidExpression;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.voidKeyword;\n            case 1: return this.expression;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isUnaryExpression(): boolean {\n        return true;\n    }\n\n    public isExpression(): boolean {\n        return true;\n    }\n\n    public update(voidKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax): VoidExpressionSyntax {\n        if (this.voidKeyword === voidKeyword && this.expression === expression) {\n            return this;\n        }\n\n        return new VoidExpressionSyntax(voidKeyword, expression, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): VoidExpressionSyntax {\n        return new VoidExpressionSyntax(Syntax.token(SyntaxKind.VoidKeyword), expression, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): VoidExpressionSyntax {\n        return <VoidExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): VoidExpressionSyntax {\n        return <VoidExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withVoidKeyword(voidKeyword: ISyntaxToken): VoidExpressionSyntax {\n        return this.update(voidKeyword, this.expression);\n    }\n\n    public withExpression(expression: IExpressionSyntax): VoidExpressionSyntax {\n        return this.update(this.voidKeyword, expression);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class DebuggerStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n        constructor(public debuggerKeyword: ISyntaxToken,\n                    public semicolonToken: ISyntaxToken,\n                    parsedInStrictMode: boolean) {\n            super(parsedInStrictMode); \n\n        }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitDebuggerStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.DebuggerStatement;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.debuggerKeyword;\n            case 1: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public isStatement(): boolean {\n        return true;\n    }\n\n    public isModuleElement(): boolean {\n        return true;\n    }\n\n    public update(debuggerKeyword: ISyntaxToken,\n                  semicolonToken: ISyntaxToken): DebuggerStatementSyntax {\n        if (this.debuggerKeyword === debuggerKeyword && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new DebuggerStatementSyntax(debuggerKeyword, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(): DebuggerStatementSyntax {\n        return new DebuggerStatementSyntax(Syntax.token(SyntaxKind.DebuggerKeyword), Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): DebuggerStatementSyntax {\n        return <DebuggerStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): DebuggerStatementSyntax {\n        return <DebuggerStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withDebuggerKeyword(debuggerKeyword: ISyntaxToken): DebuggerStatementSyntax {\n        return this.update(debuggerKeyword, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): DebuggerStatementSyntax {\n        return this.update(this.debuggerKeyword, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): boolean {\n        return false;\n    }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class SyntaxRewriter implements ISyntaxVisitor {\n        public visitToken(token: ISyntaxToken): ISyntaxToken {\n            return token;\n        }\n\n        public visitNode(node: SyntaxNode): SyntaxNode {\n            return node.accept(this);\n        }\n\n        public visitNodeOrToken(node: ISyntaxNodeOrToken): ISyntaxNodeOrToken {\n            return node.isToken() ? <ISyntaxNodeOrToken>this.visitToken(<ISyntaxToken>node) : this.visitNode(<SyntaxNode>node);\n        }\n\n        public visitList(list: ISyntaxList): ISyntaxList {\n            var newItems: ISyntaxNodeOrToken[] = null;\n\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                var item = list.childAt(i);\n                var newItem = this.visitNodeOrToken(item);\n\n                if (item !== newItem && newItems === null) {\n                    newItems = [];\n                    for (var j = 0; j < i; j++) {\n                        newItems.push(list.childAt(j));\n                    }\n                }\n\n                if (newItems) {\n                    newItems.push(newItem);\n                }\n            }\n\n            // Debug.assert(newItems === null || newItems.length === list.childCount());\n            return newItems === null ? list : Syntax.list(newItems);\n        }\n\n        public visitSeparatedList(list: ISeparatedSyntaxList): ISeparatedSyntaxList {\n            var newItems: ISyntaxNodeOrToken[] = null;\n\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                var item = list.childAt(i);\n                var newItem = item.isToken() ? <ISyntaxNodeOrToken>this.visitToken(<ISyntaxToken>item) : this.visitNode(<SyntaxNode>item);\n\n                if (item !== newItem && newItems === null) {\n                    newItems = [];\n                    for (var j = 0; j < i; j++) {\n                        newItems.push(list.childAt(j));\n                    }\n                }\n\n                if (newItems) {\n                    newItems.push(newItem);\n                }\n            }\n\n            // Debug.assert(newItems === null || newItems.length === list.childCount());\n            return newItems === null ? list : Syntax.separatedList(newItems);\n        }\n\n        public visitSourceUnit(node: SourceUnitSyntax): any {\n            return node.update(\n                this.visitList(node.moduleElements),\n                this.visitToken(node.endOfFileToken));\n        }\n\n        public visitExternalModuleReference(node: ExternalModuleReferenceSyntax): any {\n            return node.update(\n                this.visitToken(node.moduleOrRequireKeyword),\n                this.visitToken(node.openParenToken),\n                this.visitToken(node.stringLiteral),\n                this.visitToken(node.closeParenToken));\n        }\n\n        public visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): any {\n            return node.update(\n                <INameSyntax>this.visitNodeOrToken(node.moduleName));\n        }\n\n        public visitImportDeclaration(node: ImportDeclarationSyntax): any {\n            return node.update(\n                this.visitToken(node.importKeyword),\n                this.visitToken(node.identifier),\n                this.visitToken(node.equalsToken),\n                <ModuleReferenceSyntax>this.visitNode(node.moduleReference),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitExportAssignment(node: ExportAssignmentSyntax): any {\n            return node.update(\n                this.visitToken(node.exportKeyword),\n                this.visitToken(node.equalsToken),\n                this.visitToken(node.identifier),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitClassDeclaration(node: ClassDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.classKeyword),\n                this.visitToken(node.identifier),\n                node.typeParameterList === null ? null : <TypeParameterListSyntax>this.visitNode(node.typeParameterList),\n                this.visitList(node.heritageClauses),\n                this.visitToken(node.openBraceToken),\n                this.visitList(node.classElements),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.interfaceKeyword),\n                this.visitToken(node.identifier),\n                node.typeParameterList === null ? null : <TypeParameterListSyntax>this.visitNode(node.typeParameterList),\n                this.visitList(node.heritageClauses),\n                <ObjectTypeSyntax>this.visitNode(node.body));\n        }\n\n        public visitHeritageClause(node: HeritageClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.extendsOrImplementsKeyword),\n                this.visitSeparatedList(node.typeNames));\n        }\n\n        public visitModuleDeclaration(node: ModuleDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.moduleKeyword),\n                node.moduleName === null ? null : <INameSyntax>this.visitNodeOrToken(node.moduleName),\n                node.stringLiteral === null ? null : this.visitToken(node.stringLiteral),\n                this.visitToken(node.openBraceToken),\n                this.visitList(node.moduleElements),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitFunctionDeclaration(node: FunctionDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.functionKeyword),\n                this.visitToken(node.identifier),\n                <CallSignatureSyntax>this.visitNode(node.callSignature),\n                node.block === null ? null : <BlockSyntax>this.visitNode(node.block),\n                node.semicolonToken === null ? null : this.visitToken(node.semicolonToken));\n        }\n\n        public visitVariableStatement(node: VariableStatementSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                <VariableDeclarationSyntax>this.visitNode(node.variableDeclaration),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitVariableDeclaration(node: VariableDeclarationSyntax): any {\n            return node.update(\n                this.visitToken(node.varKeyword),\n                this.visitSeparatedList(node.variableDeclarators));\n        }\n\n        public visitVariableDeclarator(node: VariableDeclaratorSyntax): any {\n            return node.update(\n                this.visitToken(node.identifier),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation),\n                node.equalsValueClause === null ? null : <EqualsValueClauseSyntax>this.visitNode(node.equalsValueClause));\n        }\n\n        public visitEqualsValueClause(node: EqualsValueClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.equalsToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.value));\n        }\n\n        public visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): any {\n            return node.update(\n                node.kind(),\n                this.visitToken(node.operatorToken),\n                <IUnaryExpressionSyntax>this.visitNodeOrToken(node.operand));\n        }\n\n        public visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.openBracketToken),\n                this.visitSeparatedList(node.expressions),\n                this.visitToken(node.closeBracketToken));\n        }\n\n        public visitOmittedExpression(node: OmittedExpressionSyntax): any {\n            return node;\n        }\n\n        public visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.openParenToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.closeParenToken));\n        }\n\n        public visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.identifier),\n                this.visitToken(node.equalsGreaterThanToken),\n                <ISyntaxNodeOrToken>this.visitNodeOrToken(node.body));\n        }\n\n        public visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): any {\n            return node.update(\n                <CallSignatureSyntax>this.visitNode(node.callSignature),\n                this.visitToken(node.equalsGreaterThanToken),\n                <ISyntaxNodeOrToken>this.visitNodeOrToken(node.body));\n        }\n\n        public visitQualifiedName(node: QualifiedNameSyntax): any {\n            return node.update(\n                <INameSyntax>this.visitNodeOrToken(node.left),\n                this.visitToken(node.dotToken),\n                this.visitToken(node.right));\n        }\n\n        public visitTypeArgumentList(node: TypeArgumentListSyntax): any {\n            return node.update(\n                this.visitToken(node.lessThanToken),\n                this.visitSeparatedList(node.typeArguments),\n                this.visitToken(node.greaterThanToken));\n        }\n\n        public visitConstructorType(node: ConstructorTypeSyntax): any {\n            return node.update(\n                this.visitToken(node.newKeyword),\n                node.typeParameterList === null ? null : <TypeParameterListSyntax>this.visitNode(node.typeParameterList),\n                <ParameterListSyntax>this.visitNode(node.parameterList),\n                this.visitToken(node.equalsGreaterThanToken),\n                <ITypeSyntax>this.visitNodeOrToken(node.type));\n        }\n\n        public visitFunctionType(node: FunctionTypeSyntax): any {\n            return node.update(\n                node.typeParameterList === null ? null : <TypeParameterListSyntax>this.visitNode(node.typeParameterList),\n                <ParameterListSyntax>this.visitNode(node.parameterList),\n                this.visitToken(node.equalsGreaterThanToken),\n                <ITypeSyntax>this.visitNodeOrToken(node.type));\n        }\n\n        public visitObjectType(node: ObjectTypeSyntax): any {\n            return node.update(\n                this.visitToken(node.openBraceToken),\n                this.visitSeparatedList(node.typeMembers),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitArrayType(node: ArrayTypeSyntax): any {\n            return node.update(\n                <ITypeSyntax>this.visitNodeOrToken(node.type),\n                this.visitToken(node.openBracketToken),\n                this.visitToken(node.closeBracketToken));\n        }\n\n        public visitGenericType(node: GenericTypeSyntax): any {\n            return node.update(\n                <INameSyntax>this.visitNodeOrToken(node.name),\n                <TypeArgumentListSyntax>this.visitNode(node.typeArgumentList));\n        }\n\n        public visitTypeAnnotation(node: TypeAnnotationSyntax): any {\n            return node.update(\n                this.visitToken(node.colonToken),\n                <ITypeSyntax>this.visitNodeOrToken(node.type));\n        }\n\n        public visitBlock(node: BlockSyntax): any {\n            return node.update(\n                this.visitToken(node.openBraceToken),\n                this.visitList(node.statements),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitParameter(node: ParameterSyntax): any {\n            return node.update(\n                node.dotDotDotToken === null ? null : this.visitToken(node.dotDotDotToken),\n                node.publicOrPrivateKeyword === null ? null : this.visitToken(node.publicOrPrivateKeyword),\n                this.visitToken(node.identifier),\n                node.questionToken === null ? null : this.visitToken(node.questionToken),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation),\n                node.equalsValueClause === null ? null : <EqualsValueClauseSyntax>this.visitNode(node.equalsValueClause));\n        }\n\n        public visitMemberAccessExpression(node: MemberAccessExpressionSyntax): any {\n            return node.update(\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.dotToken),\n                this.visitToken(node.name));\n        }\n\n        public visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): any {\n            return node.update(\n                node.kind(),\n                <IExpressionSyntax>this.visitNodeOrToken(node.operand),\n                this.visitToken(node.operatorToken));\n        }\n\n        public visitElementAccessExpression(node: ElementAccessExpressionSyntax): any {\n            return node.update(\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.openBracketToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.argumentExpression),\n                this.visitToken(node.closeBracketToken));\n        }\n\n        public visitInvocationExpression(node: InvocationExpressionSyntax): any {\n            return node.update(\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                <ArgumentListSyntax>this.visitNode(node.argumentList));\n        }\n\n        public visitArgumentList(node: ArgumentListSyntax): any {\n            return node.update(\n                node.typeArgumentList === null ? null : <TypeArgumentListSyntax>this.visitNode(node.typeArgumentList),\n                this.visitToken(node.openParenToken),\n                this.visitSeparatedList(node.arguments),\n                this.visitToken(node.closeParenToken));\n        }\n\n        public visitBinaryExpression(node: BinaryExpressionSyntax): any {\n            return node.update(\n                node.kind(),\n                <IExpressionSyntax>this.visitNodeOrToken(node.left),\n                this.visitToken(node.operatorToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.right));\n        }\n\n        public visitConditionalExpression(node: ConditionalExpressionSyntax): any {\n            return node.update(\n                <IExpressionSyntax>this.visitNodeOrToken(node.condition),\n                this.visitToken(node.questionToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.whenTrue),\n                this.visitToken(node.colonToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.whenFalse));\n        }\n\n        public visitConstructSignature(node: ConstructSignatureSyntax): any {\n            return node.update(\n                this.visitToken(node.newKeyword),\n                <CallSignatureSyntax>this.visitNode(node.callSignature));\n        }\n\n        public visitMethodSignature(node: MethodSignatureSyntax): any {\n            return node.update(\n                this.visitToken(node.propertyName),\n                node.questionToken === null ? null : this.visitToken(node.questionToken),\n                <CallSignatureSyntax>this.visitNode(node.callSignature));\n        }\n\n        public visitIndexSignature(node: IndexSignatureSyntax): any {\n            return node.update(\n                this.visitToken(node.openBracketToken),\n                <ParameterSyntax>this.visitNode(node.parameter),\n                this.visitToken(node.closeBracketToken),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation));\n        }\n\n        public visitPropertySignature(node: PropertySignatureSyntax): any {\n            return node.update(\n                this.visitToken(node.propertyName),\n                node.questionToken === null ? null : this.visitToken(node.questionToken),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation));\n        }\n\n        public visitCallSignature(node: CallSignatureSyntax): any {\n            return node.update(\n                node.typeParameterList === null ? null : <TypeParameterListSyntax>this.visitNode(node.typeParameterList),\n                <ParameterListSyntax>this.visitNode(node.parameterList),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation));\n        }\n\n        public visitParameterList(node: ParameterListSyntax): any {\n            return node.update(\n                this.visitToken(node.openParenToken),\n                this.visitSeparatedList(node.parameters),\n                this.visitToken(node.closeParenToken));\n        }\n\n        public visitTypeParameterList(node: TypeParameterListSyntax): any {\n            return node.update(\n                this.visitToken(node.lessThanToken),\n                this.visitSeparatedList(node.typeParameters),\n                this.visitToken(node.greaterThanToken));\n        }\n\n        public visitTypeParameter(node: TypeParameterSyntax): any {\n            return node.update(\n                this.visitToken(node.identifier),\n                node.constraint === null ? null : <ConstraintSyntax>this.visitNode(node.constraint));\n        }\n\n        public visitConstraint(node: ConstraintSyntax): any {\n            return node.update(\n                this.visitToken(node.extendsKeyword),\n                <ITypeSyntax>this.visitNodeOrToken(node.type));\n        }\n\n        public visitElseClause(node: ElseClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.elseKeyword),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement));\n        }\n\n        public visitIfStatement(node: IfStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.ifKeyword),\n                this.visitToken(node.openParenToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.condition),\n                this.visitToken(node.closeParenToken),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement),\n                node.elseClause === null ? null : <ElseClauseSyntax>this.visitNode(node.elseClause));\n        }\n\n        public visitExpressionStatement(node: ExpressionStatementSyntax): any {\n            return node.update(\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitConstructorDeclaration(node: ConstructorDeclarationSyntax): any {\n            return node.update(\n                this.visitToken(node.constructorKeyword),\n                <ParameterListSyntax>this.visitNode(node.parameterList),\n                node.block === null ? null : <BlockSyntax>this.visitNode(node.block),\n                node.semicolonToken === null ? null : this.visitToken(node.semicolonToken));\n        }\n\n        public visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.propertyName),\n                <CallSignatureSyntax>this.visitNode(node.callSignature),\n                node.block === null ? null : <BlockSyntax>this.visitNode(node.block),\n                node.semicolonToken === null ? null : this.visitToken(node.semicolonToken));\n        }\n\n        public visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.getKeyword),\n                this.visitToken(node.propertyName),\n                <ParameterListSyntax>this.visitNode(node.parameterList),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.setKeyword),\n                this.visitToken(node.propertyName),\n                <ParameterListSyntax>this.visitNode(node.parameterList),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                <VariableDeclaratorSyntax>this.visitNode(node.variableDeclarator),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitThrowStatement(node: ThrowStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.throwKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitReturnStatement(node: ReturnStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.returnKeyword),\n                node.expression === null ? null : <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.newKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                node.argumentList === null ? null : <ArgumentListSyntax>this.visitNode(node.argumentList));\n        }\n\n        public visitSwitchStatement(node: SwitchStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.switchKeyword),\n                this.visitToken(node.openParenToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.closeParenToken),\n                this.visitToken(node.openBraceToken),\n                this.visitList(node.switchClauses),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitCaseSwitchClause(node: CaseSwitchClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.caseKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.colonToken),\n                this.visitList(node.statements));\n        }\n\n        public visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.defaultKeyword),\n                this.visitToken(node.colonToken),\n                this.visitList(node.statements));\n        }\n\n        public visitBreakStatement(node: BreakStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.breakKeyword),\n                node.identifier === null ? null : this.visitToken(node.identifier),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitContinueStatement(node: ContinueStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.continueKeyword),\n                node.identifier === null ? null : this.visitToken(node.identifier),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitForStatement(node: ForStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.forKeyword),\n                this.visitToken(node.openParenToken),\n                node.variableDeclaration === null ? null : <VariableDeclarationSyntax>this.visitNode(node.variableDeclaration),\n                node.initializer === null ? null : <IExpressionSyntax>this.visitNodeOrToken(node.initializer),\n                this.visitToken(node.firstSemicolonToken),\n                node.condition === null ? null : <IExpressionSyntax>this.visitNodeOrToken(node.condition),\n                this.visitToken(node.secondSemicolonToken),\n                node.incrementor === null ? null : <IExpressionSyntax>this.visitNodeOrToken(node.incrementor),\n                this.visitToken(node.closeParenToken),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement));\n        }\n\n        public visitForInStatement(node: ForInStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.forKeyword),\n                this.visitToken(node.openParenToken),\n                node.variableDeclaration === null ? null : <VariableDeclarationSyntax>this.visitNode(node.variableDeclaration),\n                node.left === null ? null : <IExpressionSyntax>this.visitNodeOrToken(node.left),\n                this.visitToken(node.inKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.closeParenToken),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement));\n        }\n\n        public visitWhileStatement(node: WhileStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.whileKeyword),\n                this.visitToken(node.openParenToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.condition),\n                this.visitToken(node.closeParenToken),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement));\n        }\n\n        public visitWithStatement(node: WithStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.withKeyword),\n                this.visitToken(node.openParenToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.condition),\n                this.visitToken(node.closeParenToken),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement));\n        }\n\n        public visitEnumDeclaration(node: EnumDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.enumKeyword),\n                this.visitToken(node.identifier),\n                this.visitToken(node.openBraceToken),\n                this.visitSeparatedList(node.enumElements),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitEnumElement(node: EnumElementSyntax): any {\n            return node.update(\n                this.visitToken(node.propertyName),\n                node.equalsValueClause === null ? null : <EqualsValueClauseSyntax>this.visitNode(node.equalsValueClause));\n        }\n\n        public visitCastExpression(node: CastExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.lessThanToken),\n                <ITypeSyntax>this.visitNodeOrToken(node.type),\n                this.visitToken(node.greaterThanToken),\n                <IUnaryExpressionSyntax>this.visitNodeOrToken(node.expression));\n        }\n\n        public visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.openBraceToken),\n                this.visitSeparatedList(node.propertyAssignments),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): any {\n            return node.update(\n                this.visitToken(node.propertyName),\n                this.visitToken(node.colonToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression));\n        }\n\n        public visitFunctionPropertyAssignment(node: FunctionPropertyAssignmentSyntax): any {\n            return node.update(\n                this.visitToken(node.propertyName),\n                <CallSignatureSyntax>this.visitNode(node.callSignature),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): any {\n            return node.update(\n                this.visitToken(node.getKeyword),\n                this.visitToken(node.propertyName),\n                this.visitToken(node.openParenToken),\n                this.visitToken(node.closeParenToken),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): any {\n            return node.update(\n                this.visitToken(node.setKeyword),\n                this.visitToken(node.propertyName),\n                this.visitToken(node.openParenToken),\n                <ParameterSyntax>this.visitNode(node.parameter),\n                this.visitToken(node.closeParenToken),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitFunctionExpression(node: FunctionExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.functionKeyword),\n                node.identifier === null ? null : this.visitToken(node.identifier),\n                <CallSignatureSyntax>this.visitNode(node.callSignature),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitEmptyStatement(node: EmptyStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitTryStatement(node: TryStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.tryKeyword),\n                <BlockSyntax>this.visitNode(node.block),\n                node.catchClause === null ? null : <CatchClauseSyntax>this.visitNode(node.catchClause),\n                node.finallyClause === null ? null : <FinallyClauseSyntax>this.visitNode(node.finallyClause));\n        }\n\n        public visitCatchClause(node: CatchClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.catchKeyword),\n                this.visitToken(node.openParenToken),\n                this.visitToken(node.identifier),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation),\n                this.visitToken(node.closeParenToken),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitFinallyClause(node: FinallyClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.finallyKeyword),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitLabeledStatement(node: LabeledStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.identifier),\n                this.visitToken(node.colonToken),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement));\n        }\n\n        public visitDoStatement(node: DoStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.doKeyword),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement),\n                this.visitToken(node.whileKeyword),\n                this.visitToken(node.openParenToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.condition),\n                this.visitToken(node.closeParenToken),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitTypeOfExpression(node: TypeOfExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.typeOfKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression));\n        }\n\n        public visitDeleteExpression(node: DeleteExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.deleteKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression));\n        }\n\n        public visitVoidExpression(node: VoidExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.voidKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression));\n        }\n\n        public visitDebuggerStatement(node: DebuggerStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.debuggerKeyword),\n                this.visitToken(node.semicolonToken));\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class SyntaxDedenter extends SyntaxRewriter {\n        private lastTriviaWasNewLine: boolean;\n\n        constructor(dedentFirstToken: boolean,\n                    private dedentationAmount: number,\n                    private minimumIndent: number,\n                    private options: FormattingOptions) {\n            super();\n            this.lastTriviaWasNewLine = dedentFirstToken;\n        }\n\n        private abort(): void {\n            this.lastTriviaWasNewLine = false;\n            this.dedentationAmount = 0;\n        }\n\n        private isAborted(): boolean {\n            return this.dedentationAmount === 0;\n        }\n\n        public visitToken(token: ISyntaxToken): ISyntaxToken {\n            if (token.width() === 0) {\n                return token;\n            }\n\n            var result = token;\n            if (this.lastTriviaWasNewLine) {\n                // have to add our indentation to every line that this token hits.\n                result = token.withLeadingTrivia(this.dedentTriviaList(token.leadingTrivia()));\n            }\n\n            if (this.isAborted()) {\n                // If we\'ve decided to stop dedenting.  Then just return immediately.\n                return token;\n            }\n\n            this.lastTriviaWasNewLine = token.hasTrailingNewLine();\n            return result;\n        }\n\n        private dedentTriviaList(triviaList: ISyntaxTriviaList): ISyntaxTriviaList {\n            var result = [];\n            var dedentNextWhitespace = true;\n\n            // Keep walking through all our trivia (as long as we haven\'t decided to stop dedenting).\n            // Adjust the indentation on any whitespace trivia at the start of a line, or any multi-line\n            // trivia that span multiple lines.\n            for (var i = 0, n = triviaList.count(); i < n && !this.isAborted(); i++) {\n                var trivia = triviaList.syntaxTriviaAt(i);\n\n                var dedentThisTrivia = dedentNextWhitespace;\n                dedentNextWhitespace = false;\n\n                if (dedentThisTrivia) {\n                    if (trivia.kind() === SyntaxKind.WhitespaceTrivia) {\n                        // We pass in if there was a following newline after this whitespace.  If there \n                        // is, then it\'s fine if we dedent this newline all the way to 0.  Otherwise,\n                        // if the whitespace is followed by something, then we need to determine how \n                        // much of the whitespace we can remove.  If we can\'t remove all that we want,\n                        // we\'ll need to adjust the dedentAmount.  And, if we can\'t remove at all, then\n                        // we need to stop dedenting entirely.\n                        var hasFollowingNewLine = (i < triviaList.count() - 1) &&\n                                                  triviaList.syntaxTriviaAt(i + 1).kind() === SyntaxKind.NewLineTrivia;\n                        result.push(this.dedentWhitespace(trivia, hasFollowingNewLine));\n                        continue;\n                    }\n                    else if (trivia.kind() !== SyntaxKind.NewLineTrivia) {\n                        // We wanted to dedent, but the trivia we\'re on isn\'t whitespace and wasn\'t a \n                        // newline.  That means that we have something like a comment at the beginning\n                        // of the line that we can\'t dedent.  And, if we can\'t dedent it, then we \n                        // shouldn\'t dedent this token or any more tokens.\n                        this.abort();\n                        break;\n                    }\n                }\n\n                if (trivia.kind() === SyntaxKind.MultiLineCommentTrivia) {\n                    // This trivia may span multiple lines.  If it does, we need to dedent each \n                    // successive line of it until it terminates.\n                    result.push(this.dedentMultiLineComment(trivia));\n                    continue;\n                }\n\n                // All other trivia we just append to the list.\n                result.push(trivia);\n                if (trivia.kind() === SyntaxKind.NewLineTrivia) {\n                    // We hit a newline processing the trivia.  We need to add the indentation to the \n                    // next line as well.\n                    dedentNextWhitespace = true;\n                }\n            }\n\n            if (dedentNextWhitespace) {\n                // We hit a new line as the last trivia (or there was no trivia).  We want to dedent \n                // the next trivia, but we can\'t (because the token starts at the start of the line).\n                // If we can\'t dedent this, then we shouldn\'t dedent anymore.\n                this.abort();\n            }\n\n            if (this.isAborted()) {\n                return triviaList;\n            }\n\n            return Syntax.triviaList(result);\n        }\n\n        private dedentSegment(segment: string, hasFollowingNewLineTrivia: boolean): string {\n            // Find the position of the first non whitespace character in the segment.\n            var firstNonWhitespacePosition = Indentation.firstNonWhitespacePosition(segment);\n\n            if (firstNonWhitespacePosition === segment.length) {\n                if (hasFollowingNewLineTrivia) {\n                    // It was entirely whitespace trivia, with a newline after it.  Just trim this down \n                    // to an empty string.\n                    return \"\";\n                }\n            }\n            else if (CharacterInfo.isLineTerminator(segment.charCodeAt(firstNonWhitespacePosition))) {\n                // It was entirely whitespace, with a newline after it.  Just trim this down to \n                // the newline\n                return segment.substring(firstNonWhitespacePosition);\n            }\n\n            // It was whitespace without a newline following it.  We need to try to dedent this a bit.\n\n            // Convert that position to a column.  \n            var firstNonWhitespaceColumn = Indentation.columnForPositionInString(segment, firstNonWhitespacePosition, this.options);\n\n            // Find the new column we want the nonwhitespace text to start at. Ideally it would be \n            // whatever column it was minus the dedentation amount.  However, we won\'t go below a \n            // specified minimum indent (hence, max(initial - dedentAmount, minIndent).  *But* if \n            // the initial column was less than that minimum indent, then we\'ll keep it at that column.\n            // (hence min(initial, desired)).\n            var newFirstNonWhitespaceColumn =\n                MathPrototype.min(firstNonWhitespaceColumn,\n                MathPrototype.max(firstNonWhitespaceColumn - this.dedentationAmount, this.minimumIndent));\n\n            if (newFirstNonWhitespaceColumn === firstNonWhitespaceColumn) {\n                // We aren\'t able to detent this token.  Abort what we\'re doing\n                this.abort();\n                return segment;\n            }\n\n            // Update the dedentation amount for all subsequent tokens we run into.\n            this.dedentationAmount = firstNonWhitespaceColumn - newFirstNonWhitespaceColumn;\n            Debug.assert(this.dedentationAmount >= 0);\n\n            // Compute an indentation string for that.\n            var indentationString = Indentation.indentationString(newFirstNonWhitespaceColumn, this.options);\n\n            // Join the new indentation and the original string without its indentation.\n            return indentationString + segment.substring(firstNonWhitespacePosition);\n        }\n\n        private dedentWhitespace(trivia: ISyntaxTrivia, hasFollowingNewLineTrivia): ISyntaxTrivia {\n            var newIndentation = this.dedentSegment(trivia.fullText(), hasFollowingNewLineTrivia);\n            return Syntax.whitespace(newIndentation);\n        }\n\n        private dedentMultiLineComment(trivia: ISyntaxTrivia): ISyntaxTrivia {\n            var segments = Syntax.splitMultiLineCommentTriviaIntoMultipleLines(trivia);\n            if (segments.length === 1) {\n                // If there was only one segment, then this wasn\'t multiline.\n                return trivia;\n            }\n\n            for (var i = 1; i < segments.length; i++) {\n                var segment = segments[i];\n                segments[i] = this.dedentSegment(segment, /*hasFollowingNewLineTrivia*/ false);\n            }\n\n            var result = segments.join(\"\");\n\n            // Create a new trivia token out of the indented lines.\n            return Syntax.multiLineComment(result);\n        }\n\n        public static dedentNode(node: ISyntaxNode, dedentFirstToken: boolean, dedentAmount: number, minimumIndent: number, options: FormattingOptions): ISyntaxNode {\n            var dedenter = new SyntaxDedenter(dedentFirstToken, dedentAmount, minimumIndent, options);\n            var result = node.accept(dedenter);\n\n            if (dedenter.isAborted()) {\n                // We failed to dedent a token in this node.  Return the original node as is.\n                return node;\n            }\n\n            return result;\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class SyntaxIndenter extends SyntaxRewriter {\n        private lastTriviaWasNewLine: boolean;\n        private indentationTrivia: ISyntaxTrivia;\n\n        constructor(indentFirstToken: boolean,\n                    private indentationAmount: number,\n                    private options: FormattingOptions) {\n            super();\n            this.lastTriviaWasNewLine = indentFirstToken;\n            this.indentationTrivia = Indentation.indentationTrivia(this.indentationAmount, this.options);\n        }\n\n        public visitToken(token: ISyntaxToken): ISyntaxToken {\n            if (token.width() === 0) {\n                return token;\n            }\n\n            var result = token;\n            if (this.lastTriviaWasNewLine) {\n                // have to add our indentation to every line that this token hits.\n                result = token.withLeadingTrivia(this.indentTriviaList(token.leadingTrivia()));\n            }\n\n            this.lastTriviaWasNewLine = token.hasTrailingNewLine();\n            return result;\n        }\n\n        public indentTriviaList(triviaList: ISyntaxTriviaList): ISyntaxTriviaList {\n            var result = [];\n\n            // First, update any existing trivia with the indent amount.  For example, combine the\n            // indent with any whitespace trivia, or prepend any comments with the trivia.\n            var indentNextTrivia = true;\n            for (var i = 0, n = triviaList.count(); i < n; i++) {\n                var trivia = triviaList.syntaxTriviaAt(i);\n\n                var indentThisTrivia = indentNextTrivia;\n                indentNextTrivia = false;\n\n                switch (trivia.kind()) {\n                    case SyntaxKind.MultiLineCommentTrivia:\n                        this.indentMultiLineComment(trivia, indentThisTrivia, result);\n                        continue;\n\n                    case SyntaxKind.SingleLineCommentTrivia:\n                    case SyntaxKind.SkippedTokenTrivia:\n                        this.indentSingleLineOrSkippedText(trivia, indentThisTrivia, result);\n                        continue;\n\n                    case SyntaxKind.WhitespaceTrivia:\n                        this.indentWhitespace(trivia, indentThisTrivia, result);\n                        continue;\n\n                    case SyntaxKind.NewLineTrivia:\n                        // We hit a newline processing the trivia.  We need to add the indentation to the \n                        // next line as well.  Note: don\'t bother indenting the newline itself.  This will \n                        // just insert ugly whitespace that most users probably will not want.\n                        result.push(trivia);\n                        indentNextTrivia = true;\n                        continue;\n\n                    default:\n                        throw Errors.invalidOperation();\n                }\n            }\n\n            // Then, if the last trivia was a newline (or there was no trivia at all), then just add the\n            // indentation in right before the token.\n            if (indentNextTrivia) {\n                result.push(this.indentationTrivia);\n            }\n\n            return Syntax.triviaList(result);\n        }\n\n        private indentSegment(segment: string): string {\n            // Find the position of the first non whitespace character in the segment.\n            var firstNonWhitespacePosition = Indentation.firstNonWhitespacePosition(segment);\n\n            if (firstNonWhitespacePosition < segment.length &&\n                CharacterInfo.isLineTerminator(segment.charCodeAt(firstNonWhitespacePosition))) {\n\n                // If this segment was just a newline, then don\'t bother indenting it.  That will just\n                // leave the user with an ugly indent in their output that they probably do not want.\n                return segment;\n            }\n\n            // Convert that position to a column.  \n            var firstNonWhitespaceColumn = Indentation.columnForPositionInString(segment, firstNonWhitespacePosition, this.options);\n\n            // Find the new column we want the nonwhitespace text to start at.\n            var newFirstNonWhitespaceColumn = firstNonWhitespaceColumn + this.indentationAmount;\n\n            // Compute an indentation string for that.\n            var indentationString = Indentation.indentationString(newFirstNonWhitespaceColumn, this.options);\n\n            // Join the new indentation and the original string without its indentation.\n            return indentationString + segment.substring(firstNonWhitespacePosition);\n        }\n\n        private indentWhitespace(trivia: ISyntaxTrivia, indentThisTrivia: boolean, result: ISyntaxTrivia[]): void {\n            if (!indentThisTrivia) {\n                // Line didn\'t start with this trivia.  So no need to touch it.  Just add to the result\n                // and continue on.\n                result.push(trivia);\n                return;\n            }\n\n            // Line started with this trivia.  We want to figure out what the final column this \n            // whitespace goes to will be.  To do that we add the column it is at now to the column we\n            // want to indent to.  We then compute the final tabs+whitespace string for that.\n            var newIndentation = this.indentSegment(trivia.fullText());\n            result.push(Syntax.whitespace(newIndentation));\n        }\n\n        private indentSingleLineOrSkippedText(trivia: ISyntaxTrivia, indentThisTrivia: boolean, result: ISyntaxTrivia[]): void {\n            if (indentThisTrivia) {\n                // The line started with a comment or skipped text.  Add an indentation based \n                // on the desired settings, and then add the trivia itself.\n                result.push(this.indentationTrivia);\n            }\n\n            result.push(trivia);\n        }\n\n        private indentMultiLineComment(trivia: ISyntaxTrivia, indentThisTrivia: boolean, result: ISyntaxTrivia[]): void {\n            if (indentThisTrivia) {\n                // The line started with a multiline comment.  Add an indentation based \n                // on the desired settings, and then add the trivia itself.\n                result.push(this.indentationTrivia);\n            }\n\n            // If the multiline comment spans multiple lines, we need to add the right indent amount to\n            // each successive line segment as well.\n            var segments = Syntax.splitMultiLineCommentTriviaIntoMultipleLines(trivia);\n\n            for (var i = 1; i < segments.length; i++) {\n                segments[i] = this.indentSegment(segments[i]);\n            }\n\n            var newText = segments.join(\"\");\n            result.push(Syntax.multiLineComment(newText));\n        }\n\n        public static indentNode(node: ISyntaxNode, indentFirstToken: boolean, indentAmount: number, options: FormattingOptions): SyntaxNode {\n            var indenter = new SyntaxIndenter(indentFirstToken, indentAmount, options);\n            return node.accept(indenter);\n        }\n\n        public static indentNodes(nodes: SyntaxNode[], indentFirstToken: boolean, indentAmount: number, options: FormattingOptions): SyntaxNode[] {\n            // Note: it is necessary for correctness that we reuse the same SyntaxIndenter here.  \n            // That\'s because when working on nodes 1-N, we need to know if the previous node ended\n            // with a newline.  The indenter will track that for us.\n\n            var indenter = new SyntaxIndenter(indentFirstToken, indentAmount, options);\n            var result = ArrayUtilities.select(nodes, n => n.accept(indenter));\n\n            return result;\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript.Syntax {\n    export class VariableWidthTokenWithNoTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _textOrWidth: any;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, textOrWidth: any) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._textOrWidth = textOrWidth;\n        }\n\n        public clone(): ISyntaxToken {\n            return new VariableWidthTokenWithNoTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._textOrWidth);\n        }\n\n        public isNode(): boolean { return false; }\n        public isToken(): boolean { return true; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return this.width(); }\n        private start(): number { return this._fullStart; }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return typeof this._textOrWidth === \'number\' ? this._textOrWidth : this._textOrWidth.length; }\n\n        public text(): string {\n            if (typeof this._textOrWidth === \'number\') {\n                this._textOrWidth = this._sourceText.substr(\n                    this.start(), this._textOrWidth, /*intern:*/ this.tokenKind === SyntaxKind.IdentifierName);\n            }\n\n            return this._textOrWidth;\n        }\n\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any {\n            if ((<any>this)._value === undefined) {\n                (<any>this)._value = value(this);\n            }\n\n            return (<any>this)._value;\n        }\n\n        public valueText(): string {\n            if ((<any>this)._valueText === undefined) {\n                (<any>this)._valueText = valueText(this);\n            }\n\n            return (<any>this)._valueText;\n        }\n\n        public hasLeadingTrivia(): boolean { return false; }\n        public hasLeadingComment(): boolean { return false; }\n        public hasLeadingNewLine(): boolean { return false; }\n        public hasLeadingSkippedText(): boolean { return false; }\n        public leadingTriviaWidth(): number { return 0; }\n        public leadingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasTrailingTrivia(): boolean { return false; }\n        public hasTrailingComment(): boolean { return false; }\n        public hasTrailingNewLine(): boolean { return false; }\n        public hasTrailingSkippedText(): boolean { return false; }\n        public trailingTriviaWidth(): number { return 0; }\n        public trailingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasSkippedToken(): boolean { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): boolean { return false; }\n        public isIncrementallyUnusable(): boolean { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        public collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class VariableWidthTokenWithLeadingTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _leadingTriviaInfo: number;\n        private _textOrWidth: any;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, leadingTriviaInfo: number, textOrWidth: any) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._leadingTriviaInfo = leadingTriviaInfo;\n            this._textOrWidth = textOrWidth;\n        }\n\n        public clone(): ISyntaxToken {\n            return new VariableWidthTokenWithLeadingTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._leadingTriviaInfo,\n                this._textOrWidth);\n        }\n\n        public isNode(): boolean { return false; }\n        public isToken(): boolean { return true; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return getTriviaWidth(this._leadingTriviaInfo) + this.width(); }\n        private start(): number { return this._fullStart + getTriviaWidth(this._leadingTriviaInfo); }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return typeof this._textOrWidth === \'number\' ? this._textOrWidth : this._textOrWidth.length; }\n\n        public text(): string {\n            if (typeof this._textOrWidth === \'number\') {\n                this._textOrWidth = this._sourceText.substr(\n                    this.start(), this._textOrWidth, /*intern:*/ this.tokenKind === SyntaxKind.IdentifierName);\n            }\n\n            return this._textOrWidth;\n        }\n\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any {\n            if ((<any>this)._value === undefined) {\n                (<any>this)._value = value(this);\n            }\n\n            return (<any>this)._value;\n        }\n\n        public valueText(): string {\n            if ((<any>this)._valueText === undefined) {\n                (<any>this)._valueText = valueText(this);\n            }\n\n            return (<any>this)._valueText;\n        }\n\n        public hasLeadingTrivia(): boolean { return true; }\n        public hasLeadingComment(): boolean { return hasTriviaComment(this._leadingTriviaInfo); }\n        public hasLeadingNewLine(): boolean { return hasTriviaNewLine(this._leadingTriviaInfo); }\n        public hasLeadingSkippedText(): boolean { return false; }\n        public leadingTriviaWidth(): number { return getTriviaWidth(this._leadingTriviaInfo); }\n        public leadingTrivia(): ISyntaxTriviaList { return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaWidth(this._leadingTriviaInfo), /*isTrailing:*/ false); }\n\n        public hasTrailingTrivia(): boolean { return false; }\n        public hasTrailingComment(): boolean { return false; }\n        public hasTrailingNewLine(): boolean { return false; }\n        public hasTrailingSkippedText(): boolean { return false; }\n        public trailingTriviaWidth(): number { return 0; }\n        public trailingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasSkippedToken(): boolean { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): boolean { return false; }\n        public isIncrementallyUnusable(): boolean { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        public collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class VariableWidthTokenWithTrailingTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _textOrWidth: any;\n        private _trailingTriviaInfo: number;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, textOrWidth: any, trailingTriviaInfo: number) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._textOrWidth = textOrWidth;\n            this._trailingTriviaInfo = trailingTriviaInfo;\n        }\n\n        public clone(): ISyntaxToken {\n            return new VariableWidthTokenWithTrailingTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._textOrWidth,\n                this._trailingTriviaInfo);\n        }\n\n        public isNode(): boolean { return false; }\n        public isToken(): boolean { return true; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return this.width() + getTriviaWidth(this._trailingTriviaInfo); }\n        private start(): number { return this._fullStart; }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return typeof this._textOrWidth === \'number\' ? this._textOrWidth : this._textOrWidth.length; }\n\n        public text(): string {\n            if (typeof this._textOrWidth === \'number\') {\n                this._textOrWidth = this._sourceText.substr(\n                    this.start(), this._textOrWidth, /*intern:*/ this.tokenKind === SyntaxKind.IdentifierName);\n            }\n\n            return this._textOrWidth;\n        }\n\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any {\n            if ((<any>this)._value === undefined) {\n                (<any>this)._value = value(this);\n            }\n\n            return (<any>this)._value;\n        }\n\n        public valueText(): string {\n            if ((<any>this)._valueText === undefined) {\n                (<any>this)._valueText = valueText(this);\n            }\n\n            return (<any>this)._valueText;\n        }\n\n        public hasLeadingTrivia(): boolean { return false; }\n        public hasLeadingComment(): boolean { return false; }\n        public hasLeadingNewLine(): boolean { return false; }\n        public hasLeadingSkippedText(): boolean { return false; }\n        public leadingTriviaWidth(): number { return 0; }\n        public leadingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasTrailingTrivia(): boolean { return true; }\n        public hasTrailingComment(): boolean { return hasTriviaComment(this._trailingTriviaInfo); }\n        public hasTrailingNewLine(): boolean { return hasTriviaNewLine(this._trailingTriviaInfo); }\n        public hasTrailingSkippedText(): boolean { return false; }\n        public trailingTriviaWidth(): number { return getTriviaWidth(this._trailingTriviaInfo); }\n        public trailingTrivia(): ISyntaxTriviaList { return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaWidth(this._trailingTriviaInfo), /*isTrailing:*/ true); }\n\n        public hasSkippedToken(): boolean { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): boolean { return false; }\n        public isIncrementallyUnusable(): boolean { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        public collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class VariableWidthTokenWithLeadingAndTrailingTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _leadingTriviaInfo: number;\n        private _textOrWidth: any;\n        private _trailingTriviaInfo: number;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, leadingTriviaInfo: number, textOrWidth: any, trailingTriviaInfo: number) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._leadingTriviaInfo = leadingTriviaInfo;\n            this._textOrWidth = textOrWidth;\n            this._trailingTriviaInfo = trailingTriviaInfo;\n        }\n\n        public clone(): ISyntaxToken {\n            return new VariableWidthTokenWithLeadingAndTrailingTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._leadingTriviaInfo,\n                this._textOrWidth,\n                this._trailingTriviaInfo);\n        }\n\n        public isNode(): boolean { return false; }\n        public isToken(): boolean { return true; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return getTriviaWidth(this._leadingTriviaInfo) + this.width() + getTriviaWidth(this._trailingTriviaInfo); }\n        private start(): number { return this._fullStart + getTriviaWidth(this._leadingTriviaInfo); }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return typeof this._textOrWidth === \'number\' ? this._textOrWidth : this._textOrWidth.length; }\n\n        public text(): string {\n            if (typeof this._textOrWidth === \'number\') {\n                this._textOrWidth = this._sourceText.substr(\n                    this.start(), this._textOrWidth, /*intern:*/ this.tokenKind === SyntaxKind.IdentifierName);\n            }\n\n            return this._textOrWidth;\n        }\n\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any {\n            if ((<any>this)._value === undefined) {\n                (<any>this)._value = value(this);\n            }\n\n            return (<any>this)._value;\n        }\n\n        public valueText(): string {\n            if ((<any>this)._valueText === undefined) {\n                (<any>this)._valueText = valueText(this);\n            }\n\n            return (<any>this)._valueText;\n        }\n\n        public hasLeadingTrivia(): boolean { return true; }\n        public hasLeadingComment(): boolean { return hasTriviaComment(this._leadingTriviaInfo); }\n        public hasLeadingNewLine(): boolean { return hasTriviaNewLine(this._leadingTriviaInfo); }\n        public hasLeadingSkippedText(): boolean { return false; }\n        public leadingTriviaWidth(): number { return getTriviaWidth(this._leadingTriviaInfo); }\n        public leadingTrivia(): ISyntaxTriviaList { return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaWidth(this._leadingTriviaInfo), /*isTrailing:*/ false); }\n\n        public hasTrailingTrivia(): boolean { return true; }\n        public hasTrailingComment(): boolean { return hasTriviaComment(this._trailingTriviaInfo); }\n        public hasTrailingNewLine(): boolean { return hasTriviaNewLine(this._trailingTriviaInfo); }\n        public hasTrailingSkippedText(): boolean { return false; }\n        public trailingTriviaWidth(): number { return getTriviaWidth(this._trailingTriviaInfo); }\n        public trailingTrivia(): ISyntaxTriviaList { return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaWidth(this._trailingTriviaInfo), /*isTrailing:*/ true); }\n\n        public hasSkippedToken(): boolean { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): boolean { return false; }\n        public isIncrementallyUnusable(): boolean { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        public collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class FixedWidthTokenWithNoTrivia implements ISyntaxToken {\n        public tokenKind: SyntaxKind;\n\n        constructor(kind: SyntaxKind) {\n            this.tokenKind = kind;\n        }\n\n        public clone(): ISyntaxToken {\n            return new FixedWidthTokenWithNoTrivia(\n                this.tokenKind);\n        }\n\n        public isNode(): boolean { return false; }\n        public isToken(): boolean { return true; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return this.width(); }\n        public width(): number { return this.text().length; }\n        public text(): string { return SyntaxFacts.getText(this.tokenKind); }\n        public fullText(): string { return this.text(); }\n\n        public value(): any { return value(this); }\n        public valueText(): string { return valueText(this); }\n        public hasLeadingTrivia(): boolean { return false; }\n        public hasLeadingComment(): boolean { return false; }\n        public hasLeadingNewLine(): boolean { return false; }\n        public hasLeadingSkippedText(): boolean { return false; }\n        public leadingTriviaWidth(): number { return 0; }\n        public leadingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasTrailingTrivia(): boolean { return false; }\n        public hasTrailingComment(): boolean { return false; }\n        public hasTrailingNewLine(): boolean { return false; }\n        public hasTrailingSkippedText(): boolean { return false; }\n        public trailingTriviaWidth(): number { return 0; }\n        public trailingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasSkippedToken(): boolean { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): boolean { return false; }\n        public isIncrementallyUnusable(): boolean { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        public collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class FixedWidthTokenWithLeadingTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _leadingTriviaInfo: number;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, leadingTriviaInfo: number) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._leadingTriviaInfo = leadingTriviaInfo;\n        }\n\n        public clone(): ISyntaxToken {\n            return new FixedWidthTokenWithLeadingTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._leadingTriviaInfo);\n        }\n\n        public isNode(): boolean { return false; }\n        public isToken(): boolean { return true; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return getTriviaWidth(this._leadingTriviaInfo) + this.width(); }\n        private start(): number { return this._fullStart + getTriviaWidth(this._leadingTriviaInfo); }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return this.text().length; }\n        public text(): string { return SyntaxFacts.getText(this.tokenKind); }\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any { return value(this); }\n        public valueText(): string { return valueText(this); }\n        public hasLeadingTrivia(): boolean { return true; }\n        public hasLeadingComment(): boolean { return hasTriviaComment(this._leadingTriviaInfo); }\n        public hasLeadingNewLine(): boolean { return hasTriviaNewLine(this._leadingTriviaInfo); }\n        public hasLeadingSkippedText(): boolean { return false; }\n        public leadingTriviaWidth(): number { return getTriviaWidth(this._leadingTriviaInfo); }\n        public leadingTrivia(): ISyntaxTriviaList { return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaWidth(this._leadingTriviaInfo), /*isTrailing:*/ false); }\n\n        public hasTrailingTrivia(): boolean { return false; }\n        public hasTrailingComment(): boolean { return false; }\n        public hasTrailingNewLine(): boolean { return false; }\n        public hasTrailingSkippedText(): boolean { return false; }\n        public trailingTriviaWidth(): number { return 0; }\n        public trailingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasSkippedToken(): boolean { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): boolean { return false; }\n        public isIncrementallyUnusable(): boolean { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        public collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class FixedWidthTokenWithTrailingTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _trailingTriviaInfo: number;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, trailingTriviaInfo: number) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._trailingTriviaInfo = trailingTriviaInfo;\n        }\n\n        public clone(): ISyntaxToken {\n            return new FixedWidthTokenWithTrailingTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._trailingTriviaInfo);\n        }\n\n        public isNode(): boolean { return false; }\n        public isToken(): boolean { return true; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return this.width() + getTriviaWidth(this._trailingTriviaInfo); }\n        private start(): number { return this._fullStart; }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return this.text().length; }\n        public text(): string { return SyntaxFacts.getText(this.tokenKind); }\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any { return value(this); }\n        public valueText(): string { return valueText(this); }\n        public hasLeadingTrivia(): boolean { return false; }\n        public hasLeadingComment(): boolean { return false; }\n        public hasLeadingNewLine(): boolean { return false; }\n        public hasLeadingSkippedText(): boolean { return false; }\n        public leadingTriviaWidth(): number { return 0; }\n        public leadingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasTrailingTrivia(): boolean { return true; }\n        public hasTrailingComment(): boolean { return hasTriviaComment(this._trailingTriviaInfo); }\n        public hasTrailingNewLine(): boolean { return hasTriviaNewLine(this._trailingTriviaInfo); }\n        public hasTrailingSkippedText(): boolean { return false; }\n        public trailingTriviaWidth(): number { return getTriviaWidth(this._trailingTriviaInfo); }\n        public trailingTrivia(): ISyntaxTriviaList { return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaWidth(this._trailingTriviaInfo), /*isTrailing:*/ true); }\n\n        public hasSkippedToken(): boolean { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): boolean { return false; }\n        public isIncrementallyUnusable(): boolean { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        public collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class FixedWidthTokenWithLeadingAndTrailingTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _leadingTriviaInfo: number;\n        private _trailingTriviaInfo: number;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, leadingTriviaInfo: number, trailingTriviaInfo: number) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._leadingTriviaInfo = leadingTriviaInfo;\n            this._trailingTriviaInfo = trailingTriviaInfo;\n        }\n\n        public clone(): ISyntaxToken {\n            return new FixedWidthTokenWithLeadingAndTrailingTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._leadingTriviaInfo,\n                this._trailingTriviaInfo);\n        }\n\n        public isNode(): boolean { return false; }\n        public isToken(): boolean { return true; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return getTriviaWidth(this._leadingTriviaInfo) + this.width() + getTriviaWidth(this._trailingTriviaInfo); }\n        private start(): number { return this._fullStart + getTriviaWidth(this._leadingTriviaInfo); }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return this.text().length; }\n        public text(): string { return SyntaxFacts.getText(this.tokenKind); }\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any { return value(this); }\n        public valueText(): string { return valueText(this); }\n        public hasLeadingTrivia(): boolean { return true; }\n        public hasLeadingComment(): boolean { return hasTriviaComment(this._leadingTriviaInfo); }\n        public hasLeadingNewLine(): boolean { return hasTriviaNewLine(this._leadingTriviaInfo); }\n        public hasLeadingSkippedText(): boolean { return false; }\n        public leadingTriviaWidth(): number { return getTriviaWidth(this._leadingTriviaInfo); }\n        public leadingTrivia(): ISyntaxTriviaList { return Scanner.scanTrivia(this._sourceText, this._fullStart, getTriviaWidth(this._leadingTriviaInfo), /*isTrailing:*/ false); }\n\n        public hasTrailingTrivia(): boolean { return true; }\n        public hasTrailingComment(): boolean { return hasTriviaComment(this._trailingTriviaInfo); }\n        public hasTrailingNewLine(): boolean { return hasTriviaNewLine(this._trailingTriviaInfo); }\n        public hasTrailingSkippedText(): boolean { return false; }\n        public trailingTriviaWidth(): number { return getTriviaWidth(this._trailingTriviaInfo); }\n        public trailingTrivia(): ISyntaxTriviaList { return Scanner.scanTrivia(this._sourceText, this.end(), getTriviaWidth(this._trailingTriviaInfo), /*isTrailing:*/ true); }\n\n        public hasSkippedToken(): boolean { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): boolean { return false; }\n        public isIncrementallyUnusable(): boolean { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        public collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    function collectTokenTextElements(token: ISyntaxToken, elements: string[]): void {\n        token.leadingTrivia().collectTextElements(elements);\n        elements.push(token.text());\n        token.trailingTrivia().collectTextElements(elements);\n    }\n\n    export function fixedWidthToken(sourceText: ISimpleText, fullStart: number,\n        kind: SyntaxKind,\n        leadingTriviaInfo: number,\n        trailingTriviaInfo: number): ISyntaxToken {\n\n        if (leadingTriviaInfo === 0) {\n            if (trailingTriviaInfo === 0) {\n                return new FixedWidthTokenWithNoTrivia(kind);\n            }\n            else {\n                return new FixedWidthTokenWithTrailingTrivia(sourceText, fullStart, kind, trailingTriviaInfo);\n            }\n        }\n        else if (trailingTriviaInfo === 0) {\n            return new FixedWidthTokenWithLeadingTrivia(sourceText, fullStart, kind, leadingTriviaInfo);\n        }\n        else {\n            return new FixedWidthTokenWithLeadingAndTrailingTrivia(sourceText, fullStart, kind, leadingTriviaInfo, trailingTriviaInfo);\n        }\n    }\n\n    export function variableWidthToken(sourceText: ISimpleText, fullStart: number,\n        kind: SyntaxKind,\n        leadingTriviaInfo: number,\n        width: number,\n        trailingTriviaInfo: number): ISyntaxToken {\n\n        if (leadingTriviaInfo === 0) {\n            if (trailingTriviaInfo === 0) {\n                return new VariableWidthTokenWithNoTrivia(sourceText, fullStart, kind, width);\n            }\n            else {\n                return new VariableWidthTokenWithTrailingTrivia(sourceText, fullStart, kind, width, trailingTriviaInfo);\n            }\n        }\n        else if (trailingTriviaInfo === 0) {\n            return new VariableWidthTokenWithLeadingTrivia(sourceText, fullStart, kind, leadingTriviaInfo, width);\n        }\n        else {\n            return new VariableWidthTokenWithLeadingAndTrailingTrivia(sourceText, fullStart, kind, leadingTriviaInfo, width, trailingTriviaInfo);\n        }\n    }\n\n    function getTriviaWidth(value: number): number {\n        return value >>> SyntaxConstants.TriviaFullWidthShift;\n    }\n\n    function hasTriviaComment(value: number): boolean {\n        return (value & SyntaxConstants.TriviaCommentMask) !== 0;\n    }\n\n    function hasTriviaNewLine(value: number): boolean {\n        return (value & SyntaxConstants.TriviaNewLineMask) !== 0;\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxToken extends ISyntaxNodeOrToken, INameSyntax {\n        // Same as kind(), just exposed through a property for perf.\n        tokenKind: SyntaxKind;\n\n        // Text for this token, not including leading or trailing trivia.\n        text(): string;\n\n        value(): any;\n        valueText(): string;\n\n        hasLeadingTrivia(): boolean;\n        hasLeadingComment(): boolean;\n        hasLeadingNewLine(): boolean;\n        hasLeadingSkippedText(): boolean;\n\n        hasTrailingTrivia(): boolean;\n        hasTrailingComment(): boolean;\n        hasTrailingNewLine(): boolean;\n        hasTrailingSkippedText(): boolean;\n\n        hasSkippedToken(): boolean;\n\n        leadingTrivia(): ISyntaxTriviaList;\n        trailingTrivia(): ISyntaxTriviaList;\n\n        withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken;\n        withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken;\n\n        clone(): ISyntaxToken;\n    }\n\n    export interface ITokenInfo {\n        leadingTrivia?: ISyntaxTrivia[];\n        text?: string;\n        trailingTrivia?: ISyntaxTrivia[];\n    }\n}\n\nmodule TypeScript.Syntax {\n    export function realizeToken(token: ISyntaxToken): ISyntaxToken {\n        return new RealizedToken(token.tokenKind,\n            token.leadingTrivia(), token.text(), token.value(), token.valueText(), token.trailingTrivia());\n    }\n\n    export function convertToIdentifierName(token: ISyntaxToken): ISyntaxToken {\n        Debug.assert(SyntaxFacts.isAnyKeyword(token.tokenKind));\n        return new RealizedToken(SyntaxKind.IdentifierName,\n            token.leadingTrivia(), token.text(), token.text(), token.text(), token.trailingTrivia());\n    }\n\n    export function tokenToJSON(token: ISyntaxToken) {\n        var result: any = {};\n\n        for (var name in SyntaxKind) {\n            if (<any>SyntaxKind[name] === token.kind()) {\n                result.kind = name;\n                break;\n            }\n        }\n\n        result.width = token.width();\n        if (token.fullWidth() !== token.width()) {\n            result.fullWidth = token.fullWidth();\n        }\n\n        result.text = token.text();\n\n        var value = token.value();\n        if (value !== null) {\n            result.value = value;\n            result.valueText = token.valueText();\n        }\n\n        if (token.hasLeadingTrivia()) {\n            result.hasLeadingTrivia = true;\n        }\n\n        if (token.hasLeadingComment()) {\n            result.hasLeadingComment = true;\n        }\n\n        if (token.hasLeadingNewLine()) {\n            result.hasLeadingNewLine = true;\n        }\n\n        if (token.hasLeadingSkippedText()) {\n            result.hasLeadingSkippedText = true;\n        }\n\n        if (token.hasTrailingTrivia()) {\n            result.hasTrailingTrivia = true;\n        }\n\n        if (token.hasTrailingComment()) {\n            result.hasTrailingComment = true;\n        }\n\n        if (token.hasTrailingNewLine()) {\n            result.hasTrailingNewLine = true;\n        }\n\n        if (token.hasTrailingSkippedText()) {\n            result.hasTrailingSkippedText = true;\n        }\n\n        var trivia = token.leadingTrivia();\n        if (trivia.count() > 0) {\n            result.leadingTrivia = trivia;\n        }\n\n        trivia = token.trailingTrivia();\n        if (trivia.count() > 0) {\n            result.trailingTrivia = trivia;\n        }\n\n        return result;\n    }\n\n    export function value(token: ISyntaxToken): any {\n        return value1(token.tokenKind, token.text());\n    }\n\n    function hexValue(text: string, start: number, length: number): number {\n        var intChar = 0\n        for (var i = 0; i < length; i++) {\n            var ch2 = text.charCodeAt(start + i);\n            if (!CharacterInfo.isHexDigit(ch2)) {\n                break;\n            }\n\n            intChar = (intChar << 4) + CharacterInfo.hexValue(ch2);\n        }\n\n        return intChar;\n    }\n\n    var characterArray: number[] = [];\n\n    function convertEscapes(text: string): string {\n        characterArray.length = 0;\n        var result = \"\";\n\n        for (var i = 0, n = text.length; i < n; i++) {\n            var ch = text.charCodeAt(i);\n\n            if (ch === CharacterCodes.backslash) {\n                i++;\n                if (i < n) {\n                    ch = text.charCodeAt(i);\n                    switch (ch) {\n                        case CharacterCodes._0:\n                            characterArray.push(CharacterCodes.nullCharacter);\n                            continue;\n\n                        case CharacterCodes.b:\n                            characterArray.push(CharacterCodes.backspace);\n                            continue;\n\n                        case CharacterCodes.f:\n                            characterArray.push(CharacterCodes.formFeed);\n                            continue;\n\n                        case CharacterCodes.n:\n                            characterArray.push(CharacterCodes.lineFeed);\n                            continue;\n\n                        case CharacterCodes.r:\n                            characterArray.push(CharacterCodes.carriageReturn);\n                            continue;\n\n                        case CharacterCodes.t:\n                            characterArray.push(CharacterCodes.tab);\n                            continue;\n\n                        case CharacterCodes.v:\n                            characterArray.push(CharacterCodes.verticalTab);\n                            continue;\n\n                        case CharacterCodes.x:\n                            characterArray.push(hexValue(text, /*start:*/ i + 1, /*length:*/ 2));\n                            i += 2;\n                            continue;\n\n                        case CharacterCodes.u:\n                            characterArray.push(hexValue(text, /*start:*/ i + 1, /*length:*/ 4));\n                            i += 4;\n                            continue;\n\n                        default:\n                            // Any other character is ok as well.  As per rule:\n                            // EscapeSequence :: CharacterEscapeSequence\n                            // CharacterEscapeSequence :: NonEscapeCharacter\n                            // NonEscapeCharacter :: SourceCharacter but notEscapeCharacter or LineTerminator\n                            //\n                            // Intentional fall through\n                        }\n                }\n            }\n\n            characterArray.push(ch);\n\n            if (i && !(i % 1024)) {\n                result = result.concat(String.fromCharCode.apply(null, characterArray));\n                characterArray.length = 0;\n            }\n        }\n\n        if (characterArray.length) {\n            result = result.concat(String.fromCharCode.apply(null, characterArray));\n        }\n\n        return result\n    }\n\n    function massageEscapes(text: string): string {\n        return text.indexOf(\"\\\\\") >= 0 ? convertEscapes(text) : text;\n    }\n\n    function value1(kind: SyntaxKind, text: string): any {\n        if (kind === SyntaxKind.IdentifierName) {\n            return massageEscapes(text);\n        }\n\n        switch (kind) {\n            case SyntaxKind.TrueKeyword:\n                return true;\n            case SyntaxKind.FalseKeyword:\n                return false;\n            case SyntaxKind.NullKeyword:\n                return null;\n        }\n\n        if (SyntaxFacts.isAnyKeyword(kind) || SyntaxFacts.isAnyPunctuation(kind)) {\n            return SyntaxFacts.getText(kind);\n        }\n\n        if (kind === SyntaxKind.NumericLiteral) {\n            return parseFloat(text);\n        }\n        else if (kind === SyntaxKind.StringLiteral) {\n            if (text.length > 1 && text.charCodeAt(text.length - 1) === text.charCodeAt(0)) {\n                // Properly terminated.  Remove the quotes, and massage any escape characters we see.\n                return massageEscapes(text.substr(1, text.length - 2));\n            }\n            else {\n                // Not property terminated.  Remove the first quote and massage any escape characters we see.\n                return massageEscapes(text.substr(1));\n\n            }\n        }\n        else if (kind === SyntaxKind.RegularExpressionLiteral) {\n            try {\n                var lastSlash = text.lastIndexOf(\"/\");\n                var body = text.substring(1, lastSlash);\n                var flags = text.substring(lastSlash + 1);\n                return new RegExp(body, flags);\n            }\n            catch (e) {\n                return null;\n            }\n        }\n        else if (kind === SyntaxKind.EndOfFileToken || kind === SyntaxKind.ErrorToken) {\n            return null;\n        }\n        else {\n            throw Errors.invalidOperation();\n        }\n    }\n\n    function valueText1(kind: SyntaxKind, text: string): string {\n        var value = value1(kind, text);\n        return value === null ? \"\" : value.toString();\n    }\n\n    export function valueText(token: ISyntaxToken): string {\n        var value = token.value();\n        return value === null ? \"\" : value.toString();\n    }\n\n    class EmptyToken implements ISyntaxToken {\n        public tokenKind: SyntaxKind;\n\n        constructor(kind: SyntaxKind) {\n            this.tokenKind = kind;\n        }\n\n        public clone(): ISyntaxToken {\n            return new EmptyToken(this.tokenKind);\n        }\n\n        public kind() { return this.tokenKind; }\n\n        public isToken(): boolean { return true; }\n        public isNode(): boolean { return false; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return false; }\n\n        public childCount(): number {\n            return 0;\n        }\n\n        public childAt(index: number): ISyntaxElement {\n            throw Errors.argumentOutOfRange(\"index\");\n        }\n\n        public toJSON(key) { return tokenToJSON(this); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public firstToken() { return this; }\n        public lastToken() { return this; }\n        public isTypeScriptSpecific() { return false; }\n\n        // Empty tokens are never incrementally reusable.\n        public isIncrementallyUnusable() { return true; }\n\n        public fullWidth() { return 0; }\n        public width() { return 0; }\n        public text() { return \"\"; }\n        public fullText(): string { return \"\"; }\n        public value() { return null; }\n        public valueText() { return \"\"; }\n\n        public hasLeadingTrivia() { return false; }\n        public hasLeadingComment() { return false; }\n        public hasLeadingNewLine() { return false; }\n        public hasLeadingSkippedText() { return false; }\n        public leadingTriviaWidth() { return 0; }\n        public hasTrailingTrivia() { return false; }\n        public hasTrailingComment() { return false; }\n        public hasTrailingNewLine() { return false; }\n        public hasTrailingSkippedText() { return false; }\n        public hasSkippedToken() { return false; }\n\n        public trailingTriviaWidth() { return 0; }\n        public leadingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n        public trailingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n        public realize(): ISyntaxToken { return realizeToken(this); }\n        public collectTextElements(elements: string[]): void { }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export function emptyToken(kind: SyntaxKind): ISyntaxToken {\n        return new EmptyToken(kind);\n    }\n\n    class RealizedToken implements ISyntaxToken {\n        public tokenKind: SyntaxKind;\n        // public tokenKeywordKind: SyntaxKind;\n        private _leadingTrivia: ISyntaxTriviaList;\n        private _text: string;\n        private _value: any;\n        private _valueText: string;\n        private _trailingTrivia: ISyntaxTriviaList;\n\n        constructor(tokenKind: SyntaxKind,\n                    leadingTrivia: ISyntaxTriviaList,\n                    text: string,\n                    value: any,\n                    valueText: string,\n                    trailingTrivia: ISyntaxTriviaList) {\n            this.tokenKind = tokenKind;\n            this._leadingTrivia = leadingTrivia;\n            this._text = text;\n            this._value = value;\n            this._valueText = valueText;\n            this._trailingTrivia = trailingTrivia;\n        }\n\n        public clone(): ISyntaxToken {\n            return new RealizedToken(this.tokenKind, /*this.tokenKeywordKind,*/ this._leadingTrivia,\n                this._text, this._value, this._valueText, this._trailingTrivia);\n        }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken() { return this; }\n        public lastToken() { return this; }\n        public isTypeScriptSpecific() { return false; }\n\n        // Realized tokens are created from the parser.  They are *never* incrementally reusable.\n        public isIncrementallyUnusable() { return true; }\n\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n\n        public childCount(): number {\n            return 0;\n        }\n\n        public childAt(index: number): ISyntaxElement {\n            throw Errors.argumentOutOfRange(\"index\");\n        }\n\n        public isToken(): boolean { return true; }\n        public isNode(): boolean { return false; }\n        public isList(): boolean { return false; }\n        public isSeparatedList(): boolean { return false; }\n        public isTrivia(): boolean { return false; }\n        public isTriviaList(): boolean { return false; }\n\n        public fullWidth(): number { return this._leadingTrivia.fullWidth() + this.width() + this._trailingTrivia.fullWidth(); }\n        public width(): number { return this.text().length; }\n\n        public text(): string { return this._text; }\n        public fullText(): string { return this._leadingTrivia.fullText() + this.text() + this._trailingTrivia.fullText(); }\n\n        public value(): any { return this._value; }\n        public valueText(): string { return this._valueText; }\n\n        public hasLeadingTrivia(): boolean { return this._leadingTrivia.count() > 0; }\n        public hasLeadingComment(): boolean { return this._leadingTrivia.hasComment(); }\n        public hasLeadingNewLine(): boolean { return this._leadingTrivia.hasNewLine(); }\n        public hasLeadingSkippedText(): boolean { return this._leadingTrivia.hasSkippedToken(); }\n        public leadingTriviaWidth(): number { return this._leadingTrivia.fullWidth(); }\n\n        public hasTrailingTrivia(): boolean { return this._trailingTrivia.count() > 0; }\n        public hasTrailingComment(): boolean { return this._trailingTrivia.hasComment(); }\n        public hasTrailingNewLine(): boolean { return this._trailingTrivia.hasNewLine(); }\n        public hasTrailingSkippedText(): boolean { return this._trailingTrivia.hasSkippedToken(); }\n        public trailingTriviaWidth(): number { return this._trailingTrivia.fullWidth(); }\n\n        public hasSkippedToken(): boolean { return this.hasLeadingSkippedText() || this.hasTrailingSkippedText(); }\n\n        public leadingTrivia(): ISyntaxTriviaList { return this._leadingTrivia; }\n        public trailingTrivia(): ISyntaxTriviaList { return this._trailingTrivia; }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public collectTextElements(elements: string[]): void {\n            this.leadingTrivia().collectTextElements(elements);\n            elements.push(this.text());\n            this.trailingTrivia().collectTextElements(elements);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return new RealizedToken(\n                this.tokenKind, leadingTrivia, this._text, this._value, this._valueText, this._trailingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return new RealizedToken(\n                this.tokenKind,  this._leadingTrivia, this._text, this._value, this._valueText, trailingTrivia);\n        }\n    }\n\n    export function token(kind: SyntaxKind, info: ITokenInfo = null): ISyntaxToken {\n        var text = (info !== null && info.text !== undefined) ? info.text : SyntaxFacts.getText(kind);\n\n        return new RealizedToken(\n            kind,\n            Syntax.triviaList(info === null ? null : info.leadingTrivia),\n            text,\n            value1(kind, text),\n            valueText1(kind, text),\n            Syntax.triviaList(info === null ? null : info.trailingTrivia));\n    }\n    \n    export function identifier(text: string, info: ITokenInfo = null): ISyntaxToken {\n        info = info || {};\n        info.text = text;\n        return token(SyntaxKind.IdentifierName, info);\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class SyntaxTokenReplacer extends SyntaxRewriter {\n        constructor(private token1: ISyntaxToken,\n                    private token2: ISyntaxToken) {\n            super();\n        }\n\n        public visitToken(token: ISyntaxToken): ISyntaxToken {\n            if (token === this.token1) {\n                // Found the token to replace.  Return the new token and null out our state.  This will \n                // let the later visit methods bail out earlier.\n                var result = this.token2;\n                this.token1 = null;\n                this.token2 = null;\n\n                return result;\n            }\n\n            return token;\n        }\n\n        public visitNode(node: SyntaxNode): SyntaxNode {\n            if (this.token1 === null) {\n                return node;\n            }\n\n            return super.visitNode(node);\n        }\n\n        public visitList(list: ISyntaxList): ISyntaxList {\n            if (this.token1 === null) {\n                return list;\n            }\n\n            return super.visitList(list);\n        }\n\n        public visitSeparatedList(list: ISeparatedSyntaxList): ISeparatedSyntaxList {\n            if (this.token1 === null) {\n                return list;\n            }\n\n            return super.visitSeparatedList(list);\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxTrivia {\n        kind(): SyntaxKind;\n\n        isWhitespace(): boolean;\n        isComment(): boolean;\n        isNewLine(): boolean;\n        isSkippedToken(): boolean;\n\n        // With of this trivia.\n        fullWidth(): number;\n\n        // Text for this trivia.\n        fullText(): string;\n\n        // If this is a skipped token trivia, then this was the token that was skipped.\n        skippedToken(): ISyntaxToken;\n    }\n}\n\nmodule TypeScript.Syntax {\n    class SyntaxTrivia implements ISyntaxTrivia {\n        private _kind: SyntaxKind;\n        private _textOrToken: any;\n\n        constructor(kind: SyntaxKind, textOrToken: any) {\n            this._kind = kind;\n            this._textOrToken = textOrToken;\n        }\n\n        public toJSON(key) {\n            var result: any = {};\n            result.kind = SyntaxKind[this._kind];\n\n            if (this.isSkippedToken()) {\n                result.skippedToken = this._textOrToken;\n            }\n            else {\n                result.text = this._textOrToken;\n            }\n            return result;\n        }\n\n        public kind(): SyntaxKind {\n            return this._kind;\n        }\n\n        public fullWidth(): number {\n            return this.fullText().length;\n        }\n\n        public fullText(): string {\n            return this.isSkippedToken() ? this.skippedToken().fullText() : this._textOrToken;\n        }\n\n        public isWhitespace(): boolean {\n            return this.kind() === SyntaxKind.WhitespaceTrivia;\n        }\n\n        public isComment(): boolean {\n            return this.kind() === SyntaxKind.SingleLineCommentTrivia || this.kind() === SyntaxKind.MultiLineCommentTrivia;\n        }\n\n        public isNewLine(): boolean {\n            return this.kind() === SyntaxKind.NewLineTrivia;\n        }\n\n        public isSkippedToken(): boolean {\n            return this.kind() === SyntaxKind.SkippedTokenTrivia;\n        }\n\n        public skippedToken(): ISyntaxToken {\n            Debug.assert(this.isSkippedToken());\n            return this._textOrToken;\n        }\n\n        public collectTextElements(elements: string[]): void {\n            elements.push(this.fullText());\n        }\n    }\n\n    export function trivia(kind: SyntaxKind, text: string): ISyntaxTrivia {\n        // Debug.assert(kind === SyntaxKind.MultiLineCommentTrivia || kind === SyntaxKind.NewLineTrivia || kind === SyntaxKind.SingleLineCommentTrivia || kind === SyntaxKind.WhitespaceTrivia || kind === SyntaxKind.SkippedTextTrivia);\n        // Debug.assert(text.length > 0);\n        return new SyntaxTrivia(kind, text);\n    }\n\n    export function skippedTokenTrivia(token: ISyntaxToken): ISyntaxTrivia {\n        Debug.assert(!token.hasLeadingTrivia());\n        Debug.assert(!token.hasTrailingTrivia());\n        Debug.assert(token.fullWidth() > 0);\n        return new SyntaxTrivia(SyntaxKind.SkippedTokenTrivia, token);\n    }\n\n    export function spaces(count: number): ISyntaxTrivia {\n        return trivia(SyntaxKind.WhitespaceTrivia, StringUtilities.repeat(\" \", count));\n    }\n\n    export function whitespace(text: string): ISyntaxTrivia {\n        return trivia(SyntaxKind.WhitespaceTrivia, text);\n    }\n\n    export function multiLineComment(text: string): ISyntaxTrivia {\n        return trivia(SyntaxKind.MultiLineCommentTrivia, text);\n    }\n\n    export function singleLineComment(text: string): ISyntaxTrivia {\n        return trivia(SyntaxKind.SingleLineCommentTrivia, text);\n    }\n\n    export var spaceTrivia: ISyntaxTrivia = spaces(1);\n    export var lineFeedTrivia: ISyntaxTrivia = trivia(SyntaxKind.NewLineTrivia, \"\\n\");\n    export var carriageReturnTrivia: ISyntaxTrivia = trivia(SyntaxKind.NewLineTrivia, \"\\r\");\n    export var carriageReturnLineFeedTrivia: ISyntaxTrivia = trivia(SyntaxKind.NewLineTrivia, \"\\r\\n\");\n\n    // Breaks a multiline trivia up into individual line components.  If the trivia doesn\'t span\n    // any lines, then the result will be a single string with the entire text of the trivia. \n    // Otherwise, there will be one entry in the array for each line spanned by the trivia.  Each\n    // entry will contain the line separator at the end of the string.\n    export function splitMultiLineCommentTriviaIntoMultipleLines(trivia: ISyntaxTrivia): string[] {\n        // Debug.assert(trivia.kind() === SyntaxKind.MultiLineCommentTrivia);\n        var result: string[] = [];\n\n        var triviaText = trivia.fullText();\n        var currentIndex = 0;\n\n        for (var i = 0; i < triviaText.length; i++) {\n            var ch = triviaText.charCodeAt(i);\n\n            // When we run into a newline for the first time, create the string builder and copy\n            // all the values up to this newline into it.\n            var isCarriageReturnLineFeed = false;\n            switch (ch) {\n                case CharacterCodes.carriageReturn:\n                    if (i < triviaText.length - 1 && triviaText.charCodeAt(i + 1) === CharacterCodes.lineFeed) {\n                        // Consume the \\r\n                        i++;\n                    }\n\n                // Fall through.\n\n                case CharacterCodes.lineFeed:\n                case CharacterCodes.paragraphSeparator:\n                case CharacterCodes.lineSeparator:\n                    // Eat from the last starting position through to the end of the newline.\n                    result.push(triviaText.substring(currentIndex, i + 1));\n\n                    // Set the current index to *after* the newline.\n                    currentIndex = i + 1;\n                    continue;\n            }\n        }\n\n        result.push(triviaText.substring(currentIndex));\n        return result;\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxTriviaList {\n        count(): number;\n        syntaxTriviaAt(index: number): ISyntaxTrivia;\n\n        // With of this trivia list.\n        fullWidth(): number;\n\n        // Text for this trivia list.\n        fullText(): string;\n\n        hasComment(): boolean;\n        hasNewLine(): boolean;\n        hasSkippedToken(): boolean;\n\n        last(): ISyntaxTrivia;\n        toArray(): ISyntaxTrivia[];\n\n        concat(trivia: ISyntaxTriviaList): ISyntaxTriviaList;\n\n        collectTextElements(elements: string[]): void;\n    }\n}\n\nmodule TypeScript.Syntax {\n    export var emptyTriviaList: ISyntaxTriviaList = {\n        kind: (): SyntaxKind => SyntaxKind.TriviaList,\n\n        count: (): number => 0,\n\n        syntaxTriviaAt: (index: number): ISyntaxTrivia => {\n            throw Errors.argumentOutOfRange(\"index\");\n        },\n\n        last: (): ISyntaxTrivia => {\n            throw Errors.argumentOutOfRange(\"index\");\n        },\n\n        fullWidth: (): number => 0,\n        fullText: (): string => \"\",\n\n        hasComment: (): boolean => false,\n        hasNewLine: (): boolean => false,\n        hasSkippedToken: (): boolean => false,\n\n        toJSON: (key) => [],\n\n        collectTextElements: (elements: string[]): void => { },\n\n        toArray: (): ISyntaxTrivia[] => [],\n\n        concat: (trivia: ISyntaxTriviaList): ISyntaxTriviaList => trivia,\n    };\n\n    function concatTrivia(list1: ISyntaxTriviaList, list2: ISyntaxTriviaList): ISyntaxTriviaList {\n        if (list1.count() === 0) {\n            return list2;\n        }\n\n        if (list2.count() === 0) {\n            return list1;\n        }\n\n        var trivia = list1.toArray();\n        trivia.push.apply(trivia, list2.toArray());\n\n        return triviaList(trivia);\n    }\n\n    function isComment(trivia: ISyntaxTrivia): boolean {\n        return trivia.kind() === SyntaxKind.MultiLineCommentTrivia || trivia.kind() === SyntaxKind.SingleLineCommentTrivia;\n    }\n\n    class SingletonSyntaxTriviaList implements ISyntaxTriviaList {\n        private item: ISyntaxTrivia;\n\n        constructor(item: ISyntaxTrivia) {\n            this.item = item;\n        }\n\n        public kind(): SyntaxKind { return SyntaxKind.TriviaList; }\n\n        public count(): number {\n            return 1;\n        }\n\n        public syntaxTriviaAt(index: number): ISyntaxTrivia {\n            if (index !== 0) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.item;\n        }\n\n        public last(): ISyntaxTrivia {\n            return this.item;\n        }\n\n        public fullWidth(): number {\n            return this.item.fullWidth();\n        }\n\n        public fullText(): string {\n            return this.item.fullText();\n        }\n\n        public hasComment(): boolean {\n            return isComment(this.item);\n        }\n\n        public hasNewLine(): boolean {\n            return this.item.kind() === SyntaxKind.NewLineTrivia;\n        }\n\n        public hasSkippedToken(): boolean {\n            return this.item.kind() === SyntaxKind.SkippedTokenTrivia;\n        }\n\n        public toJSON(key) {\n            return [this.item];\n        }\n\n        public collectTextElements(elements: string[]): void {\n            (<any>this.item).collectTextElements(elements);\n        }\n\n        public toArray(): ISyntaxTrivia[] {\n            return [this.item];\n        }\n\n        public concat(trivia: ISyntaxTriviaList): ISyntaxTriviaList {\n            return concatTrivia(this, trivia);\n        }\n    }\n\n    class NormalSyntaxTriviaList implements ISyntaxTriviaList {\n        private trivia: ISyntaxTrivia[];\n\n        constructor(trivia: ISyntaxTrivia[]) {\n            this.trivia = trivia;\n        }\n\n        public kind(): SyntaxKind { return SyntaxKind.TriviaList; }\n\n        public count() {\n            return this.trivia.length;\n        }\n\n        public syntaxTriviaAt(index: number): ISyntaxTrivia {\n            if (index < 0 || index >= this.trivia.length) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.trivia[index];\n        }\n        \n        public last(): ISyntaxTrivia {\n            return this.trivia[this.trivia.length - 1];\n        }\n\n        public fullWidth(): number {\n            return ArrayUtilities.sum(this.trivia, t => t.fullWidth());\n        }\n\n        public fullText(): string {\n            var result = \"\";\n\n            for (var i = 0, n = this.trivia.length; i < n; i++) {\n                result += this.trivia[i].fullText();\n            }\n\n            return result;\n        }\n\n        public hasComment(): boolean {\n            for (var i = 0; i < this.trivia.length; i++) {\n                if (isComment(this.trivia[i])) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public hasNewLine(): boolean {\n            for (var i = 0; i < this.trivia.length; i++) {\n                if (this.trivia[i].kind() === SyntaxKind.NewLineTrivia) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public hasSkippedToken(): boolean {\n            for (var i = 0; i < this.trivia.length; i++) {\n                if (this.trivia[i].kind() === SyntaxKind.SkippedTokenTrivia) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public toJSON(key) {\n            return this.trivia;\n        }\n\n        public collectTextElements(elements: string[]): void {\n            for (var i = 0; i < this.trivia.length; i++) {\n                (<any>this.trivia[i]).collectTextElements(elements);\n            }\n        }\n\n        public toArray(): ISyntaxTrivia[] {\n            return this.trivia.slice(0);\n        }\n\n        public concat(trivia: ISyntaxTriviaList): ISyntaxTriviaList {\n            return concatTrivia(this, trivia);\n        }\n    }\n\n    export function triviaList(trivia: ISyntaxTrivia[]): ISyntaxTriviaList {\n        if (trivia === undefined || trivia === null || trivia.length === 0) {\n            return Syntax.emptyTriviaList;\n        }\n\n        if (trivia.length === 1) {\n            return new SingletonSyntaxTriviaList(trivia[0]);\n        }\n\n        return new NormalSyntaxTriviaList(trivia);\n    }\n\n    export var spaceTriviaList: ISyntaxTriviaList = triviaList([Syntax.spaceTrivia]);\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class SyntaxUtilities {\n        public static isAngleBracket(positionedElement: PositionedElement): boolean {\n            var element = positionedElement.element();\n            var parent = positionedElement.parentElement();\n            if (parent !== null && (element.kind() === SyntaxKind.LessThanToken || element.kind() === SyntaxKind.GreaterThanToken)) {\n                switch (parent.kind()) {\n                    case SyntaxKind.TypeArgumentList:\n                    case SyntaxKind.TypeParameterList:\n                    case SyntaxKind.CastExpression:\n                        return true;\n                }\n            }\n\n            return false;\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxVisitor {\n        visitToken(token: ISyntaxToken): any;\n        visitSourceUnit(node: SourceUnitSyntax): any;\n        visitExternalModuleReference(node: ExternalModuleReferenceSyntax): any;\n        visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): any;\n        visitImportDeclaration(node: ImportDeclarationSyntax): any;\n        visitExportAssignment(node: ExportAssignmentSyntax): any;\n        visitClassDeclaration(node: ClassDeclarationSyntax): any;\n        visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): any;\n        visitHeritageClause(node: HeritageClauseSyntax): any;\n        visitModuleDeclaration(node: ModuleDeclarationSyntax): any;\n        visitFunctionDeclaration(node: FunctionDeclarationSyntax): any;\n        visitVariableStatement(node: VariableStatementSyntax): any;\n        visitVariableDeclaration(node: VariableDeclarationSyntax): any;\n        visitVariableDeclarator(node: VariableDeclaratorSyntax): any;\n        visitEqualsValueClause(node: EqualsValueClauseSyntax): any;\n        visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): any;\n        visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): any;\n        visitOmittedExpression(node: OmittedExpressionSyntax): any;\n        visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): any;\n        visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpressionSyntax): any;\n        visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): any;\n        visitQualifiedName(node: QualifiedNameSyntax): any;\n        visitTypeArgumentList(node: TypeArgumentListSyntax): any;\n        visitConstructorType(node: ConstructorTypeSyntax): any;\n        visitFunctionType(node: FunctionTypeSyntax): any;\n        visitObjectType(node: ObjectTypeSyntax): any;\n        visitArrayType(node: ArrayTypeSyntax): any;\n        visitGenericType(node: GenericTypeSyntax): any;\n        visitTypeAnnotation(node: TypeAnnotationSyntax): any;\n        visitBlock(node: BlockSyntax): any;\n        visitParameter(node: ParameterSyntax): any;\n        visitMemberAccessExpression(node: MemberAccessExpressionSyntax): any;\n        visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): any;\n        visitElementAccessExpression(node: ElementAccessExpressionSyntax): any;\n        visitInvocationExpression(node: InvocationExpressionSyntax): any;\n        visitArgumentList(node: ArgumentListSyntax): any;\n        visitBinaryExpression(node: BinaryExpressionSyntax): any;\n        visitConditionalExpression(node: ConditionalExpressionSyntax): any;\n        visitConstructSignature(node: ConstructSignatureSyntax): any;\n        visitMethodSignature(node: MethodSignatureSyntax): any;\n        visitIndexSignature(node: IndexSignatureSyntax): any;\n        visitPropertySignature(node: PropertySignatureSyntax): any;\n        visitCallSignature(node: CallSignatureSyntax): any;\n        visitParameterList(node: ParameterListSyntax): any;\n        visitTypeParameterList(node: TypeParameterListSyntax): any;\n        visitTypeParameter(node: TypeParameterSyntax): any;\n        visitConstraint(node: ConstraintSyntax): any;\n        visitElseClause(node: ElseClauseSyntax): any;\n        visitIfStatement(node: IfStatementSyntax): any;\n        visitExpressionStatement(node: ExpressionStatementSyntax): any;\n        visitConstructorDeclaration(node: ConstructorDeclarationSyntax): any;\n        visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): any;\n        visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): any;\n        visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): any;\n        visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): any;\n        visitThrowStatement(node: ThrowStatementSyntax): any;\n        visitReturnStatement(node: ReturnStatementSyntax): any;\n        visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): any;\n        visitSwitchStatement(node: SwitchStatementSyntax): any;\n        visitCaseSwitchClause(node: CaseSwitchClauseSyntax): any;\n        visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): any;\n        visitBreakStatement(node: BreakStatementSyntax): any;\n        visitContinueStatement(node: ContinueStatementSyntax): any;\n        visitForStatement(node: ForStatementSyntax): any;\n        visitForInStatement(node: ForInStatementSyntax): any;\n        visitWhileStatement(node: WhileStatementSyntax): any;\n        visitWithStatement(node: WithStatementSyntax): any;\n        visitEnumDeclaration(node: EnumDeclarationSyntax): any;\n        visitEnumElement(node: EnumElementSyntax): any;\n        visitCastExpression(node: CastExpressionSyntax): any;\n        visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): any;\n        visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): any;\n        visitFunctionPropertyAssignment(node: FunctionPropertyAssignmentSyntax): any;\n        visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): any;\n        visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): any;\n        visitFunctionExpression(node: FunctionExpressionSyntax): any;\n        visitEmptyStatement(node: EmptyStatementSyntax): any;\n        visitTryStatement(node: TryStatementSyntax): any;\n        visitCatchClause(node: CatchClauseSyntax): any;\n        visitFinallyClause(node: FinallyClauseSyntax): any;\n        visitLabeledStatement(node: LabeledStatementSyntax): any;\n        visitDoStatement(node: DoStatementSyntax): any;\n        visitTypeOfExpression(node: TypeOfExpressionSyntax): any;\n        visitDeleteExpression(node: DeleteExpressionSyntax): any;\n        visitVoidExpression(node: VoidExpressionSyntax): any;\n        visitDebuggerStatement(node: DebuggerStatementSyntax): any;\n    }\n\n    export class SyntaxVisitor implements ISyntaxVisitor {\n        public defaultVisit(node: ISyntaxNodeOrToken): any {\n            return null;\n        }\n\n        public visitToken(token: ISyntaxToken): any {\n            return this.defaultVisit(token);\n        }\n\n        public visitSourceUnit(node: SourceUnitSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitExternalModuleReference(node: ExternalModuleReferenceSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitImportDeclaration(node: ImportDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitExportAssignment(node: ExportAssignmentSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitClassDeclaration(node: ClassDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitHeritageClause(node: HeritageClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitModuleDeclaration(node: ModuleDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitFunctionDeclaration(node: FunctionDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitVariableStatement(node: VariableStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitVariableDeclaration(node: VariableDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitVariableDeclarator(node: VariableDeclaratorSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitEqualsValueClause(node: EqualsValueClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitOmittedExpression(node: OmittedExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitQualifiedName(node: QualifiedNameSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitTypeArgumentList(node: TypeArgumentListSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitConstructorType(node: ConstructorTypeSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitFunctionType(node: FunctionTypeSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitObjectType(node: ObjectTypeSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitArrayType(node: ArrayTypeSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitGenericType(node: GenericTypeSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitTypeAnnotation(node: TypeAnnotationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitBlock(node: BlockSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitParameter(node: ParameterSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitMemberAccessExpression(node: MemberAccessExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitElementAccessExpression(node: ElementAccessExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitInvocationExpression(node: InvocationExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitArgumentList(node: ArgumentListSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitBinaryExpression(node: BinaryExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitConditionalExpression(node: ConditionalExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitConstructSignature(node: ConstructSignatureSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitMethodSignature(node: MethodSignatureSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitIndexSignature(node: IndexSignatureSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitPropertySignature(node: PropertySignatureSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitCallSignature(node: CallSignatureSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitParameterList(node: ParameterListSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitTypeParameterList(node: TypeParameterListSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitTypeParameter(node: TypeParameterSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitConstraint(node: ConstraintSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitElseClause(node: ElseClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitIfStatement(node: IfStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitExpressionStatement(node: ExpressionStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitConstructorDeclaration(node: ConstructorDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitThrowStatement(node: ThrowStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitReturnStatement(node: ReturnStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitSwitchStatement(node: SwitchStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitCaseSwitchClause(node: CaseSwitchClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitBreakStatement(node: BreakStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitContinueStatement(node: ContinueStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitForStatement(node: ForStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitForInStatement(node: ForInStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitWhileStatement(node: WhileStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitWithStatement(node: WithStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitEnumDeclaration(node: EnumDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitEnumElement(node: EnumElementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitCastExpression(node: CastExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitFunctionPropertyAssignment(node: FunctionPropertyAssignmentSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitFunctionExpression(node: FunctionExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitEmptyStatement(node: EmptyStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitTryStatement(node: TryStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitCatchClause(node: CatchClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitFinallyClause(node: FinallyClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitLabeledStatement(node: LabeledStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitDoStatement(node: DoStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitTypeOfExpression(node: TypeOfExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitDeleteExpression(node: DeleteExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitVoidExpression(node: VoidExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        public visitDebuggerStatement(node: DebuggerStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class SyntaxWalker implements ISyntaxVisitor {\n        public visitToken(token: ISyntaxToken): void {\n        }\n\n        public visitNode(node: SyntaxNode): void {\n            node.accept(this);\n        }\n\n        public visitNodeOrToken(nodeOrToken: ISyntaxNodeOrToken): void {\n            if (nodeOrToken.isToken()) { \n                this.visitToken(<ISyntaxToken>nodeOrToken);\n            }\n            else {\n                this.visitNode(<SyntaxNode>nodeOrToken);\n            }\n        }\n\n        private visitOptionalToken(token: ISyntaxToken): void {\n            if (token === null) {\n                return;\n            }\n\n            this.visitToken(token);\n        }\n\n        public visitOptionalNode(node: SyntaxNode): void {\n            if (node === null) {\n                return;\n            }\n\n            this.visitNode(node);\n        }\n\n        public visitOptionalNodeOrToken(nodeOrToken: ISyntaxNodeOrToken): void {\n            if (nodeOrToken === null) {\n                return;\n            }\n\n            this.visitNodeOrToken(nodeOrToken);\n        }\n\n        public visitList(list: ISyntaxList): void {\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n               this.visitNodeOrToken(list.childAt(i));\n            }\n        }\n\n        public visitSeparatedList(list: ISeparatedSyntaxList): void {\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                var item = list.childAt(i);\n                this.visitNodeOrToken(item);\n            }\n        }\n\n        public visitSourceUnit(node: SourceUnitSyntax): void {\n            this.visitList(node.moduleElements);\n            this.visitToken(node.endOfFileToken);\n        }\n\n        public visitExternalModuleReference(node: ExternalModuleReferenceSyntax): void {\n            this.visitToken(node.moduleOrRequireKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitToken(node.stringLiteral);\n            this.visitToken(node.closeParenToken);\n        }\n\n        public visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): void {\n            this.visitNodeOrToken(node.moduleName);\n        }\n\n        public visitImportDeclaration(node: ImportDeclarationSyntax): void {\n            this.visitToken(node.importKeyword);\n            this.visitToken(node.identifier);\n            this.visitToken(node.equalsToken);\n            this.visitNode(node.moduleReference);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitExportAssignment(node: ExportAssignmentSyntax): void {\n            this.visitToken(node.exportKeyword);\n            this.visitToken(node.equalsToken);\n            this.visitToken(node.identifier);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitClassDeclaration(node: ClassDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.classKeyword);\n            this.visitToken(node.identifier);\n            this.visitOptionalNode(node.typeParameterList);\n            this.visitList(node.heritageClauses);\n            this.visitToken(node.openBraceToken);\n            this.visitList(node.classElements);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.interfaceKeyword);\n            this.visitToken(node.identifier);\n            this.visitOptionalNode(node.typeParameterList);\n            this.visitList(node.heritageClauses);\n            this.visitNode(node.body);\n        }\n\n        public visitHeritageClause(node: HeritageClauseSyntax): void {\n            this.visitToken(node.extendsOrImplementsKeyword);\n            this.visitSeparatedList(node.typeNames);\n        }\n\n        public visitModuleDeclaration(node: ModuleDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.moduleKeyword);\n            this.visitOptionalNodeOrToken(node.moduleName);\n            this.visitOptionalToken(node.stringLiteral);\n            this.visitToken(node.openBraceToken);\n            this.visitList(node.moduleElements);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitFunctionDeclaration(node: FunctionDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.functionKeyword);\n            this.visitToken(node.identifier);\n            this.visitNode(node.callSignature);\n            this.visitOptionalNode(node.block);\n            this.visitOptionalToken(node.semicolonToken);\n        }\n\n        public visitVariableStatement(node: VariableStatementSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitNode(node.variableDeclaration);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitVariableDeclaration(node: VariableDeclarationSyntax): void {\n            this.visitToken(node.varKeyword);\n            this.visitSeparatedList(node.variableDeclarators);\n        }\n\n        public visitVariableDeclarator(node: VariableDeclaratorSyntax): void {\n            this.visitToken(node.identifier);\n            this.visitOptionalNode(node.typeAnnotation);\n            this.visitOptionalNode(node.equalsValueClause);\n        }\n\n        public visitEqualsValueClause(node: EqualsValueClauseSyntax): void {\n            this.visitToken(node.equalsToken);\n            this.visitNodeOrToken(node.value);\n        }\n\n        public visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): void {\n            this.visitToken(node.operatorToken);\n            this.visitNodeOrToken(node.operand);\n        }\n\n        public visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): void {\n            this.visitToken(node.openBracketToken);\n            this.visitSeparatedList(node.expressions);\n            this.visitToken(node.closeBracketToken);\n        }\n\n        public visitOmittedExpression(node: OmittedExpressionSyntax): void {\n        }\n\n        public visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): void {\n            this.visitToken(node.openParenToken);\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.closeParenToken);\n        }\n\n        public visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpressionSyntax): void {\n            this.visitToken(node.identifier);\n            this.visitToken(node.equalsGreaterThanToken);\n            this.visitNodeOrToken(node.body);\n        }\n\n        public visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): void {\n            this.visitNode(node.callSignature);\n            this.visitToken(node.equalsGreaterThanToken);\n            this.visitNodeOrToken(node.body);\n        }\n\n        public visitQualifiedName(node: QualifiedNameSyntax): void {\n            this.visitNodeOrToken(node.left);\n            this.visitToken(node.dotToken);\n            this.visitToken(node.right);\n        }\n\n        public visitTypeArgumentList(node: TypeArgumentListSyntax): void {\n            this.visitToken(node.lessThanToken);\n            this.visitSeparatedList(node.typeArguments);\n            this.visitToken(node.greaterThanToken);\n        }\n\n        public visitConstructorType(node: ConstructorTypeSyntax): void {\n            this.visitToken(node.newKeyword);\n            this.visitOptionalNode(node.typeParameterList);\n            this.visitNode(node.parameterList);\n            this.visitToken(node.equalsGreaterThanToken);\n            this.visitNodeOrToken(node.type);\n        }\n\n        public visitFunctionType(node: FunctionTypeSyntax): void {\n            this.visitOptionalNode(node.typeParameterList);\n            this.visitNode(node.parameterList);\n            this.visitToken(node.equalsGreaterThanToken);\n            this.visitNodeOrToken(node.type);\n        }\n\n        public visitObjectType(node: ObjectTypeSyntax): void {\n            this.visitToken(node.openBraceToken);\n            this.visitSeparatedList(node.typeMembers);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitArrayType(node: ArrayTypeSyntax): void {\n            this.visitNodeOrToken(node.type);\n            this.visitToken(node.openBracketToken);\n            this.visitToken(node.closeBracketToken);\n        }\n\n        public visitGenericType(node: GenericTypeSyntax): void {\n            this.visitNodeOrToken(node.name);\n            this.visitNode(node.typeArgumentList);\n        }\n\n        public visitTypeAnnotation(node: TypeAnnotationSyntax): void {\n            this.visitToken(node.colonToken);\n            this.visitNodeOrToken(node.type);\n        }\n\n        public visitBlock(node: BlockSyntax): void {\n            this.visitToken(node.openBraceToken);\n            this.visitList(node.statements);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitParameter(node: ParameterSyntax): void {\n            this.visitOptionalToken(node.dotDotDotToken);\n            this.visitOptionalToken(node.publicOrPrivateKeyword);\n            this.visitToken(node.identifier);\n            this.visitOptionalToken(node.questionToken);\n            this.visitOptionalNode(node.typeAnnotation);\n            this.visitOptionalNode(node.equalsValueClause);\n        }\n\n        public visitMemberAccessExpression(node: MemberAccessExpressionSyntax): void {\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.dotToken);\n            this.visitToken(node.name);\n        }\n\n        public visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): void {\n            this.visitNodeOrToken(node.operand);\n            this.visitToken(node.operatorToken);\n        }\n\n        public visitElementAccessExpression(node: ElementAccessExpressionSyntax): void {\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.openBracketToken);\n            this.visitNodeOrToken(node.argumentExpression);\n            this.visitToken(node.closeBracketToken);\n        }\n\n        public visitInvocationExpression(node: InvocationExpressionSyntax): void {\n            this.visitNodeOrToken(node.expression);\n            this.visitNode(node.argumentList);\n        }\n\n        public visitArgumentList(node: ArgumentListSyntax): void {\n            this.visitOptionalNode(node.typeArgumentList);\n            this.visitToken(node.openParenToken);\n            this.visitSeparatedList(node.arguments);\n            this.visitToken(node.closeParenToken);\n        }\n\n        public visitBinaryExpression(node: BinaryExpressionSyntax): void {\n            this.visitNodeOrToken(node.left);\n            this.visitToken(node.operatorToken);\n            this.visitNodeOrToken(node.right);\n        }\n\n        public visitConditionalExpression(node: ConditionalExpressionSyntax): void {\n            this.visitNodeOrToken(node.condition);\n            this.visitToken(node.questionToken);\n            this.visitNodeOrToken(node.whenTrue);\n            this.visitToken(node.colonToken);\n            this.visitNodeOrToken(node.whenFalse);\n        }\n\n        public visitConstructSignature(node: ConstructSignatureSyntax): void {\n            this.visitToken(node.newKeyword);\n            this.visitNode(node.callSignature);\n        }\n\n        public visitMethodSignature(node: MethodSignatureSyntax): void {\n            this.visitToken(node.propertyName);\n            this.visitOptionalToken(node.questionToken);\n            this.visitNode(node.callSignature);\n        }\n\n        public visitIndexSignature(node: IndexSignatureSyntax): void {\n            this.visitToken(node.openBracketToken);\n            this.visitNode(node.parameter);\n            this.visitToken(node.closeBracketToken);\n            this.visitOptionalNode(node.typeAnnotation);\n        }\n\n        public visitPropertySignature(node: PropertySignatureSyntax): void {\n            this.visitToken(node.propertyName);\n            this.visitOptionalToken(node.questionToken);\n            this.visitOptionalNode(node.typeAnnotation);\n        }\n\n        public visitCallSignature(node: CallSignatureSyntax): void {\n            this.visitOptionalNode(node.typeParameterList);\n            this.visitNode(node.parameterList);\n            this.visitOptionalNode(node.typeAnnotation);\n        }\n\n        public visitParameterList(node: ParameterListSyntax): void {\n            this.visitToken(node.openParenToken);\n            this.visitSeparatedList(node.parameters);\n            this.visitToken(node.closeParenToken);\n        }\n\n        public visitTypeParameterList(node: TypeParameterListSyntax): void {\n            this.visitToken(node.lessThanToken);\n            this.visitSeparatedList(node.typeParameters);\n            this.visitToken(node.greaterThanToken);\n        }\n\n        public visitTypeParameter(node: TypeParameterSyntax): void {\n            this.visitToken(node.identifier);\n            this.visitOptionalNode(node.constraint);\n        }\n\n        public visitConstraint(node: ConstraintSyntax): void {\n            this.visitToken(node.extendsKeyword);\n            this.visitNodeOrToken(node.type);\n        }\n\n        public visitElseClause(node: ElseClauseSyntax): void {\n            this.visitToken(node.elseKeyword);\n            this.visitNodeOrToken(node.statement);\n        }\n\n        public visitIfStatement(node: IfStatementSyntax): void {\n            this.visitToken(node.ifKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitNodeOrToken(node.condition);\n            this.visitToken(node.closeParenToken);\n            this.visitNodeOrToken(node.statement);\n            this.visitOptionalNode(node.elseClause);\n        }\n\n        public visitExpressionStatement(node: ExpressionStatementSyntax): void {\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitConstructorDeclaration(node: ConstructorDeclarationSyntax): void {\n            this.visitToken(node.constructorKeyword);\n            this.visitNode(node.parameterList);\n            this.visitOptionalNode(node.block);\n            this.visitOptionalToken(node.semicolonToken);\n        }\n\n        public visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.propertyName);\n            this.visitNode(node.callSignature);\n            this.visitOptionalNode(node.block);\n            this.visitOptionalToken(node.semicolonToken);\n        }\n\n        public visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.getKeyword);\n            this.visitToken(node.propertyName);\n            this.visitNode(node.parameterList);\n            this.visitOptionalNode(node.typeAnnotation);\n            this.visitNode(node.block);\n        }\n\n        public visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.setKeyword);\n            this.visitToken(node.propertyName);\n            this.visitNode(node.parameterList);\n            this.visitNode(node.block);\n        }\n\n        public visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitNode(node.variableDeclarator);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitThrowStatement(node: ThrowStatementSyntax): void {\n            this.visitToken(node.throwKeyword);\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitReturnStatement(node: ReturnStatementSyntax): void {\n            this.visitToken(node.returnKeyword);\n            this.visitOptionalNodeOrToken(node.expression);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): void {\n            this.visitToken(node.newKeyword);\n            this.visitNodeOrToken(node.expression);\n            this.visitOptionalNode(node.argumentList);\n        }\n\n        public visitSwitchStatement(node: SwitchStatementSyntax): void {\n            this.visitToken(node.switchKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.closeParenToken);\n            this.visitToken(node.openBraceToken);\n            this.visitList(node.switchClauses);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitCaseSwitchClause(node: CaseSwitchClauseSyntax): void {\n            this.visitToken(node.caseKeyword);\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.colonToken);\n            this.visitList(node.statements);\n        }\n\n        public visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): void {\n            this.visitToken(node.defaultKeyword);\n            this.visitToken(node.colonToken);\n            this.visitList(node.statements);\n        }\n\n        public visitBreakStatement(node: BreakStatementSyntax): void {\n            this.visitToken(node.breakKeyword);\n            this.visitOptionalToken(node.identifier);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitContinueStatement(node: ContinueStatementSyntax): void {\n            this.visitToken(node.continueKeyword);\n            this.visitOptionalToken(node.identifier);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitForStatement(node: ForStatementSyntax): void {\n            this.visitToken(node.forKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitOptionalNode(node.variableDeclaration);\n            this.visitOptionalNodeOrToken(node.initializer);\n            this.visitToken(node.firstSemicolonToken);\n            this.visitOptionalNodeOrToken(node.condition);\n            this.visitToken(node.secondSemicolonToken);\n            this.visitOptionalNodeOrToken(node.incrementor);\n            this.visitToken(node.closeParenToken);\n            this.visitNodeOrToken(node.statement);\n        }\n\n        public visitForInStatement(node: ForInStatementSyntax): void {\n            this.visitToken(node.forKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitOptionalNode(node.variableDeclaration);\n            this.visitOptionalNodeOrToken(node.left);\n            this.visitToken(node.inKeyword);\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.closeParenToken);\n            this.visitNodeOrToken(node.statement);\n        }\n\n        public visitWhileStatement(node: WhileStatementSyntax): void {\n            this.visitToken(node.whileKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitNodeOrToken(node.condition);\n            this.visitToken(node.closeParenToken);\n            this.visitNodeOrToken(node.statement);\n        }\n\n        public visitWithStatement(node: WithStatementSyntax): void {\n            this.visitToken(node.withKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitNodeOrToken(node.condition);\n            this.visitToken(node.closeParenToken);\n            this.visitNodeOrToken(node.statement);\n        }\n\n        public visitEnumDeclaration(node: EnumDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.enumKeyword);\n            this.visitToken(node.identifier);\n            this.visitToken(node.openBraceToken);\n            this.visitSeparatedList(node.enumElements);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitEnumElement(node: EnumElementSyntax): void {\n            this.visitToken(node.propertyName);\n            this.visitOptionalNode(node.equalsValueClause);\n        }\n\n        public visitCastExpression(node: CastExpressionSyntax): void {\n            this.visitToken(node.lessThanToken);\n            this.visitNodeOrToken(node.type);\n            this.visitToken(node.greaterThanToken);\n            this.visitNodeOrToken(node.expression);\n        }\n\n        public visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): void {\n            this.visitToken(node.openBraceToken);\n            this.visitSeparatedList(node.propertyAssignments);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): void {\n            this.visitToken(node.propertyName);\n            this.visitToken(node.colonToken);\n            this.visitNodeOrToken(node.expression);\n        }\n\n        public visitFunctionPropertyAssignment(node: FunctionPropertyAssignmentSyntax): void {\n            this.visitToken(node.propertyName);\n            this.visitNode(node.callSignature);\n            this.visitNode(node.block);\n        }\n\n        public visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): void {\n            this.visitToken(node.getKeyword);\n            this.visitToken(node.propertyName);\n            this.visitToken(node.openParenToken);\n            this.visitToken(node.closeParenToken);\n            this.visitOptionalNode(node.typeAnnotation);\n            this.visitNode(node.block);\n        }\n\n        public visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): void {\n            this.visitToken(node.setKeyword);\n            this.visitToken(node.propertyName);\n            this.visitToken(node.openParenToken);\n            this.visitNode(node.parameter);\n            this.visitToken(node.closeParenToken);\n            this.visitNode(node.block);\n        }\n\n        public visitFunctionExpression(node: FunctionExpressionSyntax): void {\n            this.visitToken(node.functionKeyword);\n            this.visitOptionalToken(node.identifier);\n            this.visitNode(node.callSignature);\n            this.visitNode(node.block);\n        }\n\n        public visitEmptyStatement(node: EmptyStatementSyntax): void {\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitTryStatement(node: TryStatementSyntax): void {\n            this.visitToken(node.tryKeyword);\n            this.visitNode(node.block);\n            this.visitOptionalNode(node.catchClause);\n            this.visitOptionalNode(node.finallyClause);\n        }\n\n        public visitCatchClause(node: CatchClauseSyntax): void {\n            this.visitToken(node.catchKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitToken(node.identifier);\n            this.visitOptionalNode(node.typeAnnotation);\n            this.visitToken(node.closeParenToken);\n            this.visitNode(node.block);\n        }\n\n        public visitFinallyClause(node: FinallyClauseSyntax): void {\n            this.visitToken(node.finallyKeyword);\n            this.visitNode(node.block);\n        }\n\n        public visitLabeledStatement(node: LabeledStatementSyntax): void {\n            this.visitToken(node.identifier);\n            this.visitToken(node.colonToken);\n            this.visitNodeOrToken(node.statement);\n        }\n\n        public visitDoStatement(node: DoStatementSyntax): void {\n            this.visitToken(node.doKeyword);\n            this.visitNodeOrToken(node.statement);\n            this.visitToken(node.whileKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitNodeOrToken(node.condition);\n            this.visitToken(node.closeParenToken);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitTypeOfExpression(node: TypeOfExpressionSyntax): void {\n            this.visitToken(node.typeOfKeyword);\n            this.visitNodeOrToken(node.expression);\n        }\n\n        public visitDeleteExpression(node: DeleteExpressionSyntax): void {\n            this.visitToken(node.deleteKeyword);\n            this.visitNodeOrToken(node.expression);\n        }\n\n        public visitVoidExpression(node: VoidExpressionSyntax): void {\n            this.visitToken(node.voidKeyword);\n            this.visitNodeOrToken(node.expression);\n        }\n\n        public visitDebuggerStatement(node: DebuggerStatementSyntax): void {\n            this.visitToken(node.debuggerKeyword);\n            this.visitToken(node.semicolonToken);\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class PositionTrackingWalker extends SyntaxWalker {\n        private _position: number = 0;\n\n        public visitToken(token: ISyntaxToken): void {\n            this._position += token.fullWidth();\n        }\n\n        public position(): number {\n            return this._position;\n        }\n\n        public skip(element: ISyntaxElement): void {\n            this._position += element.fullWidth();\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export interface ITokenInformation {\n        previousToken: ISyntaxToken;\n        nextToken: ISyntaxToken;\n    }\n\n    export class SyntaxInformationMap extends SyntaxWalker {\n        private tokenToInformation = Collections.createHashTable(Collections.DefaultHashTableCapacity, Collections.identityHashCode);\n        private elementToPosition = Collections.createHashTable(Collections.DefaultHashTableCapacity, Collections.identityHashCode);\n\n        private _previousToken = null;\n        private _previousTokenInformation: ITokenInformation = null;\n        private _currentPosition = 0;\n        private _elementToParent = Collections.createHashTable(Collections.DefaultHashTableCapacity, Collections.identityHashCode);\n\n        private _parentStack: SyntaxNode[] = [];\n\n        constructor(private trackParents: boolean, private trackPreviousToken: boolean) {\n            super();\n            this._parentStack.push(null);\n        }\n\n        public static create(node: SyntaxNode, trackParents: boolean, trackPreviousToken: boolean): SyntaxInformationMap {\n            var map = new SyntaxInformationMap(trackParents, trackPreviousToken);\n            map.visitNode(node);\n            return map;\n        }\n\n        public visitNode(node: SyntaxNode): void {\n            this.trackParents && this._elementToParent.add(node, ArrayUtilities.last(this._parentStack));\n            this.elementToPosition.add(node, this._currentPosition);\n\n            this.trackParents && this._parentStack.push(node);\n            super.visitNode(node);\n            this.trackParents && this._parentStack.pop();\n        }\n\n        public visitToken(token: ISyntaxToken): void {\n            this.trackParents && this._elementToParent.add(token, ArrayUtilities.last(this._parentStack));\n\n            if (this.trackPreviousToken) {\n                var tokenInformation: ITokenInformation = {\n                    previousToken: this._previousToken,\n                    nextToken: null\n                };\n\n                if (this._previousTokenInformation !== null) {\n                    this._previousTokenInformation.nextToken = token;\n                }\n\n                this._previousToken = token;\n                this._previousTokenInformation = tokenInformation;\n\n                this.tokenToInformation.add(token, tokenInformation);\n            }\n\n            this.elementToPosition.add(token, this._currentPosition);\n            this._currentPosition += token.fullWidth();\n        }\n\n        public parent(element: ISyntaxElement): SyntaxNode {\n            return this._elementToParent.get(element);\n        }\n\n        public fullStart(element: ISyntaxElement): number {\n            return this.elementToPosition.get(element);\n        }\n\n        public start(element: ISyntaxElement): number {\n            return this.fullStart(element) + element.leadingTriviaWidth();\n        }\n\n        public end(element: ISyntaxElement): number {\n            return this.start(element) + element.width();\n        }\n\n        public previousToken(token: ISyntaxToken): ISyntaxToken {\n            return this.tokenInformation(token).previousToken;\n        }\n\n        public tokenInformation(token: ISyntaxToken): ITokenInformation {\n            return this.tokenToInformation.get(token);\n        }\n\n        public firstTokenInLineContainingToken(token: ISyntaxToken): ISyntaxToken {\n            var current = token;\n            while (true) {\n                var information = this.tokenInformation(current);\n                if (this.isFirstTokenInLineWorker(information)) {\n                    break;\n                }\n\n                current = information.previousToken;\n            }\n\n            return current;\n        }\n\n        public isFirstTokenInLine(token: ISyntaxToken): boolean {\n            var information = this.tokenInformation(token);\n            return this.isFirstTokenInLineWorker(information);\n\n        }\n\n        private isFirstTokenInLineWorker(information: ITokenInformation): boolean {\n            return information.previousToken === null || information.previousToken.hasTrailingNewLine();\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\n// A debug class that we use to make sure a syntax node is valid.  Currently, this simply verifies\n// that the same token does not appear in the tree multiple times.  This is important for \n// subsystems that want to map between tokens and positions.  If a token shows up multiple times in\n// the node, then it will not have a unique position, previous token, etc. etc. and that can screw\n// many algorithms.  For this reason, when generating trees, it is important that nodes that are \n// reused are cloned before insertion.\nmodule TypeScript {\n    export class SyntaxNodeInvariantsChecker extends SyntaxWalker {\n        private tokenTable = Collections.createHashTable(Collections.DefaultHashTableCapacity, Collections.identityHashCode);\n\n        public static checkInvariants(node: SyntaxNode): void {\n            node.accept(new SyntaxNodeInvariantsChecker());\n        }\n\n        public visitToken(token: ISyntaxToken): void {\n            // We\'re calling \'add\', so the table will throw if we try to put the same token in multiple\n            // times. \n            this.tokenTable.add(token, token);\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class DepthLimitedWalker extends PositionTrackingWalker {\n        private _depth: number = 0;\n        private _maximumDepth: number = 0;\n\n        constructor(maximumDepth: number) {\n            super();\n            this._maximumDepth = maximumDepth;\n        }\n\n        public visitNode(node: SyntaxNode): void {\n            if (this._depth < this._maximumDepth) {\n                this._depth++;\n                super.visitNode(node);\n                this._depth--;\n            }\n            else {\n                // update the position\n                this.skip(node);\n            }\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript.Parser {\n    // Information the parser needs to effectively rewind.\n    interface IParserRewindPoint {\n        // Information used by normal parser source.\n        previousToken: ISyntaxToken;\n        absolutePosition: number;\n        slidingWindowIndex: number;\n\n        // Information used by the incremental parser source.\n        oldSourceUnitCursorIndex: number;\n        changeDelta: number;\n        changeRange: TextChangeRange;\n\n        // Information used by the parser itself.\n\n        // As we speculatively parser, we may build up diagnostics.  When we rewind we want to \n        // \'forget\' that information.In order to do that we store the count of diagnostics and \n        // when we start speculating, and we reset to that count when we\'re done.  That way the\n        // speculative parse does not affect any further results.\n        diagnosticsCount: number;\n\n        // For debug purposes only, we also track the following information. They help us assert \n        // that we\'re not doing anything unexpected.\n\n        // Rewind points should work like a stack.  The first rewind point given out should be the\n        // last one released.  By keeping track of the count of points out when this was created, \n        // we can ensure that invariant was preserved.\n        pinCount: number;\n\n        // isInStrictMode and listParsingState should not have to be tracked by a rewind point.\n        // Because they are naturally mutated and restored based on the normal stack movement of \n        // the parser, they should automatically return to whatever value they had to begin with\n        // if the parser decides to rewind or not.  However, to ensure that this is true, we track\n        // these variables and check if they have the same value when we\'re rewinding/releasing.\n        isInStrictMode: boolean;\n        listParsingState: ListParsingState;\n    }\n\n    // The precedence of expressions in typescript.  While we\'re parsing an expression, we will \n    // continue to consume and form new trees if the precedence is greater than our current\n    // precedence.  For example, if we have: a + b * c, we will first parse \'a\' with precedence 0. \n    // We will then see the + with precedence 13.  13 is greater than 0 so we will decide to create\n    // a binary expression with the result of parsing the sub expression \"b * c\".  We\'ll then parse\n    // the term \'b\' (passing in precedence 13).  We will then see the * with precedence 14.  14 is\n    // greater than 13, so we will create a binary expression from \"b\" and \"c\", return that, and \n    // join it with \"a\" producing:\n    //\n    //      +\n    //     / \\\n    //    a   *\n    //       / \\\n    //      b   c\n    //\n    // If we instead had: \"a * b + c\", we would first parser \'a\' with precedence 0.  We would then see \n    // the * with precedence 14.  14 is greater than 0 so we will decide to create a binary expression\n    // with the result of parsing the sub expression \"b + c\".  We\'ll then parse the term \'b\' (passing in\n    // precedence 14).  We will then see the + with precedence 13.  13 is less than 14, so we won\'t \n    // continue parsing subexpressions and will just return the expression \'b\'.  The caller will join \n    // that into \"a * b\" (and will be back at precedence 0). It will then see the + with precedence 11.\n    // 11 is greater than 0 so it will parse the sub expression and make a binary expression out of it\n    // producing:\n    //\n    //        +\n    //       / \\\n    //      *   c\n    //     / \\\n    //    a   b\n    enum ExpressionPrecedence {\n        // Intuitively, commas have the lowest precedence.  \"a || b, c\" is \"(a || b), c\", not\n        // \"a || (b, c)\"\n        CommaExpressionPrecedence = 1,\n\n        AssignmentExpressionPrecedence = 2,\n\n        ConditionalExpressionPrecedence = 3,\n\n        // REVIEW: Should ArrowFunctions have higher, lower, or the same precedence as ternary?\n        ArrowFunctionPrecedence = 4,\n\n        LogicalOrExpressionPrecedence = 5,\n        LogicalAndExpressionPrecedence = 6,\n        BitwiseOrExpressionPrecedence = 7,\n        BitwiseExclusiveOrExpressionPrecedence = 8,\n        BitwiseAndExpressionPrecedence = 9,\n        EqualityExpressionPrecedence = 10,\n        RelationalExpressionPrecedence = 11,\n        ShiftExpressionPrecdence = 12,\n        AdditiveExpressionPrecedence = 13,\n        MultiplicativeExpressionPrecedence = 14,\n\n        // Intuitively, unary expressions have the highest precedence.  After all, if you have:\n        //   !foo || bar\n        //\n        // Then you have \"(!foo) || bar\", not \"!(foo || bar)\"\n        UnaryExpressionPrecedence = 15,\n    }\n\n    // The current state of the parser wrt to list parsing.  The way to read these is as:\n    // CurrentProduction_SubList.  i.e. \"Block_Statements\" means \"we\'re parsing a Block, and we\'re \n    // currently parsing list of statements within it\".  This is used by the list parsing mechanism\n    // to parse the elements of the lists, and recover from errors we encounter when we run into \n    // unexpected code.\n    // \n    // For example, when we are in ArgumentList_Arguments, we will continue trying to consume code \n    // as long as \"isArgument\" is true.  If we run into a token for which \"isArgument\" is not true \n    // we will do the following:\n    //\n    // If the token is a StopToken for ArgumentList_Arguments (like \")\" ) then we will stop parsing\n    // the list of arguments with no error.\n    //\n    // Otherwise, we *do* report an error for this unexpected token, and then enter error recovery \n    // mode to decide how to try to recover from this unexpected token.\n    //\n    // Error recovery will walk up the list of states we\'re in seeing if the token is a stop token\n    // for that construct *or* could start another element within what construct.  For example, if\n    // the unexpected token was \'}\' then that would be a stop token for Block_Statements. \n    // Alternatively, if the unexpected token was \'return\', then that would be a start token for \n    // the next statment in Block_Statements.\n    // \n    // If either of those cases are true, We will then return *without* consuming  that token. \n    // (Remember, we\'ve already reported an error).  Now we\'re just letting the higher up parse \n    // constructs eventually try to consume that token.\n    //\n    // If none of the higher up states consider this a stop or start token, then we will simply \n    // consume the token and add it to our list of \'skipped tokens\'.  We will then repeat the \n    // above algorithm until we resynchronize at some point.\n    enum ListParsingState {\n        SourceUnit_ModuleElements = 1 << 0,\n        ClassDeclaration_ClassElements = 1 << 1,\n        ModuleDeclaration_ModuleElements = 1 << 2,\n        SwitchStatement_SwitchClauses = 1 << 3,\n        SwitchClause_Statements = 1 << 4,\n        Block_Statements = 1 << 5,\n        TryBlock_Statements = 1 << 6,\n        CatchBlock_Statements = 1 << 7,\n        EnumDeclaration_EnumElements = 1 << 8,\n        ObjectType_TypeMembers = 1 << 9,\n        ClassOrInterfaceDeclaration_HeritageClauses = 1 << 10,\n        HeritageClause_TypeNameList = 1 << 11,\n        VariableDeclaration_VariableDeclarators_AllowIn = 1 << 12,\n        VariableDeclaration_VariableDeclarators_DisallowIn = 1 << 13,\n        ArgumentList_AssignmentExpressions = 1 << 14,\n        ObjectLiteralExpression_PropertyAssignments = 1 << 15,\n        ArrayLiteralExpression_AssignmentExpressions = 1 << 16,\n        ParameterList_Parameters = 1 << 17,\n        TypeArgumentList_Types = 1 << 18,\n        TypeParameterList_TypeParameters = 1 << 19,\n\n        FirstListParsingState = SourceUnit_ModuleElements,\n        LastListParsingState = TypeArgumentList_Types,\n    }\n\n    // Allows one to easily move over a syntax tree.  Used during incremental parsing to move over\n    // the previously parsed tree to provide nodes and tokens that can be reused when parsing the\n    // updated text.\n    class SyntaxCursor {\n        private _elements: ISyntaxElement[] = [];\n        private _index: number = 0;\n        private _pinCount: number = 0;\n\n        constructor(sourceUnit: SourceUnitSyntax) {\n            sourceUnit.insertChildrenInto(this._elements, 0);\n        }\n\n        public isFinished(): boolean {\n            return this._index === this._elements.length;\n        }\n\n        public currentElement(): ISyntaxElement {\n            if (this.isFinished()) {\n                return null;\n            }\n\n            return this._elements[this._index];\n        }\n\n        public currentNode(): SyntaxNode {\n            var element = this.currentElement();\n            return element !== null && element.isNode() ? <SyntaxNode>element : null;\n        }\n\n        public moveToFirstChild() {\n            if (this.isFinished()) {\n                return;\n            }\n\n            var element = this._elements[this._index];\n            if (element.isToken()) {\n                // If we\'re already on a token, there\'s nothing to do.\n                return;\n            }\n\n            // Otherwise, break the node we\'re pointing at into its children.  We\'ll then be \n            // pointing at the first child\n            var node = <SyntaxNode>element;\n\n            // Remove the item that we\'re pointing at.\n            this._elements.splice(this._index, 1);\n\n            // And add its children into the position it was at.\n            node.insertChildrenInto(this._elements, this._index);\n        }\n\n        public moveToNextSibling() {\n            if (this.isFinished()) {\n                return;\n            }\n\n            if (this._pinCount > 0) {\n                // If we\'re currently pinned, then just move our index forward.  We\'ll then be \n                // pointing at the next sibling.\n                this._index++;\n                return;\n            }\n\n            // if we\'re not pinned, we better be pointed at the first item in the list.\n            // Debug.assert(this._index === 0);\n\n            // Just shift ourselves over so we forget the current element we\'re pointing at and \n            // we\'re pointing at the next slibing.\n            this._elements.shift();\n        }\n\n        public getAndPinCursorIndex(): number {\n            this._pinCount++;\n            return this._index;\n        }\n\n        public releaseAndUnpinCursorIndex(index: number) {\n            // this._index = index;\n\n            // Debug.assert(this._pinCount > 0);\n            this._pinCount--;\n            if (this._pinCount === 0) {\n                // The first pin was given out at index 0.  So we better be back at index 0.\n                // Debug.assert(this._index === 0);\n            }\n        }\n\n        public rewindToPinnedCursorIndex(index: number): void {\n            // Debug.assert(index >= 0 && index <= this._elements.length);\n            // Debug.assert(this._pinCount > 0);\n            this._index = index;\n        }\n\n        public pinCount(): number {\n            return this._pinCount;\n        }\n\n        private moveToFirstToken(): void {\n            var element: ISyntaxElement;\n\n            while (!this.isFinished()) {\n                element = this.currentElement();\n                if (element.isNode()) {\n                    this.moveToFirstChild();\n                    continue;\n                }\n\n                // Debug.assert(element.isToken());\n                return;\n            }\n        }\n\n        public currentToken(): ISyntaxToken {\n            this.moveToFirstToken();\n            if (this.isFinished()) {\n                return null;\n            }\n\n            var element = this.currentElement();\n\n            // Debug.assert(element.isToken());\n            return <ISyntaxToken>element;\n        }\n\n        public peekToken(n: number): ISyntaxToken {\n            this.moveToFirstToken();\n            var pin = this.getAndPinCursorIndex();\n            try {\n                for (var i = 0; i < n; i++) {\n                    this.moveToNextSibling();\n                    this.moveToFirstToken();\n                }\n\n                return this.currentToken();\n            }\n            finally {\n                this.rewindToPinnedCursorIndex(pin);\n                this.releaseAndUnpinCursorIndex(pin);\n            }\n        }\n    }\n    \n    // Interface that represents the source that the parser pulls tokens from.  Essentially, this \n    // is the interface that the parser needs an underlying scanner to provide.  This allows us to\n    // separate out \"what\" the parser does with the tokens it retrieves versus \"how\" it obtains\n    // the tokens.  i.e. all the logic for parsing language constructs sits in ParserImpl, while \n    // all the logic for retrieving tokens sits in individual IParserSources.\n    //\n    // By separating out this interface, we also make incremental parsing much easier.  Instead of\n    // having the parser directly sit on top of the scanner, we sit it on this abstraction.  Then\n    // in incremental scenarios, we can use the IncrementalParserSource to pull tokens (or even \n    // full nodes) from the previous tree when possible.  Of course, we\'ll still end up using a \n    // scanner for new text.  But that can all happen inside the source, with none of the logic in\n    // the parser having to be aware of it.\n    //\n    // In general terms, a parser source represents a position within a text.  At that position, \n    // one can ask for the \'currentToken\' that the source is pointing at.  The \'previousToken\' that\n    // precedes this token (generally used for automatic semicolon insertion, and other minor \n    // parsing decisions).  Then, once the parser consumes that token it can ask the source to\n    // \'moveToNextToken\'.\n    //\n    // Additional special abilities include:\n    //  1) Being able to peek an arbitrary number of tokens ahead efficiently.\n    //  2) Being able to retrieve fully parsed nodes from the source, not just tokens. This happens\n    //     in incremental scenarios when the source is certain that the node is completley safe to\n    //     reuse.\n    //  3) Being able to get a \'rewind point\' to the current location.  This allows the parser to\n    //     speculatively parse as much as it wants, and then reset itself back to that point, \n    //     ensuring that no state changes that occurred after getting the \'rewing point\' are \n    //     observable.\n    //  4) Being able to reinterpret the current token being pointed at as a regular expression \n    //     token.  This is necessary as the scanner does not have enough information to correctly\n    //     distinguish \"/\" or \"/=\" as divide tokens, versus \"/..../\" as a regex token.  If the \n    //     parser sees a \"/\" in a place where a divide is not allowed, but a regex would be, then\n    //     it can call into the source and ask if a regex token could be returned instead.  The \n    //     sources are smart enough to do that and not be affected by any additional work they may\n    //     have done when they originally scanned that token.\n    interface IParserSource {\n        // The absolute index that the current token starts at.  \'currentToken\' and \'currentNode\'\n        // have their fullStart at this position.  previousToken has it\'s fullEnd at this position.\n        absolutePosition(): number;\n\n        // The token that comes before the \'currentToken\' that hte source is pointing at. Initially\n        // null. \n        previousToken(): ISyntaxToken;\n\n        // The current syntax node the source is pointing at.  Only available in incremental settings.\n        // The source can point at a node if that node doesn\'t intersect any of the text changes in\n        // the file, and doesn\'t contain certain unacceptable constructs.  For example, if the node\n        // contains skipped text, then it will not be reused.\n        currentNode(): SyntaxNode;\n\n        // The current token the source is pointing at.\n        currentToken(): ISyntaxToken;\n\n        // The current token reinterpretted as a regex token.  This must only be called when the \n        // source is pointing at a \"/\" or \"/=\" token. \n        currentTokenAllowingRegularExpression(): ISyntaxToken;\n\n        // Peek any number of tokens ahead from the current location in source.  peekToken(0) is\n        // equivalent to \'currentToken\', peekToken(1) is the next token, peekToken(2) the token\n        // after that, etc.  If the caller peeks past the end of the text, then EndOfFile tokens\n        // will be returned.\n        peekToken(n: number): ISyntaxToken;\n\n        // Called to move the source to the next node or token once the parser has consumed the \n        // current one.\n        moveToNextNode(): void;\n        moveToNextToken(): void;\n\n        // Gets a rewind point that the parser can use to move back to after it speculatively \n        // parses something.  The source guarantees that if the parser calls \'rewind\' with that \n        // point that it will be mostly in the same state that it was in when \'getRewindPoint\'\n        // was called.  i.e. calling currentToken, peekToken, tokenDiagnostics, etc. will result\n        // in the same values.  One allowed exemption to this is \'currentNode\'.  If a rewind point\n        // is requested and rewound, then getting the currentNode may not be possible.  However,\n        // as this is purely a performance optimization, it will not affect correctness.\n        //\n        // Note: that rewind points are not free (but they should also not be too expensive).  So\n        // they should be used judiciously.  While a rewind point is held by the parser, the source\n        // is not free to do things that it would normally do.  For example, it cannot throw away\n        // tokens that it has scanned on or after the rewind point as it must keep them alive for\n        // the parser to move back to.\n        //\n        // Rewind points also work in a stack fashion.  The first rewind point given out must be\n        // the last rewind point released.  Do not release them out of order, or bad things can \n        // happen.\n        //\n        // Do *NOT* forget to release a rewind point.  Always put them in a finally block to ensure\n        // that they are released.  If they are not released, things will still work, you will just\n        // consume far more memory than necessary.\n        getRewindPoint(): IParserRewindPoint;\n\n        // Rewinds the source to the position and state it was at when this rewind point was created.\n        // This does not need to be called if the parser decides it does not need to rewind.  For \n        // example, the parser may speculatively parse out a lambda expression when it sees something\n        // ambiguous like \"(a = b, c = ...\".  If it succeeds parsing that as a lambda, then it will\n        // just return that result.  However, if it fails *then* it will rewind and try it again as\n        // a parenthesized expression.  \n        rewind(rewindPoint: IParserRewindPoint): void;\n\n        // Called when the parser is done speculative parsing and no longer needs the rewind point.\n        // Must be called for every rewing point retrived.\n        releaseRewindPoint(rewindPoint: IParserRewindPoint): void;\n\n        // Retrieves the diagnostics generated while the source was producing nodes or tokens. \n        // Should generally only be called after the document has been completely parsed.\n        tokenDiagnostics(): SyntaxDiagnostic[];\n        \n        languageVersion(): LanguageVersion;\n    }\n\n    // Parser source used in batch scenarios.  Directly calls into an underlying text scanner and\n    // supports none of the functionality to reuse nodes.  Good for when you just want want to do\n    // a single parse of a file.\n    class NormalParserSource implements IParserSource {\n        // The sliding window that we store tokens in.\n        private slidingWindow: SlidingWindow;\n\n        // The scanner we\'re pulling tokens from.\n        private scanner: Scanner;\n\n        // The previous token to the current token.  Set when we advance to the next token.\n        private _previousToken: ISyntaxToken = null;\n\n        // The absolute position we\'re at in the text we\'re reading from.\n        private _absolutePosition: number = 0;\n\n        // The diagnostics we get while scanning.  Note: this never gets rewound when we do a normal\n        // rewind.  That\'s because rewinding doesn\'t affect the tokens created.  It only affects where\n        // in the token stream we\'re pointing at.  However, it will get modified if we we decide to\n        // reparse a / or /= as a regular expression.\n        private _tokenDiagnostics: SyntaxDiagnostic[] = [];\n\n        // Pool of rewind points we give out if the parser needs one.\n        private rewindPointPool: IParserRewindPoint[] = [];\n        private rewindPointPoolCount = 0;\n\n        constructor(fileName: string,\n                    text: ISimpleText,\n                    languageVersion: LanguageVersion) {\n            this.slidingWindow = new SlidingWindow(this, ArrayUtilities.createArray(/*defaultWindowSize:*/ 32, null), null);\n            this.scanner = new Scanner(fileName, text, languageVersion);\n        }\n\n        public languageVersion(): LanguageVersion {\n            return this.scanner.languageVersion();\n        }\n\n        public currentNode(): SyntaxNode {\n            // The normal parser source never returns nodes.  They\'re only returned by the \n            // incremental parser source.\n            return null;\n        }\n\n        public moveToNextNode(): void {\n            // Should never get called.\n            throw Errors.invalidOperation();\n        }\n\n        public absolutePosition() {\n            return this._absolutePosition;\n        }\n\n        public previousToken(): ISyntaxToken {\n            return this._previousToken;\n        }\n\n        public tokenDiagnostics(): SyntaxDiagnostic[] {\n            return this._tokenDiagnostics;\n        }\n\n        private getOrCreateRewindPoint(): IParserRewindPoint {\n            if (this.rewindPointPoolCount === 0) {\n                return <IParserRewindPoint>{};\n            }\n\n            this.rewindPointPoolCount--;\n            var result = this.rewindPointPool[this.rewindPointPoolCount];\n            this.rewindPointPool[this.rewindPointPoolCount] = null;\n            return result;\n        }\n\n        public getRewindPoint(): IParserRewindPoint {\n            var slidingWindowIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n\n            var rewindPoint = this.getOrCreateRewindPoint();\n\n            rewindPoint.slidingWindowIndex = slidingWindowIndex;\n            rewindPoint.previousToken = this._previousToken;\n            rewindPoint.absolutePosition = this._absolutePosition;\n\n            rewindPoint.pinCount = this.slidingWindow.pinCount();\n\n            return rewindPoint;\n        }\n\n        public isPinned(): boolean {\n            return this.slidingWindow.pinCount() > 0;\n        }\n\n        public rewind(rewindPoint: IParserRewindPoint): void {\n            this.slidingWindow.rewindToPinnedIndex(rewindPoint.slidingWindowIndex);\n\n            this._previousToken = rewindPoint.previousToken;\n            this._absolutePosition = rewindPoint.absolutePosition;\n        }\n\n        public releaseRewindPoint(rewindPoint: IParserRewindPoint): void {\n            // Debug.assert(this.slidingWindow.pinCount() === rewindPoint.pinCount);\n            this.slidingWindow.releaseAndUnpinAbsoluteIndex((<any>rewindPoint).absoluteIndex);\n\n            this.rewindPointPool[this.rewindPointPoolCount] = rewindPoint;\n            this.rewindPointPoolCount++;\n        }\n\n        public fetchMoreItems(allowRegularExpression: boolean, sourceIndex: number, window: any[], destinationIndex: number, spaceAvailable: number): number {\n            // Assert disabled because it is actually expensive enugh to affect perf.\n            // Debug.assert(spaceAvailable > 0);\n            window[destinationIndex] = this.scanner.scan(this._tokenDiagnostics, allowRegularExpression);\n            return 1;\n        }\n\n        public peekToken(n: number): ISyntaxToken {\n            return this.slidingWindow.peekItemN(n);\n        }\n\n        public moveToNextToken(): void {\n            var currentToken = this.currentToken();\n            this._absolutePosition += currentToken.fullWidth();\n            this._previousToken = currentToken;\n\n            this.slidingWindow.moveToNextItem();\n        }\n\n        public currentToken(): ISyntaxToken {\n            return this.slidingWindow.currentItem(/*allowRegularExpression:*/ false);\n        }\n\n        private removeDiagnosticsOnOrAfterPosition(position: number): void {\n            // walk backwards, removing any diagnostics that came after the the current token\'s\n            // full start position.\n            var tokenDiagnosticsLength = this._tokenDiagnostics.length;\n            while (tokenDiagnosticsLength > 0) {\n                var diagnostic = this._tokenDiagnostics[tokenDiagnosticsLength - 1];\n                if (diagnostic.start() >= position) {\n                    tokenDiagnosticsLength--;\n                }\n                else {\n                    break;\n                }\n            }\n\n            this._tokenDiagnostics.length = tokenDiagnosticsLength;\n        }\n\n        public resetToPosition(absolutePosition: number, previousToken: ISyntaxToken): void {\n            this._absolutePosition = absolutePosition;\n            this._previousToken = previousToken;\n\n            // First, remove any diagnostics that came after this position.\n            this.removeDiagnosticsOnOrAfterPosition(absolutePosition);\n\n            // Now, tell our sliding window to throw away all tokens after this position as well.\n            this.slidingWindow.disgardAllItemsFromCurrentIndexOnwards();\n\n            // Now tell the scanner to reset its position to this position as well.  That way\n            // when we try to scan the next item, we\'ll be at the right location.\n            this.scanner.setAbsoluteIndex(absolutePosition);\n        }\n\n        public currentTokenAllowingRegularExpression(): ISyntaxToken {\n            // We better be on a divide token right now.\n            // Debug.assert(SyntaxFacts.isAnyDivideToken(this.currentToken().tokenKind));\n\n            // First, we\'re going to rewind all our data to the point where this / or /= token started.\n            // That\'s because if it does turn out to be a regular expression, then any tokens or token \n            // diagnostics we produced after the original / may no longer be valid.  This would actually\n            // be a  fairly expected case.  For example, if you had:  / ... gibberish ... /, we may have \n            // produced several diagnostics in the process of scanning the tokens after the first / as\n            // they may not have been legal javascript okens.\n            //\n            // We also need to remove all the tokens we\'ve gotten from the slash and onwards.  They may\n            // not have been what the scanner would have produced if it decides that this is actually\n            // a regular expresion.\n            this.resetToPosition(this._absolutePosition, this._previousToken);\n\n            // Now actually fetch the token again from the scanner. This time let it know that it\n            // can scan it as a regex token if it wants to.\n            var token = this.slidingWindow.currentItem(/*allowRegularExpression:*/ true);\n\n            // We have better gotten some sort of regex token.  Otherwise, something *very* wrong has\n            // occurred.\n            // Debug.assert(SyntaxFacts.isAnyDivideOrRegularExpressionToken(token.tokenKind));\n\n            return token;\n        }\n    }\n\n    // Parser source used in incremental scenarios. This parser source wraps an old tree, text \n    // change and new text, and uses all three to provide nodes and tokens to the parser.  In\n    // general, nodes from the old tree are returned as long as they do not intersect with the text \n    // change.  Then, once the text change is reached, tokens from the old tree are returned as \n    // long as they do not intersect with the text change.  Then, the text that is actually changed\n    // will be scanned using a normal scanner.  Then, once the new text is scanned, the source will\n    // attempt to sync back up with nodes or tokens that started where the new tokens end. Once it\n    // can do that, then all subsequent data will come from the original tree.\n    //\n    // This allows for an enormous amount of tree reuse in common scenarios.  Situations that \n    // prevent this level of reuse include substantially destructive operations like introducing\n    // \"/*\" without a \"*/\" nearby to terminate the comment.\n    class IncrementalParserSource implements IParserSource {\n        // The underlying parser source that we will use to scan tokens from any new text, or any \n        // tokens from the old tree that we decide we can\'t use for any reason.  We will also \n        // continue scanning tokens from this source until we\'ve decided that we\'re resynchronized\n        // and can read in subsequent data from the old tree.\n        //\n        // This parser source also keeps track of the absolute position in the text that we\'re in,\n        // the previous token, and any token diagnostics produced.  That way we dont\' have to track\n        // that ourselves.\n        private _normalParserSource: NormalParserSource;\n\n        // The range of text in the *original* text that was changed, and the new length of it after\n        // the change.\n        private _changeRange: TextChangeRange;\n\n        // This number represents how our position in the old tree relates to the position we\'re \n        // pointing at in the new text.  If it is 0 then our positions are in sync and we can read\n        // nodes or tokens from the old tree.  If it is non-zero, then our positions are not in \n        // sync and we cannot use nodes or tokens from the old tree.\n        //\n        // Now, changeDelta could be negative or positive.  Negative means \'the position we\'re at\n        // in the original tree is behind the position we\'re at in the text\'.  In this case we \n        // keep throwing out old nodes or tokens (and thus move forward in the original tree) until\n        // changeDelta becomes 0 again or positive.  If it becomes 0 then we are resynched and can\n        // read nodes or tokesn from the tree.\n        //\n        // If changeDelta is positive, that means the current node or token we\'re pointing at in \n        // the old tree is at a further ahead position than the position we\'re pointing at in the\n        // new text.  In this case we have no choice but to scan tokens from teh new text.  We will\n        // continue to do so until, again, changeDelta becomes 0 and we\'ve resynced, or change delta\n        // becomes negative and we need to skip nodes or tokes in the original tree.\n        private _changeDelta: number = 0;\n\n        // The cursor we use to navigate through and retrieve nodes and tokens from the old tree.\n        private _oldSourceUnitCursor: SyntaxCursor;\n\n        constructor(oldSyntaxTree: SyntaxTree,\n                    textChangeRange: TextChangeRange,\n                    newText: ISimpleText) {\n            var oldSourceUnit = oldSyntaxTree.sourceUnit();\n            this._oldSourceUnitCursor = new SyntaxCursor(oldSourceUnit);\n\n            // In general supporting multiple individual edits is just not that important.  So we \n            // just collapse this all down to a single range to make the code here easier.  The only\n            // time this could be problematic would be if the user made a ton of discontinuous edits.\n            // For example, doing a column select on a *large* section of a code.  If this is a \n            // problem, we can always update this code to handle multiple changes.\n            this._changeRange = IncrementalParserSource.extendToAffectedRange(textChangeRange, oldSourceUnit);\n\n            // The old tree\'s length, plus whatever length change was caused by the edit better \n            // equal the new text\'s length!\n            // Debug.assert((oldSourceUnit.fullWidth() - this._changeRange.span().length() + this._changeRange.newLength()) === newText.length());\n\n            // Set up a scanner so that we can scan tokens out of the new text.\n            this._normalParserSource = new NormalParserSource(oldSyntaxTree.fileName(), newText, oldSyntaxTree.languageVersion());\n        }\n\n        private static extendToAffectedRange(changeRange:TextChangeRange,\n                                             sourceUnit: SourceUnitSyntax): TextChangeRange {\n            // Consider the following code:\n            //      void foo() { /; }\n            //\n            // If the text changes with an insertion of / just before the semicolon then we end up with:\n            //      void foo() { //; }\n            //\n            // If we were to just use the changeRange a is, then we would not rescan the { token \n            // (as it does not intersect hte actual original change range).  Because an edit may\n            // change the token touching it, we actually need to look back *at least* one token so\n            // that the prior token sees that change.  \n            //\n            // Note: i believe (outside of regex tokens) max lookahead is just one token for \n            // TypeScript.  However, if this turns out to be wrong, we may have to increase how much\n            // futher we look back. \n            //\n            // Note: lookahead handling for regex characters is handled specially in during \n            // incremental parsing, and does not need to be handled here.\n\n            var maxLookahead = 1;\n\n            var start = changeRange.span().start();\n\n            // the first iteration aligns us with the change start. subsequent iteration move us to\n            // the left by maxLookahead tokens.  We only need to do this as long as we\'re not at the\n            // start of the tree.\n            for (var i = 0; start > 0 && i <= maxLookahead; i++) {\n                var token = sourceUnit.findToken(start);\n\n                // Debug.assert(token.kind() !== SyntaxKind.None);\n                // Debug.assert(token.kind() === SyntaxKind.EndOfFileToken || token.fullWidth() > 0);\n\n                var position = token.fullStart();\n\n                start = MathPrototype.max(0, position - 1);\n            }\n\n            var finalSpan = TextSpan.fromBounds(start, changeRange.span().end());\n            var finalLength = changeRange.newLength() + (changeRange.span().start() - start);\n\n            return new TextChangeRange(finalSpan, finalLength);\n        }\n\n        public languageVersion(): LanguageVersion {\n            return this._normalParserSource.languageVersion();\n        }\n\n        public absolutePosition() {\n            return this._normalParserSource.absolutePosition();\n        }\n\n        public previousToken() {\n            return this._normalParserSource.previousToken();\n        }\n\n        public tokenDiagnostics(): SyntaxDiagnostic[] {\n            return this._normalParserSource.tokenDiagnostics();\n        }\n\n        public getRewindPoint(): IParserRewindPoint {\n            // Get a rewind point for our new text reader and for our old source unit cursor.\n            var rewindPoint = this._normalParserSource.getRewindPoint();\n            var oldSourceUnitCursorIndex = this._oldSourceUnitCursor.getAndPinCursorIndex();\n\n            // Store where we were when the rewind point was created.\n            rewindPoint.changeDelta = this._changeDelta;\n            rewindPoint.changeRange = this._changeRange;\n            rewindPoint.oldSourceUnitCursorIndex = oldSourceUnitCursorIndex;\n\n            // Debug.assert(rewindPoint.pinCount === this._oldSourceUnitCursor.pinCount());\n\n            return rewindPoint;\n        }\n\n        public rewind(rewindPoint: IParserRewindPoint): void {\n            // Restore our state to the values when the rewind point was created.\n            this._changeRange = rewindPoint.changeRange;\n            this._changeDelta = rewindPoint.changeDelta;\n            this._oldSourceUnitCursor.rewindToPinnedCursorIndex(rewindPoint.oldSourceUnitCursorIndex);\n\n            this._normalParserSource.rewind(rewindPoint);\n        }\n\n        public releaseRewindPoint(rewindPoint: IParserRewindPoint): void {\n            // Release both the new text reader and the old text cursor.\n            this._oldSourceUnitCursor.releaseAndUnpinCursorIndex(rewindPoint.oldSourceUnitCursorIndex);\n            this._normalParserSource.releaseRewindPoint(rewindPoint);\n        }\n\n        private canReadFromOldSourceUnit() {\n            // If we\'re currently pinned, then do not want to touch the cursor.  If we end up \n            // reading from the old source unit, we\'ll try to then set the position of the normal\n            // parser source to an absolute position (in moveToNextToken).  Doing is unsupported\n            // while the underlying source is pinned.\n            if (this._normalParserSource.isPinned()) {\n                return false;\n            }\n\n            // If our current absolute position is in the middle of the changed range in the new text\n            // then we definitely can\'t read from the old source unit right now.\n            if (this._changeRange !== null && this._changeRange.newSpan().intersectsWithPosition(this.absolutePosition())) {\n                return false;\n            }\n\n            // First, try to sync up with the new text if we\'re behind.\n            this.syncCursorToNewTextIfBehind();\n\n            // Now, if we\'re synced up *and* we\'re not currently pinned in the new text scanner,\n            // then we can read a node from the cursor.  If we\'re pinned in the scanner then we\n            // can\'t read a node from the cursor because we will mess up the pinned scanner when\n            // we try to move it forward past this node.\n            return this._changeDelta === 0 &&\n                   !this._oldSourceUnitCursor.isFinished();\n        }\n        \n        public currentNode(): SyntaxNode {\n            if (this.canReadFromOldSourceUnit()) {\n                // Try to read a node.  If we can\'t then our caller will call back in and just try\n                // to get a token.\n                return this.tryGetNodeFromOldSourceUnit();\n            }\n\n            // Either we were ahead of the old text, or we were pinned.  No node can be read here.\n            return null;\n        }\n\n        public currentToken(): ISyntaxToken {\n            if (this.canReadFromOldSourceUnit()) {\n                var token = this.tryGetTokenFromOldSourceUnit();\n                if (token !== null) {\n                    return token;\n                }\n            }\n\n            // Either we couldn\'t read from the old source unit, or we weren\'t able to successfully\n            // get a token from it.  In this case we need to read a token from the underlying text.\n            return this._normalParserSource.currentToken();\n        }\n\n        public currentTokenAllowingRegularExpression(): ISyntaxToken {\n            // Just delegate to the underlying source to handle this.\n            return this._normalParserSource.currentTokenAllowingRegularExpression();\n        }\n\n        private syncCursorToNewTextIfBehind() {\n            while (true) {\n                if (this._oldSourceUnitCursor.isFinished()) {\n                    // Can\'t sync up if the cursor is finished.\n                    break;\n                }\n\n                if (this._changeDelta >= 0) {\n                    // Nothing to do if we\'re synced up or ahead of the text.\n                    break;\n                }\n\n                // We\'re behind in the original tree.  Throw out a node or token in an attempt to \n                // catch up to the position we\'re at in the new text.\n\n                var currentElement = this._oldSourceUnitCursor.currentElement();\n\n                // If we\'re pointing at a node, and that node\'s width is less than our delta,\n                // then we can just skip that node.  Otherwise, if we\'re pointing at a node\n                // whose width is greater than the delta, then crumble it and try again.\n                // Otherwise, we must be pointing at a token.  Just skip it and try again.\n                    \n                if (currentElement.isNode() && (currentElement.fullWidth() > Math.abs(this._changeDelta))) {\n                    // We were pointing at a node whose width was more than changeDelta.  Crumble the \n                    // node and try again.  Note: we haven\'t changed changeDelta.  So the callers loop\n                    // will just repeat this until we get to a node or token that we can skip over.\n                    this._oldSourceUnitCursor.moveToFirstChild();\n                }\n                else {\n                    this._oldSourceUnitCursor.moveToNextSibling();\n\n                    // Get our change delta closer to 0 as we skip past this item.\n                    this._changeDelta += currentElement.fullWidth();\n\n                    // If this was a node, then our changeDelta is 0 or negative.  If this was a \n                    // token, then we could still be negative (and we have to read another token),\n                    // we could be zero (we\'re done), or we could be positive (we\'ve moved ahead\n                    // of the new text).  Only if we\'re negative will we continue looping.\n                }\n            }\n\n            // At this point, we must be either:\n            //   a) done with the cursor\n            //   b) (ideally) caught up to the new text position.\n            //   c) ahead of the new text position.\n            // In case \'b\' we can try to reuse a node from teh old tree.\n            // Debug.assert(this._oldSourceUnitCursor.isFinished() || this._changeDelta >= 0);\n        }\n\n        private intersectsWithChangeRangeSpanInOriginalText(start: number, length: number) {\n            return this._changeRange !== null && this._changeRange.span().intersectsWith(start, length);\n        }\n\n        private tryGetNodeFromOldSourceUnit(): SyntaxNode {\n            // Debug.assert(this.canReadFromOldSourceUnit());\n\n            // Keep moving the cursor down to the first node that is safe to return.  A node is \n            // safe to return if:\n            //  a) it does not intersect the changed text.\n            //  b) it does not contain skipped text.\n            //  c) it does not have any zero width tokens in it.\n            //  d) it does not have a regex token in it.\n            //\n            // TODO: we should also only be able to get a node if we\'re in the same \'strict\' \n            // context we were in when we parsed the node.\n            while (true) {\n                var node = this._oldSourceUnitCursor.currentNode();\n                if (node === null) {\n                    // Couldn\'t even read a node, nothing to return.\n                    return null;\n                }\n\n                if (!this.intersectsWithChangeRangeSpanInOriginalText(this.absolutePosition(), node.fullWidth())) {\n                    // Didn\'t intersect with the change range.\n                    if (!node.isIncrementallyUnusable()) {\n\n                        // Didn\'t contain anything that would make it unusable.  Awesome.  This is\n                        // a node we can reuse.\n                        return node;\n                    }\n                }\n\n                // We couldn\'t use currentNode. Try to move to its first child (in case that\'s a \n                // node).  If it is we can try using that.  Otherwise we\'ll just bail out in the\n                // next iteration of the loop.\n                this._oldSourceUnitCursor.moveToFirstChild();\n            }\n        }\n\n        private canReuseTokenFromOldSourceUnit(position: number, token: ISyntaxToken): boolean {\n            // A token is safe to return if:\n            //  a) it does not intersect the changed text.\n            //  b) it does not contain skipped text.\n            //  c) it is not zero width.\n            //  d) it is not a regex token.\n            //  e) it is not a parser generated token.\n            //\n            // NOTE: It is safe to get a token regardless of what our strict context was/is.  That\'s \n            // because the strict context doesn\'t change what tokens are scanned, only how the \n            // parser reacts to them.\n\n            if (token !== null) {\n                if (!this.intersectsWithChangeRangeSpanInOriginalText(position, token.fullWidth())) {\n                    // Didn\'t intersect with the change range.\n                    if (!token.isIncrementallyUnusable()) {\n\n                        // Didn\'t contain anything that would make it unusable.  Awesome.  This is\n                        // a token we can reuse.\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        private tryGetTokenFromOldSourceUnit(): ISyntaxToken {\n            // Debug.assert(this.canReadFromOldSourceUnit());\n\n            // get the current token that the cursor is pointing at.\n            var token = this._oldSourceUnitCursor.currentToken();\n\n            return this.canReuseTokenFromOldSourceUnit(this.absolutePosition(), token) \n                ? token : null;\n        }\n\n        public peekToken(n: number): ISyntaxToken {\n            if (this.canReadFromOldSourceUnit()) {\n                var token = this.tryPeekTokenFromOldSourceUnit(n);\n                if (token !== null) {\n                    return token;\n                }\n            }\n\n            // Couldn\'t peek this far in the old tree.  Get the token from the new text.\n            return this._normalParserSource.peekToken(n);\n        }\n\n        private tryPeekTokenFromOldSourceUnit(n: number): ISyntaxToken {\n            // Debug.assert(this.canReadFromOldSourceUnit());\n\n            // In order to peek the \'nth\' token we need all the tokens up to that point.  That way\n            // we know we know position that the nth token is at.  The position is necessary so \n            // that we can test if this token (or any that precede it cross the change range).\n            var currentPosition = this.absolutePosition();\n            for (var i = 0; i < n; i++) {\n                var interimToken = this._oldSourceUnitCursor.peekToken(i);\n                if (!this.canReuseTokenFromOldSourceUnit(currentPosition, interimToken)) {\n                    return null;\n                }\n\n                currentPosition += interimToken.fullWidth();\n            }\n\n            var token = this._oldSourceUnitCursor.peekToken(n);\n            return this.canReuseTokenFromOldSourceUnit(currentPosition, token) \n                ? token : null;\n        }\n\n        public moveToNextNode(): void {\n            // A node could have only come from the old source unit cursor.  Update it and our \n            // current state.\n            // Debug.assert(this._changeDelta === 0);\n\n            // Get the current node we were pointing at, and move to the next element.\n            var currentElement = this._oldSourceUnitCursor.currentElement();\n            var currentNode = this._oldSourceUnitCursor.currentNode();\n\n            // We better still be pointing at the node.\n            // Debug.assert(currentElement === currentNode);\n            this._oldSourceUnitCursor.moveToNextSibling();\n\n            // Update the underlying source with where it should now be currently pointing, and \n            // what the previous token is before that position.\n            var absolutePosition = this.absolutePosition() + currentNode.fullWidth();\n            var previousToken = currentNode.lastToken();\n            this._normalParserSource.resetToPosition(absolutePosition, previousToken);\n\n            // Debug.assert(previousToken !== null);\n            // Debug.assert(previousToken.width() > 0);\n\n            if (this._changeRange !== null) {\n                // If we still have a change range, then this node must have ended before the \n                // change range starts.  Thus, we don\'t need to call \'skipPastChanges\'.\n                // Debug.assert(this.absolutePosition() < this._changeRange.span().start());\n            }\n        }\n\n        public moveToNextToken(): void {\n            // This token may have come from the old source unit, or from the new text.  Handle\n            // both accordingly.\n            var currentToken = this.currentToken();\n\n            if (this._oldSourceUnitCursor.currentToken() === currentToken) {\n                // The token came from the old source unit.  So our tree and text must be in sync.\n                // Debug.assert(this._changeDelta === 0);\n\n                // Move the cursor past this token.\n                this._oldSourceUnitCursor.moveToNextSibling();\n\n                // Debug.assert(!this._normalParserSource.isPinned());\n                \n                // Update the underlying source with where it should now be currently pointing, and \n                // what the previous token is before that position.  We don\'t need to do this when\n                // the token came from the new text as the source will automatically be placed in\n                // the right position.\n                var absolutePosition = this.absolutePosition() + currentToken.fullWidth();\n                var previousToken = currentToken;\n                this._normalParserSource.resetToPosition(absolutePosition, previousToken);\n\n                // Debug.assert(previousToken !== null);\n                // Debug.assert(previousToken.width() > 0);\n\n                if (this._changeRange !== null) {\n                    // If we still have a change range, then this token must have ended before the \n                    // change range starts.  Thus, we don\'t need to call \'skipPastChanges\'.\n                    // Debug.assert(this.absolutePosition() < this._changeRange.span().start());\n                }\n            }\n            else {\n                // the token came from the new text.  We have to update our delta appropriately.\n                this._changeDelta -= currentToken.fullWidth();\n\n                // Move our underlying source forward.\n                this._normalParserSource.moveToNextToken();\n\n                // Because we read a token from the new text, we may have moved ourselves past the\n                // change range.  If we did, then we may also have to update our change delta to\n                // compensate for the length change between the old and new text.\n                if (this._changeRange !== null) {\n                    // var changeEndInNewText = this._changeRange.span().start() + this._changeRange.newLength();\n                    var changeRangeSpanInNewText = this._changeRange.newSpan();\n                    if (this.absolutePosition() >= changeRangeSpanInNewText.end()) {\n                        this._changeDelta += this._changeRange.newLength() - this._changeRange.span().length();\n                        this._changeRange = null;\n                    }\n                }\n            }\n        }\n    }\n\n    // Contains the actual logic to parse typescript/javascript.  This is the code that generally\n    // represents the logic necessary to handle all the language grammar constructs.  When the \n    // language changes, this should generally only be the place necessary to fix up.\n    class ParserImpl {\n        // Underlying source where we pull nodes and tokens from.\n        private source: IParserSource;\n        private fileName: string;\n        private lineMap: LineMap;\n\n        private parseOptions: ParseOptions;\n\n        // TODO: do we need to store/restore this when speculative parsing?  I don\'t think so.  The\n        // parsing logic already handles storing/restoring this and should work properly even if we\'re\n        // speculative parsing.\n        private listParsingState: ListParsingState = 0;\n\n        // Whether or not we are in strict parsing mode.  All that changes in strict parsing mode is\n        // that some tokens that would be considered identifiers may be considered keywords.  When \n        // rewinding, we need to store and restore this as the mode may have changed.\n        //\n        // TODO: do we need to store/restore this when speculative parsing?  I don\'t think so.  The\n        // parsing logic already handles storing/restoring this and should work properly even if we\'re\n        // speculative parsing.\n        private isInStrictMode: boolean = false;\n\n        // Current state of the parser.  If we need to rewind we will store and reset these values as\n        // appropriate.\n\n        // Diagnostics created when parsing invalid code.  Any diagnosics created when speculative \n        // parsing need to removed when rewinding.  To do this we store the count of diagnostics when \n        // we start speculative parsing.  And if we rewind, we restore this to the same count that we \n        // started at.\n        private diagnostics: SyntaxDiagnostic[] = [];\n\n        private factory: Syntax.IFactory = Syntax.normalModeFactory;\n\n        constructor(fileName: string, lineMap: LineMap, source: IParserSource, parseOptions: ParseOptions) {\n            this.fileName = fileName;\n            this.lineMap = lineMap;\n            this.source = source;\n            this.parseOptions = parseOptions;\n        }\n\n        private getRewindPoint(): IParserRewindPoint {\n            var rewindPoint = this.source.getRewindPoint();\n\n            rewindPoint.diagnosticsCount = this.diagnostics.length;\n\n            // Values we keep around for debug asserting purposes.\n            rewindPoint.isInStrictMode = this.isInStrictMode;\n            rewindPoint.listParsingState = this.listParsingState;\n\n            return rewindPoint;\n        }\n\n        public rewind(rewindPoint: IParserRewindPoint): void {\n            this.source.rewind(rewindPoint);\n\n            this.diagnostics.length = rewindPoint.diagnosticsCount;\n        }\n\n        public releaseRewindPoint(rewindPoint: IParserRewindPoint): void {\n            // Debug.assert(this.listParsingState === rewindPoint.listParsingState);\n            // Debug.assert(this.isInStrictMode === rewindPoint.isInStrictMode);\n\n            this.source.releaseRewindPoint(rewindPoint);\n        }\n\n        public currentTokenStart(): number {\n            return this.source.absolutePosition() + this.currentToken().leadingTriviaWidth();\n        }\n\n        public previousTokenStart(): number {\n            if (this.previousToken() === null) {\n                return 0;\n            }\n            \n            return this.source.absolutePosition() -\n                   this.previousToken().fullWidth() +\n                   this.previousToken().leadingTriviaWidth();\n        }\n\n        private previousTokenEnd(): number {\n            if (this.previousToken() === null) {\n                return 0;\n            }\n\n            return this.previousTokenStart() + this.previousToken().width();\n        }\n\n        private currentNode(): SyntaxNode {\n            var node = this.source.currentNode();\n\n            // We can only reuse a node if it was parsed under the same strict mode that we\'re \n            // currently in.  i.e. if we originally parsed a node in non-strict mode, but then\n            // the user added \'using strict\' at hte top of the file, then we can\'t use that node\n            // again as the presense of strict mode may cause us to parse the tokens in the file\n            // differetly.\n            //\n            // Note: we *can* reuse tokens when the strict mode changes.  That\'s because tokens\n            // are unaffected by strict mode.  It\'s just the parser will decide what to do with it\n            // differently depending on what mode it is in.\n            if (node === null || node.parsedInStrictMode() !== this.isInStrictMode) {\n                return null;\n            }\n\n            return node;\n        }\n\n        private currentToken(): ISyntaxToken {\n            return this.source.currentToken();\n        }\n\n        private currentTokenAllowingRegularExpression(): ISyntaxToken {\n            return this.source.currentTokenAllowingRegularExpression();\n        }\n\n        private peekToken(n: number): ISyntaxToken {\n            return this.source.peekToken(n);\n        }\n\n        private eatAnyToken(): ISyntaxToken {\n            var token = this.currentToken();\n            this.moveToNextToken();\n            return token;\n        }\n\n        private moveToNextToken(): void {\n            this.source.moveToNextToken();\n        }\n\n        private previousToken(): ISyntaxToken {\n            return this.source.previousToken();\n        }\n\n        private eatNode(): SyntaxNode {\n            var node = this.source.currentNode();\n            this.source.moveToNextNode();\n            return node;\n        }\n\n        //this method is called very frequently\n        //we should keep it simple so that it can be inlined.\n        private eatToken(kind: SyntaxKind): ISyntaxToken {\n            // Assert disabled because it is actually expensive enugh to affect perf.\n            // Debug.assert(SyntaxFacts.isTokenKind(kind))\n\n            var token = this.currentToken();\n            if (token.tokenKind === kind) {\n                this.moveToNextToken();\n                return token;\n            }\n\n            //slow part of EatToken(SyntaxKind kind)\n            return this.createMissingToken(kind, token);\n        }\n\n        // Eats the token if it is there.  Otherwise does nothing.  Will not report errors.\n        private tryEatToken(kind: SyntaxKind): ISyntaxToken {\n            if (this.currentToken().tokenKind === kind) {\n                return this.eatToken(kind);\n            }\n\n            return null;\n        }\n\n        // Eats the keyword if it is there.  Otherwise does nothing.  Will not report errors.\n        private tryEatKeyword(kind: SyntaxKind): ISyntaxToken {\n            if (this.currentToken().tokenKind === kind) {\n                return this.eatKeyword(kind);\n            }\n\n            return null;\n        }\n\n        private eatKeyword(kind: SyntaxKind): ISyntaxToken {\n            // Debug.assert(SyntaxFacts.isTokenKind(kind))\n\n            var token = this.currentToken();\n            if (token.tokenKind === kind) {\n                this.moveToNextToken();\n                return token;\n            }\n\n            //slow part of EatToken(SyntaxKind kind)\n            return this.createMissingToken(kind, token);\n        }\n\n        // An identifier is basically any word, unless it is a reserved keyword.  so \'foo\' is an \n        // identifier and \'return\' is not.  Note: a word may or may not be an identifier depending \n        // on the state of the parser.  For example, \'yield\' is an identifier *unless* the parser \n        // is in strict mode.\n        private isIdentifier(token: ISyntaxToken): boolean {\n            var tokenKind = token.tokenKind;\n\n            if (tokenKind === SyntaxKind.IdentifierName) {\n                return true;\n            }\n\n            // Keywords are only identifiers if they\'re FutureReservedStrictWords and we\'re in \n            // strict mode.  *Or* if it\'s a typescript \'keyword\'. \n            if (tokenKind >= SyntaxKind.FirstFutureReservedStrictKeyword) {\n                if (tokenKind <= SyntaxKind.LastFutureReservedStrictKeyword) {\n                    // Could be a keyword or identifier.  It\'s an identifier if we\'re not in strict\n                    // mode.\n                    return !this.isInStrictMode;\n                }\n                \n                // If it\'s typescript keyword, then it\'s actually a javascript identifier.\n                return tokenKind <= SyntaxKind.LastTypeScriptKeyword;\n            }\n\n            // Anything else is not an identifier.\n            return false;\n        }\n\n        // This method should be called when the grammar calls for an *IdentifierName* and not an\n        // *Identifier*.\n        private eatIdentifierNameToken(): ISyntaxToken {\n            var token = this.currentToken();\n\n            // If we have an identifier name, then consume and return it.\n            if (token.tokenKind === SyntaxKind.IdentifierName) {\n                this.moveToNextToken();\n                return token;\n            }\n\n            // If we have a keyword, then it cna be used as an identifier name.  However, we need \n            // to convert it to an identifier so that no later parts of the systems see it as a \n            // keyword.\n            if (SyntaxFacts.isAnyKeyword(token.tokenKind)) {\n                this.moveToNextToken();\n                return Syntax.convertToIdentifierName(token);\n            }\n\n            return this.createMissingToken(SyntaxKind.IdentifierName, token);\n        }\n\n        // This method should be called when the grammar calls for an *Identifier* and not an\n        // *IdentifierName*.\n        private eatIdentifierToken(): ISyntaxToken {\n            var token = this.currentToken();\n            if (this.isIdentifier(token)) {\n                this.moveToNextToken();\n\n                if (token.tokenKind === SyntaxKind.IdentifierName) {\n                    return token;\n                }\n\n                return Syntax.convertToIdentifierName(token);\n            }\n\n            return this.createMissingToken(SyntaxKind.IdentifierName, token);\n        }\n\n        private canEatAutomaticSemicolon(allowWithoutNewLine: boolean): boolean {\n            var token = this.currentToken();\n\n            // An automatic semicolon is always allowed if we\'re at the end of the file.\n            if (token.tokenKind === SyntaxKind.EndOfFileToken) {\n                return true;\n            }\n\n            // Or if the next token is a close brace (regardless of which line it is on).\n            if (token.tokenKind === SyntaxKind.CloseBraceToken) {\n                return true;\n            }\n\n            if (allowWithoutNewLine) {\n                return true;\n            }\n\n            // It is also allowed if there is a newline between the last token seen and the next one.\n            if (this.previousToken() !== null && this.previousToken().hasTrailingNewLine()) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private canEatExplicitOrAutomaticSemicolon(allowWithoutNewline: boolean): boolean {\n            var token = this.currentToken();\n\n            if (token.tokenKind === SyntaxKind.SemicolonToken) {\n                return true;\n            }\n\n            return this.canEatAutomaticSemicolon(allowWithoutNewline);\n        }\n\n        private eatExplicitOrAutomaticSemicolon(allowWithoutNewline: boolean): ISyntaxToken {\n            var token = this.currentToken();\n\n            // If we see a semicolon, then we can definitely eat it.\n            if (token.tokenKind === SyntaxKind.SemicolonToken) {\n                return this.eatToken(SyntaxKind.SemicolonToken);\n            }\n\n            // Check if an automatic semicolon could go here.  If so, synthesize one.  However, if the\n            // user has the option set to error on automatic semicolons, then add an error to that\n            // token as well.\n            if (this.canEatAutomaticSemicolon(allowWithoutNewline)) {\n                // Note: the missing token needs to go between real tokens.  So we place it at the \n                // fullstart of the current token.\n                var semicolonToken = Syntax.emptyToken(SyntaxKind.SemicolonToken);\n\n                if (!this.parseOptions.allowAutomaticSemicolonInsertion()) {\n                    // Report the missing semicolon at the end of the *previous* token.\n\n                    this.addDiagnostic(\n                        new SyntaxDiagnostic(this.fileName, this.previousTokenEnd(), 0, DiagnosticCode.Automatic_semicolon_insertion_not_allowed, null));\n                }\n\n                return semicolonToken;\n            }\n\n            // No semicolon could be consumed here at all.  Just call the standard eating function\n            // so we get the token and the error for it.\n            return this.eatToken(SyntaxKind.SemicolonToken);\n        }\n\n        private isKeyword(kind: SyntaxKind): boolean {\n            if (kind >= SyntaxKind.FirstKeyword) {\n                if (kind <= SyntaxKind.LastFutureReservedKeyword) {\n                    return true;\n                }\n\n                if (this.isInStrictMode) {\n                    return kind <= SyntaxKind.LastFutureReservedStrictKeyword;\n                }\n            }\n\n            return false;\n        }\n\n        private createMissingToken(expectedKind: SyntaxKind, actual: ISyntaxToken): ISyntaxToken {\n            var diagnostic = this.getExpectedTokenDiagnostic(expectedKind, actual);\n            this.addDiagnostic(diagnostic);\n\n            // The missing token will be at the full start of the current token.  That way empty tokens\n            // will always be between real tokens and not inside an actual token.\n            return Syntax.emptyToken(expectedKind);\n        }\n\n        private getExpectedTokenDiagnostic(expectedKind: SyntaxKind, actual: ISyntaxToken): SyntaxDiagnostic {\n            var token = this.currentToken();\n\n            // They wanted something specific, just report that that token was missing.\n            if (SyntaxFacts.isAnyKeyword(expectedKind) || SyntaxFacts.isAnyPunctuation(expectedKind)) {\n                return new SyntaxDiagnostic(this.fileName, this.currentTokenStart(), token.width(), DiagnosticCode._0_expected, [SyntaxFacts.getText(expectedKind)]);\n            }\n            else {\n                // They wanted an identifier.\n\n                // If the user supplied a keyword, give them a specialized message.\n                if (actual !== null && SyntaxFacts.isAnyKeyword(actual.tokenKind)) {\n                    return new SyntaxDiagnostic(this.fileName, this.currentTokenStart(), token.width(), DiagnosticCode.Identifier_expected__0__is_a_keyword, [SyntaxFacts.getText(actual.tokenKind)]);\n                }\n                else {\n                    // Otherwise just report that an identifier was expected.\n                    return new SyntaxDiagnostic(this.fileName, this.currentTokenStart(), token.width(), DiagnosticCode.Identifier_expected, null);\n                }\n            }\n\n            // throw Errors.notYetImplemented();\n        }\n\n        private static getPrecedence(expressionKind: SyntaxKind): ExpressionPrecedence {\n            switch (expressionKind) {\n                case SyntaxKind.CommaExpression:\n                    return ExpressionPrecedence.CommaExpressionPrecedence;\n\n                case SyntaxKind.AssignmentExpression:\n                case SyntaxKind.AddAssignmentExpression:\n                case SyntaxKind.SubtractAssignmentExpression:\n                case SyntaxKind.MultiplyAssignmentExpression:\n                case SyntaxKind.DivideAssignmentExpression:\n                case SyntaxKind.ModuloAssignmentExpression:\n                case SyntaxKind.AndAssignmentExpression:\n                case SyntaxKind.ExclusiveOrAssignmentExpression:\n                case SyntaxKind.OrAssignmentExpression:\n                case SyntaxKind.LeftShiftAssignmentExpression:\n                case SyntaxKind.SignedRightShiftAssignmentExpression:\n                case SyntaxKind.UnsignedRightShiftAssignmentExpression:\n                    return ExpressionPrecedence.AssignmentExpressionPrecedence;\n\n                case SyntaxKind.ConditionalExpression:\n                    return ExpressionPrecedence.ConditionalExpressionPrecedence;\n\n                case SyntaxKind.LogicalOrExpression:\n                    return ExpressionPrecedence.LogicalOrExpressionPrecedence;\n\n                case SyntaxKind.LogicalAndExpression:\n                    return ExpressionPrecedence.LogicalAndExpressionPrecedence;\n\n                case SyntaxKind.BitwiseOrExpression:\n                    return ExpressionPrecedence.BitwiseOrExpressionPrecedence;\n\n                case SyntaxKind.BitwiseExclusiveOrExpression:\n                    return ExpressionPrecedence.BitwiseExclusiveOrExpressionPrecedence;\n\n                case SyntaxKind.BitwiseAndExpression:\n                    return ExpressionPrecedence.BitwiseAndExpressionPrecedence;\n\n                case SyntaxKind.EqualsWithTypeConversionExpression:\n                case SyntaxKind.NotEqualsWithTypeConversionExpression:\n                case SyntaxKind.EqualsExpression:\n                case SyntaxKind.NotEqualsExpression:\n                    return ExpressionPrecedence.EqualityExpressionPrecedence;\n\n                case SyntaxKind.LessThanExpression:\n                case SyntaxKind.GreaterThanExpression:\n                case SyntaxKind.LessThanOrEqualExpression:\n                case SyntaxKind.GreaterThanOrEqualExpression:\n                case SyntaxKind.InstanceOfExpression:\n                case SyntaxKind.InExpression:\n                    return ExpressionPrecedence.RelationalExpressionPrecedence;\n\n                case SyntaxKind.LeftShiftExpression:\n                case SyntaxKind.SignedRightShiftExpression:\n                case SyntaxKind.UnsignedRightShiftExpression:\n                    return ExpressionPrecedence.ShiftExpressionPrecdence;\n\n                case SyntaxKind.AddExpression:\n                case SyntaxKind.SubtractExpression:\n                    return ExpressionPrecedence.AdditiveExpressionPrecedence;\n\n                case SyntaxKind.MultiplyExpression:\n                case SyntaxKind.DivideExpression:\n                case SyntaxKind.ModuloExpression:\n                    return ExpressionPrecedence.MultiplicativeExpressionPrecedence;\n\n                case SyntaxKind.PlusExpression:\n                case SyntaxKind.NegateExpression:\n                case SyntaxKind.BitwiseNotExpression:\n                case SyntaxKind.LogicalNotExpression:\n                case SyntaxKind.DeleteExpression:\n                case SyntaxKind.TypeOfExpression:\n                case SyntaxKind.VoidExpression:\n                case SyntaxKind.PreIncrementExpression:\n                case SyntaxKind.PreDecrementExpression:\n                    return ExpressionPrecedence.UnaryExpressionPrecedence;\n            }\n\n            throw Errors.invalidOperation();\n        }\n        \n        private addSkippedTokenAfterNodeOrToken(nodeOrToken: ISyntaxNodeOrToken, skippedToken: ISyntaxToken): ISyntaxNodeOrToken {\n            if (nodeOrToken.isToken()) {\n                return this.addSkippedTokenAfterToken(<ISyntaxToken>nodeOrToken, skippedToken);\n            }\n            else if (nodeOrToken.isNode()) {\n                return this.addSkippedTokenAfterNode(<SyntaxNode>nodeOrToken, skippedToken);\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private addSkippedTokenAfterNode(node: SyntaxNode, skippedToken: ISyntaxToken): SyntaxNode {\n            var oldToken = node.lastToken();\n            var newToken = this.addSkippedTokenAfterToken(oldToken, skippedToken);\n\n            return node.replaceToken(oldToken, newToken);\n        }\n\n        private addSkippedTokensBeforeNode(node: SyntaxNode, skippedTokens: ISyntaxToken[]): SyntaxNode {\n            if (skippedTokens.length > 0) {\n                var oldToken = node.firstToken();\n                var newToken = this.addSkippedTokensBeforeToken(oldToken, skippedTokens);\n\n                return node.replaceToken(oldToken, newToken);\n            }\n\n            return node;\n        }\n\n        private addSkippedTokensBeforeToken(token: ISyntaxToken, skippedTokens: ISyntaxToken[]): ISyntaxToken {\n            // Debug.assert(token.fullWidth() > 0 || token.tokenKind === SyntaxKind.EndOfFileToken);\n            // Debug.assert(skippedTokens.length > 0);\n\n            var leadingTrivia: ISyntaxTrivia[] = [];\n            for (var i = 0, n = skippedTokens.length; i < n; i++) {\n                this.addSkippedTokenToTriviaArray(leadingTrivia, skippedTokens[i]);\n            }\n\n            this.addTriviaTo(token.leadingTrivia(), leadingTrivia);\n\n            // Don\'t need this array anymore.  Give it back so we can reuse it.\n            this.returnArray(skippedTokens);\n            return token.withLeadingTrivia(Syntax.triviaList(leadingTrivia));\n        }\n\n        private addSkippedTokensAfterToken(token: ISyntaxToken, skippedTokens: ISyntaxToken[]): ISyntaxToken {\n            // Debug.assert(token.fullWidth() > 0);\n            if (skippedTokens.length === 0) {\n                this.returnArray(skippedTokens);\n                return token;\n            }\n\n            var trailingTrivia = token.trailingTrivia().toArray();\n\n            for (var i = 0, n = skippedTokens.length; i < n; i++) {\n                this.addSkippedTokenToTriviaArray(trailingTrivia, skippedTokens[i]);\n            }\n\n            // Don\'t need this array anymore.  Give it back so we can reuse it.\n            this.returnArray(skippedTokens);\n            return token.withTrailingTrivia(Syntax.triviaList(trailingTrivia));\n        }\n\n        private addSkippedTokenAfterToken(token: ISyntaxToken, skippedToken: ISyntaxToken): ISyntaxToken {\n            // Debug.assert(token.fullWidth() > 0);\n\n            var trailingTrivia = token.trailingTrivia().toArray();\n            this.addSkippedTokenToTriviaArray(trailingTrivia, skippedToken);\n\n            return token.withTrailingTrivia(Syntax.triviaList(trailingTrivia));\n        }\n\n        private addSkippedTokenToTriviaArray(array: ISyntaxTrivia[], skippedToken: ISyntaxToken): void {\n            // Debug.assert(skippedToken.text().length > 0);\n            \n            // first, add the leading trivia of the skipped token to the array\n            this.addTriviaTo(skippedToken.leadingTrivia(), array);\n\n            // now, add the text of the token as skipped text to the trivia array.\n            var trimmedToken = skippedToken.withLeadingTrivia(Syntax.emptyTriviaList).withTrailingTrivia(Syntax.emptyTriviaList);\n            array.push(Syntax.skippedTokenTrivia(trimmedToken));\n\n            // Finally, add the trailing trivia of the skipped token to the trivia array.\n            this.addTriviaTo(skippedToken.trailingTrivia(), array);\n        }\n\n        private addTriviaTo(list: ISyntaxTriviaList, array: ISyntaxTrivia[]): void {\n            for (var i = 0, n = list.count(); i < n; i++) {\n                array.push(list.syntaxTriviaAt(i));\n            }\n        }\n\n        public parseSyntaxTree(isDeclaration: boolean): SyntaxTree {\n            var sourceUnit = this.parseSourceUnit();\n\n            var allDiagnostics = this.source.tokenDiagnostics().concat(this.diagnostics);\n            allDiagnostics.sort((a: SyntaxDiagnostic, b: SyntaxDiagnostic) => a.start() - b.start());\n\n            return new SyntaxTree(sourceUnit, isDeclaration, allDiagnostics, this.fileName, this.lineMap, this.source.languageVersion(), this.parseOptions);\n        }\n\n        private setStrictMode(isInStrictMode: boolean) {\n            this.isInStrictMode = isInStrictMode;\n            this.factory = isInStrictMode ? Syntax.strictModeFactory : Syntax.normalModeFactory;\n        }\n\n        private parseSourceUnit(): SourceUnitSyntax {\n            // Note: technically we don\'t need to save and restore this here.  After all, this the top\n            // level parsing entrypoint.  So it will always start as false and be reset to false when the\n            // loop ends.  However, for sake of symmetry and consistancy we do this.\n            var savedIsInStrictMode = this.isInStrictMode;\n\n            var result = this.parseSyntaxList(ListParsingState.SourceUnit_ModuleElements, ParserImpl.updateStrictModeState);\n            var moduleElements = result.list;\n\n            this.setStrictMode(savedIsInStrictMode);\n\n            var sourceUnit = this.factory.sourceUnit(moduleElements, this.currentToken());\n            sourceUnit = <SourceUnitSyntax>this.addSkippedTokensBeforeNode(sourceUnit, result.skippedTokens);\n\n            return sourceUnit;\n        }\n\n        private static updateStrictModeState(parser: ParserImpl, items: any[]): void {\n            if (!parser.isInStrictMode) {\n                // Check if all the items are directive prologue elements.\n                for (var i = 0; i < items.length; i++) {\n                    var item = items[i];\n                    if (!SyntaxFacts.isDirectivePrologueElement(item)) {\n                        return;\n                    }\n                }\n\n                parser.setStrictMode(SyntaxFacts.isUseStrictDirective(items[items.length - 1]));\n            }\n        }\n\n        private isModuleElement(inErrorRecovery: boolean): boolean {\n            if (this.currentNode() !== null && this.currentNode().isModuleElement()) {\n                return true;\n            }\n\n            return this.isImportDeclaration() ||\n                   this.isExportAssignment() ||\n                   this.isModuleDeclaration() ||\n                   this.isInterfaceDeclaration() ||\n                   this.isClassDeclaration() ||\n                   this.isEnumDeclaration() ||\n                   this.isStatement(inErrorRecovery);\n        }\n        \n        private parseModuleElement(): IModuleElementSyntax {\n            if (this.currentNode() !== null && this.currentNode().isModuleElement()) {\n                return <IModuleElementSyntax>this.eatNode();\n            }\n\n            if (this.isImportDeclaration()) {\n                return this.parseImportDeclaration();\n            }\n            else if (this.isExportAssignment()) {\n                return this.parseExportAssignment();\n            }\n            else if (this.isModuleDeclaration()) {\n                return this.parseModuleDeclaration();\n            }\n            else if (this.isInterfaceDeclaration()) {\n                return this.parseInterfaceDeclaration();\n            }\n            else if (this.isClassDeclaration()) {\n                return this.parseClassDeclaration();\n            }\n            else if (this.isEnumDeclaration()) {\n                return this.parseEnumDeclaration();\n            }\n            else if (this.isStatement(/*inErrorRecovery:*/ false)) {\n                return this.parseStatement();\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private isImportDeclaration(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.ImportKeyword;\n        }\n\n        private parseImportDeclaration(): ImportDeclarationSyntax {\n            // Debug.assert(this.isImportDeclaration());\n\n            var importKeyword = this.eatKeyword(SyntaxKind.ImportKeyword);\n            var identifier = this.eatIdentifierToken();\n            var equalsToken = this.eatToken(SyntaxKind.EqualsToken);\n            var moduleReference = this.parseModuleReference();\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.importDeclaration(importKeyword, identifier, equalsToken, moduleReference, semicolonToken);\n        }\n\n        private isExportAssignment(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.ExportKeyword &&\n                   this.peekToken(1).tokenKind === SyntaxKind.EqualsToken;\n        }\n\n        private parseExportAssignment(): ExportAssignmentSyntax {\n            // Debug.assert(this.isExportAssignment());\n\n            var exportKeyword = this.eatKeyword(SyntaxKind.ExportKeyword);\n            var equalsToken = this.eatToken(SyntaxKind.EqualsToken);\n            var identifier = this.eatIdentifierToken();\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.exportAssignment(exportKeyword, equalsToken, identifier, semicolonToken);\n        }\n\n        private parseModuleReference(): ModuleReferenceSyntax {\n            if (this.isExternalModuleReference()) {\n                return this.parseExternalModuleReference();\n            }\n            else {\n                return this.parseModuleNameModuleReference();\n            }\n        }\n\n        private isExternalModuleReference(): boolean {\n            var token0 = this.currentToken();\n            if (token0.tokenKind === SyntaxKind.ModuleKeyword || token0.tokenKind === SyntaxKind.RequireKeyword) {\n                return this.peekToken(1).tokenKind === SyntaxKind.OpenParenToken;\n            }\n\n            return false;\n        }\n\n        private parseExternalModuleReference(): ExternalModuleReferenceSyntax {\n            // Debug.assert(this.isExternalModuleReference());\n\n            var moduleOrRequireKeyword = this.eatAnyToken();\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var stringLiteral = this.eatToken(SyntaxKind.StringLiteral);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n\n            return this.factory.externalModuleReference(moduleOrRequireKeyword, openParenToken, stringLiteral, closeParenToken);\n        }\n\n        private parseModuleNameModuleReference(): ModuleNameModuleReferenceSyntax {\n            var name = this.parseName();\n            return this.factory.moduleNameModuleReference(name);\n        }\n\n        // NOTE: This will allow all identifier names.  Even the ones that are keywords.\n        private parseIdentifierName(): INameSyntax {\n            var identifierName = this.eatIdentifierNameToken();\n            return identifierName;\n        }\n\n        private isName(): boolean {\n            return this.isIdentifier(this.currentToken());\n        }\n\n        private tryParseTypeArgumentList(inExpression: boolean): TypeArgumentListSyntax {\n            if (this.currentToken().kind() !== SyntaxKind.LessThanToken) {\n                return null;\n            }\n\n            var lessThanToken: ISyntaxToken;\n            var greaterThanToken: ISyntaxToken;\n            var result: { skippedTokens: ISyntaxToken[]; list: ISeparatedSyntaxList; };\n            var typeArguments: ISeparatedSyntaxList;\n\n            if (!inExpression) {\n                // if we\'re not in an expression, this must be a type argument list.  Just parse\n                // it out as such.\n                lessThanToken = this.eatToken(SyntaxKind.LessThanToken);\n                // Debug.assert(lessThanToken.fullWidth() > 0);\n\n                result = this.parseSeparatedSyntaxList(ListParsingState.TypeArgumentList_Types);\n                typeArguments = result.list;\n                lessThanToken = this.addSkippedTokensAfterToken(lessThanToken, result.skippedTokens);\n\n                greaterThanToken = this.eatToken(SyntaxKind.GreaterThanToken);\n\n                return this.factory.typeArgumentList(lessThanToken, typeArguments, greaterThanToken);\n            }\n\n            // If we\'re in an expression, then we only want to consume this as a type argument list\n            // if we\'re sure that it\'s a type arg list and not an arithmetic expression.\n\n            var rewindPoint = this.getRewindPoint();\n            try {\n                // We\'ve seen a \'<\'.  Try to parse it out as a type argument list.\n                lessThanToken = this.eatToken(SyntaxKind.LessThanToken);\n                // Debug.assert(lessThanToken.fullWidth() > 0);\n\n                result = this.parseSeparatedSyntaxList(ListParsingState.TypeArgumentList_Types);\n                typeArguments = result.list;\n                lessThanToken = this.addSkippedTokensAfterToken(lessThanToken, result.skippedTokens);\n\n                greaterThanToken = this.eatToken(SyntaxKind.GreaterThanToken);\n\n                // We\'re in a context where \'<\' could be the start of a type argument list, or part\n                // of an arithmetic expression.  We\'ll presume it\'s the latter unless we see the \'>\'\n                // and a following token that guarantees that it\'s supposed to be a type argument list.\n                if (greaterThanToken.fullWidth() === 0 || !this.canFollowTypeArgumentListInExpression(this.currentToken().kind())) {\n                    this.rewind(rewindPoint);\n                    return null;\n                }\n\n                return this.factory.typeArgumentList(lessThanToken, typeArguments, greaterThanToken);\n            }\n            finally {\n                this.releaseRewindPoint(rewindPoint);\n            }\n        }\n\n        private canFollowTypeArgumentListInExpression(kind: SyntaxKind): boolean {\n            switch (kind) {\n                case SyntaxKind.OpenParenToken:                 // foo<x>(   \n                case SyntaxKind.DotToken:                       // foo<x>.\n                    // These two cases are the only cases where this token can legally follow a\n                    // type argument list.  So we definitely want to treat this as a type arg list.\n\n                case SyntaxKind.CloseParenToken:                // foo<x>)\n                case SyntaxKind.CloseBracketToken:              // foo<x>]\n                case SyntaxKind.ColonToken:                     // foo<x>:\n                case SyntaxKind.SemicolonToken:                 // foo<x>;\n                case SyntaxKind.CommaToken:                     // foo<x>,\n                case SyntaxKind.QuestionToken:                  // foo<x>?\n                case SyntaxKind.EqualsEqualsToken:              // foo<x> ==\n                case SyntaxKind.EqualsEqualsEqualsToken:        // foo<x> ===\n                case SyntaxKind.ExclamationEqualsToken:         // foo<x> !=\n                case SyntaxKind.ExclamationEqualsEqualsToken:   // foo<x> !==\n                case SyntaxKind.AmpersandAmpersandToken:        // foo<x> &&\n                case SyntaxKind.BarBarToken:                    // foo<x> ||\n                case SyntaxKind.CaretToken:                     // foo<x> ^\n                case SyntaxKind.AmpersandToken:                 // foo<x> &\n                case SyntaxKind.BarToken:                       // foo<x> |\n                case SyntaxKind.CloseBraceToken:                // foo<x> }\n                case SyntaxKind.EndOfFileToken:                 // foo<x>\n                    // these cases can\'t legally follow a type arg list.  However, they\'re not legal \n                    // expressions either.  The user is probably in the middle of a generic type. So\n                    // treat it as such.\n                    return true;\n\n                default:\n                    // Anything else treat as an expression.\n                    return false;\n            }\n        }\n\n        private parseName(): INameSyntax {\n            var shouldContinue = this.isIdentifier(this.currentToken());\n            var current: INameSyntax = this.eatIdentifierToken();\n\n            while (shouldContinue && this.currentToken().tokenKind === SyntaxKind.DotToken) {\n                var dotToken = this.eatToken(SyntaxKind.DotToken);\n\n                var currentToken = this.currentToken();\n                var identifierName: ISyntaxToken;\n\n                // Technically a keyword is valid here as all keywords are identifier names.\n                // However, often we\'ll encounter this in error situations when the keyword\n                // is actually starting another valid construct.\n\n                // So, we check for the following specific case:\n\n                //      name.\n                //      keyword identifierNameOrKeyword\n\n                // Note: the newlines are important here.  For example, if that above code \n                // were rewritten into:\n\n                //      name.keyword\n                //      identifierNameOrKeyword\n\n                // Then we would consider it valid.  That\'s because ASI would take effect and\n                // the code would be implicitly: \"name.keyword; identifierNameOrKeyword\".  \n                // In the first case though, ASI will not take effect because there is not a\n                // line terminator after the dot.\n                if (SyntaxFacts.isAnyKeyword(currentToken.tokenKind) &&\n                    this.previousToken().hasTrailingNewLine() &&\n                    !currentToken.hasTrailingNewLine() &&\n                    SyntaxFacts.isIdentifierNameOrAnyKeyword(this.peekToken(1))) {\n\n                    identifierName = this.createMissingToken(SyntaxKind.IdentifierName, currentToken);\n                }\n                else {\n                    identifierName = this.eatIdentifierNameToken();\n                }\n\n                current = this.factory.qualifiedName(current, dotToken, identifierName);\n\n                shouldContinue = identifierName.fullWidth() > 0;\n            }\n\n            return current;\n        }\n\n        private isEnumDeclaration(): boolean {\n            var index = this.modifierCount();\n\n            // If we have at least one modifier, and we see \'enum\', then consider this an enum\n            // declaration.\n            if (index > 0 &&\n                this.peekToken(index).tokenKind === SyntaxKind.EnumKeyword) {\n                return true;\n            }\n\n            // \'enum\' is not a javascript keyword.  So we need to use a bit of lookahead here to ensure\n            // that we\'re actually looking at a enum construct and not some javascript expression.\n            return this.currentToken().tokenKind === SyntaxKind.EnumKeyword &&\n                   this.isIdentifier(this.peekToken(1));\n        }\n\n        private parseEnumDeclaration(): EnumDeclarationSyntax {\n            // Debug.assert(this.isEnumDeclaration());\n\n            var modifiers = this.parseModifiers();\n            var enumKeyword = this.eatKeyword(SyntaxKind.EnumKeyword);\n            var identifier = this.eatIdentifierToken();\n\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n            var enumElements: ISeparatedSyntaxList = Syntax.emptySeparatedList;\n\n            if (openBraceToken.width() > 0) {\n                var result = this.parseSeparatedSyntaxList(ListParsingState.EnumDeclaration_EnumElements);\n                enumElements = result.list;\n                openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n            }\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n\n            return this.factory.enumDeclaration(modifiers, enumKeyword, identifier,\n                openBraceToken, enumElements, closeBraceToken);\n        }\n\n        private isEnumElement(inErrorRecovery: boolean): boolean {\n            if (this.currentNode() !== null && this.currentNode().kind() === SyntaxKind.EnumElement) {\n                return true;\n            }\n\n            return this.isPropertyName(this.currentToken(), inErrorRecovery);\n        }\n\n        private parseEnumElement(): EnumElementSyntax {\n            // Debug.assert(this.isEnumElement());\n            if (this.currentNode() !== null && this.currentNode().kind() === SyntaxKind.EnumElement) {\n                return <EnumElementSyntax>this.eatNode();\n            }\n\n            var propertyName = this.eatPropertyName();\n            var equalsValueClause: EqualsValueClauseSyntax = null;\n            if (this.isEqualsValueClause(/*inParameter*/ false)) {\n                equalsValueClause = this.parseEqualsValueClause(/*allowIn:*/ true);\n            }\n\n            return this.factory.enumElement(propertyName, equalsValueClause);\n        }\n\n        private static isModifier(token: ISyntaxToken): boolean {\n            switch (token.tokenKind) {\n                case SyntaxKind.PublicKeyword:\n                case SyntaxKind.PrivateKeyword:\n                case SyntaxKind.StaticKeyword:\n                case SyntaxKind.ExportKeyword:\n                case SyntaxKind.DeclareKeyword:\n                    return true;\n\n                default:\n                    return false;\n            }\n        }\n\n        private modifierCount(): number {\n            var modifierCount = 0;\n            while (true) {\n                if (ParserImpl.isModifier(this.peekToken(modifierCount))) {\n                    modifierCount++;\n                    continue;\n                }\n\n                break;\n            }\n\n            return modifierCount\n        }\n\n        private parseModifiers(): ISyntaxList {\n            var tokens: ISyntaxToken[] = this.getArray();\n\n            while (true) {\n                if (ParserImpl.isModifier(this.currentToken())) {\n                    tokens.push(this.eatAnyToken());\n                    continue;\n                }\n\n                break;\n            }\n\n            var result = Syntax.list(tokens);\n\n            // If the tokens array is greater than one, then we can\'t return it.  It will have been \n            // copied directly into the syntax list.\n            this.returnZeroOrOneLengthArray(tokens);\n\n            return result;\n        }\n\n        private isClassDeclaration(): boolean {\n            var index = this.modifierCount();\n\n            // If we have at least one modifier, and we see \'class\', then consider this a class\n            // declaration.\n            if (index > 0 &&\n                this.peekToken(index).tokenKind === SyntaxKind.ClassKeyword) {\n                return true;\n            }\n\n            // \'class\' is not a javascript keyword.  So we need to use a bit of lookahead here to ensure\n            // that we\'re actually looking at a class construct and not some javascript expression.\n            return this.currentToken().tokenKind === SyntaxKind.ClassKeyword &&\n                   this.isIdentifier(this.peekToken(1));\n        }\n\n        private parseHeritageClauses(): ISyntaxList {\n            var heritageClauses: ISyntaxList = Syntax.emptyList;\n            \n            if (this.isHeritageClause()) {\n                var result = this.parseSyntaxList(ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses);\n                heritageClauses = result.list;\n                Debug.assert(result.skippedTokens.length === 0);\n            }\n\n            return heritageClauses;\n        }\n\n        private parseClassDeclaration(): ClassDeclarationSyntax {\n            // Debug.assert(this.isClassDeclaration());\n\n            var modifiers = this.parseModifiers();\n\n            var classKeyword = this.eatKeyword(SyntaxKind.ClassKeyword);\n            var identifier = this.eatIdentifierToken();\n            var typeParameterList = this.parseOptionalTypeParameterList(/*requireCompleteTypeParameterList:*/ false);\n            var heritageClauses = this.parseHeritageClauses();\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n            var classElements: ISyntaxList = Syntax.emptyList;\n\n            if (openBraceToken.width() > 0) {\n                var result = this.parseSyntaxList(ListParsingState.ClassDeclaration_ClassElements);\n\n                classElements = result.list;\n                openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n            }\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n            return this.factory.classDeclaration(\n                modifiers, classKeyword, identifier, typeParameterList, heritageClauses, openBraceToken, classElements, closeBraceToken);\n        }\n\n        private isConstructorDeclaration(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.ConstructorKeyword;\n        }\n\n        private static isPublicOrPrivateKeyword(token: ISyntaxToken): boolean {\n            return token.tokenKind === SyntaxKind.PublicKeyword || token.tokenKind === SyntaxKind.PrivateKeyword;\n        }\n\n        private isMemberAccessorDeclaration(inErrorRecovery: boolean): boolean {\n            var index = this.modifierCount();\n\n            if (this.peekToken(index).tokenKind !== SyntaxKind.GetKeyword &&\n                this.peekToken(index).tokenKind !== SyntaxKind.SetKeyword) {\n                return false;\n            }\n\n            index++;\n            return this.isPropertyName(this.peekToken(index), inErrorRecovery);\n        }\n\n        private parseMemberAccessorDeclaration(): MemberAccessorDeclarationSyntax {\n            // Debug.assert(this.isMemberAccessorDeclaration());\n\n            var modifiers = this.parseModifiers();\n\n            if (this.currentToken().tokenKind === SyntaxKind.GetKeyword) {\n                return this.parseGetMemberAccessorDeclaration(modifiers);\n            }\n            else if (this.currentToken().tokenKind === SyntaxKind.SetKeyword) {\n                return this.parseSetMemberAccessorDeclaration(modifiers);\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private parseGetMemberAccessorDeclaration(modifiers: ISyntaxList): GetMemberAccessorDeclarationSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.GetKeyword);\n\n            var getKeyword = this.eatKeyword(SyntaxKind.GetKeyword);\n            var propertyName = this.eatPropertyName();\n            var parameterList = this.parseParameterList();\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n\n            return this.factory.getMemberAccessorDeclaration(\n                modifiers, getKeyword, propertyName, parameterList, typeAnnotation, block);\n        }\n\n        private parseSetMemberAccessorDeclaration(modifiers: ISyntaxList): SetMemberAccessorDeclarationSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.SetKeyword);\n\n            var setKeyword = this.eatKeyword(SyntaxKind.SetKeyword);\n            var propertyName = this.eatPropertyName();\n            var parameterList = this.parseParameterList();\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n\n            return this.factory.setMemberAccessorDeclaration(\n                modifiers, setKeyword, propertyName, parameterList, block);\n        }\n\n        private isClassElement(inErrorRecovery: boolean): boolean {\n            if (this.currentNode() !== null && this.currentNode().isClassElement()) {\n                return true;\n            }\n\n            // Note: the order of these calls is important.  Specifically, isMemberVariableDeclaration\n            // checks for a subset of the conditions of the previous two calls.\n            return this.isConstructorDeclaration() ||\n                   this.isMemberFunctionDeclaration(inErrorRecovery) ||\n                   this.isMemberAccessorDeclaration(inErrorRecovery) ||\n                   this.isMemberVariableDeclaration(inErrorRecovery) ||\n                   this.isIndexSignature();\n        }\n\n        private parseConstructorDeclaration(): ConstructorDeclarationSyntax {\n            // Debug.assert(this.isConstructorDeclaration());\n\n            var constructorKeyword = this.eatKeyword(SyntaxKind.ConstructorKeyword);\n            var parameterList = this.parseParameterList();\n\n            var semicolonToken: ISyntaxToken = null;\n            var block: BlockSyntax = null;\n\n            if (this.isBlock()) {\n                block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ true);\n            }\n            else {\n                semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n            }\n\n            return this.factory.constructorDeclaration(constructorKeyword, parameterList, block, semicolonToken);\n        }\n\n        private isMemberFunctionDeclaration(inErrorRecovery: boolean): boolean {\n            var index = 0;\n\n            // Note: typescript is highly ambiguous here.  We may have things like:\n            //      public()\n            //      public public()\n            //      public static()\n            //      public static public()\n            //\n            // etc.\n            //\n            // This means we can\'t just blindly consume and move past modifier tokens.  Instead, we \n            // need to see if we\'re at the function\'s name, and only skip it if we\'re not.\n            while (true) {\n                var token = this.peekToken(index);\n                if (this.isPropertyName(token, inErrorRecovery) &&\n                    this.isCallSignature(index + 1)) {\n                    return true;\n                }\n\n                // We weren\'t at the name of the function.  If we have a modifier token, then \n                // consume it and try again.\n                if (ParserImpl.isModifier(token)) {\n                    index++;\n                    continue;\n                }\n\n                // Wasn\'t a member function.\n                return false;\n            }\n        }\n\n        private parseMemberFunctionDeclaration(): MemberFunctionDeclarationSyntax {\n            // Debug.assert(this.isMemberFunctionDeclaration());\n            \n            var modifierArray: ISyntaxToken[] = this.getArray();\n\n            while (true) {\n                var currentToken = this.currentToken();\n                if (this.isPropertyName(currentToken, /*inErrorRecovery:*/ false) &&\n                    this.isCallSignature(1)) {\n                    break;\n                }\n\n                Debug.assert(ParserImpl.isModifier(currentToken));\n                modifierArray.push(this.eatAnyToken());\n            }\n\n            var modifiers = Syntax.list(modifierArray);\n            this.returnZeroOrOneLengthArray(modifierArray);\n            \n            var propertyName = this.eatPropertyName();\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n\n            // If we got an errant => then we want to parse what\'s coming up without requiring an\n            // open brace.\n            var newCallSignature = this.tryAddUnexpectedEqualsGreaterThanToken(callSignature);\n            var parseBlockEvenWithNoOpenBrace = callSignature !== newCallSignature;\n            callSignature = newCallSignature;\n\n            var block: BlockSyntax = null;\n            var semicolon: ISyntaxToken = null;\n\n            if (parseBlockEvenWithNoOpenBrace || this.isBlock()) {\n                block = this.parseBlock(parseBlockEvenWithNoOpenBrace, /*checkForStrictMode:*/ true);\n            }\n            else {\n                semicolon = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n            }\n\n            return this.factory.memberFunctionDeclaration(modifiers, propertyName, callSignature, block, semicolon);\n        }\n        \n        private isDefinitelyMemberVariablePropertyName(index: number): boolean {\n            // keywords are also property names.  Only accept a keyword as a property \n            // name if is of the form:\n            //      public;\n            //      public=\n            //      public:\n            //      public }\n            //      public <eof>\n            if (SyntaxFacts.isAnyKeyword(this.peekToken(index).tokenKind)) {\n                switch (this.peekToken(index + 1).tokenKind) {\n                    case SyntaxKind.SemicolonToken:\n                    case SyntaxKind.EqualsToken:\n                    case SyntaxKind.ColonToken:\n                    case SyntaxKind.CloseBraceToken:\n                    case SyntaxKind.EndOfFileToken:\n                       return true;\n                    default:\n                        return false;\n                }\n            }\n            else {\n                // If was a property name and not a keyword, then we\'re good to go.\n                return true;\n            }\n        }\n\n        private isMemberVariableDeclaration(inErrorRecovery: boolean): boolean {\n            var index = 0;\n\n            // Note: typescript is highly ambiguous here.  We may have things like:\n            //      public;\n            //      public public;\n            //      public static;\n            //      public static public;\n            //\n            // etc.\n            //\n            // This means we can\'t just blindly consume and move past modifier tokens.  Instead, we \n            // need to see if we\'re at the function\'s name, and only skip it if we\'re not.\n            while (true) {\n                var token = this.peekToken(index);\n                if (this.isPropertyName(token, inErrorRecovery) &&\n                    this.isDefinitelyMemberVariablePropertyName(index)) {\n                        return true;\n                }\n\n                // We weren\'t at the name of the variable.  If we have a modifier token, then \n                // consume it and try again.\n                if (ParserImpl.isModifier(this.peekToken(index))) {\n                    index++;\n                    continue;\n                }\n\n                // Wasn\'t a member variable.\n                return false;\n            }\n        }\n\n        private parseMemberVariableDeclaration(): MemberVariableDeclarationSyntax {\n            // Debug.assert(this.isMemberVariableDeclaration());\n\n            var modifierArray: ISyntaxToken[] = this.getArray();\n\n            while (true) {\n                var currentToken = this.currentToken();\n                if (this.isPropertyName(currentToken, /*inErrorRecovery:*/ false) &&\n                    this.isDefinitelyMemberVariablePropertyName(0)) {\n                    break;\n                }\n\n                Debug.assert(ParserImpl.isModifier(currentToken));\n                modifierArray.push(this.eatAnyToken());\n            }\n\n            var modifiers = Syntax.list(modifierArray);\n            this.returnZeroOrOneLengthArray(modifierArray);\n\n            var variableDeclarator = this.parseVariableDeclarator(/*allowIn:*/ true, /*allowPropertyName:*/ true);\n            var semicolon = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.memberVariableDeclaration(modifiers, variableDeclarator, semicolon);\n        }\n\n        private parseClassElement(inErrorRecovery: boolean): IClassElementSyntax {\n            // Debug.assert(this.isClassElement());\n\n            if (this.currentNode() !== null && this.currentNode().isClassElement()) {\n                return <IClassElementSyntax>this.eatNode();\n            }\n\n            if (this.isConstructorDeclaration()) {\n                return this.parseConstructorDeclaration();\n            }\n            else if (this.isMemberFunctionDeclaration(inErrorRecovery)) {\n                return this.parseMemberFunctionDeclaration();\n            }\n            else if (this.isMemberAccessorDeclaration(inErrorRecovery)) {\n                return this.parseMemberAccessorDeclaration();\n            }\n            else if (this.isMemberVariableDeclaration(inErrorRecovery)) {\n                return this.parseMemberVariableDeclaration();\n            }\n            else if (this.isIndexSignature()) {\n                return this.parseIndexSignature();\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private tryAddUnexpectedEqualsGreaterThanToken(callSignature: CallSignatureSyntax): CallSignatureSyntax {\n            var token0 = this.currentToken();\n\n            var hasEqualsGreaterThanToken = token0.tokenKind === SyntaxKind.EqualsGreaterThanToken;\n            if (hasEqualsGreaterThanToken) {\n                // Previously the language allowed \"function f() => expr;\" as a shorthand for \n                // \"function f() { return expr; }.\n                // \n                // Detect if the user is typing this and attempt recovery.\n                var diagnostic = new SyntaxDiagnostic(this.fileName,\n                    this.currentTokenStart(), token0.width(), DiagnosticCode.Unexpected_token_, []);\n                this.addDiagnostic(diagnostic);\n\n                var token = this.eatAnyToken();\n                return <CallSignatureSyntax>this.addSkippedTokenAfterNode(callSignature, token0);\n            }\n\n            return callSignature;\n        }\n\n        private isFunctionDeclaration(): boolean {\n            var index = this.modifierCount();\n            return this.peekToken(index).tokenKind === SyntaxKind.FunctionKeyword;\n        }\n\n        private parseFunctionDeclaration(): FunctionDeclarationSyntax {\n            // Debug.assert(this.isFunctionDeclaration());\n\n            var modifiers = this.parseModifiers();\n            var functionKeyword = this.eatKeyword(SyntaxKind.FunctionKeyword);\n            var identifier = this.eatIdentifierToken();\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n\n            // If we got an errant => then we want to parse what\'s coming up without requiring an\n            // open brace.\n            var newCallSignature = this.tryAddUnexpectedEqualsGreaterThanToken(callSignature);\n            var parseBlockEvenWithNoOpenBrace = callSignature !== newCallSignature;\n            callSignature = newCallSignature;\n\n            var semicolonToken: ISyntaxToken = null;\n            var block: BlockSyntax = null;\n\n            // Parse a block if we\'re on a bock, or if we saw a \'=>\'\n            if (parseBlockEvenWithNoOpenBrace || this.isBlock()) {\n                block = this.parseBlock(parseBlockEvenWithNoOpenBrace, /*checkForStrictMode:*/ true);\n            }\n            else {\n                semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n            }\n\n            return this.factory.functionDeclaration(modifiers, functionKeyword, identifier, callSignature, block, semicolonToken);\n        }\n\n        private isModuleDeclaration(): boolean {\n            var index = this.modifierCount();\n\n            // If we have at least one modifier, and we see \'module\', then consider this a module\n            // declaration.\n            if (index > 0 &&\n                this.peekToken(index).tokenKind === SyntaxKind.ModuleKeyword) {\n                return true;\n            }\n\n            // \'module\' is not a javascript keyword.  So we need to use a bit of lookahead here to ensure\n            // that we\'re actually looking at a module construct and not some javascript expression.\n            if (this.currentToken().tokenKind === SyntaxKind.ModuleKeyword) {\n                var token1 = this.peekToken(1);\n                return this.isIdentifier(token1) || token1.tokenKind === SyntaxKind.StringLiteral;\n            }\n\n            return false;\n        }\n\n        private parseModuleDeclaration(): ModuleDeclarationSyntax {\n            // Debug.assert(this.isModuleDeclaration());\n\n            var modifiers = this.parseModifiers();\n            var moduleKeyword = this.eatKeyword(SyntaxKind.ModuleKeyword);\n\n            var moduleName: INameSyntax = null;\n            var stringLiteral: ISyntaxToken = null;\n\n            if (this.currentToken().tokenKind === SyntaxKind.StringLiteral) {\n                stringLiteral = this.eatToken(SyntaxKind.StringLiteral);\n            }\n            else {\n                moduleName = this.parseName();\n            }\n\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n\n            var moduleElements: ISyntaxList = Syntax.emptyList;\n            if (openBraceToken.width() > 0) {\n                var result = this.parseSyntaxList(ListParsingState.ModuleDeclaration_ModuleElements);\n                moduleElements = result.list;\n                openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n            }\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n\n            return this.factory.moduleDeclaration(\n                modifiers, moduleKeyword, moduleName, stringLiteral,\n                openBraceToken, moduleElements, closeBraceToken);\n        }\n\n        private isInterfaceDeclaration(): boolean {\n            var index = this.modifierCount();\n\n            // If we have at least one modifier, and we see \'interface\', then consider this an interface\n            // declaration.\n            if (index > 0 &&\n                this.peekToken(index).tokenKind === SyntaxKind.InterfaceKeyword) {\n                return true\n            }\n\n            // \'interface\' is not a javascript keyword.  So we need to use a bit of lookahead here to ensure\n            // that we\'re actually looking at a interface construct and not some javascript expression.\n            return this.currentToken().tokenKind === SyntaxKind.InterfaceKeyword &&\n                   this.isIdentifier(this.peekToken(1));\n        }\n\n        private parseInterfaceDeclaration(): InterfaceDeclarationSyntax {\n            // Debug.assert(this.isInterfaceDeclaration());\n\n            var modifiers = this.parseModifiers();\n            var interfaceKeyword = this.eatKeyword(SyntaxKind.InterfaceKeyword);\n            var identifier = this.eatIdentifierToken();\n            var typeParameterList = this.parseOptionalTypeParameterList(/*requireCompleteTypeParameterList:*/ false);\n            var heritageClauses = this.parseHeritageClauses();\n\n            var objectType = this.parseObjectType();\n            return this.factory.interfaceDeclaration(\n                modifiers, interfaceKeyword, identifier, typeParameterList, heritageClauses, objectType);\n        }\n\n        private parseObjectType(): ObjectTypeSyntax {\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n\n            var typeMembers: ISeparatedSyntaxList = Syntax.emptySeparatedList;\n            if (openBraceToken.width() > 0) {\n                var result = this.parseSeparatedSyntaxList(ListParsingState.ObjectType_TypeMembers);\n                typeMembers = result.list;\n                openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n            }\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n            return this.factory.objectType(openBraceToken, typeMembers, closeBraceToken);\n        }\n\n        private isTypeMember(inErrorRecovery: boolean): boolean {\n            if (this.currentNode() !== null && this.currentNode().isTypeMember()) {\n                return true;\n            }\n\n            return this.isCallSignature(/*tokenIndex:*/ 0) ||\n                   this.isConstructSignature() ||\n                   this.isIndexSignature() ||\n                   this.isMethodSignature(inErrorRecovery) ||\n                   this.isPropertySignature(inErrorRecovery);\n        }\n\n        private parseTypeMember(): ITypeMemberSyntax {\n            if (this.currentNode() !== null && this.currentNode().isTypeMember()) {\n                return <ITypeMemberSyntax>this.eatNode();\n            }\n\n            if (this.isCallSignature(/*tokenIndex:*/ 0)) {\n                return this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n            }\n            else if (this.isConstructSignature()) {\n                return this.parseConstructSignature();\n            }\n            else if (this.isIndexSignature()) {\n                return this.parseIndexSignature();\n            }\n            else if (this.isMethodSignature(/*inErrorRecovery:*/ false)) {\n                // Note: it is important that isFunctionSignature is called before isPropertySignature.\n                // isPropertySignature checks for a subset of isFunctionSignature.\n                return this.parseMethodSignature();\n            }\n            else if (this.isPropertySignature(/*inErrorRecovery:*/ false)) {\n                return this.parsePropertySignature();\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private parseConstructSignature(): ConstructSignatureSyntax {\n            // Debug.assert(this.isConstructSignature());\n\n            var newKeyword = this.eatKeyword(SyntaxKind.NewKeyword);\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n\n            return this.factory.constructSignature(newKeyword, callSignature);\n        }\n\n        private parseIndexSignature(): IndexSignatureSyntax {\n            // Debug.assert(this.isIndexSignature());\n\n            var openBracketToken = this.eatToken(SyntaxKind.OpenBracketToken);\n            var parameter = this.parseParameter();\n            var closeBracketToken = this.eatToken(SyntaxKind.CloseBracketToken);\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n\n            return this.factory.indexSignature(openBracketToken, parameter, closeBracketToken, typeAnnotation);\n        }\n\n        private parseMethodSignature(): MethodSignatureSyntax {\n            // Debug.assert(this.isMethodSignature());\n\n            var propertyName = this.eatPropertyName();\n            var questionToken = this.tryEatToken(SyntaxKind.QuestionToken);\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n\n            return this.factory.methodSignature(propertyName, questionToken, callSignature);\n        }\n\n        private parsePropertySignature(): PropertySignatureSyntax {\n            // Debug.assert(this.isPropertySignature());\n\n            var propertyName = this.eatPropertyName();\n            var questionToken = this.tryEatToken(SyntaxKind.QuestionToken);\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n\n            return this.factory.propertySignature(propertyName, questionToken, typeAnnotation);\n        }\n\n        private isCallSignature(tokenIndex: number): boolean {\n            var tokenKind = this.peekToken(tokenIndex).tokenKind;\n            return tokenKind === SyntaxKind.OpenParenToken || tokenKind === SyntaxKind.LessThanToken;\n        }\n\n        private isConstructSignature(): boolean {\n            if (this.currentToken().tokenKind !== SyntaxKind.NewKeyword) {\n                return false;\n            }\n\n            var token1 = this.peekToken(1);\n            return token1.tokenKind === SyntaxKind.LessThanToken || token1.tokenKind === SyntaxKind.OpenParenToken;\n        }\n\n        private isIndexSignature(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.OpenBracketToken;\n        }\n\n        private isMethodSignature(inErrorRecovery: boolean): boolean {\n            if (this.isPropertyName(this.currentToken(), inErrorRecovery)) {\n                // id(\n                if (this.isCallSignature(1)) {\n                    return true;\n                }\n\n                // id?(\n                if (this.peekToken(1).tokenKind === SyntaxKind.QuestionToken &&\n                    this.isCallSignature(2)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private isPropertySignature(inErrorRecovery: boolean): boolean {\n            var currentToken = this.currentToken();\n\n            // Keywords can start properties.  However, they\'re often intended to start something\n            // else.  If we see a modifier before something that can be a property, then don\'t\n            // try parse it out as a property.  For example, if we have:\n            //\n            //      public foo\n            //\n            // Then don\'t parse \'public\' as a property name.  Note: if you have:\n            //\n            //      public\n            //      foo\n            //\n            // Then we *should* parse it as a property name, as ASI takes effect here.\n            if (ParserImpl.isModifier(currentToken) &&\n                !currentToken.hasTrailingNewLine() &&\n                this.isPropertyName(this.peekToken(1), inErrorRecovery))\n            {\n                return false;\n            }\n\n            // Note: property names also start function signatures.  So it\'s important that we call this\n            // after we calll isFunctionSignature.\n            return this.isPropertyName(currentToken, inErrorRecovery);\n        }\n\n        private isHeritageClause(): boolean {\n            var token0 = this.currentToken();\n            return token0.tokenKind === SyntaxKind.ExtendsKeyword || token0.tokenKind === SyntaxKind.ImplementsKeyword;\n        }\n\n        private isNotHeritageClauseTypeName(): boolean {\n            if (this.currentToken().tokenKind === SyntaxKind.ImplementsKeyword ||\n                this.currentToken().tokenKind === SyntaxKind.ExtendsKeyword) {\n\n                return this.isIdentifier(this.peekToken(1));\n            }\n\n            return false;\n        }\n\n        private isHeritageClauseTypeName(): boolean {\n            if (this.isName()) {\n                // We want to make sure that the \"extends\" in \"extends foo\" or the \"implements\" in\n                // \"implements foo\" is not considered a type name.\n                return !this.isNotHeritageClauseTypeName();\n            }\n            \n            return false;\n        }\n\n        private parseHeritageClause(): HeritageClauseSyntax {\n            // Debug.assert(this.isHeritageClause());\n\n            var extendsOrImplementsKeyword = this.eatAnyToken();\n            Debug.assert(extendsOrImplementsKeyword.tokenKind === SyntaxKind.ExtendsKeyword || extendsOrImplementsKeyword.tokenKind === SyntaxKind.ImplementsKeyword);\n\n            var result = this.parseSeparatedSyntaxList(ListParsingState.HeritageClause_TypeNameList);\n            var typeNames = result.list;\n            extendsOrImplementsKeyword = this.addSkippedTokensAfterToken(extendsOrImplementsKeyword, result.skippedTokens);\n\n            return this.factory.heritageClause(extendsOrImplementsKeyword, typeNames);\n        }\n\n        private isStatement(inErrorRecovery: boolean): boolean {\n            if (this.currentNode() !== null && this.currentNode().isStatement()) {\n                return true;\n            }\n\n            // ERROR RECOVERY\n            switch (this.currentToken().tokenKind) {\n                case SyntaxKind.PublicKeyword:\n                case SyntaxKind.PrivateKeyword:\n                case SyntaxKind.StaticKeyword:\n                    // None of hte above are actually keywords.  And they might show up in a real\n                    // statement (i.e. \"public();\").  However, if we see \'public identifier\' then \n                    // that can\'t possibly be a statement (and instead will be a class element), \n                    // and we should not parse it out here.\n                    var token1 = this.peekToken(1);\n                    if (SyntaxFacts.isIdentifierNameOrAnyKeyword(token1)) {\n                        return false;\n                    }\n            }\n\n            return this.isVariableStatement() ||\n                   this.isLabeledStatement() ||\n                   this.isFunctionDeclaration() ||\n                   this.isIfStatement() ||\n                   this.isBlock() ||\n                   this.isExpressionStatement() ||\n                   this.isReturnStatement() ||\n                   this.isSwitchStatement() ||\n                   this.isThrowStatement() ||\n                   this.isBreakStatement() ||\n                   this.isContinueStatement() ||\n                   this.isForOrForInStatement() ||\n                   this.isEmptyStatement(inErrorRecovery) ||\n                   this.isWhileStatement() ||\n                   this.isWithStatement() ||\n                   this.isDoStatement() ||\n                   this.isTryStatement() ||\n                   this.isDebuggerStatement();\n        }\n\n        private parseStatement(): IStatementSyntax {\n            if (this.currentNode() !== null && this.currentNode().isStatement()) {\n                return <IStatementSyntax>this.eatNode();\n            }\n\n            if (this.isVariableStatement()) {\n                return this.parseVariableStatement();\n            }\n            else if (this.isLabeledStatement()) {\n                return this.parseLabeledStatement();\n            }\n            else if (this.isFunctionDeclaration()) {\n                return this.parseFunctionDeclaration();\n            }\n            else if (this.isIfStatement()) {\n                return this.parseIfStatement();\n            }\n            else if (this.isBlock()) {\n                return this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n            }\n            else if (this.isReturnStatement()) {\n                return this.parseReturnStatement();\n            }\n            else if (this.isSwitchStatement()) {\n                return this.parseSwitchStatement();\n            }\n            else if (this.isThrowStatement()) {\n                return this.parseThrowStatement();\n            }\n            else if (this.isBreakStatement()) {\n                return this.parseBreakStatement();\n            }\n            else if (this.isContinueStatement()) {\n                return this.parseContinueStatement();\n            }\n            else if (this.isForOrForInStatement()) {\n                return this.parseForOrForInStatement();\n            }\n            else if (this.isEmptyStatement(/*inErrorRecovery:*/ false)) {\n                return this.parseEmptyStatement();\n            }\n            else if (this.isWhileStatement()) {\n                return this.parseWhileStatement();\n            }\n            else if (this.isWithStatement()) {\n                return this.parseWithStatement();\n            }\n            else if (this.isDoStatement()) {\n                return this.parseDoStatement();\n            }\n            else if (this.isTryStatement()) {\n                return this.parseTryStatement();\n            }\n            else if (this.isDebuggerStatement()) {\n                return this.parseDebuggerStatement();\n            }\n            else {\n                // Fall back to parsing this as expression statement.\n                return this.parseExpressionStatement();\n            }\n        }\n\n        private isDebuggerStatement(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.DebuggerKeyword;\n        }\n\n        private parseDebuggerStatement(): DebuggerStatementSyntax {\n            // Debug.assert(this.isDebuggerStatement());\n\n            var debuggerKeyword = this.eatKeyword(SyntaxKind.DebuggerKeyword);\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.debuggerStatement(debuggerKeyword, semicolonToken);\n        }\n\n        private isDoStatement(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.DoKeyword;\n        }\n\n        private parseDoStatement(): DoStatementSyntax {\n            // Debug.assert(this.isDoStatement());\n\n            var doKeyword = this.eatKeyword(SyntaxKind.DoKeyword);\n            var statement = this.parseStatement();\n            var whileKeyword = this.eatKeyword(SyntaxKind.WhileKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var condition = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n\n            // From: https://mail.mozilla.org/pipermail/es-discuss/2011-August/016188.html\n            // 157 min --- All allen at wirfs-brock.com CONF --- \"do{;}while(false)false\" prohibited in \n            // spec but allowed in consensus reality. Approved -- this is the de-facto standard whereby\n            //  do;while(0)x will have a semicolon inserted before x.\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ true);\n\n            return this.factory.doStatement(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken);\n        }\n\n        private isLabeledStatement(): boolean {\n            return this.isIdentifier(this.currentToken()) && this.peekToken(1).tokenKind === SyntaxKind.ColonToken;\n        }\n\n        private parseLabeledStatement(): LabeledStatementSyntax {\n            // Debug.assert(this.isLabeledStatement());\n\n            var identifier = this.eatIdentifierToken();\n            var colonToken = this.eatToken(SyntaxKind.ColonToken);\n            var statement = this.parseStatement();\n\n            return this.factory.labeledStatement(identifier, colonToken, statement);\n        }\n\n        private isTryStatement(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.TryKeyword;\n        }\n\n        private parseTryStatement(): TryStatementSyntax {\n            // Debug.assert(this.isTryStatement());\n\n            var tryKeyword = this.eatKeyword(SyntaxKind.TryKeyword);\n\n            var savedListParsingState = this.listParsingState;\n            this.listParsingState |= ListParsingState.TryBlock_Statements;\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n            this.listParsingState = savedListParsingState;\n\n            var catchClause: CatchClauseSyntax = null;\n            if (this.isCatchClause()) {\n                catchClause = this.parseCatchClause();\n            }\n\n            // If we don\'t have a catch clause, then we must have a finally clause.  Try to parse\n            // one out no matter what.\n            var finallyClause: FinallyClauseSyntax = null;\n            if (catchClause === null || this.isFinallyClause()) {\n                finallyClause = this.parseFinallyClause();\n            }\n\n            return this.factory.tryStatement(tryKeyword, block, catchClause, finallyClause);\n        }\n\n        private isCatchClause(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.CatchKeyword;\n        }\n\n        private parseCatchClause(): CatchClauseSyntax {\n            // Debug.assert(this.isCatchClause());\n\n            var catchKeyword = this.eatKeyword(SyntaxKind.CatchKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var identifier = this.eatIdentifierToken();\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n\n            var savedListParsingState = this.listParsingState;\n            this.listParsingState |= ListParsingState.CatchBlock_Statements;\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n            this.listParsingState = savedListParsingState;\n\n            return this.factory.catchClause(catchKeyword, openParenToken, identifier, typeAnnotation, closeParenToken, block);\n        }\n\n        private isFinallyClause(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.FinallyKeyword;\n        }\n\n        private parseFinallyClause(): FinallyClauseSyntax {\n            var finallyKeyword = this.eatKeyword(SyntaxKind.FinallyKeyword);\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n\n            return this.factory.finallyClause(finallyKeyword, block);\n        }\n\n        private isWithStatement(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.WithKeyword;\n        }\n\n        private parseWithStatement(): WithStatementSyntax {\n            // Debug.assert(this.isWithStatement());\n\n            var withKeyword = this.eatKeyword(SyntaxKind.WithKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var condition = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var statement = this.parseStatement();\n\n            return this.factory.withStatement(withKeyword, openParenToken, condition, closeParenToken, statement);\n        }\n\n        private isWhileStatement(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.WhileKeyword;\n        }\n\n        private parseWhileStatement(): WhileStatementSyntax {\n            // Debug.assert(this.isWhileStatement());\n\n            var whileKeyword = this.eatKeyword(SyntaxKind.WhileKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var condition = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var statement = this.parseStatement();\n\n            return this.factory.whileStatement(whileKeyword, openParenToken, condition, closeParenToken, statement);\n        }\n\n        private isEmptyStatement(inErrorRecovery: boolean): boolean {\n            // If we\'re in error recovery, then we don\'t want to treat \';\' as an empty statement.\n            // The problem is that \';\' can show up in far too many contexts, and if we see one \n            // and assume it\'s a statement, then we may bail out innapropriately from whatever \n            // we\'re parsing.  For example, if we have a semicolon in the middle of a class, then\n            // we really don\'t want to assume the class is over and we\'re on a statement in the\n            // outer module.  We just want to consume and move on.\n            if (inErrorRecovery) {\n                return false;\n            }\n\n            return this.currentToken().tokenKind === SyntaxKind.SemicolonToken;\n        }\n\n        private parseEmptyStatement(): EmptyStatementSyntax {\n            // Debug.assert(this.isEmptyStatement());\n\n            var semicolonToken = this.eatToken(SyntaxKind.SemicolonToken);\n            return this.factory.emptyStatement(semicolonToken);\n        }\n\n        private isForOrForInStatement(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.ForKeyword;\n        }\n\n        private parseForOrForInStatement(): BaseForStatementSyntax {\n            // Debug.assert(this.isForOrForInStatement());\n\n            var forKeyword = this.eatKeyword(SyntaxKind.ForKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n\n            var currentToken = this.currentToken();\n            if (currentToken.tokenKind === SyntaxKind.VarKeyword) {\n                // for ( var VariableDeclarationListNoIn; Expressionopt ; Expressionopt ) Statement\n                // for ( var VariableDeclarationNoIn in Expression ) Statement\n                return this.parseForOrForInStatementWithVariableDeclaration(forKeyword, openParenToken);\n            }\n            else if (currentToken.tokenKind === SyntaxKind.SemicolonToken) {\n                // for ( ; Expressionopt ; Expressionopt ) Statement\n                return this.parseForStatement(forKeyword, openParenToken);\n            }\n            else {\n                // for ( ExpressionNoInopt; Expressionopt ; Expressionopt ) Statement\n                // for ( LeftHandSideExpression in Expression ) Statement\n                return this.parseForOrForInStatementWithInitializer(forKeyword, openParenToken);\n            }\n        }\n\n        private parseForOrForInStatementWithVariableDeclaration(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken): BaseForStatementSyntax {\n            // Debug.assert(forKeyword.tokenKind === SyntaxKind.ForKeyword && openParenToken.tokenKind === SyntaxKind.OpenParenToken);\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.VarKeyword);\n\n            // for ( var VariableDeclarationListNoIn; Expressionopt ; Expressionopt ) Statement\n            // for ( var VariableDeclarationNoIn in Expression ) Statement\n\n            var variableDeclaration = this.parseVariableDeclaration(/*allowIn:*/ false);\n\n            if (this.currentToken().tokenKind === SyntaxKind.InKeyword) {\n                return this.parseForInStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, variableDeclaration, null);\n            }\n\n            return this.parseForStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, variableDeclaration, null);\n        }\n\n        private parseForInStatementWithVariableDeclarationOrInitializer(\n                forKeyword: ISyntaxToken,\n                openParenToken: ISyntaxToken,\n                variableDeclaration: VariableDeclarationSyntax,\n                initializer: IExpressionSyntax): ForInStatementSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.InKeyword);\n\n            // for ( var VariableDeclarationNoIn in Expression ) Statement\n            var inKeyword = this.eatKeyword(SyntaxKind.InKeyword);\n            var expression = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var statement = this.parseStatement();\n\n            return this.factory.forInStatement(forKeyword, openParenToken, variableDeclaration,\n                initializer, inKeyword, expression, closeParenToken, statement);\n        }\n\n        private parseForOrForInStatementWithInitializer(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken): BaseForStatementSyntax {\n            // Debug.assert(forKeyword.tokenKind === SyntaxKind.ForKeyword && openParenToken.tokenKind === SyntaxKind.OpenParenToken);\n\n            // for ( ExpressionNoInopt; Expressionopt ; Expressionopt ) Statement\n            // for ( LeftHandSideExpression in Expression ) Statement\n\n            var initializer = this.parseExpression(/*allowIn:*/ false);\n            if (this.currentToken().tokenKind === SyntaxKind.InKeyword) {\n                return this.parseForInStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, null, initializer);\n            }\n            else {\n                return this.parseForStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, null, initializer);\n            }\n        }\n\n        private parseForStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken): ForStatementSyntax {\n            // Debug.assert(forKeyword.tokenKind === SyntaxKind.ForKeyword && openParenToken.tokenKind === SyntaxKind.OpenParenToken);\n\n            // for ( ExpressionNoInopt; Expressionopt ; Expressionopt ) Statement\n            var initializer: IExpressionSyntax = null;\n\n            if (this.currentToken().tokenKind !== SyntaxKind.SemicolonToken &&\n                this.currentToken().tokenKind !== SyntaxKind.CloseParenToken &&\n                this.currentToken().tokenKind !== SyntaxKind.EndOfFileToken) {\n                initializer = this.parseExpression(/*allowIn:*/ false);\n            }\n\n            return this.parseForStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, null, initializer);\n        }\n\n        private parseForStatementWithVariableDeclarationOrInitializer(\n                    forKeyword: ISyntaxToken,\n                    openParenToken: ISyntaxToken,\n                    variableDeclaration: VariableDeclarationSyntax,\n                    initializer: IExpressionSyntax): ForStatementSyntax {\n\n            // NOTE: From the es5 section on Automatic Semicolon Insertion.\n            // a semicolon is never inserted automatically if the semicolon would then ... become \n            // one of the two semicolons in the header of a for statement\n            var firstSemicolonToken = this.eatToken(SyntaxKind.SemicolonToken);\n\n            var condition: IExpressionSyntax = null;\n            if (this.currentToken().tokenKind !== SyntaxKind.SemicolonToken &&\n                this.currentToken().tokenKind !== SyntaxKind.CloseParenToken &&\n                this.currentToken().tokenKind !== SyntaxKind.EndOfFileToken) {\n                condition = this.parseExpression(/*allowIn:*/ true);\n            }\n\n            // NOTE: See above.  Semicolons in for statements don\'t participate in automatic \n            // semicolon insertion.\n            var secondSemicolonToken = this.eatToken(SyntaxKind.SemicolonToken);\n\n            var incrementor: IExpressionSyntax = null;\n            if (this.currentToken().tokenKind !== SyntaxKind.CloseParenToken &&\n                this.currentToken().tokenKind !== SyntaxKind.EndOfFileToken) {\n                incrementor = this.parseExpression(/*allowIn:*/ true);\n            }\n\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var statement = this.parseStatement();\n\n            return this.factory.forStatement(forKeyword, openParenToken, variableDeclaration, initializer,\n                firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement);\n        }\n\n        private isBreakStatement(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.BreakKeyword;\n        }\n\n        private parseBreakStatement(): BreakStatementSyntax {\n            // Debug.assert(this.isBreakStatement());\n\n            var breakKeyword = this.eatKeyword(SyntaxKind.BreakKeyword);\n\n            // If there is no newline after the break keyword, then we can consume an optional \n            // identifier.\n            var identifier: ISyntaxToken = null;\n            if (!this.canEatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false)) {\n                if (this.isIdentifier(this.currentToken())) {\n                    identifier = this.eatIdentifierToken();\n                }\n            }\n\n            var semicolon = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n            return this.factory.breakStatement(breakKeyword, identifier, semicolon);\n        }\n\n        private isContinueStatement(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.ContinueKeyword;\n        }\n\n        private parseContinueStatement(): ContinueStatementSyntax {\n            // Debug.assert(this.isContinueStatement());\n\n            var continueKeyword = this.eatKeyword(SyntaxKind.ContinueKeyword);\n\n            // If there is no newline after the break keyword, then we can consume an optional \n            // identifier.\n            var identifier: ISyntaxToken = null;\n            if (!this.canEatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false)) {\n                if (this.isIdentifier(this.currentToken())) {\n                    identifier = this.eatIdentifierToken();\n                }\n            }\n\n            var semicolon = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n            return this.factory.continueStatement(continueKeyword, identifier, semicolon);\n        }\n\n        private isSwitchStatement(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.SwitchKeyword;\n        }\n\n        private parseSwitchStatement() {\n            // Debug.assert(this.isSwitchStatement());\n\n            var switchKeyword = this.eatKeyword(SyntaxKind.SwitchKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var expression = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n\n            var switchClauses: ISyntaxList = Syntax.emptyList;\n            if (openBraceToken.width() > 0) {\n                var result = this.parseSyntaxList(ListParsingState.SwitchStatement_SwitchClauses);\n                switchClauses = result.list;\n                openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n            }\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n            return this.factory.switchStatement(switchKeyword, openParenToken, expression,\n                closeParenToken, openBraceToken, switchClauses, closeBraceToken);\n        }\n\n        private isCaseSwitchClause(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.CaseKeyword;\n        }\n\n        private isDefaultSwitchClause(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.DefaultKeyword;\n        }\n\n        private isSwitchClause(): boolean {\n            if (this.currentNode() !== null && this.currentNode().isSwitchClause()) {\n                return true;\n            }\n\n            return this.isCaseSwitchClause() || this.isDefaultSwitchClause();\n        }\n\n        private parseSwitchClause(): SwitchClauseSyntax {\n            // Debug.assert(this.isSwitchClause());\n            if (this.currentNode() !== null && this.currentNode().isSwitchClause()) {\n                return <SwitchClauseSyntax>this.eatNode();\n            }\n\n            if (this.isCaseSwitchClause()) {\n                return this.parseCaseSwitchClause();\n            }\n            else if (this.isDefaultSwitchClause()) {\n                return this.parseDefaultSwitchClause();\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private parseCaseSwitchClause(): CaseSwitchClauseSyntax {\n            // Debug.assert(this.isCaseSwitchClause());\n\n            var caseKeyword = this.eatKeyword(SyntaxKind.CaseKeyword);\n            var expression = this.parseExpression(/*allowIn:*/ true);\n            var colonToken = this.eatToken(SyntaxKind.ColonToken);\n            var statements = Syntax.emptyList;\n\n            // TODO: allow parsing of the list evne if there\'s no colon.  However, we have to make \n            // sure we add any skipped tokens to the right previous node or token.\n            if (colonToken.fullWidth() > 0) {\n                var result = this.parseSyntaxList(ListParsingState.SwitchClause_Statements);\n                statements = result.list;\n                colonToken = this.addSkippedTokensAfterToken(colonToken, result.skippedTokens);\n            }\n\n            return this.factory.caseSwitchClause(caseKeyword, expression, colonToken, statements);\n        }\n\n        private parseDefaultSwitchClause(): DefaultSwitchClauseSyntax {\n            // Debug.assert(this.isDefaultSwitchClause());\n\n            var defaultKeyword = this.eatKeyword(SyntaxKind.DefaultKeyword);\n            var colonToken = this.eatToken(SyntaxKind.ColonToken);\n            var statements = Syntax.emptyList;\n\n            // TODO: Allow parsing witha colon here.  However, ensure that we attach any skipped \n            // tokens to the defaultKeyword.\n            if (colonToken.fullWidth() > 0) {\n                var result = this.parseSyntaxList(ListParsingState.SwitchClause_Statements);\n                statements = result.list;\n                colonToken = this.addSkippedTokensAfterToken(colonToken, result.skippedTokens);\n            }\n\n            return this.factory.defaultSwitchClause(defaultKeyword, colonToken, statements);\n        }\n\n        private isThrowStatement(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.ThrowKeyword;\n        }\n\n        private parseThrowStatement(): ThrowStatementSyntax {\n            // Debug.assert(this.isThrowStatement());\n\n            var throwKeyword = this.eatKeyword(SyntaxKind.ThrowKeyword);\n\n            var expression: IExpressionSyntax = null;\n            if (this.canEatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false)) {\n                // Because of automatic semicolon insertion, we need to report error if this \n                // throw could be terminated with a semicolon.  Note: we can\'t call \'parseExpression\'\n                // directly as that might consume an expression on the following line.  \n                var token = this.createMissingToken(SyntaxKind.IdentifierName, null);\n                expression = token;\n            }\n            else {\n                expression = this.parseExpression(/*allowIn:*/ true);\n            }\n\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.throwStatement(throwKeyword, expression, semicolonToken);\n        }\n\n        private isReturnStatement(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.ReturnKeyword;\n        }\n\n        private parseReturnStatement(): ReturnStatementSyntax {\n            // Debug.assert(this.isReturnStatement());\n\n            var returnKeyword = this.eatKeyword(SyntaxKind.ReturnKeyword);\n\n            var expression: IExpressionSyntax = null;\n            if (!this.canEatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false)) {\n                expression = this.parseExpression(/*allowIn:*/ true);\n            }\n\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.returnStatement(returnKeyword, expression, semicolonToken);\n        }\n\n        private isExpressionStatement(): boolean {\n            // As per the gramar, neither { nor \'function\' can start an expression statement.\n            var currentToken = this.currentToken();\n\n            var kind = currentToken.tokenKind;\n            if (kind === SyntaxKind.OpenBraceToken || kind === SyntaxKind.FunctionKeyword) {\n                return false;\n            }\n\n            return this.isExpression();\n        }\n\n        private isAssignmentOrOmittedExpression(): boolean {\n            if (this.currentToken().tokenKind === SyntaxKind.CommaToken) {\n                return true;\n            }\n\n            return this.isExpression();\n        }\n\n        private parseAssignmentOrOmittedExpression(): IExpressionSyntax {\n            // Debug.assert(this.isAssignmentOrOmittedExpression());\n\n            if (this.currentToken().tokenKind === SyntaxKind.CommaToken) {\n                return this.factory.omittedExpression();\n            }\n\n            return this.parseAssignmentExpression(/*allowIn:*/ true);\n        }\n\n        private isExpression(): boolean {\n            var currentToken = this.currentToken();\n            var kind = currentToken.tokenKind;\n\n            switch (kind) {\n                case SyntaxKind.NumericLiteral:\n                case SyntaxKind.StringLiteral:\n                case SyntaxKind.RegularExpressionLiteral:\n                    return true;\n\n                case SyntaxKind.OpenBracketToken: // For array literals.\n                case SyntaxKind.OpenParenToken: // For parenthesized expressions\n                    return true;\n\n                case SyntaxKind.LessThanToken: // For cast expressions.\n                    return true;\n\n                // Prefix unary expressions.\n                case SyntaxKind.PlusPlusToken:\n                case SyntaxKind.MinusMinusToken:\n                case SyntaxKind.PlusToken:\n                case SyntaxKind.MinusToken:\n                case SyntaxKind.TildeToken:\n                case SyntaxKind.ExclamationToken:\n                    return true;\n\n                case SyntaxKind.OpenBraceToken: // For object type literal expressions.\n                    return true;\n\n                // ERROR TOLERANCE:\n                // If we see a => then we know the user was probably trying to type in an arrow \n                // function.  So allow this as the start of an expression, knowing that when we \n                // actually try to parse it we\'ll report the missing identifier.\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return true;\n\n                case SyntaxKind.SlashToken:\n                case SyntaxKind.SlashEqualsToken:\n                    // Note: if we see a / or /= token then we always consider this an expression.  Why?\n                    // Well, either that / or /= is actually a regular expression, in which case we\'re \n                    // definitely an expression.  Or, it\'s actually a divide.  In which case, we *still*\n                    // want to think of ourself as an expression.  \"But wait\", you say.  \'/\' doesn\'t\n                    // start an expression.  That\'s true.  BUt like the above check for =>, for error\n                    // tolerance, we will consider ourselves in an expression.  We\'ll then parse out an\n                    // missing identifier and then will consume the / token naturally as a binary \n                    // expression.\n                    return true;\n\n                case SyntaxKind.SuperKeyword:\n                case SyntaxKind.ThisKeyword:\n                case SyntaxKind.TrueKeyword:\n                case SyntaxKind.FalseKeyword:\n                case SyntaxKind.NullKeyword:\n                    return true;\n\n                case SyntaxKind.NewKeyword: // For object creation expressions.\n                    return true;\n\n                // Prefix unary expressions\n                case SyntaxKind.DeleteKeyword:\n                case SyntaxKind.VoidKeyword:\n                case SyntaxKind.TypeOfKeyword:\n                    return true;\n\n                // For function expressions.\n                case SyntaxKind.FunctionKeyword:\n                    return true;\n            }\n\n            if (this.isIdentifier(this.currentToken())) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private parseExpressionStatement(): ExpressionStatementSyntax {\n            var expression = this.parseExpression(/*allowIn:*/ true);\n\n            var semicolon = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.expressionStatement(expression, semicolon);\n        }\n\n        private isIfStatement(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.IfKeyword;\n        }\n\n        private parseIfStatement(): IfStatementSyntax {\n            // Debug.assert(this.isIfStatement());\n\n            var ifKeyword = this.eatKeyword(SyntaxKind.IfKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var condition = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var statement = this.parseStatement();\n\n            var elseClause: ElseClauseSyntax = null;\n            if (this.isElseClause()) {\n                elseClause = this.parseElseClause();\n            }\n\n            return this.factory.ifStatement(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause);\n        }\n\n        private isElseClause(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.ElseKeyword;\n        }\n\n        private parseElseClause(): ElseClauseSyntax {\n            // Debug.assert(this.isElseClause());\n\n            var elseKeyword = this.eatKeyword(SyntaxKind.ElseKeyword);\n            var statement = this.parseStatement();\n\n            return this.factory.elseClause(elseKeyword, statement);\n        }\n\n        private isVariableStatement(): boolean {\n            var index = this.modifierCount();\n            return this.peekToken(index).tokenKind === SyntaxKind.VarKeyword;\n        }\n\n        private parseVariableStatement(): VariableStatementSyntax {\n            // Debug.assert(this.isVariableStatement());\n\n            var modifiers = this.parseModifiers();\n            var variableDeclaration = this.parseVariableDeclaration(/*allowIn:*/ true);\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.variableStatement(modifiers, variableDeclaration, semicolonToken);\n        }\n\n        private parseVariableDeclaration(allowIn: boolean): VariableDeclarationSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.VarKeyword);\n\n            var varKeyword = this.eatKeyword(SyntaxKind.VarKeyword);\n            // Debug.assert(varKeyword.fullWidth() > 0);\n\n            var listParsingState = allowIn\n                ? ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn\n                : ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn;\n\n            var result = this.parseSeparatedSyntaxList(listParsingState);\n            var variableDeclarators = result.list;\n            varKeyword = this.addSkippedTokensAfterToken(varKeyword, result.skippedTokens);\n\n            return this.factory.variableDeclaration(varKeyword, variableDeclarators);\n        }\n\n        private isVariableDeclarator(): boolean {\n            if (this.currentNode() !== null && this.currentNode().kind() === SyntaxKind.VariableDeclarator) {\n                return true;\n            }\n\n            return this.isIdentifier(this.currentToken());\n        }\n\n        private canReuseVariableDeclaratorNode(node: ISyntaxNode) {\n            if (node === null || node.kind() !== SyntaxKind.VariableDeclarator) {\n                return false;\n            }\n\n            // Very subtle incremental parsing bug.  Consider the following code:\n            //\n            //      var v = new List < A, B\n            //\n            // This is actually legal code.  It\'s a list of variable declarators \"v = new List<A\" \n            // on one side and \"B\" on the other. If you then change that to:\n            //\n            //      var v = new List < A, B >()\n            // \n            // then we have a problem.  \"v = new List<A\" doesn\'t intersect the change range, so we\n            // start reparsing at \"B\" and we completely fail to handle this properly.\n            //\n            // In order to prevent this, we do not allow a variable declarator to be reused if it\n            // has an initializer.\n            var variableDeclarator = <VariableDeclaratorSyntax>node;\n            return variableDeclarator.equalsValueClause === null;\n        }\n\n        private parseVariableDeclarator(allowIn: boolean, allowPropertyName: boolean): VariableDeclaratorSyntax {\n            // TODO(cyrusn): What if the \'allowIn\' context has changed between when we last parsed \n            // and now?  We could end up with an incorrect tree.  For example, say we had in the old \n            // tree \"var i = a in b\".  Then, in the new tree the declarator portion moved into:\n            // \"for (var i = a in b\".  We would not want to reuse the declarator as the \"in b\" portion \n            // would need to be consumed by the for declaration instead.  Need to see if it is possible\n            // to hit this case.\n            if (this.canReuseVariableDeclaratorNode(this.currentNode())) {\n                return <VariableDeclaratorSyntax>this.eatNode();\n            }\n\n            var propertyName = allowPropertyName ? this.eatPropertyName() : this.eatIdentifierToken();\n            var equalsValueClause: EqualsValueClauseSyntax = null;\n            var typeAnnotation: TypeAnnotationSyntax = null;\n\n            if (propertyName.width() > 0) {\n                typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n\n                if (this.isEqualsValueClause(/*inParameter*/ false)) {\n                    equalsValueClause = this.parseEqualsValueClause(allowIn);\n                }\n            }\n\n            return this.factory.variableDeclarator(propertyName, typeAnnotation, equalsValueClause);\n        }\n\n        private isColonValueClause(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.ColonToken;\n        }\n\n        private isEqualsValueClause(inParameter: boolean): boolean {\n            var token0 = this.currentToken();\n            if (token0.tokenKind === SyntaxKind.EqualsToken) {\n                return true;\n            }\n\n            // It\'s not uncommon during typing for the user to miss writing the \'=\' token.  Check if\n            // there is no newline after the last token and if we\'re on an expression.  If so, parse\n            // this as an equals-value clause with a missing equals.\n            if (!this.previousToken().hasTrailingNewLine()) {\n\n                // The \'isExpression\' call below returns true for \"=>\".  That\'s because it smartly\n                // assumes that there is just a missing identifier and the user wanted a lambda.  \n                // While this is sensible, we don\'t want to allow that here as that would mean we\'re\n                // glossing over multiple erorrs and we\'re probably making things worse.  So don\'t\n                // treat this as an equals value clause and let higher up code handle things.\n                if (token0.tokenKind === SyntaxKind.EqualsGreaterThanToken) {\n                    return false;\n                }\n\n\n                // There are two places where we allow equals-value clauses.  The first is in a \n                // variable declarator.  The second is with a parameter.  For variable declarators\n                // it\'s more likely that a { would be a allowed (as an object literal).  While this\n                // is also allowed for parameters, the risk is that we consume the { as an object\n                // literal when it really will be for the block following the parameter.\n                if (token0.tokenKind === SyntaxKind.OpenBraceToken &&\n                    inParameter) {\n                    return false;\n                }\n\n                return this.isExpression();\n            }\n\n            return false;\n        }\n\n        private parseEqualsValueClause(allowIn: boolean): EqualsValueClauseSyntax {\n            // Debug.assert(this.isEqualsValueClause());\n\n            var equalsToken = this.eatToken(SyntaxKind.EqualsToken);\n            var value = this.parseAssignmentExpression(allowIn);\n\n            return this.factory.equalsValueClause(equalsToken, value);\n        }\n\n        private parseExpression(allowIn: boolean): IExpressionSyntax {\n            return this.parseSubExpression(0, allowIn);\n        }\n\n        // Called when you need to parse an expression, but you do not want to allow \'CommaExpressions\'.\n        // i.e. if you have \"var a = 1, b = 2\" then when we parse \'1\' we want to parse with higher \n        // precedence than \'comma\'.  Otherwise we\'ll get: \"var a = (1, (b = 2))\", instead of\n        // \"var a = (1), b = (2)\");\n        private parseAssignmentExpression(allowIn: boolean): IExpressionSyntax {\n            return this.parseSubExpression(ExpressionPrecedence.AssignmentExpressionPrecedence, allowIn);\n        }\n\n        private parseUnaryExpression(): IUnaryExpressionSyntax {\n            var currentTokenKind = this.currentToken().tokenKind; \n            if (SyntaxFacts.isPrefixUnaryExpressionOperatorToken(currentTokenKind)) {\n                var operatorKind = SyntaxFacts.getPrefixUnaryExpressionFromOperatorToken(currentTokenKind);\n\n                var operatorToken = this.eatAnyToken();\n\n                var operand = this.parseUnaryExpression();\n                return this.factory.prefixUnaryExpression(operatorKind, operatorToken, operand);\n            }\n            else {\n                return this.parseTerm(/*inObjectCreation*/ false);\n            }\n        }\n\n        private parseSubExpression(precedence: ExpressionPrecedence, allowIn: boolean): IExpressionSyntax {\n            // Because unary expression have the highest precedence, we can always parse one, regardless \n            // of what precedence was passed in.\n            var leftOperand: IExpressionSyntax = this.parseUnaryExpression();\n            leftOperand = this.parseBinaryOrConditionalExpressions(precedence, allowIn, leftOperand);\n\n            return leftOperand;\n        }\n\n        private parseBinaryOrConditionalExpressions(precedence: number, allowIn: boolean, leftOperand: IExpressionSyntax): IExpressionSyntax {\n            while (true) {\n                // We either have a binary operator here, or we\'re finished.\n                var token0 = this.currentToken();\n                var token0Kind = token0.tokenKind;\n\n                // Check for binary expressions.\n                if (SyntaxFacts.isBinaryExpressionOperatorToken(token0Kind)) {\n                    // also, if it\'s the \'in\' operator, only allow if our caller allows it.\n                    if (token0Kind === SyntaxKind.InKeyword && !allowIn) {\n                        break;\n                    }\n\n                    // check for >= or >> or >>= or >>> or >>>=.\n                    //\n                    // These are not created by the scanner since we want the individual > tokens for\n                    // generics.\n                    var mergedToken = this.tryMergeBinaryExpressionTokens();\n                    var tokenKind = mergedToken === null ? token0Kind : mergedToken.syntaxKind;\n\n                    var binaryExpressionKind = SyntaxFacts.getBinaryExpressionFromOperatorToken(tokenKind);\n                    var newPrecedence = ParserImpl.getPrecedence(binaryExpressionKind);\n\n                    // All binary operators must have precedence > 0!\n                    // Debug.assert(newPrecedence > 0);\n\n                    // Check the precedence to see if we should \"take\" this operator\n                    if (newPrecedence < precedence) {\n                        break;\n                    }\n\n                    // Same precedence, but not right-associative -- deal with this higher up in our stack \"later\"\n                    if (newPrecedence === precedence && !this.isRightAssociative(binaryExpressionKind)) {\n                        break;\n                    }\n\n                    // Precedence is okay, so we\'ll \"take\" this operator.  If we have a merged token, \n                    // then create a new synthesized token with all the operators combined.  In that \n                    // case make sure it has the right trivia associated with it.\n                    var operatorToken = mergedToken === null\n                        ? token0\n                        : Syntax.token(mergedToken.syntaxKind)\n                                .withLeadingTrivia(token0.leadingTrivia())\n                                .withTrailingTrivia(this.peekToken(mergedToken.tokenCount - 1).trailingTrivia());\n\n                    // Now skip the operator token we\'re on, or the tokens we merged.\n                    var skipCount = mergedToken === null ? 1 : mergedToken.tokenCount;\n                    for (var i = 0; i < skipCount; i++) {\n                        this.eatAnyToken();\n                    }\n\n                    leftOperand = this.factory.binaryExpression(\n                        binaryExpressionKind, leftOperand, operatorToken, this.parseSubExpression(newPrecedence, allowIn));\n                    continue;\n                }\n\n                // Now check for conditional expression.\n                // Only consume this as a ternary expression if our precedence is higher than the ternary \n                // level.  i.e. if we have \"!f ? a : b\" then we would not want to \n                // consume the \"?\" as part of \"f\" because the precedence of \"!\" is far too high.  However,\n                // if we have: \"x = f ? a : b\", then we would want to consume the \"?\" as part of \"f\".\n                //\n                // Note: if we have \"m = f ? x ? y : z : b, then we do want the second \"?\" to go with \'x\'.\n                if (token0Kind === SyntaxKind.QuestionToken && precedence <= ExpressionPrecedence.ConditionalExpressionPrecedence) {\n                    var questionToken = this.eatToken(SyntaxKind.QuestionToken);\n\n                    var whenTrueExpression = this.parseAssignmentExpression(allowIn);\n                    var colon = this.eatToken(SyntaxKind.ColonToken);\n\n                    var whenFalseExpression = this.parseAssignmentExpression(allowIn);\n                    leftOperand = this.factory.conditionalExpression(\n                        leftOperand, questionToken, whenTrueExpression, colon, whenFalseExpression);\n                    continue;\n                }\n\n                // Not binary or ternary.  Nothing more to consume here.\n                break;\n            }\n\n            return leftOperand;\n        }\n\n        private mergeTokensStorage: SyntaxKind[] = [];\n\n        private tryMergeBinaryExpressionTokens(): { tokenCount: number; syntaxKind: SyntaxKind; } {\n            var token0 = this.currentToken();\n\n            // Only merge if we have a \'>\' token with no trailing trivia.\n            if (token0.tokenKind === SyntaxKind.GreaterThanToken && !token0.hasTrailingTrivia()) {\n                var storage = this.mergeTokensStorage;\n                storage[0] = SyntaxKind.None;\n                storage[1] = SyntaxKind.None;\n                storage[2] = SyntaxKind.None;\n\n                for (var i = 0; i < storage.length; i++) {\n                    var nextToken = this.peekToken(i + 1);\n\n                    // We can merge with the next token if it doesn\'t have any leading trivia.\n                    if (!nextToken.hasLeadingTrivia()) {\n                        storage[i] = nextToken.tokenKind;\n                    }\n\n                    // Stop merging additional tokens if this token has any trailing trivia.\n                    if (nextToken.hasTrailingTrivia()) {\n                        break;\n                    }\n                }\n\n                if (storage[0] === SyntaxKind.GreaterThanToken) {\n                    if (storage[1] === SyntaxKind.GreaterThanToken) {\n                        if (storage[2] === SyntaxKind.EqualsToken) {\n                            // >>>=\n                            return { tokenCount: 4, syntaxKind: SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken };\n                        }\n                        else {\n                            // >>>\n                            return { tokenCount: 3, syntaxKind: SyntaxKind.GreaterThanGreaterThanGreaterThanToken };\n                        }\n                    }\n                    else if (storage[1] === SyntaxKind.EqualsToken) {\n                        // >>=\n                        return { tokenCount: 3, syntaxKind: SyntaxKind.GreaterThanGreaterThanEqualsToken };\n                    }\n                    else {\n                        // >>\n                        return { tokenCount: 2, syntaxKind: SyntaxKind.GreaterThanGreaterThanToken };\n                    }\n                }\n                else if (storage[0] === SyntaxKind.EqualsToken) {\n                    // >=\n                    return { tokenCount: 2, syntaxKind: SyntaxKind.GreaterThanEqualsToken };\n                }\n            }\n\n            // Just use the normal logic as we\'re not merging the \'>\' with anything.\n            return null;\n        }\n\n        private isRightAssociative(expressionKind: SyntaxKind): boolean {\n            switch (expressionKind) {\n                case SyntaxKind.AssignmentExpression:\n                case SyntaxKind.AddAssignmentExpression:\n                case SyntaxKind.SubtractAssignmentExpression:\n                case SyntaxKind.MultiplyAssignmentExpression:\n                case SyntaxKind.DivideAssignmentExpression:\n                case SyntaxKind.ModuloAssignmentExpression:\n                case SyntaxKind.AndAssignmentExpression:\n                case SyntaxKind.ExclusiveOrAssignmentExpression:\n                case SyntaxKind.OrAssignmentExpression:\n                case SyntaxKind.LeftShiftAssignmentExpression:\n                case SyntaxKind.SignedRightShiftAssignmentExpression:\n                case SyntaxKind.UnsignedRightShiftAssignmentExpression:\n                    return true;\n                default:\n                    return false;\n            }\n        }\n\n        private parseTerm(inObjectCreation: boolean): IUnaryExpressionSyntax {\n            // NOTE: allowInvocation and insideObjectCreation are always the negation of the other.\n            // We could remove one of them and just use the other.  However, i think this is much\n            // easier to read and understand in this form.\n\n            var term = this.parseTermWorker();\n            if (term === null) {\n                // Nothing else worked, just try to consume an identifier so we report an error.\n                return this.eatIdentifierToken();\n            }\n\n            return this.parsePostFixExpression(term, inObjectCreation);\n        }\n\n        private parsePostFixExpression(expression: IUnaryExpressionSyntax, inObjectCreation: boolean): IUnaryExpressionSyntax {\n            while (true) {\n                var currentTokenKind = this.currentToken().tokenKind;\n                switch (currentTokenKind) {\n                    case SyntaxKind.OpenParenToken:\n                        if (inObjectCreation) {\n                            return expression;\n                        }\n\n                        expression = this.factory.invocationExpression(expression, this.parseArgumentList(/*typeArgumentList:*/ null));\n                        continue;\n\n                    case SyntaxKind.LessThanToken:\n                        if (inObjectCreation) {\n                            return expression;\n                        }\n\n                        // See if this is the start of a generic invocation.  If so, consume it and\n                        // keep checking for postfix expressions.  Otherwise, it\'s just a \'<\' that\'s \n                        // part of an arithmetic expression.  Break out so we consume it higher in the\n                        // stack.\n                        var argumentList = this.tryParseArgumentList();\n                        if (argumentList !== null) {\n                            expression = this.factory.invocationExpression(expression, argumentList);\n                            continue;\n                        }\n\n                        break;\n\n                    case SyntaxKind.OpenBracketToken:\n                        expression = this.parseElementAccessExpression(expression, inObjectCreation);\n                        continue;\n\n                    case SyntaxKind.PlusPlusToken:\n                    case SyntaxKind.MinusMinusToken:\n                        // Because of automatic semicolon insertion, we should only consume the ++ or -- \n                        // if it is on the same line as the previous token.\n                        if (this.previousToken() !== null && this.previousToken().hasTrailingNewLine()) {\n                            break;\n                        }\n\n                        expression = this.factory.postfixUnaryExpression(\n                            SyntaxFacts.getPostfixUnaryExpressionFromOperatorToken(currentTokenKind), expression, this.eatAnyToken());\n                        continue;\n\n                    case SyntaxKind.DotToken:\n                        expression = this.factory.memberAccessExpression(\n                            expression, this.eatToken(SyntaxKind.DotToken), this.eatIdentifierNameToken());\n                        continue;\n                }\n\n                return expression;\n            }\n        }\n\n        private tryParseArgumentList(): ArgumentListSyntax {\n            var typeArgumentList: TypeArgumentListSyntax = null;\n\n            if (this.currentToken().tokenKind === SyntaxKind.LessThanToken) {\n                // If we have a \'<\', then only parse this as a arugment list if the type arguments\n                // are complete and we have an open paren.  if we don\'t, rewind and return nothing.\n                var rewindPoint = this.getRewindPoint();\n                try {\n                    typeArgumentList = this.tryParseTypeArgumentList(/*inExpression:*/ true);\n                    var token0 = this.currentToken();\n\n                    var isOpenParen = token0.tokenKind === SyntaxKind.OpenParenToken;\n                    var isDot = token0.tokenKind === SyntaxKind.DotToken;\n                    var isOpenParenOrDot = isOpenParen || isDot;\n                    if (typeArgumentList === null || !isOpenParenOrDot) {\n                        this.rewind(rewindPoint);\n                        return null;\n                    }\n\n                    // It\'s not uncommon for a user to type: \"Foo<T>.\"\n                    //\n                    // This is not legal in typescript (as an parameter list must follow the type\n                    // arguments).  We want to give a good error message for this as otherwise\n                    // we\'ll bail out here and give a poor error message when we try to parse this\n                    // as an arithmetic expression.\n                    if (isDot) {\n                        // A parameter list must follow a generic type argument list.\n                        var diagnostic = new SyntaxDiagnostic(this.fileName, this.currentTokenStart(), token0.width(),\n                            DiagnosticCode.A_parameter_list_must_follow_a_generic_type_argument_list______expected, null);\n                        this.addDiagnostic(diagnostic);\n\n                        return this.factory.argumentList(typeArgumentList,\n                            Syntax.emptyToken(SyntaxKind.OpenParenToken), Syntax.emptySeparatedList, Syntax.emptyToken(SyntaxKind.CloseParenToken));\n                    }\n                }\n                finally {\n                    this.releaseRewindPoint(rewindPoint);\n                }\n            }\n\n            if (this.currentToken().tokenKind === SyntaxKind.OpenParenToken) {\n                return this.parseArgumentList(typeArgumentList);\n            }\n\n            return null;\n        }\n\n        private parseArgumentList(typeArgumentList: TypeArgumentListSyntax): ArgumentListSyntax {\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var arguments = Syntax.emptySeparatedList;\n\n            if (openParenToken.fullWidth() > 0) {\n                var result = this.parseSeparatedSyntaxList(ListParsingState.ArgumentList_AssignmentExpressions);\n                arguments = result.list;\n                openParenToken = this.addSkippedTokensAfterToken(openParenToken, result.skippedTokens);\n            }\n\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n\n            return this.factory.argumentList(typeArgumentList, openParenToken, arguments, closeParenToken);\n        }\n\n        private parseElementAccessExpression(expression: IExpressionSyntax, inObjectCreation: boolean): ElementAccessExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.OpenBracketToken);\n\n            var start = this.currentTokenStart();\n            var openBracketToken = this.eatToken(SyntaxKind.OpenBracketToken);\n            var argumentExpression: IExpressionSyntax;\n\n            // It\'s not uncommon for a user to write: \"new Type[]\".  Check for that common pattern\n            // and report a better error message.\n            if (this.currentToken().tokenKind === SyntaxKind.CloseBracketToken &&\n                inObjectCreation) {\n\n                var end = this.currentTokenStart() + this.currentToken().width();\n                var diagnostic = new SyntaxDiagnostic(this.fileName, start, end - start,\n                    DiagnosticCode._new_T____cannot_be_used_to_create_an_array__Use__new_Array_T_____instead, null);\n                this.addDiagnostic(diagnostic);\n\n                argumentExpression = Syntax.emptyToken(SyntaxKind.IdentifierName);\n            }\n            else {\n                argumentExpression = this.parseExpression(/*allowIn:*/ true);\n            }\n\n            var closeBracketToken = this.eatToken(SyntaxKind.CloseBracketToken);\n\n            return this.factory.elementAccessExpression(expression, openBracketToken, argumentExpression, closeBracketToken);\n        }\n\n        private parseTermWorker(): IUnaryExpressionSyntax {\n            var currentToken = this.currentToken();\n\n            // ERROR RECOVERY TWEAK:\n            // If we see a standalone => try to parse it as an arrow function as that\'s likely what\n            // the user intended to write.\n            if (currentToken.tokenKind === SyntaxKind.EqualsGreaterThanToken) {\n                return this.parseSimpleArrowFunctionExpression();\n            }\n\n            if (this.isIdentifier(currentToken)) {\n                if (this.isSimpleArrowFunctionExpression()) {\n                    return this.parseSimpleArrowFunctionExpression();\n                }\n                else {\n                    var identifier = this.eatIdentifierToken();\n                    return identifier;\n                }\n            }\n\n            var currentTokenKind = currentToken.tokenKind;\n            switch (currentTokenKind) {\n                case SyntaxKind.ThisKeyword:\n                    return this.parseThisExpression();\n\n                case SyntaxKind.TrueKeyword:\n                case SyntaxKind.FalseKeyword:\n                    return this.parseLiteralExpression();\n\n                case SyntaxKind.NullKeyword:\n                    return this.parseLiteralExpression();\n\n                case SyntaxKind.NewKeyword:\n                    return this.parseObjectCreationExpression();\n\n                case SyntaxKind.FunctionKeyword:\n                    return this.parseFunctionExpression();\n\n                case SyntaxKind.SuperKeyword:\n                    return this.parseSuperExpression();\n\n                case SyntaxKind.TypeOfKeyword:\n                    return this.parseTypeOfExpression();\n\n                case SyntaxKind.DeleteKeyword:\n                    return this.parseDeleteExpression();\n\n                case SyntaxKind.VoidKeyword:\n                    return this.parseVoidExpression();\n\n                case SyntaxKind.NumericLiteral:\n                    return this.parseLiteralExpression();\n\n                case SyntaxKind.RegularExpressionLiteral:\n                    return this.parseLiteralExpression();\n\n                case SyntaxKind.StringLiteral:\n                    return this.parseLiteralExpression();\n\n                case SyntaxKind.OpenBracketToken:\n                    return this.parseArrayLiteralExpression();\n\n                case SyntaxKind.OpenBraceToken:\n                    return this.parseObjectLiteralExpression();\n\n                case SyntaxKind.OpenParenToken:\n                    return this.parseParenthesizedOrArrowFunctionExpression();\n\n                case SyntaxKind.LessThanToken:\n                    return this.parseCastOrArrowFunctionExpression();\n\n                case SyntaxKind.SlashToken:\n                case SyntaxKind.SlashEqualsToken:\n                    // If we see a standalone / or /= and we\'re expecting a term, then try to reparse\n                    // it as a regular expression.  If we succeed, then return that.  Otherwise, fall\n                    // back and just return a missing identifier as usual.  We\'ll then form a binary\n                    // expression out of of the / as usual.\n                    var result = this.tryReparseDivideAsRegularExpression();\n                    if (result !== null) {\n                        return result;\n                    }\n                    break;\n            }\n\n            // Wasn\'t able to parse this as a term. \n            return null;\n        }\n\n        private tryReparseDivideAsRegularExpression(): IUnaryExpressionSyntax {\n            // If we see a / or /= token, then that may actually be the start of a regex in certain \n            // contexts.\n\n            var currentToken = this.currentToken();\n            // Debug.assert(SyntaxFacts.isAnyDivideToken(currentToken.tokenKind));\n\n            // There are several contexts where we could never see a regex.  Don\'t even bother \n            // reinterpretting the / in these contexts.\n            if (this.previousToken() !== null) {\n                var previousTokenKind = this.previousToken().tokenKind;\n                switch (previousTokenKind) {\n                    case SyntaxKind.IdentifierName:\n                        // Regular expressions can\'t follow identifiers.\n                        return null;\n\n                    // Regexs also can\'t follow certain keywords:\n                    case SyntaxKind.ThisKeyword:\n                    case SyntaxKind.TrueKeyword:\n                    case SyntaxKind.FalseKeyword:\n                        return null;\n\n                    // A regular expression could follow other keywords.  i.e. \"return /blah/;\"\n                    // TODO: be more specific about the keywords that a regex could follow.\n\n                    case SyntaxKind.StringLiteral:\n                    case SyntaxKind.NumericLiteral:\n                    case SyntaxKind.RegularExpressionLiteral:\n                    case SyntaxKind.PlusPlusToken:\n                    case SyntaxKind.MinusMinusToken:\n                    case SyntaxKind.CloseBracketToken:\n                    case SyntaxKind.CloseBraceToken:\n                        // A regular expression can\'t follow any of these.  It must be a divide. Note: this\n                        // list *may* be incorrect (especially in the context of typescript).  We need to\n                        // carefully review it.\n                        return null;\n\n                    // case SyntaxKind.CloseParenToken:\n                    // It is tempting to say that if we have a slash after a close paren that it can\'t be \n                    // a regular expression.  after all, the normal case where we see that is \"(1 + 2) / 3\".\n                    // However, it can appear in legal code.  Specifically:\n                    //\n                    //      for (...)\n                    //          /regex/.Stuff...\n                    //\n                    // So we have to see if we can get a regular expression in that case.\n                }\n            }\n\n            // Ok, from our quick lexical check, this could be a place where a regular expression could\n            // go.  Now we have to do a bunch of work.  Ask the source to retrive the token at the \n            // current position again.  But this time allow it to retrieve it as a regular expression.\n            currentToken = this.currentTokenAllowingRegularExpression();\n\n            // Note: we *must* have gotten a /, /= or regular expression.  Or else something went *very*\n            // wrong with our logic above.\n            // Debug.assert(SyntaxFacts.isAnyDivideOrRegularExpressionToken(currentToken.tokenKind));\n\n            if (currentToken.tokenKind === SyntaxKind.SlashToken || currentToken.tokenKind === SyntaxKind.SlashEqualsToken) {\n                // Still came back as a / or /=.   This is not a regular expression literal.\n                return null;\n            }\n            else if (currentToken.tokenKind === SyntaxKind.RegularExpressionLiteral) {\n                return this.parseLiteralExpression();\n            }\n            else {\n                // Something *very* wrong happened.  This is an internal parser fault that we need \n                // to figure out and fix.\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private parseTypeOfExpression(): TypeOfExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.TypeOfKeyword);\n\n            var typeOfKeyword = this.eatKeyword(SyntaxKind.TypeOfKeyword);\n            var expression = this.parseUnaryExpression();\n\n            return this.factory.typeOfExpression(typeOfKeyword, expression);\n        }\n\n        private parseDeleteExpression(): DeleteExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.DeleteKeyword);\n\n            var deleteKeyword = this.eatKeyword(SyntaxKind.DeleteKeyword);\n            var expression = this.parseUnaryExpression();\n\n            return this.factory.deleteExpression(deleteKeyword, expression);\n        }\n\n        private parseVoidExpression(): VoidExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.VoidKeyword);\n\n            var voidKeyword = this.eatKeyword(SyntaxKind.VoidKeyword);\n            var expression = this.parseUnaryExpression();\n\n            return this.factory.voidExpression(voidKeyword, expression);\n        }\n\n        private parseSuperExpression(): IUnaryExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.SuperKeyword);\n\n            var superKeyword = this.eatKeyword(SyntaxKind.SuperKeyword);\n            return superKeyword;\n        }\n\n        private parseFunctionExpression(): FunctionExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.FunctionKeyword);\n\n            var functionKeyword = this.eatKeyword(SyntaxKind.FunctionKeyword);\n            var identifier: ISyntaxToken = null;\n\n            if (this.isIdentifier(this.currentToken())) {\n                identifier = this.eatIdentifierToken();\n            }\n\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ true);\n\n            return this.factory.functionExpression(functionKeyword, identifier, callSignature, block);\n        }\n\n        private parseObjectCreationExpression(): ObjectCreationExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.NewKeyword);\n            var newKeyword = this.eatKeyword(SyntaxKind.NewKeyword);\n\n            // While parsing the sub term we don\'t want to allow invocations to be parsed.  that\'s because\n            // we want \"new Foo()\" to parse as \"new Foo()\" (one node), not \"new (Foo())\".\n            var expression = this.parseTerm(/*inObjectCreation:*/ true);\n            var argumentList = this.tryParseArgumentList();\n\n            return this.factory.objectCreationExpression(newKeyword, expression, argumentList);\n        }\n\n        private parseCastOrArrowFunctionExpression(): IUnaryExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.LessThanToken);\n\n            // We\'ve got a \'<\'.  that could start a cast or an arrow function.  As it is highly\n            // ambiguous, we need to check for enough data to indicate that\'s it\'s an arrow \n            // function.  Otherwise, we assume it\'s a cast.\n            var rewindPoint = this.getRewindPoint();\n            try {\n                var arrowFunction = this.tryParseArrowFunctionExpression();\n                if (arrowFunction !== null) {\n                    return arrowFunction;\n                }\n\n                // wasn\'t an arrow function.  Try again as a cast expression.\n                this.rewind(rewindPoint);\n                return this.parseCastExpression();\n            }\n            finally {\n                this.releaseRewindPoint(rewindPoint);\n            }\n        }\n        \n        private parseCastExpression(): CastExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.LessThanToken);\n\n            var lessThanToken = this.eatToken(SyntaxKind.LessThanToken);\n            var type = this.parseType();\n            var greaterThanToken = this.eatToken(SyntaxKind.GreaterThanToken);\n            var expression = this.parseUnaryExpression();\n\n            return this.factory.castExpression(lessThanToken, type, greaterThanToken, expression);\n        }\n\n        private parseParenthesizedOrArrowFunctionExpression(): IUnaryExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.OpenParenToken);\n\n            var result = this.tryParseArrowFunctionExpression();\n            if (result !== null) {\n                return result;\n            }\n\n            // Doesn\'t look like an arrow function, so parse this as a parenthesized expression.\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var expression = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n\n            return this.factory.parenthesizedExpression(openParenToken, expression, closeParenToken);\n        }\n\n        private tryParseArrowFunctionExpression(): ArrowFunctionExpressionSyntax {\n            var tokenKind = this.currentToken().tokenKind;\n            // Debug.assert(tokenKind === SyntaxKind.OpenParenToken || tokenKind === SyntaxKind.LessThanToken);\n\n            // Because arrow functions and parenthesized expressions look similar, we have to check far\n            // enough ahead to be sure we\'ve actually got an arrow function. For example, both nodes can\n            // start with:\n            //    (a = b, c = d, ..., e = f).\n            //So we effectively need infinite lookahead to decide which node we\'re in.\n            //\n            // First, check for things that definitely have enough information to let us know it\'s an\n            // arrow function.\n\n            if (this.isDefinitelyArrowFunctionExpression()) {\n                // We have something like \"() =>\" or \"(a) =>\".  Definitely a lambda, so parse it\n                // unilaterally as such.\n                return this.parseParenthesizedArrowFunctionExpression(/*requiresArrow:*/ false);\n            }\n\n            // Now, look for cases where we\'re sure it\'s not an arrow function.  This will help save us\n            // a costly parse.\n            if (!this.isPossiblyArrowFunctionExpression()) {\n                return null;\n            }\n\n            // Then, try to actually parse it as a arrow function, and only return if we see an => \n            var rewindPoint = this.getRewindPoint();\n            try {\n                var arrowFunction = this.parseParenthesizedArrowFunctionExpression(/*requiresArrow:*/ true);\n                if (arrowFunction === null) {\n                    this.rewind(rewindPoint);\n                }\n                return arrowFunction;\n            }\n            finally {\n                this.releaseRewindPoint(rewindPoint);\n            }\n        }\n\n        private parseParenthesizedArrowFunctionExpression(requireArrow: boolean): ParenthesizedArrowFunctionExpressionSyntax {\n            var currentToken = this.currentToken();\n            // Debug.assert(currentToken.tokenKind === SyntaxKind.OpenParenToken || currentToken.tokenKind === SyntaxKind.LessThanToken);\n\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ true);\n\n            if (requireArrow && this.currentToken().tokenKind !== SyntaxKind.EqualsGreaterThanToken) {\n                return null;\n            }\n\n            var equalsGreaterThanToken = this.eatToken(SyntaxKind.EqualsGreaterThanToken);\n            var body = this.parseArrowFunctionBody();\n\n            return this.factory.parenthesizedArrowFunctionExpression(callSignature, equalsGreaterThanToken, body);\n        }\n\n        private parseArrowFunctionBody(): ISyntaxNodeOrToken {\n            if (this.isBlock()) {\n                return this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n            }\n            else {\n                return this.parseAssignmentExpression(/*allowIn:*/ true);\n            }\n        }\n\n        private isSimpleArrowFunctionExpression(): boolean {\n            // ERROR RECOVERY TWEAK:\n            if (this.currentToken().tokenKind === SyntaxKind.EqualsGreaterThanToken) {\n                return true;\n            }\n\n            return this.isIdentifier(this.currentToken()) &&\n                   this.peekToken(1).tokenKind === SyntaxKind.EqualsGreaterThanToken;\n        }\n\n        private parseSimpleArrowFunctionExpression(): SimpleArrowFunctionExpressionSyntax {\n            // Debug.assert(this.isSimpleArrowFunctionExpression());\n\n            var identifier = this.eatIdentifierToken();\n            var equalsGreaterThanToken = this.eatToken(SyntaxKind.EqualsGreaterThanToken);\n            var body = this.parseArrowFunctionBody();\n\n            return this.factory.simpleArrowFunctionExpression(\n                identifier, equalsGreaterThanToken, body);\n        }\n\n        private isBlock(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.OpenBraceToken;\n        }\n\n        private isDefinitelyArrowFunctionExpression(): boolean {\n            var token0 = this.currentToken();\n            if (token0.tokenKind !== SyntaxKind.OpenParenToken) {\n                // If it didn\'t start with an (, then it could be generic.  That\'s too complicated \n                // and we can\'t say it\'s \'definitely\' an arrow function.             \n                return false;\n            }\n\n            var token1 = this.peekToken(1);\n            var token2: ISyntaxToken;\n\n            if (token1.tokenKind === SyntaxKind.CloseParenToken) {\n                // ()\n                // Definitely an arrow function.  Could never be a parenthesized expression.  \n                // *However*, because of error situations, we could end up with things like \"().foo\".\n                // In this case, we don\'t want to think of this as the start of an arrow function.\n                // To prevent this, we are a little stricter, and we require that we at least see:\n                //      \"():\"  or  \"() =>\"  or \"() {}\".  Note: the last one is illegal.  However it\n                // most likely is a missing => and not a parenthesized expression.\n                token2 = this.peekToken(2);\n                return token2.tokenKind === SyntaxKind.ColonToken ||\n                       token2.tokenKind === SyntaxKind.EqualsGreaterThanToken ||\n                       token2.tokenKind === SyntaxKind.OpenBraceToken;\n            }\n\n            if (token1.tokenKind === SyntaxKind.DotDotDotToken) {\n                // (...\n                // Definitely an arrow function.  Could never be a parenthesized expression.\n                return true;\n            }\n\n            if (!this.isIdentifier(token1)) {\n                // All other arrow functions must start with (id\n                // so this is definitely not an arrow function.\n                return false;\n            }\n\n            // (id\n            //\n            // Lots of options here.  Check for things that make us certain it\'s an\n            // arrow function.\n            token2 = this.peekToken(2);\n            if (token2.tokenKind === SyntaxKind.ColonToken) {\n                // (id:\n                // Definitely an arrow function.  Could never be a parenthesized expression.\n                return true;\n            }\n\n            var token3 = this.peekToken(3);\n            if (token2.tokenKind === SyntaxKind.QuestionToken) {\n                // (id?\n                // Could be an arrow function, or a parenthesized conditional expression.\n\n                // Check for the things that could only be arrow functions.\n                if (token3.tokenKind === SyntaxKind.ColonToken ||\n                    token3.tokenKind === SyntaxKind.CloseParenToken ||\n                    token3.tokenKind === SyntaxKind.CommaToken) {\n                    // (id?:\n                    // (id?)\n                    // (id?,\n                    // These are the only cases where this could be an arrow function.\n                    // And none of them can be parenthesized expression.\n                    return true;\n                }\n            }\n\n            if (token2.tokenKind === SyntaxKind.CloseParenToken) {\n                // (id)\n                // Could be an arrow function, or a parenthesized conditional expression.\n\n                if (token3.tokenKind === SyntaxKind.EqualsGreaterThanToken) {\n                    // (id) =>\n                    // Definitely an arrow function.  Could not be a parenthesized expression.\n                    return true;\n                }\n\n                // Note: \"(id):\" *looks* like it could be an arrow function.  However, it could\n                // show up in:  \"foo ? (id): \n                // So we can\'t return true here for that case.\n            }\n\n            // TODO: Add more cases if you\'re sure that there is enough information to know to \n            // parse this as an arrow function.  Note: be very careful here.\n\n            // Anything else wasn\'t clear enough.  Try to parse the expression as an arrow function and bail out\n            // if we fail.\n            return false;\n        }\n\n        private isPossiblyArrowFunctionExpression(): boolean {\n            var token0 = this.currentToken();\n            if (token0.tokenKind !== SyntaxKind.OpenParenToken) {\n                // If it didn\'t start with an (, then it could be generic.  That\'s too complicated \n                // and we have to say it\'s possibly an arrow function.\n                return true;\n            }\n\n            var token1 = this.peekToken(1);\n\n            if (!this.isIdentifier(token1)) {\n                // All other arrow functions must start with (id\n                // so this is definitely not an arrow function.\n                return false;\n            }\n\n            var token2 = this.peekToken(2);\n            if (token2.tokenKind === SyntaxKind.EqualsToken) {\n                // (id =\n                //\n                // This *could* be an arrow function.  i.e. (id = 0) => { }\n                // Or it could be a parenthesized expression.  So we\'ll have to actually\n                // try to parse it.\n                return true;\n            }\n\n            if (token2.tokenKind === SyntaxKind.CommaToken) {\n                // (id,\n\n                // This *could* be an arrow function.  i.e. (id, id2) => { }\n                // Or it could be a parenthesized expression (as javascript supports\n                // the comma operator).  So we\'ll have to actually try to parse it.\n                return true;\n            }\n\n            if (token2.tokenKind === SyntaxKind.CloseParenToken) {\n                // (id)\n\n                var token3 = this.peekToken(3);\n                if (token3.tokenKind === SyntaxKind.ColonToken) {\n                    // (id):\n                    //\n                    // This could be an arrow function. i.e. (id): number => { }\n                    // Or it could be parenthesized exprssion: foo ? (id) :\n                    // So we\'ll have to actually try to parse it.\n                    return true;\n                }\n            }\n\n            // Nothing else could be an arrow function.\n            return false;\n        }\n\n        private parseObjectLiteralExpression(): ObjectLiteralExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.OpenBraceToken);\n\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n            // Debug.assert(openBraceToken.fullWidth() > 0);\n\n            var result = this.parseSeparatedSyntaxList(ListParsingState.ObjectLiteralExpression_PropertyAssignments);\n            var propertyAssignments = result.list;\n            openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n\n            return this.factory.objectLiteralExpression(\n                openBraceToken, propertyAssignments, closeBraceToken);\n        }\n\n        private parsePropertyAssignment(): PropertyAssignmentSyntax {\n            // Debug.assert(this.isPropertyAssignment(/*inErrorRecovery:*/ false));\n\n            if (this.isGetAccessorPropertyAssignment(/*inErrorRecovery:*/ false)) {\n                return this.parseGetAccessorPropertyAssignment();\n            }\n            else if (this.isSetAccessorPropertyAssignment(/*inErrorRecovery:*/ false)) {\n                return this.parseSetAccessorPropertyAssignment();\n            }\n            else if (this.isFunctionPropertyAssignment(/*inErrorRecovery:*/ false)) {\n                return this.parseFunctionPropertyAssignment();\n            }\n            else if (this.isSimplePropertyAssignment(/*inErrorRecovery:*/ false)) {\n                return this.parseSimplePropertyAssignment();\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private isPropertyAssignment(inErrorRecovery: boolean): boolean {\n            return this.isGetAccessorPropertyAssignment(inErrorRecovery) ||\n                   this.isSetAccessorPropertyAssignment(inErrorRecovery) ||\n                   this.isFunctionPropertyAssignment(inErrorRecovery) ||\n                   this.isSimplePropertyAssignment(inErrorRecovery);\n        }\n\n        private isGetAccessorPropertyAssignment(inErrorRecovery: boolean): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.GetKeyword &&\n                   this.isPropertyName(this.peekToken(1), inErrorRecovery);\n        }\n\n        private parseGetAccessorPropertyAssignment(): GetAccessorPropertyAssignmentSyntax {\n            // Debug.assert(this.isGetAccessorPropertyAssignment());\n\n            var getKeyword = this.eatKeyword(SyntaxKind.GetKeyword);\n            var propertyName = this.eatPropertyName();\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ true);\n\n            return this.factory.getAccessorPropertyAssignment(getKeyword, propertyName, openParenToken, closeParenToken, typeAnnotation, block);\n        }\n\n        private isSetAccessorPropertyAssignment(inErrorRecovery: boolean): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.SetKeyword &&\n                   this.isPropertyName(this.peekToken(1), inErrorRecovery);\n        }\n\n        private parseSetAccessorPropertyAssignment(): SetAccessorPropertyAssignmentSyntax {\n            // Debug.assert(this.isSetAccessorPropertyAssignment());\n\n            var setKeyword = this.eatKeyword(SyntaxKind.SetKeyword);\n            var propertyName = this.eatPropertyName();\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var parameter = this.parseParameter();\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ true);\n\n            return this.factory.setAccessorPropertyAssignment(setKeyword, propertyName, openParenToken, parameter, closeParenToken, block);\n        }\n\n        private eatPropertyName(): ISyntaxToken {\n            return SyntaxFacts.isIdentifierNameOrAnyKeyword(this.currentToken())\n                ? this.eatIdentifierNameToken()\n                : this.eatAnyToken();\n        }\n\n        private isFunctionPropertyAssignment(inErrorRecovery: boolean): boolean {\n            return this.isPropertyName(this.currentToken(), inErrorRecovery) &&\n                   this.isCallSignature(/*index:*/ 1);\n        }\n\n        private parseFunctionPropertyAssignment(): FunctionPropertyAssignmentSyntax {\n            // Debug.assert(this.isFunctionPropertyAssignment(/*inErrorRecovery:*/ false));\n\n            var propertyName = this.eatPropertyName();\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n            var block = this.parseBlock(/*parseBlockEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ true);\n\n            return this.factory.functionPropertyAssignment(propertyName, callSignature, block);\n        }\n\n        private isSimplePropertyAssignment(inErrorRecovery: boolean): boolean {\n            return this.isPropertyName(this.currentToken(), inErrorRecovery);\n        }\n\n        private parseSimplePropertyAssignment(): SimplePropertyAssignmentSyntax {\n            // Debug.assert(this.isSimplePropertyAssignment(/*inErrorRecovery:*/ false));\n\n            var propertyName = this.eatPropertyName();\n            var colonToken = this.eatToken(SyntaxKind.ColonToken);\n            var expression = this.parseAssignmentExpression(/*allowIn:*/ true);\n\n            return this.factory.simplePropertyAssignment(propertyName, colonToken, expression);\n        }\n\n        private isPropertyName(token: ISyntaxToken, inErrorRecovery: boolean): boolean {\n            // NOTE: we do *not* want to check \"this.isIdentifier\" here.  Any IdentifierName is \n            // allowed here, even reserved words like keywords.\n            if (SyntaxFacts.isIdentifierNameOrAnyKeyword(token)) {\n                // Except: if we\'re in error recovery, then we don\'t want to consider keywords. \n                // After all, if we have:\n                //\n                //      { a: 1\n                //      return\n                //\n                // we don\'t want consider \'return\' to be the next property in the object literal.\n                if (inErrorRecovery) {\n                    return this.isIdentifier(token);\n                }\n                else {\n                    return true;\n                }\n            }\n\n            switch (token.tokenKind) {\n                case SyntaxKind.StringLiteral:\n                case SyntaxKind.NumericLiteral:\n                    return true;\n\n                default:\n                    return false;\n            }\n        }\n\n        private parseArrayLiteralExpression(): ArrayLiteralExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.OpenBracketToken);\n\n            var openBracketToken = this.eatToken(SyntaxKind.OpenBracketToken);\n            // Debug.assert(openBracketToken.fullWidth() > 0);\n\n            var result = this.parseSeparatedSyntaxList(ListParsingState.ArrayLiteralExpression_AssignmentExpressions);\n            var expressions = result.list;\n            openBracketToken = this.addSkippedTokensAfterToken(openBracketToken, result.skippedTokens);\n\n            var closeBracketToken = this.eatToken(SyntaxKind.CloseBracketToken);\n\n            return this.factory.arrayLiteralExpression(openBracketToken, expressions, closeBracketToken);\n        }\n\n        private parseLiteralExpression(): IUnaryExpressionSyntax {\n            // TODO: add appropriate asserts here.\n            return this.eatAnyToken();\n        }\n\n        private parseThisExpression(): IUnaryExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.ThisKeyword);\n            var thisKeyword = this.eatKeyword(SyntaxKind.ThisKeyword);\n            return thisKeyword;\n        }\n\n        private parseBlock(parseBlockEvenWithNoOpenBrace: boolean, checkForStrictMode: boolean): BlockSyntax {\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n\n            var statements: ISyntaxList = Syntax.emptyList;\n\n            if (parseBlockEvenWithNoOpenBrace || openBraceToken.width() > 0) {\n                var savedIsInStrictMode = this.isInStrictMode;\n                \n                var processItems = checkForStrictMode ? ParserImpl.updateStrictModeState : null;\n                var result = this.parseSyntaxList(ListParsingState.Block_Statements, processItems);\n                statements = result.list;\n                openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n\n                this.setStrictMode(savedIsInStrictMode);\n            }\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n\n            return this.factory.block(openBraceToken, statements, closeBraceToken);\n        }\n\n        private parseCallSignature(requireCompleteTypeParameterList: boolean): CallSignatureSyntax {\n            var typeParameterList = this.parseOptionalTypeParameterList(requireCompleteTypeParameterList);\n            var parameterList = this.parseParameterList();\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n\n            return this.factory.callSignature(typeParameterList, parameterList, typeAnnotation);\n        }\n\n        private parseOptionalTypeParameterList(requireCompleteTypeParameterList: boolean): TypeParameterListSyntax {\n            if (this.currentToken().tokenKind !== SyntaxKind.LessThanToken) {\n                return null;\n            }\n\n            var rewindPoint = this.getRewindPoint();\n            try {\n                var lessThanToken = this.eatToken(SyntaxKind.LessThanToken);\n                // Debug.assert(lessThanToken.fullWidth() > 0);\n                \n                var result = this.parseSeparatedSyntaxList(ListParsingState.TypeParameterList_TypeParameters);\n                var typeParameterList = result.list;\n                lessThanToken = this.addSkippedTokensAfterToken(lessThanToken, result.skippedTokens);\n\n                var greaterThanToken = this.eatToken(SyntaxKind.GreaterThanToken);\n\n                // return null if we were required to have a \'>\' token and we did not  have one.\n                if (requireCompleteTypeParameterList && greaterThanToken.fullWidth() === 0) {\n                    this.rewind(rewindPoint);\n                    return null;\n                }\n\n                return this.factory.typeParameterList(lessThanToken, typeParameterList, greaterThanToken);\n            }\n            finally {\n                this.releaseRewindPoint(rewindPoint);\n            }\n        }\n\n        private isTypeParameter(): boolean {\n            return this.isIdentifier(this.currentToken());\n        }\n        \n        private parseTypeParameter(): TypeParameterSyntax {\n            // Debug.assert(this.isTypeParameter());\n            var identifier = this.eatIdentifierToken();\n            var constraint = this.parseOptionalConstraint();\n\n            return this.factory.typeParameter(identifier, constraint);\n        }\n\n        private parseOptionalConstraint(): ConstraintSyntax {\n            if (this.currentToken().kind() !== SyntaxKind.ExtendsKeyword) {\n                return null;\n            }\n\n            var extendsKeyword = this.eatKeyword(SyntaxKind.ExtendsKeyword);\n            var type = this.parseType();\n\n            return this.factory.constraint(extendsKeyword, type);\n        }\n\n        private parseParameterList(): ParameterListSyntax {\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var parameters: ISeparatedSyntaxList = Syntax.emptySeparatedList;\n\n            if (openParenToken.width() > 0) {\n                var result = this.parseSeparatedSyntaxList(ListParsingState.ParameterList_Parameters);\n                parameters = result.list;\n                openParenToken = this.addSkippedTokensAfterToken(openParenToken, result.skippedTokens);\n            }\n\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            return this.factory.parameterList(openParenToken, parameters, closeParenToken);\n        }\n\n        private isTypeAnnotation(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.ColonToken;\n        }\n\n        private parseOptionalTypeAnnotation(allowStringLiteral: boolean): TypeAnnotationSyntax {\n            return this.isTypeAnnotation()\n                ? this.parseTypeAnnotation(allowStringLiteral)\n                : null;\n        }\n\n        private parseTypeAnnotation(allowStringLiteral: boolean): TypeAnnotationSyntax {\n            // Debug.assert(this.isTypeAnnotation());\n\n            var colonToken = this.eatToken(SyntaxKind.ColonToken);\n            var type = allowStringLiteral && this.currentToken().tokenKind === SyntaxKind.StringLiteral\n                ? this.eatToken(SyntaxKind.StringLiteral)\n                : this.parseType();\n\n            return this.factory.typeAnnotation(colonToken, type);\n        }\n\n        private isType(): boolean {\n            return this.isPredefinedType() ||\n                   this.isTypeLiteral() ||\n                   this.isName();\n        }\n\n        private parseType(): ITypeSyntax {\n            var type = this.parseNonArrayType();\n\n            while (this.currentToken().tokenKind === SyntaxKind.OpenBracketToken) {\n                var openBracketToken = this.eatToken(SyntaxKind.OpenBracketToken);\n                var closeBracketToken = this.eatToken(SyntaxKind.CloseBracketToken);\n\n                type = this.factory.arrayType(type, openBracketToken, closeBracketToken);\n            }\n\n            return type;\n        }\n\n        private parseNonArrayType(): ITypeSyntax {\n            if (this.isPredefinedType()) {\n                return this.parsePredefinedType();\n            }\n            else if (this.isTypeLiteral()) {\n                return this.parseTypeLiteral();\n            }\n            else {\n                return this.parseNameOrGenericType();\n            }\n        }\n\n        private parseNameOrGenericType(): ITypeSyntax {\n            var name = this.parseName();\n            var typeArgumentList = this.tryParseTypeArgumentList(/*inExpression:*/ false);\n\n            return typeArgumentList === null\n                ? name\n                : this.factory.genericType(name, typeArgumentList);\n        }\n\n        private parseTypeLiteral(): ITypeSyntax {\n            // Debug.assert(this.isTypeLiteral(/*allowFunctionType:*/ true, /*allowConstructorType:*/ true));\n            if (this.isObjectType()) {\n                return this.parseObjectType();\n            }\n            else if (this.isFunctionType()) {\n                return this.parseFunctionType();\n            }\n            else if (this.isConstructorType()) {\n                return this.parseConstructorType();\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private parseFunctionType(): FunctionTypeSyntax {\n            // Debug.assert(this.isFunctionType());\n\n            var typeParameterList = this.parseOptionalTypeParameterList(/*requireCompleteTypeParameterList:*/ false);\n            var parameterList = this.parseParameterList();\n            var equalsGreaterThanToken = this.eatToken(SyntaxKind.EqualsGreaterThanToken);\n            var returnType = this.parseType();\n\n            return this.factory.functionType(typeParameterList, parameterList, equalsGreaterThanToken, returnType);\n        }\n\n        private parseConstructorType(): ConstructorTypeSyntax {\n            // Debug.assert(this.isConstructorType());\n\n            var newKeyword = this.eatKeyword(SyntaxKind.NewKeyword);\n            var parameterList = this.parseParameterList();\n            var equalsGreaterThanToken = this.eatToken(SyntaxKind.EqualsGreaterThanToken);\n            var type = this.parseType();\n\n            return this.factory.constructorType(newKeyword, null, parameterList, equalsGreaterThanToken, type);\n        }\n\n        private isTypeLiteral(): boolean {\n            return this.isObjectType() ||\n                   this.isFunctionType() ||\n                   this.isConstructorType();\n        }\n\n        private isObjectType(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.OpenBraceToken;\n        }\n\n        private isFunctionType(): boolean {\n            var tokenKind = this.currentToken().tokenKind;\n            return tokenKind === SyntaxKind.OpenParenToken || tokenKind === SyntaxKind.LessThanToken;\n        }\n\n        private isConstructorType(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.NewKeyword;\n        }\n\n        private parsePredefinedType(): ITypeSyntax {\n            // Debug.assert(this.isPredefinedType());\n            return this.eatAnyToken();\n        }\n\n        private isPredefinedType(): boolean {\n            switch (this.currentToken().tokenKind) {\n                case SyntaxKind.AnyKeyword:\n                case SyntaxKind.NumberKeyword:\n                case SyntaxKind.BooleanKeyword:\n                case SyntaxKind.BoolKeyword:\n                case SyntaxKind.StringKeyword:\n                case SyntaxKind.VoidKeyword:\n                    return true;\n            }\n\n            return false;\n        }\n\n        private isParameter(): boolean {\n            if (this.currentNode() !== null && this.currentNode().kind() === SyntaxKind.Parameter) {\n                return true;\n            }\n\n            var token = this.currentToken();\n            if (token.tokenKind === SyntaxKind.DotDotDotToken) {\n                return true;\n            }\n\n            if (ParserImpl.isPublicOrPrivateKeyword(token)) {\n                return true;\n            }\n\n            return this.isIdentifier(token);\n        }\n\n        private parseParameter(): ParameterSyntax {\n            if (this.currentNode() !== null && this.currentNode().kind() === SyntaxKind.Parameter) {\n                return <ParameterSyntax>this.eatNode();\n            }\n\n            var dotDotDotToken = this.tryEatToken(SyntaxKind.DotDotDotToken);\n\n            var publicOrPrivateToken: ISyntaxToken = null;\n            if (ParserImpl.isPublicOrPrivateKeyword(this.currentToken())) {\n                publicOrPrivateToken = this.eatAnyToken();\n            }\n\n            var identifier = this.eatIdentifierToken();\n            var questionToken = this.tryEatToken(SyntaxKind.QuestionToken);\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ true);\n\n            var equalsValueClause: EqualsValueClauseSyntax = null;\n            if (this.isEqualsValueClause(/*inParameter*/ true)) {\n                equalsValueClause = this.parseEqualsValueClause(/*allowIn:*/ true);\n            }\n\n            return this.factory.parameter(\n                dotDotDotToken, publicOrPrivateToken, identifier, questionToken, typeAnnotation, equalsValueClause);\n        }\n\n        private parseSyntaxList(currentListType: ListParsingState,\n                                processItems: (parser: ParserImpl, items: any[]) => void = null): { skippedTokens: ISyntaxToken[]; list: ISyntaxList; } {\n            var savedListParsingState = this.listParsingState;\n            this.listParsingState |= currentListType;\n\n            var result = this.parseSyntaxListWorker(currentListType, processItems);\n\n            this.listParsingState = savedListParsingState;\n\n            return result;\n        }\n\n        private parseSeparatedSyntaxList(currentListType: ListParsingState): { skippedTokens: ISyntaxToken[]; list: ISeparatedSyntaxList; } {\n            var savedListParsingState = this.listParsingState;\n            this.listParsingState |= currentListType;\n\n            var result = this.parseSeparatedSyntaxListWorker(currentListType);\n\n            this.listParsingState = savedListParsingState;\n\n            return result;\n        }\n\n        // Returns true if we should abort parsing.\n        private abortParsingListOrMoveToNextToken(currentListType: ListParsingState,\n                                                  items: ISyntaxNodeOrToken[],\n                                                  skippedTokens: ISyntaxToken[]): boolean {\n            // Ok.  We\'re at a token that is not a terminator for the list and wasn\'t the start of \n            // an item in the list. Definitely report an error for this token.\n            this.reportUnexpectedTokenDiagnostic(currentListType);\n\n            // Now, check if the token is a terminator for one our parent lists, or the start of an\n            // item in one of our parent lists.  If so, we won\'t want to consume the token.  We\'ve \n            // already reported the error, so just return to our caller so that a higher up \n            // production can consume it.\n            for (var state = ListParsingState.LastListParsingState;\n                 state >= ListParsingState.FirstListParsingState;\n                 state >>= 1) {\n\n                if ((this.listParsingState & state) !== 0) {\n                    if (this.isExpectedListTerminator(state) || this.isExpectedListItem(state, /*inErrorRecovery:*/ true)) {\n                        // Abort parsing this list.\n                        return true;\n                    }\n                }\n            }\n\n            // Otherwise, if none of the lists we\'re in can capture this token, then we need to \n            // unilaterally skip it.  Note: we\'ve already reported an error above.\n            var skippedToken = this.currentToken();\n\n            // Consume this token and move onto the next item in the list.\n            this.moveToNextToken();\n\n            this.addSkippedTokenToList(items, skippedTokens, skippedToken);\n\n            // Continue parsing this list.  Attach this token to whatever we\'ve seen already.\n            return false;\n        }\n        \n        private addSkippedTokenToList(items: ISyntaxNodeOrToken[], skippedTokens: ISyntaxToken[], skippedToken: ISyntaxToken): void {\n            // Now, add this skipped token to the last item we successfully parsed in the list.  Or\n            // add it to the list of skipped tokens if we haven\'t parsed anything.  Our caller will\n            // have to deal with them.\n            for (var i = items.length - 1; i >= 0; i--) {\n                var item = items[i];\n                var lastToken = item.lastToken();\n                if (lastToken.fullWidth() > 0) {\n                    items[i] = this.addSkippedTokenAfterNodeOrToken(item, skippedToken);\n                    return;\n                }\n            }\n            \n            // Didn\'t have anything in the list we could add to.  Add to the skipped items array\n            // for our caller to handle.\n            skippedTokens.push(skippedToken);\n        }\n\n        private tryParseExpectedListItem(currentListType: ListParsingState,\n                                         inErrorRecovery: boolean,\n                                         items: ISyntaxElement[],\n                                         processItems: (parser: ParserImpl, items: any[]) => void ): void {\n            if (this.isExpectedListItem(currentListType, inErrorRecovery)) {\n                var item = this.parseExpectedListItem(currentListType);\n                // Debug.assert(item !== null);\n\n                items.push(item);\n\n                if (processItems !== null) {\n                    processItems(this, items);\n                }\n            }\n        }\n\n        private listIsTerminated(currentListType: ListParsingState): boolean {\n            return this.isExpectedListTerminator(currentListType) ||\n                   this.currentToken().tokenKind === SyntaxKind.EndOfFileToken;\n        }\n\n        private arrayPool: any[][] = [];\n        private getArray(): any[] {\n            if (this.arrayPool.length > 0) {\n                return this.arrayPool.pop();\n            }\n\n            return [];\n        }\n\n        private returnZeroOrOneLengthArray(array: any[]) {\n            if (array.length <= 1) {\n                this.returnArray(array);\n            }\n        }\n\n        private returnArray(array: any[]) {\n            array.length = 0;\n            this.arrayPool.push(array);\n        }\n\n        private parseSyntaxListWorker(currentListType: ListParsingState,\n                                      processItems: (parser: ParserImpl, items: any[]) => void ): { skippedTokens: ISyntaxToken[]; list: ISyntaxList; } {\n            var items: SyntaxNode[] = this.getArray();\n            var skippedTokens: ISyntaxToken[] = this.getArray();\n\n            while (true) {\n                // Try to parse an item of the list.  If we fail then decide if we need to abort or \n                // continue parsing.\n                var oldItemsCount = items.length;\n                this.tryParseExpectedListItem(currentListType, /*inErrorRecovery:*/ false, items, processItems);\n\n                var newItemsCount = items.length;\n                if (newItemsCount === oldItemsCount) {\n                    // We weren\'t able to parse out a list element.\n\n                    // That may have been because the list is complete.  In that case, break out \n                    // and return the items we were able parse.\n                    if (this.listIsTerminated(currentListType)) {\n                        break\n                    }\n\n                    // List wasn\'t complete and we didn\'t get an item.  Figure out if we should bail out\n                    // or skip a token and continue.\n                    var abort = this.abortParsingListOrMoveToNextToken(currentListType, items, skippedTokens);\n                    if (abort) {\n                        break;\n                    }\n                }\n\n                // We either parsed an element.  Or we failed to, but weren\'t at the end of the list\n                // and didn\'t want to abort. Continue parsing elements.\n            }\n\n            var result = Syntax.list(items);\n\n            // Can\'t return if it has more then 1 element.  In that case, the list will have been\n            // copied into the SyntaxList.\n            this.returnZeroOrOneLengthArray(items);\n\n            return { skippedTokens: skippedTokens, list: result };\n        }\n\n        private parseSeparatedSyntaxListWorker(currentListType: ListParsingState): { skippedTokens: ISyntaxToken[]; list: ISeparatedSyntaxList; } {\n            var items: ISyntaxNodeOrToken[] = this.getArray();\n            var skippedTokens: ISyntaxToken[] = this.getArray();\n            Debug.assert(items.length === 0);\n            Debug.assert(skippedTokens.length === 0);\n            Debug.assert(skippedTokens !== items);\n\n            var separatorKind = this.separatorKind(currentListType);\n            var allowAutomaticSemicolonInsertion = separatorKind === SyntaxKind.SemicolonToken;\n\n            var inErrorRecovery = false;\n            var listWasTerminated = false;\n            while (true) {\n                // Try to parse an item of the list.  If we fail then decide if we need to abort or \n                // continue parsing.\n                var oldItemsCount = items.length;\n                // Debug.assert(oldItemsCount % 2 === 0);\n                this.tryParseExpectedListItem(currentListType, inErrorRecovery, items, null);\n                \n                var newItemsCount = items.length;\n                if (newItemsCount === oldItemsCount) {\n                    // We weren\'t able to parse out a list element.\n                    // Debug.assert(items === null || items.length % 2 === 0);\n                    \n                    // That may have been because the list is complete.  In that case, break out \n                    // and return the items we were able parse.\n                    if (this.listIsTerminated(currentListType)) {\n                        listWasTerminated = true;\n                        break;\n                    }\n                    \n                    // List wasn\'t complete and we didn\'t get an item.  Figure out if we should bail out\n                    // or skip a token and continue.\n                    var abort = this.abortParsingListOrMoveToNextToken(currentListType, items, skippedTokens);\n                    if (abort) {\n                        break;\n                    }\n                    else {\n                        // We just skipped a token.  We\'re now in error recovery mode.\n                        inErrorRecovery = true;\n                        continue;\n                    }\n                }\n\n                // Debug.assert(newItemsCount % 2 === 1);\n\n                // We were able to successfully parse out a list item.  So we\'re no longer in error\n                // recovery.\n                inErrorRecovery = false;\n\n                // Now, we have to see if we have a separator or not.  If we do have a separator\n                // we\'ve got to consume it and continue trying to parse list items.  Note: we always\n                // allow \'comma\' as a separator (for error tolerance).  We will later do a post pass\n                // to report when a comma was used improperly in a list that needed semicolons.\n                var currentToken = this.currentToken();\n                if (currentToken.tokenKind === separatorKind || currentToken.tokenKind === SyntaxKind.CommaToken) {\n                    // Consume the last separator and continue parsing list elements.\n                    items.push(this.eatAnyToken());\n                    continue;\n                }\n\n                // We didn\'t see the expected separator.  There are two reasons this might happen.\n                // First, we may actually be at the end of the list.  If we are, then we\'re done\n                // parsing list elements.  \n                if (this.listIsTerminated(currentListType)) {\n                    listWasTerminated = true;\n                    break;\n                }\n\n                // Otherwise, it might be a case where we can parse out an implicit semicolon.\n\n                // Note: it\'s important that we check this *after* the check above for\n                // \'listIsTerminated\'.  Consider the following case:\n                //\n                //      {\n                //          a       // <-- just finished parsing \'a\'\n                //      }\n                //\n                // Automatic semicolon insertion rules state: \"When, as the program is parsed from\n                // left to right, a token (called the offending token) is encountered that is not \n                // allowed by any production of the grammar\".  So we should only ever insert a \n                // semicolon if we couldn\'t consume something normally.  in the above case, we can\n                // consume the \'}\' just fine.  So ASI doesn\'t apply.\n\n                if (allowAutomaticSemicolonInsertion && this.canEatAutomaticSemicolon(/*allowWithoutNewline:*/ false)) {\n                    items.push(this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false));\n                    // Debug.assert(items.length % 2 === 0);\n                    continue;\n                }\n\n                // We weren\'t at the end of the list.  And thre was no separator we could parse out.\n                // Try parse the separator we expected, and continue parsing more list elements.\n                // This time mark that we\'re in error recovery mode though.\n                //\n                // Note: trying to eat this token will emit the appropriate diagnostic.\n                items.push(this.eatToken(separatorKind));\n\n                // Now that we\'re in \'error recovery\' mode we cantweak some parsing rules as \n                // appropriate.  For example, if we have:\n                //\n                //      var v = { a\n                //      return\n                //\n                // Then we\'ll be missing the comma.  As such, we want to parse \'return\' in a less\n                // tolerant manner.  Normally \'return\' could be a property in an object literal.\n                // However, in error recovery mode, we do *not* want it to be.\n                //\n                // Continue trying to parse out list elements.\n                inErrorRecovery = true;\n            }\n\n            var result = Syntax.separatedList(items);\n\n            // Can\'t return if it has more then 1 element.  In that case, the list will have been\n            // copied into the SyntaxList.\n            this.returnZeroOrOneLengthArray(items);\n\n            return { skippedTokens: skippedTokens, list: result };\n        }\n\n        private separatorKind(currentListType: ListParsingState): SyntaxKind {\n            switch (currentListType) {\n                case ListParsingState.HeritageClause_TypeNameList:\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                case ListParsingState.EnumDeclaration_EnumElements:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                case ListParsingState.ParameterList_Parameters:\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                case ListParsingState.TypeArgumentList_Types:\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return SyntaxKind.CommaToken;\n\n                case ListParsingState.ObjectType_TypeMembers:\n                    return SyntaxKind.SemicolonToken;\n\n                case ListParsingState.SourceUnit_ModuleElements:\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                case ListParsingState.ClassDeclaration_ClassElements:\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                case ListParsingState.SwitchClause_Statements:\n                case ListParsingState.Block_Statements:\n                default:\n                    throw Errors.notYetImplemented();\n            }\n        }\n\n        private reportUnexpectedTokenDiagnostic(listType: ListParsingState): void {\n            var token = this.currentToken();\n\n            var diagnostic = new SyntaxDiagnostic(this.fileName,\n                this.currentTokenStart(), token.width(), DiagnosticCode.Unexpected_token__0_expected, [this.getExpectedListElementType(listType)]);\n            this.addDiagnostic(diagnostic);\n        }\n\n        private addDiagnostic(diagnostic: SyntaxDiagnostic): void {\n            // Except: if we already have a diagnostic for this position, don\'t report another one.\n            if (this.diagnostics.length > 0 &&\n                this.diagnostics[this.diagnostics.length - 1].start() === diagnostic.start()) {\n                return;\n            }\n\n            this.diagnostics.push(diagnostic);\n        }\n\n        private isExpectedListTerminator(currentListType: ListParsingState): boolean {\n            switch (currentListType) {\n                case ListParsingState.SourceUnit_ModuleElements:\n                    return this.isExpectedSourceUnit_ModuleElementsTerminator();\n\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                    return this.isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator();\n\n                case ListParsingState.ClassDeclaration_ClassElements:\n                    return this.isExpectedClassDeclaration_ClassElementsTerminator();\n\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                    return this.isExpectedModuleDeclaration_ModuleElementsTerminator();\n\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                    return this.isExpectedSwitchStatement_SwitchClausesTerminator();\n\n                case ListParsingState.SwitchClause_Statements:\n                    return this.isExpectedSwitchClause_StatementsTerminator();\n\n                case ListParsingState.Block_Statements:\n                    return this.isExpectedBlock_StatementsTerminator();\n\n                case ListParsingState.TryBlock_Statements:\n                    return this.isExpectedTryBlock_StatementsTerminator();\n\n                case ListParsingState.CatchBlock_Statements:\n                    return this.isExpectedCatchBlock_StatementsTerminator();\n\n                case ListParsingState.EnumDeclaration_EnumElements:\n                    return this.isExpectedEnumDeclaration_EnumElementsTerminator();\n\n                case ListParsingState.ObjectType_TypeMembers:\n                    return this.isExpectedObjectType_TypeMembersTerminator();\n\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                    return this.isExpectedArgumentList_AssignmentExpressionsTerminator();\n\n                case ListParsingState.HeritageClause_TypeNameList:\n                    return this.isExpectedHeritageClause_TypeNameListTerminator();\n\n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                    return this.isExpectedVariableDeclaration_VariableDeclarators_AllowInTerminator();\n\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                    return this.isExpectedVariableDeclaration_VariableDeclarators_DisallowInTerminator();\n\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                    return this.isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator();\n\n                case ListParsingState.ParameterList_Parameters:\n                    return this.isExpectedParameterList_ParametersTerminator();\n\n                case ListParsingState.TypeArgumentList_Types:\n                    return this.isExpectedTypeArgumentList_TypesTerminator();\n\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return this.isExpectedTypeParameterList_TypeParametersTerminator();\n\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                    return this.isExpectedLiteralExpression_AssignmentExpressionsTerminator();\n\n                default:\n                    throw Errors.invalidOperation();\n            }\n        }\n\n        private isExpectedSourceUnit_ModuleElementsTerminator(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.EndOfFileToken;\n        }\n\n        private isExpectedEnumDeclaration_EnumElementsTerminator(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedModuleDeclaration_ModuleElementsTerminator(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedObjectType_TypeMembersTerminator(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedLiteralExpression_AssignmentExpressionsTerminator(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBracketToken;\n        }\n\n        private isExpectedTypeArgumentList_TypesTerminator(): boolean {\n            var token = this.currentToken();\n            if (token.tokenKind === SyntaxKind.GreaterThanToken) {\n                return true;\n            }\n\n            // If we\'re at a token that can follow the type argument list, then we\'ll also consider\n            // the list terminated.\n            if (this.canFollowTypeArgumentListInExpression(token.tokenKind)) {\n                return true;\n            }\n\n            // TODO: add more cases as necessary for error tolerance.\n            return false;\n        }\n\n        private isExpectedTypeParameterList_TypeParametersTerminator(): boolean {\n            var token = this.currentToken();\n            if (token.tokenKind === SyntaxKind.GreaterThanToken) {\n                return true;\n            }\n\n            // These commonly follow type parameter lists.\n            if (token.tokenKind === SyntaxKind.OpenParenToken ||\n                token.tokenKind === SyntaxKind.OpenBraceToken ||\n                token.tokenKind === SyntaxKind.ExtendsKeyword ||\n                token.tokenKind === SyntaxKind.ImplementsKeyword) {\n                return true;\n            }\n\n            // TODO: add more cases as necessary for error tolerance.\n            return false;\n        }\n\n        private isExpectedParameterList_ParametersTerminator(): boolean {\n            var token = this.currentToken();\n            if (token.tokenKind === SyntaxKind.CloseParenToken) {\n                return true;\n            }\n\n            // We may also see a { in an error case.  i.e.:\n            // function (a, b, c  {\n            if (token.tokenKind === SyntaxKind.OpenBraceToken) {\n                return true;\n            }\n\n            // We may also see a => in an error case.  i.e.:\n            // (f: number => { ... }\n            if (token.tokenKind === SyntaxKind.EqualsGreaterThanToken) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private isExpectedVariableDeclaration_VariableDeclarators_DisallowInTerminator(): boolean {\n            // This is the case when we\'re parsing variable declarations in a for/for-in statement.\n            if (this.currentToken().tokenKind === SyntaxKind.SemicolonToken ||\n                this.currentToken().tokenKind === SyntaxKind.CloseParenToken) {\n                return true;\n            }\n\n            if (this.currentToken().tokenKind === SyntaxKind.InKeyword) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private isExpectedVariableDeclaration_VariableDeclarators_AllowInTerminator(): boolean {\n            //// This is the case when we\'re parsing variable declarations in a variable statement.\n\n            // If we just parsed a comma, then we can\'t terminate this list.  i.e.:\n            //      var a = bar, // <-- just consumed the comma\n            //          b = baz;\n            if (this.previousToken().tokenKind === SyntaxKind.CommaToken) {\n                return false;\n            }\n\n            // ERROR RECOVERY TWEAK:\n            // For better error recovery, if we see a => then we just stop immediately.  We\'ve got an\n            // arrow function here and it\'s going to be veyr unlikely that we\'ll resynchronize and get\n            // another variable declaration.\n            if (this.currentToken().tokenKind === SyntaxKind.EqualsGreaterThanToken) {\n                return true;\n            }\n\n            // We\'re done when we can eat a semicolon and we\'ve parsed at least one item.\n            return this.canEatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n        }\n\n        private isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator(): boolean {\n            var token0 = this.currentToken();\n            if (token0.tokenKind === SyntaxKind.OpenBraceToken ||\n                token0.tokenKind === SyntaxKind.CloseBraceToken) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private isExpectedHeritageClause_TypeNameListTerminator(): boolean {\n            var token0 = this.currentToken();\n            if (token0.tokenKind === SyntaxKind.ExtendsKeyword ||\n                token0.tokenKind === SyntaxKind.ImplementsKeyword) {\n                return true;\n            }\n\n            if (this.isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator()) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private isExpectedArgumentList_AssignmentExpressionsTerminator(): boolean {\n            var token0 = this.currentToken();\n            return token0.tokenKind === SyntaxKind.CloseParenToken ||\n                   token0.tokenKind === SyntaxKind.SemicolonToken;\n        }\n\n        private isExpectedClassDeclaration_ClassElementsTerminator(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedSwitchStatement_SwitchClausesTerminator(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedSwitchClause_StatementsTerminator(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken ||\n                   this.isSwitchClause();\n        }\n\n        private isExpectedBlock_StatementsTerminator(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedTryBlock_StatementsTerminator(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.CatchKeyword ||\n                   this.currentToken().tokenKind === SyntaxKind.FinallyKeyword;\n        }\n\n        private isExpectedCatchBlock_StatementsTerminator(): boolean {\n            return this.currentToken().tokenKind === SyntaxKind.FinallyKeyword;\n        }\n\n        private isExpectedListItem(currentListType: ListParsingState, inErrorRecovery: boolean): any {\n            switch (currentListType) {\n                case ListParsingState.SourceUnit_ModuleElements:\n                    return this.isModuleElement(inErrorRecovery);\n\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                    return this.isHeritageClause();\n\n                case ListParsingState.ClassDeclaration_ClassElements:\n                    return this.isClassElement(inErrorRecovery);\n\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                    return this.isModuleElement(inErrorRecovery);\n\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                    return this.isSwitchClause();\n\n                case ListParsingState.SwitchClause_Statements:\n                    return this.isStatement(inErrorRecovery);\n\n                case ListParsingState.Block_Statements:\n                    return this.isStatement(inErrorRecovery);\n\n                case ListParsingState.TryBlock_Statements:\n                case ListParsingState.CatchBlock_Statements:\n                    // These two are special.  They\'re just augmentations of \"Block_Statements\" \n                    // used so we can abort out of the try block if we see a \'catch\' or \'finally\'\n                    // keyword.  There are no additional list items that they add, so we just\n                    // return \'false\' here.\n                    return false;\n\n                case ListParsingState.EnumDeclaration_EnumElements:\n                    return this.isEnumElement(inErrorRecovery);\n                \n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                    return this.isVariableDeclarator();\n\n                case ListParsingState.ObjectType_TypeMembers:\n                    return this.isTypeMember(inErrorRecovery);\n\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                    return this.isExpectedArgumentList_AssignmentExpression();\n\n                case ListParsingState.HeritageClause_TypeNameList:\n                    return this.isHeritageClauseTypeName();\n\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                    return this.isPropertyAssignment(inErrorRecovery);\n\n                case ListParsingState.ParameterList_Parameters:\n                    return this.isParameter();\n\n                case ListParsingState.TypeArgumentList_Types:\n                    return this.isType();\n\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return this.isTypeParameter();\n\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                    return this.isAssignmentOrOmittedExpression();\n\n                default:\n                    throw Errors.invalidOperation();\n            }\n        }\n\n        private isExpectedArgumentList_AssignmentExpression(): boolean {\n            if (this.isExpression()) {\n                return true;\n            }\n\n            // If we\'re on a comma then the user has written something like \"Foo(a,,\" or \"Foo(,\".\n            // Instead of skipping the comma, create an empty expression to go before the comma \n            // so that the tree is more well formed and doesn\'t have skipped tokens.\n            if (this.currentToken().tokenKind === SyntaxKind.CommaToken) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private parseExpectedListItem(currentListType: ListParsingState): ISyntaxNodeOrToken {\n            switch (currentListType) {\n                case ListParsingState.SourceUnit_ModuleElements:\n                    return this.parseModuleElement();\n\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                    return this.parseHeritageClause();\n\n                case ListParsingState.ClassDeclaration_ClassElements:\n                    return this.parseClassElement(/*inErrorRecovery:*/ false);\n\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                    return this.parseModuleElement();\n\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                    return this.parseSwitchClause();\n\n                case ListParsingState.SwitchClause_Statements:\n                    return this.parseStatement();\n\n                case ListParsingState.Block_Statements:\n                    return this.parseStatement();\n\n                case ListParsingState.EnumDeclaration_EnumElements:\n                    return this.parseEnumElement();\n\n                case ListParsingState.ObjectType_TypeMembers:\n                    return this.parseTypeMember();\n\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                    return this.parseAssignmentExpression(/*allowIn:*/ true);\n\n                case ListParsingState.HeritageClause_TypeNameList:\n                    return this.parseNameOrGenericType();\n\n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                    return this.parseVariableDeclarator(/*allowIn:*/ true, /*allowIdentifierName:*/ false);\n\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                    return this.parseVariableDeclarator(/*allowIn:*/ false, /*allowIdentifierName:*/ false);\n\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                    return this.parsePropertyAssignment();\n\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                    return this.parseAssignmentOrOmittedExpression();\n\n                case ListParsingState.ParameterList_Parameters:\n                    return this.parseParameter();\n\n                case ListParsingState.TypeArgumentList_Types:\n                    return this.parseType();\n\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return this.parseTypeParameter();\n\n                default:\n                    throw Errors.invalidOperation();\n            }\n        }\n\n        private getExpectedListElementType(currentListType: ListParsingState): string {\n            switch (currentListType) {\n                case ListParsingState.SourceUnit_ModuleElements:\n                    return Strings.module__class__interface__enum__import_or_statement;\n\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                    return \'{\';\n\n                case ListParsingState.ClassDeclaration_ClassElements:\n                    return Strings.constructor__function__accessor_or_variable;\n\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                    return Strings.module__class__interface__enum__import_or_statement;\n\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                    return Strings.case_or_default_clause;\n\n                case ListParsingState.SwitchClause_Statements:\n                    return Strings.statement;\n\n                case ListParsingState.Block_Statements:\n                    return Strings.statement;\n\n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                    return Strings.identifier;\n\n                case ListParsingState.EnumDeclaration_EnumElements:\n                    return Strings.identifier;\n\n                case ListParsingState.ObjectType_TypeMembers:\n                    return Strings.call__construct__index__property_or_function_signature;\n\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                    return Strings.expression;\n\n                case ListParsingState.HeritageClause_TypeNameList:\n                    return Strings.type_name;\n\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                    return Strings.property_or_accessor;\n\n                case ListParsingState.ParameterList_Parameters:\n                    return Strings.parameter;\n\n                case ListParsingState.TypeArgumentList_Types:\n                    return Strings.type;\n\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return Strings.type_parameter;\n\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                    return Strings.expression;\n\n                default:\n                    throw Errors.invalidOperation();\n            }\n        }\n    }\n\n    export function parse(fileName: string,\n                          text: ISimpleText,\n                          isDeclaration: boolean,\n                          languageVersion: LanguageVersion,\n                          options: ParseOptions): SyntaxTree {\n        var source = new NormalParserSource(fileName, text, languageVersion);\n\n        return new ParserImpl(fileName, text.lineMap(), source, options).parseSyntaxTree(isDeclaration);\n    }\n\n    export function incrementalParse(oldSyntaxTree: SyntaxTree,\n                                     textChangeRange: TextChangeRange,\n                                     newText: ISimpleText): SyntaxTree {\n        if (textChangeRange.isUnchanged()) {\n            return oldSyntaxTree;\n        }\n        \n        var source = new IncrementalParserSource(oldSyntaxTree, textChangeRange, newText);\n\n        return new ParserImpl(oldSyntaxTree.fileName(), newText.lineMap(), source, oldSyntaxTree.parseOptions()).parseSyntaxTree(oldSyntaxTree.isDeclaration());\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class SyntaxTree {\n        private _sourceUnit: SourceUnitSyntax;\n        private _isDeclaration: boolean;\n        private _parserDiagnostics: SyntaxDiagnostic[];\n        private _allDiagnostics: SyntaxDiagnostic[] = null;\n        private _fileName: string;\n        private _lineMap: LineMap;\n        private _languageVersion: LanguageVersion;\n        private _parseOptions: ParseOptions;\n\n        constructor(sourceUnit: SourceUnitSyntax,\n                    isDeclaration: boolean,\n                    diagnostics: SyntaxDiagnostic[],\n                    fileName: string,\n                    lineMap: LineMap,\n                    languageVersion: LanguageVersion,\n                    parseOtions: ParseOptions) {\n            this._sourceUnit = sourceUnit;\n            this._isDeclaration = isDeclaration;\n            this._parserDiagnostics = diagnostics;\n            this._fileName = fileName;\n            this._lineMap = lineMap;\n            this._languageVersion = languageVersion;\n            this._parseOptions = parseOtions;\n        }\n\n        public toJSON(key) {\n            var result: any = {};\n\n            result.isDeclaration = this._isDeclaration;\n            result.languageVersion = LanguageVersion[this._languageVersion];\n            result.parseOptions = this._parseOptions;\n\n            if (this.diagnostics().length > 0) {\n                result.diagnostics = this.diagnostics();\n            }\n\n            result.sourceUnit = this._sourceUnit;\n            result.lineMap = this._lineMap;\n\n            return result;\n        }\n\n        public sourceUnit(): SourceUnitSyntax {\n            return this._sourceUnit;\n        }\n\n        public isDeclaration(): boolean {\n            return this._isDeclaration;\n        }\n\n        private computeDiagnostics(): SyntaxDiagnostic[]{\n            if (this._parserDiagnostics.length > 0) {\n                return this._parserDiagnostics;\n            }\n\n            // No parser reported diagnostics.  Check for any additional grammar diagnostics.\n            var diagnostics: SyntaxDiagnostic[] = [];\n            this.sourceUnit().accept(new GrammarCheckerWalker(this, diagnostics));\n\n            return diagnostics;\n        }\n\n        public diagnostics(): SyntaxDiagnostic[] {\n            if (this._allDiagnostics === null) {\n                this._allDiagnostics = this.computeDiagnostics();\n            }\n\n            return this._allDiagnostics;\n        }\n\n        public fileName(): string {\n            return this._fileName;\n        }\n\n        public lineMap(): LineMap {\n            return this._lineMap;\n        }\n\n        public languageVersion(): LanguageVersion {\n            return this._languageVersion;\n        }\n\n        public parseOptions(): ParseOptions {\n            return this._parseOptions;\n        }\n\n        public structuralEquals(tree: SyntaxTree): boolean {\n            return ArrayUtilities.sequenceEquals(this.diagnostics(), tree.diagnostics(), SyntaxDiagnostic.equals) &&\n                this.sourceUnit().structuralEquals(tree.sourceUnit());\n        }\n    }\n\n    class GrammarCheckerWalker extends PositionTrackingWalker {\n        private inAmbientDeclaration: boolean = false;\n        private inBlock: boolean = false;\n        private currentConstructor: ConstructorDeclarationSyntax = null;\n\n        constructor(private syntaxTree: SyntaxTree,\n                    private diagnostics: IDiagnostic[]) {\n            super();\n        }\n\n        private childFullStart(parent: ISyntaxElement, child: ISyntaxElement): number {\n            return this.position() + Syntax.childOffset(parent, child);\n        }\n\n        private childStart(parent: ISyntaxNode, child: ISyntaxElement): number {\n            return this.childFullStart(parent, child) + child.leadingTriviaWidth();\n        }\n\n        private getToken(list: ISyntaxList, kind: SyntaxKind): ISyntaxToken {\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                var token = <ISyntaxToken>list.childAt(i);\n                if (token.tokenKind === kind) {\n                    return token;\n                }\n            }\n\n            return null;\n        }\n\n        private containsToken(list: ISyntaxList, kind: SyntaxKind): boolean {\n            return this.getToken(list, kind) !== null;\n        }\n\n        private pushDiagnostic(start: number, length: number, diagnosticCode: DiagnosticCode, args: any[] = null): void {\n            this.diagnostics.push(new SyntaxDiagnostic(\n                this.syntaxTree.fileName(), start, length, diagnosticCode, args));\n        }\n\n        private pushDiagnostic1(elementFullStart: number, element: ISyntaxElement, diagnosticCode: DiagnosticCode, args: any[] = null): void {\n            this.diagnostics.push(new SyntaxDiagnostic(\n                this.syntaxTree.fileName(), elementFullStart + element.leadingTriviaWidth(), element.width(), diagnosticCode, args));\n        }\n\n        public visitCatchClause(node: CatchClauseSyntax): void {\n            if (node.typeAnnotation) {\n                this.pushDiagnostic(\n                    this.childStart(node, node.typeAnnotation),\n                    node.typeAnnotation.width(),\n                    DiagnosticCode.A_catch_clause_variable_cannot_have_a_type_annotation);\n            }\n\n            super.visitCatchClause(node);\n        }\n\n        private checkParameterListOrder(node: ParameterListSyntax): boolean {\n            var parameterFullStart = this.childFullStart(node, node.parameters);\n\n            var seenOptionalParameter = false;\n            var parameterCount = node.parameters.nonSeparatorCount();\n\n            for (var i = 0, n = node.parameters.childCount(); i < n; i++) {\n                var nodeOrToken = node.parameters.childAt(i);\n                if (i % 2 === 0) {\n                    var parameterIndex = i / 2;\n                    var parameter = <ParameterSyntax>node.parameters.childAt(i);\n\n                    if (parameter.dotDotDotToken) {\n                        if (parameterIndex !== (parameterCount - 1)) {\n                            this.pushDiagnostic1(\n                                parameterFullStart, parameter,\n                                DiagnosticCode.Rest_parameter_must_be_last_in_list);\n                            return true;\n                        }\n\n                        if (parameter.questionToken) {\n                            this.pushDiagnostic1(\n                                parameterFullStart, parameter,\n                                DiagnosticCode.Rest_parameter_cannot_be_optional);\n                            return true;\n                        }\n\n                        if (parameter.equalsValueClause) {\n                            this.pushDiagnostic1(\n                                parameterFullStart, parameter,\n                                DiagnosticCode.Rest_parameter_cannot_have_initializer);\n                            return true;\n                        }\n                    }\n                    else if (parameter.questionToken || parameter.equalsValueClause) {\n                        seenOptionalParameter = true;\n\n                        if (parameter.questionToken && parameter.equalsValueClause) {\n                            this.pushDiagnostic1(\n                                parameterFullStart, parameter,\n                                DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer);\n                            return true;\n                        }\n                    }\n                    else {\n                        if (seenOptionalParameter) {\n                            this.pushDiagnostic1(\n                                parameterFullStart, parameter,\n                                DiagnosticCode.Required_parameter_cannot_follow_optional_parameter);\n                            return true;\n                        }\n                    }\n                }\n\n                parameterFullStart += nodeOrToken.fullWidth();\n            }\n\n            return false;\n        }\n\n        private checkParameterListAcessibilityModifiers(node: ParameterListSyntax): boolean {\n            // Only constructor parameters can have public/private modifiers.  Also, the constructor\n            // needs to have a body, and it can\'t be in an ambient context.\n            if (this.currentConstructor !== null &&\n                this.currentConstructor.parameterList === node &&\n                this.currentConstructor.block &&\n                !this.inAmbientDeclaration) {\n\n                return false;\n            }\n\n            var parameterFullStart = this.childFullStart(node, node.parameters);\n\n            for (var i = 0, n = node.parameters.childCount(); i < n; i++) {\n                var nodeOrToken = node.parameters.childAt(i);\n                if (i % 2 === 0) {\n                    var parameter = <ParameterSyntax>node.parameters.childAt(i);\n\n                    if (parameter.publicOrPrivateKeyword) {\n                        var keywordFullStart = parameterFullStart + Syntax.childOffset(parameter, parameter.publicOrPrivateKeyword);\n                        this.pushDiagnostic1(keywordFullStart, parameter.publicOrPrivateKeyword,\n                            DiagnosticCode.Overload_and_ambient_signatures_cannot_specify_parameter_properties);\n                    }\n                }\n\n                parameterFullStart += nodeOrToken.fullWidth();\n            }\n\n            return false;\n        }\n\n        private checkForTrailingSeparator(parent: ISyntaxElement, list: ISeparatedSyntaxList): boolean {\n            // If we have at least one child, and we have an even number of children, then that \n            // means we have an illegal trailing separator.\n            if (list.childCount() === 0 || list.childCount() % 2 === 1) {\n                return false;\n            }\n\n            var currentElementFullStart = this.childFullStart(parent, list);\n\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                var child = list.childAt(i);\n                if (i === n - 1) {\n                    this.pushDiagnostic1(currentElementFullStart, child, DiagnosticCode.Trailing_separator_not_allowed);\n                }\n\n                currentElementFullStart += child.fullWidth();\n            }\n\n            return true;\n        }\n\n        private checkForAtLeastOneElement(parent: ISyntaxElement, list: ISeparatedSyntaxList, expected: string): boolean {\n            if (list.childCount() > 0) {\n                return false;\n            }\n\n            var listFullStart = this.childFullStart(parent, list);\n            var tokenAtStart = this.syntaxTree.sourceUnit().findToken(listFullStart);\n\n            this.pushDiagnostic1(listFullStart, tokenAtStart.token(), DiagnosticCode.Unexpected_token__0_expected, [expected]);\n\n            return true;\n        }\n\n        public visitParameterList(node: ParameterListSyntax): void {\n            if (this.checkParameterListAcessibilityModifiers(node) ||\n                this.checkParameterListOrder(node) ||\n                this.checkForTrailingSeparator(node, node.parameters)) {\n\n                this.skip(node);\n                return;\n            }\n\n            super.visitParameterList(node);\n        }\n\n        public visitHeritageClause(node: HeritageClauseSyntax): void {\n            if (this.checkForTrailingSeparator(node, node.typeNames) ||\n                this.checkForAtLeastOneElement(node, node.typeNames, Strings.type_name)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitHeritageClause(node);\n        }\n\n        public visitArgumentList(node: ArgumentListSyntax): void {\n            if (this.checkForTrailingSeparator(node, node.arguments)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitArgumentList(node);\n        }\n\n        public visitVariableDeclaration(node: VariableDeclarationSyntax): void {\n            if (this.checkForTrailingSeparator(node, node.variableDeclarators) ||\n                this.checkForAtLeastOneElement(node, node.variableDeclarators, Strings.identifier)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitVariableDeclaration(node);\n        }\n\n        public visitTypeArgumentList(node: TypeArgumentListSyntax): void {\n            if (this.checkForTrailingSeparator(node, node.typeArguments) ||\n                this.checkForAtLeastOneElement(node, node.typeArguments, Strings.identifier)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitTypeArgumentList(node);\n        }\n\n        public visitTypeParameterList(node: TypeParameterListSyntax): void {\n            if (this.checkForTrailingSeparator(node, node.typeParameters) ||\n                this.checkForAtLeastOneElement(node, node.typeParameters, Strings.identifier)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitTypeParameterList(node);\n        }\n\n        private checkIndexSignatureParameter(node: IndexSignatureSyntax): boolean {\n            var parameterFullStart = this.childFullStart(node, node.parameter);\n            var parameter = node.parameter;\n\n            if (parameter.dotDotDotToken) {\n                this.pushDiagnostic1(\n                    parameterFullStart, parameter,\n                    DiagnosticCode.Index_signatures_cannot_have_rest_parameters);\n                return true;\n            }\n            else if (parameter.publicOrPrivateKeyword) {\n                this.pushDiagnostic1(\n                    parameterFullStart, parameter,\n                    DiagnosticCode.Index_signature_parameter_cannot_have_accessibility_modifiers);\n                return true;\n            }\n            else if (parameter.questionToken) {\n                this.pushDiagnostic1(\n                    parameterFullStart, parameter,\n                    DiagnosticCode.Index_signature_parameter_cannot_have_a_question_mark);\n                return true;\n            }\n            else if (parameter.equalsValueClause) {\n                this.pushDiagnostic1(\n                    parameterFullStart, parameter,\n                    DiagnosticCode.Index_signature_parameter_cannot_have_an_initializer);\n                return true;\n            }\n            else if (!parameter.typeAnnotation) {\n                this.pushDiagnostic1(\n                    parameterFullStart, parameter,\n                    DiagnosticCode.Index_signature_parameter_must_have_a_type_annotation);\n                return true;\n            }\n            else if (parameter.typeAnnotation.type.kind() !== SyntaxKind.StringKeyword &&\n                     parameter.typeAnnotation.type.kind() !== SyntaxKind.NumberKeyword) {\n                this.pushDiagnostic1(\n                    parameterFullStart, parameter,\n                    DiagnosticCode.Index_signature_parameter_type_must_be__string__or__number_);\n                return true;\n            }\n\n            return false;\n        }\n\n        public visitIndexSignature(node: IndexSignatureSyntax): void {\n            if (this.checkIndexSignatureParameter(node)) {\n                this.skip(node);\n                return;\n            }\n\n            if (!node.typeAnnotation) {\n                this.pushDiagnostic1(this.position(), node,\n                    DiagnosticCode.Index_signature_must_have_a_type_annotation);\n                this.skip(node);\n                return;\n            }\n\n            super.visitIndexSignature(node);\n        }\n\n        private checkClassDeclarationHeritageClauses(node: ClassDeclarationSyntax): boolean {\n            var heritageClauseFullStart = this.childFullStart(node, node.heritageClauses);\n\n            var seenExtendsClause = false;\n            var seenImplementsClause = false;\n\n            for (var i = 0, n = node.heritageClauses.childCount(); i < n; i++) {\n                Debug.assert(i <= 2);\n                var heritageClause = <HeritageClauseSyntax>node.heritageClauses.childAt(i);\n\n                if (heritageClause.extendsOrImplementsKeyword.tokenKind === SyntaxKind.ExtendsKeyword) {\n                    if (seenExtendsClause) {\n                        this.pushDiagnostic1(heritageClauseFullStart, heritageClause,\n                            DiagnosticCode._extends__clause_already_seen);\n                        return true;\n                    }\n\n                    if (seenImplementsClause) {\n                        this.pushDiagnostic1(heritageClauseFullStart, heritageClause,\n                            DiagnosticCode._extends__clause_must_precede__implements__clause);\n                        return true;\n                    }\n\n                    if (heritageClause.typeNames.nonSeparatorCount() > 1) {\n                        this.pushDiagnostic1(heritageClauseFullStart, heritageClause,\n                            DiagnosticCode.Class_can_only_extend_single_type);\n                        return true;\n                    }\n\n                    seenExtendsClause = true;\n                }\n                else {\n                    Debug.assert(heritageClause.extendsOrImplementsKeyword.tokenKind === SyntaxKind.ImplementsKeyword);\n                    if (seenImplementsClause) {\n                        this.pushDiagnostic1(heritageClauseFullStart, heritageClause,\n                            DiagnosticCode._implements__clause_already_seen);\n                        return true;\n                    }\n\n                    seenImplementsClause = true;\n                }\n\n                heritageClauseFullStart += heritageClause.fullWidth();\n            }\n\n            return false;\n        }\n\n        private checkForDisallowedDeclareModifier(modifiers: ISyntaxList): boolean {\n            if (this.inAmbientDeclaration) {\n                // If we\'re already in an ambient declaration, then \'declare\' is not allowed.\n                var declareToken = this.getToken(modifiers, SyntaxKind.DeclareKeyword);\n\n                if (declareToken) {\n                    this.pushDiagnostic1(this.childFullStart(modifiers, declareToken), declareToken,\n                        DiagnosticCode._declare__modifier_not_allowed_for_code_already_in_an_ambient_context);\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private checkForRequiredDeclareModifier(moduleElement: IModuleElementSyntax,\n                                                typeKeyword: ISyntaxElement,\n                                                modifiers: ISyntaxList): boolean {\n            if (!this.inAmbientDeclaration && this.syntaxTree.isDeclaration()) {\n                // We\'re at the top level in a declaration file, a \'declare\' modifiers is required\n                // on most module elements.\n                if (!this.containsToken(modifiers, SyntaxKind.DeclareKeyword)) {\n                    this.pushDiagnostic1(this.childFullStart(moduleElement, typeKeyword), typeKeyword.firstToken(),\n                        DiagnosticCode._declare__modifier_required_for_top_level_element);\n                    return true;\n                }\n            }\n        }\n\n        private checkFunctionOverloads(node: ISyntaxElement, moduleElements: ISyntaxList): boolean {\n            if (!this.inAmbientDeclaration && !this.syntaxTree.isDeclaration()) {\n                var moduleElementFullStart = this.childFullStart(node, moduleElements);\n\n                var inFunctionOverloadChain = false;\n                var functionOverloadChainName: string = null;\n\n                for (var i = 0, n = moduleElements.childCount(); i < n; i++) {\n                    var moduleElement = <IModuleElementSyntax>moduleElements.childAt(i);\n                    var lastElement = i === (n - 1);\n\n                    if (inFunctionOverloadChain) {\n                        if (moduleElement.kind() !== SyntaxKind.FunctionDeclaration) {\n                            this.pushDiagnostic1(moduleElementFullStart, moduleElement.firstToken(),\n                                DiagnosticCode.Function_implementation_expected);\n                            return true;\n                        }\n\n                        var functionDeclaration = <FunctionDeclarationSyntax>moduleElement;\n                        if (functionDeclaration.identifier.valueText() !== functionOverloadChainName) {\n                            var identifierFullStart = moduleElementFullStart + Syntax.childOffset(moduleElement, functionDeclaration.identifier);\n                            this.pushDiagnostic1(identifierFullStart, functionDeclaration.identifier,\n                                DiagnosticCode.Function_overload_name_must_be__0_, [functionOverloadChainName]);\n                            return true;\n                        }\n                    }\n\n                    if (moduleElement.kind() === SyntaxKind.FunctionDeclaration) {\n                        functionDeclaration = <FunctionDeclarationSyntax>moduleElement;\n                        if (!this.containsToken(functionDeclaration.modifiers, SyntaxKind.DeclareKeyword)) {\n                            inFunctionOverloadChain = functionDeclaration.block === null;\n                            functionOverloadChainName = functionDeclaration.identifier.valueText();\n\n                            if (lastElement && inFunctionOverloadChain) {\n                                this.pushDiagnostic1(moduleElementFullStart, moduleElement.firstToken(),\n                                    DiagnosticCode.Function_implementation_expected);\n                                return true;\n                            }\n                        }\n                        else {\n                            inFunctionOverloadChain = false;\n                            functionOverloadChainName = \"\";\n                        }\n                    }\n\n                    moduleElementFullStart += moduleElement.fullWidth();\n                }\n            }\n\n            return false;\n        }\n\n        private checkClassOverloads(node: ClassDeclarationSyntax): boolean {\n            if (!this.inAmbientDeclaration && !this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword)) {\n                var classElementFullStart = this.childFullStart(node, node.classElements);\n\n                var inFunctionOverloadChain = false;\n                var inConstructorOverloadChain = false;\n\n                var functionOverloadChainName: string = null;\n                var memberFunctionDeclaration: MemberFunctionDeclarationSyntax = null;\n\n                for (var i = 0, n = node.classElements.childCount(); i < n; i++) {\n                    var classElement = <IClassElementSyntax>node.classElements.childAt(i);\n                    var lastElement = i === (n - 1);\n\n                    if (inFunctionOverloadChain) {\n                        if (classElement.kind() !== SyntaxKind.MemberFunctionDeclaration) {\n                            this.pushDiagnostic1(classElementFullStart, classElement.firstToken(),\n                                DiagnosticCode.Function_implementation_expected);\n                            return true;\n                        }\n\n                        memberFunctionDeclaration = <MemberFunctionDeclarationSyntax>classElement;\n                        if (memberFunctionDeclaration.propertyName.valueText() !== functionOverloadChainName) {\n                            var propertyNameFullStart = classElementFullStart + Syntax.childOffset(classElement, memberFunctionDeclaration.propertyName);\n                            this.pushDiagnostic1(propertyNameFullStart, memberFunctionDeclaration.propertyName,\n                                DiagnosticCode.Function_overload_name_must_be__0_, [functionOverloadChainName]);\n                            return true;\n                        }\n                    }\n                    else if (inConstructorOverloadChain) {\n                        if (classElement.kind() !== SyntaxKind.ConstructorDeclaration) {\n                            this.pushDiagnostic1(classElementFullStart, classElement.firstToken(),\n                                DiagnosticCode.Constructor_implementation_expected);\n                            return true;\n                        }\n                    }\n\n                    if (classElement.kind() === SyntaxKind.MemberFunctionDeclaration) {\n                        memberFunctionDeclaration = <MemberFunctionDeclarationSyntax>classElement;\n\n                        inFunctionOverloadChain = memberFunctionDeclaration.block === null;\n                        functionOverloadChainName = memberFunctionDeclaration.propertyName.valueText();\n\n                        if (lastElement && inFunctionOverloadChain) {\n                            this.pushDiagnostic1(classElementFullStart, classElement.firstToken(),\n                                DiagnosticCode.Function_implementation_expected);\n                            return true;\n                        }\n                    }\n                    else if (classElement.kind() === SyntaxKind.ConstructorDeclaration) {\n                        var constructorDeclaration = <ConstructorDeclarationSyntax>classElement;\n\n                        inConstructorOverloadChain = constructorDeclaration.block === null;\n                        if (lastElement && inConstructorOverloadChain) {\n                            this.pushDiagnostic1(classElementFullStart, classElement.firstToken(),\n                                DiagnosticCode.Constructor_implementation_expected);\n                            return true;\n                        }\n                    }\n\n                    classElementFullStart += classElement.fullWidth();\n                }\n            }\n\n            return false;\n        }\n\n        private checkForReservedName(parent: ISyntaxElement, name: INameSyntax, code: DiagnosticCode): boolean {\n            var nameFullStart = this.childFullStart(parent, name);\n            var token: ISyntaxToken;\n            var tokenFullStart: number;\n\n            var current = name;\n            while (current !== null) {\n                if (current.kind() === SyntaxKind.QualifiedName) {\n                    var qualifiedName = <QualifiedNameSyntax>current;\n                    token = qualifiedName.right;\n                    tokenFullStart = nameFullStart + this.childFullStart(qualifiedName, token);\n                    current = qualifiedName.left;\n                }\n                else {\n                    Debug.assert(current.kind() === SyntaxKind.IdentifierName);\n                    token = <ISyntaxToken>current;\n                    tokenFullStart = nameFullStart;\n                    current = null;\n                }\n\n                switch (token.valueText()) {\n                    case \"any\":\n                    case \"number\":\n                    case \"bool\":\n                    case \"string\":\n                    case \"void\":\n                        this.pushDiagnostic(tokenFullStart + token.leadingTriviaWidth(), token.width(), code, [token.valueText()]);\n                        return true;\n                }\n            }\n\n            return false;\n        }\n\n        public visitClassDeclaration(node: ClassDeclarationSyntax): void {\n            if (this.checkForReservedName(node, node.identifier, DiagnosticCode.Class_name_cannot_be__0_) ||\n                this.checkForDisallowedDeclareModifier(node.modifiers) ||\n                this.checkForRequiredDeclareModifier(node, node.classKeyword, node.modifiers) ||\n                this.checkModuleElementModifiers(node.modifiers) ||\n                this.checkClassDeclarationHeritageClauses(node) ||\n                this.checkClassOverloads(node)) {\n\n                this.skip(node);\n                return;\n            }\n\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword);\n            super.visitClassDeclaration(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        private checkInterfaceDeclarationHeritageClauses(node: InterfaceDeclarationSyntax): boolean {\n            var heritageClauseFullStart = this.childFullStart(node, node.heritageClauses);\n\n            var seenExtendsClause = false;\n\n            for (var i = 0, n = node.heritageClauses.childCount(); i < n; i++) {\n                Debug.assert(i <= 1);\n                var heritageClause = <HeritageClauseSyntax>node.heritageClauses.childAt(i);\n\n                if (heritageClause.extendsOrImplementsKeyword.tokenKind === SyntaxKind.ExtendsKeyword) {\n                    if (seenExtendsClause) {\n                        this.pushDiagnostic1(heritageClauseFullStart, heritageClause,\n                            DiagnosticCode._extends__clause_already_seen);\n                        return true;\n                    }\n\n                    seenExtendsClause = true;\n                }\n                else {\n                    Debug.assert(heritageClause.extendsOrImplementsKeyword.tokenKind === SyntaxKind.ImplementsKeyword);\n                    this.pushDiagnostic1(heritageClauseFullStart, heritageClause,\n                        DiagnosticCode.Interface_declaration_cannot_have__implements__clause);\n                    return true;\n                }\n\n                heritageClauseFullStart += heritageClause.fullWidth();\n            }\n\n            return false;\n        }\n\n        private checkInterfaceModifiers(modifiers: ISyntaxList): boolean {\n            var modifierFullStart = this.position();\n\n            for (var i = 0, n = modifiers.childCount(); i < n; i++) {\n                var modifier = <ISyntaxToken>modifiers.childAt(i);\n                if (modifier.tokenKind === SyntaxKind.DeclareKeyword) {\n                    this.pushDiagnostic1(modifierFullStart, modifier,\n                        DiagnosticCode._declare__modifier_cannot_appear_on_an_interface_declaration);\n                    return true;\n                }\n\n                modifierFullStart += modifier.fullWidth();\n            }\n\n            return false;\n        }\n\n        public visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): void {\n            if (this.checkForReservedName(node, node.identifier, DiagnosticCode.Interface_name_cannot_be__0_) ||\n                this.checkInterfaceModifiers(node.modifiers) ||\n                this.checkModuleElementModifiers(node.modifiers) ||\n                this.checkInterfaceDeclarationHeritageClauses(node)) {\n\n                this.skip(node);\n                return;\n            }\n\n            super.visitInterfaceDeclaration(node);\n        }\n\n        private checkClassElementModifiers(list: ISyntaxList): boolean {\n            var modifierFullStart = this.position();\n\n            var seenAccessibilityModifier = false;\n            var seenStaticModifier = false;\n\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                var modifier = <ISyntaxToken>list.childAt(i);\n                if (modifier.tokenKind === SyntaxKind.PublicKeyword ||\n                    modifier.tokenKind === SyntaxKind.PrivateKeyword) {\n\n                    if (seenAccessibilityModifier) {\n                        this.pushDiagnostic1(modifierFullStart, modifier,\n                            DiagnosticCode.Accessibility_modifier_already_seen);\n                        return true;\n                    }\n\n                    if (seenStaticModifier) {\n                        var previousToken = <ISyntaxToken>list.childAt(i - 1);\n                        this.pushDiagnostic1(modifierFullStart, modifier,\n                            DiagnosticCode._0__modifier_must_precede__1__modifier, [modifier.text(), previousToken.text()]);\n                        return true;\n                    }\n\n                    seenAccessibilityModifier = true;\n                }\n                else if (modifier.tokenKind === SyntaxKind.StaticKeyword) {\n                    if (seenStaticModifier) {\n                        this.pushDiagnostic1(modifierFullStart, modifier,\n                            DiagnosticCode._0__modifier_already_seen, [modifier.text()]);\n                        return true;\n                    }\n\n                    seenStaticModifier = true;\n                }\n                else {\n                    this.pushDiagnostic1(modifierFullStart, modifier,\n                        DiagnosticCode._0__modifier_cannot_appear_on_a_class_element, [modifier.text()]);\n                    return true;\n                }\n\n                modifierFullStart += modifier.fullWidth();\n            }\n\n            return false;\n        }\n\n        public visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): void {\n            if (this.checkClassElementModifiers(node.modifiers)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitMemberVariableDeclaration(node);\n        }\n\n        public visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): void {\n            if (this.checkClassElementModifiers(node.modifiers)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitMemberFunctionDeclaration(node);\n        }\n\n        private checkGetMemberAccessorParameter(node: GetMemberAccessorDeclarationSyntax): boolean {\n            var getKeywordFullStart = this.childFullStart(node, node.getKeyword);\n            if (node.parameterList.parameters.childCount() !== 0) {\n                this.pushDiagnostic1(getKeywordFullStart, node.getKeyword,\n                    DiagnosticCode._get__accessor_cannot_have_parameters);\n                return true;\n            }\n\n            return false;\n        }\n\n        private checkEcmaScriptVersionIsAtLeast(parent: ISyntaxElement, node: ISyntaxElement, languageVersion: LanguageVersion, code: DiagnosticCode): boolean {\n            if (this.syntaxTree.languageVersion() < languageVersion) {\n                var nodeFullStart = this.childFullStart(parent, node);\n                this.pushDiagnostic1(nodeFullStart, node, code);\n                return true;\n            }\n\n            return false;\n        }\n\n        public visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): void {\n            if (this.checkEcmaScriptVersionIsAtLeast(node, node.getKeyword, LanguageVersion.EcmaScript5, DiagnosticCode.Accessors_are_only_available_when_targeting_EcmaScript5_and_higher) ||\n                this.checkClassElementModifiers(node.modifiers) ||\n                this.checkGetMemberAccessorParameter(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitGetMemberAccessorDeclaration(node);\n        }\n\n        private checkSetMemberAccessorParameter(node: SetMemberAccessorDeclarationSyntax): boolean {\n            var setKeywordFullStart = this.childFullStart(node, node.setKeyword);\n            if (node.parameterList.parameters.childCount() !== 1) {\n                this.pushDiagnostic1(setKeywordFullStart, node.setKeyword,\n                    DiagnosticCode._set__accessor_must_have_only_one_parameter);\n                return true;\n            }\n\n            var parameterListFullStart = this.childFullStart(node, node.parameterList);\n            var parameterFullStart = parameterListFullStart + Syntax.childOffset(node.parameterList, node.parameterList.openParenToken);\n            var parameter = <ParameterSyntax>node.parameterList.parameters.childAt(0);\n\n            if (parameter.publicOrPrivateKeyword) {\n                this.pushDiagnostic1(parameterFullStart, parameter,\n                    DiagnosticCode._set__accessor_parameter_cannot_have_accessibility_modifier);\n                return true;\n            }\n\n            if (parameter.questionToken) {\n                this.pushDiagnostic1(parameterFullStart, parameter,\n                    DiagnosticCode._set__accessor_parameter_cannot_be_optional);\n                return true;\n            }\n\n            if (parameter.equalsValueClause) {\n                this.pushDiagnostic1(parameterFullStart, parameter,\n                    DiagnosticCode._set__accessor_parameter_cannot_have_initializer);\n                return true;\n            }\n\n            if (parameter.dotDotDotToken) {\n                this.pushDiagnostic1(parameterFullStart, parameter,\n                    DiagnosticCode._set__accessor_cannot_have_rest_parameter);\n                return true;\n            }\n\n            return false;\n        }\n\n        public visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): void {\n            if (this.checkEcmaScriptVersionIsAtLeast(node, node.setKeyword, LanguageVersion.EcmaScript5, DiagnosticCode.Accessors_are_only_available_when_targeting_EcmaScript5_and_higher) ||\n                this.checkClassElementModifiers(node.modifiers) ||\n                this.checkSetMemberAccessorParameter(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitSetMemberAccessorDeclaration(node);\n        }\n\n        public visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): void {\n            if (this.checkEcmaScriptVersionIsAtLeast(node, node.getKeyword, LanguageVersion.EcmaScript5, DiagnosticCode.Accessors_are_only_available_when_targeting_EcmaScript5_and_higher)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitGetAccessorPropertyAssignment(node);\n        }\n\n        public visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): void {\n            if (this.checkEcmaScriptVersionIsAtLeast(node, node.setKeyword, LanguageVersion.EcmaScript5, DiagnosticCode.Accessors_are_only_available_when_targeting_EcmaScript5_and_higher)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitSetAccessorPropertyAssignment(node);\n        }\n\n        public visitEnumDeclaration(node: EnumDeclarationSyntax): void {\n            if (this.checkForReservedName(node, node.identifier, DiagnosticCode.Enum_name_cannot_be__0_) ||\n                this.checkForDisallowedDeclareModifier(node.modifiers) ||\n                this.checkForRequiredDeclareModifier(node, node.enumKeyword, node.modifiers) ||\n                this.checkModuleElementModifiers(node.modifiers),\n                this.checkEnumElements(node)) {\n\n                this.skip(node);\n                return;\n            }\n\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword);\n            super.visitEnumDeclaration(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        private checkEnumElements(node: EnumDeclarationSyntax): boolean {\n            var enumElementFullStart = this.childFullStart(node, node.enumElements);\n\n            var seenComputedValue = false;\n            for (var i = 0, n = node.enumElements.childCount(); i < n; i++) {\n                var child = node.enumElements.childAt(i);\n\n                if (i % 2 === 0) {\n                    var enumElement = <EnumElementSyntax>child;\n\n                    if (!enumElement.equalsValueClause && seenComputedValue) {\n                        this.pushDiagnostic1(enumElementFullStart, enumElement, DiagnosticCode.Enum_member_must_have_initializer, null);\n                        return true;\n                    }\n\n                    if (enumElement.equalsValueClause) {\n                        var value = enumElement.equalsValueClause.value;\n                        if (value.kind() !== SyntaxKind.NumericLiteral) {\n                            seenComputedValue = true;\n                        }\n                    }\n                }\n\n                enumElementFullStart += child.fullWidth();\n            }\n\n            return false;\n        }\n\n        public visitInvocationExpression(node: InvocationExpressionSyntax): void {\n            if (node.expression.kind() === SyntaxKind.SuperKeyword &&\n                node.argumentList.typeArgumentList !== null) {\n                this.pushDiagnostic1(this.position(), node,\n                    DiagnosticCode._super__invocation_cannot_have_type_arguments);\n            }\n\n            super.visitInvocationExpression(node);\n        }\n\n        private checkModuleElementModifiers(modifiers: ISyntaxList): boolean {\n            var modifierFullStart = this.position();\n            var seenExportModifier = false;\n            var seenDeclareModifier = false;\n\n            for (var i = 0, n = modifiers.childCount(); i < n; i++) {\n                var modifier = <ISyntaxToken>modifiers.childAt(i);\n                if (modifier.tokenKind === SyntaxKind.PublicKeyword ||\n                    modifier.tokenKind === SyntaxKind.PrivateKeyword ||\n                    modifier.tokenKind === SyntaxKind.StaticKeyword) {\n                    this.pushDiagnostic1(modifierFullStart, modifier,\n                        DiagnosticCode._0__modifier_cannot_appear_on_a_module_element, [modifier.text()]);\n                    return true;\n                }\n\n                if (modifier.tokenKind === SyntaxKind.DeclareKeyword) {\n                    if (seenDeclareModifier) {\n                        this.pushDiagnostic1(modifierFullStart, modifier,\n                            DiagnosticCode.Accessibility_modifier_already_seen);\n                        return;\n                    }\n\n                    seenDeclareModifier = true;\n                }\n                else if (modifier.tokenKind === SyntaxKind.ExportKeyword) {\n                    if (seenExportModifier) {\n                        this.pushDiagnostic1(modifierFullStart, modifier,\n                            DiagnosticCode._0__modifier_already_seen, [modifier.text()]);\n                        return;\n                    }\n\n                    if (seenDeclareModifier) {\n                        this.pushDiagnostic1(modifierFullStart, modifier,\n                            DiagnosticCode._0__modifier_must_precede__1__modifier,\n                            [SyntaxFacts.getText(SyntaxKind.ExportKeyword), SyntaxFacts.getText(SyntaxKind.DeclareKeyword)]);\n                        return;\n                    }\n\n                    seenExportModifier = true;\n                }\n\n                modifierFullStart += modifier.fullWidth();\n            }\n\n            return false;\n        }\n\n        private checkForDisallowedImportDeclaration(node: ModuleDeclarationSyntax): boolean {\n            if (node.stringLiteral === null) {\n                var currentElementFullStart = this.childFullStart(node, node.moduleElements);\n\n                for (var i = 0, n = node.moduleElements.childCount(); i < n; i++) {\n                    var child = node.moduleElements.childAt(i);\n                    if (child.kind() === SyntaxKind.ImportDeclaration) {\n                        var importDeclaration = <ImportDeclarationSyntax>child;\n                        if (importDeclaration.moduleReference.kind() === SyntaxKind.ExternalModuleReference) {\n                            this.pushDiagnostic1(currentElementFullStart, importDeclaration,\n                                DiagnosticCode.Import_declarations_in_an_internal_module_cannot_reference_an_external_module, null);\n                        }\n                    }\n\n                    currentElementFullStart += child.fullWidth();\n                }\n            }\n\n            return false;\n        }\n\n        public visitModuleDeclaration(node: ModuleDeclarationSyntax): void {\n            if (this.checkForReservedName(node, node.moduleName, DiagnosticCode.Module_name_cannot_be__0_) ||\n                this.checkForDisallowedDeclareModifier(node.modifiers) ||\n                this.checkForRequiredDeclareModifier(node, node.moduleKeyword, node.modifiers) ||\n                this.checkModuleElementModifiers(node.modifiers) ||\n                this.checkForDisallowedImportDeclaration(node) ||\n                (!this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword) && this.checkFunctionOverloads(node, node.moduleElements))) {\n\n                this.skip(node);\n                return;\n            }\n\n            if (node.stringLiteral && !this.inAmbientDeclaration && !this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword)) {\n                var stringLiteralFullStart = this.childFullStart(node, node.stringLiteral);\n                this.pushDiagnostic1(stringLiteralFullStart, node.stringLiteral,\n                    DiagnosticCode.Non_ambient_modules_cannot_use_quoted_names);\n                this.skip(node);\n                return;\n            }\n\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword);\n            super.visitModuleDeclaration(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        public visitBlock(node: BlockSyntax): void {\n            if (this.inAmbientDeclaration || this.syntaxTree.isDeclaration()) {\n                this.pushDiagnostic1(this.position(), node.firstToken(), DiagnosticCode.Implementations_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            if (this.checkFunctionOverloads(node, node.statements)) {\n                this.skip(node);\n                return;\n            }\n\n            var savedInBlock = this.inBlock;\n            this.inBlock = true;\n            super.visitBlock(node);\n            this.inBlock = savedInBlock;\n        }\n\n        private checkForStatementInAmbientContxt(node: IStatementSyntax): boolean {\n            if (this.inAmbientDeclaration || this.syntaxTree.isDeclaration()) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                return true;\n            }\n\n            return false\n        }\n\n        public visitBreakStatement(node: BreakStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitBreakStatement(node);\n        }\n\n        public visitContinueStatement(node: ContinueStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitContinueStatement(node);\n        }\n\n        public visitDebuggerStatement(node: DebuggerStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitDebuggerStatement(node);\n        }\n\n        public visitDoStatement(node: DoStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitDoStatement(node);\n        }\n\n        public visitEmptyStatement(node: EmptyStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitEmptyStatement(node);\n        }\n\n        public visitExpressionStatement(node: ExpressionStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitExpressionStatement(node);\n        }\n\n        public visitForInStatement(node: ForInStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitForInStatement(node);\n        }\n\n        public visitForStatement(node: ForStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitForStatement(node);\n        }\n\n        public visitIfStatement(node: IfStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitIfStatement(node);\n        }\n\n        public visitLabeledStatement(node: LabeledStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitLabeledStatement(node);\n        }\n\n        public visitReturnStatement(node: ReturnStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitReturnStatement(node);\n        }\n\n        public visitSwitchStatement(node: SwitchStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitSwitchStatement(node);\n        }\n\n        public visitThrowStatement(node: ThrowStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitThrowStatement(node);\n        }\n\n        public visitTryStatement(node: TryStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitTryStatement(node);\n        }\n\n        public visitWhileStatement(node: WhileStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitWhileStatement(node);\n        }\n\n        public visitWithStatement(node: WithStatementSyntax): void {\n            if (this.checkForStatementInAmbientContxt(node)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitWithStatement(node);\n        }\n\n        private checkForDisallowedModifiers(parent: ISyntaxElement, modifiers: ISyntaxList): boolean {\n            if (this.inBlock && modifiers.childCount() > 0) {\n                var modifierFullStart = this.childFullStart(parent, modifiers);\n                this.pushDiagnostic1(modifierFullStart, modifiers.childAt(0), DiagnosticCode.Modifiers_cannot_appear_here);\n                return true;\n            }\n\n            return false;\n        }\n\n        public visitFunctionDeclaration(node: FunctionDeclarationSyntax): void {\n            if (this.checkForDisallowedDeclareModifier(node.modifiers) ||\n                this.checkForDisallowedModifiers(node, node.modifiers) ||\n                this.checkForRequiredDeclareModifier(node, node.functionKeyword, node.modifiers) ||\n                this.checkModuleElementModifiers(node.modifiers)) {\n\n                this.skip(node);\n                return;\n            }\n\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword);\n            super.visitFunctionDeclaration(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        public visitVariableStatement(node: VariableStatementSyntax): void {\n            if (this.checkForDisallowedDeclareModifier(node.modifiers) ||\n                this.checkForDisallowedModifiers(node, node.modifiers) ||\n                this.checkForRequiredDeclareModifier(node, node.variableDeclaration, node.modifiers) ||\n                this.checkModuleElementModifiers(node.modifiers)) {\n\n                this.skip(node);\n                return;\n            }\n\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword);\n            super.visitVariableStatement(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        private checkListSeparators(parent: ISyntaxElement, list: ISeparatedSyntaxList, kind: SyntaxKind): boolean {\n            var currentElementFullStart = this.childFullStart(parent, list);\n\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                var child = list.childAt(i);\n                if (i % 2 === 1 && child.kind() !== kind) {\n                    this.pushDiagnostic1(currentElementFullStart, child, DiagnosticCode._0_expected, [SyntaxFacts.getText(kind)]);\n                }\n\n                currentElementFullStart += child.fullWidth();\n            }\n\n            return false;\n        }\n\n        public visitObjectType(node: ObjectTypeSyntax): void {\n            if (this.checkListSeparators(node, node.typeMembers, SyntaxKind.SemicolonToken)) {\n                this.skip(node);\n                return;\n            }\n\n            // All code in an object type is implicitly ambient. (i.e. parameters can\'t have initializer, etc.)\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = true;\n            super.visitObjectType(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        public visitArrayType(node: ArrayTypeSyntax): void {\n            // All code in an object type is implicitly ambient. (i.e. parameters can\'t have initializer, etc.)\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = true;\n            super.visitArrayType(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        public visitFunctionType(node: FunctionTypeSyntax): void {\n            // All code in an object type is implicitly ambient. (i.e. parameters can\'t have initializer, etc.)\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = true;\n            super.visitFunctionType(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        public visitConstructorType(node: ConstructorTypeSyntax): void {\n            // All code in an object type is implicitly ambient. (i.e. parameters can\'t have initializer, etc.)\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = true;\n            super.visitConstructorType(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        public visitEqualsValueClause(node: EqualsValueClauseSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitEqualsValueClause(node);\n        }\n\n        public visitConstructorDeclaration(node: ConstructorDeclarationSyntax): void {\n            var savedCurrentConstructor = this.currentConstructor;\n            this.currentConstructor = node;\n            super.visitConstructorDeclaration(node);\n            this.currentConstructor = savedCurrentConstructor;\n        }\n\n        public visitSourceUnit(node: SourceUnitSyntax): void {\n            if (this.checkFunctionOverloads(node, node.moduleElements)) {\n                this.skip(node);\n                return;\n            }\n\n            super.visitSourceUnit(node);\n        }\n\n        public visitExternalModuleReference(node: ExternalModuleReferenceSyntax): void {\n            if (node.moduleOrRequireKeyword.tokenKind === SyntaxKind.ModuleKeyword && !this.syntaxTree.parseOptions().allowModuleKeywordInExternalModuleReference()) {\n                this.pushDiagnostic1(this.position(), node.moduleOrRequireKeyword,\n                    DiagnosticCode._module_______is_deprecated__Use__require_______instead);\n                this.skip(node);\n                return;\n            }\n\n            super.visitExternalModuleReference(node);\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    class TextSpanWalker extends SyntaxWalker {\n        private _position: number = 0;\n\n        constructor(private textSpan: TextSpan) {\n            super();\n        }\n\n        public visitToken(token: ISyntaxToken): void {\n            this._position += token.fullWidth();\n        }\n\n        public visitNode(node: SyntaxNode): void {\n            var nodeSpan = new TextSpan(this.position(), node.fullWidth());\n\n            if (nodeSpan.intersectsWithTextSpan(this.textSpan)) {\n                node.accept(this);\n            }\n            else {\n                // We\'re skipping the node, so update our position accordingly.\n                this._position += node.fullWidth();\n            }\n        }\n\n        public position(): number {\n            return this._position;\n        }\n    }\n}\n///<reference path=\'references.ts\' />\n\nmodule TypeScript {\n    export class Unicode {\n        /*\n            As per ECMAScript Language Specification 3th Edition, Section 7.6: Identifiers\n            IdentifierStart ::\n                Can contain Unicode 3.0.0  categories:\n                “Uppercase letter (Lu)”,\n                “Lowercase letter (Ll)”,\n                “Titlecase letter (Lt)”,\n                “Modifier letter (Lm)”,\n                “Other letter (Lo)”, or\n                “Letter number (Nl)”.\n            IdentifierPart :: =\n                Can contain IdentifierStart + Unicode 3.0.0  categories:\n                “Non-spacing mark (Mn)”,\n                “Combining spacing mark (Mc)”,\n                “Decimal number (Nd)”, or\n                “Connector punctuation (Pc)”.\n\n            Codepoint ranges for ES3 Identifiers are extracted from the Unicode 3.0.0 specification at:\n            http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\n        */\n        static unicodeES3IdentifierStart = [170,170,  181,181,  186,186,  192,214,  216,246,  248,543,  546,563,  592,685,  688,696,  699,705,  720,721,  736,740,  750,750,  890,890,  902,902,  904,906,  908,908,  910,929,  931,974,  976,983,  986,1011,  1024,1153,  1164,1220,  1223,1224,  1227,1228,  1232,1269,  1272,1273,  1329,1366,  1369,1369,  1377,1415,  1488,1514,  1520,1522,  1569,1594,  1600,1610,  1649,1747,  1749,1749,  1765,1766,  1786,1788,  1808,1808,  1810,1836,  1920,1957,  2309,2361,  2365,2365,  2384,2384,  2392,2401,  2437,2444,  2447,2448,  2451,2472,  2474,2480,  2482,2482,  2486,2489,  2524,2525,  2527,2529,  2544,2545,  2565,2570,  2575,2576,  2579,2600,  2602,2608,  2610,2611,  2613,2614,  2616,2617,  2649,2652,  2654,2654,  2674,2676,  2693,2699,  2701,2701,  2703,2705,  2707,2728,  2730,2736,  2738,2739,  2741,2745,  2749,2749,  2768,2768,  2784,2784,  2821,2828,  2831,2832,  2835,2856,  2858,2864,  2866,2867,  2870,2873,  2877,2877,  2908,2909,  2911,2913,  2949,2954,  2958,2960,  2962,2965,  2969,2970,  2972,2972,  2974,2975,  2979,2980,  2984,2986,  2990,2997,  2999,3001,  3077,3084,  3086,3088,  3090,3112,  3114,3123,  3125,3129,  3168,3169,  3205,3212,  3214,3216,  3218,3240,  3242,3251,  3253,3257,  3294,3294,  3296,3297,  3333,3340,  3342,3344,  3346,3368,  3370,3385,  3424,3425,  3461,3478,  3482,3505,  3507,3515,  3517,3517,  3520,3526,  3585,3632,  3634,3635,  3648,3654,  3713,3714,  3716,3716,  3719,3720,  3722,3722,  3725,3725,  3732,3735,  3737,3743,  3745,3747,  3749,3749,  3751,3751,  3754,3755,  3757,3760,  3762,3763,  3773,3773,  3776,3780,  3782,3782,  3804,3805,  3840,3840,  3904,3911,  3913,3946,  3976,3979,  4096,4129,  4131,4135,  4137,4138,  4176,4181,  4256,4293,  4304,4342,  4352,4441,  4447,4514,  4520,4601,  4608,4614,  4616,4678,  4680,4680,  4682,4685,  4688,4694,  4696,4696,  4698,4701,  4704,4742,  4744,4744,  4746,4749,  4752,4782,  4784,4784,  4786,4789,  4792,4798,  4800,4800,  4802,4805,  4808,4814,  4816,4822,  4824,4846,  4848,4878,  4880,4880,  4882,4885,  4888,4894,  4896,4934,  4936,4954,  5024,5108,  5121,5740,  5743,5750,  5761,5786,  5792,5866,  6016,6067,  6176,6263,  6272,6312,  7680,7835,  7840,7929,  7936,7957,  7960,7965,  7968,8005,  8008,8013,  8016,8023,  8025,8025,  8027,8027,  8029,8029,  8031,8061,  8064,8116,  8118,8124,  8126,8126,  8130,8132,  8134,8140,  8144,8147,  8150,8155,  8160,8172,  8178,8180,  8182,8188,  8319,8319,  8450,8450,  8455,8455,  8458,8467,  8469,8469,  8473,8477,  8484,8484,  8486,8486,  8488,8488,  8490,8493,  8495,8497,  8499,8505,  8544,8579,  12293,12295,  12321,12329,  12337,12341,  12344,12346,  12353,12436,  12445,12446,  12449,12538,  12540,12542,  12549,12588,  12593,12686,  12704,12727,  13312,19893,  19968,40869,  40960,42124,  44032,55203,  63744,64045,  64256,64262,  64275,64279,  64285,64285,  64287,64296,  64298,64310,  64312,64316,  64318,64318,  64320,64321,  64323,64324,  64326,64433,  64467,64829,  64848,64911,  64914,64967,  65008,65019,  65136,65138,  65140,65140,  65142,65276,  65313,65338,  65345,65370,  65382,65470,  65474,65479,  65482,65487,  65490,65495,  65498,65500,  ];\n        static unicodeES3IdentifierPart =  [170,170,  181,181,  186,186,  192,214,  216,246,  248,543,  546,563,  592,685,  688,696,  699,705,  720,721,  736,740,  750,750,  768,846,  864,866,  890,890,  902,902,  904,906,  908,908,  910,929,  931,974,  976,983,  986,1011,  1024,1153,  1155,1158,  1164,1220,  1223,1224,  1227,1228,  1232,1269,  1272,1273,  1329,1366,  1369,1369,  1377,1415,  1425,1441,  1443,1465,  1467,1469,  1471,1471,  1473,1474,  1476,1476,  1488,1514,  1520,1522,  1569,1594,  1600,1621,  1632,1641,  1648,1747,  1749,1756,  1759,1768,  1770,1773,  1776,1788,  1808,1836,  1840,1866,  1920,1968,  2305,2307,  2309,2361,  2364,2381,  2384,2388,  2392,2403,  2406,2415,  2433,2435,  2437,2444,  2447,2448,  2451,2472,  2474,2480,  2482,2482,  2486,2489,  2492,2492,  2494,2500,  2503,2504,  2507,2509,  2519,2519,  2524,2525,  2527,2531,  2534,2545,  2562,2562,  2565,2570,  2575,2576,  2579,2600,  2602,2608,  2610,2611,  2613,2614,  2616,2617,  2620,2620,  2622,2626,  2631,2632,  2635,2637,  2649,2652,  2654,2654,  2662,2676,  2689,2691,  2693,2699,  2701,2701,  2703,2705,  2707,2728,  2730,2736,  2738,2739,  2741,2745,  2748,2757,  2759,2761,  2763,2765,  2768,2768,  2784,2784,  2790,2799,  2817,2819,  2821,2828,  2831,2832,  2835,2856,  2858,2864,  2866,2867,  2870,2873,  2876,2883,  2887,2888,  2891,2893,  2902,2903,  2908,2909,  2911,2913,  2918,2927,  2946,2947,  2949,2954,  2958,2960,  2962,2965,  2969,2970,  2972,2972,  2974,2975,  2979,2980,  2984,2986,  2990,2997,  2999,3001,  3006,3010,  3014,3016,  3018,3021,  3031,3031,  3047,3055,  3073,3075,  3077,3084,  3086,3088,  3090,3112,  3114,3123,  3125,3129,  3134,3140,  3142,3144,  3146,3149,  3157,3158,  3168,3169,  3174,3183,  3202,3203,  3205,3212,  3214,3216,  3218,3240,  3242,3251,  3253,3257,  3262,3268,  3270,3272,  3274,3277,  3285,3286,  3294,3294,  3296,3297,  3302,3311,  3330,3331,  3333,3340,  3342,3344,  3346,3368,  3370,3385,  3390,3395,  3398,3400,  3402,3405,  3415,3415,  3424,3425,  3430,3439,  3458,3459,  3461,3478,  3482,3505,  3507,3515,  3517,3517,  3520,3526,  3530,3530,  3535,3540,  3542,3542,  3544,3551,  3570,3571,  3585,3642,  3648,3662,  3664,3673,  3713,3714,  3716,3716,  3719,3720,  3722,3722,  3725,3725,  3732,3735,  3737,3743,  3745,3747,  3749,3749,  3751,3751,  3754,3755,  3757,3769,  3771,3773,  3776,3780,  3782,3782,  3784,3789,  3792,3801,  3804,3805,  3840,3840,  3864,3865,  3872,3881,  3893,3893,  3895,3895,  3897,3897,  3902,3911,  3913,3946,  3953,3972,  3974,3979,  3984,3991,  3993,4028,  4038,4038,  4096,4129,  4131,4135,  4137,4138,  4140,4146,  4150,4153,  4160,4169,  4176,4185,  4256,4293,  4304,4342,  4352,4441,  4447,4514,  4520,4601,  4608,4614,  4616,4678,  4680,4680,  4682,4685,  4688,4694,  4696,4696,  4698,4701,  4704,4742,  4744,4744,  4746,4749,  4752,4782,  4784,4784,  4786,4789,  4792,4798,  4800,4800,  4802,4805,  4808,4814,  4816,4822,  4824,4846,  4848,4878,  4880,4880,  4882,4885,  4888,4894,  4896,4934,  4936,4954,  4969,4977,  5024,5108,  5121,5740,  5743,5750,  5761,5786,  5792,5866,  6016,6099,  6112,6121,  6160,6169,  6176,6263,  6272,6313,  7680,7835,  7840,7929,  7936,7957,  7960,7965,  7968,8005,  8008,8013,  8016,8023,  8025,8025,  8027,8027,  8029,8029,  8031,8061,  8064,8116,  8118,8124,  8126,8126,  8130,8132,  8134,8140,  8144,8147,  8150,8155,  8160,8172,  8178,8180,  8182,8188,  8255,8256,  8319,8319,  8400,8412,  8417,8417,  8450,8450,  8455,8455,  8458,8467,  8469,8469,  8473,8477,  8484,8484,  8486,8486,  8488,8488,  8490,8493,  8495,8497,  8499,8505,  8544,8579,  12293,12295,  12321,12335,  12337,12341,  12344,12346,  12353,12436,  12441,12442,  12445,12446,  12449,12542,  12549,12588,  12593,12686,  12704,12727,  13312,19893,  19968,40869,  40960,42124,  44032,55203,  63744,64045,  64256,64262,  64275,64279,  64285,64296,  64298,64310,  64312,64316,  64318,64318,  64320,64321,  64323,64324,  64326,64433,  64467,64829,  64848,64911,  64914,64967,  65008,65019,  65056,65059,  65075,65076,  65101,65103,  65136,65138,  65140,65140,  65142,65276,  65296,65305,  65313,65338,  65343,65343,  65345,65370,  65381,65470,  65474,65479,  65482,65487,  65490,65495,  65498,65500,  ];\n\n        /*\n            As per ECMAScript Language Specification 5th Edition, Section 7.6: Identifier Names and Identifiers\n            IdentifierStart ::\n                Can contain Unicode 6.2  categories:\n                “Uppercase letter (Lu)”,\n                “Lowercase letter (Ll)”,\n                “Titlecase letter (Lt)”,\n                “Modifier letter (Lm)”,\n                “Other letter (Lo)”, or\n                “Letter number (Nl)”.\n            IdentifierPart ::\n                Can contain IdentifierStart + Unicode 6.2  categories:\n                “Non-spacing mark (Mn)”,\n                “Combining spacing mark (Mc)”,\n                “Decimal number (Nd)”,\n                “Connector punctuation (Pc)”,\n                <ZWNJ>, or\n                <ZWJ>.\n\n            Codepoint ranges for ES5 Identifiers are extracted from the Unicode 6.2 specification at:\n            http://www.unicode.org/Public/6.2.0/ucd/UnicodeData.txt\n        */\n        static unicodeES5IdentifierStart = [170,170,  181,181,  186,186,  192,214,  216,246,  248,705,  710,721,  736,740,  748,748,  750,750,  880,884,  886,887,  890,893,  902,902,  904,906,  908,908,  910,929,  931,1013,  1015,1153,  1162,1319,  1329,1366,  1369,1369,  1377,1415,  1488,1514,  1520,1522,  1568,1610,  1646,1647,  1649,1747,  1749,1749,  1765,1766,  1774,1775,  1786,1788,  1791,1791,  1808,1808,  1810,1839,  1869,1957,  1969,1969,  1994,2026,  2036,2037,  2042,2042,  2048,2069,  2074,2074,  2084,2084,  2088,2088,  2112,2136,  2208,2208,  2210,2220,  2308,2361,  2365,2365,  2384,2384,  2392,2401,  2417,2423,  2425,2431,  2437,2444,  2447,2448,  2451,2472,  2474,2480,  2482,2482,  2486,2489,  2493,2493,  2510,2510,  2524,2525,  2527,2529,  2544,2545,  2565,2570,  2575,2576,  2579,2600,  2602,2608,  2610,2611,  2613,2614,  2616,2617,  2649,2652,  2654,2654,  2674,2676,  2693,2701,  2703,2705,  2707,2728,  2730,2736,  2738,2739,  2741,2745,  2749,2749,  2768,2768,  2784,2785,  2821,2828,  2831,2832,  2835,2856,  2858,2864,  2866,2867,  2869,2873,  2877,2877,  2908,2909,  2911,2913,  2929,2929,  2947,2947,  2949,2954,  2958,2960,  2962,2965,  2969,2970,  2972,2972,  2974,2975,  2979,2980,  2984,2986,  2990,3001,  3024,3024,  3077,3084,  3086,3088,  3090,3112,  3114,3123,  3125,3129,  3133,3133,  3160,3161,  3168,3169,  3205,3212,  3214,3216,  3218,3240,  3242,3251,  3253,3257,  3261,3261,  3294,3294,  3296,3297,  3313,3314,  3333,3340,  3342,3344,  3346,3386,  3389,3389,  3406,3406,  3424,3425,  3450,3455,  3461,3478,  3482,3505,  3507,3515,  3517,3517,  3520,3526,  3585,3632,  3634,3635,  3648,3654,  3713,3714,  3716,3716,  3719,3720,  3722,3722,  3725,3725,  3732,3735,  3737,3743,  3745,3747,  3749,3749,  3751,3751,  3754,3755,  3757,3760,  3762,3763,  3773,3773,  3776,3780,  3782,3782,  3804,3807,  3840,3840,  3904,3911,  3913,3948,  3976,3980,  4096,4138,  4159,4159,  4176,4181,  4186,4189,  4193,4193,  4197,4198,  4206,4208,  4213,4225,  4238,4238,  4256,4293,  4295,4295,  4301,4301,  4304,4346,  4348,4680,  4682,4685,  4688,4694,  4696,4696,  4698,4701,  4704,4744,  4746,4749,  4752,4784,  4786,4789,  4792,4798,  4800,4800,  4802,4805,  4808,4822,  4824,4880,  4882,4885,  4888,4954,  4992,5007,  5024,5108,  5121,5740,  5743,5759,  5761,5786,  5792,5866,  5870,5872,  5888,5900,  5902,5905,  5920,5937,  5952,5969,  5984,5996,  5998,6000,  6016,6067,  6103,6103,  6108,6108,  6176,6263,  6272,6312,  6314,6314,  6320,6389,  6400,6428,  6480,6509,  6512,6516,  6528,6571,  6593,6599,  6656,6678,  6688,6740,  6823,6823,  6917,6963,  6981,6987,  7043,7072,  7086,7087,  7098,7141,  7168,7203,  7245,7247,  7258,7293,  7401,7404,  7406,7409,  7413,7414,  7424,7615,  7680,7957,  7960,7965,  7968,8005,  8008,8013,  8016,8023,  8025,8025,  8027,8027,  8029,8029,  8031,8061,  8064,8116,  8118,8124,  8126,8126,  8130,8132,  8134,8140,  8144,8147,  8150,8155,  8160,8172,  8178,8180,  8182,8188,  8305,8305,  8319,8319,  8336,8348,  8450,8450,  8455,8455,  8458,8467,  8469,8469,  8473,8477,  8484,8484,  8486,8486,  8488,8488,  8490,8493,  8495,8505,  8508,8511,  8517,8521,  8526,8526,  8544,8584,  11264,11310,  11312,11358,  11360,11492,  11499,11502,  11506,11507,  11520,11557,  11559,11559,  11565,11565,  11568,11623,  11631,11631,  11648,11670,  11680,11686,  11688,11694,  11696,11702,  11704,11710,  11712,11718,  11720,11726,  11728,11734,  11736,11742,  11823,11823,  12293,12295,  12321,12329,  12337,12341,  12344,12348,  12353,12438,  12445,12447,  12449,12538,  12540,12543,  12549,12589,  12593,12686,  12704,12730,  12784,12799,  13312,19893,  19968,40908,  40960,42124,  42192,42237,  42240,42508,  42512,42527,  42538,42539,  42560,42606,  42623,42647,  42656,42735,  42775,42783,  42786,42888,  42891,42894,  42896,42899,  42912,42922,  43000,43009,  43011,43013,  43015,43018,  43020,43042,  43072,43123,  43138,43187,  43250,43255,  43259,43259,  43274,43301,  43312,43334,  43360,43388,  43396,43442,  43471,43471,  43520,43560,  43584,43586,  43588,43595,  43616,43638,  43642,43642,  43648,43695,  43697,43697,  43701,43702,  43705,43709,  43712,43712,  43714,43714,  43739,43741,  43744,43754,  43762,43764,  43777,43782,  43785,43790,  43793,43798,  43808,43814,  43816,43822,  43968,44002,  44032,55203,  55216,55238,  55243,55291,  63744,64109,  64112,64217,  64256,64262,  64275,64279,  64285,64285,  64287,64296,  64298,64310,  64312,64316,  64318,64318,  64320,64321,  64323,64324,  64326,64433,  64467,64829,  64848,64911,  64914,64967,  65008,65019,  65136,65140,  65142,65276,  65313,65338,  65345,65370,  65382,65470,  65474,65479,  65482,65487,  65490,65495,  65498,65500,  ];\n        static unicodeES5IdentifierPart =  [170,170,  181,181,  186,186,  192,214,  216,246,  248,705,  710,721,  736,740,  748,748,  750,750,  768,884,  886,887,  890,893,  902,902,  904,906,  908,908,  910,929,  931,1013,  1015,1153,  1155,1159,  1162,1319,  1329,1366,  1369,1369,  1377,1415,  1425,1469,  1471,1471,  1473,1474,  1476,1477,  1479,1479,  1488,1514,  1520,1522,  1552,1562,  1568,1641,  1646,1747,  1749,1756,  1759,1768,  1770,1788,  1791,1791,  1808,1866,  1869,1969,  1984,2037,  2042,2042,  2048,2093,  2112,2139,  2208,2208,  2210,2220,  2276,2302,  2304,2403,  2406,2415,  2417,2423,  2425,2431,  2433,2435,  2437,2444,  2447,2448,  2451,2472,  2474,2480,  2482,2482,  2486,2489,  2492,2500,  2503,2504,  2507,2510,  2519,2519,  2524,2525,  2527,2531,  2534,2545,  2561,2563,  2565,2570,  2575,2576,  2579,2600,  2602,2608,  2610,2611,  2613,2614,  2616,2617,  2620,2620,  2622,2626,  2631,2632,  2635,2637,  2641,2641,  2649,2652,  2654,2654,  2662,2677,  2689,2691,  2693,2701,  2703,2705,  2707,2728,  2730,2736,  2738,2739,  2741,2745,  2748,2757,  2759,2761,  2763,2765,  2768,2768,  2784,2787,  2790,2799,  2817,2819,  2821,2828,  2831,2832,  2835,2856,  2858,2864,  2866,2867,  2869,2873,  2876,2884,  2887,2888,  2891,2893,  2902,2903,  2908,2909,  2911,2915,  2918,2927,  2929,2929,  2946,2947,  2949,2954,  2958,2960,  2962,2965,  2969,2970,  2972,2972,  2974,2975,  2979,2980,  2984,2986,  2990,3001,  3006,3010,  3014,3016,  3018,3021,  3024,3024,  3031,3031,  3046,3055,  3073,3075,  3077,3084,  3086,3088,  3090,3112,  3114,3123,  3125,3129,  3133,3140,  3142,3144,  3146,3149,  3157,3158,  3160,3161,  3168,3171,  3174,3183,  3202,3203,  3205,3212,  3214,3216,  3218,3240,  3242,3251,  3253,3257,  3260,3268,  3270,3272,  3274,3277,  3285,3286,  3294,3294,  3296,3299,  3302,3311,  3313,3314,  3330,3331,  3333,3340,  3342,3344,  3346,3386,  3389,3396,  3398,3400,  3402,3406,  3415,3415,  3424,3427,  3430,3439,  3450,3455,  3458,3459,  3461,3478,  3482,3505,  3507,3515,  3517,3517,  3520,3526,  3530,3530,  3535,3540,  3542,3542,  3544,3551,  3570,3571,  3585,3642,  3648,3662,  3664,3673,  3713,3714,  3716,3716,  3719,3720,  3722,3722,  3725,3725,  3732,3735,  3737,3743,  3745,3747,  3749,3749,  3751,3751,  3754,3755,  3757,3769,  3771,3773,  3776,3780,  3782,3782,  3784,3789,  3792,3801,  3804,3807,  3840,3840,  3864,3865,  3872,3881,  3893,3893,  3895,3895,  3897,3897,  3902,3911,  3913,3948,  3953,3972,  3974,3991,  3993,4028,  4038,4038,  4096,4169,  4176,4253,  4256,4293,  4295,4295,  4301,4301,  4304,4346,  4348,4680,  4682,4685,  4688,4694,  4696,4696,  4698,4701,  4704,4744,  4746,4749,  4752,4784,  4786,4789,  4792,4798,  4800,4800,  4802,4805,  4808,4822,  4824,4880,  4882,4885,  4888,4954,  4957,4959,  4992,5007,  5024,5108,  5121,5740,  5743,5759,  5761,5786,  5792,5866,  5870,5872,  5888,5900,  5902,5908,  5920,5940,  5952,5971,  5984,5996,  5998,6000,  6002,6003,  6016,6099,  6103,6103,  6108,6109,  6112,6121,  6155,6157,  6160,6169,  6176,6263,  6272,6314,  6320,6389,  6400,6428,  6432,6443,  6448,6459,  6470,6509,  6512,6516,  6528,6571,  6576,6601,  6608,6617,  6656,6683,  6688,6750,  6752,6780,  6783,6793,  6800,6809,  6823,6823,  6912,6987,  6992,7001,  7019,7027,  7040,7155,  7168,7223,  7232,7241,  7245,7293,  7376,7378,  7380,7414,  7424,7654,  7676,7957,  7960,7965,  7968,8005,  8008,8013,  8016,8023,  8025,8025,  8027,8027,  8029,8029,  8031,8061,  8064,8116,  8118,8124,  8126,8126,  8130,8132,  8134,8140,  8144,8147,  8150,8155,  8160,8172,  8178,8180,  8182,8188,  8204,8205,  8255,8256,  8276,8276,  8305,8305,  8319,8319,  8336,8348,  8400,8412,  8417,8417,  8421,8432,  8450,8450,  8455,8455,  8458,8467,  8469,8469,  8473,8477,  8484,8484,  8486,8486,  8488,8488,  8490,8493,  8495,8505,  8508,8511,  8517,8521,  8526,8526,  8544,8584,  11264,11310,  11312,11358,  11360,11492,  11499,11507,  11520,11557,  11559,11559,  11565,11565,  11568,11623,  11631,11631,  11647,11670,  11680,11686,  11688,11694,  11696,11702,  11704,11710,  11712,11718,  11720,11726,  11728,11734,  11736,11742,  11744,11775,  11823,11823,  12293,12295,  12321,12335,  12337,12341,  12344,12348,  12353,12438,  12441,12442,  12445,12447,  12449,12538,  12540,12543,  12549,12589,  12593,12686,  12704,12730,  12784,12799,  13312,19893,  19968,40908,  40960,42124,  42192,42237,  42240,42508,  42512,42539,  42560,42607,  42612,42621,  42623,42647,  42655,42737,  42775,42783,  42786,42888,  42891,42894,  42896,42899,  42912,42922,  43000,43047,  43072,43123,  43136,43204,  43216,43225,  43232,43255,  43259,43259,  43264,43309,  43312,43347,  43360,43388,  43392,43456,  43471,43481,  43520,43574,  43584,43597,  43600,43609,  43616,43638,  43642,43643,  43648,43714,  43739,43741,  43744,43759,  43762,43766,  43777,43782,  43785,43790,  43793,43798,  43808,43814,  43816,43822,  43968,44010,  44012,44013,  44016,44025,  44032,55203,  55216,55238,  55243,55291,  63744,64109,  64112,64217,  64256,64262,  64275,64279,  64285,64296,  64298,64310,  64312,64316,  64318,64318,  64320,64321,  64323,64324,  64326,64433,  64467,64829,  64848,64911,  64914,64967,  65008,65019,  65024,65039,  65056,65062,  65075,65076,  65101,65103,  65136,65140,  65142,65276,  65296,65305,  65313,65338,  65343,65343,  65345,65370,  65382,65470,  65474,65479,  65482,65487,  65490,65495,  65498,65500,  ];\n\n        static lookupInUnicodeMap(code: number, map: number[]): boolean {\n            // Bail out quickly if it couldn\'t possibly be in the map.\n            if (code < map[0]) {\n                return false;\n            }\n\n            // Perform binary search in one of the unicode range maps\n            var lo: number = 0;\n            var hi: number = map.length;\n            var mid: number;\n\n            while (lo + 1 < hi) {\n                mid = lo + (hi - lo) / 2;\n                // mid has to be even to catch a range\'s beginning\n                mid -= mid % 2;\n                if (map[mid] <= code && code <= map[mid + 1]) {\n                    return true;\n                }\n\n                if (code < map[mid]) {\n                    hi = mid;\n                }\n                else {\n                    lo = mid + 2;\n                }\n            }\n\n            return false;\n        }\n\n        public static isIdentifierStart(code: number, languageVersion: LanguageVersion) {\n            if (languageVersion === LanguageVersion.EcmaScript3) {\n                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES3IdentifierStart);\n            }\n            else if (languageVersion === LanguageVersion.EcmaScript5) {\n                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES5IdentifierStart);\n            }\n            else {\n                throw Errors.argumentOutOfRange(\"languageVersion\");\n            }\n        }\n\n        public static isIdentifierPart(code: number, languageVersion: LanguageVersion) {\n            if (languageVersion === LanguageVersion.EcmaScript3) {\n                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES3IdentifierPart);\n            }\n            else if (languageVersion === LanguageVersion.EcmaScript5) {\n                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES5IdentifierPart);\n            }\n            else {\n                throw Errors.argumentOutOfRange(\"languageVersion\");\n            }\n        }\n    }\n}\n///<reference path=\'..\\text\\references.ts\' />\n\n///<reference path=\'..\\..\\harness\\external\\json2stringify.ts\' />\n///<reference path=\'characterInfo.ts\' />\n///<reference path=\'constants.ts\' />\n///<reference path=\'formattingOptions.ts\' />\n///<reference path=\'indentation.ts\' />\n///<reference path=\'languageVersion.ts\' />\n///<reference path=\'parseOptions.ts\' />\n///<reference path=\'positionedElement.ts\' />\n///<reference path=\'scanner.ts\' />\n///<reference path=\'scannerUtilities.generated.ts\' />\n///<reference path=\'separatedSyntaxList.ts\' />\n///<reference path=\'slidingWindow.ts\' />\n///<reference path=\'strings.ts\' />\n///<reference path=\'syntax.ts\' />\n///<reference path=\'syntaxDiagnostic.ts\' />\n///<reference path=\'syntaxElement.ts\' />\n///<reference path=\'syntaxFactory.generated.ts\' />\n///<reference path=\'syntaxFacts.ts\' />\n///<reference path=\'syntaxFacts2.ts\' />\n///<reference path=\'syntaxKind.ts\' />\n///<reference path=\'syntaxList.ts\' />\n///<reference path=\'syntaxNode.ts\' />\n///<reference path=\'syntaxNodeOrToken.ts\' />\n///<reference path=\'syntaxNodes.generated.ts\' />\n///<reference path=\'syntaxRewriter.generated.ts\' />\n\n// SyntaxDedenter depends on SyntaxRewriter\n///<reference path=\'syntaxDedenter.ts\' />\n// SyntaxIndenter depends on SyntaxRewriter\n///<reference path=\'syntaxIndenter.ts\' />\n\n///<reference path=\'syntaxToken.generated.ts\' />\n///<reference path=\'syntaxToken.ts\' />\n///<reference path=\'syntaxTokenReplacer.ts\' />\n///<reference path=\'syntaxTrivia.ts\' />\n///<reference path=\'syntaxTriviaList.ts\' />\n///<reference path=\'syntaxUtilities.ts\' />\n///<reference path=\'syntaxVisitor.generated.ts\' />\n///<reference path=\'syntaxWalker.generated.ts\' />\n\n// PositionTrackingWalker depends on SyntaxWalker\n///<reference path=\'positionTrackingWalker.ts\' />\n\n// SyntaxInformationMap depends on SyntaxWalker\n///<reference path=\'syntaxInformationMap.ts\' />\n\n// SyntaxInformationMap depends on SyntaxWalker\n///<reference path=\'syntaxNodeInvariantsChecker.ts\' />\n\n// DepthLimitedWalker depends on PositionTrackingWalker\n///<reference path=\'depthLimitedWalker.ts\' />\n\n// Parser depends on PositionTrackingWalker\n///<reference path=\'parser.ts\' />\n\n// SyntaxTree depends on PositionTrackingWalker\n///<reference path=\'syntaxTree.ts\' />\n\n///<reference path=\'textSpanWalker.ts\' />\n///<reference path=\'unicode.ts\' />\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export module CompilerDiagnostics {\n        export var debug = false;\n        export interface IDiagnosticWriter {\n            Alert(output: string): void;\n        }\n\n        export var diagnosticWriter: IDiagnosticWriter = null;\n\n        export var analysisPass: number = 0;\n\n        export function Alert(output: string) {\n            if (diagnosticWriter) {\n                diagnosticWriter.Alert(output);\n            }\n        }\n\n        export function debugPrint(s: string) {\n            if (debug) {\n                Alert(s);\n            }\n        }\n\n        export function assert(condition: boolean, s: string) {\n            if (debug) {\n                if (!condition) {\n                    Alert(s);\n                }\n            }\n        }\n\n    }\n\n    export interface IDignosticsReporter {\n        addDiagnostic(diagnostic: TypeScript.IDiagnostic): void;\n    }\n\n    export interface ILogger {\n        information(): boolean;\n        debug(): boolean;\n        warning(): boolean;\n        error(): boolean;\n        fatal(): boolean;\n        log(s: string): void;\n    }\n\n    export class NullLogger implements ILogger {\n        public information(): boolean { return false; }\n        public debug(): boolean { return false; }\n        public warning(): boolean { return false; }\n        public error(): boolean { return false; }\n        public fatal(): boolean { return false; }\n        public log(s: string): void {\n        }\n    }\n\n    export function timeFunction(logger: ILogger, funcDescription: string, func: () => any): any {\n        var start = (new Date()).getTime();\n        var result = func();\n        var end = (new Date()).getTime();\n        logger.log(funcDescription + \" completed in \" + (end - start) + \" msec\");\n        return result;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export function hasFlag(val: number, flag: number): boolean {\n        return (val & flag) !== 0;\n    }\n\n    export function withoutFlag(val: number, flag: number): number {\n        return val & ~flag;\n    }\n\n    export enum ASTFlags {\n        None = 0,\n        SingleLine = 1 << 1,\n        OptionalName = 1 << 2,\n        TypeReference = 1 << 3,\n        EnumElement = 1 << 4,\n        EnumMapElement = 1 << 5,\n    }\n\n    export enum DeclFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n    }\n\n    export enum ModuleFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        IsEnum = 1 << 7,\n        IsWholeFile = 1 << 8,\n        IsDynamic = 1 << 9,\n    }\n\n    export enum VariableFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        Property = 1 << 8,\n        ClassProperty = 1 << 11,\n        Constant = 1 << 12,\n        EnumElement = 1 << 13\n    }\n\n    export enum FunctionFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        GetAccessor = 1 << 5,\n        SetAccessor = 1 << 6,\n        Signature = 1 << 7,\n        Method = 1 << 8,\n        CallMember = 1 << 9,\n        ConstructMember = 1 << 10,\n        IsFatArrowFunction = 1 << 11,\n        IndexerMember = 1 << 12,\n        IsFunctionExpression = 1 << 13,\n    }\n\n    export function ToDeclFlags(functionFlags: FunctionFlags) : DeclFlags;\n    export function ToDeclFlags(varFlags: VariableFlags) : DeclFlags;\n    export function ToDeclFlags(moduleFlags: ModuleFlags): DeclFlags;\n    export function ToDeclFlags(fncOrVarOrModuleFlags: any) {\n        return <DeclFlags>fncOrVarOrModuleFlags;\n    }\n\n    export enum TypeRelationshipFlags {\n        SuccessfulComparison = 0,\n        RequiredPropertyIsMissing = 1 << 1,\n        IncompatibleSignatures = 1 << 2,\n        SourceSignatureHasTooManyParameters = 3,\n        IncompatibleReturnTypes = 1 << 4,\n        IncompatiblePropertyTypes = 1 << 5,\n        IncompatibleParameterTypes = 1 << 6,\n        InconsistantPropertyAccesibility = 1 << 7,\n    }\n\n    export enum ModuleGenTarget {\n        Synchronous = 0,\n        Asynchronous = 1,\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    // Note: Any addition to the NodeType should also be supported with addition to AstWalkerDetailCallback\n    export enum NodeType {\n        None,\n        List,\n        Script,\n\n        // Literals\n        TrueLiteral,\n        FalseLiteral,\n        StringLiteral,\n        RegularExpressionLiteral,\n        NumericLiteral,\n        NullLiteral,\n\n        // Types\n        TypeParameter,\n        GenericType,\n        TypeRef,\n\n        // Declarations\n        FunctionDeclaration,\n        ClassDeclaration,\n        InterfaceDeclaration,\n        ModuleDeclaration,\n        ImportDeclaration,\n        VariableDeclarator,\n        VariableDeclaration,\n        Parameter,\n\n        // Expressions\n        Name,\n        ArrayLiteralExpression,\n        ObjectLiteralExpression,\n        OmittedExpression,\n        VoidExpression,\n        CommaExpression,\n        PlusExpression,\n        NegateExpression,\n        DeleteExpression,\n        ThisExpression,\n        SuperExpression,\n        InExpression,\n        MemberAccessExpression,\n        InstanceOfExpression,\n        TypeOfExpression,\n        ElementAccessExpression,\n        InvocationExpression,\n        ObjectCreationExpression,\n        AssignmentExpression,\n        AddAssignmentExpression,\n        SubtractAssignmentExpression,\n        DivideAssignmentExpression,\n        MultiplyAssignmentExpression,\n        ModuloAssignmentExpression,\n        AndAssignmentExpression,\n        ExclusiveOrAssignmentExpression,\n        OrAssignmentExpression,\n        LeftShiftAssignmentExpression,\n        SignedRightShiftAssignmentExpression,\n        UnsignedRightShiftAssignmentExpression,\n        ConditionalExpression,\n        LogicalOrExpression,\n        LogicalAndExpression,\n        BitwiseOrExpression,\n        BitwiseExclusiveOrExpression,\n        BitwiseAndExpression,\n        EqualsWithTypeConversionExpression,\n        NotEqualsWithTypeConversionExpression,\n        EqualsExpression,\n        NotEqualsExpression,\n        LessThanExpression,\n        LessThanOrEqualExpression,\n        GreaterThanExpression,\n        GreaterThanOrEqualExpression,\n        AddExpression,\n        SubtractExpression,\n        MultiplyExpression,\n        DivideExpression,\n        ModuloExpression,\n        LeftShiftExpression,\n        SignedRightShiftExpression,\n        UnsignedRightShiftExpression,\n        BitwiseNotExpression,\n        LogicalNotExpression,\n        PreIncrementExpression,\n        PreDecrementExpression,\n        PostIncrementExpression,\n        PostDecrementExpression,\n        CastExpression,\n        ParenthesizedExpression,\n        Member,\n\n        // Statements\n        Block,\n        BreakStatement,\n        ContinueStatement,\n        DebuggerStatement,\n        DoStatement,\n        EmptyStatement,\n        ExportAssignment,\n        ExpressionStatement,\n        ForInStatement,\n        ForStatement,\n        IfStatement,\n        LabeledStatement,\n        ReturnStatement,\n        SwitchStatement,\n        ThrowStatement,\n        TryStatement,\n        VariableStatement,\n        WhileStatement,\n        WithStatement,\n\n        // Clauses\n        CaseClause,\n        CatchClause,\n\n        Comment,\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class BlockIntrinsics {\n        public prototype = undefined;\n        public toString = undefined;\n        public toLocaleString = undefined;\n        public valueOf = undefined;\n        public hasOwnProperty = undefined;\n        public propertyIsEnumerable = undefined;\n        public isPrototypeOf = undefined;\n\n        constructor () {\n            // initialize the \'constructor\' field\n            this[\"constructor\"] = undefined;\n        }\n    }\n\n    export interface IHashTable {\n        getAllKeys(): string[];\n        add(key: string, data): boolean;\n        addOrUpdate(key: string, data): boolean;\n        map(fn: (k: string, value: any, context: any) => void , context: any): void;\n        every(fn: (k: string, value: any, context: any) => void , context: any): boolean;\n        some(fn: (k: string, value: any, context: any) => void , context: any): boolean;\n        count(): number;\n        lookup(key: string): any;\n    }\n\n    export class StringHashTable implements IHashTable {\n        public itemCount = 0;\n        public table: any = new BlockIntrinsics();\n\n        public getAllKeys(): string[] {\n            var result: string[] = [];\n\n            for (var k in this.table) {\n                if (this.table[k] !== undefined) {\n                    result.push(k);\n                }\n            }\n\n            return result;\n        }\n\n        public add(key: string, data): boolean {\n            if (this.table[key] !== undefined) {\n                return false;\n            }\n\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        }\n\n        public addOrUpdate(key: string, data): boolean {\n            if (this.table[key] !== undefined) {\n                this.table[key] = data;\n                return false;\n            }\n\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        }\n\n        public map(fn: (k: string, value: any, context: any) => void , context: any) {\n            for (var k in this.table) {\n                var data = this.table[k];\n\n                if (data !== undefined) {\n                    fn(k, this.table[k], context);\n                }\n            }\n        }\n\n        public every(fn: (k: string, value: any, context: any) => void , context: any) {\n            for (var k in this.table) {\n                var data = this.table[k];\n\n                if (data !== undefined) {\n                    if (!fn(k, this.table[k], context)) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }\n\n        public some(fn: (k: string, value: any, context: any) => void , context: any) {\n            for (var k in this.table) {\n                var data = this.table[k];\n\n                if (data !== undefined) {\n                    if (fn(k, this.table[k], context)) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        public count(): number {\n            return this.itemCount;\n        }\n\n        public lookup(key: string) {\n            var data = this.table[key];\n            return data === undefined ? null : data;\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export interface IASTSpan {\n        minChar: number;\n        limChar: number;\n        trailingTriviaWidth: number;\n    }\n\n    export class ASTSpan implements IASTSpan {\n        public minChar: number = -1;  // -1 = \"undefined\" or \"compiler generated\"\n        public limChar: number = -1;  // -1 = \"undefined\" or \"compiler generated\"\n        public trailingTriviaWidth = 0;\n    }\n\n    export var astID = 0;\n\n    export function structuralEqualsNotIncludingPosition(ast1: AST, ast2: AST): boolean {\n        return structuralEquals(ast1, ast2, false);\n    }\n\n    export function structuralEqualsIncludingPosition(ast1: AST, ast2: AST): boolean {\n        return structuralEquals(ast1, ast2, true);\n    }\n\n    function structuralEquals(ast1: AST, ast2: AST, includingPosition: boolean): boolean {\n        if (ast1 === ast2) {\n            return true;\n        }\n\n        return ast1 !== null && ast2 !== null &&\n               ast1.nodeType === ast2.nodeType &&\n               ast1.structuralEquals(ast2, includingPosition);\n    }\n\n    function astArrayStructuralEquals(array1: AST[], array2: AST[], includingPosition): boolean {\n        return ArrayUtilities.sequenceEquals(array1, array2,\n            includingPosition ? structuralEqualsIncludingPosition : structuralEqualsNotIncludingPosition);\n    }\n\n    export class AST implements IASTSpan {\n        public minChar: number = -1;  // -1 = \"undefined\" or \"compiler generated\"\n        public limChar: number = -1;  // -1 = \"undefined\" or \"compiler generated\"\n        public trailingTriviaWidth = 0;\n\n        private _flags = ASTFlags.None;\n\n        public typeCheckPhase = -1;\n\n        private astID = astID++;\n\n        // REVIEW: for diagnostic purposes\n        public passCreated: number = CompilerDiagnostics.analysisPass;\n\n        public preComments: Comment[] = null;\n        public postComments: Comment[] = null;\n        private docComments: Comment[] = null;\n\n        constructor(public nodeType: NodeType) {\n        }\n\n        public shouldEmit(): boolean {\n            return true;\n        }\n\n        public isExpression() { return false; }\n        public isStatementOrExpression() { return false; }\n\n        public getFlags(): ASTFlags {\n            return this._flags;\n        }\n\n        // Must only be called from SyntaxTreeVisitor\n        public setFlags(flags: ASTFlags): void {\n            this._flags = flags;\n        }\n\n        public getLength() { return this.limChar - this.minChar; }\n\n        public getID() { return this.astID; }\n\n        public isDeclaration() { return false; }\n\n        public isStatement() {\n            return false;\n        }\n\n        public emit(emitter: Emitter) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            this.emitWorker(emitter);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            throw new Error(\"please implement in derived class\");\n        }\n\n        public getDocComments(): Comment[] {\n            if (!this.isDeclaration() || !this.preComments || this.preComments.length === 0) {\n                return [];\n            }\n\n            if (!this.docComments) {\n                var preCommentsLength = this.preComments.length;\n                var docComments: Comment[] = [];\n                for (var i = preCommentsLength - 1; i >= 0; i--) {\n                    if (this.preComments[i].isDocComment()) {\n                        var prevDocComment = docComments.length > 0 ? docComments[docComments.length - 1] : null;\n                        if (prevDocComment === null || // If the help comments were not yet set then this is the comment\n                             (this.preComments[i].limLine === prevDocComment.minLine ||\n                              this.preComments[i].limLine + 1 === prevDocComment.minLine)) { // On same line or next line\n                            docComments.push(this.preComments[i]);\n                            continue;\n                        }\n                    }\n                    break;\n                }\n\n                this.docComments = docComments.reverse();\n            }\n\n            return this.docComments;\n        }\n\n        public structuralEquals(ast: AST, includingPosition: boolean): boolean {\n            if (includingPosition) {\n                if (this.minChar !== ast.minChar || this.limChar !== ast.limChar) {\n                    return false;\n                }\n            }\n\n            return this._flags === ast._flags &&\n                   astArrayStructuralEquals(this.preComments, ast.preComments, includingPosition) &&\n                   astArrayStructuralEquals(this.postComments, ast.postComments, includingPosition)\n        }\n    }\n\n    export class ASTList extends AST {\n        public members: AST[] = [];\n\n        constructor() {\n            super(NodeType.List);\n        }\n\n        public append(ast: AST) {\n            this.members[this.members.length] = ast;\n            return this;\n        }\n\n        public emit(emitter: Emitter) {\n            emitter.recordSourceMappingStart(this);\n            emitter.emitModuleElements(this);\n            emitter.recordSourceMappingEnd(this);\n        }\n\n        public structuralEquals(ast: ASTList, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   astArrayStructuralEquals(this.members, ast.members, includingPosition);\n        }\n    }\n\n    export class Expression extends AST {\n        constructor(nodeType: NodeType) {\n            super(nodeType);\n        }\n    }\n\n    export class Identifier extends Expression {\n        public text: string;\n\n        // \'actualText\' is the text that the user has entered for the identifier. the text might \n        // include any Unicode escape sequences (e.g.: \\u0041 for \'A\'). \'text\', however, contains \n        // the resolved value of any escape sequences in the actual text; so in the previous \n        // example, actualText = \'\\u0041\', text = \'A\'.\n        //\n        // For purposes of finding a symbol, use text, as this will allow you to match all \n        // variations of the variable text. For full-fidelity translation of the user input, such\n        // as emitting, use the actualText field.\n        // \n        // Note: \n        //    To change text, and to avoid running into a situation where \'actualText\' does not \n        //    match \'text\', always use setText.\n        constructor(public actualText: string) {\n            super(NodeType.Name);\n            this.setText(actualText);\n        }\n\n        public setText(actualText: string) {\n            this.actualText = actualText;\n            this.text = actualText;\n        }\n\n        public isMissing() { return false; }\n\n        public emit(emitter: Emitter) {\n            emitter.emitName(this, true);\n        }\n\n        public structuralEquals(ast: Identifier, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.text === ast.text &&\n                   this.actualText === ast.actualText &&\n                   this.isMissing() === ast.isMissing();\n        }\n    }\n\n    export class MissingIdentifier extends Identifier {\n        constructor() {\n            super(\"__missing\");\n        }\n\n        public isMissing() {\n            return true;\n        }\n\n        public emit(emitter: Emitter) {\n            // Emit nothing for a missing ID\n        }\n    }\n\n    export class LiteralExpression extends Expression {\n        constructor(nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            switch (this.nodeType) {\n                case NodeType.NullLiteral:\n                    emitter.writeToOutput(\"null\");\n                    break;\n                case NodeType.FalseLiteral:\n                    emitter.writeToOutput(\"false\");\n                    break;\n                case NodeType.TrueLiteral:\n                    emitter.writeToOutput(\"true\");\n                    break;\n                default:\n                    throw new Error(\"please implement in derived class\");\n            }\n        }\n\n        public structuralEquals(ast: ParenthesizedExpression, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition);\n        }\n    }\n\n    export class ThisExpression extends Expression {\n        constructor() {\n            super(NodeType.ThisExpression);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            if (emitter.thisFunctionDeclaration && (hasFlag(emitter.thisFunctionDeclaration.getFunctionFlags(), FunctionFlags.IsFatArrowFunction))) {\n                emitter.writeToOutput(\"_this\");\n            }\n            else {\n                emitter.writeToOutput(\"this\");\n            }\n        }\n\n        public structuralEquals(ast: ParenthesizedExpression, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition);\n        }\n    }\n\n    export class SuperExpression extends Expression {\n        constructor() {\n            super(NodeType.SuperExpression);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.emitSuperReference();\n        }\n\n        public structuralEquals(ast: ParenthesizedExpression, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition);\n        }\n    }\n\n    export class ParenthesizedExpression extends Expression {\n        constructor(public expression: AST) {\n            super(NodeType.ParenthesizedExpression);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(\"(\");\n            this.expression.emit(emitter);\n            emitter.writeToOutput(\")\");\n        }\n\n        public structuralEquals(ast: ParenthesizedExpression, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.expression, ast.expression, includingPosition);\n        }\n    }\n\n    export class UnaryExpression extends Expression {\n        public castTerm: TypeReference = null;\n\n        constructor(nodeType: NodeType, public operand: AST) {\n            super(nodeType);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            switch (this.nodeType) {\n                case NodeType.PostIncrementExpression:\n                    this.operand.emit(emitter);\n                    emitter.writeToOutput(\"++\");\n                    break;\n                case NodeType.LogicalNotExpression:\n                    emitter.writeToOutput(\"!\");\n                    this.operand.emit(emitter);\n                    break;\n                case NodeType.PostDecrementExpression:\n                    this.operand.emit(emitter);\n                    emitter.writeToOutput(\"--\");\n                    break;\n                case NodeType.ObjectLiteralExpression:\n                    emitter.emitObjectLiteral(this);\n                    break;\n                case NodeType.ArrayLiteralExpression:\n                    emitter.emitArrayLiteral(this);\n                    break;\n                case NodeType.BitwiseNotExpression:\n                    emitter.writeToOutput(\"~\");\n                    this.operand.emit(emitter);\n                    break;\n                case NodeType.NegateExpression:\n                    emitter.writeToOutput(\"-\");\n                    if (this.operand.nodeType === NodeType.NegateExpression || this.operand.nodeType === NodeType.PreDecrementExpression) {\n                        emitter.writeToOutput(\" \");\n                    }\n                    this.operand.emit(emitter);\n                    break;\n                case NodeType.PlusExpression:\n                    emitter.writeToOutput(\"+\");\n                    if (this.operand.nodeType === NodeType.PlusExpression || this.operand.nodeType === NodeType.PreIncrementExpression) {\n                        emitter.writeToOutput(\" \");\n                    }\n                    this.operand.emit(emitter);\n                    break;\n                case NodeType.PreIncrementExpression:\n                    emitter.writeToOutput(\"++\");\n                    this.operand.emit(emitter);\n                    break;\n                case NodeType.PreDecrementExpression:\n                    emitter.writeToOutput(\"--\");\n                    this.operand.emit(emitter);\n                    break;\n                case NodeType.TypeOfExpression:\n                    emitter.writeToOutput(\"typeof \");\n                    this.operand.emit(emitter);\n                    break;\n                case NodeType.DeleteExpression:\n                    emitter.writeToOutput(\"delete \");\n                    this.operand.emit(emitter);\n                    break;\n                case NodeType.VoidExpression:\n                    emitter.writeToOutput(\"void \");\n                    this.operand.emit(emitter);\n                    break;\n                case NodeType.CastExpression:\n                    this.operand.emit(emitter);\n                    break;\n                default:\n                    throw new Error(\"please implement in derived class\");\n            }\n        }\n\n        public structuralEquals(ast: UnaryExpression, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.castTerm, ast.castTerm, includingPosition) &&\n                   structuralEquals(this.operand, ast.operand, includingPosition);\n        }\n    }\n\n    export class CallExpression extends Expression {\n        constructor(nodeType: NodeType,\n                    public target: AST,\n                    public typeArguments: ASTList,\n                    public arguments: ASTList) {\n            super(nodeType);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            if (this.nodeType === NodeType.ObjectCreationExpression) {\n                emitter.emitNew(this.target, this.arguments);\n            }\n            else {\n                emitter.emitCall(this, this.target, this.arguments);\n            }\n        }\n\n        public structuralEquals(ast: CallExpression, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.target, ast.target, includingPosition) &&\n                   structuralEquals(this.typeArguments, ast.typeArguments, includingPosition) &&\n                   structuralEquals(this.arguments, ast.arguments, includingPosition);\n        }\n    }\n\n    export class BinaryExpression extends Expression {\n        constructor(nodeType: NodeType,\n                    public operand1: AST,\n                    public operand2: AST) {\n            super(nodeType);\n        }\n\n        public static getTextForBinaryToken(nodeType: NodeType): string {\n            switch (nodeType) {\n                case NodeType.CommaExpression: return \",\";\n                case NodeType.AssignmentExpression: return \"=\";\n                case NodeType.AddAssignmentExpression: return \"+=\";\n                case NodeType.SubtractAssignmentExpression: return \"-=\";\n                case NodeType.MultiplyAssignmentExpression: return \"*=\";\n                case NodeType.DivideAssignmentExpression: return \"/=\";\n                case NodeType.ModuloAssignmentExpression: return \"%=\";\n                case NodeType.AndAssignmentExpression: return \"&=\";\n                case NodeType.ExclusiveOrAssignmentExpression: return \"^=\";\n                case NodeType.OrAssignmentExpression: return \"|=\";\n                case NodeType.LeftShiftAssignmentExpression: return \"<<=\";\n                case NodeType.SignedRightShiftAssignmentExpression: return \">>=\";\n                case NodeType.UnsignedRightShiftAssignmentExpression: return \">>>=\";\n                case NodeType.LogicalOrExpression: return \"||\";\n                case NodeType.LogicalAndExpression: return \"&&\";\n                case NodeType.BitwiseOrExpression: return \"|\";\n                case NodeType.BitwiseExclusiveOrExpression: return \"^\";\n                case NodeType.BitwiseAndExpression: return \"&\";\n                case NodeType.EqualsWithTypeConversionExpression: return \"==\";\n                case NodeType.NotEqualsWithTypeConversionExpression: return \"!=\";\n                case NodeType.EqualsExpression: return \"===\";\n                case NodeType.NotEqualsExpression: return \"!==\";\n                case NodeType.LessThanExpression: return \"<\";\n                case NodeType.GreaterThanExpression: return \">\";\n                case NodeType.LessThanOrEqualExpression: return \"<=\"\n                case NodeType.GreaterThanOrEqualExpression: return \">=\"\n                case NodeType.InstanceOfExpression: return \"instanceof\";\n                case NodeType.InExpression: return \"in\";\n                case NodeType.LeftShiftExpression: return \"<<\";\n                case NodeType.SignedRightShiftExpression: return \">>\"\n                case NodeType.UnsignedRightShiftExpression: return \">>>\"\n                case NodeType.MultiplyExpression: return \"*\"\n                case NodeType.DivideExpression: return \"/\"\n                case NodeType.ModuloExpression: return \"%\"\n                case NodeType.AddExpression: return \"+\"\n                case NodeType.SubtractExpression: return \"-\";\n            }\n\n            throw Errors.invalidOperation();\n        }\n\n        public emitWorker(emitter: Emitter) {\n            switch (this.nodeType) {\n                case NodeType.MemberAccessExpression:\n                    if (!emitter.tryEmitConstant(this)) {\n                        this.operand1.emit(emitter);\n                        emitter.writeToOutput(\".\");\n                        emitter.emitName(<Identifier>this.operand2, false);\n                    }\n                    break;\n                case NodeType.ElementAccessExpression:\n                    emitter.emitIndex(this.operand1, this.operand2);\n                    break;\n\n                case NodeType.Member:\n                    if (this.operand2.nodeType === NodeType.FunctionDeclaration && (<FunctionDeclaration>this.operand2).isAccessor()) {\n                        var funcDecl = <FunctionDeclaration>this.operand2;\n                        if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor)) {\n                            emitter.writeToOutput(\"get \");\n                        }\n                        else {\n                            emitter.writeToOutput(\"set \");\n                        }\n                        this.operand1.emit(emitter);\n                    }\n                    else {\n                        this.operand1.emit(emitter);\n                        emitter.writeToOutputTrimmable(\": \");\n                    }\n                    this.operand2.emit(emitter);\n                    break;\n                case NodeType.CommaExpression:\n                    this.operand1.emit(emitter);\n                    emitter.writeToOutput(\", \");\n                    this.operand2.emit(emitter);\n                    break;\n                default:\n                    {\n                        this.operand1.emit(emitter);\n                        var binOp = BinaryExpression.getTextForBinaryToken(this.nodeType);\n                        if (binOp === \"instanceof\") {\n                            emitter.writeToOutput(\" instanceof \");\n                        }\n                        else if (binOp === \"in\") {\n                            emitter.writeToOutput(\" in \");\n                        }\n                        else {\n                            emitter.writeToOutputTrimmable(\" \" + binOp + \" \");\n                        }\n                        this.operand2.emit(emitter);\n                    }\n            }\n        }\n\n        public structuralEquals(ast: BinaryExpression, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.operand1, ast.operand1, includingPosition) &&\n                   structuralEquals(this.operand2, ast.operand2, includingPosition);\n        }\n    }\n\n    export class ConditionalExpression extends Expression {\n        constructor(public operand1: AST,\n                    public operand2: AST,\n                    public operand3: AST) {\n            super(NodeType.ConditionalExpression);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            this.operand1.emit(emitter);\n            emitter.writeToOutput(\" ? \");\n            this.operand2.emit(emitter);\n            emitter.writeToOutput(\" : \");\n            this.operand3.emit(emitter);\n        }\n\n        public structuralEquals(ast: ConditionalExpression, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.operand1, ast.operand1, includingPosition) &&\n                   structuralEquals(this.operand2, ast.operand2, includingPosition) &&\n                   structuralEquals(this.operand3, ast.operand3, includingPosition);\n        }\n    }\n\n    export class NumberLiteral extends Expression {\n        constructor(public value: number, public text: string) {\n            super(NodeType.NumericLiteral);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(this.text);\n        }\n\n        public structuralEquals(ast: NumberLiteral, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.value === ast.value &&\n                   this.text === ast.text;\n        }\n    }\n\n    export class RegexLiteral extends Expression {\n        constructor(public text: string) {\n            super(NodeType.RegularExpressionLiteral);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(this.text);\n        }\n\n        public structuralEquals(ast: RegexLiteral, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.text === ast.text;\n        }\n    }\n\n    export class StringLiteral extends Expression {\n        constructor(public actualText: string, public text: string) {\n            super(NodeType.StringLiteral);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(this.actualText);\n        }\n\n        public structuralEquals(ast: StringLiteral, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.actualText === ast.actualText;\n        }\n    }\n\n    export class ImportDeclaration extends AST {\n        public isDynamicImport = false;\n        public isStatementOrExpression() { return true; }\n\n        constructor(public id: Identifier, public alias: AST) {\n            super(NodeType.ImportDeclaration);\n        }\n\n        public isDeclaration() { return true; }\n\n        public emit(emitter: Emitter) {\n            // REVIEW: Only modules may be aliased for now, though there\'s no real\n            // restriction on what the type symbol may be\n            if (emitter.importStatementShouldBeEmitted(this)) {\n                var prevModAliasId = emitter.modAliasId;\n                var prevFirstModAlias = emitter.firstModAlias;\n\n                emitter.recordSourceMappingStart(this);\n                emitter.emitComments(this, true);\n                emitter.writeToOutput(\"var \" + this.id.actualText + \" = \");\n                emitter.modAliasId = this.id.actualText;\n                emitter.firstModAlias = this.firstAliasedModToString();\n                var aliasAST = this.alias.nodeType === NodeType.TypeRef ? (<TypeReference>this.alias).term : this.alias;\n\n                emitter.emitJavascript(aliasAST, false);\n                emitter.writeToOutput(\";\");\n\n                emitter.emitComments(this, false);\n                emitter.recordSourceMappingEnd(this);\n\n                emitter.modAliasId = prevModAliasId;\n                emitter.firstModAlias = prevFirstModAlias;\n            }\n        }\n\n        public getAliasName(aliasAST: AST = this.alias): string {\n            if (aliasAST.nodeType === NodeType.Name) {\n                return (<Identifier>aliasAST).actualText;\n            } else {\n                var dotExpr = <BinaryExpression>aliasAST;\n                return this.getAliasName(dotExpr.operand1) + \".\" + this.getAliasName(dotExpr.operand2);\n            }\n        }\n\n        public firstAliasedModToString() {\n            if (this.alias.nodeType === NodeType.Name) {\n                return (<Identifier>this.alias).actualText;\n            }\n            else {\n                var dotExpr = <TypeReference>this.alias;\n                var firstMod = <Identifier>(<BinaryExpression>dotExpr.term).operand1;\n                return firstMod.actualText;\n            }\n        }\n\n        public structuralEquals(ast: ImportDeclaration, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.id, ast.id, includingPosition) &&\n                   structuralEquals(this.alias, ast.alias, includingPosition);\n        }\n    }\n\n    export class ExportAssignment extends AST {\n        constructor(public id: Identifier) {\n            super(NodeType.ExportAssignment);\n        }\n\n        public structuralEquals(ast: ExportAssignment, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.id, ast.id, includingPosition);\n        }\n\n        public emit(emitter: Emitter) {\n            emitter.setExportAssignmentIdentifier(this.id.actualText);\n        }\n    }\n\n    export class BoundDecl extends AST {\n        public init: AST = null;\n        public typeExpr: AST = null;\n        private _varFlags = VariableFlags.None;\n        public isDeclaration() { return true; }\n        public isStatementOrExpression() { return true; }\n\n        constructor(public id: Identifier, nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public getVarFlags(): VariableFlags {\n            return this._varFlags;\n        }\n\n        // Must only be called from SyntaxTreeVisitor\n        public setVarFlags(flags: VariableFlags): void {\n            this._varFlags = flags;\n        }\n\n        public isProperty() { return hasFlag(this.getVarFlags(), VariableFlags.Property); }\n\n        public structuralEquals(ast: BoundDecl, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this._varFlags === ast._varFlags &&\n                   structuralEquals(this.init, ast.init, includingPosition) &&\n                   structuralEquals(this.typeExpr, ast.typeExpr, includingPosition) &&\n                   structuralEquals(this.id, ast.id, includingPosition);\n        }\n    }\n\n    export class VariableDeclarator extends BoundDecl {\n        constructor(id: Identifier) {\n            super(id, NodeType.VariableDeclarator);\n        }\n\n        public isExported() { return hasFlag(this.getVarFlags(), VariableFlags.Exported); }\n\n        public isStatic() { return hasFlag(this.getVarFlags(), VariableFlags.Static); }\n\n        public emit(emitter: Emitter) {\n            emitter.emitVariableDeclarator(this);\n        }\n    }\n\n    export class Parameter extends BoundDecl {\n        constructor(id: Identifier) {\n            super(id, NodeType.Parameter);\n        }\n\n        public isOptional = false;\n\n        public isOptionalArg() { return this.isOptional || this.init; }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(this.id.actualText);\n        }\n\n        public structuralEquals(ast: Parameter, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.isOptional === ast.isOptional;\n        }\n    }\n\n    export class FunctionDeclaration extends AST {\n        public hint: string = null;\n        private _functionFlags = FunctionFlags.None;\n        public returnTypeAnnotation: AST = null;\n        public variableArgList = false;\n        public classDecl: NamedDeclaration = null;\n\n        public returnStatementsWithExpressions: ReturnStatement[];\n        public isDeclaration() { return true; }\n\n        constructor(public name: Identifier,\n                    public block: Block,\n                    public isConstructor: boolean,\n                    public typeArguments: ASTList,\n                    public arguments: ASTList,\n                    nodeType: number) {\n\n            super(nodeType);\n        }\n\n        public getFunctionFlags(): FunctionFlags {\n            return this._functionFlags;\n        }\n\n        // Must only be called from SyntaxTreeVisitor\n        public setFunctionFlags(flags: FunctionFlags): void {\n            this._functionFlags = flags;\n        }\n\n        public structuralEquals(ast: FunctionDeclaration, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this._functionFlags === ast._functionFlags &&\n                   this.hint === ast.hint &&\n                   this.variableArgList === ast.variableArgList &&\n                   structuralEquals(this.name, ast.name, includingPosition) &&\n                   structuralEquals(this.block, ast.block, includingPosition) &&\n                   this.isConstructor === ast.isConstructor &&\n                   structuralEquals(this.typeArguments, ast.typeArguments, includingPosition) &&\n                   structuralEquals(this.arguments, ast.arguments, includingPosition);\n        }\n\n        public shouldEmit(): boolean {\n            return !hasFlag(this.getFunctionFlags(), FunctionFlags.Signature) &&\n                   !hasFlag(this.getFunctionFlags(), FunctionFlags.Ambient);\n        }\n\n        public emit(emitter: Emitter) {\n            emitter.emitFunction(this);\n        }\n\n        public getNameText() {\n            if (this.name) {\n                return this.name.actualText;\n            }\n            else {\n                return this.hint;\n            }\n        }\n\n        public isMethod() {\n            return (this.getFunctionFlags() & FunctionFlags.Method) !== FunctionFlags.None;\n        }\n\n        public isCallMember() { return hasFlag(this.getFunctionFlags(), FunctionFlags.CallMember); }\n        public isConstructMember() { return hasFlag(this.getFunctionFlags(), FunctionFlags.ConstructMember); }\n        public isIndexerMember() { return hasFlag(this.getFunctionFlags(), FunctionFlags.IndexerMember); }\n        public isSpecialFn() { return this.isCallMember() || this.isIndexerMember() || this.isConstructMember(); }\n        public isAccessor() { return hasFlag(this.getFunctionFlags(), FunctionFlags.GetAccessor) || hasFlag(this.getFunctionFlags(), FunctionFlags.SetAccessor); }\n        public isGetAccessor() { return hasFlag(this.getFunctionFlags(), FunctionFlags.GetAccessor); }\n        public isSetAccessor() { return hasFlag(this.getFunctionFlags(), FunctionFlags.SetAccessor); }\n        public isStatic() { return hasFlag(this.getFunctionFlags(), FunctionFlags.Static); }\n\n        public isSignature() { return (this.getFunctionFlags() & FunctionFlags.Signature) !== FunctionFlags.None; }\n    }\n\n    export class Script extends AST {\n        public moduleElements: ASTList = null;\n        public referencedFiles: IFileReference[] = [];\n        public requiresExtendsBlock = false;\n        public isDeclareFile = false;\n        public topLevelMod: ModuleDeclaration = null;\n        // Remember if the script contains Unicode chars, that is needed when generating code for this script object to decide the output file correct encoding.\n        public containsUnicodeChar = false;\n        public containsUnicodeCharInComment = false;\n\n        constructor() {\n            super(NodeType.Script);\n        }\n\n        public emit(emitter: Emitter) {\n            if (!this.isDeclareFile) {\n                emitter.emitScriptElements(this, this.requiresExtendsBlock);\n            }\n        }\n\n        public structuralEquals(ast: Script, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.moduleElements, ast.moduleElements, includingPosition);\n        }\n    }\n\n    export class NamedDeclaration extends AST {\n        public isDeclaration() { return true; }\n\n        constructor(nodeType: NodeType,\n                    public name: Identifier,\n                    public members: ASTList) {\n            super(nodeType);\n        }\n\n        public structuralEquals(ast: NamedDeclaration, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.name, ast.name, includingPosition) &&\n                   structuralEquals(this.members, ast.members, includingPosition);\n        }\n    }\n\n    export class ModuleDeclaration extends NamedDeclaration {\n        private _moduleFlags = ModuleFlags.None;\n        public prettyName: string;\n        public amdDependencies: string[] = [];\n        // Remember if the module contains Unicode chars, that is needed for dynamic module as we will generate a file for each.\n        public containsUnicodeChar = false;\n        public containsUnicodeCharInComment = false;\n\n        constructor(name: Identifier, members: ASTList, public endingToken: ASTSpan) {\n            super(NodeType.ModuleDeclaration, name, members);\n\n            this.prettyName = this.name.actualText;\n        }\n\n        public getModuleFlags(): ModuleFlags {\n            return this._moduleFlags;\n        }\n\n        // Must only be called from SyntaxTreeVisitor\n        public setModuleFlags(flags: ModuleFlags): void {\n            this._moduleFlags = flags;\n        }\n\n        public structuralEquals(ast: ModuleDeclaration, includePosition: boolean): boolean {\n            if (super.structuralEquals(ast, includePosition)) {\n                return this._moduleFlags === ast._moduleFlags;\n            }\n\n            return false;\n        }\n\n        public isEnum() { return hasFlag(this.getModuleFlags(), ModuleFlags.IsEnum); }\n        public isWholeFile() { return hasFlag(this.getModuleFlags(), ModuleFlags.IsWholeFile); }\n\n        public shouldEmit(): boolean {\n            if (hasFlag(this.getModuleFlags(), ModuleFlags.Ambient)) {\n                return false;\n            }\n\n            // Always emit a non ambient enum (even empty ones).\n            if (hasFlag(this.getModuleFlags(), ModuleFlags.IsEnum)) {\n                return true;\n            }\n\n            for (var i = 0, n = this.members.members.length; i < n; i++) {\n                var member = this.members.members[i];\n\n                // We should emit *this* module if it contains any non-interface types. \n                // Caveat: if we have contain a module, then we should be emitted *if we want to\n                // emit that inner module as well.\n                if (member.nodeType === NodeType.ModuleDeclaration) {\n                    if ((<ModuleDeclaration>member).shouldEmit()) {\n                        return true;\n                    }\n                }\n                else if (member.nodeType !== NodeType.InterfaceDeclaration) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public emit(emitter: Emitter) {\n            if (this.shouldEmit()) {\n                emitter.emitComments(this, true);\n                emitter.emitModule(this);\n                emitter.emitComments(this, false);\n            }\n        }\n    }\n\n    export class TypeDeclaration extends NamedDeclaration {\n        private _varFlags = VariableFlags.None;\n\n        constructor(nodeType: NodeType,\n                    name: Identifier,\n                    public typeParameters: ASTList,\n                    public extendsList: ASTList,\n                    public implementsList: ASTList,\n                    members: ASTList) {\n            super(nodeType, name, members);\n        }\n\n        public getVarFlags(): VariableFlags {\n            return this._varFlags;\n        }\n\n        // Must only be called from SyntaxTreeVisitor\n        public setVarFlags(flags: VariableFlags): void {\n            this._varFlags = flags;\n        }\n\n        public structuralEquals(ast: TypeDeclaration, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this._varFlags === ast._varFlags &&\n                   structuralEquals(this.typeParameters, ast.typeParameters, includingPosition) &&\n                   structuralEquals(this.extendsList, ast.extendsList, includingPosition) &&\n                   structuralEquals(this.implementsList, ast.implementsList, includingPosition);\n        }\n    }\n\n    export class ClassDeclaration extends TypeDeclaration {\n        public constructorDecl: FunctionDeclaration = null;\n        public endingToken: ASTSpan = null;\n\n        constructor(name: Identifier,\n                    typeParameters: ASTList,\n                    members: ASTList,\n                    extendsList: ASTList,\n                    implementsList: ASTList) {\n            super(NodeType.ClassDeclaration, name, typeParameters, extendsList, implementsList, members);\n        }\n\n        public shouldEmit(): boolean {\n            return !hasFlag(this.getVarFlags(), VariableFlags.Ambient);\n        }\n\n        public emit(emitter: Emitter): void {\n            emitter.emitClass(this);\n        }\n    }\n\n    export class InterfaceDeclaration extends TypeDeclaration {\n        constructor(name: Identifier,\n            typeParameters: ASTList,\n            members: ASTList,\n            extendsList: ASTList,\n            implementsList: ASTList) {\n            super(NodeType.InterfaceDeclaration, name, typeParameters, extendsList, implementsList, members);\n        }\n\n        public shouldEmit(): boolean {\n            return false;\n        }\n    }\n\n    export class Statement extends AST {\n        constructor(nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public isStatement() {\n            return true;\n        }\n\n        public isStatementOrExpression() { return true; }\n    }\n\n    export class ThrowStatement extends Statement {\n        constructor(public expression: Expression) {\n            super(NodeType.ThrowStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(\"throw \");\n            this.expression.emit(emitter);\n            emitter.writeToOutput(\";\");\n        }\n\n        public structuralEquals(ast: ThrowStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n            structuralEquals(this.expression, ast.expression, includingPosition);\n        }\n    }\n\n    export class ExpressionStatement extends Statement {\n        constructor(public expression: AST) {\n            super(NodeType.ExpressionStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            this.expression.emit(emitter);\n            emitter.writeToOutput(\";\");\n        }\n\n        public structuralEquals(ast: ExpressionStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.expression, ast.expression, includingPosition);\n        }\n    }\n\n    export class LabeledStatement extends Statement {\n        constructor(public identifier: Identifier, public statement: AST) {\n            super(NodeType.LabeledStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.recordSourceMappingStart(this.identifier);\n            emitter.writeToOutput(this.identifier.actualText);\n            emitter.recordSourceMappingEnd(this.identifier);\n            emitter.writeLineToOutput(\":\");\n            emitter.emitJavascript(this.statement, true);\n        }\n\n        public structuralEquals(ast: LabeledStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.identifier, ast.identifier, includingPosition) &&\n                   structuralEquals(this.statement, ast.statement, includingPosition);\n        }\n    }\n\n    export class VariableDeclaration extends AST {\n        constructor(public declarators: ASTList) {\n            super(NodeType.VariableDeclaration);\n        }\n\n        public emit(emitter: Emitter) {\n            emitter.emitVariableDeclaration(this);\n        }\n\n        public structuralEquals(ast: VariableDeclaration, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.declarators, ast.declarators, includingPosition);\n        }\n    }\n\n    export class VariableStatement extends Statement {\n        constructor(public declaration: VariableDeclaration) {\n            super(NodeType.VariableStatement);\n        }\n\n        public shouldEmit(): boolean {\n            if (hasFlag(this.getFlags(), ASTFlags.EnumMapElement)) {\n                return false;\n            }\n\n            var varDecl = <VariableDeclarator>this.declaration.declarators.members[0];\n            return !hasFlag(varDecl.getVarFlags(), VariableFlags.Ambient) || varDecl.init !== null;\n        }\n\n        public emitWorker(emitter: Emitter) {\n            if (hasFlag(this.getFlags(), ASTFlags.EnumElement)) {\n                emitter.emitEnumElement(<VariableDeclarator>this.declaration.declarators.members[0]);\n            }\n            else {\n                this.declaration.emit(emitter);\n                emitter.writeToOutput(\";\");\n            }\n        }\n\n        public structuralEquals(ast: VariableStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.declaration, ast.declaration, includingPosition);\n        }\n    }\n\n    export class Block extends Statement {\n        public closeBraceSpan: IASTSpan = null;\n        constructor(public statements: ASTList) {\n            super(NodeType.Block);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeLineToOutput(\" {\");\n            emitter.indenter.increaseIndent();\n            if (this.statements) {\n                emitter.emitModuleElements(this.statements);\n            }\n            emitter.indenter.decreaseIndent();\n            emitter.emitIndent();\n            emitter.writeToOutput(\"}\");\n        }\n\n        public structuralEquals(ast: Block, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.statements, ast.statements, includingPosition);\n        }\n    }\n\n    export class Jump extends Statement {\n        public target: string = null;\n        public hasExplicitTarget() { return (this.target); }\n        public resolvedTarget: Statement = null;\n\n        constructor(nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            if (this.nodeType === NodeType.BreakStatement) {\n                emitter.writeToOutput(\"break\");\n            }\n            else {\n                emitter.writeToOutput(\"continue\");\n            }\n            if (this.hasExplicitTarget()) {\n                emitter.writeToOutput(\" \" + this.target);\n            }\n            emitter.writeToOutput(\";\");\n        }\n\n        public structuralEquals(ast: Jump, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.target === ast.target;\n        }\n    }\n\n    export class WhileStatement extends Statement {\n        constructor(public cond: AST, public body: AST) {\n            super(NodeType.WhileStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(\"while (\");\n            this.cond.emit(emitter);\n            emitter.writeToOutput(\")\");\n            emitter.emitBlockOrStatement(this.body);\n        }\n\n        public structuralEquals(ast: WhileStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.cond, ast.cond, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition);\n        }\n    }\n\n    export class DoStatement extends Statement {\n        public whileSpan: ASTSpan = null;\n\n        constructor(public body: AST, public cond: AST) {\n            super(NodeType.DoStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(\"do\");\n            emitter.emitBlockOrStatement(this.body);\n            emitter.recordSourceMappingStart(this.whileSpan);\n            emitter.writeToOutput(\" while\");\n            emitter.recordSourceMappingEnd(this.whileSpan);\n            emitter.writeToOutput(\'(\');\n            this.cond.emit(emitter);\n            emitter.writeToOutput(\")\");\n            emitter.writeToOutput(\";\");\n        }\n\n        public structuralEquals(ast: DoStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition) &&\n                   structuralEquals(this.cond, ast.cond, includingPosition);\n        }\n    }\n\n    export class IfStatement extends Statement {\n        public statement: ASTSpan = new ASTSpan();\n\n        constructor(public cond: AST,\n                    public thenBod: AST,\n                    public elseBod: AST) {\n            super(NodeType.IfStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput(\"if (\");\n            this.cond.emit(emitter);\n            emitter.writeToOutput(\")\");\n            emitter.recordSourceMappingEnd(this.statement);\n\n            emitter.emitBlockOrStatement(this.thenBod);\n\n            if (this.elseBod) {\n                if (this.elseBod.nodeType === NodeType.IfStatement) {\n                    emitter.writeToOutput(\" else \");\n                    this.elseBod.emit(emitter);\n                }\n                else {\n                    emitter.writeToOutput(\" else\");\n                    emitter.emitBlockOrStatement(this.elseBod);\n                }\n            }\n        }\n\n        public structuralEquals(ast: IfStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.cond, ast.cond, includingPosition) &&\n                   structuralEquals(this.thenBod, ast.thenBod, includingPosition) &&\n                   structuralEquals(this.elseBod, ast.elseBod, includingPosition);\n        }\n    }\n\n    export class ReturnStatement extends Statement {\n        constructor(public returnExpression: AST) {\n            super(NodeType.ReturnStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            if (this.returnExpression) {\n                emitter.writeToOutput(\"return \");\n                this.returnExpression.emit(emitter);\n                emitter.writeToOutput(\";\");\n            }\n            else {\n                emitter.writeToOutput(\"return;\");\n            }\n        }\n\n        public structuralEquals(ast: ReturnStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.returnExpression, ast.returnExpression, includingPosition);\n        }\n    }\n\n    export class ForInStatement extends Statement {\n        constructor(public lval: AST, public obj: AST, public body: AST) {\n            super(NodeType.ForInStatement);\n        }\n\n        public statement: ASTSpan = new ASTSpan();\n\n        public emitWorker(emitter: Emitter) {\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput(\"for (\");\n            this.lval.emit(emitter);\n            emitter.writeToOutput(\" in \");\n            this.obj.emit(emitter);\n            emitter.writeToOutput(\")\");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitBlockOrStatement(this.body);\n        }\n\n        public structuralEquals(ast: ForInStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.lval, ast.lval, includingPosition) &&\n                   structuralEquals(this.obj, ast.obj, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition);\n        }\n    }\n\n    export class ForStatement extends Statement {\n        constructor(public init: AST,\n                    public cond: AST,\n                    public incr: AST,\n                    public body: AST) {\n            super(NodeType.ForStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(\"for (\");\n            if (this.init) {\n                if (this.init.nodeType !== NodeType.List) {\n                    this.init.emit(emitter);\n                }\n                else {\n                    emitter.setInVarBlock((<ASTList>this.init).members.length);\n                    emitter.emitCommaSeparatedList(<ASTList>this.init);\n                }\n            }\n\n            emitter.writeToOutput(\"; \");\n            emitter.emitJavascript(this.cond, false);\n            emitter.writeToOutput(\"; \");\n            emitter.emitJavascript(this.incr, false);\n            emitter.writeToOutput(\")\");\n            emitter.emitBlockOrStatement(this.body);\n        }\n\n        public structuralEquals(ast: ForStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.init, ast.init, includingPosition) &&\n                   structuralEquals(this.cond, ast.cond, includingPosition) &&\n                   structuralEquals(this.incr, ast.incr, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition);\n        }\n    }\n\n    export class WithStatement extends Statement {\n        constructor(public expr: AST, public body: AST) {\n            super(NodeType.WithStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(\"with (\");\n            if (this.expr) {\n                this.expr.emit(emitter);\n            }\n\n            emitter.writeToOutput(\")\");\n            emitter.emitBlockOrStatement(this.body);\n        }\n\n        public structuralEquals(ast: WithStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.expr, ast.expr, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition);\n        }\n    }\n\n    export class SwitchStatement extends Statement {\n        public caseList: ASTList;\n        public defaultCase: CaseClause = null;\n        public statement: ASTSpan = new ASTSpan();\n\n        constructor(public val: AST) {\n            super(NodeType.SwitchStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput(\"switch (\");\n            this.val.emit(emitter);\n            emitter.writeToOutput(\")\");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.writeLineToOutput(\" {\");\n            emitter.indenter.increaseIndent();\n\n            var lastEmittedNode = null;\n            for (var i = 0, n = this.caseList.members.length; i < n; i++) {\n                var caseExpr = this.caseList.members[i];\n\n                emitter.emitSpaceBetweenConstructs(lastEmittedNode, caseExpr);\n                emitter.emitJavascript(caseExpr, true);\n\n                lastEmittedNode = caseExpr;\n            }\n            emitter.indenter.decreaseIndent();\n            emitter.emitIndent();\n            emitter.writeToOutput(\"}\");\n        }\n\n        public structuralEquals(ast: SwitchStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.caseList, ast.caseList, includingPosition) &&\n                   structuralEquals(this.val, ast.val, includingPosition);\n        }\n    }\n\n    export class CaseClause extends AST {\n        public expr: AST = null;\n        public body: ASTList;\n        public colonSpan: ASTSpan = new ASTSpan();\n\n        constructor() {\n            super(NodeType.CaseClause);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            if (this.expr) {\n                emitter.writeToOutput(\"case \");\n                this.expr.emit(emitter);\n            }\n            else {\n                emitter.writeToOutput(\"default\");\n            }\n            emitter.recordSourceMappingStart(this.colonSpan);\n            emitter.writeToOutput(\":\");\n            emitter.recordSourceMappingEnd(this.colonSpan);\n\n            if (this.body.members.length === 1 && this.body.members[0].nodeType === NodeType.Block) {\n                // The case statement was written with curly braces, so emit it with the appropriate formatting\n                this.body.members[0].emit(emitter);\n                emitter.writeLineToOutput(\"\");\n            }\n            else {\n                // No curly braces. Format in the expected way\n                emitter.writeLineToOutput(\"\");\n                emitter.indenter.increaseIndent();\n                this.body.emit(emitter);\n                emitter.indenter.decreaseIndent();\n            }\n        }\n\n        public structuralEquals(ast: CaseClause, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.expr, ast.expr, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition);\n        }\n    }\n\n    export class TypeParameter extends AST {\n        constructor(public name: Identifier, public constraint: AST) {\n            super(NodeType.TypeParameter);\n        }\n\n        public structuralEquals(ast: TypeParameter, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.name, ast.name, includingPosition) &&\n                   structuralEquals(this.constraint, ast.constraint, includingPosition);\n        }\n    }\n\n    export class GenericType extends AST {\n        constructor(public name: AST, public typeArguments: ASTList) {\n            super(NodeType.GenericType);\n        }\n\n        public emit(emitter: Emitter): void {\n            this.name.emit(emitter);\n        }\n\n        public structuralEquals(ast: GenericType, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.name, ast.name, includingPosition) &&\n                   structuralEquals(this.typeArguments, ast.typeArguments, includingPosition);\n        }\n    }\n\n    export class TypeReference extends AST {\n        constructor(public term: AST, public arrayCount: number) {\n            super(NodeType.TypeRef);\n        }\n\n        public emit(emitter: Emitter) {\n            throw new Error(\"should not emit a type ref\");\n        }\n\n        public structuralEquals(ast: TypeReference, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.term, ast.term, includingPosition) &&\n                   this.arrayCount === ast.arrayCount;\n        }\n    }\n\n    export class TryStatement extends Statement {\n        constructor(public tryBody: Block, public catchClause: CatchClause, public finallyBody: Block) {\n            super(NodeType.TryStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(\"try \");\n            this.tryBody.emit(emitter);\n            emitter.emitJavascript(this.catchClause, false);\n\n            if (this.finallyBody) {\n                emitter.writeToOutput(\" finally\");\n                this.finallyBody.emit(emitter);\n            }\n        }\n\n        public structuralEquals(ast: TryStatement, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.tryBody, ast.tryBody, includingPosition) &&\n                   structuralEquals(this.catchClause, ast.catchClause, includingPosition) &&\n                   structuralEquals(this.finallyBody, ast.finallyBody, includingPosition);\n        }\n    }\n\n    export class CatchClause extends AST {\n        constructor(public param: VariableDeclarator, public body: Block) {\n            super(NodeType.CatchClause);\n        }\n\n        public statement: ASTSpan = new ASTSpan();\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(\" \");\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput(\"catch (\");\n            this.param.id.emit(emitter);\n            emitter.writeToOutput(\")\");\n            emitter.recordSourceMappingEnd(this.statement);\n            this.body.emit(emitter);\n        }\n\n        public structuralEquals(ast: CatchClause, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.param, ast.param, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition);\n        }\n    }\n\n    export class DebuggerStatement extends Statement {\n        constructor() {\n            super(NodeType.DebuggerStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(\"debugger;\");\n        }\n    }\n\n    export class OmittedExpression extends Expression {\n        constructor() {\n            super(NodeType.OmittedExpression);\n        }\n\n        public emitWorker(emitter: Emitter) {\n        }\n\n        public structuralEquals(ast: CatchClause, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition);\n        }\n    }\n\n    export class EmptyStatement extends Statement {\n        constructor() {\n            super(NodeType.EmptyStatement);\n        }\n\n        public emitWorker(emitter: Emitter) {\n            emitter.writeToOutput(\";\");\n        }\n\n        public structuralEquals(ast: CatchClause, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition);\n        }\n    }\n\n    export class Comment extends AST {\n        public text: string[] = null;\n        public minLine: number;\n        public limLine: number;\n        private docCommentText: string = null;\n\n        constructor(public content: string,\n                    public isBlockComment: boolean,\n                    public endsLine) {\n            super(NodeType.Comment);\n        }\n\n        public structuralEquals(ast: Comment, includingPosition: boolean): boolean {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.minLine === ast.minLine &&\n                   this.content === ast.content &&\n                   this.isBlockComment === ast.isBlockComment &&\n                   this.endsLine === ast.endsLine;\n        }\n\n        public getText(): string[] {\n            if (this.text === null) {\n                if (this.isBlockComment) {\n                    this.text = this.content.split(\"\\n\");\n                    for (var i = 0; i < this.text.length; i++) {\n                        this.text[i] = this.text[i].replace(/^\\s+|\\s+$/g, \'\');\n                    }\n                }\n                else {\n                    this.text = [(this.content.replace(/^\\s+|\\s+$/g, \'\'))];\n                }\n            }\n\n            return this.text;\n        }\n\n        public isDocComment() {\n            if (this.isBlockComment) {\n                return this.content.charAt(2) === \"*\" && this.content.charAt(3) !== \"/\";\n            }\n\n            return false;\n        }\n\n        public getDocCommentTextValue() {\n            if (this.docCommentText === null) {\n                this.docCommentText = Comment.cleanJSDocComment(this.content);\n            }\n\n            return this.docCommentText;\n        }\n\n        static consumeLeadingSpace(line: string, startIndex: number, maxSpacesToRemove?: number) {\n            var endIndex = line.length;\n            if (maxSpacesToRemove !== undefined) {\n                endIndex = min(startIndex + maxSpacesToRemove, endIndex);\n            }\n\n            for (; startIndex < endIndex; startIndex++) {\n                var charCode = line.charCodeAt(startIndex);\n                if (charCode !== CharacterCodes.space && charCode !== CharacterCodes.tab) {\n                    return startIndex;\n                }\n            }\n\n            if (endIndex !== line.length) {\n                return endIndex;\n            }\n\n            return -1;\n        }\n\n        static isSpaceChar(line: string, index: number) {\n            var length = line.length;\n            if (index < length) {\n                var charCode = line.charCodeAt(index);\n                // If the character is space\n                return charCode === CharacterCodes.space || charCode === CharacterCodes.tab;\n            }\n\n            // If the index is end of the line it is space\n            return index === length;\n        }\n\n        static cleanDocCommentLine(line: string, jsDocStyleComment: boolean, jsDocLineSpaceToRemove?: number) {\n            var nonSpaceIndex = Comment.consumeLeadingSpace(line, 0);\n            if (nonSpaceIndex !== -1) {\n                var jsDocSpacesRemoved = nonSpaceIndex;\n                if (jsDocStyleComment && line.charAt(nonSpaceIndex) === \'*\') { // remove leading * in case of jsDocComment\n                    var startIndex = nonSpaceIndex + 1;\n                    nonSpaceIndex = Comment.consumeLeadingSpace(line, startIndex, jsDocLineSpaceToRemove);\n\n                    if (nonSpaceIndex !== -1) {\n                        jsDocSpacesRemoved = nonSpaceIndex - startIndex;\n                    } else {\n                        return null;\n                    }\n                }\n\n                return {\n                    minChar: nonSpaceIndex,\n                    limChar: line.charAt(line.length - 1) === \"\\r\" ? line.length - 1 : line.length,\n                    jsDocSpacesRemoved: jsDocSpacesRemoved\n                };\n            }\n\n            return null;\n        }\n\n        static cleanJSDocComment(content: string, spacesToRemove?: number) {\n\n            var docCommentLines: string[] = [];\n            content = content.replace(\"/**\", \"\"); // remove /**\n            if (content.length >= 2 && content.charAt(content.length - 1) === \"/\" && content.charAt(content.length - 2) === \"*\") {\n                content = content.substring(0, content.length - 2); // remove last */\n            }\n            var lines = content.split(\"\\n\");\n            var inParamTag = false;\n            for (var l = 0; l < lines.length; l++) {\n                var line = lines[l];\n                var cleanLinePos = Comment.cleanDocCommentLine(line, true, spacesToRemove);\n                if (!cleanLinePos) {\n                    // Whole line empty, read next line\n                    continue;\n                }\n\n                var docCommentText = \"\";\n                var prevPos = cleanLinePos.minChar;\n                for (var i = line.indexOf(\"@\", cleanLinePos.minChar); 0 <= i && i < cleanLinePos.limChar; i = line.indexOf(\"@\", i + 1)) {\n                    // We have encoutered @. \n                    // If we were omitting param comment, we dont have to do anything\n                    // other wise the content of the text till @ tag goes as doc comment\n                    var wasInParamtag = inParamTag;\n\n                    // Parse contents next to @\n                    if (line.indexOf(\"param\", i + 1) === i + 1 && Comment.isSpaceChar(line, i + 6)) {\n                        // It is param tag. \n\n                        // If we were not in param tag earlier, push the contents from prev pos of the tag this tag start as docComment\n                        if (!wasInParamtag) {\n                            docCommentText += line.substring(prevPos, i);\n                        }\n\n                        // New start of contents \n                        prevPos = i;\n                        inParamTag = true;\n                    } else if (wasInParamtag) {\n                        // Non param tag start\n                        prevPos = i;\n                        inParamTag = false;\n                    }\n                }\n\n                if (!inParamTag) {\n                    docCommentText += line.substring(prevPos, cleanLinePos.limChar);\n                }\n\n                // Add line to comment text if it is not only white space line\n                var newCleanPos = Comment.cleanDocCommentLine(docCommentText, false);\n                if (newCleanPos) {\n                    if (spacesToRemove === undefined) {\n                        spacesToRemove = cleanLinePos.jsDocSpacesRemoved;\n                    }\n                    docCommentLines.push(docCommentText);\n                }\n            }\n\n            return docCommentLines.join(\"\\n\");\n        }\n\n        static getDocCommentText(comments: Comment[]) {\n            var docCommentText: string[] = [];\n            for (var c = 0 ; c < comments.length; c++) {\n                var commentText = comments[c].getDocCommentTextValue();\n                if (commentText !== \"\") {\n                    docCommentText.push(commentText);\n                }\n            }\n            return docCommentText.join(\"\\n\");\n        }\n\n        static getParameterDocCommentText(param: string, fncDocComments: Comment[]) {\n            if (fncDocComments.length === 0 || !fncDocComments[0].isBlockComment) {\n                // there were no fnc doc comments and the comment is not block comment then it cannot have \n                // @param comment that can be parsed\n                return \"\";\n            }\n\n            for (var i = 0; i < fncDocComments.length; i++) {\n                var commentContents = fncDocComments[i].content;\n                for (var j = commentContents.indexOf(\"@param\", 0); 0 <= j; j = commentContents.indexOf(\"@param\", j)) {\n                    j += 6;\n                    if (!Comment.isSpaceChar(commentContents, j)) {\n                        // This is not param tag but a tag line @paramxxxxx\n                        continue;\n                    }\n\n                    // This is param tag. Check if it is what we are looking for\n                    j = Comment.consumeLeadingSpace(commentContents, j);\n                    if (j === -1) {\n                        break;\n                    }\n\n                    // Ignore the type expression\n                    if (commentContents.charCodeAt(j) === CharacterCodes.openBrace) {\n                        j++;\n                        // Consume the type\n                        var charCode = 0;\n                        for (var curlies = 1; j < commentContents.length; j++) {\n                            charCode = commentContents.charCodeAt(j);\n                            // { character means we need to find another } to match the found one\n                            if (charCode === CharacterCodes.openBrace) {\n                                curlies++;\n                                continue;\n                            }\n\n                            // } char\n                            if (charCode === CharacterCodes.closeBrace) {\n                                curlies--;\n                                if (curlies === 0) {\n                                    // We do not have any more } to match the type expression is ignored completely\n                                    break;\n                                } else {\n                                    // there are more { to be matched with }\n                                    continue;\n                                }\n                            }\n\n                            // Found start of another tag\n                            if (charCode === CharacterCodes.at) {\n                                break;\n                            }\n                        }\n\n                        // End of the comment\n                        if (j === commentContents.length) {\n                            break;\n                        }\n\n                        // End of the tag, go onto looking for next tag\n                        if (charCode === CharacterCodes.at) {\n                            continue;\n                        }\n\n                        j = Comment.consumeLeadingSpace(commentContents, j + 1);\n                        if (j === -1) {\n                            break;\n                        }\n                    }\n\n                    // Parameter name\n                    if (param !== commentContents.substr(j, param.length) || !Comment.isSpaceChar(commentContents, j + param.length)) {\n                        // this is not the parameter we are looking for\n                        continue;\n                    }\n\n                    // Found the parameter we were looking for\n                    j = Comment.consumeLeadingSpace(commentContents, j + param.length);\n                    if (j === -1) {\n                        return \"\";\n                    }\n\n                    var endOfParam = commentContents.indexOf(\"@\", j);\n                    var paramHelpString = commentContents.substring(j, endOfParam < 0 ? commentContents.length : endOfParam);\n\n                    // Find alignement spaces to remove\n                    var paramSpacesToRemove: number = undefined;\n                    var paramLineIndex = commentContents.substring(0, j).lastIndexOf(\"\\n\") + 1;\n                    if (paramLineIndex !== 0) {\n                        if (paramLineIndex < j && commentContents.charAt(paramLineIndex + 1) === \"\\r\") {\n                            paramLineIndex++;\n                        }\n                    }\n                    var startSpaceRemovalIndex = Comment.consumeLeadingSpace(commentContents, paramLineIndex);\n                    if (startSpaceRemovalIndex !== j && commentContents.charAt(startSpaceRemovalIndex) === \"*\") {\n                        paramSpacesToRemove = j - startSpaceRemovalIndex - 1;\n                    }\n\n                    // Clean jsDocComment and return\n                    return Comment.cleanJSDocComment(paramHelpString, paramSpacesToRemove);\n                }\n            }\n\n            return \"\";\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export interface IAstWalker {\n        walk(ast: AST, parent: AST): AST;\n        options: AstWalkOptions;\n        state: any; // user state object\n    }\n\n    export class AstWalkOptions {\n        public goChildren = true;\n    }\n\n    export interface IAstWalkCallback {\n        (ast: AST, parent: AST, walker: IAstWalker): AST;\n    }\n\n    export interface IAstWalkChildren {\n        (preAst: AST, parent: AST, walker: IAstWalker): void;\n    }\n\n    class AstWalker implements IAstWalker {\n        constructor(\n            private childrenWalkers: IAstWalkChildren[],\n            private pre: IAstWalkCallback,\n            private post: IAstWalkCallback,\n            public options: AstWalkOptions,\n            public state: any) {\n        }\n\n        public walk(ast: AST, parent: AST): AST {\n            var preAst = this.pre(ast, parent, this);\n            if (preAst === undefined) {\n                preAst = ast;\n            }\n            if (this.options.goChildren) {\n                // Call the \"walkChildren\" function corresponding to \"nodeType\".\n                this.childrenWalkers[ast.nodeType](ast, parent, this);\n            }\n            else {\n                // no go only applies to children of node issuing it\n                this.options.goChildren = true;\n            }\n\n            if (this.post) {\n                var postAst = this.post(preAst, parent, this);\n                if (postAst === undefined) {\n                    postAst = preAst;\n                }\n                return postAst;\n            }\n            else {\n                return preAst;\n            }\n        }\n    }\n\n    export class AstWalkerFactory {\n        private childrenWalkers: IAstWalkChildren[] = [];\n\n        constructor() {\n            this.initChildrenWalkers();\n        }\n\n        public walk(ast: AST, pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): AST {\n            return this.getWalker(pre, post, options, state).walk(ast, null)\n        }\n\n        public getWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {\n            return this.getSlowWalker(pre, post, options, state);\n        }\n\n        private getSlowWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {\n            if (!options) {\n                options = new AstWalkOptions();\n            }\n\n            return new AstWalker(this.childrenWalkers, pre, post, options, state);\n        }\n\n        private initChildrenWalkers(): void {\n            this.childrenWalkers[NodeType.None] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.EmptyStatement] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.OmittedExpression] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.TrueLiteral] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.FalseLiteral] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.ThisExpression] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.SuperExpression] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.StringLiteral] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.RegularExpressionLiteral] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.NullLiteral] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.ArrayLiteralExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.ObjectLiteralExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.VoidExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.CommaExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.PlusExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.NegateExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.DeleteExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.InExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.MemberAccessExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.InstanceOfExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.TypeOfExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.NumericLiteral] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Name] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.TypeParameter] = ChildrenWalkers.walkTypeParameterChildren;\n            this.childrenWalkers[NodeType.GenericType] = ChildrenWalkers.walkGenericTypeChildren;\n            this.childrenWalkers[NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren;\n            this.childrenWalkers[NodeType.ElementAccessExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.InvocationExpression] = ChildrenWalkers.walkCallExpressionChildren;\n            this.childrenWalkers[NodeType.ObjectCreationExpression] = ChildrenWalkers.walkCallExpressionChildren;\n            this.childrenWalkers[NodeType.AssignmentExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AddAssignmentExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.SubtractAssignmentExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.DivideAssignmentExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.MultiplyAssignmentExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.ModuloAssignmentExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AndAssignmentExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.ExclusiveOrAssignmentExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.OrAssignmentExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LeftShiftAssignmentExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.SignedRightShiftAssignmentExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.UnsignedRightShiftAssignmentExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogicalOrExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogicalAndExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.BitwiseOrExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.BitwiseExclusiveOrExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.BitwiseAndExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.EqualsWithTypeConversionExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.NotEqualsWithTypeConversionExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.EqualsExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.NotEqualsExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LessThanExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LessThanOrEqualExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.GreaterThanExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.GreaterThanOrEqualExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AddExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.SubtractExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.MultiplyExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.DivideExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.ModuloExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LeftShiftExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.SignedRightShiftExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.UnsignedRightShiftExpression] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.BitwiseNotExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogicalNotExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.PreIncrementExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.PreDecrementExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.PostIncrementExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.PostDecrementExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.CastExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.ParenthesizedExpression] = ChildrenWalkers.walkParenthesizedExpressionChildren;\n            this.childrenWalkers[NodeType.FunctionDeclaration] = ChildrenWalkers.walkFuncDeclChildren;\n            this.childrenWalkers[NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.VariableDeclarator] = ChildrenWalkers.walkBoundDeclChildren;\n            this.childrenWalkers[NodeType.VariableDeclaration] = ChildrenWalkers.walkVariableDeclarationChildren;\n            this.childrenWalkers[NodeType.Parameter] = ChildrenWalkers.walkBoundDeclChildren;\n            this.childrenWalkers[NodeType.ReturnStatement] = ChildrenWalkers.walkReturnStatementChildren;\n            this.childrenWalkers[NodeType.BreakStatement] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.ContinueStatement] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.ThrowStatement] = ChildrenWalkers.walkThrowStatementChildren;\n            this.childrenWalkers[NodeType.ForStatement] = ChildrenWalkers.walkForStatementChildren;\n            this.childrenWalkers[NodeType.ForInStatement] = ChildrenWalkers.walkForInStatementChildren;\n            this.childrenWalkers[NodeType.IfStatement] = ChildrenWalkers.walkIfStatementChildren;\n            this.childrenWalkers[NodeType.WhileStatement] = ChildrenWalkers.walkWhileStatementChildren;\n            this.childrenWalkers[NodeType.DoStatement] = ChildrenWalkers.walkDoStatementChildren;\n            this.childrenWalkers[NodeType.Block] = ChildrenWalkers.walkBlockChildren;\n            this.childrenWalkers[NodeType.CaseClause] = ChildrenWalkers.walkCaseClauseChildren;\n            this.childrenWalkers[NodeType.SwitchStatement] = ChildrenWalkers.walkSwitchStatementChildren;\n            this.childrenWalkers[NodeType.TryStatement] = ChildrenWalkers.walkTryStatementChildren;\n            this.childrenWalkers[NodeType.CatchClause] = ChildrenWalkers.walkCatchClauseChildren;\n            this.childrenWalkers[NodeType.List] = ChildrenWalkers.walkListChildren;\n            this.childrenWalkers[NodeType.Script] = ChildrenWalkers.walkScriptChildren;\n            this.childrenWalkers[NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren;\n            this.childrenWalkers[NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren;\n            this.childrenWalkers[NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren;\n            this.childrenWalkers[NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren;\n            this.childrenWalkers[NodeType.ExportAssignment] = ChildrenWalkers.walkExportAssignmentChildren;\n            this.childrenWalkers[NodeType.WithStatement] = ChildrenWalkers.walkWithStatementChildren;\n            this.childrenWalkers[NodeType.ExpressionStatement] = ChildrenWalkers.walkExpressionStatementChildren;\n            this.childrenWalkers[NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren;\n            this.childrenWalkers[NodeType.VariableStatement] = ChildrenWalkers.walkVariableStatementChildren;\n            this.childrenWalkers[NodeType.Comment] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.DebuggerStatement] = ChildrenWalkers.walkNone;\n\n            // Verify the code is up to date with the enum\n            for (var e in NodeType) {\n                if (NodeType.hasOwnProperty(e) && StringUtilities.isString(NodeType[e])) {\n                    if (this.childrenWalkers[e] === undefined) {\n                        throw new Error(\"initWalkers function is not up to date with enum content!\");\n                    }\n                }\n            }\n        }\n    }\n\n    var globalAstWalkerFactory: AstWalkerFactory;\n\n    export function getAstWalkerFactory(): AstWalkerFactory {\n        if (!globalAstWalkerFactory) {\n            globalAstWalkerFactory = new AstWalkerFactory();\n        }\n        return globalAstWalkerFactory;\n    }\n\n    module ChildrenWalkers {\n        export function walkNone(preAst: ASTList, parent: AST, walker: IAstWalker): void {\n            // Nothing to do\n        }\n\n        export function walkListChildren(preAst: ASTList, parent: AST, walker: IAstWalker): void {\n            var len = preAst.members.length;\n\n            for (var i = 0; i < len; i++) {\n                preAst.members[i] = walker.walk(preAst.members[i], preAst);\n            }\n        }\n\n        export function walkThrowStatementChildren(preAst: ThrowStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.expression) {\n                preAst.expression = walker.walk(preAst.expression, preAst);\n            }\n        }\n\n        export function walkUnaryExpressionChildren(preAst: UnaryExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.castTerm) {\n                preAst.castTerm = <TypeReference>walker.walk(preAst.castTerm, preAst);\n            }\n            if (preAst.operand) {\n                preAst.operand = walker.walk(preAst.operand, preAst);\n            }\n        }\n\n        export function walkParenthesizedExpressionChildren(preAst: ParenthesizedExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.expression) {\n                preAst.expression = walker.walk(preAst.expression, preAst);\n            }\n        }\n\n        export function walkBinaryExpressionChildren(preAst: BinaryExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.operand1) {\n                preAst.operand1 = walker.walk(preAst.operand1, preAst);\n            }\n            if (preAst.operand2) {\n                preAst.operand2 = walker.walk(preAst.operand2, preAst);\n            }\n        }\n\n        export function walkTypeParameterChildren(preAst: TypeParameter, parent: AST, walker: IAstWalker): void {\n            if (preAst.name) {\n                preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            }\n\n            if (preAst.constraint) {\n                preAst.constraint = <ASTList> walker.walk(preAst.constraint, preAst);\n            }\n        }\n\n        export function walkGenericTypeChildren(preAst: GenericType, parent: AST, walker: IAstWalker): void {\n            if (preAst.name) {\n                preAst.name = walker.walk(preAst.name, preAst);\n            }\n\n            if (preAst.typeArguments) {\n                preAst.typeArguments = <ASTList> walker.walk(preAst.typeArguments, preAst);\n            }\n        }\n\n        export function walkTypeReferenceChildren(preAst: TypeReference, parent: AST, walker: IAstWalker): void {\n            if (preAst.term) {\n                preAst.term = walker.walk(preAst.term, preAst);\n            }\n        }\n\n        export function walkCallExpressionChildren(preAst: CallExpression, parent: AST, walker: IAstWalker): void {\n            preAst.target = walker.walk(preAst.target, preAst);\n\n            if (preAst.typeArguments) {\n                preAst.typeArguments = <ASTList> walker.walk(preAst.typeArguments, preAst);\n            }\n\n            if (preAst.arguments) {\n                preAst.arguments = <ASTList> walker.walk(preAst.arguments, preAst);\n            }\n        }\n\n        export function walkTrinaryExpressionChildren(preAst: ConditionalExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.operand1) {\n                preAst.operand1 = walker.walk(preAst.operand1, preAst);\n            }\n            if (preAst.operand2) {\n                preAst.operand2 = walker.walk(preAst.operand2, preAst);\n            }\n            if (preAst.operand3) {\n                preAst.operand3 = walker.walk(preAst.operand3, preAst);\n            }\n        }\n\n        export function walkFuncDeclChildren(preAst: FunctionDeclaration, parent: AST, walker: IAstWalker): void {\n            if (preAst.name) {\n                preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            }\n            if (preAst.typeArguments) {\n                preAst.typeArguments = <ASTList>walker.walk(preAst.typeArguments, preAst);\n            }\n            if (preAst.arguments) {\n                preAst.arguments = <ASTList>walker.walk(preAst.arguments, preAst);\n            }\n            if (preAst.returnTypeAnnotation) {\n                preAst.returnTypeAnnotation = walker.walk(preAst.returnTypeAnnotation, preAst);\n            }\n            if (preAst.block) {\n                preAst.block = <Block>walker.walk(preAst.block, preAst);\n            }\n        }\n\n        export function walkBoundDeclChildren(preAst: BoundDecl, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n            if (preAst.init) {\n                preAst.init = walker.walk(preAst.init, preAst);\n            }\n            if (preAst.typeExpr) {\n                preAst.typeExpr = walker.walk(preAst.typeExpr, preAst);\n            }\n        }\n\n        export function walkReturnStatementChildren(preAst: ReturnStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.returnExpression) {\n                preAst.returnExpression = walker.walk(preAst.returnExpression, preAst);\n            }\n        }\n\n        export function walkForStatementChildren(preAst: ForStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.init) {\n                preAst.init = walker.walk(preAst.init, preAst);\n            }\n\n            if (preAst.cond) {\n                preAst.cond = walker.walk(preAst.cond, preAst);\n            }\n\n            if (preAst.incr) {\n                preAst.incr = walker.walk(preAst.incr, preAst);\n            }\n\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkForInStatementChildren(preAst: ForInStatement, parent: AST, walker: IAstWalker): void {\n            preAst.lval = walker.walk(preAst.lval, preAst);\n            preAst.obj = walker.walk(preAst.obj, preAst);\n\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkIfStatementChildren(preAst: IfStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.thenBod) {\n                preAst.thenBod = walker.walk(preAst.thenBod, preAst);\n            }\n            if (preAst.elseBod) {\n                preAst.elseBod = walker.walk(preAst.elseBod, preAst);\n            }\n        }\n\n        export function walkWhileStatementChildren(preAst: WhileStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkDoStatementChildren(preAst: DoStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkBlockChildren(preAst: Block, parent: AST, walker: IAstWalker): void {\n            if (preAst.statements) {\n                preAst.statements = <ASTList>walker.walk(preAst.statements, preAst);\n            }\n        }\n\n        export function walkVariableDeclarationChildren(preAst: VariableDeclaration, parent: AST, walker: IAstWalker): void {\n            if (preAst.declarators) {\n                preAst.declarators = <ASTList>walker.walk(preAst.declarators, preAst);\n            }\n        }\n\n        export function walkCaseClauseChildren(preAst: CaseClause, parent: AST, walker: IAstWalker): void {\n            if (preAst.expr) {\n                preAst.expr = walker.walk(preAst.expr, preAst);\n            }\n\n            if (preAst.body) {\n                preAst.body = <ASTList>walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkSwitchStatementChildren(preAst: SwitchStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.val) {\n                preAst.val = walker.walk(preAst.val, preAst);\n            }\n\n            if (preAst.caseList) {\n                preAst.caseList = <ASTList>walker.walk(preAst.caseList, preAst);\n            }\n        }\n\n        export function walkTryStatementChildren(preAst: TryStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.tryBody) {\n                preAst.tryBody = <Block>walker.walk(preAst.tryBody, preAst);\n            }\n            if (preAst.catchClause) {\n                preAst.catchClause = <CatchClause>walker.walk(preAst.catchClause, preAst);\n            }\n            if (preAst.finallyBody) {\n                preAst.finallyBody = <Block>walker.walk(preAst.finallyBody, preAst);\n            }\n        }\n\n        export function walkCatchClauseChildren(preAst: CatchClause, parent: AST, walker: IAstWalker): void {\n            if (preAst.param) {\n                preAst.param = <VariableDeclarator>walker.walk(preAst.param, preAst);\n            }\n\n            if (preAst.body) {\n                preAst.body = <Block>walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkRecordChildren(preAst: NamedDeclaration, parent: AST, walker: IAstWalker): void {\n            preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            if (preAst.members) {\n                preAst.members = <ASTList>walker.walk(preAst.members, preAst);\n            }\n        }\n\n        export function walkNamedTypeChildren(preAst: TypeDeclaration, parent: AST, walker: IAstWalker): void {\n            walkRecordChildren(preAst, parent, walker);\n        }\n\n        export function walkClassDeclChildren(preAst: ClassDeclaration, parent: AST, walker: IAstWalker): void {\n            walkNamedTypeChildren(preAst, parent, walker);\n\n            if (preAst.typeParameters) {\n                preAst.typeParameters = <ASTList>walker.walk(preAst.typeParameters, preAst);\n            }\n\n            if (preAst.extendsList) {\n                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);\n            }\n\n            if (preAst.implementsList) {\n                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);\n            }\n        }\n\n        export function walkScriptChildren(preAst: Script, parent: AST, walker: IAstWalker): void {\n            if (preAst.moduleElements) {\n                preAst.moduleElements = <ASTList>walker.walk(preAst.moduleElements, preAst);\n            }\n        }\n\n        export function walkTypeDeclChildren(preAst: InterfaceDeclaration, parent: AST, walker: IAstWalker): void {\n            walkNamedTypeChildren(preAst, parent, walker);\n\n            if (preAst.typeParameters) {\n                preAst.typeParameters = <ASTList>walker.walk(preAst.typeParameters, preAst);\n            }\n\n            // walked arguments as part of members\n            if (preAst.extendsList) {\n                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);\n            }\n\n            if (preAst.implementsList) {\n                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);\n            }\n        }\n\n        export function walkModuleDeclChildren(preAst: ModuleDeclaration, parent: AST, walker: IAstWalker): void {\n            walkRecordChildren(preAst, parent, walker);\n        }\n\n        export function walkImportDeclChildren(preAst: ImportDeclaration, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n            if (preAst.alias) {\n                preAst.alias = walker.walk(preAst.alias, preAst);\n            }\n        }\n\n        export function walkExportAssignmentChildren(preAst: ExportAssignment, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n        }\n\n        export function walkWithStatementChildren(preAst: WithStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.expr) {\n                preAst.expr = walker.walk(preAst.expr, preAst);\n            }\n\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkExpressionStatementChildren(preAst: ExpressionStatement, parent: AST, walker: IAstWalker): void {\n            preAst.expression = <AST>walker.walk(preAst.expression, preAst);\n        }\n\n        export function walkLabeledStatementChildren(preAst: LabeledStatement, parent: AST, walker: IAstWalker): void {\n            preAst.identifier = <Identifier>walker.walk(preAst.identifier, preAst);\n            preAst.statement = walker.walk(preAst.statement, preAst);\n        }\n\n        export function walkVariableStatementChildren(preAst: VariableStatement, parent: AST, walker: IAstWalker): void {\n            preAst.declaration = <VariableDeclaration>walker.walk(preAst.declaration, preAst);\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript.AstWalkerWithDetailCallback {\n    export interface AstWalkerDetailCallback {\n        EmptyCallback? (pre, ast: AST): boolean;\n        EmptyExprCallback? (pre, ast: AST): boolean;\n        TrueCallback? (pre, ast: AST): boolean;\n        FalseCallback? (pre, ast: AST): boolean;\n        ThisCallback? (pre, ast: AST): boolean;\n        SuperCallback? (pre, ast: AST): boolean;\n        QStringCallback? (pre, ast: AST): boolean;\n        RegexCallback? (pre, ast: AST): boolean;\n        NullCallback? (pre, ast: AST): boolean;\n        ArrayLitCallback? (pre, ast: AST): boolean;\n        ObjectLitCallback? (pre, ast: AST): boolean;\n        VoidCallback? (pre, ast: AST): boolean;\n        CommaCallback? (pre, ast: AST): boolean;\n        PosCallback? (pre, ast: AST): boolean;\n        NegCallback? (pre, ast: AST): boolean;\n        DeleteCallback? (pre, ast: AST): boolean;\n        AwaitCallback? (pre, ast: AST): boolean;\n        InCallback? (pre, ast: AST): boolean;\n        DotCallback? (pre, ast: AST): boolean;\n        FromCallback? (pre, ast: AST): boolean;\n        IsCallback? (pre, ast: AST): boolean;\n        InstOfCallback? (pre, ast: AST): boolean;\n        TypeofCallback? (pre, ast: AST): boolean;\n        NumberLitCallback? (pre, ast: AST): boolean;\n        NameCallback? (pre, identifierAst: Identifier): boolean;\n        TypeRefCallback? (pre, ast: AST): boolean;\n        IndexCallback? (pre, ast: AST): boolean;\n        CallCallback? (pre, ast: AST): boolean;\n        NewCallback? (pre, ast: AST): boolean;\n        AsgCallback? (pre, ast: AST): boolean;\n        AsgAddCallback? (pre, ast: AST): boolean;\n        AsgSubCallback? (pre, ast: AST): boolean;\n        AsgDivCallback? (pre, ast: AST): boolean;\n        AsgMulCallback? (pre, ast: AST): boolean;\n        AsgModCallback? (pre, ast: AST): boolean;\n        AsgAndCallback? (pre, ast: AST): boolean;\n        AsgXorCallback? (pre, ast: AST): boolean;\n        AsgOrCallback? (pre, ast: AST): boolean;\n        AsgLshCallback? (pre, ast: AST): boolean;\n        AsgRshCallback? (pre, ast: AST): boolean;\n        AsgRs2Callback? (pre, ast: AST): boolean;\n        QMarkCallback? (pre, ast: AST): boolean;\n        LogOrCallback? (pre, ast: AST): boolean;\n        LogAndCallback? (pre, ast: AST): boolean;\n        OrCallback? (pre, ast: AST): boolean;\n        XorCallback? (pre, ast: AST): boolean;\n        AndCallback? (pre, ast: AST): boolean;\n        EqCallback? (pre, ast: AST): boolean;\n        NeCallback? (pre, ast: AST): boolean;\n        EqvCallback? (pre, ast: AST): boolean;\n        NEqvCallback? (pre, ast: AST): boolean;\n        LtCallback? (pre, ast: AST): boolean;\n        LeCallback? (pre, ast: AST): boolean;\n        GtCallback? (pre, ast: AST): boolean;\n        GeCallback? (pre, ast: AST): boolean;\n        AddCallback? (pre, ast: AST): boolean;\n        SubCallback? (pre, ast: AST): boolean;\n        MulCallback? (pre, ast: AST): boolean;\n        DivCallback? (pre, ast: AST): boolean;\n        ModCallback? (pre, ast: AST): boolean;\n        LshCallback? (pre, ast: AST): boolean;\n        RshCallback? (pre, ast: AST): boolean;\n        Rs2Callback? (pre, ast: AST): boolean;\n        NotCallback? (pre, ast: AST): boolean;\n        LogNotCallback? (pre, ast: AST): boolean;\n        IncPreCallback? (pre, ast: AST): boolean;\n        DecPreCallback? (pre, ast: AST): boolean;\n        IncPostCallback? (pre, ast: AST): boolean;\n        DecPostCallback? (pre, ast: AST): boolean;\n        TypeAssertionCallback? (pre, ast: AST): boolean;\n        FunctionDeclarationCallback? (pre, funcDecl: FunctionDeclaration): boolean;\n        MemberCallback? (pre, ast: AST): boolean;\n        VariableDeclaratorCallback? (pre, varDecl: VariableDeclarator): boolean;\n        VariableDeclarationCallback? (pre, varDecl: VariableDeclaration): boolean;\n        ArgDeclCallback? (pre, ast: AST): boolean;\n        ReturnCallback? (pre, ast: AST): boolean;\n        BreakCallback? (pre, ast: AST): boolean;\n        ContinueCallback? (pre, ast: AST): boolean;\n        ThrowCallback? (pre, ast: AST): boolean;\n        ForCallback? (pre, ast: AST): boolean;\n        ForInCallback? (pre, ast: AST): boolean;\n        IfCallback? (pre, ast: AST): boolean;\n        WhileCallback? (pre, ast: AST): boolean;\n        DoCallback? (pre, ast: AST): boolean;\n        BlockCallback? (pre, block: Block): boolean;\n        CaseCallback? (pre, ast: AST): boolean;\n        SwitchCallback? (pre, ast: AST): boolean;\n        TryCallback? (pre, ast: AST): boolean;\n        TryCatchCallback? (pre, ast: AST): boolean;\n        TryFinallyCallback? (pre, ast: AST): boolean;\n        FinallyCallback? (pre, ast: AST): boolean;\n        CatchCallback? (pre, ast: AST): boolean;\n        ListCallback? (pre, astList: ASTList): boolean;\n        ScriptCallback? (pre, script: Script): boolean;\n        ClassDeclarationCallback? (pre, ast: AST): boolean;\n        InterfaceDeclarationCallback? (pre, interfaceDecl: InterfaceDeclaration): boolean;\n        ModuleDeclarationCallback? (pre, moduleDecl: ModuleDeclaration): boolean;\n        ImportDeclarationCallback? (pre, ast: AST): boolean;\n        ExportAssignmentCallback? (pre, ast: AST): boolean;\n        WithCallback? (pre, ast: AST): boolean;\n        LabelCallback? (pre, labelAST: AST): boolean;\n        LabeledStatementCallback? (pre, ast: AST): boolean;\n        VariableStatementCallback? (pre, ast: AST): boolean;\n        ErrorCallback? (pre, ast: AST): boolean;\n        CommentCallback? (pre, ast: AST): boolean;\n        DebuggerCallback? (pre, ast: AST): boolean;\n        DefaultCallback? (pre, ast: AST): boolean;\n    }\n\n    export function walk(script: Script, callback: AstWalkerDetailCallback): void {\n        var pre = (cur: AST, parent: AST) => {\n            walker.options.goChildren = AstWalkerCallback(true, cur, callback);\n            return cur;\n        }\n\n        var post = (cur: AST, parent: AST) => {\n            AstWalkerCallback(false, cur, callback);\n            return cur;\n        }\n\n        var walker = TypeScript.getAstWalkerFactory().getWalker(pre, post);\n        walker.walk(script, null);\n    }\n\n    function AstWalkerCallback(pre: boolean, ast: AST, callback: AstWalkerDetailCallback): boolean {\n        // See if the Callback needs to be handled using specific one or default one\n        var nodeType = ast.nodeType;\n        var callbackString = NodeType[nodeType] + \"Callback\";\n        if (callback[callbackString]) {\n            return callback[callbackString](pre, ast);\n        }\n\n        if (callback.DefaultCallback) {\n            return callback.DefaultCallback(pre, ast);\n        }\n\n        return true;\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export function max(a: number, b: number): number {\n        return a >= b ? a : b;\n    }\n\n    export function min(a: number, b: number): number {\n        return a <= b ? a : b;\n    }\n\n    //\n    // Helper class representing a path from a root ast node to a (grand)child ast node.\n    // This is helpful as our tree don\'t have parents.\n    //\n    export class AstPath {\n        public asts: AST[] = [];\n        public top: number = -1;\n\n        static reverseIndexOf(items: any[], index: number): any {\n            return (items === null || items.length <= index) ? null : items[items.length - index - 1];\n        }\n\n        public clone(): AstPath {\n            var clone = new AstPath();\n            clone.asts = this.asts.map((value) => { return value; });\n            clone.top = this.top;\n            return clone;\n        }\n\n        public pop(): TypeScript.AST {\n            var head = this.ast();\n            this.up();\n\n            while (this.asts.length > this.count()) {\n                this.asts.pop();\n            }\n            return head;\n        }\n\n        public push(ast: TypeScript.AST) {\n            while (this.asts.length > this.count()) {\n                this.asts.pop();\n            }\n            this.top = this.asts.length;\n            this.asts.push(ast);\n        }\n\n        public up() {\n            if (this.top <= -1)\n                throw new Error(\"Invalid call to \'up\'\");\n            this.top--;\n        }\n\n        public down() {\n            if (this.top === this.ast.length - 1)\n                throw new Error(\"Invalid call to \'down\'\");\n            this.top++;\n        }\n\n        public nodeType(): TypeScript.NodeType {\n            if (this.ast() === null)\n                return TypeScript.NodeType.None;\n            return this.ast().nodeType;\n        }\n\n        public ast() {\n            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1));\n        }\n\n        public parent() {\n            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - this.top);\n        }\n\n        public count() {\n            return this.top + 1;\n        }\n\n        public get(index: number): TypeScript.AST {\n            return this.asts[index];\n        }\n\n        public isNameOfClass(): boolean {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) &&\n                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfInterface(): boolean {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) &&\n                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfArgument(): boolean {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.Parameter) &&\n                ((<TypeScript.Parameter>this.parent()).id === this.ast());\n        }\n\n        public isNameOfVariable(): boolean {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.VariableDeclarator) &&\n                ((<TypeScript.VariableDeclarator>this.parent()).id === this.ast());\n        }\n\n        public isNameOfModule(): boolean {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration) &&\n                ((<TypeScript.ModuleDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfFunction(): boolean {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.FunctionDeclaration) &&\n                ((<TypeScript.FunctionDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isBodyOfFunction(): boolean {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FunctionDeclaration &&\n                 (<TypeScript.FunctionDeclaration>this.asts[this.top - 1]).block === this.asts[this.top - 0];\n        }\n\n        public isArgumentListOfFunction(): boolean {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FunctionDeclaration &&\n                (<TypeScript.FunctionDeclaration>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n        \n        public isTargetOfCall(): boolean {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.InvocationExpression &&\n                (<TypeScript.CallExpression>this.asts[this.top - 1]).target === this.asts[this.top];\n        }\n        \n        public isTargetOfNew(): boolean {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectCreationExpression &&\n                (<TypeScript.CallExpression>this.asts[this.top - 1]).target === this.asts[this.top];\n        }\n\n        public isInClassImplementsList(): boolean {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) &&\n                (this.isMemberOfList((<TypeScript.ClassDeclaration>this.parent()).implementsList, this.ast()));\n        }\n\n        public isInInterfaceExtendsList(): boolean {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) &&\n                (this.isMemberOfList((<TypeScript.InterfaceDeclaration>this.parent()).extendsList, this.ast()));\n        }\n\n        public isMemberOfMemberAccessExpression() {\n            if (this.count() > 1 &&\n                this.parent().nodeType === NodeType.MemberAccessExpression &&\n                (<BinaryExpression>this.parent()).operand2 === this.asts[this.top]) {\n                return true;\n            }\n\n            return false;\n        }\n        \n        public isCallExpression(): boolean {\n            return this.count() >= 1 &&\n            (this.asts[this.top - 0].nodeType === TypeScript.NodeType.InvocationExpression || this.asts[this.top - 0].nodeType === TypeScript.NodeType.ObjectCreationExpression);\n        }\n\n        public isCallExpressionTarget(): boolean {\n            if (this.count() < 2) {\n                return false;\n            }\n\n            var current = this.top;\n            \n            var nodeType = this.asts[current].nodeType;\n            if (nodeType === TypeScript.NodeType.ThisExpression || nodeType === TypeScript.NodeType.SuperExpression || nodeType === TypeScript.NodeType.Name) {\n                current--;\n            }\n\n            while (current >= 0) {\n                // if this is a dot, then skip to find the outter most qualifed name\n                if (current < this.top && this.asts[current].nodeType === TypeScript.NodeType.MemberAccessExpression &&\n                    (<TypeScript.BinaryExpression>this.asts[current]).operand2 === this.asts[current + 1]) {\n                    current--;\n                    continue;\n                }\n\n                break;\n            }\n\n            return current < this.top &&\n                (this.asts[current].nodeType === TypeScript.NodeType.InvocationExpression || this.asts[current].nodeType === TypeScript.NodeType.ObjectCreationExpression) &&\n                this.asts[current + 1] === (<TypeScript.CallExpression>this.asts[current]).target;\n        }\n\n\n        public isDeclaration(): boolean {\n            if (this.ast() !== null) {\n                switch (this.ast().nodeType) {\n                    case TypeScript.NodeType.ClassDeclaration:\n                    case TypeScript.NodeType.InterfaceDeclaration:\n                    case TypeScript.NodeType.ModuleDeclaration:\n                    case TypeScript.NodeType.FunctionDeclaration:\n                    case TypeScript.NodeType.VariableDeclarator:\n                       return true;\n                }\n            }\n\n            return false;\n        }\n\n        private isMemberOfList(list: ASTList, item: AST): boolean {\n            if (list && list.members) {\n                for (var i = 0, n = list.members.length; i < n; i++) {\n                    if (list.members[i] === item) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n    }\n\n    export function isValidAstNode(ast: TypeScript.IASTSpan): boolean {\n        if (ast === null)\n            return false;\n\n        if (ast.minChar === -1 || ast.limChar === -1)\n            return false;\n\n        return true;\n    }\n\n    export class AstPathContext {\n        public path = new TypeScript.AstPath();\n    }\n\n    export enum GetAstPathOptions {\n        Default = 0,\n        EdgeInclusive = 1,\n        //We need this options dealing with an AST coming from an incomplete AST. For example:\n        //     class foo { // r\n        // If we ask for the AST at the position after the \"r\" character, we won\'t see we are \n        // inside a comment, because the \"class\" AST node has a limChar corresponding to the position of \n        // the \"{\" character, meaning we don\'t traverse the tree down to the stmt list of the class, meaning\n        // we don\'t find the \"precomment\" attached to the errorneous empty stmt.\n        //TODO: It would be nice to be able to get rid of this.\n        DontPruneSearchBasedOnPosition = 1 << 1,\n    }\n\n    ///\n    /// Return the stack of AST nodes containing \"position\"\n    ///\n    export function getAstPathToPosition(script: TypeScript.AST, pos: number, useTrailingTriviaAsLimChar = true, options = GetAstPathOptions.Default): TypeScript.AstPath {\n        var lookInComments = (comments: TypeScript.Comment[]) => {\n            if (comments && comments.length > 0) {\n                for (var i = 0; i < comments.length; i++) {\n                    var minChar = comments[i].minChar;\n                    var limChar = comments[i].limChar + (useTrailingTriviaAsLimChar ? comments[i].trailingTriviaWidth : 0);\n                    if (!comments[i].isBlockComment) {\n                        limChar++; // For single line comments, include 1 more character (for the newline)\n                    }\n                    if (pos >= minChar && pos < limChar) {\n                        ctx.path.push(comments[i]);\n                    }\n                }\n            }\n        }\n\n        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) {\n            if (isValidAstNode(cur)) {\n\n                // Add \"cur\" to the stack if it contains our position\n                // For \"identifier\" nodes, we need a special case: A position equal to \"limChar\" is\n                // valid, since the position corresponds to a caret position (in between characters)\n                // For example:\n                //  bar\n                //  0123\n                // If \"position === 3\", the caret is at the \"right\" of the \"r\" character, which should be considered valid\n                var inclusive =\n                    hasFlag(options, GetAstPathOptions.EdgeInclusive) ||\n                    cur.nodeType === TypeScript.NodeType.Name ||\n                    cur.nodeType === TypeScript.NodeType.MemberAccessExpression ||\n                    cur.nodeType === TypeScript.NodeType.TypeRef ||\n                    pos === script.limChar + script.trailingTriviaWidth; // Special \"EOF\" case\n\n                var minChar = cur.minChar;\n                var limChar = cur.limChar + (useTrailingTriviaAsLimChar ? cur.trailingTriviaWidth : 0) + (inclusive ? 1 : 0);\n                if (pos >= minChar && pos < limChar) {\n\n                    // TODO: Since AST is sometimes not correct wrt to position, only add \"cur\" if it\'s better\n                    //       than top of the stack.\n                    var previous = ctx.path.ast();\n                    if (previous === null || (cur.minChar >= previous.minChar &&\n                        (cur.limChar + (useTrailingTriviaAsLimChar ? cur.trailingTriviaWidth : 0)) <= (previous.limChar + (useTrailingTriviaAsLimChar ? previous.trailingTriviaWidth : 0)))) {\n                        ctx.path.push(cur);\n                    }\n                    else {\n                        //logger.log(\"TODO: Ignoring node because minChar, limChar not better than previous node in stack\");\n                    }\n                }\n\n                // The AST walker skips comments, but we might be in one, so check the pre/post comments for this node manually\n                if (pos < limChar) {\n                    lookInComments(cur.preComments);\n                }\n                if (pos >= minChar) {\n                    lookInComments(cur.postComments);\n                }\n\n                if (!hasFlag(options, GetAstPathOptions.DontPruneSearchBasedOnPosition)) {\n                    // Don\'t go further down the tree if pos is outside of [minChar, limChar]\n                    walker.options.goChildren = (minChar <= pos && pos <= limChar);\n                }\n            }\n            return cur;\n        }\n\n        var ctx = new AstPathContext();\n        TypeScript.getAstWalkerFactory().walk(script, pre, null, null, ctx);\n        return ctx.path;\n    }\n\n    ///\n    /// Simple function to Walk an AST using a simple callback function.\n    ///\n    export function walkAST(ast: TypeScript.AST, callback: (path: AstPath, walker: TypeScript.IAstWalker) => void ): void {\n        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n            var path: TypeScript.AstPath = walker.state;\n            path.push(cur);\n            callback(path, walker);\n            return cur;\n        }\n        var post = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n            var path: TypeScript.AstPath = walker.state;\n            path.pop();\n            return cur;\n        }\n\n        var path = new AstPath();\n        TypeScript.getAstWalkerFactory().walk(ast, pre, post, null, path);\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nmodule TypeScript {\n    class Base64Format {\n        static encodedValues = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\n        static encode(inValue: number) {\n            if (inValue < 64) {\n                return Base64Format.encodedValues.charAt(inValue);\n            }\n            throw TypeError(inValue + \": not a 64 based value\");\n        }\n\n        static decodeChar(inChar: string) {\n            if (inChar.length === 1) {\n                return Base64Format.encodedValues.indexOf(inChar);\n            } else {\n                throw TypeError(\'\"\' + inChar + \'\" must have length 1\');\n            }\n        }\n    }\n\n    export class Base64VLQFormat {\n        static encode(inValue: number) {\n            // Add a new least significant bit that has the sign of the value.\n            // if negative number the least significant bit that gets added to the number has value 1\n            // else least significant bit value that gets added is 0\n            // eg. -1 changes to binary : 01 [1] => 3\n            //     +1 changes to binary : 01 [0] => 2\n            if (inValue < 0) {\n                inValue = ((-inValue) << 1) + 1;\n            }\n            else {\n                inValue = inValue << 1;\n            }\n\n            // Encode 5 bits at a time starting from least significant bits\n            var encodedStr = \"\";\n            do {\n                var currentDigit = inValue & 31; // 11111\n                inValue = inValue >> 5;\n                if (inValue > 0) {\n                    // There are still more digits to decode, set the msb (6th bit)\n                    currentDigit = currentDigit | 32; \n                }\n                encodedStr = encodedStr + Base64Format.encode(currentDigit);\n            } while (inValue > 0);\n\n            return encodedStr;\n        }\n\n        static decode(inString: string) {\n            var result = 0;\n            var negative = false;\n\n            var shift = 0;\n            for (var i = 0; i < inString.length; i++) {\n                var byte = Base64Format.decodeChar(inString[i]);\n                if (i === 0) {\n                    // Sign bit appears in the LSBit of the first value\n                    if ((byte & 1) === 1) {\n                        negative = true;\n                    }\n                    result = (byte >> 1) & 15; // 1111x\n                } else {\n                    result = result | ((byte & 31) << shift); // 11111\n                }\n\n                shift += (i === 0) ? 4 : 5;\n\n                if ((byte & 32) === 32) {\n                    // Continue\n                } else {\n                    return { value: negative ? -(result) : result, rest: inString.substr(i + 1) };\n                }\n            }\n\n            throw new Error(\'Base64 value \"\' + inString + \'\" finished with a continuation bit\');\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n///<reference path=\'..\\harness\\external\\json2Stringify.ts\' />\n\nmodule TypeScript {\n    export class SourceMapPosition {\n        public sourceLine: number;\n        public sourceColumn: number;\n        public emittedLine: number;\n        public emittedColumn: number;\n    }\n\n    export class SourceMapping {\n        public start = new SourceMapPosition();\n        public end = new SourceMapPosition();\n        public nameIndex: number = -1;\n        public childMappings: SourceMapping[] = [];\n    }\n\n    export class SourceMapper {\n        static MapFileExtension = \".map\";\n        \n        public sourceMappings: SourceMapping[] = [];\n        public currentMappings: SourceMapping[][] = [];\n\n        public names: string[] = [];\n        public currentNameIndex: number[] = [];\n\n        public jsFileName: string;\n        public tsFileName: string;\n\n        constructor(tsFileName: string,\n                    jsFileName: string,\n                    public sourceMapFileName: string,\n                    public jsFile: ITextWriter,\n                    public sourceMapOut: ITextWriter,\n                    emitFullPathOfSourceMap: boolean) {\n            this.currentMappings.push(this.sourceMappings);\n\n            jsFileName = switchToForwardSlashes(jsFileName);\n            this.jsFileName = TypeScript.getPrettyName(jsFileName, false, true);\n            \n            var removalIndex = jsFileName.lastIndexOf(this.jsFileName);\n            var fixedPath = jsFileName.substring(0, removalIndex);\n\n            if (emitFullPathOfSourceMap) {\n                if (jsFileName.indexOf(\"://\") === -1) {\n                    jsFileName = \"file:///\" + jsFileName;\n                }\n                this.jsFileName = jsFileName;\n            }\n\n            this.tsFileName = TypeScript.getRelativePathToFixedPath(fixedPath, tsFileName);\n        }\n        \n        // Generate source mapping.\n        // Creating files can cause exceptions, they will be caught higher up in TypeScriptCompiler.emit\n        static emitSourceMapping(allSourceMappers: SourceMapper[]): void {\n            // At this point we know that there is at least one source mapper present.\n            // If there are multiple source mappers, all will correspond to same map file but different sources\n\n            // Output map file name into the js file\n            var sourceMapper = allSourceMappers[0];\n            sourceMapper.jsFile.WriteLine(\"//@ sourceMappingURL=\" + sourceMapper.jsFileName + SourceMapper.MapFileExtension);\n\n            // Now output map file\n            var sourceMapOut = sourceMapper.sourceMapOut;\n            var mappingsString = \"\";\n            var tsFiles: string[] = [];\n\n            var prevEmittedColumn = 0;\n            var prevEmittedLine = 0;\n            var prevSourceColumn = 0;\n            var prevSourceLine = 0;\n            var prevSourceIndex = 0;\n            var prevNameIndex = 0;\n            var namesList: string[] = [];\n            var namesCount = 0;\n            var emitComma = false;\n\n            var recordedPosition: SourceMapPosition = null;\n            for (var sourceMapperIndex = 0; sourceMapperIndex < allSourceMappers.length; sourceMapperIndex++) {\n                sourceMapper = allSourceMappers[sourceMapperIndex];\n\n                // If there are any mappings generated\n                var currentSourceIndex = tsFiles.length;\n                tsFiles.push(sourceMapper.tsFileName);\n\n                // Join namelist\n                if (sourceMapper.names.length > 0) {\n                    namesList.push.apply(namesList, sourceMapper.names);\n                }\n\n                var recordSourceMapping = (mappedPosition: SourceMapPosition, nameIndex: number) => {\n                    if (recordedPosition !== null &&\n                        recordedPosition.emittedColumn === mappedPosition.emittedColumn &&\n                        recordedPosition.emittedLine === mappedPosition.emittedLine) {\n                        // This position is already recorded\n                        return;\n                    }\n\n                    // Record this position\n                    if (prevEmittedLine !== mappedPosition.emittedLine) {\n                        while (prevEmittedLine < mappedPosition.emittedLine) {\n                            prevEmittedColumn = 0;\n                            mappingsString = mappingsString + \";\";\n                            prevEmittedLine++;\n                        }\n                        emitComma = false;\n                    }\n                    else if (emitComma) {\n                        mappingsString = mappingsString + \",\";\n                    }\n\n                    // 1. Relative Column\n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.emittedColumn - prevEmittedColumn);\n                    prevEmittedColumn = mappedPosition.emittedColumn;\n\n                    // 2. Relative sourceIndex \n                    mappingsString = mappingsString + Base64VLQFormat.encode(currentSourceIndex - prevSourceIndex);\n                    prevSourceIndex = currentSourceIndex;\n\n                    // 3. Relative sourceLine 0 based\n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.sourceLine - 1 - prevSourceLine);\n                    prevSourceLine = mappedPosition.sourceLine - 1;\n\n                    // 4. Relative sourceColumn 0 based \n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.sourceColumn - prevSourceColumn);\n                    prevSourceColumn = mappedPosition.sourceColumn;\n\n                    // 5. Relative namePosition 0 based\n                    if (nameIndex >= 0) {\n                        mappingsString = mappingsString + Base64VLQFormat.encode(namesCount + nameIndex - prevNameIndex);\n                        prevNameIndex = namesCount + nameIndex;\n                    }\n\n                    emitComma = true;\n                    recordedPosition = mappedPosition;\n                }\n\n                // Record starting spans\n                var recordSourceMappingSiblings = (sourceMappings: SourceMapping[]) => {\n                    for (var i = 0; i < sourceMappings.length; i++) {\n                        var sourceMapping = sourceMappings[i];\n                        recordSourceMapping(sourceMapping.start, sourceMapping.nameIndex);\n                        recordSourceMappingSiblings(sourceMapping.childMappings);\n                        recordSourceMapping(sourceMapping.end, sourceMapping.nameIndex);\n                    }\n                }\n\n                recordSourceMappingSiblings(sourceMapper.sourceMappings);\n                namesCount = namesCount + sourceMapper.names.length;\n            }\n\n            // Write the actual map file\n            sourceMapOut.Write(JSON2.stringify({\n                version: 3,\n                file: sourceMapper.jsFileName,\n                sources: tsFiles,\n                names: namesList,\n                mappings: mappingsString\n            }));\n\n            // Closing files could result in exceptions, report them if they occur\n            sourceMapOut.Close();\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export enum EmitContainer {\n        Prog,\n        Module,\n        DynamicModule,\n        Class,\n        Constructor,\n        Function,\n        Args,\n        Interface,\n    }\n\n    export class EmitState {\n        public column: number;\n        public line: number;\n        public container: EmitContainer;\n\n        constructor() {\n            this.column = 0;\n            this.line = 0;\n            this.container = EmitContainer.Prog;\n        }\n    }\n\n    export class EmitOptions {\n        public ioHost: EmitterIOHost = null;\n        public outputMany: boolean = true;\n        public commonDirectoryPath = \"\";\n\n        constructor(public compilationSettings: CompilationSettings) {\n        }\n\n        public mapOutputFileName(fileName: string, extensionChanger: (fname: string, wholeFileNameReplaced: boolean) => string) {\n            if (this.outputMany) {\n                var updatedFileName = fileName;\n                if (this.compilationSettings.outputOption !== \"\") {\n                    // Replace the common directory path with the option specified\n                    updatedFileName = fileName.replace(this.commonDirectoryPath, \"\");\n                    updatedFileName = this.compilationSettings.outputOption + updatedFileName;\n                }\n                return extensionChanger(updatedFileName, false);\n            } else {\n                return extensionChanger(this.compilationSettings.outputOption, true);\n            }\n        }\n    }\n\n    export class Indenter {\n        static indentStep: number = 4;\n        static indentStepString: string = \"    \";\n        static indentStrings: string[] = [];\n        public indentAmt: number = 0;\n\n        public increaseIndent() {\n            this.indentAmt += Indenter.indentStep;\n        }\n\n        public decreaseIndent() {\n            this.indentAmt -= Indenter.indentStep;\n        }\n\n        public getIndent() {\n            var indentString = Indenter.indentStrings[this.indentAmt];\n            if (indentString === undefined) {\n                indentString = \"\";\n                for (var i = 0; i < this.indentAmt; i = i + Indenter.indentStep) {\n                    indentString += Indenter.indentStepString;\n                }\n                Indenter.indentStrings[this.indentAmt] = indentString;\n            }\n            return indentString;\n        }\n    }\n\n    export interface BoundDeclInfo {\n        boundDecl: BoundDecl;\n        pullDecl: PullDecl;\n    }\n\n    export class Emitter {\n        public globalThisCapturePrologueEmitted = false;\n        public extendsPrologueEmitted = false;\n        public thisClassNode: ClassDeclaration = null;\n        public thisFunctionDeclaration: FunctionDeclaration = null;\n        public moduleName = \"\";\n        public emitState = new EmitState();\n        public indenter = new Indenter();\n        public modAliasId: string = null;\n        public firstModAlias: string = null;\n        public allSourceMappers: SourceMapper[] = [];\n        public sourceMapper: SourceMapper = null;\n        public captureThisStmtString = \"var _this = this;\";\n        public varListCountStack: number[] = [0];\n        private pullTypeChecker: PullTypeChecker = null;\n        private declStack: PullDecl[] = [];\n        private resolvingContext = new PullTypeResolutionContext();\n        private exportAssignmentIdentifier: string = null;\n\n        public document: Document = null;\n\n        constructor(public emittingFileName: string,\n            public outfile: ITextWriter,\n            public emitOptions: EmitOptions,\n            private semanticInfoChain: SemanticInfoChain) {\n            this.pullTypeChecker = new PullTypeChecker(emitOptions.compilationSettings, semanticInfoChain);\n        }\n\n        private pushDecl(decl: PullDecl) {\n            if (decl) {\n                this.declStack[this.declStack.length] = decl;\n            }\n        }\n\n        private popDecl(decl: PullDecl) {\n            if (decl) {\n                this.declStack.length--;\n            }\n        }\n\n        private getEnclosingDecl() {\n            var declStackLen = this.declStack.length;\n            var enclosingDecl = declStackLen > 0 ? this.declStack[declStackLen - 1] : null;\n            return enclosingDecl;\n        }\n\n        private setTypeCheckerUnit(fileName: string) {\n            if (!this.pullTypeChecker.resolver) {\n                this.pullTypeChecker.setUnit(fileName);\n                return;\n            }\n\n            this.pullTypeChecker.resolver.setUnitPath(fileName);\n        }\n\n        public setExportAssignmentIdentifier(id: string) {\n            this.exportAssignmentIdentifier = id;\n        }\n\n        public getExportAssignmentIdentifier() {\n            return this.exportAssignmentIdentifier;\n        }\n\n        public setDocument(document: Document) {\n            this.document = document;\n        }\n\n        public importStatementShouldBeEmitted(importDeclAST: ImportDeclaration, unitPath?: string): boolean {\n            if (!importDeclAST.isDynamicImport) {\n                return true;\n            }\n\n            var importDecl = this.semanticInfoChain.getDeclForAST(importDeclAST, this.document.fileName);\n            var pullSymbol = <PullTypeAliasSymbol>importDecl.getSymbol();\n            return pullSymbol.getIsUsedAsValue();\n        }\n\n        public setSourceMappings(mapper: SourceMapper) {\n            this.allSourceMappers.push(mapper);\n            this.sourceMapper = mapper;\n        }\n\n        public writeToOutput(s: string) {\n            this.outfile.Write(s);\n            // TODO: check s for newline\n            this.emitState.column += s.length;\n        }\n\n        public writeToOutputTrimmable(s: string) {\n            if (this.emitOptions.compilationSettings.minWhitespace) {\n                s = s.replace(/[\\s]*/g, \'\');\n            }\n            this.writeToOutput(s);\n        }\n\n        public writeLineToOutput(s: string) {\n            if (this.emitOptions.compilationSettings.minWhitespace) {\n                this.writeToOutput(s);\n                var c = s.charCodeAt(s.length - 1);\n                if (!((c === CharacterCodes.space) || (c === CharacterCodes.semicolon) || (c === CharacterCodes.openBracket))) {\n                    this.writeToOutput(\' \');\n                }\n            }\n            else {\n                this.outfile.WriteLine(s);\n                this.emitState.column = 0\n                this.emitState.line++;\n            }\n        }\n\n        public writeCaptureThisStatement(ast: AST) {\n            this.emitIndent();\n            this.recordSourceMappingStart(ast);\n            this.writeToOutput(this.captureThisStmtString);\n            this.recordSourceMappingEnd(ast);\n            this.writeLineToOutput(\"\");\n        }\n\n        public setInVarBlock(count: number) {\n            this.varListCountStack[this.varListCountStack.length - 1] = count;\n        }\n\n        public setContainer(c: number): number {\n            var temp = this.emitState.container;\n            this.emitState.container = c;\n            return temp;\n        }\n\n        private getIndentString() {\n            if (this.emitOptions.compilationSettings.minWhitespace) {\n                return \"\";\n            }\n            else {\n                return this.indenter.getIndent();\n            }\n        }\n\n        public emitIndent() {\n            this.writeToOutput(this.getIndentString());\n        }\n\n        public emitCommentInPlace(comment: Comment) {\n            var text = comment.getText();\n            var hadNewLine = false;\n\n            if (comment.isBlockComment) {\n                if (this.emitState.column === 0) {\n                    this.emitIndent();\n                }\n                this.recordSourceMappingStart(comment);\n                this.writeToOutput(text[0]);\n\n                if (text.length > 1 || comment.endsLine) {\n                    for (var i = 1; i < text.length; i++) {\n                        this.writeLineToOutput(\"\");\n                        this.emitIndent();\n                        this.writeToOutput(text[i]);\n                    }\n                    this.recordSourceMappingEnd(comment);\n                    this.writeLineToOutput(\"\");\n                    hadNewLine = true;\n                } else {\n                    this.recordSourceMappingEnd(comment);\n                }\n            }\n            else {\n                if (this.emitState.column === 0) {\n                    this.emitIndent();\n                }\n                this.recordSourceMappingStart(comment);\n                this.writeToOutput(text[0]);\n                this.recordSourceMappingEnd(comment);\n                this.writeLineToOutput(\"\");\n                hadNewLine = true;\n            }\n\n            if (hadNewLine) {\n                this.emitIndent();\n            }\n            else {\n                this.writeToOutput(\" \");\n            }\n        }\n\n        public emitComments(ast: AST, pre: boolean) {\n            var comments = pre ? ast.preComments : ast.postComments;\n\n            if (this.emitOptions.compilationSettings.emitComments && comments && comments.length !== 0) {\n                for (var i = 0; i < comments.length; i++) {\n                    this.emitCommentInPlace(comments[i]);\n                }\n            }\n        }\n\n        public emitObjectLiteral(objectLiteral: UnaryExpression) {\n            var useNewLines = !hasFlag(objectLiteral.getFlags(), ASTFlags.SingleLine);\n\n            this.writeToOutput(\"{\");\n            var list = <ASTList>objectLiteral.operand;\n            if (list.members.length > 0) {\n                if (useNewLines) {\n                    this.writeLineToOutput(\"\");\n                }\n                else {\n                    this.writeToOutput(\" \");\n                }\n\n                this.indenter.increaseIndent();\n                this.emitCommaSeparatedList(list, useNewLines);\n                this.indenter.decreaseIndent();\n                if (useNewLines) {\n                    this.emitIndent();\n                }\n                else {\n                    this.writeToOutput(\" \");\n                }\n            }\n            this.writeToOutput(\"}\");\n        }\n\n        public emitArrayLiteral(arrayLiteral: UnaryExpression) {\n            var useNewLines = !hasFlag(arrayLiteral.getFlags(), ASTFlags.SingleLine);\n\n            this.writeToOutput(\"[\");\n            var list = <ASTList>arrayLiteral.operand;\n            if (list.members.length > 0) {\n                if (useNewLines) {\n                    this.writeLineToOutput(\"\");\n                }\n\n                this.indenter.increaseIndent();\n                this.emitCommaSeparatedList(list, useNewLines);\n                this.indenter.decreaseIndent();\n                if (useNewLines) {\n                    this.emitIndent();\n                }\n            }\n            this.writeToOutput(\"]\");\n        }\n\n        public emitNew(target: AST, args: ASTList) {\n            this.writeToOutput(\"new \");\n            if (target.nodeType === NodeType.TypeRef) {\n                var typeRef = <TypeReference>target;\n                if (typeRef.arrayCount) {\n                    this.writeToOutput(\"Array()\");\n                }\n                else {\n                    typeRef.term.emit(this);\n                    this.writeToOutput(\"()\");\n                }\n            }\n            else {\n                target.emit(this);\n                this.recordSourceMappingStart(args);\n                this.writeToOutput(\"(\");\n                this.emitCommaSeparatedList(args);\n                this.writeToOutput(\")\");\n                this.recordSourceMappingEnd(args);\n            }\n        }\n\n        public getVarDeclFromIdentifier(boundDeclInfo: BoundDeclInfo): BoundDeclInfo {\n            CompilerDiagnostics.assert(boundDeclInfo.boundDecl && boundDeclInfo.boundDecl.init &&\n                boundDeclInfo.boundDecl.init.nodeType === NodeType.Name,\n                \"The init expression of bound declaration when emitting as constant has to be indentifier\");\n\n            var init = boundDeclInfo.boundDecl.init;\n            var ident = <Identifier>init;\n\n            this.setTypeCheckerUnit(this.document.fileName);\n            var pullSymbol = this.resolvingContext.resolvingTypeReference\n                ? this.pullTypeChecker.resolver.resolveTypeNameExpression(ident, boundDeclInfo.pullDecl.getParentDecl(), this.resolvingContext).symbol\n                : this.pullTypeChecker.resolver.resolveNameExpression(ident, boundDeclInfo.pullDecl.getParentDecl(), this.resolvingContext).symbol;\n            if (pullSymbol) {\n                var pullDecls = pullSymbol.getDeclarations();\n                if (pullDecls.length === 1) {\n                    var pullDecl = pullDecls[0];\n                    var ast = this.semanticInfoChain.getASTForDecl(pullDecl);\n                    if (ast && ast.nodeType === NodeType.VariableDeclarator) {\n                        return { boundDecl: <VariableDeclarator>ast, pullDecl: pullDecl };\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        private getConstantValue(boundDeclInfo: BoundDeclInfo): number {\n            var init = boundDeclInfo.boundDecl.init;\n            if (init) {\n                if (init.nodeType === NodeType.NumericLiteral) {\n                    var numLit = <NumberLiteral>init;\n                    return numLit.value;\n                }\n                else if (init.nodeType === NodeType.LeftShiftExpression) {\n                    var binop = <BinaryExpression>init;\n                    if (binop.operand1.nodeType === NodeType.NumericLiteral &&\n                        binop.operand2.nodeType === NodeType.NumericLiteral) {\n                        return (<NumberLiteral>binop.operand1).value << (<NumberLiteral>binop.operand2).value;\n                    }\n                }\n                else if (init.nodeType === NodeType.Name) {\n                    var varDeclInfo = this.getVarDeclFromIdentifier(boundDeclInfo);\n                    if (varDeclInfo) {\n                        return this.getConstantValue(varDeclInfo);\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public getConstantDecl(dotExpr: BinaryExpression): BoundDeclInfo {\n            this.setTypeCheckerUnit(this.document.fileName);\n            var pullSymbol = this.pullTypeChecker.resolver.resolveDottedNameExpression(dotExpr, this.getEnclosingDecl(), this.resolvingContext).symbol;\n            if (pullSymbol && pullSymbol.hasFlag(PullElementFlags.Constant)) {\n                var pullDecls = pullSymbol.getDeclarations();\n                if (pullDecls.length === 1) {\n                    var pullDecl = pullDecls[0];\n                    var ast = this.semanticInfoChain.getASTForDecl(pullDecl);\n                    if (ast && ast.nodeType === NodeType.VariableDeclarator) {\n                        return { boundDecl: <VariableDeclarator>ast, pullDecl: pullDecl };\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public tryEmitConstant(dotExpr: BinaryExpression) {\n            if (!this.emitOptions.compilationSettings.propagateConstants) {\n                return false;\n            }\n            var propertyName = <Identifier>dotExpr.operand2;\n            var boundDeclInfo = this.getConstantDecl(dotExpr);\n            if (boundDeclInfo) {\n                var value = this.getConstantValue(boundDeclInfo);\n                if (value !== null) {\n                    this.writeToOutput(value.toString());\n                    var comment = \" /* \";\n                    comment += propertyName.actualText;\n                    comment += \" */\";\n                    this.writeToOutput(comment);\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public emitCall(callNode: CallExpression, target: AST, args: ASTList) {\n            if (!this.emitSuperCall(callNode)) {\n                if (target.nodeType === NodeType.FunctionDeclaration) {\n                    this.writeToOutput(\"(\");\n                }\n                if (callNode.target.nodeType === NodeType.SuperExpression && this.emitState.container === EmitContainer.Constructor) {\n                    this.writeToOutput(\"_super.call\");\n                }\n                else {\n                    this.emitJavascript(target, false);\n                }\n                if (target.nodeType === NodeType.FunctionDeclaration) {\n                    this.writeToOutput(\")\");\n                }\n                this.recordSourceMappingStart(args);\n                this.writeToOutput(\"(\");\n                if (callNode.target.nodeType === NodeType.SuperExpression && this.emitState.container === EmitContainer.Constructor) {\n                    this.writeToOutput(\"this\");\n                    if (args && args.members.length) {\n                        this.writeToOutput(\", \");\n                    }\n                }\n                this.emitCommaSeparatedList(args);\n                this.writeToOutput(\")\");\n                this.recordSourceMappingEnd(args);\n            }\n        }\n\n        public emitInnerFunction(funcDecl: FunctionDeclaration, printName: boolean, includePreComments = true) {\n\n            /// REVIEW: The code below causes functions to get pushed to a newline in cases where they shouldn\'t\n            /// such as: \n            ///     Foo.prototype.bar = \n            ///         function() {\n            ///         };\n            /// Once we start emitting comments, we should pull this code out to place on the outer context where the function\n            /// is used.\n            //if (funcDecl.preComments!=null && funcDecl.preComments.length>0) {\n            //    this.writeLineToOutput(\"\");\n            //    this.increaseIndent();\n            //    emitIndent();\n            //}\n\n            var pullDecl = this.semanticInfoChain.getDeclForAST(funcDecl, this.document.fileName);\n            this.pushDecl(pullDecl);\n\n            // We have no way of knowing if the current function is used as an expression or a statement, so as to enusre that the emitted\n            // JavaScript is always valid, add an extra parentheses for unparenthesized function expressions\n            var shouldParenthesize = false;// hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.IsFunctionExpression) && !funcDecl.isAccessor() && (hasFlag(funcDecl.getFlags(), ASTFlags.ExplicitSemicolon) || hasFlag(funcDecl.getFlags(), ASTFlags.AutomaticSemicolon));\n\n            if (includePreComments) {\n                this.emitComments(funcDecl, true);\n            }\n\n            if (shouldParenthesize) {\n                this.writeToOutput(\"(\");\n            }\n            this.recordSourceMappingStart(funcDecl);\n            var accessorSymbol = funcDecl.isAccessor() ? PullHelpers.getAccessorSymbol(funcDecl, this.semanticInfoChain, this.document.fileName) : null;\n            var container = accessorSymbol ? accessorSymbol.getContainer() : null;\n            var containerKind = container ? container.getKind() : PullElementKind.None;\n            if (!(funcDecl.isAccessor() && containerKind !== PullElementKind.Class && containerKind !== PullElementKind.ConstructorType)) {\n                this.writeToOutput(\"function \");\n            }\n\n            if (funcDecl.isConstructor) {\n                this.writeToOutput(this.thisClassNode.name.actualText);\n            }\n\n            if (printName) {\n                var id = funcDecl.getNameText();\n                if (id && !funcDecl.isAccessor()) {\n                    if (funcDecl.name) {\n                        this.recordSourceMappingStart(funcDecl.name);\n                    }\n                    this.writeToOutput(id);\n                    if (funcDecl.name) {\n                        this.recordSourceMappingEnd(funcDecl.name);\n                    }\n                }\n            }\n\n            this.writeToOutput(\"(\");\n            var argsLen = 0;\n            if (funcDecl.arguments) {\n                this.emitComments(funcDecl.arguments, true);\n\n                var tempContainer = this.setContainer(EmitContainer.Args);\n                argsLen = funcDecl.arguments.members.length;\n                var printLen = argsLen;\n                if (funcDecl.variableArgList) {\n                    printLen--;\n                }\n                for (var i = 0; i < printLen; i++) {\n                    var arg = <Parameter>funcDecl.arguments.members[i];\n                    arg.emit(this);\n\n                    if (i < (printLen - 1)) {\n                        this.writeToOutput(\", \");\n                    }\n                }\n                this.setContainer(tempContainer);\n\n                this.emitComments(funcDecl.arguments, false);\n            }\n            this.writeLineToOutput(\") {\");\n\n            if (funcDecl.isConstructor) {\n                this.recordSourceMappingNameStart(\"constructor\");\n            } else if (funcDecl.isGetAccessor()) {\n                this.recordSourceMappingNameStart(\"get_\" + funcDecl.getNameText());\n            } else if (funcDecl.isSetAccessor()) {\n                this.recordSourceMappingNameStart(\"set_\" + funcDecl.getNameText());\n            } else {\n                this.recordSourceMappingNameStart(funcDecl.getNameText());\n            }\n            this.indenter.increaseIndent();\n\n            this.emitDefaultValueAssignments(funcDecl);\n            this.emitRestParameterInitializer(funcDecl);\n\n            if (this.shouldCaptureThis(funcDecl)) {\n                this.writeCaptureThisStatement(funcDecl);\n            }\n\n            if (funcDecl.isConstructor) {\n                this.emitConstructorStatements(funcDecl);\n            }\n            else {\n                this.emitModuleElements(funcDecl.block.statements);\n            }\n\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.recordSourceMappingStart(funcDecl.block.closeBraceSpan);\n            this.writeToOutput(\"}\");\n\n            this.recordSourceMappingNameEnd();\n            this.recordSourceMappingEnd(funcDecl.block.closeBraceSpan);\n            this.recordSourceMappingEnd(funcDecl);\n\n            if (shouldParenthesize) {\n                this.writeToOutput(\")\");\n            }\n\n            // The extra call is to make sure the caller\'s funcDecl end is recorded, since caller wont be able to record it\n            this.recordSourceMappingEnd(funcDecl);\n\n            this.emitComments(funcDecl, false);\n\n            this.popDecl(pullDecl);\n        }\n\n        private emitDefaultValueAssignments(funcDecl: FunctionDeclaration): void {\n            var n = funcDecl.arguments.members.length;\n            if (funcDecl.variableArgList) {\n                n--;\n            }\n\n            for (var i = 0; i < n; i++) {\n                var arg = <Parameter>funcDecl.arguments.members[i];\n                if (arg.init) {\n                    this.emitIndent();\n                    this.recordSourceMappingStart(arg);\n                    this.writeToOutput(\"if (typeof \" + arg.id.actualText + \" === \\\"undefined\\\") { \");//\n                    this.recordSourceMappingStart(arg.id);\n                    this.writeToOutput(arg.id.actualText);\n                    this.recordSourceMappingEnd(arg.id);\n                    this.writeToOutput(\" = \");\n                    this.emitJavascript(arg.init, false);\n                    this.writeLineToOutput(\"; }\");\n                    this.recordSourceMappingEnd(arg);\n                }\n            }\n        }\n\n        private emitRestParameterInitializer(funcDecl: FunctionDeclaration): void  {\n            if (funcDecl.variableArgList) {\n                var n = funcDecl.arguments.members.length;\n                var lastArg = <Parameter>funcDecl.arguments.members[n - 1];\n                this.emitIndent();\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(\"var \");\n                this.recordSourceMappingStart(lastArg.id);\n                this.writeToOutput(lastArg.id.actualText);\n                this.recordSourceMappingEnd(lastArg.id);\n                this.writeLineToOutput(\" = [];\");\n                this.recordSourceMappingEnd(lastArg);\n                this.emitIndent();\n                this.writeToOutput(\"for (\")\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(\"var _i = 0;\");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeToOutput(\" \");\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(\"_i < (arguments.length - \" + (n - 1) + \")\");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeToOutput(\"; \");\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(\"_i++\");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeLineToOutput(\") {\");\n                this.indenter.increaseIndent();\n                this.emitIndent();\n\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(lastArg.id.actualText + \"[_i] = arguments[_i + \" + (n - 1) + \"];\");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeLineToOutput(\"\");\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.writeLineToOutput(\"}\");\n            }\n        }\n\n        public getModuleImportAndDependencyList(moduleDecl: ModuleDeclaration) {\n            var importList = \"\";\n            var dependencyList = \"\";\n\n            var semanticInfo = this.semanticInfoChain.getUnit(this.document.fileName);\n            var imports = semanticInfo.getDynamicModuleImports();\n\n            // all dependencies are quoted\n            if (imports.length) {\n                for (var i = 0; i < imports.length; i++) {\n                    var importStatement = imports[i];\n                    var importStatementAST = <ImportDeclaration>semanticInfo.getASTForDecl(importStatement.getDeclarations()[0]);\n\n                    if (importStatement.getIsUsedAsValue()) {\n                        if (i <= imports.length - 1) {\n                            dependencyList += \", \";\n                            importList += \", \";\n                        }\n\n                        importList += \"__\" + importStatement.getName() + \"__\";\n                        dependencyList += importStatementAST.firstAliasedModToString();\n                    }\n                }\n            }\n\n            // emit any potential amd dependencies\n            for (var i = 0; i < moduleDecl.amdDependencies.length; i++) {\n                dependencyList += \", \\\"\" + moduleDecl.amdDependencies[i] + \"\\\"\";\n            }\n\n            return {\n                importList: importList,\n                dependencyList: dependencyList\n            };\n        }\n\n        public shouldCaptureThis(ast: AST) {\n            if (ast.nodeType === NodeType.Script) {\n                var scriptDecl = this.semanticInfoChain.getUnit(this.document.fileName).getTopLevelDecls()[0];\n                return (scriptDecl.getFlags() & PullElementFlags.MustCaptureThis) === PullElementFlags.MustCaptureThis;\n            }\n\n            var decl = this.semanticInfoChain.getDeclForAST(ast, this.document.fileName);\n            if (decl) {\n                return (decl.getFlags() & PullElementFlags.MustCaptureThis) === PullElementFlags.MustCaptureThis;\n            }\n\n            return false;\n        }\n\n        public emitModule(moduleDecl: ModuleDeclaration) {\n            var pullDecl = this.semanticInfoChain.getDeclForAST(moduleDecl, this.document.fileName);\n            this.pushDecl(pullDecl);\n\n            var modName = moduleDecl.name.actualText;\n            if (isTSFile(modName)) {\n                moduleDecl.name.setText(modName.substring(0, modName.length - 3));\n            }\n\n            var isDynamicMod = hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsDynamic);\n            var prevOutFile = this.outfile;\n            var prevOutFileName = this.emittingFileName;\n            var prevAllSourceMappers = this.allSourceMappers;\n            var prevSourceMapper = this.sourceMapper;\n            var prevColumn = this.emitState.column;\n            var prevLine = this.emitState.line;\n            var temp = this.setContainer(EmitContainer.Module);\n            var svModuleName = this.moduleName;\n            var isExported = hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.Exported);\n            var isWholeFile = hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsWholeFile);\n            this.moduleName = moduleDecl.name.actualText;\n\n            // prologue\n            if (isDynamicMod) {\n\n                // if the external module has an \"export =\" identifier, we\'ll\n                // set it in the ExportAssignment emit method\n                this.setExportAssignmentIdentifier(null);\n\n                // create the new outfile for this module\n                var tsModFileName = stripQuotes(moduleDecl.name.actualText);\n                var modFilePath = trimModName(tsModFileName) + \".js\";\n                modFilePath = this.emitOptions.mapOutputFileName(modFilePath, TypeScriptCompiler.mapToJSFileName);\n\n                if (this.emitOptions.ioHost) {\n                    // Ensure that the slashes are normalized so that the comparison is fair\n                    // REVIEW: Note that modFilePath is normalized to forward slashes in Parser.parse, so the \n                    // first call to switchToForwardSlashes is technically a no-op, but it will prevent us from\n                    // regressing if the parser changes\n                    if (switchToForwardSlashes(modFilePath) !== switchToForwardSlashes(this.emittingFileName)) {\n                        this.emittingFileName = modFilePath;\n                        var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.compilationSettings.emitComments && moduleDecl.containsUnicodeCharInComment);\n                        this.outfile = this.createFile(this.emittingFileName, useUTF8InOutputfile);\n                        if (prevSourceMapper !== null) {\n                            this.allSourceMappers = [];\n                            var sourceMapFile = this.emittingFileName + SourceMapper.MapFileExtension;\n                            var sourceMappingFile = this.createFile(sourceMapFile, false);\n                            this.setSourceMappings(new SourceMapper(tsModFileName, this.emittingFileName, sourceMapFile, this.outfile, sourceMappingFile, this.emitOptions.compilationSettings.emitFullSourceMapPath));\n                            this.emitState.column = 0;\n                            this.emitState.line = 0;\n                        }\n                    } else {\n                        CompilerDiagnostics.assert(this.emitOptions.outputMany, \"Cannot have dynamic modules compiling into single file\");\n                    }\n                }\n\n                this.setContainer(EmitContainer.DynamicModule); // discard the previous \'Module\' container\n\n                this.recordSourceMappingStart(moduleDecl);\n                if (this.emitOptions.compilationSettings.moduleGenTarget === ModuleGenTarget.Asynchronous) { // AMD\n                    var dependencyList = \"[\\\"require\\\", \\\"exports\\\"\";\n                    var importList = \"require, exports\";\n\n                    var importAndDependencyList = this.getModuleImportAndDependencyList(moduleDecl);\n                    importList += importAndDependencyList.importList;\n                    dependencyList += importAndDependencyList.dependencyList + \"]\";\n\n                    this.writeLineToOutput(\"define(\" + dependencyList + \",\" + \" function(\" + importList + \") {\");\n                }\n                else { // Node\n\n                }\n            }\n            else {\n\n                if (!isExported) {\n                    this.recordSourceMappingStart(moduleDecl);\n                    this.writeToOutput(\"var \");\n                    this.recordSourceMappingStart(moduleDecl.name);\n                    this.writeToOutput(this.moduleName);\n                    this.recordSourceMappingEnd(moduleDecl.name);\n                    this.writeLineToOutput(\";\");\n                    this.recordSourceMappingEnd(moduleDecl);\n                    this.emitIndent();\n                }\n\n                this.writeToOutput(\"(\");\n                this.recordSourceMappingStart(moduleDecl);\n                this.writeToOutput(\"function (\");\n                this.recordSourceMappingStart(moduleDecl.name);\n                this.writeToOutput(this.moduleName);\n                this.recordSourceMappingEnd(moduleDecl.name);\n                this.writeLineToOutput(\") {\");\n            }\n\n            if (!isWholeFile) {\n                this.recordSourceMappingNameStart(this.moduleName);\n            }\n\n            // body - don\'t indent for Node\n            if (!isDynamicMod || this.emitOptions.compilationSettings.moduleGenTarget === ModuleGenTarget.Asynchronous) {\n                this.indenter.increaseIndent();\n            }\n\n            if (this.shouldCaptureThis(moduleDecl)) {\n                this.writeCaptureThisStatement(moduleDecl);\n            }\n\n            this.emitModuleElements(moduleDecl.members);\n            if (!isDynamicMod || this.emitOptions.compilationSettings.moduleGenTarget === ModuleGenTarget.Asynchronous) {\n                this.indenter.decreaseIndent();\n            }\n            this.emitIndent();\n\n            // epilogue\n            if (isDynamicMod) {\n                var exportAssignmentIdentifier = this.getExportAssignmentIdentifier();\n                var exportAssignmentSymbol = (<PullContainerTypeSymbol>pullDecl.getSymbol()).getExportAssignedSymbol();\n\n                if (this.emitOptions.compilationSettings.moduleGenTarget === ModuleGenTarget.Asynchronous) { // AMD\n                    if (exportAssignmentIdentifier && exportAssignmentSymbol && !(exportAssignmentSymbol.getKind() & PullElementKind.SomeTypeReference)) {\n                        // indent was decreased for AMD above\n                        this.indenter.increaseIndent();\n                        this.emitIndent();\n                        this.writeLineToOutput(\"return \" + exportAssignmentIdentifier + \";\");\n                        this.indenter.decreaseIndent();\n                    }\n                    this.writeToOutput(\"});\");\n                }\n                else if (exportAssignmentIdentifier && exportAssignmentSymbol && !(exportAssignmentSymbol.getKind() & PullElementKind.SomeTypeReference)) {\n                    this.emitIndent();\n                    this.writeLineToOutput(\"module.exports = \" + exportAssignmentIdentifier + \";\");\n                }\n\n                if (!isWholeFile) {\n                    this.recordSourceMappingNameEnd();\n                }\n                this.recordSourceMappingEnd(moduleDecl);\n\n                // close the module outfile, and restore the old one\n                if (this.outfile !== prevOutFile) {\n                    this.emitSourceMapsAndClose();\n                    if (prevSourceMapper !== null) {\n                        this.allSourceMappers = prevAllSourceMappers;\n                        this.sourceMapper = prevSourceMapper;\n                        this.emitState.column = prevColumn;\n                        this.emitState.line = prevLine;\n                    }\n                    this.outfile = prevOutFile;\n                    this.emittingFileName = prevOutFileName;\n                }\n            }\n            else {\n                var parentIsDynamic = temp === EmitContainer.DynamicModule;\n                this.recordSourceMappingStart(moduleDecl.endingToken);\n                if (temp === EmitContainer.Prog && isExported) {\n                    this.writeToOutput(\"}\");\n                    if (!isWholeFile) {\n                        this.recordSourceMappingNameEnd();\n                    }\n                    this.recordSourceMappingEnd(moduleDecl.endingToken);\n                    this.writeToOutput(\")(this.\" + this.moduleName + \" || (this.\" + this.moduleName + \" = {}));\");\n                }\n                else if (isExported || temp === EmitContainer.Prog) {\n                    var dotMod = svModuleName !== \"\" ? (parentIsDynamic ? \"exports\" : svModuleName) + \".\" : svModuleName;\n                    this.writeToOutput(\"}\");\n                    if (!isWholeFile) {\n                        this.recordSourceMappingNameEnd();\n                    }\n                    this.recordSourceMappingEnd(moduleDecl.endingToken);\n                    this.writeToOutput(\")(\" + dotMod + this.moduleName + \" || (\" + dotMod + this.moduleName + \" = {}));\");\n                }\n                else if (!isExported && temp !== EmitContainer.Prog) {\n                    this.writeToOutput(\"}\");\n                    if (!isWholeFile) {\n                        this.recordSourceMappingNameEnd();\n                    }\n                    this.recordSourceMappingEnd(moduleDecl.endingToken);\n                    this.writeToOutput(\")(\" + this.moduleName + \" || (\" + this.moduleName + \" = {}));\");\n                }\n                else {\n                    this.writeToOutput(\"}\");\n                    if (!isWholeFile) {\n                        this.recordSourceMappingNameEnd();\n                    }\n                    this.recordSourceMappingEnd(moduleDecl.endingToken);\n                    this.writeToOutput(\")();\");\n                }\n\n                this.recordSourceMappingEnd(moduleDecl);\n                if (temp !== EmitContainer.Prog && isExported) {\n                    this.recordSourceMappingStart(moduleDecl);\n                    if (parentIsDynamic) {\n                        this.writeLineToOutput(\"\");\n                        this.emitIndent();\n                        this.writeToOutput(\"var \" + this.moduleName + \" = exports.\" + this.moduleName + \";\");\n                    } else {\n                        this.writeLineToOutput(\"\");\n                        this.emitIndent();\n                        this.writeToOutput(\"var \" + this.moduleName + \" = \" + svModuleName + \".\" + this.moduleName + \";\");\n                    }\n                    this.recordSourceMappingEnd(moduleDecl);\n                }\n            }\n\n            this.setContainer(temp);\n            this.moduleName = svModuleName;\n\n            this.popDecl(pullDecl);\n        }\n\n        public emitEnumElement(varDecl: VariableDeclarator): void {\n            // <EnumName>[<EnumName>[\"<MemberName>\"] = <MemberValue>] = \"<MemberName>\";\n            this.writeToOutput(this.moduleName);\n            this.writeToOutput(\'[\');\n            this.writeToOutput(this.moduleName);\n            this.writeToOutput(\'[\"\');\n            this.writeToOutput(varDecl.id.text);\n            this.writeToOutput(\'\"] = \');\n            varDecl.init.emit(this);\n            this.writeToOutput(\'] = \"\');\n            this.writeToOutput(varDecl.id.text);\n            this.writeToOutput(\'\";\');\n        }\n\n        public emitIndex(operand1: AST, operand2: AST) {\n            operand1.emit(this);\n            this.writeToOutput(\"[\");\n            operand2.emit(this);\n            this.writeToOutput(\"]\");\n        }\n\n        public emitFunction(funcDecl: FunctionDeclaration) {\n            if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Signature) /*|| funcDecl.isOverload*/) {\n                return;\n            }\n            var temp: number;\n            var tempFnc = this.thisFunctionDeclaration;\n            this.thisFunctionDeclaration = funcDecl;\n\n            if (funcDecl.isConstructor) {\n                temp = this.setContainer(EmitContainer.Constructor);\n            }\n            else {\n                temp = this.setContainer(EmitContainer.Function);\n            }\n\n            var funcName = funcDecl.getNameText();\n\n            if (((temp !== EmitContainer.Constructor) ||\n                ((funcDecl.getFunctionFlags() & FunctionFlags.Method) === FunctionFlags.None))) {\n                this.recordSourceMappingStart(funcDecl);\n                this.emitInnerFunction(funcDecl, (funcDecl.name && !funcDecl.name.isMissing()));\n            }\n            this.setContainer(temp);\n            this.thisFunctionDeclaration = tempFnc;\n\n            if (!hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Signature)) {\n                if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Static)) {\n                    if (this.thisClassNode) {\n                        this.writeLineToOutput(\"\");\n                        if (funcDecl.isAccessor()) {\n                            this.emitPropertyAccessor(funcDecl, this.thisClassNode.name.actualText, false);\n                        }\n                        else {\n                            this.emitIndent();\n                            this.recordSourceMappingStart(funcDecl);\n                            this.writeToOutput(this.thisClassNode.name.actualText + \".\" + funcName + \" = \" + funcName + \";\");\n                            this.recordSourceMappingEnd(funcDecl);\n                        }\n                    }\n                }\n                else if ((this.emitState.container === EmitContainer.Module || this.emitState.container === EmitContainer.DynamicModule) && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Exported)) {\n                    this.writeLineToOutput(\"\");\n                    this.emitIndent();\n                    var modName = this.emitState.container === EmitContainer.Module ? this.moduleName : \"exports\";\n                    this.recordSourceMappingStart(funcDecl);\n                    this.writeToOutput(modName + \".\" + funcName + \" = \" + funcName + \";\");\n                    this.recordSourceMappingEnd(funcDecl);\n                }\n            }\n        }\n\n        public emitAmbientVarDecl(varDecl: VariableDeclarator) {\n            if (varDecl.init) {\n                this.emitComments(varDecl, true);\n                this.recordSourceMappingStart(varDecl);\n                this.recordSourceMappingStart(varDecl.id);\n                this.writeToOutput(varDecl.id.actualText);\n                this.recordSourceMappingEnd(varDecl.id);\n                this.writeToOutput(\" = \");\n                this.emitJavascript(varDecl.init, false);\n                this.recordSourceMappingEnd(varDecl);\n                this.emitComments(varDecl, false);\n            }\n        }\n\n        public varListCount(): number {\n            return this.varListCountStack[this.varListCountStack.length - 1];\n        }\n\n        // Emits \"var \" if it is allowed\n        public emitVarDeclVar() {\n            // If it is var list of form var a, b, c = emit it only if count > 0 - which will be when emitting first var\n            // If it is var list of form  var a = varList count will be 0\n            if (this.varListCount() >= 0) {\n                this.writeToOutput(\"var \");\n                this.setInVarBlock(-this.varListCount());\n            }\n            return true;\n        }\n\n        public onEmitVar() {\n            if (this.varListCount() > 0) {\n                this.setInVarBlock(this.varListCount() - 1);\n            }\n            else if (this.varListCount() < 0) {\n                this.setInVarBlock(this.varListCount() + 1);\n            }\n        }\n\n        public emitVariableDeclaration(declaration: VariableDeclaration) {\n            var varDecl = <VariableDeclarator>declaration.declarators.members[0];\n\n            var symbolAndDiagnostics = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(varDecl, this.document.fileName);\n            var symbol = symbolAndDiagnostics && symbolAndDiagnostics.symbol;\n\n            var parentSymbol = symbol ? symbol.getContainer() : null;\n            var parentKind = parentSymbol ? parentSymbol.getKind() : PullElementKind.None;\n            var inClass = parentKind === PullElementKind.Class;\n\n            this.emitComments(declaration, true);\n            this.recordSourceMappingStart(declaration);\n            this.setInVarBlock(declaration.declarators.members.length);\n\n            var isAmbientWithoutInit = hasFlag(varDecl.getVarFlags(), VariableFlags.Ambient) && varDecl.init === null;\n            if (!isAmbientWithoutInit) {\n                for (var i = 0, n = declaration.declarators.members.length; i < n; i++) {\n                    var declarator = declaration.declarators.members[i];\n\n                    if (i > 0) {\n                        if (inClass) {\n                            this.writeToOutputTrimmable(\";\");\n                        }\n                        else {\n                            this.writeToOutputTrimmable(\", \");\n                        }\n                    }\n\n                    declarator.emit(this);\n                }\n            }\n\n            this.recordSourceMappingEnd(declaration);\n            this.emitComments(declaration, false);\n        }\n\n        public emitVariableDeclarator(varDecl: VariableDeclarator) {\n            var pullDecl = this.semanticInfoChain.getDeclForAST(varDecl, this.document.fileName);\n            this.pushDecl(pullDecl);\n            if ((varDecl.getVarFlags() & VariableFlags.Ambient) === VariableFlags.Ambient) {\n                this.emitAmbientVarDecl(varDecl);\n                this.onEmitVar();\n            }\n            else {\n                this.emitComments(varDecl, true);\n                this.recordSourceMappingStart(varDecl);\n\n                var symbolAndDiagnostics = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(varDecl, this.document.fileName);\n                var symbol = symbolAndDiagnostics && symbolAndDiagnostics.symbol;\n                var parentSymbol = symbol ? symbol.getContainer() : null;\n                var parentKind = parentSymbol ? parentSymbol.getKind() : PullElementKind.None;\n                var associatedParentSymbol = parentSymbol ? parentSymbol.getAssociatedContainerType() : null;\n                var associatedParentSymbolKind = associatedParentSymbol ? associatedParentSymbol.getKind() : PullElementKind.None;\n                if (parentKind === PullElementKind.Class) {\n                    // class\n                    if (this.emitState.container !== EmitContainer.Args) {\n                        if (varDecl.isStatic()) {\n                            this.writeToOutput(parentSymbol.getName() + \".\");\n                        }\n                        else {\n                            this.writeToOutput(\"this.\");\n                        }\n                    }\n                }\n                else if (parentKind === PullElementKind.Enum ||\n                    parentKind === PullElementKind.DynamicModule ||\n                    associatedParentSymbolKind === PullElementKind.Container ||\n                    associatedParentSymbolKind === PullElementKind.DynamicModule ||\n                    associatedParentSymbolKind === PullElementKind.Enum) {\n                    // module\n                    if (!varDecl.isExported() && !varDecl.isProperty()) {\n                        this.emitVarDeclVar();\n                    }\n                    else {\n                        if (this.emitState.container === EmitContainer.DynamicModule) {\n                            this.writeToOutput(\"exports.\");\n                        }\n                        else {\n                            this.writeToOutput(this.moduleName + \".\");\n                        }\n                    }\n                }\n                else {\n                    this.emitVarDeclVar();\n                }\n\n                this.recordSourceMappingStart(varDecl.id);\n                this.writeToOutput(varDecl.id.actualText);\n                this.recordSourceMappingEnd(varDecl.id);\n                var hasInitializer = (varDecl.init !== null);\n                if (hasInitializer) {\n                    this.writeToOutputTrimmable(\" = \");\n\n                    // Ensure we have a fresh var list count when recursing into the variable \n                    // initializer.  We don\'t want our current list of variables to affect how we\n                    // emit nested variable lists.\n                    this.varListCountStack.push(0);\n                    varDecl.init.emit(this);\n                    this.varListCountStack.pop();\n                }\n\n                if (parentKind === PullElementKind.Class) {\n                    // class\n                    if (this.emitState.container !== EmitContainer.Args) {\n                        this.writeToOutput(\";\");\n                    }\n                }\n\n                this.onEmitVar();\n\n                this.recordSourceMappingEnd(varDecl);\n                this.emitComments(varDecl, false);\n            }\n            this.popDecl(pullDecl);\n        }\n\n        private symbolIsUsedInItsEnclosingContainer(symbol: PullSymbol, dynamic = false) {\n            var symDecls = symbol.getDeclarations();\n\n            if (symDecls.length) {\n                var enclosingDecl = this.getEnclosingDecl();\n                if (enclosingDecl) {\n                    var parentDecl = symDecls[0].getParentDecl();\n                    if (parentDecl) {\n                        var symbolDeclarationEnclosingContainer = parentDecl;\n                        var enclosingContainer = enclosingDecl;\n\n                        // compute the closing container of the symbol\'s declaration\n                        while (symbolDeclarationEnclosingContainer) {\n                            if (symbolDeclarationEnclosingContainer.getKind() === (dynamic ? PullElementKind.DynamicModule : PullElementKind.Container)) {\n                                break;\n                            }\n                            symbolDeclarationEnclosingContainer = symbolDeclarationEnclosingContainer.getParentDecl();\n                        }\n\n                        // if the symbol in question is not a global, compute the nearest\n                        // enclosing declaration from the point of usage\n                        if (symbolDeclarationEnclosingContainer) {\n                            while (enclosingContainer) {\n                                if (enclosingContainer.getKind() === (dynamic ? PullElementKind.DynamicModule : PullElementKind.Container)) {\n                                    break;\n                                }\n\n                                enclosingContainer = enclosingContainer.getParentDecl();\n                            }\n                        }\n\n                        if (symbolDeclarationEnclosingContainer && enclosingContainer) {\n                            var same = symbolDeclarationEnclosingContainer === enclosingContainer;\n\n                            // initialized module object variables are bound to their parent\'s decls\n                            if (!same && symbol.hasFlag(PullElementFlags.InitializedModule)) {\n                                same = symbolDeclarationEnclosingContainer === enclosingContainer.getParentDecl();\n                            }\n\n                            return same;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        public emitName(name: Identifier, addThis: boolean) {\n            this.emitComments(name, true);\n            this.recordSourceMappingStart(name);\n            if (!name.isMissing()) {\n                this.setTypeCheckerUnit(this.document.fileName);\n                var pullSymbol = this.resolvingContext.resolvingTypeReference\n                    ? this.pullTypeChecker.resolver.resolveTypeNameExpression(name, this.getEnclosingDecl(), this.resolvingContext).symbol\n                    : this.pullTypeChecker.resolver.resolveNameExpression(name, this.getEnclosingDecl(), this.resolvingContext).symbol;\n                var pullSymbolKind = pullSymbol.getKind();\n                if (addThis && (this.emitState.container !== EmitContainer.Args) && pullSymbol) {\n                    var pullSymbolContainer = pullSymbol.getContainer();\n\n                    if (pullSymbolContainer) {\n                        var pullSymbolContainerKind = pullSymbolContainer.getKind();\n\n                        if (pullSymbolContainerKind === PullElementKind.Class) {\n                            if (pullSymbol.hasFlag(PullElementFlags.Static)) {\n                                // This is static symbol\n                                this.writeToOutput(pullSymbolContainer.getName() + \".\");\n                            }\n                            else if (pullSymbolKind === PullElementKind.Property) {\n                                this.emitThis();\n                                this.writeToOutput(\".\");\n                            }\n                        }\n                        else if (pullSymbolContainerKind === PullElementKind.Container || pullSymbolContainerKind === PullElementKind.Enum ||\n                                 pullSymbolContainer.hasFlag(PullElementFlags.InitializedModule | PullElementFlags.InitializedEnum)) {\n                            // If property or, say, a constructor being invoked locally within the module of its definition\n                            if (pullSymbolKind === PullElementKind.Property || pullSymbolKind === PullElementKind.EnumMember) {\n                                this.writeToOutput(pullSymbolContainer.getName() + \".\");\n                            }\n                            else if (pullSymbol.hasFlag(PullElementFlags.Exported) &&\n                                     pullSymbolKind === PullElementKind.Variable &&\n                                     !pullSymbol.hasFlag(PullElementFlags.InitializedModule | PullElementFlags.InitializedEnum)) {\n                                this.writeToOutput(pullSymbolContainer.getName() + \".\");\n                            }\n                            else if (pullSymbol.hasFlag(PullElementFlags.Exported) && !this.symbolIsUsedInItsEnclosingContainer(pullSymbol)) {\n                                this.writeToOutput(pullSymbolContainer.getName() + \".\");\n                            }\n                            // else if (pullSymbol.hasFlag(PullElementFlags.Exported) && \n                            //             pullSymbolKind !== PullElementKind.Class && \n                            //             pullSymbolKind !== PullElementKind.ConstructorMethod && \n                            //             !pullSymbol.hasFlag(PullElementFlags.ClassConstructorVariable)) {\n                            //         this.writeToOutput(pullSymbolContainer.getName() + \".\");\n                            // }\n                        }\n                        else if (pullSymbolContainerKind === PullElementKind.DynamicModule ||\n                                 pullSymbolContainer.hasFlag(PullElementFlags.InitializedDynamicModule)) {\n                            if (pullSymbolKind === PullElementKind.Property) {\n                                // If dynamic module\n                                this.writeToOutput(\"exports.\");\n                            }\n                            else if (pullSymbol.hasFlag(PullElementFlags.Exported) &&\n                                     !pullSymbol.hasFlag(PullElementFlags.ImplicitVariable) &&\n                                     pullSymbol.getKind() !== PullElementKind.ConstructorMethod &&\n                                     pullSymbol.getKind() !== PullElementKind.Class &&\n                                     pullSymbol.getKind() !== PullElementKind.Enum) {\n                                this.writeToOutput(\"exports.\");\n                            }\n                        }\n                        else if (pullSymbolKind === PullElementKind.Property) {\n                            if (pullSymbolContainer.getKind() === PullElementKind.Class) {\n                                this.emitThis();\n                                this.writeToOutput(\".\");\n                            }\n                        }\n                        else {\n                            var pullDecls = pullSymbol.getDeclarations();\n                            var emitContainerName = true;\n                            for (var i = 0; i < pullDecls.length; i++) {\n                                if (pullDecls[i].getScriptName() === this.document.fileName) {\n                                    emitContainerName = false;\n                                }\n                            }\n                            if (emitContainerName) {\n                                this.writeToOutput(pullSymbolContainer.getName() + \".\");\n                            }\n                        }\n                    }\n                }\n\n                // If it\'s a dynamic module, we need to print the \"require\" invocation\n                if (pullSymbol && pullSymbolKind === PullElementKind.DynamicModule) {\n                    if (this.emitOptions.compilationSettings.moduleGenTarget === ModuleGenTarget.Asynchronous) {\n                        this.writeToOutput(\"__\" + this.modAliasId + \"__\");\n                    }\n                    else {\n                        var moduleDecl: ModuleDeclaration = <ModuleDeclaration>this.semanticInfoChain.getASTForSymbol(pullSymbol, this.document.fileName);\n                        var modPath = name.actualText;\n                        var isAmbient = pullSymbol.hasFlag(PullElementFlags.Ambient);\n                        modPath = isAmbient ? modPath : this.firstModAlias ? this.firstModAlias : quoteBaseName(modPath);\n                        modPath = isAmbient ? modPath : (!isRelative(stripQuotes(modPath)) ? quoteStr(\"./\" + stripQuotes(modPath)) : modPath);\n                        this.writeToOutput(\"require(\" + modPath + \")\");\n                    }\n                }\n                else {\n                    this.writeToOutput(name.actualText);\n                }\n            }\n\n            this.recordSourceMappingEnd(name);\n            this.emitComments(name, false);\n        }\n\n        public recordSourceMappingNameStart(name: string) {\n            if (this.sourceMapper) {\n                var finalName = name;\n                if (!name) {\n                    finalName = \"\";\n                } else if (this.sourceMapper.currentNameIndex.length > 0) {\n                    finalName = this.sourceMapper.names[this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length - 1]] + \".\" + name;\n                }\n\n                // We are currently not looking for duplicate but that is possible.\n                this.sourceMapper.names.push(finalName);\n                this.sourceMapper.currentNameIndex.push(this.sourceMapper.names.length - 1);\n            }\n        }\n\n        public recordSourceMappingNameEnd() {\n            if (this.sourceMapper) {\n                this.sourceMapper.currentNameIndex.pop();\n            }\n        }\n\n        public recordSourceMappingStart(ast: IASTSpan) {\n            if (this.sourceMapper && isValidAstNode(ast)) {\n                var lineCol = { line: -1, character: -1 };\n                var sourceMapping = new SourceMapping();\n                sourceMapping.start.emittedColumn = this.emitState.column;\n                sourceMapping.start.emittedLine = this.emitState.line;\n                // REVIEW: check time consumed by this binary search (about two per leaf statement)\n                var lineMap = this.document.lineMap;\n                lineMap.fillLineAndCharacterFromPosition(ast.minChar, lineCol);\n                sourceMapping.start.sourceColumn = lineCol.character;\n                sourceMapping.start.sourceLine = lineCol.line + 1;\n                lineMap.fillLineAndCharacterFromPosition(ast.limChar, lineCol);\n                sourceMapping.end.sourceColumn = lineCol.character;\n                sourceMapping.end.sourceLine = lineCol.line + 1;\n                if (this.sourceMapper.currentNameIndex.length > 0) {\n                    sourceMapping.nameIndex = this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length - 1];\n                }\n                // Set parent and child relationship\n                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];\n                siblings.push(sourceMapping);\n                this.sourceMapper.currentMappings.push(sourceMapping.childMappings);\n            }\n        }\n\n        public recordSourceMappingEnd(ast: IASTSpan) {\n            if (this.sourceMapper && isValidAstNode(ast)) {\n                // Pop source mapping childs\n                this.sourceMapper.currentMappings.pop();\n\n                // Get the last source mapping from sibling list = which is the one we are recording end for\n                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];\n                var sourceMapping = siblings[siblings.length - 1];\n\n                sourceMapping.end.emittedColumn = this.emitState.column;\n                sourceMapping.end.emittedLine = this.emitState.line;\n            }\n        }\n\n        // Note: may throw exception.\n        public emitSourceMapsAndClose(): void {\n            // Output a source mapping.  As long as we haven\'t gotten any errors yet.\n            if (this.sourceMapper !== null) {\n                SourceMapper.emitSourceMapping(this.allSourceMappers);\n            }\n\n            try {\n                this.outfile.Close();\n            }\n            catch (e) {\n                Emitter.throwEmitterError(e);\n            }\n        }\n\n        private emitParameterPropertyAndMemberVariableAssignments(): void {\n            // emit any parameter properties first\n            var constructorDecl = this.thisClassNode.constructorDecl;\n\n            if (constructorDecl && constructorDecl.arguments) {\n                for (var i = 0, n = constructorDecl.arguments.members.length; i < n; i++) {\n                    var arg = <BoundDecl>constructorDecl.arguments.members[i];\n                    if ((arg.getVarFlags() & VariableFlags.Property) !== VariableFlags.None) {\n                        this.emitIndent();\n                        this.recordSourceMappingStart(arg);\n                        this.recordSourceMappingStart(arg.id);\n                        this.writeToOutput(\"this.\" + arg.id.actualText);\n                        this.recordSourceMappingEnd(arg.id);\n                        this.writeToOutput(\" = \");\n                        this.recordSourceMappingStart(arg.id);\n                        this.writeToOutput(arg.id.actualText);\n                        this.recordSourceMappingEnd(arg.id);\n                        this.writeLineToOutput(\";\");\n                        this.recordSourceMappingEnd(arg);\n                    }\n                }\n            }\n\n            for (var i = 0, n = this.thisClassNode.members.members.length; i < n; i++) {\n                if (this.thisClassNode.members.members[i].nodeType === NodeType.VariableDeclarator) {\n                    var varDecl = <VariableDeclarator>this.thisClassNode.members.members[i];\n                    if (!hasFlag(varDecl.getVarFlags(), VariableFlags.Static) && varDecl.init) {\n                        this.emitIndent();\n                        this.emitVariableDeclarator(varDecl);\n                        this.writeLineToOutput(\"\");\n                    }\n                }\n            }\n        }\n\n        public emitCommaSeparatedList(list: ASTList, startLine: boolean = false): void {\n            if (list === null) {\n                return;\n            }\n            else {\n                // this.emitComments(ast, true);\n                    // this.emitComments(ast, false);\n\n                for (var i = 0, n = list.members.length; i < n; i++) {\n                    var emitNode = list.members[i];\n                    this.emitJavascript(emitNode, startLine);\n\n                    if (i < (n - 1)) {\n                        this.writeToOutput(startLine ? \",\" : \", \");\n                    }\n\n                    if (startLine) {\n                        this.writeLineToOutput(\"\");\n                    }\n                }\n            }\n        }\n\n        public emitModuleElements(list: ASTList) {\n            if (list === null) {\n                return;\n            }\n\n            this.emitComments(list, true);\n            var lastEmittedNode = null;\n\n            for (var i = 0, n = list.members.length; i < n; i++) {\n                var node = list.members[i];\n\n                if (node.shouldEmit()) {\n                    this.emitSpaceBetweenConstructs(lastEmittedNode, node);\n\n                    this.emitJavascript(node, true);\n                    this.writeLineToOutput(\"\");\n\n                    lastEmittedNode = node;\n                }\n            }\n\n            this.emitComments(list, false);\n        }\n\n        private isDirectivePrologueElement(node: AST) {\n            if (node.nodeType === NodeType.ExpressionStatement) {\n                var exprStatement = <ExpressionStatement>node;\n                return exprStatement.expression.nodeType === NodeType.StringLiteral;\n            }\n\n            return false;\n        }\n\n        // If these two constructs had more than one line between them originally, then emit at \n        // least one blank line between them.\n        public emitSpaceBetweenConstructs(node1: AST, node2: AST): void {\n            if (node1 === null || node2 === null) {\n                return;\n            }\n\n            if (node1.minChar === -1 || node1.limChar === -1 || node2.minChar === -1 || node2.limChar === -1) {\n                return;\n            }\n\n            var lineMap = this.document.lineMap;\n            var node1EndLine = lineMap.getLineNumberFromPosition(node1.limChar);\n            var node2StartLine = lineMap.getLineNumberFromPosition(node2.minChar);\n\n            if ((node2StartLine - node1EndLine) > 1) {\n                this.writeLineToOutput(\"\");\n            }\n        }\n\n        public emitScriptElements(script: Script, requiresExtendsBlock: boolean) {\n            var list = script.moduleElements;\n            this.emitComments(list, true);\n\n            // First, emit all the prologue elements.\n            for (var i = 0, n = list.members.length; i < n; i++) {\n                var node = list.members[i];\n\n                if (!this.isDirectivePrologueElement(node)) {\n                    break;\n                }\n\n                this.emitJavascript(node, true);\n                this.writeLineToOutput(\"\");\n            }\n\n            // Now emit __extends or a _this capture if necessary.\n            this.emitPrologue(script, requiresExtendsBlock);\n            var lastEmittedNode = null;\n\n                // Now emit the rest of the script elements\n            for (; i < n; i++) {\n                var node = list.members[i];\n\n                if (node.shouldEmit()) {\n                    this.emitSpaceBetweenConstructs(lastEmittedNode, node);\n\n                    this.emitJavascript(node, true);\n                    this.writeLineToOutput(\"\");\n\n                    lastEmittedNode = node;\n                }\n            }\n\n            this.emitComments(list, false);\n        }\n\n        public emitConstructorStatements(funcDecl: FunctionDeclaration) {\n            var list = funcDecl.block.statements;\n\n            if (list === null) {\n                return;\n            }\n\n            this.emitComments(list, true);\n\n            var emitPropertyAssignmentsAfterSuperCall = this.thisClassNode.extendsList && this.thisClassNode.extendsList.members.length > 0;\n            var propertyAssignmentIndex = emitPropertyAssignmentsAfterSuperCall ? 1 : 0;\n            var lastEmittedNode = null;\n\n            for (var i = 0, n = list.members.length; i < n; i++) {\n                // In some circumstances, class property initializers must be emitted immediately after the \'super\' constructor\n                // call which, in these cases, must be the first statement in the constructor body\n                if (i === propertyAssignmentIndex) {\n                    this.emitParameterPropertyAndMemberVariableAssignments();\n                }\n\n                var node = list.members[i];\n\n                if (node.shouldEmit()) {\n                    this.emitSpaceBetweenConstructs(lastEmittedNode, node);\n\n                    this.emitJavascript(node, true);\n                    this.writeLineToOutput(\"\");\n\n                    lastEmittedNode = node;\n                }\n            }\n\n            if (i === propertyAssignmentIndex) {\n                this.emitParameterPropertyAndMemberVariableAssignments();\n            }\n\n            this.emitComments(list, false);\n        }\n\n        // tokenId is the id the preceding token\n        public emitJavascript(ast: AST, startLine: boolean) {\n            if (ast === null) {\n                return;\n            }\n\n            if (startLine &&\n                this.indenter.indentAmt > 0) {\n\n                this.emitIndent();\n            }\n\n            ast.emit(this);\n        }\n\n        public emitPropertyAccessor(funcDecl: FunctionDeclaration, className: string, isProto: boolean) {\n            if (!hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor)) {\n                var accessorSymbol = PullHelpers.getAccessorSymbol(funcDecl, this.semanticInfoChain, this.document.fileName);\n                if (accessorSymbol.getGetter()) {\n                    return;\n                }\n            }\n\n            this.emitIndent();\n            this.recordSourceMappingStart(funcDecl);\n            this.writeLineToOutput(\"Object.defineProperty(\" + className + (isProto ? \".prototype, \\\"\" : \", \\\"\") + funcDecl.name.actualText + \"\\\"\" + \", {\");\n            this.indenter.increaseIndent();\n\n            var accessors = PullHelpers.getGetterAndSetterFunction(funcDecl, this.semanticInfoChain, this.document.fileName);\n            if (accessors.getter) {\n                this.emitIndent();\n                this.recordSourceMappingStart(accessors.getter);\n                this.writeToOutput(\"get: \");\n                this.emitInnerFunction(accessors.getter, false);\n                this.writeLineToOutput(\",\");\n            }\n\n            if (accessors.setter) {\n                this.emitIndent();\n                this.recordSourceMappingStart(accessors.setter);\n                this.writeToOutput(\"set: \");\n                this.emitInnerFunction(accessors.setter, false);\n                this.writeLineToOutput(\",\");\n            }\n\n            this.emitIndent();\n            this.writeLineToOutput(\"enumerable: true,\");\n            this.emitIndent();\n            this.writeLineToOutput(\"configurable: true\");\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.writeLineToOutput(\"});\");\n            this.recordSourceMappingEnd(funcDecl);\n        }\n\n        public emitPrototypeMember(funcDecl: FunctionDeclaration, className: string) {\n            if (funcDecl.isAccessor()) {\n                this.emitPropertyAccessor(funcDecl, className, true);\n            }\n            else {\n                this.emitIndent();\n                this.recordSourceMappingStart(funcDecl);\n                this.emitComments(funcDecl, true);\n                this.writeToOutput(className + \".prototype.\" + funcDecl.getNameText() + \" = \");\n                this.emitInnerFunction(funcDecl, /*printName:*/ false, /*includePreComments:*/ false);\n                this.writeLineToOutput(\";\");\n            }\n        }\n\n        public emitClass(classDecl: ClassDeclaration) {\n            var pullDecl = this.semanticInfoChain.getDeclForAST(classDecl, this.document.fileName);\n            this.pushDecl(pullDecl);\n\n            var svClassNode = this.thisClassNode;\n            this.thisClassNode = classDecl;\n            var className = classDecl.name.actualText;\n            this.emitComments(classDecl, true);\n            var temp = this.setContainer(EmitContainer.Class);\n\n            this.recordSourceMappingStart(classDecl);\n            this.writeToOutput(\"var \" + className);\n\n            var hasBaseClass = classDecl.extendsList && classDecl.extendsList.members.length;\n            var baseNameDecl: AST = null;\n            var baseName: AST = null;\n            var varDecl: VariableDeclarator = null;\n\n            if (hasBaseClass) {\n                this.writeLineToOutput(\" = (function (_super) {\");\n            } else {\n                this.writeLineToOutput(\" = (function () {\");\n            }\n\n            this.recordSourceMappingNameStart(className);\n            this.indenter.increaseIndent();\n\n            if (hasBaseClass) {\n                baseNameDecl = classDecl.extendsList.members[0];\n                baseName = baseNameDecl.nodeType === NodeType.InvocationExpression ? (<CallExpression>baseNameDecl).target : baseNameDecl;\n                this.emitIndent();\n                this.writeLineToOutput(\"__extends(\" + className + \", _super);\");\n            }\n\n            this.emitIndent();\n\n            var constrDecl = classDecl.constructorDecl;\n\n            // output constructor\n            if (constrDecl) {\n                // declared constructor\n                constrDecl.emit(this);\n                this.writeLineToOutput(\"\");\n            }\n            else {\n                this.recordSourceMappingStart(classDecl);\n                // default constructor\n                this.indenter.increaseIndent();\n                this.writeLineToOutput(\"function \" + classDecl.name.actualText + \"() {\");\n                this.recordSourceMappingNameStart(\"constructor\");\n                if (hasBaseClass) {\n                    this.emitIndent();\n                    this.writeLineToOutput(\"_super.apply(this, arguments);\");\n                }\n\n                this.emitParameterPropertyAndMemberVariableAssignments();\n\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.writeLineToOutput(\"}\");\n\n                this.recordSourceMappingNameEnd();\n                this.recordSourceMappingEnd(classDecl);\n            }\n\n            this.emitClassMembers(classDecl);\n\n            this.emitIndent();\n            this.recordSourceMappingStart(classDecl.endingToken);\n            this.writeLineToOutput(\"return \" + className + \";\");\n            this.recordSourceMappingEnd(classDecl.endingToken);\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.recordSourceMappingStart(classDecl.endingToken);\n            this.writeToOutput(\"}\");\n            this.recordSourceMappingNameEnd();\n            this.recordSourceMappingEnd(classDecl.endingToken);\n            this.recordSourceMappingStart(classDecl);\n            this.writeToOutput(\")(\");\n            if (hasBaseClass) {\n                this.resolvingContext.resolvingTypeReference = true;\n                this.emitJavascript(baseName, false);\n                this.resolvingContext.resolvingTypeReference = false;\n            }\n            this.writeToOutput(\");\");\n            this.recordSourceMappingEnd(classDecl);\n\n            if ((temp === EmitContainer.Module || temp === EmitContainer.DynamicModule) && hasFlag(classDecl.getVarFlags(), VariableFlags.Exported)) {\n                this.writeLineToOutput(\"\");\n                this.emitIndent();\n                var modName = temp === EmitContainer.Module ? this.moduleName : \"exports\";\n                this.recordSourceMappingStart(classDecl);\n                this.writeToOutput(modName + \".\" + className + \" = \" + className + \";\");\n                this.recordSourceMappingEnd(classDecl);\n            }\n\n            this.recordSourceMappingEnd(classDecl);\n            this.emitComments(classDecl, false);\n            this.setContainer(temp);\n            this.thisClassNode = svClassNode;\n\n            this.popDecl(pullDecl);\n        }\n\n        private emitClassMembers(classDecl: ClassDeclaration): void {\n            // First, emit all the functions.\n            var lastEmittedMember = null;\n\n            for (var i = 0, n = classDecl.members.members.length; i < n; i++) {\n                var memberDecl = classDecl.members.members[i];\n\n                if (memberDecl.nodeType === NodeType.FunctionDeclaration) {\n                    var fn = <FunctionDeclaration>memberDecl;\n\n                    if (hasFlag(fn.getFunctionFlags(), FunctionFlags.Method) && !fn.isSignature()) {\n                        this.emitSpaceBetweenConstructs(lastEmittedMember, fn);\n\n                        if (!hasFlag(fn.getFunctionFlags(), FunctionFlags.Static)) {\n                            this.emitPrototypeMember(fn, classDecl.name.actualText);\n                        }\n                        else { // static functions\n                            if (fn.isAccessor()) {\n                                this.emitPropertyAccessor(fn, this.thisClassNode.name.actualText, false);\n                            }\n                            else {\n                                this.emitIndent();\n                                this.recordSourceMappingStart(fn)\n                                    this.writeToOutput(classDecl.name.actualText + \".\" + fn.name.actualText + \" = \");\n                                this.emitInnerFunction(fn, /*printName:*/ false);\n                                this.writeLineToOutput(\";\");\n                            }\n                        }\n\n                        lastEmittedMember = fn;\n                    }\n                }\n            }\n\n            // Now emit all the statics.\n            for (var i = 0, n = classDecl.members.members.length; i < n; i++) {\n                var memberDecl = classDecl.members.members[i];\n\n                if (memberDecl.nodeType === NodeType.VariableDeclarator) {\n                    var varDecl = <VariableDeclarator>memberDecl;\n\n                    if (hasFlag(varDecl.getVarFlags(), VariableFlags.Static) && varDecl.init) {\n                        this.emitSpaceBetweenConstructs(lastEmittedMember, varDecl);\n\n                        this.emitIndent();\n                        this.recordSourceMappingStart(varDecl);\n                        this.writeToOutput(classDecl.name.actualText + \".\" + varDecl.id.actualText + \" = \");\n                        varDecl.init.emit(this);\n\n                        this.writeLineToOutput(\";\");\n                        this.recordSourceMappingEnd(varDecl);\n\n                        lastEmittedMember = varDecl;\n                    }\n                }\n            }\n        }\n\n        public emitPrologue(script: Script, requiresExtendsBlock: boolean) {\n            if (!this.extendsPrologueEmitted) {\n                if (requiresExtendsBlock) {\n                    this.extendsPrologueEmitted = true;\n                    this.writeLineToOutput(\"var __extends = this.__extends || function (d, b) {\");\n                    this.writeLineToOutput(\"    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\");\n                    this.writeLineToOutput(\"    function __() { this.constructor = d; }\");\n                    this.writeLineToOutput(\"    __.prototype = b.prototype;\");\n                    this.writeLineToOutput(\"    d.prototype = new __();\");\n                    this.writeLineToOutput(\"};\");\n                }\n            }\n\n            if (!this.globalThisCapturePrologueEmitted) {\n                if (this.shouldCaptureThis(script)) {\n                    this.globalThisCapturePrologueEmitted = true;\n                    this.writeLineToOutput(this.captureThisStmtString);\n                }\n            }\n        }\n\n        public emitSuperReference() {\n            this.writeToOutput(\"_super.prototype\");\n        }\n\n        public emitSuperCall(callEx: CallExpression): boolean {\n            if (callEx.target.nodeType === NodeType.MemberAccessExpression) {\n                var dotNode = <BinaryExpression>callEx.target;\n                if (dotNode.operand1.nodeType === NodeType.SuperExpression) {\n                    dotNode.emit(this);\n                    this.writeToOutput(\".call(\");\n                    this.emitThis();\n                    if (callEx.arguments && callEx.arguments.members.length > 0) {\n                        this.writeToOutput(\", \");\n                        this.emitCommaSeparatedList(callEx.arguments);\n                    }\n                    this.writeToOutput(\")\");\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public emitThis() {\n            if (this.thisFunctionDeclaration && !this.thisFunctionDeclaration.isMethod() && (!this.thisFunctionDeclaration.isConstructor)) {\n                this.writeToOutput(\"_this\");\n            }\n            else {\n                this.writeToOutput(\"this\");\n            }\n        }\n\n        public emitBlockOrStatement(node: AST): void {\n            if (node.nodeType === NodeType.Block) {\n                node.emit(this);\n            }\n            else {\n                this.writeLineToOutput(\"\");\n                this.indenter.increaseIndent();\n                this.emitJavascript(node, true);\n                this.indenter.decreaseIndent();\n            }\n        }\n\n        public static throwEmitterError(e: Error): void {\n            var error: any = new Error(e.message);\n            error.isEmitterError = true;\n            throw error;\n        }\n\n        public static handleEmitterError(fileName: string, e: Error): IDiagnostic[] {\n            if ((<any>e).isEmitterError === true) {\n                return [new Diagnostic(fileName, 0, 0, DiagnosticCode.Emit_Error__0, [e.message])];\n            }\n\n            throw e;\n        }\n\n        // Note: throws exception.  \n        private createFile(fileName: string, useUTF8: boolean): ITextWriter {\n            try {\n                return this.emitOptions.ioHost.createFile(fileName, useUTF8);\n            }\n            catch (e) {\n                Emitter.throwEmitterError(e);\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class MemberName {\n        public prefix: string = \"\";\n        public suffix: string = \"\";\n\n        public isString() { return false; }\n        public isArray() { return false; }\n        public isMarker() { return !this.isString() && !this.isArray(); }\n\n        public toString(): string {\n            return MemberName.memberNameToString(this);\n        }\n\n        static memberNameToString(memberName: MemberName, markerInfo?: number[], markerBaseLength: number = 0): string {\n            var result = memberName.prefix;\n\n            if (memberName.isString()) {\n                result += (<MemberNameString>memberName).text;\n            } else if (memberName.isArray()) {\n                var ar = <MemberNameArray>memberName;\n                for (var index = 0; index < ar.entries.length; index++) {\n                    if (ar.entries[index].isMarker()) {\n                        if (markerInfo) {\n                            markerInfo.push(markerBaseLength + result.length);\n                        }\n                        continue;\n                    }\n\n                    result += MemberName.memberNameToString(ar.entries[index], markerInfo, markerBaseLength + result.length);\n                    result += ar.delim;\n                }\n            }\n\n            result += memberName.suffix;\n            return result;\n        }\n\n        static create(text: string): MemberName;\n        static create(entry: MemberName, prefix: string, suffix: string): MemberName;\n        static create(arg1: any, arg2?: any, arg3?: any): MemberName {\n            if (typeof arg1 === \"string\") {\n                return new MemberNameString(arg1);\n            }\n            else {\n                var result = new MemberNameArray();\n                if (arg2)\n                    result.prefix = arg2;\n                if (arg3)\n                    result.suffix = arg3;\n                result.entries.push(arg1);\n                return result;\n            }\n        }\n    }\n\n    export class MemberNameString extends MemberName {\n        constructor(public text: string) {\n            super();\n        }\n\n        public isString() { return true; }\n    }\n\n    export class MemberNameArray extends MemberName {\n        public delim: string = \"\";\n        public entries: MemberName[] = [];\n\n        public isArray() { return true; }\n\n        public add(entry: MemberName) {\n            this.entries.push(entry);\n        }\n\n        public addAll(entries: MemberName[]) {\n            for (var i = 0 ; i < entries.length; i++) {\n                this.entries.push(entries[i]);\n            }\n        }\n\n        constructor() {\n            super();\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export function stripQuotes(str: string) {\n        return str.replace(/\"/g, \"\").replace(/\'/g, \"\");\n    }\n\n    export function isSingleQuoted(str: string) {\n        return str.indexOf(\"\'\") !== -1;\n    }\n\n    export function isQuoted(str: string) {\n        return str.indexOf(\"\\\"\") !== -1 || isSingleQuoted(str);\n    }\n\n    export function quoteStr(str: string) {\n        return \"\\\"\" + str + \"\\\"\";\n    }\n\n    export function swapQuotes(str: string) {\n\n        if (str.indexOf(\"\\\"\") !== -1) {\n            str = str.replace(\"\\\"\", \"\'\");\n            str = str.replace(\"\\\"\", \"\'\");\n        }\n        else {\n            str = str.replace(\"\'\", \"\\\"\");\n            str = str.replace(\"\'\", \"\\\"\");\n        }\n\n        return str;\n    }\n\n    export function switchToForwardSlashes(path: string) {\n        return path.replace(/\\\\/g, \"/\");\n    }\n\n    export function trimModName(modName: string) {\n        // in case\'s it\'s a declare file...\n        if (modName.length > 5 && modName.substring(modName.length - 5, modName.length) === \".d.ts\") {\n            return modName.substring(0, modName.length - 5);\n        }\n        if (modName.length > 3 && modName.substring(modName.length - 3, modName.length) === \".ts\") {\n            return modName.substring(0, modName.length - 3);\n        }\n        // in case\'s it\'s a .js file\n        if (modName.length > 3 && modName.substring(modName.length - 3, modName.length) === \".js\") {\n            return modName.substring(0, modName.length - 3);\n        }\n\n        return modName;\n    }\n\n    export function getDeclareFilePath(fname: string) {\n        return isTSFile(fname) ? changePathToDTS(fname) : changePathToDTS(fname);\n    }\n\n    function isFileOfExtension(fname: string, ext: string) {\n        var invariantFname = fname.toLocaleUpperCase();\n        var invariantExt = ext.toLocaleUpperCase();\n        var extLength = invariantExt.length;\n        return invariantFname.length > extLength && invariantFname.substring(invariantFname.length - extLength, invariantFname.length) === invariantExt;\n    }\n\n    export function isJSFile(fname: string) {\n        return isFileOfExtension(fname, \".js\");\n    }\n\n    export function isTSFile(fname: string) {\n        return isFileOfExtension(fname, \".ts\");\n    }\n\n    export function isDTSFile(fname: string) {\n        return isFileOfExtension(fname, \".d.ts\");\n    }\n\n    export function getPrettyName(modPath: string, quote=true, treatAsFileName=false) { \n        var modName = treatAsFileName ? switchToForwardSlashes(modPath) : trimModName(stripQuotes(modPath));\n        var components = this.getPathComponents(modName);\n        return components.length ? (quote ? quoteStr(components[components.length - 1]) : components[components.length - 1]) : modPath;\n    }\n\n    export function getPathComponents(path: string) {\n        return path.split(\"/\");\n    }\n\n    export function getRelativePathToFixedPath(fixedModFilePath: string, absoluteModPath: string) {\n        absoluteModPath = switchToForwardSlashes(absoluteModPath);\n\n        var modComponents = this.getPathComponents(absoluteModPath);\n        var fixedModComponents = this.getPathComponents(fixedModFilePath);\n\n        // Find the component that differs\n        var joinStartIndex = 0;\n        for (; joinStartIndex < modComponents.length && joinStartIndex < fixedModComponents.length ; joinStartIndex++) {\n            if (fixedModComponents[joinStartIndex] !== modComponents[joinStartIndex]) {\n                break;\n            }\n        }\n\n        // Get the relative path\n        if (joinStartIndex !== 0) {\n            var relativePath = \"\";\n            var relativePathComponents = modComponents.slice(joinStartIndex, modComponents.length);\n            for (; joinStartIndex < fixedModComponents.length; joinStartIndex++) {\n                if (fixedModComponents[joinStartIndex] !== \"\") {\n                    relativePath = relativePath + \"../\";\n                }\n            }\n\n            return relativePath + relativePathComponents.join(\"/\");\n        }\n\n        return absoluteModPath;\n    }\n\n    export function quoteBaseName(modPath: string) {\n        var modName = trimModName(stripQuotes(modPath));\n        var path = getRootFilePath(modName);\n        if (path === \"\") {\n            return modPath;\n        }\n        else {\n            var components = modName.split(path);\n            var fileIndex = components.length > 1 ? 1 : 0;\n            return quoteStr(components[fileIndex]);\n        }\n    }\n\n    export function changePathToDTS(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + \".d.ts\";\n    }\n\n    export function isRelative(path: string) {\n        return path.charAt(0) === \".\";\n    }\n    export function isRooted(path: string) {\n        return path.charAt(0) === \"\\\\\" || path.charAt(0) === \"/\" || (path.indexOf(\":\\\\\") !== -1) || (path.indexOf(\":/\") !== -1);\n    }\n\n    export function getRootFilePath(outFname: string) {\n        if (outFname === \"\") {\n            return outFname;\n        }\n        else {\n            var isPath = outFname.indexOf(\"/\") !== -1;\n            return isPath ? filePath(outFname) : \"\";\n        }\n    }\n\n    export function filePathComponents(fullPath: string) {\n        fullPath = switchToForwardSlashes(fullPath);\n        var components = getPathComponents(fullPath);\n        return components.slice(0, components.length - 1);\n    }\n\n    export function filePath(fullPath: string) {\n        var path = filePathComponents(fullPath);\n        return path.join(\"/\") + \"/\";\n    }\n\n    export function normalizePath(path: string): string {\n        path = switchToForwardSlashes(path);\n        var startedWithSep = path.charAt(0) === \"/\";\n        var parts = this.getPathComponents(path);\n        for (var i = 0; i < parts.length; i++) {\n            if (parts[i] === \".\" || parts[i] === \"\") {\n                parts.splice(i, 1);\n                i--;\n            }\n            if (i > 0 && parts[i] === \"..\" && parts[i - 1] !== \"..\") {\n                parts.splice(i - 1, 2);\n                i -= 2;\n            }\n        }\n        return (startedWithSep ? \"/\" : \"\") + parts.join(\"/\");\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export interface IResolvedFile {\n        content: string;\n        path: string;\n    }\n\n    /// This class acts as a convenience class to store path and content information in places\n    /// where we need an ISourceText object\n    export class SourceUnit implements IScriptSnapshot, IResolvedFile {\n        public referencedFiles: IFileReference[] = null;\n        private lineStarts: number[] = null;\n\n        constructor(public path: string,\n                    public content: string) {\n        }\n\n        public getText(start: number, end: number): string {\n            return this.content.substring(start, end);\n        }\n\n        public getLength(): number {\n            return this.content.length;\n        }\n\n        public getLineStartPositions(): number[]{\n            if (this.lineStarts === null) {\n                this.lineStarts = LineMap.fromString(this.content).lineStarts();\n            }\n\n            return this.lineStarts;\n        }\n\n        public getTextChangeRangeSinceVersion(scriptVersion: number): TypeScript.TextChangeRange {\n            throw Errors.notYetImplemented();\n        }\n    }\n\n    // Note: This is being using by the host (VS) and is marshaled back and forth. When changing this make sure the changes \n    // are reflected in the managed side as well.\n    export interface IFileReference extends ILineAndCharacter {\n        path: string;\n        isResident: boolean;\n        position: number;\n        length: number;\n    }\n\n    /// Limited API for file system manipulation\n    export interface IFileSystemObject {\n        resolvePath(path: string): string;\n        readFile(path: string): string;\n        findFile(rootPath: string, partialFilePath: string): IResolvedFile;\n        dirName(path: string): string;\n    }\n\n    export class CompilationEnvironment {\n        constructor (public compilationSettings: CompilationSettings, public ioHost: IFileSystemObject) { }\n        public code: SourceUnit[] = [];\n        public inputFileNameToOutputFileName = new StringHashTable();\n        public getSourceUnit(path: string): SourceUnit {\n            var normalizedPath = switchToForwardSlashes(path.toUpperCase());\n            for (var i = 0, n = this.code.length; i < n; i++) {\n                var sourceUnit = this.code[i];\n                var soruceUnitNormalizedPath = switchToForwardSlashes(sourceUnit.path.toUpperCase());\n                if (normalizedPath === soruceUnitNormalizedPath) {\n                    return sourceUnit;\n                }\n            }\n\n            return null;\n        }\n    }\n\n    export interface IResolutionDispatcher {\n        errorReporter: TypeScript.IDignosticsReporter;\n        postResolution(path: string, source: IScriptSnapshot): void;\n    }\n\n    export interface ICodeResolver {\n        resolveCode(referencePath: string, rootPath: string, performSearch:boolean, state: IResolutionDispatcher): void;\n    }\n\n    export interface IResolverHost {\n        resolveCompilationEnvironment(preEnvironment: CompilationEnvironment, resolver: ICodeResolver, traceDependencies: boolean): CompilationEnvironment;\n    }\n\n    export class CodeResolver implements TypeScript.ICodeResolver {\n        public visited: any = { };\n\n        constructor (public environment: CompilationEnvironment) { }\n\n        public resolveCode(referencePath: string, parentPath: string, performSearch: boolean, resolutionDispatcher: TypeScript.IResolutionDispatcher): boolean {\n            \n            var resolvedFile: IResolvedFile = { content: null, path: referencePath };\n            \n            var ioHost = this.environment.ioHost;\n            \n            // If the path is relative, normalize it, based on the root\n            var isRelativePath = TypeScript.isRelative(referencePath);\n            var isRootedPath = isRelativePath ? false : isRooted(referencePath);\n            var normalizedPath: string = \n                isRelativePath ? ioHost.resolvePath(parentPath + \"/\" + referencePath) : \n                // we only follow the second clause if the path is a non-rooted triple-slash reference path\n                (isRootedPath || !parentPath || performSearch ? referencePath : parentPath + \"/\" + referencePath);\n\n            // We use +=.ts to make sure we don\'t accidentally pick up \".js\" files or the like\n            if (!isTSFile(normalizedPath)) {\n                normalizedPath += \".ts\";  //changePathToSTR(normalizedPath);\n            }\n\n            normalizedPath = switchToForwardSlashes(stripQuotes(normalizedPath));\n            var absoluteModuleID = this.environment.compilationSettings.useCaseSensitiveFileResolution ? normalizedPath : normalizedPath.toLocaleUpperCase();\n\n            // read the file contents - if it doesn\'t exist, trigger a resolution error\n            if (!this.visited[absoluteModuleID]) {\n                // if the path is relative, or came from a reference tag, we don\'t perform a search\n                if (isRelativePath || isRootedPath || !performSearch) {\n                    try {\n                        CompilerDiagnostics.debugPrint(\"   Reading code from \" + normalizedPath);\n                            \n                        // Look for the .ts file first - if not present, the .d.ts\n                        try {\n                            resolvedFile.content = ioHost.readFile(normalizedPath);\n                        }\n                        catch (err1) {\n                            if (isTSFile(normalizedPath)) {\n                                normalizedPath = changePathToDTS(normalizedPath);\n                                CompilerDiagnostics.debugPrint(\"   Reading code from \" + normalizedPath);\n                                resolvedFile.content = ioHost.readFile(normalizedPath);\n                            }\n                        }\n                        CompilerDiagnostics.debugPrint(\"   Found code at \" + normalizedPath);\n\n                        resolvedFile.path = normalizedPath;\n                        this.visited[absoluteModuleID] = true;\n                    }\n                    catch (err4) {\n                        CompilerDiagnostics.debugPrint(\"   Did not find code for \" + referencePath);\n                        // Resolution failed\n                        return false;\n                    }\n                }\n                else {\n\n                    // if the path is non-relative, we should attempt to search on the relative path\n                    resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n\n                    if (!resolvedFile) {\n                        if (isTSFile(normalizedPath)) {\n                            normalizedPath = changePathToDTS(normalizedPath);\n                            resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n                        }\n                    }\n\n                    if (resolvedFile) {\n                        resolvedFile.path = switchToForwardSlashes(TypeScript.stripQuotes(resolvedFile.path));\n                        CompilerDiagnostics.debugPrint(referencePath + \" resolved to: \" + resolvedFile.path);\n                        resolvedFile.content = resolvedFile.content;\n                        this.visited[absoluteModuleID] = true;\n                    }\n                    else {\n                        CompilerDiagnostics.debugPrint(\"Could not find \" + referencePath);\n                    }\n                }\n\n                if (resolvedFile && resolvedFile.content !== null) {\n                    // preprocess the file, to gather dependencies\n                    var rootDir = ioHost.dirName(resolvedFile.path);\n                    var sourceUnit = new SourceUnit(resolvedFile.path, resolvedFile.content);\n                    var preProcessedFileInfo = preProcessFile(resolvedFile.path, sourceUnit, this.environment.compilationSettings);\n                    var resolvedFilePath = ioHost.resolvePath(resolvedFile.path);\n                    var resolutionResult: boolean;\n\n                    sourceUnit.referencedFiles = preProcessedFileInfo.referencedFiles;\n\n                    // resolve explicit references\n                    for (var i = 0; i < preProcessedFileInfo.referencedFiles.length; i++) {\n                        var fileReference = preProcessedFileInfo.referencedFiles[i];\n\n                        normalizedPath = isRooted(fileReference.path) ? fileReference.path : rootDir + \"/\" + fileReference.path;\n                        normalizedPath = ioHost.resolvePath(normalizedPath);\n\n                        if (resolvedFilePath === normalizedPath) {\n                            resolutionDispatcher.errorReporter.addDiagnostic(\n                                new TypeScript.Diagnostic(normalizedPath, fileReference.position, fileReference.length, DiagnosticCode.A_file_cannot_have_a_reference_itself, null));\n                            continue;\n                        }\n\n                        resolutionResult = this.resolveCode(fileReference.path, rootDir, false, resolutionDispatcher);\n\n                        if (!resolutionResult) {\n                            resolutionDispatcher.errorReporter.addDiagnostic(\n                                new TypeScript.Diagnostic(resolvedFilePath, fileReference.position, fileReference.length, DiagnosticCode.Cannot_resolve_referenced_file___0_, [fileReference.path]));\n                        }\n                    }\n                    \n                    // resolve imports\n                    for (var i = 0; i < preProcessedFileInfo.importedFiles.length; i++) {\n                        var fileImport = preProcessedFileInfo.importedFiles[i];\n\n                        resolutionResult = this.resolveCode(fileImport.path, rootDir, true, resolutionDispatcher);\n\n                        if (!resolutionResult) {\n                            resolutionDispatcher.errorReporter.addDiagnostic(\n                                new TypeScript.Diagnostic(resolvedFilePath, fileImport.position, fileImport.length, DiagnosticCode.Cannot_resolve_imported_file___0_, [fileImport.path]));\n                        }\n                    }\n\n                    // add the file to the appropriate code list\n                    resolutionDispatcher.postResolution(sourceUnit.path, sourceUnit);\n                }\n            }\n            return true;\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    /// Compiler settings\n    export class CompilationSettings {\n        public propagateConstants = false;\n        public minWhitespace = false;\n        public emitComments = false;\n        public watch = false;\n        public exec = false;\n        public resolve = true;\n        public disallowBool = false;\n        public allowAutomaticSemicolonInsertion = true;\n        public allowModuleKeywordInExternalModuleReference = true;\n\n        public useDefaultLib = true;\n\n        public codeGenTarget = LanguageVersion.EcmaScript3;\n        public moduleGenTarget = ModuleGenTarget.Synchronous;\n\n        // --out option passed. \n        // Default is the \"\" which leads to multiple files generated next to the.ts files\n        public outputOption: string = \"\";\n        public mapSourceFiles = false;\n        public emitFullSourceMapPath = false; // By default emit relative path of the soucemap\n        public generateDeclarationFiles = false;\n\n        public useCaseSensitiveFileResolution = false;\n        public gatherDiagnostics = false;\n\n        public updateTC = false;\n    }\n\n    ///\n    /// Preprocessing\n    ///\n    export interface IPreProcessedFileInfo {\n        settings: CompilationSettings;\n        referencedFiles: IFileReference[];\n        importedFiles: IFileReference[];\n        isLibFile: boolean;\n    }\n\n    interface ITripleSlashDirectiveProperties {\n        noDefaultLib: boolean;\n    }\n\n    function getFileReferenceFromReferencePath(comment: string): IFileReference {\n        var referencesRegEx = /^(\\/\\/\\/\\s*<reference\\s+path=)(\'|\")(.+?)\\2\\s*(static=(\'|\")(.+?)\\2\\s*)*\\/>/gim;\n        var match = referencesRegEx.exec(comment);\n\n        if (match) {\n            var path: string = normalizePath(match[3]);\n            var adjustedPath = normalizePath(path);\n    \n            var isResident = match.length >= 7 && match[6] === \"true\";\n            if (isResident) {\n                CompilerDiagnostics.debugPrint(path + \" is resident\");\n            }\n            return {\n                line: 0,\n                character: 0,\n                position: 0,\n                length: 0,\n                path: switchToForwardSlashes(adjustedPath),\n                isResident: isResident\n            };\n        }\n        else {\n            return null;\n        }\n    }\n\n    export function getImplicitImport(comment: string): boolean {\n        var implicitImportRegEx = /^(\\/\\/\\/\\s*<implicit-import\\s*)*\\/>/gim;\n        var match = implicitImportRegEx.exec(comment);\n\n        if (match) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    export function getReferencedFiles(fileName: string, sourceText: IScriptSnapshot): IFileReference[] {\n        var preProcessInfo = preProcessFile(fileName, sourceText, null, false);\n        return preProcessInfo.referencedFiles;\n    }\n\n    var scannerWindow = ArrayUtilities.createArray(2048, 0);\n    var scannerDiagnostics = [];\n\n    function processImports(lineMap: LineMap, scanner: Scanner, token: ISyntaxToken, importedFiles: IFileReference[]): void {\n        var position = 0;\n        var lineChar = { line: -1, character: -1 };\n\n        // Look for: \n        // import foo = module(\"foo\")\n        while (token.tokenKind !== SyntaxKind.EndOfFileToken) {\n            if (token.tokenKind === SyntaxKind.ImportKeyword) {\n                var importStart = position + token.leadingTriviaWidth();\n                token = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n\n                if (SyntaxFacts.isIdentifierNameOrAnyKeyword(token)) {\n                    token = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n\n                    if (token.tokenKind === SyntaxKind.EqualsToken) {\n                        token = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n\n                        if (token.tokenKind === SyntaxKind.ModuleKeyword || token.tokenKind === SyntaxKind.RequireKeyword) {\n                            token = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n\n                            if (token.tokenKind === SyntaxKind.OpenParenToken) {\n                                var afterOpenParenPosition = scanner.absoluteIndex();\n                                token = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n\n                                lineMap.fillLineAndCharacterFromPosition(importStart, lineChar);\n\n                                if (token.tokenKind === SyntaxKind.StringLiteral) {\n                                    var ref = {\n                                        line: lineChar.line,\n                                        character: lineChar.character,\n                                        position: afterOpenParenPosition + token.leadingTriviaWidth(),\n                                        length: token.width(),\n                                        path: stripQuotes(switchToForwardSlashes(token.text())),\n                                        isResident: false\n                                    };\n                                    importedFiles.push(ref);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            position = scanner.absoluteIndex();\n            token = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n        }\n    }\n\n    function processTripleSlashDirectives(lineMap: LineMap, firstToken: ISyntaxToken, settings: CompilationSettings, referencedFiles: IFileReference[]): ITripleSlashDirectiveProperties {\n        var leadingTrivia = firstToken.leadingTrivia();\n\n        var position = 0;\n        var lineChar = { line: -1, character: -1 };\n        var noDefaultLib = false;\n\n        for (var i = 0, n = leadingTrivia.count(); i < n; i++) {\n            var trivia = leadingTrivia.syntaxTriviaAt(i);\n\n            if (trivia.kind() === SyntaxKind.SingleLineCommentTrivia) {\n                var triviaText = trivia.fullText();\n                var referencedCode = getFileReferenceFromReferencePath(triviaText);\n\n                if (referencedCode) {\n                    lineMap.fillLineAndCharacterFromPosition(position, lineChar);\n                    referencedCode.position = position;\n                    referencedCode.length = trivia.fullWidth();\n                    referencedCode.line = lineChar.line;\n                    referencedCode.character = lineChar.character;\n\n                    referencedFiles.push(referencedCode);\n                }\n\n                if (settings) {\n                    // is it a lib file?\n                    var isNoDefaultLibRegex = /^(\\/\\/\\/\\s*<reference\\s+no-default-lib=)(\'|\")(.+?)\\2\\s*\\/>/gim;\n                    var isNoDefaultLibMatch: any = isNoDefaultLibRegex.exec(triviaText);\n                    if (isNoDefaultLibMatch) {\n                        noDefaultLib = (isNoDefaultLibMatch[3] === \"true\");\n                    }\n                }\n            }\n\n            position += trivia.fullWidth();\n        }\n\n        return { noDefaultLib: noDefaultLib};\n    }\n\n    export function preProcessFile(fileName: string, sourceText: IScriptSnapshot, settings: CompilationSettings = new CompilationSettings(), readImportFiles = true): IPreProcessedFileInfo {\n        var text = SimpleText.fromScriptSnapshot(sourceText);\n        var scanner = new Scanner(fileName, text, settings.codeGenTarget, scannerWindow);\n\n        var firstToken = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n\n        // only search out dynamic mods\n        // if you find a dynamic mod, ignore every other mod inside, until you balance rcurlies\n        // var position\n\n        var importedFiles: IFileReference[] = [];\n        if (readImportFiles) {\n            processImports(text.lineMap(), scanner, firstToken, importedFiles);\n        }\n        \n        var referencedFiles: IFileReference[] = [];\n        var properties  = processTripleSlashDirectives(text.lineMap(), firstToken, settings, referencedFiles);\n\n        scannerDiagnostics.length = 0;\n        return { settings:settings, referencedFiles: referencedFiles, importedFiles: importedFiles, isLibFile: properties.noDefaultLib };\n    }\n\n    export function getParseOptions(settings: CompilationSettings): ParseOptions {\n        return new ParseOptions(settings.allowAutomaticSemicolonInsertion, settings.allowModuleKeywordInExternalModuleReference);\n    }\n\n} // Tools\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class DeclFileWriter {\n        public onNewLine = true;\n        constructor(private declFile: ITextWriter) {\n        }\n\n        public Write(s: string) {\n            this.declFile.Write(s);\n            this.onNewLine = false;\n        }\n\n        public WriteLine(s: string) {\n            this.declFile.WriteLine(s);\n            this.onNewLine = true;\n        }\n\n        public Close() {\n            try {\n                this.declFile.Close();\n            }\n            catch (e) {\n                Emitter.throwEmitterError(e);\n            }\n        }\n    }\n    \n    export class DeclarationEmitter implements AstWalkerWithDetailCallback.AstWalkerDetailCallback {\n        public fileName: string = null;\n        private declFile: DeclFileWriter = null;\n        private indenter = new Indenter();\n        private declarationContainerStack: AST[] = [];\n        private isDottedModuleName: boolean[] = [];\n        private dottedModuleEmit: string;\n        private ignoreCallbackAst: AST = null;\n        private singleDeclFile: DeclFileWriter = null;\n        private varListCount: number = 0;\n\n        constructor(private emittingFileName: string,\n                    isUTF8: boolean,\n                    private semanticInfoChain: SemanticInfoChain,\n                    public emitOptions: EmitOptions) {\n            // Creating files can cause exceptions, report them.   \n            var file = this.createFile(emittingFileName, isUTF8);\n            this.declFile = new DeclFileWriter(file);\n        }\n\n        public widenType(type: PullTypeSymbol) {\n            if (type === this.semanticInfoChain.undefinedTypeSymbol || type === this.semanticInfoChain.nullTypeSymbol) {\n                return this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            return type;\n        }\n\n        public close() {\n            try {\n                this.declFile.Close();\n            }\n            catch (e) {\n                Emitter.throwEmitterError(e);\n            }\n        }\n\n        private createFile(fileName: string, useUTF8: boolean): ITextWriter {\n            try {\n                return this.emitOptions.ioHost.createFile(fileName, useUTF8);\n            }\n            catch (e) {\n                Emitter.throwEmitterError(e);\n            }\n        }\n\n        public emitDeclarations(script: TypeScript.Script): void {\n            AstWalkerWithDetailCallback.walk(script, this);\n        }\n\n        public getAstDeclarationContainer() {\n            return this.declarationContainerStack[this.declarationContainerStack.length - 1];\n        }\n\n        private emitDottedModuleName() {\n            return (this.isDottedModuleName.length === 0) ? false : this.isDottedModuleName[this.isDottedModuleName.length - 1];\n        }\n\n        private getIndentString(declIndent = false) {\n            if (this.emitOptions.compilationSettings.minWhitespace) {\n                return \"\";\n            }\n            else {\n                return this.indenter.getIndent();\n            }\n        }\n\n        private emitIndent() {\n            this.declFile.Write(this.getIndentString());\n        }\n\n        private canEmitSignature(declFlags: DeclFlags, canEmitGlobalAmbientDecl: boolean = true, useDeclarationContainerTop: boolean = true) {\n            var container: AST;\n            if (useDeclarationContainerTop) {\n                container = this.getAstDeclarationContainer();\n            }\n            else {\n                container = this.declarationContainerStack[this.declarationContainerStack.length - 2];\n            }\n\n            if (container.nodeType === NodeType.ModuleDeclaration && !hasFlag(declFlags, DeclFlags.Exported)) {\n                return false;\n            }\n\n            if (!canEmitGlobalAmbientDecl && container.nodeType === NodeType.Script && hasFlag(declFlags, DeclFlags.Ambient)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        private canEmitPrePostAstSignature(declFlags: DeclFlags, astWithPrePostCallback: AST, preCallback: boolean) {\n            if (this.ignoreCallbackAst) {\n                CompilerDiagnostics.assert(this.ignoreCallbackAst !== astWithPrePostCallback, \"Ignore Callback AST mismatch\");\n                this.ignoreCallbackAst = null;\n                return false;\n            }\n            else if (preCallback &&\n                !this.canEmitSignature(declFlags, true, preCallback)) {\n                this.ignoreCallbackAst = astWithPrePostCallback;\n                return false;\n            }\n\n            return true;\n        }\n\n        private getDeclFlagsString(declFlags: DeclFlags, typeString: string) {\n            var result = this.getIndentString();\n\n            // Static/public/private/global declare\n            if (hasFlag(declFlags, DeclFlags.Static)) {\n                if (hasFlag(declFlags, DeclFlags.Private)) {\n                    result += \"private \";\n                }\n                result += \"static \";\n            }\n            else {\n                if (hasFlag(declFlags, DeclFlags.Private)) {\n                    result += \"private \";\n                }\n                else if (hasFlag(declFlags, DeclFlags.Public)) {\n                    result += \"public \";\n                }\n                else {\n                    var emitDeclare = !hasFlag(declFlags, DeclFlags.Exported);\n\n                    // Emit export only for global export statements. \n                    // The container for this would be dynamic module which is whole file\n                    var container = this.getAstDeclarationContainer();\n                    if (container.nodeType === NodeType.ModuleDeclaration &&\n                        hasFlag((<ModuleDeclaration>container).getModuleFlags(), ModuleFlags.IsWholeFile) &&\n                        hasFlag(declFlags, DeclFlags.Exported)) {\n                        result += \"export \";\n                        emitDeclare = true;\n                    }\n\n                    // Emit declare if not interface declaration && is not from module\n                    if (emitDeclare && typeString !== \"interface\") {\n                        result += \"declare \";\n                    }\n\n                    result += typeString + \" \";\n                }\n            }\n\n            return result;\n        }\n\n        private emitDeclFlags(declFlags: DeclFlags, typeString: string) {\n            this.declFile.Write(this.getDeclFlagsString(declFlags, typeString));\n        }\n\n        private canEmitTypeAnnotationSignature(declFlag: DeclFlags = DeclFlags.None) {\n            // Private declaration, shouldnt emit type any time.\n            return !hasFlag(declFlag, DeclFlags.Private);\n        }\n\n        private pushDeclarationContainer(ast: AST) {\n            this.declarationContainerStack.push(ast);\n        }\n\n        private popDeclarationContainer(ast: AST) {\n            CompilerDiagnostics.assert(ast !== this.getAstDeclarationContainer(), \'Declaration container mismatch\');\n            this.declarationContainerStack.pop();\n        }\n\n        public emitTypeNamesMember(memberName: MemberName, emitIndent: boolean = false) {\n            if (memberName.prefix === \"{ \") {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n\n                this.declFile.WriteLine(\"{\");\n                this.indenter.increaseIndent();\n                emitIndent = true;\n            }\n            else if (memberName.prefix !== \"\") {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n\n                this.declFile.Write(memberName.prefix);\n                emitIndent = false;\n            }\n\n            if (memberName.isString()) {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n\n                this.declFile.Write((<MemberNameString>memberName).text);\n            }\n            else if (memberName.isArray()) {\n                var ar = <MemberNameArray>memberName;\n                for (var index = 0; index < ar.entries.length; index++) {\n                    this.emitTypeNamesMember(ar.entries[index], emitIndent);\n                    if (ar.delim === \"; \") {\n                        this.declFile.WriteLine(\";\");\n                    }\n                }\n            }\n\n            if (memberName.suffix === \"}\") {\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.declFile.Write(memberName.suffix);\n            }\n            else {\n                this.declFile.Write(memberName.suffix);\n            }\n        }\n\n        private emitTypeSignature(type: PullTypeSymbol) {\n            var declarationContainerAst = this.getAstDeclarationContainer();\n            var declarationPullSymbolAndDiagnostics = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(declarationContainerAst, this.fileName);\n            var declarationPullSymbol = declarationPullSymbolAndDiagnostics && declarationPullSymbolAndDiagnostics.symbol;\n            var typeNameMembers = type.getScopedNameEx(declarationPullSymbol);\n            this.emitTypeNamesMember(typeNameMembers);\n        }\n\n        private emitComment(comment: Comment) {\n            var text = comment.getText();\n            if (this.declFile.onNewLine) {\n                this.emitIndent();\n            }\n            else if (!comment.isBlockComment) {\n                this.declFile.WriteLine(\"\");\n                this.emitIndent();\n            }\n            \n            this.declFile.Write(text[0]);\n\n            for (var i = 1; i < text.length; i++) {\n                this.declFile.WriteLine(\"\");\n                this.emitIndent();\n                this.declFile.Write(text[i]);\n            }\n\n            if (comment.endsLine || !comment.isBlockComment) {\n                this.declFile.WriteLine(\"\");\n            }\n            else {\n                this.declFile.Write(\" \");\n            }\n        }\n\n        private emitDeclarationComments(ast: AST, endLine?: boolean);\n        private emitDeclarationComments(astOrSymbol, endLine = true) {\n            if (!this.emitOptions.compilationSettings.emitComments) {\n                return;\n            }\n\n            var declComments = <Comment[]>astOrSymbol.getDocComments();\n            this.writeDeclarationComments(declComments, endLine);\n        }\n\n        public writeDeclarationComments(declComments: Comment[], endLine = true) {\n            if (declComments.length > 0) {\n                for (var i = 0; i < declComments.length; i++) {\n                    this.emitComment(declComments[i]);\n                }\n\n                if (endLine) {\n                    if (!this.declFile.onNewLine) {\n                        this.declFile.WriteLine(\"\");\n                    }\n                }\n                else {\n                    if (this.declFile.onNewLine) {\n                        this.emitIndent();\n                    }\n                }\n            }\n        }\n\n        public emitTypeOfBoundDecl(boundDecl: BoundDecl) {\n            var pullSymbol = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(boundDecl, this.fileName).symbol;\n            var type = this.widenType(pullSymbol.getType());\n            if (!type) {\n                // PULLTODO\n                return;\n            }\n\n            if (boundDecl.typeExpr || // Specified type expression\n                (boundDecl.init && type !== this.semanticInfoChain.anyTypeSymbol)) { // Not infered any\n                this.declFile.Write(\": \");\n                this.emitTypeSignature(type);\n            }\n        }\n\n        public VariableDeclaratorCallback(pre: boolean, varDecl: VariableDeclarator): boolean {\n            if (pre && this.canEmitSignature(ToDeclFlags(varDecl.getVarFlags()), false)) {\n                var interfaceMember = (this.getAstDeclarationContainer().nodeType === NodeType.InterfaceDeclaration);\n                this.emitDeclarationComments(varDecl);\n                if (!interfaceMember) {\n                    // If it is var list of form var a, b, c = emit it only if count > 0 - which will be when emitting first var\n                    // If it is var list of form  var a = varList count will be 0\n                    if (this.varListCount >= 0) {\n                        this.emitDeclFlags(ToDeclFlags(varDecl.getVarFlags()), \"var\");\n                        this.varListCount = -this.varListCount;\n                    }\n\n                    this.declFile.Write(varDecl.id.actualText);\n                }\n                else {\n                    this.emitIndent();\n                    this.declFile.Write(varDecl.id.actualText);\n                    if (hasFlag(varDecl.id.getFlags(), ASTFlags.OptionalName)) {\n                        this.declFile.Write(\"?\");\n                    }\n                }\n\n                if (this.canEmitTypeAnnotationSignature(ToDeclFlags(varDecl.getVarFlags()))) {\n                    this.emitTypeOfBoundDecl(varDecl);\n                }\n\n                // emitted one var decl\n                if (this.varListCount > 0) {\n                    this.varListCount--;\n                }\n                else if (this.varListCount < 0) {\n                    this.varListCount++;\n                }\n\n                // Write ; or ,\n                if (this.varListCount < 0) {\n                    this.declFile.Write(\", \");\n                }\n                else {\n                    this.declFile.WriteLine(\";\");\n                }\n            }\n            return false;\n        }\n\n        public BlockCallback(pre: boolean, block: Block): boolean {\n            return false;\n        }\n\n        public VariableStatementCallback(pre: boolean, variableDeclaration: VariableDeclaration): boolean {\n            return true;\n        }\n\n        public VariableDeclarationCallback(pre: boolean, variableDeclaration: VariableDeclaration): boolean {\n            if (pre) {\n                this.varListCount = variableDeclaration.declarators.members.length;\n            }\n            else {\n                this.varListCount = 0;\n            }\n            return true;\n        }\n\n        private emitArgDecl(argDecl: Parameter, funcDecl: FunctionDeclaration) {\n            this.indenter.increaseIndent();\n\n            this.emitDeclarationComments(argDecl, false);\n            this.declFile.Write(argDecl.id.actualText);\n            if (argDecl.isOptionalArg()) {\n                this.declFile.Write(\"?\");\n            }\n            \n            this.indenter.decreaseIndent();\n\n            if (this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.getFunctionFlags()))) {\n                this.emitTypeOfBoundDecl(argDecl);\n            }\n        }\n\n        public isOverloadedCallSignature(funcDecl: FunctionDeclaration) {\n            var funcSymbol = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(funcDecl, this.fileName).symbol;\n            var funcTypeSymbol = funcSymbol.getType();\n            var signatures = funcTypeSymbol.getCallSignatures();\n            return signatures && signatures.length > 1;\n        }\n\n        public FunctionDeclarationCallback(pre: boolean, funcDecl: FunctionDeclaration): boolean {\n            if (!pre) {\n                return false;\n            }\n\n            if (funcDecl.isAccessor()) {\n                return this.emitPropertyAccessorSignature(funcDecl);\n            }\n\n            var isInterfaceMember = (this.getAstDeclarationContainer().nodeType === NodeType.InterfaceDeclaration);\n            var funcSymbol = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(funcDecl, this.fileName).symbol;\n            var funcTypeSymbol = funcSymbol.getType();\n            if (funcDecl.block) {\n                var constructSignatures = funcTypeSymbol.getConstructSignatures();\n                if (constructSignatures && constructSignatures.length > 1) {\n                    return false;\n                }\n                else if (this.isOverloadedCallSignature(funcDecl)) {\n                    // This means its implementation of overload signature. do not emit\n                    return false;\n                }\n            }\n            else if (!isInterfaceMember && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Private) && this.isOverloadedCallSignature(funcDecl)) {\n                // Print only first overload of private function\n                var callSignatures = funcTypeSymbol.getCallSignatures();\n                Debug.assert(callSignatures && callSignatures.length > 1);\n                var firstSignature = callSignatures[0].isDefinition() ? callSignatures[1] : callSignatures[0];\n                var firstSignatureDecl = firstSignature.getDeclarations()[0];\n                var firstFuncDecl = <FunctionDeclaration>this.semanticInfoChain.getASTForDecl(firstSignatureDecl);\n                if (firstFuncDecl !== funcDecl) {\n                    return false;\n                }\n            }\n\n            if (!this.canEmitSignature(ToDeclFlags(funcDecl.getFunctionFlags()), false)) {\n                return false;\n            }\n\n            var funcSignature = this.semanticInfoChain.getDeclForAST(funcDecl, this.fileName).getSignatureSymbol();\n            this.emitDeclarationComments(funcDecl);\n            if (funcDecl.isConstructor) {\n                this.emitIndent();\n                this.declFile.Write(\"constructor\");\n                this.emitTypeParameters(funcDecl.typeArguments, funcSignature);\n            }\n            else {\n                var id = funcDecl.getNameText();\n                if (!isInterfaceMember) {\n                    this.emitDeclFlags(ToDeclFlags(funcDecl.getFunctionFlags()), \"function\");\n                    if (id !== \"__missing\" || !funcDecl.name || !funcDecl.name.isMissing()) {\n                        this.declFile.Write(id);\n                    }\n                    else if (funcDecl.isConstructMember()) {\n                        this.declFile.Write(\"new\");\n                    }\n\n                    this.emitTypeParameters(funcDecl.typeArguments, funcSignature);\n                }\n                else {\n                    this.emitIndent();\n                    if (funcDecl.isConstructMember()) {\n                        this.declFile.Write(\"new\");\n                        this.emitTypeParameters(funcDecl.typeArguments, funcSignature);\n                    }\n                    else if (!funcDecl.isCallMember() && !funcDecl.isIndexerMember()) {\n                        this.declFile.Write(id);\n                        this.emitTypeParameters(funcDecl.typeArguments, funcSignature);\n                        if (hasFlag(funcDecl.name.getFlags(), ASTFlags.OptionalName)) {\n                            this.declFile.Write(\"? \");\n                        }\n                    }\n                    else {\n                        this.emitTypeParameters(funcDecl.typeArguments, funcSignature);\n                    }\n                }\n            }\n\n            if (!funcDecl.isIndexerMember()) {\n                this.declFile.Write(\"(\");\n            }\n            else {\n                this.declFile.Write(\"[\");\n            }\n\n            if (funcDecl.arguments) {\n                var argsLen = funcDecl.arguments.members.length;\n                if (funcDecl.variableArgList) {\n                    argsLen--;\n                }\n\n                for (var i = 0; i < argsLen; i++) {\n                    var argDecl = <Parameter>funcDecl.arguments.members[i];\n                    this.emitArgDecl(argDecl, funcDecl);\n                    if (i < (argsLen - 1)) {\n                        this.declFile.Write(\", \");\n                    }\n                }\n            }\n\n            if (funcDecl.variableArgList) {\n                var lastArg = <Parameter>funcDecl.arguments.members[funcDecl.arguments.members.length - 1];\n                if (funcDecl.arguments.members.length > 1) {\n                    this.declFile.Write(\", ...\");\n                }\n                else {\n                    this.declFile.Write(\"...\");\n                }\n\n                this.emitArgDecl(lastArg, funcDecl);\n            }\n\n            if (!funcDecl.isIndexerMember()) {\n                this.declFile.Write(\")\");\n            }\n            else {\n                this.declFile.Write(\"]\");\n            }\n\n            if (!funcDecl.isConstructor &&\n                this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.getFunctionFlags()))) {\n                var returnType = funcSignature.getReturnType();\n                if (funcDecl.returnTypeAnnotation ||\n                    (returnType && returnType !== this.semanticInfoChain.anyTypeSymbol)) {\n                    this.declFile.Write(\": \");\n                    this.emitTypeSignature(returnType);\n                }\n            }\n\n            this.declFile.WriteLine(\";\");\n\n            return false;\n        }\n\n        public emitBaseExpression(bases: ASTList, index: number) {\n            var baseTypeAndDiagnostics = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(bases.members[index], this.fileName);\n            var baseType = baseTypeAndDiagnostics && <PullTypeSymbol>baseTypeAndDiagnostics.symbol;\n            this.emitTypeSignature(baseType);\n        }\n\n        private emitBaseList(typeDecl: TypeDeclaration, useExtendsList: boolean) {\n            var bases = useExtendsList ? typeDecl.extendsList : typeDecl.implementsList;\n            if (bases && (bases.members.length > 0)) {\n                var qual = useExtendsList ? \"extends\" : \"implements\";\n                this.declFile.Write(\" \" + qual + \" \");\n                var basesLen = bases.members.length;\n                for (var i = 0; i < basesLen; i++) {\n                    if (i > 0) {\n                        this.declFile.Write(\", \");\n                    }\n                    this.emitBaseExpression(bases, i);\n                }\n            }\n        }\n\n        private emitAccessorDeclarationComments(funcDecl: FunctionDeclaration) {\n            if (!this.emitOptions.compilationSettings.emitComments) {\n                return;\n            }\n\n            var accessors = PullHelpers.getGetterAndSetterFunction(funcDecl, this.semanticInfoChain, this.fileName);\n            var comments: Comment[] = [];\n            if (accessors.getter) {\n                comments = comments.concat(accessors.getter.getDocComments());\n            }\n            if (accessors.setter) {\n                comments = comments.concat(accessors.setter.getDocComments());\n            }\n            this.writeDeclarationComments(comments);\n        }\n\n        public emitPropertyAccessorSignature(funcDecl: FunctionDeclaration) {\n            var accessorSymbol = PullHelpers.getAccessorSymbol(funcDecl, this.semanticInfoChain, this.fileName);\n            if (!hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor) && accessorSymbol.getGetter()) {\n                // Setter is being used to emit the type info. \n                return false;\n            }\n\n            this.emitAccessorDeclarationComments(funcDecl);\n            this.emitDeclFlags(ToDeclFlags(funcDecl.getFunctionFlags()), \"var\");\n            this.declFile.Write(funcDecl.name.actualText);\n            if (this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.getFunctionFlags()))) {\n                this.declFile.Write(\" : \");\n                var type = accessorSymbol.getType();\n                this.emitTypeSignature(type);\n            }\n            this.declFile.WriteLine(\";\");\n\n            return false;\n        }\n\n        private emitClassMembersFromConstructorDefinition(funcDecl: FunctionDeclaration) {\n            if (funcDecl.arguments) {\n                var argsLen = funcDecl.arguments.members.length; if (funcDecl.variableArgList) { argsLen--; }\n\n                for (var i = 0; i < argsLen; i++) {\n                    var argDecl = <Parameter>funcDecl.arguments.members[i];\n                    if (hasFlag(argDecl.getVarFlags(), VariableFlags.Property)) {\n                        this.emitDeclarationComments(argDecl);\n                        this.emitDeclFlags(ToDeclFlags(argDecl.getVarFlags()), \"var\");\n                        this.declFile.Write(argDecl.id.actualText);\n\n                        if (this.canEmitTypeAnnotationSignature(ToDeclFlags(argDecl.getVarFlags()))) {\n                            this.emitTypeOfBoundDecl(argDecl);\n                        }\n                        this.declFile.WriteLine(\";\");\n                    }\n                }\n            }\n        }\n\n        public ClassDeclarationCallback(pre: boolean, classDecl: ClassDeclaration): boolean {\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(classDecl.getVarFlags()), classDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                var className = classDecl.name.actualText;\n                this.emitDeclarationComments(classDecl);\n                this.emitDeclFlags(ToDeclFlags(classDecl.getVarFlags()), \"class\");\n                this.declFile.Write(className);\n                this.pushDeclarationContainer(classDecl);\n                this.emitTypeParameters(classDecl.typeParameters);\n                this.emitBaseList(classDecl, true);\n                this.emitBaseList(classDecl, false);\n                this.declFile.WriteLine(\" {\");\n\n                this.indenter.increaseIndent();\n                if (classDecl.constructorDecl) {\n                    this.emitClassMembersFromConstructorDefinition(classDecl.constructorDecl);\n                }\n            }\n            else {\n                this.indenter.decreaseIndent();\n                this.popDeclarationContainer(classDecl);\n\n                this.emitIndent();\n                this.declFile.WriteLine(\"}\");\n            }\n\n            return true;\n        }\n\n        private emitTypeParameters(typeParams: ASTList, funcSignature?: PullSignatureSymbol) {\n            if (!typeParams || !typeParams.members.length) {\n                return;\n            }\n\n            this.declFile.Write(\"<\");\n            var containerAst = this.getAstDeclarationContainer();\n            var containerSymbolAndDiagnostics = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(containerAst, this.fileName);\n            var containerSymbol = containerSymbolAndDiagnostics && <PullTypeSymbol>containerSymbolAndDiagnostics.symbol;\n            var typars: PullTypeSymbol[];\n            if (funcSignature) {\n                typars = funcSignature.getTypeParameters();\n            }\n            else {\n                typars = containerSymbol.getTypeArguments();\n                if (!typars || !typars.length) {\n                    typars = containerSymbol.getTypeParameters();\n                }\n            }\n\n            for (var i = 0; i < typars.length; i++) {\n                if (i) {\n                    this.declFile.Write(\", \");\n                }\n\n                var memberName = typars[i].getScopedNameEx(containerSymbol, true);\n                this.emitTypeNamesMember(memberName);\n            }\n\n            this.declFile.Write(\">\");\n        }\n\n        public InterfaceDeclarationCallback(pre: boolean, interfaceDecl: InterfaceDeclaration): boolean {\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(interfaceDecl.getVarFlags()), interfaceDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                var interfaceName = interfaceDecl.name.actualText;\n                this.emitDeclarationComments(interfaceDecl);\n                this.emitDeclFlags(ToDeclFlags(interfaceDecl.getVarFlags()), \"interface\");\n                this.declFile.Write(interfaceName);\n                this.pushDeclarationContainer(interfaceDecl);\n                this.emitTypeParameters(interfaceDecl.typeParameters);\n                this.emitBaseList(interfaceDecl, true);\n                this.declFile.WriteLine(\" {\");\n\n                this.indenter.increaseIndent();\n            }\n            else {\n                this.indenter.decreaseIndent();\n                this.popDeclarationContainer(interfaceDecl);\n\n                this.emitIndent();\n                this.declFile.WriteLine(\"}\");\n            }\n\n            return true;\n        }\n\n        public ImportDeclarationCallback(pre: boolean, importDecl: ImportDeclaration): boolean {\n            if (pre) {\n                var importSymbol = <PullTypeAliasSymbol>this.semanticInfoChain.getSymbolAndDiagnosticsForAST(importDecl, this.fileName).symbol;\n                if (importSymbol.getTypeUsedExternally()) {\n                    this.emitDeclarationComments(importDecl);\n                    this.emitIndent();\n                    this.declFile.Write(\"import \");\n\n                    this.declFile.Write(importDecl.id.actualText + \" = \");\n                    if (importDecl.isDynamicImport) {\n                        this.declFile.WriteLine(\"require(\" + importDecl.getAliasName() + \");\");\n                    }\n                    else {\n                        this.declFile.WriteLine(importDecl.getAliasName() + \";\");\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        private emitEnumSignature(moduleDecl: ModuleDeclaration) {\n            if (!this.canEmitSignature(ToDeclFlags(moduleDecl.getModuleFlags()))) {\n                return false;\n            }\n\n            this.emitDeclarationComments(moduleDecl);\n            this.emitDeclFlags(ToDeclFlags(moduleDecl.getModuleFlags()), \"enum\");\n            this.declFile.WriteLine(moduleDecl.name.actualText + \" {\");\n\n            this.indenter.increaseIndent();\n            var membersLen = moduleDecl.members.members.length;\n            for (var j = 0; j < membersLen; j++) {\n                var memberDecl: AST = moduleDecl.members.members[j];\n                if (memberDecl.nodeType === NodeType.VariableStatement && !hasFlag(memberDecl.getFlags(), ASTFlags.EnumMapElement)) {\n                    var variableStatement = <VariableStatement>memberDecl;\n                    this.emitDeclarationComments(memberDecl);\n                    this.emitIndent();\n                    this.declFile.WriteLine((<VariableDeclarator>variableStatement.declaration.declarators.members[0]).id.actualText + \",\");\n                }\n            }\n            this.indenter.decreaseIndent();\n\n            this.emitIndent();\n            this.declFile.WriteLine(\"}\");\n\n            return false;\n        }\n\n        public ModuleDeclarationCallback(pre: boolean, moduleDecl: ModuleDeclaration): boolean {\n            if (hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsWholeFile)) {\n                // This is dynamic modules and we are going to outputing single file, \n                // we need to change the declFile because dynamic modules are always emitted to their corresponding .d.ts\n                if (hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsDynamic)) {\n                    if (pre) {\n                        if (!this.emitOptions.outputMany) {\n                            this.singleDeclFile = this.declFile;\n                            CompilerDiagnostics.assert(this.indenter.indentAmt === 0, \"Indent has to be 0 when outputing new file\");\n                            // Create new file\n                            var declareFileName = this.emitOptions.mapOutputFileName(this.fileName, TypeScriptCompiler.mapToDTSFileName);\n                            var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.compilationSettings.emitComments && moduleDecl.containsUnicodeCharInComment);\n\n                            // Creating files can cause exceptions, they will be caught higher up in TypeScriptCompiler.emit\n                            this.declFile = new DeclFileWriter(this.createFile(declareFileName, useUTF8InOutputfile));\n                        }\n                        this.pushDeclarationContainer(moduleDecl);\n                    }\n                    else {\n                        if (!this.emitOptions.outputMany) {\n                            CompilerDiagnostics.assert(this.singleDeclFile !== this.declFile, \"singleDeclFile cannot be null as we are going to revert back to it\");\n                            CompilerDiagnostics.assert(this.indenter.indentAmt === 0, \"Indent has to be 0 when outputing new file\");\n\n                            // Creating files can cause exceptions, they will be caught higher up in TypeScriptCompiler.emit\n                            try {\n                                this.declFile.Close();\n                            }\n                            catch (e) {\n                                Emitter.throwEmitterError(e);\n                            }\n\n                            this.declFile = this.singleDeclFile;\n                        }\n\n                        this.popDeclarationContainer(moduleDecl);\n                    }\n                }\n\n                return true;\n            }\n\n            if (moduleDecl.isEnum()) {\n                if (pre) {\n                    this.emitEnumSignature(moduleDecl);\n                }\n                return false;\n            }\n\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(moduleDecl.getModuleFlags()), moduleDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                if (this.emitDottedModuleName()) {\n                    this.dottedModuleEmit += \".\";\n                }\n                else {\n                    this.dottedModuleEmit = this.getDeclFlagsString(ToDeclFlags(moduleDecl.getModuleFlags()), \"module\");\n                }\n\n                this.dottedModuleEmit += moduleDecl.name.actualText;\n\n                var isCurrentModuleDotted = (moduleDecl.members.members.length === 1 &&\n                    moduleDecl.members.members[0].nodeType === NodeType.ModuleDeclaration &&\n                    !(<ModuleDeclaration>moduleDecl.members.members[0]).isEnum() &&\n                    hasFlag((<ModuleDeclaration>moduleDecl.members.members[0]).getModuleFlags(), ModuleFlags.Exported));\n\n                // Module is dotted only if it does not have doc comments for it\n                var moduleDeclComments = moduleDecl.getDocComments();\n                isCurrentModuleDotted = isCurrentModuleDotted && (moduleDeclComments === null || moduleDeclComments.length === 0);\n\n                this.isDottedModuleName.push(isCurrentModuleDotted);\n                this.pushDeclarationContainer(moduleDecl);\n\n                if (!isCurrentModuleDotted) {\n                    this.emitDeclarationComments(moduleDecl);\n                    this.declFile.Write(this.dottedModuleEmit);\n                    this.declFile.WriteLine(\" {\");\n                    this.indenter.increaseIndent();\n                }\n            }\n            else {\n                if (!this.emitDottedModuleName()) {\n                    this.indenter.decreaseIndent();\n                    this.emitIndent();\n                    this.declFile.WriteLine(\"}\");\n                }\n\n                this.popDeclarationContainer(moduleDecl);\n                this.isDottedModuleName.pop();\n            }\n\n            return true;\n        }\n\n        public ScriptCallback(pre: boolean, script: Script): boolean {\n            if (pre) {\n                if (this.emitOptions.outputMany) {\n                    for (var i = 0; i < script.referencedFiles.length; i++) {\n                        var referencePath = script.referencedFiles[i].path;\n                        var declareFileName: string;\n                        if (isRooted(referencePath)) {\n                            declareFileName = this.emitOptions.mapOutputFileName(referencePath, TypeScriptCompiler.mapToDTSFileName)\n                        }\n                        else {\n                            declareFileName = getDeclareFilePath(script.referencedFiles[i].path);\n                        }\n                        this.declFile.WriteLine(\'/// <reference path=\"\' + declareFileName + \'\" />\');\n                    }\n                }\n                this.pushDeclarationContainer(script);\n            }\n            else {\n                this.popDeclarationContainer(script);\n            }\n            return true;\n        }\n\n        public DefaultCallback(pre: boolean, ast: AST): boolean {\n            return !ast.isStatement();\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export class DataMap {\n        public map: any = {};\n\n        public link(id: string, data: any) {\n            this.map[id] = data;\n        }\n\n        public unlink(id: string) {\n            this.map[id] = undefined;\n        }\n\n        //public unlinkChildren(ast:AST) {\n        //    TypeScript.getAstWalkerFactory().walk(ast, (ast: AST, parent: AST): AST => { this.unlink(ast); });\n        //}\n\n        public read(id: string) {\n            return this.map[id];\n        }\n\n        public flush() {\n            this.map = {};\n        }\n\n        public unpatch() { return null; }\n    }\n\n    export class PatchedDataMap extends DataMap {\n        public diffs: any = {};\n\n        constructor(public parent: DataMap) {\n            super();\n        }\n\n        public link(id: string, data: any) {\n            this.diffs[id] = data;\n        }\n\n        public unlink(id: string) {\n            this.diffs[id] = undefined;\n        }\n\n        public read(id: string) {\n\n            var data = this.diffs[id];\n\n            if (data) {\n                return data;\n            }\n\n            return this.parent.read(id);\n        }\n\n        public flush() {\n            this.diffs = {};\n        }\n\n        public unpatch() {\n            this.flush();\n            return this.parent;\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum PullElementFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        GetAccessor = 1 << 5,\n        SetAccessor = 1 << 6,\n        Optional = 1 << 7,\n        Call = 1 << 8,\n        Constructor = 1 << 9,\n        Index = 1 << 10,\n        Signature = 1 << 11,\n        Enum = 1 << 12,\n        FatArrow = 1 << 13,\n\n        ClassConstructorVariable = 1 << 14,\n        InitializedModule = 1 << 15,\n        InitializedDynamicModule = 1 << 16,\n        InitializedEnum = 1 << 17,\n\n        MustCaptureThis = 1 << 18,\n        Constant = 1 << 19,\n\n        ExpressionElement = 1 << 20,\n\n        DeclaredInAWithBlock = 1 << 21,\n\n        ImplicitVariable = ClassConstructorVariable | InitializedModule | InitializedDynamicModule | InitializedEnum,\n        SomeInitializedModule = InitializedModule | InitializedDynamicModule | InitializedEnum,\n    }\n\n    export enum PullElementKind {\n        None = 0,\n\n        Script = 1,\n        Global = 1 << 1,\n        Primitive = 1 << 2,\n\n        Container = 1 << 3,\n        Class = 1 << 4,\n        Interface = 1 << 5,\n        DynamicModule = 1 << 6,\n        Enum = 1 << 7,\n        Array = 1 << 8,\n        TypeAlias = 1 << 9,\n        ObjectLiteral = 1 << 10,\n\n        Variable = 1 << 11,\n        Parameter = 1 << 12,\n        Property = 1 << 13,\n        TypeParameter = 1 << 14,\n\n        Function = 1 << 15,\n        ConstructorMethod = 1 << 16,\n        Method = 1 << 17,\n        FunctionExpression = 1 << 18,\n\n        GetAccessor = 1 << 19,\n        SetAccessor = 1 << 20,\n\n        CallSignature = 1 << 21,\n        ConstructSignature = 1 << 22,\n        IndexSignature = 1 << 23,\n\n        ObjectType = 1 << 24,\n        FunctionType = 1 << 25,\n        ConstructorType = 1 << 26,\n\n        EnumMember = 1 << 27,\n        ErrorType = 1 << 28,\n\n        Expression = 1 << 29,\n\n        WithBlock = 1 << 30,\n        CatchBlock = 1 << 31,\n\n        All = Script | Global | Primitive | Container | Class | Interface | DynamicModule | Enum | Array | TypeAlias |\n            ObjectLiteral | Variable | Parameter | Property | TypeParameter | Function | ConstructorMethod | Method |\n            FunctionExpression | GetAccessor | SetAccessor | CallSignature | ConstructSignature | IndexSignature | ObjectType |\n            FunctionType | ConstructorType | EnumMember | ErrorType | Expression | WithBlock | CatchBlock,\n\n        SomeFunction = Function | ConstructorMethod | Method | FunctionExpression | GetAccessor | SetAccessor | CallSignature | ConstructSignature | IndexSignature,\n\n        // Warning: SomeValue and SomeType (along with their constituents) must be disjoint\n        SomeValue = Variable | Parameter | Property | EnumMember | SomeFunction,\n\n        SomeType = Script | Global | Primitive | Container | Class | Interface | DynamicModule |\n                    Enum | Array | TypeAlias | ObjectType | FunctionType | ConstructorType | TypeParameter | ErrorType,\n\n        AcceptableAlias = Variable | SomeFunction | Class | Interface | Enum | Container | ObjectType | FunctionType | ConstructorType,\n\n        SomeContainer = Container | DynamicModule | TypeAlias,\n\n        SomeBlock = WithBlock | CatchBlock,\n\n        SomeSignature = CallSignature | ConstructSignature | IndexSignature,\n\n        SomeAccessor = GetAccessor | SetAccessor,\n\n        SomeTypeReference = Interface | ObjectType | FunctionType | ConstructorType,\n\n        SomeLHS = Variable | Property | Parameter | SetAccessor | Method,\n    }\n\n    export enum SymbolLinkKind {\n        TypedAs,\n        ContextuallyTypedAs,\n        ProvidesInferredType,\n        ArrayType,\n\n        ArrayOf,\n\n        PublicMember,\n        PrivateMember,\n\n        ConstructorMethod,\n\n        Aliases,\n        ExportAliases,\n\n        ContainedBy,\n\n        Extends,\n        Implements,\n\n        Parameter,\n        ReturnType,\n\n        CallSignature,\n        ConstructSignature,\n        IndexSignature,\n\n        TypeParameter,\n        TypeArgument,\n        TypeParameterSpecializedTo,\n        SpecializedTo,\n\n        TypeConstraint,\n\n        ContributesToExpression,\n\n        GetterFunction,\n        SetterFunction,\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export var pullDeclID = 0;\n    export var lastBoundPullDeclId = 0;\n\n    export class PullDecl {\n        private declType: PullElementKind;\n\n        private declName: string;\n\n        private declDisplayName: string;\n\n        private symbol: PullSymbol = null;\n\n        private declGroups: { [s: string]: PullDeclGroup; } = new BlockIntrinsics();\n\n        // use this to store the signature symbol for a function declaration\n        private signatureSymbol: PullSignatureSymbol = null;\n        private specializingSignatureSymbol: PullSignatureSymbol = null;\n\n        private childDecls: PullDecl[] = [];\n        private typeParameters: PullDecl[] = [];\n\n        // Mappings from names to decls.  Public only for diffing purposes.\n        public childDeclTypeCache: any = new BlockIntrinsics();\n        public childDeclValueCache: any = new BlockIntrinsics();\n        public childDeclTypeParameterCache: any = new BlockIntrinsics();\n\n        private declID = pullDeclID++;\n\n        private declFlags: PullElementFlags = PullElementFlags.None;\n\n        private span: TextSpan;\n\n        private scriptName: string;\n\n        private diagnostics: IDiagnostic[] = null;\n\n        private parentDecl: PullDecl = null;\n\n        // In the case of classes, initialized modules and enums, we need to track the implicit\n        // value set to the constructor or instance type.  We can use this field to make sure that on\n        // edits and updates we don\'t leak the val decl or symbol\n        private synthesizedValDecl: PullDecl = null;\n\n        constructor(declName: string, displayName: string, declType: PullElementKind, declFlags: PullElementFlags, span: TextSpan, scriptName: string) {\n            this.declName = declName;\n            this.declType = declType;\n            this.declFlags = declFlags;\n            this.span = span;\n            this.scriptName = scriptName;\n\n            if (displayName !== this.declName) {\n                this.declDisplayName = displayName;\n            }\n        }\n\n        public getDeclID() { return this.declID; }\n\n        /** Use getName for type checking purposes, and getDisplayName to report an error or display info to the user.\n         * They will differ when the identifier is an escaped unicode character or the identifier \"__proto__\".\n         */\n        public getName() { return this.declName; }\n        public getKind() { return this.declType }\n\n        public getDisplayName() {\n            return this.declDisplayName === undefined ? this.declName : this.declDisplayName;\n        }\n\n        public setSymbol(symbol: PullSymbol) { this.symbol = symbol; }\n        public getSymbol(): PullSymbol { return this.symbol; }\n\n        public setSignatureSymbol(signature: PullSignatureSymbol): void { this.signatureSymbol = signature; }\n        public getSignatureSymbol(): PullSignatureSymbol { return this.signatureSymbol; }\n\n        public setSpecializingSignatureSymbol(signature: PullSignatureSymbol): void { this.specializingSignatureSymbol = signature; }\n        public getSpecializingSignatureSymbol() {\n            if (this.specializingSignatureSymbol) {\n                return this.specializingSignatureSymbol;\n            }\n\n            return this.signatureSymbol;\n        }\n\n        public getFlags(): PullElementFlags { return this.declFlags; }\n        public setFlags(flags: PullElementFlags) { this.declFlags = flags; }\n\n        public getSpan(): TextSpan { return this.span; }\n        public setSpan(span: TextSpan) { this.span = span; }\n\n        public getScriptName(): string { return this.scriptName; }\n\n        public setValueDecl(valDecl: PullDecl) { this.synthesizedValDecl = valDecl; }\n        public getValueDecl() { return this.synthesizedValDecl; }\n\n        public isEqual(other: PullDecl) {\n            return  (this.declName === other.declName) &&\n                    (this.declType === other.declType) &&\n                    (this.declFlags === other.declFlags) &&\n                    (this.scriptName === other.scriptName) &&\n                    (this.span.start() === other.span.start()) &&\n                    (this.span.end() === other.span.end());\n        }\n\n        public getParentDecl(): PullDecl {\n            return this.parentDecl;\n        }\n\n        public setParentDecl(parentDecl: PullDecl) {\n            this.parentDecl = parentDecl;\n        }\n\n        public addDiagnostic(diagnostic: IDiagnostic) {\n            if (diagnostic) {\n                if (!this.diagnostics) {\n                    this.diagnostics = [];\n                }\n\n                //error.adjustOffset(this.span.start());\n\n                this.diagnostics[this.diagnostics.length] = diagnostic;\n            }\n        }\n\n        public getDiagnostics(): IDiagnostic[] {\n            return this.diagnostics;\n        }\n\n        public setErrors(diagnostics: SemanticDiagnostic[]) {\n            if (diagnostics) {\n                this.diagnostics = [];\n\n                // adjust the spans as we parent the errors to the new decl\n                for (var i = 0; i < diagnostics.length; i++) {\n                    diagnostics[i].adjustOffset(this.span.start());\n                    this.diagnostics[this.diagnostics.length] = diagnostics[i];\n                }\n            }\n        }\n\n        public resetErrors() {\n            this.diagnostics = [];\n        }\n\n        private getChildDeclCache(declKind: PullElementKind): any {\n            return declKind === PullElementKind.TypeParameter\n                ? this.childDeclTypeParameterCache\n                : hasFlag(declKind, PullElementKind.SomeType)\n                    ? this.childDeclTypeCache\n                    : this.childDeclValueCache;\n        }\n\n        // returns \'true\' if the child decl was successfully added\n        // (\'false\' is returned if addIfDuplicate is false and there is a collision)\n        public addChildDecl(childDecl: PullDecl): void {\n            // check if decl exists\n            // merge if necessary\n\n            if (childDecl.getKind() === PullElementKind.TypeParameter) {\n                this.typeParameters[this.typeParameters.length] = childDecl;\n            }\n            else {\n                this.childDecls[this.childDecls.length] = childDecl;\n            }\n\n            // add to the appropriate cache\n            var declName = childDecl.getName();\n            var cache = this.getChildDeclCache(childDecl.getKind());\n            var childrenOfName = <PullDecl[]>cache[declName];\n            if (!childrenOfName) {\n                childrenOfName = [];\n            }\n\n            childrenOfName.push(childDecl);\n            cache[declName] = childrenOfName;\n        }\n\n        //public lookupChildDecls(declName: string, declKind: PullElementKind): PullDecl[] {\n        //    // find the decl with the optional type\n        //    // if necessary, cache the decl\n        //    // may be wise to return a chain of decls, or take a parent decl as a parameter\n        //    var cache = this.getChildDeclCache(declKind);\n        //    var childrenOfName = <PullDecl[]>cache[declName];\n\n        //    return childrenOfName ? childrenOfName : [];\n        //}\n\n        // Search for a child decl with the given name.  \'isType\' is used to specify whether or \n        // not child types or child values are returned.\n        public searchChildDecls(declName: string, isType: boolean): PullDecl[]{\n             // find the decl with the optional type\n             // if necessary, cache the decl\n             // may be wise to return a chain of decls, or take a parent decl as a parameter\n            var cache = isType ? this.childDeclTypeCache : this.childDeclValueCache;\n            var cacheVal = <PullDecl[]>cache[declName];\n\n            if (cacheVal) {\n                return cacheVal;\n            }\n            else {\n                // If we didn\'t find it, and they were searchign for types, then also check the \n                // type parameter cache.\n                if (isType) {\n                    cacheVal = this.childDeclTypeParameterCache[declName];\n\n                    if (cacheVal) {\n                        return cacheVal;\n                    }\n                }\n\n                return [];\n            }\n         }\n\n        public getChildDecls() { return this.childDecls; }\n        public getTypeParameters() { return this.typeParameters; }\n\n        public addVariableDeclToGroup(decl: PullDecl) {\n            var declGroup = this.declGroups[decl.getName()];\n            if (declGroup) {\n                declGroup.addDecl(decl);\n            }\n            else {\n                declGroup = new PullDeclGroup(decl.getName());\n                declGroup.addDecl(decl);\n                this.declGroups[decl.getName()] = declGroup;\n            }\n        }\n\n        public getVariableDeclGroups(): PullDecl[][] {\n            var declGroups: PullDecl[][] = [];\n\n            for (var declName in this.declGroups) {\n                if (this.declGroups[declName]) {\n                    declGroups[declGroups.length] = this.declGroups[declName].getDecls();\n                }\n            }\n\n            return declGroups;\n        }\n    }\n\n    export class PullFunctionExpressionDecl extends PullDecl {\n        private functionExpressionName: string;\n\n        constructor(expressionName: string, declFlags: PullElementFlags, span: TextSpan, scriptName: string) {\n            super(\"\", \"\", PullElementKind.FunctionExpression, declFlags, span, scriptName);\n            this.functionExpressionName = expressionName;\n        }\n\n        public getFunctionExpressionName(): string {\n            return this.functionExpressionName;\n        }\n    }\n\n    export class PullDeclGroup {\n\n        private _decls: PullDecl[] = [];\n\n        constructor(public name: string) {\n        }\n\n        public addDecl(decl: PullDecl) {\n            if (decl.getName() === this.name) {\n                this._decls[this._decls.length] = decl;\n            }\n        }\n\n        public getDecls() {\n            return this._decls;\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export var pullSymbolID = 0\n    export var lastBoundPullSymbolID = 0;\n    export var globalTyvarID = 0;\n\n    export class PullSymbol {\n\n        // private state\n        private pullSymbolID = pullSymbolID++;\n\n        private outgoingLinks: LinkList = new LinkList();\n        private incomingLinks: LinkList = new LinkList();\n        private declarations: LinkList = new LinkList();\n\n        private name: string;\n\n        private cachedPathIDs: any = {};\n\n        private declKind: PullElementKind;\n\n        // caches - free these on invalidate\n        private cachedContainerLink: PullSymbolLink = null;\n        private cachedTypeLink: PullSymbolLink = null;\n\n        private hasBeenResolved = false;\n\n        private isOptional = false;\n\n        private inResolution = false;\n\n        private isSynthesized = false;\n\n        private isBound = false;\n\n        private rebindingID = 0;\n\n        private isVarArg = false;\n\n        private isSpecialized = false;\n        private isBeingSpecialized = false;\n\n        public typeChangeUpdateVersion = -1;\n        public addUpdateVersion = -1;\n        public removeUpdateVersion = -1;\n\n        public docComments: string = null;\n\n        public isPrinting = false;\n\n        // public surface area\n        public getSymbolID() { return this.pullSymbolID; }\n\n        public isType() {\n            return (this.declKind & PullElementKind.SomeType) != 0;\n        }\n\n        public isSignature() {\n            return (this.declKind & PullElementKind.SomeSignature) != 0;\n        }\n\n        public isArray() {\n            return (this.declKind & PullElementKind.Array) != 0;\n        }\n\n        public isPrimitive() {\n            return this.declKind === PullElementKind.Primitive;\n        }\n\n        public isAccessor() {\n            return false;\n        }\n\n        constructor(name: string, declKind: PullElementKind) {\n            this.name = name;\n            this.declKind = declKind;\n        }\n\n        public isAlias() { return false; }\n        public isContainer() { return false; }\n\n        /** Use getName for type checking purposes, and getDisplayName to report an error or display info to the user.\n         * They will differ when the identifier is an escaped unicode character or the identifier \"__proto__\".\n         */\n        public getName(scopeSymbol?: PullSymbol, useConstraintInName?: boolean) { return this.name; }\n        public getDisplayName(scopeSymbol?: PullSymbol, useConstraintInName?: boolean) {\n            // Get the actual name associated with a declaration for this symbol\n            return this.getDeclarations()[0].getDisplayName();\n        }\n\n        public getKind() { return this.declKind; }\n        public setKind(declType: PullElementKind) { this.declKind = declType; }\n\n        public setIsOptional() { this.isOptional = true; }\n        public getIsOptional() { return this.isOptional; }\n\n        public getIsVarArg() { return this.isVarArg; }\n        public setIsVarArg() { this.isVarArg = true; }\n\n        public setIsSynthesized() { this.isSynthesized = true; }\n        public getIsSynthesized() { return this.isSynthesized; }\n\n        public setIsSpecialized() { this.isSpecialized = true; this.isBeingSpecialized = false; }\n        public getIsSpecialized() { return this.isSpecialized; }\n        public currentlyBeingSpecialized() { return this.isBeingSpecialized; }\n        public setIsBeingSpecialized() { this.isBeingSpecialized = true; }\n\n        public setIsBound(rebindingID: number) {\n            this.isBound = true;\n            this.rebindingID = rebindingID;\n        }\n\n        public getRebindingID() {\n            return this.rebindingID;\n        }\n\n        public getIsBound() { return this.isBound; }\n\n        public addCacheID(cacheID: string) {\n            if (!this.cachedPathIDs[cacheID]) {\n                this.cachedPathIDs[cacheID] = true;\n            }\n        }\n\n        public invalidateCachedIDs(cache: any) {\n            for (var id in this.cachedPathIDs) {\n                if (cache[id]) {\n                    cache[id] = undefined;\n                }\n            }\n        }\n\n        // declaration methods\n        public addDeclaration(decl: PullDecl) {\n            Debug.assert(!!decl);\n            this.declarations.addItem(decl);\n        }\n\n        public getDeclarations() { return <PullDecl[]>this.declarations.find(d => d); }\n\n        public removeDeclaration(decl: PullDecl) { this.declarations.remove(d => d === decl); }\n\n        public updateDeclarations(map: (item: PullDecl, context: any) => void , context: any) {\n            this.declarations.update(map, context);\n        }\n\n        // link methods\n        public addOutgoingLink(linkTo: PullSymbol, kind: SymbolLinkKind) {\n            var link = new PullSymbolLink(this, linkTo, kind);\n            this.outgoingLinks.addItem(link);\n            linkTo.incomingLinks.addItem(link);\n\n            return link;\n        }\n\n        public findOutgoingLinks(p: (psl: PullSymbolLink) => boolean) {\n            return <PullSymbolLink[]>this.outgoingLinks.find(p);\n        }\n\n        public findIncomingLinks(p: (psl: PullSymbolLink) => boolean) {\n            return <PullSymbolLink[]>this.incomingLinks.find(p);\n        }\n\n        public removeOutgoingLink(link: PullSymbolLink) {\n            if (link) {\n                this.outgoingLinks.remove(p => p === link);\n\n                if (link.end.incomingLinks) {\n                    link.end.incomingLinks.remove(p => p === link);\n                }\n            }\n        }\n\n        public updateOutgoingLinks(map: (item: PullSymbolLink, context: any) => void , context: any) {\n            if (this.outgoingLinks) {\n                this.outgoingLinks.update(map, context);\n            }\n        }\n\n        public updateIncomingLinks(map: (item: PullSymbolLink, context: any) => void , context: any) {\n            if (this.incomingLinks) {\n                this.incomingLinks.update(map, context);\n            }\n        }\n\n        // remove all outgoing, as well as incoming, links\n        public removeAllLinks() {\n            this.updateOutgoingLinks((item) => this.removeOutgoingLink(item), null);\n            this.updateIncomingLinks((item) => item.start.removeOutgoingLink(item), null);\n        }\n\n        public setContainer(containerSymbol: PullTypeSymbol) {\n            //containerSymbol.addOutgoingLink(this, relationshipKind);\n\n            var link = this.addOutgoingLink(containerSymbol, SymbolLinkKind.ContainedBy);\n            this.cachedContainerLink = link;\n\n            containerSymbol.addContainedByLink(link);\n        }\n\n        public getContainer(): PullTypeSymbol {\n            if (this.cachedContainerLink) {\n                return <PullTypeSymbol>this.cachedContainerLink.end;\n            }\n\n            var containerList = this.findOutgoingLinks(link => link.kind === SymbolLinkKind.ContainedBy);\n\n            if (containerList.length) {\n                this.cachedContainerLink = containerList[0];\n                return <PullTypeSymbol>this.cachedContainerLink.end;\n            }\n\n            return null;\n        }\n\n        public unsetContainer() {\n            if (this.cachedContainerLink) {\n                this.removeOutgoingLink(this.cachedContainerLink);\n            }\n            else {\n\n                // PULLTODO: If we can guarantee that no link will exist without caching, we won\'t need to search\n                var containerList = this.findOutgoingLinks(link => link.kind === SymbolLinkKind.ContainedBy);\n\n                if (containerList.length) {\n                    this.removeOutgoingLink(containerList[0]);\n                }\n            }\n\n            this.invalidate();\n        }\n\n        public setType(typeRef: PullTypeSymbol) {\n\n            // PULLTODO: Remove once we\'re certain that duplicate types can never be set\n            //if (this.cachedTypeLink) {\n            //    CompilerDiagnostics.Alert(\"Type \'\" + this.name + \"\' is having its type reset from \'\" + this.cachedTypeLink.end.getName() + \"\' to \'\" + typeRef.getName() + \"\'\");\n            //}\n\n            if (this.cachedTypeLink) {\n                this.unsetType();\n            }\n\n            var link = this.addOutgoingLink(typeRef, SymbolLinkKind.TypedAs);\n            this.cachedTypeLink = link;\n        }\n\n        public getType(): PullTypeSymbol {\n            if (this.cachedTypeLink) {\n                return <PullTypeSymbol>this.cachedTypeLink.end;\n            }\n\n            var typeList = this.findOutgoingLinks(link => link.kind === SymbolLinkKind.TypedAs);\n\n            if (typeList.length) {\n                this.cachedTypeLink = typeList[0];\n                return <PullTypeSymbol>this.cachedTypeLink.end;\n            }\n\n            return null;\n        }\n\n        public unsetType() {\n            var foundType = false;\n\n            if (this.cachedTypeLink) {\n                this.removeOutgoingLink(this.cachedTypeLink);\n                foundType = true;\n            }\n            else {\n                var typeList = this.findOutgoingLinks(link => link.kind === SymbolLinkKind.TypedAs);\n\n                if (typeList.length) {\n                    this.removeOutgoingLink(typeList[0]);\n                }\n\n                foundType = true;\n            }\n\n            if (foundType) {\n                this.invalidate();\n            }\n        }\n\n        public isTyped() {\n            return this.getType() != null;\n        }\n\n        public setResolved() {\n            this.hasBeenResolved = true;\n            this.inResolution = false;\n        }\n        public isResolved() { return this.hasBeenResolved; }\n\n        public startResolving() {\n            this.inResolution = true;\n        }\n        public isResolving() {\n            return this.inResolution;\n        }\n\n        public setUnresolved() {\n            this.hasBeenResolved = false;\n            this.isBound = false;\n            this.inResolution = false;\n        }\n\n        public invalidate() {\n\n            //this.removeOutgoingLink(this.cachedContainerLink);\n            //this.removeOutgoingLink(this.cachedTypeLink);\n\n            //this.cachedContainerLink = null;\n\n            this.docComments = null;\n\n            this.hasBeenResolved = false;\n            this.isBound = false;\n\n            // reset the errors for its decl\n            this.declarations.update((pullDecl: PullDecl) => pullDecl.resetErrors(), null);\n        }\n\n        public hasFlag(flag: PullElementFlags): boolean {\n            var declarations = this.getDeclarations();\n            for (var i = 0, n = declarations.length; i < n; i++) {\n                if ((declarations[i].getFlags() & flag) !== PullElementFlags.None) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public allDeclsHaveFlag(flag: PullElementFlags): boolean {\n            var declarations = this.getDeclarations();\n            for (var i = 0, n = declarations.length; i < n; i++) {\n                if (!((declarations[i].getFlags() & flag) !== PullElementFlags.None)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        public pathToRoot() {\n            var path: PullSymbol[] = [];\n            var node = this;\n            while (node) {\n                if (node.isType()) {\n                    var associatedContainerSymbol = (<PullTypeSymbol>node).getAssociatedContainerType();\n                    if (associatedContainerSymbol) {\n                        node = associatedContainerSymbol;\n                    }\n                }\n                path[path.length] = node;\n                node = node.getContainer();\n            }\n            return path;\n        }\n\n        public findCommonAncestorPath(b: PullSymbol): PullSymbol[] {\n            var aPath = this.pathToRoot();\n            if (aPath.length === 1) {\n                // Global symbol\n                return aPath;\n            }\n\n            var bPath: PullSymbol[];\n            if (b) {\n                bPath = b.pathToRoot();\n            } else {\n                return aPath;\n            }\n\n            var commonNodeIndex = -1;\n            for (var i = 0, aLen = aPath.length; i < aLen; i++) {\n                var aNode = aPath[i];\n                for (var j = 0, bLen = bPath.length; j < bLen; j++) {\n                    var bNode = bPath[j];\n                    if (aNode === bNode) {\n                        commonNodeIndex = i;\n                        break;\n                    }\n                }\n                if (commonNodeIndex >= 0) {\n                    break;\n                }\n            }\n\n            if (commonNodeIndex >= 0) {\n                return aPath.slice(0, commonNodeIndex);\n            }\n            else {\n                return aPath;\n            }\n        }\n\n        public toString(useConstraintInName?: boolean) {\n            var str = this.getNameAndTypeName();\n            return str;\n        }\n\n        private getPrettyNameInScope(scopeSymbol?: PullSymbol) {\n            var scopedName = this.getDisplayName(scopeSymbol);\n            if (this.getKind() === PullElementKind.DynamicModule) {\n                if (!isQuoted(scopedName) && scopedName === this.getDisplayName()) {\n                    return \"\";\n                }\n            }\n\n            return scopedName;\n        }\n\n        public getNamePartForFullName(scopeSymbol: PullSymbol) {\n            if (this.getKind() === PullElementKind.DynamicModule) {\n                return this.getPrettyNameInScope(scopeSymbol);\n            } else {\n                return this.getDisplayName(scopeSymbol, true);\n            }\n        }\n\n        public fullName(scopeSymbol?: PullSymbol) {\n            var path = this.pathToRoot();\n            var fullName = \"\";\n            for (var i = 1; i < path.length; i++) {\n                var scopedName = path[i].getNamePartForFullName(scopeSymbol);\n                if (!scopedName) {\n                    // Same file as dynamic module - do not include this name\n                    break;\n                }\n\n                if (scopedName === \"\") {\n                    // If the item does not have a name, stop enumarting them, e.g. Object literal\n                    break;\n                }\n\n                fullName = scopedName + \".\" + fullName;\n            }\n\n            fullName = fullName + this.getNamePartForFullName(scopeSymbol);\n            return fullName;\n        }\n\n        public getScopedName(scopeSymbol?: PullSymbol, useConstraintInName?: boolean) {\n            var path = this.findCommonAncestorPath(scopeSymbol);\n            var fullName = \"\";\n            for (var i = 1; i < path.length; i++) {\n                var kind = path[i].getKind();\n                if (kind === PullElementKind.Container) {\n                    fullName = path[i].getDisplayName() + \".\" + fullName;\n                } else if (kind === PullElementKind.DynamicModule) {\n                    var scopedName = path[i].getPrettyNameInScope(scopeSymbol);\n                    if (scopedName) {\n                        fullName = scopedName + \".\" + fullName;\n                    }\n                    break;\n                } else {\n                    break;\n                }\n            }\n            fullName = fullName + this.getDisplayName(scopeSymbol, useConstraintInName);\n            return fullName;\n        }\n\n        public getScopedNameEx(scopeSymbol?: PullSymbol, useConstraintInName?: boolean, getPrettyTypeName?: boolean, getTypeParamMarkerInfo?: boolean) {\n            var name = this.getScopedName(scopeSymbol, useConstraintInName);\n            return MemberName.create(name);\n        }\n\n        public getTypeName(scopeSymbol?: PullSymbol, getPrettyTypeName?: boolean) {\n            var memberName = this.getTypeNameEx(scopeSymbol, getPrettyTypeName);\n            return memberName.toString();\n        }\n\n        public getTypeNameEx(scopeSymbol?: PullSymbol, getPrettyTypeName?: boolean) {\n            var type = this.getType();\n            if (type) {\n                var memberName: MemberName = getPrettyTypeName ? this.getTypeNameForFunctionSignature(\"\", scopeSymbol, getPrettyTypeName) : null;\n                if (!memberName) {\n                    memberName = type.getScopedNameEx(scopeSymbol, false, getPrettyTypeName);\n                }\n\n                return memberName;\n            }\n            return MemberName.create(\"\");\n        }\n\n        private getTypeNameForFunctionSignature(prefix: string, scopeSymbol?: PullSymbol, getPrettyTypeName?: boolean) {\n            var type = this.getType();\n            if (type && !type.isNamedTypeSymbol() && this.declKind != PullElementKind.Property && this.declKind != PullElementKind.Variable && this.declKind != PullElementKind.Parameter) {\n                var signatures = type.getCallSignatures();\n                var typeName = new MemberNameArray();\n                var signatureName = PullSignatureSymbol.getSignaturesTypeNameEx(signatures, prefix, false, false, scopeSymbol, getPrettyTypeName);\n                typeName.addAll(signatureName);\n                return typeName;\n            }\n\n            return null;\n        }\n\n        public getNameAndTypeName(scopeSymbol?: PullSymbol) {\n            var nameAndTypeName = this.getNameAndTypeNameEx(scopeSymbol);\n            return nameAndTypeName.toString();\n        }\n\n        public getNameAndTypeNameEx(scopeSymbol?: PullSymbol) {\n            var type = this.getType();\n            var nameEx = this.getScopedNameEx(scopeSymbol);\n            if (type) {\n                var nameStr = nameEx.toString() + (this.getIsOptional() ? \"?\" : \"\");\n                var memberName: MemberName = this.getTypeNameForFunctionSignature(nameStr, scopeSymbol);\n                if (!memberName) {\n                    var typeNameEx = type.getScopedNameEx(scopeSymbol);\n                    memberName = MemberName.create(typeNameEx, nameStr + \": \", \"\");\n                }\n                return memberName;\n            }\n            return nameEx;\n        }\n\n        static getTypeParameterString(typars: PullTypeSymbol[], scopeSymbol?: PullSymbol) {\n            return PullSymbol.getTypeParameterStringEx(typars, scopeSymbol).toString();\n        }\n\n        static getTypeParameterStringEx(typeParameters: PullTypeSymbol[], scopeSymbol?: PullSymbol, getTypeParamMarkerInfo?: boolean) {\n            var builder = new MemberNameArray();\n            builder.prefix = \"\";\n\n            if (typeParameters && typeParameters.length) {\n                builder.add(MemberName.create(\"<\"));\n\n                for (var i = 0; i < typeParameters.length; i++) {\n                    if (i) {\n                        builder.add(MemberName.create(\", \"));\n                    }\n\n                    if (getTypeParamMarkerInfo) {\n                        builder.add(new MemberName());\n                    }\n\n                    builder.add(typeParameters[i].getScopedNameEx(scopeSymbol, true));\n\n                    if (getTypeParamMarkerInfo) {\n                        builder.add(new MemberName());\n                    }\n                }\n\n                builder.add(MemberName.create(\">\"));\n            }\n\n            return builder;\n        }\n\n        static getIsExternallyVisible(symbol: PullSymbol, fromIsExternallyVisibleSymbol: PullSymbol, inIsExternallyVisibleSymbols: PullSymbol[]) {\n            if (inIsExternallyVisibleSymbols) {\n                for (var i = 0; i < inIsExternallyVisibleSymbols.length; i++) {\n                    if (inIsExternallyVisibleSymbols[i] === symbol) {\n                        return true;\n                    }\n                }\n            } else {\n                inIsExternallyVisibleSymbols = [];\n            }\n\n            if (fromIsExternallyVisibleSymbol === symbol) {\n                return true;\n            }\n            inIsExternallyVisibleSymbols = inIsExternallyVisibleSymbols.concat(<any>fromIsExternallyVisibleSymbol);\n\n            return symbol.isExternallyVisible(inIsExternallyVisibleSymbols);\n        }\n\n        public isExternallyVisible(inIsExternallyVisibleSymbols?: PullSymbol[]): boolean {\n            // Primitive\n            var kind = this.getKind();\n            if (kind === PullElementKind.Primitive) {\n                return true;\n            }\n\n            // Type - use container to determine privacy info\n            if (this.isType()) {\n                var associatedContainerSymbol = (<PullTypeSymbol>this).getAssociatedContainerType();\n                if (associatedContainerSymbol) {\n                    return PullSymbol.getIsExternallyVisible(associatedContainerSymbol, this, inIsExternallyVisibleSymbols);\n                }\n            }\n\n            // Private member\n            if (this.hasFlag(PullElementFlags.Private)) {\n                return false;\n            }\n\n            // If the container for this symbol is null, then this symbol is visible\n            var container = this.getContainer();\n            if (container === null) {\n                return true;\n            }\n\n            // If non exported member and is not class properties and method, it is not visible\n            if (!this.hasFlag(PullElementFlags.Exported) && kind != PullElementKind.Property && kind != PullElementKind.Method) {\n                return false;\n            }\n\n            // Visible if parent is visible\n            return PullSymbol.getIsExternallyVisible(container, this, inIsExternallyVisibleSymbols);\n        }\n    }\n\n    export class PullExpressionSymbol extends PullSymbol {\n        contributingSymbols: PullSymbol[] = [];\n\n        constructor() {\n            super(\"\", PullElementKind.Expression);\n        }\n\n        public addContributingSymbol(symbol: PullSymbol) {\n            var link = this.addOutgoingLink(symbol, SymbolLinkKind.ContributesToExpression);\n\n            this.contributingSymbols[this.contributingSymbols.length] = symbol;\n        }\n\n        public getContributingSymbols() {\n            return this.contributingSymbols;\n        }\n    }\n\n    export class PullSignatureSymbol extends PullSymbol {\n        private parameterLinks: PullSymbolLink[] = null;\n        private typeParameterLinks: PullSymbolLink[] = null;\n\n        private returnTypeLink: PullSymbolLink = null;\n\n        private hasOptionalParam = false;\n        private nonOptionalParamCount = 0;\n\n        private hasVarArgs = false;\n\n        private specializationCache: any = {}\n\n        private memberTypeParameterNameCache: any = null;\n\n        private hasAGenericParameter = false;\n        private stringConstantOverload: boolean = undefined;\n\n        constructor(kind: PullElementKind) {\n            super(\"\", kind);\n        }\n\n        public isDefinition() { return false; }\n\n        public hasVariableParamList() { return this.hasVarArgs; }\n        public setHasVariableParamList() { this.hasVarArgs = true; }\n\n        public setHasGenericParameter() { this.hasAGenericParameter = true; }\n        public hasGenericParameter() { return this.hasAGenericParameter; }\n\n        public isGeneric() { return this.hasAGenericParameter || (this.typeParameterLinks && this.typeParameterLinks.length != 0); }\n\n        public addParameter(parameter: PullSymbol, isOptional = false) {\n            if (!this.parameterLinks) {\n                this.parameterLinks = [];\n            }\n\n            var link = this.addOutgoingLink(parameter, SymbolLinkKind.Parameter);\n            this.parameterLinks[this.parameterLinks.length] = link;\n            this.hasOptionalParam = isOptional;\n\n            if (!isOptional) {\n                this.nonOptionalParamCount++;\n            }\n        }\n\n        public addSpecialization(signature: PullSignatureSymbol, typeArguments: PullTypeSymbol[]) {\n            if (typeArguments && typeArguments.length) {\n                this.specializationCache[getIDForTypeSubstitutions(typeArguments)] = signature;\n            }\n        }\n\n        public getSpecialization(typeArguments): PullSignatureSymbol {\n\n            if (typeArguments) {\n                var sig = <PullSignatureSymbol>this.specializationCache[getIDForTypeSubstitutions(typeArguments)];\n\n                if (sig) {\n                    return sig;\n                }\n            }\n\n            return null;\n        }\n\n        public addTypeParameter(parameter: PullTypeParameterSymbol) {\n            if (!this.typeParameterLinks) {\n                this.typeParameterLinks = [];\n            }\n\n            if (!this.memberTypeParameterNameCache) {\n                this.memberTypeParameterNameCache = new BlockIntrinsics();\n            }\n\n            var link = this.addOutgoingLink(parameter, SymbolLinkKind.TypeParameter);\n            this.typeParameterLinks[this.typeParameterLinks.length] = link;\n\n            this.memberTypeParameterNameCache[link.end.getName()] = link.end;\n        }\n\n        public getNonOptionalParameterCount() { return this.nonOptionalParamCount; }\n\n        public setReturnType(returnType: PullTypeSymbol) {\n\n            if (returnType) {\n                if (this.returnTypeLink) {\n                    this.removeOutgoingLink(this.returnTypeLink);\n                }\n                this.returnTypeLink = this.addOutgoingLink(returnType, SymbolLinkKind.ReturnType);\n            }\n        }\n\n        public getParameters() {\n            var params: PullSymbol[] = [];\n\n            if (this.parameterLinks) {\n                for (var i = 0; i < this.parameterLinks.length; i++) {\n                    params[params.length] = this.parameterLinks[i].end;\n                }\n            }\n\n            return params;\n        }\n\n        public getTypeParameters(): PullTypeParameterSymbol[] {\n            var params: PullTypeParameterSymbol[] = [];\n\n            if (this.typeParameterLinks) {\n                for (var i = 0; i < this.typeParameterLinks.length; i++) {\n                    params[params.length] = <PullTypeParameterSymbol>this.typeParameterLinks[i].end;\n                }\n            }\n\n            return params;\n        }\n\n        public findTypeParameter(name: string): PullTypeParameterSymbol {\n            var memberSymbol: PullTypeParameterSymbol;\n\n            if (!this.memberTypeParameterNameCache) {\n                this.memberTypeParameterNameCache = new BlockIntrinsics();\n\n                if (this.typeParameterLinks) {\n                    for (var i = 0; i < this.typeParameterLinks.length; i++) {\n                        this.memberTypeParameterNameCache[this.typeParameterLinks[i].end.getName()] = this.typeParameterLinks[i].end;\n                    }\n                }\n            }\n\n            memberSymbol = this.memberTypeParameterNameCache[name];\n\n            return memberSymbol;\n        }\n\n        public removeParameter(parameterSymbol: PullSymbol) {\n            var paramLink: PullSymbolLink;\n\n            if (this.parameterLinks) {\n                for (var i = 0; i < this.parameterLinks.length; i++) {\n                    if (parameterSymbol === this.parameterLinks[i].end) {\n                        paramLink = this.parameterLinks[i];\n                        this.removeOutgoingLink(paramLink);\n                        break;\n                    }\n                }\n            }\n\n            this.invalidate();\n        }\n\n        public mimicSignature(signature: PullSignatureSymbol) {\n            // mimic type parameters\n            var typeParameters = signature.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n\n            if (typeParameters) {\n                for (var i = 0; i < typeParameters.length; i++) {\n                    //typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n                    //typeParameter.addDeclaration(typeParameters[i].getDeclarations()[0]);\n                    this.addTypeParameter(typeParameters[i]);\n                }\n            }\n\n            // mimic paremeteres (optionality, varargs)\n            var parameters = signature.getParameters();\n            var parameter: PullSymbol;\n\n            if (parameters) {\n                for (var j = 0; j < parameters.length; j++) {\n                    parameter = new PullSymbol(parameters[j].getName(), PullElementKind.Parameter);\n                    parameter.addDeclaration(parameters[j].getDeclarations()[0]);\n                    if (parameters[j].getIsOptional()) {\n                        parameter.setIsOptional();\n                    }\n                    if (parameters[j].getIsVarArg()) {\n                        parameter.setIsVarArg();\n                        this.setHasVariableParamList();\n                    }\n                    this.addParameter(parameter);\n                }\n            }\n\n            // Don\'t set the return type, since that will just lead to redundant\n            // calls to setReturnType when we re-resolve the signature for\n            // specialization\n\n            // var returnType = signature.getReturnType();\n\n            // if (returnType) {\n            //     this.setReturnType(returnType);\n            // }\n        }\n\n        public getReturnType(): PullTypeSymbol {\n            if (this.returnTypeLink) {\n                return <PullTypeSymbol> this.returnTypeLink.end;\n            }\n            else {\n                var rtl = this.findOutgoingLinks((p) => p.kind === SymbolLinkKind.ReturnType);\n\n                if (rtl.length) {\n                    this.returnTypeLink = rtl[0];\n                    return <PullTypeSymbol> this.returnTypeLink.end;\n                }\n\n                return null;\n            }\n        }\n\n        public parametersAreFixed(): boolean {\n\n            if (!this.isGeneric()) {\n                return true;\n            }\n\n            if (this.parameterLinks) {\n                var paramType: PullTypeSymbol;\n                for (var i = 0; i < this.parameterLinks.length; i++) {\n                    paramType = this.parameterLinks[i].end.getType();\n\n                    if (paramType && !paramType.isFixed()) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }\n\n        public invalidate() {\n\n            this.parameterLinks = this.findOutgoingLinks(psl => psl.kind === SymbolLinkKind.Parameter);\n            this.nonOptionalParamCount = 0;\n            this.hasOptionalParam = false;\n            this.hasAGenericParameter = false;\n            this.stringConstantOverload = undefined;\n\n            // re-compute non-optional arg count, etc\n            if (this.parameterLinks) {\n                for (var i = 0; i < this.parameterLinks.length; i++) {\n\n                    this.parameterLinks[i].end.invalidate();\n\n                    if (!this.parameterLinks[i].end.getIsOptional()) {\n                        this.nonOptionalParamCount++;\n                    }\n                    else {\n                        this.hasOptionalParam;\n                        break;\n                    }\n                }\n            }\n\n            super.invalidate();\n        }\n\n        public isStringConstantOverloadSignature() {\n            if (this.stringConstantOverload === undefined) {\n                var params = this.getParameters();\n                this.stringConstantOverload = false;\n                for (var i = 0; i < params.length; i++) {\n                    var paramType = params[i].getType();\n                    if (paramType && paramType.isPrimitive() && (<PullPrimitiveTypeSymbol>paramType).isStringConstant()) {\n                        this.stringConstantOverload = true;\n                    }\n                }\n            }\n\n            return this.stringConstantOverload;\n        }\n\n        static getSignatureTypeMemberName(candidateSignature: PullSignatureSymbol, signatures: PullSignatureSymbol[], scopeSymbol: PullSymbol) {\n            var allMemberNames = new MemberNameArray();\n            var signatureMemberName = PullSignatureSymbol.getSignaturesTypeNameEx(signatures, \"\", false, false, scopeSymbol, true, candidateSignature);\n            allMemberNames.addAll(signatureMemberName);\n            return allMemberNames;\n        }\n\n        static getSignaturesTypeNameEx(signatures: PullSignatureSymbol[], prefix: string, shortform: boolean, brackets: boolean, scopeSymbol?: PullSymbol, getPrettyTypeName?: boolean, candidateSignature?: PullSignatureSymbol) {\n            var result: MemberName[] = [];\n            var len = signatures.length;\n            if (!getPrettyTypeName && len > 1) {\n                shortform = false;\n            }\n\n            var foundDefinition = false;\n            if (candidateSignature && candidateSignature.isDefinition() && len > 1) {\n                // Overloaded signature with candidateSignature = definition - cannot be used.\n                candidateSignature = null;\n            }\n\n            for (var i = 0; i < len; i++) {\n                // the definition signature shouldn\'t be printed if there are overloads\n                if (len > 1 && signatures[i].isDefinition()) {\n                    foundDefinition = true;\n                    continue;\n                }\n\n                var signature = signatures[i];\n                if (getPrettyTypeName && candidateSignature) {\n                    signature = candidateSignature;\n                }\n\n                result.push(signature.getSignatureTypeNameEx(prefix, shortform, brackets, scopeSymbol));\n                if (getPrettyTypeName) {\n                    break;\n                }\n            }\n\n            if (getPrettyTypeName && result.length && len > 1) {\n                var lastMemberName = <MemberNameArray>result[result.length - 1];\n                for (var i = i + 1; i < len; i++) {\n                    if (signatures[i].isDefinition()) {\n                        foundDefinition = true;\n                        break;\n                    }\n                }\n                var overloadString = \" (+ \" + (foundDefinition ? len - 2 : len - 1) + \" overload(s))\";\n                lastMemberName.add(MemberName.create(overloadString));\n            }\n\n            return result;\n        }\n\n        public toString(useConstraintInName?: boolean) {\n            var s = this.getSignatureTypeNameEx(this.getScopedNameEx().toString(), false, false).toString();\n            return s;\n        }\n\n        public getSignatureTypeNameEx(prefix: string, shortform: boolean, brackets: boolean, scopeSymbol?: PullSymbol, getParamMarkerInfo?: boolean, getTypeParamMarkerInfo?: boolean) {\n            var typeParamterBuilder = new MemberNameArray();\n\n            typeParamterBuilder.add(PullSymbol.getTypeParameterStringEx(this.getTypeParameters(), scopeSymbol, getTypeParamMarkerInfo));\n\n            if (brackets) {\n                typeParamterBuilder.add(MemberName.create(\"[\"));\n            }\n            else {\n                typeParamterBuilder.add(MemberName.create(\"(\"));\n            }\n\n            var builder = new MemberNameArray();\n            builder.prefix = prefix;\n\n            if (getTypeParamMarkerInfo) {\n                builder.prefix = prefix;\n                builder.addAll(typeParamterBuilder.entries);\n            }\n            else {\n                builder.prefix = prefix + typeParamterBuilder.toString();\n            }\n\n            var params = this.getParameters();\n            var paramLen = params.length;\n            for (var i = 0; i < paramLen; i++) {\n                var paramType = params[i].getType();\n                var typeString = paramType ? \": \" : \"\";\n                var paramIsVarArg = params[i].getIsVarArg();\n                var varArgPrefix = paramIsVarArg ? \"...\" : \"\";\n                var optionalString = (!paramIsVarArg && params[i].getIsOptional()) ? \"?\" : \"\";\n                if (getParamMarkerInfo) {\n                    builder.add(new MemberName());\n                }\n                builder.add(MemberName.create(varArgPrefix + params[i].getScopedNameEx(scopeSymbol).toString() + optionalString + typeString));\n                if (paramType) {\n                    builder.add(paramType.getScopedNameEx(scopeSymbol));\n                }\n                if (getParamMarkerInfo) {\n                    builder.add(new MemberName());\n                }\n                if (i < paramLen - 1) {\n                    builder.add(MemberName.create(\", \"));\n                }\n            }\n\n            if (shortform) {\n                if (brackets) {\n                    builder.add(MemberName.create(\"] => \"));\n                }\n                else {\n                    builder.add(MemberName.create(\") => \"));\n                }\n            }\n            else {\n                if (brackets) {\n                    builder.add(MemberName.create(\"]: \"));\n                }\n                else {\n                    builder.add(MemberName.create(\"): \"));\n                }\n            }\n\n            var returnType = this.getReturnType();\n\n            if (returnType) {\n                builder.add(returnType.getScopedNameEx(scopeSymbol));\n            }\n            else {\n                builder.add(MemberName.create(\"any\"));\n            }\n\n            return builder;\n        }\n    }\n\n    export class PullTypeSymbol extends PullSymbol {\n        private memberLinks: PullSymbolLink[] = null;\n        private typeParameterLinks: PullSymbolLink[] = null;\n        private specializationLinks: PullSymbolLink[] = null;\n        private containedByLinks: PullSymbolLink[] = null;\n\n        private memberNameCache: any = null;\n        private memberTypeNameCache: any = null;\n        private memberTypeParameterNameCache: any = null;\n        private containedMemberCache: any = null;\n\n        private typeArguments: PullTypeSymbol[] = null;\n\n        private specializedTypeCache: any = null;\n\n        private memberCache: PullSymbol[] = null;\n\n        private implementedTypeLinks: PullSymbolLink[] = null;\n        private extendedTypeLinks: PullSymbolLink[] = null;\n\n        private callSignatureLinks: PullSymbolLink[] = null;\n        private constructSignatureLinks: PullSymbolLink[] = null;\n        private indexSignatureLinks: PullSymbolLink[] = null;\n\n        private arrayType: PullTypeSymbol = null;\n\n        private hasGenericSignature = false;\n        private hasGenericMember = false;\n        private knownBaseTypeCount = 0;\n        public getKnownBaseTypeCount() { return this.knownBaseTypeCount; }\n        public resetKnownBaseTypeCount() { this.knownBaseTypeCount = 0; }\n        public incrementKnownBaseCount() { this.knownBaseTypeCount++; }\n\n        private invalidatedSpecializations = false;\n\n        private associatedContainerTypeSymbol: PullTypeSymbol = null;\n\n        public isType() { return true; }\n        public isClass() { return false; }\n        public hasMembers() {\n            var thisHasMembers = this.memberLinks && this.memberLinks.length != 0;\n\n            if (thisHasMembers) {\n                return true;\n            }\n\n            var parents = this.getExtendedTypes();\n\n            for (var i = 0; i < parents.length; i++) {\n                if (parents[i].hasMembers()) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n        public isFunction() { return false; }\n        public isConstructor() { return false; }\n        public isTypeParameter() { return false; }\n        public isTypeVariable() { return false; }\n        public isError() { return false; }\n\n        public setHasGenericSignature() { this.hasGenericSignature = true; }\n        public getHasGenericSignature() { return this.hasGenericSignature; }\n\n        public setHasGenericMember() { this.hasGenericMember = true; }\n        public getHasGenericMember() { return this.hasGenericMember; }\n\n        public setAssociatedContainerType(type: PullTypeSymbol) {\n            this.associatedContainerTypeSymbol = type;\n        }\n\n        public getAssociatedContainerType() {\n            return this.associatedContainerTypeSymbol;\n        }\n\n        public getType() { return this; }\n\n        public getArrayType() { return this.arrayType; }\n\n        public getElementType(): PullTypeSymbol {\n            var arrayOfLinks = this.findOutgoingLinks(link => link.kind === SymbolLinkKind.ArrayOf);\n\n            if (arrayOfLinks.length) {\n                return <PullTypeSymbol>arrayOfLinks[0].end;\n            }\n\n            return null;\n        }\n        public setArrayType(arrayType: PullTypeSymbol) {\n            this.arrayType = arrayType;\n\n            arrayType.addOutgoingLink(this, SymbolLinkKind.ArrayOf);\n        }\n\n        public addContainedByLink(containedByLink: PullSymbolLink) {\n            if (!this.containedByLinks) {\n                this.containedByLinks = [];\n            }\n\n            if (!this.containedMemberCache) {\n                this.containedMemberCache = new BlockIntrinsics();\n            }\n\n            this.containedByLinks[this.containedByLinks.length] = containedByLink;\n            this.containedMemberCache[containedByLink.start.getName()] = containedByLink.start;\n        }\n\n        public findContainedMember(name: string): PullSymbol {\n\n            if (!this.containedByLinks) {\n                this.containedByLinks = this.findIncomingLinks(psl => psl.kind === SymbolLinkKind.ContainedBy);\n                this.containedMemberCache = new BlockIntrinsics();\n\n                for (var i = 0; i < this.containedByLinks.length; i++) {\n                    this.containedMemberCache[this.containedByLinks[i].start.getName()] = this.containedByLinks[i].start;\n                }\n            }\n\n            return this.containedMemberCache[name];\n        }\n\n        public addMember(memberSymbol: PullSymbol, linkKind: SymbolLinkKind, doNotChangeContainer?: boolean) {\n\n            var link = this.addOutgoingLink(memberSymbol, linkKind);\n\n            if (!doNotChangeContainer) {\n                memberSymbol.setContainer(this);\n            }\n\n            if (!this.memberLinks) {\n                this.memberLinks = [];\n            }\n\n            if (!this.memberCache || !this.memberNameCache) {\n                this.populateMemberCache();\n            }\n\n            if (!memberSymbol.isType()) {\n                this.memberLinks[this.memberLinks.length] = link;\n\n                this.memberCache[this.memberCache.length] = memberSymbol;\n\n                if (!this.memberNameCache) {\n                    this.populateMemberCache();\n                }\n                this.memberNameCache[memberSymbol.getName()] = memberSymbol;\n            }\n            else {\n                if ((<PullTypeSymbol>memberSymbol).isTypeParameter()) {\n                    if (!this.typeParameterLinks) {\n                        this.typeParameterLinks = [];\n                    }\n                    if (!this.memberTypeParameterNameCache) {\n                        this.memberTypeParameterNameCache = new BlockIntrinsics();\n                    }\n                    this.typeParameterLinks[this.typeParameterLinks.length] = link;\n                    this.memberTypeParameterNameCache[memberSymbol.getName()] = memberSymbol;\n                }\n                else {\n                    if (!this.memberTypeNameCache) {\n                        this.memberTypeNameCache = new BlockIntrinsics();\n                    }\n                    this.memberLinks[this.memberLinks.length] = link;\n                    this.memberTypeNameCache[memberSymbol.getName()] = memberSymbol;\n                    this.memberCache[this.memberCache.length] = memberSymbol;\n                }\n            }\n        }\n\n        public removeMember(memberSymbol: PullSymbol) {\n            var memberLink: PullSymbolLink;\n            var child: PullSymbol;\n\n            var links = (memberSymbol.isType() && (<PullTypeSymbol>memberSymbol).isTypeParameter()) ? this.typeParameterLinks : this.memberLinks;\n\n            if (links) {\n                for (var i = 0; i < links.length; i++) {\n                    if (memberSymbol === links[i].end) {\n                        memberLink = links[i];\n                        child = memberLink.end;\n                        child.unsetContainer();\n                        this.removeOutgoingLink(memberLink);\n                        break;\n                    }\n                }\n            }\n\n            this.invalidate();\n        }\n\n        public getMembers(): PullSymbol[] {\n\n            if (this.memberCache) {\n                return this.memberCache;\n            }\n            else {\n                var members: PullSymbol[] = [];\n\n                if (this.memberLinks) {\n                    for (var i = 0; i < this.memberLinks.length; i++) {\n                        members[members.length] = this.memberLinks[i].end;\n                    }\n                }\n\n                if (members.length) {\n                    this.memberCache = members;\n                }\n\n                return members;\n            }\n        }\n\n        public getTypeParameters(): PullTypeParameterSymbol[] {\n            var members: PullTypeParameterSymbol[] = [];\n\n            if (this.typeParameterLinks) {\n                for (var i = 0; i < this.typeParameterLinks.length; i++) {\n                    members[members.length] = <PullTypeParameterSymbol>this.typeParameterLinks[i].end;\n                }\n            }\n\n            return members;\n        }\n\n        public isGeneric(): boolean {\n            return (this.typeParameterLinks && this.typeParameterLinks.length != 0) ||\n                this.hasGenericSignature ||\n                this.hasGenericMember ||\n                (this.typeArguments && this.typeArguments.length);\n        }\n\n        public isFixed() {\n\n            if (!this.isGeneric()) {\n                return true;\n            }\n\n            if (this.typeParameterLinks && this.typeArguments) {\n                if (!this.typeArguments.length || this.typeArguments.length < this.typeParameterLinks.length) {\n                    return false;\n                }\n\n                for (var i = 0; i < this.typeArguments.length; i++) {\n                    if (!this.typeArguments[i].isFixed()) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            return false;\n        }\n\n        public addSpecialization(specializedVersionOfThisType: PullTypeSymbol, substitutingTypes: PullTypeSymbol[]): void {\n\n            if (!substitutingTypes || !substitutingTypes.length) {\n                return;\n            }\n\n            if (!this.specializedTypeCache) {\n                this.specializedTypeCache = new BlockIntrinsics();\n            }\n\n            if (!this.specializationLinks) {\n                this.specializationLinks = [];\n            }\n\n            this.specializationLinks[this.specializationLinks.length] = this.addOutgoingLink(specializedVersionOfThisType, SymbolLinkKind.SpecializedTo);\n\n            this.specializedTypeCache[getIDForTypeSubstitutions(substitutingTypes)] = specializedVersionOfThisType;\n        }\n\n        public getSpecialization(substitutingTypes: PullTypeSymbol[]): PullTypeSymbol {\n\n            if (!substitutingTypes || !substitutingTypes.length) {\n                return null;\n            }\n\n            if (!this.specializedTypeCache) {\n                this.specializedTypeCache = new BlockIntrinsics();\n\n                return null;\n            }\n\n            var specialization = <PullTypeSymbol>this.specializedTypeCache[getIDForTypeSubstitutions(substitutingTypes)];\n\n            if (!specialization) {\n                return null;\n            }\n\n            return specialization;\n        }\n\n        public getKnownSpecializations(): PullTypeSymbol[] {\n            var specializations: PullTypeSymbol[] = [];\n\n            if (this.specializedTypeCache) {\n                for (var specializationID in this.specializedTypeCache) {\n                    if (this.specializedTypeCache[specializationID]) {\n                        specializations[specializations.length] = this.specializedTypeCache[specializationID];\n                    }\n                }\n            }\n\n            return specializations;\n        }\n\n        public invalidateSpecializations() {\n\n            if (this.invalidatedSpecializations) {\n                return;\n            }\n\n            var specializations = this.getKnownSpecializations();\n\n            for (var i = 0; i < specializations.length; i++) {\n                specializations[i].invalidate();\n            }\n\n            if (this.specializationLinks && this.specializationLinks.length) {\n                \n                for (var i = 0; i < this.specializationLinks.length; i++) {\n                    this.removeOutgoingLink(this.specializationLinks[i]);\n                }\n            }\n\n            this.specializedTypeCache = null;\n\n            this.invalidatedSpecializations = true;\n        }\n\n        public removeSpecialization(specializationType: PullTypeSymbol) {\n            \n            if (this.specializationLinks && this.specializationLinks.length) {\n                for (var i = 0; i < this.specializationLinks.length; i++) {\n                    if (this.specializationLinks[i].end === specializationType) {\n                        this.removeOutgoingLink(this.specializationLinks[i]);\n                        break;\n                    }\n                }\n            }\n\n            if (this.specializedTypeCache) {\n\n                for (var specializationID in this.specializedTypeCache) {\n                    if (this.specializedTypeCache[specializationID] === specializationType) {\n                        this.specializedTypeCache[specializationID] = undefined;\n                    }\n                }\n            }\n        }\n\n        public getTypeArguments() { return this.typeArguments; }\n        public setTypeArguments(typeArgs: PullTypeSymbol[]) { this.typeArguments = typeArgs; }\n\n        public addCallSignature(callSignature: PullSignatureSymbol) {\n\n            if (!this.callSignatureLinks) {\n                this.callSignatureLinks = [];\n            }\n\n            var link = this.addOutgoingLink(callSignature, SymbolLinkKind.CallSignature);\n            this.callSignatureLinks[this.callSignatureLinks.length] = link;\n\n            if (callSignature.isGeneric()) {\n                this.hasGenericSignature = true;\n            }\n        }\n\n        public addCallSignatures(callSignatures: PullSignatureSymbol[]) {\n\n            if (!this.callSignatureLinks) {\n                this.callSignatureLinks = [];\n            }\n\n            for (var i = 0; i < callSignatures.length; i++) {\n                this.addCallSignature(callSignatures[i]);\n            }\n        }\n\n        public addConstructSignature(constructSignature: PullSignatureSymbol) {\n\n            if (!this.constructSignatureLinks) {\n                this.constructSignatureLinks = [];\n            }\n\n            var link = this.addOutgoingLink(constructSignature, SymbolLinkKind.ConstructSignature);\n            this.constructSignatureLinks[this.constructSignatureLinks.length] = link;\n\n            if (constructSignature.isGeneric()) {\n                this.hasGenericSignature = true;\n            }\n        }\n\n        public addConstructSignatures(constructSignatures: PullSignatureSymbol[]) {\n\n            if (!this.constructSignatureLinks) {\n                this.constructSignatureLinks = [];\n            }\n\n            for (var i = 0; i < constructSignatures.length; i++) {\n                this.addConstructSignature(constructSignatures[i]);\n            }\n        }\n\n        public addIndexSignature(indexSignature: PullSignatureSymbol) {\n            if (!this.indexSignatureLinks) {\n                this.indexSignatureLinks = [];\n            }\n\n            var link = this.addOutgoingLink(indexSignature, SymbolLinkKind.IndexSignature);\n            this.indexSignatureLinks[this.indexSignatureLinks.length] = link;\n\n            if (indexSignature.isGeneric()) {\n                this.hasGenericSignature = true;\n            }\n        }\n\n        public addIndexSignatures(indexSignatures: PullSignatureSymbol[]) {\n            if (!this.indexSignatureLinks) {\n                this.indexSignatureLinks = [];\n            }\n\n            for (var i = 0; i < indexSignatures.length; i++) {\n                this.addIndexSignature(indexSignatures[i]);\n            }\n        }\n\n        public hasOwnCallSignatures() { return !!this.callSignatureLinks; }\n\n        public getCallSignatures(): PullSignatureSymbol[] {\n            var members: PullSymbol[] = [];\n\n            if (this.callSignatureLinks) {\n                for (var i = 0; i < this.callSignatureLinks.length; i++) {\n                    members[members.length] = this.callSignatureLinks[i].end;\n                }\n            }\n\n            var extendedTypes = this.getExtendedTypes();\n\n            for (var i = 0; i < extendedTypes.length; i++) {\n                if (extendedTypes[i].hasBase(this)) {\n                    continue;\n                }\n                members = members.concat(extendedTypes[i].getCallSignatures());\n            }\n\n            return <PullSignatureSymbol[]>members;\n        }\n\n        public hasOwnConstructSignatures() { return !!this.constructSignatureLinks; }\n\n        public getConstructSignatures(): PullSignatureSymbol[] {\n            var members: PullSymbol[] = [];\n\n            if (this.constructSignatureLinks) {\n                for (var i = 0; i < this.constructSignatureLinks.length; i++) {\n                    members[members.length] = this.constructSignatureLinks[i].end;\n                }\n            }\n\n            // If it\'s a constructor type, we don\'t inherit construct signatures\n            // (E.g., we\'d be looking at the statics on a class, where we want\n            // to inherit members, but not construct signatures\n            if (!(this.getKind() == PullElementKind.ConstructorType)) {\n                var extendedTypes = this.getExtendedTypes();\n\n                for (var i = 0; i < extendedTypes.length; i++) {\n                    if (extendedTypes[i].hasBase(this)) {\n                        continue;\n                    }\n                    members = members.concat(extendedTypes[i].getConstructSignatures());\n                }\n            }\n\n            return <PullSignatureSymbol[]>members;\n        }\n\n        public hasOwnIndexSignatures() { return !!this.indexSignatureLinks; }\n\n        public getIndexSignatures(): PullSignatureSymbol[] {\n            var members: PullSymbol[] = [];\n\n            if (this.indexSignatureLinks) {\n                for (var i = 0; i < this.indexSignatureLinks.length; i++) {\n                    members[members.length] = this.indexSignatureLinks[i].end;\n                }\n            }\n            var extendedTypes = this.getExtendedTypes();\n\n            for (var i = 0; i < extendedTypes.length; i++) {\n                if (extendedTypes[i].hasBase(this)) {\n                    continue;\n                }\n                members = members.concat(extendedTypes[i].getIndexSignatures());\n            }\n\n            return <PullSignatureSymbol[]>members;\n        }\n\n        public removeCallSignature(signature: PullSignatureSymbol, invalidate = true) {\n            var signatureLink: PullSymbolLink;\n\n            if (this.callSignatureLinks) {\n                for (var i = 0; i < this.callSignatureLinks.length; i++) {\n                    if (signature === this.callSignatureLinks[i].end) {\n                        signatureLink = this.callSignatureLinks[i];\n                        this.removeOutgoingLink(signatureLink);\n                        break;\n                    }\n                }\n            }\n\n            if (invalidate) {\n                this.invalidate();\n            }\n        }\n\n        public recomputeCallSignatures() {\n            this.callSignatureLinks = this.findOutgoingLinks(psl => psl.kind === SymbolLinkKind.CallSignature);\n        }\n\n        public removeConstructSignature(signature: PullSignatureSymbol, invalidate = true) {\n            var signatureLink: PullSymbolLink;\n\n            if (this.constructSignatureLinks) {\n                for (var i = 0; i < this.constructSignatureLinks.length; i++) {\n                    if (signature === this.constructSignatureLinks[i].end) {\n                        signatureLink = this.constructSignatureLinks[i];\n                        this.removeOutgoingLink(signatureLink);\n                        break;\n                    }\n                }\n            }\n\n            if (invalidate) {\n                this.invalidate();\n            }\n        }\n\n        public recomputeConstructSignatures() {\n            this.constructSignatureLinks = this.findOutgoingLinks(psl => psl.kind === SymbolLinkKind.ConstructSignature);\n        }\n\n        public removeIndexSignature(signature: PullSignatureSymbol, invalidate = true) {\n            var signatureLink: PullSymbolLink;\n\n            if (this.indexSignatureLinks) {\n                for (var i = 0; i < this.indexSignatureLinks.length; i++) {\n                    if (signature === this.indexSignatureLinks[i].end) {\n                        signatureLink = this.indexSignatureLinks[i];\n                        this.removeOutgoingLink(signatureLink);\n                        break;\n                    }\n                }\n            }\n\n            if (invalidate) {\n                this.invalidate();\n            }\n        }\n\n        public recomputeIndexSignatures() {\n            this.indexSignatureLinks = this.findOutgoingLinks(psl => psl.kind === SymbolLinkKind.IndexSignature);\n        }\n\n        public addImplementedType(interfaceType: PullTypeSymbol) {\n            if (!this.implementedTypeLinks) {\n                this.implementedTypeLinks = [];\n            }\n\n            var link = this.addOutgoingLink(interfaceType, SymbolLinkKind.Implements);\n            this.implementedTypeLinks[this.implementedTypeLinks.length] = link;\n        }\n\n        public getImplementedTypes(): PullTypeSymbol[] {\n            var members: PullSymbol[] = [];\n\n            if (this.implementedTypeLinks) {\n                for (var i = 0; i < this.implementedTypeLinks.length; i++) {\n                    members[members.length] = this.implementedTypeLinks[i].end;\n                }\n            }\n\n            return <PullTypeSymbol[]>members;\n        }\n\n        public removeImplementedType(implementedType: PullTypeSymbol) {\n            var typeLink: PullSymbolLink;\n\n            if (this.implementedTypeLinks) {\n                for (var i = 0; i < this.implementedTypeLinks.length; i++) {\n                    if (implementedType === this.implementedTypeLinks[i].end) {\n                        typeLink = this.implementedTypeLinks[i];\n                        this.removeOutgoingLink(typeLink);\n                        break;\n                    }\n                }\n            }\n\n            this.invalidate();\n        }\n\n        public addExtendedType(extendedType: PullTypeSymbol) {\n            if (!this.extendedTypeLinks) {\n                this.extendedTypeLinks = [];\n            }\n\n            var link = this.addOutgoingLink(extendedType, SymbolLinkKind.Extends);\n            this.extendedTypeLinks[this.extendedTypeLinks.length] = link;\n\n            // var parentMembers = extendedType.getMembers();\n\n            // PULLTODO: Restrict member list to public properties only\n            // for (var i = 0; i < parentMembers.length; i++) {\n            //     this.addMember(parentMembers[i], SymbolLinkKind.PublicMember);\n            // }\n        }\n\n        public getExtendedTypes(): PullTypeSymbol[] {\n            var members: PullSymbol[] = [];\n\n            if (this.extendedTypeLinks) {\n                for (var i = 0; i < this.extendedTypeLinks.length; i++) {\n                    members[members.length] = this.extendedTypeLinks[i].end;\n                }\n            }\n\n            return <PullTypeSymbol[]>members;\n        }\n\n        public hasBase(potentialBase: PullTypeSymbol) {\n\n            if (this === potentialBase) {\n                return true;\n            }\n\n            var extendedTypes = this.getExtendedTypes();\n\n            for (var i = 0; i < extendedTypes.length; i++) {\n                if (extendedTypes[i].hasBase(potentialBase)) {\n                    return true;\n                }\n            }\n\n            var implementedTypes = this.getImplementedTypes();\n\n            for (var i = 0; i < implementedTypes.length; i++) {\n                if (implementedTypes[i].hasBase(potentialBase)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public isValidBaseKind(baseType: PullTypeSymbol, isExtendedType: boolean) {\n            // Error type symbol is invalid base kind\n            if (baseType.isError()) {\n                return false;\n            }\n\n            var thisIsClass = this.isClass();\n            if (isExtendedType) {\n                if (thisIsClass) {\n                    // Class extending non class Type is invalid\n                    return baseType.getKind() === PullElementKind.Class;\n                }\n            } else {\n                if (!thisIsClass) {\n                    // Interface implementing baseType is invalid\n                    return false;\n                }\n            }\n\n            // Interface extending non interface or class \n            // or class implementing non interface or class - are invalid\n            return !!(baseType.getKind() & (PullElementKind.Interface | PullElementKind.Class | PullElementKind.Array));\n        }\n\n        public removeExtendedType(extendedType: PullTypeSymbol) {\n            var typeLink: PullSymbolLink;\n\n            if (this.extendedTypeLinks) {\n                for (var i = 0; i < this.extendedTypeLinks.length; i++) {\n                    if (extendedType === this.extendedTypeLinks[i].end) {\n                        typeLink = this.extendedTypeLinks[i];\n                        this.removeOutgoingLink(typeLink);\n                        break;\n                    }\n                }\n            }\n\n            this.invalidate();\n        }\n\n        public findMember(name: string, lookInParent = true): PullSymbol {\n            var memberSymbol: PullSymbol;\n\n            if (!this.memberNameCache) {\n                this.populateMemberCache();\n            }\n\n            memberSymbol = this.memberNameCache[name];\n\n            if (!lookInParent) {\n                return memberSymbol;\n            }\n            else if (memberSymbol) {\n                return memberSymbol;\n            }\n\n            // check parents\n            if (!memberSymbol && this.extendedTypeLinks) {\n\n                for (var i = 0; i < this.extendedTypeLinks.length; i++) {\n                    memberSymbol = (<PullTypeSymbol>this.extendedTypeLinks[i].end).findMember(name);\n\n                    if (memberSymbol) {\n                        return memberSymbol;\n                    }\n                }\n            }\n\n            // when all else fails, look for a nested type name\n            return this.findNestedType(name);\n        }\n\n        public findNestedType(name: string, kind = PullElementKind.None): PullTypeSymbol {\n            var memberSymbol: PullTypeSymbol;\n\n            if (!this.memberTypeNameCache) {\n                this.populateMemberTypeCache();\n            }\n\n            memberSymbol = this.memberTypeNameCache[name];\n\n            if (memberSymbol && kind != PullElementKind.None) {\n                memberSymbol = ((memberSymbol.getKind() & kind) != 0) ? memberSymbol : null;\n            }\n\n            return memberSymbol;\n        }\n\n        private populateMemberCache() {\n            if (!this.memberNameCache || !this.memberCache) {\n                this.memberNameCache = new BlockIntrinsics();\n                this.memberCache = [];\n\n                if (this.memberLinks) {\n                    for (var i = 0; i < this.memberLinks.length; i++) {\n                        this.memberNameCache[this.memberLinks[i].end.getName()] = this.memberLinks[i].end;\n                        this.memberCache[this.memberCache.length] = this.memberLinks[i].end;\n                    }\n                }\n            }\n        }\n\n        private populateMemberTypeCache() {\n            if (!this.memberTypeNameCache) {\n                this.memberTypeNameCache = new BlockIntrinsics();\n\n                var setAll = false;\n\n                if (!this.memberCache) {\n                    this.memberCache = [];\n                    this.memberNameCache = new BlockIntrinsics();\n                    setAll = true;\n                }\n\n                if (this.memberLinks) {\n                    for (var i = 0; i < this.memberLinks.length; i++) {\n                        if (this.memberLinks[i].end.isType()) {\n                            this.memberTypeNameCache[this.memberLinks[i].end.getName()] = this.memberLinks[i].end;\n                            this.memberCache[this.memberCache.length] = this.memberLinks[i].end;\n                        }\n                        else if (setAll) {\n                            this.memberNameCache[this.memberLinks[i].end.getName()] = this.memberLinks[i].end;\n                            this.memberCache[this.memberCache.length] = this.memberLinks[i].end;\n                        }\n                    }\n                }\n            }\n        }\n\n        public getAllMembers(searchDeclKind: PullElementKind, includePrivate: boolean): PullSymbol[] {\n\n            var allMembers: PullSymbol[] = [];\n            var i = 0;\n            var j = 0;\n            var m = 0;\n            var n = 0;\n\n            // Update the cache id needed\n            if (!this.memberCache) {\n                this.populateMemberCache();\n            }\n            // Update the cache id needed\n            if (!this.memberTypeNameCache) {\n                this.populateMemberTypeCache();\n            }\n\n            if (!this.memberNameCache) {\n                this.populateMemberCache();\n            }\n\n            // Add members\n            for (var i = 0 , n = this.memberCache.length; i < n; i++) {\n                var member = this.memberCache[i];\n                if ((member.getKind() & searchDeclKind) && (includePrivate || !member.hasFlag(PullElementFlags.Private))) {\n                    allMembers[allMembers.length] = member;\n                }\n            }\n\n            // Add parent members\n            if (this.extendedTypeLinks) {\n\n                for (var i = 0 , n = this.extendedTypeLinks.length; i < n; i++) {\n                    var extendedMembers = (<PullTypeSymbol>this.extendedTypeLinks[i].end).getAllMembers(searchDeclKind, includePrivate);\n\n                    for (var j = 0 , m = extendedMembers.length; j < m; j++) {\n                        var extendedMember = extendedMembers[j];\n                        if (!this.memberNameCache[extendedMember.getName()]) {\n                            allMembers[allMembers.length] = extendedMember;\n                        }\n                    }\n                }\n            }\n\n            return allMembers;\n        }\n\n        public findTypeParameter(name: string): PullTypeParameterSymbol {\n            var memberSymbol: PullTypeParameterSymbol;\n\n            if (!this.memberTypeParameterNameCache) {\n                this.memberTypeParameterNameCache = new BlockIntrinsics();\n\n                if (this.typeParameterLinks) {\n                    for (var i = 0; i < this.typeParameterLinks.length; i++) {\n                        this.memberTypeParameterNameCache[this.typeParameterLinks[i].end.getName()] = this.typeParameterLinks[i].end;\n                    }\n                }\n            }\n\n            memberSymbol = this.memberTypeParameterNameCache[name];\n\n            return memberSymbol;\n        }\n\n        public cleanTypeParameters() {\n            if (this.typeParameterLinks) {\n                for (var i = 0; i < this.typeParameterLinks.length; i++) {\n                    this.removeOutgoingLink(this.typeParameterLinks[i]);\n                }\n            }\n\n            this.typeParameterLinks = null;\n            this.memberTypeParameterNameCache = null;\n        }\n\n        public setResolved() {\n            this.invalidatedSpecializations = true;\n            super.setResolved();\n        }\n\n        public invalidate() {\n\n            this.memberNameCache = null;\n            this.memberCache = null;\n            this.memberTypeNameCache = null;\n            this.containedMemberCache = null;\n\n            this.invalidatedSpecializations = false;\n\n            this.containedByLinks = null;\n\n            this.memberLinks = this.findOutgoingLinks(psl => psl.kind === SymbolLinkKind.PrivateMember ||\n            psl.kind === SymbolLinkKind.PublicMember);\n\n            this.typeParameterLinks = this.findOutgoingLinks(psl => psl.kind === SymbolLinkKind.TypeParameter);\n\n            this.callSignatureLinks = this.findOutgoingLinks(psl => psl.kind === SymbolLinkKind.CallSignature);\n\n            this.constructSignatureLinks = this.findOutgoingLinks(psl => psl.kind === SymbolLinkKind.ConstructSignature);\n\n            this.indexSignatureLinks = this.findOutgoingLinks(psl => psl.kind === SymbolLinkKind.IndexSignature);\n\n            this.implementedTypeLinks = this.findOutgoingLinks(psl => psl.kind === SymbolLinkKind.Implements);\n\n            this.extendedTypeLinks = this.findOutgoingLinks(psl => psl.kind === SymbolLinkKind.Extends);\n            \n            this.knownBaseTypeCount = 0;\n\n            super.invalidate();\n        }\n\n        public getNamePartForFullName(scopeSymbol: PullSymbol) {\n            var name = super.getNamePartForFullName(scopeSymbol);\n\n            var typars = this.getTypeArguments();\n            if (!typars || !typars.length) {\n                typars = this.getTypeParameters();\n            }\n\n            var typarString = PullSymbol.getTypeParameterString(typars, this);\n            return name + typarString;\n        }\n\n        public getScopedName(scopeSymbol?: PullSymbol, useConstraintInName?: boolean): string {\n            return this.getScopedNameEx(scopeSymbol, useConstraintInName).toString();\n        }\n\n        public isNamedTypeSymbol() {\n            var kind = this.getKind();\n            if (kind === PullElementKind.Primitive || // primitives\n            kind === PullElementKind.Class || // class\n            kind === PullElementKind.Container || // module\n            kind === PullElementKind.DynamicModule || // dynamic module\n            kind === PullElementKind.TypeAlias || // dynamic module\n            kind === PullElementKind.Enum || // enum\n            kind === PullElementKind.TypeParameter || //TypeParameter\n            ((kind === PullElementKind.Interface || kind === PullElementKind.ObjectType) && this.getName() != \"\")) {\n                return true;\n            }\n\n            return false;\n        }\n\n        public toString(useConstraintInName?: boolean) {\n            var s = this.getScopedNameEx(null, useConstraintInName).toString();\n            return s;\n        }\n\n        public getScopedNameEx(scopeSymbol?: PullSymbol, useConstraintInName?: boolean, getPrettyTypeName?: boolean, getTypeParamMarkerInfo?: boolean) {\n            if (!this.isNamedTypeSymbol()) {\n                return this.getMemberTypeNameEx(true, scopeSymbol, getPrettyTypeName);\n            }\n\n            var builder = new MemberNameArray();\n            builder.prefix = super.getScopedName(scopeSymbol, useConstraintInName);\n\n            var typars = this.getTypeArguments();\n            if (!typars || !typars.length) {\n                typars = this.getTypeParameters();\n            }\n\n            builder.add(PullSymbol.getTypeParameterStringEx(typars, this, getTypeParamMarkerInfo));\n\n            return builder;\n        }\n\n        public hasOnlyOverloadCallSignatures() {\n            var members = this.getMembers();\n            var callSignatures = this.getCallSignatures();\n            var constructSignatures = this.getConstructSignatures();\n            return members.length === 0 && constructSignatures.length === 0 && callSignatures.length > 1;\n        }\n\n        public getMemberTypeNameEx(topLevel: boolean, scopeSymbol?: PullSymbol, getPrettyTypeName?: boolean): MemberName {\n            var members = this.getMembers();\n            var callSignatures = this.getCallSignatures();\n            var constructSignatures = this.getConstructSignatures();\n            var indexSignatures = this.getIndexSignatures();\n\n            if (members.length > 0 || callSignatures.length > 0 || constructSignatures.length > 0 || indexSignatures.length > 0) {\n                var allMemberNames = new MemberNameArray();\n                var curlies = !topLevel || indexSignatures.length != 0;\n                var delim = \"; \";\n                for (var i = 0; i < members.length; i++) {\n                    var memberTypeName = members[i].getNameAndTypeNameEx(scopeSymbol);\n\n                    if (memberTypeName.isArray() && (<MemberNameArray>memberTypeName).delim === delim) {\n                        allMemberNames.addAll((<MemberNameArray>memberTypeName).entries);\n                    } else {\n                        allMemberNames.add(memberTypeName);\n                    }\n                    curlies = true;\n                }\n\n                // Use pretty Function overload signature if this is just a call overload\n                var getPrettyFunctionOverload = getPrettyTypeName && !curlies && this.hasOnlyOverloadCallSignatures();\n\n                var signatureCount = callSignatures.length + constructSignatures.length + indexSignatures.length;\n                if (signatureCount != 0 || members.length != 0) {\n                    var useShortFormSignature = !curlies && (signatureCount === 1);\n                    var signatureMemberName: MemberName[];\n\n                    if (callSignatures.length > 0) {\n                        signatureMemberName =\n                        PullSignatureSymbol.getSignaturesTypeNameEx(callSignatures, \"\", useShortFormSignature, false, scopeSymbol, getPrettyFunctionOverload);\n                        allMemberNames.addAll(signatureMemberName);\n                    }\n\n                    if (constructSignatures.length > 0) {\n                        signatureMemberName =\n                        PullSignatureSymbol.getSignaturesTypeNameEx(constructSignatures, \"new\", useShortFormSignature, false, scopeSymbol);\n                        allMemberNames.addAll(signatureMemberName);\n                    }\n\n                    if (indexSignatures.length > 0) {\n                        signatureMemberName =\n                        PullSignatureSymbol.getSignaturesTypeNameEx(indexSignatures, \"\", useShortFormSignature, true, scopeSymbol);\n                        allMemberNames.addAll(signatureMemberName);\n                    }\n\n                    if ((curlies) || (!getPrettyFunctionOverload && (signatureCount > 1) && topLevel)) {\n                        allMemberNames.prefix = \"{ \";\n                        allMemberNames.suffix = \"}\";\n                        allMemberNames.delim = delim;\n                    } else if (allMemberNames.entries.length > 1) {\n                        allMemberNames.delim = delim;\n                    }\n\n                    return allMemberNames;\n                }\n            }\n\n            return MemberName.create(\"{}\");\n        }\n\n        public isExternallyVisible(inIsExternallyVisibleSymbols?: PullSymbol[]): boolean {\n            var isVisible = super.isExternallyVisible(inIsExternallyVisibleSymbols);\n            if (isVisible) {\n                // Get type parameters\n                var typars = this.getTypeArguments();\n                if (!typars || !typars.length) {\n                    typars = this.getTypeParameters();\n                }\n\n                if (typars) {\n                    // If any of the type parameter is not visible the type is invisible\n                    for (var i = 0; i < typars.length; i++) {\n                        isVisible = PullSymbol.getIsExternallyVisible(typars[i], this, inIsExternallyVisibleSymbols);\n                        if (!isVisible) {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return isVisible;\n        }\n\n        public setType(type: PullTypeSymbol) {\n            Debug.assert(false, \"tried to set type of type\");\n        }\n    }\n\n    export class PullPrimitiveTypeSymbol extends PullTypeSymbol {\n        constructor(name: string) {\n            super(name, PullElementKind.Primitive);\n        }\n\n        public isResolved() { return true; }\n\n        public isStringConstant() { return false; }\n\n        public isFixed() {\n            return true;\n        }\n\n        public invalidate() {\n            // do nothing...\n        }\n    }\n\n    export class PullStringConstantTypeSymbol extends PullPrimitiveTypeSymbol {\n        constructor(name: string) {\n            super(name);\n        }\n\n        public isStringConstant() {\n            return true;\n        }\n    }\n\n    export class PullErrorTypeSymbol extends PullPrimitiveTypeSymbol {\n        constructor(private diagnostic: SemanticDiagnostic, public delegateType: PullTypeSymbol) {\n            super(\"error\");\n        }\n\n        public isError() {\n            return true;\n        }\n\n        public getDiagnostic() {\n            return this.diagnostic;\n        }\n\n        public getName(scopeSymbol?: PullSymbol, useConstraintInName?: boolean): string {\n            return this.delegateType.getName(scopeSymbol, useConstraintInName);\n        }\n\n        public getDisplayName(scopeSymbol?: PullSymbol, useConstraintInName?: boolean): string {\n            return this.delegateType.getDisplayName(scopeSymbol, useConstraintInName);\n        }\n\n        public toString() {\n            return this.delegateType.toString();\n        }\n\n        public isResolved() {\n            return false;\n        }\n    }\n\n    // PULLTODO: Unify concepts of constructor method and container\n    // type instance types\n    export class PullClassTypeSymbol extends PullTypeSymbol {\n\n        private constructorMethod: PullSymbol = null;\n        private hasDefaultConstructor = false;\n\n        constructor(name: string) {\n            super(name, PullElementKind.Class);\n        }\n\n        public isClass() {\n            return true;\n        }\n\n        public setHasDefaultConstructor(hasOne= true) {\n            this.hasDefaultConstructor = hasOne;\n        }\n\n        public getHasDefaultConstructor() {\n            return this.hasDefaultConstructor;\n        }\n\n        public getConstructorMethod() {\n            return this.constructorMethod;\n        }\n\n        public setConstructorMethod(constructorMethod: PullSymbol) {\n            this.constructorMethod = constructorMethod;\n        }\n\n        public invalidate() {\n\n            if (this.constructorMethod) {\n                this.constructorMethod.invalidate();\n            }\n\n            super.invalidate();\n        }\n    }\n\n    // represents the module \"namespace\" type\n    export class PullContainerTypeSymbol extends PullTypeSymbol {\n        public instanceSymbol: PullSymbol = null;\n        private _exportAssignedSymbol: PullSymbol = null;\n\n        constructor(name: string, kind = PullElementKind.Container) {\n            super(name, kind);\n        }\n\n        public isContainer() { return true; }\n\n        public setInstanceSymbol(symbol: PullSymbol) {\n            this.instanceSymbol = symbol;\n        }\n\n        public getInstanceSymbol(): PullSymbol {\n            return this.instanceSymbol;\n        }\n\n        public invalidate() {\n\n            if (this.instanceSymbol) {\n                this.instanceSymbol.invalidate();\n            }\n\n            super.invalidate();\n        }\n\n        private findAliasedType(decls: PullDecl[]) {\n            for (var i = 0; i < decls.length; i++) {\n                var childDecls = decls[i].getChildDecls();\n                for (var j = 0; j < childDecls.length; j++) {\n                    if (childDecls[j].getKind() === PullElementKind.TypeAlias) {\n                        var symbol = childDecls[j].getSymbol();\n                        if (symbol.getType() === this) {\n                            return symbol;\n                        }\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public getAliasedSymbol(scopeSymbol: PullSymbol) {\n            var scopePath = scopeSymbol.pathToRoot();\n            if (scopePath.length && scopePath[scopePath.length - 1].getKind() === PullElementKind.DynamicModule) {\n                var decls = scopePath[scopePath.length - 1].getDeclarations();\n                var symbol = this.findAliasedType(decls);\n                return symbol;\n            }\n\n            return null;\n        }\n\n        public getName(scopeSymbol?: PullSymbol, useConstraintInName?: boolean): string {\n            if (scopeSymbol && this.getKind() === PullElementKind.DynamicModule) {\n                var symbol = this.getAliasedSymbol(scopeSymbol);\n                if (symbol) {\n                    return symbol.getName();\n                }\n            }\n            return super.getName();\n        }\n\n        public getDisplayName(scopeSymbol?: PullSymbol, useConstraintInName?: boolean): string {\n            if (scopeSymbol && this.getKind() == PullElementKind.DynamicModule) {\n                var symbol = this.getAliasedSymbol(scopeSymbol);\n                if (symbol) {\n                    return symbol.getDisplayName();\n                }\n            }\n            return super.getDisplayName();\n        }\n\n        public setExportAssignedSymbol(symbol: PullSymbol): void {\n            this._exportAssignedSymbol = symbol;\n        }\n\n        public getExportAssignedSymbol(): PullSymbol {\n            return this._exportAssignedSymbol;\n        }\n    }\n\n    export class PullTypeAliasSymbol extends PullTypeSymbol {\n\n        private typeAliasLink: PullSymbolLink = null;\n        private _exportAssignmentLink: PullSymbolLink = null;\n        private isUsedAsValue = false;\n        private typeUsedExternally = false;\n\n        constructor(name: string) {\n            super(name, PullElementKind.TypeAlias);\n        }\n\n        public isAlias() { return true; }\n        public isContainer() { return true; }\n\n        public setAliasedType(type: PullTypeSymbol) {\n            if (this.typeAliasLink) {\n                this.removeOutgoingLink(this.typeAliasLink);\n            }\n\n            this.typeAliasLink = this.addOutgoingLink(type, SymbolLinkKind.Aliases);\n        }\n\n        public setExportAssignmentSymbol(symbol: PullSymbol) {\n            if (this._exportAssignmentLink) {\n                this.removeOutgoingLink(this._exportAssignmentLink);\n            }\n\n            this._exportAssignmentLink = this.addOutgoingLink(symbol, SymbolLinkKind.ExportAliases);\n        }\n\n        public getExportAssignedSymbol(): PullSymbol {\n            if (!this._exportAssignmentLink) {\n                return null;\n            }\n\n            return this._exportAssignmentLink.end;\n        }\n\n        public getType(): PullTypeSymbol {\n            if (this.typeAliasLink) {\n                return <PullTypeSymbol>this.typeAliasLink.end;\n            }\n\n            return null;\n        }\n\n        public setType(type: PullTypeSymbol) {\n            this.setAliasedType(type);\n        }\n\n        public setIsUsedAsValue() {\n            this.isUsedAsValue = true;\n        }\n\n        public getIsUsedAsValue() {\n            return this.isUsedAsValue;\n        }\n\n        public setIsTypeUsedExternally() {\n            this.typeUsedExternally = true;\n        }\n\n        public getTypeUsedExternally() {\n            return this.typeUsedExternally;\n        }\n\n        public getMembers(): PullSymbol[] {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).getMembers();\n            }\n\n            return [];\n        }\n\n        public getCallSignatures(): PullSignatureSymbol[] {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).getCallSignatures();\n            }\n\n            return [];\n        }\n\n        public getConstructSignatures(): PullSignatureSymbol[] {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).getConstructSignatures();\n            }\n\n            return [];\n        }\n\n        public getIndexSignatures(): PullSignatureSymbol[] {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).getIndexSignatures();\n            }\n\n            return [];\n        }\n\n        public findMember(name: string): PullSymbol {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).findMember(name);\n            }\n\n            return null;\n        }\n\n        public findNestedType(name: string): PullTypeSymbol {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).findNestedType(name);\n            }\n\n            return null;\n        }\n\n        public getAllMembers(searchDeclKind: PullElementKind, includePrivate: boolean): PullSymbol[] {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).getAllMembers(searchDeclKind, includePrivate);\n            }\n\n            return [];\n        }\n\n        public invalidate() {\n            this.isUsedAsValue = false;\n\n            super.invalidate();\n        }\n    }\n\n    export class PullDefinitionSignatureSymbol extends PullSignatureSymbol {\n        public isDefinition() { return true; }\n    }\n\n    export class PullFunctionTypeSymbol extends PullTypeSymbol {\n        private definitionSignature: PullDefinitionSignatureSymbol = null;\n\n        constructor() {\n            super(\"\", PullElementKind.FunctionType);\n        }\n\n        public isFunction() { return true; }\n\n        public invalidate() {\n\n            var callSignatures = this.getCallSignatures();\n\n            if (callSignatures.length) {\n                for (var i = 0; i < callSignatures.length; i++) {\n                    callSignatures[i].invalidate();\n                }\n            }\n\n            this.definitionSignature = null;\n\n            super.invalidate();\n        }\n\n        public addSignature(signature: PullSignatureSymbol) {\n            this.addCallSignature(signature);\n\n            if (signature.isDefinition()) {\n                this.definitionSignature = <PullDefinitionSignatureSymbol>signature;\n            }\n        }\n\n        public getDefinitionSignature() { return this.definitionSignature; }\n    }\n\n    export class PullConstructorTypeSymbol extends PullTypeSymbol {\n        private definitionSignature: PullDefinitionSignatureSymbol = null;\n\n        constructor() {\n            super(\"\", PullElementKind.ConstructorType);\n        }\n\n        public isFunction() { return true; }\n        public isConstructor() { return true; }\n\n        public invalidate() {\n\n            this.definitionSignature = null;\n\n            super.invalidate();\n        }\n\n        public addSignature(signature: PullSignatureSymbol) {\n            this.addConstructSignature(signature);\n\n            if (signature.isDefinition()) {\n                this.definitionSignature = <PullDefinitionSignatureSymbol>signature;\n            }\n        }\n\n        public addTypeParameter(typeParameter: PullTypeParameterSymbol, doNotChangeContainer?: boolean) {\n\n            this.addMember(typeParameter, SymbolLinkKind.TypeParameter, doNotChangeContainer);\n\n            var constructSignatures = this.getConstructSignatures();\n\n            for (var i = 0; i < constructSignatures.length; i++) {\n                constructSignatures[i].addTypeParameter(typeParameter);\n            }\n        }\n\n        public getDefinitionSignature() { return this.definitionSignature; }\n    }\n\n    export class PullTypeParameterSymbol extends PullTypeSymbol {\n        private constraintLink: PullSymbolLink = null;\n\n        constructor(name: string, private _isFunctionTypeParameter) {\n            super(name, PullElementKind.TypeParameter);\n        }\n\n        public isTypeParameter() { return true; }\n        public isFunctionTypeParameter() { return this._isFunctionTypeParameter; }\n\n        public isFixed() { return false; }\n\n        public setConstraint(constraintType: PullTypeSymbol) {\n\n            if (this.constraintLink) {\n                this.removeOutgoingLink(this.constraintLink);\n            }\n\n            this.constraintLink = this.addOutgoingLink(constraintType, SymbolLinkKind.TypeConstraint);\n        }\n\n        public getConstraint(): PullTypeSymbol {\n            if (this.constraintLink) {\n                return <PullTypeSymbol>this.constraintLink.end;\n            }\n\n            return null;\n        }\n\n        public isGeneric() { return true; }\n\n        public fullName(scopeSymbol?: PullSymbol) {\n            var name = this.getDisplayName(scopeSymbol);\n            var container = this.getContainer();\n            if (container) {\n                var containerName = container.fullName(scopeSymbol);\n                name = name + \" in \" + containerName;\n            }\n\n            return name;\n        }\n\n        public getName(scopeSymbol?: PullSymbol, useConstraintInName?: boolean) {\n\n            var name = super.getName(scopeSymbol);\n\n            if (this.isPrinting) {\n                return name;\n            }\n\n            this.isPrinting = true;         \n\n            if (useConstraintInName && this.constraintLink) {\n                name += \" extends \" + this.constraintLink.end.toString();\n            }\n\n            this.isPrinting = false;\n        \n            return name;\n        }\n\n        public getDisplayName(scopeSymbol?: PullSymbol, useConstraintInName?: boolean) {\n\n            var name = super.getDisplayName(scopeSymbol, useConstraintInName);\n\n            if (this.isPrinting) {\n                return name;\n            }\n\n            this.isPrinting = true;\n\n            if (useConstraintInName && this.constraintLink) {\n                name += \" extends \" + this.constraintLink.end.toString();\n            }\n\n            this.isPrinting = false;\n            \n            return name;\n        }\n\n        public isExternallyVisible(inIsExternallyVisibleSymbols?: PullSymbol[]): boolean {\n            var constraint = this.getConstraint();\n            if (constraint) {\n                return PullSymbol.getIsExternallyVisible(constraint, this, inIsExternallyVisibleSymbols);\n            }\n\n            return true;          \n        }\n    }\n\n    // transient type variables...\n    export class PullTypeVariableSymbol extends PullTypeParameterSymbol {\n\n        constructor(name: string, isFunctionTypeParameter: boolean) {\n            super(name, isFunctionTypeParameter);\n        }\n\n        private tyvarID =  globalTyvarID++;\n\n        public isTypeParameter() { return true; }\n        public isTypeVariable() { return true; }\n    }\n\n    export class PullAccessorSymbol extends PullSymbol {\n\n        private getterSymbolLink: PullSymbolLink = null;\n        private setterSymbolLink: PullSymbolLink = null;\n\n        constructor(name: string) {\n            super(name, PullElementKind.Property);\n        }\n\n        public isAccessor() { return true; }\n\n        public setSetter(setter: PullSymbol) {\n            this.setterSymbolLink = this.addOutgoingLink(setter, SymbolLinkKind.SetterFunction);\n        }\n\n        public getSetter(): PullSymbol {\n            var setter: PullSymbol = null;\n\n            if (this.setterSymbolLink) {\n                setter = this.setterSymbolLink.end;\n            }\n\n            return setter;\n        }\n\n        public removeSetter() {\n            if (this.setterSymbolLink) {\n                this.removeOutgoingLink(this.setterSymbolLink);\n            }\n        }\n\n        public setGetter(getter: PullSymbol) {\n            this.getterSymbolLink = this.addOutgoingLink(getter, SymbolLinkKind.GetterFunction);\n        }\n\n        public getGetter(): PullSymbol {\n            var getter: PullSymbol = null;\n\n            if (this.getterSymbolLink) {\n                getter = this.getterSymbolLink.end;\n            }\n\n            return getter;\n        }\n\n        public removeGetter() {\n            if (this.getterSymbolLink) {\n                this.removeOutgoingLink(this.getterSymbolLink);\n            }\n        }\n\n        public invalidate() {\n            if (this.getterSymbolLink) {\n                this.getterSymbolLink.end.invalidate();\n            }\n\n            if (this.setterSymbolLink) {\n                this.setterSymbolLink.end.invalidate();\n            }\n\n            super.invalidate();\n        }\n    }\n\n    export class PullArrayTypeSymbol extends PullTypeSymbol {\n        private elementType: PullTypeSymbol = null;\n\n        public isArray() { return true; }\n        public getElementType() { return this.elementType; }\n        public isGeneric() { return true; }\n\n        constructor() {\n            super(\"Array\", PullElementKind.Array);\n        }\n\n        public setElementType(type: PullTypeSymbol) {\n            this.elementType = type;\n        }\n\n        public getScopedNameEx(scopeSymbol?: PullSymbol, useConstraintInName?: boolean, getPrettyTypeName?: boolean, getTypeParamMarkerInfo?:boolean) {\n            var elementMemberName = this.elementType ?\n                (this.elementType.isArray() || this.elementType.isNamedTypeSymbol() ?\n                this.elementType.getScopedNameEx(scopeSymbol, false, getPrettyTypeName, getTypeParamMarkerInfo) :\n                this.elementType.getMemberTypeNameEx(false, scopeSymbol, getPrettyTypeName)) :\n                MemberName.create(\"any\");\n            return MemberName.create(elementMemberName, \"\", \"[]\");\n        }\n\n        public getMemberTypeNameEx(topLevel: boolean, scopeSymbol?: PullSymbol, getPrettyTypeName?: boolean): MemberName {\n            var elementMemberName = this.elementType ? this.elementType.getMemberTypeNameEx(false, scopeSymbol, getPrettyTypeName) : MemberName.create(\"any\");\n            return MemberName.create(elementMemberName, \"\", \"[]\");\n        }\n    }\n\n    // PULLTODO: This should be a part of the resolver class\n    export function specializeToArrayType(typeToReplace: PullTypeSymbol, typeToSpecializeTo: PullTypeSymbol, resolver: PullTypeResolver, context: PullTypeResolutionContext) {\n\n        var arrayInterfaceType = resolver.getCachedArrayType();\n\n        // For the time-being, only specialize interface types\n        // this way we can assume only public members and non-static methods\n        if (!arrayInterfaceType || (arrayInterfaceType.getKind() & PullElementKind.Interface) === 0) {\n            return null;\n        }\n\n        // PULLREVIEW: Accept both generic and non-generic arrays for now\n        if (arrayInterfaceType.isGeneric()) {\n            var enclosingDecl = arrayInterfaceType.getDeclarations()[0];\n            return specializeType(arrayInterfaceType, [typeToSpecializeTo], resolver, enclosingDecl, context);\n        }\n\n        if (typeToSpecializeTo.getArrayType()) {\n            return typeToSpecializeTo.getArrayType();\n        }\n\n        // PULLTODO: Recursive reference bug\n        var newArrayType: PullTypeSymbol = new PullArrayTypeSymbol();\n        newArrayType.addDeclaration(arrayInterfaceType.getDeclarations()[0]);\n\n        typeToSpecializeTo.setArrayType(newArrayType);\n        newArrayType.addOutgoingLink(typeToSpecializeTo, SymbolLinkKind.ArrayOf);\n\n        var field: PullSymbol = null;\n        var newField: PullSymbol = null;\n        var fieldType: PullTypeSymbol = null;\n\n        var method: PullSymbol = null;\n        var methodType: PullFunctionTypeSymbol = null;\n        var newMethod: PullSymbol = null;\n        var newMethodType: PullFunctionTypeSymbol = null;\n\n        var signatures: PullSignatureSymbol[] = null;\n        var newSignature: PullSignatureSymbol = null;\n\n        var parameters: PullSymbol[] = null;\n        var newParameter: PullSymbol = null;\n        var parameterType: PullTypeSymbol = null;\n\n        var returnType: PullTypeSymbol = null;\n        var newReturnType: PullTypeSymbol = null;\n\n        var members = arrayInterfaceType.getMembers();\n\n        for (var i = 0; i < members.length; i++) {\n            resolver.resolveDeclaredSymbol(members[i], null, context);\n\n            if (members[i].getKind() === PullElementKind.Method) { // must be a method\n                method = <PullFunctionTypeSymbol> members[i];\n\n                resolver.resolveDeclaredSymbol(method, null, context);\n\n                methodType = <PullFunctionTypeSymbol>method.getType();\n\n                newMethod = new PullSymbol(method.getName(), PullElementKind.Method);\n                newMethodType = new PullFunctionTypeSymbol();\n                newMethod.setType(newMethodType);\n\n                newMethod.addDeclaration(method.getDeclarations()[0]);\n\n                signatures = methodType.getCallSignatures();\n\n                // specialize each signature\n                for (var j = 0; j < signatures.length; j++) {\n\n                    newSignature = new PullSignatureSymbol(PullElementKind.CallSignature);\n                    newSignature.addDeclaration(signatures[j].getDeclarations()[0]);\n\n                    parameters = signatures[j].getParameters();\n                    returnType = signatures[j].getReturnType();\n\n                    if (returnType === typeToReplace) {\n                        newSignature.setReturnType(typeToSpecializeTo);\n                    }\n                    else {\n                        newSignature.setReturnType(returnType);\n                    }\n\n                    for (var k = 0; k < parameters.length; k++) {\n                        newParameter = new PullSymbol(parameters[k].getName(), parameters[k].getKind());\n\n                        parameterType = parameters[k].getType();\n\n                        if (parameterType === null) { continue; }\n\n\n                        if (parameterType === typeToReplace) {\n                            newParameter.setType(typeToSpecializeTo);\n                        }\n                        else {\n                            newParameter.setType(parameterType);\n                        }\n\n                        newSignature.addParameter(newParameter);\n                    }\n\n                    newMethodType.addSignature(newSignature);\n                }\n\n                newArrayType.addMember(newMethod, SymbolLinkKind.PublicMember);\n            }\n\n            else { // must be a field\n                field = members[i];\n\n                newField = new PullSymbol(field.getName(), field.getKind());\n                newField.addDeclaration(field.getDeclarations()[0]);\n\n                fieldType = field.getType();\n\n                if (fieldType === typeToReplace) {\n                    newField.setType(typeToSpecializeTo);\n                }\n                else {\n                    newField.setType(fieldType);\n                }\n\n                newArrayType.addMember(newField, SymbolLinkKind.PublicMember);\n            }\n        }\n        newArrayType.addOutgoingLink(arrayInterfaceType, SymbolLinkKind.ArrayType);\n        return newArrayType;\n    }\n\n    export function typeWrapsTypeParameter(type: PullTypeSymbol, typeParameter: PullTypeParameterSymbol) {\n\n        if (type.isTypeParameter()) {\n            return type == typeParameter;\n        }\n\n        var typeArguments = type.getTypeArguments();\n\n        if (typeArguments) {\n            for (var i = 0; i < typeArguments.length; i++) {\n                if (typeWrapsTypeParameter(typeArguments[i], typeParameter)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    export function getRootType(typeToSpecialize: PullTypeSymbol) {\n        var decl = typeToSpecialize.getDeclarations()[0];\n\n        if (!typeToSpecialize.isGeneric()) {\n            return typeToSpecialize;\n        }\n\n        return (typeToSpecialize.getKind() & (PullElementKind.Class | PullElementKind.Interface)) ? <PullTypeSymbol>decl.getSymbol().getType() : typeToSpecialize;\n    }\n\n    export var nSpecializationsCreated = 0;\n\n    export function specializeType(typeToSpecialize: PullTypeSymbol, typeArguments: PullTypeSymbol[], resolver: PullTypeResolver, enclosingDecl: PullDecl, context: PullTypeResolutionContext, ast?: AST): PullTypeSymbol {\n\n        if (typeToSpecialize.isPrimitive() || !typeToSpecialize.isGeneric()) {\n            return typeToSpecialize;\n        }\n\n        var searchForExistingSpecialization = typeArguments != null;\n\n        if (typeArguments === null || (context.specializingToAny && typeArguments.length)) {\n            typeArguments = [];\n        }\n\n        if (typeToSpecialize.isTypeParameter()) {\n\n            if (context.specializingToAny) {\n                return resolver.semanticInfoChain.anyTypeSymbol;\n            }\n\n            var substitution = context.findSpecializationForType(typeToSpecialize);\n\n            if (substitution != typeToSpecialize) {\n\n                if (!(substitution.isTypeParameter() && (<PullTypeParameterSymbol>substitution).isFunctionTypeParameter())) {\n                    return substitution;\n                }\n            }\n\n            if (typeArguments && typeArguments.length) {\n                if (!(typeArguments[0].isTypeParameter() && (<PullTypeParameterSymbol>typeArguments[0]).isFunctionTypeParameter())) {\n                    return typeArguments[0];\n                }\n            }\n\n            return typeToSpecialize;\n        }\n\n        // In this case, we have an array type that may have been specialized to a type variable\n        if (typeToSpecialize.isArray()) {\n\n            if (typeToSpecialize.currentlyBeingSpecialized()) {\n                return typeToSpecialize;\n            }\n\n            var newElementType: PullTypeSymbol = null;\n\n            if (!context.specializingToAny) {\n                var elementType = (<PullArrayTypeSymbol>typeToSpecialize).getElementType();\n\n                newElementType = specializeType(elementType, typeArguments, resolver, enclosingDecl, context, ast);\n            }\n            else {\n                newElementType = resolver.semanticInfoChain.anyTypeSymbol;\n            }\n\n            // we re-specialize so that we can re-use any cached array type symbols\n            var newArrayType = specializeType(resolver.getCachedArrayType(), [newElementType], resolver, enclosingDecl, context);\n\n            return newArrayType;\n        }     \n\n        var typeParameters = typeToSpecialize.getTypeParameters();\n\n        // if we don\'t have the complete list of types to specialize to, we\'ll need to reconstruct the specialization signature\n        if (!context.specializingToAny && searchForExistingSpecialization && (typeParameters.length > typeArguments.length)) {\n            searchForExistingSpecialization = false;\n        }\n\n        var newType: PullTypeSymbol = null;\n\n        var newTypeDecl = typeToSpecialize.getDeclarations()[0];\n\n        var rootType: PullTypeSymbol = getRootType(typeToSpecialize);\n\n        var isArray = typeToSpecialize === resolver.getCachedArrayType() || typeToSpecialize.isArray();\n\n        if (searchForExistingSpecialization) {\n            if (!typeArguments.length || context.specializingToAny) {\n                for (var i = 0; i < typeParameters.length; i++) {\n                    typeArguments[typeArguments.length] = resolver.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n\n            if (isArray) {\n                newType = typeArguments[0].getArrayType();\n            }\n            else if (typeArguments.length) {\n                newType = rootType.getSpecialization(typeArguments);\n            }\n            \n            if (!newType && !typeParameters.length && context.specializingToAny) {\n                newType = rootType.getSpecialization([resolver.semanticInfoChain.anyTypeSymbol]);\n            }\n            \n            for (var i = 0; i < typeArguments.length; i++) {\n                if (!typeArguments[i].isTypeParameter() && (typeArguments[i] == rootType || typeWrapsTypeParameter(typeArguments[i], typeParameters[i]))) {\n                    declAST = resolver.semanticInfoChain.getASTForDecl(newTypeDecl);\n                    if (declAST) {\n                        diagnostic = context.postError(enclosingDecl.getScriptName(), declAST.minChar, declAST.getLength(), DiagnosticCode.A_generic_type_may_not_reference_itself_with_its_own_type_parameters, null, enclosingDecl, true);\n                        return resolver.getNewErrorTypeSymbol(diagnostic);\n                    }\n                    else {\n                        return resolver.semanticInfoChain.anyTypeSymbol;\n                    }\n                }\n            }\n        }\n        else {\n            var knownTypeArguments = typeToSpecialize.getTypeArguments();\n            var typesToReplace = knownTypeArguments ? knownTypeArguments : typeParameters;\n            var diagnostic: SemanticDiagnostic;\n            var declAST: AST;\n\n            for (var i = 0; i < typesToReplace.length; i++) {\n\n                if (!typesToReplace[i].isTypeParameter() && (typeArguments[i] == rootType || typeWrapsTypeParameter(typesToReplace[i], typeParameters[i]))) {\n                    declAST = resolver.semanticInfoChain.getASTForDecl(newTypeDecl);\n                    if (declAST) {\n                        diagnostic = context.postError(enclosingDecl.getScriptName(), declAST.minChar, declAST.getLength(), DiagnosticCode.A_generic_type_may_not_reference_itself_with_its_own_type_parameters, null, enclosingDecl, true);\n                        return resolver.getNewErrorTypeSymbol(diagnostic);\n                    }\n                    else {\n                        return resolver.semanticInfoChain.anyTypeSymbol;\n                    }\n                }\n\n                substitution = specializeType(typesToReplace[i], null, resolver, enclosingDecl, context, ast);\n\n                typeArguments[i] = substitution != null ? substitution : typesToReplace[i];\n            }\n            \n            newType = rootType.getSpecialization(typeArguments);            \n        }\n\n        // check to see if this is a recursive specialization while resolving the root type\n        // E.g.,\n        //\n        // interface Array<T> {\n        //     p: Array<T>; <- This is really just the declaration\n        // }\n        //\n        var rootTypeParameters = rootType.getTypeParameters();\n\n        if (rootTypeParameters.length && (rootTypeParameters.length == typeArguments.length)) {\n            for (var i = 0; i < typeArguments.length; i++) {\n                if (typeArguments[i] != rootTypeParameters[i]) {\n                    break;\n                }\n            }\n\n            if (i == rootTypeParameters.length) {\n                return rootType;\n            }\n        }   \n\n        if (newType) {\n            if (!newType.isResolved() && !newType.currentlyBeingSpecialized()) {\n                typeToSpecialize.invalidateSpecializations();\n            }\n            else {\n                return newType;\n            }\n        }\n        \n        var prevInSpecialization = context.inSpecialization;\n        context.inSpecialization = true;\n\n        nSpecializationsCreated++;\n\n        newType = typeToSpecialize.isClass() ? new PullClassTypeSymbol(typeToSpecialize.getName()) :\n                    isArray ? new PullArrayTypeSymbol() :\n                    typeToSpecialize.isTypeParameter() ? // watch out for replacing one tyvar with another\n                        new PullTypeVariableSymbol(typeToSpecialize.getName(), (<PullTypeParameterSymbol>typeToSpecialize).isFunctionTypeParameter()) :\n                        new PullTypeSymbol(typeToSpecialize.getName(), typeToSpecialize.getKind());\n        newType.addDeclaration(newTypeDecl);\n\n        newType.setIsBeingSpecialized();\n\n        newType.setTypeArguments(typeArguments);\n\n        rootType.addSpecialization(newType, typeArguments);\n\n        if (isArray) {\n            (<PullArrayTypeSymbol>newType).setElementType(typeArguments[0]);\n            typeArguments[0].setArrayType(newType);\n        }\n\n        if (typeToSpecialize.currentlyBeingSpecialized()) {\n            return newType;\n        }\n\n        // create the type replacement map\n\n        var typeReplacementMap: any = {};\n\n        for (var i = 0; i < typeParameters.length; i++) {\n            if (typeParameters[i] != typeArguments[i]) {\n                typeReplacementMap[typeParameters[i].getSymbolID().toString()] = typeArguments[i];\n            }\n            newType.addMember(typeParameters[i], SymbolLinkKind.TypeParameter, true);\n        }\n\n        // specialize any extends/implements types\n        var extendedTypesToSpecialize = typeToSpecialize.getExtendedTypes();\n        var typeDecl: PullDecl;\n        var typeAST: TypeDeclaration;\n        var unitPath: string;\n        var decls: PullDecl[] = typeToSpecialize.getDeclarations();\n\n        if (extendedTypesToSpecialize.length) {\n            for (var i = 0; i < decls.length; i++) {\n                typeDecl = decls[i];\n                typeAST = <TypeDeclaration>resolver.semanticInfoChain.getASTForDecl(typeDecl);\n\n                // if this is an \'extended\' interface declaration, the AST\'s extends list may not match\n                if (typeAST.extendsList) {\n                    unitPath = resolver.getUnitPath();\n                    resolver.setUnitPath(typeDecl.getScriptName());\n                    context.pushTypeSpecializationCache(typeReplacementMap);\n                    var extendTypeSymbol = resolver.resolveTypeReference(new TypeReference(typeAST.extendsList.members[0], 0), typeDecl, context).symbol;\n                    resolver.setUnitPath(unitPath);\n                    context.popTypeSpecializationCache();\n\n                    newType.addExtendedType(extendTypeSymbol);\n                }\n            }\n        }\n\n        var implementedTypesToSpecialize = typeToSpecialize.getImplementedTypes();\n\n        if (implementedTypesToSpecialize.length) {\n            for (var i = 0; i < decls.length; i++) {\n                typeDecl = decls[i];\n                typeAST = <TypeDeclaration>resolver.semanticInfoChain.getASTForDecl(typeDecl);\n\n                if (typeAST.implementsList) {\n                    unitPath = resolver.getUnitPath();\n                    resolver.setUnitPath(typeDecl.getScriptName());\n                    context.pushTypeSpecializationCache(typeReplacementMap);\n                    var implementedTypeSymbol = resolver.resolveTypeReference(new TypeReference(typeAST.implementsList.members[0], 0), typeDecl, context).symbol;\n                    resolver.setUnitPath(unitPath);\n                    context.popTypeSpecializationCache();\n\n                    newType.addImplementedType(implementedTypeSymbol);\n                }\n            }\n        }\n\n        var callSignatures = typeToSpecialize.getCallSignatures();\n        var constructSignatures = typeToSpecialize.getConstructSignatures();\n        var indexSignatures = typeToSpecialize.getIndexSignatures();\n        var members = typeToSpecialize.getMembers();\n\n        // specialize call signatures\n        var newSignature: PullSignatureSymbol;\n        var signature: PullSignatureSymbol;\n\n        var decl: PullDecl = null;\n        var declAST: AST = null;\n        var parameters: PullSymbol[];\n        var newParameters: PullSymbol[];\n        var returnType: PullTypeSymbol = null;\n        var prevSpecializationSignature: PullSignatureSymbol = null;\n\n        for (var i = 0; i < callSignatures.length; i++) {\n            signature = callSignatures[i];\n\n            if (!signature.currentlyBeingSpecialized()) {\n\n                context.pushTypeSpecializationCache(typeReplacementMap);\n\n                decl = signature.getDeclarations()[0];\n                unitPath = resolver.getUnitPath();\n                resolver.setUnitPath(decl.getScriptName());\n\n                newSignature = new PullSignatureSymbol(signature.getKind());\n\n                newSignature.mimicSignature(signature);\n                declAST = resolver.semanticInfoChain.getASTForDecl(decl);\n\n                prevSpecializationSignature = decl.getSpecializingSignatureSymbol();\n                decl.setSpecializingSignatureSymbol(newSignature);\n                resolver.resolveAST(declAST, false, newTypeDecl, context);\n                decl.setSpecializingSignatureSymbol(prevSpecializationSignature);\n\n                parameters = signature.getParameters();\n                newParameters = newSignature.getParameters();\n\n                for (var p = 0; p < parameters.length; p++) {\n                    newParameters[p].setType(parameters[p].getType());\n                }\n                newSignature.setResolved();\n\n                resolver.setUnitPath(unitPath);\n\n                returnType = newSignature.getReturnType();\n\n                if (!returnType) {\n                    newSignature.setReturnType(signature.getReturnType());\n                }\n\n                signature.setIsBeingSpecialized();\n                newSignature.addDeclaration(decl);\n                newSignature = specializeSignature(newSignature, true, typeReplacementMap, null, resolver, newTypeDecl, context);\n                signature.setIsSpecialized();\n\n                context.popTypeSpecializationCache();\n\n                if (!newSignature) {\n                    context.inSpecialization = prevInSpecialization;\n                    Debug.assert(false, \"returning from call\");\n                    return resolver.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n            else {\n                newSignature = signature;\n            }          \n\n            newType.addCallSignature(newSignature);\n\n            if (newSignature.hasGenericParameter()) {\n                newType.setHasGenericSignature();\n            }\n        }\n\n        // specialize construct signatures\n        for (var i = 0; i < constructSignatures.length; i++) {\n            signature = constructSignatures[i];\n\n            if (!signature.currentlyBeingSpecialized()) {\n\n                context.pushTypeSpecializationCache(typeReplacementMap);\n\n                decl = signature.getDeclarations()[0];\n                unitPath = resolver.getUnitPath();\n                resolver.setUnitPath(decl.getScriptName());\n\n                newSignature = new PullSignatureSymbol(signature.getKind());\n\n                newSignature.mimicSignature(signature);\n                declAST = resolver.semanticInfoChain.getASTForDecl(decl);\n\n                prevSpecializationSignature = decl.getSpecializingSignatureSymbol();\n                decl.setSpecializingSignatureSymbol(newSignature);\n                resolver.resolveAST(declAST, false, newTypeDecl, context);\n                decl.setSpecializingSignatureSymbol(prevSpecializationSignature);\n\n                parameters = signature.getParameters();\n                newParameters = newSignature.getParameters();\n\n                // we need to clone the parameter types, but the return type\n                // was set during resolution\n                for (var p = 0; p < parameters.length; p++) {\n                    newParameters[p].setType(parameters[p].getType());\n                }\n                newSignature.setResolved();\n\n                resolver.setUnitPath(unitPath);\n\n                returnType = newSignature.getReturnType();\n\n                if (!returnType) {\n                    newSignature.setReturnType(signature.getReturnType());\n                }\n\n                signature.setIsBeingSpecialized();\n                newSignature.addDeclaration(decl);\n                newSignature = specializeSignature(newSignature, true, typeReplacementMap, null, resolver, newTypeDecl, context);\n                signature.setIsSpecialized();\n\n                context.popTypeSpecializationCache();\n\n                if (!newSignature) {\n                    context.inSpecialization = prevInSpecialization;\n                    Debug.assert(false, \"returning from construct\");\n                    return resolver.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n            else {\n                newSignature = signature;\n            }   \n\n            newType.addConstructSignature(newSignature);\n\n            if (newSignature.hasGenericParameter()) {\n                newType.setHasGenericSignature();\n            }\n        }\n\n        // specialize index signatures\n        for (var i = 0; i < indexSignatures.length; i++) {\n            signature = indexSignatures[i];\n\n            if (!signature.currentlyBeingSpecialized()) {                \n\n                context.pushTypeSpecializationCache(typeReplacementMap);\n\n                decl = signature.getDeclarations()[0];\n                unitPath = resolver.getUnitPath();\n                resolver.setUnitPath(decl.getScriptName());\n\n                newSignature = new PullSignatureSymbol(signature.getKind());\n\n                newSignature.mimicSignature(signature);\n                declAST = resolver.semanticInfoChain.getASTForDecl(decl);\n\n                prevSpecializationSignature = decl.getSpecializingSignatureSymbol();\n                decl.setSpecializingSignatureSymbol(newSignature);\n                resolver.resolveAST(declAST, false, newTypeDecl, context);\n                decl.setSpecializingSignatureSymbol(prevSpecializationSignature);\n\n                parameters = signature.getParameters();\n                newParameters = newSignature.getParameters();\n\n                // we need to clone the parameter types, but the return type\n                // was set during resolution\n                for (var p = 0; p < parameters.length; p++) {\n                    newParameters[p].setType(parameters[p].getType());\n                }\n                newSignature.setResolved();\n\n                resolver.setUnitPath(unitPath);\n\n                returnType = newSignature.getReturnType();\n\n                if (!returnType) {\n                    newSignature.setReturnType(signature.getReturnType());\n                }\n\n                signature.setIsBeingSpecialized();\n                newSignature.addDeclaration(decl);\n                newSignature = specializeSignature(newSignature, true, typeReplacementMap, null, resolver, newTypeDecl, context);\n                signature.setIsSpecialized();\n\n                context.popTypeSpecializationCache();\n\n                if (!newSignature) {\n                    context.inSpecialization = prevInSpecialization;\n                    Debug.assert(false, \"returning from index\");\n                    return resolver.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n            else {\n                newSignature = signature;\n            }   \n            \n            newType.addIndexSignature(newSignature);\n\n            if (newSignature.hasGenericParameter()) {\n                newType.setHasGenericSignature();\n            }\n        }        \n\n        // specialize members\n\n        var field: PullSymbol = null;\n        var newField: PullSymbol = null;\n\n        var fieldType: PullTypeSymbol = null;\n        var newFieldType: PullTypeSymbol = null;\n        var replacementType: PullTypeSymbol = null;\n\n        var fieldSignatureSymbol: PullSignatureSymbol = null;\n\n        for (var i = 0; i < members.length; i++) {\n            field = members[i];\n            field.setIsBeingSpecialized();\n\n            decls = field.getDeclarations();\n\n            newField = new PullSymbol(field.getName(), field.getKind());\n\n            for (var j = 0; j < decls.length; j++) {\n                newField.addDeclaration(decls[j]);\n            }\n\n            if (field.getIsOptional()) {\n                newField.setIsOptional();\n            }\n\n            if (!field.isResolved()) {\n                resolver.resolveDeclaredSymbol(field, newTypeDecl, context);\n            }            \n\n            fieldType = field.getType();\n\n            if (!fieldType) {\n                fieldType = newType; //new PullTypeVariableSymbol(\"tyvar\" + globalTyvarID);\n            }\n\n            replacementType = <PullTypeSymbol>typeReplacementMap[fieldType.getSymbolID().toString()];\n\n            if (replacementType) {\n                newField.setType(replacementType);\n            }\n            else {\n                // re-resolve all field decls using the current replacements\n                if (fieldType.isGeneric() && !fieldType.isFixed()) {\n                    unitPath = resolver.getUnitPath();\n                    resolver.setUnitPath(decls[0].getScriptName());\n\n                    context.pushTypeSpecializationCache(typeReplacementMap);\n\n                    newFieldType = specializeType(fieldType, !fieldType.getIsSpecialized() ? typeArguments : null, resolver, newTypeDecl, context, ast);\n\n                    resolver.setUnitPath(unitPath);\n\n                    context.popTypeSpecializationCache();\n\n                    newField.setType(newFieldType);\n                }\n                else {\n                    newField.setType(fieldType);\n                }\n            }\n            field.setIsSpecialized();\n            newType.addMember(newField, (field.hasFlag(PullElementFlags.Private)) ? SymbolLinkKind.PrivateMember : SymbolLinkKind.PublicMember);\n        }\n\n        // specialize the constructor and statics, if need be\n        if (typeToSpecialize.isClass()) {\n            var constructorMethod = (<PullClassTypeSymbol>typeToSpecialize).getConstructorMethod();\n            var newConstructorMethod = new PullSymbol(constructorMethod.getName(), PullElementKind.ConstructorMethod);\n            var newConstructorType = specializeType(constructorMethod.getType(), typeArguments, resolver, newTypeDecl, context, ast);\n\n            newConstructorMethod.setType(newConstructorType);\n\n            var constructorDecls: PullDecl[] = constructorMethod.getDeclarations();\n\n            for (var i = 0; i < constructorDecls.length; i++) {\n                newConstructorMethod.addDeclaration(constructorDecls[i]);\n                //newConstructorType.addDeclaration(constructorDecls[i]);\n            }\n\n            (<PullClassTypeSymbol>newType).setConstructorMethod(newConstructorMethod);\n        }\n\n        newType.setIsSpecialized();\n\n        newType.setResolved();\n\n        context.inSpecialization = prevInSpecialization;\n        return newType;\n    }\n\n    // PULLTODO: Replace typeReplacementMap with use of context\n    export function specializeSignature(signature: PullSignatureSymbol,\n        skipLocalTypeParameters: boolean,\n        typeReplacementMap: any,\n        typeArguments: PullTypeSymbol[],\n        resolver: PullTypeResolver,\n        enclosingDecl: PullDecl,\n        context: PullTypeResolutionContext,\n        ast?: AST): PullSignatureSymbol {\n\n        if (signature.currentlyBeingSpecialized()) {\n            return signature;\n        }\n\n        if (!signature.isResolved() && !signature.isResolving()) {\n            resolver.resolveDeclaredSymbol(signature, enclosingDecl, context);\n        }\n\n        var newSignature = signature.getSpecialization(typeArguments);\n\n        if (newSignature) {\n            return newSignature;\n        }\n\n        signature.setIsBeingSpecialized();\n\n        var prevInSpecialization = context.inSpecialization;\n        context.inSpecialization = true;\n\n        newSignature = new PullSignatureSymbol(signature.getKind());\n        newSignature.addDeclaration(signature.getDeclarations()[0]);\n\n        if (signature.hasVariableParamList()) {\n            newSignature.setHasVariableParamList();\n        }\n\n        if (signature.hasGenericParameter()) {\n            newSignature.setHasGenericParameter();\n        }\n\n        signature.addSpecialization(newSignature, typeArguments);      \n\n        var parameters = signature.getParameters();\n        var typeParameters = signature.getTypeParameters();\n        var returnType = signature.getReturnType();\n\n        for (var i = 0; i < typeParameters.length; i++) {\n            newSignature.addTypeParameter(typeParameters[i]);\n        }\n\n        if (signature.hasGenericParameter()) {\n            newSignature.setHasGenericParameter();\n        }\n\n        var newParameter: PullSymbol;\n        var newParameterType: PullTypeSymbol;\n        var newParameterElementType: PullTypeSymbol;\n        var parameterType: PullTypeSymbol;\n        var replacementParameterType: PullTypeSymbol;\n        var localTypeParameters: any = new BlockIntrinsics();\n        var localSkipMap: any = null;\n\n        // if we specialize the signature recursive (through, say, the specialization of a method whilst specializing\n        // its class), we need to prevent accidental specialization of type parameters that shadow type parameters in the\n        // enclosing type.  (E.g., \"class C<T> { public m<T>() {...} }\" )\n        if (skipLocalTypeParameters) {\n            for (var i = 0; i < typeParameters.length; i++) {\n                localTypeParameters[typeParameters[i].getName()] = true;\n                if (!localSkipMap) {\n                    localSkipMap = {};\n                }\n                localSkipMap[typeParameters[i].getSymbolID().toString()] = typeParameters[i];\n            }\n        }\n\n        context.pushTypeSpecializationCache(typeReplacementMap);\n\n        if (skipLocalTypeParameters && localSkipMap) {\n            context.pushTypeSpecializationCache(localSkipMap);\n        }\n        var newReturnType = (!localTypeParameters[returnType.getName()] /*&& typeArguments != null*/) ? specializeType(returnType, null/*typeArguments*/, resolver, enclosingDecl, context, ast) : returnType;\n        if (skipLocalTypeParameters && localSkipMap) {\n            context.popTypeSpecializationCache();\n        }\n        context.popTypeSpecializationCache();\n\n        newSignature.setReturnType(newReturnType);\n\n        for (var k = 0; k < parameters.length; k++) {\n\n            newParameter = new PullSymbol(parameters[k].getName(), parameters[k].getKind());\n            newParameter.addDeclaration(parameters[k].getDeclarations()[0]);\n\n            parameterType = parameters[k].getType();\n\n            context.pushTypeSpecializationCache(typeReplacementMap);\n            if (skipLocalTypeParameters && localSkipMap) {\n                context.pushTypeSpecializationCache(localSkipMap);\n            }\n            newParameterType = !localTypeParameters[parameterType.getName()] ? specializeType(parameterType, null/*typeArguments*/, resolver, enclosingDecl, context, ast) : parameterType;\n            if (skipLocalTypeParameters && localSkipMap) {\n                context.popTypeSpecializationCache();\n            }\n            context.popTypeSpecializationCache();\n\n            if (parameters[k].getIsOptional()) {\n                newParameter.setIsOptional();\n            }\n\n            if (parameters[k].getIsVarArg()) {\n                newParameter.setIsVarArg();\n                newSignature.setHasVariableParamList();\n            }\n\n            newParameter.setType(newParameterType);\n            newSignature.addParameter(newParameter, newParameter.getIsOptional());\n        }\n\n        signature.setIsSpecialized();\n\n        context.inSpecialization = prevInSpecialization;\n\n        return newSignature;\n    }\n\n    export function getIDForTypeSubstitutions(types: PullTypeSymbol[]): string {\n        var substitution = \"\";\n\n        for (var i = 0; i < types.length; i++) {\n            substitution += types[i].getSymbolID().toString() + \"#\";\n        }\n\n        return substitution;\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n\n    export class PullSymbolBindingContext {\n\n        private parentChain: PullTypeSymbol[] = [];\n        private declPath: string[] = [];\n        public semanticInfo: SemanticInfo;\n        public reBindingAfterChange = false;\n        public startingDeclForRebind = pullDeclID; // note that this gets set on creation\n\n        constructor(public semanticInfoChain: SemanticInfoChain, public scriptName: string) {\n            this.semanticInfo = this.semanticInfoChain.getUnit(this.scriptName);\n        }\n\n        public getParent(n = 0): PullTypeSymbol { return this.parentChain ? this.parentChain[this.parentChain.length - 1 - n] : null; }\n        public getDeclPath() { return this.declPath; }\n\n        public pushParent(parentDecl: PullTypeSymbol) {\n            if (parentDecl) {\n                this.parentChain[this.parentChain.length] = parentDecl;\n                this.declPath[this.declPath.length] = parentDecl.getName();\n            }\n        }\n\n        public popParent() {\n            if (this.parentChain.length) {\n                this.parentChain.length--;\n                this.declPath.length--;\n            }\n        }\n    }\n\n    export var time_in_findSymbol = 0;\n\n    export function findSymbolInContext(name: string, declKind: PullElementKind, context: PullSymbolBindingContext, typeLookupPath: string[]): PullSymbol {\n        var startTime = new Date().getTime();\n        var contextSymbolPath: string[] = context.getDeclPath();\n        var nestedSymbolPath: string[] = [];\n        var copyOfContextSymbolPath = [];\n        var symbol: PullSymbol = null;\n        var endTime: number;\n\n        // first, search within the given symbol path\n        if (typeLookupPath.length) {\n\n            for (var i = 0; i < typeLookupPath.length; i++) {\n                nestedSymbolPath[nestedSymbolPath.length] = typeLookupPath[i];\n            }\n\n            nestedSymbolPath[nestedSymbolPath.length] = name;\n\n            while (nestedSymbolPath.length >= 2) {\n                symbol = context.semanticInfoChain.findSymbol(nestedSymbolPath, declKind);\n\n                if (symbol) {\n                    endTime = new Date().getTime();\n                    time_in_findSymbol += endTime - startTime;\n                    return symbol;\n                }\n                nestedSymbolPath.length -= 2;\n                nestedSymbolPath[nestedSymbolPath.length] = name;\n            }\n        }\n\n        // next, link back up to the enclosing context\n        if (contextSymbolPath.length) {\n            \n            for (var i = 0; i < contextSymbolPath.length; i++) {\n                copyOfContextSymbolPath[copyOfContextSymbolPath.length] = contextSymbolPath[i];\n            }\n\n            for (var i = 0; i < typeLookupPath.length; i++) {\n                copyOfContextSymbolPath[copyOfContextSymbolPath.length] = typeLookupPath[i];\n            }\n\n            copyOfContextSymbolPath[copyOfContextSymbolPath.length] = name;\n\n            while (copyOfContextSymbolPath.length >= 2) {\n                symbol = context.semanticInfoChain.findSymbol(copyOfContextSymbolPath, declKind);\n\n                if (symbol) {\n                    endTime = new Date().getTime();\n                    time_in_findSymbol += endTime - startTime;\n                    return symbol;\n                }\n\n                copyOfContextSymbolPath.length -= 2;\n                copyOfContextSymbolPath[copyOfContextSymbolPath.length] = name;\n            }\n        }\n\n        // finally, try searching globally\n        symbol = context.semanticInfoChain.findSymbol([name], declKind);\n\n        endTime = new Date().getTime();\n        time_in_findSymbol += endTime - startTime;\n\n        return symbol;\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export class CandidateInferenceInfo {\n        public typeParameter: PullTypeParameterSymbol = null;\n        public isFixed = false;\n        public inferenceCandidates: PullTypeSymbol[] = [];\n\n        public addCandidate(candidate: PullTypeSymbol) {\n            if (!this.isFixed) {\n                this.inferenceCandidates[this.inferenceCandidates.length] = candidate;\n            }\n        }\n    }\n\n    export class ArgumentInferenceContext {\n        public inferenceCache: any = {};\n        public candidateCache: any = {};\n\n\n        public alreadyRelatingTypes(objectType: PullTypeSymbol, parameterType: PullTypeSymbol) {\n            var comboID = objectType.getSymbolID().toString() + \"#\" + parameterType.getSymbolID().toString();\n\n            if (this.inferenceCache[comboID]) {\n                return true;\n            }\n            else {\n                this.inferenceCache[comboID] = true;\n                return false;\n            }            \n        }\n\n        public resetRelationshipCache() {\n            this.inferenceCache = {};\n        }\n\n        public addInferenceRoot(param: PullTypeParameterSymbol) {\n            var info = <CandidateInferenceInfo>this.candidateCache[param.getSymbolID().toString()];\n\n            if (!info) {\n                info = new CandidateInferenceInfo();\n                info.typeParameter = param;\n                this.candidateCache[param.getSymbolID().toString()] = info;\n            }        \n        }\n\n        public getInferenceInfo(param: PullTypeParameterSymbol) {\n            return <CandidateInferenceInfo>this.candidateCache[param.getSymbolID().toString()];\n        }\n\n        public addCandidateForInference(param: PullTypeParameterSymbol, candidate: PullTypeSymbol, fix: boolean) {\n            var info = this.getInferenceInfo(param);\n\n            if (info) {\n\n                if (candidate) {\n                    info.addCandidate(candidate);\n                }\n\n                if (!info.isFixed) {\n                    info.isFixed = fix;\n                }\n            }\n        }\n\n        public getInferenceCandidates(): any[] {\n            var inferenceCandidates: any[] = [];\n            var info: CandidateInferenceInfo;\n            var val;\n\n            for (var infoKey in this.candidateCache) {\n                info = <CandidateInferenceInfo>this.candidateCache[infoKey];\n\n                for (var i = 0; i < info.inferenceCandidates.length; i++) {\n                    val = {};\n                    val[info.typeParameter.getSymbolID().toString()] = info.inferenceCandidates[i];\n                    inferenceCandidates[inferenceCandidates.length] = val;\n                }\n            }\n\n            return inferenceCandidates;\n        }\n\n        public inferArgumentTypes(resolver: PullTypeResolver, context: PullTypeResolutionContext): { results: { param: PullTypeParameterSymbol; type: PullTypeSymbol; }[]; unfit: boolean; } {\n            var info: CandidateInferenceInfo = null;\n\n            var collection: IPullTypeCollection;\n\n            var bestCommonType: PullTypeSymbol;\n\n            var results: { param: PullTypeParameterSymbol; type: PullTypeSymbol; }[] = [];\n\n            var unfit = false;\n\n            for (var infoKey in this.candidateCache) {\n                info = <CandidateInferenceInfo>this.candidateCache[infoKey];\n\n                if (!info.inferenceCandidates.length) {\n                    continue;\n                }\n\n                collection = {\n                    getLength: () => { return info.inferenceCandidates.length; },\n                    setTypeAtIndex: (index: number, type: PullTypeSymbol) => { },\n                    getTypeAtIndex: (index: number) => {\n                        return info.inferenceCandidates[index].getType();\n                    }\n                }\n\n                bestCommonType = resolver.widenType(resolver.findBestCommonType(info.inferenceCandidates[0], null, collection, context, new TypeComparisonInfo()));\n\n                if (!bestCommonType) {\n                    unfit = true;\n                }\n                else {\n                    // is there already a substitution for this type?\n                    for (var i = 0; i < results.length; i++) {\n                        if (results[i].type == info.typeParameter) {\n                            results[i].type = bestCommonType;\n                        }\n                    }\n                }\n\n                results[results.length] = { param: info.typeParameter, type: bestCommonType };\n            }\n\n            return { results: results, unfit: unfit };\n        }\n    }\n\n    export class PullContextualTypeContext {\n        public provisionallyTypedSymbols: PullSymbol[] = [];\n        public provisionalDiagnostic: SemanticDiagnostic[] = [];\n\n        constructor(public contextualType: PullTypeSymbol,\n                     public provisional: boolean,\n                     public substitutions: any) { }\n\n        public recordProvisionallyTypedSymbol(symbol: PullSymbol) {\n            this.provisionallyTypedSymbols[this.provisionallyTypedSymbols.length] = symbol;\n        }\n\n        public invalidateProvisionallyTypedSymbols() {\n            for (var i = 0; i < this.provisionallyTypedSymbols.length; i++) {\n                this.provisionallyTypedSymbols[i].invalidate();\n            }\n        }\n\n        public postDiagnostic(error: SemanticDiagnostic) {\n            this.provisionalDiagnostic[this.provisionalDiagnostic.length] = error;\n        }\n\n        public hadProvisionalErrors() {\n            return this.provisionalDiagnostic.length > 0;\n        }\n    }\n\n    export class PullTypeResolutionContext {\n        private contextStack: PullContextualTypeContext[] = [];\n        private typeSpecializationStack: any[] = [];\n        private genericASTResolutionStack: AST[] = [];\n\n        public resolvingTypeReference = false;\n\n        public resolveAggressively = false;\n\n        public canUseTypeSymbol = false;\n\n        public specializingToAny = false;\n        public isResolvingClassExtendedType = false; \n        public isSpecializingSignatureAtCallSite = false;\n\n        constructor() {}\n\n        public pushContextualType(type: PullTypeSymbol, provisional: boolean, substitutions: any) {\n            this.contextStack.push(new PullContextualTypeContext(type, provisional, substitutions));\n        }\n\n        public popContextualType(): PullContextualTypeContext {\n            var tc = this.contextStack.pop();\n\n            tc.invalidateProvisionallyTypedSymbols();\n\n            return tc;\n        }\n\n        public findSubstitution(type: PullTypeSymbol) {\n            var substitution: PullTypeSymbol = null;\n\n            if (this.contextStack.length) {\n                for (var i = this.contextStack.length - 1; i >= 0; i--) {\n                    if (this.contextStack[i].substitutions) {\n                        substitution = this.contextStack[i].substitutions[type.getSymbolID().toString()];\n\n                        if (substitution) {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return substitution;\n        }\n\n        public getContextualType(): PullTypeSymbol {\n            var context = !this.contextStack.length ? null : this.contextStack[this.contextStack.length - 1];\n            \n            if (context) {\n                var type = context.contextualType;\n\n                if (!type) {\n                    return null;\n                }\n\n                // if it\'s a type parameter, return the upper bound\n                if (type.isTypeParameter() && (<PullTypeParameterSymbol>type).getConstraint()) {\n                    type = (<PullTypeParameterSymbol>type).getConstraint();\n                }\n\n                var substitution = this.findSubstitution(type);\n\n                return substitution ? substitution : type;\n            }\n\n            return null;\n        }\n\n        public inProvisionalResolution() {\n            return (!this.contextStack.length ? false : this.contextStack[this.contextStack.length - 1].provisional);\n        }\n\n        public inSpecialization = false;\n        public suppressErrors = false;\n        private inBaseTypeResolution = false;\n\n        public isInBaseTypeResolution() { return this.inBaseTypeResolution; }\n\n        public startBaseTypeResolution() {\n            var wasInBaseTypeResoltion = this.inBaseTypeResolution;\n            this.inBaseTypeResolution = true;\n            return wasInBaseTypeResoltion;\n        }\n\n        public doneBaseTypeResolution(wasInBaseTypeResolution: boolean) {\n            this.inBaseTypeResolution = wasInBaseTypeResolution;\n        }\n\n        public setTypeInContext(symbol: PullSymbol, type: PullTypeSymbol) {\n            var substitution: PullTypeSymbol = this.findSubstitution(type);\n\n            symbol.setType(substitution ? substitution : type);\n\n            if (this.contextStack.length && this.inProvisionalResolution()) {\n                this.contextStack[this.contextStack.length - 1].recordProvisionallyTypedSymbol(symbol);\n            }\n        }\n\n        public pushTypeSpecializationCache(cache) {\n            this.typeSpecializationStack[this.typeSpecializationStack.length] = cache;\n        }\n\n        public popTypeSpecializationCache() {\n            if (this.typeSpecializationStack.length) {\n                this.typeSpecializationStack.length--;\n            }\n        }\n\n        public findSpecializationForType(type: PullTypeSymbol) {\n            var specialization: PullTypeSymbol = null;\n\n            for (var i = this.typeSpecializationStack.length - 1; i >= 0; i--) {\n                specialization = (this.typeSpecializationStack[i])[type.getSymbolID().toString()];\n\n                if (specialization) {\n                    return specialization;\n                }\n            }\n\n            return type;\n        }\n\n        public postError(fileName: string, offset: number, length: number, diagnosticCode: DiagnosticCode, arguments: any[] = null, enclosingDecl: PullDecl = null, addToDecl = false): Diagnostic {\n            var diagnostic = new SemanticDiagnostic(fileName, offset, length, diagnosticCode, arguments);\n            this.postDiagnostic(diagnostic, enclosingDecl, addToDecl);\n\n            return diagnostic;\n        }\n\n        public postDiagnostic(diagnostic: Diagnostic, enclosingDecl: PullDecl, addToDecl: boolean): void {\n            if (this.inProvisionalResolution()) {\n                (this.contextStack[this.contextStack.length - 1]).postDiagnostic(diagnostic);\n            }\n            else if (!this.suppressErrors && enclosingDecl && addToDecl) {\n                enclosingDecl.addDiagnostic(diagnostic);\n            }\n        }\n\n        public startResolvingTypeArguments(ast: AST) {\n            this.genericASTResolutionStack[this.genericASTResolutionStack.length] = ast;\n        }\n\n        public isResolvingTypeArguments(ast: AST): boolean {\n            for (var i = 0; i < this.genericASTResolutionStack.length; i++) {\n                if (this.genericASTResolutionStack[i].getID() === ast.getID()) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public doneResolvingTypeArguments() {\n            this.genericASTResolutionStack.length--;\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export class SymbolAndDiagnostics<TSymbol extends PullSymbol> {\n        private static _empty = new SymbolAndDiagnostics(null, null);\n\n        constructor(public symbol: TSymbol,\n            public diagnostics: Diagnostic[]) {\n        }\n\n        public static create<TSymbol extends PullSymbol>(symbol: TSymbol, diagnostics: Diagnostic[]): SymbolAndDiagnostics<TSymbol> {\n            return new SymbolAndDiagnostics<TSymbol>(symbol, diagnostics);\n        }\n\n        public static empty<TSymbol extends PullSymbol>(): SymbolAndDiagnostics<TSymbol> {\n            return <SymbolAndDiagnostics<TSymbol>>SymbolAndDiagnostics._empty;\n        }\n\n        public static fromSymbol<TSymbol extends PullSymbol>(symbol: TSymbol): SymbolAndDiagnostics<TSymbol> {\n            return new SymbolAndDiagnostics<TSymbol>(symbol, null);\n        }\n\n        public addDiagnostic(diagnostic: Diagnostic): void {\n            Debug.assert(this !== SymbolAndDiagnostics._empty);\n\n            if (this.diagnostics === null) {\n                this.diagnostics = [];\n            }\n\n            this.diagnostics.push(diagnostic);\n        }\n\n        public withoutDiagnostics(): SymbolAndDiagnostics<TSymbol> {\n            if (!this.diagnostics) {\n                return this;\n            }\n\n            return SymbolAndDiagnostics.fromSymbol(this.symbol);\n        }\n    }\n\n    export interface IPullTypeCollection {\n        // returns null when types are exhausted\n        getLength(): number;\n        setTypeAtIndex(index: number, type: PullTypeSymbol): void;\n        getTypeAtIndex(index: number): PullTypeSymbol;\n    }\n\n    export interface IPullResolutionData {\n        actuals: PullTypeSymbol[];\n        exactCandidates: PullSignatureSymbol[];\n        conversionCandidates: PullSignatureSymbol[];\n\n        id: number;\n    }\n\n    export class PullResolutionDataCache {\n        private cacheSize = 16;\n        private rdCache: IPullResolutionData[] = [];\n        private nextUp: number = 0;\n\n        constructor() {\n            for (var i = 0; i < this.cacheSize; i++) {\n                this.rdCache[i] = {\n                    actuals: <PullTypeSymbol[]>[],\n                    exactCandidates: <PullSignatureSymbol[]>[],\n                    conversionCandidates: <PullSignatureSymbol[]>[],\n                    id: i\n                };\n            }\n        }\n\n        public getResolutionData(): IPullResolutionData {\n            var rd: IPullResolutionData = null;\n\n            if (this.nextUp < this.cacheSize) {\n                rd = this.rdCache[this.nextUp];\n            }\n\n            if (rd === null) {\n                this.cacheSize++;\n                rd = {\n                    actuals: <PullTypeSymbol[]>[],\n                    exactCandidates: <PullSignatureSymbol[]>[],\n                    conversionCandidates: <PullSignatureSymbol[]>[],\n                    id: this.cacheSize\n                };\n                this.rdCache[this.cacheSize] = rd;\n            }\n\n            // cache operates as a stack - RD is always served up in-order\n            this.nextUp++;\n\n            return rd;\n        }\n\n        public returnResolutionData(rd: IPullResolutionData) {\n            // Pop to save on array allocations, which are a bottleneck\n            // REVIEW: On some VMs, Array.pop doesn\'t always pop the last value in the array\n            rd.actuals.length = 0;\n            rd.exactCandidates.length = 0;\n            rd.conversionCandidates.length = 0;\n\n            this.nextUp = rd.id;\n        }\n    }\n\n    export interface PullApplicableSignature {\n        signature: PullSignatureSymbol;\n        hadProvisionalErrors: boolean;\n    }\n\n    export class PullAdditionalCallResolutionData {\n        public targetSymbol: PullSymbol = null;\n        public targetTypeSymbol: PullTypeSymbol = null;\n        public resolvedSignatures: PullSignatureSymbol[] = null;\n        public candidateSignature: PullSignatureSymbol = null;\n        public actualParametersContextTypeSymbols: PullTypeSymbol[] = null;\n    }\n\n    export class PullAdditionalObjectLiteralResolutionData {\n        public membersContextTypeSymbols: PullTypeSymbol[] = null;\n    }\n\n    // The resolver associates types with a given AST\n    export class PullTypeResolver {\n        private cachedArrayInterfaceType: PullTypeSymbol = null;\n        private cachedNumberInterfaceType: PullTypeSymbol = null;\n        private cachedStringInterfaceType: PullTypeSymbol = null;\n        private cachedBooleanInterfaceType: PullTypeSymbol = null;\n        private cachedObjectInterfaceType: PullTypeSymbol = null;\n        private cachedFunctionInterfaceType: PullTypeSymbol = null;\n        private cachedIArgumentsInterfaceType: PullTypeSymbol = null;\n        private cachedRegExpInterfaceType: PullTypeSymbol = null;\n\n        private cachedFunctionArgumentsSymbol: PullSymbol = null;\n\n        private assignableCache: any[] = <any>{};\n        private subtypeCache: any[] = <any>{};\n        private identicalCache: any[] = <any>{};\n\n        private resolutionDataCache = new PullResolutionDataCache();\n\n        private currentUnit: SemanticInfo = null;\n\n        constructor(private compilationSettings: CompilationSettings,\n                    public semanticInfoChain: SemanticInfoChain,\n                    private unitPath: string) {\n            this.cachedArrayInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Array\", [], PullElementKind.Interface);\n            this.cachedNumberInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Number\", [], PullElementKind.Interface);\n            this.cachedStringInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"String\", [], PullElementKind.Interface);\n            this.cachedBooleanInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Boolean\", [], PullElementKind.Interface);\n            this.cachedObjectInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Object\", [], PullElementKind.Interface);\n            this.cachedFunctionInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Function\", [], PullElementKind.Interface);\n            this.cachedIArgumentsInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"IArguments\", [], PullElementKind.Interface);\n            this.cachedRegExpInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"RegExp\", [], PullElementKind.Interface);\n\n            this.cachedFunctionArgumentsSymbol = new PullSymbol(\"arguments\", PullElementKind.Variable);\n            this.cachedFunctionArgumentsSymbol.setType(this.cachedIArgumentsInterfaceType ? this.cachedIArgumentsInterfaceType : this.semanticInfoChain.anyTypeSymbol);\n            this.cachedFunctionArgumentsSymbol.setResolved();\n\n            this.currentUnit = this.semanticInfoChain.getUnit(unitPath);\n        }\n\n        public getUnitPath() { return this.unitPath; }\n\n        public setUnitPath(unitPath: string) {\n            this.unitPath = unitPath;\n\n            this.currentUnit = this.semanticInfoChain.getUnit(unitPath);\n        }\n\n        public getDeclForAST(ast: AST): PullDecl {\n            return this.semanticInfoChain.getDeclForAST(ast, this.unitPath);\n        }\n\n        public getSymbolAndDiagnosticsForAST(ast: AST): SymbolAndDiagnostics<PullSymbol> {\n            return this.semanticInfoChain.getSymbolAndDiagnosticsForAST(ast, this.unitPath);\n        }\n\n        private setSymbolAndDiagnosticsForAST(ast: AST, symbolAndDiagnostics: SymbolAndDiagnostics<PullSymbol>, context: PullTypeResolutionContext): void {\n            if (context && (context.inProvisionalResolution() || context.inSpecialization)) {\n                return;\n            }\n\n            this.semanticInfoChain.setSymbolAndDiagnosticsForAST(ast, symbolAndDiagnostics, this.unitPath);\n        }\n\n        public getASTForSymbol(symbol: PullSymbol): AST {\n            return this.semanticInfoChain.getASTForSymbol(symbol, this.unitPath);\n        }\n\n        public getASTForDecl(decl: PullDecl): AST {\n            return this.semanticInfoChain.getASTForDecl(decl);\n        }\n\n        public getCachedArrayType() {\n            return this.cachedArrayInterfaceType;\n        }\n\n        public getNewErrorTypeSymbol(diagnostic: SemanticDiagnostic): PullErrorTypeSymbol {\n            return new PullErrorTypeSymbol(diagnostic, this.semanticInfoChain.anyTypeSymbol);\n        }\n\n        // returns a list of decls leading up to decl, inclusive\n        // PULLTODO: Don\'t bother using spans - obtain cached Decls from syntax nodes\n        private getPathToDecl(decl: PullDecl): PullDecl[] {\n            if (!decl) {\n                return [];\n            }\n\n            //var parentDecl: PullDecl = decl.getParentDecl();\n            //var decls: PullDecl[] = [];\n\n            //while (parentDecl) {\n            //    decls[decls.length] = parentDecl;\n            //    parentDecl = parentDecl.getParentDecl();\n            //}\n\n            //return decls;\n\n            var decls: PullDecl[] = [];\n            var searchDecls = this.semanticInfoChain.getUnit(decl.getScriptName()).getTopLevelDecls();\n\n            var spanToFind = decl.getSpan();\n            var candidateSpan: TextSpan = null;\n            var searchKinds = PullElementKind.SomeType | PullElementKind.SomeFunction | PullElementKind.SomeBlock;\n            var found = false;\n\n            while (true) {\n                // Of the top-level decls, find the one to search off of\n                found = false;\n                for (var i = 0; i < searchDecls.length; i++) {\n                    candidateSpan = searchDecls[i].getSpan();\n\n                    if (spanToFind.start() >= candidateSpan.start() && spanToFind.end() <= candidateSpan.end()) {\n                        if (searchDecls[i].getKind() & searchKinds) { // only consider types, which have scopes\n                            if (!(searchDecls[i].getKind() & PullElementKind.ObjectLiteral)) {\n                                decls[decls.length] = searchDecls[i];\n                            }\n                            searchDecls = searchDecls[i].getChildDecls();\n                            found = true;\n                        }\n                    }\n                }\n\n                if (!found) {\n                    break;\n                }\n            }\n\n            var parent = decl.getParentDecl();\n\n            // if the decl is a function expression, it would not have been parented during binding\n            if (decls.length && (decl.getKind() & (PullElementKind.SomeFunction |\n                PullElementKind.ObjectType |\n                PullElementKind.FunctionType |\n                PullElementKind.ConstructorType)) &&\n                (decls[decls.length - 1] != decl)) {\n\n                if (parent && decls[decls.length - 1] != parent && !(parent.getKind() & PullElementKind.ObjectLiteral)) {\n                    decls[decls.length] = parent;\n                }\n\n                decls[decls.length] = decl;\n            }\n\n            return decls;\n        }\n\n        public getEnclosingDecl(decl: PullDecl): PullDecl {\n            var declPath = this.getPathToDecl(decl);\n\n            if (!declPath.length) {\n                return null;\n            }\n            else if (declPath.length > 1 && declPath[declPath.length - 1] === decl) {\n                return declPath[declPath.length - 2];\n            }\n            else {\n                return declPath[declPath.length - 1];\n            }\n        }\n\n        //  Given a path to a name, e.g. [\"foo\"] or [\"Foo\", \"Baz\", \"bar\"], find the associated symbol\n        private findSymbolForPath(pathToName: string[], enclosingDecl: PullDecl, declKind: PullElementKind): PullSymbol {\n            if (!pathToName.length) {\n                return null;\n            }\n\n            var symbolName = pathToName[pathToName.length - 1];\n            var contextDeclPath = this.getPathToDecl(enclosingDecl);\n\n            var contextSymbolPath: string[] = [];\n            var nestedSymbolPath: string[] = [];\n\n            // first, search within the given symbol path\n            // (copy path to name so as not to mutate the input array)\n            for (var i = 0; i < pathToName.length; i++) {\n                nestedSymbolPath[nestedSymbolPath.length] = pathToName[i];\n            }\n\n            var symbol: PullSymbol = null;\n\n            while (nestedSymbolPath.length >= 2) {\n                symbol = this.semanticInfoChain.findSymbol(nestedSymbolPath, declKind);\n\n                if (symbol) {\n                    return symbol;\n                }\n                nestedSymbolPath.length -= 2;\n                nestedSymbolPath[nestedSymbolPath.length] = symbolName;\n            }\n\n            // next, try the enclosing context\n            for (var i = 0; i < contextDeclPath.length; i++) {\n                contextSymbolPath[contextSymbolPath.length] = contextDeclPath[i].getName();\n            }\n\n            for (var i = 0; i < pathToName.length; i++) {\n                contextSymbolPath[contextSymbolPath.length] = pathToName[i];\n            }\n\n            while (contextSymbolPath.length >= 2) {\n                symbol = this.semanticInfoChain.findSymbol(contextSymbolPath, declKind);\n\n                if (symbol) {\n                    return symbol;\n                }\n                contextSymbolPath.length -= 2;\n                contextSymbolPath[contextSymbolPath.length] = symbolName;\n            }\n\n            // finally, try searching globally\n            symbol = this.semanticInfoChain.findSymbol([symbolName], declKind);\n\n            return symbol;\n        }\n\n        // search for an unqualified symbol name within a given decl path\n        private getSymbolFromDeclPath(symbolName: string, declPath: PullDecl[], declSearchKind: PullElementKind): PullSymbol {\n            var symbol: PullSymbol = null;\n\n            // search backwards through the decl list\n            //  - if the decl in question is a function, search its members\n            //  - if the decl in question is a module, search the decl then the symbol\n            //  - Otherwise, search globally\n\n            var decl: PullDecl = null;\n            var childDecls: PullDecl[];\n            var declSymbol: PullTypeSymbol = null;\n            var declMembers: PullSymbol[];\n            var pathDeclKind: PullElementKind;\n            var valDecl: PullDecl = null;\n            var kind: PullElementKind;\n            var instanceSymbol: PullSymbol = null;\n            var instanceType: PullTypeSymbol = null;\n\n            for (var i = declPath.length - 1; i >= 0; i--) {\n                decl = declPath[i];\n                pathDeclKind = decl.getKind();\n\n                if (decl.getFlags() & PullElementFlags.DeclaredInAWithBlock) {\n                    return this.semanticInfoChain.anyTypeSymbol;\n                }\n\n                if (pathDeclKind & (PullElementKind.Container | PullElementKind.DynamicModule)) {\n\n                    // first check locally\n                    childDecls = decl.searchChildDecls(symbolName, (declSearchKind & PullElementKind.SomeType) !== 0);\n\n                    if (childDecls.length) {\n                        return childDecls[0].getSymbol();\n                    }\n\n                    if (declSearchKind & PullElementKind.SomeValue) {\n\n                        childDecls = decl.searchChildDecls(symbolName, true);\n\n                        if (childDecls.length) {\n                            valDecl = childDecls[0];\n\n                            if (valDecl) {\n                                return valDecl.getSymbol();\n                            }\n                        }\n\n                        valDecl = decl.getValueDecl();\n\n                        if (valDecl) {\n                            decl = valDecl;\n                        }\n                    }\n\n                    // otherwise, check the members\n                    declSymbol = decl.getSymbol().getType();\n                    declMembers = declSymbol.getMembers();\n\n                    for (var j = 0; j < declMembers.length; j++) {\n                        // PULLTODO: declkind should equal declkind, or is it ok to just mask the value?\n                        if (declMembers[j].getName() === symbolName) {\n                            kind = declMembers[j].getKind();\n\n                            if ((kind & declSearchKind) != 0) {\n                                return declMembers[j];\n                            }\n                        }\n                    }\n\n                }\n                else if ((declSearchKind & PullElementKind.SomeType) || !(pathDeclKind & PullElementKind.Class)) {\n                    var candidateSymbol: PullSymbol = null;\n\n                    // If the decl is a function expression, we still want to check its children since it may be shadowed by one\n                    // of its parameters\n                    if (pathDeclKind === PullElementKind.FunctionExpression && symbolName === (<PullFunctionExpressionDecl>decl).getFunctionExpressionName()) {\n                        candidateSymbol = decl.getSymbol();\n                    }\n\n                    childDecls = decl.searchChildDecls(symbolName, (declSearchKind & PullElementKind.SomeType) !== 0);\n\n                    if (childDecls.length) {\n                        return childDecls[0].getSymbol();\n                    }\n\n                    if (candidateSymbol) {\n                        return candidateSymbol;\n                    }\n                }\n            }\n\n            // otherwise, search globally\n            symbol = this.semanticInfoChain.findSymbol([symbolName], declSearchKind);\n\n            return symbol;\n        }\n\n        private getVisibleSymbolsFromDeclPath(declPath: PullDecl[], declSearchKind: PullElementKind): PullSymbol[] {\n            var symbols: PullSymbol[] = [];\n            var decl: PullDecl = null;\n            var childDecls: PullDecl[];\n            var pathDeclKind: PullElementKind;\n            var parameters: PullTypeParameterSymbol[];\n\n            for (var i = declPath.length - 1; i >= 0; i--) {\n                decl = declPath[i];\n                pathDeclKind = decl.getKind();\n                var declSymbol = <PullTypeSymbol>decl.getSymbol();\n                var declKind = decl.getKind();\n\n                // First add locals\n                // Child decls of classes and interfaces are members, and should only be visible as members of \'this\'\n                if (declKind !== PullElementKind.Class && declKind !== PullElementKind.Interface) {\n                    this.addSymbolsFromDecls(decl.getChildDecls(), declSearchKind, symbols);\n                }\n\n                switch (declKind) {\n                    case PullElementKind.Container:\n                    case PullElementKind.DynamicModule:\n                        // Add members\n                        var members: PullSymbol[] = [];\n                        if (declSymbol) {\n                            // Look up all symbols on the module type\n                            members = declSymbol.getMembers();\n                        }\n\n                        // Look up all symbols on the module instance type if it exists\n                        var instanceSymbol = (<PullContainerTypeSymbol > declSymbol).getInstanceSymbol();\n                        var searchTypeSymbol = instanceSymbol && instanceSymbol.getType();\n\n                        if (searchTypeSymbol) {\n                            members = members.concat(searchTypeSymbol.getMembers());\n                        }\n\n                        for (var j = 0; j < members.length; j++) {\n                            // PULLTODO: declkind should equal declkind, or is it ok to just mask the value?\n                            if ((members[j].getKind() & declSearchKind) != 0) {\n                                symbols.push(members[j]);\n                            }\n                        }\n\n                        break;\n\n                    case PullElementKind.Class:\n                    case PullElementKind.Interface:\n                        // Add generic types prameters\n                        if (declSymbol && declSymbol.isGeneric()) {\n                            parameters = declSymbol.getTypeParameters();\n                            for (var k = 0; k < parameters.length; k++) {\n                                symbols.push(parameters[k]);\n                            }\n                        }\n\n                        break;\n\n                    case PullElementKind.FunctionExpression:\n                        var functionExpressionName = (<PullFunctionExpressionDecl>decl).getFunctionExpressionName();\n                        if (declSymbol && functionExpressionName) {\n                            symbols.push(declSymbol);\n                        }\n                        // intentional fall through\n\n                    case PullElementKind.Function:\n                    case PullElementKind.ConstructorMethod:\n                    case PullElementKind.Method:\n                        if (declSymbol) {\n                            var functionType = declSymbol.getType();\n                            if (functionType.getHasGenericSignature()) {\n                                var signatures = (pathDeclKind === PullElementKind.ConstructorMethod) ? functionType.getConstructSignatures() : functionType.getCallSignatures();\n                                if (signatures && signatures.length) {\n                                    for (var j = 0; j < signatures.length; j++) {\n                                        var signature = signatures[j];\n                                        if (signature.isGeneric()) {\n                                            parameters = signature.getTypeParameters();\n                                            for (var k = 0; k < parameters.length; k++) {\n                                                symbols.push(parameters[k]);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        break;\n                }\n            }\n\n            // Get the global symbols\n            var units = this.semanticInfoChain.units;\n\n            for (var i = 0, n = units.length; i < n; i++) {\n                var unit = units[i];\n                if (unit === this.currentUnit && declPath.length != 0) {\n                    // Current unit has already been processed. skip it.\n                    continue;\n                }\n                var topLevelDecls = unit.getTopLevelDecls();\n                if (topLevelDecls.length) {\n                    for (var j = 0, m = topLevelDecls.length; j < m; j++) {\n                        var topLevelDecl = topLevelDecls[j];\n                        if (topLevelDecl.getKind() === PullElementKind.Script || topLevelDecl.getKind() === PullElementKind.Global) {\n                            this.addSymbolsFromDecls(topLevelDecl.getChildDecls(), declSearchKind, symbols);\n                        }\n                    }\n                }\n            }\n\n            return symbols;\n        }\n\n        private addSymbolsFromDecls(decls: PullDecl[], declSearchKind: PullElementKind, symbols: PullSymbol[]): void {\n            if (decls.length) {\n                for (var i = 0, n = decls.length; i < n; i++) {\n                    if (decls[i].getKind() & declSearchKind) {\n                        var symbol = decls[i].getSymbol();\n                        if (symbol) {\n                            symbols.push(symbol);\n                        }\n                    }\n                }\n            }\n        }\n\n        public getVisibleSymbols(enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol[] {\n\n            var declPath: PullDecl[] = enclosingDecl !== null ? this.getPathToDecl(enclosingDecl) : [];\n\n            if (enclosingDecl && !declPath.length) {\n                declPath = [enclosingDecl];\n            }\n\n            var declSearchKind: PullElementKind = PullElementKind.SomeType | PullElementKind.SomeValue;\n\n            return this.getVisibleSymbolsFromDeclPath(declPath, declSearchKind);\n        }\n\n        public getVisibleContextSymbols(enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol[] {\n            var contextualTypeSymbol = context.getContextualType();\n            if (!contextualTypeSymbol || this.isAnyOrEquivalent(contextualTypeSymbol)) {\n                return null;\n            }\n\n            var declSearchKind: PullElementKind = PullElementKind.SomeType | PullElementKind.SomeValue;\n            var members: PullSymbol[] = contextualTypeSymbol.getAllMembers(declSearchKind, /*includePrivate*/ false);\n\n            return members;\n        }\n\n        public getVisibleMembersFromExpression(expression: AST, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol[]{\n            var prevCanUseTypeSymbol = context.canUseTypeSymbol;\n            context.canUseTypeSymbol = true;\n            var lhs = this.resolveAST(expression, false, enclosingDecl, context).symbol;\n            context.canUseTypeSymbol = prevCanUseTypeSymbol;\n            var lhsType = lhs.getType();\n\n            if (!lhsType) {\n                return null;\n            }\n\n            if (this.isAnyOrEquivalent(lhsType)) {\n                return null;\n            }\n\n            // Figure out if privates are available under the current scope\n            var includePrivate = false;\n            var containerSymbol = lhsType;\n            if (containerSymbol.getKind() === PullElementKind.ConstructorType) {\n                containerSymbol = containerSymbol.getConstructSignatures()[0].getReturnType();\n            }\n\n            if (containerSymbol && containerSymbol.isClass()) {\n                var declPath = this.getPathToDecl(enclosingDecl);\n                if (declPath && declPath.length) {\n                    var declarations = containerSymbol.getDeclarations();\n                    for (var i = 0, n = declarations.length; i < n; i++) {\n                        var declaration = declarations[i];\n                        if (declPath.indexOf(declaration) >= 0) {\n                            includePrivate = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            var declSearchKind: PullElementKind = PullElementKind.SomeType | PullElementKind.SomeValue;\n\n            var members: PullSymbol[] = [];\n\n            // could be a type parameter with a contraint\n            if (lhsType.isTypeParameter()) {\n                var constraint = (<PullTypeParameterSymbol>lhsType).getConstraint();\n\n                if (constraint) {\n                    lhsType = constraint;\n                    members = lhsType.getAllMembers(declSearchKind, /*includePrivate*/ false);\n                }\n            }\n            else {\n                // could be an enum member\n                if (lhs.getKind() == PullElementKind.EnumMember) {\n                    lhsType = this.semanticInfoChain.numberTypeSymbol;\n                }\n\n                // could be a number\n                if (lhsType === this.semanticInfoChain.numberTypeSymbol && this.cachedNumberInterfaceType) {\n                    lhsType = this.cachedNumberInterfaceType;\n                }\n                // could be a string\n                else if (lhsType === this.semanticInfoChain.stringTypeSymbol && this.cachedStringInterfaceType) {\n                    lhsType = this.cachedStringInterfaceType;\n                }\n                // could be a boolean\n                else if (lhsType === this.semanticInfoChain.booleanTypeSymbol && this.cachedBooleanInterfaceType) {\n                    lhsType = this.cachedBooleanInterfaceType;\n                }\n\n                if (!lhsType.isResolved()) {\n                    var potentiallySpecializedType = <PullTypeSymbol>this.resolveDeclaredSymbol(lhsType, enclosingDecl, context);\n\n                    if (potentiallySpecializedType != lhsType) {\n                        if (!lhs.isType()) {\n                            context.setTypeInContext(lhs, potentiallySpecializedType);\n                        }\n\n                        lhsType = potentiallySpecializedType;\n                    }\n                }\n\n                members = lhsType.getAllMembers(declSearchKind, includePrivate);\n\n                if (lhsType.isContainer()) {\n                    var associatedInstance = (<PullContainerTypeSymbol>lhsType).getInstanceSymbol();\n                    if (associatedInstance) {\n                        var instanceType = associatedInstance.getType();\n                        var instanceMembers = instanceType.getAllMembers(declSearchKind, includePrivate);\n                        members = members.concat(instanceMembers);\n                    }\n                }\n                // Constructor types have a \"prototype\" property\n                else if (lhsType.isConstructor()) {\n                    var prototypeStr = \"prototype\";\n                    var prototypeSymbol = new PullSymbol(prototypeStr, PullElementKind.Property);\n                    var parentDecl = lhsType.getDeclarations()[0];\n                    var prototypeDecl = new PullDecl(prototypeStr, prototypeStr, parentDecl.getKind(), parentDecl.getFlags(), parentDecl.getSpan(), parentDecl.getScriptName());\n                    prototypeDecl.setParentDecl(parentDecl);\n                    prototypeSymbol.addDeclaration(prototypeDecl);\n                    // prototypeSymbol.setType(lhsType);\n                    members.push(prototypeSymbol);\n                }\n                else {\n                    var associatedContainerSymbol = lhsType.getAssociatedContainerType();\n                    if (associatedContainerSymbol) {\n                        var containerType = associatedContainerSymbol.getType();\n                        var containerMembers = containerType.getAllMembers(declSearchKind, includePrivate);\n                        members = members.concat(containerMembers);\n                    }\n                }\n            }\n\n            // could be a function symbol\n            if (lhsType.getCallSignatures().length && this.cachedFunctionInterfaceType) {\n                members = members.concat(this.cachedFunctionInterfaceType.getAllMembers(declSearchKind, /*includePrivate*/ false));\n            }\n\n            return members;\n        }\n\n        public isAnyOrEquivalent(type: PullTypeSymbol) {\n            return (type === this.semanticInfoChain.anyTypeSymbol) || type.isError();\n        }\n\n        public isNumberOrEquivalent(type: PullTypeSymbol) {\n            return (type === this.semanticInfoChain.numberTypeSymbol) || (this.cachedNumberInterfaceType && type === this.cachedNumberInterfaceType);\n        }\n\n        private isTypeArgumentOrWrapper(type: PullTypeSymbol) {\n            if (!type) {\n                return false;\n            }\n\n            if (!type.isGeneric()) {\n                return false;\n            }\n\n            if (type.isTypeParameter()) {\n                return true;\n            }\n\n            if (type.isArray()) {\n                return this.isTypeArgumentOrWrapper((<PullArrayTypeSymbol>type).getElementType());\n            }\n\n            var typeArguments = type.getTypeArguments();\n\n            if (typeArguments) {\n                for (var i = 0; i < typeArguments.length; i++) {\n                    if (this.isTypeArgumentOrWrapper(typeArguments[i])) {\n                        return true;\n                    }\n                }\n            }\n            else {\n                // if there are no type arguments, but the type is generic, we\'re just returning\n                // the unspecialized version of the type (e.g., via a recursive call)\n                return true;\n            }\n\n            return false;\n        }\n\n        public isArrayOrEquivalent(type: PullTypeSymbol) {\n            return type.isArray() || type == this.cachedArrayInterfaceType;\n        }\n\n        private findTypeSymbolForDynamicModule(idText: string, currentFileName: string, search: (id: string) => PullTypeSymbol): PullTypeSymbol {\n            var originalIdText = idText;\n            var symbol = search(idText);\n\n            if (symbol === null) {\n                // perhaps it\'s a dynamic module?\n                if (!symbol) {\n                    idText = swapQuotes(originalIdText);\n                    symbol = search(idText);\n                }\n\n                // Check the literal path first\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + \".ts\";\n                    symbol = search(idText);\n                }\n\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + \".d.ts\";\n                    symbol = search(idText);\n                }\n\n                // If the literal path doesn\'t work, begin the search\n                if (!symbol && !isRelative(originalIdText)) {\n                    // check the full path first, as this is the most likely scenario\n                    idText = originalIdText;\n\n                    var strippedIdText = stripQuotes(idText);\n\n                    // REVIEW: Technically, we shouldn\'t have to normalize here - we should normalize in addUnit.\n                    // Still, normalizing here alows any language services to be free of assumptions\n                    var path = getRootFilePath(switchToForwardSlashes(currentFileName));\n\n                    while (symbol === null && path != \"\") {\n                        idText = normalizePath(path + strippedIdText + \".ts\");\n                        symbol = search(idText);\n\n                        // check for .d.ts\n                        if (symbol === null) {\n                            idText = changePathToDTS(idText);\n                            symbol = search(idText);\n                        }\n\n                        if (symbol === null) {\n                            if (path === \'/\') {\n                                path = \'\';\n                            } else {\n                                path = normalizePath(path + \"..\");\n                                path = path && path != \'/\' ? path + \'/\' : path;\n                            }\n                        }\n                    }\n                }\n            }\n\n            return symbol;\n        }\n\n        // PULLTODO: VERY IMPORTANT\n        // Right now, the assumption is that the declaration\'s parse tree is still in memory\n        // we need to add a cache-in/cache-out mechanism so that we can break the dependency on in-memory ASTs\n        public resolveDeclaredSymbol(symbol: PullSymbol, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n            // This is called while we\'re resolving type references.  Make sure we\'re no longer\n            // considered to be in that state when we resolve the actual declaration.\n            var savedResolvingTypeReference = context.resolvingTypeReference;\n            context.resolvingTypeReference = false;\n\n            var result = this.resolveDeclaredSymbolWorker(symbol, enclosingDecl, context);\n            context.resolvingTypeReference = savedResolvingTypeReference;\n\n            return result;\n        }\n\n        private resolveDeclaredSymbolWorker(symbol: PullSymbol, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n            if (!symbol || symbol.isResolved()) {\n                return symbol;\n            }\n\n            if (symbol.isResolving()) {\n                if (!symbol.currentlyBeingSpecialized()) {\n                    if (!symbol.isType()) {\n                        symbol.setType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n\n                    return symbol;\n                }\n            }\n\n            var thisUnit = this.unitPath;\n\n            var decls = symbol.getDeclarations();\n\n            var ast: AST = null;\n\n            // We want to walk and resolve all associated decls, so we can catch\n            // cases like function overloads that may be spread across multiple\n            // logical declarations\n            for (var i = 0; i < decls.length; i++) {\n                var decl = decls[i];\n\n                ast = this.semanticInfoChain.getASTForDecl(decl);\n\n                // if it\'s an object literal member, just return the symbol and wait for\n                // the object lit to be resolved\n                if (!ast || ast.nodeType === NodeType.Member) {\n                    //var span = decl.getSpan();\n                    //context.postError(span.minChar, span.limChar - span.minChar, this.unitPath, \"Could not resolve location for symbol \'\" + symbol.getName() +\"\'\", enclosingDecl);\n\n                    // We\'ll return the cached results, and let the decl be corrected on the next invalidation\n                    this.setUnitPath(thisUnit);\n                    return symbol;\n                }\n\n                this.setUnitPath(decl.getScriptName());\n                this.resolveAST(ast, /*inContextuallyTypedAssignment*/false, enclosingDecl, context);\n            }\n\n            var typeArgs = symbol.isType() ? (<PullTypeSymbol>symbol).getTypeArguments() : null;\n\n            if (typeArgs && typeArgs.length) {\n                var typeParameters = (<PullTypeSymbol>symbol).getTypeParameters();\n                var typeCache: any = {}\n\n                for (var i = 0; i < typeParameters.length; i++) {\n                    typeCache[typeParameters[i].getSymbolID().toString()] = typeArgs[i];\n                }\n\n                context.pushTypeSpecializationCache(typeCache);\n\n                var specializedSymbol = specializeType((<PullTypeSymbol>symbol), typeArgs, this, enclosingDecl, context, ast);\n\n                context.popTypeSpecializationCache();\n\n                symbol = specializedSymbol;\n            }\n\n            this.setUnitPath(thisUnit);\n\n            return symbol;\n        }\n\n        //\n        // Resolve a module declaration\n        //\n        //\n        private resolveModuleDeclaration(ast: ModuleDeclaration, context: PullTypeResolutionContext): PullTypeSymbol {\n            var containerSymbol = <PullContainerTypeSymbol>this.getSymbolAndDiagnosticsForAST(ast).symbol;\n\n            if (containerSymbol.isResolved()) {\n                return containerSymbol;\n            }\n\n            containerSymbol.setResolved();\n\n            var containerDecl = this.getDeclForAST(ast);\n\n            if (containerDecl.getKind() != PullElementKind.Enum) {\n\n                var instanceSymbol = containerSymbol.getInstanceSymbol();\n\n                // resolve the instance variable, if neccesary\n                if (instanceSymbol) {\n                    this.resolveDeclaredSymbol(instanceSymbol, containerDecl.getParentDecl(), context);\n                }\n            }\n\n            return containerSymbol;\n        }\n\n        private isTypeRefWithoutTypeArgs(typeRef: TypeReference) {\n            if (typeRef.nodeType != NodeType.TypeRef) {\n                return false;\n            }\n\n            if (typeRef.term.nodeType == NodeType.Name) {\n                return true;\n            }\n            else if (typeRef.term.nodeType == NodeType.MemberAccessExpression) {\n                var binex = <BinaryExpression>typeRef.term;\n\n                if (binex.operand2.nodeType == NodeType.Name) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        //\n        // Resolve a reference type (class or interface) type parameters, implements and extends clause, members, call, construct and index signatures\n        //\n        private resolveReferenceTypeDeclaration(typeDeclAST: TypeDeclaration, context: PullTypeResolutionContext): PullSymbol {\n            var typeDecl: PullDecl = this.getDeclForAST(typeDeclAST);\n            var enclosingDecl = this.getEnclosingDecl(typeDecl);\n            var typeDeclSymbol = <PullTypeSymbol>typeDecl.getSymbol();\n            var typeDeclIsClass = typeDeclAST.nodeType === NodeType.ClassDeclaration;\n            var hasVisited = this.getSymbolAndDiagnosticsForAST(typeDeclAST) != null;\n\n            if ((typeDeclSymbol.isResolved() && hasVisited) || (typeDeclSymbol.isResolving() && !context.isInBaseTypeResolution())) {\n                return typeDeclSymbol;\n            }\n\n            typeDeclSymbol.startResolving();\n\n            // Resolve Type Parameters\n\n            if (!typeDeclSymbol.isResolved()) {\n                var typeDeclTypeParameters = typeDeclSymbol.getTypeParameters();\n                for (var i = 0; i < typeDeclTypeParameters.length; i++) {\n                    this.resolveDeclaredSymbol(typeDeclTypeParameters[i], typeDecl, context);\n                }\n            }\n\n            var wasInBaseTypeResolution = context.startBaseTypeResolution();\n\n            // if it\'s a \"split\" interface type, we\'ll need to consider constituent extends lists separately\n            if (!typeDeclIsClass && !hasVisited && typeDeclSymbol.isResolved()) {\n                typeDeclSymbol.resetKnownBaseTypeCount();\n            }\n\n            // Extends list\n            if (typeDeclAST.extendsList) {\n                var savedIsResolvingClassExtendedType = context.isResolvingClassExtendedType;\n                if (typeDeclIsClass) {\n                    context.isResolvingClassExtendedType = true;\n                }\n\n                for (var i = typeDeclSymbol.getKnownBaseTypeCount(); i < typeDeclAST.extendsList.members.length; i = typeDeclSymbol.getKnownBaseTypeCount()) {\n                    typeDeclSymbol.incrementKnownBaseCount();\n                    var parentType = this.resolveTypeReference(new TypeReference(typeDeclAST.extendsList.members[i], 0), typeDecl, context).symbol;\n\n                    if (typeDeclSymbol.isValidBaseKind(parentType, true)) {\n                        var resolvedParentType = parentType;\n                        if (parentType.isGeneric() && parentType.isResolved() && !parentType.getIsSpecialized()) {\n                            parentType = this.specializeTypeToAny(parentType, enclosingDecl, context);\n                        }\n                        if (!typeDeclSymbol.hasBase(parentType)) {\n                            this.setSymbolAndDiagnosticsForAST(typeDeclAST.extendsList.members[i], SymbolAndDiagnostics.fromSymbol(resolvedParentType), context);\n                            typeDeclSymbol.addExtendedType(parentType);\n                        }\n                    }\n                }\n\n                context.isResolvingClassExtendedType = savedIsResolvingClassExtendedType;\n            }\n\n            if (typeDeclAST.implementsList && typeDeclIsClass) {\n                var extendsCount = typeDeclAST.extendsList ? typeDeclAST.extendsList.members.length : 0;\n                for (var i = typeDeclSymbol.getKnownBaseTypeCount(); (i - extendsCount) < typeDeclAST.implementsList.members.length; i = typeDeclSymbol.getKnownBaseTypeCount()) {\n                    typeDeclSymbol.incrementKnownBaseCount();\n                    var implementedType = this.resolveTypeReference(new TypeReference(typeDeclAST.implementsList.members[i - extendsCount], 0), typeDecl, context).symbol;\n\n                    if (typeDeclSymbol.isValidBaseKind(implementedType, false)) {\n                        var resolvedImplementedType = implementedType;\n                        if (implementedType.isGeneric() && implementedType.isResolved() && !implementedType.getIsSpecialized()) {\n                            implementedType = this.specializeTypeToAny(implementedType, enclosingDecl, context);\n                        }\n\n                        if (!typeDeclSymbol.hasBase(implementedType)) {\n                            this.setSymbolAndDiagnosticsForAST(\n                                typeDeclAST.implementsList.members[i - extendsCount], SymbolAndDiagnostics.fromSymbol(resolvedImplementedType), context);\n                            typeDeclSymbol.addImplementedType(implementedType);\n                        }\n                    }\n                }\n            }\n            context.doneBaseTypeResolution(wasInBaseTypeResolution);\n            if (wasInBaseTypeResolution) {\n                // Do not resolve members as yet\n                return typeDeclSymbol;\n            }\n\n            if (!typeDeclSymbol.isResolved()) {\n                // Resolve members\n                var typeDeclMembers = typeDeclSymbol.getMembers();\n                for (var i = 0; i < typeDeclMembers.length; i++) {\n                    this.resolveDeclaredSymbol(typeDeclMembers[i], typeDecl, context);\n                }\n\n                if (!typeDeclIsClass) {\n                    // Resolve call, construct and index signatures\n                    var callSignatures = typeDeclSymbol.getCallSignatures();\n                    for (var i = 0; i < callSignatures.length; i++) {\n                        this.resolveDeclaredSymbol(callSignatures[i], typeDecl, context);\n                    }\n\n                    var constructSignatures = typeDeclSymbol.getConstructSignatures();\n                    for (var i = 0; i < constructSignatures.length; i++) {\n                        this.resolveDeclaredSymbol(constructSignatures[i], typeDecl, context);\n                    }\n\n                    var indexSignatures = typeDeclSymbol.getIndexSignatures();\n                    for (var i = 0; i < indexSignatures.length; i++) {\n                        this.resolveDeclaredSymbol(indexSignatures[i], typeDecl, context);\n                    }\n                }\n            }\n\n            this.setSymbolAndDiagnosticsForAST(typeDeclAST.name, SymbolAndDiagnostics.fromSymbol(typeDeclSymbol), context);\n            this.setSymbolAndDiagnosticsForAST(typeDeclAST, SymbolAndDiagnostics.fromSymbol(typeDeclSymbol), context);\n\n            typeDeclSymbol.setResolved();\n\n            return typeDeclSymbol;\n        }\n\n        //\n        // Resolve a class declaration\n        //\n        // A class\'s implements and extends lists are not pre-bound, so they must be bound here\n        // Once bound, we can add the parent type\'s members to the class\n        //\n        private resolveClassDeclaration(classDeclAST: ClassDeclaration, context: PullTypeResolutionContext): PullTypeSymbol {\n            var classDecl: PullDecl = this.getDeclForAST(classDeclAST);\n            var classDeclSymbol = <PullClassTypeSymbol>classDecl.getSymbol();\n            if (classDeclSymbol.isResolved()) {\n                return classDeclSymbol;\n            }\n\n            this.resolveReferenceTypeDeclaration(classDeclAST, context);\n\n            var constructorMethod = classDeclSymbol.getConstructorMethod();\n            var extendedTypes = classDeclSymbol.getExtendedTypes();\n            var parentType = extendedTypes.length ? extendedTypes[0] : null;\n\n            if (constructorMethod) {\n                var constructorTypeSymbol = constructorMethod.getType();\n\n                var constructSignatures = constructorTypeSymbol.getConstructSignatures();\n\n                if (!constructSignatures.length) {\n                    var constructorSignature: PullSignatureSymbol;\n\n                    // inherit parent\'s constructor signatures\n                    if (parentType) {\n                        var parentClass = <PullClassTypeSymbol>parentType;\n                        var parentConstructor = parentClass.getConstructorMethod();\n                        var parentConstructorType = parentConstructor.getType();\n                        var parentConstructSignatures = parentConstructorType.getConstructSignatures();\n\n                        var parentConstructSignature: PullSignatureSymbol;\n                        var parentParameters: PullSymbol[];\n                        for (var i = 0; i < parentConstructSignatures.length; i++) {\n                            // create a new signature for each parent constructor\n                            parentConstructSignature = parentConstructSignatures[i];\n                            parentParameters = parentConstructSignature.getParameters();\n\n                            constructorSignature = parentConstructSignature.isDefinition() ?\n                                new PullDefinitionSignatureSymbol(PullElementKind.ConstructSignature) : new PullSignatureSymbol(PullElementKind.ConstructSignature);\n                            constructorSignature.setReturnType(classDeclSymbol);\n\n                            for (var j = 0; j < parentParameters.length; j++) {\n                                constructorSignature.addParameter(parentParameters[j], parentParameters[j].getIsOptional());\n                            }\n\n                            constructorTypeSymbol.addConstructSignature(constructorSignature);\n                            constructorSignature.addDeclaration(classDecl);\n                        }\n                    }\n                    else { // PULLREVIEW: This likely won\'t execute, unless there\'s some serious out-of-order resolution issues\n                        constructorSignature = new PullSignatureSymbol(PullElementKind.ConstructSignature);\n                        constructorSignature.setReturnType(classDeclSymbol);\n                        constructorTypeSymbol.addConstructSignature(constructorSignature);\n                        constructorSignature.addDeclaration(classDecl);\n                    }\n                }\n\n                if (!classDeclSymbol.isResolved()) {\n                    return classDeclSymbol;\n                }\n\n                var constructorMembers = constructorTypeSymbol.getMembers();\n\n                this.resolveDeclaredSymbol(constructorMethod, classDecl, context);\n\n                for (var i = 0; i < constructorMembers.length; i++) {\n                    this.resolveDeclaredSymbol(constructorMembers[i], classDecl, context);\n                }\n\n                if (parentType) {\n                    var parentConstructorSymbol = (<PullClassTypeSymbol>parentType).getConstructorMethod();\n                    var parentConstructorTypeSymbol = parentConstructorSymbol.getType();\n\n                    if (!constructorTypeSymbol.hasBase(parentConstructorTypeSymbol)) {\n                        constructorTypeSymbol.addExtendedType(parentConstructorTypeSymbol);\n                    }\n                }\n            }\n\n            return classDeclSymbol;\n        }\n\n        private resolveInterfaceDeclaration(interfaceDeclAST: TypeDeclaration, context: PullTypeResolutionContext): PullTypeSymbol {\n            var interfaceDecl: PullDecl = this.getDeclForAST(interfaceDeclAST);\n            var interfaceDeclSymbol = <PullTypeSymbol>interfaceDecl.getSymbol();\n\n            this.resolveReferenceTypeDeclaration(interfaceDeclAST, context);\n            return interfaceDeclSymbol;\n        }\n\n        private resolveImportDeclaration(importStatementAST: ImportDeclaration, context: PullTypeResolutionContext): PullTypeSymbol {\n            // internal or external? (Does it matter?)\n            var importDecl: PullDecl = this.getDeclForAST(importStatementAST);\n            var enclosingDecl = this.getEnclosingDecl(importDecl);\n            var importDeclSymbol = <PullTypeAliasSymbol>importDecl.getSymbol();\n\n            var aliasName = importStatementAST.id.text;\n            var aliasedType: PullTypeSymbol = null;\n\n            if (importDeclSymbol.isResolved()) {\n                return importDeclSymbol;\n            }\n\n            importDeclSymbol.startResolving();\n\n            // the alias name may be a string literal, in which case we\'ll need to convert it to a type\n            // reference\n            if (importStatementAST.alias.nodeType === NodeType.TypeRef) { // dotted name\n                aliasedType = this.resolveTypeReference(<TypeReference>importStatementAST.alias, enclosingDecl, context).symbol;\n            }\n            else if (importStatementAST.alias.nodeType === NodeType.Name) { // name or dynamic module name\n                var text = (<Identifier>importStatementAST.alias).actualText;\n\n                if (!isQuoted(text)) {\n                    aliasedType = this.resolveTypeReference(new TypeReference(importStatementAST.alias, 0), enclosingDecl, context).symbol;\n                }\n                else { // dynamic module name (string literal)\n                    var modPath = (<StringLiteral>importStatementAST.alias).actualText;\n                    var declPath = this.getPathToDecl(enclosingDecl);\n\n                    importStatementAST.isDynamicImport = true;\n\n                    aliasedType = this.findTypeSymbolForDynamicModule(modPath, importDecl.getScriptName(), (s: string) => <PullTypeSymbol>this.getSymbolFromDeclPath(s, declPath, PullElementKind.SomeType));\n\n                    if (aliasedType) {\n                        this.currentUnit.addDynamicModuleImport(importDeclSymbol);\n                    }\n                    else {\n                        importDecl.addDiagnostic(\n                            new SemanticDiagnostic(this.currentUnit.getPath(), importStatementAST.minChar, importStatementAST.getLength(), DiagnosticCode.Unable_to_resolve_external_module__0_, [text]));\n                        aliasedType = this.semanticInfoChain.anyTypeSymbol;\n                    }\n                }\n            }\n\n            if (aliasedType) {\n                if (!aliasedType.isContainer()) {\n                    importDecl.addDiagnostic(\n                        new Diagnostic(this.currentUnit.getPath(), importStatementAST.minChar, importStatementAST.getLength(), DiagnosticCode.Module_cannot_be_aliased_to_a_non_module_type));\n                }\n                else {\n                    var exportedAssignmentSymbol = (<PullContainerTypeSymbol>aliasedType).getExportAssignedSymbol();\n                    \n                    if (exportedAssignmentSymbol) {\n                        importDeclSymbol.setExportAssignmentSymbol(exportedAssignmentSymbol);\n                        if (!(exportedAssignmentSymbol.getKind() & PullElementKind.SomeTypeReference)) {\n                            importDeclSymbol.setIsUsedAsValue();\n                        }\n                    }\n                }\n\n                importDeclSymbol.setAliasedType(aliasedType);\n                importDeclSymbol.setResolved();\n\n                // Import declaration isn\'t contextual so set the symbol and diagnostic message irrespective of the context\n                this.semanticInfoChain.setSymbolAndDiagnosticsForAST(importStatementAST.alias, SymbolAndDiagnostics.fromSymbol(aliasedType), this.unitPath);\n            }\n\n            return importDeclSymbol;\n        }\n\n        public resolveExportAssignmentStatement(exportAssignmentAST: ExportAssignment, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n\n            // get the identifier text\n            var id = exportAssignmentAST.id.text;\n            var nameSymbol: PullSymbol = null;\n\n            var parentSymbol = enclosingDecl.getSymbol();\n\n            if (!parentSymbol.isType() && (<PullTypeSymbol>parentSymbol).isContainer()) {\n                // Error\n                // Export assignments may only be used at the top-level of external modules\n                enclosingDecl.addDiagnostic(\n                    new Diagnostic(enclosingDecl.getScriptName(), exportAssignmentAST.minChar, exportAssignmentAST.getLength(), DiagnosticCode.Export_assignments_may_only_be_used_in_External_modules));\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n            }\n\n            var declPath: PullDecl[] = enclosingDecl !== null ? this.getPathToDecl(enclosingDecl) : [];\n\n            if (enclosingDecl && !declPath.length) {\n                declPath = [enclosingDecl];\n            }\n\n            nameSymbol = this.getSymbolFromDeclPath(id, declPath, PullElementKind.SomeType);\n\n            if (!nameSymbol) {\n                nameSymbol = this.getSymbolFromDeclPath(id, declPath, PullElementKind.SomeValue);\n                nameSymbol = this.resolveNameSymbol(nameSymbol, context);\n            }\n\n            if (!nameSymbol) {\n                // Error\n                // Could_not_find_symbol__0_\n                enclosingDecl.addDiagnostic(\n                    new SemanticDiagnostic(enclosingDecl.getScriptName(), exportAssignmentAST.minChar, exportAssignmentAST.getLength(), DiagnosticCode.Could_not_find_symbol__0_, [id]));\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n            }\n\n            if (!nameSymbol.isResolved()) {\n                this.resolveDeclaredSymbol(nameSymbol, enclosingDecl, context);\n            }\n\n            var nameSymbolKind = nameSymbol.getKind();\n            var acceptableAlias = (nameSymbolKind & PullElementKind.AcceptableAlias) != 0;\n\n            if (!acceptableAlias && nameSymbolKind == PullElementKind.TypeAlias) {\n                var aliasedType = (<PullTypeAliasSymbol>nameSymbol).getType();\n\n                // It\'s ok if the import statement aliases an internal module\n                if (aliasedType.getKind() != PullElementKind.DynamicModule) {\n                    acceptableAlias = true;\n                }\n                else {\n                    // If the import statement aliases an external module, see if there\'s an export assignment\n                    var exportAssignedSymbol = (<PullTypeAliasSymbol>nameSymbol).getExportAssignedSymbol();\n                    \n                    if (exportAssignedSymbol) {\n                        acceptableAlias = true;\n                    }\n                }\n            }\n\n            // check for valid export assignment type (variable, function, class, interface, enum, internal module)\n            if (!acceptableAlias) {\n                // Error\n                // Export assignments may only be made with variables, functions, classes, interfaces, enums and internal modules\n                enclosingDecl.addDiagnostic(\n                    new Diagnostic(enclosingDecl.getScriptName(), exportAssignmentAST.minChar, exportAssignmentAST.getLength(), DiagnosticCode.Export_assignments_may_only_be_made_with_acceptable_kinds));\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n            }\n\n            (<PullContainerTypeSymbol>parentSymbol).setExportAssignedSymbol(nameSymbol);\n\n            return SymbolAndDiagnostics.fromSymbol(nameSymbol);\n        }\n\n        public resolveFunctionTypeSignature(funcDeclAST: FunctionDeclaration, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullTypeSymbol {\n            var funcDeclSymbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(funcDeclAST);\n            var funcDeclSymbol = funcDeclSymbolAndDiagnostics && <PullFunctionTypeSymbol>funcDeclSymbolAndDiagnostics.symbol;\n\n            if (!funcDeclSymbol) {\n                var semanticInfo = this.semanticInfoChain.getUnit(this.unitPath);\n                var declCollectionContext = new DeclCollectionContext(semanticInfo);\n\n                declCollectionContext.scriptName = this.unitPath;\n\n                if (enclosingDecl) {\n                    declCollectionContext.pushParent(enclosingDecl);\n                }\n\n                getAstWalkerFactory().walk(funcDeclAST, preCollectDecls, postCollectDecls, null, declCollectionContext);\n\n                var functionDecl = this.getDeclForAST(funcDeclAST);\n\n                var binder = new PullSymbolBinder(this.compilationSettings, this.semanticInfoChain);\n                binder.setUnit(this.unitPath);\n                if (functionDecl.getKind() === PullElementKind.ConstructorType) {\n                    binder.bindConstructorTypeDeclarationToPullSymbol(functionDecl);\n                }\n                else {\n                    binder.bindFunctionTypeDeclarationToPullSymbol(functionDecl);\n                }\n\n                funcDeclSymbol = <PullFunctionTypeSymbol>functionDecl.getSymbol();\n            }\n\n            var signature = funcDeclSymbol.getKind() === PullElementKind.ConstructorType ? funcDeclSymbol.getConstructSignatures()[0] : funcDeclSymbol.getCallSignatures()[0];\n\n            // resolve the return type annotation\n            if (funcDeclAST.returnTypeAnnotation) {\n                var returnTypeSymbol = this.resolveTypeReference(<TypeReference>funcDeclAST.returnTypeAnnotation, enclosingDecl, context).symbol;\n\n                signature.setReturnType(returnTypeSymbol);\n\n                if (this.isTypeArgumentOrWrapper(returnTypeSymbol)) {\n                    signature.setHasGenericParameter();\n\n                    if (funcDeclSymbol) {\n                        funcDeclSymbol.getType().setHasGenericSignature();\n                    }\n                }\n            }\n            else {\n                signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n            }\n\n            // link parameters and resolve their annotations\n            if (funcDeclAST.arguments) {\n                for (var i = 0; i < funcDeclAST.arguments.members.length; i++) {\n                    this.resolveFunctionTypeSignatureParameter(<Parameter>funcDeclAST.arguments.members[i], signature, enclosingDecl, context);\n                }\n            }\n\n            if (signature.hasGenericParameter()) {\n                // PULLREVIEW: This is split into a spearate if statement to make debugging slightly easier...\n                if (funcDeclSymbol) {\n                    funcDeclSymbol.getType().setHasGenericSignature();\n                }\n            }\n\n            funcDeclSymbol.setResolved();\n\n            return funcDeclSymbol;\n        }\n\n        private resolveFunctionTypeSignatureParameter(argDeclAST: Parameter, signature: PullSignatureSymbol, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n            var paramSymbol = this.getSymbolAndDiagnosticsForAST(argDeclAST).symbol;\n\n            if (argDeclAST.typeExpr) {\n                var typeRef = this.resolveTypeReference(<TypeReference>argDeclAST.typeExpr, enclosingDecl, context).symbol;\n\n                if (paramSymbol.getIsVarArg() && !(typeRef.isArray() || typeRef == this.cachedArrayInterfaceType)) {\n                    var diagnostic = context.postError(this.unitPath, argDeclAST.minChar, argDeclAST.getLength(), DiagnosticCode.Rest_parameters_must_be_array_types, null, enclosingDecl);\n                    typeRef = this.getNewErrorTypeSymbol(diagnostic);\n                }\n\n                context.setTypeInContext(paramSymbol, typeRef);\n\n                // if the typeExprSymbol is generic, set the \"hasGenericParameter\" field on the enclosing signature\n                if (this.isTypeArgumentOrWrapper(typeRef)) {\n                    signature.setHasGenericParameter();\n                }\n            } // PULLTODO: default values?\n            else {\n                if (paramSymbol.getIsVarArg() && paramSymbol.getType()) {\n                    if (this.cachedArrayInterfaceType) {\n                        context.setTypeInContext(paramSymbol, specializeToArrayType(this.cachedArrayInterfaceType, paramSymbol.getType(), this, context));\n                    }\n                    else {\n                        context.setTypeInContext(paramSymbol, paramSymbol.getType());\n                    }\n                }\n                else {\n                    context.setTypeInContext(paramSymbol, this.semanticInfoChain.anyTypeSymbol);\n                }\n            }\n\n            paramSymbol.setResolved();\n        }\n\n        private resolveFunctionExpressionParameter(argDeclAST: Parameter, contextParam: PullSymbol, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n            var paramSymbol = this.getSymbolAndDiagnosticsForAST(argDeclAST).symbol;\n\n            if (argDeclAST.typeExpr) {\n                var typeRef = this.resolveTypeReference(<TypeReference>argDeclAST.typeExpr, enclosingDecl, context).symbol;\n\n                if (paramSymbol.getIsVarArg() && !(typeRef.isArray() || typeRef == this.cachedArrayInterfaceType)) {\n                    var diagnostic = context.postError(this.unitPath, argDeclAST.minChar, argDeclAST.getLength(), DiagnosticCode.Rest_parameters_must_be_array_types, null, enclosingDecl);\n                    typeRef = this.getNewErrorTypeSymbol(diagnostic);\n                }\n\n                context.setTypeInContext(paramSymbol, typeRef);\n            } // PULLTODO: default values?\n            else {\n                if (paramSymbol.getIsVarArg() && paramSymbol.getType()) {\n                    if (this.cachedArrayInterfaceType) {\n                        context.setTypeInContext(paramSymbol, specializeToArrayType(this.cachedArrayInterfaceType, paramSymbol.getType(), this, context));\n                    }\n                    else {\n                        context.setTypeInContext(paramSymbol, paramSymbol.getType());\n                    }\n                }\n                else if (contextParam) {\n                    context.setTypeInContext(paramSymbol, contextParam.getType());\n                }\n                else {\n                    context.setTypeInContext(paramSymbol, this.semanticInfoChain.anyTypeSymbol);\n                }\n            }\n\n            paramSymbol.setResolved();\n        }\n\n        public resolveInterfaceTypeReference(interfaceDeclAST: NamedDeclaration, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullTypeSymbol {\n            var interfaceSymbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(interfaceDeclAST);\n            var interfaceSymbol = interfaceSymbolAndDiagnostics && <PullTypeSymbol>interfaceSymbolAndDiagnostics.symbol;\n\n            if (!interfaceSymbol) {\n                var semanticInfo = this.semanticInfoChain.getUnit(this.unitPath);\n                var declCollectionContext = new DeclCollectionContext(semanticInfo);\n\n                declCollectionContext.scriptName = this.unitPath;\n\n                if (enclosingDecl) {\n                    declCollectionContext.pushParent(enclosingDecl);\n                }\n\n                getAstWalkerFactory().walk(interfaceDeclAST, preCollectDecls, postCollectDecls, null, declCollectionContext);\n\n                var interfaceDecl = this.getDeclForAST(interfaceDeclAST);\n\n                var binder = new PullSymbolBinder(this.compilationSettings, this.semanticInfoChain);\n\n                binder.setUnit(this.unitPath);\n                binder.bindObjectTypeDeclarationToPullSymbol(interfaceDecl);\n\n                interfaceSymbol = <PullFunctionTypeSymbol>interfaceDecl.getSymbol();\n            }\n\n            if (interfaceDeclAST.members) {\n\n                var memberSymbol: PullSymbol = null;\n                var memberType: PullTypeSymbol = null;\n                var typeMembers = <ASTList> interfaceDeclAST.members;\n\n                for (var i = 0; i < typeMembers.members.length; i++) {\n                    memberSymbol = this.getSymbolAndDiagnosticsForAST(typeMembers.members[i]).symbol;\n\n                    this.resolveDeclaredSymbol(memberSymbol, enclosingDecl, context);\n\n                    memberType = memberSymbol.getType();\n\n                    if (memberType && memberType.isGeneric()) {\n                        interfaceSymbol.setHasGenericMember();\n                    }\n                }\n            }\n\n            interfaceSymbol.setResolved();\n\n            return interfaceSymbol;\n        }\n\n        public resolveTypeReference(typeRef: TypeReference, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullTypeSymbol> {\n            if (typeRef === null) {\n                return null;\n            }\n\n            var symbolAndDiagnostics = <SymbolAndDiagnostics<PullTypeSymbol>>this.getSymbolAndDiagnosticsForAST(typeRef);\n            if (!symbolAndDiagnostics) {\n                symbolAndDiagnostics = this.computeTypeReferenceSymbol(typeRef, enclosingDecl, context);\n\n                if (!symbolAndDiagnostics.symbol.isGeneric()) {\n                    this.setSymbolAndDiagnosticsForAST(typeRef, symbolAndDiagnostics, context);\n                }\n            }\n\n            return symbolAndDiagnostics;\n        }\n\n        private computeTypeReferenceSymbol(typeRef: TypeReference, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullTypeSymbol> {\n            // the type reference can be\n            // a name\n            // a function\n            // an interface\n            // a dotted name\n            // an array of any of the above\n\n            var typeDeclSymbol: PullTypeSymbol = null;\n\n            // a name\n            if (typeRef.term.nodeType === NodeType.Name) {\n                var prevResolvingTypeReference = context.resolvingTypeReference;\n                context.resolvingTypeReference = true;\n                typeDeclSymbol = <PullTypeSymbol>this.resolveTypeNameExpression(<Identifier>typeRef.term, enclosingDecl, context).symbol;\n                context.resolvingTypeReference = prevResolvingTypeReference;\n            }\n            // a function\n            else if (typeRef.term.nodeType === NodeType.FunctionDeclaration) {\n                typeDeclSymbol = this.resolveFunctionTypeSignature(<FunctionDeclaration>typeRef.term, enclosingDecl, context);\n            }\n            // an interface\n            else if (typeRef.term.nodeType === NodeType.InterfaceDeclaration) {\n                typeDeclSymbol = this.resolveInterfaceTypeReference(<NamedDeclaration>typeRef.term, enclosingDecl, context);\n            }\n            else if (typeRef.term.nodeType === NodeType.GenericType) {\n                typeDeclSymbol = <PullTypeSymbol>this.resolveGenericTypeReference(<GenericType>typeRef.term, enclosingDecl, context).symbol;\n            }\n            // a dotted name\n            else if (typeRef.term.nodeType === NodeType.MemberAccessExpression) {\n                // assemble the dotted name path\n                var dottedName = <BinaryExpression> typeRef.term;\n\n                // find the decl\n                prevResolvingTypeReference = context.resolvingTypeReference;\n                typeDeclSymbol = <PullTypeSymbol>this.resolveDottedTypeNameExpression(dottedName, enclosingDecl, context).symbol;\n                context.resolvingTypeReference = prevResolvingTypeReference;\n            }\n            else if (typeRef.term.nodeType === NodeType.StringLiteral) {\n                var stringConstantAST = <StringLiteral>typeRef.term;\n                typeDeclSymbol = new PullStringConstantTypeSymbol(stringConstantAST.actualText);\n                typeDeclSymbol.addDeclaration(new PullDecl(stringConstantAST.actualText, stringConstantAST.actualText,\n                    typeDeclSymbol.getKind(), null,\n                    new TextSpan(stringConstantAST.minChar, stringConstantAST.getLength()), enclosingDecl.getScriptName()));\n            }\n\n            if (!typeDeclSymbol) {\n                return SymbolAndDiagnostics.create(\n                    this.getNewErrorTypeSymbol(null),\n                    [context.postError(this.unitPath, typeRef.term.minChar, typeRef.term.getLength(), DiagnosticCode.Unable_to_resolve_type)]);\n            }\n\n            if (typeDeclSymbol.isError()) {\n                // TODO(cyrusn): We shouldn\'t be returning early here.  Even if we couldn\'t resolve \n                // the type name, we still want to be able to create an array from it if it had\n                // array parameters.\n                // \n                return SymbolAndDiagnostics.fromSymbol(typeDeclSymbol);\n            }\n\n            // an array of any of the above\n            if (typeRef.arrayCount) {\n\n                var arraySymbol: PullTypeSymbol = typeDeclSymbol.getArrayType();\n\n                // otherwise, create a new array symbol\n                if (!arraySymbol) {\n                    // for each member in the array interface symbol, substitute in the the typeDecl symbol for \"_element\"\n\n                    if (!this.cachedArrayInterfaceType) {\n                        this.cachedArrayInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Array\", this.getPathToDecl(enclosingDecl), PullElementKind.Interface);\n                    }\n\n                    if (this.cachedArrayInterfaceType && !this.cachedArrayInterfaceType.isResolved()) {\n                        this.resolveDeclaredSymbol(this.cachedArrayInterfaceType, enclosingDecl, context);\n                    }\n\n                    arraySymbol = specializeToArrayType(this.semanticInfoChain.elementTypeSymbol, typeDeclSymbol, this, context);\n\n                    if (!arraySymbol) {\n                        arraySymbol = this.semanticInfoChain.anyTypeSymbol;\n                    }\n                }\n\n                if (this.cachedArrayInterfaceType && typeRef.arrayCount > 1) {\n                    for (var arity = typeRef.arrayCount - 1; arity > 0; arity--) {\n                        var existingArraySymbol = arraySymbol.getArrayType();\n\n                        if (!existingArraySymbol) {\n                            arraySymbol = specializeToArrayType(this.semanticInfoChain.elementTypeSymbol, arraySymbol, this, context);\n                        }\n                        else {\n                            arraySymbol = existingArraySymbol;\n                        }\n                    }\n                }\n\n                typeDeclSymbol = arraySymbol;\n            }\n\n            return SymbolAndDiagnostics.fromSymbol(typeDeclSymbol);\n        }\n\n        // Also resolves parameter declarations\n        private resolveVariableDeclaration(varDecl: BoundDecl, context: PullTypeResolutionContext, enclosingDecl?: PullDecl): PullSymbol {\n\n            var decl: PullDecl = this.getDeclForAST(varDecl);\n            var declSymbol = decl.getSymbol();\n            var declParameterSymbol: PullSymbol = decl.getValueDecl() ? decl.getValueDecl().getSymbol() : null;\n\n            if (declSymbol.isResolved()) {\n                return declSymbol.getType();\n            }\n\n            if (declSymbol.isResolving()) {\n                // PULLTODO: Error or warning?\n                if (!context.inSpecialization) {\n                    declSymbol.setType(this.semanticInfoChain.anyTypeSymbol);\n                    declSymbol.setResolved();\n                    return declSymbol;//this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n\n            declSymbol.startResolving();\n\n            var wrapperDecl = this.getEnclosingDecl(decl);\n            wrapperDecl = wrapperDecl ? wrapperDecl : enclosingDecl;\n\n            var diagnostic: Diagnostic = null;\n\n            // Does this have a type expression? If so, that\'s the type\n            if (varDecl.typeExpr) {\n                var typeExprSymbol = this.resolveTypeReference(<TypeReference>varDecl.typeExpr, wrapperDecl, context).symbol;\n\n                if (!typeExprSymbol) {\n                    diagnostic = context.postError(this.unitPath, varDecl.minChar, varDecl.getLength(), DiagnosticCode.Unable_to_resolve_type_of__0_, [varDecl.id.actualText], decl);\n                    declSymbol.setType(this.getNewErrorTypeSymbol(diagnostic));\n\n                    if (declParameterSymbol) {\n                        context.setTypeInContext(declParameterSymbol, this.semanticInfoChain.anyTypeSymbol);\n                    }\n                }\n                else {\n\n                    if (typeExprSymbol.isNamedTypeSymbol() && typeExprSymbol.isGeneric() && !typeExprSymbol.isTypeParameter() && !this.isArrayOrEquivalent(typeExprSymbol) && typeExprSymbol.isResolved() && !typeExprSymbol.getIsSpecialized() && this.isTypeRefWithoutTypeArgs(<TypeReference>varDecl.typeExpr)) {\n                        typeExprSymbol = this.specializeTypeToAny(typeExprSymbol, enclosingDecl, context);\n                    }\n\n                    // PULLREVIEW: If the type annotation is a container type, use the module instance type\n                    if (typeExprSymbol.isContainer()) {\n                        var instanceSymbol = (<PullContainerTypeSymbol>typeExprSymbol.getType()).getInstanceSymbol()\n\n                        if (!instanceSymbol || !PullHelpers.symbolIsEnum(instanceSymbol)) {\n                            diagnostic = context.postError(this.unitPath, varDecl.minChar, varDecl.getLength(), DiagnosticCode.Tried_to_set_variable_type_to_module_type__0__, [typeExprSymbol.toString()], decl);\n                            typeExprSymbol = this.getNewErrorTypeSymbol(diagnostic);\n                        }\n                        else {\n                            typeExprSymbol = instanceSymbol.getType();\n                        }\n                    }\n                    else if (declSymbol.getIsVarArg() && !(typeExprSymbol.isArray() || typeExprSymbol == this.cachedArrayInterfaceType) && this.cachedArrayInterfaceType) {\n                        var diagnostic = context.postError(this.unitPath, varDecl.minChar, varDecl.getLength(), DiagnosticCode.Rest_parameters_must_be_array_types, null, enclosingDecl);\n                        typeExprSymbol = this.getNewErrorTypeSymbol(diagnostic);\n                    }\n\n                    context.setTypeInContext(declSymbol, typeExprSymbol);\n\n                    if (declParameterSymbol) {\n                        declParameterSymbol.setType(typeExprSymbol);\n                    }\n\n                    // if the typeExprSymbol is generic, set the \"hasGenericParameter\" field on the enclosing signature\n                    // we filter out arrays, since for those we just want to know if their element type is a type parameter...\n                    if ((varDecl.nodeType === NodeType.Parameter) && enclosingDecl && ((typeExprSymbol.isGeneric() && !typeExprSymbol.isArray()) || this.isTypeArgumentOrWrapper(typeExprSymbol))) {\n                        var signature = enclosingDecl.getSpecializingSignatureSymbol();\n\n                        if (signature) {\n                            signature.setHasGenericParameter();\n                        }\n                    }\n                }\n            }\n            // Does it have an initializer? If so, typecheck and use that\n            else if (varDecl.init) {\n                var initExprSymbolAndDiagnostics = this.resolveAST(varDecl.init, false, wrapperDecl, context);\n                var initExprSymbol = initExprSymbolAndDiagnostics && initExprSymbolAndDiagnostics.symbol;\n\n                if (!initExprSymbol) {\n                    diagnostic = context.postError(this.unitPath, varDecl.minChar, varDecl.getLength(), DiagnosticCode.Unable_to_resolve_type_of__0_, [varDecl.id.actualText], decl);\n\n                    context.setTypeInContext(declSymbol, this.getNewErrorTypeSymbol(diagnostic));\n\n                    if (declParameterSymbol) {\n                        context.setTypeInContext(declParameterSymbol, this.semanticInfoChain.anyTypeSymbol);\n                    }\n                }\n                else {\n\n                    context.setTypeInContext(declSymbol, this.widenType(initExprSymbol.getType()));\n                    initExprSymbol.addOutgoingLink(declSymbol, SymbolLinkKind.ProvidesInferredType);\n\n                    if (declParameterSymbol) {\n                        context.setTypeInContext(declParameterSymbol, initExprSymbol.getType());\n                        initExprSymbol.addOutgoingLink(declParameterSymbol, SymbolLinkKind.ProvidesInferredType);\n                    }\n                }\n            }\n            else if (declSymbol.getKind() === PullElementKind.Container) { // module instance value\n                instanceSymbol = (<PullContainerTypeSymbol>declSymbol).getInstanceSymbol();\n                var instanceType = instanceSymbol.getType();\n\n                if (instanceType) {\n                    context.setTypeInContext(declSymbol, instanceType);\n                }\n                else {\n                    context.setTypeInContext(declSymbol, this.semanticInfoChain.anyTypeSymbol);\n                }\n            }\n            //else if () {} // class instance value\n            // Otherwise, it\'s of type \'any\'\n            else {\n                var defaultType = this.semanticInfoChain.anyTypeSymbol;\n\n                if (declSymbol.getIsVarArg() && this.cachedArrayInterfaceType) {\n                    defaultType = specializeToArrayType(this.cachedArrayInterfaceType, defaultType, this, context);\n                }\n\n                context.setTypeInContext(declSymbol, defaultType);\n\n                if (declParameterSymbol) {\n                    declParameterSymbol.setType(defaultType);\n                }\n            }\n\n            declSymbol.setResolved();\n\n            if (declParameterSymbol) {\n                declParameterSymbol.setResolved();\n            }\n\n            return declSymbol;\n        }\n\n        private resolveTypeParameterDeclaration(typeParameterAST: TypeParameter, context: PullTypeResolutionContext): PullTypeSymbol {\n            var typeParameterDecl = this.getDeclForAST(typeParameterAST);\n            var typeParameterSymbol = <PullTypeParameterSymbol>typeParameterDecl.getSymbol();\n\n            if (typeParameterSymbol.isResolved() || typeParameterSymbol.isResolving()) {\n                return typeParameterSymbol;\n            }\n\n            typeParameterSymbol.startResolving();\n\n            if (typeParameterAST.constraint) {\n                var enclosingDecl = this.getEnclosingDecl(typeParameterDecl);\n                var constraintTypeSymbol = this.resolveTypeReference(<TypeReference>typeParameterAST.constraint, enclosingDecl, context).symbol;\n\n                if (constraintTypeSymbol.isNamedTypeSymbol() && constraintTypeSymbol.isGeneric() && !constraintTypeSymbol.isTypeParameter() && !this.isArrayOrEquivalent(constraintTypeSymbol) && constraintTypeSymbol.isResolved() && this.isTypeRefWithoutTypeArgs(<TypeReference>typeParameterAST.constraint)) {\n                    constraintTypeSymbol = this.specializeTypeToAny(constraintTypeSymbol, enclosingDecl, context);\n                }\n\n                if (constraintTypeSymbol) {\n                    typeParameterSymbol.setConstraint(constraintTypeSymbol);\n                }\n            }\n\n            typeParameterSymbol.setResolved();\n\n            return typeParameterSymbol;\n        }\n\n        private resolveFunctionBodyReturnTypes(funcDeclAST: FunctionDeclaration, signature: PullSignatureSymbol, useContextualType: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n            var returnStatements: {\n                returnStatement: ReturnStatement; enclosingDecl: PullDecl;\n            }[] = [];\n\n            var enclosingDeclStack: PullDecl[] = [enclosingDecl];\n\n            var preFindReturnExpressionTypes = (ast: AST, parent: AST, walker: IAstWalker) => {\n                var go = true;\n\n                switch (ast.nodeType) {\n                    case NodeType.FunctionDeclaration:\n                        // don\'t recurse into a function decl - we don\'t want to confuse a nested\n                        // return type with the top-level function\'s return type\n                        go = false;\n                        break;\n\n                    case NodeType.ReturnStatement:\n                        var returnStatement: ReturnStatement = <ReturnStatement>ast;\n                        returnStatements[returnStatements.length] = { returnStatement: returnStatement, enclosingDecl: enclosingDeclStack[enclosingDeclStack.length - 1]};\n                        go = false;\n                        break;\n\n                    case NodeType.CatchClause:\n                    case NodeType.WithStatement:\n                        enclosingDeclStack[enclosingDeclStack.length] = this.getDeclForAST(ast);\n                        break;\n\n                    default:\n                        break;\n                }\n\n                walker.options.goChildren = go;\n\n                return ast;\n            }\n\n            var postFindReturnExpressionEnclosingDecls = function (ast: AST, parent: AST, walker: IAstWalker) {\n                switch (ast.nodeType) {\n                    case NodeType.CatchClause:\n                    case NodeType.WithStatement:\n                        enclosingDeclStack.length--;\n                        break;\n                    default:\n                        break;\n                    }\n\n                walker.options.goChildren = true;\n\n                return ast;\n            }\n\n            getAstWalkerFactory().walk(funcDeclAST.block, preFindReturnExpressionTypes, postFindReturnExpressionEnclosingDecls);\n\n            if (!returnStatements.length) {\n                signature.setReturnType(this.semanticInfoChain.voidTypeSymbol);\n            }\n\n            else {\n                var returnExpressionSymbols: PullTypeSymbol[] = [];\n                var returnType: PullTypeSymbol;\n\n                for (var i = 0; i < returnStatements.length; i++) {\n                    if (returnStatements[i].returnStatement.returnExpression) {\n                        returnType = this.resolveAST(returnStatements[i].returnStatement.returnExpression, useContextualType, returnStatements[i].enclosingDecl, context).symbol.getType();\n\n                        if (returnType.isError()) {\n                            signature.setReturnType(returnType);\n                            return;\n                        }\n\n                        returnExpressionSymbols[returnExpressionSymbols.length] = returnType;\n                    }\n                }\n\n                if (!returnExpressionSymbols.length) {\n                    signature.setReturnType(this.semanticInfoChain.voidTypeSymbol);\n                }\n                else {\n\n                    // combine return expression types for best common type\n                    var collection: IPullTypeCollection = {\n                        getLength: () => { return returnExpressionSymbols.length; } ,\n                        setTypeAtIndex: (index: number, type: PullTypeSymbol) => { } ,\n                        getTypeAtIndex: (index: number) => {\n                            return returnExpressionSymbols[index].getType();\n                        }\n                    }\n\n                    returnType = this.findBestCommonType(returnExpressionSymbols[0], null, collection, context, new TypeComparisonInfo());\n\n                    signature.setReturnType(returnType ? this.widenType(returnType) : this.semanticInfoChain.anyTypeSymbol);\n\n                    if (this.isTypeArgumentOrWrapper(returnType)) {\n                        var functionSymbol = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(funcDeclAST, enclosingDecl.getScriptName());\n\n                        if (functionSymbol) {\n                            functionSymbol.symbol.getType().setHasGenericSignature();\n                        }\n                    }\n\n                    // link return expressions to signature type to denote inference\n                    for (var i = 0; i < returnExpressionSymbols.length; i++) {\n                        returnExpressionSymbols[i].addOutgoingLink(signature, SymbolLinkKind.ProvidesInferredType);\n                    }\n                }\n            }\n        }\n\n        private resolveFunctionDeclaration(funcDeclAST: FunctionDeclaration, context: PullTypeResolutionContext): PullSymbol {\n\n            var funcDecl: PullDecl = this.getDeclForAST(funcDeclAST);\n\n            var funcSymbol = <PullFunctionTypeSymbol>funcDecl.getSymbol();\n\n            var signature: PullSignatureSymbol = funcDecl.getSpecializingSignatureSymbol();\n\n            var hadError = false;\n\n            var isConstructor = funcDeclAST.isConstructor || hasFlag(funcDeclAST.getFunctionFlags(), FunctionFlags.ConstructMember);\n\n            if (signature) {\n\n                if (signature.isResolved()) {\n                    return funcSymbol;\n                }\n\n                if (isConstructor && !signature.isResolving()) {\n                    var classAST = funcDeclAST.classDecl;\n\n                    if (classAST) {\n                        var classDecl = this.getDeclForAST(classAST);\n                        var classSymbol = classDecl.getSymbol();\n\n                        if (!classSymbol.isResolved() && !classSymbol.isResolving()) {\n                            this.resolveDeclaredSymbol(classSymbol, this.getEnclosingDecl(classDecl), context);\n                        }\n                    }\n                }\n\n                var diagnostic: SemanticDiagnostic;\n\n                if (signature.isResolving()) {\n\n                    // try to set the return type, even though we may be lacking in some information\n                    if (funcDeclAST.returnTypeAnnotation) {\n                        var returnTypeSymbol = this.resolveTypeReference(<TypeReference>funcDeclAST.returnTypeAnnotation, funcDecl, context).symbol;\n                        if (!returnTypeSymbol) {\n                            diagnostic = context.postError(this.unitPath, funcDeclAST.returnTypeAnnotation.minChar, funcDeclAST.returnTypeAnnotation.getLength(), DiagnosticCode.Cannot_resolve_return_type_reference, null, funcDecl);\n                            signature.setReturnType(this.getNewErrorTypeSymbol(diagnostic));\n                            hadError = true;\n                        } else {\n                            if (this.isTypeArgumentOrWrapper(returnTypeSymbol)) {\n                                signature.setHasGenericParameter();\n                                if (funcSymbol) {\n                                    funcSymbol.getType().setHasGenericSignature();\n                                }\n                            }\n                            signature.setReturnType(returnTypeSymbol);\n\n                            if (isConstructor && returnTypeSymbol === this.semanticInfoChain.voidTypeSymbol) {\n                                context.postError(this.unitPath, funcDeclAST.minChar, funcDeclAST.getLength(), DiagnosticCode.Constructors_cannot_have_a_return_type_of__void_, null, funcDecl, true);\n                            }\n                        }\n                    }\n                    else {\n                        signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n\n                    signature.setResolved();\n                    return funcSymbol;\n                }\n\n                signature.startResolving();\n\n                if (funcDeclAST.typeArguments) {\n                    for (var i = 0; i < funcDeclAST.typeArguments.members.length; i++) {\n                        this.resolveTypeParameterDeclaration(<TypeParameter>funcDeclAST.typeArguments.members[i], context);\n                    }\n                }\n\n                // resolve parameter type annotations as necessary\n                if (funcDeclAST.arguments) {\n                    for (var i = 0; i < funcDeclAST.arguments.members.length; i++) {\n                        this.resolveVariableDeclaration(<BoundDecl>funcDeclAST.arguments.members[i], context, funcDecl);\n                    }\n                }\n\n                if (signature.isGeneric()) {\n                    // PULLREVIEW: This is split into a spearate if statement to make debugging slightly easier...\n                    if (funcSymbol) {\n                        funcSymbol.getType().setHasGenericSignature();\n                    }\n                }\n\n                // resolve the return type annotation\n                if (funcDeclAST.returnTypeAnnotation) {\n                    // use the funcDecl for the enclosing decl, since we want to pick up any type parameters \n                    // on the function when resolving the return type\n                    returnTypeSymbol = this.resolveTypeReference(<TypeReference>funcDeclAST.returnTypeAnnotation, funcDecl, context).symbol;\n\n                    if (!returnTypeSymbol) {\n                        diagnostic = context.postError(this.unitPath, funcDeclAST.returnTypeAnnotation.minChar, funcDeclAST.returnTypeAnnotation.getLength(), DiagnosticCode.Cannot_resolve_return_type_reference, null, funcDecl);\n                        signature.setReturnType(this.getNewErrorTypeSymbol(diagnostic));\n\n                        hadError = true;\n                    }\n                    else {\n                        if (this.isTypeArgumentOrWrapper(returnTypeSymbol)) {\n                            signature.setHasGenericParameter();\n\n                            if (funcSymbol) {\n                                funcSymbol.getType().setHasGenericSignature();\n                            }\n                        }\n\n                        signature.setReturnType(returnTypeSymbol);\n\n                        if (isConstructor && returnTypeSymbol === this.semanticInfoChain.voidTypeSymbol) {\n                            context.postError(this.unitPath, funcDeclAST.minChar, funcDeclAST.getLength(), DiagnosticCode.Constructors_cannot_have_a_return_type_of__void_, null, funcDecl, true);\n                        }\n                    }\n                }\n                // if there\'s no return-type annotation\n                //     - if it\'s not a definition signature, set the return type to \'any\'\n                //     - if it\'s a definition sigature, take the best common type of all return expressions\n                //     - if it\'s a constructor, we set the return type link during binding\n                else if (!funcDeclAST.isConstructor) {\n                    if (funcDeclAST.isSignature()) {\n                        signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n                    else {\n                        this.resolveFunctionBodyReturnTypes(funcDeclAST, signature, false, funcDecl, context);\n                    }\n                }\n\n                if (!hadError) {\n                    signature.setResolved();\n                }\n            }\n\n            // don\'t resolve anything here that\'s not relevant to the type of the function!\n\n            return funcSymbol;\n        }\n\n        private resolveGetAccessorDeclaration(funcDeclAST: FunctionDeclaration, context: PullTypeResolutionContext): PullSymbol {\n\n            var funcDecl: PullDecl = this.getDeclForAST(funcDeclAST);\n            var accessorSymbol = <PullAccessorSymbol> funcDecl.getSymbol();\n\n            var getterSymbol = accessorSymbol.getGetter();\n            var getterTypeSymbol = <PullFunctionTypeSymbol>getterSymbol.getType();\n\n            var signature: PullSignatureSymbol = getterTypeSymbol.getCallSignatures()[0];\n\n            var hadError = false;\n            var diagnostic: SemanticDiagnostic;\n\n            if (signature) {\n\n                if (signature.isResolved()) {\n                    return accessorSymbol;\n                }\n\n                if (signature.isResolving()) {\n                    // PULLTODO: Error or warning?\n                    signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n                    signature.setResolved();\n\n                    return accessorSymbol;\n                }\n\n                signature.startResolving();\n\n                // resolve parameter type annotations as necessary\n                if (funcDeclAST.arguments) {\n                    for (var i = 0; i < funcDeclAST.arguments.members.length; i++) {\n                        this.resolveVariableDeclaration(<BoundDecl>funcDeclAST.arguments.members[i], context, funcDecl);\n                    }\n                }\n\n                if (signature.hasGenericParameter()) {\n                    // PULLREVIEW: This is split into a spearate if statement to make debugging slightly easier...\n                    if (getterSymbol) {\n                        getterTypeSymbol.setHasGenericSignature();\n                    }\n                }\n\n                // resolve the return type annotation\n                if (funcDeclAST.returnTypeAnnotation) {\n                    // use the funcDecl for the enclosing decl, since we want to pick up any type parameters \n                    // on the function when resolving the return type\n                    var returnTypeSymbol = this.resolveTypeReference(<TypeReference>funcDeclAST.returnTypeAnnotation, funcDecl, context).symbol;\n\n                    if (!returnTypeSymbol) {\n                        diagnostic = context.postError(this.unitPath, funcDeclAST.returnTypeAnnotation.minChar, funcDeclAST.returnTypeAnnotation.getLength(), DiagnosticCode.Cannot_resolve_return_type_reference, null, funcDecl);\n                        signature.setReturnType(this.getNewErrorTypeSymbol(diagnostic));\n\n                        hadError = true;\n                    }\n                    else {\n\n                        if (this.isTypeArgumentOrWrapper(returnTypeSymbol)) {\n                            signature.setHasGenericParameter();\n\n                            if (getterSymbol) {\n                                getterTypeSymbol.setHasGenericSignature();\n                            }\n                        }\n\n                        signature.setReturnType(returnTypeSymbol);\n                    }\n                }\n\n                // if there\'s no return-type annotation\n                //     - if it\'s not a definition signature, set the return type to \'any\'\n                //     - if it\'s a definition sigature, take the best common type of all return expressions\n                else {\n                    if (funcDeclAST.isSignature()) {\n                        signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n                    else {\n                        this.resolveFunctionBodyReturnTypes(funcDeclAST, signature, false, funcDecl, context);\n                    }\n                }\n\n\n                if (!hadError) {\n                    signature.setResolved();\n                }\n            }\n\n            var accessorType = signature.getReturnType();\n\n            var setter = accessorSymbol.getSetter();\n\n            if (setter) {\n                var setterType = setter.getType();\n                var setterSig = setterType.getCallSignatures()[0];\n\n                if (setterSig.isResolved()) {\n                    // compare setter parameter type and getter return type\n                    var setterParameters = setterSig.getParameters();\n\n                    if (setterParameters.length) {\n                        var setterParameter = setterParameters[0];\n                        var setterParameterType = setterParameter.getType();\n\n                        if (!this.typesAreIdentical(accessorType, setterParameterType)) {\n                            diagnostic = context.postError(this.unitPath, funcDeclAST.minChar, funcDeclAST.getLength(), DiagnosticCode._get__and__set__accessor_must_have_the_same_type, null, this.getEnclosingDecl(funcDecl));\n                            accessorSymbol.setType(this.getNewErrorTypeSymbol(diagnostic));\n                        }\n                    }\n                }\n                else {\n                    accessorSymbol.setType(accessorType);\n                }\n\n            }\n            else {\n                accessorSymbol.setType(accessorType);\n            }\n\n            return accessorSymbol;\n        }\n\n        private resolveSetAccessorDeclaration(funcDeclAST: FunctionDeclaration, context: PullTypeResolutionContext): PullSymbol {\n\n            var funcDecl: PullDecl = this.getDeclForAST(funcDeclAST);\n            var accessorSymbol = <PullAccessorSymbol> funcDecl.getSymbol();\n\n            var setterSymbol = accessorSymbol.getSetter();\n            var setterTypeSymbol = <PullFunctionTypeSymbol>setterSymbol.getType();\n\n            var signature: PullSignatureSymbol = setterTypeSymbol.getCallSignatures()[0];\n\n            var hadError = false;\n\n            if (signature) {\n\n                if (signature.isResolved()) {\n                    return accessorSymbol;\n                }\n\n                if (signature.isResolving()) {\n                    // PULLTODO: Error or warning?\n                    signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n                    signature.setResolved();\n\n                    return accessorSymbol;\n                }\n\n                signature.startResolving();\n\n                // resolve parameter type annotations as necessary\n                if (funcDeclAST.arguments) {\n                    for (var i = 0; i < funcDeclAST.arguments.members.length; i++) {\n                        this.resolveVariableDeclaration(<BoundDecl>funcDeclAST.arguments.members[i], context, funcDecl);\n                    }\n                }\n\n                if (signature.hasGenericParameter()) {\n                    // PULLREVIEW: This is split into a spearate if statement to make debugging slightly easier...\n                    if (setterSymbol) {\n                        setterTypeSymbol.setHasGenericSignature();\n                    }\n                }\n\n                if (!hadError) {\n                    signature.setResolved();\n                }\n            }\n\n            var parameters = signature.getParameters();\n\n            var getter = accessorSymbol.getGetter();\n\n            var accessorType = parameters.length ? parameters[0].getType() : getter ? getter.getType() : this.semanticInfoChain.undefinedTypeSymbol;\n\n            if (getter) {\n                var getterType = getter.getType();\n                var getterSig = getterType.getCallSignatures()[0];\n\n                if (accessorType == this.semanticInfoChain.undefinedTypeSymbol) {\n                    accessorType = getterType;\n                }\n\n                if (getterSig.isResolved()) {\n                    // compare setter parameter type and getter return type\n                    var getterReturnType = getterSig.getReturnType();\n\n                    if (!this.typesAreIdentical(accessorType, getterReturnType)) {\n                        if (this.isAnyOrEquivalent(accessorType)) {\n                            accessorSymbol.setType(getterReturnType);\n                            if (!accessorType.isError()) {\n                                parameters[0].setType(getterReturnType);\n                            }\n                        }\n                        else {\n                            var diagnostic = context.postError(this.unitPath, funcDeclAST.minChar, funcDeclAST.getLength(), DiagnosticCode._get__and__set__accessor_must_have_the_same_type, null, this.getEnclosingDecl(funcDecl));\n                            accessorSymbol.setType(this.getNewErrorTypeSymbol(diagnostic));\n                        }\n                    }\n                }\n                else {\n                    accessorSymbol.setType(accessorType);\n                }\n            }\n            else {\n                accessorSymbol.setType(accessorType);\n            }\n\n            return accessorSymbol;\n        }\n\n        // Expression resolution\n\n        public resolveAST(ast: AST, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            switch (ast.nodeType) {\n                case NodeType.CatchClause:\n                case NodeType.WithStatement:\n                case NodeType.Script:\n                    return SymbolAndDiagnostics.fromSymbol(null);\n\n                case NodeType.ModuleDeclaration:\n                    return SymbolAndDiagnostics.fromSymbol(this.resolveModuleDeclaration(<ModuleDeclaration>ast, context));\n\n                case NodeType.InterfaceDeclaration:\n                    return SymbolAndDiagnostics.fromSymbol(this.resolveInterfaceDeclaration(<TypeDeclaration>ast, context));\n\n                case NodeType.ClassDeclaration:\n                    return SymbolAndDiagnostics.fromSymbol(this.resolveClassDeclaration(<ClassDeclaration>ast, context));\n\n                case NodeType.VariableDeclarator:\n                case NodeType.Parameter:\n                    return SymbolAndDiagnostics.fromSymbol(this.resolveVariableDeclaration(<BoundDecl>ast, context, enclosingDecl));\n\n                case NodeType.TypeParameter:\n                    return SymbolAndDiagnostics.fromSymbol(this.resolveTypeParameterDeclaration(<TypeParameter>ast, context));\n\n                case NodeType.ImportDeclaration:\n                    return SymbolAndDiagnostics.fromSymbol(this.resolveImportDeclaration(<ImportDeclaration>ast, context));\n\n                case NodeType.ObjectLiteralExpression:\n                    return this.resolveObjectLiteralExpression(ast, inContextuallyTypedAssignment, enclosingDecl, context);\n\n                case NodeType.GenericType:\n                    return this.resolveGenericTypeReference(<GenericType>ast, enclosingDecl, context);\n\n                case NodeType.Name:\n                    if (context.resolvingTypeReference) {\n                        return this.resolveTypeNameExpression(<Identifier>ast, enclosingDecl, context);\n                    }\n                    else {\n                        return this.resolveNameExpression(<Identifier>ast, enclosingDecl, context);\n                    }\n\n                case NodeType.MemberAccessExpression:\n                    if (context.resolvingTypeReference) {\n                        return this.resolveDottedTypeNameExpression(<BinaryExpression>ast, enclosingDecl, context);\n                    }\n                    else {\n                        return this.resolveDottedNameExpression(<BinaryExpression>ast, enclosingDecl, context);\n                    }\n\n                case GenericType:\n                    return this.resolveGenericTypeReference(<GenericType>ast, enclosingDecl, context);\n\n                case NodeType.FunctionDeclaration:\n                    {\n                        var funcDecl = <FunctionDeclaration>ast;\n\n                        if (funcDecl.isGetAccessor()) {\n                            return SymbolAndDiagnostics.fromSymbol(this.resolveGetAccessorDeclaration(funcDecl, context));\n                        }\n                        else if (funcDecl.isSetAccessor()) {\n                            return SymbolAndDiagnostics.fromSymbol(this.resolveSetAccessorDeclaration(funcDecl, context));\n                        }\n                        else if (inContextuallyTypedAssignment ||\n                                 (funcDecl.getFunctionFlags() & FunctionFlags.IsFunctionExpression) ||\n                                 (funcDecl.getFunctionFlags() & FunctionFlags.IsFatArrowFunction)) {\n                            return SymbolAndDiagnostics.fromSymbol(this.resolveFunctionExpression(funcDecl, inContextuallyTypedAssignment, enclosingDecl, context));\n                        }\n                        else {\n                            return SymbolAndDiagnostics.fromSymbol(this.resolveFunctionDeclaration(funcDecl, context));\n                        }\n                    }\n\n                case NodeType.ArrayLiteralExpression:\n                    return this.resolveArrayLiteralExpression(<UnaryExpression>ast, inContextuallyTypedAssignment, enclosingDecl, context);\n\n                case NodeType.ThisExpression:\n                    return this.resolveThisExpression(ast, enclosingDecl, context);\n\n                case NodeType.SuperExpression:\n                    return this.resolveSuperExpression(ast, enclosingDecl, context);\n\n                case NodeType.InvocationExpression:\n                    return this.resolveCallExpression(<CallExpression>ast, inContextuallyTypedAssignment, enclosingDecl, context);\n\n                case NodeType.ObjectCreationExpression:\n                    return this.resolveNewExpression(<CallExpression>ast, inContextuallyTypedAssignment, enclosingDecl, context);\n\n                case NodeType.CastExpression:\n                    return this.resolveTypeAssertionExpression(<UnaryExpression>ast, inContextuallyTypedAssignment, enclosingDecl, context);\n\n                case NodeType.TypeRef:\n                    return this.resolveTypeReference(<TypeReference>ast, enclosingDecl, context);\n\n                case NodeType.ExportAssignment:\n                    return this.resolveExportAssignmentStatement(<ExportAssignment>ast, enclosingDecl, context);\n\n                // primitives\n                case NodeType.NumericLiteral:\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.numberTypeSymbol);\n                case NodeType.StringLiteral:\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.stringTypeSymbol);\n                case NodeType.NullLiteral:\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.nullTypeSymbol);\n                case NodeType.TrueLiteral:\n                case NodeType.FalseLiteral:\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);\n                case NodeType.VoidExpression:\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.voidTypeSymbol);\n\n                // assignment\n                case NodeType.AssignmentExpression:\n                    return this.resolveAssignmentStatement(<BinaryExpression>ast, inContextuallyTypedAssignment, enclosingDecl, context);\n\n                // boolean operations\n                case NodeType.LogicalNotExpression:\n                case NodeType.NotEqualsWithTypeConversionExpression:\n                case NodeType.EqualsWithTypeConversionExpression:\n                case NodeType.EqualsExpression:\n                case NodeType.NotEqualsExpression:\n                case NodeType.LessThanExpression:\n                case NodeType.LessThanOrEqualExpression:\n                case NodeType.GreaterThanOrEqualExpression:\n                case NodeType.GreaterThanExpression:\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);\n\n                case NodeType.AddExpression:\n                case NodeType.AddAssignmentExpression:\n                    return this.resolveArithmeticExpression(<BinaryExpression>ast, inContextuallyTypedAssignment, enclosingDecl, context);\n\n                case NodeType.SubtractAssignmentExpression:\n                case NodeType.MultiplyAssignmentExpression:\n                case NodeType.DivideAssignmentExpression:\n                case NodeType.ModuloAssignmentExpression:\n                case NodeType.OrAssignmentExpression:\n                case NodeType.AndAssignmentExpression:\n\n                case NodeType.BitwiseNotExpression:\n                case NodeType.SubtractExpression:\n                case NodeType.MultiplyExpression:\n                case NodeType.DivideExpression:\n                case NodeType.ModuloExpression:\n                case NodeType.BitwiseOrExpression:\n                case NodeType.BitwiseAndExpression:\n                case NodeType.PlusExpression:\n                case NodeType.NegateExpression:\n                case NodeType.PostIncrementExpression:\n                case NodeType.PreIncrementExpression:\n                case NodeType.PostDecrementExpression:\n                case NodeType.PreDecrementExpression:\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.numberTypeSymbol);\n\n                case NodeType.LeftShiftExpression:\n                case NodeType.SignedRightShiftExpression:\n                case NodeType.UnsignedRightShiftExpression:\n                case NodeType.LeftShiftAssignmentExpression:\n                case NodeType.SignedRightShiftAssignmentExpression:\n                case NodeType.UnsignedRightShiftAssignmentExpression:\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.numberTypeSymbol);\n\n                case NodeType.ElementAccessExpression:\n                    return this.resolveIndexExpression(<BinaryExpression>ast, inContextuallyTypedAssignment, enclosingDecl, context);\n\n                case NodeType.LogicalOrExpression:\n                    return this.resolveLogicalOrExpression(<BinaryExpression>ast, inContextuallyTypedAssignment, enclosingDecl, context);\n\n                case NodeType.LogicalAndExpression:\n                    return this.resolveLogicalAndExpression(<BinaryExpression>ast, inContextuallyTypedAssignment, enclosingDecl, context);\n\n                case NodeType.TypeOfExpression:\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.stringTypeSymbol);\n\n                case NodeType.ThrowStatement:\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.voidTypeSymbol);\n\n                case NodeType.DeleteExpression:\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);\n\n                case NodeType.ConditionalExpression:\n                    return this.resolveConditionalExpression(<ConditionalExpression>ast, enclosingDecl, context);\n\n                case NodeType.RegularExpressionLiteral:\n                    return this.resolveRegularExpressionLiteral();\n\n                case NodeType.ParenthesizedExpression:\n                    return this.resolveParenthesizedExpression(<ParenthesizedExpression>ast, enclosingDecl, context);\n\n                case NodeType.ExpressionStatement:\n                    return this.resolveExpressionStatement(<ExpressionStatement>ast, inContextuallyTypedAssignment, enclosingDecl, context);\n\n                case NodeType.InstanceOfExpression:\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);\n            }\n\n            return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n        }\n\n        private resolveRegularExpressionLiteral(): SymbolAndDiagnostics<PullTypeSymbol> {\n            if (this.cachedRegExpInterfaceType) {\n                return SymbolAndDiagnostics.fromSymbol(this.cachedRegExpInterfaceType);\n            }\n            else {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n            }\n        }\n\n        private isNameOrMemberAccessExpression(ast: AST): boolean {\n\n            var checkAST = ast;\n\n            while (checkAST) {\n                if (checkAST.nodeType === NodeType.ExpressionStatement) {\n                    checkAST = (<ExpressionStatement>checkAST).expression;\n                }\n                else if (checkAST.nodeType === NodeType.ParenthesizedExpression) {\n                    checkAST = (<ParenthesizedExpression>checkAST).expression;\n                }\n                else if (checkAST.nodeType === NodeType.Name) {\n                    return true;\n                }\n                else if (checkAST.nodeType === NodeType.MemberAccessExpression) {\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n\n        private resolveNameSymbol(nameSymbol: PullSymbol, context: PullTypeResolutionContext) {\n            if (nameSymbol &&\n                !context.canUseTypeSymbol && \n                nameSymbol != this.semanticInfoChain.undefinedTypeSymbol &&\n                nameSymbol != this.semanticInfoChain.nullTypeSymbol &&\n                (nameSymbol.isPrimitive() || !(nameSymbol.getKind() & TypeScript.PullElementKind.SomeValue))) {\n                    nameSymbol = null;\n            }\n\n            return nameSymbol\n        }\n\n        public resolveNameExpression(nameAST: Identifier, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var nameSymbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(nameAST);\n            if (!nameSymbolAndDiagnostics) {\n                nameSymbolAndDiagnostics = this.computeNameExpression(nameAST, enclosingDecl, context);\n                this.setSymbolAndDiagnosticsForAST(nameAST, nameSymbolAndDiagnostics, context);\n            }\n\n            var nameSymbol = nameSymbolAndDiagnostics.symbol;\n            if (!nameSymbol.isResolved()) {\n                this.resolveDeclaredSymbol(nameSymbol, enclosingDecl, context);\n            }\n\n            return nameSymbolAndDiagnostics;\n        }\n\n        private computeNameExpression(nameAST: Identifier, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            if (nameAST.isMissing()) {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n            }\n\n            var id = nameAST.text;\n\n            var declPath: PullDecl[] = enclosingDecl !== null ? this.getPathToDecl(enclosingDecl) : [];\n\n            if (enclosingDecl && !declPath.length) {\n                declPath = [enclosingDecl];\n            }\n\n            var nameSymbol = this.getSymbolFromDeclPath(id, declPath, PullElementKind.SomeValue);\n\n            // Type aliases may have an associated export value symbol\n            if (!nameSymbol) {\n                nameSymbol = this.getSymbolFromDeclPath(id, declPath, PullElementKind.TypeAlias);\n\n                if (nameSymbol && !(nameSymbol.isType() && nameSymbol.isAlias())) {\n                    nameSymbol = null;\n                }\n            }\n\n            if (!nameSymbol && id === \"arguments\" && enclosingDecl && (enclosingDecl.getKind() & PullElementKind.SomeFunction)) {\n                nameSymbol = this.cachedFunctionArgumentsSymbol;\n            }\n\n            if (!nameSymbol) {\n                return SymbolAndDiagnostics.create(\n                    this.getNewErrorTypeSymbol(null),\n                    [context.postError(this.unitPath, nameAST.minChar, nameAST.getLength(), DiagnosticCode.Could_not_find_symbol__0_, [nameAST.actualText])]);\n            }\n\n            if (nameSymbol.isType() && nameSymbol.isAlias()) {\n\n                if (!nameSymbol.isResolved()) {\n                    this.resolveDeclaredSymbol(nameSymbol, enclosingDecl, context);\n                }\n\n                var exportAssignmentSymbol = (<PullTypeAliasSymbol>nameSymbol).getExportAssignedSymbol()\n\n                    if (exportAssignmentSymbol) {\n\n                    if (exportAssignmentSymbol.isType()) {\n                        var exportedTypeSymbol = <PullTypeSymbol>exportAssignmentSymbol;\n\n                        if (exportedTypeSymbol.isClass()) {\n                            var constructorMethod = (<PullClassTypeSymbol>exportedTypeSymbol).getConstructorMethod();\n\n                            if (constructorMethod) {\n                                nameSymbol = constructorMethod;\n                            }\n                            else {\n                                nameSymbol = exportedTypeSymbol;\n                            }\n                        }\n                        else if (exportedTypeSymbol.isContainer()) {\n                            var instanceSymbol = (<PullContainerTypeSymbol>exportedTypeSymbol).getInstanceSymbol();\n\n                            if (instanceSymbol) {\n                                nameSymbol = instanceSymbol;\n                            }\n                            else {\n                                nameSymbol = exportedTypeSymbol;\n                            }\n                        }\n                    }\n                    else {\n                        nameSymbol = exportAssignmentSymbol;\n                    }\n                }\n            }\n\n            return SymbolAndDiagnostics.fromSymbol(nameSymbol);\n        }\n\n        public resolveDottedNameExpression(dottedNameAST: BinaryExpression, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var symbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(dottedNameAST);\n            if (!symbolAndDiagnostics) {\n                symbolAndDiagnostics = this.computeDottedNameExpressionSymbol(dottedNameAST, enclosingDecl, context);\n\n                // Associate the result with both the dotted expres ion and the name on t e right.\n                // TODO(cyrusn): We should not be associating the result with anything but the node\n                // passed in.  A higher layer should be responsible for mapping between nodes.\n                this.setSymbolAndDiagnosticsForAST(dottedNameAST, symbolAndDiagnostics, context);\n                this.setSymbolAndDiagnosticsForAST(dottedNameAST.operand2, symbolAndDiagnostics, context);\n            }\n\n            var symbol = symbolAndDiagnostics && symbolAndDiagnostics.symbol;\n            if (symbol && !symbol.isResolved()) {\n                this.resolveDeclaredSymbol(symbol, enclosingDecl, context);\n            }\n\n            return symbolAndDiagnostics;\n        }\n\n        private computeDottedNameExpressionSymbol(dottedNameAST: BinaryExpression, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            if ((<Identifier>dottedNameAST.operand2).isMissing()) {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n            }\n\n            // assemble the dotted name path\n            var rhsName = (<Identifier>dottedNameAST.operand2).text;\n            var prevCanUseTypeSymbol = context.canUseTypeSymbol;\n            context.canUseTypeSymbol = true;\n            var lhs = this.resolveAST(dottedNameAST.operand1, /*inContextuallyTypedAssignment*/false, enclosingDecl, context).symbol;\n            context.canUseTypeSymbol = prevCanUseTypeSymbol;\n            var lhsType = lhs.getType();\n\n            if (lhs.isAlias()) {\n                (<PullTypeAliasSymbol>lhs).setIsUsedAsValue();\n            }\n\n            if (this.isAnyOrEquivalent(lhsType)) {\n                return SymbolAndDiagnostics.fromSymbol(lhsType);\n            }\n\n            if (!lhsType) {\n                return SymbolAndDiagnostics.create(\n                    this.getNewErrorTypeSymbol(null),\n                    [context.postError(this.unitPath, dottedNameAST.operand2.minChar, dottedNameAST.operand2.getLength(), DiagnosticCode.Could_not_find_enclosing_symbol_for_dotted_name__0_, [(<Identifier>dottedNameAST.operand2).actualText])]);\n            }\n\n            if ((lhsType === this.semanticInfoChain.numberTypeSymbol || (lhs.getKind() == PullElementKind.EnumMember)) && this.cachedNumberInterfaceType) {\n                lhsType = this.cachedNumberInterfaceType;\n            }\n            else if (lhsType === this.semanticInfoChain.stringTypeSymbol && this.cachedStringInterfaceType) {\n                lhsType = this.cachedStringInterfaceType;\n            }\n            else if (lhsType === this.semanticInfoChain.booleanTypeSymbol && this.cachedBooleanInterfaceType) {\n                lhsType = this.cachedBooleanInterfaceType;\n            }\n\n            if (!lhsType.isResolved()) {\n                var potentiallySpecializedType = <PullTypeSymbol>this.resolveDeclaredSymbol(lhsType, enclosingDecl, context);\n\n                if (potentiallySpecializedType != lhsType) {\n                    if (!lhs.isType()) {\n                        context.setTypeInContext(lhs, potentiallySpecializedType);\n                    }\n\n                    lhsType = potentiallySpecializedType;\n                }\n            }\n\n            if (rhsName === \"prototype\") {\n                if (lhsType.isClass()) {\n                    return SymbolAndDiagnostics.fromSymbol(lhsType);\n                }\n                else {\n                    var classInstanceType = lhsType.getAssociatedContainerType();\n\n                    if (classInstanceType && classInstanceType.isClass()) {\n                        return SymbolAndDiagnostics.fromSymbol(classInstanceType);\n                    }\n                }\n            }\n\n            // now for the name...\n            // For classes, check the statics first below\n            var nameSymbol: PullSymbol = null;\n            if (!(lhs.isType() && (<PullTypeSymbol>lhs).isClass() && this.isNameOrMemberAccessExpression(dottedNameAST.operand1)) && !nameSymbol) {\n                nameSymbol = lhsType.findMember(rhsName);\n                nameSymbol = this.resolveNameSymbol(nameSymbol, context);\n            }\n\n            if (!nameSymbol) {\n                // could be a static\n                if (lhsType.isClass()) {\n                    var staticType = (<PullClassTypeSymbol>lhsType).getConstructorMethod().getType();\n\n                    nameSymbol = staticType.findMember(rhsName);\n\n                    if (!nameSymbol) {\n                        nameSymbol = lhsType.findMember(rhsName);\n                    }\n                }\n                // could be a function symbol\n                else if ((lhsType.getCallSignatures().length || lhsType.getConstructSignatures().length) && this.cachedFunctionInterfaceType) {\n                    lhsType = this.cachedFunctionInterfaceType;\n\n                    nameSymbol = lhsType.findMember(rhsName);\n                }\n                // could be a type parameter with a contraint\n                else if (lhsType.isTypeParameter()) {\n                    var constraint = (<PullTypeParameterSymbol>lhsType).getConstraint();\n\n                    if (constraint) {\n                        nameSymbol = constraint.findMember(rhsName);\n                    }\n                }\n                else if (lhsType.isContainer()) {\n                    var containerType = <PullContainerTypeSymbol>(lhsType.isAlias() ? (<PullTypeAliasSymbol>lhsType).getType() : lhsType);\n                    var associatedInstance = containerType.getInstanceSymbol();\n\n                    if (associatedInstance) {\n                        var instanceType = associatedInstance.getType();\n\n                        nameSymbol = instanceType.findMember(rhsName);\n                    }\n                }\n                // could be a module instance\n                else {\n                    var associatedType = lhsType.getAssociatedContainerType();\n\n                    if (associatedType) {\n                        nameSymbol = associatedType.findMember(rhsName);\n                    }\n                }\n\n                nameSymbol = this.resolveNameSymbol(nameSymbol, context);\n\n                // could be an object member\n                if (!nameSymbol && !lhsType.isPrimitive() && this.cachedObjectInterfaceType) {\n                    nameSymbol = this.cachedObjectInterfaceType.findMember(rhsName);\n                }\n\n                if (!nameSymbol) {\n                    return SymbolAndDiagnostics.create(\n                        this.getNewErrorTypeSymbol(null),\n                        [context.postError(this.unitPath, dottedNameAST.operand2.minChar, dottedNameAST.operand2.getLength(), DiagnosticCode.The_property__0__does_not_exist_on_value_of_type__1__, [(<Identifier>dottedNameAST.operand2).actualText, lhsType.getDisplayName()])]);\n                }\n            }\n\n            return SymbolAndDiagnostics.fromSymbol(nameSymbol);\n        }\n\n        public resolveTypeNameExpression(nameAST: Identifier, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullTypeSymbol> {\n            var typeNameSymbolAndDiagnostics = <SymbolAndDiagnostics<PullTypeSymbol>>this.getSymbolAndDiagnosticsForAST(nameAST);\n\n            // TODO(cyrusn): We really shouldn\'t be checking \"isType\" here.  However, we currently\n            // have a bug where some part of the system calls resolveNameExpression on this node\n            // and we cache the wrong thing.  We need to add appropriate checks to ensure that\n            // resolveNameExpression is never called on a node that we should be calling \n            // resolveTypeNameExpression (and vice versa).\n            if (!typeNameSymbolAndDiagnostics || !typeNameSymbolAndDiagnostics.symbol.isType()) {\n                typeNameSymbolAndDiagnostics = this.computeTypeNameExpression(nameAST, enclosingDecl, context);\n                this.setSymbolAndDiagnosticsForAST(nameAST, typeNameSymbolAndDiagnostics, context);\n            }\n\n            var typeNameSymbol = typeNameSymbolAndDiagnostics && typeNameSymbolAndDiagnostics.symbol;\n            if (!typeNameSymbol.isResolved()) {\n                this.resolveDeclaredSymbol(typeNameSymbol, enclosingDecl, context);\n            }\n\n            return typeNameSymbolAndDiagnostics;\n        }\n\n        private computeTypeNameExpression(nameAST: Identifier, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullTypeSymbol> {\n            if (nameAST.isMissing()) {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n            }\n\n            var id = nameAST.text;\n\n            // if it\'s a known primitive name, cheat\n            if (id === \"any\") {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n            }\n            else if (id === \"string\") {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.stringTypeSymbol);\n            }\n            else if (id === \"number\") {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.numberTypeSymbol);\n            }\n            else if (id === \"bool\") {\n                // Warn for using bool\n                if (this.compilationSettings.disallowBool && !this.currentUnit.getProperties().unitContainsBool) {\n                    this.currentUnit.getProperties().unitContainsBool = true;\n                    return SymbolAndDiagnostics.create(\n                        this.semanticInfoChain.booleanTypeSymbol,\n                        [context.postError(this.unitPath, nameAST.minChar, nameAST.getLength(), DiagnosticCode.Use_of_deprecated__bool__type__Use__boolean__instead)]);\n                }\n                else {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);\n                }\n            }\n            else if (id === \"boolean\") {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);\n            }\n            else if (id === \"null\") {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.nullTypeSymbol);\n            }\n            else if (id === \"undefined\") {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.undefinedTypeSymbol);\n            }\n            else if (id === \"void\") {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.voidTypeSymbol);\n            }\n            else if (id === \"_element\") {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.elementTypeSymbol);\n            }\n            else {\n                var declPath: PullDecl[] = enclosingDecl !== null ? this.getPathToDecl(enclosingDecl) : [];\n\n                if (enclosingDecl && !declPath.length) {\n                    declPath = [enclosingDecl];\n                }\n\n                var typeNameSymbol = <PullTypeSymbol>this.getSymbolFromDeclPath(id, declPath, PullElementKind.SomeType);\n\n                if (!typeNameSymbol) {\n                    return SymbolAndDiagnostics.create(\n                        this.getNewErrorTypeSymbol(null),\n                        [context.postError(this.unitPath, nameAST.minChar, nameAST.getLength(), DiagnosticCode.Could_not_find_symbol__0_, [nameAST.actualText])]);\n                }\n\n                if (typeNameSymbol.isAlias()) {\n\n                    if (!typeNameSymbol.isResolved()) {\n                        this.resolveDeclaredSymbol(typeNameSymbol, enclosingDecl, context);\n                    }\n\n                    var exportAssignmentSymbol = (<PullTypeAliasSymbol>typeNameSymbol).getExportAssignedSymbol()\n\n                    if (exportAssignmentSymbol) {\n\n                        if (exportAssignmentSymbol.isType()) {\n                            typeNameSymbol = <PullTypeSymbol>exportAssignmentSymbol;\n                        }\n                        else {\n                            return SymbolAndDiagnostics.create(\n                                typeNameSymbol,\n                                [context.postError(this.unitPath, nameAST.minChar, nameAST.getLength(), DiagnosticCode.Could_not_find_symbol__0_, [nameAST.actualText])]);\n                        }\n                    }\n                }\n\n                if (typeNameSymbol.isTypeParameter()) {\n                    if (enclosingDecl && (enclosingDecl.getKind() & PullElementKind.SomeFunction) && (enclosingDecl.getFlags() & PullElementFlags.Static)) {\n                        var parentDecl = typeNameSymbol.getDeclarations()[0].getParentDecl();\n\n                        if (parentDecl != enclosingDecl) {\n                            return SymbolAndDiagnostics.create(\n                                this.getNewErrorTypeSymbol(null),\n                                [context.postError(this.unitPath, nameAST.minChar, nameAST.getLength(), DiagnosticCode.Static_methods_cannot_reference_class_type_parameters)]);\n                        }\n                    }\n                }\n\n                if (!(typeNameSymbol.isTypeParameter() && (<PullTypeParameterSymbol>typeNameSymbol).isFunctionTypeParameter() && context.isSpecializingSignatureAtCallSite)) {\n                    typeNameSymbol = context.findSpecializationForType(typeNameSymbol);\n                }\n            }\n\n            return SymbolAndDiagnostics.fromSymbol(typeNameSymbol);\n        }\n\n        private addDiagnostic(diagnostics: Diagnostic[], diagnostic: Diagnostic): Diagnostic[] {\n            if (!diagnostics) {\n                diagnostics = [];\n            }\n\n            diagnostics.push(diagnostic);\n            return diagnostics;\n        }\n\n        //private resolveGenericTypeReference(genericTypeAST: GenericType, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullTypeSymbol> {\n        //    var symbolAndDiagnostics = <SymbolAndDiagnostics<PullTypeSymbol>>this.getSymbolAndDiagnosticsForAST(genericTypeAST);\n        //    if (!symbolAndDiagnostics) {\n        //        symbolAndDiagnostics = this.computeGenericTypeReference(genericTypeAST, enclosingDecl, context);\n        //        this.setSymbolAndDiagnosticsForAST(genericTypeAST, symbolAndDiagnostics, context);\n        //    }\n\n        //    return symbolAndDiagnostics;\n        //}\n\n        private resolveGenericTypeReference(genericTypeAST: GenericType, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullTypeSymbol> {\n            var savedResolvingTypeReference = context.resolvingTypeReference;\n            context.resolvingTypeReference = true;\n            var genericTypeSymbol = this.resolveAST(genericTypeAST.name, false, enclosingDecl, context).symbol.getType();\n            context.resolvingTypeReference = savedResolvingTypeReference;\n\n            if (genericTypeSymbol.isError()) {\n                return SymbolAndDiagnostics.fromSymbol(genericTypeSymbol);\n            }\n\n            if (!genericTypeSymbol.isResolving() && !genericTypeSymbol.isResolved()) {\n                this.resolveDeclaredSymbol(genericTypeSymbol, enclosingDecl, context);\n            }\n\n            // specialize the type arguments\n            var typeArgs: PullTypeSymbol[] = [];\n\n            if (!context.isResolvingTypeArguments(genericTypeAST)) {\n                context.startResolvingTypeArguments(genericTypeAST);\n\n                if (genericTypeAST.typeArguments && genericTypeAST.typeArguments.members.length) {\n                    for (var i = 0; i < genericTypeAST.typeArguments.members.length; i++) {\n                        var typeArg = this.resolveTypeReference(<TypeReference>genericTypeAST.typeArguments.members[i], enclosingDecl, context).symbol;\n                        typeArgs[i] = context.findSpecializationForType(typeArg);\n                    }\n                }\n\n                context.doneResolvingTypeArguments();\n            }\n\n            var typeParameters = genericTypeSymbol.getTypeParameters();\n\n            if (typeArgs.length && typeArgs.length != typeParameters.length) {\n                return SymbolAndDiagnostics.create(\n                    this.getNewErrorTypeSymbol(null),\n                    [context.postError(this.unitPath, genericTypeAST.minChar, genericTypeAST.getLength(), DiagnosticCode.Generic_type__0__requires_1_type_argument_s_, [genericTypeSymbol.toString(), genericTypeSymbol.getTypeParameters().length])]);\n            }\n\n            var specializedSymbol = specializeType(genericTypeSymbol, typeArgs, this, enclosingDecl, context, genericTypeAST);\n\n            // check constraints, if appropriate\n            var typeConstraint: PullTypeSymbol = null;\n            var upperBound: PullTypeSymbol = null;\n            var diagnostics: Diagnostic[] = null;\n\n            for (var iArg = 0; (iArg < typeArgs.length) && (iArg < typeParameters.length); iArg++) {\n                typeArg = typeArgs[iArg];\n                typeConstraint = typeParameters[iArg].getConstraint();\n\n                // test specialization type for assignment compatibility with the constraint\n                if (typeConstraint) {\n                    if (typeArg.isTypeParameter()) {\n                        upperBound = (<PullTypeParameterSymbol>typeArg).getConstraint();\n\n                        if (upperBound) {\n                            typeArg = upperBound;\n                        }\n                    }\n\n                    if (typeArg.isResolving()) {\n                        return SymbolAndDiagnostics.fromSymbol(specializedSymbol);\n                    }\n                    if (!this.sourceIsAssignableToTarget(typeArg, typeConstraint, context)) {\n                        var diagnostic = context.postError(this.unitPath, genericTypeAST.minChar, genericTypeAST.getLength(), DiagnosticCode.Type__0__does_not_satisfy_the_constraint__1__for_type_parameter__2_, [typeArg.toString(true), typeConstraint.toString(true), typeParameters[iArg].toString(true)]);\n                        diagnostics = this.addDiagnostic(diagnostics, diagnostic);\n                    }\n                }\n            }\n\n            return SymbolAndDiagnostics.create(specializedSymbol, diagnostics);\n        }\n\n        private resolveDottedTypeNameExpression(dottedNameAST: BinaryExpression, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullTypeSymbol> {\n            var symbolAndDiagnostics = <SymbolAndDiagnostics<PullTypeSymbol>>this.getSymbolAndDiagnosticsForAST(dottedNameAST);\n            if (!symbolAndDiagnostics) {\n                symbolAndDiagnostics = this.computeDottedTypeNameExpression(dottedNameAST, enclosingDecl, context);\n                this.setSymbolAndDiagnosticsForAST(dottedNameAST, symbolAndDiagnostics, context);\n            }\n\n            var symbol = symbolAndDiagnostics.symbol;\n            if (!symbol.isResolved()) {\n                this.resolveDeclaredSymbol(symbol, enclosingDecl, context);\n            }\n\n            return symbolAndDiagnostics;\n        }\n\n        private computeDottedTypeNameExpression(dottedNameAST: BinaryExpression, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullTypeSymbol> {\n            if ((<Identifier>dottedNameAST.operand2).isMissing()) {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n            }\n\n            // assemble the dotted name path\n            var rhsName = (<Identifier>dottedNameAST.operand2).text;\n\n            // TODO(cyrusn): Setting this context value should not be necessary.  We could have only\n            // gotten into this code path if it was already set.\n            var savedResolvingTypeReference = context.resolvingTypeReference;\n            context.resolvingTypeReference = true;\n            var lhs = this.resolveAST(dottedNameAST.operand1, false, enclosingDecl, context).symbol;\n            context.resolvingTypeReference = savedResolvingTypeReference;\n\n            var lhsType = lhs.getType();\n\n            if (context.isResolvingClassExtendedType) {\n                if (lhs.isAlias()) {\n                    (<PullTypeAliasSymbol>lhs).setIsUsedAsValue();\n                }\n            }\n\n            if (this.isAnyOrEquivalent(lhsType)) {\n                return SymbolAndDiagnostics.fromSymbol(lhsType);\n            }\n\n            if (!lhsType) {\n                return SymbolAndDiagnostics.create(\n                    this.getNewErrorTypeSymbol(null),\n                    [context.postError(this.unitPath, dottedNameAST.operand2.minChar, dottedNameAST.operand2.getLength(), DiagnosticCode.Could_not_find_enclosing_symbol_for_dotted_name__0_, [(<Identifier>dottedNameAST.operand2).actualText])]);\n            }\n\n            // now for the name...\n            var childTypeSymbol = lhsType.findNestedType(rhsName);\n\n            // If the name is expressed as a dotted name within the parent type,\n            // then it will be considered a contained member, so back up to the nearest\n            // enclosing symbol and look there\n            if (!childTypeSymbol && enclosingDecl) {\n                var parentDecl = enclosingDecl;\n\n                while (parentDecl) {\n                    if (parentDecl.getKind() & PullElementKind.SomeContainer) {\n                        break;\n                    }\n\n                    parentDecl = parentDecl.getParentDecl();\n                }\n\n                if (parentDecl) {\n                    var enclosingSymbolType = parentDecl.getSymbol().getType();\n\n                    if (enclosingSymbolType === lhsType) {\n                        childTypeSymbol = <PullTypeSymbol>lhsType.findContainedMember(rhsName);\n                    }\n                }\n            }\n\n            if (!childTypeSymbol) {\n                return SymbolAndDiagnostics.create(\n                    this.getNewErrorTypeSymbol(null),\n                    [context.postError(this.unitPath, dottedNameAST.operand2.minChar, dottedNameAST.operand2.getLength(), DiagnosticCode.The_property__0__does_not_exist_on_value_of_type__1__, [(<Identifier>dottedNameAST.operand2).actualText, lhsType.getName()])]);\n            }\n\n            return SymbolAndDiagnostics.fromSymbol(childTypeSymbol);\n        }\n\n        private resolveFunctionExpression(funcDeclAST: FunctionDeclaration, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            var functionDecl = this.getDeclForAST(funcDeclAST);\n            var funcDeclSymbol: PullSymbol = null;\n\n            if (functionDecl) {\n                funcDeclSymbol = functionDecl.getSymbol();\n                if (funcDeclSymbol.isResolved()) {\n                    return funcDeclSymbol;\n                }\n            }\n\n            // if we have an assigning AST with a type, and the funcDecl has no parameter types or return type annotation\n            // we\'ll contextually type it\n            // otherwise, just process it as a normal function declaration\n\n            var shouldContextuallyType = inContextuallyTypedAssignment;\n\n            var assigningFunctionTypeSymbol: PullFunctionTypeSymbol = null;\n            var assigningFunctionSignature: PullSignatureSymbol = null;\n\n            if (funcDeclAST.returnTypeAnnotation) {\n                shouldContextuallyType = false;\n            }\n\n            if (shouldContextuallyType && funcDeclAST.arguments) {\n\n                for (var i = 0; i < funcDeclAST.arguments.members.length; i++) {\n                    if ((<Parameter>funcDeclAST.arguments.members[i]).typeExpr) {\n                        shouldContextuallyType = false;\n                        break;\n                    }\n                }\n            }\n\n            if (shouldContextuallyType) {\n\n                assigningFunctionTypeSymbol = <PullFunctionTypeSymbol>context.getContextualType();\n\n                if (assigningFunctionTypeSymbol) {\n                    this.resolveDeclaredSymbol(assigningFunctionTypeSymbol, enclosingDecl, context);\n\n                    if (assigningFunctionTypeSymbol) {\n                        assigningFunctionSignature = assigningFunctionTypeSymbol.getCallSignatures()[0];\n                    }\n                }\n            }\n\n            // create a new function decl and symbol\n\n            if (!funcDeclSymbol) {\n                var semanticInfo = this.semanticInfoChain.getUnit(this.unitPath);\n                var declCollectionContext = new DeclCollectionContext(semanticInfo);\n\n                declCollectionContext.scriptName = this.unitPath;\n\n                if (enclosingDecl) {\n                    declCollectionContext.pushParent(enclosingDecl);\n                }\n\n                getAstWalkerFactory().walk(funcDeclAST, preCollectDecls, postCollectDecls, null, declCollectionContext);\n\n                functionDecl = this.getDeclForAST(funcDeclAST);\n\n                var binder = new PullSymbolBinder(this.compilationSettings, this.semanticInfoChain);\n                binder.setUnit(this.unitPath);\n                binder.bindFunctionExpressionToPullSymbol(functionDecl);\n\n                funcDeclSymbol = <PullFunctionTypeSymbol>functionDecl.getSymbol();\n            }\n\n            var signature = funcDeclSymbol.getType().getCallSignatures()[0];\n\n            // link parameters and resolve their annotations\n            if (funcDeclAST.arguments) {\n\n                var contextParams: PullSymbol[] = [];\n                var contextParam: PullSymbol = null;\n\n                if (assigningFunctionSignature) {\n                    contextParams = assigningFunctionSignature.getParameters();\n                }\n\n                for (var i = 0; i < funcDeclAST.arguments.members.length; i++) {\n\n                    if ((i < contextParams.length) && !contextParams[i].getIsVarArg()) {\n                        contextParam = contextParams[i];\n                    }\n                    else if (contextParams.length && contextParams[contextParams.length - 1].getIsVarArg()) {\n                        contextParam = (<PullArrayTypeSymbol>contextParams[contextParams.length - 1].getType()).getElementType();\n                    }\n\n                    // use the function decl as the enclosing decl, so as to properly resolve type parameters\n                    this.resolveFunctionExpressionParameter(<Parameter>funcDeclAST.arguments.members[i], contextParam, functionDecl, context);\n                }\n            }\n\n            // resolve the return type annotation\n            if (funcDeclAST.returnTypeAnnotation) {\n                var returnTypeSymbol = this.resolveTypeReference(<TypeReference>funcDeclAST.returnTypeAnnotation, functionDecl, context).symbol;\n\n                signature.setReturnType(returnTypeSymbol);\n\n            }\n            else {\n                if (assigningFunctionSignature) {\n                    var returnType = assigningFunctionSignature.getReturnType();\n\n                    if (returnType) {\n                        context.pushContextualType(returnType, context.inProvisionalResolution(), null);\n                        //signature.setReturnType(returnType);\n                        this.resolveFunctionBodyReturnTypes(funcDeclAST, signature, true, functionDecl, context);\n                        context.popContextualType();\n                    }\n                    else {\n                        signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n                }\n                else {\n                    this.resolveFunctionBodyReturnTypes(funcDeclAST, signature, false, functionDecl, context);\n                }\n            }\n\n            // set contextual type link\n            if (assigningFunctionTypeSymbol) {\n                funcDeclSymbol.addOutgoingLink(assigningFunctionTypeSymbol, SymbolLinkKind.ContextuallyTypedAs);\n            }\n\n            funcDeclSymbol.setResolved();\n\n            return funcDeclSymbol;\n        }\n\n        private resolveThisExpression(ast: AST, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var symbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(ast);\n\n            if (!symbolAndDiagnostics) {\n                symbolAndDiagnostics = this.computeThisExpressionSymbol(ast, enclosingDecl, context);\n                this.setSymbolAndDiagnosticsForAST(ast, symbolAndDiagnostics, context);\n            }\n\n            return symbolAndDiagnostics;\n        }\n\n        private computeThisExpressionSymbol(ast: AST, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            if (enclosingDecl) {\n                var enclosingDeclKind = enclosingDecl.getKind();\n                var diagnostics: Diagnostic[];\n\n                if (enclosingDeclKind === PullElementKind.Container) { // Dynamic modules are ok, though\n                    return SymbolAndDiagnostics.create(\n                        this.getNewErrorTypeSymbol(null),\n                        [context.postError(this.currentUnit.getPath(), ast.minChar, ast.getLength(), DiagnosticCode._this__cannot_be_referenced_within_module_bodies)]);\n                }\n                else if (!(enclosingDeclKind & (PullElementKind.SomeFunction | PullElementKind.Script | PullElementKind.SomeBlock))) {\n                    return SymbolAndDiagnostics.create(\n                        this.getNewErrorTypeSymbol(null),\n                        [context.postError(this.currentUnit.getPath(), ast.minChar, ast.getLength(), DiagnosticCode._this__must_only_be_used_inside_a_function_or_script_context)]);\n                }\n                else {\n                    var declPath: PullDecl[] = this.getPathToDecl(enclosingDecl);\n\n                    // work back up the decl path, until you can find a class\n                    // PULLTODO: Obviously not completely correct, but this sufficiently unblocks testing of the pull model.\n                    // PULLTODO: Why is this \'obviously not completely correct\'.  \n                    if (declPath.length) {\n                        for (var i = declPath.length - 1; i >= 0; i--) {\n                            var decl = declPath[i];\n                            var declKind = decl.getKind();\n                            var declFlags = decl.getFlags();\n\n                            if (declFlags & PullElementFlags.Static) {\n                                break;\n                            }\n                            else if (declKind === PullElementKind.FunctionExpression && !hasFlag(declFlags, PullElementFlags.FatArrow)) {\n                                break;\n                            }\n                            else if (declKind === PullElementKind.Function) {\n                                break;\n                            }\n                            else if (declKind === PullElementKind.Class) {\n                                var classSymbol = <PullClassTypeSymbol>decl.getSymbol();\n                                return SymbolAndDiagnostics.fromSymbol(classSymbol);\n                            }\n                        }\n                    }\n                }\n            }\n\n            return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n        }\n\n        // PULLTODO: Optimization: cache this for a given decl path\n        private resolveSuperExpression(ast: AST, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            if (!enclosingDecl) {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n            }\n\n            var declPath: PullDecl[] = enclosingDecl !== null ? this.getPathToDecl(enclosingDecl) : [];\n            var classSymbol: PullClassTypeSymbol = null;\n\n            // work back up the decl path, until you can find a class\n            if (declPath.length) {\n                for (var i = declPath.length - 1; i >= 0; i--) {\n                    var decl = declPath[i];\n                    var declFlags = decl.getFlags();\n\n                    if (decl.getKind() === PullElementKind.FunctionExpression &&\n                        !(declFlags & PullElementFlags.FatArrow)) {\n\n                        break;\n                    }\n                    else if (declFlags & PullElementFlags.Static) {\n                        break;\n                    }\n                    else if (decl.getKind() === PullElementKind.Class) {\n                        classSymbol = <PullClassTypeSymbol>decl.getSymbol();\n\n                        break;\n                    }\n                }\n            }\n\n            if (classSymbol) {\n                var parents = classSymbol.getExtendedTypes();\n\n                if (parents.length) {\n                    return SymbolAndDiagnostics.fromSymbol(parents[0]);\n                }\n            }\n\n            return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n        }\n\n        public resolveObjectLiteralExpression(expressionAST: AST, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext, additionalResults?: PullAdditionalObjectLiteralResolutionData): SymbolAndDiagnostics<PullSymbol> {\n            var symbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(expressionAST);\n\n            if (!symbolAndDiagnostics || additionalResults) {\n                symbolAndDiagnostics = this.computeObjectLiteralExpression(expressionAST, inContextuallyTypedAssignment, enclosingDecl, context, additionalResults);\n                this.setSymbolAndDiagnosticsForAST(expressionAST, symbolAndDiagnostics, context);\n            }\n\n            return symbolAndDiagnostics;\n        }\n\n        // if there\'s no type annotation on the assigning AST, we need to create a type from each binary expression\n        // in the object literal\n        private computeObjectLiteralExpression(expressionAST: AST, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext, additionalResults?: PullAdditionalObjectLiteralResolutionData): SymbolAndDiagnostics<PullSymbol> {\n            // PULLTODO: Create a decl for the object literal\n\n            // walk the members of the object literal,\n            // create fields for each based on the value assigned in\n            var objectLitAST = <UnaryExpression>expressionAST;\n            var span = TextSpan.fromBounds(objectLitAST.minChar, objectLitAST.limChar);\n\n            var objectLitDecl = new PullDecl(\"\", \"\", PullElementKind.ObjectLiteral, PullElementFlags.None, span, this.unitPath);\n\n            if (enclosingDecl) {\n                objectLitDecl.setParentDecl(enclosingDecl);\n            }\n\n            this.currentUnit.setDeclForAST(objectLitAST, objectLitDecl);\n            this.currentUnit.setASTForDecl(objectLitDecl, objectLitAST);\n\n            var typeSymbol = new PullTypeSymbol(\"\", PullElementKind.Interface);\n            typeSymbol.addDeclaration(objectLitDecl);\n            objectLitDecl.setSymbol(typeSymbol);\n\n            var memberDecls = <ASTList>objectLitAST.operand;\n\n            var contextualType: PullTypeSymbol = null;\n\n            if (inContextuallyTypedAssignment) {\n                contextualType = context.getContextualType();\n\n                this.resolveDeclaredSymbol(contextualType, enclosingDecl, context);\n            }\n\n            if (memberDecls) {\n                var binex: BinaryExpression;\n                var memberSymbol: PullSymbol;\n                var assigningSymbol: PullSymbol = null;\n                var acceptedContextualType = false;\n\n                if (additionalResults) {\n                    additionalResults.membersContextTypeSymbols = [];\n                }\n\n                for (var i = 0, len = memberDecls.members.length; i < len; i++) {\n                    binex = <BinaryExpression>memberDecls.members[i];\n\n                    var id = binex.operand1;\n                    var text: string;\n                    var actualText: string;\n\n                    if (id.nodeType === NodeType.Name) {\n                        actualText = (<Identifier>id).actualText;\n                        text = (<Identifier>id).text;\n                    }\n                    else if (id.nodeType === NodeType.StringLiteral) {\n                        actualText = (<StringLiteral>id).actualText;\n                        text = (<StringLiteral>id).text;\n                    }\n                    else {\n                        // TODO: no error for this?  What if it\'s a numeric literal?\n                        return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n                    }\n\n                    // PULLTODO: Collect these at decl collection time, add them to the var decl\n                    span = TextSpan.fromBounds(binex.minChar, binex.limChar);\n\n                    var decl = new PullDecl(text, actualText, PullElementKind.Property, PullElementFlags.Public, span, this.unitPath);\n\n                    objectLitDecl.addChildDecl(decl);\n                    decl.setParentDecl(objectLitDecl);\n\n                    this.semanticInfoChain.getUnit(this.unitPath).setDeclForAST(binex, decl);\n                    this.semanticInfoChain.getUnit(this.unitPath).setASTForDecl(decl, binex);\n\n                    memberSymbol = new PullSymbol(text, PullElementKind.Property);\n\n                    memberSymbol.addDeclaration(decl);\n                    decl.setSymbol(memberSymbol);\n\n                    if (contextualType) {\n                        assigningSymbol = contextualType.findMember(text);\n\n                        if (assigningSymbol) {\n\n                            this.resolveDeclaredSymbol(assigningSymbol, enclosingDecl, context);\n\n                            context.pushContextualType(assigningSymbol.getType(), context.inProvisionalResolution(), null);\n\n                            acceptedContextualType = true;\n\n                            if (additionalResults) {\n                                additionalResults.membersContextTypeSymbols[i] = assigningSymbol.getType();\n                            }\n                        }\n                    }\n\n                    // if operand 2 is a getter or a setter, we need to resolve it properly\n                    if (binex.operand2.nodeType === NodeType.FunctionDeclaration) {\n                        var funcDeclAST = <FunctionDeclaration>binex.operand2;\n\n                        if (funcDeclAST.isAccessor()) {\n                            var semanticInfo = this.semanticInfoChain.getUnit(this.unitPath);\n                            var declCollectionContext = new DeclCollectionContext(semanticInfo);\n\n                            declCollectionContext.scriptName = this.unitPath;\n\n                            declCollectionContext.pushParent(objectLitDecl);\n\n                            getAstWalkerFactory().walk(funcDeclAST, preCollectDecls, postCollectDecls, null, declCollectionContext);\n\n                            var functionDecl = this.getDeclForAST(funcDeclAST);\n\n                            var binder = new PullSymbolBinder(this.compilationSettings, this.semanticInfoChain);\n                            binder.setUnit(this.unitPath);\n                            binder.pushParent(typeSymbol, objectLitDecl);\n\n                            if (funcDeclAST.isGetAccessor()) {\n                                binder.bindGetAccessorDeclarationToPullSymbol(functionDecl);\n                            }\n                            else {\n                                binder.bindSetAccessorDeclarationToPullSymbol(functionDecl);\n                            }\n                        }\n                    }\n\n                    var memberExprType = this.resolveAST(binex.operand2, assigningSymbol != null, enclosingDecl, context).symbol;\n\n                    if (acceptedContextualType) {\n                        context.popContextualType();\n                        acceptedContextualType = false;\n                    }\n\n                    context.setTypeInContext(memberSymbol, memberExprType.getType());\n\n                    memberSymbol.setResolved();\n\n                    this.setSymbolAndDiagnosticsForAST(binex.operand1, SymbolAndDiagnostics.fromSymbol(memberSymbol), context);\n\n                    typeSymbol.addMember(memberSymbol, SymbolLinkKind.PublicMember);\n                }\n            }\n\n            typeSymbol.setResolved();\n            return SymbolAndDiagnostics.fromSymbol(typeSymbol);\n        }\n\n        private resolveArrayLiteralExpression(arrayLit: UnaryExpression, inContextuallyTypedAssignment, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var symbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(arrayLit);\n            if (!symbolAndDiagnostics) {\n                symbolAndDiagnostics = this.computeArrayLiteralExpressionSymbol(arrayLit, inContextuallyTypedAssignment, enclosingDecl, context);\n                this.setSymbolAndDiagnosticsForAST(arrayLit, symbolAndDiagnostics, context);\n            }\n\n            return symbolAndDiagnostics;\n        }\n\n        private computeArrayLiteralExpressionSymbol(arrayLit: UnaryExpression, inContextuallyTypedAssignment, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var elements = <ASTList>arrayLit.operand;\n            var elementType = this.semanticInfoChain.anyTypeSymbol;\n            var elementTypes: PullTypeSymbol[] = [];\n            var comparisonInfo = new TypeComparisonInfo();\n            var contextualType: PullTypeSymbol = null;\n            comparisonInfo.onlyCaptureFirstError = true;\n\n            // if the target type is an array type, extract the element type\n            if (inContextuallyTypedAssignment) {\n                contextualType = context.getContextualType();\n\n                this.resolveDeclaredSymbol(contextualType, enclosingDecl, context);\n\n                if (contextualType.isArray()) {\n                    contextualType = contextualType.getElementType();\n                }\n\n                context.pushContextualType(contextualType, context.inProvisionalResolution(), null);\n            }\n\n            if (elements) {\n                for (var i = 0; i < elements.members.length; i++) {\n                    elementTypes[elementTypes.length] = this.resolveAST(elements.members[i], inContextuallyTypedAssignment, enclosingDecl, context).symbol.getType();\n                }\n\n                if (inContextuallyTypedAssignment) {\n                    context.popContextualType();\n                }\n\n                if (elementTypes.length) {\n                    elementType = elementTypes[0];\n                }\n\n                var collection: IPullTypeCollection = {\n                    getLength: () => { return elements.members.length; },\n                    setTypeAtIndex: (index: number, type: PullTypeSymbol) => { elementTypes[index] = type; },\n                    getTypeAtIndex: (index: number) => { return elementTypes[index]; }\n                }\n\n                elementType = this.findBestCommonType(elementType, contextualType, collection, context, comparisonInfo);\n\n                // if the array type is the undefined type, we should widen it to any\n                // if it\'s of the null type, only widen it if it\'s not in a nested array element, so as not to \n                // short-circuit any checks for the best common type\n                if (elementType === this.semanticInfoChain.undefinedTypeSymbol || elementType === this.semanticInfoChain.nullTypeSymbol) {\n                    elementType = this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n            else if (inContextuallyTypedAssignment) {\n                context.popContextualType();\n            }\n\n            if (!elementType) {\n                elementType = this.semanticInfoChain.anyTypeSymbol;\n            }\n            else if (contextualType) {\n                // for the case of zero-length \'any\' arrays, we still want to set the contextual type, if\n                // need be\n                if (this.sourceIsAssignableToTarget(elementType, contextualType, context)) {\n                    elementType = contextualType;\n                }\n            }\n\n            var arraySymbol = elementType.getArrayType();\n\n            // ...But in case we haven\'t...\n            if (!arraySymbol) {\n\n                if (!this.cachedArrayInterfaceType) {\n                    this.cachedArrayInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Array\", this.getPathToDecl(enclosingDecl), PullElementKind.Interface);\n                }\n\n                if (this.cachedArrayInterfaceType && !this.cachedArrayInterfaceType.isResolved()) {\n                    this.resolveDeclaredSymbol(this.cachedArrayInterfaceType, enclosingDecl, context);\n                }\n\n                arraySymbol = specializeToArrayType(this.semanticInfoChain.elementTypeSymbol, elementType, this, context);\n\n                if (!arraySymbol) {\n                    arraySymbol = this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n\n            return SymbolAndDiagnostics.fromSymbol(arraySymbol);\n        }\n\n        private resolveIndexExpression(callEx: BinaryExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var symbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(callEx);\n            if (!symbolAndDiagnostics) {\n                symbolAndDiagnostics = this.computeIndexExpressionSymbol(callEx, inContextuallyTypedAssignment, enclosingDecl, context);\n                this.setSymbolAndDiagnosticsForAST(callEx, symbolAndDiagnostics, context);\n            }\n\n            return symbolAndDiagnostics;\n        }\n\n        private computeIndexExpressionSymbol(callEx: BinaryExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            // resolve the target\n            var targetSymbol = this.resolveAST(callEx.operand1, inContextuallyTypedAssignment, enclosingDecl, context).symbol;\n\n            var targetTypeSymbol = targetSymbol.getType();\n\n            if (this.isAnyOrEquivalent(targetTypeSymbol)) {\n                return SymbolAndDiagnostics.fromSymbol(targetTypeSymbol);\n            }\n\n            var elementType = targetTypeSymbol.getElementType();\n\n            var indexType = this.resolveAST(callEx.operand2, inContextuallyTypedAssignment, enclosingDecl, context).symbol.getType();\n\n            var isNumberIndex = indexType === this.semanticInfoChain.numberTypeSymbol || PullHelpers.symbolIsEnum(indexType);\n\n            if (elementType && isNumberIndex) {\n                return SymbolAndDiagnostics.fromSymbol(elementType);\n            }\n\n            // if the index expression is a string literal or a numberic literal and the object expression has\n            // a property with that name,  the property access is the type of that property\n            if (callEx.operand2.nodeType === NodeType.StringLiteral || callEx.operand2.nodeType === NodeType.NumericLiteral) {\n                var memberName = callEx.operand2.nodeType === NodeType.StringLiteral ? (<StringLiteral>callEx.operand2).actualText :\n                    quoteStr((<NumberLiteral>callEx.operand2).value.toString());\n\n                var member = targetTypeSymbol.findMember(memberName);\n\n                if (member) {\n                    return SymbolAndDiagnostics.fromSymbol(member.getType());\n                }\n            }\n\n            var signatures = targetTypeSymbol.getIndexSignatures();\n\n            var stringSignature: PullSignatureSymbol = null;\n            var numberSignature: PullSignatureSymbol = null;\n            var signature: PullSignatureSymbol = null;\n            var paramSymbols: PullSymbol[];\n            var paramType: PullTypeSymbol;\n\n            for (var i = 0; i < signatures.length; i++) {\n                if (stringSignature && numberSignature) {\n                    break;\n                }\n\n                signature = signatures[i];\n\n                paramSymbols = signature.getParameters();\n\n                if (paramSymbols.length) {\n                    paramType = paramSymbols[0].getType();\n\n                    if (paramType === this.semanticInfoChain.stringTypeSymbol) {\n                        stringSignature = signatures[i];\n                        continue;\n                    }\n                    else if (paramType === this.semanticInfoChain.numberTypeSymbol || paramType.getKind() === PullElementKind.Enum) {\n                        numberSignature = signatures[i];\n                        continue;\n                    }\n                }\n            }\n\n            // otherwise, if the object expression has a numeric index signature and the index expression is\n            // of type Any, the Number primitive type or an enum type, the property access is of the type of that index\n            // signature\n            if (numberSignature && (isNumberIndex || indexType === this.semanticInfoChain.anyTypeSymbol)) {\n                var returnType = numberSignature.getReturnType();\n\n                if (!returnType) {\n                    returnType = this.semanticInfoChain.anyTypeSymbol;\n                }\n\n                return SymbolAndDiagnostics.fromSymbol(returnType);\n            }\n            // otherwise, if the object expression has a string index signature and the index expression is\n            // of type Any, the String or Number primitive type or an enum type, the property access of the type of\n            // that index signature\n            else if (stringSignature && (isNumberIndex || indexType === this.semanticInfoChain.anyTypeSymbol || indexType === this.semanticInfoChain.stringTypeSymbol)) {\n                var returnType = stringSignature.getReturnType();\n\n                if (!returnType) {\n                    returnType = this.semanticInfoChain.anyTypeSymbol;\n                }\n\n                return SymbolAndDiagnostics.fromSymbol(returnType);\n            }\n            // otherwise, if indexExpr is of type Any, the String or Number primitive type or an enum type,\n            // the property access is of type Any\n            else if (isNumberIndex || indexType === this.semanticInfoChain.anyTypeSymbol || indexType === this.semanticInfoChain.stringTypeSymbol) {\n                var returnType = this.semanticInfoChain.anyTypeSymbol;\n                return SymbolAndDiagnostics.fromSymbol(returnType);\n            }\n            // otherwise, the property acess is invalid and a compile-time error occurs\n            else {\n                return SymbolAndDiagnostics.create(\n                    this.getNewErrorTypeSymbol(null),\n                    [context.postError(this.getUnitPath(), callEx.minChar, callEx.getLength(), DiagnosticCode.Value_of_type__0__is_not_indexable_by_type__1_, [targetTypeSymbol.toString(false), indexType.toString(false)])]);\n            }\n        }\n\n        private resolveBitwiseOperator(expressionAST: AST, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            var binex = <BinaryExpression>expressionAST;\n\n            var leftType = <PullTypeSymbol>this.resolveAST(binex.operand1, inContextuallyTypedAssignment, enclosingDecl, context).symbol.getType();\n            var rightType = <PullTypeSymbol>this.resolveAST(binex.operand2, inContextuallyTypedAssignment, enclosingDecl, context).symbol.getType();\n\n            if (this.sourceIsSubtypeOfTarget(leftType, this.semanticInfoChain.numberTypeSymbol, context) &&\n                this.sourceIsSubtypeOfTarget(rightType, this.semanticInfoChain.numberTypeSymbol, context)) {\n\n                return this.semanticInfoChain.numberTypeSymbol;\n            }\n            else if ((leftType === this.semanticInfoChain.booleanTypeSymbol) &&\n                (rightType === this.semanticInfoChain.booleanTypeSymbol)) {\n\n                return this.semanticInfoChain.booleanTypeSymbol;\n            }\n            else if (this.isAnyOrEquivalent(leftType)) {\n                if ((this.isAnyOrEquivalent(rightType) ||\n                    (rightType === this.semanticInfoChain.numberTypeSymbol) ||\n                    (rightType === this.semanticInfoChain.booleanTypeSymbol))) {\n\n                    return this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n            else if (this.isAnyOrEquivalent(rightType)) {\n                if ((leftType === this.semanticInfoChain.numberTypeSymbol) ||\n                    (leftType === this.semanticInfoChain.booleanTypeSymbol)) {\n\n                    return this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n\n            return this.semanticInfoChain.anyTypeSymbol;\n        }\n\n        private resolveArithmeticExpression(binex: BinaryExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var leftType = <PullTypeSymbol>this.resolveAST(binex.operand1, inContextuallyTypedAssignment, enclosingDecl, context).symbol.getType();\n            var rightType = <PullTypeSymbol>this.resolveAST(binex.operand2, inContextuallyTypedAssignment, enclosingDecl, context).symbol.getType();\n\n            // PULLREVIEW: Eh?  I\'ve preserved the logic from the current implementation, but it could use cleaning up\n            if (this.isNullOrUndefinedType(leftType)) {\n                leftType = rightType;\n            }\n            if (this.isNullOrUndefinedType(rightType)) {\n                rightType = leftType;\n            }\n\n            leftType = this.widenType(leftType);\n            rightType = this.widenType(rightType);\n\n            if (binex.nodeType === NodeType.AddExpression || binex.nodeType === NodeType.AddAssignmentExpression) {\n                if (leftType === this.semanticInfoChain.stringTypeSymbol || rightType === this.semanticInfoChain.stringTypeSymbol) {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.stringTypeSymbol);\n                }\n                else if (leftType === this.semanticInfoChain.numberTypeSymbol && rightType === this.semanticInfoChain.numberTypeSymbol) {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.numberTypeSymbol);\n                }\n                else if (this.sourceIsSubtypeOfTarget(leftType, this.semanticInfoChain.numberTypeSymbol, context) && this.sourceIsSubtypeOfTarget(rightType, this.semanticInfoChain.numberTypeSymbol, context)) {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.numberTypeSymbol);\n                }\n                else {\n                    // could be an error\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n                }\n            }\n            else {\n                if (leftType === this.semanticInfoChain.numberTypeSymbol && rightType === this.semanticInfoChain.numberTypeSymbol) {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.numberTypeSymbol);\n                }\n                else if (this.sourceIsSubtypeOfTarget(leftType, this.semanticInfoChain.numberTypeSymbol, context) && this.sourceIsSubtypeOfTarget(rightType, this.semanticInfoChain.numberTypeSymbol, context)) {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.numberTypeSymbol);\n                }\n                else if (this.isAnyOrEquivalent(leftType) || this.isAnyOrEquivalent(rightType)) {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.numberTypeSymbol);\n                }\n                else {\n                    // error\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n                }\n            }\n        }\n\n        private resolveLogicalOrExpression(binex: BinaryExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var symbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(binex);\n            if (!symbolAndDiagnostics) {\n                symbolAndDiagnostics = this.computeLogicalOrExpressionSymbol(binex, inContextuallyTypedAssignment, enclosingDecl, context);\n                this.setSymbolAndDiagnosticsForAST(binex, symbolAndDiagnostics, context);\n            }\n\n            return symbolAndDiagnostics;\n        }\n\n        private computeLogicalOrExpressionSymbol(binex: BinaryExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var leftType = <PullTypeSymbol>this.resolveAST(binex.operand1, inContextuallyTypedAssignment, enclosingDecl, context).symbol.getType();\n            var rightType = <PullTypeSymbol>this.resolveAST(binex.operand2, inContextuallyTypedAssignment, enclosingDecl, context).symbol.getType();\n\n            if (this.isAnyOrEquivalent(leftType) || this.isAnyOrEquivalent(rightType)) {\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n            }\n            else if (leftType === this.semanticInfoChain.booleanTypeSymbol) {\n                if (rightType === this.semanticInfoChain.booleanTypeSymbol) {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.booleanTypeSymbol);\n                }\n                else {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n                }\n            }\n            else if (leftType === this.semanticInfoChain.numberTypeSymbol) {\n                if (rightType === this.semanticInfoChain.numberTypeSymbol) {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.numberTypeSymbol);\n                }\n                else {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n                }\n            }\n            else if (leftType === this.semanticInfoChain.stringTypeSymbol) {\n                if (rightType === this.semanticInfoChain.stringTypeSymbol) {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.stringTypeSymbol);\n                }\n                else {\n                    return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n                }\n            }\n            else if (this.sourceIsSubtypeOfTarget(leftType, rightType, context)) {\n                return SymbolAndDiagnostics.fromSymbol(rightType);\n            }\n            else if (this.sourceIsSubtypeOfTarget(rightType, leftType, context)) {\n                return SymbolAndDiagnostics.fromSymbol(leftType);\n            }\n\n            return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n        }\n\n        private resolveLogicalAndExpression(binex: BinaryExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            return SymbolAndDiagnostics.fromSymbol(this.resolveAST(binex.operand2, inContextuallyTypedAssignment, enclosingDecl, context).symbol.getType());\n        }\n\n        private resolveConditionalExpression(trinex: ConditionalExpression, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var symbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(trinex);\n            if (!symbolAndDiagnostics) {\n                symbolAndDiagnostics = this.computeConditionalExpressionSymbol(trinex, enclosingDecl, context);\n                this.setSymbolAndDiagnosticsForAST(trinex, symbolAndDiagnostics, context);\n            }\n\n            return symbolAndDiagnostics;\n        }\n\n        private computeConditionalExpressionSymbol(trinex: ConditionalExpression, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var leftType = this.resolveAST(trinex.operand2, false, enclosingDecl, context).symbol.getType();\n            var rightType = this.resolveAST(trinex.operand3, false, enclosingDecl, context).symbol.getType();\n\n            var symbol: PullSymbol = null;\n            if (this.typesAreIdentical(leftType, rightType)) {\n                symbol = leftType;\n            }\n            else if (this.sourceIsSubtypeOfTarget(leftType, rightType, context) || this.sourceIsSubtypeOfTarget(rightType, leftType, context)) {\n                var collection: IPullTypeCollection = {\n                    getLength: () => { return 2; },\n                    setTypeAtIndex: (index: number, type: PullTypeSymbol) => { }, // no contextual typing here, so no need to do anything\n                    getTypeAtIndex: (index: number) => { return rightType; } // we only want the \"second\" type - the \"first\" is skipped\n                }\n\n                var bestCommonType = this.findBestCommonType(leftType, null, collection, context);\n\n                if (bestCommonType) {\n                    symbol = bestCommonType;\n                }\n            }\n\n            if (!symbol) {\n                return SymbolAndDiagnostics.create(\n                    this.getNewErrorTypeSymbol(null),\n                    [context.postError(this.getUnitPath(), trinex.minChar, trinex.getLength(), DiagnosticCode.Type_of_conditional_expression_cannot_be_determined__Best_common_type_could_not_be_found_between__0__and__1_, [leftType.toString(false), rightType.toString(false)])]);\n            }\n\n            return SymbolAndDiagnostics.fromSymbol(symbol);\n        }\n\n        private resolveParenthesizedExpression(ast: ParenthesizedExpression, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            // Note: we don\'t want to consider errors at a lower node to also be happening at this\n            // node.  If we did that, then we\'d end up reporting an error multiple times in type check.\n            // First as we hit this node, then as we hit the lower node that actually produced the\n            // error.\n            return this.resolveAST(ast.expression, false, enclosingDecl, context).withoutDiagnostics();\n        }\n\n        private resolveExpressionStatement(ast: ExpressionStatement, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            // Note: we don\'t want to consider errors at a lower node to also be happening at this\n            // node.  If we did that, then we\'d end up reporting an error multiple times in type check.\n            // First as we hit this node, then as we hit the lower node that actually produced the\n            // error.\n            return this.resolveAST(ast.expression, inContextuallyTypedAssignment, enclosingDecl, context).withoutDiagnostics();\n        }\n\n        public resolveCallExpression(callEx: CallExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext, additionalResults?: PullAdditionalCallResolutionData): SymbolAndDiagnostics<PullSymbol> {\n            if (additionalResults) {\n                return this.computeCallExpressionSymbol(callEx, inContextuallyTypedAssignment, enclosingDecl, context, additionalResults);\n            }\n\n            var symbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(callEx);\n            if (!symbolAndDiagnostics) {\n                symbolAndDiagnostics = this.computeCallExpressionSymbol(callEx, inContextuallyTypedAssignment, enclosingDecl, context, null);\n                this.setSymbolAndDiagnosticsForAST(callEx, symbolAndDiagnostics, context);\n            }\n\n            return symbolAndDiagnostics;\n        }\n\n        public computeCallExpressionSymbol(callEx: CallExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext, additionalResults?: PullAdditionalCallResolutionData): SymbolAndDiagnostics<PullSymbol> {\n            // resolve the target\n            var targetSymbol = this.resolveAST(callEx.target, inContextuallyTypedAssignment, enclosingDecl, context).symbol;\n            var targetAST = this.getLastIdentifierInTarget(callEx);\n\n            // don\'t be fooled\n            //if (target === this.semanticInfoChain.anyTypeSymbol) {\n            //    diagnostic = context.postError(callEx.minChar, callEx.getLength(), this.unitPath, \"Invalid call expression\", enclosingDecl);\n            //    return this.getNewErrorTypeSymbol(diagnostic); \n            //}\n\n            var targetTypeSymbol = targetSymbol.getType();\n            if (this.isAnyOrEquivalent(targetTypeSymbol)) {\n\n                if (callEx.typeArguments) {\n                    return SymbolAndDiagnostics.create(\n                        this.getNewErrorTypeSymbol(null),\n                        [context.postError(this.unitPath, targetAST.minChar, targetAST.getLength(), DiagnosticCode.Untyped_function_calls_may_not_accept_type_arguments)]);\n                }\n\n                return SymbolAndDiagnostics.fromSymbol(this.semanticInfoChain.anyTypeSymbol);\n            }\n            \n            var diagnostics: Diagnostic[] = null;\n            var isSuperCall = false;\n\n            if (callEx.target.nodeType === NodeType.SuperExpression) {\n                isSuperCall = true;\n\n                if (targetTypeSymbol.isClass()) {\n                    targetSymbol = (<PullClassTypeSymbol>targetTypeSymbol).getConstructorMethod();\n                    targetTypeSymbol = targetSymbol.getType();\n                }\n                else {\n                    diagnostics = this.addDiagnostic(diagnostics,\n                        context.postError(this.unitPath, targetAST.minChar, targetAST.getLength(), DiagnosticCode.Calls_to__super__are_only_valid_inside_a_class));\n                    return SymbolAndDiagnostics.create(this.getNewErrorTypeSymbol(null), diagnostics);\n                }\n            }\n\n            var signatures = isSuperCall ? (<PullFunctionTypeSymbol>targetTypeSymbol).getConstructSignatures() : (<PullFunctionTypeSymbol>targetTypeSymbol).getCallSignatures();\n\n            if (!signatures.length && (targetTypeSymbol.getKind() == PullElementKind.ConstructorType)) {\n                diagnostics = this.addDiagnostic(diagnostics,\n                    context.postError(this.unitPath, targetAST.minChar, targetAST.getLength(), DiagnosticCode.Value_of_type__0__is_not_callable__Did_you_mean_to_include__new___, [targetTypeSymbol.toString()]));\n            }\n\n            var typeArgs: PullTypeSymbol[] = null;\n            var typeReplacementMap: any = null;\n            var couldNotFindGenericOverload = false;\n            var couldNotAssignToConstraint: boolean;\n\n            // resolve the type arguments, specializing if necessary\n            if (callEx.typeArguments) {\n                // specialize the type arguments\n                typeArgs = [];\n\n                if (callEx.typeArguments && callEx.typeArguments.members.length) {\n                    for (var i = 0; i < callEx.typeArguments.members.length; i++) {\n                        var typeArg = this.resolveTypeReference(<TypeReference>callEx.typeArguments.members[i], enclosingDecl, context).symbol;\n                        typeArgs[i] = context.findSpecializationForType(typeArg);\n                    }\n                }\n            }\n\n            // next, walk the available signatures\n            // if any are generic, and we don\'t have type arguments, try to infer\n            // otherwise, try to specialize to the type arguments above\n            if (targetTypeSymbol.isGeneric()) {\n\n                var resolvedSignatures: PullSignatureSymbol[] = [];\n                var inferredTypeArgs: PullTypeSymbol[];\n                var specializedSignature: PullSignatureSymbol;\n                var typeParameters: PullTypeParameterSymbol[];\n                var typeConstraint: PullTypeSymbol = null;\n                var prevSpecializingToAny = context.specializingToAny;\n                var prevSpecializing: boolean = context.isSpecializingSignatureAtCallSite;\n                var beforeResolutionSignatures = signatures;\n                var triedToInferTypeArgs: boolean;\n\n                for (var i = 0; i < signatures.length; i++) {\n                    typeParameters = signatures[i].getTypeParameters();\n                    couldNotAssignToConstraint = false;\n                    triedToInferTypeArgs = false;\n\n                    if (signatures[i].isGeneric() && typeParameters.length) {\n                        if (typeArgs) {\n                            inferredTypeArgs = typeArgs;\n                        }\n                        else if (callEx.arguments) {\n                            inferredTypeArgs = this.inferArgumentTypesForSignature(signatures[i], callEx.arguments, new TypeComparisonInfo(), enclosingDecl, context);\n                            triedToInferTypeArgs = true;\n                        }\n\n                        // if we could infer Args, or we have type arguments, then attempt to specialize the signature\n                        if (inferredTypeArgs) {\n\n                            typeReplacementMap = {};\n\n                            if (inferredTypeArgs.length) {\n\n                                if (inferredTypeArgs.length < typeParameters.length) {\n                                    continue;\n                                }\n\n                                for (var j = 0; j < typeParameters.length; j++) {\n                                    typeReplacementMap[typeParameters[j].getSymbolID().toString()] = inferredTypeArgs[j];\n                                }\n                                for (var j = 0; j < typeParameters.length; j++) {\n                                    typeConstraint = typeParameters[j].getConstraint();\n\n                                    // test specialization type for assignment compatibility with the constraint\n                                    if (typeConstraint) {\n                                        if (typeConstraint.isTypeParameter()) {\n                                            context.pushTypeSpecializationCache(typeReplacementMap);\n                                            typeConstraint = specializeType(typeConstraint, null, this, enclosingDecl, context);  //<PullTypeSymbol>this.resolveDeclaredSymbol(typeConstraint, enclosingDecl, context);\n                                            context.popTypeSpecializationCache();\n                                        }\n                                        if (!this.sourceIsAssignableToTarget(inferredTypeArgs[j], typeConstraint, context)) {\n                                            diagnostics = this.addDiagnostic(diagnostics,\n                                                context.postError(this.unitPath, targetAST.minChar, targetAST.getLength(), DiagnosticCode.Type__0__does_not_satisfy_the_constraint__1__for_type_parameter__2_, [inferredTypeArgs[j].toString(true), typeConstraint.toString(true), typeParameters[j].toString(true)]));\n                                            couldNotAssignToConstraint = true;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n\n                                // if we tried to infer type arguments but could not, this overload should not be considered to be a candidate\n                                if (triedToInferTypeArgs) {\n\n                                    if (signatures[i].parametersAreFixed()) {\n                                        if (signatures[i].hasGenericParameter()) {\n                                            context.specializingToAny = true;\n                                        }\n                                        else {\n                                            resolvedSignatures[resolvedSignatures.length] = signatures[i];\n                                        }\n                                    }\n                                    else {\n                                        continue;\n                                    }\n                                }\n\n                                context.specializingToAny = true;\n                            }\n\n                            if (couldNotAssignToConstraint) {\n                                continue;\n                            }\n\n                            context.isSpecializingSignatureAtCallSite = true;\n                            specializedSignature = specializeSignature(signatures[i], false, typeReplacementMap, inferredTypeArgs, this, enclosingDecl, context);\n                            \n                            context.isSpecializingSignatureAtCallSite = prevSpecializing;\n                            context.specializingToAny = prevSpecializingToAny;\n\n                            if (specializedSignature) {\n                                resolvedSignatures[resolvedSignatures.length] = specializedSignature;\n                            }\n                        }\n                    }\n                    else {\n                        resolvedSignatures[resolvedSignatures.length] = signatures[i];\n                    }\n                }\n                // PULLTODO: Try to avoid copying here...\n\n                if (signatures.length && !resolvedSignatures.length) {\n                    couldNotFindGenericOverload = true;\n                }\n\n                signatures = resolvedSignatures;\n            }\n            \n            // the target should be a function\n            //if (!targetTypeSymbol.isType()) {\n            //    this.log(\"Attempting to call a non-function symbol\");\n            //    return this.semanticInfoChain.anyTypeSymbol;\n            //}\n            var errorCondition: PullSymbol = null;\n\n            if (!signatures.length) {\n                if (additionalResults) {\n                    additionalResults.targetSymbol = targetSymbol;\n                    additionalResults.targetTypeSymbol = targetTypeSymbol;\n                    additionalResults.resolvedSignatures = beforeResolutionSignatures;\n                    additionalResults.candidateSignature = beforeResolutionSignatures && beforeResolutionSignatures.length ? beforeResolutionSignatures[0] : null;\n\n                    additionalResults.actualParametersContextTypeSymbols = actualParametersContextTypeSymbols;\n                }\n\n                if (!couldNotFindGenericOverload) {\n\n                    // if there are no call signatures, but the target is a subtype of \'Function\', return \'any\'\n                    if (this.cachedFunctionInterfaceType && this.sourceIsSubtypeOfTarget(targetTypeSymbol, this.cachedFunctionInterfaceType, context)) {\n                        return SymbolAndDiagnostics.create(this.semanticInfoChain.anyTypeSymbol, diagnostics);\n                    }\n\n                    diagnostics = this.addDiagnostic(diagnostics, context.postError(this.unitPath, callEx.minChar, callEx.getLength(), DiagnosticCode.Unable_to_invoke_type_with_no_call_signatures));\n                    errorCondition = this.getNewErrorTypeSymbol(null);\n                }\n                else {\n                    diagnostics = this.addDiagnostic(diagnostics, context.postError(this.unitPath, callEx.minChar, callEx.getLength(), DiagnosticCode.Could_not_select_overload_for__call__expression));\n                    errorCondition = this.getNewErrorTypeSymbol(null);\n                }\n\n                return SymbolAndDiagnostics.create(errorCondition, diagnostics);\n            }\n\n            var signature = this.resolveOverloads(callEx, signatures, enclosingDecl, callEx.typeArguments != null, context);\n            var useBeforeResolutionSignatures = signature == null;\n            \n            if (!signature) {\n                diagnostics = this.addDiagnostic(diagnostics,\n                    context.postError(this.unitPath, targetAST.minChar, targetAST.getLength(), DiagnosticCode.Could_not_select_overload_for__call__expression));\n\n                // Remember the error state\n                errorCondition = this.getNewErrorTypeSymbol(null);\n\n                if (!signatures.length) {\n                    return SymbolAndDiagnostics.create(errorCondition, diagnostics);\n                }\n\n                // Attempt to recover from the error condition\n                // First, pick the first signature as the candidate signature\n                signature = signatures[0];\n\n                // Second, clear any state left from overload resolution in preparation of contextual typing\n                if (callEx.arguments) {\n                    for (var k = 0, n = callEx.arguments.members.length; k < n; k++) {\n                        var arg = callEx.arguments.members[k];\n                        var argSymbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(arg);\n                        var argSymbol = argSymbolAndDiagnostics && argSymbolAndDiagnostics.symbol;\n\n                        if (argSymbol) {\n                            var argType = argSymbol.getType();\n                            if (arg.nodeType === NodeType.FunctionDeclaration) {\n                                if (!this.canApplyContextualTypeToFunction(argType, <FunctionDeclaration>arg, true)) {\n                                    continue;\n                                }\n                            }\n\n                            argSymbol.invalidate();\n                        }\n                    }\n                }\n            }\n\n            if (!signature.isGeneric() && callEx.typeArguments) {\n                diagnostics = this.addDiagnostic(diagnostics,\n                    context.postError(this.unitPath, targetAST.minChar, targetAST.getLength(), DiagnosticCode.Non_generic_functions_may_not_accept_type_arguments));\n            }\n\n            var returnType = signature.getReturnType();\n\n            // contextually type arguments\n            var actualParametersContextTypeSymbols: PullTypeSymbol[] = [];\n            if (callEx.arguments) {\n                var len = callEx.arguments.members.length;\n                var params = signature.getParameters();\n                var contextualType: PullTypeSymbol = null;\n                var signatureDecl = signature.getDeclarations()[0];\n\n                for (var i = 0; i < len; i++) {\n                    // account for varargs\n                    if (params.length) {\n                        if (i < params.length - 1 || (i < params.length && !signature.hasVariableParamList())) {\n                            if (typeReplacementMap) {\n                                context.pushTypeSpecializationCache(typeReplacementMap);\n                            }\n                            this.resolveDeclaredSymbol(params[i], signatureDecl, context);\n                            if (typeReplacementMap) {\n                                context.popTypeSpecializationCache();\n                            }\n                            contextualType = params[i].getType();\n                        }\n                        else if (signature.hasVariableParamList()) {\n                            contextualType = params[params.length - 1].getType();\n                            if (contextualType.isArray()) {\n                                contextualType = contextualType.getElementType();\n                            }\n                        }\n                    }\n\n                    if (contextualType) {\n                        context.pushContextualType(contextualType, context.inProvisionalResolution(), null);\n                        actualParametersContextTypeSymbols[i] = contextualType;\n                    }\n\n                    this.resolveAST(callEx.arguments.members[i], contextualType != null, enclosingDecl, context);\n\n                    if (contextualType) {\n                        context.popContextualType();\n                        contextualType = null;\n                    }\n                }\n            }\n\n            // Store any additional resolution results if needed before we return\n            if (additionalResults) {\n                additionalResults.targetSymbol = targetSymbol;\n                additionalResults.targetTypeSymbol = targetTypeSymbol;\n                if (useBeforeResolutionSignatures && beforeResolutionSignatures) {\n                    additionalResults.resolvedSignatures = beforeResolutionSignatures;\n                    additionalResults.candidateSignature = beforeResolutionSignatures[0];\n\n                } else {\n                    additionalResults.resolvedSignatures = signatures;\n                    additionalResults.candidateSignature = signature;\n                }\n                additionalResults.actualParametersContextTypeSymbols = actualParametersContextTypeSymbols;\n            }\n\n            if (errorCondition) {\n                return SymbolAndDiagnostics.create(errorCondition, diagnostics);\n            }\n\n            if (!returnType) {\n                returnType = this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            return SymbolAndDiagnostics.create(returnType, diagnostics);\n        }\n\n        public resolveNewExpression(callEx: CallExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext, additionalResults?: PullAdditionalCallResolutionData): SymbolAndDiagnostics<PullSymbol> {\n            if (additionalResults) {\n                return this.computeNewExpressionSymbol(callEx, inContextuallyTypedAssignment, enclosingDecl, context, additionalResults);\n            }\n\n            var symbolAndDiagnotics = this.getSymbolAndDiagnosticsForAST(callEx);\n            if (!symbolAndDiagnotics) {\n                symbolAndDiagnotics = this.computeNewExpressionSymbol(callEx, inContextuallyTypedAssignment, enclosingDecl, context, null);\n                this.setSymbolAndDiagnosticsForAST(callEx, symbolAndDiagnotics, context);\n            }\n\n            return symbolAndDiagnotics;\n        }\n\n        public computeNewExpressionSymbol(callEx: CallExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext, additionalResults?: PullAdditionalCallResolutionData): SymbolAndDiagnostics<PullSymbol> {\n            var returnType: PullTypeSymbol = null;\n\n            // resolve the target\n            var targetSymbol = this.resolveAST(callEx.target, inContextuallyTypedAssignment, enclosingDecl, context).symbol;\n            var targetTypeSymbol = targetSymbol.isType() ? <PullTypeSymbol>targetSymbol : targetSymbol.getType();\n\n            var targetAST = this.getLastIdentifierInTarget(callEx);\n\n            // PULLREVIEW: In the case of a generic instantiation of a class type,\n            // we\'ll have gotten a \'GenericType\' node, which will be resolved as the class type and not\n            // the constructor type.  In this case, set the targetTypeSymbol to the constructor type\n            if (targetTypeSymbol.isClass()) {\n                targetTypeSymbol = (<PullClassTypeSymbol>targetTypeSymbol).getConstructorMethod().getType();\n            }\n\n            var constructSignatures = targetTypeSymbol.getConstructSignatures();\n\n            var typeArgs: PullTypeSymbol[] = null;\n            var typeReplacementMap: any = null;\n            var usedCallSignaturesInstead = false;\n            var couldNotAssignToConstraint: boolean;\n\n            if (this.isAnyOrEquivalent(targetTypeSymbol)) {\n                return SymbolAndDiagnostics.fromSymbol(targetTypeSymbol);\n            }\n\n            if (!constructSignatures.length) {\n                constructSignatures = targetTypeSymbol.getCallSignatures();\n                usedCallSignaturesInstead = true;\n            }\n\n            var diagnostics: Diagnostic[] = null;\n            if (constructSignatures.length) {\n                // resolve the type arguments, specializing if necessary\n                if (callEx.typeArguments) {\n                    // specialize the type arguments\n                    typeArgs = [];\n\n                    if (callEx.typeArguments && callEx.typeArguments.members.length) {\n                        for (var i = 0; i < callEx.typeArguments.members.length; i++) {\n                            var typeArg = this.resolveTypeReference(<TypeReference>callEx.typeArguments.members[i], enclosingDecl, context).symbol;\n                            typeArgs[i] = context.findSpecializationForType(typeArg);                            \n                        }\n                    }\n                }\n\n                // next, walk the available signatures\n                // if any are generic, and we don\'t have type arguments, try to infer\n                // otherwise, try to specialize to the type arguments above\n                if (targetTypeSymbol.isGeneric()) {\n                    var resolvedSignatures: PullSignatureSymbol[] = [];\n                    var inferredTypeArgs: PullTypeSymbol[];\n                    var specializedSignature: PullSignatureSymbol;\n                    var typeParameters: PullTypeParameterSymbol[];\n                    var typeConstraint: PullTypeSymbol = null;\n                    var prevSpecializingToAny = context.specializingToAny;\n                    var prevIsSpecializing = context.isSpecializingSignatureAtCallSite = true;\n                    var triedToInferTypeArgs: boolean;\n\n                    for (var i = 0; i < constructSignatures.length; i++) {\n                        couldNotAssignToConstraint = false;\n\n                        if (constructSignatures[i].isGeneric()) {\n                            if (typeArgs) {\n                                inferredTypeArgs = typeArgs;\n                            }\n                            else if (callEx.arguments) {\n                                inferredTypeArgs = this.inferArgumentTypesForSignature(constructSignatures[i], callEx.arguments, new TypeComparisonInfo(), enclosingDecl, context);\n                                triedToInferTypeArgs = true;\n                            }\n\n                            // if we could infer Args, or we have type arguments, then attempt to specialize the signature\n                            if (inferredTypeArgs) {\n                                typeParameters = constructSignatures[i].getTypeParameters();\n\n                                typeReplacementMap = {};\n\n                                if (inferredTypeArgs.length) {\n\n                                    if (inferredTypeArgs.length < typeParameters.length) {\n                                        continue;\n                                    }\n\n                                    for (var j = 0; j < typeParameters.length; j++) {\n                                        typeReplacementMap[typeParameters[j].getSymbolID().toString()] = inferredTypeArgs[j];\n                                    }\n                                    for (var j = 0; j < typeParameters.length; j++) {\n                                        typeConstraint = typeParameters[j].getConstraint();\n\n                                        // test specialization type for assignment compatibility with the constraint\n                                        if (typeConstraint) {\n\n                                            if (typeConstraint.isTypeParameter()) {\n                                                context.pushTypeSpecializationCache(typeReplacementMap);\n                                                typeConstraint = specializeType(typeConstraint, null, this, enclosingDecl, context);\n                                                context.popTypeSpecializationCache();\n                                            }\n\n                                            if (!this.sourceIsAssignableToTarget(inferredTypeArgs[j], typeConstraint, context)) {\n                                                diagnostics = this.addDiagnostic(diagnostics,\n                                                    context.postError(this.unitPath, targetAST.minChar, targetAST.getLength(), DiagnosticCode.Type__0__does_not_satisfy_the_constraint__1__for_type_parameter__2_, [inferredTypeArgs[j].toString(true), typeConstraint.toString(true), typeParameters[j].toString(true)]));\n                                                couldNotAssignToConstraint = true;\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n\n                                    if (triedToInferTypeArgs) {\n\n                                        if (constructSignatures[i].parametersAreFixed()) {\n                                            if (constructSignatures[i].hasGenericParameter()) {\n                                                context.specializingToAny = true;\n                                            }\n                                            else {\n                                                resolvedSignatures[resolvedSignatures.length] = constructSignatures[i];\n                                            }\n                                        }\n                                        else {\n                                            continue;\n                                        }\n                                    }\n\n                                    context.specializingToAny = true;\n                                }\n\n                                if (couldNotAssignToConstraint) {\n                                    continue;\n                                }\n\n                                context.isSpecializingSignatureAtCallSite = true;\n                                specializedSignature = specializeSignature(constructSignatures[i], false, typeReplacementMap, inferredTypeArgs, this, enclosingDecl, context);\n\n                                context.specializingToAny = prevSpecializingToAny;\n                                context.isSpecializingSignatureAtCallSite = prevIsSpecializing;\n\n                                if (specializedSignature) {\n                                    resolvedSignatures[resolvedSignatures.length] = specializedSignature;\n                                }\n                            }\n                        }\n                        else {\n                            resolvedSignatures[resolvedSignatures.length] = constructSignatures[i];\n                        }\n                    }\n\n                    // PULLTODO: Try to avoid copying here...\n                    constructSignatures = resolvedSignatures;\n                }\n\n                // the target should be a function\n                //if (!targetSymbol.isType()) {\n                //    this.log(\"Attempting to call a non-function symbol\");\n                //    return this.semanticInfoChain.anyTypeSymbol;\n                //}\n\n                var signature = this.resolveOverloads(callEx, constructSignatures, enclosingDecl, callEx.typeArguments != null, context);\n\n                // Store any additional resolution results if needed before we return\n                if (additionalResults) {\n                    additionalResults.targetSymbol = targetSymbol;\n                    additionalResults.targetTypeSymbol = targetTypeSymbol;\n                    additionalResults.resolvedSignatures = constructSignatures;\n                    additionalResults.candidateSignature = signature;\n                    additionalResults.actualParametersContextTypeSymbols = [];\n                }\n\n                if (!constructSignatures.length && diagnostics) {\n                    var result = this.getNewErrorTypeSymbol(ArrayUtilities.last(diagnostics));\n                    return SymbolAndDiagnostics.create(result, diagnostics);\n                }\n\n                var errorCondition: PullSymbol = null;\n\n                // if we haven\'t been able to choose an overload, default to the first one\n                if (!signature) {\n                    diagnostics = this.addDiagnostic(diagnostics,\n                        context.postError(this.unitPath, targetAST.minChar, targetAST.getLength(), DiagnosticCode.Could_not_select_overload_for__new__expression));\n\n                    // Remember the error\n                    errorCondition = this.getNewErrorTypeSymbol(diagnostics[0]);\n\n                    if (!constructSignatures.length) {\n                        return SymbolAndDiagnostics.create(errorCondition, diagnostics);\n                    }\n\n                    // First, pick the first signature as the candidate signature\n                    signature = constructSignatures[0];\n\n                    // Second, clear any state left from overload resolution in preparation of contextual typing\n                    if (callEx.arguments) {\n                        for (var k = 0, n = callEx.arguments.members.length; k < n; k++) {\n                            var arg = callEx.arguments.members[k];\n                            var argSymbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(arg);\n                            var argSymbol = argSymbolAndDiagnostics && argSymbolAndDiagnostics.symbol;\n\n                            if (argSymbol) {\n                                var argType = argSymbol.getType();\n                                if (arg.nodeType === NodeType.FunctionDeclaration) {\n                                    if (!this.canApplyContextualTypeToFunction(argType, <FunctionDeclaration>arg, true)) {\n                                        continue;\n                                    }\n                                }\n\n                                argSymbol.invalidate();\n                            }\n                        }\n                    }\n                }\n\n                returnType = signature.getReturnType();\n\n                // if it\'s a default constructor, and we have a type argument, we need to specialize\n                if (returnType && !signature.isGeneric() && returnType.isGeneric() && !returnType.getIsSpecialized()) {\n                    if (typeArgs && typeArgs.length) {\n                        returnType = specializeType(returnType, typeArgs, this, enclosingDecl, context, callEx);\n                    }\n                    else {\n                        returnType = this.specializeTypeToAny(returnType, enclosingDecl, context);\n                    }\n                }\n\n                if (usedCallSignaturesInstead) {\n                    if (returnType != this.semanticInfoChain.voidTypeSymbol) {\n                        diagnostics = this.addDiagnostic(diagnostics,\n                            context.postError(this.unitPath, targetAST.minChar, targetAST.getLength(), DiagnosticCode.Call_signatures_used_in_a__new__expression_must_have_a__void__return_type));\n                        return SymbolAndDiagnostics.create(this.getNewErrorTypeSymbol(ArrayUtilities.last(diagnostics)), diagnostics);\n                    }\n                    else {\n                        returnType = this.semanticInfoChain.anyTypeSymbol;\n                    }\n                }\n\n                if (!returnType) {\n                    returnType = signature.getReturnType();\n\n                    if (!returnType) {\n                        returnType = targetTypeSymbol;\n                    }\n                }\n\n                // contextually type arguments\n                var actualParametersContextTypeSymbols: PullTypeSymbol[] = [];\n                if (callEx.arguments) {\n                    var len = callEx.arguments.members.length;\n                    var params = signature.getParameters();\n                    var contextualType: PullTypeSymbol = null;\n                    var signatureDecl = signature.getDeclarations()[0];\n\n                    for (var i = 0; i < len; i++) {\n\n                        if (params.length) {\n                            if (i < params.length - 1 || (i < params.length && !signature.hasVariableParamList())) {\n                                if (typeReplacementMap) {\n                                    context.pushTypeSpecializationCache(typeReplacementMap);\n                                }\n                                this.resolveDeclaredSymbol(params[i], signatureDecl, context);\n                                if (typeReplacementMap) {\n                                    context.popTypeSpecializationCache();\n                                }\n                                contextualType = params[i].getType();\n                            }\n                            else if (signature.hasVariableParamList()) {\n                                contextualType = params[params.length - 1].getType();\n                                if (contextualType.isArray()) {\n                                    contextualType = contextualType.getElementType();\n                                }\n                            }\n                        }\n\n                        if (contextualType) {\n                            context.pushContextualType(contextualType, context.inProvisionalResolution(), null);\n                            actualParametersContextTypeSymbols[i] = contextualType;\n                        }\n\n                        this.resolveAST(callEx.arguments.members[i], contextualType != null, enclosingDecl, context);\n\n                        if (contextualType) {\n                            context.popContextualType();\n                            contextualType = null;\n                        }\n                    }\n                }\n\n                // Store any additional resolution results if needed before we return\n                if (additionalResults) {\n                    additionalResults.targetSymbol = targetSymbol;\n                    additionalResults.targetTypeSymbol = targetTypeSymbol;\n                    additionalResults.resolvedSignatures = constructSignatures;\n                    additionalResults.candidateSignature = signature;\n                    additionalResults.actualParametersContextTypeSymbols = actualParametersContextTypeSymbols;\n                }\n\n                if (errorCondition) {\n                    return SymbolAndDiagnostics.create(errorCondition, diagnostics);\n                }\n\n                if (!returnType) {\n                    returnType = this.semanticInfoChain.anyTypeSymbol;\n                }\n\n                return SymbolAndDiagnostics.create(returnType, diagnostics);\n            }\n            else if (targetTypeSymbol.isClass()) {\n                // implicit constructor\n                return SymbolAndDiagnostics.create(returnType, diagnostics);\n            }\n\n            diagnostics = this.addDiagnostic(diagnostics,\n                context.postError(this.unitPath, targetAST.minChar, targetAST.getLength(), DiagnosticCode.Invalid__new__expression));\n\n            return SymbolAndDiagnostics.create(this.getNewErrorTypeSymbol(ArrayUtilities.last(diagnostics)), diagnostics);\n        }\n\n        public resolveTypeAssertionExpression(assertionExpression: UnaryExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullTypeSymbol> {\n            return this.resolveTypeReference(assertionExpression.castTerm, enclosingDecl, context).withoutDiagnostics();\n        }\n\n        private resolveAssignmentStatement(binex: BinaryExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var symbolAndDiagnostics = this.getSymbolAndDiagnosticsForAST(binex);\n\n            if (!symbolAndDiagnostics) {\n                symbolAndDiagnostics = this.computeAssignmentStatementSymbol(binex, inContextuallyTypedAssignment, enclosingDecl, context);\n                this.setSymbolAndDiagnosticsForAST(binex, symbolAndDiagnostics, context);\n            }\n\n            return symbolAndDiagnostics;\n        }\n\n        private computeAssignmentStatementSymbol(binex: BinaryExpression, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl, context: PullTypeResolutionContext): SymbolAndDiagnostics<PullSymbol> {\n            var leftType = this.resolveAST(binex.operand1, inContextuallyTypedAssignment, enclosingDecl, context).symbol.getType();\n\n            context.pushContextualType(leftType, context.inProvisionalResolution(), null);\n            this.resolveAST(binex.operand2, true, enclosingDecl, context);\n            context.popContextualType();\n\n            return SymbolAndDiagnostics.fromSymbol(leftType);\n        }\n\n        public resolveBoundDecls(decl: PullDecl, context: PullTypeResolutionContext): void {\n\n            if (!decl) {\n                return;\n            }\n\n            switch (decl.getKind()) {\n                case PullElementKind.Script:\n                    var childDecls = decl.getChildDecls();\n                    for (var i = 0; i < childDecls.length; i++) {\n                        this.resolveBoundDecls(childDecls[i], context);\n                    }\n                    break;\n                case PullElementKind.DynamicModule:\n                case PullElementKind.Container:\n                    var moduleDecl = <ModuleDeclaration>this.semanticInfoChain.getASTForDecl(decl);\n                    this.resolveModuleDeclaration(moduleDecl, context);\n                    break;\n                case PullElementKind.Interface:\n                    // case PullElementKind.ObjectType:\n                    var interfaceDecl = <TypeDeclaration>this.semanticInfoChain.getASTForDecl(decl);\n                    this.resolveInterfaceDeclaration(interfaceDecl, context);\n                    break;\n                case PullElementKind.Class:\n                    var classDecl = <ClassDeclaration>this.semanticInfoChain.getASTForDecl(decl);\n                    this.resolveClassDeclaration(classDecl, context);\n                    break;\n                case PullElementKind.Method:\n                case PullElementKind.Function:\n                    var funcDecl = <FunctionDeclaration>this.semanticInfoChain.getASTForDecl(decl);\n                    this.resolveFunctionDeclaration(funcDecl, context);\n                    break;\n                case PullElementKind.GetAccessor:\n                    funcDecl = <FunctionDeclaration>this.semanticInfoChain.getASTForDecl(decl);\n                    this.resolveGetAccessorDeclaration(funcDecl, context);\n                    break;\n                case PullElementKind.SetAccessor:\n                    funcDecl = <FunctionDeclaration>this.semanticInfoChain.getASTForDecl(decl);\n                    this.resolveSetAccessorDeclaration(funcDecl, context);\n                    break;\n                case PullElementKind.Property:\n                case PullElementKind.Variable:\n                case PullElementKind.Parameter:\n                    var varDecl = <BoundDecl>this.semanticInfoChain.getASTForDecl(decl);\n\n                    // varDecl may be null if we\'re dealing with an implicit variable created for a class,\n                    // module or enum\n                    if (varDecl) {\n                        this.resolveVariableDeclaration(varDecl, context);\n                    }\n                    break;\n            }\n        }\n\n        // type relationships\n\n        private mergeOrdered(a: PullTypeSymbol, b: PullTypeSymbol, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo): PullTypeSymbol {\n            if (this.isAnyOrEquivalent(a) || this.isAnyOrEquivalent(b)) {\n                return this.semanticInfoChain.anyTypeSymbol;\n            }\n            else if (a === b) {\n                return a;\n            }\n            else if ((b === this.semanticInfoChain.nullTypeSymbol) && a != this.semanticInfoChain.nullTypeSymbol) {\n                return a;\n            }\n            else if ((a === this.semanticInfoChain.nullTypeSymbol) && (b != this.semanticInfoChain.nullTypeSymbol)) {\n                return b;\n            }\n            else if ((a === this.semanticInfoChain.voidTypeSymbol) && (b === this.semanticInfoChain.voidTypeSymbol || b === this.semanticInfoChain.undefinedTypeSymbol || b === this.semanticInfoChain.nullTypeSymbol)) {\n                return a;\n            }\n            else if ((a === this.semanticInfoChain.voidTypeSymbol) && (b === this.semanticInfoChain.anyTypeSymbol)) {\n                return b;\n            }\n            else if ((b === this.semanticInfoChain.undefinedTypeSymbol) && a != this.semanticInfoChain.voidTypeSymbol) {\n                return a;\n            }\n            else if ((a === this.semanticInfoChain.undefinedTypeSymbol) && (b != this.semanticInfoChain.undefinedTypeSymbol)) {\n                return b;\n            }\n            else if (a.isTypeParameter() && !b.isTypeParameter()) {\n                return b;\n            }\n            else if (!a.isTypeParameter() && b.isTypeParameter()) {\n                return a;\n            }\n            else if (a.isArray() && b.isArray()) {\n                if (a.getElementType() === b.getElementType()) {\n                    return a;\n                }\n                else {\n                    var mergedET = this.mergeOrdered(a.getElementType(), b.getElementType(), context, comparisonInfo);\n                    if (mergedET) {\n                        var mergedArrayType = mergedET.getArrayType();\n\n                        if (!mergedArrayType) {\n                            mergedArrayType = specializeToArrayType(this.semanticInfoChain.elementTypeSymbol, mergedET, this, context);\n                        }\n\n                        return mergedArrayType;\n                    }\n                }\n            }\n            else if (this.sourceIsSubtypeOfTarget(a, b, context, comparisonInfo)) {\n                return b;\n            }\n            else if (this.sourceIsSubtypeOfTarget(b, a, context, comparisonInfo)) {\n                return a;\n            }\n\n            return null;\n        }\n\n        public widenType(type: PullTypeSymbol): PullTypeSymbol {\n            if (type === this.semanticInfoChain.undefinedTypeSymbol ||\n                type === this.semanticInfoChain.nullTypeSymbol ||\n                type.isError()) {\n\n                return this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            return type;\n        }\n\n        private isNullOrUndefinedType(type: PullTypeSymbol) {\n            return type === this.semanticInfoChain.nullTypeSymbol ||\n                type === this.semanticInfoChain.undefinedTypeSymbol;\n        }\n\n        private canApplyContextualType(type: PullTypeSymbol) {\n\n            if (!type) {\n                return true;\n            }\n\n            var kind = type.getKind();\n\n            if ((kind & PullElementKind.ObjectType) != 0) {\n                return true;\n            }\n            else if ((kind & PullElementKind.SomeFunction) != 0) {\n                return this.canApplyContextualTypeToFunction(type, <FunctionDeclaration>this.semanticInfoChain.getASTForDecl(type.getDeclarations[0]), true);\n            }\n            else if ((kind & PullElementKind.Array) != 0) {\n                return true;\n            }\n\n            return false;\n        }\n\n        public findBestCommonType(initialType: PullTypeSymbol, targetType: PullTypeSymbol, collection: IPullTypeCollection, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            var len = collection.getLength();\n            var nlastChecked = 0;\n            var bestCommonType = initialType;\n\n            if (targetType && this.canApplyContextualType(bestCommonType)) {\n                if (bestCommonType) {\n                    bestCommonType = this.mergeOrdered(bestCommonType, targetType, context);\n                }\n                else {\n                    bestCommonType = targetType\n                }\n            }\n\n            // it\'s important that we set the convergence type here, and not in the loop,\n            // since the first element considered may be the contextual type\n            var convergenceType: PullTypeSymbol = bestCommonType;\n\n            while (nlastChecked < len) {\n\n                for (var i = 0; i < len; i++) {\n\n                    // no use in comparing a type against itself\n                    if (i === nlastChecked) {\n                        continue;\n                    }\n\n                    if (convergenceType && (bestCommonType = this.mergeOrdered(convergenceType, collection.getTypeAtIndex(i), context, comparisonInfo))) {\n                        convergenceType = bestCommonType;\n                    }\n\n                    if (bestCommonType === null || this.isAnyOrEquivalent(bestCommonType)) {\n                        break;\n                    }\n                    // set the element type to the target type\n                    // If the contextual type is a type variable, but the BCT is not, we won\'t set the BCT\n                    // to the contextual type, so as not to short-circuit type argument inference calculations\n                    else if (targetType && !(bestCommonType.isTypeVariable() || targetType.isTypeVariable())) {\n                        collection.setTypeAtIndex(i, targetType);\n                    }\n                }\n\n                // use the type if we\'ve agreed upon it\n                if (convergenceType && bestCommonType) {\n                    break;\n                }\n\n                nlastChecked++;\n                if (nlastChecked < len) {\n                    convergenceType = collection.getTypeAtIndex(nlastChecked);\n                }\n            }\n\n            if (!bestCommonType) {\n                // if no best common type can be determined, use \"{}\"\n                bestCommonType = new PullTypeSymbol(\"\", PullElementKind.ObjectType);\n            }\n\n            return bestCommonType\n        }\n\n        // Type Identity\n\n        public typesAreIdentical(t1: PullTypeSymbol, t2: PullTypeSymbol, val?: AST) {\n\n            // This clause will cover both primitive types (since the type objects are shared),\n            // as well as shared brands\n            if (t1 === t2) {\n                return true;\n            }\n\n            if (!t1 || !t2) {\n                return false;\n            }\n\n            if (val && t1.isPrimitive() && (<PullPrimitiveTypeSymbol>t1).isStringConstant() && t2 === this.semanticInfoChain.stringTypeSymbol) {\n                return (val.nodeType === NodeType.StringLiteral) && (stripQuotes((<StringLiteral>val).actualText) === stripQuotes(t1.getName()));\n            }\n\n            if (val && t2.isPrimitive() && (<PullPrimitiveTypeSymbol>t2).isStringConstant() && t2 === this.semanticInfoChain.stringTypeSymbol) {\n                return (val.nodeType === NodeType.StringLiteral) && (stripQuotes((<StringLiteral>val).actualText) === stripQuotes(t2.getName()));\n            }\n\n            if (t1.isPrimitive() && (<PullPrimitiveTypeSymbol>t1).isStringConstant() && t2.isPrimitive() && (<PullPrimitiveTypeSymbol>t2).isStringConstant()) {\n                // Both are string constants\n                return TypeScript.stripQuotes(t1.getName()) === TypeScript.stripQuotes(t2.getName());\n            }\n\n            if (t1.isPrimitive() || t2.isPrimitive()) {\n                return false;\n            }\n\n            if (t1.isClass()) {\n                return false;\n            }\n\n            if (t1.isError() && t2.isError()) {\n                return true;\n            }\n\n            var comboId = t2.getSymbolID().toString() + \"#\" + t1.getSymbolID().toString();\n\n            if (this.identicalCache[comboId] != undefined) {\n                return true;\n            }\n\n            // If one is an enum, and they\'re not the same type, they\'re not identical\n            if ((t1.getKind() & PullElementKind.Enum) || (t2.getKind() & PullElementKind.Enum)) {\n                return false;\n            }\n\n            if (t1.isArray() || t2.isArray()) {\n                if (!(t1.isArray() && t2.isArray())) {\n                    return false;\n                }\n                this.identicalCache[comboId] = false;\n                var ret = this.typesAreIdentical(t1.getElementType(), t2.getElementType());\n                if (ret) {\n                    this.identicalCache[comboId] = true;\n                }\n                else {\n                    this.identicalCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            if (t1.isPrimitive() != t2.isPrimitive()) {\n                return false;\n            }\n\n            this.identicalCache[comboId] = false;\n\n            // properties are identical in name, optionality, and type\n            if (t1.hasMembers() && t2.hasMembers()) {\n                var t1Members = t1.getMembers();\n                var t2Members = t2.getMembers();\n\n                if (t1Members.length != t2Members.length) {\n                    this.identicalCache[comboId] = undefined;\n                    return false;\n                }\n\n                var t1MemberSymbol: PullSymbol = null;\n                var t2MemberSymbol: PullSymbol = null;\n\n                var t1MemberType: PullTypeSymbol = null;\n                var t2MemberType: PullTypeSymbol = null;\n\n                for (var iMember = 0; iMember < t1Members.length; iMember++) {\n\n                    t1MemberSymbol = t1Members[iMember];\n                    t2MemberSymbol = t2.findMember(t1MemberSymbol.getName());\n\n                    if (!t2MemberSymbol || (t1MemberSymbol.getIsOptional() != t2MemberSymbol.getIsOptional())) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n\n                    t1MemberType = t1MemberSymbol.getType();\n                    t2MemberType = t2MemberSymbol.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (t1MemberType && t2MemberType && (this.identicalCache[t2MemberType.getSymbolID().toString() + \"#\" + t1MemberType.getSymbolID().toString()] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.typesAreIdentical(t1MemberType, t2MemberType)) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n                }\n            }\n            else if (t1.hasMembers() || t2.hasMembers()) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            var t1CallSigs = t1.getCallSignatures();\n            var t2CallSigs = t2.getCallSignatures();\n\n            var t1ConstructSigs = t1.getConstructSignatures();\n            var t2ConstructSigs = t2.getConstructSignatures();\n\n            var t1IndexSigs = t1.getIndexSignatures();\n            var t2IndexSigs = t2.getIndexSignatures();\n\n            if (!this.signatureGroupsAreIdentical(t1CallSigs, t2CallSigs)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1ConstructSigs, t2ConstructSigs)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1IndexSigs, t2IndexSigs)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            this.identicalCache[comboId] = true;\n            return true;\n        }\n\n        private signatureGroupsAreIdentical(sg1: PullSignatureSymbol[], sg2: PullSignatureSymbol[]) {\n\n            // covers the null case\n            if (sg1 === sg2) {\n                return true;\n            }\n\n            // covers the mixed-null case\n            if (!sg1 || !sg2) {\n                return false;\n            }\n\n            if (sg1.length != sg2.length) {\n                return false;\n            }\n\n            var sig1: PullSignatureSymbol = null;\n            var sig2: PullSignatureSymbol = null;\n            var sigsMatch = false;\n\n            // The signatures in the signature group may not be ordered...\n            // REVIEW: Should definition signatures be required to be identical as well?\n            for (var iSig1 = 0; iSig1 < sg1.length; iSig1++) {\n                sig1 = sg1[iSig1];\n\n                for (var iSig2 = 0; iSig2 < sg2.length; iSig2++) {\n                    sig2 = sg2[iSig2];\n\n                    if (this.signaturesAreIdentical(sig1, sig2)) {\n                        sigsMatch = true;\n                        break;\n                    }\n                }\n\n                if (sigsMatch) {\n                    sigsMatch = false;\n                    continue;\n                }\n\n                // no match found for a specific signature\n                return false;\n            }\n\n            return true;\n        }\n\n        public signaturesAreIdentical(s1: PullSignatureSymbol, s2: PullSignatureSymbol) {\n\n            if (s1.hasVariableParamList() != s2.hasVariableParamList()) {\n                return false;\n            }\n\n            if (s1.getNonOptionalParameterCount() != s2.getNonOptionalParameterCount()) {\n                return false;\n            }\n\n            var s1Params = s1.getParameters();\n            var s2Params = s2.getParameters();\n\n            if (s1Params.length != s2Params.length) {\n                return false;\n            }\n\n            if (!this.typesAreIdentical(s1.getReturnType(), s2.getReturnType())) {\n                return false;\n            }\n\n            for (var iParam = 0; iParam < s1Params.length; iParam++) {\n                if (!this.typesAreIdentical(s1Params[iParam].getType(), s2Params[iParam].getType())) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        // Assignment Compatibility and Subtyping\n\n        private substituteUpperBoundForType(type: PullTypeSymbol) {\n            if (!type || !type.isTypeParameter()) {\n                return type;\n            }\n\n            var constraint = (<PullTypeParameterSymbol>type).getConstraint();\n\n            if (constraint) {\n                return this.substituteUpperBoundForType(constraint);\n            }\n\n            return type;\n        }\n\n        private symbolsShareDeclaration(symbol1: PullSymbol, symbol2: PullSymbol) {\n            var decls1 = symbol1.getDeclarations();\n            var decls2 = symbol2.getDeclarations();\n\n            if (decls1.length && decls2.length) {\n                return decls1[0].isEqual(decls2[0]);\n            }\n\n            return false;\n        }\n\n        public sourceIsSubtypeOfTarget(source: PullTypeSymbol, target: PullTypeSymbol, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            return this.sourceIsRelatableToTarget(source, target, false, this.subtypeCache, context, comparisonInfo);\n        }\n\n        public sourceMembersAreSubtypeOfTargetMembers(source: PullTypeSymbol, target: PullTypeSymbol, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            return this.sourceMembersAreRelatableToTargetMembers(source, target, false, this.subtypeCache, context, comparisonInfo);\n        }\n\n        public sourcePropertyIsSubtypeOfTargetProperty(source: PullTypeSymbol, target: PullTypeSymbol,\n            sourceProp: PullSymbol, targetProp: PullSymbol, context: PullTypeResolutionContext,\n            comparisonInfo?: TypeComparisonInfo) {\n            return this.sourcePropertyIsRelatableToTargetProperty(source, target, sourceProp, targetProp,\n                false, this.subtypeCache, context, comparisonInfo);\n        }\n\n        public sourceCallSignaturesAreSubtypeOfTargetCallSignatures(source: PullTypeSymbol, target: PullTypeSymbol,\n            context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            return this.sourceCallSignaturesAreRelatableToTargetCallSignatures(source, target, false, this.subtypeCache, context, comparisonInfo);\n        }\n\n        public sourceConstructSignaturesAreSubtypeOfTargetConstructSignatures(source: PullTypeSymbol, target: PullTypeSymbol,\n            context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            return this.sourceConstructSignaturesAreRelatableToTargetConstructSignatures(source, target, false, this.subtypeCache, context, comparisonInfo);\n        }\n\n        public sourceIndexSignaturesAreSubtypeOfTargetIndexSignatures(source: PullTypeSymbol, target: PullTypeSymbol,\n            context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            return this.sourceIndexSignaturesAreRelatableToTargetIndexSignatures(source, target, false, this.subtypeCache, context, comparisonInfo);\n        }\n\n        public typeIsSubtypeOfFunction(source: PullTypeSymbol, context): boolean {\n\n            var callSignatures = source.getCallSignatures();\n\n            if (callSignatures.length) {\n                return true;\n            }\n\n            var constructSignatures = source.getConstructSignatures();\n\n            if (constructSignatures.length) {\n                return true;\n            }\n\n            if (this.cachedFunctionInterfaceType) {\n                return this.sourceIsSubtypeOfTarget(source, this.cachedFunctionInterfaceType, context);\n            }\n\n            return false;\n        }\n\n        private signatureGroupIsSubtypeOfTarget(sg1: PullSignatureSymbol[], sg2: PullSignatureSymbol[], context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            return this.signatureGroupIsRelatableToTarget(sg1, sg2, false, this.subtypeCache, context, comparisonInfo);\n        }\n\n        public signatureIsSubtypeOfTarget(s1: PullSignatureSymbol, s2: PullSignatureSymbol, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            return this.signatureIsRelatableToTarget(s1, s2, false, this.subtypeCache, context, comparisonInfo);\n        }\n\n        public sourceIsAssignableToTarget(source: PullTypeSymbol, target: PullTypeSymbol, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo): boolean {\n            return this.sourceIsRelatableToTarget(source, target, true, this.assignableCache, context, comparisonInfo);\n        }\n\n        private signatureGroupIsAssignableToTarget(sg1: PullSignatureSymbol[], sg2: PullSignatureSymbol[], context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo): boolean {\n            return this.signatureGroupIsRelatableToTarget(sg1, sg2, true, this.assignableCache, context, comparisonInfo);\n        }\n\n        public signatureIsAssignableToTarget(s1: PullSignatureSymbol, s2: PullSignatureSymbol, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo): boolean {\n            return this.signatureIsRelatableToTarget(s1, s2, true, this.assignableCache, context, comparisonInfo);\n        }\n\n        private sourceIsRelatableToTarget(source: PullTypeSymbol, target: PullTypeSymbol, assignableTo: boolean, comparisonCache: any, context: PullTypeResolutionContext, comparisonInfo: TypeComparisonInfo): boolean {\n\n            source = this.substituteUpperBoundForType(source);\n            target = this.substituteUpperBoundForType(target);\n\n            // REVIEW: Does this check even matter?\n            //if (this.typesAreIdentical(source, target)) {\n            //    return true;\n            //}\n            if (source === target) {\n                return true;\n            }\n\n            // An error has already been reported in this case\n            if (!(source && target)) {\n                return true;\n            }\n\n            var comboId = source.getSymbolID().toString() + \"#\" + target.getSymbolID().toString();\n\n            // In the case of a \'false\', we want to short-circuit a recursive typecheck\n            if (comparisonCache[comboId] != undefined) {\n                return true;\n            }\n\n            // this is one difference between subtyping and assignment compatibility\n            if (assignableTo) {\n                if (this.isAnyOrEquivalent(source) || this.isAnyOrEquivalent(target)) {\n                    return true;\n                }\n\n                if (source === this.semanticInfoChain.stringTypeSymbol && target.isPrimitive() && (<PullPrimitiveTypeSymbol>target).isStringConstant()) {\n                    return comparisonInfo &&\n                        comparisonInfo.stringConstantVal &&\n                        (comparisonInfo.stringConstantVal.nodeType === NodeType.StringLiteral) &&\n                        (stripQuotes((<StringLiteral>comparisonInfo.stringConstantVal).actualText) === stripQuotes(target.getName()));\n                }\n            }\n            else {\n                // This is one difference between assignment compatibility and subtyping\n                if (this.isAnyOrEquivalent(target)) {\n                    return true;\n                }\n\n                if (target === this.semanticInfoChain.stringTypeSymbol && source.isPrimitive() && (<PullPrimitiveTypeSymbol>source).isStringConstant()) {\n                    return true;\n                }\n            }\n\n            if (source.isPrimitive() && (<PullPrimitiveTypeSymbol>source).isStringConstant() && target.isPrimitive() && (<PullPrimitiveTypeSymbol>target).isStringConstant()) {\n                // Both are string constants\n                return TypeScript.stripQuotes(source.getName()) === TypeScript.stripQuotes(target.getName());\n            }\n\n            if (source === this.semanticInfoChain.undefinedTypeSymbol) {\n                return true;\n            }\n\n            if ((source === this.semanticInfoChain.nullTypeSymbol) && (target != this.semanticInfoChain.undefinedTypeSymbol && target != this.semanticInfoChain.voidTypeSymbol)) {\n                return true;\n            }\n\n            if (target == this.semanticInfoChain.voidTypeSymbol) {\n                if (source == this.semanticInfoChain.anyTypeSymbol || source == this.semanticInfoChain.undefinedTypeSymbol || source == this.semanticInfoChain.nullTypeSymbol) {\n                    return true;\n                }\n\n                return false;\n            }\n            else if (source == this.semanticInfoChain.voidTypeSymbol) {\n                if (target == this.semanticInfoChain.anyTypeSymbol) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            if (target === this.semanticInfoChain.numberTypeSymbol && PullHelpers.symbolIsEnum(source)) {\n                return true;\n            }\n            if (source === this.semanticInfoChain.numberTypeSymbol && PullHelpers.symbolIsEnum(target)) {\n                return true;\n            }\n\n            if (PullHelpers.symbolIsEnum(target) && PullHelpers.symbolIsEnum(source)) {\n                return this.symbolsShareDeclaration(target, source);\n            }\n\n            if ((source.getKind() & PullElementKind.Enum) || (target.getKind() & PullElementKind.Enum)) {\n                return false;\n            }\n\n            if (source.isArray() && target.isArray()) {\n                comparisonCache[comboId] = false;\n                var ret = this.sourceIsRelatableToTarget(source.getElementType(), target.getElementType(), assignableTo, comparisonCache, context, comparisonInfo);\n                if (ret) {\n                    comparisonCache[comboId] = true;\n                }\n                else {\n                    comparisonCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n            else if (source.isArray() && target == this.cachedArrayInterfaceType) {\n                return true;\n            }\n            else if (target.isArray() && source == this.cachedArrayInterfaceType) {\n                return true;\n            }\n\n            if (target.isTypeParameter()) {\n\n                if (!source.isTypeParameter()) {\n                    return false;\n                }\n\n                // We compare parent declarations instead of container symbols because type parameter symbols are shared\n                // accross overload groups\n                var sourceParentDeclaration = source.getDeclarations()[0].getParentDecl();\n                var targetParentDeclaration = target.getDeclarations()[0].getParentDecl();\n\n                if (targetParentDeclaration === sourceParentDeclaration) {\n                    return this.symbolsShareDeclaration(source, target);\n                }\n                else {\n                    return true;\n                }\n            }\n\n            // this check ensures that we only operate on object types from this point forward,\n            // since the checks involving primitives occurred above\n            if (source.isPrimitive() && target.isPrimitive()) {\n\n                // we already know that they\'re not the same, and that neither is \'any\'\n                return false;\n            }\n            else if (source.isPrimitive() != target.isPrimitive()) {\n\n                if (!target.isPrimitive()) {\n                    if (source === this.semanticInfoChain.numberTypeSymbol && this.cachedNumberInterfaceType) {\n\n                        if (!this.cachedNumberInterfaceType.isResolved()) {\n                            this.resolveDeclaredSymbol(this.cachedNumberInterfaceType, null, context);\n                        }\n\n                        source = this.cachedNumberInterfaceType;\n                    }\n                    else if (source === this.semanticInfoChain.stringTypeSymbol && this.cachedStringInterfaceType) {\n\n                        if (!this.cachedStringInterfaceType.isResolved()) {\n                            this.resolveDeclaredSymbol(this.cachedStringInterfaceType, null, context);\n                        }\n\n                        source = this.cachedStringInterfaceType;\n                    }\n                    else if (source === this.semanticInfoChain.booleanTypeSymbol && this.cachedBooleanInterfaceType) {\n\n                        if (!this.cachedBooleanInterfaceType.isResolved()) {\n                            this.resolveDeclaredSymbol(this.cachedBooleanInterfaceType, null, context);\n                        }\n\n                        source = this.cachedBooleanInterfaceType;\n                    }\n                    else {\n                        return false;\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = false;\n\n            if (source.hasBase(target)) {\n                comparisonCache[comboId] = true;\n                return true;\n            }\n\n            if (this.cachedObjectInterfaceType && target === this.cachedObjectInterfaceType) {\n                return true;\n            }\n\n            if (this.cachedFunctionInterfaceType && (source.getCallSignatures().length || source.getConstructSignatures().length) && target === this.cachedFunctionInterfaceType) {\n                return true;\n            }\n\n            if (target.hasMembers() && !this.sourceMembersAreRelatableToTargetMembers(source, target, assignableTo, comparisonCache, context, comparisonInfo)) {\n                comparisonCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.sourceCallSignaturesAreRelatableToTargetCallSignatures(source, target, assignableTo, comparisonCache, context, comparisonInfo)) {\n                comparisonCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.sourceConstructSignaturesAreRelatableToTargetConstructSignatures(source, target, assignableTo, comparisonCache, context, comparisonInfo)) {\n                comparisonCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.sourceIndexSignaturesAreRelatableToTargetIndexSignatures(source, target, assignableTo, comparisonCache, context, comparisonInfo)) {\n                comparisonCache[comboId] = undefined;\n                return false;\n            }\n\n            comparisonCache[comboId] = true;\n            return true;\n        }\n\n        private sourceMembersAreRelatableToTargetMembers(source: PullTypeSymbol, target: PullTypeSymbol, assignableTo: boolean,\n            comparisonCache: any, context: PullTypeResolutionContext, comparisonInfo: TypeComparisonInfo): boolean {\n            var targetProps = target.getAllMembers(PullElementKind.SomeValue, true);\n\n            for (var itargetProp = 0; itargetProp < targetProps.length; itargetProp++) {\n\n                var targetProp = targetProps[itargetProp];\n                var sourceProp = source.findMember(targetProp.getName());\n\n                if (!targetProp.isResolved()) {\n                    this.resolveDeclaredSymbol(targetProp, null, context);\n                }\n\n                var targetPropType = targetProp.getType();\n\n                if (!sourceProp) {\n                    // If it\'s not present on the type in question, look for the property on \'Object\'\n                    if (this.cachedObjectInterfaceType) {\n                        sourceProp = this.cachedObjectInterfaceType.findMember(targetProp.getName());\n                    }\n\n                    if (!sourceProp) {\n                        // Now, the property was not found on Object, but the type in question is a function, look\n                        // for it on function\n                        if (this.cachedFunctionInterfaceType && (targetPropType.getCallSignatures().length || targetPropType.getConstructSignatures().length)) {\n                            sourceProp = this.cachedFunctionInterfaceType.findMember(targetProp.getName());\n                        }\n\n                        // finally, check to see if the property is optional\n                        if (!sourceProp) {\n                            if (!(targetProp.getIsOptional())) {\n                                if (comparisonInfo) { // only surface the first error\n                                    comparisonInfo.flags |= TypeRelationshipFlags.RequiredPropertyIsMissing;\n                                    comparisonInfo.addMessage(getDiagnosticMessage(DiagnosticCode.Type__0__is_missing_property__1__from_type__2_,\n                                        [source.toString(), targetProp.getScopedNameEx().toString(), target.toString()]));\n                                }\n                                return false;\n                            }\n                            continue;\n                        }\n                    }\n                }\n\n                if (!this.sourcePropertyIsRelatableToTargetProperty(source, target, sourceProp, targetProp, assignableTo,\n                    comparisonCache, context, comparisonInfo)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        private sourcePropertyIsRelatableToTargetProperty(source: PullTypeSymbol, target: PullTypeSymbol,\n            sourceProp: PullSymbol, targetProp: PullSymbol, assignableTo: boolean, comparisonCache: any,\n            context: PullTypeResolutionContext, comparisonInfo: TypeComparisonInfo): boolean {\n            var targetPropIsPrivate = targetProp.hasFlag(PullElementFlags.Private);\n            var sourcePropIsPrivate = sourceProp.hasFlag(PullElementFlags.Private);\n\n            // if visibility doesn\'t match, the types don\'t match\n            if (targetPropIsPrivate != sourcePropIsPrivate) {\n                if (comparisonInfo) { // only surface the first error\n                    if (targetPropIsPrivate) {\n                        // Overshadowing property in source that is already defined as private in target\n                        comparisonInfo.addMessage(getDiagnosticMessage(DiagnosticCode.Property__0__defined_as_public_in_type__1__is_defined_as_private_in_type__2_,\n                            [targetProp.getScopedNameEx().toString(), sourceProp.getContainer().toString(), targetProp.getContainer().toString()]));\n                    } else {\n                        // Public property of target is private in source\n                        comparisonInfo.addMessage(getDiagnosticMessage(DiagnosticCode.Property__0__defined_as_private_in_type__1__is_defined_as_public_in_type__2_,\n                            [targetProp.getScopedNameEx().toString(), sourceProp.getContainer().toString(), targetProp.getContainer().toString()]));\n                    }\n                    comparisonInfo.flags |= TypeRelationshipFlags.InconsistantPropertyAccesibility;\n                }\n                return false;\n            }\n            // if both are private members, test to ensure that they share a declaration\n            else if (sourcePropIsPrivate && targetPropIsPrivate) {\n                var targetDecl = targetProp.getDeclarations()[0];\n                var sourceDecl = sourceProp.getDeclarations()[0];\n\n                if (!targetDecl.isEqual(sourceDecl)) {\n                    // Both types define property with same name as private\n                    comparisonInfo.flags |= TypeRelationshipFlags.InconsistantPropertyAccesibility;\n                    comparisonInfo.addMessage(getDiagnosticMessage(DiagnosticCode.Types__0__and__1__define_property__2__as_private,\n                        [sourceProp.getContainer().toString(), targetProp.getContainer().toString(), targetProp.getScopedNameEx().toString()]));\n                    return false;\n                }\n            }\n\n            if (!sourceProp.isResolved()) {\n                this.resolveDeclaredSymbol(sourceProp, null, context);\n            }\n\n            var sourcePropType = sourceProp.getType();\n            var targetPropType = targetProp.getType();\n\n            // catch the mutually recursive or cached cases\n            if (targetPropType && sourcePropType && (comparisonCache[sourcePropType.getSymbolID().toString() + \"#\" + targetPropType.getSymbolID().toString()] != undefined)) {\n                return true;\n            }\n\n            var comparisonInfoPropertyTypeCheck: TypeComparisonInfo = null;\n            if (comparisonInfo && !comparisonInfo.onlyCaptureFirstError) {\n                comparisonInfoPropertyTypeCheck = new TypeComparisonInfo(comparisonInfo);\n            }\n            if (!this.sourceIsRelatableToTarget(sourcePropType, targetPropType, assignableTo, comparisonCache, context, comparisonInfoPropertyTypeCheck)) {\n                if (comparisonInfo) {\n                    comparisonInfo.flags |= TypeRelationshipFlags.IncompatiblePropertyTypes;\n                    var message: string;\n                    if (comparisonInfoPropertyTypeCheck && comparisonInfoPropertyTypeCheck.message) {\n                        message = getDiagnosticMessage(DiagnosticCode.Types_of_property__0__of_types__1__and__2__are_incompatible__NL__3,\n                            [targetProp.getScopedNameEx().toString(), source.toString(), target.toString(), comparisonInfoPropertyTypeCheck.message]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Types_of_property__0__of_types__1__and__2__are_incompatible,\n                            [targetProp.getScopedNameEx().toString(), source.toString(), target.toString()]);\n                    }\n                    comparisonInfo.addMessage(message);\n                }\n\n                return false;\n            }\n\n            return true;\n        }\n\n        private sourceCallSignaturesAreRelatableToTargetCallSignatures(source: PullTypeSymbol, target: PullTypeSymbol,\n            assignableTo: boolean, comparisonCache: any, context: PullTypeResolutionContext,\n            comparisonInfo: TypeComparisonInfo): boolean {\n\n            var targetCallSigs = target.getCallSignatures();\n\n            // check signature groups\n            if (targetCallSigs.length) {\n                var comparisonInfoSignatuesTypeCheck: TypeComparisonInfo = null;\n                if (comparisonInfo && !comparisonInfo.onlyCaptureFirstError) {\n                    comparisonInfoSignatuesTypeCheck = new TypeComparisonInfo(comparisonInfo);\n                }\n\n                var sourceCallSigs = source.getCallSignatures();\n                if (!this.signatureGroupIsRelatableToTarget(sourceCallSigs, targetCallSigs, assignableTo, comparisonCache, context, comparisonInfoSignatuesTypeCheck)) {\n                    if (comparisonInfo) {\n                        var message: string;\n                        if (sourceCallSigs.length && targetCallSigs.length) {\n                            if (comparisonInfoSignatuesTypeCheck && comparisonInfoSignatuesTypeCheck.message) {\n                                message = getDiagnosticMessage(DiagnosticCode.Call_signatures_of_types__0__and__1__are_incompatible__NL__2,\n                                    [source.toString(), target.toString(), comparisonInfoSignatuesTypeCheck.message]);\n                            } else {\n                                message = getDiagnosticMessage(DiagnosticCode.Call_signatures_of_types__0__and__1__are_incompatible,\n                                    [source.toString(), target.toString()]);\n                            }\n                        } else {\n                            var hasSig = targetCallSigs.length ? target.toString() : source.toString();\n                            var lacksSig = !targetCallSigs.length ? target.toString() : source.toString();\n                            message = getDiagnosticMessage(DiagnosticCode.Type__0__requires_a_call_signature__but_Type__1__lacks_one, [hasSig, lacksSig]);\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                        comparisonInfo.addMessage(message);\n                    }\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        private sourceConstructSignaturesAreRelatableToTargetConstructSignatures(source: PullTypeSymbol, target: PullTypeSymbol,\n            assignableTo: boolean, comparisonCache: any, context: PullTypeResolutionContext,\n            comparisonInfo: TypeComparisonInfo): boolean {\n\n            // check signature groups\n            var targetConstructSigs = target.getConstructSignatures();\n            if (targetConstructSigs.length) {\n                var comparisonInfoSignatuesTypeCheck: TypeComparisonInfo = null;\n                if (comparisonInfo && !comparisonInfo.onlyCaptureFirstError) {\n                    comparisonInfoSignatuesTypeCheck = new TypeComparisonInfo(comparisonInfo);\n                }\n\n                var sourceConstructSigs = source.getConstructSignatures();\n                if (!this.signatureGroupIsRelatableToTarget(sourceConstructSigs, targetConstructSigs, assignableTo, comparisonCache, context, comparisonInfoSignatuesTypeCheck)) {\n                    if (comparisonInfo) {\n                        var message: string;\n                        if (sourceConstructSigs.length && targetConstructSigs.length) {\n                            if (comparisonInfoSignatuesTypeCheck && comparisonInfoSignatuesTypeCheck.message) {\n                                message = getDiagnosticMessage(DiagnosticCode.Construct_signatures_of_types__0__and__1__are_incompatible__NL__2,\n                                    [source.toString(), target.toString(), comparisonInfoSignatuesTypeCheck.message]);\n                            } else {\n                                message = getDiagnosticMessage(DiagnosticCode.Construct_signatures_of_types__0__and__1__are_incompatible,\n                                    [source.toString(), target.toString()]);\n                            }\n                        } else {\n                            var hasSig = targetConstructSigs.length ? target.toString() : source.toString();\n                            var lacksSig = !targetConstructSigs.length ? target.toString() : source.toString();\n                            message = getDiagnosticMessage(DiagnosticCode.Type__0__requires_a_construct_signature__but_Type__1__lacks_one, [hasSig, lacksSig]);\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                        comparisonInfo.addMessage(message);\n                    }\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        private sourceIndexSignaturesAreRelatableToTargetIndexSignatures(source: PullTypeSymbol, target: PullTypeSymbol,\n            assignableTo: boolean, comparisonCache: any, context: PullTypeResolutionContext,\n            comparisonInfo: TypeComparisonInfo): boolean {\n\n            var targetIndexSigs = target.getIndexSignatures();\n            \n            if (targetIndexSigs.length) {\n                var sourceIndexSigs = source.getIndexSignatures();\n                \n                var targetIndex = !targetIndexSigs.length && this.cachedObjectInterfaceType ? this.cachedObjectInterfaceType.getIndexSignatures() : targetIndexSigs;\n                var sourceIndex = !sourceIndexSigs.length && this.cachedObjectInterfaceType ? this.cachedObjectInterfaceType.getIndexSignatures() : sourceIndexSigs;\n                \n                var sourceStringSig: PullSignatureSymbol = null;\n                var sourceNumberSig: PullSignatureSymbol = null;\n                \n                var targetStringSig: PullSignatureSymbol = null;\n                var targetNumberSig: PullSignatureSymbol = null;\n                \n                var params: PullSymbol[];                \n\n                for (var i = 0; i < targetIndex.length; i++) {\n                    if (targetStringSig && targetNumberSig) {\n                        break;\n                    }\n\n                    params = targetIndex[i].getParameters();\n\n                    if (params.length) {\n                        if (!targetStringSig && params[0].getType() === this.semanticInfoChain.stringTypeSymbol) {\n                            targetStringSig = targetIndex[i];\n                            continue;\n                        }\n                        else if (!targetNumberSig && params[0].getType() === this.semanticInfoChain.numberTypeSymbol) {\n                            targetNumberSig = targetIndex[i];\n                            continue;\n                        }\n                    }\n                }\n\n                for (var i = 0; i < sourceIndex.length; i++) {\n                    if (sourceStringSig && sourceNumberSig) {\n                        break;\n                    }\n\n                    params = sourceIndex[i].getParameters();\n\n                    if (params.length) {\n                        if (!sourceStringSig && params[0].getType() === this.semanticInfoChain.stringTypeSymbol) {\n                            sourceStringSig = sourceIndex[i];\n                            continue;\n                        }\n                        else if (!sourceNumberSig && params[0].getType() === this.semanticInfoChain.numberTypeSymbol) {\n                            sourceNumberSig = sourceIndex[i];\n                            continue;\n                        }\n                    }\n                }\n\n                var comparable = true;\n                var comparisonInfoSignatuesTypeCheck: TypeComparisonInfo = null;\n                if (comparisonInfo && !comparisonInfo.onlyCaptureFirstError) {\n                    comparisonInfoSignatuesTypeCheck = new TypeComparisonInfo(comparisonInfo);\n                }\n\n                if (targetStringSig) {\n                    if (sourceStringSig) {\n                        comparable = this.signatureIsAssignableToTarget(sourceStringSig, targetStringSig, context, comparisonInfoSignatuesTypeCheck);\n                    }\n                    else {\n                        comparable = false;\n                    }\n                }\n\n                if (comparable && targetNumberSig) {\n                    if (sourceNumberSig) {\n                        comparable = this.signatureIsAssignableToTarget(sourceNumberSig, targetNumberSig, context, comparisonInfoSignatuesTypeCheck);\n                    }\n                    else if (sourceStringSig) {\n                        comparable = this.sourceIsAssignableToTarget(sourceStringSig.getReturnType(), targetNumberSig.getReturnType(), context, comparisonInfoSignatuesTypeCheck);\n                    }\n                    else {\n                        comparable = false;\n                    }\n                }\n\n                if (!comparable) {\n                    if (comparisonInfo) {\n                        var message: string;\n                        if (comparisonInfoSignatuesTypeCheck && comparisonInfoSignatuesTypeCheck.message) {\n                            message = getDiagnosticMessage(DiagnosticCode.Index_signatures_of_types__0__and__1__are_incompatible__NL__2,\n                                [source.toString(), target.toString(), comparisonInfoSignatuesTypeCheck.message]);\n                        } else {\n                            message = getDiagnosticMessage(DiagnosticCode.Index_signatures_of_types__0__and__1__are_incompatible,\n                                [source.toString(), target.toString()]);\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                        comparisonInfo.addMessage(message);\n                    }\n                    return false;\n                }\n            }\n\n            // if the target has a string signature, the source\'s members must be comparable with it\'s return type\n            if (targetStringSig && source.hasMembers()) {\n                var targetReturnType = targetStringSig.getReturnType();\n                var sourceMembers = source.getMembers();\n\n                for (var i = 0; i < sourceMembers.length; i++) {\n                    if (!this.sourceIsRelatableToTarget(sourceMembers[i].getType(), targetReturnType, assignableTo, comparisonCache, context, comparisonInfo)) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }\n\n        // REVIEW: TypeChanges: Return an error context object so the user can get better diagnostic info\n        private signatureGroupIsRelatableToTarget(sourceSG: PullSignatureSymbol[], targetSG: PullSignatureSymbol[], assignableTo: boolean, comparisonCache: any, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            if (sourceSG === targetSG) {\n                return true;\n            }\n\n            if (!(sourceSG.length && targetSG.length)) {\n                return false;\n            }\n\n            var mSig: PullSignatureSymbol = null;\n            var nSig: PullSignatureSymbol = null;\n            var foundMatch = false;\n\n            for (var iMSig = 0; iMSig < targetSG.length; iMSig++) {\n                mSig = targetSG[iMSig];\n\n                if (mSig.isStringConstantOverloadSignature()) {\n                    continue;\n                }\n\n                for (var iNSig = 0; iNSig < sourceSG.length; iNSig++) {\n                    nSig = sourceSG[iNSig];\n\n                    if (nSig.isStringConstantOverloadSignature()) {\n                        continue;\n                    }\n\n                    if (this.signatureIsRelatableToTarget(nSig, mSig, assignableTo, comparisonCache, context, comparisonInfo)) {\n                        foundMatch = true;\n                        break;\n                    }\n                }\n\n                if (foundMatch) {\n                    foundMatch = false;\n                    continue;\n                }\n                return false;\n            }\n\n            return true;\n        }\n\n        private signatureIsRelatableToTarget(sourceSig: PullSignatureSymbol, targetSig: PullSignatureSymbol, assignableTo: boolean, comparisonCache: any, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n\n            var sourceParameters = sourceSig.getParameters();\n            var targetParameters = targetSig.getParameters();\n\n            if (!sourceParameters || !targetParameters) {\n                return false;\n            }\n\n            var targetVarArgCount = /*targetSig.hasVariableParamList() ? targetSig.getNonOptionalParameterCount() - 1 :*/ targetSig.getNonOptionalParameterCount();\n            var sourceVarArgCount = /*sourceSig.hasVariableParamList() ? sourceSig.getNonOptionalParameterCount() - 1 :*/ sourceSig.getNonOptionalParameterCount();\n\n            if (sourceVarArgCount > targetVarArgCount && !targetSig.hasVariableParamList()) {\n                if (comparisonInfo) {\n                    comparisonInfo.flags |= TypeRelationshipFlags.SourceSignatureHasTooManyParameters;\n                    comparisonInfo.addMessage(getDiagnosticMessage(DiagnosticCode.Call_signature_expects__0__or_fewer_parameters, [targetVarArgCount]));\n                }\n                return false;\n            }\n\n            var sourceReturnType = sourceSig.getReturnType();\n            var targetReturnType = targetSig.getReturnType();\n\n            if (targetReturnType != this.semanticInfoChain.voidTypeSymbol) {\n                if (!this.sourceIsRelatableToTarget(sourceReturnType, targetReturnType, assignableTo, comparisonCache, context, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleReturnTypes;\n                        // No need to print this one here - it\'s printed as part of the signature error in sourceIsRelatableToTarget\n                        //comparisonInfo.addMessage(\"Incompatible return types: \'\" + sourceReturnType.getTypeName() + \"\' and \'\" + targetReturnType.getTypeName() + \"\'\");\n                    }\n                    return false;\n                }\n            }\n\n            // the clause \'sourceParameters.length > sourceVarArgCount\' covers optional parameters, since even though the parameters are optional\n            // they need to agree with the target params\n            var len = (sourceVarArgCount < targetVarArgCount && (sourceSig.hasVariableParamList() || (sourceParameters.length > sourceVarArgCount))) ? targetVarArgCount : sourceVarArgCount;\n            var sourceParamType: PullTypeSymbol = null;\n            var targetParamType: PullTypeSymbol = null;\n            var sourceParamName = \"\";\n            var targetParamName = \"\";\n\n            for (var iSource = 0, iTarget = 0; iSource < len; iSource++ , iTarget++) {\n\n                if (iSource < sourceParameters.length && (!sourceSig.hasVariableParamList() || iSource < sourceVarArgCount)) {\n                    sourceParamType = sourceParameters[iSource].getType();\n                    sourceParamName = sourceParameters[iSource].getName();\n                }\n                else if (iSource === sourceVarArgCount) {\n                    sourceParamType = sourceParameters[iSource].getType();\n                    if (sourceParamType.isArray()) {\n                        sourceParamType = sourceParamType.getElementType();\n                    }\n                    sourceParamName = sourceParameters[iSource].getName();\n                }\n\n                if (iTarget < targetParameters.length && iTarget < targetVarArgCount) {\n                    targetParamType = targetParameters[iTarget].getType();\n                    targetParamName = targetParameters[iTarget].getName();\n                }\n                else if (targetSig.hasVariableParamList() && iTarget === targetVarArgCount) {\n                    targetParamType = targetParameters[iTarget].getType();\n\n                    if (targetParamType.isArray()) {\n                        targetParamType = targetParamType.getElementType();\n                    }\n                    targetParamName = targetParameters[iTarget].getName();\n                }\n\n                if (!(this.sourceIsRelatableToTarget(sourceParamType, targetParamType, assignableTo, comparisonCache, context, comparisonInfo) ||\n                    this.sourceIsRelatableToTarget(targetParamType, sourceParamType, assignableTo, comparisonCache, context, comparisonInfo))) {\n\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleParameterTypes;\n                    }\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        // Overload resolution\n\n        private resolveOverloads(application: AST, group: PullSignatureSymbol[], enclosingDecl: PullDecl, haveTypeArgumentsAtCallSite: boolean, context: PullTypeResolutionContext): PullSignatureSymbol {\n            var rd = this.resolutionDataCache.getResolutionData();\n            var actuals = rd.actuals;\n            var exactCandidates = rd.exactCandidates;\n            var conversionCandidates = rd.conversionCandidates;\n            var candidate: PullSignatureSymbol = null;\n            var hasOverloads = group.length > 1;\n            var comparisonInfo = new TypeComparisonInfo();\n            var args: ASTList = null;\n            var target: AST = null;\n\n            if (application.nodeType === NodeType.InvocationExpression || application.nodeType === NodeType.ObjectCreationExpression) {\n                var callEx = <CallExpression>application;\n\n                args = callEx.arguments;\n                target = this.getLastIdentifierInTarget(callEx);\n\n                if (callEx.arguments) {\n                    var len = callEx.arguments.members.length;\n\n                    for (var i = 0; i < len; i++) {\n                        var argSym = this.resolveAST(callEx.arguments.members[i], false, enclosingDecl, context).symbol;\n                        actuals[i] = argSym.getType();\n                    }\n                }\n            }\n            else if (application.nodeType === NodeType.ElementAccessExpression) {\n                var binExp = <BinaryExpression>application;\n                target = binExp.operand1;\n                args = new ASTList();\n                args.members[0] = binExp.operand2;\n                var argSym = this.resolveAST(args.members[0], false, enclosingDecl, context).symbol;\n                actuals[0] = argSym.getType();\n            }\n\n            var signature: PullSignatureSymbol;\n            var returnType: PullTypeSymbol;\n            var candidateInfo: { sig: PullSignatureSymbol; ambiguous: boolean; };\n\n            for (var j = 0, groupLen = group.length; j < groupLen; j++) {\n                signature = group[j];\n                if ((hasOverloads && signature.isDefinition()) || (haveTypeArgumentsAtCallSite && !signature.isGeneric())) {\n                    continue;\n                }\n\n                returnType = signature.getReturnType();\n\n                this.getCandidateSignatures(signature, actuals, args, exactCandidates, conversionCandidates, enclosingDecl, context, comparisonInfo);\n            }\n            if (exactCandidates.length === 0) {\n                var applicableCandidates = this.getApplicableSignaturesFromCandidates(conversionCandidates, args, comparisonInfo, enclosingDecl, context);\n                if (applicableCandidates.length > 0) {\n                    candidateInfo = this.findMostApplicableSignature(applicableCandidates, args, enclosingDecl, context);\n                    //if (candidateInfo.ambiguous) {\n                    //    //this.errorReporter.simpleError(target, \"Ambiguous call expression - could not choose overload\");\n                    //    context.postError(application.minChar, application.getLength(), this.unitPath, \"Ambiguous call expression - could not choose overload\", enclosingDecl, true);\n                    //}\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    if (comparisonInfo.message) {\n                        //this.checker.errorReporter.simpleError(target, emsg + \":\\n\\t\" + comparisonInfo.message);\n                        context.postError(this.unitPath, target.minChar, target.getLength(), DiagnosticCode.Supplied_parameters_do_not_match_any_signature_of_call_target__NL__0, [comparisonInfo.message], enclosingDecl, true);\n                    }\n                    else {\n                        context.postError(this.unitPath, target.minChar, target.getLength(), DiagnosticCode.Supplied_parameters_do_not_match_any_signature_of_call_target, null, enclosingDecl, true);\n                        //this.checker.errorReporter.simpleError(target, emsg);\n                    }\n                }\n            }\n            else {\n\n                if (exactCandidates.length > 1) {\n                    var applicableSigs: PullApplicableSignature[] = [];\n                    for (var i = 0; i < exactCandidates.length; i++) {\n                        applicableSigs[i] = { signature: exactCandidates[i], hadProvisionalErrors: false };\n                    }\n                    candidateInfo = this.findMostApplicableSignature(applicableSigs, args, enclosingDecl, context);\n                    //if (candidateInfo.ambiguous) {\n                    //    //this.checker.errorReporter.simpleError(target, \"Ambiguous call expression - could not choose overload\");\n                    //    context.postError(application.minChar, application.getLength(), this.unitPath, \"Ambiguous call expression - could not choose overload\", enclosingDecl, true);\n                    //}\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    candidate = exactCandidates[0];\n                }\n            }\n\n            this.resolutionDataCache.returnResolutionData(rd);\n            return candidate;\n        }\n\n        private getLastIdentifierInTarget(callEx: CallExpression): AST {\n            return (callEx.target.nodeType === NodeType.MemberAccessExpression) ? (<BinaryExpression>callEx.target).operand2 : callEx.target;\n        }\n\n        private getCandidateSignatures(signature: PullSignatureSymbol, actuals: PullTypeSymbol[], args: ASTList, exactCandidates: PullSignatureSymbol[], conversionCandidates: PullSignatureSymbol[], enclosingDecl: PullDecl, context: PullTypeResolutionContext, comparisonInfo: TypeComparisonInfo): void {\n            var parameters = signature.getParameters();\n            var lowerBound = signature.getNonOptionalParameterCount(); // required parameters\n            var upperBound = parameters.length; // required and optional parameters\n            var formalLen = lowerBound;\n            var acceptable = false;\n\n            if ((actuals.length >= lowerBound) && (signature.hasVariableParamList() || actuals.length <= upperBound)) {\n                formalLen = (signature.hasVariableParamList() ? parameters.length : actuals.length);\n                acceptable = true;\n            }\n\n            var repeatType: PullTypeSymbol = null;\n\n            if (acceptable) {\n                // assumed structure here is checked when signature is formed\n                if (signature.hasVariableParamList()) {\n                    formalLen -= 1;\n                    repeatType = parameters[formalLen].getType();\n                    repeatType = repeatType.getElementType();\n                    acceptable = actuals.length >= (formalLen < lowerBound ? formalLen : lowerBound);\n                }\n                var len = actuals.length;\n\n                var exact = acceptable;\n                var convert = acceptable;\n\n                var typeA: PullTypeSymbol;\n                var typeB: PullTypeSymbol;\n\n                for (var i = 0; i < len; i++) {\n\n                    if (i < formalLen) {\n                        typeA = parameters[i].getType();\n                    }\n                    else {\n                        typeA = repeatType;\n                    }\n\n                    typeB = actuals[i];\n\n                    if (typeA && !typeA.isResolved()) {\n                        this.resolveDeclaredSymbol(typeA, enclosingDecl, context);\n                    }\n\n                    if (typeB && !typeB.isResolved()) {\n                        this.resolveDeclaredSymbol(typeB, enclosingDecl, context);\n                    }\n\n                    if (!typeA || !typeB || !(this.typesAreIdentical(typeA, typeB, args.members[i]))) {\n                        exact = false;\n                    }\n\n                    comparisonInfo.stringConstantVal = args.members[i];\n\n                    // is the argument assignable to the parameter?\n                    if (!this.sourceIsAssignableToTarget(typeB, typeA, context, comparisonInfo)) {\n                        convert = false;\n                    }\n\n                    comparisonInfo.stringConstantVal = null;\n\n                    if (!(exact || convert)) {\n                        break;\n                    }\n                }\n                if (exact) {\n                    exactCandidates[exactCandidates.length] = signature;\n                }\n                else if (convert && (exactCandidates.length === 0)) {\n                    conversionCandidates[conversionCandidates.length] = signature;\n                }\n            }\n        }\n\n        private getApplicableSignaturesFromCandidates(candidateSignatures: PullSignatureSymbol[],\n            args: ASTList,\n            comparisonInfo: TypeComparisonInfo,\n            enclosingDecl: PullDecl,\n            context: PullTypeResolutionContext): PullApplicableSignature[] {\n\n            var applicableSigs: PullApplicableSignature[] = [];\n            var memberType: PullTypeSymbol = null;\n            var miss = false;\n            var cxt: PullContextualTypeContext = null;\n            var hadProvisionalErrors = false;\n\n            var parameters: PullSymbol[];\n            var signature: PullSignatureSymbol;\n            var argSym: PullSymbol;\n\n            for (var i = 0; i < candidateSignatures.length; i++) {\n                miss = false;\n\n                signature = candidateSignatures[i];\n                parameters = signature.getParameters();\n\n                for (var j = 0; j < args.members.length; j++) {\n\n                    if (j >= parameters.length) {\n                        continue;\n                    }\n\n                    if (!parameters[j].isResolved()) {\n                        this.resolveDeclaredSymbol(parameters[j], enclosingDecl, context);\n                    }\n\n                    memberType = parameters[j].getType();\n\n                    // account for varargs\n                    if (signature.hasVariableParamList() && (j >= signature.getNonOptionalParameterCount()) && memberType.isArray()) {\n                        memberType = memberType.getElementType();\n                    }\n\n                    if (this.isAnyOrEquivalent(memberType)) {\n                        continue;\n                    }\n                    else if (args.members[j].nodeType === NodeType.FunctionDeclaration) {\n\n                        if (this.cachedFunctionInterfaceType && memberType === this.cachedFunctionInterfaceType) {\n                            continue;\n                        }\n\n                        argSym = this.resolveFunctionExpression(<FunctionDeclaration>args.members[j], false, enclosingDecl, context);\n\n                        if (!this.canApplyContextualTypeToFunction(memberType, <FunctionDeclaration>args.members[j], true)) {\n                            // if it\'s just annotations that are blocking us, typecheck the function and add it to the list\n                            if (this.canApplyContextualTypeToFunction(memberType, <FunctionDeclaration>args.members[j], false)) {\n                                if (!this.sourceIsAssignableToTarget(argSym.getType(), memberType, context, comparisonInfo)) {\n                                    break;\n                                }\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        else { // if it can be contextually typed, try it out...\n                            //argSym.invalidate();\n                            context.pushContextualType(memberType, true, null);\n\n                            argSym = this.resolveFunctionExpression(<FunctionDeclaration>args.members[j], true, enclosingDecl, context);\n\n                            if (!this.sourceIsAssignableToTarget(argSym.getType(), memberType, context, comparisonInfo)) {\n                                if (comparisonInfo) {\n                                    comparisonInfo.setMessage(getDiagnosticMessage(DiagnosticCode.Could_not_apply_type__0__to_argument__1__which_is_of_type__2_,\n                                        [memberType.toString(), (j + 1), argSym.getTypeName()]));\n                                }\n                                miss = true;\n                            }\n                            argSym.invalidate();\n                            cxt = context.popContextualType();\n                            hadProvisionalErrors = cxt.hadProvisionalErrors();\n\n                            //argSym.invalidate();\n\n                            //this.resetProvisionalErrors();\n                            if (miss) {\n                                break;\n                            }\n                        }\n                    }\n                    else if (args.members[j].nodeType === NodeType.ObjectLiteralExpression) {\n                        // now actually attempt to typecheck as the contextual type\n                        if (this.cachedObjectInterfaceType && memberType === this.cachedObjectInterfaceType) {\n                            continue;\n                        }\n\n                        context.pushContextualType(memberType, true, null);\n                        argSym = this.resolveObjectLiteralExpression(args.members[j], true, enclosingDecl, context).symbol;\n\n                        if (!this.sourceIsAssignableToTarget(argSym.getType(), memberType, context, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage(getDiagnosticMessage(DiagnosticCode.Could_not_apply_type__0__to_argument__1__which_is_of_type__2_,\n                                    [memberType.toString(), (j + 1), argSym.getTypeName()]));\n                            }\n\n                            miss = true;\n                        }\n\n                        argSym.invalidate();\n                        cxt = context.popContextualType();\n                        hadProvisionalErrors = cxt.hadProvisionalErrors();\n\n                        //argSym.invalidate();\n\n                        //this.resetProvisionalErrors();\n                        if (miss) {\n                            break;\n                        }\n                    }\n                    else if (args.members[j].nodeType === NodeType.ArrayLiteralExpression) {\n                        // attempt to contextually type the array literal\n                        if (this.cachedArrayInterfaceType && memberType === this.cachedArrayInterfaceType) {\n                            continue;\n                        }\n\n                        context.pushContextualType(memberType, true, null);\n                        var argSym = this.resolveArrayLiteralExpression(<UnaryExpression>args.members[j], true, enclosingDecl, context).symbol;\n\n                        if (!this.sourceIsAssignableToTarget(argSym.getType(), memberType, context, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage(getDiagnosticMessage(DiagnosticCode.Could_not_apply_type__0__to_argument__1__which_is_of_type__2_,\n                                    [memberType.toString(), (j + 1), argSym.getTypeName()]));\n                            }\n                            break;\n                        }\n                        argSym.invalidate();\n                        cxt = context.popContextualType();\n\n                        hadProvisionalErrors = cxt.hadProvisionalErrors();\n\n                        //argSym.invalidate();\n\n                        if (miss) {\n                            break;\n                        }\n                    }\n                }\n\n                if (j === args.members.length) {\n                    applicableSigs[applicableSigs.length] = { signature: candidateSignatures[i], hadProvisionalErrors: hadProvisionalErrors };\n                }\n                hadProvisionalErrors = false;\n            }\n\n            return applicableSigs;\n        }\n\n        private findMostApplicableSignature(signatures: PullApplicableSignature[], args: ASTList, enclosingDecl: PullDecl, context: PullTypeResolutionContext): { sig: PullSignatureSymbol; ambiguous: boolean; } {\n\n            if (signatures.length === 1) {\n                return { sig: signatures[0].signature, ambiguous: false };\n            }\n\n            var best: PullApplicableSignature = signatures[0];\n            var Q: PullApplicableSignature = null;\n\n            var AType: PullTypeSymbol = null;\n            var PType: PullTypeSymbol = null;\n            var QType: PullTypeSymbol = null;\n\n            var ambiguous = false;\n\n            var bestParams: PullSymbol[];\n            var qParams: PullSymbol[];\n\n            for (var qSig = 1; qSig < signatures.length; qSig++) {\n                Q = signatures[qSig];\n\n                // find the better conversion\n                for (var i = 0; args && i < args.members.length; i++) {\n\n                    var argSym = this.resolveAST(args.members[i], false, enclosingDecl, context).symbol;\n\n                    AType = argSym.getType();\n\n                    // invalidate the argument so that we may correctly resolve it later as part of the call expression\n                    argSym.invalidate();\n\n                    bestParams = best.signature.getParameters();\n                    qParams = Q.signature.getParameters();\n\n                    PType = i < bestParams.length ? bestParams[i].getType() : bestParams[bestParams.length - 1].getType().getElementType();\n                    QType = i < qParams.length ? qParams[i].getType() : qParams[qParams.length - 1].getType().getElementType();\n\n                    if (this.typesAreIdentical(PType, QType) && !(QType.isPrimitive() && (<PullPrimitiveTypeSymbol>QType).isStringConstant())) {\n                        continue;\n                    }\n                    else if (PType.isPrimitive() &&\n                        (<PullPrimitiveTypeSymbol>PType).isStringConstant() &&\n                        args.members[i].nodeType === NodeType.StringLiteral &&\n                        stripQuotes((<StringLiteral>args.members[i]).actualText) === stripQuotes((<PullStringConstantTypeSymbol>PType).getName()))\n                    {\n                        break;\n                    }\n                    else if (QType.isPrimitive() &&\n                        (<PullPrimitiveTypeSymbol>QType).isStringConstant() &&\n                        args.members[i].nodeType === NodeType.StringLiteral &&\n                        stripQuotes((<StringLiteral>args.members[i]).actualText) === stripQuotes((<PullStringConstantTypeSymbol>QType).getName()))\n                    {\n                        best = Q;\n                    }\n                    else if (this.typesAreIdentical(AType, PType)) {\n                        break;\n                    }\n                    else if (this.typesAreIdentical(AType, QType)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(PType, QType, context)) {\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(QType, PType, context)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (Q.hadProvisionalErrors) {\n                        break;\n                    }\n                    else if (best.hadProvisionalErrors) {\n                        best = Q;\n                        break;\n                    }\n                }\n\n                if (!args || i === args.members.length) {\n                    var collection: IPullTypeCollection = {\n                        getLength: () => { return 2; } ,\n                        setTypeAtIndex: (index: number, type: PullTypeSymbol) => { } , // no contextual typing here, so no need to do anything\n                        getTypeAtIndex: (index: number) => { return index ? Q.signature.getReturnType() : best.signature.getReturnType(); } // we only want the \"second\" type - the \"first\" is skipped\n                    }\n                    var bct = this.findBestCommonType(best.signature.getReturnType(), null, collection, context);\n                    ambiguous = !bct;\n                }\n                else {\n                    ambiguous = false;\n                }\n            }\n\n            // double-check if the \n\n            return { sig: best.signature, ambiguous: ambiguous };\n        }\n\n        private canApplyContextualTypeToFunction(candidateType: PullTypeSymbol, funcDecl: FunctionDeclaration, beStringent: boolean): boolean {\n\n            // in these cases, we do not attempt to apply a contextual type\n            //  RE: isInlineCallLiteral - if the call target is a function literal, we don\'t want to apply the target type\n            //  to its body - instead, it should be applied to its return type\n            if (funcDecl.isMethod() ||\n                beStringent && funcDecl.returnTypeAnnotation) {\n                return false;\n            }\n\n            beStringent = beStringent || (this.cachedFunctionInterfaceType === candidateType);\n\n            // At this point, if we\'re not being stringent, there\'s no need to check for multiple call sigs\n            // or count parameters - we just want to unblock typecheck\n            if (!beStringent) {\n                return true;\n            }\n\n            var signature = this.getSymbolAndDiagnosticsForAST(funcDecl).symbol.getType().getCallSignatures()[0];\n            var parameters = signature.getParameters();\n            var paramLen = parameters.length;\n\n            // Check that the argument declarations have no type annotations\n            for (var i = 0; i < paramLen; i++) {\n                var param = parameters[i];\n                var argDecl = <Parameter>this.getASTForSymbol(param);\n\n                // REVIEW: a valid typeExpr is a requirement for varargs,\n                // so we may want to revise our invariant\n                if (beStringent && argDecl.typeExpr) {\n                    return false;\n                }\n            }\n\n            if (candidateType.getConstructSignatures().length && candidateType.getCallSignatures().length) {\n                return false;\n            }\n\n            var candidateSigs = candidateType.getConstructSignatures().length ? candidateType.getConstructSignatures() : candidateType.getCallSignatures();\n\n            if (!candidateSigs || candidateSigs.length > 1) {\n                return false;\n            }\n\n            // if we\'re here, the contextual type can be applied to the function\n            return true;\n        }\n\n        private inferArgumentTypesForSignature(signature: PullSignatureSymbol,\n            args: ASTList,\n            comparisonInfo: TypeComparisonInfo,\n            enclosingDecl: PullDecl,\n            context: PullTypeResolutionContext): PullTypeSymbol[] {\n\n            var cxt: PullContextualTypeContext = null;\n            var hadProvisionalErrors = false;\n\n            var parameters = signature.getParameters();\n            var typeParameters = signature.getTypeParameters();\n            var argContext = new ArgumentInferenceContext();\n\n            var parameterType: PullTypeSymbol = null;\n\n            // seed each type parameter with the undefined type, so that we can widen it to \'any\'\n            // if no inferences can be made\n            for (var i = 0; i < typeParameters.length; i++) {\n                argContext.addInferenceRoot(typeParameters[i]);\n            }\n\n            var substitutions: any;\n            var inferenceCandidates: PullTypeSymbol[];\n            var inferenceCandidate: PullTypeSymbol;\n\n            for (var i = 0; i < args.members.length; i++) {\n\n                if (i >= parameters.length) {\n                    break;\n                }\n\n                parameterType = parameters[i].getType();\n\n                // account for varargs\n                if (signature.hasVariableParamList() && (i >= signature.getNonOptionalParameterCount() - 1) && parameterType.isArray()) {\n                    parameterType = parameterType.getElementType();\n                }\n\n                inferenceCandidates = argContext.getInferenceCandidates();\n                substitutions = {};\n\n                if (inferenceCandidates.length) {\n                    for (var j = 0; j < inferenceCandidates.length; j++) {\n\n                        argContext.resetRelationshipCache();\n\n                        inferenceCandidate = inferenceCandidates[j];\n\n                        substitutions = inferenceCandidates[j];\n\n                        context.pushContextualType(parameterType, true, substitutions);\n\n                        var argSym = this.resolveAST(args.members[i], true, enclosingDecl, context).symbol;\n\n                        this.relateTypeToTypeParameters(argSym.getType(), parameterType, false, argContext, enclosingDecl, context);\n\n                        cxt = context.popContextualType();\n\n                        argSym.invalidate();\n\n                        hadProvisionalErrors = cxt.hadProvisionalErrors();\n                    }\n                }\n                else {\n                    context.pushContextualType(parameterType, true, {});\n                    var argSym = this.resolveAST(args.members[i], true, enclosingDecl, context).symbol;\n\n                    this.relateTypeToTypeParameters(argSym.getType(), parameterType, false, argContext, enclosingDecl, context);\n\n                    cxt = context.popContextualType();\n\n                    argSym.invalidate();\n\n                    hadProvisionalErrors = cxt.hadProvisionalErrors();\n                }\n            }\n\n            hadProvisionalErrors = false;\n\n            var inferenceResults = argContext.inferArgumentTypes(this, context);\n\n            if (inferenceResults.unfit) {\n                return null;\n            }\n\n            var resultTypes: PullTypeSymbol[] = [];\n\n            // match inferred types in-order to type parameters\n            for (var i = 0; i < typeParameters.length; i++) {\n                for (var j = 0; j < inferenceResults.results.length; j++) {\n                    if (inferenceResults.results[j].param == typeParameters[i]) {\n                        resultTypes[resultTypes.length] = inferenceResults.results[j].type;\n                        break;\n                    }\n                }\n            }\n\n            if (!args.members.length && !resultTypes.length && typeParameters.length) {\n                for (var i = 0; i < typeParameters.length; i++) {\n                    resultTypes[resultTypes.length] = this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n\n            return resultTypes;\n        }\n\n        private relateTypeToTypeParameters(expressionType: PullTypeSymbol,\n            parameterType: PullTypeSymbol,\n            shouldFix: boolean,\n            argContext: ArgumentInferenceContext,\n            enclosingDecl: PullDecl,\n            context: PullTypeResolutionContext): void {\n\n            if (expressionType.isError()) {\n                expressionType = this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            if (parameterType === expressionType) {\n                return;\n            }\n\n            if (parameterType.isTypeParameter()) {\n                argContext.addCandidateForInference(<PullTypeParameterSymbol>parameterType, expressionType, shouldFix);\n                return;\n            }\n            var parameterDeclarations = parameterType.getDeclarations();\n            var expressionDeclarations = expressionType.getDeclarations();\n            if (!parameterType.isArray() && parameterDeclarations.length && expressionDeclarations.length && parameterDeclarations[0].isEqual(expressionDeclarations[0]) && expressionType.isGeneric()) {\n                var typeParameters: PullTypeSymbol[] = parameterType.getIsSpecialized() ? parameterType.getTypeArguments() : parameterType.getTypeParameters();\n                var typeArguments: PullTypeSymbol[] = expressionType.getTypeArguments();\n\n                // If we\'re relating an out-of-order resolution of a function call within the body\n                // of a generic type\'s method, the relationship will actually be in reverse.\n                if (!typeArguments) {\n                    typeParameters = parameterType.getTypeArguments();\n                    typeArguments = expressionType.getIsSpecialized() ? expressionType.getTypeArguments() : expressionType.getTypeParameters();\n                }\n\n                if (typeParameters && typeArguments && typeParameters.length === typeArguments.length) {\n                    for (var i = 0; i < typeParameters.length; i++) {\n                        if (typeArguments[i] != typeParameters[i]) {\n                            // relate and fix\n                            this.relateTypeToTypeParameters(typeArguments[i], typeParameters[i], true, argContext, enclosingDecl, context);\n                        }\n                    }\n                }\n            }\n\n            // if the expression and parameter type, with type arguments of \'any\', are not assignment compatible, ignore\n            var anyExpressionType = this.specializeTypeToAny(expressionType, enclosingDecl, context);\n            var anyParameterType = this.specializeTypeToAny(parameterType, enclosingDecl, context);\n\n            if (!this.sourceIsAssignableToTarget(anyExpressionType, anyParameterType, context)) {\n                return;\n            }\n\n            if (expressionType.isArray() && parameterType.isArray()) {\n                this.relateArrayTypeToTypeParameters(expressionType, parameterType, shouldFix, argContext, enclosingDecl, context);\n\n                return;\n            }\n\n            this.relateObjectTypeToTypeParameters(expressionType, parameterType, shouldFix, argContext, enclosingDecl, context);\n        }\n\n        private relateFunctionSignatureToTypeParameters(expressionSignature: PullSignatureSymbol,\n            parameterSignature: PullSignatureSymbol,\n            argContext: ArgumentInferenceContext,\n            enclosingDecl: PullDecl,\n            context: PullTypeResolutionContext): void {\n            // Sub in \'any\' for type parameters\n\n            var anyExpressionSignature = this.specializeSignatureToAny(expressionSignature, enclosingDecl, context);\n            var anyParamExpressionSignature = this.specializeSignatureToAny(parameterSignature, enclosingDecl, context);\n\n            if (!this.signatureIsAssignableToTarget(anyExpressionSignature, anyParamExpressionSignature, context)) {\n                return;\n            }\n\n            var expressionParams = expressionSignature.getParameters();\n            var expressionReturnType = expressionSignature.getReturnType();\n\n            var parameterParams = parameterSignature.getParameters();\n            var parameterReturnType = parameterSignature.getReturnType();\n\n            var len = parameterParams.length < expressionParams.length ? parameterParams.length : expressionParams.length;\n\n            for (var i = 0; i < len; i++) {\n                this.relateTypeToTypeParameters(expressionParams[i].getType(), parameterParams[i].getType(), true, argContext, enclosingDecl, context);\n            }\n\n            this.relateTypeToTypeParameters(expressionReturnType, parameterReturnType, false, argContext, enclosingDecl, context);\n        }\n\n        private relateObjectTypeToTypeParameters(objectType: PullTypeSymbol,\n            parameterType: PullTypeSymbol,\n            shouldFix: boolean,\n            argContext: ArgumentInferenceContext,\n            enclosingDecl: PullDecl,\n            context: PullTypeResolutionContext): void {\n\n            var parameterTypeMembers = parameterType.getMembers();\n            var parameterSignatures: PullSignatureSymbol[];\n            var parameterSignature: PullSignatureSymbol;\n\n            var objectMember: PullSymbol;\n            var objectSignatures: PullSignatureSymbol[];\n\n\n            if (argContext.alreadyRelatingTypes(objectType, parameterType)) {\n                return;\n            }\n\n            var objectTypeArguments = objectType.getTypeArguments();\n            var parameterTypeParameters = parameterType.getTypeParameters();\n\n            if (objectTypeArguments && (objectTypeArguments.length === parameterTypeParameters.length)) {\n                for (var i = 0; i < objectTypeArguments.length; i++) {\n                    // PULLREVIEW: This may lead to duplicate inferences for type argument parameters, if the two are the same\n                    // (which could occur via mutually recursive method calls within a generic class declaration)\n                    argContext.addCandidateForInference(parameterTypeParameters[i], objectTypeArguments[i], shouldFix);\n                }\n            }\n\n            for (var i = 0; i < parameterTypeMembers.length; i++) {\n                objectMember = objectType.findMember(parameterTypeMembers[i].getName());\n\n                if (objectMember) {\n                    this.relateTypeToTypeParameters(objectMember.getType(), parameterTypeMembers[i].getType(), shouldFix, argContext, enclosingDecl, context);\n                }\n            }\n\n            parameterSignatures = parameterType.getCallSignatures();\n            objectSignatures = objectType.getCallSignatures();\n\n            for (var i = 0; i < parameterSignatures.length; i++) {\n                parameterSignature = parameterSignatures[i];\n\n                for (var j = 0; j < objectSignatures.length; j++) {\n                    this.relateFunctionSignatureToTypeParameters(objectSignatures[j], parameterSignature, argContext, enclosingDecl, context);\n                }\n            }\n\n            parameterSignatures = parameterType.getConstructSignatures();\n            objectSignatures = objectType.getConstructSignatures();\n\n            for (var i = 0; i < parameterSignatures.length; i++) {\n                parameterSignature = parameterSignatures[i];\n\n                for (var j = 0; j < objectSignatures.length; j++) {\n                    this.relateFunctionSignatureToTypeParameters(objectSignatures[j], parameterSignature, argContext, enclosingDecl, context);\n                }\n            }\n\n            parameterSignatures = parameterType.getIndexSignatures();\n            objectSignatures = objectType.getIndexSignatures();\n\n            for (var i = 0; i < parameterSignatures.length; i++) {\n                parameterSignature = parameterSignatures[i];\n\n                for (var j = 0; j < objectSignatures.length; j++) {\n                    this.relateFunctionSignatureToTypeParameters(objectSignatures[j], parameterSignature, argContext, enclosingDecl, context);\n                }\n            }\n        }\n\n        private relateArrayTypeToTypeParameters(argArrayType: PullTypeSymbol,\n            parameterArrayType: PullTypeSymbol,\n            shouldFix: boolean,\n            argContext: ArgumentInferenceContext,\n            enclosingDecl: PullDecl,\n            context: PullTypeResolutionContext): void {\n\n            var argElement = argArrayType.getElementType();\n            var paramElement = parameterArrayType.getElementType();\n\n            this.relateTypeToTypeParameters(argElement, paramElement, shouldFix, argContext, enclosingDecl, context);\n        }\n\n        public specializeTypeToAny(typeToSpecialize: PullTypeSymbol, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullTypeSymbol {\n            var prevSpecialize = context.specializingToAny;\n\n            context.specializingToAny = true;\n\n            // get the \"root\" unspecialized type, since even generic types may already be partially specialize\n            //typeToSpecialize = <PullTypeSymbol>typeToSpecialize.getDeclarations()[0].getSymbol().getType();\n\n            var type = specializeType(typeToSpecialize, [], this, enclosingDecl, context);\n\n            context.specializingToAny = prevSpecialize;\n\n            return type;\n        }\n\n        private specializeSignatureToAny(signatureToSpecialize: PullSignatureSymbol, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSignatureSymbol {\n            var typeParameters = signatureToSpecialize.getTypeParameters();\n            var typeReplacementMap: any = {};\n            var typeArguments: PullTypeSymbol[] = []; // PULLTODO - may be expensive, but easy to cache\n\n            for (var i = 0; i < typeParameters.length; i++) {\n                typeArguments[i] = this.semanticInfoChain.anyTypeSymbol;\n                typeReplacementMap[typeParameters[i].getSymbolID().toString()] = typeArguments[i];\n            }\n            if (!typeArguments.length) {\n                typeArguments[0] = this.semanticInfoChain.anyTypeSymbol;\n            }\n\n\n            var prevSpecialize = context.specializingToAny;\n\n            context.specializingToAny = true;\n            // no need to worry about returning \'null\', since \'any\' satisfies all constraints\n            var sig = specializeSignature(signatureToSpecialize, false, typeReplacementMap, typeArguments, this, enclosingDecl, context);\n            context.specializingToAny = prevSpecialize;\n\n            return sig;\n        }\n    }\n}\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export class PullTypeResolver2 {\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export class TypeComparisonInfo {\n        public onlyCaptureFirstError = false;\n        public flags: TypeRelationshipFlags = TypeRelationshipFlags.SuccessfulComparison;\n        public message = \"\";\n        public stringConstantVal: AST = null;\n        private indent = 1;\n\n        constructor(sourceComparisonInfo?: TypeComparisonInfo) {\n            if (sourceComparisonInfo) {\n                this.flags = sourceComparisonInfo.flags;\n                this.onlyCaptureFirstError = sourceComparisonInfo.onlyCaptureFirstError;\n                this.stringConstantVal = sourceComparisonInfo.stringConstantVal;\n                this.indent = sourceComparisonInfo.indent + 1;\n            }\n        }\n\n        public addMessage(message) {\n            if (!this.onlyCaptureFirstError && this.message) {\n                this.message = getDiagnosticMessage(DiagnosticCode._0__NL__1_TB__2, [this.message, this.indent, message]);\n            }\n            else {\n                this.message = getDiagnosticMessage(DiagnosticCode._0_TB__1, [this.indent, message]);\n            }\n        }\n\n        public setMessage(message) {\n            this.message = getDiagnosticMessage(DiagnosticCode._0_TB__1, [this.indent, message]);\n        }\n    }\n\n    export class PullTypeCheckContext {\n        public enclosingDeclStack: PullDecl[] = [];\n        public enclosingDeclReturnStack: boolean[] = [];\n        public semanticInfo: SemanticInfo = null;\n        public inSuperConstructorCall = false;\n        public inSuperConstructorTarget = false;\n        public seenSuperConstructorCall = false;\n        public inConstructorArguments = false;\n\n        constructor(public compiler: TypeScriptCompiler, public script: Script, public scriptName: string) {\n        }\n\n        public pushEnclosingDecl(decl: PullDecl) {\n            this.enclosingDeclStack[this.enclosingDeclStack.length] = decl;\n            this.enclosingDeclReturnStack[this.enclosingDeclReturnStack.length] = false;\n        }\n\n        public popEnclosingDecl() {\n            this.enclosingDeclStack.length--;\n            this.enclosingDeclReturnStack.length--;\n        }\n\n        public getEnclosingDecl(kind: PullElementKind = PullElementKind.All) {\n            for (var i = this.enclosingDeclStack.length - 1; i >= 0; i--) {\n                var decl = this.enclosingDeclStack[i];\n                if (decl.getKind() & kind) {\n                    return decl;\n                }\n            }\n\n            return null;\n        }\n\n        public getEnclosingNonLambdaDecl() {\n            for (var i = this.enclosingDeclStack.length - 1; i >= 0; i--) {\n                var decl = this.enclosingDeclStack[i];\n                if (!(decl.getKind() === PullElementKind.FunctionExpression && (decl.getFlags() & PullElementFlags.FatArrow))) {\n                    return decl;\n                }\n            }\n\n            return null;\n        }\n\n        public getEnclosingClassDecl(): PullDecl {\n            return this.getEnclosingDecl(PullElementKind.Class);\n        }\n\n        public getEnclosingDeclHasReturn() {\n            return this.enclosingDeclReturnStack[this.enclosingDeclReturnStack.length - 1];\n        }\n\n        public setEnclosingDeclHasReturn() {\n            return this.enclosingDeclReturnStack[this.enclosingDeclReturnStack.length - 1] = true;\n        }\n    }\n\n    export class PullTypeChecker {\n\n        static globalPullTypeCheckPhase = 0;\n\n        public resolver: PullTypeResolver = null;\n\n        private context: PullTypeResolutionContext = new PullTypeResolutionContext();\n\n        constructor(private compilationSettings: CompilationSettings,\n            public semanticInfoChain: SemanticInfoChain) {\n        }\n\n        public setUnit(unitPath: string) {\n            this.resolver = new PullTypeResolver(this.compilationSettings, this.semanticInfoChain, unitPath);\n        }\n\n        private getScriptDecl(fileName: string): PullDecl {\n            return this.semanticInfoChain.getUnit(fileName).getTopLevelDecls()[0];\n        }\n\n        private checkForResolutionError(typeSymbol: PullTypeSymbol, decl: PullDecl): void {\n            if (typeSymbol && typeSymbol.isError()) {\n                decl.addDiagnostic((<PullErrorTypeSymbol>typeSymbol).getDiagnostic());\n            }\n        }\n\n        private postError(offset: number, length: number, fileName: string, diagnosticCode: DiagnosticCode, arguments: any[], enclosingDecl: PullDecl) {\n            enclosingDecl.addDiagnostic(new SemanticDiagnostic(fileName, offset, length, diagnosticCode, arguments));\n        }\n\n        private validateVariableDeclarationGroups(enclosingDecl: PullDecl, typeCheckContext: PullTypeCheckContext) {\n            var declGroups: PullDecl[][] = enclosingDecl.getVariableDeclGroups();\n            var decl: PullDecl;\n            var firstSymbol: PullSymbol;\n            var symbol: PullSymbol;\n            var boundDeclAST: AST;\n\n            for (var i = 0; i < declGroups.length; i++) {\n                for (var j = 0; j < declGroups[i].length; j++) {\n                    decl = declGroups[i][j];\n                    symbol = decl.getSymbol();\n                    boundDeclAST = this.semanticInfoChain.getASTForDecl(decl);\n                    this.resolver.resolveAST(boundDeclAST, /*inContextuallyTypedAssignment:*/false, enclosingDecl, this.context);\n                    if (!j) {\n                        firstSymbol = decl.getSymbol();\n\n                        if (this.resolver.isAnyOrEquivalent(this.resolver.widenType(firstSymbol.getType()))) {\n                            return;\n                        }\n                        continue;\n                    }\n\n                    if (!this.resolver.typesAreIdentical(symbol.getType(), firstSymbol.getType())) {\n                        this.postError(boundDeclAST.minChar, boundDeclAST.getLength(), typeCheckContext.scriptName, DiagnosticCode.Subsequent_variable_declarations_must_have_the_same_type___Variable__0__must_be_of_type__1___but_here_has_type___2_, [symbol.getDisplayName(), firstSymbol.getType().toString(), symbol.getType().toString()], enclosingDecl);\n                    }\n                }\n            }\n        }\n\n        // declarations\n\n        private typeCheckAST(ast: AST, typeCheckContext: PullTypeCheckContext, inContextuallyTypedAssignment): PullTypeSymbol {\n\n            if (!ast) {\n                return null;\n            }\n\n            if (ast.typeCheckPhase >= PullTypeChecker.globalPullTypeCheckPhase) {\n                return null;\n            }\n            else {\n                ast.typeCheckPhase = PullTypeChecker.globalPullTypeCheckPhase;\n            }\n\n            switch (ast.nodeType) {\n\n                // lists\n                case NodeType.List:\n                    return this.typeCheckList(<ASTList>ast, typeCheckContext);\n\n                // decarations\n\n                case NodeType.VariableDeclarator:\n                case NodeType.Parameter:\n                    return this.typeCheckBoundDecl(ast, typeCheckContext);\n\n                case NodeType.FunctionDeclaration:\n                    return this.typeCheckFunction(<FunctionDeclaration>ast, typeCheckContext, inContextuallyTypedAssignment);\n\n                case NodeType.ClassDeclaration:\n                    return this.typeCheckClass(ast, typeCheckContext);\n\n                case NodeType.InterfaceDeclaration:\n                    return this.typeCheckInterface(ast, typeCheckContext);\n\n                case NodeType.ModuleDeclaration:\n                    return this.typeCheckModule(ast, typeCheckContext);\n\n                case NodeType.TypeParameter:\n                    return this.typeCheckTypeParameter(<TypeParameter>ast, typeCheckContext);\n\n                case NodeType.ImportDeclaration:\n                    return this.typeCheckImportDeclaration(<ImportDeclaration>ast, typeCheckContext);\n\n                // expressions\n\n                // assignment\n                case NodeType.AssignmentExpression:\n                    return this.typeCheckAssignment(<BinaryExpression>ast, typeCheckContext);\n\n                case NodeType.GenericType:\n                    return this.typeCheckGenericType(<GenericType>ast, typeCheckContext);\n\n                case NodeType.ObjectLiteralExpression:\n                    return this.typeCheckObjectLiteral(ast, typeCheckContext, inContextuallyTypedAssignment);\n\n                case NodeType.ArrayLiteralExpression:\n                    return this.typeCheckArrayLiteral(ast, typeCheckContext, inContextuallyTypedAssignment);\n\n                case NodeType.ThisExpression:\n                    return this.typeCheckThisExpression(<ThisExpression>ast, typeCheckContext);\n\n                case NodeType.SuperExpression:\n                    return this.typeCheckSuper(ast, typeCheckContext);\n\n                case NodeType.InvocationExpression:\n                    return this.typeCheckCallExpression(<CallExpression>ast, typeCheckContext);\n\n                case NodeType.ObjectCreationExpression:\n                    return this.typeCheckObjectCreationExpression(<CallExpression>ast, typeCheckContext);\n\n                case NodeType.CastExpression:\n                    return this.typeCheckTypeAssertion(ast, typeCheckContext);\n\n                case NodeType.TypeRef:\n                    return this.typeCheckTypeReference(<TypeReference>ast, typeCheckContext);\n\n                case NodeType.ExportAssignment:\n                    return this.typeCheckExportAssignment(ast, typeCheckContext);\n\n                // boolean operations\n                case NodeType.NotEqualsWithTypeConversionExpression:\n                case NodeType.EqualsWithTypeConversionExpression:\n                case NodeType.EqualsExpression:\n                case NodeType.NotEqualsExpression:\n                case NodeType.LessThanExpression:\n                case NodeType.LessThanOrEqualExpression:\n                case NodeType.GreaterThanOrEqualExpression:\n                case NodeType.GreaterThanExpression:\n                    return this.typeCheckLogicalOperation(ast, typeCheckContext);\n\n                case NodeType.CommaExpression:\n                    return this.typeCheckCommaExpression(ast, typeCheckContext);\n\n                case NodeType.AddExpression:\n                case NodeType.AddAssignmentExpression:\n                    return this.typeCheckBinaryAdditionOperation(<BinaryExpression>ast, typeCheckContext);\n\n                case NodeType.SubtractExpression:\n                case NodeType.MultiplyExpression:\n                case NodeType.DivideExpression:\n                case NodeType.ModuloExpression:\n                case NodeType.BitwiseOrExpression:\n                case NodeType.BitwiseAndExpression:\n                case NodeType.LeftShiftExpression:\n                case NodeType.SignedRightShiftExpression:\n                case NodeType.UnsignedRightShiftExpression:\n                case NodeType.BitwiseExclusiveOrExpression:\n                case NodeType.ExclusiveOrAssignmentExpression:\n                case NodeType.LeftShiftAssignmentExpression:\n                case NodeType.SignedRightShiftAssignmentExpression:\n                case NodeType.UnsignedRightShiftAssignmentExpression:\n                case NodeType.SubtractAssignmentExpression:\n                case NodeType.MultiplyAssignmentExpression:\n                case NodeType.DivideAssignmentExpression:\n                case NodeType.ModuloAssignmentExpression:\n                case NodeType.OrAssignmentExpression:\n                case NodeType.AndAssignmentExpression:\n                    return this.typeCheckBinaryArithmeticOperation(<BinaryExpression>ast, typeCheckContext);\n\n                case NodeType.PlusExpression:\n                case NodeType.NegateExpression:\n                case NodeType.BitwiseNotExpression:\n                case NodeType.PostIncrementExpression:\n                case NodeType.PreIncrementExpression:\n                case NodeType.PostDecrementExpression:\n                case NodeType.PreDecrementExpression:\n                    return this.typeCheckUnaryArithmeticOperation(<UnaryExpression>ast, typeCheckContext, inContextuallyTypedAssignment);\n\n                case NodeType.ElementAccessExpression:\n                    return this.typeCheckElementAccessExpression(<BinaryExpression>ast, typeCheckContext);\n\n                case NodeType.LogicalNotExpression:\n                    return this.typeCheckLogicalNotExpression(<UnaryExpression>ast, typeCheckContext, inContextuallyTypedAssignment);\n\n                case NodeType.LogicalOrExpression:\n                case NodeType.LogicalAndExpression:\n                    return this.typeCheckLogicalAndOrExpression(ast, typeCheckContext);\n\n                case NodeType.TypeOfExpression:\n                    return this.typeCheckTypeOf(ast, typeCheckContext);\n\n                case NodeType.ConditionalExpression:\n                    return this.typeCheckConditionalExpression(<ConditionalExpression>ast, typeCheckContext);\n\n                case NodeType.VoidExpression:\n                    return this.typeCheckVoidExpression(<UnaryExpression>ast, typeCheckContext);\n\n                case NodeType.ThrowStatement:\n                    return this.typeCheckThrowStatement(<ThrowStatement>ast, typeCheckContext);\n\n                case NodeType.DeleteExpression:\n                    return this.typeCheckDeleteExpression(<UnaryExpression>ast, typeCheckContext);\n\n                case NodeType.RegularExpressionLiteral:\n                    return this.typeCheckRegExpExpression(ast, typeCheckContext);\n\n                case NodeType.InExpression:\n                    return this.typeCheckInExpression(<BinaryExpression>ast, typeCheckContext);\n\n                case NodeType.InstanceOfExpression:\n                    return this.typeCheckInstanceOfExpression(<BinaryExpression>ast, typeCheckContext);\n\n                case NodeType.ParenthesizedExpression:\n                    return this.typeCheckParenthesizedExpression(<ParenthesizedExpression>ast, typeCheckContext);\n\n                // statements\n                case NodeType.ForStatement:\n                    return this.typeCheckForStatement(<ForStatement>ast, typeCheckContext);\n\n                case NodeType.ForInStatement:\n                    return this.typeCheckForInStatement(ast, typeCheckContext);\n\n                case NodeType.WhileStatement:\n                    return this.typeCheckWhileStatement(<WhileStatement>ast, typeCheckContext);\n\n                case NodeType.DoStatement:\n                    return this.typeCheckDoStatement(<DoStatement>ast, typeCheckContext);\n\n                case NodeType.IfStatement:\n                    return this.typeCheckIfStatement(<IfStatement>ast, typeCheckContext);\n\n                case NodeType.Block:\n                    return this.typeCheckBlock(<Block>ast, typeCheckContext);\n\n                case NodeType.VariableDeclaration:\n                    return this.typeCheckVariableDeclaration(<VariableDeclaration>ast, typeCheckContext);\n\n                case NodeType.VariableStatement:\n                    return this.typeCheckVariableStatement(<VariableStatement>ast, typeCheckContext);\n\n                case NodeType.WithStatement:\n                    return this.typeCheckWithStatement(<WithStatement>ast, typeCheckContext);\n\n                case NodeType.TryStatement:\n                    return this.typeCheckTryStatement(<TryStatement>ast, typeCheckContext);\n\n                case NodeType.CatchClause:\n                    return this.typeCheckCatchClause(<CatchClause>ast, typeCheckContext);\n\n                case NodeType.ReturnStatement:\n                    return this.typeCheckReturnStatement(<ReturnStatement>ast, typeCheckContext);\n\n                case NodeType.Name:\n                    return this.typeCheckNameExpression(ast, typeCheckContext);\n\n                case NodeType.MemberAccessExpression:\n                    return this.typeCheckMemberAccessExpression(<BinaryExpression>ast, typeCheckContext);\n\n                case NodeType.SwitchStatement:\n                    return this.typeCheckSwitchStatement(<SwitchStatement>ast, typeCheckContext);\n\n                case NodeType.ExpressionStatement:\n                    return this.typeCheckExpressionStatement(<ExpressionStatement>ast, typeCheckContext, inContextuallyTypedAssignment);\n\n                case NodeType.CaseClause:\n                    return this.typeCheckCaseClause(<CaseClause>ast, typeCheckContext);\n\n                case NodeType.LabeledStatement:\n                    return this.typeCheckLabeledStatement(<LabeledStatement>ast, typeCheckContext);\n\n                // primitives\n                case NodeType.NumericLiteral:\n                    return this.semanticInfoChain.numberTypeSymbol;\n\n                case NodeType.StringLiteral:\n                    return this.semanticInfoChain.stringTypeSymbol;\n\n                case NodeType.NullLiteral:\n                    return this.semanticInfoChain.nullTypeSymbol;\n\n                case NodeType.TrueLiteral:\n                case NodeType.FalseLiteral:\n                    return this.semanticInfoChain.booleanTypeSymbol;\n\n                case NodeType.TypeParameter:\n                    return this.typeCheckTypeParameter(<TypeParameter>ast, typeCheckContext);\n\n                default:\n                    break;\n            }\n\n            return null;\n        }\n\n        //\n        // Validation\n        //\n\n        // scripts\n        public typeCheckScript(script: Script, scriptName: string, compiler: TypeScriptCompiler) {\n\n            var unit = this.semanticInfoChain.getUnit(scriptName);\n\n            if (unit.getTypeChecked()) {\n                return;\n            }\n\n            var typeCheckContext = new PullTypeCheckContext(compiler, script, scriptName);\n\n            this.setUnit(scriptName);\n\n            typeCheckContext.semanticInfo = typeCheckContext.compiler.semanticInfoChain.getUnit(typeCheckContext.scriptName);\n            var scriptDecl = typeCheckContext.semanticInfo.getTopLevelDecls()[0];\n            typeCheckContext.pushEnclosingDecl(scriptDecl);\n\n            PullTypeChecker.globalPullTypeCheckPhase++;\n\n            this.typeCheckAST(script.moduleElements, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            this.validateVariableDeclarationGroups(scriptDecl, typeCheckContext);\n\n            typeCheckContext.popEnclosingDecl();\n\n            unit.setTypeChecked();\n        }\n\n        // lists\n        private typeCheckList(list: ASTList, typeCheckContext: PullTypeCheckContext) {\n            if (!list) {\n                return null;\n            }\n\n            for (var i = 0; i < list.members.length; i++) {\n                this.typeCheckAST(list.members[i], typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            }\n        }\n\n        private reportDiagnostics(symbolAndDiagnostics: SymbolAndDiagnostics<PullSymbol>, enclosingDecl: PullDecl): void {\n            if (symbolAndDiagnostics && symbolAndDiagnostics.diagnostics) {\n                for (var i = 0, n = symbolAndDiagnostics.diagnostics.length; i < n; i++) {\n                    this.context.postDiagnostic(symbolAndDiagnostics.diagnostics[i], enclosingDecl, /*addToDecl:*/ true);\n                }\n            }\n        }\n\n        private resolveSymbolAndReportDiagnostics(ast: AST, inContextuallyTypedAssignment: boolean, enclosingDecl: PullDecl): PullSymbol {\n            var symbolAndDiagnostics = this.resolver.resolveAST(ast, inContextuallyTypedAssignment, enclosingDecl, this.context);\n\n            this.reportDiagnostics(symbolAndDiagnostics, enclosingDecl);\n            return symbolAndDiagnostics && symbolAndDiagnostics.symbol;\n        }\n\n        // variable and argument declarations\n        // validate:\n        //  - lhs and rhs types agree (if lhs has no type annotation)\n        private typeCheckBoundDecl(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var boundDeclAST = <BoundDecl>ast;\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var typeExprSymbol: PullTypeSymbol = null;\n\n            if (boundDeclAST.typeExpr) {\n                typeExprSymbol = this.typeCheckAST(boundDeclAST.typeExpr, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n                if (typeExprSymbol.isNamedTypeSymbol() && typeExprSymbol.isGeneric() && !typeExprSymbol.isTypeParameter() && typeExprSymbol.isResolved() && !typeExprSymbol.getIsSpecialized()) {\n                    typeExprSymbol = this.resolver.specializeTypeToAny(typeExprSymbol, enclosingDecl, this.context);\n                }\n            }\n\n            // if there\'s a type expr and an initializer, resolve the initializer\n            if (boundDeclAST.init) {\n                if (typeExprSymbol) {\n                    this.context.pushContextualType(typeExprSymbol, this.context.inProvisionalResolution(), null);\n                }\n\n                var initTypeSymbol = this.typeCheckAST(boundDeclAST.init, typeCheckContext, !!typeExprSymbol);\n\n                if (typeExprSymbol) {\n                    this.context.popContextualType();\n                }\n\n                if (typeExprSymbol && typeExprSymbol.isContainer()) {\n                    var instanceTypeSymbol = (<PullContainerTypeSymbol>typeExprSymbol.getType()).getInstanceSymbol();\n\n                    if (!instanceTypeSymbol || !PullHelpers.symbolIsEnum(instanceTypeSymbol)) {\n                        this.postError(boundDeclAST.minChar, boundDeclAST.getLength(), typeCheckContext.scriptName, DiagnosticCode.Tried_to_set_variable_type_to_module_type__0__, [typeExprSymbol.toString()], enclosingDecl);\n                        typeExprSymbol = null;\n                    }\n                    else {\n                        typeExprSymbol = instanceTypeSymbol.getType();\n                    }\n                }\n\n                if (initTypeSymbol && initTypeSymbol.isContainer()) {\n                    instanceTypeSymbol = (<PullContainerTypeSymbol>initTypeSymbol.getType()).getInstanceSymbol();\n\n                    if (!instanceTypeSymbol) {\n                        this.postError(boundDeclAST.minChar, boundDeclAST.getLength(), typeCheckContext.scriptName, DiagnosticCode.Tried_to_set_variable_type_to_uninitialized_module_type__0__, [initTypeSymbol.toString()], enclosingDecl);\n                        initTypeSymbol = null;\n                    }\n                    else {\n                        initTypeSymbol = instanceTypeSymbol.getType();\n                    }\n                }\n\n                if (initTypeSymbol && typeExprSymbol) {\n\n                    var comparisonInfo = new TypeComparisonInfo();\n\n                    var isAssignable = this.resolver.sourceIsAssignableToTarget(initTypeSymbol, typeExprSymbol, this.context, comparisonInfo);\n\n                    if (!isAssignable) {\n                        if (comparisonInfo.message) {\n                            this.postError(boundDeclAST.minChar, boundDeclAST.getLength(), typeCheckContext.scriptName, DiagnosticCode.Cannot_convert__0__to__1__NL__2, [initTypeSymbol.toString(), typeExprSymbol.toString(), comparisonInfo.message], enclosingDecl);\n                        } else {\n                            this.postError(boundDeclAST.minChar, boundDeclAST.getLength(), typeCheckContext.scriptName, DiagnosticCode.Cannot_convert__0__to__1_, [initTypeSymbol.toString(), typeExprSymbol.toString()], enclosingDecl);\n                        }\n                    }\n                }\n            }\n\n            // now resolve the actual symbol, but supress the errors since we\'ve already surfaced them above\n            var prevSupressErrors = this.context.suppressErrors;\n            this.context.suppressErrors = true;\n            var decl: PullDecl = this.resolver.getDeclForAST(boundDeclAST);\n\n            var varTypeSymbol = this.resolveSymbolAndReportDiagnostics(boundDeclAST, false, enclosingDecl).getType();\n\n            if (typeExprSymbol && typeExprSymbol.isContainer() && varTypeSymbol.isError()) {\n                this.checkForResolutionError(varTypeSymbol, decl);\n            }\n\n            this.context.suppressErrors = prevSupressErrors;\n\n            var declSymbol = decl.getSymbol();\n\n            // Check if variable satisfies type privacy\n            if (declSymbol.getKind() != PullElementKind.Parameter &&\n                (declSymbol.getKind() != PullElementKind.Property || declSymbol.getContainer().isNamedTypeSymbol())) {\n                this.checkTypePrivacy(declSymbol, varTypeSymbol, typeCheckContext, (typeSymbol: PullTypeSymbol) =>\n                    this.variablePrivacyErrorReporter(declSymbol, typeSymbol, typeCheckContext));\n            }\n\n            return varTypeSymbol;\n        }\n\n        private typeCheckImportDeclaration(importDeclaration: ImportDeclaration, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var result = <PullTypeSymbol>this.resolveSymbolAndReportDiagnostics(importDeclaration, /*inContextuallyTypedAssignment:*/ false, typeCheckContext.getEnclosingDecl());\n            this.typeCheckAST(importDeclaration.alias, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return result;\n        }\n\n        // functions \n        // validate:\n        //  - use of super calls \n        //  - signatures agree in optionality\n        //  - getter/setter type agreement\n        //  - body members expr\n        //  - getter/setter flags agree\n        //  - getters have no parameters \n        //  - getters return a value\n        //  - setters return no value\n        // PULLTODO: split up into separate functions for constructors, indexers, expressions, signatures, etc.\n        private typeCheckFunction(funcDeclAST: FunctionDeclaration, typeCheckContext: PullTypeCheckContext, inContextuallyTypedAssignment): PullTypeSymbol {\n            if (funcDeclAST.isConstructor || hasFlag(funcDeclAST.getFunctionFlags(), FunctionFlags.ConstructMember)) {\n                return this.typeCheckConstructor(funcDeclAST, typeCheckContext, inContextuallyTypedAssignment);\n            }\n            else if (hasFlag(funcDeclAST.getFunctionFlags(), FunctionFlags.IndexerMember)) {\n                return this.typeCheckIndexer(funcDeclAST, typeCheckContext, inContextuallyTypedAssignment);\n            }\n            else if (funcDeclAST.isAccessor()) {\n                return this.typeCheckAccessor(funcDeclAST, typeCheckContext, inContextuallyTypedAssignment);\n            }\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var functionSymbol = this.resolveSymbolAndReportDiagnostics(funcDeclAST, inContextuallyTypedAssignment, enclosingDecl);\n            var functionDecl = typeCheckContext.semanticInfo.getDeclForAST(funcDeclAST);\n\n            typeCheckContext.pushEnclosingDecl(functionDecl);\n\n            this.typeCheckAST(funcDeclAST.typeArguments, typeCheckContext, inContextuallyTypedAssignment);\n            this.typeCheckAST(funcDeclAST.arguments, typeCheckContext, inContextuallyTypedAssignment);\n            this.typeCheckAST(funcDeclAST.returnTypeAnnotation, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(funcDeclAST.block, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            var hasReturn = typeCheckContext.getEnclosingDeclHasReturn();\n\n            this.validateVariableDeclarationGroups(functionDecl, typeCheckContext);\n\n            typeCheckContext.popEnclosingDecl();\n\n            var functionSignature = functionDecl.getSignatureSymbol();\n\n            // check for optionality\n            var parameters = functionSignature.getParameters();\n\n            if (parameters.length) {\n                for (var i = 0; i < parameters.length; i++) {\n                    this.checkForResolutionError(parameters[i].getType(), enclosingDecl);\n                }\n            }\n\n\n            var returnType = functionSignature.getReturnType();\n\n            this.checkForResolutionError(returnType, enclosingDecl);\n\n            if (funcDeclAST.block && funcDeclAST.returnTypeAnnotation != null && !hasReturn) {\n                var isVoidOrAny = this.resolver.isAnyOrEquivalent(returnType) || returnType === this.semanticInfoChain.voidTypeSymbol;\n\n                if (!isVoidOrAny && !(funcDeclAST.block.statements.members.length > 0 && funcDeclAST.block.statements.members[0].nodeType === NodeType.ThrowStatement)) {\n                    var funcName = functionDecl.getDisplayName();\n                    funcName = funcName ? \"\'\" + funcName + \"\'\" : \"expression\";\n\n                    this.postError(funcDeclAST.returnTypeAnnotation.minChar, funcDeclAST.returnTypeAnnotation.getLength(), typeCheckContext.scriptName, DiagnosticCode.Function__0__declared_a_non_void_return_type__but_has_no_return_expression, [funcName], typeCheckContext.getEnclosingDecl());\n                }\n            }\n\n            this.typeCheckFunctionOverloads(funcDeclAST, typeCheckContext);\n            this.checkFunctionTypePrivacy(funcDeclAST, inContextuallyTypedAssignment, typeCheckContext);\n\n            return functionSymbol ? functionSymbol.getType() : null;\n        }\n\n        private typeCheckFunctionOverloads(funcDecl: FunctionDeclaration, typeCheckContext: PullTypeCheckContext, signature?: PullSignatureSymbol, allSignatures?: PullSignatureSymbol[]) {\n            if (!signature) {\n                var functionSignatureInfo = PullHelpers.getSignatureForFuncDecl(funcDecl, typeCheckContext.semanticInfo);\n                signature = functionSignatureInfo.signature;\n                allSignatures = functionSignatureInfo.allSignatures;\n            }\n\n            var funcSymbol = typeCheckContext.semanticInfo.getSymbolAndDiagnosticsForAST(funcDecl).symbol;\n\n            // Find the definition signature for this signature group\n            var definitionSignature: PullSignatureSymbol = null;\n            for (var i = allSignatures.length - 1; i >= 0; i--) {\n                if (allSignatures[i].isDefinition()) {\n                    definitionSignature = allSignatures[i];\n                    break;\n                }\n            }\n\n            if (!signature.isDefinition()) {\n                // Check for if the signatures are identical, check with the signatures before the current current one\n                for (var i = 0; i < allSignatures.length; i++) {\n                    if (allSignatures[i] === signature) {\n                        break;\n                    }\n\n                    if (this.resolver.signaturesAreIdentical(allSignatures[i], signature)) {\n                        if (funcDecl.isConstructor) {\n                            this.postError(funcDecl.minChar, funcDecl.getLength(), typeCheckContext.scriptName, DiagnosticCode.Duplicate_constructor_overload_signature, null, typeCheckContext.getEnclosingDecl());\n                        } else if (funcDecl.isConstructMember()) {\n                            this.postError(funcDecl.minChar, funcDecl.getLength(), typeCheckContext.scriptName, DiagnosticCode.Duplicate_overload_construct_signature, null, typeCheckContext.getEnclosingDecl());\n                        } else if (funcDecl.isCallMember()) {\n                            this.postError(funcDecl.minChar, funcDecl.getLength(), typeCheckContext.scriptName, DiagnosticCode.Duplicate_overload_call_signature, null, typeCheckContext.getEnclosingDecl());\n                        } else {\n                            this.postError(funcDecl.minChar, funcDecl.getLength(), typeCheckContext.scriptName, DiagnosticCode.Duplicate_overload_signature_for__0_, [funcSymbol.getScopedNameEx().toString()], typeCheckContext.getEnclosingDecl());\n                        }\n\n                        break;\n                    }\n                }\n            }\n\n            // Verify assignment compatibility or in case of constantOverload signature, if its subtype of atleast one signature\n            var isConstantOverloadSignature = signature.isStringConstantOverloadSignature();\n            if (isConstantOverloadSignature) {\n                if (signature.isDefinition()) {\n                    // Report error - definition signature cannot specify constant type\n                    this.postError(funcDecl.minChar, funcDecl.getLength(), typeCheckContext.scriptName, DiagnosticCode.Overload_signature_implementation_cannot_use_specialized_type, null, typeCheckContext.getEnclosingDecl());\n                } else {\n                    var resolutionContext = new PullTypeResolutionContext();\n                    var foundSubtypeSignature = false;\n                    for (var i = 0; i < allSignatures.length; i++) {\n                        if (allSignatures[i].isDefinition() || allSignatures[i] === signature) {\n                            continue;\n                        }\n\n                        if (!allSignatures[i].isResolved()) {\n                            this.resolver.resolveDeclaredSymbol(allSignatures[i], typeCheckContext.getEnclosingDecl(), resolutionContext);\n                        }\n                        \n                        if (allSignatures[i].isStringConstantOverloadSignature()) {\n                            continue;\n                        }\n\n                        if (this.resolver.signatureIsSubtypeOfTarget(signature, allSignatures[i], resolutionContext)) {\n                            foundSubtypeSignature = true;\n                            break;\n                        }\n                    }\n                    \n                    if (!foundSubtypeSignature) {\n                        // Could not find the overload signature subtype\n                        this.postError(funcDecl.minChar, funcDecl.getLength(), typeCheckContext.scriptName, DiagnosticCode.Specialized_overload_signature_is_not_subtype_of_any_non_specialized_signature, null, typeCheckContext.getEnclosingDecl());\n                    }\n                }\n            } else if (definitionSignature && definitionSignature != signature) {\n                var comparisonInfo = new TypeComparisonInfo();\n                var resolutionContext = new PullTypeResolutionContext();\n                if (!definitionSignature.isResolved()) {\n                    this.resolver.resolveDeclaredSymbol(definitionSignature, typeCheckContext.getEnclosingDecl(), resolutionContext);\n                }\n\n                if (!this.resolver.signatureIsAssignableToTarget(definitionSignature, signature, resolutionContext, comparisonInfo)) {\n                    // definition signature is not assignable to functionSignature then its incorrect overload signature\n                    if (comparisonInfo.message) {\n                        this.postError(funcDecl.minChar, funcDecl.getLength(), typeCheckContext.scriptName, DiagnosticCode.Overload_signature_is_not_compatible_with_function_definition__NL__0, [comparisonInfo.message], typeCheckContext.getEnclosingDecl());\n                    } else {\n                        this.postError(funcDecl.minChar, funcDecl.getLength(), typeCheckContext.scriptName, DiagnosticCode.Overload_signature_is_not_compatible_with_function_definition, null, typeCheckContext.getEnclosingDecl());\n                    }\n                }\n            }\n\n            var signatureForVisibilityCheck = definitionSignature;\n            if (!definitionSignature) {\n                if (allSignatures[0] === signature) {\n                    return;\n                }\n                signatureForVisibilityCheck = allSignatures[0];\n            }\n\n            if (!funcDecl.isConstructor && !funcDecl.isConstructMember() && signature != signatureForVisibilityCheck) {\n                var errorCode: DiagnosticCode;\n                // verify it satisfies all the properties of first signature\n                if (signatureForVisibilityCheck.hasFlag(PullElementFlags.Private) != signature.hasFlag(PullElementFlags.Private)) {\n                    errorCode = DiagnosticCode.Overload_signatures_must_all_be_public_or_private;\n                }\n                else if (signatureForVisibilityCheck.hasFlag(PullElementFlags.Exported) != signature.hasFlag(PullElementFlags.Exported)) {\n                    errorCode = DiagnosticCode.Overload_signatures_must_all_be_exported_or_local;\n                }\n                else if (signatureForVisibilityCheck.hasFlag(PullElementFlags.Ambient) != signature.hasFlag(PullElementFlags.Ambient)) {\n                    errorCode = DiagnosticCode.Overload_signatures_must_all_be_ambient_or_non_ambient;\n                }\n                else if (signatureForVisibilityCheck.hasFlag(PullElementFlags.Optional) != signature.hasFlag(PullElementFlags.Optional)) {\n                    errorCode = DiagnosticCode.Overload_signatures_must_all_be_optional_or_required;\n                }\n\n                if (errorCode) {\n                    this.postError(funcDecl.minChar, funcDecl.getLength(), typeCheckContext.scriptName, errorCode, null, typeCheckContext.getEnclosingDecl());\n                }\n            }\n        }\n\n        private typeCheckTypeParameter(typeParameter: TypeParameter, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            if (typeParameter.constraint) {\n                var constraintType = this.typeCheckAST(typeParameter.constraint, typeCheckContext, /*inContextuallyTypedAssignment:*/false);\n\n                if (constraintType && !constraintType.isError() && constraintType.isPrimitive()) {\n                    this.postError(typeParameter.constraint.minChar, typeParameter.constraint.getLength(), typeCheckContext.scriptName,\n                        DiagnosticCode.Type_parameter_constraint_cannot_be_a_primitive_type, null, typeCheckContext.getEnclosingDecl());\n                }\n            }\n\n            return <PullTypeSymbol>this.resolveSymbolAndReportDiagnostics(typeParameter, /*inContextuallyTypedAssignment:*/false, typeCheckContext.getEnclosingDecl());\n        }\n\n        private typeCheckAccessor(ast: AST, typeCheckContext: PullTypeCheckContext, inContextuallyTypedAssignment): PullTypeSymbol {\n            var funcDeclAST = <FunctionDeclaration>ast;\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var accessorSymbol = <PullAccessorSymbol>this.resolveSymbolAndReportDiagnostics(ast, inContextuallyTypedAssignment, enclosingDecl);\n            this.checkForResolutionError(accessorSymbol.getType(), enclosingDecl);\n\n            var isGetter = hasFlag(funcDeclAST.getFunctionFlags(), FunctionFlags.GetAccessor);\n            var isSetter = !isGetter;\n\n            var getter = accessorSymbol.getGetter();\n            var setter = accessorSymbol.getSetter();\n\n            var functionDecl = typeCheckContext.semanticInfo.getDeclForAST(funcDeclAST);\n            typeCheckContext.pushEnclosingDecl(functionDecl);\n\n            this.typeCheckAST(funcDeclAST.arguments, typeCheckContext, inContextuallyTypedAssignment);\n\n            this.typeCheckAST(funcDeclAST.block, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            var hasReturn = typeCheckContext.getEnclosingDeclHasReturn();\n\n            this.validateVariableDeclarationGroups(functionDecl, typeCheckContext);\n\n            typeCheckContext.popEnclosingDecl();\n\n            var functionSignature = functionDecl.getSignatureSymbol();\n\n            // check for optionality\n            var parameters = functionSignature.getParameters();\n\n            var returnType = functionSignature.getReturnType();\n\n            this.checkForResolutionError(returnType, enclosingDecl);\n\n            var funcNameAST = funcDeclAST.name;\n\n            if (isGetter && !hasReturn) {\n                if (!(funcDeclAST.block.statements.members.length > 0 && funcDeclAST.block.statements.members[0].nodeType === NodeType.ThrowStatement)) {\n                    this.postError(funcNameAST.minChar, funcNameAST.getLength(), typeCheckContext.scriptName, DiagnosticCode.Getters_must_return_a_value, null, typeCheckContext.getEnclosingDecl());\n                }\n            }\n\n            // Setter with return value is checked in typeCheckReturnExpression\n\n            if (getter && setter) {\n                var getterDecl = getter.getDeclarations()[0];\n                var setterDecl = setter.getDeclarations()[0];\n\n                var getterIsPrivate = getterDecl.getFlags() & PullElementFlags.Private;\n                var setterIsPrivate = setterDecl.getFlags() & PullElementFlags.Private;\n\n                if (getterIsPrivate != setterIsPrivate) {\n                    this.postError(funcNameAST.minChar, funcNameAST.getLength(), typeCheckContext.scriptName, DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility, null, typeCheckContext.getEnclosingDecl());\n                }\n            }\n\n            this.checkFunctionTypePrivacy(funcDeclAST, inContextuallyTypedAssignment, typeCheckContext);\n\n            return null;\n        }\n\n        private typeCheckConstructor(funcDeclAST: FunctionDeclaration, typeCheckContext: PullTypeCheckContext, inContextuallyTypedAssignment: boolean): PullTypeSymbol {\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var functionSymbol = this.resolveSymbolAndReportDiagnostics(funcDeclAST, inContextuallyTypedAssignment, enclosingDecl);\n\n            var functionDecl = typeCheckContext.semanticInfo.getDeclForAST(funcDeclAST);\n            typeCheckContext.pushEnclosingDecl(functionDecl);\n\n            // In case of constructor signatures, type check constructor type arguments\n            this.typeCheckAST(funcDeclAST.typeArguments, typeCheckContext, inContextuallyTypedAssignment);\n\n            typeCheckContext.inConstructorArguments = true;\n            this.typeCheckAST(funcDeclAST.arguments, typeCheckContext, inContextuallyTypedAssignment);\n            typeCheckContext.inConstructorArguments = false;\n\n            // Reset the flag\n            typeCheckContext.seenSuperConstructorCall = false;\n\n            // In case of constructor signatures, type check return annotation\n            this.typeCheckAST(funcDeclAST.returnTypeAnnotation, typeCheckContext,/*inContextuallyTypedAssignment:*/ false);\n\n            this.typeCheckAST(funcDeclAST.block, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            this.validateVariableDeclarationGroups(functionDecl, typeCheckContext);\n\n            typeCheckContext.popEnclosingDecl();\n\n            var constructorSignature = functionDecl.getSignatureSymbol();\n\n            // check for optionality\n            var parameters = constructorSignature.getParameters();\n\n            if (parameters.length) {\n                for (var i = 0, n = parameters.length; i < n; i++) {\n                    this.checkForResolutionError(parameters[i].getType(), enclosingDecl);\n                }\n            }\n\n            this.checkForResolutionError(constructorSignature.getReturnType(), enclosingDecl);\n\n            if (functionDecl.getSignatureSymbol() && functionDecl.getSignatureSymbol().isDefinition() && this.enclosingClassIsDerived(typeCheckContext)) {\n                // Constructors for derived classes must contain a call to the class\'s \'super\' constructor\n                if (!typeCheckContext.seenSuperConstructorCall) {\n                    this.postError(funcDeclAST.minChar, 11 /* \"constructor\" */, typeCheckContext.scriptName,\n                        DiagnosticCode.Constructors_for_derived_classes_must_contain_a__super__call, null, enclosingDecl);\n                }\n                // The first statement in the body of a constructor must be a super call if both of the following are true:\n                //  • The containing class is a derived class.\n                //  • The constructor declares parameter properties or the containing class declares instance member variables with initializers.\n                else if (this.superCallMustBeFirstStatementInConstructor(functionDecl, enclosingDecl)) {\n                    var firstStatement = this.getFirstStatementFromFunctionDeclAST(funcDeclAST)\n                    if (!firstStatement || !this.isSuperCallNode(firstStatement)) {\n                        this.postError(funcDeclAST.minChar, 11 /* \"constructor\" */, typeCheckContext.scriptName,\n                            DiagnosticCode.A__super__call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_intialized_properties_or_has_parameter_properties, null, enclosingDecl);\n                    }\n                }\n            }\n\n            this.typeCheckFunctionOverloads(funcDeclAST, typeCheckContext);\n            this.checkFunctionTypePrivacy(funcDeclAST, inContextuallyTypedAssignment, typeCheckContext);\n            return functionSymbol ? functionSymbol.getType() : null;\n        }\n\n        private typeCheckIndexer(ast: AST, typeCheckContext: PullTypeCheckContext, inContextuallyTypedAssignment): PullTypeSymbol {\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            // resolve the index signature, even though we won\'t be needing its type\n            this.resolver.resolveAST(ast, inContextuallyTypedAssignment, enclosingDecl, this.context);\n\n            var funcDeclAST = <FunctionDeclaration>ast;\n\n            var functionDecl = typeCheckContext.semanticInfo.getDeclForAST(funcDeclAST);\n            typeCheckContext.pushEnclosingDecl(functionDecl);\n\n            this.typeCheckAST(funcDeclAST.arguments, typeCheckContext, inContextuallyTypedAssignment);\n\n            this.typeCheckAST(funcDeclAST.returnTypeAnnotation, typeCheckContext,/*inContextuallyTypedAssignment:*/ false);\n\n            this.typeCheckAST(funcDeclAST.block, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            typeCheckContext.popEnclosingDecl();\n\n            var indexSignature = functionDecl.getSignatureSymbol();\n            var parameters = indexSignature.getParameters();\n\n            if (parameters.length) {\n                var parameterType: PullTypeSymbol = null;\n\n                for (var i = 0; i < parameters.length; i++) {\n                    this.checkForResolutionError(parameters[i].getType(), enclosingDecl);\n                }\n            }\n\n            this.checkForResolutionError(indexSignature.getReturnType(), enclosingDecl);\n            this.checkFunctionTypePrivacy(funcDeclAST, inContextuallyTypedAssignment, typeCheckContext);\n\n            return null;\n        }\n\n        private typeCheckIfTypeMemberPropertyOkToOverride(typeSymbol: PullTypeSymbol, extendedType: PullTypeSymbol,\n            typeMember: PullSymbol, extendedTypeMember: PullSymbol, comparisonInfo: TypeComparisonInfo) {\n\n            if (!typeSymbol.isClass()) {\n                return true;\n            }\n\n            var typeMemberKind = typeMember.getKind();\n            var extendedMemberKind = extendedTypeMember.getKind();\n\n            if (typeMemberKind === extendedMemberKind) {\n                return true;\n            }\n\n            var errorCode: DiagnosticCode;\n            if (typeMemberKind === PullElementKind.Property) {\n                if (typeMember.isAccessor()) {\n                    errorCode = DiagnosticCode.Class__0__defines_instance_member_accessor__1___but_extended_class__2__defines_it_as_instance_member_function;\n                } else {\n                    errorCode = DiagnosticCode.Class__0__defines_instance_member_property__1___but_extended_class__2__defines_it_as_instance_member_function;\n                }\n            } else if (typeMemberKind === PullElementKind.Method) {\n                if (extendedTypeMember.isAccessor()) {\n                    errorCode = DiagnosticCode.Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_accessor;\n                } else {\n                    errorCode = DiagnosticCode.Class__0__defines_instance_member_function__1___but_extended_class__2__defines_it_as_instance_member_property;\n                }\n            }\n\n            var message = getDiagnosticMessage(errorCode, [typeSymbol.toString(), typeMember.getScopedNameEx().toString(), extendedType.toString()]);\n            comparisonInfo.addMessage(message);\n            return false;\n        }\n\n        private typeCheckIfTypeExtendsType(typeDecl: TypeDeclaration, typeSymbol: PullTypeSymbol,\n            extendedType: PullTypeSymbol, typeCheckContext: PullTypeCheckContext) {\n            var typeMembers = typeSymbol.getMembers();\n\n            var resolutionContext = new PullTypeResolutionContext();\n            var comparisonInfo = new TypeComparisonInfo();\n            var foundError = false;\n\n            // Check members\n            for (var i = 0; i < typeMembers.length; i++) {\n                var propName = typeMembers[i].getName();\n                var extendedTypeProp = extendedType.findMember(propName);\n                if (extendedTypeProp) {\n                    foundError = !this.typeCheckIfTypeMemberPropertyOkToOverride(typeSymbol, extendedType, typeMembers[i], extendedTypeProp, comparisonInfo);\n\n                    if (!foundError) {\n                        foundError = !this.resolver.sourcePropertyIsSubtypeOfTargetProperty(typeSymbol, extendedType, typeMembers[i], extendedTypeProp, resolutionContext, comparisonInfo);\n                    }\n\n                    if (foundError) {\n                        break;\n                    }\n                }\n            }\n\n            // Check call signatures\n            if (!foundError && typeSymbol.hasOwnCallSignatures()) {\n                foundError = !this.resolver.sourceCallSignaturesAreSubtypeOfTargetCallSignatures(typeSymbol, extendedType, resolutionContext, comparisonInfo);\n            }\n\n            // Check construct signatures\n            if (!foundError && typeSymbol.hasOwnConstructSignatures()) {\n                foundError = !this.resolver.sourceConstructSignaturesAreSubtypeOfTargetConstructSignatures(typeSymbol, extendedType, resolutionContext, comparisonInfo);\n            }\n\n            // Check index signatures\n            if (!foundError && typeSymbol.hasOwnIndexSignatures()) {\n                foundError = !this.resolver.sourceIndexSignaturesAreSubtypeOfTargetIndexSignatures(typeSymbol, extendedType, resolutionContext, comparisonInfo);\n            }\n\n            if (!foundError && typeSymbol.isClass()) {\n                // If there is base class verify the constructor type is subtype of base class\n                var typeConstructorType = (<PullClassTypeSymbol>typeSymbol).getConstructorMethod().getType();\n                var typeConstructorTypeMembers = typeConstructorType.getMembers();\n                if (typeConstructorTypeMembers.length) {\n                    var extendedConstructorType = (<PullClassTypeSymbol>extendedType).getConstructorMethod().getType();\n                    var comparisonInfoForPropTypeCheck = new TypeComparisonInfo(comparisonInfo);\n\n                    // Verify that all the overriden members of the constructor type are compatible\n                    for (var i = 0; i < typeConstructorTypeMembers.length; i++) {\n                        var propName = typeConstructorTypeMembers[i].getName();\n                        var extendedConstructorTypeProp = extendedConstructorType.findMember(propName);\n                        if (extendedConstructorTypeProp) {\n                            if (!extendedConstructorTypeProp.isResolved()) {\n                                var extendedClassAst = typeCheckContext.semanticInfo.getASTForSymbol(extendedType);\n                                var extendedClassDecl = typeCheckContext.semanticInfo.getDeclForAST(extendedClassAst);\n                                this.resolver.resolveDeclaredSymbol(extendedConstructorTypeProp, extendedClassDecl, resolutionContext);\n                            }\n\n                            // check if type of property is subtype of extended type\'s property type\n                            var typeConstructorTypePropType = typeConstructorTypeMembers[i].getType();\n                            var extendedConstructorTypePropType = extendedConstructorTypeProp.getType();\n                            if (!this.resolver.sourceIsSubtypeOfTarget(typeConstructorTypePropType, extendedConstructorTypePropType, resolutionContext, comparisonInfoForPropTypeCheck)) {\n                                var propMessage: string;\n                                if (comparisonInfoForPropTypeCheck.message) {\n                                    propMessage = getDiagnosticMessage(DiagnosticCode.Types_of_static_property__0__of_class__1__and_class__2__are_incompatible__NL__3,\n                                        [extendedConstructorTypeProp.getScopedNameEx().toString(), typeSymbol.toString(), extendedType.toString(), comparisonInfoForPropTypeCheck.message]);\n                                } else {\n                                    propMessage = getDiagnosticMessage(DiagnosticCode.Types_of_static_property__0__of_class__1__and_class__2__are_incompatible,\n                                        [extendedConstructorTypeProp.getScopedNameEx().toString(), typeSymbol.toString(), extendedType.toString()]);\n                                }\n                                comparisonInfo.addMessage(propMessage);\n                                foundError = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (foundError) {\n                var errorCode: DiagnosticCode;\n                if (typeSymbol.isClass()) {\n                    errorCode = DiagnosticCode.Class__0__cannot_extend_class__1__NL__2;\n                } else {\n                    if (extendedType.isClass()) {\n                        errorCode = DiagnosticCode.Interface__0__cannot_extend_class__1__NL__2;\n                    } else {\n                        errorCode = DiagnosticCode.Interface__0__cannot_extend_interface__1__NL__2;\n                    }\n                }\n\n                this.postError(typeDecl.name.minChar, typeDecl.name.getLength(), typeCheckContext.scriptName, errorCode, [typeSymbol.getScopedName(), extendedType.getScopedName(), comparisonInfo.message], typeCheckContext.getEnclosingDecl());\n            }\n        }\n\n        private typeCheckIfClassImplementsType(classDecl: TypeDeclaration, classSymbol: PullTypeSymbol,\n            implementedType: PullTypeSymbol, typeCheckContext: PullTypeCheckContext) {\n\n            var resolutionContext = new PullTypeResolutionContext();\n            var comparisonInfo = new TypeComparisonInfo();\n            var foundError = !this.resolver.sourceMembersAreSubtypeOfTargetMembers(classSymbol, implementedType, resolutionContext, comparisonInfo);\n            if (!foundError) {\n                foundError = !this.resolver.sourceCallSignaturesAreSubtypeOfTargetCallSignatures(classSymbol, implementedType, resolutionContext, comparisonInfo);\n                if (!foundError) {\n                    foundError = !this.resolver.sourceConstructSignaturesAreSubtypeOfTargetConstructSignatures(classSymbol, implementedType, resolutionContext, comparisonInfo);\n                    if (!foundError) {\n                        foundError = !this.resolver.sourceIndexSignaturesAreSubtypeOfTargetIndexSignatures(classSymbol, implementedType, resolutionContext, comparisonInfo);\n                    }\n                }\n            }\n\n            // Report error\n            if (foundError) {\n                var errorCode = implementedType.isClass() ?\n                    DiagnosticCode.Class__0__declares_class__1__but_does_not_implement_it__NL__2 :\n                    DiagnosticCode.Class__0__declares_interface__1__but_does_not_implement_it__NL__2;\n\n                this.postError(classDecl.name.minChar, classDecl.name.getLength(), typeCheckContext.scriptName, errorCode, [classSymbol.getScopedName(), implementedType.getScopedName(), comparisonInfo.message], typeCheckContext.getEnclosingDecl());\n            }\n        }\n\n        private typeCheckBase(typeDeclAst: TypeDeclaration,\n                              typeSymbol: PullTypeSymbol, baseDeclAST: AST,\n                              isExtendedType: boolean,\n                              typeCheckContext: PullTypeCheckContext) {\n\n            var typeDecl = typeCheckContext.semanticInfo.getDeclForAST(typeDeclAst);\n            var contextForBaseTypeResolution = new PullTypeResolutionContext();\n            contextForBaseTypeResolution.isResolvingClassExtendedType = true;\n\n            var baseType = <PullTypeSymbol>this.typeCheckAST(new TypeReference(baseDeclAST, 0), typeCheckContext, /*inContextuallyTypedAssignment*/ false);\n            contextForBaseTypeResolution.isResolvingClassExtendedType = false;\n\n            var typeDeclIsClass = typeSymbol.isClass();\n\n            if (!typeSymbol.isValidBaseKind(baseType, isExtendedType)) {\n                // Report error about invalid base kind\n                if (baseType.isError()) {\n                    var error = (<PullErrorTypeSymbol>baseType).getDiagnostic();\n                    if (error) {\n                        this.postError(baseDeclAST.minChar, baseDeclAST.getLength(), typeCheckContext.scriptName, error.diagnosticCode(), error.arguments(), typeCheckContext.getEnclosingDecl());\n                    }\n                } else if (isExtendedType) {\n                    if (typeDeclIsClass) {\n                        this.postError(baseDeclAST.minChar, baseDeclAST.getLength(), typeCheckContext.scriptName, DiagnosticCode.A_class_may_only_extend_another_class, null, typeCheckContext.getEnclosingDecl());\n                    } else {\n                        this.postError(baseDeclAST.minChar, baseDeclAST.getLength(), typeCheckContext.scriptName, DiagnosticCode.An_interface_may_only_extend_another_class_or_interface, null, typeCheckContext.getEnclosingDecl());\n                    }\n                } else {\n                    this.postError(baseDeclAST.minChar, baseDeclAST.getLength(), typeCheckContext.scriptName, DiagnosticCode.A_class_may_only_implement_another_class_or_interface, null, typeCheckContext.getEnclosingDecl());\n                }\n                return;\n            }\n\n            // Check if its a recursive extend/implement type\n            if (baseType.hasBase(typeSymbol)) {\n                // Report error\n                this.postError(typeDeclAst.name.minChar,\n                    typeDeclAst.name.getLength(),\n                    typeCheckContext.scriptName,\n                    typeDeclIsClass ? DiagnosticCode.Class__0__is_recursively_referenced_as_a_base_type_of_itself : DiagnosticCode.Interface__0__is_recursively_referenced_as_a_base_type_of_itself, [typeSymbol.getScopedName()],\n                    typeCheckContext.getEnclosingDecl());\n                return;\n            }\n\n            if (isExtendedType) {\n                // Verify all own overriding members are subtype\n                this.typeCheckIfTypeExtendsType(typeDeclAst, typeSymbol, baseType, typeCheckContext);\n            } else {\n                // If class implementes interface or class, verify all the public members are implemented\n                this.typeCheckIfClassImplementsType(typeDeclAst, typeSymbol, baseType, typeCheckContext);\n            }\n\n            // Privacy error:\n            this.checkTypePrivacy(typeSymbol, baseType, typeCheckContext, (errorTypeSymbol: PullTypeSymbol) =>\n                this.baseListPrivacyErrorReporter(typeDeclAst, typeSymbol, baseDeclAST, isExtendedType, errorTypeSymbol, typeCheckContext));\n        }\n\n        private typeCheckBases(typeDeclAst: TypeDeclaration, typeSymbol: PullTypeSymbol, typeCheckContext: PullTypeCheckContext) {\n            if (!typeDeclAst.extendsList && !typeDeclAst.implementsList) {\n                return;\n            }\n\n            for (var i = 0; i < typeDeclAst.extendsList.members.length; i++) {\n                this.typeCheckBase(typeDeclAst, typeSymbol, typeDeclAst.extendsList.members[i], true, typeCheckContext);\n            }\n\n            if (typeSymbol.isClass()) {\n                for (var i = 0; i < typeDeclAst.implementsList.members.length; i++) {\n                    this.typeCheckBase(typeDeclAst, typeSymbol, typeDeclAst.implementsList.members[i], false, typeCheckContext);\n                }\n            }\n            else if (typeDeclAst.implementsList) {\n                this.postError(typeDeclAst.implementsList.minChar, typeDeclAst.implementsList.getLength(), typeCheckContext.scriptName, DiagnosticCode.An_interface_cannot_implement_another_type, null, typeCheckContext.getEnclosingDecl());\n            }\n        }\n\n        // Classes\n        // validate:\n        //  - mutually recursive base classes\n        //  - duplicate implemented interfaces\n        //  - mutually recursive type parameters\n        //  - bases are interfaces or classes\n        //  - properties satisfy implemented interfaces\n        //  - properties of base class and implemented interfaces agree\n        //  - type of overridden member is subtype of original\n        //  - method does not overrided field, or vice-versa\n        //  - body members\n        private typeCheckClass(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var classAST = <ClassDeclaration>ast;\n            // resolving the class also resolves its members...\n            var classSymbol = <PullClassTypeSymbol>this.resolveSymbolAndReportDiagnostics(ast, false, typeCheckContext.getEnclosingDecl()).getType();\n            this.checkForResolutionError(classSymbol, typeCheckContext.getEnclosingDecl());\n\n            this.typeCheckAST(classAST.typeParameters, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            var classDecl = typeCheckContext.semanticInfo.getDeclForAST(classAST);\n            typeCheckContext.pushEnclosingDecl(classDecl);\n\n            // Type check the type paramter list if any exists\n            this.typeCheckAST(classAST.typeParameters, typeCheckContext, /*inContextuallyTypedAssignment*/ false);\n\n            this.typeCheckBases(classAST, classSymbol, typeCheckContext);\n\n            // Type check the members\n            this.typeCheckAST(classAST.members, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            typeCheckContext.popEnclosingDecl();\n\n            return classSymbol;\n        }\n\n        // Interfaces\n        // validate:\n        //  - mutually recursive bases\n        //  - duplicate implemented or extended interfaces\n        //  - mutually recursive type parameters\n        //  - properties of extended interfaces do not conflict\n        //  - bases are interfaces or classes\n        //  - declarations agree in generic parameters \n        private typeCheckInterface(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var interfaceAST = <InterfaceDeclaration>ast;\n            // resolving the interface also resolves its members...\n            var interfaceType = this.resolveSymbolAndReportDiagnostics(ast, /*inContextuallyTypedAssignment:*/false, typeCheckContext.getEnclosingDecl()).getType();\n            this.checkForResolutionError(interfaceType, typeCheckContext.getEnclosingDecl());\n\n            var interfaceDecl = typeCheckContext.semanticInfo.getDeclForAST(interfaceAST);\n            typeCheckContext.pushEnclosingDecl(interfaceDecl);\n\n            // Type check the type paramter list if any exists\n            this.typeCheckAST(interfaceAST.typeParameters, typeCheckContext, /*inContextuallyTypedAssignment*/ false);\n\n            this.typeCheckBases(<InterfaceDeclaration>ast, interfaceType, typeCheckContext);\n\n            // Type check the members\n            this.typeCheckAST(interfaceAST.members, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            typeCheckContext.popEnclosingDecl();\n\n            return interfaceType;\n        }\n\n        // Modules\n        // validate:\n        //  - No type parameters?\n        private typeCheckModule(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            // we resolve here because resolving a module *does not* resolve its MemberScopeContext\n            // PULLREVIEW: Perhaps it should?\n            var moduleDeclAST = <ModuleDeclaration>ast;\n            var moduleType = <PullTypeSymbol>this.resolveSymbolAndReportDiagnostics(ast, false, typeCheckContext.getEnclosingDecl());\n\n            this.checkForResolutionError(moduleType, typeCheckContext.getEnclosingDecl());\n\n            var moduleDecl = typeCheckContext.semanticInfo.getDeclForAST(moduleDeclAST);\n            typeCheckContext.pushEnclosingDecl(moduleDecl);\n\n            this.typeCheckAST(moduleDeclAST.members, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            this.validateVariableDeclarationGroups(moduleDecl, typeCheckContext);\n\n            typeCheckContext.popEnclosingDecl();\n\n            return moduleType;\n        }\n\n        private checkAssignability(ast: AST, source: PullTypeSymbol, target: PullTypeSymbol, typeCheckContext: PullTypeCheckContext): void {\n            var comparisonInfo = new TypeComparisonInfo();\n\n            var isAssignable = this.resolver.sourceIsAssignableToTarget(source, target, this.context, comparisonInfo);\n\n            if (!isAssignable) {\n                var enclosingDecl = typeCheckContext.getEnclosingDecl();\n                if (comparisonInfo.message) {\n                    this.postError(ast.minChar, ast.getLength(), typeCheckContext.scriptName, DiagnosticCode.Cannot_convert__0__to__1__NL__2, [source.toString(), target.toString(), comparisonInfo.message], enclosingDecl);\n                } else {\n                    this.postError(ast.minChar, ast.getLength(), typeCheckContext.scriptName, DiagnosticCode.Cannot_convert__0__to__1_, [source.toString(), target.toString()], enclosingDecl);\n                }\n            }\n        }\n\n        private isValidLHS(ast: AST, expressionSymbol: PullSymbol): boolean {\n            var expressionTypeSymbol = expressionSymbol.getType();\n\n            return ast.nodeType === NodeType.ElementAccessExpression ||\n                this.resolver.isAnyOrEquivalent(expressionTypeSymbol) ||\n                ((!expressionSymbol.isType() || expressionTypeSymbol.isArray()) &&\n                (expressionSymbol.getKind() & PullElementKind.SomeLHS) != 0);\n        }\n\n        // expressions\n\n        // Assignment\n        // validate:\n        //  - lhs and rhs types agree\n        //  - lhs is a valid value type\n        private typeCheckAssignment(binaryExpression: BinaryExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            this.typeCheckAST(binaryExpression.operand1, typeCheckContext, false);\n\n            var leftExpr = this.resolveSymbolAndReportDiagnostics(binaryExpression.operand1, /*inContextuallyTypedAssignment:*/false, typeCheckContext.getEnclosingDecl());\n            var leftType = leftExpr.getType();\n            this.checkForResolutionError(leftType, enclosingDecl);\n            leftType = this.resolver.widenType(leftExpr.getType()); //this.typeCheckAST(assignmentAST.operand1, typeCheckContext);\n\n            this.context.pushContextualType(leftType, this.context.inProvisionalResolution(), null);\n            var rightType = this.resolver.widenType(this.typeCheckAST(binaryExpression.operand2, typeCheckContext, true));\n            this.context.popContextualType();\n\n            // Check if LHS is a valid target\n            if (!this.isValidLHS(binaryExpression.operand1, leftExpr)) {\n                this.postError(binaryExpression.operand1.minChar, binaryExpression.operand1.getLength(), typeCheckContext.scriptName, DiagnosticCode.Invalid_left_hand_side_of_assignment_expression, null, enclosingDecl);\n            }\n\n            this.checkAssignability(binaryExpression.operand1, rightType, leftType, typeCheckContext);\n            return rightType;\n        }\n\n        // Generic Type references\n        // validate:\n        //\n        private typeCheckGenericType(genericType: GenericType, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            // validate:\n            //  - mutually recursive type parameters and constraints\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var type = this.resolveSymbolAndReportDiagnostics(genericType, /*inContextuallyTypedAssignment*/false, enclosingDecl).getType();\n\n\n            var savedResolvingTypeReference = this.context.resolvingTypeReference;\n            this.context.resolvingTypeReference = true;\n            this.typeCheckAST(genericType.name, typeCheckContext, /*inContextuallyTypedAssignment*/false);\n            this.context.resolvingTypeReference = savedResolvingTypeReference;\n\n            this.typeCheckAST(genericType.typeArguments, typeCheckContext, /*inContextuallyTypedAssignment*/false);\n            this.checkForResolutionError(type, enclosingDecl);\n\n            return type;\n        }\n\n        // Object literals\n        // validate:\n        //\n        private typeCheckObjectLiteral(ast: AST, typeCheckContext: PullTypeCheckContext, inContextuallyTypedAssignment): PullTypeSymbol {\n            var objectLitAST = <UnaryExpression>ast;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            // PULLTODO: We\'re really resolving these expressions twice - need a better way...\n            var objectLitType = this.resolveSymbolAndReportDiagnostics(ast, inContextuallyTypedAssignment, enclosingDecl).getType();\n            var memberDecls = <ASTList>objectLitAST.operand;\n\n            var contextualType = this.context.getContextualType();\n            var memberType: PullTypeSymbol;\n\n\n            // PULLTODO: Contextually type the members\n            if (memberDecls) {\n                var member: PullSymbol = null;\n\n                for (var i = 0; i < memberDecls.members.length; i++) {\n                    var binex = <BinaryExpression>memberDecls.members[i];\n\n                    if (contextualType) {\n                        var text: string;\n                        if (binex.operand1.nodeType === NodeType.Name) {\n                            text = (<Identifier>binex.operand1).text;\n                        }\n                        else if (binex.operand1.nodeType === NodeType.StringLiteral) {\n                            text = (<StringLiteral>binex.operand1).text;\n                        }\n\n                        member = contextualType.findMember(text);\n\n                        if (member) {\n                            this.context.pushContextualType(member.getType(), this.context.inProvisionalResolution(), null);\n                        }\n                    }\n\n                    this.typeCheckAST(binex.operand2, typeCheckContext, member != null);\n\n                    if (member) {\n                        this.context.popContextualType();\n                        member = null;\n                    }\n                }\n            }\n\n            this.checkForResolutionError(objectLitType, enclosingDecl);\n\n            return objectLitType;\n        }\n\n        // Array literals\n        // validate:\n        //  - incompatible types in expression\n        private typeCheckArrayLiteral(ast: AST, typeCheckContext: PullTypeCheckContext, inContextuallyTypedAssignment): PullTypeSymbol {\n            var arrayLiteralAST = <UnaryExpression>ast;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            // PULLTODO: We\'re really resolving these expressions twice - need a better way...\n            var type = this.resolveSymbolAndReportDiagnostics(ast, inContextuallyTypedAssignment, enclosingDecl).getType();\n            var memberASTs = <ASTList>arrayLiteralAST.operand;\n\n            // Find the contextual member type\n            var contextualType = this.context.getContextualType();\n            var contextualMemberType: PullTypeSymbol = null;\n            if (contextualType && contextualType.isArray()) {\n                contextualMemberType = contextualType.getElementType();\n            }\n\n            if (memberASTs && memberASTs.members && memberASTs.members.length) {\n                var elementTypes: PullTypeSymbol[] = [];\n\n                if (contextualMemberType) {\n                    this.context.pushContextualType(contextualMemberType, this.context.inProvisionalResolution(), null);\n                }\n\n                for (var i = 0; i < memberASTs.members.length; i++) {\n                    elementTypes[elementTypes.length] = this.typeCheckAST(memberASTs.members[i], typeCheckContext, /*inContextuallyTypedAssignment*/ false);\n                }\n\n                if (contextualMemberType) {\n                    this.context.popContextualType();\n\n                    // Check if all array members match the contextual Type\n                    var collection: IPullTypeCollection = {\n                        getLength: () => { return elementTypes.length; } ,\n                        setTypeAtIndex: (index: number, type: PullTypeSymbol) => { elementTypes[index] = type; } ,\n                        getTypeAtIndex: (index: number) => { return elementTypes[index]; }\n                    };\n\n                    var comparisonInfo = new TypeScript.TypeComparisonInfo();\n                    var elementType = this.resolver.findBestCommonType(elementTypes[0], contextualMemberType, collection, this.context, comparisonInfo);\n                    if (!elementType) {\n                        this.postError(ast.minChar, ast.getLength(), typeCheckContext.scriptName, DiagnosticCode.Type_of_array_literal_cannot_be_determined__Best_common_type_could_not_be_found_for_array_elements, null, enclosingDecl);\n                    }\n                }\n            }\n\n            this.checkForResolutionError(type, enclosingDecl);\n\n            return type;\n        }\n\n        private enclosingClassIsDerived(typeCheckContext: PullTypeCheckContext): boolean {\n            var enclosingClass = typeCheckContext.getEnclosingDecl(PullElementKind.Class);\n\n            if (enclosingClass) {\n                var classSymbol = <PullClassTypeSymbol>enclosingClass.getSymbol();\n                if (classSymbol.getExtendedTypes().length > 0) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private isSuperCallNode(node: AST): boolean {\n            if (node && node.nodeType === NodeType.ExpressionStatement) {\n                var expressionStatement = <ExpressionStatement>node;\n                if (expressionStatement.expression && expressionStatement.expression.nodeType === NodeType.InvocationExpression) {\n                    var callExpression = <CallExpression>expressionStatement.expression;\n                    if (callExpression.target && callExpression.target.nodeType === NodeType.SuperExpression) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        private getFirstStatementFromFunctionDeclAST(funcDeclAST: FunctionDeclaration): AST {\n            if (funcDeclAST.block && funcDeclAST.block.statements && funcDeclAST.block.statements.members) {\n                return funcDeclAST.block.statements.members[0];\n            }\n\n            return null;\n        }\n\n        private superCallMustBeFirstStatementInConstructor(enclosingConstructor: PullDecl, enclosingClass: PullDecl): boolean {\n            /*\n            The first statement in the body of a constructor must be a super call if both of the following are true:\n                •     The containing class is a derived class.\n                •     The constructor declares parameter properties or the containing class declares instance member variables with initializers.\n            In such a required super call, it is a compile-time error for argument expressions to reference this.\n            */\n            if (enclosingConstructor && enclosingClass) {\n                var classSymbol = <PullClassTypeSymbol>enclosingClass.getSymbol();\n                if (classSymbol.getExtendedTypes().length === 0) {\n                    return false;\n                }\n\n                var classMembers = classSymbol.getMembers();\n                for (var i = 0, n1 = classMembers.length; i < n1; i++) {\n                    var member = classMembers[i];\n\n                    if (member.getKind() === PullElementKind.Property) {\n                        var declarations = member.getDeclarations();\n                        for (var j = 0, n2 = declarations.length; j < n2; j++) {\n                            var declaration = declarations[j];\n                            var ast = this.semanticInfoChain.getASTForDecl(declaration);\n                            if (ast.nodeType === NodeType.Parameter) {\n                                return true;\n                            }\n\n                            if (ast.nodeType === NodeType.VariableDeclarator) {\n                                var variableDeclarator = <VariableDeclarator>ast;\n                                if (variableDeclarator.init) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        private checkForThisCaptureInArrowFunction(thisExpressionAST: ThisExpression, typeCheckContext: PullTypeCheckContext): void {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var declPath: PullDecl[] = typeCheckContext.enclosingDeclStack;\n\n            // work back up the decl path, until you can find a class\n            // PULLTODO: Obviously not completely correct, but this sufficiently unblocks testing of the pull model\n            if (declPath.length) {\n                var inFatArrow = false;\n                for (var i = declPath.length - 1; i >= 0; i--) {\n                    var decl = declPath[i];\n                    var declKind = decl.getKind();\n                    var declFlags = decl.getFlags();\n\n                    if (declKind === PullElementKind.FunctionExpression &&\n                        hasFlag(declFlags, PullElementFlags.FatArrow)) {\n\n                        inFatArrow = true;\n                        continue;\n                    }\n\n                    if (inFatArrow) {\n                        if (declKind === PullElementKind.Function ||\n                            declKind === PullElementKind.Method ||\n                            declKind === PullElementKind.ConstructorMethod ||\n                            declKind === PullElementKind.GetAccessor ||\n                            declKind === PullElementKind.SetAccessor ||\n                            declKind === PullElementKind.FunctionExpression ||\n                            declKind === PullElementKind.Class ||\n                            declKind === PullElementKind.Container ||\n                            declKind === PullElementKind.DynamicModule ||\n                            declKind === PullElementKind.Script) {\n\n                            decl.setFlags(decl.getFlags() | PullElementFlags.MustCaptureThis);\n\n                            // If we\'re accessing \'this\' in a class, then the class constructor \n                            // needs to be marked as capturing \'this\'.\n                            if (declKind === PullElementKind.Class) {\n                                decl.getChildDecls().filter(d => d.getKind() === PullElementKind.ConstructorMethod)\n                                    .map(d => d.setFlags(d.getFlags() | PullElementFlags.MustCaptureThis));\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        // \'This\' expressions \n        // validate:\n        //\n        private typeCheckThisExpression(thisExpressionAST: ThisExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var enclosingNonLambdaDecl = typeCheckContext.getEnclosingNonLambdaDecl();\n\n            if (typeCheckContext.inSuperConstructorCall &&\n                this.superCallMustBeFirstStatementInConstructor(typeCheckContext.getEnclosingDecl(PullElementKind.ConstructorMethod), typeCheckContext.getEnclosingDecl(PullElementKind.Class))) {\n\n                this.postError(thisExpressionAST.minChar, thisExpressionAST.getLength(), typeCheckContext.scriptName, DiagnosticCode._this__cannot_be_referenced_in_current_location, null, enclosingDecl);\n            }\n            else if (enclosingNonLambdaDecl) {\n                if (enclosingNonLambdaDecl.getKind() === PullElementKind.Class) {\n                    this.postError(thisExpressionAST.minChar, thisExpressionAST.getLength(), typeCheckContext.scriptName, DiagnosticCode._this__cannot_be_referenced_in_initializers_in_a_class_body, null, enclosingDecl);\n                }\n                else if (enclosingNonLambdaDecl.getKind() === PullElementKind.Container || enclosingNonLambdaDecl.getKind() === PullElementKind.DynamicModule) {\n                    this.postError(thisExpressionAST.minChar, thisExpressionAST.getLength(), typeCheckContext.scriptName, DiagnosticCode._this__cannot_be_referenced_within_module_bodies, null, enclosingDecl);\n                }\n                else if (typeCheckContext.inConstructorArguments) {\n                    this.postError(thisExpressionAST.minChar, thisExpressionAST.getLength(), typeCheckContext.scriptName, DiagnosticCode._this__cannot_be_referenced_in_constructor_arguments, null, enclosingDecl);\n                }\n            }\n\n            this.checkForThisCaptureInArrowFunction(thisExpressionAST, typeCheckContext);\n\n            var type = this.resolveSymbolAndReportDiagnostics(thisExpressionAST, /*inContextuallyTypedAssignment:*/false, enclosingDecl).getType();\n            this.checkForResolutionError(type, enclosingDecl);\n            return type;\n        }\n\n        // \'Super\' expressions \n        // validate:\n        //\n        private typeCheckSuper(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var nonLambdaEnclosingDecl = typeCheckContext.getEnclosingNonLambdaDecl();\n            var nonLambdaEnclosingDeclKind = nonLambdaEnclosingDecl.getKind();\n            var inSuperConstructorTarget = typeCheckContext.inSuperConstructorTarget;\n\n            var type = this.resolveSymbolAndReportDiagnostics(ast, /*inContextuallyTypedAssignment:*/ false, enclosingDecl).getType();\n\n            // Super calls are not permitted outside constructors or in local functions inside constructors.\n            if (inSuperConstructorTarget && enclosingDecl.getKind() !== PullElementKind.ConstructorMethod) {\n                this.postError(ast.minChar, ast.getLength(), typeCheckContext.scriptName, DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_local_functions_inside_constructors, null, enclosingDecl);\n            }\n            // A super property access is permitted only in a constructor, instance member function, or instance member accessor\n            else if ((nonLambdaEnclosingDeclKind !== PullElementKind.Method && nonLambdaEnclosingDeclKind !== PullElementKind.GetAccessor && nonLambdaEnclosingDeclKind !== PullElementKind.SetAccessor && nonLambdaEnclosingDeclKind !== PullElementKind.ConstructorMethod) ||\n                ((nonLambdaEnclosingDecl.getFlags() & PullElementFlags.Static) !== 0)) {\n                this.postError(ast.minChar, ast.getLength(), typeCheckContext.scriptName, DiagnosticCode._super__property_access_is_permitted_only_in_a_constructor__instance_member_function__or_instance_member_accessor_of_a_derived_class, null, enclosingDecl);\n            }\n            // A super is permitted only in a derived class \n            else if (!this.enclosingClassIsDerived(typeCheckContext)) {\n                this.postError(ast.minChar, ast.getLength(), typeCheckContext.scriptName, DiagnosticCode._super__cannot_be_referenced_in_non_derived_classes, null, enclosingDecl);\n            }\n\n            this.checkForResolutionError(type, enclosingDecl);\n            return type;\n        }\n\n        // Call expressions \n        // validate:\n        //\n        private typeCheckCallExpression(callExpression: CallExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            // \"use of new expression as a statement\"\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var inSuperConstructorCall = (callExpression.target.nodeType === NodeType.SuperExpression);\n\n            var callResolutionData = new PullAdditionalCallResolutionData();\n            var resultTypeAndDiagnostics = this.resolver.resolveCallExpression(callExpression, false, enclosingDecl, this.context, callResolutionData);\n            this.reportDiagnostics(resultTypeAndDiagnostics, enclosingDecl);\n            var resultType = resultTypeAndDiagnostics.symbol.getType();\n\n            // Type check the type arguments\n            this.typeCheckAST(callExpression.typeArguments, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            // Type check the target\n            if (!resultType.isError()) {\n                var savedInSuperConstructorTarget = typeCheckContext.inSuperConstructorTarget;\n                if (inSuperConstructorCall) {\n                    typeCheckContext.inSuperConstructorTarget = true;\n                }\n\n                this.typeCheckAST(callExpression.target, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n                typeCheckContext.inSuperConstructorTarget = savedInSuperConstructorTarget;\n            }\n\n            if (inSuperConstructorCall && enclosingDecl.getKind() === PullElementKind.ConstructorMethod) {\n                typeCheckContext.seenSuperConstructorCall = true;\n            }\n\n            // Type check the arguments\n            var savedInSuperConstructorCall = typeCheckContext.inSuperConstructorCall;\n            if (inSuperConstructorCall) {\n                typeCheckContext.inSuperConstructorCall = true;\n            }\n\n            // Apply contextual typing\n            var contextTypes = callResolutionData.actualParametersContextTypeSymbols;\n            if (callExpression.arguments) {\n                var argumentASTs = callExpression.arguments.members;\n                for (var i = 0, n = argumentASTs.length; i < n; i++) {\n                    var argumentAST = argumentASTs[i];\n\n                    if (contextTypes && contextTypes[i]) {\n                        this.context.pushContextualType(contextTypes[i], this.context.inProvisionalResolution(), null);\n                    }\n\n                    this.typeCheckAST(argumentAST, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n                    if (contextTypes && contextTypes[i]) {\n                        this.context.popContextualType();\n                    }\n                }\n            }\n\n            typeCheckContext.inSuperConstructorCall = savedInSuperConstructorCall;\n\n            return resultType;\n        }\n\n        // \'New\' expressions \n        // validate:\n        //\n        private typeCheckObjectCreationExpression(callExpression: CallExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var callResolutionData = new PullAdditionalCallResolutionData();\n            var resultType = this.resolver.resolveNewExpression(callExpression, false, enclosingDecl, this.context, callResolutionData).symbol.getType();\n\n            this.checkForResolutionError(resultType, enclosingDecl);\n\n            this.typeCheckAST(callExpression.target, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(callExpression.typeArguments, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            // Type check the type arguments\n            this.typeCheckAST(callExpression.typeArguments, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            // Type check the arguments\n            var contextTypes = callResolutionData.actualParametersContextTypeSymbols;\n            if (callExpression.arguments) {\n                var argumentASTs = callExpression.arguments.members;\n                for (var i = 0, n = argumentASTs.length; i < n; i++) {\n                    var argumentAST = argumentASTs[i];\n\n                    if (contextTypes && contextTypes[i]) {\n                        this.context.pushContextualType(contextTypes[i], this.context.inProvisionalResolution(), null);\n                    }\n\n                    this.typeCheckAST(argumentAST, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n                    if (contextTypes && contextTypes[i]) {\n                        this.context.popContextualType();\n                    }\n                }\n            }\n\n            return resultType;\n        }\n\n        // Type assertion expressions \n        // validate:\n        //  - the type assertion and the expression it\'s applied to are assignment compatible\n        private typeCheckTypeAssertion(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var returnType = this.resolveSymbolAndReportDiagnostics(ast, /*inContextuallyTypedAssignment:*/false, enclosingDecl).getType();\n\n            this.checkForResolutionError(returnType, enclosingDecl);\n\n            this.context.pushContextualType(returnType, this.context.inProvisionalResolution(), null);\n            var exprType = this.typeCheckAST((<UnaryExpression>ast).operand, typeCheckContext, true);\n            this.context.popContextualType();\n\n            var comparisonInfo = new TypeComparisonInfo();\n            var isAssignable = this.resolver.sourceIsAssignableToTarget(returnType, exprType, this.context, comparisonInfo) ||\n                this.resolver.sourceIsAssignableToTarget(exprType, returnType, this.context, comparisonInfo);\n\n            if (!isAssignable) {\n                var message: string;\n                if (comparisonInfo.message) {\n                    this.postError(ast.minChar, ast.getLength(), typeCheckContext.scriptName, DiagnosticCode.Cannot_convert__0__to__1__NL__2, [exprType.toString(), returnType.toString(), comparisonInfo.message], typeCheckContext.getEnclosingDecl());\n                } else {\n                    this.postError(ast.minChar, ast.getLength(), typeCheckContext.scriptName, DiagnosticCode.Cannot_convert__0__to__1_, [exprType.toString(), returnType.toString()], typeCheckContext.getEnclosingDecl());\n                }\n            }\n\n            return returnType;\n        }\n\n        // Logical operations\n        // validate:\n        //  - lhs and rhs are compatible\n        private typeCheckLogicalOperation(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var binex = <BinaryExpression>ast;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            \n            var type = this.resolveSymbolAndReportDiagnostics(ast, /*inContextuallyTypedAssignment:*/false, typeCheckContext.getEnclosingDecl()).getType();\n\n            this.checkForResolutionError(type, enclosingDecl);\n\n            var leftType = this.typeCheckAST(binex.operand1, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            var rightType = this.typeCheckAST(binex.operand2, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            var comparisonInfo = new TypeComparisonInfo();\n            if (!this.resolver.sourceIsAssignableToTarget(leftType, rightType, this.context, comparisonInfo) &&\n                !this.resolver.sourceIsAssignableToTarget(rightType, leftType, this.context, comparisonInfo)) {\n\n                this.postError(ast.minChar, ast.getLength(), typeCheckContext.scriptName,DiagnosticCode.Operator__0__cannot_be_applied_to_types__1__and__2_, [BinaryExpression.getTextForBinaryToken(binex.nodeType), leftType.toString(), rightType.toString()], enclosingDecl);\n            }\n            return type;\n        }\n\n        // Logical \'And\' and \'Or\' expressions \n        // validate:\n        // - lhs and rhs are compatible\n        private typeCheckLogicalAndOrExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var binex = <BinaryExpression>ast;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var type = this.resolveSymbolAndReportDiagnostics(ast, /*inContextuallyTypedAssignment:*/false, enclosingDecl).getType();\n\n            this.checkForResolutionError(type, enclosingDecl);\n\n            this.typeCheckAST(binex.operand1, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(binex.operand2, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return type;\n        }\n\n\n        private typeCheckCommaExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var binex = <BinaryExpression>ast;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var type = this.resolveSymbolAndReportDiagnostics(ast, /*inContextuallyTypedAssignment:*/false, enclosingDecl).getType();\n\n            this.checkForResolutionError(type, enclosingDecl);\n\n            this.typeCheckAST(binex.operand1, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(binex.operand2, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return type;\n        }\n\n        private typeCheckBinaryAdditionOperation(binaryExpression: BinaryExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var type = this.resolveSymbolAndReportDiagnostics(binaryExpression, /*inContextuallyTypedAssignment:*/ false, enclosingDecl).getType();\n\n            this.checkForResolutionError(type, enclosingDecl);\n\n            var lhsType = this.typeCheckAST(binaryExpression.operand1, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            var rhsType = this.typeCheckAST(binaryExpression.operand2, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            if (PullHelpers.symbolIsEnum(lhsType)) {\n                lhsType = this.semanticInfoChain.numberTypeSymbol;\n            }\n            else if (lhsType === this.semanticInfoChain.nullTypeSymbol || lhsType === this.semanticInfoChain.undefinedTypeSymbol) {\n                if (rhsType != this.semanticInfoChain.nullTypeSymbol && rhsType != this.semanticInfoChain.undefinedTypeSymbol) {\n                    lhsType = rhsType;\n                }\n                else {\n                    lhsType = this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n\n            if (PullHelpers.symbolIsEnum(rhsType)) {\n                rhsType = this.semanticInfoChain.numberTypeSymbol;\n            }\n            else if (rhsType === this.semanticInfoChain.nullTypeSymbol || rhsType === this.semanticInfoChain.undefinedTypeSymbol) {\n                if (lhsType != this.semanticInfoChain.nullTypeSymbol && lhsType != this.semanticInfoChain.undefinedTypeSymbol) {\n                    rhsType = lhsType;\n                }\n                else {\n                    rhsType = this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n\n            var exprType: PullTypeSymbol = null;\n\n            if (lhsType === this.semanticInfoChain.stringTypeSymbol || rhsType === this.semanticInfoChain.stringTypeSymbol) {\n                exprType = this.semanticInfoChain.stringTypeSymbol;\n            }\n            else if (this.resolver.isAnyOrEquivalent(lhsType) || this.resolver.isAnyOrEquivalent(rhsType)) {\n                exprType = this.semanticInfoChain.anyTypeSymbol;\n            }\n            else if (rhsType === this.semanticInfoChain.numberTypeSymbol && lhsType === this.semanticInfoChain.numberTypeSymbol) {\n                exprType = this.semanticInfoChain.numberTypeSymbol;\n            }\n\n            if (exprType) {\n                if (binaryExpression.nodeType === NodeType.AddAssignmentExpression) {\n                    // Check if LHS is a valid target\n                    var lhsExpression = this.resolveSymbolAndReportDiagnostics(binaryExpression.operand1, /*inContextuallyTypedAssignment:*/false, typeCheckContext.getEnclosingDecl());\n                    if (!this.isValidLHS(binaryExpression.operand1, lhsExpression)) {\n                        this.postError(binaryExpression.operand1.minChar, binaryExpression.operand1.getLength(), typeCheckContext.scriptName, DiagnosticCode.Invalid_left_hand_side_of_assignment_expression, null, enclosingDecl);\n                    }\n\n                    this.checkAssignability(binaryExpression.operand1, exprType, lhsType, typeCheckContext);\n                }\n            }\n            else {\n                this.postError(binaryExpression.operand1.minChar, binaryExpression.operand1.getLength(), typeCheckContext.scriptName, DiagnosticCode.Invalid__addition__expression___types_do_not_agree, null, typeCheckContext.getEnclosingDecl());\n                exprType = this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            return exprType;\n        }\n\n        // Binary arithmetic expressions \n        // validate:\n        //  - lhs and rhs are compatible\n        private typeCheckBinaryArithmeticOperation(binaryExpression: BinaryExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var type = this.resolveSymbolAndReportDiagnostics(binaryExpression, /*inContextuallyTypedAssignment:*/false, enclosingDecl).getType();\n            this.checkForResolutionError(type, enclosingDecl);\n\n            var lhsType = this.typeCheckAST(binaryExpression.operand1, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            var rhsType = this.typeCheckAST(binaryExpression.operand2, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            var lhsIsFit = this.resolver.isAnyOrEquivalent(lhsType) || lhsType === this.semanticInfoChain.numberTypeSymbol || PullHelpers.symbolIsEnum(lhsType);\n            var rhsIsFit = this.resolver.isAnyOrEquivalent(rhsType) || rhsType === this.semanticInfoChain.numberTypeSymbol || PullHelpers.symbolIsEnum(rhsType);\n\n            if (!rhsIsFit) {\n                this.postError(binaryExpression.operand1.minChar, binaryExpression.operand1.getLength(), typeCheckContext.scriptName, DiagnosticCode.The_right_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type, null, typeCheckContext.getEnclosingDecl());\n            }\n\n            if (!lhsIsFit) {\n                this.postError(binaryExpression.operand2.minChar, binaryExpression.operand2.getLength(), typeCheckContext.scriptName, DiagnosticCode.The_left_hand_side_of_an_arithmetic_operation_must_be_of_type__any____number__or_an_enum_type, null, typeCheckContext.getEnclosingDecl());\n            }\n\n            // If we havne\'t already reported an error, then check for assignment compatibility.\n            if (rhsIsFit && lhsIsFit) {\n                switch (binaryExpression.nodeType) {\n                    case NodeType.LeftShiftAssignmentExpression:\n                    case NodeType.SignedRightShiftAssignmentExpression:\n                    case NodeType.UnsignedRightShiftAssignmentExpression:\n                    case NodeType.SubtractAssignmentExpression:\n                    case NodeType.MultiplyAssignmentExpression:\n                    case NodeType.DivideAssignmentExpression:\n                    case NodeType.ModuloAssignmentExpression:\n                    case NodeType.OrAssignmentExpression:\n                    case NodeType.AndAssignmentExpression:\n                    case NodeType.ExclusiveOrAssignmentExpression:\n                        // Check if LHS is a valid target\n                        var lhsExpression = this.resolveSymbolAndReportDiagnostics(binaryExpression.operand1, /*inContextuallyTypedAssignment:*/false, typeCheckContext.getEnclosingDecl());\n                        if (!this.isValidLHS(binaryExpression.operand1, lhsExpression)) {\n                            this.postError(binaryExpression.operand1.minChar, binaryExpression.operand1.getLength(), typeCheckContext.scriptName, DiagnosticCode.Invalid_left_hand_side_of_assignment_expression, null, enclosingDecl);\n                        }\n\n                        this.checkAssignability(binaryExpression.operand1, rhsType, lhsType, typeCheckContext);\n                        break;\n                }\n            }\n\n            return this.semanticInfoChain.numberTypeSymbol;\n        }\n\n        private typeCheckLogicalNotExpression(unaryExpression: UnaryExpression, typeCheckContext: PullTypeCheckContext, inContextuallyTypedAssignment: boolean): PullTypeSymbol {\n            this.typeCheckAST(unaryExpression.operand, typeCheckContext, inContextuallyTypedAssignment);\n            return this.semanticInfoChain.booleanTypeSymbol;\n        }\n\n        // Unary arithmetic expressions \n        // validate:\n        //  -\n        private typeCheckUnaryArithmeticOperation(unaryExpression: UnaryExpression, typeCheckContext: PullTypeCheckContext, inContextuallyTypedAssignment: boolean): PullTypeSymbol {\n            var operandType = this.typeCheckAST(unaryExpression.operand, typeCheckContext, inContextuallyTypedAssignment);\n\n            switch (unaryExpression.nodeType) {\n                case NodeType.PlusExpression:\n                case NodeType.NegateExpression:\n                case NodeType.BitwiseNotExpression:\n                    return this.semanticInfoChain.numberTypeSymbol;\n            }\n\n            var operandIsFit = this.resolver.isAnyOrEquivalent(operandType) || operandType === this.semanticInfoChain.numberTypeSymbol || PullHelpers.symbolIsEnum(operandType);\n\n            if (!operandIsFit) {\n                this.postError(unaryExpression.operand.minChar, unaryExpression.operand.getLength(), typeCheckContext.scriptName, DiagnosticCode.The_type_of_a_unary_arithmetic_operation_operand_must_be_of_type__any____number__or_an_enum_type, null, typeCheckContext.getEnclosingDecl());\n            }\n\n            switch (unaryExpression.nodeType) {\n                case NodeType.PostIncrementExpression:\n                case NodeType.PreIncrementExpression:\n                case NodeType.PostDecrementExpression:\n                case NodeType.PreDecrementExpression:\n                    // Check that operand is classified as a reference \n                    var expression = this.resolveSymbolAndReportDiagnostics(unaryExpression.operand, /*inContextuallyTypedAssignment:*/false, typeCheckContext.getEnclosingDecl());\n                    if (!this.isValidLHS(unaryExpression.operand, expression)) {\n                        this.postError(unaryExpression.operand.minChar, unaryExpression.operand.getLength(), typeCheckContext.scriptName, DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable__property_or_indexer, null, typeCheckContext.getEnclosingDecl());\n                    }\n\n                    break;\n            }\n\n            return operandType;\n        }\n\n        // Index expression \n        // validate:\n        //  -\n        private typeCheckElementAccessExpression(binaryExpression: BinaryExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(binaryExpression.operand1, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(binaryExpression.operand2, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            var type = this.resolveSymbolAndReportDiagnostics(binaryExpression, /*inContextuallyTypedAssignment:*/false, typeCheckContext.getEnclosingDecl()).getType();\n            this.checkForResolutionError(type, typeCheckContext.getEnclosingDecl());\n            return type;\n        }\n\n        // \'typeof\' expression \n        // validate:\n        //  -\n        private typeCheckTypeOf(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST((<UnaryExpression>ast).operand, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.semanticInfoChain.stringTypeSymbol;\n        }\n\n        // Type reference expression\n        // validate:\n        //  -\n        private typeCheckTypeReference(typeRef: TypeReference, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            // the type reference can be\n            // a name\n            // a function\n            // an interface\n            // a dotted name\n            // an array of any of the above\n\n            // Make sure we report errors for the the object type and function type\n            // a function\n            if (typeRef.term.nodeType === NodeType.FunctionDeclaration) {\n                this.typeCheckFunctionTypeSignature(<FunctionDeclaration>typeRef.term, typeCheckContext.getEnclosingDecl(), typeCheckContext);\n            }\n            // an interface\n            else if (typeRef.term.nodeType === NodeType.InterfaceDeclaration) {\n                this.typeCheckInterfaceTypeReference(<NamedDeclaration>typeRef.term, typeCheckContext.getEnclosingDecl(), typeCheckContext);\n            }\n            else {\n                var savedResolvingTypeReference = this.context.resolvingTypeReference;\n                this.context.resolvingTypeReference = true;\n                this.typeCheckAST(typeRef.term, typeCheckContext, /*inContextuallyTypedAssignment*/ false);\n                this.context.resolvingTypeReference = savedResolvingTypeReference;\n            }\n\n            return this.resolveSymbolAndReportDiagnostics(typeRef, /*inContextuallyTypedAssignment:*/false, typeCheckContext.getEnclosingDecl()).getType();\n        }\n\n        \n        private typeCheckExportAssignment(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var exportSymbol = this.resolver.resolveAST(ast, false, typeCheckContext.getEnclosingDecl(), this.context);\n\n            return exportSymbol.symbol.getType();\n        }\n\n        private typeCheckFunctionTypeSignature(funcDeclAST: FunctionDeclaration, enclosingDecl: PullDecl, typeCheckContext: PullTypeCheckContext) {\n            var funcDeclSymbolAndDiagnostics = this.resolver.getSymbolAndDiagnosticsForAST(funcDeclAST);\n            var funcDeclSymbol = funcDeclSymbolAndDiagnostics && <PullFunctionTypeSymbol>funcDeclSymbolAndDiagnostics.symbol;\n            if (!funcDeclSymbol) {\n                funcDeclSymbol = <PullFunctionTypeSymbol>this.resolver.resolveFunctionTypeSignature(<FunctionDeclaration>funcDeclAST, enclosingDecl, this.context);\n            }\n            var functionDecl = typeCheckContext.semanticInfo.getDeclForAST(funcDeclAST);\n\n            typeCheckContext.pushEnclosingDecl(functionDecl);\n            this.typeCheckAST(funcDeclAST.arguments, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            typeCheckContext.popEnclosingDecl();\n\n            var functionSignature = funcDeclSymbol.getKind() === PullElementKind.ConstructorType ? funcDeclSymbol.getConstructSignatures()[0] : funcDeclSymbol.getCallSignatures()[0];\n            var parameters = functionSignature.getParameters();\n            for (var i = 0; i < parameters.length; i++) {\n                this.checkForResolutionError(parameters[i].getType(), enclosingDecl);\n            }\n\n            if (funcDeclAST.returnTypeAnnotation) {\n                var returnType = functionSignature.getReturnType();\n                this.checkForResolutionError(returnType, enclosingDecl);\n            }\n\n            this.typeCheckFunctionOverloads(funcDeclAST, typeCheckContext, functionSignature, [functionSignature]);\n            return funcDeclSymbol;\n        }\n\n        private typeCheckInterfaceTypeReference(interfaceAST: NamedDeclaration, enclosingDecl: PullDecl, typeCheckContext: PullTypeCheckContext) {\n            var interfaceSymbolAndDiagnostics = this.resolver.getSymbolAndDiagnosticsForAST(interfaceAST);\n            var interfaceSymbol = interfaceSymbolAndDiagnostics && <PullTypeSymbol>interfaceSymbolAndDiagnostics.symbol;\n            if (!interfaceSymbol) {\n                interfaceSymbol = this.resolver.resolveInterfaceTypeReference(interfaceAST, enclosingDecl, this.context);\n            }\n\n            var interfaceDecl = typeCheckContext.semanticInfo.getDeclForAST(interfaceAST);\n            typeCheckContext.pushEnclosingDecl(interfaceDecl);\n            this.typeCheckAST(interfaceAST.members, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            typeCheckContext.popEnclosingDecl();\n\n            return interfaceSymbol;\n        }\n\n        // Conditional expressions\n        // validate:\n        //  -\n        private typeCheckConditionalExpression(conditionalExpression: ConditionalExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(conditionalExpression.operand1, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(conditionalExpression.operand2, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(conditionalExpression.operand3, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.resolveSymbolAndReportDiagnostics(conditionalExpression, /*inContextuallyTypedAssignment:*/ false, typeCheckContext.getEnclosingDecl()).getType();\n        }\n\n        // new expression types\n        private typeCheckThrowStatement(throwStatement: ThrowStatement, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(throwStatement.expression, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            var type = this.resolveSymbolAndReportDiagnostics(throwStatement.expression, /*inContextuallyTypedAssignment:*/ false, typeCheckContext.getEnclosingDecl()).getType();\n            this.checkForResolutionError(type, typeCheckContext.getEnclosingDecl());\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckDeleteExpression(unaryExpression: UnaryExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(unaryExpression.operand, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var type = this.resolveSymbolAndReportDiagnostics(unaryExpression, /*inContextuallyTypedAssignment:*/ false, enclosingDecl).getType();\n            this.checkForResolutionError(type, enclosingDecl);\n\n            return type;\n        }\n\n        private typeCheckVoidExpression(unaryExpression: UnaryExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(unaryExpression.operand, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var type = this.resolveSymbolAndReportDiagnostics(unaryExpression, /*inContextuallyTypedAssignment:*/ false, enclosingDecl).getType();\n            this.checkForResolutionError(type, enclosingDecl);\n\n            return type;\n        }\n\n        private typeCheckRegExpExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var type = this.resolveSymbolAndReportDiagnostics(ast, /*inContextuallyTypedAssignment:*/false, typeCheckContext.getEnclosingDecl()).getType();\n            this.checkForResolutionError(type, typeCheckContext.getEnclosingDecl());\n            return type;\n        }\n\n        // statements\n\n        private typeCheckForStatement(forStatement: ForStatement, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(forStatement.init, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(forStatement.cond, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(forStatement.body, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckForInStatement(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n\n            var forInStatement = <ForInStatement>ast;\n\n            var rhsType = this.resolver.widenType(this.typeCheckAST(forInStatement.obj, typeCheckContext, /*inContextuallyTypedAssignment:*/ false));\n            var lval = forInStatement.lval;\n\n            if (lval.nodeType === NodeType.VariableDeclaration) {\n                var declaration = <VariableDeclaration>forInStatement.lval;\n                var varDecl = <VariableDeclarator>declaration.declarators.members[0];\n\n                if (varDecl.typeExpr) {\n                    this.postError(lval.minChar, lval.getLength(), typeCheckContext.scriptName, DiagnosticCode.Variable_declarations_for_for_in_expressions_cannot_contain_a_type_annotation, null, typeCheckContext.getEnclosingDecl());\n                }\n            }\n\n            var varSym = this.resolveSymbolAndReportDiagnostics(forInStatement.lval, /*inContextuallyTypedAssignment:*/false, typeCheckContext.getEnclosingDecl());\n            this.checkForResolutionError(varSym.getType(), typeCheckContext.getEnclosingDecl());\n\n            var isStringOrNumber = varSym.getType() === this.semanticInfoChain.stringTypeSymbol || this.resolver.isAnyOrEquivalent(varSym.getType());\n\n            var isValidRHS = rhsType && (this.resolver.isAnyOrEquivalent(rhsType) || !rhsType.isPrimitive());\n\n            if (!isStringOrNumber) {\n                this.postError(lval.minChar, lval.getLength(), typeCheckContext.scriptName, DiagnosticCode.Variable_declarations_for_for_in_expressions_must_be_of_types__string__or__any_, null, typeCheckContext.getEnclosingDecl());\n            }\n\n            if (!isValidRHS) {\n                this.postError(forInStatement.obj.minChar, forInStatement.obj.getLength(), typeCheckContext.scriptName, DiagnosticCode.The_right_operand_of_a_for_in_expression_must_be_of_type__any____an_object_type_or_a_type_parameter, null, typeCheckContext.getEnclosingDecl());\n            }\n\n            this.typeCheckAST(forInStatement.body, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckInExpression(binaryExpression: BinaryExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var lhsType = this.resolver.widenType(this.typeCheckAST(binaryExpression.operand1, typeCheckContext, /*inContextuallyTypedAssignment:*/ false));\n            var rhsType = this.resolver.widenType(this.typeCheckAST(binaryExpression.operand2, typeCheckContext, /*inContextuallyTypedAssignment:*/ false));\n\n            var isStringAnyOrNumber = lhsType.getType() === this.semanticInfoChain.stringTypeSymbol ||\n                                        this.resolver.isAnyOrEquivalent(lhsType.getType()) ||\n                                        this.resolver.isNumberOrEquivalent(lhsType.getType());\n            var isValidRHS = rhsType && (this.resolver.isAnyOrEquivalent(rhsType) || !rhsType.isPrimitive());\n\n            if (!isStringAnyOrNumber) {\n                this.postError(binaryExpression.operand1.minChar, binaryExpression.operand1.getLength(), typeCheckContext.scriptName, DiagnosticCode.The_left_hand_side_of_an__in__expression_must_be_of_types__string__or__any_, null, typeCheckContext.getEnclosingDecl());\n            }\n\n            if (!isValidRHS) {\n\n                this.postError(binaryExpression.operand1.minChar, binaryExpression.operand1.getLength(), typeCheckContext.scriptName, DiagnosticCode.The_right_hand_side_of_an__in__expression_must_be_of_type__any___an_object_type_or_a_type_parameter, null, typeCheckContext.getEnclosingDecl());\n            }\n\n            return this.semanticInfoChain.booleanTypeSymbol;\n        }\n\n        private typeCheckInstanceOfExpression(binaryExpression: BinaryExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var lhsType = this.resolver.widenType(this.typeCheckAST(binaryExpression.operand1, typeCheckContext, /*inContextuallyTypedAssignment:*/ false));\n            var rhsType = this.typeCheckAST(binaryExpression.operand2, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            var isValidLHS = lhsType && (this.resolver.isAnyOrEquivalent(lhsType) || !lhsType.isPrimitive());\n            var isValidRHS = rhsType && (this.resolver.isAnyOrEquivalent(rhsType) || rhsType.isClass() || this.resolver.typeIsSubtypeOfFunction(rhsType, this.context))\n\n            if (!isValidLHS) {\n                this.postError(binaryExpression.operand1.minChar, binaryExpression.operand1.getLength(), typeCheckContext.scriptName, DiagnosticCode.The_left_hand_side_of_an__instanceOf__expression_must_be_of_type__any___an_object_type_or_a_type_parameter, null, typeCheckContext.getEnclosingDecl());\n            }\n\n            if (!isValidRHS) {\n                this.postError(binaryExpression.operand1.minChar, binaryExpression.operand1.getLength(), typeCheckContext.scriptName, DiagnosticCode.The_right_hand_side_of_an__instanceOf__expression_must_be_of_type__any__or_a_subtype_of_the__Function__interface_type, null, typeCheckContext.getEnclosingDecl());\n            }\n\n            return this.semanticInfoChain.booleanTypeSymbol;\n        }\n\n        private typeCheckParenthesizedExpression(parenthesizedExpression: ParenthesizedExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            return this.typeCheckAST(parenthesizedExpression.expression, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n        }\n\n        private typeCheckWhileStatement(whileStatement: WhileStatement, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(whileStatement.cond, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(whileStatement.body, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckDoStatement(doStatement: DoStatement, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(doStatement.cond, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(doStatement.body, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckIfStatement(ifStatement: IfStatement, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(ifStatement.cond, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(ifStatement.thenBod, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(ifStatement.elseBod, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckBlock(block: Block, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(block.statements, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckVariableDeclaration(variableDeclaration: VariableDeclaration, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(variableDeclaration.declarators, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckVariableStatement(variableStatement: VariableStatement, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(variableStatement.declaration, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckWithStatement(withStatement: WithStatement, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.postError(withStatement.expr.minChar, withStatement.expr.getLength(), typeCheckContext.scriptName, DiagnosticCode.All_symbols_within_a__with__block_will_be_resolved_to__any__, null, typeCheckContext.getEnclosingDecl());\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckTryStatement(tryStatement: TryStatement, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(tryStatement.tryBody, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(tryStatement.catchClause, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(tryStatement.finallyBody, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckCatchClause(catchClause: CatchClause, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var catchDecl = this.resolver.getDeclForAST(catchClause);\n\n            typeCheckContext.pushEnclosingDecl(catchDecl);\n            this.typeCheckAST(catchClause.body, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            typeCheckContext.popEnclosingDecl();\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckReturnStatement(returnAST: ReturnStatement, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            typeCheckContext.setEnclosingDeclHasReturn();\n            var returnExpr = returnAST.returnExpression;\n            var returnType = this.typeCheckAST(returnExpr, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            if (enclosingDecl.getKind() === PullElementKind.SetAccessor && returnExpr) {\n                this.postError(returnExpr.minChar, returnExpr.getLength(), typeCheckContext.scriptName, DiagnosticCode.Setters_cannot_return_a_value, null, typeCheckContext.getEnclosingDecl());\n            }\n\n            if (enclosingDecl.getKind() & PullElementKind.SomeFunction) {\n                var signatureSymbol = enclosingDecl.getSignatureSymbol();\n                var sigReturnType = signatureSymbol.getReturnType();\n\n                if (returnType && sigReturnType) {\n                    var comparisonInfo = new TypeComparisonInfo();\n                    var upperBound: PullTypeSymbol = null;\n\n                    if (returnType.isTypeParameter()) {\n                        upperBound = (<PullTypeParameterSymbol>returnType).getConstraint();\n\n                        if (upperBound) {\n                            returnType = upperBound;\n                        }\n                    }\n\n                    if (sigReturnType.isTypeParameter()) {\n                        upperBound = (<PullTypeParameterSymbol>sigReturnType).getConstraint();\n\n                        if (upperBound) {\n                            sigReturnType = upperBound;\n                        }\n                    }\n\n                    if (!returnType.isResolved()) {\n                        this.resolver.resolveDeclaredSymbol(returnType, enclosingDecl, this.context);\n                    }\n\n                    if (!sigReturnType.isResolved()) {\n                        this.resolver.resolveDeclaredSymbol(sigReturnType, enclosingDecl, this.context);\n                    }\n\n                    var isAssignable = this.resolver.sourceIsAssignableToTarget(returnType, sigReturnType, this.context, comparisonInfo);\n\n                    if (!isAssignable) {\n                        if (comparisonInfo.message) {\n                            this.postError(returnExpr.minChar, returnExpr.getLength(), typeCheckContext.scriptName, DiagnosticCode.Cannot_convert__0__to__1__NL__2, [returnType.toString(), sigReturnType.toString(), comparisonInfo.message], enclosingDecl);\n                        } else {\n                            this.postError(returnExpr.minChar, returnExpr.getLength(), typeCheckContext.scriptName, DiagnosticCode.Cannot_convert__0__to__1_, [returnType.toString(), sigReturnType.toString()], enclosingDecl);\n                        }\n                    }\n                }\n            }\n\n            return returnType;\n        }\n\n        private typeCheckNameExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var type = this.resolveSymbolAndReportDiagnostics(ast, /*inContextuallyTypedAssignment:*/false, enclosingDecl).getType();\n            this.checkForResolutionError(type, enclosingDecl);\n            return type;\n        }\n\n        private typeCheckMemberAccessExpression(memberAccessExpression: BinaryExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var resolvedName = this.resolveSymbolAndReportDiagnostics(memberAccessExpression, /*inContextuallyTypedAssignment:*/false, enclosingDecl);\n            var type = resolvedName.getType();\n\n            this.checkForResolutionError(type, enclosingDecl);\n            var prevCanUseTypeSymbol = this.context.canUseTypeSymbol;\n            this.context.canUseTypeSymbol = true;\n            var expressionType = this.typeCheckAST(memberAccessExpression.operand1, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.context.canUseTypeSymbol = prevCanUseTypeSymbol;\n            if (resolvedName && resolvedName.hasFlag(PullElementFlags.Private)) {\n                var memberContainer = resolvedName.getContainer();\n                if (memberContainer && memberContainer.getKind() === PullElementKind.ConstructorType) {\n                    memberContainer = memberContainer.getAssociatedContainerType();\n                }\n\n                if (memberContainer && memberContainer.isClass()) {\n                    // We\'re accessing a private member of a class.  We can only do that if we\'re \n                    // actually contained within that class.\n                    var containingClass = typeCheckContext.getEnclosingClassDecl();\n                    if (!containingClass || containingClass.getSymbol() !== memberContainer) {\n                        var name = <Identifier>memberAccessExpression.operand2;\n                        this.postError(name.minChar, name.getLength(), typeCheckContext.scriptName, DiagnosticCode._0_1__is_inaccessible, [memberContainer.toString(false), name.actualText], enclosingDecl);\n                    }\n                }\n            }\n\n            return type;\n        }\n\n        private typeCheckSwitchStatement(switchStatement: SwitchStatement, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(switchStatement.val, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(switchStatement.caseList, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(switchStatement.defaultCase, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckExpressionStatement(ast: ExpressionStatement, typeCheckContext: PullTypeCheckContext, inContextuallyTypedAssignment: boolean): PullTypeSymbol {\n            return this.typeCheckAST(ast.expression, typeCheckContext, inContextuallyTypedAssignment);\n        }\n\n        private typeCheckCaseClause(caseClause: CaseClause, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST(caseClause.expr, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n            this.typeCheckAST(caseClause.body, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckLabeledStatement(labeledStatement: LabeledStatement, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            return this.typeCheckAST(labeledStatement.statement, typeCheckContext, /*inContextuallyTypedAssignment:*/ false);\n        }\n\n        // Privacy checking\n\n        private checkTypePrivacy(declSymbol: PullSymbol, typeSymbol: PullTypeSymbol, typeCheckContext: PullTypeCheckContext, privacyErrorReporter: (typeSymbol: PullTypeSymbol) => void ) {\n            if (!typeSymbol || typeSymbol.getKind() === PullElementKind.Primitive) {\n                return;\n            }\n\n            if (typeSymbol.isArray()) {\n                this.checkTypePrivacy(declSymbol, (<PullArrayTypeSymbol>typeSymbol).getElementType(), typeCheckContext, privacyErrorReporter);\n                return;\n            }\n\n            if (!typeSymbol.isNamedTypeSymbol()) {\n                // Check the privacy of members, constructors, calls, index signatures\n                var members = typeSymbol.getMembers();\n                for (var i = 0; i < members.length; i++) {\n                    this.checkTypePrivacy(declSymbol, members[i].getType(), typeCheckContext, privacyErrorReporter);\n                }\n\n                this.checkTypePrivacyOfSignatures(declSymbol, typeSymbol.getCallSignatures(), typeCheckContext, privacyErrorReporter);\n                this.checkTypePrivacyOfSignatures(declSymbol, typeSymbol.getConstructSignatures(), typeCheckContext, privacyErrorReporter);\n                this.checkTypePrivacyOfSignatures(declSymbol, typeSymbol.getIndexSignatures(), typeCheckContext, privacyErrorReporter);\n\n                return;\n            }\n\n            // Check flags for the symbol itself\n            if (declSymbol.isExternallyVisible()) {\n                // Check if type symbol is externally visible\n                var typeSymbolIsVisible = typeSymbol.isExternallyVisible();\n                // If Visible check if the type is part of dynamic module\n                if (typeSymbolIsVisible) {\n                    var typeSymbolPath = typeSymbol.pathToRoot();\n                    if (typeSymbolPath.length && typeSymbolPath[typeSymbolPath.length - 1].getKind() === PullElementKind.DynamicModule) {\n                        // Type from the dynamic module\n                        var declSymbolPath = declSymbol.pathToRoot();\n                        if (declSymbolPath.length && declSymbolPath[declSymbolPath.length - 1] != typeSymbolPath[typeSymbolPath.length - 1]) {\n                            // Declaration symbol is from different unit\n                            var aliasSymbol = (<PullContainerTypeSymbol>typeSymbolPath[typeSymbolPath.length - 1]).getAliasedSymbol(declSymbol);\n                            if (aliasSymbol) {\n                                // Visible type.\n                                // Also mark this Import declaration as visible\n                                CompilerDiagnostics.assert(aliasSymbol.getKind() === PullElementKind.TypeAlias, \"dynamic module need to be referenced by type alias\");\n                                (<PullTypeAliasSymbol>aliasSymbol).setIsTypeUsedExternally();\n                            } else {\n                                // Type from different module without import statement\n                                typeSymbolIsVisible = false;\n                            }\n                        }\n                    }\n                }\n\n                if (!typeSymbolIsVisible) {\n                    // declaration is visible from outside but the type isnt - Report error\n                    privacyErrorReporter(typeSymbol);\n                }\n            }\n        }\n\n        private checkTypePrivacyOfSignatures(declSymbol: PullSymbol, signatures: PullSignatureSymbol[], typeCheckContext: PullTypeCheckContext, privacyErrorReporter: (typeSymbol: PullTypeSymbol) => void ) {\n            for (var i = 0; i < signatures.length; i++) {\n                var signature = signatures[i];\n                if (signatures.length && signature.isDefinition()) {\n                    continue;\n                }\n\n                var typeParams = signature.getTypeParameters();\n                for (var j = 0; j < typeParams.length; j++) {\n                    this.checkTypePrivacy(declSymbol, typeParams[j], typeCheckContext, privacyErrorReporter);\n                }\n\n                var params = signature.getParameters();\n                for (var j = 0; j < params.length; j++) {\n                    var paramType = params[j].getType();\n                    this.checkTypePrivacy(declSymbol, paramType, typeCheckContext, privacyErrorReporter);\n                }\n\n                var returnType = signature.getReturnType();\n                this.checkTypePrivacy(declSymbol, returnType, typeCheckContext, privacyErrorReporter);\n            }\n        }\n\n        private baseListPrivacyErrorReporter(declAST: TypeDeclaration, declSymbol: PullTypeSymbol, baseAst: AST, isExtendedType: boolean, typeSymbol: PullTypeSymbol, typeCheckContext: PullTypeCheckContext) {\n            var decl: PullDecl = this.resolver.getDeclForAST(declAST);\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var messageCode: DiagnosticCode;\n            var messageArguments: any[];\n\n            var typeSymbolName = typeSymbol.getScopedName();\n            if (typeSymbol.isContainer()) {\n                if (!isQuoted(typeSymbolName)) {\n                    typeSymbolName = \"\'\" + typeSymbolName + \"\'\";\n                }\n                if (declAST.nodeType === NodeType.ClassDeclaration) {\n                    // Class\n                    if (isExtendedType) {\n                        messageCode = DiagnosticCode.Exported_class__0__extends_class_from_inaccessible_module__1_;\n                        messageArguments = [declSymbol.getScopedName(), typeSymbolName];\n                    } else {\n                        messageCode = DiagnosticCode.Exported_class__0__implements_interface_from_inaccessible_module__1_;\n                        messageArguments = [declSymbol.getScopedName(), typeSymbolName];\n                    }\n                } else {\n                    // Interface\n                    messageCode = DiagnosticCode.Exported_interface__0__extends_interface_from_inaccessible_module__1_;\n                    messageArguments = [declSymbol.getDisplayName(), typeSymbolName];\n                }\n            } else {\n                if (declAST.nodeType === NodeType.ClassDeclaration) {\n                    // Class\n                    if (isExtendedType) {\n                        messageCode = DiagnosticCode.Exported_class__0__extends_private_class__1_;\n                        messageArguments = [declSymbol.getScopedName(), typeSymbolName];\n                    } else {\n                        messageCode = DiagnosticCode.Exported_class__0__implements_private_interface__1_;\n                        messageArguments = [declSymbol.getScopedName(), typeSymbolName];\n                    }\n                } else {\n                    // Interface\n                    messageCode = DiagnosticCode.Exported_interface__0__extends_private_interface__1_;\n                    messageArguments = [declSymbol.getDisplayName(), typeSymbolName];\n                }\n            }\n\n            this.context.postError(typeCheckContext.scriptName, baseAst.minChar, baseAst.getLength(), messageCode, messageArguments, enclosingDecl, true);\n        }\n\n        private variablePrivacyErrorReporter(declSymbol: PullSymbol, typeSymbol: PullTypeSymbol, typeCheckContext: PullTypeCheckContext) {\n            var declAST = <VariableDeclarator>this.resolver.getASTForSymbol(declSymbol);\n            var decl: PullDecl = this.resolver.getDeclForAST(declAST);\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var isProperty = declSymbol.getKind() === PullElementKind.Property;\n            var isPropertyOfClass = false;\n            var declParent = declSymbol.getContainer();\n            if (declParent && (declParent.getKind() === PullElementKind.Class || declParent.getKind() === PullElementKind.ConstructorMethod)) {\n                isPropertyOfClass = true;\n            }\n\n            var messageCode: DiagnosticCode;\n            var messageArguments: any[];\n            var typeSymbolName = typeSymbol.getScopedName();\n            if (typeSymbol.isContainer()) {\n                if (!isQuoted(typeSymbolName)) {\n                    typeSymbolName = \"\'\" + typeSymbolName + \"\'\";\n                }\n\n                if (decl.getFlags() & PullElementFlags.Static) {\n                    messageCode = DiagnosticCode.Public_static_property__0__of__exported_class_is_using_inaccessible_module__1_;\n                    messageArguments = [declSymbol.getScopedName(), typeSymbolName];\n                } else if (isProperty) {\n                    if (isPropertyOfClass) {\n                        messageCode = DiagnosticCode.Public_property__0__of__exported_class_is_using_inaccessible_module__1_;\n                        messageArguments = [declSymbol.getScopedName(), typeSymbolName];\n                    } else {\n                        messageCode = DiagnosticCode.Property__0__of__exported_interface_is_using_inaccessible_module__1_;\n                        messageArguments = [declSymbol.getScopedName(), typeSymbolName];\n                    }\n                } else {\n                    messageCode = DiagnosticCode.Exported_variable__0__is_using_inaccessible_module__1_;\n                    messageArguments = [declSymbol.getScopedName(), typeSymbolName];\n                }\n            } else {\n                if (decl.getFlags() & PullElementFlags.Static) {\n                    messageCode = DiagnosticCode.Public_static_property__0__of__exported_class_has_or_is_using_private_type__1_;\n                    messageArguments = [declSymbol.getScopedName(), typeSymbolName];\n                } else if (isProperty) {\n                    if (isPropertyOfClass) {\n                        messageCode = DiagnosticCode.Public_property__0__of__exported_class_has_or_is_using_private_type__1_;\n                        messageArguments = [declSymbol.getScopedName(), typeSymbolName];\n                    } else {\n                        messageCode = DiagnosticCode.Property__0__of__exported_interface_has_or_is_using_private_type__1_;\n                        messageArguments = [declSymbol.getScopedName(), typeSymbolName];\n                    }\n                } else {\n                    messageCode = DiagnosticCode.Exported_variable__0__has_or_is_using_private_type__1_;\n                    messageArguments = [declSymbol.getScopedName(), typeSymbolName];\n                }\n            }\n\n            this.context.postError(typeCheckContext.scriptName, declAST.minChar, declAST.getLength(), messageCode, messageArguments, enclosingDecl, true);\n        }\n\n        private checkFunctionTypePrivacy(funcDeclAST: FunctionDeclaration, inContextuallyTypedAssignment: boolean, typeCheckContext: PullTypeCheckContext) {\n            if (inContextuallyTypedAssignment || (funcDeclAST.getFunctionFlags() & FunctionFlags.IsFunctionExpression)) {\n                return;\n            }\n\n            var functionDecl = typeCheckContext.semanticInfo.getDeclForAST(funcDeclAST);\n            var functionSymbol = functionDecl.getSymbol();;\n            var functionSignature: PullSignatureSymbol;\n\n            var isGetter = funcDeclAST.isGetAccessor();\n            var isSetter = funcDeclAST.isSetAccessor();\n\n            if (isGetter || isSetter) {\n                var accessorSymbol = <PullAccessorSymbol> functionSymbol;\n                functionSignature = (isGetter ? accessorSymbol.getGetter() : accessorSymbol.getSetter()).getType().getCallSignatures()[0];\n            } else {\n                if (!functionSymbol) {\n                    var parentDecl = functionDecl.getParentDecl();\n                    functionSymbol = parentDecl.getSymbol();\n                    if (functionSymbol && functionSymbol.isType() && !(<PullTypeSymbol>functionSymbol).isNamedTypeSymbol()) {\n                        // Signature from the non named type\n                        return;\n                    }\n                }\n                functionSignature = functionDecl.getSignatureSymbol();\n            }\n\n            // Check function parameters\n            if (!isGetter) {\n                var funcParams = functionSignature.getParameters();\n                for (var i = 0; i < funcParams.length; i++) {\n                    this.checkTypePrivacy(functionSymbol, funcParams[i].getType(), typeCheckContext, (typeSymbol: PullTypeSymbol) =>\n                        this.functionArgumentTypePrivacyErrorReporter(funcDeclAST, i, funcParams[i], typeSymbol, typeCheckContext));\n                }\n            }\n\n            // Check return type\n            if (!isSetter) {\n                this.checkTypePrivacy(functionSymbol, functionSignature.getReturnType(), typeCheckContext, (typeSymbol: PullTypeSymbol) =>\n                    this.functionReturnTypePrivacyErrorReporter(funcDeclAST, functionSignature.getReturnType(), typeSymbol, typeCheckContext));\n            }\n        }\n\n        private functionArgumentTypePrivacyErrorReporter(declAST: FunctionDeclaration, argIndex: number, paramSymbol: PullSymbol, typeSymbol: PullTypeSymbol, typeCheckContext: PullTypeCheckContext) {\n            var decl: PullDecl = this.resolver.getDeclForAST(declAST);\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var isGetter = declAST.isAccessor() && hasFlag(declAST.getFunctionFlags(), FunctionFlags.GetAccessor);\n            var isSetter = declAST.isAccessor() && hasFlag(declAST.getFunctionFlags(), FunctionFlags.SetAccessor);\n            var isStatic = (decl.getFlags() & PullElementFlags.Static) === PullElementFlags.Static;\n            var isMethod = decl.getKind() === PullElementKind.Method;\n            var isMethodOfClass = false;\n            var declParent = decl.getParentDecl();\n            if (declParent && (declParent.getKind() === PullElementKind.Class || declParent.getKind() === PullElementKind.ConstructorMethod)) {\n                isMethodOfClass = true;\n            }\n\n            var start = declAST.arguments.members[argIndex].minChar;\n            var length = declAST.arguments.members[argIndex].getLength();\n\n            var typeSymbolName = typeSymbol.getScopedName();\n            if (typeSymbol.isContainer()) {\n                if (!isQuoted(typeSymbolName)) {\n                    typeSymbolName = \"\'\" + typeSymbolName + \"\'\";\n                }\n\n                if (declAST.isConstructor) {\n                    this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_constructor_from_exported_class_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                } else if (isSetter) {\n                    if (isStatic) {\n                        this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_public_static_property_setter_from_exported_class_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                    } else {\n                        this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_public_property_setter_from_exported_class_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                    }\n                } else if (declAST.isConstructMember()) {\n                    this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_constructor_signature_from_exported_interface_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                } else if (declAST.isCallMember()) {\n                    this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_call_signature_from_exported_interface_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                } else if (isMethod) {\n                    if (isStatic) {\n                        this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_public_static_method_from_exported_class_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                    } else if (isMethodOfClass) {\n                        this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_public_method_from_exported_class_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                    } else {\n                        this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_method_from_exported_interface_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                    }\n                } else if (!isGetter) {\n                    this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_exported_function_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                }\n            } else {\n                if (declAST.isConstructor) {\n                    this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_constructor_from_exported_class_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                } else if (isSetter) {\n                    if (isStatic) {\n                        this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_public_static_property_setter_from_exported_class_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                    } else {\n                        this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_public_property_setter_from_exported_class_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                    }\n                } else if (declAST.isConstructMember()) {\n                    this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_constructor_signature_from_exported_interface_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                } else if (declAST.isCallMember()) {\n                    this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_call_signature_from_exported_interface_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                } else if (isMethod) {\n                    if (isStatic) {\n                        this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_public_static_method_from_exported_class_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                    } else if (isMethodOfClass) {\n                        this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_public_method_from_exported_class_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                    } else {\n                        this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_method_from_exported_interface_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                    }\n                } else if (!isGetter && !declAST.isIndexerMember()) {\n                    this.context.postError(typeCheckContext.scriptName, start, length, DiagnosticCode.Parameter__0__of_exported_function_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName], enclosingDecl, true);\n                }\n            }\n        }\n\n        private functionReturnTypePrivacyErrorReporter(declAST: FunctionDeclaration, funcReturnType: PullTypeSymbol, typeSymbol: PullTypeSymbol, typeCheckContext: PullTypeCheckContext) {\n            var decl: PullDecl = this.resolver.getDeclForAST(declAST);\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var isGetter = declAST.isAccessor() && hasFlag(declAST.getFunctionFlags(), FunctionFlags.GetAccessor);\n            var isSetter = declAST.isAccessor() && hasFlag(declAST.getFunctionFlags(), FunctionFlags.SetAccessor);\n            var isStatic = (decl.getFlags() & PullElementFlags.Static) === PullElementFlags.Static;\n            var isMethod = decl.getKind() === PullElementKind.Method;\n            var isMethodOfClass = false;\n            var declParent = decl.getParentDecl();\n            if (declParent && (declParent.getKind() === PullElementKind.Class || declParent.getKind() === PullElementKind.ConstructorMethod)) {\n                isMethodOfClass = true;\n            }\n\n            var messageCode: DiagnosticCode = null;\n            var messageArguments: any[];\n            var typeSymbolName = typeSymbol.getScopedName();\n            if (typeSymbol.isContainer()) {\n                if (!isQuoted(typeSymbolName)) {\n                    typeSymbolName = \"\'\" + typeSymbolName + \"\'\";\n                }\n\n                if (isGetter) {\n                    if (isStatic) {\n                        messageCode = DiagnosticCode.Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module__0_;\n                        messageArguments = [typeSymbolName];\n                    } else {\n                        messageCode = DiagnosticCode.Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module__0_;\n                        messageArguments = [typeSymbolName];\n                    }\n                } else if (declAST.isConstructMember()) {\n                    messageCode = DiagnosticCode.Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module__0_;\n                    messageArguments = [typeSymbolName];\n                } else if (declAST.isCallMember()) {\n                    messageCode = DiagnosticCode.Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module__0_;\n                    messageArguments = [typeSymbolName];\n                } else if (declAST.isIndexerMember()) {\n                    messageCode = DiagnosticCode.Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module__0_;\n                    messageArguments = [typeSymbolName];\n                } else if (isMethod) {\n                    if (isStatic) {\n                        messageCode = DiagnosticCode.Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module__0_;\n                        messageArguments = [typeSymbolName];\n                    } else if (isMethodOfClass) {\n                        messageCode = DiagnosticCode.Return_type_of_public_method_from_exported_class_is_using_inaccessible_module__0_;\n                        messageArguments = [typeSymbolName];\n                    } else {\n                        messageCode = DiagnosticCode.Return_type_of_method_from_exported_interface_is_using_inaccessible_module__0_;\n                        messageArguments = [typeSymbolName];\n                    }\n                } else if (!isSetter && !declAST.isConstructor) {\n                    messageCode = DiagnosticCode.Return_type_of_exported_function_is_using_inaccessible_module__0_;\n                    messageArguments = [typeSymbolName];\n                }\n            } else {\n                if (isGetter) {\n                    if (isStatic) {\n                        messageCode = DiagnosticCode.Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type__0_;\n                        messageArguments = [typeSymbolName];\n                    } else {\n                        messageCode = DiagnosticCode.Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type__0_;\n                        messageArguments = [typeSymbolName];\n                    }\n                } else if (declAST.isConstructMember()) {\n                    messageCode = DiagnosticCode.Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type__0_;\n                    messageArguments = [typeSymbolName];\n                } else if (declAST.isCallMember()) {\n                    messageCode = DiagnosticCode.Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type__0_;\n                    messageArguments = [typeSymbolName];\n                } else if (declAST.isIndexerMember()) {\n                    messageCode = DiagnosticCode.Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type__0_;\n                    messageArguments = [typeSymbolName];\n                } else if (isMethod) {\n                    if (isStatic) {\n                        messageCode = DiagnosticCode.Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type__0_;\n                        messageArguments = [typeSymbolName];\n                    } else if (isMethodOfClass) {\n                        messageCode = DiagnosticCode.Return_type_of_public_method_from_exported_class_has_or_is_using_private_type__0_;\n                        messageArguments = [typeSymbolName];\n                    } else {\n                        messageCode = DiagnosticCode.Return_type_of_method_from_exported_interface_has_or_is_using_private_type__0_;\n                        messageArguments = [typeSymbolName];\n                    }\n                } else if (!isSetter && !declAST.isConstructor) {\n                    messageCode = DiagnosticCode.Return_type_of_exported_function_has_or_is_using_private_type__0_;\n                    messageArguments = [typeSymbolName];\n                }\n            }\n\n            if (messageCode) {\n                var reportOnFuncDecl = false;\n                var contextForReturnTypeResolution = new PullTypeResolutionContext();\n                if (declAST.returnTypeAnnotation) {\n                    // NOTE: we don\'t want to report this diagnostics.  They\'ll already have been \n                    // reported when we first hit the return statement.\n                    var returnExpressionSymbolAndDiagnostics = this.resolver.resolveTypeReference(<TypeReference>declAST.returnTypeAnnotation, decl, contextForReturnTypeResolution);\n                    var returnExpressionSymbol = returnExpressionSymbolAndDiagnostics && returnExpressionSymbolAndDiagnostics.symbol;\n                    if (returnExpressionSymbol === funcReturnType) {\n                        // Error coming from return annotation\n                        this.context.postError(typeCheckContext.scriptName, declAST.returnTypeAnnotation.minChar, declAST.returnTypeAnnotation.getLength(), messageCode, messageArguments, enclosingDecl, true);\n                    }\n                }\n\n                if (declAST.block) {\n                    var reportErrorOnReturnExpressions = (ast: AST, parent: AST, walker: IAstWalker) => {\n                        var go = true;\n                        switch (ast.nodeType) {\n                            case NodeType.FunctionDeclaration:\n                                // don\'t recurse into a function decl - we don\'t want to confuse a nested\n                                // return type with the top-level function\'s return type\n                                go = false;\n                                break;\n\n                            case NodeType.ReturnStatement:\n                                var returnStatement: ReturnStatement = <ReturnStatement>ast;\n                                var returnExpressionSymbol = this.resolver.resolveAST(returnStatement.returnExpression, false, decl, contextForReturnTypeResolution).symbol.getType();\n                                // Check if return statement\'s type matches the one that we concluded\n                                if (returnExpressionSymbol === funcReturnType) {\n                                    this.context.postError(typeCheckContext.scriptName, returnStatement.minChar, returnStatement.getLength(), messageCode, messageArguments, enclosingDecl, true);\n                                } else {\n                                    reportOnFuncDecl = true;\n                                }\n                                go = false;\n                                break;\n\n                            default:\n                                break;\n                        }\n\n                        walker.options.goChildren = go;\n                        return ast;\n                    }\n\n                    getAstWalkerFactory().walk(declAST.block, reportErrorOnReturnExpressions);\n                }\n\n                if (reportOnFuncDecl) {\n                    // Show on function decl\n                    this.context.postError(typeCheckContext.scriptName, declAST.minChar, declAST.getLength(), messageCode, messageArguments, enclosingDecl, true);\n                }\n            }\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export enum PullDeclEdit {\n        NoChanges,\n        DeclAdded,\n        DeclRemoved,\n        DeclChanged,\n    }\n\n    export class PullDeclDiff {\n        constructor(public oldDecl: PullDecl, public newDecl: PullDecl, public kind: PullDeclEdit) {\n        }\n    }\n\n    export class PullDeclDiffer {\n        private differences: PullDeclDiff[] = [];\n\n        constructor(private oldSemanticInfo: SemanticInfo,\n                    private newSemanticInfo: SemanticInfo) {\n        }\n\n        public static diffDecls(oldDecl: PullDecl,\n                                oldSemanticInfo: SemanticInfo,\n                                newDecl: PullDecl,\n                                newSemanticInfo: SemanticInfo): PullDeclDiff[]{\n            var declDiffer = new PullDeclDiffer(oldSemanticInfo, newSemanticInfo);\n            declDiffer.diff(oldDecl, newDecl);\n            return declDiffer.differences;\n        }\n\n        // For now, just check for there/not there - we\'ll invalidate the inference symbols anyway\n        // next up, we\'ll want to use this data to find the decl that changed\n        private diff(oldDecl: PullDecl, newDecl: PullDecl): void {\n            Debug.assert(oldDecl.getName() === newDecl.getName());\n            Debug.assert(oldDecl.getKind() === newDecl.getKind());\n\n            var oldAST = this.oldSemanticInfo.getASTForDecl(oldDecl);\n            var newAST = this.newSemanticInfo.getASTForDecl(newDecl);\n            Debug.assert(oldAST !== undefined);\n            Debug.assert(newAST !== undefined);\n\n            // If the AST\'s are the same, then there\'s nothing we need to do.\n            if (oldAST === newAST) {\n                return;\n            }\n\n            // Not the same ast, walk this decl and find all the differences.\n            this.diff1(oldDecl, newDecl, oldAST, newAST, oldDecl.childDeclTypeCache, newDecl.childDeclTypeCache);\n            this.diff1(oldDecl, newDecl, oldAST, newAST, oldDecl.childDeclTypeParameterCache, newDecl.childDeclTypeParameterCache);\n            this.diff1(oldDecl, newDecl, oldAST, newAST, oldDecl.childDeclValueCache, newDecl.childDeclValueCache);\n\n            if (!this.isEquivalent(oldAST, newAST)) {\n                this.differences.push(new PullDeclDiff(oldDecl, newDecl, PullDeclEdit.DeclChanged));\n            }\n        }\n\n        private static emptyDeclArray: PullDecl[] = [];\n\n        private diff1(oldDecl: PullDecl,\n                      newDecl: PullDecl,\n                      oldAST: AST,\n                      newAST: AST,\n                      oldNameToDecls: any,\n                      newNameToDecls: any): void {\n            var oldChildrenOfName: PullDecl[];\n            var newChildrenOfName: PullDecl[];\n            var oldChild: PullDecl;\n            var newChild: PullDecl;\n\n            // The old decl and new decl have names mapping to lists of children with that name.  \n            // For each name we can have the following cases:\n            //\n            //      name -> [oldDeclChild1,      ...,           oldDeclChild_n]\n            //      name -> [newDeclChild1, ..., newDeclChild_j]\n            //\n            //  or\n            //\n            //      name -> [oldDeclChild1, ..., oldDeclChild_n]\n            //      name -> [newDeclChild1, ..., newDeclChild_j]\n            //\n            //  or\n            //\n            //      name -> [oldDeclChild1, ..., oldDeclChild_n]\n            //      name -> [newDeclChild1,      ...,           newDeclChild_j]\n            //\n            //\n            // i.e. n > j, n === j, n < j.\n            //\n            // For the first case, we we check all the child decls from 0 to j in the old list and \n            // the new list.  Anything past j is a decl we\'ve removed.\n            //\n            // For the last case, we check all the child decls from 0 to n in the old list and the\n            // new list.  Anything past that is an added decl.\n\n            // We have to iterate over both collections as each may have names the other does not\n            // know about.  \n            //\n            // First, use the names the old decl knows about. \n            for (var name in oldNameToDecls) {\n                oldChildrenOfName = oldNameToDecls[name] || PullDeclDiffer.emptyDeclArray;\n                newChildrenOfName = newNameToDecls[name] || PullDeclDiffer.emptyDeclArray;\n\n                for (var i = 0, n = oldChildrenOfName.length; i < n; i++) {\n                    oldChild = oldChildrenOfName[i];\n\n                    switch (oldChild.getKind()) {\n                        // These are decls created for ephemeral expressions.  The new decl tree\n                        // won\'t have them yet.  So we don\'t want to find diffs here.  The \n                        // compiler already knows to remove these decls and compute new ones\n                        // later.\n                        case PullElementKind.FunctionExpression:\n                        case PullElementKind.ObjectLiteral:\n                        case PullElementKind.ObjectType:\n                        case PullElementKind.FunctionType:\n                        case PullElementKind.ConstructorType:\n                            continue;\n                    }\n\n                    if (i < newChildrenOfName.length) {\n                        // Both the old decl and new decl have a child of this name.  If they\'re\n                        // the same type, check them for differences.  Otherwise, consider this\n                        // a remove/add.\n                        newChild = newChildrenOfName[i];\n\n                        if (oldChild.getKind() === newChild.getKind()) {\n                            this.diff(oldChild, newChildrenOfName[i]);\n                        }\n                        else {\n                            this.differences.push(new PullDeclDiff(oldChild, null, PullDeclEdit.DeclRemoved));\n                            this.differences.push(new PullDeclDiff(oldDecl, newChild, PullDeclEdit.DeclAdded));\n                        }\n                    }\n                    else {\n                        // Child was removed.\n                        this.differences.push(new PullDeclDiff(oldChild, null, PullDeclEdit.DeclRemoved));\n                    }\n                }\n            }\n\n            // Now use the names the new decl knows about.  \n            for (var name in newNameToDecls) {\n                oldChildrenOfName = oldNameToDecls[name] || PullDeclDiffer.emptyDeclArray;\n                newChildrenOfName = newNameToDecls[name] || PullDeclDiffer.emptyDeclArray;\n\n                // If the old decl also knew about this name, then we would have taken care of this \n                // name in the loop above.  So, start iterating *after* all the children of the \n                // old decl.  \n                for (var i = oldChildrenOfName.length, n = newChildrenOfName.length; i < n; i++) {\n                    newChild = newChildrenOfName[i];\n                    this.differences.push(new PullDeclDiff(oldDecl, newChild, PullDeclEdit.DeclAdded));\n                }\n            }\n        }\n\n        private isEquivalent(oldAST: AST, newAST: AST): boolean {\n            Debug.assert(oldAST !== null);\n            Debug.assert(newAST !== null);\n            Debug.assert(oldAST !== newAST);\n\n            //if (oldAST === undefined || newAST === undefined) {\n            //    Debug.assert(oldAST === newAST);\n            //    return true;\n            //}\n\n            if (oldAST.nodeType !== newAST.nodeType ||\n                oldAST.getFlags() !== newAST.getFlags()) {\n                return false;\n            }\n\n            switch (oldAST.nodeType) {\n                case NodeType.ImportDeclaration:\n                    return this.importDeclarationIsEquivalent(<ImportDeclaration>oldAST, <ImportDeclaration>newAST);\n                case NodeType.ModuleDeclaration:\n                    return this.moduleDeclarationIsEquivalent(<ModuleDeclaration>oldAST, <ModuleDeclaration>newAST);\n                case NodeType.ClassDeclaration:\n                    return this.classDeclarationIsEquivalent(<ClassDeclaration>oldAST, <ClassDeclaration>newAST);\n                case NodeType.InterfaceDeclaration:\n                    return this.interfaceDeclarationIsEquivalent(<InterfaceDeclaration>oldAST, <InterfaceDeclaration>newAST);\n                case NodeType.Parameter:\n                    return this.argumentDeclarationIsEquivalent(<Parameter>oldAST, <Parameter>newAST);\n                case NodeType.VariableDeclarator:\n                    return this.variableDeclarationIsEquivalent(<VariableDeclarator>oldAST, <VariableDeclarator>newAST);\n                case NodeType.TypeParameter:\n                    return this.typeParameterIsEquivalent(<TypeParameter>oldAST, <TypeParameter>newAST);\n                case NodeType.FunctionDeclaration:\n                    return this.functionDeclarationIsEquivalent(<FunctionDeclaration>oldAST, <FunctionDeclaration>newAST);\n                case NodeType.CatchClause:\n                    return this.catchClauseIsEquivalent(<CatchClause>oldAST, <CatchClause>newAST);\n                case NodeType.WithStatement:\n                    return this.withStatementIsEquivalent(<WithStatement>oldAST, <WithStatement>newAST);\n                case NodeType.Script:\n                    return this.scriptIsEquivalent(<Script>oldAST, <Script>newAST);\n                default:\n                    throw Errors.invalidOperation();\n            }\n        }\n\n        private importDeclarationIsEquivalent(decl1: ImportDeclaration, decl2: ImportDeclaration): boolean {\n            return structuralEqualsNotIncludingPosition(decl1.alias, decl2.alias);\n        }\n\n        private typeDeclarationIsEquivalent(decl1: TypeDeclaration, decl2: TypeDeclaration): boolean {\n            return decl1.getVarFlags() === decl2.getVarFlags() &&\n                   structuralEqualsNotIncludingPosition(decl1.typeParameters, decl2.typeParameters) &&\n                   structuralEqualsNotIncludingPosition(decl1.extendsList, decl2.extendsList) &&\n                   structuralEqualsNotIncludingPosition(decl1.implementsList, decl2.implementsList);\n        }\n\n        private classDeclarationIsEquivalent(decl1: ClassDeclaration, decl2: ClassDeclaration): boolean {\n            return this.typeDeclarationIsEquivalent(decl1, decl2);\n        }\n\n        private interfaceDeclarationIsEquivalent(decl1: InterfaceDeclaration, decl2: InterfaceDeclaration): boolean {\n            return this.typeDeclarationIsEquivalent(decl1, decl2);\n        }\n\n        private typeParameterIsEquivalent(decl1: TypeParameter, decl2: TypeParameter): boolean {\n            return structuralEqualsNotIncludingPosition(decl1.constraint, decl2.constraint);\n        }\n\n        private boundDeclarationIsEquivalent(decl1: BoundDecl, decl2: BoundDecl): boolean {\n            if (decl1.getVarFlags() === decl2.getVarFlags() &&\n                structuralEqualsNotIncludingPosition(decl1.typeExpr, decl2.typeExpr)) {\n\n                // So far they\'re structurally equivalent.  However, in teh case where the decls \n                // don\'t have a specified type annotation, we have to look further.  Specifically,\n                // we have to check if the initializers are the same as well. If they\'re not, \n                // then the type of the decl may have changed.\n                if (decl1.typeExpr === null) {\n                    return structuralEqualsNotIncludingPosition(decl1.init, decl2.init);\n                }\n                else {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private argumentDeclarationIsEquivalent(decl1: Parameter, decl2: Parameter): boolean {\n            return this.boundDeclarationIsEquivalent(decl1, decl2) &&\n                   decl1.isOptional === decl2.isOptional;\n        }\n\n        private variableDeclarationIsEquivalent(decl1: VariableDeclarator, decl2: VariableDeclarator): boolean {\n            return this.boundDeclarationIsEquivalent(decl1, decl2);\n        }\n\n        private functionDeclarationIsEquivalent(decl1: FunctionDeclaration, decl2: FunctionDeclaration): boolean {\n            if (decl1.hint === decl2.hint &&\n                decl1.getFunctionFlags() === decl2.getFunctionFlags() &&\n                decl1.variableArgList === decl2.variableArgList &&\n                decl1.isConstructor === decl2.isConstructor &&\n                structuralEqualsNotIncludingPosition(decl1.returnTypeAnnotation, decl2.returnTypeAnnotation) &&\n                structuralEqualsNotIncludingPosition(decl1.typeArguments, decl2.typeArguments) &&\n                structuralEqualsNotIncludingPosition(decl1.arguments, decl2.arguments)) {\n\n                // So far they\'re structurally equivalent.  However, in teh case where the \n                // functions don\'t have a specified return type annotation, we have to look\n                // further.  Specifically, we have to check if the bodies are the same as well.\n                // If they\'re not, then the return type of the function may have changed.\n                if (decl1.returnTypeAnnotation === null) {\n                    return structuralEqualsNotIncludingPosition(decl1.block, decl2.block);\n                }\n                else {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private catchClauseIsEquivalent(decl1: CatchClause, decl2: CatchClause): boolean {\n            return structuralEqualsNotIncludingPosition(decl1.param, decl2.param) &&\n                    structuralEqualsNotIncludingPosition(decl1.body, decl2.body)\n        }\n\n        private withStatementIsEquivalent(decl1: WithStatement, decl2: WithStatement): boolean {\n            return structuralEqualsNotIncludingPosition(decl1.expr, decl2.expr) &&\n                structuralEqualsNotIncludingPosition(decl1.body, decl2.body);\n        }\n\n        private scriptIsEquivalent(decl1: Script, decl2: Script): boolean {\n            // TODO: should we check Script.referencedFiles here?  I don\'t think we need to.  \n            // After all, if that changes, then the LS will just tear us down and start over again,\n            // so we won\'t be comparing decls anyways.\n            return true;\n        }\n\n        private moduleDeclarationIsEquivalent(decl1: ModuleDeclaration, decl2: ModuleDeclaration): boolean {\n            return decl1.getModuleFlags() === decl2.getModuleFlags() &&\n                   decl2.prettyName === decl2.prettyName &&\n                   ArrayUtilities.sequenceEquals(decl1.amdDependencies, decl2.amdDependencies, StringUtilities.stringEquals);\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n\n    // per-file info on \n    //  decls\n    //  bindings\n    //  scopes\n\n    // PULLTODO: Get rid of these\n    export var declCacheHit = 0;\n    export var declCacheMiss = 0;\n    export var symbolCacheHit = 0;\n    export var symbolCacheMiss = 0;\n\n    export class SemanticInfo {\n        private compilationUnitPath: string;  // the \"file\" this is associated with\n\n        private topLevelDecls: PullDecl[] = [];\n\n        private astDeclMap: DataMap = new DataMap();\n        private declASTMap: DataMap = new DataMap();\n\n        private syntaxElementDeclMap: DataMap = new DataMap();\n        private declSyntaxElementMap: DataMap = new DataMap();\n\n        private declSymbolMap: DataMap = new DataMap();\n\n        private astSymbolMap: DataMap = new DataMap();\n        private symbolASTMap: DataMap = new DataMap();\n\n        private syntaxElementSymbolMap: DataMap = new DataMap();\n        private symbolSyntaxElementMap: DataMap = new DataMap();\n\n        private dynamicModuleImports: PullTypeAliasSymbol[] = [];\n\n        private properties = new SemanticInfoProperties();\n\n        private hasBeenTypeChecked = false;\n\n        constructor(compilationUnitPath: string) {\n            this.compilationUnitPath = compilationUnitPath;\n        }\n\n        public addTopLevelDecl(decl: PullDecl) {\n            this.topLevelDecls[this.topLevelDecls.length] = decl;\n        }\n\n        public setTypeChecked() {\n            this.hasBeenTypeChecked = true;\n        }\n        public getTypeChecked() {\n            return this.hasBeenTypeChecked;\n        }\n        public invalidate() {\n            this.hasBeenTypeChecked = false;\n        }\n\n        public getTopLevelDecls() { return this.topLevelDecls; }\n\n        public getPath(): string {\n            return this.compilationUnitPath;\n        }\n\n        public getDeclForAST(ast: AST): PullDecl {\n            return <PullDecl>this.astDeclMap.read(ast.getID().toString());\n        }\n\n        public setDeclForAST(ast: AST, decl: PullDecl): void {\n            this.astDeclMap.link(ast.getID().toString(), decl);\n        }\n\n        private getDeclKey(decl: PullDecl): string {\n            var decl1: any = decl;\n\n            if (!decl1.__declKey) {\n                decl1.__declKey = decl.getDeclID().toString() + \"-\" + decl.getKind().toString();\n            }\n\n            return decl1.__declKey;\n        }\n\n        public getASTForDecl(decl: PullDecl): AST {\n            return <AST>this.declASTMap.read(this.getDeclKey(decl));\n        }\n\n        public setASTForDecl(decl: PullDecl, ast: AST): void {\n            this.declASTMap.link(this.getDeclKey(decl), ast);\n        }\n\n        public setSymbolAndDiagnosticsForAST<TSymbol extends PullSymbol>(ast: AST, symbolAndDiagnostics: SymbolAndDiagnostics<TSymbol>): void {\n            this.astSymbolMap.link(ast.getID().toString(), symbolAndDiagnostics);\n            this.symbolASTMap.link(symbolAndDiagnostics.symbol.getSymbolID().toString(), ast)\n        }\n\n        public getSymbolAndDiagnosticsForAST(ast: AST): SymbolAndDiagnostics<PullSymbol> {\n            return <SymbolAndDiagnostics>this.astSymbolMap.read(ast.getID().toString());\n        }\n\n        public getASTForSymbol(symbol: PullSymbol): AST {\n            return <AST>this.symbolASTMap.read(symbol.getSymbolID().toString());\n        }\n\n        public getSyntaxElementForDecl(decl: PullDecl): ISyntaxElement {\n            return <ISyntaxElement>this.declSyntaxElementMap.read(this.getDeclKey(decl));\n        }\n\n        public setSyntaxElementForDecl(decl: PullDecl, syntaxElement: ISyntaxElement): void {\n            this.declSyntaxElementMap.link(this.getDeclKey(decl), syntaxElement);\n        }\n\n        public getDeclForSyntaxElement(syntaxElement: ISyntaxElement): PullDecl {\n            return <PullDecl>this.syntaxElementDeclMap.read(Collections.identityHashCode(syntaxElement).toString());\n        }\n\n        public setDeclForSyntaxElement(syntaxElement: ISyntaxElement, decl: PullDecl): void {\n            this.syntaxElementDeclMap.link(Collections.identityHashCode(syntaxElement).toString(), decl);\n        }\n\n        public getSyntaxElementForSymbol(symbol: PullSymbol): ISyntaxElement {\n            return <ISyntaxElement> this.symbolSyntaxElementMap.read(symbol.getSymbolID().toString());\n        }\n\n        public getSymbolForSyntaxElement(syntaxElement: ISyntaxElement): PullSymbol {\n            return <PullSymbol>this.syntaxElementSymbolMap.read(Collections.identityHashCode(syntaxElement).toString());\n        }\n\n        public setSymbolForSyntaxElement(syntaxElement: ISyntaxElement, symbol: PullSymbol) {\n            this.syntaxElementSymbolMap.link(Collections.identityHashCode(syntaxElement).toString(), symbol);\n            this.symbolSyntaxElementMap.link(symbol.getSymbolID().toString(), syntaxElement);\n        }\n\n        public addDynamicModuleImport(importSymbol: PullTypeAliasSymbol) {\n            this.dynamicModuleImports[this.dynamicModuleImports.length] = importSymbol;\n        }\n\n        public getDynamicModuleImports() {\n            return this.dynamicModuleImports;\n        }\n\n        public getDiagnostics(semanticErrors: IDiagnostic[]) {\n\n            for (var i = 0; i < this.topLevelDecls.length; i++) {\n                getDiagnosticsFromEnclosingDecl(this.topLevelDecls[i], semanticErrors);\n            }\n        }\n        \n        public getProperties() {\n            return this.properties;\n        }\n    }\n\n    /**\n     * This class will contain any miscellaneous flags that pertain to the semantic status of the file.\n     * This is for properties that are not tied to a specific AST, decl, symbol or syntax element, but are global to the file.\n     */\n    export class SemanticInfoProperties {\n        public unitContainsBool = false;\n    }\n\n    export class SemanticInfoChain {\n        public units: SemanticInfo[] = [new SemanticInfo(\"\")];\n        private declCache = <any>new BlockIntrinsics();\n        private symbolCache = <any>new BlockIntrinsics();\n        private unitCache = <any>new BlockIntrinsics();\n\n        public anyTypeSymbol: PullTypeSymbol = null;\n        public booleanTypeSymbol: PullTypeSymbol = null;\n        public numberTypeSymbol: PullTypeSymbol = null;\n        public stringTypeSymbol: PullTypeSymbol = null;\n        public nullTypeSymbol: PullTypeSymbol = null;\n        public undefinedTypeSymbol: PullTypeSymbol = null;\n        public elementTypeSymbol: PullTypeSymbol = null;\n        public voidTypeSymbol: PullTypeSymbol = null;\n\n        public addPrimitiveType(name: string, globalDecl: PullDecl) {\n            var span = new TextSpan(0, 0);\n            var decl = new PullDecl(name, name, PullElementKind.Primitive, PullElementFlags.None, span, \"\");\n            var symbol = new PullPrimitiveTypeSymbol(name);\n\n            symbol.addDeclaration(decl);\n            decl.setSymbol(symbol);\n\n            symbol.setResolved();\n\n            if (globalDecl) {\n                globalDecl.addChildDecl(decl);\n            }\n\n            return symbol;\n        }\n\n        public addPrimitiveValue(name: string, type: PullTypeSymbol, globalDecl: PullDecl) {\n            var span = new TextSpan(0, 0);\n            var decl = new PullDecl(name, name, PullElementKind.Variable, PullElementFlags.Ambient, span, \"\");\n            var symbol = new PullSymbol(name, PullElementKind.Variable);\n\n            symbol.addDeclaration(decl);\n            decl.setSymbol(symbol);\n            symbol.setType(type);\n            symbol.setResolved();\n\n            globalDecl.addChildDecl(decl);\n        }\n\n        constructor() {\n            var span = new TextSpan(0, 0);\n            var globalDecl = new PullDecl(\"\", \"\", PullElementKind.Global, PullElementFlags.None, span, \"\");\n            var globalInfo = this.units[0];\n            globalInfo.addTopLevelDecl(globalDecl);\n\n            // add primitive types\n            this.anyTypeSymbol = this.addPrimitiveType(\"any\", globalDecl);\n            this.booleanTypeSymbol = this.addPrimitiveType(\"boolean\", globalDecl);\n            this.numberTypeSymbol = this.addPrimitiveType(\"number\", globalDecl);\n            this.stringTypeSymbol = this.addPrimitiveType(\"string\", globalDecl);\n            this.voidTypeSymbol = this.addPrimitiveType(\"void\", globalDecl);\n            this.elementTypeSymbol = this.addPrimitiveType(\"_element\", globalDecl);\n\n            // add the global primitive values for \"null\" and \"undefined\"\n            this.nullTypeSymbol = this.addPrimitiveType(\"null\", null);\n            this.undefinedTypeSymbol = this.addPrimitiveType(\"undefined\", null);\n            this.addPrimitiveValue(\"undefined\", this.undefinedTypeSymbol, globalDecl);\n            this.addPrimitiveValue(\"null\", this.nullTypeSymbol, globalDecl);\n        }\n\n        public addUnit(unit: SemanticInfo) {\n            this.units[this.units.length] = unit;\n            this.unitCache[unit.getPath()] = unit;\n        }\n\n        public getUnit(compilationUnitPath: string) {\n            // PULLTODO: Replace this with a hash so we don\'t have a linear walk going on here.\n            for (var i = 0; i < this.units.length; i++) {\n                if (this.units[i].getPath() === compilationUnitPath) {\n                    return this.units[i];\n                }\n            }\n\n            return null;\n        }\n\n        // PULLTODO: compilationUnitPath is only really there for debug purposes\n        public updateUnit(oldUnit: SemanticInfo, newUnit: SemanticInfo) {\n            for (var i = 0; i < this.units.length; i++) {\n                if (this.units[i].getPath() === oldUnit.getPath()) {\n                    this.units[i] = newUnit;\n                    this.unitCache[oldUnit.getPath()] = newUnit;\n                    return;\n                }\n            }\n        }\n\n        private collectAllTopLevelDecls() {\n            var decls: PullDecl[] = [];\n            var unitDecls: PullDecl[];\n\n            for (var i = 0; i < this.units.length; i++) {\n                unitDecls = this.units[i].getTopLevelDecls();\n                for (var j = 0; j < unitDecls.length; j++) {\n                    decls[decls.length] = unitDecls[j];\n                }\n            }\n\n            return decls;\n        }\n\n        private getDeclPathCacheID(declPath: string[], declKind: PullElementKind) {\n            var cacheID = \"\";\n\n            for (var i = 0; i < declPath.length; i++) {\n                cacheID += \"#\" + declPath[i];\n            }\n\n            return cacheID + \"#\" + declKind.toString();\n        }\n\n        // a decl path is a list of decls that reference the components of a declaration from the global scope down\n        // E.g., string would be \"[\'string\']\" and \"A.B.C\" would be \"[\'A\',\'B\',\'C\']\"\n        public findDecls(declPath: string[], declKind: PullElementKind): PullDecl[] {\n\n            var cacheID = this.getDeclPathCacheID(declPath, declKind);\n\n            if (declPath.length) {\n                var cachedDecls = this.declCache[cacheID];\n\n                if (cachedDecls && cachedDecls.length) {\n                    declCacheHit++;\n                    return <PullDecl[]> cachedDecls;\n                }\n            }\n\n            declCacheMiss++;\n\n            var declsToSearch = this.collectAllTopLevelDecls();\n\n            var decls: PullDecl[] = [];\n            var path: string;\n            var foundDecls: PullDecl[] = [];\n            var keepSearching = (declKind & PullElementKind.Container) || (declKind & PullElementKind.Interface);\n\n            for (var i = 0; i < declPath.length; i++) {\n                path = declPath[i];\n                decls = [];\n\n                for (var j = 0; j < declsToSearch.length; j++) {\n                    var kind = (i === declPath.length - 1) ? declKind : PullElementKind.SomeType;\n                    foundDecls = declsToSearch[j].searchChildDecls(path, (kind & PullElementKind.SomeType) !== 0);\n\n                    for (var k = 0; k < foundDecls.length; k++) {\n                        decls[decls.length] = foundDecls[k];\n                    }\n\n                    // Unless we\'re searching for an interface or module, we\'ve found the one true\n                    // decl, so don\'t bother searching the rest of the top-level decls\n                    if (foundDecls.length && !keepSearching) {\n                        break;\n                    }\n                }\n\n                declsToSearch = decls;\n\n                if (!declsToSearch) {\n                    break;\n                }\n            }\n\n            if (decls.length) {\n                this.declCache[cacheID] = decls;\n            }\n\n            return decls;\n        }\n\n        public findSymbol(declPath: string[], declType: PullElementKind): PullSymbol {\n\n            var cacheID = this.getDeclPathCacheID(declPath, declType);\n\n            if (declPath.length) {\n\n                var cachedSymbol = this.symbolCache[cacheID];\n\n                if (cachedSymbol) {\n                    symbolCacheHit++;\n                    return cachedSymbol;\n                }\n            }\n\n            symbolCacheMiss++;\n\n            // symbol wasn\'t cached, so get the decl\n            var decls: PullDecl[] = this.findDecls(declPath, declType);\n            var symbol: PullSymbol = null;\n\n            if (decls.length) {\n                symbol = decls[0].getSymbol();\n\n                if (symbol) {\n                    this.symbolCache[cacheID] = symbol;\n\n                    symbol.addCacheID(cacheID);\n                }\n            }\n\n            return symbol;\n        }\n\n        public update(compilationUnitPath: string) {\n\n            // PULLTODO: Be less aggressive about clearing the cache\n            this.declCache = <any>new BlockIntrinsics();\n            //this.symbolCache = <any>{};\n            var unit = this.unitCache[compilationUnitPath];\n            if (unit) {\n                unit.invalidate();\n            }\n        }\n\n        public invalidateUnit(compilationUnitPath: string) {\n            var unit = this.unitCache[compilationUnitPath];\n            if (unit) {\n                unit.invalidate();\n            }\n        }\n\n        public getDeclForAST(ast: AST, unitPath: string): PullDecl {\n            var unit = <SemanticInfo>this.unitCache[unitPath];\n\n            if (unit) {\n                return unit.getDeclForAST(ast);\n            }\n\n            return null;\n        }\n\n        public getASTForDecl(decl: PullDecl): AST {\n            var unit = <SemanticInfo>this.unitCache[decl.getScriptName()];\n\n            if (unit) {\n                return unit.getASTForDecl(decl);\n            }\n\n            return null;\n        }\n\n        public getSymbolAndDiagnosticsForAST(ast: AST, unitPath: string): SymbolAndDiagnostics<PullSymbol> {\n            var unit = <SemanticInfo>this.unitCache[unitPath];\n\n            if (unit) {\n                return unit.getSymbolAndDiagnosticsForAST(ast);\n            }\n\n            return null;\n        }\n\n        public getASTForSymbol(symbol: PullSymbol, unitPath: string) {\n            var unit = <SemanticInfo>this.unitCache[unitPath];\n\n            if (unit) {\n                return unit.getASTForSymbol(symbol);\n            }\n\n            return null;\n        }\n\n        public setSymbolAndDiagnosticsForAST(ast: AST, symbolAndDiagnostics: SymbolAndDiagnostics, unitPath: string): void {\n            var unit = <SemanticInfo>this.unitCache[unitPath];\n\n            if (unit) {\n                unit.setSymbolAndDiagnosticsForAST(ast, symbolAndDiagnostics);\n            }\n        }\n\n        public removeSymbolFromCache(symbol: PullSymbol) {\n\n            var path = [symbol.getName()];\n            var kind = (symbol.getKind() & PullElementKind.SomeType) !== 0 ? PullElementKind.SomeType : PullElementKind.SomeValue;\n\n            var kindID = this.getDeclPathCacheID(path, kind);\n            var symID = this.getDeclPathCacheID(path, symbol.getKind());\n\n            symbol.addCacheID(kindID);\n            symbol.addCacheID(symID);\n\n            symbol.invalidateCachedIDs(this.symbolCache);\n        }\n\n        public postDiagnostics(): IDiagnostic[] {\n            var errors: IDiagnostic[] = [];\n\n            // PULLTODO: Why are we indexing from 1?\n            for (var i = 1; i < this.units.length; i++) {\n                this.units[i].getDiagnostics(errors);\n            }\n\n            return errors;\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export class DeclCollectionContext {\n        public parentChain: PullDecl[] = [];\n\n        constructor(public semanticInfo: SemanticInfo, public scriptName = \"\") {\n        }\n\n        public getParent() { return this.parentChain ? this.parentChain[this.parentChain.length - 1] : null; }\n\n        public pushParent(parentDecl: PullDecl) { if (parentDecl) { this.parentChain[this.parentChain.length] = parentDecl; } }\n\n        public popParent() { this.parentChain.length--; }\n\n        public foundValueDecl = false;\n\n    }\n\n    export function preCollectImportDecls(ast: AST, parentAST: AST, context: DeclCollectionContext) {\n        var importDecl = <ImportDeclaration>ast;\n        var declFlags = PullElementFlags.None;\n        var span = TextSpan.fromBounds(importDecl.minChar, importDecl.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(importDecl.id.text, importDecl.id.actualText, PullElementKind.TypeAlias, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(ast, decl);\n        context.semanticInfo.setASTForDecl(decl, ast);\n\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        return false;\n    }\n\n    export function preCollectModuleDecls(ast: AST, parentAST: AST, context: DeclCollectionContext) {\n        var moduleDecl: ModuleDeclaration = <ModuleDeclaration>ast;\n        var declFlags = PullElementFlags.None;\n        var modName = (<Identifier>moduleDecl.name).text;\n        var isDynamic = isQuoted(modName) || hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsDynamic);\n        var kind: PullElementKind = PullElementKind.Container;\n\n        if (hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.Ambient)) {\n            declFlags |= PullElementFlags.Ambient;\n        }\n\n        if (hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.Exported)) {\n            declFlags |= PullElementFlags.Exported;\n        }\n\n        if (hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsEnum)) {\n            // Consider an enum \'always initialized\'.\n            declFlags |= (PullElementFlags.Enum | PullElementFlags.InitializedEnum);\n            kind = PullElementKind.Enum;\n        }\n        else {\n            kind = isDynamic ? PullElementKind.DynamicModule : PullElementKind.Container;\n        }\n\n        var span = TextSpan.fromBounds(moduleDecl.minChar, moduleDecl.limChar);\n\n        var decl = new PullDecl(modName, (<Identifier>moduleDecl.name).actualText, kind, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(ast, decl);\n        context.semanticInfo.setASTForDecl(decl, ast);\n\n        var parent = context.getParent();\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        context.pushParent(decl);\n\n        return true;\n    }\n\n    export function preCollectClassDecls(classDecl: ClassDeclaration, parentAST: AST, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var constructorDeclKind = PullElementKind.Variable;\n\n        if (hasFlag(classDecl.getVarFlags(), VariableFlags.Ambient)) {\n            declFlags |= PullElementFlags.Ambient;\n        }\n\n        if (hasFlag(classDecl.getVarFlags(), VariableFlags.Exported)) {\n            declFlags |= PullElementFlags.Exported;\n        }\n\n        var span = TextSpan.fromBounds(classDecl.minChar, classDecl.limChar);\n\n        var decl = new PullDecl(classDecl.name.text, classDecl.name.actualText, PullElementKind.Class, declFlags, span, context.scriptName);\n\n        var constructorDecl = new PullDecl(classDecl.name.text, classDecl.name.actualText, constructorDeclKind, declFlags | PullElementFlags.ClassConstructorVariable, span, context.scriptName);\n\n        decl.setValueDecl(constructorDecl);\n\n        var parent = context.getParent();\n        parent.addChildDecl(decl);\n        parent.addChildDecl(constructorDecl);\n        decl.setParentDecl(parent);\n        constructorDecl.setParentDecl(parent);\n\n        context.pushParent(decl);\n\n        context.semanticInfo.setDeclForAST(classDecl, decl);\n        context.semanticInfo.setASTForDecl(decl, classDecl);\n        context.semanticInfo.setASTForDecl(constructorDecl, classDecl);\n\n        return true;\n    }\n\n    export function createObjectTypeDeclaration(interfaceDecl: InterfaceDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n\n        var span = TextSpan.fromBounds(interfaceDecl.minChar, interfaceDecl.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(\"\", \"\", PullElementKind.ObjectType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(interfaceDecl, decl);\n        context.semanticInfo.setASTForDecl(decl, interfaceDecl);\n\n        // if we\'re collecting a decl for a type annotation, we don\'t want to add the decl to the parent scope\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        return true;\n    }\n\n    export function preCollectInterfaceDecls(interfaceDecl: InterfaceDeclaration, parentAST: AST, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n\n        // PULLTODO\n        if (interfaceDecl.getFlags() & ASTFlags.TypeReference) {\n            return createObjectTypeDeclaration(interfaceDecl, context);\n        }\n\n        if (hasFlag(interfaceDecl.getVarFlags(), VariableFlags.Exported)) {\n            declFlags |= PullElementFlags.Exported;\n        }\n\n        var span = TextSpan.fromBounds(interfaceDecl.minChar, interfaceDecl.limChar);\n\n        var decl = new PullDecl(interfaceDecl.name.text, interfaceDecl.name.actualText, PullElementKind.Interface, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(interfaceDecl, decl);\n        context.semanticInfo.setASTForDecl(decl, interfaceDecl);\n\n        var parent = context.getParent();\n\n        // if we\'re collecting a decl for a type annotation, we don\'t want to add the decl to the parent scope\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        return true;\n    }\n\n    export function preCollectParameterDecl(argDecl: Parameter, parentAST: AST, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n\n        if (hasFlag(argDecl.getVarFlags(), VariableFlags.Private)) {\n            declFlags |= PullElementFlags.Private;\n        }\n        else {\n            declFlags |= PullElementFlags.Public;\n        }\n\n        if (hasFlag(argDecl.getFlags(), ASTFlags.OptionalName) || hasFlag(argDecl.id.getFlags(), ASTFlags.OptionalName)) {\n            declFlags |= PullElementFlags.Optional;\n        }\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var span = TextSpan.fromBounds(argDecl.minChar, argDecl.limChar);\n\n        var decl = new PullDecl(argDecl.id.text, argDecl.id.actualText, PullElementKind.Parameter, declFlags, span, context.scriptName);\n\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        // if it\'s a property type, we\'ll need to add it to the parent\'s parent as well\n        if (hasFlag(argDecl.getVarFlags(), VariableFlags.Property)) {\n            var propDecl = new PullDecl(argDecl.id.text, argDecl.id.actualText, PullElementKind.Property, declFlags, span, context.scriptName);\n            propDecl.setValueDecl(decl);\n            context.parentChain[context.parentChain.length - 2].addChildDecl(propDecl);\n            propDecl.setParentDecl(context.parentChain[context.parentChain.length - 2]);\n            context.semanticInfo.setASTForDecl(decl, argDecl);\n            context.semanticInfo.setASTForDecl(propDecl, argDecl);\n            context.semanticInfo.setDeclForAST(argDecl, propDecl);\n        }\n        else {\n            context.semanticInfo.setASTForDecl(decl, argDecl);\n            context.semanticInfo.setDeclForAST(argDecl, decl);\n        }\n\n        if (argDecl.typeExpr &&\n            ((<TypeReference>argDecl.typeExpr).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>argDecl.typeExpr).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>argDecl.typeExpr).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return false;\n    }\n\n    export function preCollectTypeParameterDecl(typeParameterDecl: TypeParameter, parentAST: AST, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n\n        var span = TextSpan.fromBounds(typeParameterDecl.minChar, typeParameterDecl.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(typeParameterDecl.name.text, typeParameterDecl.name.actualText, PullElementKind.TypeParameter, declFlags, span, context.scriptName);\n        context.semanticInfo.setASTForDecl(decl, typeParameterDecl);\n        context.semanticInfo.setDeclForAST(typeParameterDecl, decl);\n\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        if (typeParameterDecl.constraint &&\n            ((<TypeReference>typeParameterDecl.constraint).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>typeParameterDecl.constraint).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>typeParameterDecl.constraint).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // interface properties\n    export function createPropertySignature(propertyDecl: VariableDeclarator, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Public;\n        var parent = context.getParent();\n        var declType = parent.getKind() === PullElementKind.Enum ? PullElementKind.EnumMember : PullElementKind.Property;\n\n        if (hasFlag(propertyDecl.id.getFlags(), ASTFlags.OptionalName)) {\n            declFlags |= PullElementFlags.Optional;\n        }\n\n        if (hasFlag(propertyDecl.getVarFlags(), VariableFlags.Constant)) {\n            declFlags |= PullElementFlags.Constant;\n        }\n\n        var span = TextSpan.fromBounds(propertyDecl.minChar, propertyDecl.limChar);\n\n        var decl = new PullDecl(propertyDecl.id.text, propertyDecl.id.actualText, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(propertyDecl, decl);\n        context.semanticInfo.setASTForDecl(decl, propertyDecl);\n\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        if (propertyDecl.typeExpr &&\n            ((<TypeReference>propertyDecl.typeExpr).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>propertyDecl.typeExpr).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>propertyDecl.typeExpr).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return false;\n    }\n\n    // class member variables\n    export function createMemberVariableDeclaration(memberDecl: VariableDeclarator, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.Property;\n\n        if (hasFlag(memberDecl.getVarFlags(), VariableFlags.Private)) {\n            declFlags |= PullElementFlags.Private;\n        }\n        else {\n            declFlags |= PullElementFlags.Public;\n        }\n\n        if (hasFlag(memberDecl.getVarFlags(), VariableFlags.Static)) {\n            declFlags |= PullElementFlags.Static;\n        }\n\n        var span = TextSpan.fromBounds(memberDecl.minChar, memberDecl.limChar);\n\n        var decl = new PullDecl(memberDecl.id.text, memberDecl.id.actualText, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(memberDecl, decl);\n        context.semanticInfo.setASTForDecl(decl, memberDecl);\n\n        var parent = context.getParent();\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        if (memberDecl.typeExpr &&\n            ((<TypeReference>memberDecl.typeExpr).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>memberDecl.typeExpr).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>memberDecl.typeExpr).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return false;\n    }\n\n    export function createVariableDeclaration(varDecl: VariableDeclarator, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.Variable;\n\n        if (hasFlag(varDecl.getVarFlags(), VariableFlags.Ambient)) {\n            declFlags |= PullElementFlags.Ambient;\n        }\n\n        if (hasFlag(varDecl.getVarFlags(), VariableFlags.Exported)) {\n            declFlags |= PullElementFlags.Exported;\n        }\n\n        var span = TextSpan.fromBounds(varDecl.minChar, varDecl.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(varDecl.id.text, varDecl.id.actualText, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(varDecl, decl);\n        context.semanticInfo.setASTForDecl(decl, varDecl);\n\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        if (varDecl.typeExpr &&\n            ((<TypeReference>varDecl.typeExpr).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>varDecl.typeExpr).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>varDecl.typeExpr).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return false;\n    }\n\n    export function preCollectVarDecls(ast: AST, parentAST: AST, context: DeclCollectionContext) {\n        var varDecl = <VariableDeclarator>ast;\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.Variable;\n        var isProperty = false;\n        var isStatic = false;\n\n        if (hasFlag(varDecl.getVarFlags(), VariableFlags.ClassProperty)) {\n            return createMemberVariableDeclaration(varDecl, context);\n        }\n        else if (hasFlag(varDecl.getVarFlags(), VariableFlags.Property)) {\n            return createPropertySignature(varDecl, context);\n        }\n\n        return createVariableDeclaration(varDecl, context);\n    }\n\n    // function type expressions\n    export function createFunctionTypeDeclaration(functionTypeDeclAST: FunctionDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Signature;\n        var declType = PullElementKind.FunctionType;\n\n        var span = TextSpan.fromBounds(functionTypeDeclAST.minChar, functionTypeDeclAST.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(\"\", \"\", declType, declFlags, span, context.semanticInfo.getPath());\n        context.semanticInfo.setDeclForAST(functionTypeDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, functionTypeDeclAST);\n\n        // parent could be null if we\'re collecting decls for a lambda expression\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (functionTypeDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>functionTypeDeclAST.returnTypeAnnotation).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>functionTypeDeclAST.returnTypeAnnotation).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>functionTypeDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // constructor types\n    export function createConstructorTypeDeclaration(constructorTypeDeclAST: FunctionDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.ConstructorType;\n\n        var span = TextSpan.fromBounds(constructorTypeDeclAST.minChar, constructorTypeDeclAST.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(\"{new}\", \"{new}\", declType, declFlags, span, context.semanticInfo.getPath());\n        context.semanticInfo.setDeclForAST(constructorTypeDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, constructorTypeDeclAST);\n\n        // parent could be null if we\'re collecting decls for a lambda expression\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (constructorTypeDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>constructorTypeDeclAST.returnTypeAnnotation).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>constructorTypeDeclAST.returnTypeAnnotation).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>constructorTypeDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // function declaration\n    export function createFunctionDeclaration(funcDeclAST: FunctionDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.Function;\n\n        if (hasFlag(funcDeclAST.getFunctionFlags(), FunctionFlags.Ambient)) {\n            declFlags |= PullElementFlags.Ambient;\n        }\n\n        if (hasFlag(funcDeclAST.getFunctionFlags(), FunctionFlags.Exported)) {\n            declFlags |= PullElementFlags.Exported;\n        }\n\n        if (!funcDeclAST.block) {\n            declFlags |= PullElementFlags.Signature;\n        }\n\n        var span = TextSpan.fromBounds(funcDeclAST.minChar, funcDeclAST.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(funcDeclAST.name.text, funcDeclAST.name.actualText, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(funcDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, funcDeclAST);\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (funcDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>funcDeclAST.returnTypeAnnotation).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>funcDeclAST.returnTypeAnnotation).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>funcDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // function expression\n    export function createFunctionExpressionDeclaration(functionExpressionDeclAST: FunctionDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n\n        if (hasFlag(functionExpressionDeclAST.getFunctionFlags(), FunctionFlags.IsFatArrowFunction)) {\n            declFlags |= PullElementFlags.FatArrow;\n        }\n\n        var span = TextSpan.fromBounds(functionExpressionDeclAST.minChar, functionExpressionDeclAST.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var name = functionExpressionDeclAST.name ? functionExpressionDeclAST.name.actualText : \"\";\n        var decl = new PullFunctionExpressionDecl(name, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(functionExpressionDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, functionExpressionDeclAST);\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (functionExpressionDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>functionExpressionDeclAST.returnTypeAnnotation).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>functionExpressionDeclAST.returnTypeAnnotation).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>functionExpressionDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // methods\n    export function createMemberFunctionDeclaration(memberFunctionDeclAST: FunctionDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.Method;\n\n        if (hasFlag(memberFunctionDeclAST.getFunctionFlags(), FunctionFlags.Static)) {\n            declFlags |= PullElementFlags.Static;\n        }\n\n        if (hasFlag(memberFunctionDeclAST.getFunctionFlags(), FunctionFlags.Private)) {\n            declFlags |= PullElementFlags.Private;\n        }\n        else {\n            declFlags |= PullElementFlags.Public;\n        }\n\n        if (!memberFunctionDeclAST.block) {\n            declFlags |= PullElementFlags.Signature;\n        }\n\n        if (hasFlag(memberFunctionDeclAST.name.getFlags(), ASTFlags.OptionalName)) {\n            declFlags |= PullElementFlags.Optional;\n        }\n\n        var span = TextSpan.fromBounds(memberFunctionDeclAST.minChar, memberFunctionDeclAST.limChar);\n\n        var decl = new PullDecl(memberFunctionDeclAST.name.text, memberFunctionDeclAST.name.actualText, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(memberFunctionDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, memberFunctionDeclAST);\n\n        var parent = context.getParent();\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (memberFunctionDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>memberFunctionDeclAST.returnTypeAnnotation).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>memberFunctionDeclAST.returnTypeAnnotation).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>memberFunctionDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // index signatures\n    export function createIndexSignatureDeclaration(indexSignatureDeclAST: FunctionDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Signature | PullElementFlags.Index;\n        var declType = PullElementKind.IndexSignature;\n\n        var span = TextSpan.fromBounds(indexSignatureDeclAST.minChar, indexSignatureDeclAST.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(\"[]\", \"[]\" , declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(indexSignatureDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, indexSignatureDeclAST);\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (indexSignatureDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>indexSignatureDeclAST.returnTypeAnnotation).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>indexSignatureDeclAST.returnTypeAnnotation).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>indexSignatureDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // call signatures\n    export function createCallSignatureDeclaration(callSignatureDeclAST: FunctionDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Signature | PullElementFlags.Call;\n        var declType = PullElementKind.CallSignature;\n\n        var span = TextSpan.fromBounds(callSignatureDeclAST.minChar, callSignatureDeclAST.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(\"()\", \"()\", declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(callSignatureDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, callSignatureDeclAST);\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (callSignatureDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>callSignatureDeclAST.returnTypeAnnotation).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>callSignatureDeclAST.returnTypeAnnotation).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>callSignatureDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // construct signatures\n    export function createConstructSignatureDeclaration(constructSignatureDeclAST: FunctionDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Signature | PullElementFlags.Call;\n        var declType = PullElementKind.ConstructSignature;\n\n        var span = TextSpan.fromBounds(constructSignatureDeclAST.minChar, constructSignatureDeclAST.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(\"new\", \"new\", declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(constructSignatureDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, constructSignatureDeclAST);\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (constructSignatureDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>constructSignatureDeclAST.returnTypeAnnotation).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>constructSignatureDeclAST.returnTypeAnnotation).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>constructSignatureDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // class constructors\n    export function createClassConstructorDeclaration(constructorDeclAST: FunctionDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Constructor;\n        var declType = PullElementKind.ConstructorMethod;\n\n        if (!constructorDeclAST.block) {\n            declFlags |= PullElementFlags.Signature;\n        }\n\n        var span = TextSpan.fromBounds(constructorDeclAST.minChar, constructorDeclAST.limChar);\n\n        var parent = context.getParent();\n\n        if (parent) {\n            // if the parent is exported, the constructor decl must be as well\n            var parentFlags = parent.getFlags();\n\n            if (parentFlags & PullElementFlags.Exported) {\n                declFlags |= PullElementFlags.Exported;\n            }\n        }\n\n        var decl = new PullDecl(parent.getName(), parent.getDisplayName(), declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(constructorDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, constructorDeclAST);\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (constructorDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>constructorDeclAST.returnTypeAnnotation).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>constructorDeclAST.returnTypeAnnotation).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>constructorDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    export function createGetAccessorDeclaration(getAccessorDeclAST: FunctionDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Public;\n        var declType = PullElementKind.GetAccessor;\n\n        if (hasFlag(getAccessorDeclAST.getFunctionFlags(), FunctionFlags.Static)) {\n            declFlags |= PullElementFlags.Static;\n        }\n\n        if (hasFlag(getAccessorDeclAST.name.getFlags(), ASTFlags.OptionalName)) {\n            declFlags |= PullElementFlags.Optional;\n        }\n\n        if (hasFlag(getAccessorDeclAST.getFunctionFlags(), FunctionFlags.Private)) {\n            declFlags |= PullElementFlags.Private;\n        }\n        else {\n            declFlags |= PullElementFlags.Public;\n        }        \n\n        var span = TextSpan.fromBounds(getAccessorDeclAST.minChar, getAccessorDeclAST.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(getAccessorDeclAST.name.text, getAccessorDeclAST.name.actualText, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(getAccessorDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, getAccessorDeclAST);\n\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (getAccessorDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>getAccessorDeclAST.returnTypeAnnotation).term.nodeType === NodeType.InterfaceDeclaration ||\n            (<TypeReference>getAccessorDeclAST.returnTypeAnnotation).term.nodeType === NodeType.FunctionDeclaration)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>getAccessorDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // set accessors\n    export function createSetAccessorDeclaration(setAccessorDeclAST: FunctionDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Public;\n        var declType = PullElementKind.SetAccessor;\n\n        if (hasFlag(setAccessorDeclAST.getFunctionFlags(), FunctionFlags.Static)) {\n            declFlags |= PullElementFlags.Static;\n        }\n\n        if (hasFlag(setAccessorDeclAST.name.getFlags(), ASTFlags.OptionalName)) {\n            declFlags |= PullElementFlags.Optional;\n        }\n\n        if (hasFlag(setAccessorDeclAST.getFunctionFlags(), FunctionFlags.Private)) {\n            declFlags |= PullElementFlags.Private;\n        }\n        else {\n            declFlags |= PullElementFlags.Public;\n        }         \n\n        var span = TextSpan.fromBounds(setAccessorDeclAST.minChar, setAccessorDeclAST.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(setAccessorDeclAST.name.actualText, setAccessorDeclAST.name.actualText, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(setAccessorDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, setAccessorDeclAST);\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        return true;\n    }\n\n    export function preCollectCatchDecls(ast: AST, parentAST: AST, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.CatchBlock;\n\n        var span = TextSpan.fromBounds(ast.minChar, ast.limChar);\n\n        var parent = context.getParent();\n\n        if (parent && (parent.getKind() === PullElementKind.WithBlock || (parent.getFlags() & PullElementFlags.DeclaredInAWithBlock))) {\n            declFlags |= PullElementFlags.DeclaredInAWithBlock;\n        }\n\n        var decl = new PullDecl(\"\", \"\", declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(ast, decl);\n        context.semanticInfo.setASTForDecl(decl, ast);\n\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        return true;\n    }\n\n    export function preCollectWithDecls(ast: AST, parentAST: AST, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.WithBlock;\n\n        var span = TextSpan.fromBounds(ast.minChar, ast.limChar);\n\n        var parent = context.getParent();\n\n        var decl = new PullDecl(\"\", \"\", declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(ast, decl);\n        context.semanticInfo.setASTForDecl(decl, ast);\n\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        return true;\n    }\n\n    export function preCollectFuncDecls(ast: AST, parentAST: AST, context: DeclCollectionContext) {\n\n        var funcDecl = <FunctionDeclaration>ast;\n\n        if (funcDecl.isConstructor) {\n            return createClassConstructorDeclaration(funcDecl, context);\n        }\n        else if (funcDecl.isGetAccessor()) {\n            return createGetAccessorDeclaration(funcDecl, context);\n        }\n        else if (funcDecl.isSetAccessor()) {\n            return createSetAccessorDeclaration(funcDecl, context);\n        }\n        else if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ConstructMember)) {\n            return hasFlag(funcDecl.getFlags(), ASTFlags.TypeReference) ?\n                createConstructorTypeDeclaration(funcDecl, context) :\n                createConstructSignatureDeclaration(funcDecl, context);\n        }\n        else if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.CallMember)) {\n            return createCallSignatureDeclaration(funcDecl, context);\n        }\n        else if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.IndexerMember)) {\n            return createIndexSignatureDeclaration(funcDecl, context);\n        }\n        else if (hasFlag(funcDecl.getFlags(), ASTFlags.TypeReference)) {\n            return createFunctionTypeDeclaration(funcDecl, context);\n        }\n        else if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Method)) {\n            return createMemberFunctionDeclaration(funcDecl, context);\n        }\n        else if (hasFlag(funcDecl.getFunctionFlags(), (FunctionFlags.IsFunctionExpression | FunctionFlags.IsFatArrowFunction))) {\n            return createFunctionExpressionDeclaration(funcDecl, context);\n        }\n\n        return createFunctionDeclaration(funcDecl, context);\n    }\n\n    export function preCollectDecls(ast: AST, parentAST: AST, walker: IAstWalker) {\n        var context: DeclCollectionContext = walker.state;\n        var go = false;\n\n        if (ast.nodeType === NodeType.Script) {\n            var script: Script = <Script>ast;\n            var span = TextSpan.fromBounds(script.minChar, script.limChar);\n\n            var decl = new PullDecl(context.scriptName, context.scriptName, PullElementKind.Script, PullElementFlags.None, span, context.scriptName);\n            context.semanticInfo.setDeclForAST(ast, decl);\n            context.semanticInfo.setASTForDecl(decl, ast);\n\n            context.pushParent(decl);\n\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.List) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.Block) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.VariableDeclaration) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.VariableStatement) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.ModuleDeclaration) {\n            go = preCollectModuleDecls(ast, parentAST, context);\n        }\n        else if (ast.nodeType === NodeType.ClassDeclaration) {\n            go = preCollectClassDecls(<ClassDeclaration>ast, parentAST, context);\n        }\n        else if (ast.nodeType === NodeType.InterfaceDeclaration) {\n            go = preCollectInterfaceDecls(<InterfaceDeclaration>ast, parentAST, context);\n        }\n        else if (ast.nodeType === NodeType.Parameter) {\n            go = preCollectParameterDecl(<Parameter>ast, parentAST, context);\n        }\n        else if (ast.nodeType === NodeType.VariableDeclarator) {\n            go = preCollectVarDecls(ast, parentAST, context);\n        }\n        else if (ast.nodeType === NodeType.FunctionDeclaration) {\n            go = preCollectFuncDecls(ast, parentAST, context);\n        }\n        else if (ast.nodeType === NodeType.ImportDeclaration) {\n            go = preCollectImportDecls(ast, parentAST, context);\n        }\n        else if (ast.nodeType === NodeType.TypeParameter) {\n            go = preCollectTypeParameterDecl(<TypeParameter>ast, parentAST, context);\n        }\n        else if (ast.nodeType === NodeType.IfStatement) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.ForStatement) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.ForInStatement) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.WhileStatement) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.DoStatement) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.CommaExpression) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.ReturnStatement) {\n            // want to be able to bind lambdas in return positions\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.SwitchStatement || ast.nodeType === NodeType.CaseClause) {\n            go = true;\n        }\n\n        // call and \'new\' expressions may contain lambdas with bindings...\n        else if (ast.nodeType === NodeType.InvocationExpression) {\n            // want to be able to bind lambdas in return positions\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.ObjectCreationExpression) {\n            // want to be able to bind lambdas in return positions\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.TryStatement) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.LabeledStatement) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.CatchClause) {\n            go = preCollectCatchDecls(ast, parentAST, context);\n        }\n        else if (ast.nodeType === NodeType.WithStatement) {\n            go = preCollectWithDecls(ast, parentAST, context);\n        }\n\n        walker.options.goChildren = go;\n\n        return ast;\n    }\n\n    function isContainer(decl: PullDecl): boolean {\n        return decl.getKind() === PullElementKind.Container || decl.getKind() === PullElementKind.DynamicModule || decl.getKind() === PullElementKind.Enum;\n    }\n\n    function getInitializationFlag(decl: PullDecl): PullElementFlags {\n        if (decl.getKind() & PullElementKind.Container) {\n            return PullElementFlags.InitializedModule;\n        }\n        else if (decl.getKind() & PullElementKind.Enum) {\n            return PullElementFlags.InitializedEnum;\n        }\n        else if (decl.getKind() & PullElementKind.DynamicModule) {\n            return PullElementFlags.InitializedDynamicModule;\n        }\n\n        return PullElementFlags.None;\n    }\n\n    function hasInitializationFlag(decl: PullDecl): boolean {\n        var kind = decl.getKind();\n\n        if (kind & PullElementKind.Container) {\n            return (decl.getFlags() & PullElementFlags.InitializedModule) !== 0;\n        }\n        else if (kind & PullElementKind.Enum) {\n            return (decl.getFlags() & PullElementFlags.InitializedEnum) != 0;\n        }\n        else if (kind & PullElementKind.DynamicModule) {\n            return (decl.getFlags() & PullElementFlags.InitializedDynamicModule) !== 0;\n        }\n\n        return false;\n    }\n\n    export function postCollectDecls(ast: AST, parentAST: AST, walker: IAstWalker) {\n        var context: DeclCollectionContext = walker.state;\n        var parentDecl: PullDecl;\n        var initFlag = PullElementFlags.None;\n\n        // Note that we never pop the Script - after the traversal, it should be the\n        // one parent left in the context\n\n\n        if (ast.nodeType === NodeType.ModuleDeclaration) {\n            var thisModule = context.getParent();\n            context.popParent();\n            parentDecl = context.getParent();\n\n            if (hasInitializationFlag(thisModule)) {\n\n                if (parentDecl && isContainer(parentDecl)) {\n                    initFlag = getInitializationFlag(parentDecl);\n                    parentDecl.setFlags(parentDecl.getFlags() | initFlag);\n                }\n\n                // create the value decl\n                var valueDecl = new PullDecl(thisModule.getName(), thisModule.getDisplayName(), PullElementKind.Variable, thisModule.getFlags(), thisModule.getSpan(), context.scriptName);\n\n                thisModule.setValueDecl(valueDecl);\n\n                context.semanticInfo.setASTForDecl(valueDecl, ast);\n\n                if (parentDecl) {\n                    parentDecl.addChildDecl(valueDecl);\n                    valueDecl.setParentDecl(parentDecl);\n                }\n            }\n        }\n        else if (ast.nodeType === NodeType.ClassDeclaration) {\n            context.popParent();\n\n            parentDecl = context.getParent();\n\n            if (parentDecl && isContainer(parentDecl)) {\n                initFlag = getInitializationFlag(parentDecl);\n                parentDecl.setFlags(parentDecl.getFlags() | initFlag);\n            }\n        }\n        else if (ast.nodeType === NodeType.InterfaceDeclaration) {\n            context.popParent();\n        }\n        else if (ast.nodeType === NodeType.FunctionDeclaration) {\n            context.popParent();\n\n            parentDecl = context.getParent();\n\n            if (parentDecl && isContainer(parentDecl)) {\n                initFlag = getInitializationFlag(parentDecl);\n                parentDecl.setFlags(parentDecl.getFlags() | initFlag);\n            }\n        }\n        else if (ast.nodeType === NodeType.VariableDeclarator) { // PULLREVIEW: What if we just have a for loop in a module body?\n            parentDecl = context.getParent();\n\n            if (parentDecl && isContainer(parentDecl)) {\n                initFlag = getInitializationFlag(parentDecl);\n                parentDecl.setFlags(parentDecl.getFlags() | initFlag);\n            }\n        }\n        else if (ast.nodeType === NodeType.CatchClause) {\n            parentDecl = context.getParent();\n\n            if (parentDecl && isContainer(parentDecl)) {\n                initFlag = getInitializationFlag(parentDecl);\n                parentDecl.setFlags(parentDecl.getFlags() | initFlag);\n            }\n\n            context.popParent();\n        }\n        else if (ast.nodeType === NodeType.WithStatement) {\n            parentDecl = context.getParent();\n\n            if (parentDecl && isContainer(parentDecl)) {\n                initFlag = getInitializationFlag(parentDecl);\n                parentDecl.setFlags(parentDecl.getFlags() | initFlag);\n            }\n\n            context.popParent();\n        }\n\n\n        return ast;\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export var globalBindingPhase = 0;\n\n    export class PullSymbolBinder {\n        private parentChain: PullTypeSymbol[] = [];\n        private parentDeclChain: PullDecl[] = [];\n        private declPath: string[] = [];\n\n        private bindingPhase = globalBindingPhase++;\n\n        private staticClassMembers: PullSymbol[] = [];\n\n        private functionTypeParameterCache: any = new BlockIntrinsics();\n\n        private findTypeParameterInCache(name: string) {\n            return <PullTypeParameterSymbol>this.functionTypeParameterCache[name];\n        }\n\n        private addTypeParameterToCache(typeParameter: PullTypeParameterSymbol) {\n            this.functionTypeParameterCache[typeParameter.getName()] = typeParameter;\n        }\n\n        private resetTypeParameterCache() {\n            this.functionTypeParameterCache = new BlockIntrinsics();\n        }\n\n        public semanticInfo: SemanticInfo;\n\n        public reBindingAfterChange = false;\n        public startingDeclForRebind = pullDeclID; // note that this gets set on creation\n        public startingSymbolForRebind = pullSymbolID; // note that this gets set on creation\n\n        constructor(private compilationSettings: CompilationSettings,\n                    public semanticInfoChain: SemanticInfoChain) {\n        }\n\n        public setUnit(fileName: string) {\n            this.semanticInfo = this.semanticInfoChain.getUnit(fileName);\n        }\n\n        public getParent(returnInstanceType = false): PullTypeSymbol {\n            var parent = this.parentChain ? this.parentChain[this.parentChain.length - 1] : null;\n\n            if (parent && parent.isContainer() && returnInstanceType) {\n                var instanceSymbol = (<PullContainerTypeSymbol>parent).getInstanceSymbol();\n\n                if (instanceSymbol) {\n                    parent = instanceSymbol.getType();\n                }\n            }\n\n            return parent;\n        }\n\n        public getParentDecl(): PullDecl {\n            return this.parentDeclChain.length ? this.parentDeclChain[this.parentDeclChain.length - 1] : null;\n        }\n\n        public getDeclPath() { return this.declPath; }\n\n        public pushParent(parentType: PullTypeSymbol, parentDecl: PullDecl) {\n            if (parentType) {\n                this.parentChain[this.parentChain.length] = parentType;\n                this.parentDeclChain[this.parentDeclChain.length] = parentDecl;\n                this.declPath[this.declPath.length] = parentType.getName();\n            }\n        }\n\n        public popParent() {\n            if (this.parentChain.length) {\n                this.parentChain.length--;\n                this.parentDeclChain.length--;\n                this.declPath.length--;\n            }\n        }\n\n        public findSymbolInContext(name: string, declKind: PullElementKind, typeLookupPath: string[]): PullSymbol {\n            var startTime = new Date().getTime();\n            var contextSymbolPath: string[] = this.getDeclPath();\n            var nestedSymbolPath: string[] = [];\n            var copyOfContextSymbolPath = [];\n            var symbol: PullSymbol = null;\n\n            var endTime = 0;\n\n            // first, search within the given symbol path\n            if (typeLookupPath.length) {\n\n                for (var i = 0; i < typeLookupPath.length; i++) {\n                    nestedSymbolPath[nestedSymbolPath.length] = typeLookupPath[i];\n                }\n\n                nestedSymbolPath[nestedSymbolPath.length] = name;\n\n                while (nestedSymbolPath.length >= 2) {\n                    symbol = this.semanticInfoChain.findSymbol(nestedSymbolPath, declKind);\n\n                    if (symbol) {\n                        endTime = new Date().getTime();\n                        time_in_findSymbol += endTime - startTime;\n\n                        return symbol;\n                    }\n                    nestedSymbolPath.length -= 2;\n                    nestedSymbolPath[nestedSymbolPath.length] = name;\n                }\n            }\n\n            // next, link back up to the enclosing context\n            if (contextSymbolPath.length) {\n\n                for (var i = 0; i < contextSymbolPath.length; i++) {\n                    copyOfContextSymbolPath[copyOfContextSymbolPath.length] = contextSymbolPath[i];\n                }\n\n                for (var i = 0; i < typeLookupPath.length; i++) {\n                    copyOfContextSymbolPath[copyOfContextSymbolPath.length] = typeLookupPath[i];\n                }\n\n                copyOfContextSymbolPath[copyOfContextSymbolPath.length] = name;\n\n                while (copyOfContextSymbolPath.length >= 2) {\n                    symbol = this.semanticInfoChain.findSymbol(copyOfContextSymbolPath, declKind);\n\n                    if (symbol) {\n                        endTime = new Date().getTime();\n                        time_in_findSymbol += endTime - startTime;\n\n                        return symbol;\n                    }\n                    copyOfContextSymbolPath.length -= 2;\n                    copyOfContextSymbolPath[copyOfContextSymbolPath.length] = name;\n                }\n            }\n\n            // finally, try searching globally\n            symbol = this.semanticInfoChain.findSymbol([name], declKind);\n\n            endTime = new Date().getTime();\n            time_in_findSymbol += endTime - startTime;\n\n            return symbol;\n        }\n\n        public symbolIsRedeclaration(sym: PullSymbol): boolean {\n            var symID = sym.getSymbolID();\n            return (symID > this.startingSymbolForRebind) ||\n                    ((sym.getRebindingID() === this.bindingPhase) && (symID !== this.startingSymbolForRebind));\n        }\n\n        //\n        // decl binding\n        //\n\n        public bindModuleDeclarationToPullSymbol(moduleContainerDecl: PullDecl) {\n\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n\n            var modName = moduleContainerDecl.getName();\n\n            var moduleContainerTypeSymbol: PullContainerTypeSymbol = null;\n            var moduleInstanceSymbol: PullSymbol = null;\n            var moduleInstanceTypeSymbol: PullTypeSymbol = null;\n\n            var moduleInstanceDecl: PullDecl = moduleContainerDecl.getValueDecl();\n\n            var moduleKind = moduleContainerDecl.getKind();\n\n            var parent = this.getParent();\n            var parentInstanceSymbol = this.getParent(true);\n            var moduleAST = <ModuleDeclaration>this.semanticInfo.getASTForDecl(moduleContainerDecl);\n\n            var isExported = moduleContainerDecl.getFlags() & PullElementFlags.Exported;\n            var isEnum = (moduleKind & PullElementKind.Enum) != 0;\n\n            var createdNewSymbol = false;\n\n            if (parent) {\n                if (isExported) {\n                    moduleContainerTypeSymbol = <PullContainerTypeSymbol>parent.findNestedType(modName, PullElementKind.SomeType);\n                }\n                else {\n                    moduleContainerTypeSymbol = <PullContainerTypeSymbol>parent.findContainedMember(modName);\n                }\n            }\n            else if (!isExported || moduleContainerDecl.getKind() === PullElementKind.DynamicModule) {\n                moduleContainerTypeSymbol = <PullContainerTypeSymbol>this.findSymbolInContext(modName, PullElementKind.SomeType, []);\n            }\n\n            if (moduleContainerTypeSymbol && moduleContainerTypeSymbol.getKind() !== moduleKind) {\n                // duplicate symbol error\n                moduleContainerDecl.addDiagnostic(\n                    new SemanticDiagnostic(this.semanticInfo.getPath(), moduleAST.minChar, moduleAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [moduleContainerDecl.getDisplayName()]));\n\n                moduleContainerTypeSymbol = null;\n            }\n\n            if (moduleContainerTypeSymbol) {\n                moduleInstanceSymbol = moduleContainerTypeSymbol.getInstanceSymbol();\n            }\n            else { \n                moduleContainerTypeSymbol = new PullContainerTypeSymbol(modName, moduleKind);\n                createdNewSymbol = true;\n            }\n\n            if (!moduleInstanceSymbol && (moduleContainerDecl.getFlags() & PullElementFlags.SomeInitializedModule)) {\n                moduleInstanceTypeSymbol = new PullTypeSymbol(modName, PullElementKind.ObjectType);\n                moduleInstanceTypeSymbol.addDeclaration(moduleContainerDecl);\n\n                moduleInstanceTypeSymbol.setAssociatedContainerType(moduleContainerTypeSymbol);\n\n                // The instance symbol is further set up in bindVariableDeclaration\n                // (We add the declaration there, invalidate previous decls on edit and add the instance symbol to the parent)\n                moduleInstanceSymbol = new PullSymbol(modName, PullElementKind.Variable);\n                moduleInstanceSymbol.setType(moduleInstanceTypeSymbol);\n\n                moduleContainerTypeSymbol.setInstanceSymbol(moduleInstanceSymbol);\n            }\n\n            moduleContainerTypeSymbol.addDeclaration(moduleContainerDecl);\n            moduleContainerDecl.setSymbol(moduleContainerTypeSymbol);\n\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(moduleAST.name, SymbolAndDiagnostics.fromSymbol(moduleContainerTypeSymbol));\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(moduleAST, SymbolAndDiagnostics.fromSymbol(moduleContainerTypeSymbol));\n\n            if (createdNewSymbol) {\n\n                if (parent) {\n                    var linkKind = moduleContainerDecl.getFlags() & PullElementFlags.Exported ? SymbolLinkKind.PublicMember : SymbolLinkKind.PrivateMember;\n\n                    if (linkKind === SymbolLinkKind.PublicMember) {\n                        parent.addMember(moduleContainerTypeSymbol, linkKind);\n                    }\n                    else {\n                        moduleContainerTypeSymbol.setContainer(parent);\n                    }\n                }\n            }\n            else if (this.reBindingAfterChange) {\n                // clear out the old decls...\n                var decls = moduleContainerTypeSymbol.getDeclarations();\n                var scriptName = moduleContainerDecl.getScriptName();\n\n                for (var i = 0; i < decls.length; i++) {\n                    if (decls[i].getScriptName() === scriptName && decls[i].getDeclID() < this.startingDeclForRebind) {\n                        moduleContainerTypeSymbol.removeDeclaration(decls[i]);\n                    }\n                }\n\n                moduleContainerTypeSymbol.invalidate();\n\n                moduleInstanceSymbol = moduleContainerTypeSymbol.getInstanceSymbol();\n\n                if (moduleInstanceSymbol) {\n                    var moduleInstanceTypeSymbol = moduleInstanceSymbol.getType();\n                    decls = moduleInstanceTypeSymbol.getDeclarations();\n\n                    for (var i = 0; i < decls.length; i++) {\n                        if (decls[i].getScriptName() === scriptName && decls[i].getDeclID() < this.startingDeclForRebind) {\n                            moduleInstanceTypeSymbol.removeDeclaration(decls[i]);\n                        }\n                    }\n\n                    moduleInstanceTypeSymbol.addDeclaration(moduleContainerDecl);\n                    moduleInstanceTypeSymbol.invalidate();\n                }\n            }\n\n            this.pushParent(moduleContainerTypeSymbol, moduleContainerDecl);\n\n            var childDecls = moduleContainerDecl.getChildDecls();\n\n            for (var i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n\n            // if it\'s an enum, freshen the index signature\n            if (isEnum) {\n\n                moduleInstanceTypeSymbol = moduleContainerTypeSymbol.getInstanceSymbol().getType();\n\n                if (this.reBindingAfterChange) {\n                    var existingIndexSigs = moduleInstanceTypeSymbol.getIndexSignatures();\n\n                    for (var i = 0; i < existingIndexSigs.length; i++) {\n                        moduleInstanceTypeSymbol.removeIndexSignature(existingIndexSigs[i]);\n                    }\n                }\n\n                var enumIndexSignature = new PullSignatureSymbol(PullElementKind.IndexSignature);\n                var enumIndexParameterSymbol = new PullSymbol(\"x\", PullElementKind.Parameter);\n                enumIndexParameterSymbol.setType(this.semanticInfoChain.numberTypeSymbol);\n                enumIndexSignature.addParameter(enumIndexParameterSymbol);\n                enumIndexSignature.setReturnType(this.semanticInfoChain.stringTypeSymbol);\n\n                moduleInstanceTypeSymbol.addIndexSignature(enumIndexSignature);\n\n                moduleInstanceTypeSymbol.recomputeIndexSignatures();\n            }\n\n            this.popParent();\n        }\n\n        // aliases\n        public bindImportDeclaration(importDeclaration: PullDecl) {\n            var declFlags = importDeclaration.getFlags();\n            var declKind = importDeclaration.getKind();\n            var importDeclAST = <VariableDeclarator>this.semanticInfo.getASTForDecl(importDeclaration);\n\n            var isExported = false;\n            var linkKind = SymbolLinkKind.PrivateMember;\n            var importSymbol: PullTypeAliasSymbol = null;\n            var declName = importDeclaration.getName();\n            var parentHadSymbol = false;\n            var parent = this.getParent();\n\n            if (parent) {\n                importSymbol = <PullTypeAliasSymbol>parent.findMember(declName, false);\n\n                if (!importSymbol) {\n                    importSymbol = <PullTypeAliasSymbol>parent.findContainedMember(declName);\n\n                    if (importSymbol) {\n                        var declarations = importSymbol.getDeclarations();\n\n                        if (declarations.length) {\n                            var importSymbolParent = declarations[0].getParentDecl();\n\n                            if ((importSymbolParent !== importDeclaration.getParentDecl()) && (!this.reBindingAfterChange || (importSymbolParent.getDeclID() >= this.startingDeclForRebind))) {\n                                importSymbol = null;\n                            }\n                        }\n                    }\n                }\n            }\n            else if (!(importDeclaration.getFlags() & PullElementFlags.Exported)) {\n                importSymbol = <PullTypeAliasSymbol>this.findSymbolInContext(declName, PullElementKind.SomeType, []);\n            }\n\n            if (importSymbol) {\n                parentHadSymbol = true;\n            }\n\n            if (importSymbol && this.symbolIsRedeclaration(importSymbol)) {\n                importDeclaration.addDiagnostic(\n                    new SemanticDiagnostic(this.semanticInfo.getPath(), importDeclAST.minChar, importDeclAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [importDeclaration.getDisplayName()]));\n                importSymbol = null;\n            }\n\n            if (this.reBindingAfterChange && importSymbol) {\n\n                // prune out-of-date decls...\n                var decls = importSymbol.getDeclarations();\n                var scriptName = importDeclaration.getScriptName();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        importSymbol.removeDeclaration(decls[j]);\n                    }\n                }\n\n                importSymbol.setUnresolved();\n            }\n\n            if (!importSymbol) {\n                importSymbol = new PullTypeAliasSymbol(declName);\n            }\n\n            importSymbol.addDeclaration(importDeclaration);\n            importDeclaration.setSymbol(importSymbol);\n\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(importDeclAST, SymbolAndDiagnostics.fromSymbol(importSymbol));\n\n            if (parent && !parentHadSymbol) {\n\n                if (declFlags & PullElementFlags.Exported) {\n                    parent.addMember(importSymbol, SymbolLinkKind.PublicMember);\n                }\n                else {\n                    importSymbol.setContainer(parent);\n                }\n            }\n\n            importSymbol.setIsBound(this.bindingPhase);\n        }\n\n        private cleanInterfaceSignatures(interfaceSymbol: PullTypeSymbol) {\n            var callSigs = interfaceSymbol.getCallSignatures();\n            var constructSigs = interfaceSymbol.getConstructSignatures();\n            var indexSigs = interfaceSymbol.getIndexSignatures();\n\n            for (var i = 0; i < callSigs.length; i++) {\n                if (callSigs[i].getSymbolID() < this.startingSymbolForRebind) {\n                    interfaceSymbol.removeCallSignature(callSigs[i], false);\n                }\n            }\n            for (var i = 0; i < constructSigs.length; i++) {\n                if (constructSigs[i].getSymbolID() < this.startingSymbolForRebind) {\n                    interfaceSymbol.removeConstructSignature(constructSigs[i], false);\n                }\n            }\n            for (var i = 0; i < indexSigs.length; i++) {\n                if (indexSigs[i].getSymbolID() < this.startingSymbolForRebind) {\n                    interfaceSymbol.removeIndexSignature(indexSigs[i], false);\n                }\n            }\n\n            interfaceSymbol.recomputeCallSignatures();\n            interfaceSymbol.recomputeConstructSignatures();\n            interfaceSymbol.recomputeIndexSignatures();\n        }\n\n        private cleanClassSignatures(classSymbol: PullClassTypeSymbol) {\n            var callSigs = classSymbol.getCallSignatures();\n            var constructSigs = classSymbol.getConstructSignatures();\n            var indexSigs = classSymbol.getIndexSignatures();\n\n            for (var i = 0; i < callSigs.length; i++) {\n                classSymbol.removeCallSignature(callSigs[i], false);\n            }\n            for (var i = 0; i < constructSigs.length; i++) {\n                classSymbol.removeConstructSignature(constructSigs[i], false);\n            }\n            for (var i = 0; i < indexSigs.length; i++) {\n                classSymbol.removeIndexSignature(indexSigs[i], false);\n            }\n\n            classSymbol.recomputeCallSignatures();\n            classSymbol.recomputeConstructSignatures();\n            classSymbol.recomputeIndexSignatures();\n\n            var constructorSymbol = classSymbol.getConstructorMethod();\n            var constructorTypeSymbol = <PullConstructorTypeSymbol>(constructorSymbol ? constructorSymbol.getType() : null);\n\n            if (constructorTypeSymbol) {\n                constructSigs = constructorTypeSymbol.getConstructSignatures();\n\n                for (var i = 0; i < constructSigs.length; i++) {\n                    constructorTypeSymbol.removeConstructSignature(constructSigs[i], false);\n                }\n\n                constructorTypeSymbol.recomputeConstructSignatures();\n                constructorTypeSymbol.invalidate();\n                constructorSymbol.invalidate();\n            }\n\n            // just invalidate this once, so we don\'t pay the cost of rebuilding caches\n            // for each signature removed\n            classSymbol.invalidate();            \n        }\n\n        // classes\n        public bindClassDeclarationToPullSymbol(classDecl: PullDecl) {\n\n            var className = classDecl.getName();\n            var classSymbol: PullClassTypeSymbol = null;\n\n            var constructorSymbol: PullSymbol = null;\n            var constructorTypeSymbol: PullConstructorTypeSymbol = null;\n\n            var classAST = <ClassDeclaration>this.semanticInfo.getASTForDecl(classDecl);\n            var parentHadSymbol = false;\n\n            var parent = this.getParent();\n            var cleanedPreviousDecls = false;\n            var isExported = classDecl.getFlags() & PullElementFlags.Exported;\n            var isGeneric = false;\n\n            if (parent) {\n                if (isExported) {\n                    classSymbol = <PullClassTypeSymbol>parent.findNestedType(className);\n\n                    if (!classSymbol) {\n                        classSymbol = <PullClassTypeSymbol>parent.findMember(className, false);\n                    }\n                }\n                else {\n                    classSymbol = <PullClassTypeSymbol>parent.findContainedMember(className);\n\n                    if (classSymbol && classSymbol.getKind() === PullElementKind.Class) {\n\n                        var declarations = classSymbol.getDeclarations();\n\n                        if (declarations.length) {\n\n                            var classSymbolParent = declarations[0].getParentDecl();\n\n                            if ((classSymbolParent !== this.getParentDecl()) && (!this.reBindingAfterChange || (classSymbolParent.getDeclID() >= this.startingDeclForRebind))) {\n                                classSymbol = null;\n                            }\n                        }\n                    }\n                    else {\n                        classSymbol = null;\n                    }\n                }\n            }\n            else {\n                classSymbol = <PullClassTypeSymbol>this.findSymbolInContext(className, PullElementKind.SomeType, []);\n            }\n\n            if (classSymbol && (classSymbol.getKind() !== PullElementKind.Class || !this.reBindingAfterChange || this.symbolIsRedeclaration(classSymbol))) {\n                classDecl.addDiagnostic(\n                    new SemanticDiagnostic(this.semanticInfo.getPath(), classAST.minChar, classAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [classDecl.getDisplayName()]));\n                classSymbol = null;\n            }\n            else if (classSymbol) {\n                parentHadSymbol = true;\n            }\n\n            var decls: PullDecl[];\n\n            if (this.reBindingAfterChange && classSymbol) {\n\n                // prune out-of-date decls\n                decls = classSymbol.getDeclarations();\n                var scriptName = classDecl.getScriptName();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        classSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                constructorSymbol = classSymbol.getConstructorMethod();\n                constructorTypeSymbol = <PullConstructorTypeSymbol>constructorSymbol.getType();\n\n                decls = constructorSymbol.getDeclarations();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        constructorSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                if (constructorSymbol.getIsSynthesized()) {\n                    classSymbol.setConstructorMethod(null);\n                }\n\n                if (classSymbol.isGeneric()) {\n                    //classSymbol.invalidateSpecializations();\n                    isGeneric = true;\n\n                    var specializations = classSymbol.getKnownSpecializations();\n                    var specialization: PullTypeSymbol = null;\n\n                    for (var i = 0; i < specializations.length; i++) {\n                        specialization = specializations[i];\n\n                        decls = specialization.getDeclarations();\n\n                        for (var j = 0; j < decls.length; j++) {\n                            if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                                specialization.removeDeclaration(decls[j]);\n\n                                cleanedPreviousDecls = true;\n                            }\n                        }\n\n                        specialization.addDeclaration(classDecl);\n                        specialization.setUnresolved();\n                    }\n\n                    classSymbol.cleanTypeParameters();\n                    constructorTypeSymbol.cleanTypeParameters();\n                }\n\n                classSymbol.setUnresolved();\n                constructorSymbol.setUnresolved();\n                constructorTypeSymbol.setUnresolved();\n            }\n\n            if (!parentHadSymbol) {\n                classSymbol = new PullClassTypeSymbol(className);\n            }\n\n            classSymbol.addDeclaration(classDecl);\n\n            classDecl.setSymbol(classSymbol);\n\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(classAST.name, SymbolAndDiagnostics.fromSymbol(classSymbol));\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(classAST, SymbolAndDiagnostics.fromSymbol(classSymbol));\n\n            if (parent && !parentHadSymbol) {\n                var linkKind = classDecl.getFlags() & PullElementFlags.Exported ? SymbolLinkKind.PublicMember : SymbolLinkKind.PrivateMember;\n\n                if (linkKind === SymbolLinkKind.PublicMember) {\n                    parent.addMember(classSymbol, linkKind);\n                }\n                else {\n                    classSymbol.setContainer(parent);\n                }\n            }\n\n            // PULLTODO: For now, remove stale signatures from the function type, but we want to be smarter about this when\n            // incremental parsing comes online\n            // PULLTODO: For now, classes should have none of these, though a pre-existing constructor might\n            if (parentHadSymbol && cleanedPreviousDecls) {\n\n                this.cleanClassSignatures(classSymbol);\n\n                if (isGeneric) {\n                    specializations = classSymbol.getKnownSpecializations();\n\n                    for (var i = 0; i < specializations.length; i++) {\n                        this.cleanClassSignatures(<PullClassTypeSymbol>specializations[i]);\n                    }                 \n                }\n            }\n\n            this.pushParent(classSymbol, classDecl);\n\n            var childDecls = classDecl.getChildDecls();\n\n            this.resetTypeParameterCache();\n\n            for (var i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n\n            this.resetTypeParameterCache();\n\n            this.popParent();\n\n            // create the default constructor symbol, if necessary\n\n            // even if we\'ve already tried to set these, we want to try again after we\'ve walked the class members\n            constructorSymbol = classSymbol.getConstructorMethod();\n            constructorTypeSymbol = <PullConstructorTypeSymbol>(constructorSymbol ? constructorSymbol.getType() : null);\n\n            if (!constructorSymbol) {\n                constructorSymbol = new PullSymbol(className, PullElementKind.ConstructorMethod);\n                constructorTypeSymbol = new PullConstructorTypeSymbol();\n\n                constructorSymbol.setIsSynthesized();\n\n                constructorSymbol.setType(constructorTypeSymbol);\n                constructorSymbol.addDeclaration(classDecl);\n                classSymbol.setConstructorMethod(constructorSymbol);\n\n                constructorTypeSymbol.addDeclaration(classDecl);\n\n                classSymbol.setHasDefaultConstructor();\n\n                if (!classAST.extendsList || !classAST.extendsList.members.length) {\n                    var constructorSignature = new PullSignatureSymbol(PullElementKind.ConstructSignature);\n                    constructorSignature.setReturnType(classSymbol);\n                    constructorTypeSymbol.addConstructSignature(constructorSignature);\n                    constructorSignature.addDeclaration(classDecl);\n                }\n\n                // set the class decl\'s AST to the class declaration\n                //this.semanticInfo.setASTForDecl(classDecl, classAST);\n            }\n\n            constructorTypeSymbol.setAssociatedContainerType(classSymbol);\n\n            // bind statics to the constructor symbol\n            if (this.staticClassMembers.length) {\n                var member: PullSymbol;\n                var isPrivate = false;\n                var memberMap: any = new BlockIntrinsics();\n                var memberDecl: PullDecl;\n                var memberAST: AST;\n\n                for (var i = 0; i < this.staticClassMembers.length; i++) {\n\n                    member = this.staticClassMembers[i];\n\n                    if (memberMap[member.getName()]) {\n                        memberDecl = member.getDeclarations()[0];\n                        memberAST = this.semanticInfo.getASTForDecl(memberDecl);\n                        memberDecl.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), memberAST.minChar, memberAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [memberDecl.getDisplayName()]));\n                    }\n                    else {\n                        memberMap[member.getName()] = true;\n                    }\n\n                    isPrivate = member.hasFlag(PullElementFlags.Private);\n\n                    constructorTypeSymbol.addMember(member, isPrivate ? SymbolLinkKind.PrivateMember : SymbolLinkKind.PublicMember);\n                }\n\n                this.staticClassMembers.length = 0;\n            }\n\n            var typeParameters = classDecl.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            // PULLREVIEW: Now that we clean type parameters, searching is redundant\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = classSymbol.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName(), false);\n\n                    classSymbol.addMember(typeParameter, SymbolLinkKind.TypeParameter);\n                    constructorTypeSymbol.addTypeParameter(typeParameter, true);\n                }\n                else {\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    if (this.symbolIsRedeclaration(typeParameter)) {\n                        var typeParameterAST = this.semanticInfoChain.getASTForDecl(typeParameterDecls[0]);\n                        classDecl.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), typeParameterAST.minChar, typeParameterAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [typeParameter.getName()]));\n                    }\n\n                    // clean the decls\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            classSymbol.setIsBound(this.bindingPhase);\n        }\n\n        // interfaces\n        public bindInterfaceDeclarationToPullSymbol(interfaceDecl: PullDecl) {\n\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n            var interfaceName = interfaceDecl.getName();\n            var interfaceSymbol: PullTypeSymbol = <PullTypeSymbol>this.findSymbolInContext(interfaceName, PullElementKind.SomeType, []);\n\n            var interfaceAST = <TypeDeclaration>this.semanticInfo.getASTForDecl(interfaceDecl);\n            var createdNewSymbol = false;\n            var parent = this.getParent();\n\n            if (parent) {\n                interfaceSymbol = parent.findNestedType(interfaceName);\n            }\n            else if (!(interfaceDecl.getFlags() & PullElementFlags.Exported)) {\n                interfaceSymbol = <PullClassTypeSymbol>this.findSymbolInContext(interfaceName, PullElementKind.SomeType, []);\n            }\n\n            if (interfaceSymbol && (interfaceSymbol.getKind() !== PullElementKind.Interface)) {\n                interfaceDecl.addDiagnostic(\n                    new SemanticDiagnostic(this.semanticInfo.getPath(), interfaceAST.minChar, interfaceAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [interfaceDecl.getDisplayName()]));\n                interfaceSymbol = null;\n            }\n\n            if (!interfaceSymbol) {\n                interfaceSymbol = new PullTypeSymbol(interfaceName, PullElementKind.Interface);\n                createdNewSymbol = true;\n            }\n\n            interfaceSymbol.addDeclaration(interfaceDecl);\n            interfaceDecl.setSymbol(interfaceSymbol);\n\n            if (createdNewSymbol) {\n\n                if (parent) {\n                    var linkKind = interfaceDecl.getFlags() & PullElementFlags.Exported ? SymbolLinkKind.PublicMember : SymbolLinkKind.PrivateMember;\n\n                    if (linkKind === SymbolLinkKind.PublicMember) {\n                        parent.addMember(interfaceSymbol, linkKind);\n                    }\n                    else {\n                        interfaceSymbol.setContainer(parent);\n                    }\n                }\n            }\n            else if (this.reBindingAfterChange) {\n                // clear out the old decls...\n                var decls = interfaceSymbol.getDeclarations();\n                var scriptName = interfaceDecl.getScriptName();\n\n                for (var i = 0; i < decls.length; i++) {\n                    if (decls[i].getScriptName() === scriptName && decls[i].getDeclID() < this.startingDeclForRebind) {\n                        interfaceSymbol.removeDeclaration(decls[i]);\n                    }\n                }\n\n                if (interfaceSymbol.isGeneric()) {\n\n                    //interfaceSymbol.invalidateSpecializations();\n\n                    var specializations = interfaceSymbol.getKnownSpecializations();\n                    var specialization: PullTypeSymbol = null;\n\n                    for (var i = 0; i < specializations.length; i++) {\n                        specialization = specializations[i];\n\n                        decls = specialization.getDeclarations();\n\n                        for (var j = 0; j < decls.length; j++) {\n                            if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                                specialization.removeDeclaration(decls[j]);\n                            }\n                        }\n\n                        specialization.addDeclaration(interfaceDecl);\n                        this.cleanInterfaceSignatures(specialization);\n                    }\n\n                    interfaceSymbol.cleanTypeParameters();\n                }\n\n                this.cleanInterfaceSignatures(interfaceSymbol);\n                interfaceSymbol.setUnresolved();\n            }\n\n            this.pushParent(interfaceSymbol, interfaceDecl);\n\n            var childDecls = interfaceDecl.getChildDecls();\n\n            this.resetTypeParameterCache();\n\n            for (var i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n\n            this.resetTypeParameterCache();\n\n            this.popParent();\n\n            var typeParameters = interfaceDecl.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            // PULLREVIEW: Now that we clean type parameters, searching is redundant\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = interfaceSymbol.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName(), false);\n\n                    interfaceSymbol.addMember(typeParameter, SymbolLinkKind.TypeParameter);\n                }\n                else {\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    if (this.symbolIsRedeclaration(typeParameter)) {\n                        \n                        // Because interface declarations can be \"split\", it\'s safe to re-use type parameters\n                        // of the same name across interface declarations in the same binding phase\n                        for (var j = 0; j < typeParameterDecls.length; j++) {\n                            var typeParameterDeclParent = typeParameterDecls[j].getParentDecl();\n\n                            if (typeParameterDeclParent && typeParameterDeclParent === interfaceDecl) {\n                                var typeParameterAST = this.semanticInfoChain.getASTForDecl(typeParameterDecls[0]);\n                                interfaceDecl.addDiagnostic(\n                                    new SemanticDiagnostic(this.semanticInfo.getPath(), typeParameterAST.minChar, typeParameterAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [typeParameter.getName()]));\n\n                                break;\n                            }\n                        }\n                    }\n\n                    // clean the decls\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n        }\n\n        public bindObjectTypeDeclarationToPullSymbol(objectDecl: PullDecl) {\n            var objectSymbolAST: AST = this.semanticInfo.getASTForDecl(objectDecl);\n\n            var objectSymbol = new PullTypeSymbol(\"\", PullElementKind.ObjectType);\n\n            objectSymbol.addDeclaration(objectDecl);\n            objectDecl.setSymbol(objectSymbol);\n\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(objectSymbolAST, SymbolAndDiagnostics.fromSymbol(objectSymbol));\n\n            this.pushParent(objectSymbol, objectDecl);\n\n            var childDecls = objectDecl.getChildDecls();\n\n            for (var i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n\n            this.popParent();\n\n            var typeParameters = objectDecl.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = objectSymbol.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName(), false);\n\n                    objectSymbol.addMember(typeParameter, SymbolLinkKind.TypeParameter);\n                }\n                else {\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    if (this.symbolIsRedeclaration(typeParameter)) {\n                        var typeParameterAST = this.semanticInfoChain.getASTForDecl(typeParameterDecls[0]);\n                        objectDecl.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), typeParameterAST.minChar, typeParameterAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [typeParameter.getName()]));\n                    }\n\n                    // clean the decls\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n        }\n\n        public bindConstructorTypeDeclarationToPullSymbol(constructorTypeDeclaration: PullDecl) {\n            var declKind = constructorTypeDeclaration.getKind();\n            var declFlags = constructorTypeDeclaration.getFlags();\n            var constructorTypeAST = this.semanticInfo.getASTForDecl(constructorTypeDeclaration);\n\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n\n            var constructorTypeSymbol = new PullConstructorTypeSymbol();\n\n            constructorTypeDeclaration.setSymbol(constructorTypeSymbol);\n            constructorTypeSymbol.addDeclaration(constructorTypeDeclaration);\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(constructorTypeAST, SymbolAndDiagnostics.fromSymbol(constructorTypeSymbol));\n\n            var signature = new PullDefinitionSignatureSymbol(PullElementKind.ConstructSignature);\n\n            if ((<FunctionDeclaration>constructorTypeAST).variableArgList) {\n                signature.setHasVariableParamList();\n            }\n\n            signature.addDeclaration(constructorTypeDeclaration);\n            constructorTypeDeclaration.setSignatureSymbol(signature);\n\n            this.bindParameterSymbols(<FunctionDeclaration>this.semanticInfo.getASTForDecl(constructorTypeDeclaration), constructorTypeSymbol, signature);\n\n            // add the implicit construct member for this function type\n            constructorTypeSymbol.addSignature(signature);\n\n            var typeParameters = constructorTypeDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = constructorTypeSymbol.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName(), false);\n\n                    constructorTypeSymbol.addTypeParameter(typeParameter);\n                }\n                else {\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    if (this.symbolIsRedeclaration(typeParameter)) {\n                        var typeParameterAST = this.semanticInfoChain.getASTForDecl(typeParameterDecls[0]);\n                        constructorTypeDeclaration.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), typeParameterAST.minChar, typeParameterAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [typeParameter.getName()]));\n                    }\n\n                    // clean the decls\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n        }\n\n        // variables\n        public bindVariableDeclarationToPullSymbol(variableDeclaration: PullDecl) {\n            var declFlags = variableDeclaration.getFlags();\n            var declKind = variableDeclaration.getKind();\n            var varDeclAST = <VariableDeclarator>this.semanticInfo.getASTForDecl(variableDeclaration);\n\n            var isExported = (declFlags & PullElementFlags.Exported) !== 0;\n\n            var linkKind = SymbolLinkKind.PrivateMember;\n\n            var variableSymbol: PullSymbol = null;\n\n            var declName = variableDeclaration.getName();\n\n            var parentHadSymbol = false;\n\n            var parent = this.getParent(true);\n\n            var parentDecl = variableDeclaration.getParentDecl();\n\n            var isImplicit = (declFlags & PullElementFlags.ImplicitVariable) !== 0;\n\n            if (parentDecl && !isImplicit) {\n                parentDecl.addVariableDeclToGroup(variableDeclaration);\n            }\n\n            // The code below accounts for the variable symbol being a type because\n            // modules may create instance variables\n\n            if (parent) {\n                if (isExported) {\n                    variableSymbol = parent.findMember(declName, false);\n                }\n                else {\n                    variableSymbol = parent.findContainedMember(declName);\n                }\n\n                if (variableSymbol) {\n                    var declarations = variableSymbol.getDeclarations();\n\n                    if (declarations.length) {\n                        var variableSymbolParent = declarations[0].getParentDecl();\n\n                        if ((this.getParentDecl() !== variableSymbolParent) && (!this.reBindingAfterChange || (variableSymbolParent.getDeclID() >= this.startingDeclForRebind))) {\n                            variableSymbol = null;\n                        }\n                    }\n                }\n            }\n            else if (!(variableDeclaration.getFlags() & PullElementFlags.Exported)) {\n                variableSymbol = this.findSymbolInContext(declName, PullElementKind.SomeValue, []);\n            }\n\n            if (variableSymbol && !variableSymbol.isType()) {\n                parentHadSymbol = true;\n            }\n\n            var span: TextSpan;\n            var decl: PullDecl;\n            var decls: PullDecl[];\n            var ast: AST;\n            var members: PullSymbol[];\n\n            // PULLTODO: Keeping these two error clauses separate for now, so that we can add a better error message later\n            if (variableSymbol && this.symbolIsRedeclaration(variableSymbol)) {\n                // if it\'s an implicit variable, then this variable symbol will actually be a class constructor\n                // or container type that was just defined, so we don\'t want to raise an error\n                if (!isImplicit || (!variableSymbol.hasFlag(PullElementFlags.ImplicitVariable) && (variableSymbol.getKind() !== declKind))) {\n                    span = variableDeclaration.getSpan();\n\n                    if (!parent || variableSymbol.getIsSynthesized()) {\n                        variableDeclaration.addDiagnostic(new SemanticDiagnostic(this.semanticInfo.getPath(), span.start(), span.length(), DiagnosticCode.Duplicate_identifier__0_, [variableDeclaration.getDisplayName()]));\n                    }\n\n                    variableSymbol = null;\n                    parentHadSymbol = false;\n                }\n            }\n            else if (variableSymbol && (variableSymbol.getKind() !== PullElementKind.Variable) && !isImplicit) {\n                span = variableDeclaration.getSpan();\n\n                variableDeclaration.addDiagnostic(\n                    new SemanticDiagnostic(this.semanticInfo.getPath(), span.start(), span.length(), DiagnosticCode.Duplicate_identifier__0_, [variableDeclaration.getDisplayName()]));\n                variableSymbol = null;\n                parentHadSymbol = false;\n            }\n\n            if (this.reBindingAfterChange && variableSymbol && !variableSymbol.isType()) {\n\n                // prune out-of-date decls...\n                decls = variableSymbol.getDeclarations();\n                var scriptName = variableDeclaration.getScriptName();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        variableSymbol.removeDeclaration(decls[j]);\n                    }\n                }\n\n                variableSymbol.invalidate();\n            }\n\n            var replaceProperty = false;\n            var previousProperty: PullSymbol = null;\n\n            if ((declFlags & PullElementFlags.ImplicitVariable) === 0) {\n                if (!variableSymbol) {\n                    variableSymbol = new PullSymbol(declName, declKind);\n                }\n\n                variableSymbol.addDeclaration(variableDeclaration);\n                variableDeclaration.setSymbol(variableSymbol);\n\n                this.semanticInfo.setSymbolAndDiagnosticsForAST(varDeclAST.id, SymbolAndDiagnostics.fromSymbol(variableSymbol));\n                this.semanticInfo.setSymbolAndDiagnosticsForAST(varDeclAST, SymbolAndDiagnostics.fromSymbol(variableSymbol));\n            }\n            else if (!parentHadSymbol) {\n\n                if ((declFlags & PullElementFlags.ClassConstructorVariable)) {\n                    // it\'s really an implicit class decl, so we need to set the type of the symbol to\n                    // the constructor type\n                    // Note that we would have already found the class symbol in the search above\n                    var classTypeSymbol: PullClassTypeSymbol = <PullClassTypeSymbol>variableSymbol;\n\n                    // PULLTODO: In both this case and the case below, we should have already received the\n                    // class or module symbol as the variableSymbol found above\n                    if (parent) {\n                        members = parent.getMembers();\n\n                        for (var i = 0; i < members.length; i++) {\n                            if ((members[i].getName() === declName) && (members[i].getKind() === PullElementKind.Class)) {\n                                classTypeSymbol = <PullClassTypeSymbol>members[i];\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!classTypeSymbol) {\n                        var parentDecl = variableDeclaration.getParentDecl();\n\n                        if (parentDecl) {\n                            var childDecls = parentDecl.searchChildDecls(declName, true);\n\n                            if (childDecls.length) {\n\n                                for (var i = 0; i < childDecls.length; i++) {\n                                    if (childDecls[i].getValueDecl() === variableDeclaration) {\n                                        classTypeSymbol = <PullClassTypeSymbol>childDecls[i].getSymbol();\n                                    }\n                                }\n                            }\n                        }\n\n                        if (!classTypeSymbol) {\n                            classTypeSymbol = <PullClassTypeSymbol>this.findSymbolInContext(declName, PullElementKind.SomeType, []);\n                        }\n                    }\n\n                    if (classTypeSymbol && (classTypeSymbol.getKind() !== PullElementKind.Class)) {\n                        classTypeSymbol = null;\n                    }\n\n                    if (classTypeSymbol && classTypeSymbol.isClass()) { // protect against duplicate declarations\n                        replaceProperty = variableSymbol && variableSymbol.getIsSynthesized();\n\n                        if (replaceProperty) {\n                            previousProperty = variableSymbol;\n                        }\n\n                        variableSymbol = classTypeSymbol.getConstructorMethod();\n                        variableDeclaration.setSymbol(variableSymbol);\n\n                        // set the AST to the constructor method\'s if possible\n                        decls = classTypeSymbol.getDeclarations();\n\n                        if (decls.length) {\n\n                            decl = decls[decls.length - 1];\n                            ast = this.semanticInfo.getASTForDecl(decl);\n\n                            if (ast) {\n                                this.semanticInfo.setASTForDecl(variableDeclaration, ast);\n                            }\n                        }\n                    }\n                    else {\n                        // PULLTODO: Clodules/Interfaces on classes\n                        if (!variableSymbol) {\n                            variableSymbol = new PullSymbol(declName, declKind);\n                        }\n\n                        variableSymbol.addDeclaration(variableDeclaration);\n                        variableDeclaration.setSymbol(variableSymbol);\n\n                        variableSymbol.setType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n                }\n                else if (declFlags & PullElementFlags.SomeInitializedModule) {\n                    var moduleContainerTypeSymbol: PullContainerTypeSymbol = null;\n                    var moduleParent = this.getParent(false);\n\n                    if (moduleParent) {\n                        members = moduleParent.getMembers();\n\n                        for (var i = 0; i < members.length; i++) {\n                            if ((members[i].getName() === declName) && (members[i].isContainer())) {\n                                moduleContainerTypeSymbol = <PullContainerTypeSymbol>members[i];\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!moduleContainerTypeSymbol) {\n                        var parentDecl = variableDeclaration.getParentDecl();\n\n                        if (parentDecl) {\n                            var childDecls = parentDecl.searchChildDecls(declName, true);\n\n                            if (childDecls.length) {\n\n                                for (var i = 0; i < childDecls.length; i++) {\n                                    if (childDecls[i].getValueDecl() === variableDeclaration) {\n                                        moduleContainerTypeSymbol = <PullContainerTypeSymbol>childDecls[i].getSymbol();\n                                    }\n                                }\n                            }\n                        }\n                        if (!moduleContainerTypeSymbol) {\n                            moduleContainerTypeSymbol = <PullContainerTypeSymbol>this.findSymbolInContext(declName, PullElementKind.SomeType, []);\n                        }\n                    }\n\n                    if (moduleContainerTypeSymbol && (!moduleContainerTypeSymbol.isContainer())) {\n                        moduleContainerTypeSymbol = null;\n                    }\n\n                    if (moduleContainerTypeSymbol) {\n                        variableSymbol = moduleContainerTypeSymbol.getInstanceSymbol();\n\n                        variableSymbol.addDeclaration(variableDeclaration);\n                        variableDeclaration.setSymbol(variableSymbol);\n\n                        // set the AST to the constructor method\'s if possible\n                        decls = moduleContainerTypeSymbol.getDeclarations();\n\n                        if (decls.length) {\n\n                            decl = decls[decls.length - 1];\n                            ast = this.semanticInfo.getASTForDecl(decl);\n\n                            if (ast) {\n                                this.semanticInfo.setASTForDecl(variableDeclaration, ast);\n                            }\n                        }\n\n                        // we added the variable to the parent when binding the module\n                        //parentHadSymbol = true;\n                    }\n                    else {\n                        // PULLTODO: Raise an Error here\n                        variableSymbol.setType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n                }\n            }\n            else {\n                variableSymbol.addDeclaration(variableDeclaration);\n                variableDeclaration.setSymbol(variableSymbol);\n            }\n\n            if (parent && !parentHadSymbol) {\n\n                if (declFlags & PullElementFlags.Exported) {\n                    parent.addMember(variableSymbol, SymbolLinkKind.PublicMember);\n                }\n                else {\n                    variableSymbol.setContainer(parent);\n                }\n            }\n            else if (replaceProperty) {\n                parent.removeMember(previousProperty);\n                parent.addMember(variableSymbol, linkKind);\n            }\n\n            variableSymbol.setIsBound(this.bindingPhase);\n        }\n\n        // properties\n        public bindPropertyDeclarationToPullSymbol(propertyDeclaration: PullDecl) {\n            var declFlags = propertyDeclaration.getFlags();\n            var declKind = propertyDeclaration.getKind();\n            var propDeclAST = <VariableDeclarator>this.semanticInfo.getASTForDecl(propertyDeclaration);\n\n            var isStatic = false;\n            var isOptional = false;\n\n            var linkKind = SymbolLinkKind.PublicMember;\n\n            var propertySymbol: PullSymbol = null;\n\n            if (hasFlag(declFlags, PullElementFlags.Static)) {\n                isStatic = true;\n            }\n\n            if (hasFlag(declFlags, PullElementFlags.Private)) {\n                linkKind = SymbolLinkKind.PrivateMember;\n            }\n\n            if (hasFlag(declFlags, PullElementFlags.Optional)) {\n                isOptional = true;\n            }\n\n            var declName = propertyDeclaration.getName();\n\n            var parentHadSymbol = false;\n\n            var parent = this.getParent(true);\n\n            if (parent.isClass() && isStatic) {\n\n                for (var i = 0; i < this.staticClassMembers.length; i++) {\n                    if (this.staticClassMembers[i].getName() === declName) {\n                        propertySymbol = this.staticClassMembers[i];\n                        break;\n                    }\n                }\n\n\n                if (!propertySymbol && this.reBindingAfterChange) {\n                    var classConstructor = (<PullClassTypeSymbol>parent).getConstructorMethod();\n\n                    if (classConstructor) {\n                        var classConstructorType = classConstructor.getType();\n\n                        propertySymbol = classConstructorType.findMember(declName);\n                    }\n                }                \n            }\n            else {\n                propertySymbol = parent.findMember(declName, false);\n            }\n\n            if (propertySymbol && (!this.reBindingAfterChange || this.symbolIsRedeclaration(propertySymbol))) {\n\n                var span = propertyDeclaration.getSpan();\n\n                propertyDeclaration.addDiagnostic(\n                    new SemanticDiagnostic(this.semanticInfo.getPath(), span.start(), span.length(), DiagnosticCode.Duplicate_identifier__0_, [propertyDeclaration.getDisplayName()]));\n\n                propertySymbol = null;\n            }\n\n            if (propertySymbol) {\n                parentHadSymbol = true;\n            }\n\n            if (this.reBindingAfterChange && propertySymbol) {\n\n                // prune out-of-date decls...\n                var decls = propertySymbol.getDeclarations();\n                var scriptName = propertyDeclaration.getScriptName();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        propertySymbol.removeDeclaration(decls[j]);\n                    }\n                }\n\n                propertySymbol.setUnresolved();\n            }\n\n            var classTypeSymbol: PullClassTypeSymbol;\n\n            if (!parentHadSymbol) {\n                propertySymbol = new PullSymbol(declName, declKind);\n            }\n\n            propertySymbol.addDeclaration(propertyDeclaration);\n            propertyDeclaration.setSymbol(propertySymbol);\n\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(propDeclAST.id, SymbolAndDiagnostics.fromSymbol(propertySymbol));\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(propDeclAST, SymbolAndDiagnostics.fromSymbol(propertySymbol));\n\n            if (isOptional) {\n                propertySymbol.setIsOptional();\n            }\n\n            if (parent && !parentHadSymbol) {\n                if (parent.isClass()) {\n                    classTypeSymbol = <PullClassTypeSymbol>parent;\n\n                    if (isStatic) {\n                        this.staticClassMembers[this.staticClassMembers.length] = propertySymbol;\n                    }\n                    else {\n                        classTypeSymbol.addMember(propertySymbol, linkKind);\n                    }\n                }\n                else {\n                    parent.addMember(propertySymbol, linkKind);\n                }\n            }\n\n            propertySymbol.setIsBound(this.bindingPhase);\n        }\n\n        // parameters\n        public bindParameterSymbols(funcDecl: FunctionDeclaration, funcType: PullTypeSymbol, signatureSymbol: PullSignatureSymbol) {\n            // create a symbol for each ast\n            // if it\'s a property, add the symbol to the enclosing type\'s member list\n            var parameters: PullSymbol[] = [];\n            var decl: PullDecl = null;\n            var argDecl: BoundDecl = null;\n            var parameterSymbol: PullSymbol = null;\n            var isProperty = false;\n            var params: any = new BlockIntrinsics();\n\n            if (funcDecl.arguments) {\n\n                for (var i = 0; i < funcDecl.arguments.members.length; i++) {\n                    argDecl = <BoundDecl>funcDecl.arguments.members[i];\n                    decl = this.semanticInfo.getDeclForAST(argDecl);\n                    isProperty = hasFlag(argDecl.getVarFlags(), VariableFlags.Property);\n                    parameterSymbol = new PullSymbol(argDecl.id.text, PullElementKind.Parameter);\n\n                    if (funcDecl.variableArgList && i === funcDecl.arguments.members.length - 1) {\n                        parameterSymbol.setIsVarArg();\n                    }\n\n                    if (decl.getFlags() & PullElementFlags.Optional) {\n                        parameterSymbol.setIsOptional();\n                    }\n\n                    if (params[argDecl.id.text]) {\n                        decl.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), argDecl.minChar, argDecl.getLength(), DiagnosticCode.Duplicate_identifier__0_, [argDecl.id.actualText]));\n                    }\n                    else {\n                        params[argDecl.id.text] = true;\n                    }\n                    if (decl) {\n                        parameterSymbol.addDeclaration(decl);\n                        decl.setSymbol(parameterSymbol);\n\n                        var valDecl = decl.getValueDecl();\n\n                        // if this is a parameter property, we still need to set the value decl\n                        // for the function parameter\n                        if (valDecl) {\n                            valDecl.setSymbol(parameterSymbol);\n                            parameterSymbol.addDeclaration(valDecl);\n                        }\n                    }\n                    this.semanticInfo.setSymbolAndDiagnosticsForAST(argDecl.id, SymbolAndDiagnostics.fromSymbol(parameterSymbol));\n                    this.semanticInfo.setSymbolAndDiagnosticsForAST(argDecl, SymbolAndDiagnostics.fromSymbol(parameterSymbol));\n\n                    signatureSymbol.addParameter(parameterSymbol, parameterSymbol.getIsOptional());\n\n                    if (signatureSymbol.isDefinition()) {\n                        parameterSymbol.setContainer(funcType);\n                    }\n\n                    // PULLREVIEW: Shouldn\'t need this, since parameters are created off of decl collection\n                    // add a member to the parent type\n                    //if (decl && isProperty) {\n                    //    parameterSymbol = new PullSymbol(argDecl.id.text, PullElementKind.Field);\n\n                    //    parameterSymbol.addDeclaration(decl);\n                    //    decl.setPropertySymbol(parameterSymbol);\n\n                    //    var linkKind = (decl.getDeclFlags() & PullElementFlags.Private) ? SymbolLinkKind.PrivateProperty : SymbolLinkKind.PublicProperty;\n                    //    var parent = context.getParent(1);\n                    //    if (parent.hasBrand()) {\n                    //        (<PullClassSymbol>parent).getInstanceType().addMember(parameterSymbol, linkKind);\n                    //    }\n                    //    else {\n                    //        // PULLTODO: I don\'t think we ever even take this branch...\n                    //        parent.addMember(parameterSymbol, linkKind);\n                    //    }\n                    //}\n                }\n            }\n        }\n\n        // function declarations\n        public bindFunctionDeclarationToPullSymbol(functionDeclaration: PullDecl) {\n            var declKind = functionDeclaration.getKind();\n            var declFlags = functionDeclaration.getFlags();\n            var funcDeclAST = <FunctionDeclaration>this.semanticInfo.getASTForDecl(functionDeclaration);\n\n            var isExported = (declFlags & PullElementFlags.Exported) !== 0;\n\n            var funcName = functionDeclaration.getName();\n\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n\n            var isSignature: boolean = (declFlags & PullElementFlags.Signature) !== 0;\n\n            var parent = this.getParent(true);\n            var parentHadSymbol = false;\n            var cleanedPreviousDecls = false;\n\n            // PULLREVIEW: On a re-bind, there\'s no need to search far-and-wide: just look in the parent\'s member list\n            var functionSymbol: PullSymbol = null;\n            var functionTypeSymbol: PullFunctionTypeSymbol = null;\n\n            if (parent) {\n                functionSymbol = parent.findMember(funcName, false);\n\n                if (!functionSymbol) {\n                    functionSymbol = parent.findContainedMember(funcName);\n\n                    if (functionSymbol) {\n                        var declarations = functionSymbol.getDeclarations();\n\n                        if (declarations.length) {\n                            var funcSymbolParent = declarations[0].getParentDecl();\n\n                            if ((this.getParentDecl() !== funcSymbolParent) && (!this.reBindingAfterChange || (funcSymbolParent.getDeclID() >= this.startingDeclForRebind))) {\n                                functionSymbol = null;\n                            }\n                        }\n                    }\n                }\n            }\n            else if (!(functionDeclaration.getFlags() & PullElementFlags.Exported)) {\n                functionSymbol = this.findSymbolInContext(funcName, PullElementKind.SomeValue, []);\n            }\n\n            if (functionSymbol && \n                (functionSymbol.getKind() !== PullElementKind.Function ||\n                    (this.symbolIsRedeclaration(functionSymbol) && !isSignature && !functionSymbol.allDeclsHaveFlag(PullElementFlags.Signature)))) {\n                functionDeclaration.addDiagnostic(\n                    new SemanticDiagnostic(this.semanticInfo.getPath(), funcDeclAST.minChar, funcDeclAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [functionDeclaration.getDisplayName()]));\n                functionSymbol = null;\n            }\n\n            if (functionSymbol) {\n                functionTypeSymbol = <PullFunctionTypeSymbol>functionSymbol.getType();\n                parentHadSymbol = true;\n            }\n\n            if (this.reBindingAfterChange && functionSymbol) {\n\n                // prune out-of-date decls...\n                var decls = functionSymbol.getDeclarations();\n                var scriptName = functionDeclaration.getScriptName();\n                var isGeneric = functionTypeSymbol.isGeneric();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        functionSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                decls = functionTypeSymbol.getDeclarations();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        functionTypeSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                if (isGeneric) {\n                    var specializations = functionTypeSymbol.getKnownSpecializations();\n\n                    for (var i = 0; i < specializations.length; i++) {\n                        decls = specializations[i].getDeclarations();\n\n                        for (var j = 0; j < decls.length; j++) {\n                            if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                                specializations[i].removeDeclaration(decls[j]);\n                                specializations[i].addDeclaration(functionDeclaration);\n                                specializations[i].invalidate();\n                                cleanedPreviousDecls = true;\n                            }                    \n                        }\n                    }\n                }\n\n                functionSymbol.invalidate();\n                functionTypeSymbol.invalidate();\n            }\n\n            if (!functionSymbol) {\n                // PULLTODO: Make sure that we properly flag signature decl types when collecting decls\n                functionSymbol = new PullSymbol(funcName, PullElementKind.Function);\n            }\n\n            if (!functionTypeSymbol) {\n                functionTypeSymbol = new PullFunctionTypeSymbol();\n                functionSymbol.setType(functionTypeSymbol);\n            }\n\n            functionDeclaration.setSymbol(functionSymbol);\n            functionSymbol.addDeclaration(functionDeclaration);\n            functionTypeSymbol.addDeclaration(functionDeclaration);\n\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(funcDeclAST.name, SymbolAndDiagnostics.fromSymbol(functionSymbol));\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(funcDeclAST, SymbolAndDiagnostics.fromSymbol(functionSymbol));\n\n            if (parent && !parentHadSymbol) {\n                if (isExported) {\n                    parent.addMember(functionSymbol, SymbolLinkKind.PublicMember);\n                }\n                else {\n                    functionSymbol.setContainer(parent);\n                }\n            }\n\n            if (!isSignature) {\n                this.pushParent(functionTypeSymbol, functionDeclaration);\n            }\n\n            // PULLTODO: For now, remove stale signatures from the function type, but we want to be smarter about this when\n            // incremental parsing comes online\n            if (parentHadSymbol && cleanedPreviousDecls) {\n                var callSigs = functionTypeSymbol.getCallSignatures();\n\n                for (var i = 0; i < callSigs.length; i++) {\n                    functionTypeSymbol.removeCallSignature(callSigs[i], false);\n                }\n\n                // just invalidate this once, so we don\'t pay the cost of rebuilding caches\n                // for each signature removed\n                functionSymbol.invalidate();\n                functionTypeSymbol.invalidate();\n                functionTypeSymbol.recomputeCallSignatures();\n            }\n\n            var signature = isSignature ? new PullSignatureSymbol(PullElementKind.CallSignature) : new PullDefinitionSignatureSymbol(PullElementKind.CallSignature);\n\n            signature.addDeclaration(functionDeclaration);\n            functionDeclaration.setSignatureSymbol(signature);\n\n            if (funcDeclAST.variableArgList) {\n                signature.setHasVariableParamList();\n            }\n\n            this.bindParameterSymbols(<FunctionDeclaration>this.semanticInfo.getASTForDecl(functionDeclaration), functionTypeSymbol, signature);\n\n            var typeParameters = functionDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = signature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName(), true);\n\n                    signature.addTypeParameter(typeParameter);\n                }\n                else {\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    if (this.symbolIsRedeclaration(typeParameter)) {\n                        var typeParameterAST = this.semanticInfoChain.getASTForDecl(typeParameterDecls[0]);\n                        functionDeclaration.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), typeParameterAST.minChar, typeParameterAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [typeParameter.getName()]));\n                    }\n\n                    // clean the decls\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            // add the implicit call member for this function type\n            functionTypeSymbol.addSignature(signature);\n\n            if (!isSignature) {\n                var childDecls = functionDeclaration.getChildDecls();\n\n                for (var i = 0; i < childDecls.length; i++) {\n                    this.bindDeclToPullSymbol(childDecls[i]);\n                }\n\n                this.popParent();\n            }\n\n            functionSymbol.setIsBound(this.bindingPhase);\n        }\n\n        public bindFunctionExpressionToPullSymbol(functionExpressionDeclaration: PullDecl) {\n            var declKind = functionExpressionDeclaration.getKind();\n            var declFlags = functionExpressionDeclaration.getFlags();\n            var funcExpAST = <FunctionDeclaration>this.semanticInfo.getASTForDecl(functionExpressionDeclaration);\n\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n\n            var functionName = declKind == PullElementKind.FunctionExpression ?\n                                    (<PullFunctionExpressionDecl>functionExpressionDeclaration).getFunctionExpressionName() :\n                                    functionExpressionDeclaration.getName();\n            var functionSymbol: PullSymbol = new PullSymbol(functionName, PullElementKind.Function);\n            var functionTypeSymbol = new PullFunctionTypeSymbol();\n\n            functionSymbol.setType(functionTypeSymbol);\n\n            functionExpressionDeclaration.setSymbol(functionSymbol);\n            functionSymbol.addDeclaration(functionExpressionDeclaration);\n            functionTypeSymbol.addDeclaration(functionExpressionDeclaration);\n\n            if (funcExpAST.name) {\n                this.semanticInfo.setSymbolAndDiagnosticsForAST(funcExpAST.name, SymbolAndDiagnostics.fromSymbol(functionSymbol));\n            }\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(funcExpAST, SymbolAndDiagnostics.fromSymbol(functionSymbol));\n\n            this.pushParent(functionTypeSymbol, functionExpressionDeclaration);\n\n            var signature = new PullDefinitionSignatureSymbol(PullElementKind.CallSignature);\n\n            if (funcExpAST.variableArgList) {\n                signature.setHasVariableParamList();\n            }\n\n            var typeParameters = functionExpressionDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = signature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName(), true);\n\n                    signature.addTypeParameter(typeParameter);\n                }\n                else {\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    if (this.symbolIsRedeclaration(typeParameter)) {\n                        var typeParameterAST = this.semanticInfoChain.getASTForDecl(typeParameterDecls[0]);\n                        functionExpressionDeclaration.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), typeParameterAST.minChar, typeParameterAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [typeParameter.getName()]));\n                    }\n\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            signature.addDeclaration(functionExpressionDeclaration);\n            functionExpressionDeclaration.setSignatureSymbol(signature);\n\n            this.bindParameterSymbols(<FunctionDeclaration>this.semanticInfo.getASTForDecl(functionExpressionDeclaration), functionTypeSymbol, signature);\n\n            // add the implicit call member for this function type\n            functionTypeSymbol.addSignature(signature);\n\n            var childDecls = functionExpressionDeclaration.getChildDecls();\n\n            for (var i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n\n            this.popParent();\n        }\n\n        public bindFunctionTypeDeclarationToPullSymbol(functionTypeDeclaration: PullDecl) {\n            var declKind = functionTypeDeclaration.getKind();\n            var declFlags = functionTypeDeclaration.getFlags();\n            var funcTypeAST = <FunctionDeclaration>this.semanticInfo.getASTForDecl(functionTypeDeclaration);\n\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n\n            var functionTypeSymbol = new PullFunctionTypeSymbol();\n\n            functionTypeDeclaration.setSymbol(functionTypeSymbol);\n            functionTypeSymbol.addDeclaration(functionTypeDeclaration);\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(funcTypeAST, SymbolAndDiagnostics.fromSymbol(functionTypeSymbol));\n\n            this.pushParent(functionTypeSymbol, functionTypeDeclaration);\n\n            var isSignature: boolean = (declFlags & PullElementFlags.Signature) !== 0;\n            var signature = isSignature ? new PullSignatureSymbol(PullElementKind.CallSignature) : new PullDefinitionSignatureSymbol(PullElementKind.CallSignature);\n\n            if (funcTypeAST.variableArgList) {\n                signature.setHasVariableParamList();\n            }\n\n            var typeParameters = functionTypeDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = signature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName(), true);\n\n                    signature.addTypeParameter(typeParameter);\n                }\n                else {\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    if (this.symbolIsRedeclaration(typeParameter)) {\n                        var typeParameterAST = this.semanticInfoChain.getASTForDecl(typeParameterDecls[0]);\n                        functionTypeDeclaration.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), typeParameterAST.minChar, typeParameterAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [typeParameter.getName()]));\n                    }\n\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            signature.addDeclaration(functionTypeDeclaration);\n            functionTypeDeclaration.setSignatureSymbol(signature);\n\n            this.bindParameterSymbols(<FunctionDeclaration>this.semanticInfo.getASTForDecl(functionTypeDeclaration), functionTypeSymbol, signature);\n\n            // add the implicit call member for this function type\n            functionTypeSymbol.addSignature(signature);\n\n            this.popParent();\n        }\n\n        // method declarations\n        public bindMethodDeclarationToPullSymbol(methodDeclaration: PullDecl) {\n            var declKind = methodDeclaration.getKind();\n            var declFlags = methodDeclaration.getFlags();\n            var methodAST = <FunctionDeclaration>this.semanticInfo.getASTForDecl(methodDeclaration);\n\n            var isPrivate = (declFlags & PullElementFlags.Private) !== 0;\n            var isStatic = (declFlags & PullElementFlags.Static) !== 0;\n            var isOptional = (declFlags & PullElementFlags.Optional) !== 0;\n\n            var methodName = methodDeclaration.getName();\n\n            var isSignature: boolean = (declFlags & PullElementFlags.Signature) !== 0;\n\n            var parent = this.getParent(true);\n            var parentHadSymbol = false;\n\n            var cleanedPreviousDecls = false;\n\n            var methodSymbol: PullSymbol = null;\n            var methodTypeSymbol: PullFunctionTypeSymbol = null;\n\n            var linkKind = isPrivate ? SymbolLinkKind.PrivateMember : SymbolLinkKind.PublicMember;\n\n            if (parent.isClass() && isStatic) {\n\n                for (var i = 0; i < this.staticClassMembers.length; i++) {\n                    if (this.staticClassMembers[i].getName() === methodName) {\n                        methodSymbol = this.staticClassMembers[i];\n                        break;\n                    }\n                }\n\n                if (!methodSymbol && this.reBindingAfterChange) {\n                    var classConstructor = (<PullClassTypeSymbol>parent).getConstructorMethod();\n\n                    if (classConstructor) {\n                        var classConstructorType = classConstructor.getType();\n\n                        methodSymbol = classConstructorType.findMember(methodName);\n                    }\n                }\n\n            }\n            else {\n                methodSymbol = parent.findMember(methodName, false);\n            }\n\n            if (methodSymbol &&\n                (methodSymbol.getKind() !== PullElementKind.Method ||\n                (this.symbolIsRedeclaration(methodSymbol) && !isSignature && !methodSymbol.allDeclsHaveFlag(PullElementFlags.Signature)))) {\n                methodDeclaration.addDiagnostic(\n                    new SemanticDiagnostic(this.semanticInfo.getPath(), methodAST.minChar, methodAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [methodDeclaration.getDisplayName()]));\n                methodSymbol = null;\n            }\n\n            if (methodSymbol) {\n                methodTypeSymbol = <PullFunctionTypeSymbol>methodSymbol.getType();\n                parentHadSymbol = true;\n            }\n\n            if (this.reBindingAfterChange && methodSymbol) {\n\n                // prune out-of-date decls...\n                var decls = methodSymbol.getDeclarations();\n                var scriptName = methodDeclaration.getScriptName();\n                var isGeneric = methodTypeSymbol.isGeneric();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        methodSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                decls = methodTypeSymbol.getDeclarations();\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        methodTypeSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                if (isGeneric) {\n                    var specializations = methodTypeSymbol.getKnownSpecializations();\n\n                    for (var i = 0; i < specializations.length; i++) {\n                        decls = specializations[i].getDeclarations();\n\n                        for (var j = 0; j < decls.length; j++) {\n                            if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                                specializations[i].removeDeclaration(decls[j]);\n                                specializations[i].addDeclaration(methodDeclaration);\n                                specializations[i].invalidate();\n                                cleanedPreviousDecls = true;\n                            }                    \n                        }\n                    }\n                }\n\n                methodSymbol.invalidate();\n                methodTypeSymbol.invalidate();\n            }\n\n            if (!methodSymbol) {\n                // PULLTODO: Make sure that we properly flag signature decl types when collecting decls\n                methodSymbol = new PullSymbol(methodName, PullElementKind.Method);\n            }\n\n            if (!methodTypeSymbol) {\n                methodTypeSymbol = new PullFunctionTypeSymbol();\n                methodSymbol.setType(methodTypeSymbol);\n            }\n\n            methodDeclaration.setSymbol(methodSymbol);\n            methodSymbol.addDeclaration(methodDeclaration);\n            methodTypeSymbol.addDeclaration(methodDeclaration);\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(methodAST.name, SymbolAndDiagnostics.fromSymbol(methodSymbol));\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(methodAST, SymbolAndDiagnostics.fromSymbol(methodSymbol));\n\n            if (isOptional) {\n                methodSymbol.setIsOptional();\n            }\n\n            if (!parentHadSymbol) {\n\n                if (isStatic) {\n                    this.staticClassMembers[this.staticClassMembers.length] = methodSymbol;\n                }\n                else {\n                    parent.addMember(methodSymbol, linkKind);\n                }\n            }\n\n            if (!isSignature) {\n                this.pushParent(methodTypeSymbol, methodDeclaration);\n            }\n\n            if (parentHadSymbol && cleanedPreviousDecls) {\n                var callSigs = methodTypeSymbol.getCallSignatures();\n                var constructSigs = methodTypeSymbol.getConstructSignatures();\n                var indexSigs = methodTypeSymbol.getIndexSignatures();\n\n                for (var i = 0; i < callSigs.length; i++) {\n                    methodTypeSymbol.removeCallSignature(callSigs[i], false);\n                }\n                for (var i = 0; i < constructSigs.length; i++) {\n                    methodTypeSymbol.removeConstructSignature(constructSigs[i], false);\n                }\n                for (var i = 0; i < indexSigs.length; i++) {\n                    methodTypeSymbol.removeIndexSignature(indexSigs[i], false);\n                }\n\n                methodSymbol.invalidate();\n                methodTypeSymbol.invalidate();\n                methodTypeSymbol.recomputeCallSignatures();\n                methodTypeSymbol.recomputeConstructSignatures();\n                methodTypeSymbol.recomputeIndexSignatures();\n            }\n\n            var sigKind = PullElementKind.CallSignature;\n\n            var signature = isSignature ? new PullSignatureSymbol(sigKind) : new PullDefinitionSignatureSymbol(sigKind);\n\n            if (methodAST.variableArgList) {\n                signature.setHasVariableParamList();\n            }\n\n            var typeParameters = methodDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n            var typeParameterName: string;\n            var typeParameterAST: TypeParameter;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n                typeParameterName = typeParameters[i].getName();\n                typeParameterAST = <TypeParameter>this.semanticInfo.getASTForDecl(typeParameters[i]);\n\n                typeParameter = signature.findTypeParameter(typeParameterName);\n\n\n                if (!typeParameter) {\n\n                    if (!typeParameterAST.constraint) {\n                        typeParameter = this.findTypeParameterInCache(typeParameterName);\n                    }\n\n                    if (!typeParameter) {\n                        typeParameter = new PullTypeParameterSymbol(typeParameterName, true);\n\n                        if (!typeParameterAST.constraint) {\n                            this.addTypeParameterToCache(typeParameter);\n                        }\n                    }\n\n                    signature.addTypeParameter(typeParameter);\n                }\n                else {\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    if (this.symbolIsRedeclaration(typeParameter)) {\n                        typeParameterAST = <TypeParameter>this.semanticInfoChain.getASTForDecl(typeParameterDecls[0]);\n                        methodDeclaration.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), typeParameterAST.minChar, typeParameterAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [typeParameter.getName()]));\n                    }\n\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            signature.addDeclaration(methodDeclaration);\n            methodDeclaration.setSignatureSymbol(signature);\n\n            this.bindParameterSymbols(<FunctionDeclaration>this.semanticInfo.getASTForDecl(methodDeclaration), methodTypeSymbol, signature);\n\n            // add the implicit call member for this function type\n            methodTypeSymbol.addSignature(signature);\n\n            if (!isSignature) {\n                var childDecls = methodDeclaration.getChildDecls();\n\n                for (var i = 0; i < childDecls.length; i++) {\n                    this.bindDeclToPullSymbol(childDecls[i]);\n                }\n\n                this.popParent();\n            }\n\n            //methodSymbol.setIsBound(this.bindingPhase);\n        }\n\n        // class constructor declarations\n        public bindConstructorDeclarationToPullSymbol(constructorDeclaration: PullDecl) {\n            var declKind = constructorDeclaration.getKind();\n            var declFlags = constructorDeclaration.getFlags();\n            var constructorAST = <FunctionDeclaration>this.semanticInfo.getASTForDecl(constructorDeclaration);\n\n            var constructorName = constructorDeclaration.getName();\n\n            var isSignature: boolean = (declFlags & PullElementFlags.Signature) !== 0;\n\n            var parent = <PullClassTypeSymbol>this.getParent(true);\n\n            var parentHadSymbol = false;\n            var cleanedPreviousDecls = false;\n\n            var constructorSymbol: PullSymbol = parent.getConstructorMethod();\n            var constructorTypeSymbol: PullConstructorTypeSymbol = null;\n\n            var linkKind = SymbolLinkKind.ConstructorMethod;\n\n            if (constructorSymbol &&\n                (constructorSymbol.getKind() !== PullElementKind.ConstructorMethod ||\n                (this.symbolIsRedeclaration(constructorSymbol) && !isSignature && !constructorSymbol.allDeclsHaveFlag(PullElementFlags.Signature)))) {\n\n                constructorDeclaration.addDiagnostic(\n                    new SemanticDiagnostic(this.semanticInfo.getPath(), constructorAST.minChar, constructorAST.getLength(), DiagnosticCode.Multiple_constructor_implementations_are_not_allowed, null));\n\n                constructorSymbol = null;\n            }\n\n            if (constructorSymbol) {\n\n                constructorTypeSymbol = <PullConstructorTypeSymbol>constructorSymbol.getType();\n\n                if (this.reBindingAfterChange) {\n                    // prune out-of-date decls...\n                    var decls = constructorSymbol.getDeclarations();\n                    var scriptName = constructorDeclaration.getScriptName();\n                    var isGeneric = constructorTypeSymbol.isGeneric();\n\n                    for (var j = 0; j < decls.length; j++) {\n                        if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                            constructorSymbol.removeDeclaration(decls[j]);\n\n                            cleanedPreviousDecls = true;\n                        }\n                    }\n\n                    decls = constructorTypeSymbol.getDeclarations();\n\n                    for (var j = 0; j < decls.length; j++) {\n                        if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                            constructorTypeSymbol.removeDeclaration(decls[j]);\n\n                            cleanedPreviousDecls = true;\n                        }\n                    }\n\n                    if (isGeneric) {\n                        var specializations = constructorTypeSymbol.getKnownSpecializations();\n\n                        for (var i = 0; i < specializations.length; i++) {\n                            decls = specializations[i].getDeclarations();\n\n                            for (var j = 0; j < decls.length; j++) {\n                                if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                                    specializations[i].removeDeclaration(decls[j]);\n                                    specializations[i].addDeclaration(constructorDeclaration);\n                                    specializations[i].invalidate();\n                                    cleanedPreviousDecls = true;\n                                }                    \n                            }\n                        }\n                    }                          \n\n                    constructorSymbol.invalidate();\n                    constructorTypeSymbol.invalidate();\n                }\n            }\n\n            if (!constructorSymbol) {\n                constructorSymbol = new PullSymbol(constructorName, PullElementKind.ConstructorMethod);\n                constructorTypeSymbol = new PullConstructorTypeSymbol();\n            }\n\n            // Even if we\'re reusing the symbol, it would have been cleared by the call to invalidate above\n            parent.setConstructorMethod(constructorSymbol);\n            constructorSymbol.setType(constructorTypeSymbol);\n\n            constructorDeclaration.setSymbol(constructorSymbol);\n            constructorSymbol.addDeclaration(constructorDeclaration);\n            constructorTypeSymbol.addDeclaration(constructorDeclaration);\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(constructorAST, SymbolAndDiagnostics.fromSymbol(constructorSymbol));\n\n            if (!isSignature) {\n                this.pushParent(constructorTypeSymbol, constructorDeclaration);\n            }\n\n            if (parentHadSymbol && cleanedPreviousDecls) {\n                var constructSigs = constructorTypeSymbol.getConstructSignatures();\n\n                for (var i = 0; i < constructSigs.length; i++) {\n                    constructorTypeSymbol.removeConstructSignature(constructSigs[i]);\n                }\n\n                constructorSymbol.invalidate();\n                constructorTypeSymbol.invalidate();\n                constructorTypeSymbol.recomputeConstructSignatures();\n            }\n\n            // add a call signature to the constructor method, and a construct signature to the parent class type\n            var constructSignature = isSignature ? new PullSignatureSymbol(PullElementKind.ConstructSignature) : new PullDefinitionSignatureSymbol(PullElementKind.ConstructSignature);\n\n            constructSignature.setReturnType(parent);\n\n            constructSignature.addDeclaration(constructorDeclaration);\n            constructorDeclaration.setSignatureSymbol(constructSignature);\n\n            this.bindParameterSymbols(constructorAST, constructorTypeSymbol, constructSignature);\n\n            if (constructorAST.variableArgList) {\n                constructSignature.setHasVariableParamList();\n            }\n\n            constructorTypeSymbol.addSignature(constructSignature);\n\n            if (!isSignature) {\n                var childDecls = constructorDeclaration.getChildDecls();\n\n                for (var i = 0; i < childDecls.length; i++) {\n                    this.bindDeclToPullSymbol(childDecls[i]);\n                }\n\n                this.popParent();\n            }\n\n            //constructorSymbol.setIsBound(this.bindingPhase);\n        }\n\n        public bindConstructSignatureDeclarationToPullSymbol(constructSignatureDeclaration: PullDecl) {\n            var parent = this.getParent(true);\n            var constructorAST = <FunctionDeclaration>this.semanticInfo.getASTForDecl(constructSignatureDeclaration);\n\n            var constructSigs = parent.getConstructSignatures();\n\n            for (var i = 0; i < constructSigs.length; i++) {\n                if (constructSigs[i].getSymbolID() < this.startingSymbolForRebind) {\n                    parent.removeConstructSignature(constructSigs[i], false);\n                }\n            }\n\n            // update the construct signature list\n            parent.recomputeConstructSignatures();\n            var constructSignature = new PullSignatureSymbol(PullElementKind.ConstructSignature);\n\n            if (constructorAST.variableArgList) {\n                constructSignature.setHasVariableParamList();\n            }\n\n            var typeParameters = constructSignatureDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = constructSignature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName(), true);\n\n                    constructSignature.addTypeParameter(typeParameter);\n                }\n                else {\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    if (this.symbolIsRedeclaration(typeParameter)) {\n                        var typeParameterAST = this.semanticInfoChain.getASTForDecl(typeParameterDecls[0]);\n                        constructSignatureDeclaration.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), typeParameterAST.minChar, typeParameterAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [typeParameter.getName()]));\n                    }\n\n                    // clean the decls\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            constructSignature.addDeclaration(constructSignatureDeclaration);\n            constructSignatureDeclaration.setSignatureSymbol(constructSignature);\n\n            this.bindParameterSymbols(<FunctionDeclaration>this.semanticInfo.getASTForDecl(constructSignatureDeclaration), null, constructSignature);\n\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(this.semanticInfo.getASTForDecl(constructSignatureDeclaration), SymbolAndDiagnostics.fromSymbol(constructSignature));\n\n            parent.addConstructSignature(constructSignature);\n        }\n\n        public bindCallSignatureDeclarationToPullSymbol(callSignatureDeclaration: PullDecl) {\n            var parent = this.getParent(true);\n            var callSignatureAST = <FunctionDeclaration>this.semanticInfo.getASTForDecl(callSignatureDeclaration);\n\n            // PULLTODO: For now, remove stale signatures from the function type, but we want to be smarter about this when\n            // incremental parsing comes online\n            var callSigs = parent.getCallSignatures();\n\n            for (var i = 0; i < callSigs.length; i++) {\n                if (callSigs[i].getSymbolID() < this.startingSymbolForRebind) {\n                    parent.removeCallSignature(callSigs[i], false);\n                }\n            }\n\n            // update the call signature list\n            parent.recomputeCallSignatures();\n\n            var callSignature = new PullSignatureSymbol(PullElementKind.CallSignature);\n\n            if (callSignatureAST.variableArgList) {\n                callSignature.setHasVariableParamList();\n            }\n\n            var typeParameters = callSignatureDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = callSignature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName(), true);\n\n                    callSignature.addTypeParameter(typeParameter);\n                }\n                else {\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    if (this.symbolIsRedeclaration(typeParameter)) {\n                        var typeParameterAST = this.semanticInfoChain.getASTForDecl(typeParameterDecls[0]);\n                        callSignatureDeclaration.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), typeParameterAST.minChar, typeParameterAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [typeParameter.getName()]));\n                    }\n\n                    // clean the decls\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            callSignature.addDeclaration(callSignatureDeclaration);\n            callSignatureDeclaration.setSignatureSymbol(callSignature);\n\n            this.bindParameterSymbols(<FunctionDeclaration>this.semanticInfo.getASTForDecl(callSignatureDeclaration), null, callSignature);\n\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(this.semanticInfo.getASTForDecl(callSignatureDeclaration), SymbolAndDiagnostics.fromSymbol(callSignature));\n\n            parent.addCallSignature(callSignature);\n        }\n\n        public bindIndexSignatureDeclarationToPullSymbol(indexSignatureDeclaration: PullDecl) {\n            var parent = this.getParent(true);\n\n            var indexSigs = parent.getIndexSignatures();\n\n            for (var i = 0; i < indexSigs.length; i++) {\n                if (indexSigs[i].getSymbolID() < this.startingSymbolForRebind) {\n                    parent.removeIndexSignature(indexSigs[i], false);\n                }\n            }\n\n            // update the index signature list\n            parent.recomputeIndexSignatures();\n\n            var indexSignature = new PullSignatureSymbol(PullElementKind.IndexSignature);\n\n            var typeParameters = indexSignatureDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = indexSignature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName(), true);\n\n                    indexSignature.addTypeParameter(typeParameter);\n                }\n                else {\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    if (this.symbolIsRedeclaration(typeParameter)) {\n                        var typeParameterAST = this.semanticInfoChain.getASTForDecl(typeParameterDecls[0]);\n                        indexSignatureDeclaration.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), typeParameterAST.minChar, typeParameterAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [typeParameter.getName()]));\n                    }\n\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            indexSignature.addDeclaration(indexSignatureDeclaration);\n            indexSignatureDeclaration.setSignatureSymbol(indexSignature);\n\n            this.bindParameterSymbols(<FunctionDeclaration>this.semanticInfo.getASTForDecl(indexSignatureDeclaration), null, indexSignature);\n\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(this.semanticInfo.getASTForDecl(indexSignatureDeclaration), SymbolAndDiagnostics.fromSymbol(indexSignature));\n\n            parent.addIndexSignature(indexSignature);\n        }\n\n        // getters and setters\n\n        public bindGetAccessorDeclarationToPullSymbol(getAccessorDeclaration: PullDecl) {\n            var declKind = getAccessorDeclaration.getKind();\n            var declFlags = getAccessorDeclaration.getFlags();\n            var funcDeclAST = <FunctionDeclaration>this.semanticInfo.getASTForDecl(getAccessorDeclaration);\n\n            var isExported = (declFlags & PullElementFlags.Exported) !== 0;\n\n            var funcName = getAccessorDeclaration.getName();\n\n            var isSignature: boolean = (declFlags & PullElementFlags.Signature) !== 0;\n            var isStatic = false;\n            var linkKind = SymbolLinkKind.PublicMember;\n\n            if (hasFlag(declFlags, PullElementFlags.Static)) {\n                isStatic = true;\n            }\n\n            if (hasFlag(declFlags, PullElementFlags.Private)) {\n                linkKind = SymbolLinkKind.PrivateMember;\n            }\n\n            var parent = this.getParent(true);\n            var parentHadSymbol = false;\n            var hadOtherAccessor = false;\n            var cleanedPreviousDecls = false;\n\n            var accessorSymbol: PullAccessorSymbol = null;\n            var getterSymbol: PullSymbol = null;\n            var getterTypeSymbol: PullFunctionTypeSymbol = null;\n\n            if (!isStatic) {\n                accessorSymbol = <PullAccessorSymbol>parent.findMember(funcName, false);\n            }\n            else {\n                var candidate: PullSymbol;\n\n                for (var m = 0; m < this.staticClassMembers.length; m++) {\n                    candidate = this.staticClassMembers[m];\n\n                    if (candidate.getName() === funcName) {\n                        accessorSymbol = <PullAccessorSymbol>candidate;\n                        hadOtherAccessor = accessorSymbol.isAccessor();\n                        break;\n                    }\n                }\n            }\n\n            if (accessorSymbol) {\n                if (!accessorSymbol.isAccessor()) {\n                    getAccessorDeclaration.addDiagnostic(\n                        new SemanticDiagnostic(this.semanticInfo.getPath(), funcDeclAST.minChar, funcDeclAST.getLength(), DiagnosticCode.Duplicate_identifier__0_ , [getAccessorDeclaration.getDisplayName()]));\n                    accessorSymbol = null;\n                }\n                else {\n                    getterSymbol = accessorSymbol.getGetter();\n\n                    if (getterSymbol && (!this.reBindingAfterChange || this.symbolIsRedeclaration(getterSymbol))) {\n                        getAccessorDeclaration.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(),funcDeclAST.minChar, funcDeclAST.getLength(), DiagnosticCode.Getter__0__already_declared, [getAccessorDeclaration.getDisplayName()]));\n                        accessorSymbol = null;\n                        getterSymbol = null;\n                    }\n                }\n            }\n\n            // we have an accessor we can use...\n            if (accessorSymbol && getterSymbol) {\n                getterTypeSymbol = <PullFunctionTypeSymbol>getterSymbol.getType();\n                parentHadSymbol = true;\n            }\n\n            if (this.reBindingAfterChange && accessorSymbol) {\n\n                // prune out-of-date decls...\n                var decls = accessorSymbol.getDeclarations();\n                var scriptName = getAccessorDeclaration.getScriptName();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        accessorSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                if (getterSymbol) {\n                    decls = getterSymbol.getDeclarations();\n\n                    for (var j = 0; j < decls.length; j++) {\n                        if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                            getterSymbol.removeDeclaration(decls[j]);\n\n                            cleanedPreviousDecls = true;\n                        }\n                    }\n                }\n\n                accessorSymbol.invalidate();\n            }\n\n            if (!accessorSymbol) {\n                accessorSymbol = new PullAccessorSymbol(funcName);\n            }\n\n            if (!getterSymbol) {\n                getterSymbol = new PullSymbol(funcName, PullElementKind.Function);\n                getterTypeSymbol = new PullFunctionTypeSymbol();\n\n                getterSymbol.setType(getterTypeSymbol);\n\n                accessorSymbol.setGetter(getterSymbol);\n            }\n\n            getAccessorDeclaration.setSymbol(accessorSymbol);\n            accessorSymbol.addDeclaration(getAccessorDeclaration);\n            getterSymbol.addDeclaration(getAccessorDeclaration);\n\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(funcDeclAST.name, SymbolAndDiagnostics.fromSymbol(getterSymbol));\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(funcDeclAST, SymbolAndDiagnostics.fromSymbol(getterSymbol));\n\n            // PULLTODO: Verify parent is a class or object literal\n            // PULLTODO: Verify static/non-static between getter and setter\n\n            if (!parentHadSymbol && !hadOtherAccessor) {\n\n                if (isStatic) {\n                    this.staticClassMembers[this.staticClassMembers.length] = accessorSymbol;\n                }\n                else {\n                    parent.addMember(accessorSymbol, linkKind);\n                }\n            }\n\n            if (!isSignature) {\n                this.pushParent(getterTypeSymbol, getAccessorDeclaration);\n            }\n\n            // PULLTODO: For now, remove stale signatures from the function type, but we want to be smarter about this when\n            // incremental parsing comes online\n            if (parentHadSymbol && cleanedPreviousDecls) {\n                var callSigs = getterTypeSymbol.getCallSignatures();\n\n                for (var i = 0; i < callSigs.length; i++) {\n                    getterTypeSymbol.removeCallSignature(callSigs[i], false);\n                }\n\n                // just invalidate this once, so we don\'t pay the cost of rebuilding caches\n                // for each signature removed\n                getterSymbol.invalidate();\n                getterTypeSymbol.invalidate();\n                getterTypeSymbol.recomputeCallSignatures();\n            }\n\n            var signature = isSignature ? new PullSignatureSymbol(PullElementKind.CallSignature) : new PullDefinitionSignatureSymbol(PullElementKind.CallSignature);\n\n            signature.addDeclaration(getAccessorDeclaration);\n            getAccessorDeclaration.setSignatureSymbol(signature);\n\n            this.bindParameterSymbols(<FunctionDeclaration>this.semanticInfo.getASTForDecl(getAccessorDeclaration), getterTypeSymbol, signature);\n\n            var typeParameters = getAccessorDeclaration.getTypeParameters();\n\n            if (typeParameters.length) {\n                getAccessorDeclaration.addDiagnostic(\n                    new SemanticDiagnostic(this.semanticInfo.getPath(), funcDeclAST.minChar, funcDeclAST.getLength(), DiagnosticCode.Accessor_cannot_have_type_parameters, null));\n            }\n\n            // add the implicit call member for this function type\n            getterTypeSymbol.addSignature(signature);\n\n            if (!isSignature) {\n                var childDecls = getAccessorDeclaration.getChildDecls();\n\n                for (var i = 0; i < childDecls.length; i++) {\n                    this.bindDeclToPullSymbol(childDecls[i]);\n                }\n\n                this.popParent();\n            }\n\n            getterSymbol.setIsBound(this.bindingPhase);\n        }\n\n        public bindSetAccessorDeclarationToPullSymbol(setAccessorDeclaration: PullDecl) {\n            var declKind = setAccessorDeclaration.getKind();\n            var declFlags = setAccessorDeclaration.getFlags();\n            var funcDeclAST = <FunctionDeclaration>this.semanticInfo.getASTForDecl(setAccessorDeclaration);\n\n            var isExported = (declFlags & PullElementFlags.Exported) !== 0;\n\n            var funcName = setAccessorDeclaration.getName();\n\n            var isSignature: boolean = (declFlags & PullElementFlags.Signature) !== 0;\n            var isStatic = false;\n            var linkKind = SymbolLinkKind.PublicMember;\n\n            if (hasFlag(declFlags, PullElementFlags.Static)) {\n                isStatic = true;\n            }\n\n            if (hasFlag(declFlags, PullElementFlags.Private)) {\n                linkKind = SymbolLinkKind.PrivateMember;\n            }\n\n            var parent = this.getParent(true);\n            var parentHadSymbol = false;\n            var hadOtherAccessor = false;\n            var cleanedPreviousDecls = false;\n\n            var accessorSymbol: PullAccessorSymbol = null;\n            var setterSymbol: PullSymbol = null;\n            var setterTypeSymbol: PullFunctionTypeSymbol = null;\n\n            if (!isStatic) {\n                accessorSymbol = <PullAccessorSymbol>parent.findMember(funcName, false);\n            }\n            else {\n                var candidate: PullSymbol;\n\n                for (var m = 0; m < this.staticClassMembers.length; m++) {\n                    candidate = this.staticClassMembers[m];\n\n                    if (candidate.getName() === funcName) {\n                        accessorSymbol = <PullAccessorSymbol>candidate;\n                        hadOtherAccessor = accessorSymbol.isAccessor();\n                        break;\n                    }\n                }\n            }\n\n            if (accessorSymbol) {\n                if (!accessorSymbol.isAccessor()) {\n                    setAccessorDeclaration.addDiagnostic(\n                        new SemanticDiagnostic(this.semanticInfo.getPath(), funcDeclAST.minChar, funcDeclAST.getLength(), DiagnosticCode.Duplicate_identifier__0_, [setAccessorDeclaration.getDisplayName()]));\n                    accessorSymbol = null;\n                }\n                else {\n                    setterSymbol = accessorSymbol.getSetter();\n\n                    if (setterSymbol && (!this.reBindingAfterChange || this.symbolIsRedeclaration(setterSymbol))) {\n                        setAccessorDeclaration.addDiagnostic(\n                            new SemanticDiagnostic(this.semanticInfo.getPath(), funcDeclAST.minChar, funcDeclAST.getLength(), DiagnosticCode.Setter__0__already_declared, [setAccessorDeclaration.getDisplayName()]));\n                        accessorSymbol = null;\n                        setterSymbol = null;\n                    }\n                }\n            }\n\n            // we have an accessor we can use...\n            if (accessorSymbol && setterSymbol) {\n                setterTypeSymbol = <PullFunctionTypeSymbol>setterSymbol.getType();\n                parentHadSymbol = true;\n            }\n\n            if (this.reBindingAfterChange && accessorSymbol) {\n\n                // prune out-of-date decls...\n                var decls = accessorSymbol.getDeclarations();\n                var scriptName = setAccessorDeclaration.getScriptName();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        accessorSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                if (setterSymbol) {\n                    decls = setterSymbol.getDeclarations();\n\n                    for (var j = 0; j < decls.length; j++) {\n                        if (decls[j].getScriptName() === scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                            setterSymbol.removeDeclaration(decls[j]);\n\n                            cleanedPreviousDecls = true;\n                        }\n                    }\n                }\n\n                accessorSymbol.invalidate();\n            }\n\n            if (!accessorSymbol) {\n                // PULLTODO: Make sure that we properly flag signature decl types when collecting decls\n                accessorSymbol = new PullAccessorSymbol(funcName);\n            }\n\n            if (!setterSymbol) {\n                setterSymbol = new PullSymbol(funcName, PullElementKind.Function);\n                setterTypeSymbol = new PullFunctionTypeSymbol();\n\n                setterSymbol.setType(setterTypeSymbol);\n\n                accessorSymbol.setSetter(setterSymbol);\n            }\n\n            setAccessorDeclaration.setSymbol(accessorSymbol);\n            accessorSymbol.addDeclaration(setAccessorDeclaration);\n            setterSymbol.addDeclaration(setAccessorDeclaration);\n\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(funcDeclAST.name, SymbolAndDiagnostics.fromSymbol(setterSymbol));\n            this.semanticInfo.setSymbolAndDiagnosticsForAST(funcDeclAST, SymbolAndDiagnostics.fromSymbol(setterSymbol));\n\n            // PULLTODO: Verify parent is a class or object literal\n            // PULLTODO: Verify static/non-static between getter and setter\n\n            if (!parentHadSymbol && !hadOtherAccessor) {\n\n                if (isStatic) {\n                    this.staticClassMembers[this.staticClassMembers.length] = accessorSymbol;\n                }\n                else {\n                    parent.addMember(accessorSymbol, linkKind);\n                }\n            }\n\n            if (!isSignature) {\n                this.pushParent(setterTypeSymbol, setAccessorDeclaration);\n            }\n\n            // PULLTODO: For now, remove stale signatures from the function type, but we want to be smarter about this when\n            // incremental parsing comes online\n            if (parentHadSymbol && cleanedPreviousDecls) {\n                var callSigs = setterTypeSymbol.getCallSignatures();\n\n                for (var i = 0; i < callSigs.length; i++) {\n                    setterTypeSymbol.removeCallSignature(callSigs[i], false);\n                }\n\n                // just invalidate this once, so we don\'t pay the cost of rebuilding caches\n                // for each signature removed\n                setterSymbol.invalidate();\n                setterTypeSymbol.invalidate();\n                setterTypeSymbol.recomputeCallSignatures();\n            }\n\n            var signature = isSignature ? new PullSignatureSymbol(PullElementKind.CallSignature) : new PullDefinitionSignatureSymbol(PullElementKind.CallSignature);\n\n            signature.addDeclaration(setAccessorDeclaration);\n            setAccessorDeclaration.setSignatureSymbol(signature);\n\n            // PULLTODO: setter should not have a parameters\n            this.bindParameterSymbols(<FunctionDeclaration>this.semanticInfo.getASTForDecl(setAccessorDeclaration), setterTypeSymbol, signature);\n\n            var typeParameters = setAccessorDeclaration.getTypeParameters();\n\n            if (typeParameters.length) {\n                setAccessorDeclaration.addDiagnostic(\n                    new SemanticDiagnostic(this.semanticInfo.getPath(), funcDeclAST.minChar, funcDeclAST.getLength(), DiagnosticCode.Accessor_cannot_have_type_parameters, null));\n            }\n\n            // add the implicit call member for this function type\n            setterTypeSymbol.addSignature(signature);\n\n            if (!isSignature) {\n                var childDecls = setAccessorDeclaration.getChildDecls();\n\n                for (var i = 0; i < childDecls.length; i++) {\n                    this.bindDeclToPullSymbol(childDecls[i]);\n                }\n\n                this.popParent();\n            }\n\n            setterSymbol.setIsBound(this.bindingPhase);\n        }\n\n        public bindCatchBlockPullSymbols(catchBlockDecl: PullDecl) {\n            var childDecls = catchBlockDecl.getChildDecls();\n\n            for (var i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n        }\n\n        public bindWithBlockPullSymbols(withBlockDecl: PullDecl) {\n            var childDecls = withBlockDecl.getChildDecls();\n\n            for (var i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n        }\n\n        // binding\n        public bindDeclToPullSymbol(decl: PullDecl, rebind = false) {\n\n            if (rebind) {\n                this.startingDeclForRebind = lastBoundPullDeclId;\n                this.startingSymbolForRebind = lastBoundPullSymbolID;\n                this.reBindingAfterChange = true;\n            }\n\n            switch (decl.getKind()) {\n\n                case PullElementKind.Script:\n                    var childDecls = decl.getChildDecls();\n                    for (var i = 0; i < childDecls.length; i++) {\n                        this.bindDeclToPullSymbol(childDecls[i]);\n                    }\n                    break;\n\n                case PullElementKind.Enum:\n                case PullElementKind.DynamicModule:\n                case PullElementKind.Container:\n                    this.bindModuleDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.Interface:\n                    this.bindInterfaceDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.Class:\n                    this.bindClassDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.Function:\n                    this.bindFunctionDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.Variable:\n                    this.bindVariableDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.EnumMember:\n                case PullElementKind.Property:\n                    this.bindPropertyDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.Method:\n                    this.bindMethodDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.ConstructorMethod:\n                    this.bindConstructorDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.CallSignature:\n                    this.bindCallSignatureDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.ConstructSignature:\n                    this.bindConstructSignatureDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.IndexSignature:\n                    this.bindIndexSignatureDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.GetAccessor:\n                    this.bindGetAccessorDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.SetAccessor:\n                    this.bindSetAccessorDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.ObjectType:\n                    this.bindObjectTypeDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.FunctionType:\n                    this.bindFunctionTypeDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.ConstructorType:\n                    this.bindConstructorTypeDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.FunctionExpression:\n                    this.bindFunctionExpressionToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.TypeAlias:\n                    this.bindImportDeclaration(decl);\n                    break;\n\n                case PullElementKind.Parameter:\n                    // parameters are bound by their enclosing function\n                    break;\n\n                case PullElementKind.CatchBlock:\n                    this.bindCatchBlockPullSymbols(decl);\n\n                case PullElementKind.WithBlock:\n                    this.bindWithBlockPullSymbols(decl);\n                    break;\n\n                default:\n                    throw new Error(\"Unrecognized type declaration\");\n            }\n        }\n\n        public bindDeclsForUnit(filePath: string, rebind = false) {\n            this.setUnit(filePath);\n\n            var topLevelDecls = this.semanticInfo.getTopLevelDecls();\n\n            for (var i = 0; i < topLevelDecls.length; i++) {\n                this.bindDeclToPullSymbol(topLevelDecls[i], rebind);\n            }\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export var linkID = 0; // PULLTODO: Prune these if not in use\n\n    export class IListItem {\n        public next: IListItem = null;\n        public prev: IListItem = null;\n\n        constructor(public value: any) { }\n    }\n\n    export class LinkList {\n        public head: IListItem = null;\n        public last: IListItem = null;\n        public length = 0;\n\n        public addItem(item: any) {\n            if (!this.head) {\n                this.head = new IListItem(item);\n                this.last = this.head;\n            }\n            else {\n                this.last.next = new IListItem(item);\n                this.last.next.prev = this.last;\n                this.last = this.last.next;\n            }\n\n            this.length++;\n        }\n\n        // PULLTODO: Register callbacks for caching\n        public find(p: (rn: any) => boolean) {\n            var node = this.head;\n            var vals: any[] = [];\n\n            while (node) {\n\n                if (p(node.value)) {\n                    vals[vals.length] = node.value;\n                }\n                node = node.next;\n            }\n\n            return vals;\n        }\n\n        public remove(p: (item: any) => boolean) {\n            var node = this.head;\n            var prev: IListItem = null;\n            var next: IListItem = null;\n\n            while (node) {\n\n                if (p(node.value)) {\n\n                    if (node === this.head) {\n\n                        if (this.last === this.head) {\n                            this.last = null;\n                        }\n\n                        this.head = this.head.next;\n\n                        if (this.head) {\n                            this.head.prev = null;\n                        }\n                    }\n                    else {\n                        prev = node.prev;\n                        next = node.next;\n\n                        if (prev) {\n                            prev.next = next;\n                        }\n                        if (next) {\n                            next.prev = prev;\n                        }\n\n                        if (node === this.last) {\n                            this.last = prev;\n                        }\n                    }\n\n                    this.length--;\n                }\n                node = node.next;\n            }\n        }\n\n        public update(map: (item: any, context: any) => void , context: any) {\n            var node = this.head;\n\n            while (node) {\n                map(node.value, context);\n\n                node = node.next;\n            }\n        }\n    }\n\n    export class PullSymbolLink {\n        public id = linkID++;\n        public data: any;\n        constructor(public start: PullSymbol, public end: PullSymbol, public kind: SymbolLinkKind) { }\n    }\n\n    export enum GraphUpdateKind {\n        NoUpdate,\n\n        SymbolRemoved,\n        SymbolAdded,\n\n        TypeChanged,\n    }\n\n    export class PullSymbolUpdate {\n\n        constructor(public updateKind: GraphUpdateKind, public symbolToUpdate: PullSymbol, public updater: PullSymbolGraphUpdater) { }\n\n    }\n\n    export var updateVersion = 0;\n\n    export class PullSymbolGraphUpdater {\n\n        constructor(public semanticInfoChain: SemanticInfoChain) { }\n\n        public removeDecl(declToRemove: PullDecl) {\n            var declSymbol = declToRemove.getSymbol();\n\n            if (declSymbol) {\n                declSymbol.removeDeclaration(declToRemove);\n\n                var childDecls = declToRemove.getChildDecls();\n\n                for (var i = 0; i < childDecls.length; i++) {\n                    this.removeDecl(childDecls[i]);\n                }\n\n                var remainingDecls = declSymbol.getDeclarations();\n\n                // if the symbol is \"split\" amongst multiple decls (e.g., an interface or internal module), don\'t remove the\n                // symbol unless all decls have been removed\n                if (!remainingDecls.length) {\n                    this.removeSymbol(declSymbol);\n\n                    this.semanticInfoChain.removeSymbolFromCache(declSymbol);\n                }\n                else {\n                    declSymbol.invalidate();\n                }\n            }\n\n            // if we\'re removing a class, enum, etc., remove the implicit\n            // value decl as well\n            var valDecl = declToRemove.getValueDecl();\n\n            if (valDecl) {\n                this.removeDecl(valDecl);\n            }\n\n            updateVersion++;\n        }\n\n        public addDecl(declToAdd: PullDecl) {\n            // the decl has been bound to a symbol already, so we just need to trigger an update\n\n            var symbolToAdd = declToAdd.getSymbol();\n\n            // \'with\' and \'catch\' blocks have no symbols\n            if (symbolToAdd) {\n                this.addSymbol(symbolToAdd);\n            }\n\n            updateVersion++;\n        }\n\n        // for now, remove all links - later on, see what happens if we leave stuff \'dangling\'\n        public removeSymbol(symbolToRemove: PullSymbol) {\n\n            if (symbolToRemove.removeUpdateVersion === updateVersion) {\n                return;\n            }\n\n            symbolToRemove.removeUpdateVersion = updateVersion;\n\n            symbolToRemove.updateOutgoingLinks(propagateRemovalToOutgoingLinks, new PullSymbolUpdate(GraphUpdateKind.SymbolRemoved, symbolToRemove, this));\n\n            symbolToRemove.updateIncomingLinks(propagateRemovalToIncomingLinks, new PullSymbolUpdate(GraphUpdateKind.SymbolRemoved, symbolToRemove, this));\n\n            symbolToRemove.unsetContainer();\n\n            this.semanticInfoChain.removeSymbolFromCache(symbolToRemove);\n\n            var container = symbolToRemove.getContainer();\n\n            if (container) {\n                container.removeMember(symbolToRemove);\n                this.semanticInfoChain.removeSymbolFromCache(symbolToRemove);\n            }\n\n            if (symbolToRemove.isAccessor()) {\n                var getterSymbol = (<PullAccessorSymbol>symbolToRemove).getGetter();\n                var setterSymbol = (<PullAccessorSymbol>symbolToRemove).getSetter();\n\n                if (getterSymbol) {\n                    this.removeSymbol(getterSymbol);\n                }\n\n                if (setterSymbol) {\n                    this.removeSymbol(setterSymbol);\n                }\n            }\n\n            symbolToRemove.removeAllLinks();\n        }\n\n        public addSymbol(symbolToAdd: PullSymbol) {\n\n            if (symbolToAdd.addUpdateVersion === updateVersion) {\n                return;\n            }\n\n            symbolToAdd.addUpdateVersion = updateVersion;\n\n            symbolToAdd.updateOutgoingLinks(propagateAdditionToOutgoingLinks, new PullSymbolUpdate(GraphUpdateKind.SymbolAdded, symbolToAdd, this));\n\n            symbolToAdd.updateIncomingLinks(propagateAdditionToIncomingLinks, new PullSymbolUpdate(GraphUpdateKind.SymbolAdded, symbolToAdd, this));\n\n        }\n\n        public invalidateType(symbolWhoseTypeChanged: PullSymbol) {\n            if (!symbolWhoseTypeChanged) {\n                return;\n            }\n\n            if (symbolWhoseTypeChanged.isPrimitive()) {\n                return;\n            }\n\n            if (symbolWhoseTypeChanged.typeChangeUpdateVersion === updateVersion) {\n                return;\n            }\n\n            symbolWhoseTypeChanged.typeChangeUpdateVersion = updateVersion;\n\n            symbolWhoseTypeChanged.updateOutgoingLinks(propagateChangedTypeToOutgoingLinks, new PullSymbolUpdate(GraphUpdateKind.TypeChanged, symbolWhoseTypeChanged, this));\n\n            symbolWhoseTypeChanged.updateIncomingLinks(propagateChangedTypeToIncomingLinks, new PullSymbolUpdate(GraphUpdateKind.TypeChanged, symbolWhoseTypeChanged, this));\n\n            if (symbolWhoseTypeChanged.getKind() === PullElementKind.Container) {\n                var instanceSymbol = (<PullContainerTypeSymbol>symbolWhoseTypeChanged).getInstanceSymbol();\n                \n                this.invalidateType(instanceSymbol);\n            }\n\n\n            if (symbolWhoseTypeChanged.isResolved()) {\n                symbolWhoseTypeChanged.invalidate();\n            }\n\n            this.invalidateUnitsForSymbol(symbolWhoseTypeChanged);\n        }\n\n        public invalidateUnitsForSymbol(symbol: PullSymbol) {\n            var declarations = symbol.getDeclarations();\n\n            for (var i = 0; i < declarations.length; i++) {\n                this.semanticInfoChain.invalidateUnit(declarations[i].getScriptName());\n            }\n        }\n    }\n\n    export function propagateRemovalToOutgoingLinks(link: PullSymbolLink, update: PullSymbolUpdate) {\n\n        var symbolToRemove = update.symbolToUpdate;\n        var affectedSymbol = link.end;\n\n        if (affectedSymbol.removeUpdateVersion === updateVersion || affectedSymbol.isPrimitive()) {\n            return;\n        }\n\n        // carry out the update based on the update kind, the affected symbol kind and the relationship\n        if (link.kind === SymbolLinkKind.ProvidesInferredType) {\n\n            // if another type infers its type from this one, unset the link\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.SpecializedTo) {\n            (<PullTypeSymbol>symbolToRemove).removeSpecialization(<PullTypeSymbol>affectedSymbol);\n            update.updater.removeSymbol(affectedSymbol);\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.PublicMember) {\n            update.updater.removeSymbol(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.PrivateMember) {\n            update.updater.removeSymbol(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ConstructorMethod) {\n            //update.updater.removeSymbol(affectedSymbol);\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ContainedBy) {\n            (<PullTypeSymbol>affectedSymbol).removeMember(symbolToRemove);\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.Parameter) {\n            update.updater.removeSymbol(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.CallSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ConstructSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.IndexSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n\n        symbolToRemove.removeOutgoingLink(link);\n    }\n\n    export function propagateRemovalToIncomingLinks(link: PullSymbolLink, update: PullSymbolUpdate) {\n        var symbolToRemove = update.symbolToUpdate;\n        var affectedSymbol = link.start;\n\n        if (affectedSymbol.removeUpdateVersion === updateVersion || affectedSymbol.isPrimitive()) {\n            return;\n        }\n\n        // carry out the update based on the update kind, the affected symbol kind and the relationship\n        if (link.kind === SymbolLinkKind.TypedAs) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ContextuallyTypedAs) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeParameter) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeArgument) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.SpecializedTo) {\n            (<PullTypeSymbol>affectedSymbol).removeSpecialization(<PullTypeSymbol>symbolToRemove);\n            //update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeConstraint) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.PublicMember) {\n            (<PullTypeSymbol>affectedSymbol).removeMember(symbolToRemove);\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.PrivateMember) {\n            (<PullTypeSymbol>affectedSymbol).removeMember(symbolToRemove);\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ConstructorMethod) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ContainedBy) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.Extends) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.Implements) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.Parameter) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ReturnType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.CallSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ConstructSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.IndexSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ExportAliases) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n    }\n\n    export function propagateAdditionToOutgoingLinks(link: PullSymbolLink, update: PullSymbolUpdate) {\n\n        var symbolToAdd = update.symbolToUpdate;\n        var affectedSymbol = link.end;\n\n        if (affectedSymbol.addUpdateVersion === updateVersion || affectedSymbol.isPrimitive()) {\n            return;\n        }\n\n        // carry out the update based on the update kind, the affected symbol kind and the relationship\n        if (link.kind === SymbolLinkKind.ContainedBy) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ProvidesInferredType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeParameter) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeArgument) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.SpecializedTo) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeConstraint) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.PublicMember) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ConstructorMethod) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ReturnType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.CallSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ConstructSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.IndexSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n    }\n\n    export function propagateAdditionToIncomingLinks(link: PullSymbolLink, update: PullSymbolUpdate) {\n        var symbolToAdd = update.symbolToUpdate;\n        var affectedSymbol = link.start;\n\n        if (affectedSymbol.addUpdateVersion === updateVersion || affectedSymbol.isPrimitive()) {\n            return;\n        }\n\n        // carry out the update based on the update kind, the affected symbol kind and the relationship\n        if (link.kind === SymbolLinkKind.TypedAs) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ContextuallyTypedAs) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeParameter) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeArgument) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeConstraint) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.PublicMember) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ConstructorMethod) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.Extends) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.Implements) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ReturnType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ExportAliases) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n    }\n\n    export function propagateChangedTypeToOutgoingLinks(link: PullSymbolLink, update: PullSymbolUpdate) {\n        var symbolWhoseTypeChanged = update.symbolToUpdate;\n        var affectedSymbol = link.end;\n\n        if (affectedSymbol.typeChangeUpdateVersion === updateVersion || affectedSymbol.isPrimitive()) {\n            return;\n        }\n\n        // carry out the update based on the update kind, the affected symbol kind and the relationship\n        if (link.kind === SymbolLinkKind.ProvidesInferredType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ContainedBy) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeParameter) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeArgument) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.SpecializedTo) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeConstraint) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.PublicMember) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.CallSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ConstructorMethod) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ConstructSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.IndexSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n    }\n\n    export function propagateChangedTypeToIncomingLinks(link: PullSymbolLink, update: PullSymbolUpdate) {\n        var symbolWhoseTypeChanged = update.symbolToUpdate;\n        var affectedSymbol = link.start;\n\n        if (affectedSymbol.typeChangeUpdateVersion === updateVersion || affectedSymbol.isPrimitive()) {\n            return;\n        }\n\n        // carry out the update based on the update kind, the affected symbol kind and the relationship\n        if (link.kind === SymbolLinkKind.TypedAs) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ContextuallyTypedAs) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeParameter) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeArgument) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.TypeConstraint) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.PublicMember) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.IndexSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.Extends) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.Implements) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ReturnType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind === SymbolLinkKind.ExportAliases) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n\n    // pull errors are declared at a specific offset from a given decl\n    // adjustedOffset is set when the error is added to a decl\n    export class SemanticDiagnostic extends Diagnostic {\n        public static equals(diagnostic1: SemanticDiagnostic, diagnostic2: SemanticDiagnostic): boolean {\n            return Diagnostic.equals(diagnostic1, diagnostic2);\n        }\n    }\n\n    export function getDiagnosticsFromEnclosingDecl(enclosingDecl: PullDecl, errors: IDiagnostic[]) {\n        var declErrors = enclosingDecl.getDiagnostics();\n\n        if (declErrors) {\n            for (var i = 0; i < declErrors.length; i++) {\n                errors[errors.length] = declErrors[i];\n            }\n        }\n\n        var childDecls = enclosingDecl.getChildDecls();\n\n        for (var i = 0; i < childDecls.length; i++) {\n            getDiagnosticsFromEnclosingDecl(childDecls[i], errors);\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n\n    export module PullHelpers {\n        export interface SignatureInfoForFuncDecl {\n            signature: PullSignatureSymbol;\n            allSignatures: PullSignatureSymbol[];\n        }\n\n        export function getSignatureForFuncDecl(funcDecl: FunctionDeclaration, semanticInfo: SemanticInfo) {\n            var funcSymbol = semanticInfo.getSymbolAndDiagnosticsForAST(funcDecl).symbol;\n            if (funcSymbol.isSignature()) {\n                return {\n                    signature: <PullSignatureSymbol>funcSymbol,\n                    allSignatures: [<PullSignatureSymbol>funcSymbol]\n                };\n            }\n            var functionDecl = semanticInfo.getDeclForAST(funcDecl);\n            var functionSignature = functionDecl.getSignatureSymbol();\n            var funcTypeSymbol = funcSymbol.getType();\n            var signatures: PullSignatureSymbol[];\n            if (funcDecl.isConstructor || funcDecl.isConstructMember()) {\n                signatures = funcTypeSymbol.getConstructSignatures();\n            } else if (funcDecl.isIndexerMember()) {\n                signatures = funcTypeSymbol.getIndexSignatures();\n            } else {\n                signatures = funcTypeSymbol.getCallSignatures();\n            }\n            return {\n                signature: functionSignature,\n                allSignatures: signatures\n            };\n        }\n\n        export function getAccessorSymbol(getterOrSetter: FunctionDeclaration, semanticInfoChain: SemanticInfoChain, unitPath: string) {\n            var getterOrSetterSymbol = semanticInfoChain.getSymbolAndDiagnosticsForAST(getterOrSetter, unitPath).symbol;\n            var linkKind: SymbolLinkKind;\n            if (hasFlag(getterOrSetter.getFunctionFlags(), FunctionFlags.GetAccessor)) {\n                linkKind = SymbolLinkKind.GetterFunction;\n            } else {\n                linkKind = SymbolLinkKind.SetterFunction;\n            }\n\n            var accessorSymbolLinks = getterOrSetterSymbol.findIncomingLinks((psl) => psl.kind === linkKind);\n            if (accessorSymbolLinks.length) {\n                return <PullAccessorSymbol>accessorSymbolLinks[0].start;\n            }\n\n            return null;\n        }\n\n        export function getGetterAndSetterFunction(funcDecl: FunctionDeclaration, semanticInfoChain: SemanticInfoChain, unitPath: string): { getter: FunctionDeclaration; setter: FunctionDeclaration; } {\n            var accessorSymbol = PullHelpers.getAccessorSymbol(funcDecl, semanticInfoChain, unitPath);\n            var result: { getter: FunctionDeclaration; setter: FunctionDeclaration; } = {\n                getter: null,\n                setter: null\n            };\n            var getter = accessorSymbol.getGetter();\n            if (getter) {\n                var getterDecl = getter.getDeclarations()[0];\n                result.getter = <FunctionDeclaration>semanticInfoChain.getASTForDecl(getterDecl);\n            }\n            var setter = accessorSymbol.getSetter();\n            if (setter) {\n                var setterDecl = setter.getDeclarations()[0];\n                result.setter = <FunctionDeclaration>semanticInfoChain.getASTForDecl(setterDecl);\n            }\n\n            return result;\n        }\n\n        export function symbolIsEnum(source: PullSymbol) {\n            return source.getKind() & (PullElementKind.Enum | PullElementKind.EnumMember) || source.hasFlag(PullElementFlags.InitializedEnum);\n        }\n    }\n}\n/// <reference path=\'ast.ts\' />\n\nmodule TypeScript {\n    var incrementalAst = true;\n    export class SyntaxPositionMap {\n        private position = 0;\n        private elementToPosition = Collections.createHashTable(2048, Collections.identityHashCode);\n\n        constructor(node: SyntaxNode) {\n            this.process(node);\n        }\n\n        private process(element: ISyntaxElement) {\n            if (element !== null) {\n                if (element.isToken()) {\n                    this.elementToPosition.add(element, this.position);\n                    this.position += element.fullWidth();\n                }\n                else {\n                    if (element.isNode() ||\n                        (element.isList() && (<ISyntaxList>element).childCount() > 0) ||\n                        (element.isSeparatedList() && (<ISeparatedSyntaxList>element).childCount() > 0)) {\n                        this.elementToPosition.add(element, this.position);\n                    }\n\n                    for (var i = 0, n = element.childCount(); i < n; i++) {\n                        this.process(element.childAt(i));\n                    }\n                }\n            }\n        }\n\n        public static create(node: SyntaxNode): SyntaxPositionMap {\n            var map = new SyntaxPositionMap(node);\n            return map;\n        }\n\n        public fullStart(element: ISyntaxElement): number {\n            return this.elementToPosition.get(element);\n        }\n\n        public start(element: ISyntaxElement): number {\n            return this.fullStart(element) + element.leadingTriviaWidth();\n        }\n\n        public end(element: ISyntaxElement): number {\n            return this.start(element) + element.width();\n        }\n\n        public fullEnd(element: ISyntaxElement): number {\n            return this.fullStart(element) + element.fullWidth();\n        }\n    }\n\n    export class SyntaxTreeToAstVisitor implements ISyntaxVisitor {\n        public static checkPositions = false;\n\n        private position = 0;\n\n        private requiresExtendsBlock: boolean = false;\n        private previousTokenTrailingComments: Comment[] = null;\n\n        private isParsingDeclareFile: boolean;\n        private isParsingAmbientModule = false;\n\n        private static protoString = \"__proto__\";\n        private static protoSubstitutionString = \"#__proto__\";\n\n        constructor(private syntaxPositionMap: SyntaxPositionMap,\n                    private fileName: string,\n                    private lineMap: LineMap,\n                    private compilationSettings: CompilationSettings) {\n            this.isParsingDeclareFile = isDTSFile(fileName);\n        }\n\n        public static visit(syntaxTree: SyntaxTree, fileName: string, compilationSettings: CompilationSettings): Script {\n            var map = SyntaxTreeToAstVisitor.checkPositions ? SyntaxPositionMap.create(syntaxTree.sourceUnit()) : null;\n            var visitor = new SyntaxTreeToAstVisitor(map, fileName, syntaxTree.lineMap(), compilationSettings);\n            return syntaxTree.sourceUnit().accept(visitor);\n        }\n\n        private assertElementAtPosition(element: ISyntaxElement) {\n            if (SyntaxTreeToAstVisitor.checkPositions) {\n                Debug.assert(this.position === this.syntaxPositionMap.fullStart(element));\n            }\n        }\n\n        private movePast(element: ISyntaxElement): void {\n            if (element !== null) {\n                this.assertElementAtPosition(element);\n                this.position += element.fullWidth();\n            }\n        }\n\n        private moveTo(element1: ISyntaxNodeOrToken, element2: ISyntaxElement): void {\n            if (element2 !== null) {\n                this.position += Syntax.childOffset(element1, element2);\n            }\n        }\n\n        private applyDelta(ast: TypeScript.AST, delta: number) {\n            if (delta === 0) {\n                return;\n            }\n\n            var applyDelta = (ast: TypeScript.AST) => {\n                if (ast.minChar !== -1) {\n                    ast.minChar += delta;\n                }\n                if (ast.limChar !== -1) {\n                    ast.limChar += delta;\n                }\n            }\n\n            var applyDeltaToComments = (comments: TypeScript.Comment[]) => {\n                if (comments && comments.length > 0) {\n                    for (var i = 0; i < comments.length; i++) {\n                        var comment = comments[i];\n                        applyDelta(comment);\n                        comment.minLine = this.lineMap.getLineNumberFromPosition(comment.minChar);\n                        comment.limLine = this.lineMap.getLineNumberFromPosition(comment.limChar);\n                    }\n                }\n            }\n\n            var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n                // Apply delta to this node\n                applyDelta(cur);\n                applyDeltaToComments(cur.preComments);\n                applyDeltaToComments(cur.postComments);\n\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(ast, pre);\n        }\n\n        private setSpan(span: IASTSpan, fullStart: number, element: ISyntaxElement): void {\n            var desiredMinChar = fullStart + element.leadingTriviaWidth();\n            var desiredLimChar = desiredMinChar + element.width();\n            Debug.assert(!isNaN(desiredMinChar));\n            Debug.assert(!isNaN(desiredLimChar));\n\n            if (span.minChar !== -1) {\n                Debug.assert(span.limChar !== -1);\n                Debug.assert((<any>span).nodeType !== undefined);\n\n                // Have an existing span.  We need to adjust it so that it starts at the provided\n                // desiredMinChar.\n                \n                var delta = desiredMinChar - span.minChar;\n                this.applyDelta(<AST>span, delta);\n\n                span.limChar = desiredLimChar;\n                span.trailingTriviaWidth = element.trailingTriviaWidth();\n\n                Debug.assert(span.minChar === desiredMinChar);\n                Debug.assert(span.limChar === desiredLimChar);\n            }\n            else {\n                Debug.assert(span.limChar === -1);\n                // Have a new span, just set it to the lim/min we were given.\n                span.minChar = desiredMinChar;\n                span.limChar = desiredLimChar;\n                span.trailingTriviaWidth = element.trailingTriviaWidth();\n            }\n\n            Debug.assert(span.minChar !== -1);\n            Debug.assert(span.limChar !== -1);\n        }\n\n        private setSpan1(span: ASTSpan, fullStart: number, element: ISyntaxElement): void {\n            var desiredMinChar = fullStart + element.leadingTriviaWidth();\n            var desiredLimChar = desiredMinChar + element.width();\n            Debug.assert(!isNaN(desiredMinChar));\n            Debug.assert(!isNaN(desiredLimChar));\n\n            span.minChar = desiredMinChar;\n            span.limChar = desiredLimChar;\n            span.trailingTriviaWidth = element.trailingTriviaWidth();\n\n            Debug.assert(span.minChar !== -1);\n            Debug.assert(span.limChar !== -1);\n        }\n\n        private setSpanExplicit(span: IASTSpan, start: number, end: number): void {\n            span.minChar = start;\n            span.limChar = end;\n            Debug.assert(!isNaN(span.minChar));\n            Debug.assert(!isNaN(span.limChar));\n            Debug.assert(span.minChar !== -1);\n            Debug.assert(span.limChar !== -1);\n        }\n\n        private identifierFromToken(token: ISyntaxToken, isOptional: boolean, useValueText: boolean): Identifier {\n            this.assertElementAtPosition(token);\n\n            var result: Identifier = null;\n            if (token.fullWidth() === 0) {\n                result = new MissingIdentifier();\n            }\n            else {\n                result = new Identifier(token.text());\n                result.text = useValueText ? token.valueText() : result.text;\n                if (result.text == SyntaxTreeToAstVisitor.protoString) {\n                    result.text = SyntaxTreeToAstVisitor.protoSubstitutionString;\n                }\n            }\n\n            if (isOptional) {\n                result.setFlags(result.getFlags() | ASTFlags.OptionalName);\n            }\n\n            var start = this.position + token.leadingTriviaWidth();\n            this.setSpanExplicit(result, start, start + token.width());\n\n            return result;\n        }\n\n        private getAST(element: ISyntaxElement): any {\n            if (this.previousTokenTrailingComments !== null) {\n                return null;\n            }\n\n            if (incrementalAst) {\n                var result = (<any>element)._ast;\n                return result ? result : null;\n            }\n            else {\n                return null;\n            }\n        }\n\n        private setAST(element: ISyntaxElement, ast: IASTSpan): void {\n            if (incrementalAst) {\n                (<any>element)._ast = ast;\n            }\n        }\n\n        public visitSyntaxList(list: ISyntaxList): ASTList {\n            var start = this.position;\n            var result: ASTList = this.getAST(list);\n            if (result) {\n                this.movePast(list);\n            }\n            else {\n                result = new ASTList();\n\n                for (var i = 0, n = list.childCount(); i < n; i++) {\n                    result.append(list.childAt(i).accept(this));\n                }\n\n                if (n > 0) {\n                    this.setAST(list, result);\n                }\n            }\n\n            this.setSpan(result, start, list);\n            return result;\n        }\n\n        public visitSeparatedSyntaxList(list: ISeparatedSyntaxList): ASTList {\n            var start = this.position;\n            var result: ASTList = this.getAST(list);\n            if (result) {\n                this.movePast(list);\n            }\n            else {\n                result = new ASTList();\n\n                for (var i = 0, n = list.childCount(); i < n; i++) {\n                    if (i % 2 === 0) {\n                        result.append(list.childAt(i).accept(this));\n                        this.previousTokenTrailingComments = null;\n                    }\n                    else {\n                        var separatorToken = <ISyntaxToken>list.childAt(i);\n                        this.previousTokenTrailingComments = this.convertTokenTrailingComments(\n                            separatorToken, this.position + separatorToken.leadingTriviaWidth() + separatorToken.width());\n                        this.movePast(separatorToken);\n                    }\n                }\n\n                result.postComments = this.previousTokenTrailingComments;\n                this.previousTokenTrailingComments = null;\n\n                if (n > 0) {\n                    this.setAST(list, result);\n                }\n            }\n\n            this.setSpan(result, start, list);\n            return result;\n        }\n\n        private createRef(text: string, minChar: number): Identifier {\n            var id = new Identifier(text);\n            id.minChar = minChar;\n            return id;\n        }\n\n        private convertComment(trivia: ISyntaxTrivia, commentStartPosition: number, hasTrailingNewLine: boolean): Comment {\n            var comment = new Comment(trivia.fullText(), trivia.kind() === SyntaxKind.MultiLineCommentTrivia, hasTrailingNewLine);\n\n            comment.minChar = commentStartPosition;\n            comment.limChar = commentStartPosition + trivia.fullWidth();\n            comment.minLine = this.lineMap.getLineNumberFromPosition(comment.minChar);\n            comment.limLine = this.lineMap.getLineNumberFromPosition(comment.limChar);\n\n            return comment;\n        }\n\n        private convertComments(triviaList: ISyntaxTriviaList, commentStartPosition: number): Comment[] {\n            var result: Comment[] = [];\n\n            for (var i = 0, n = triviaList.count(); i < n; i++) {\n                var trivia = triviaList.syntaxTriviaAt(i);\n\n                if (trivia.isComment()) {\n                    var hasTrailingNewLine = ((i + 1) < n) && triviaList.syntaxTriviaAt(i + 1).isNewLine();\n                    result.push(this.convertComment(trivia, commentStartPosition, hasTrailingNewLine));\n                }\n\n                commentStartPosition += trivia.fullWidth();\n            }\n\n            return result;\n        }\n\n        private mergeComments(comments1: Comment[], comments2: Comment[]): Comment[] {\n            if (comments1 === null) {\n                return comments2;\n            }\n\n            if (comments2 === null) {\n                return comments1;\n            }\n\n            return comments1.concat(comments2);\n\n        }\n\n        private convertTokenLeadingComments(token: ISyntaxToken, commentStartPosition: number): Comment[] {\n            if (token === null) {\n                return null;\n            }\n\n            var preComments = token.hasLeadingComment()\n                ? this.convertComments(token.leadingTrivia(), commentStartPosition)\n                : null;\n\n            var previousTokenTrailingComments = this.previousTokenTrailingComments;\n            this.previousTokenTrailingComments = null;\n\n            return this.mergeComments(previousTokenTrailingComments, preComments);\n        }\n\n        private convertTokenTrailingComments(token: ISyntaxToken, commentStartPosition: number): Comment[] {\n            if (token === null || !token.hasTrailingComment() || token.hasTrailingNewLine()) {\n                return null;\n            }\n\n            return this.convertComments(token.trailingTrivia(), commentStartPosition);\n        }\n\n        private convertNodeLeadingComments(node: SyntaxNode, nodeStart: number): Comment[] {\n            return this.convertTokenLeadingComments(node.firstToken(), nodeStart);\n        }\n\n        private convertNodeTrailingComments(node: SyntaxNode, nodeStart: number): Comment[] {\n            return this.convertTokenTrailingComments(node.lastToken(), nodeStart + node.leadingTriviaWidth() + node.width());\n        }\n\n        private containsToken(list: ISyntaxList, kind: SyntaxKind): boolean {\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                if (list.childAt(i).kind() === kind) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public visitToken(token: ISyntaxToken): Expression {\n            this.assertElementAtPosition(token);\n\n            var result: Expression = this.getAST(token);\n            var fullStart = this.position;\n\n            if (result) {\n                this.movePast(token);\n            }\n            else {\n                if (token.kind() === SyntaxKind.ThisKeyword) {\n                    result = new ThisExpression();\n                }\n                else if (token.kind() === SyntaxKind.SuperKeyword) {\n                    result = new SuperExpression();\n                }\n                else if (token.kind() === SyntaxKind.TrueKeyword) {\n                    result = new LiteralExpression(NodeType.TrueLiteral);\n                }\n                else if (token.kind() === SyntaxKind.FalseKeyword) {\n                    result = new LiteralExpression(NodeType.FalseLiteral);\n                }\n                else if (token.kind() === SyntaxKind.NullKeyword) {\n                    result = new LiteralExpression(NodeType.NullLiteral);\n                }\n                else if (token.kind() === SyntaxKind.StringLiteral) {\n                    result = new StringLiteral(token.text(), token.valueText());\n                }\n                else if (token.kind() === SyntaxKind.RegularExpressionLiteral) {\n                    result = new RegexLiteral(token.text());\n                }\n                else if (token.kind() === SyntaxKind.NumericLiteral) {\n                    var preComments = this.convertTokenLeadingComments(token, fullStart);\n                    \n                    var value = token.text().indexOf(\".\") > 0 ? parseFloat(token.text()) : parseInt(token.text());\n                    result = new NumberLiteral(value, token.text());\n\n                    result.preComments = preComments;\n                }\n                else {\n                    result = this.identifierFromToken(token, /*isOptional:*/ false, /*useValueText:*/ true);\n                }\n\n                this.movePast(token);\n            }\n\n            var start = fullStart + token.leadingTriviaWidth();\n            this.setAST(token, result);\n            this.setSpanExplicit(result, start, start + token.width());\n            return result;\n        }\n\n        private getLeadingComments(node: SyntaxNode): ISyntaxTrivia[] {\n            var firstToken = node.firstToken();\n            var result: ISyntaxTrivia[] = [];\n\n            if (firstToken.hasLeadingComment()) {\n                var leadingTrivia = firstToken.leadingTrivia();\n\n                for (var i = 0, n = leadingTrivia.count(); i < n; i++) {\n                    var trivia = leadingTrivia.syntaxTriviaAt(i);\n\n                    if (trivia.isComment()) {\n                        result.push(trivia);\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        private hasTopLevelImportOrExport(node: SourceUnitSyntax): boolean {\n            // TODO: implement this.\n\n            var firstToken: ISyntaxToken;\n\n            for (var i = 0, n = node.moduleElements.childCount(); i < n; i++) {\n                var moduleElement = node.moduleElements.childAt(i);\n\n                firstToken = moduleElement.firstToken();\n                if (firstToken !== null && firstToken.kind() === SyntaxKind.ExportKeyword) {\n                    return true;\n                }\n\n                if (moduleElement.kind() === SyntaxKind.ImportDeclaration) {\n                    var importDecl = <ImportDeclarationSyntax>moduleElement;\n                    if (importDecl.moduleReference.kind() === SyntaxKind.ExternalModuleReference) {\n                        return true;\n                    }\n                }\n            }\n\n            var leadingComments = this.getLeadingComments(node);\n            for (var i = 0, n = leadingComments.length; i < n; i++) {\n                var trivia = leadingComments[i];\n\n                if (getImplicitImport(trivia.fullText())) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private getAmdDependency(comment: string): string {\n            var amdDependencyRegEx = /^\\/\\/\\/\\s*<amd-dependency\\s+path=(\'|\")(.+?)\\1/gim;\n            var match = amdDependencyRegEx.exec(comment);\n            return match ? match[2] : null;\n        }\n\n        public visitSourceUnit(node: SourceUnitSyntax): Script {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var members;\n\n            var bod = this.visitSyntaxList(node.moduleElements);\n\n            var topLevelMod: ModuleDeclaration = null;\n            if (this.hasTopLevelImportOrExport(node)) {\n                var correctedFileName = switchToForwardSlashes(this.fileName);\n                var id: Identifier = new Identifier(correctedFileName);\n                topLevelMod = new ModuleDeclaration(id, bod, null);\n                this.setSpanExplicit(topLevelMod, start, this.position);\n\n                topLevelMod.setModuleFlags(topLevelMod.getModuleFlags() | ModuleFlags.IsDynamic);\n                topLevelMod.setModuleFlags(topLevelMod.getModuleFlags() | ModuleFlags.IsWholeFile);\n                topLevelMod.setModuleFlags(topLevelMod.getModuleFlags() | ModuleFlags.Exported);\n\n                if (this.isParsingDeclareFile) {\n                    topLevelMod.setModuleFlags(topLevelMod.getModuleFlags() | ModuleFlags.Ambient);\n                }\n\n                topLevelMod.prettyName = getPrettyName(correctedFileName);\n                //topLevelMod.containsUnicodeChar = this.scanner.seenUnicodeChar;\n                //topLevelMod.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;\n\n                var leadingComments = this.getLeadingComments(node);\n                for (var i = 0, n = leadingComments.length; i < n; i++) {\n                    var trivia = leadingComments[i];\n                    var amdDependency = this.getAmdDependency(trivia.fullText());\n                    if (amdDependency) {\n                        topLevelMod.amdDependencies.push(amdDependency);\n                    }\n                }\n\n                // topLevelMod.amdDependencies = this.amdDependencies;\n\n                bod = new ASTList();\n                this.setSpanExplicit(bod, start, this.position);\n                bod.append(topLevelMod);\n            }\n\n            var result = new Script();\n            this.setSpanExplicit(result, start, start + node.fullWidth());\n\n            result.moduleElements = bod;\n            result.topLevelMod = topLevelMod;\n            result.isDeclareFile = this.isParsingDeclareFile;\n            result.requiresExtendsBlock = this.requiresExtendsBlock;\n\n            return result;\n        }\n\n        public visitExternalModuleReference(node: ExternalModuleReferenceSyntax): any {\n            this.assertElementAtPosition(node);\n            this.moveTo(node, node.stringLiteral);\n            var result = this.identifierFromToken(node.stringLiteral, /*isOptional:*/ false, /*useValueText:*/ false);\n            this.movePast(node.stringLiteral);\n            this.movePast(node.closeParenToken);\n\n            return result;\n        }\n\n        public visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): any {\n            this.assertElementAtPosition(node);\n            return node.moduleName.accept(this);\n        }\n\n        public visitClassDeclaration(node: ClassDeclarationSyntax): ClassDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ClassDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n                this.moveTo(node, node.identifier);\n                var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n\n                var typeParameters = node.typeParameterList === null ? null : node.typeParameterList.accept(this);\n                var extendsList = new ASTList();\n                var implementsList = new ASTList();\n\n                for (var i = 0, n = node.heritageClauses.childCount(); i < n; i++) {\n                    var heritageClause = <HeritageClauseSyntax>node.heritageClauses.childAt(i);\n                    if (heritageClause.extendsOrImplementsKeyword.tokenKind === SyntaxKind.ExtendsKeyword) {\n                        extendsList = heritageClause.accept(this);\n                    }\n                    else {\n                        Debug.assert(heritageClause.extendsOrImplementsKeyword.tokenKind === SyntaxKind.ImplementsKeyword);\n                        implementsList = heritageClause.accept(this);\n                    }\n                }\n\n                this.movePast(node.openBraceToken);\n                var members = this.visitSyntaxList(node.classElements);\n                var closeBracePosition = this.position;\n                this.movePast(node.closeBraceToken);\n                var closeBraceSpan = new ASTSpan();\n                this.setSpan(closeBraceSpan, closeBracePosition, node.closeBraceToken);\n\n                result = new ClassDeclaration(name, typeParameters, members, extendsList, implementsList);\n                result.endingToken = closeBraceSpan;\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n\n                for (var i = 0; i < members.members.length; i++) {\n                    var member = members.members[i];\n                    if (member.nodeType === NodeType.FunctionDeclaration) {\n                        var funcDecl = <FunctionDeclaration>member;\n\n                        if (funcDecl.isConstructor) {\n                            funcDecl.classDecl = result;\n\n                            result.constructorDecl = funcDecl;\n                        }\n                    }\n                }\n            }\n\n            this.requiresExtendsBlock = this.requiresExtendsBlock || result.extendsList.members.length > 0;\n\n            if (this.containsToken(node.modifiers, SyntaxKind.ExportKeyword) || this.isParsingAmbientModule) {\n                result.setVarFlags(result.getVarFlags() | VariableFlags.Exported);\n            }\n            else {\n                result.setVarFlags(result.getVarFlags() & ~VariableFlags.Exported);\n            }\n\n            if (this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword) || this.isParsingAmbientModule || this.isParsingDeclareFile) {\n                result.setVarFlags(result.getVarFlags() | VariableFlags.Ambient);\n            }\n            else {\n                result.setVarFlags(result.getVarFlags() & ~VariableFlags.Ambient);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): InterfaceDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: InterfaceDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n                this.moveTo(node, node.identifier);\n                var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                var typeParameters = node.typeParameterList === null ? null : node.typeParameterList.accept(this);\n\n                var extendsList: ASTList = null;\n\n                for (var i = 0, n = node.heritageClauses.childCount(); i < n; i++) {\n                    var heritageClause = <HeritageClauseSyntax>node.heritageClauses.childAt(i);\n                    if (i === 0) {\n                        extendsList = heritageClause.accept(this);\n                    }\n                    else {\n                        this.movePast(heritageClause);\n                    }\n                }\n\n                this.movePast(node.body.openBraceToken);\n                var members = this.visitSeparatedSyntaxList(node.body.typeMembers);\n\n                this.movePast(node.body.closeBraceToken);\n\n                result = new InterfaceDeclaration(name, typeParameters, members, extendsList, null);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n            }\n\n            if (this.containsToken(node.modifiers, SyntaxKind.ExportKeyword) || this.isParsingAmbientModule) {\n                result.setVarFlags(result.getVarFlags() | VariableFlags.Exported);\n            }\n            else {\n                result.setVarFlags(result.getVarFlags() & ~VariableFlags.Exported);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitHeritageClause(node: HeritageClauseSyntax): ASTList {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ASTList = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                result = new ASTList();\n\n                this.movePast(node.extendsOrImplementsKeyword);\n                for (var i = 0, n = node.typeNames.childCount(); i < n; i++) {\n                    if (i % 2 === 1) {\n                        this.movePast(node.typeNames.childAt(i));\n                    }\n                    else {\n                        var type = this.visitType(node.typeNames.childAt(i)).term;\n                        result.append(type);\n                    }\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private getModuleNames(node: ModuleDeclarationSyntax): Identifier[] {\n            var result: Identifier[] = [];\n\n            if (node.stringLiteral !== null) {\n                result.push(this.identifierFromToken(node.stringLiteral, /*isOptional:*/false, /*useValueText:*/ false));\n                this.movePast(node.stringLiteral);\n            }\n            else {\n                this.getModuleNamesHelper(node.moduleName, result);\n            }\n\n            return result;\n        }\n\n        private getModuleNamesHelper(name: INameSyntax, result: Identifier[]): void {\n            this.assertElementAtPosition(name);\n\n            if (name.kind() === SyntaxKind.QualifiedName) {\n                var qualifiedName = <QualifiedNameSyntax>name;\n                this.getModuleNamesHelper(qualifiedName.left, result);\n                this.movePast(qualifiedName.dotToken);\n                result.push(this.identifierFromToken(qualifiedName.right, /*isOptional:*/ false, /*useValueText:*/ false));\n                this.movePast(qualifiedName.right);\n            }\n            else {\n                result.push(this.identifierFromToken(<ISyntaxToken>name, /*isOptional:*/ false, /*useValueText:*/ false));\n                this.movePast(name);\n            }\n        }\n\n        public visitModuleDeclaration(node: ModuleDeclarationSyntax): ModuleDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ModuleDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.moduleKeyword);\n                this.movePast(node.moduleKeyword);\n                var names = this.getModuleNames(node);\n                this.movePast(node.openBraceToken);\n                var svIsParsingAmbientModule = this.isParsingAmbientModule;\n                if (this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword) || this.isParsingDeclareFile) {\n                    this.isParsingAmbientModule = true;\n                }\n                var members = this.visitSyntaxList(node.moduleElements);\n                this.isParsingAmbientModule = svIsParsingAmbientModule;\n                var closeBracePosition = this.position;\n                this.movePast(node.closeBraceToken);\n                var closeBraceSpan = new ASTSpan();\n                this.setSpan(closeBraceSpan, closeBracePosition, node.closeBraceToken);\n\n                for (var i = names.length - 1; i >= 0; i--) {\n                    var innerName = names[i];\n\n                    result = new ModuleDeclaration(innerName, members, closeBraceSpan);\n                    this.setSpan(result, start, node);\n\n                    result.preComments = preComments;\n                    result.postComments = postComments;\n\n                    preComments = null;\n                    postComments = null;\n\n                    // mark the inner module declarations as exported\n                    if (i) {\n                        result.setModuleFlags(result.getModuleFlags() | ModuleFlags.Exported);\n                    } else if (this.containsToken(node.modifiers, SyntaxKind.ExportKeyword) || this.isParsingAmbientModule) {\n                        // outer module is exported if export key word or parsing ambient module\n                        result.setModuleFlags(result.getModuleFlags() | ModuleFlags.Exported);\n                    }\n\n                    // REVIEW: will also possibly need to re-parent comments as well\n\n                    members = new ASTList();\n                    members.append(result);\n                }\n            }\n\n            // mark ambient if declare keyword or parsing ambient module or parsing declare file\n            if (this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword) || this.isParsingAmbientModule || this.isParsingDeclareFile) {\n                result.setModuleFlags(result.getModuleFlags() | ModuleFlags.Ambient);\n            }\n            else {\n                result.setModuleFlags(result.getModuleFlags() & ~ModuleFlags.Ambient);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private hasDotDotDotParameter(parameters: ISeparatedSyntaxList): boolean {\n            for (var i = 0, n = parameters.nonSeparatorCount(); i < n; i++) {\n                if ((<ParameterSyntax>parameters.nonSeparatorAt(i)).dotDotDotToken) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public visitFunctionDeclaration(node: FunctionDeclarationSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FunctionDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.identifier);\n                var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n\n                this.movePast(node.identifier);\n\n                var typeParameters = node.callSignature.typeParameterList === null ? null : node.callSignature.typeParameterList.accept(this);\n                var parameters = node.callSignature.parameterList.accept(this);\n\n                var returnType = node.callSignature.typeAnnotation\n                    ? node.callSignature.typeAnnotation.accept(this)\n                    : null;\n\n                var block = node.block ? node.block.accept(this) : null;\n\n                this.movePast(node.semicolonToken);\n\n                result = new FunctionDeclaration(name, block, false, typeParameters, parameters, NodeType.FunctionDeclaration);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.callSignature.parameterList.parameters);\n                result.returnTypeAnnotation = returnType;\n\n                if (node.semicolonToken) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n                }\n            }\n\n            if (this.containsToken(node.modifiers, SyntaxKind.ExportKeyword) || this.isParsingAmbientModule) {\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Exported);\n            }\n            else {\n                result.setFunctionFlags(result.getFunctionFlags() & ~FunctionFlags.Exported);\n            }\n\n            if (this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword) || this.isParsingAmbientModule || this.isParsingDeclareFile) {\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Ambient);\n            }\n            else {\n                result.setFunctionFlags(result.getFunctionFlags() & ~FunctionFlags.Ambient);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitEnumDeclaration(node: EnumDeclarationSyntax): ModuleDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n\n            var preComments = this.convertNodeLeadingComments(node, start);\n            var postComments = this.convertNodeTrailingComments(node, start);\n\n            this.moveTo(node, node.identifier);\n            var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n            this.movePast(node.identifier);\n\n            this.movePast(node.openBraceToken);\n            var members = new ASTList();\n\n            var lastValue: NumberLiteral = null;\n            var memberNames: Identifier[] = [];\n            var memberName: Identifier;\n\n            for (var i = 0, n = node.enumElements.childCount(); i < n; i++) {\n                if (i % 2 === 1) {\n                    this.movePast(node.enumElements.childAt(i));\n                }\n                else {\n                    var enumElement = <EnumElementSyntax>node.enumElements.childAt(i);\n\n                    var memberValue: AST = null;\n\n                    memberName = this.identifierFromToken(enumElement.propertyName, /*isOptional:*/ false, /*useValueText:*/ true);\n                    this.movePast(enumElement.propertyName);\n\n                    if (enumElement.equalsValueClause !== null) {\n                        memberValue = enumElement.equalsValueClause.accept(this);\n                        lastValue = null;\n                    }\n\n                    var memberStart = this.position;\n\n                    if (memberValue === null) {\n                        if (lastValue === null) {\n                            memberValue = new NumberLiteral(0, \"0\");\n                            lastValue = <NumberLiteral>memberValue;\n                        }\n                        else {\n                            var nextValue = lastValue.value + 1;\n                            memberValue = new NumberLiteral(nextValue, nextValue.toString());\n                            lastValue = <NumberLiteral>memberValue;\n                        }\n                    }\n\n                    var declarator = new VariableDeclarator(memberName);\n                    declarator.init = memberValue;\n                    // Note: Leave minChar, limChar as \"-1\" on typeExpr as this is a parsing artifact.\n                    declarator.typeExpr = new TypeReference(this.createRef(name.actualText, -1), 0);\n                    declarator.setVarFlags(declarator.getVarFlags() | VariableFlags.Property);\n                    this.setSpanExplicit(declarator, memberStart, this.position);\n\n                    if (memberValue.nodeType === NodeType.NumericLiteral) {\n                        declarator.setVarFlags(declarator.getVarFlags() | VariableFlags.Constant);\n                    }\n                    else if (memberValue.nodeType === NodeType.LeftShiftExpression) {\n                        // If the initializer is of the form \"value << value\" then treat it as a constant\n                        // as well.\n                        var binop = <BinaryExpression>memberValue;\n                        if (binop.operand1.nodeType === NodeType.NumericLiteral && binop.operand2.nodeType === NodeType.NumericLiteral) {\n                            declarator.setVarFlags(declarator.getVarFlags() | VariableFlags.Constant);\n                        }\n                    }\n                    else if (memberValue.nodeType === NodeType.Name) {\n                        // If the initializer refers to an earlier enum value, then treat it as a constant\n                        // as well.\n                        var nameNode = <Identifier>memberValue;\n                        for (var j = 0; j < memberNames.length; j++) {\n                            memberName = memberNames[j];\n                            if (memberName.text === nameNode.text) {\n                                declarator.setVarFlags(declarator.getVarFlags() | VariableFlags.Constant);\n                                break;\n                            }\n                        }\n                    }\n\n                    var declarators = new ASTList();\n                    declarators.append(declarator);\n                    var declaration = new VariableDeclaration(declarators);\n                    this.setSpanExplicit(declaration, memberStart, this.position);\n\n                    var statement = new VariableStatement(declaration);\n                    statement.setFlags(ASTFlags.EnumElement);\n                    this.setSpanExplicit(statement, memberStart, this.position);\n\n                    members.append(statement);\n                    memberNames.push(memberName);\n                    // all enum members are exported\n                    declarator.setVarFlags(declarator.getVarFlags() | VariableFlags.Exported);\n                }\n            }\n\n            var closeBracePosition = this.position;\n            this.movePast(node.closeBraceToken);\n            var closeBraceSpan = new ASTSpan();\n            this.setSpan(closeBraceSpan, closeBracePosition, node.closeBraceToken);\n\n            var modDecl = new ModuleDeclaration(name, members, closeBraceSpan);\n            this.setSpan(modDecl, start, node);\n\n            modDecl.preComments = preComments;\n            modDecl.postComments = postComments;\n            modDecl.setModuleFlags(modDecl.getModuleFlags() | ModuleFlags.IsEnum);\n\n            if (this.containsToken(node.modifiers, SyntaxKind.ExportKeyword) || this.isParsingAmbientModule) {\n                modDecl.setModuleFlags(modDecl.getModuleFlags() | ModuleFlags.Exported);\n            }\n\n            return modDecl;\n        }\n\n        public visitEnumElement(node: EnumElementSyntax): void {\n            // Processing enum elements should be handled from inside visitEnumDeclaration.\n            throw Errors.invalidOperation();\n        }\n\n        public visitImportDeclaration(node: ImportDeclarationSyntax): ImportDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ImportDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.identifier);\n                var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                this.movePast(node.equalsToken);\n                var alias = node.moduleReference.accept(this);\n                this.movePast(node.semicolonToken);\n\n                result = new ImportDeclaration(name, alias);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.isDynamicImport = node.moduleReference.kind() === SyntaxKind.ExternalModuleReference;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitExportAssignment(node: ExportAssignmentSyntax): ExportAssignment {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ExportAssignment = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.moveTo(node, node.identifier);\n                var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                this.movePast(node.semicolonToken);\n\n                result = new ExportAssignment(name);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitVariableStatement(node: VariableStatementSyntax): VariableStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n\n            var preComments: Comment[] = null;\n            if (node.modifiers.childCount() > 0) {\n                preComments = this.convertTokenLeadingComments(node.modifiers.firstToken(), start);\n            }\n\n            this.moveTo(node, node.variableDeclaration);\n\n            var declaration = node.variableDeclaration.accept(this);\n            this.movePast(node.semicolonToken);\n\n            for (var i = 0, n = declaration.declarators.members.length; i < n; i++) {\n                var varDecl = <VariableDeclarator>declaration.declarators.members[i];\n\n                if (i === 0) {\n                    varDecl.preComments = this.mergeComments(preComments, varDecl.preComments);\n                }\n\n                if (this.containsToken(node.modifiers, SyntaxKind.ExportKeyword) || this.isParsingAmbientModule) {\n                    varDecl.setVarFlags(varDecl.getVarFlags() | VariableFlags.Exported);\n                }\n                else {\n                    varDecl.setVarFlags(varDecl.getVarFlags() & ~VariableFlags.Exported);\n                }\n\n                if (this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword) || this.isParsingAmbientModule || this.isParsingDeclareFile) {\n                    varDecl.setVarFlags(varDecl.getVarFlags() | VariableFlags.Ambient);\n                }\n                else {\n                    varDecl.setVarFlags(varDecl.getVarFlags() & ~VariableFlags.Ambient);\n                }\n            }\n\n            var result = new VariableStatement(declaration);\n\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitVariableDeclaration(node: VariableDeclarationSyntax): VariableDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n\n            var preComments = this.convertNodeLeadingComments(node, start);\n            var postComments = this.convertNodeTrailingComments(node, start);\n\n            this.moveTo(node, node.variableDeclarators);\n            var variableDecls = this.visitSeparatedSyntaxList(node.variableDeclarators);\n\n            for (var i = 0; i < variableDecls.members.length; i++) {\n                if (i === 0) {\n                    variableDecls.members[i].preComments = preComments;\n                    variableDecls.members[i].postComments = postComments;\n                }\n            }\n\n            var result = new VariableDeclaration(variableDecls);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitVariableDeclarator(node: VariableDeclaratorSyntax): VariableDeclarator {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n            this.movePast(node.identifier);\n            var typeExpr = node.typeAnnotation ? node.typeAnnotation.accept(this) : null;\n            var init = node.equalsValueClause ? node.equalsValueClause.accept(this) : null;\n\n            var result = new VariableDeclarator(name);\n            this.setSpan(result, start, node);\n\n            result.typeExpr = typeExpr;\n            result.init = init;\n            if (init && init.nodeType === NodeType.FunctionDeclaration) {\n                var funcDecl = <FunctionDeclaration>init;\n                funcDecl.hint = name.actualText;\n            }\n\n            // TODO: more flags\n\n            return result;\n        }\n\n        public visitEqualsValueClause(node: EqualsValueClauseSyntax): Expression {\n            this.assertElementAtPosition(node);\n\n            this.previousTokenTrailingComments = this.convertTokenTrailingComments(node.equalsToken,\n                this.position + node.equalsToken.leadingTriviaWidth() + node.equalsToken.width());\n\n            this.movePast(node.equalsToken);\n            var result = node.value.accept(this);\n\n            this.previousTokenTrailingComments = null;\n            return result;\n        }\n\n        private getUnaryExpressionNodeType(kind: SyntaxKind): NodeType {\n            switch (kind) {\n                case SyntaxKind.PlusExpression: return NodeType.PlusExpression;\n                case SyntaxKind.NegateExpression: return NodeType.NegateExpression;\n                case SyntaxKind.BitwiseNotExpression: return NodeType.BitwiseNotExpression;\n                case SyntaxKind.LogicalNotExpression: return NodeType.LogicalNotExpression;\n                case SyntaxKind.PreIncrementExpression: return NodeType.PreIncrementExpression;\n                case SyntaxKind.PreDecrementExpression: return NodeType.PreDecrementExpression;\n                default:\n                    throw Errors.invalidOperation();\n            }\n        }\n\n        public visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.operatorToken);\n                var operand = node.operand.accept(this);\n\n                result = new UnaryExpression(this.getUnaryExpressionNodeType(node.kind()), operand);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private isOnSingleLine(start: number, end: number): boolean {\n            return this.lineMap.getLineNumberFromPosition(start) === this.lineMap.getLineNumberFromPosition(end);\n        }\n\n        public visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var openStart = this.position + node.openBracketToken.leadingTriviaWidth();\n                this.movePast(node.openBracketToken);\n\n                var expressions = this.visitSeparatedSyntaxList(node.expressions);\n\n                var closeStart = this.position + node.closeBracketToken.leadingTriviaWidth();\n                this.movePast(node.closeBracketToken);\n\n                Debug.assert(expressions !== null);\n                result = new UnaryExpression(NodeType.ArrayLiteralExpression, expressions);\n\n                if (this.isOnSingleLine(openStart, closeStart)) {\n                    result.setFlags(result.getFlags() | ASTFlags.SingleLine);\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitOmittedExpression(node: OmittedExpressionSyntax): OmittedExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: OmittedExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                result = new OmittedExpression();\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): ParenthesizedExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ParenthesizedExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n\n                this.movePast(node.openParenToken);\n                var expr = node.expression.accept(this);\n                this.movePast(node.closeParenToken);\n\n                result = new ParenthesizedExpression(expr);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private getArrowFunctionStatements(body: ISyntaxNodeOrToken): Block {\n            if (body.kind() === SyntaxKind.Block) {\n                return body.accept(this);\n            }\n            else {\n                var statements = new ASTList();\n                statements.append(new ReturnStatement(body.accept(this)));\n                var block = new Block(statements);\n                block.closeBraceSpan = statements.members[0];\n                return block;\n            }\n        }\n\n        public visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpressionSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FunctionDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var identifier = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                this.movePast(node.equalsGreaterThanToken);\n\n                var parameters = new ASTList();\n\n                var parameter = new Parameter(identifier);\n                this.setSpanExplicit(parameter, identifier.minChar, identifier.limChar);\n\n                parameters.append(parameter);\n\n                var statements = this.getArrowFunctionStatements(node.body);\n\n                result = new FunctionDeclaration(null, statements, /*isConstructor:*/ false, null, parameters, NodeType.FunctionDeclaration);\n\n                result.returnTypeAnnotation = null;\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.IsFunctionExpression);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.IsFatArrowFunction);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FunctionDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                var typeParameters = node.callSignature.typeParameterList === null ? null : node.callSignature.typeParameterList.accept(this);\n                var parameters = node.callSignature.parameterList.accept(this);\n                var returnType = node.callSignature.typeAnnotation ? node.callSignature.typeAnnotation.accept(this) : null;\n                this.movePast(node.equalsGreaterThanToken);\n\n                var block = this.getArrowFunctionStatements(node.body);\n\n                result = new FunctionDeclaration(null, block, /*isConstructor:*/ false, typeParameters, parameters, NodeType.FunctionDeclaration);\n\n                result.preComments = preComments;\n                result.returnTypeAnnotation = returnType;\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.IsFunctionExpression);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.IsFatArrowFunction);\n                result.variableArgList = this.hasDotDotDotParameter(node.callSignature.parameterList.parameters);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitType(type: ITypeSyntax): TypeReference {\n            this.assertElementAtPosition(type);\n\n            var result: TypeReference;\n            if (type.isToken()) {\n                var start = this.position;\n                result = new TypeReference(type.accept(this), 0);\n                this.setSpan(result, start, type);\n            }\n            else {\n                result = type.accept(this);\n            }\n\n            Debug.assert(result.nodeType === NodeType.TypeRef);\n\n            return result;\n        }\n\n        public visitQualifiedName(node: QualifiedNameSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeReference = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var left = this.visitType(node.left).term;\n                this.movePast(node.dotToken);\n                var right = this.identifierFromToken(node.right, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.right);\n\n                var term = new BinaryExpression(NodeType.MemberAccessExpression, left, right);\n                this.setSpan(term, start, node);\n\n                result = new TypeReference(term, 0);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitTypeArgumentList(node: TypeArgumentListSyntax): ASTList {\n            this.assertElementAtPosition(node);\n\n            var result = new ASTList();\n\n            this.movePast(node.lessThanToken);\n            \n            var start = this.position;\n\n            for (var i = 0, n = node.typeArguments.childCount(); i < n; i++) {\n                if (i % 2 === 1) {\n                    this.movePast(node.typeArguments.childAt(i));\n                }\n                else {\n                    result.append(this.visitType(node.typeArguments.childAt(i)));\n                }\n            }\n            this.movePast(node.greaterThanToken);\n\n            this.setSpan(result, start, node.typeArguments);\n\n            return result;\n        }\n\n        public visitConstructorType(node: ConstructorTypeSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeReference = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.newKeyword);\n                var typeParameters = node.typeParameterList === null ? null : node.typeParameterList.accept(this);\n                var parameters = node.parameterList.accept(this);\n                this.movePast(node.equalsGreaterThanToken);\n                var returnType = node.type ? this.visitType(node.type) : null;\n\n                var funcDecl = new FunctionDeclaration(null, null, false, typeParameters, parameters, NodeType.FunctionDeclaration);\n                this.setSpan(funcDecl, start, node);\n\n                funcDecl.returnTypeAnnotation = returnType;\n                funcDecl.setFunctionFlags(funcDecl.getFunctionFlags() | FunctionFlags.Signature);\n                funcDecl.variableArgList = this.hasDotDotDotParameter(node.parameterList.parameters);\n\n                funcDecl.setFunctionFlags(funcDecl.getFunctionFlags() | FunctionFlags.ConstructMember);\n                funcDecl.setFlags(funcDecl.getFlags() | ASTFlags.TypeReference);\n                funcDecl.hint = \"_construct\";\n                funcDecl.classDecl = null;\n\n                result = new TypeReference(funcDecl, 0);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitFunctionType(node: FunctionTypeSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeReference = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var typeParameters = node.typeParameterList === null ? null : node.typeParameterList.accept(this);\n                var parameters = node.parameterList.accept(this);\n                this.movePast(node.equalsGreaterThanToken);\n                var returnType = node.type ? this.visitType(node.type) : null;\n\n                var funcDecl = new FunctionDeclaration(null, null, false, typeParameters, parameters, NodeType.FunctionDeclaration);\n                this.setSpan(funcDecl, start, node);\n\n                funcDecl.returnTypeAnnotation = returnType;\n                // funcDecl.variableArgList = variableArgList;\n                funcDecl.setFlags(funcDecl.getFunctionFlags() | FunctionFlags.Signature);\n                funcDecl.setFlags(funcDecl.getFlags() | ASTFlags.TypeReference);\n                funcDecl.variableArgList = this.hasDotDotDotParameter(node.parameterList.parameters);\n\n                result = new TypeReference(funcDecl, 0);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitObjectType(node: ObjectTypeSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeReference = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.openBraceToken);\n                var typeMembers = this.visitSeparatedSyntaxList(node.typeMembers);\n                this.movePast(node.closeBraceToken);\n\n                var interfaceDecl = new InterfaceDeclaration(\n                    new Identifier(\"__anonymous\"), null, typeMembers, null, null);\n                this.setSpan(interfaceDecl, start, node);\n\n                interfaceDecl.setFlags(interfaceDecl.getFlags() | ASTFlags.TypeReference);\n\n                result = new TypeReference(interfaceDecl, 0);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitArrayType(node: ArrayTypeSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeReference = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var underlying = this.visitType(node.type);\n                this.movePast(node.openBracketToken);\n                this.movePast(node.closeBracketToken);\n\n                if (underlying.nodeType === NodeType.TypeRef) {\n                    result = <TypeReference>underlying;\n                    result.arrayCount++;\n                }\n                else {\n                    result = new TypeReference(underlying, 1);\n                }\n\n                result.setFlags(result.getFlags() | ASTFlags.TypeReference);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitGenericType(node: GenericTypeSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeReference = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var underlying = this.visitType(node.name).term;\n                var typeArguments = node.typeArgumentList.accept(this);\n\n                var genericType = new GenericType(underlying, typeArguments);\n                this.setSpan(genericType, start, node);\n\n                genericType.setFlags(genericType.getFlags() | ASTFlags.TypeReference);\n\n                result = new TypeReference(genericType, 0);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitTypeAnnotation(node: TypeAnnotationSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            this.movePast(node.colonToken);\n            return this.visitType(node.type);\n        }\n\n        public visitBlock(node: BlockSyntax): Block {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: Block = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.openBraceToken);\n                var statements = this.visitSyntaxList(node.statements);\n                var closeBracePosition = this.position;\n                this.movePast(node.closeBraceToken);\n                var closeBraceSpan = new ASTSpan();\n                this.setSpan(closeBraceSpan, closeBracePosition, node.closeBraceToken);\n\n                result = new Block(statements);\n                result.closeBraceSpan = closeBraceSpan;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitParameter(node: ParameterSyntax): Parameter {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: Parameter = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.identifier);\n                var identifier = this.identifierFromToken(node.identifier, !!node.questionToken, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                this.movePast(node.questionToken);\n                var typeExpr = node.typeAnnotation ? node.typeAnnotation.accept(this) : null;\n                var init = node.equalsValueClause ? node.equalsValueClause.accept(this) : null;\n\n                result = new Parameter(identifier);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.isOptional = !!node.questionToken;\n                result.init = init;\n                result.typeExpr = typeExpr;\n\n                if (node.publicOrPrivateKeyword) {\n                    result.setVarFlags(result.getVarFlags() | VariableFlags.Property);\n\n                    if (node.publicOrPrivateKeyword.kind() === SyntaxKind.PublicKeyword) {\n                        result.setVarFlags(result.getVarFlags() | VariableFlags.Public);\n                    }\n                    else {\n                        result.setVarFlags(result.getVarFlags() | VariableFlags.Private);\n                    }\n                }\n\n                if (node.equalsValueClause || node.dotDotDotToken) {\n                    result.setFlags(result.getFlags() | ASTFlags.OptionalName);\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitMemberAccessExpression(node: MemberAccessExpressionSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var expression: AST = node.expression.accept(this);\n                this.movePast(node.dotToken);\n                var name = this.identifierFromToken(node.name, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.name);\n\n                result = new BinaryExpression(NodeType.MemberAccessExpression, expression, name);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var operand = node.operand.accept(this);\n                this.movePast(node.operatorToken);\n\n                result = new UnaryExpression(node.kind() === SyntaxKind.PostIncrementExpression ? NodeType.PostIncrementExpression : NodeType.PostDecrementExpression, operand);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitElementAccessExpression(node: ElementAccessExpressionSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var expression = node.expression.accept(this);\n                this.movePast(node.openBracketToken);\n                var argumentExpression = node.argumentExpression.accept(this);\n                this.movePast(node.closeBracketToken);\n\n                result = new BinaryExpression(NodeType.ElementAccessExpression, expression, argumentExpression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private convertArgumentListArguments(node: ArgumentListSyntax): ASTList {\n            if (node === null) {\n                return null;\n            }\n\n            var start = this.position;\n\n            this.movePast(node.openParenToken);\n\n            var result = this.visitSeparatedSyntaxList(node.arguments);\n\n            if (node.arguments.fullWidth() === 0 && node.closeParenToken.fullWidth() === 0) {\n                // If the argument list was empty, and closing paren is missing, set the argument ofsets to be the open paren trivia\n                var openParenTokenEnd = start + node.openParenToken.leadingTriviaWidth() + node.openParenToken.width();\n                this.setSpanExplicit(result, openParenTokenEnd, openParenTokenEnd + node.openParenToken.trailingTriviaWidth());\n            }\n\n            this.movePast(node.closeParenToken);\n            return result;\n        }\n\n        public visitInvocationExpression(node: InvocationExpressionSyntax): CallExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: CallExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var expression = node.expression.accept(this);\n                var typeArguments = node.argumentList.typeArgumentList !== null\n                    ? node.argumentList.typeArgumentList.accept(this)\n                    : null;\n                var argumentList = this.convertArgumentListArguments(node.argumentList);\n\n                result = new CallExpression(NodeType.InvocationExpression, expression, typeArguments, argumentList);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitArgumentList(node: ArgumentListSyntax): ASTList {\n            // Processing argument lists should be handled from inside visitInvocationExpression or \n            // visitObjectCreationExpression.\n            throw Errors.invalidOperation();\n        }\n\n        private getBinaryExpressionNodeType(node: BinaryExpressionSyntax): NodeType {\n            switch (node.kind()) {\n                case SyntaxKind.CommaExpression: return NodeType.CommaExpression;\n                case SyntaxKind.AssignmentExpression: return NodeType.AssignmentExpression;\n                case SyntaxKind.AddAssignmentExpression: return NodeType.AddAssignmentExpression;\n                case SyntaxKind.SubtractAssignmentExpression: return NodeType.SubtractAssignmentExpression;\n                case SyntaxKind.MultiplyAssignmentExpression: return NodeType.MultiplyAssignmentExpression;\n                case SyntaxKind.DivideAssignmentExpression: return NodeType.DivideAssignmentExpression;\n                case SyntaxKind.ModuloAssignmentExpression: return NodeType.ModuloAssignmentExpression;\n                case SyntaxKind.AndAssignmentExpression: return NodeType.AndAssignmentExpression;\n                case SyntaxKind.ExclusiveOrAssignmentExpression: return NodeType.ExclusiveOrAssignmentExpression;\n                case SyntaxKind.OrAssignmentExpression: return NodeType.OrAssignmentExpression;\n                case SyntaxKind.LeftShiftAssignmentExpression: return NodeType.LeftShiftAssignmentExpression;\n                case SyntaxKind.SignedRightShiftAssignmentExpression: return NodeType.SignedRightShiftAssignmentExpression;\n                case SyntaxKind.UnsignedRightShiftAssignmentExpression: return NodeType.UnsignedRightShiftAssignmentExpression;\n                case SyntaxKind.LogicalOrExpression: return NodeType.LogicalOrExpression;\n                case SyntaxKind.LogicalAndExpression: return NodeType.LogicalAndExpression;\n                case SyntaxKind.BitwiseOrExpression: return NodeType.BitwiseOrExpression;\n                case SyntaxKind.BitwiseExclusiveOrExpression: return NodeType.BitwiseExclusiveOrExpression;\n                case SyntaxKind.BitwiseAndExpression: return NodeType.BitwiseAndExpression;\n                case SyntaxKind.EqualsWithTypeConversionExpression: return NodeType.EqualsWithTypeConversionExpression;\n                case SyntaxKind.NotEqualsWithTypeConversionExpression: return NodeType.NotEqualsWithTypeConversionExpression;\n                case SyntaxKind.EqualsExpression: return NodeType.EqualsExpression;\n                case SyntaxKind.NotEqualsExpression: return NodeType.NotEqualsExpression;\n                case SyntaxKind.LessThanExpression: return NodeType.LessThanExpression;\n                case SyntaxKind.GreaterThanExpression: return NodeType.GreaterThanExpression;\n                case SyntaxKind.LessThanOrEqualExpression: return NodeType.LessThanOrEqualExpression;\n                case SyntaxKind.GreaterThanOrEqualExpression: return NodeType.GreaterThanOrEqualExpression;\n                case SyntaxKind.InstanceOfExpression: return NodeType.InstanceOfExpression;\n                case SyntaxKind.InExpression: return NodeType.InExpression;\n                case SyntaxKind.LeftShiftExpression: return NodeType.LeftShiftExpression;\n                case SyntaxKind.SignedRightShiftExpression: return NodeType.SignedRightShiftExpression;\n                case SyntaxKind.UnsignedRightShiftExpression: return NodeType.UnsignedRightShiftExpression;\n                case SyntaxKind.MultiplyExpression: return NodeType.MultiplyExpression;\n                case SyntaxKind.DivideExpression: return NodeType.DivideExpression;\n                case SyntaxKind.ModuloExpression: return NodeType.ModuloExpression;\n                case SyntaxKind.AddExpression: return NodeType.AddExpression;\n                case SyntaxKind.SubtractExpression: return NodeType.SubtractExpression;\n            }\n\n            throw Errors.invalidOperation();\n        }\n\n        public visitBinaryExpression(node: BinaryExpressionSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var nodeType = this.getBinaryExpressionNodeType(node);\n                var left = node.left.accept(this);\n                this.movePast(node.operatorToken);\n                var right = node.right.accept(this);\n\n                result = new BinaryExpression(nodeType, left, right);\n\n                if (right.nodeType === NodeType.FunctionDeclaration) {\n                    var id = left.nodeType === NodeType.MemberAccessExpression ? (<BinaryExpression>left).operand2 : left;\n                    var idHint: string = id.nodeType === NodeType.Name ? id.actualText : null;\n\n                    var funcDecl = <FunctionDeclaration>right;\n                    funcDecl.hint = idHint;\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitConditionalExpression(node: ConditionalExpressionSyntax): ConditionalExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ConditionalExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var condition = node.condition.accept(this);\n                this.movePast(node.questionToken);\n                var whenTrue = node.whenTrue.accept(this);\n                this.movePast(node.colonToken);\n                var whenFalse = node.whenFalse.accept(this)\n\n                result = new ConditionalExpression(condition, whenTrue, whenFalse);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitConstructSignature(node: ConstructSignatureSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FunctionDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                this.movePast(node.newKeyword);\n                var typeParameters = node.callSignature.typeParameterList === null ? null : node.callSignature.typeParameterList.accept(this);\n                var parameters = node.callSignature.parameterList.accept(this);\n                var returnType = node.callSignature.typeAnnotation ? node.callSignature.typeAnnotation.accept(this) : null;\n\n                result = new FunctionDeclaration(null, null, /*isConstructor:*/ false, typeParameters, parameters, NodeType.FunctionDeclaration);\n\n                result.preComments = preComments;\n                result.returnTypeAnnotation = returnType;\n\n                result.hint = \"_construct\";\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.ConstructMember);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Method);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n                result.variableArgList = this.hasDotDotDotParameter(node.callSignature.parameterList.parameters);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitMethodSignature(node: MethodSignatureSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FunctionDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                var name = this.identifierFromToken(node.propertyName, !!node.questionToken, /*useValueText:*/ true);\n                this.movePast(node.propertyName);\n                this.movePast(node.questionToken);\n\n                var typeParameters = node.callSignature.typeParameterList ? node.callSignature.typeParameterList.accept(this) : null;\n                var parameters = node.callSignature.parameterList.accept(this);\n                var returnType = node.callSignature.typeAnnotation ? node.callSignature.typeAnnotation.accept(this) : null;\n\n                result = new FunctionDeclaration(name, null, false, typeParameters, parameters, NodeType.FunctionDeclaration);\n\n                result.preComments = preComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.callSignature.parameterList.parameters);\n                result.returnTypeAnnotation = returnType;\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Method);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitIndexSignature(node: IndexSignatureSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FunctionDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                this.movePast(node.openBracketToken);\n\n                var parameter = node.parameter.accept(this);\n\n                this.movePast(node.closeBracketToken);\n                var returnType = node.typeAnnotation ? node.typeAnnotation.accept(this) : null;\n\n                var name = new Identifier(\"__item\");\n                this.setSpanExplicit(name, start, start);   // 0 length name.\n\n                var parameters = new ASTList();\n                parameters.append(parameter);\n\n                result = new FunctionDeclaration(name, null, /*isConstructor:*/ false, null, parameters, NodeType.FunctionDeclaration);\n\n                result.preComments = preComments;\n                result.variableArgList = false;\n                result.returnTypeAnnotation = returnType;\n\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.IndexerMember);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Method);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitPropertySignature(node: PropertySignatureSyntax): VariableDeclarator {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: VariableDeclarator = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                var name = this.identifierFromToken(node.propertyName, !!node.questionToken, /*useValueText:*/ true);\n                this.movePast(node.propertyName);\n                this.movePast(node.questionToken);\n                var typeExpr = node.typeAnnotation ? node.typeAnnotation.accept(this) : null;\n\n                result = new VariableDeclarator(name);\n\n                result.preComments = preComments;\n                result.typeExpr = typeExpr;\n                result.setVarFlags(result.getVarFlags() | VariableFlags.Property);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitParameterList(node: ParameterListSyntax): ASTList {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n\n            var openParenToken = node.openParenToken;\n            this.previousTokenTrailingComments = this.convertTokenTrailingComments(\n                openParenToken, start + openParenToken.leadingTriviaWidth() + openParenToken.width());\n\n            this.movePast(node.openParenToken);\n            var result = this.visitSeparatedSyntaxList(node.parameters);\n            this.movePast(node.closeParenToken);\n\n            return result;\n        }\n\n        public visitCallSignature(node: CallSignatureSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FunctionDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                var typeParameters = node.typeParameterList === null ? null : node.typeParameterList.accept(this);\n                var parameters = node.parameterList.accept(this);\n                var returnType = node.typeAnnotation ? node.typeAnnotation.accept(this) : null;\n\n                result = new FunctionDeclaration(null, null, /*isConstructor:*/ false, typeParameters, parameters, NodeType.FunctionDeclaration);\n\n                result.preComments = preComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.parameterList.parameters);\n                result.returnTypeAnnotation = returnType;\n\n                result.hint = \"_call\";\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.CallMember);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Method);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitTypeParameterList(node: TypeParameterListSyntax): ASTList {\n            this.assertElementAtPosition(node);\n\n            this.movePast(node.lessThanToken);\n            var result = this.visitSeparatedSyntaxList(node.typeParameters);\n            this.movePast(node.greaterThanToken);\n\n            return result;\n        }\n\n        public visitTypeParameter(node: TypeParameterSyntax): TypeParameter {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeParameter = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var identifier = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                var constraint = node.constraint ? node.constraint.accept(this) : null;\n\n                result = new TypeParameter(identifier, constraint);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitConstraint(node: ConstraintSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            this.movePast(node.extendsKeyword);\n            return this.visitType(node.type);\n        }\n\n        public visitIfStatement(node: IfStatementSyntax): IfStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: IfStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.moveTo(node, node.condition);\n                var condition = node.condition.accept(this);\n                this.movePast(node.closeParenToken);\n                var thenBod = node.statement.accept(this);\n                var elseBod = node.elseClause ? node.elseClause.accept(this) : null;\n\n                result = new IfStatement(condition, thenBod, elseBod);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitElseClause(node: ElseClauseSyntax): Statement {\n            this.assertElementAtPosition(node);\n\n            this.movePast(node.elseKeyword);\n            return node.statement.accept(this);\n        }\n\n        public visitExpressionStatement(node: ExpressionStatementSyntax): ExpressionStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ExpressionStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                var expression = node.expression.accept(this);\n                this.movePast(node.semicolonToken);\n\n                result = new ExpressionStatement(expression);\n                result.preComments = preComments;\n                result.postComments = postComments;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitConstructorDeclaration(node: ConstructorDeclarationSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FunctionDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.parameterList);\n                var parameters = node.parameterList.accept(this);\n\n                var block = node.block ? node.block.accept(this) : null;\n\n                this.movePast(node.semicolonToken);\n\n                result = new FunctionDeclaration(null, block, /*isConstructor:*/ true, null, parameters, NodeType.FunctionDeclaration);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.parameterList.parameters);\n\n                if (node.semicolonToken) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FunctionDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.propertyName);\n                var name = this.identifierFromToken(node.propertyName, /*isOptional:*/ false, /*useValueText:*/ true);\n\n                this.movePast(node.propertyName);\n\n                var typeParameters = node.callSignature.typeParameterList === null ? null : node.callSignature.typeParameterList.accept(this);\n                var parameters = node.callSignature.parameterList.accept(this);\n                var returnType = node.callSignature.typeAnnotation\n                    ? node.callSignature.typeAnnotation.accept(this)\n                    : null;\n\n                var block = node.block ? node.block.accept(this) : null;\n                this.movePast(node.semicolonToken);\n\n                result = new FunctionDeclaration(name, block, /*isConstructor:*/ false, typeParameters, parameters, NodeType.FunctionDeclaration);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.callSignature.parameterList.parameters);\n                result.returnTypeAnnotation = returnType;\n\n                if (node.semicolonToken) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n                }\n\n                if (this.containsToken(node.modifiers, SyntaxKind.PrivateKeyword)) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Private);\n                }\n                else {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Public);\n                }\n\n                if (this.containsToken(node.modifiers, SyntaxKind.StaticKeyword)) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Static);\n                }\n\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Method);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitMemberAccessorDeclaration(node: MemberAccessorDeclarationSyntax, typeAnnotation: TypeAnnotationSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FunctionDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.propertyName);\n                var name = this.identifierFromToken(node.propertyName, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.propertyName);\n                var parameters = node.parameterList.accept(this);\n                var returnType = typeAnnotation ? typeAnnotation.accept(this) : null;\n\n                var block = node.block ? node.block.accept(this) : null;\n                result = new FunctionDeclaration(name, block, /*isConstructor:*/ false, null, parameters, NodeType.FunctionDeclaration);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.parameterList.parameters);\n                result.returnTypeAnnotation = returnType;\n\n                if (this.containsToken(node.modifiers, SyntaxKind.PrivateKeyword)) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Private);\n                }\n                else {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Public);\n                }\n\n                if (this.containsToken(node.modifiers, SyntaxKind.StaticKeyword)) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Static);\n                }\n\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Method);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var result = this.visitMemberAccessorDeclaration(node, node.typeAnnotation);\n\n            result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.GetAccessor);\n            result.hint = \"get\" + result.name.actualText;\n\n            return result;\n        }\n\n        public visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var result = this.visitMemberAccessorDeclaration(node, null);\n\n            result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.SetAccessor);\n            result.hint = \"set\" + result.name.actualText;\n\n            return result;\n        }\n\n        public visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): VariableDeclarator {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: VariableDeclarator = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.variableDeclarator);\n                this.moveTo(node.variableDeclarator, node.variableDeclarator.identifier);\n\n                var name = this.identifierFromToken(node.variableDeclarator.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.variableDeclarator.identifier);\n                var typeExpr = node.variableDeclarator.typeAnnotation ? node.variableDeclarator.typeAnnotation.accept(this) : null;\n                var init = node.variableDeclarator.equalsValueClause ? node.variableDeclarator.equalsValueClause.accept(this) : null;\n                this.movePast(node.semicolonToken);\n\n                result = new VariableDeclarator(name);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.typeExpr = typeExpr;\n                result.init = init;\n\n                if (this.containsToken(node.modifiers, SyntaxKind.StaticKeyword)) {\n                    result.setVarFlags(result.getVarFlags() | VariableFlags.Static);\n                }\n\n                if (this.containsToken(node.modifiers, SyntaxKind.PrivateKeyword)) {\n                    result.setVarFlags(result.getVarFlags() | VariableFlags.Private);\n                }\n                else {\n                    result.setVarFlags(result.getVarFlags() | VariableFlags.Public);\n                }\n\n                result.setVarFlags(result.getVarFlags() | VariableFlags.ClassProperty);\n\n                // var declarators = new ASTList();\n                // declarators.append(declarator);\n\n                //var declaration = new VariableDeclaration(declarators)\n                //this.setSpan(declaration, start, node);\n\n                //result = new VariableStatement(declaration);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitThrowStatement(node: ThrowStatementSyntax): ThrowStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ThrowStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.throwKeyword);\n                var expression = node.expression.accept(this);\n                this.movePast(node.semicolonToken);\n\n                result = new ThrowStatement(expression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitReturnStatement(node: ReturnStatementSyntax): ReturnStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ReturnStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.returnKeyword);\n                var expression = node.expression ? node.expression.accept(this) : null;\n                this.movePast(node.semicolonToken);\n\n                result = new ReturnStatement(expression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): CallExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: CallExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.newKeyword);\n                var expression = node.expression.accept(this);\n                var typeArgumentList = node.argumentList === null || node.argumentList.typeArgumentList === null ? null : node.argumentList.typeArgumentList.accept(this);\n                var argumentList = this.convertArgumentListArguments(node.argumentList);\n\n                result = new CallExpression(NodeType.ObjectCreationExpression, expression, typeArgumentList, argumentList);\n\n                if (expression.nodeType === NodeType.TypeRef) {\n                    var typeRef = <TypeReference>expression;\n\n                    if (typeRef.arrayCount === 0) {\n                        var term = typeRef.term;\n                        if (term.nodeType === NodeType.MemberAccessExpression || term.nodeType === NodeType.Name) {\n                            expression = term;\n                        }\n                    }\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitSwitchStatement(node: SwitchStatementSyntax): SwitchStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: SwitchStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.switchKeyword);\n                this.movePast(node.openParenToken);\n                var expression = node.expression.accept(this);\n                this.movePast(node.closeParenToken);\n                var closeParenPosition = this.position;\n                this.movePast(node.openBraceToken);\n\n                result = new SwitchStatement(expression);\n\n                result.statement.minChar = start;\n                result.statement.limChar = closeParenPosition;\n\n                result.caseList = new ASTList()\n\n                for (var i = 0, n = node.switchClauses.childCount(); i < n; i++) {\n                    var switchClause = node.switchClauses.childAt(i);\n                    var translated = switchClause.accept(this);\n\n                    if (switchClause.kind() === SyntaxKind.DefaultSwitchClause) {\n                        result.defaultCase = translated;\n                    }\n\n                    result.caseList.append(translated);\n                }\n\n                this.movePast(node.closeBraceToken);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitCaseSwitchClause(node: CaseSwitchClauseSyntax): CaseClause {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: CaseClause = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.caseKeyword);\n                var expression = node.expression.accept(this);\n                this.movePast(node.colonToken);\n                var statements = this.visitSyntaxList(node.statements);\n\n                result = new CaseClause();\n\n                result.expr = expression;\n                result.body = statements;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): CaseClause {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: CaseClause = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.defaultKeyword);\n                this.movePast(node.colonToken);\n                var statements = this.visitSyntaxList(node.statements);\n\n                result = new CaseClause();\n                result.body = statements;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitBreakStatement(node: BreakStatementSyntax): Jump {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: Jump = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.breakKeyword);\n                this.movePast(node.identifier);\n                this.movePast(node.semicolonToken);\n\n                result = new Jump(NodeType.BreakStatement);\n\n                if (node.identifier !== null) {\n                    result.target = node.identifier.valueText();\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitContinueStatement(node: ContinueStatementSyntax): Jump {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: Jump = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.continueKeyword);\n                this.movePast(node.identifier);\n                this.movePast(node.semicolonToken);\n\n                result = new Jump(NodeType.ContinueStatement);\n\n                if (node.identifier !== null) {\n                    result.target = node.identifier.valueText();\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitForStatement(node: ForStatementSyntax): ForStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ForStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.forKeyword);\n                this.movePast(node.openParenToken);\n                var init = node.variableDeclaration\n                    ? node.variableDeclaration.accept(this)\n                    : node.initializer\n                        ? node.initializer.accept(this)\n                        : null;\n                this.movePast(node.firstSemicolonToken);\n                var cond = node.condition ? node.condition.accept(this) : null;\n                this.movePast(node.secondSemicolonToken);\n                var incr = node.incrementor ? node.incrementor.accept(this) : null;\n                this.movePast(node.closeParenToken);\n                var body = node.statement.accept(this);\n\n                result = new ForStatement(init, cond, incr, body);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitForInStatement(node: ForInStatementSyntax): ForInStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ForInStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.forKeyword);\n                this.movePast(node.openParenToken);\n                var init = node.variableDeclaration ? node.variableDeclaration.accept(this) : node.left.accept(this);\n                this.movePast(node.inKeyword);\n                var expression = node.expression.accept(this);\n                this.movePast(node.closeParenToken);\n                var body = node.statement.accept(this);\n\n                result = new ForInStatement(init, expression, body);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitWhileStatement(node: WhileStatementSyntax): WhileStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: WhileStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.moveTo(node, node.condition);\n                var condition = node.condition.accept(this);\n                this.movePast(node.closeParenToken);\n                var statement = node.statement.accept(this);\n\n                result = new WhileStatement(condition, statement);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitWithStatement(node: WithStatementSyntax): WithStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: WithStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.moveTo(node, node.condition);\n                var condition = node.condition.accept(this);\n                this.movePast(node.closeParenToken);\n                var statement = node.statement.accept(this);\n\n                result = new WithStatement(condition, statement);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitCastExpression(node: CastExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.lessThanToken);\n                var castTerm = this.visitType(node.type);\n                this.movePast(node.greaterThanToken);\n                var expression = node.expression.accept(this);\n\n                result = new UnaryExpression(NodeType.CastExpression, expression);\n                result.castTerm = castTerm;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                var openStart = this.position + node.openBraceToken.leadingTriviaWidth();\n                this.movePast(node.openBraceToken);\n\n                var propertyAssignments = this.visitSeparatedSyntaxList(node.propertyAssignments);\n\n                var closeStart = this.position + node.closeBraceToken.leadingTriviaWidth();\n                this.movePast(node.closeBraceToken);\n\n                result = new UnaryExpression(NodeType.ObjectLiteralExpression, propertyAssignments);\n                result.preComments = preComments;\n\n                if (this.isOnSingleLine(openStart, closeStart)) {\n                    result.setFlags(result.getFlags() | ASTFlags.SingleLine);\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                var left = node.propertyName.accept(this);\n\n                this.previousTokenTrailingComments = this.convertTokenTrailingComments(\n                    node.colonToken, this.position + node.colonToken.leadingTriviaWidth() + node.colonToken.width());\n\n                this.movePast(node.colonToken);\n                var right = node.expression.accept(this);\n\n                result = new BinaryExpression(NodeType.Member, left, right);\n                result.preComments = preComments;\n\n                if (right.nodeType === NodeType.FunctionDeclaration) {\n                    var funcDecl = <FunctionDeclaration>right;\n                    funcDecl.hint = left.text;\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitFunctionPropertyAssignment(node: FunctionPropertyAssignmentSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var left = node.propertyName.accept(this);\n                var functionDeclaration = <FunctionDeclaration>node.callSignature.accept(this);\n                var block = node.block.accept(this);\n\n                functionDeclaration.hint = left.text;\n                functionDeclaration.block = block;\n\n                result = new BinaryExpression(NodeType.Member, left, functionDeclaration);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.moveTo(node, node.propertyName);\n                var name = this.identifierFromToken(node.propertyName, /*isOptional:*/ false, /*useValueText:*/ true);\n                var functionName = this.identifierFromToken(node.propertyName, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.propertyName);\n                this.movePast(node.openParenToken);\n                this.movePast(node.closeParenToken);\n                var returnType = node.typeAnnotation\n                    ? node.typeAnnotation.accept(this)\n                    : null;\n\n                var block = node.block ? node.block.accept(this) : null;\n\n                var funcDecl = new FunctionDeclaration(functionName, block, /*isConstructor:*/ false, null, new ASTList(), NodeType.FunctionDeclaration);\n                this.setSpan(funcDecl, start, node);\n\n                funcDecl.setFunctionFlags(funcDecl.getFunctionFlags() | FunctionFlags.GetAccessor);\n                funcDecl.setFunctionFlags(funcDecl.getFunctionFlags() | FunctionFlags.IsFunctionExpression);\n                funcDecl.hint = \"get\" + node.propertyName.valueText();\n                funcDecl.returnTypeAnnotation = returnType;\n\n                result = new BinaryExpression(NodeType.Member, name, funcDecl);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.moveTo(node, node.propertyName);\n                var name = this.identifierFromToken(node.propertyName, /*isOptional:*/ false, /*useValueText:*/ true);\n                var functionName = this.identifierFromToken(node.propertyName, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.propertyName);\n                this.movePast(node.openParenToken);\n                var parameter = node.parameter.accept(this);\n                this.movePast(node.closeParenToken);\n\n                var parameters = new ASTList();\n                parameters.append(parameter);\n\n                var block = node.block ? node.block.accept(this) : null;\n\n                var funcDecl = new FunctionDeclaration(functionName, block, /*isConstructor:*/ false, null, parameters, NodeType.FunctionDeclaration);\n                this.setSpan(funcDecl, start, node);\n\n                funcDecl.setFunctionFlags(funcDecl.getFunctionFlags() | FunctionFlags.SetAccessor);\n                funcDecl.setFunctionFlags(funcDecl.getFunctionFlags() | FunctionFlags.IsFunctionExpression);\n                funcDecl.hint = \"set\" + node.propertyName.valueText();\n\n                result = new BinaryExpression(NodeType.Member, name, funcDecl);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitFunctionExpression(node: FunctionExpressionSyntax): FunctionDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FunctionDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                this.movePast(node.functionKeyword);\n                var name = node.identifier === null ? null : this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                var typeParameters = node.callSignature.typeParameterList === null ? null : node.callSignature.typeParameterList.accept(this);\n                var parameters = node.callSignature.parameterList.accept(this);\n                var returnType = node.callSignature.typeAnnotation\n                    ? node.callSignature.typeAnnotation.accept(this)\n                    : null;\n\n                var block = node.block ? node.block.accept(this) : null;\n\n                result = new FunctionDeclaration(name, block, false, typeParameters, parameters, NodeType.FunctionDeclaration);\n\n                result.preComments = preComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.callSignature.parameterList.parameters);\n                result.returnTypeAnnotation = returnType;\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.IsFunctionExpression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitEmptyStatement(node: EmptyStatementSyntax): EmptyStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: EmptyStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.semicolonToken);\n\n                result = new EmptyStatement();\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitTryStatement(node: TryStatementSyntax): TryStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TryStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.tryKeyword);\n                var tryBody = node.block.accept(this);\n\n                // var tryPart: AST = new Try(block);\n                // this.setSpanExplicit(tryPart, start, this.position);\n\n                var catchClause: CatchClause = null;\n                if (node.catchClause !== null) {\n                    catchClause = node.catchClause.accept(this);\n                }\n\n                var finallyBody: Block = null;\n                if (node.finallyClause !== null) {\n                    finallyBody = node.finallyClause.accept(this);\n                }\n\n                result = new TryStatement(tryBody, catchClause, finallyBody);\n            }\n\n            Debug.assert(result !== null);\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitCatchClause(node: CatchClauseSyntax): CatchClause {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: CatchClause = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.catchKeyword);\n                this.movePast(node.openParenToken);\n                var identifier = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                var typeExpr = node.typeAnnotation ? node.typeAnnotation.accept(this) : null;\n                this.movePast(node.closeParenToken);\n                var block = node.block.accept(this);\n\n                var varDecl = new VariableDeclarator(identifier);\n                this.setSpanExplicit(varDecl, identifier.minChar, identifier.limChar);\n\n                varDecl.typeExpr = typeExpr;\n\n                result = new CatchClause(varDecl, block);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitFinallyClause(node: FinallyClauseSyntax): Block {\n            this.movePast(node.finallyKeyword);\n            return node.block.accept(this);\n        }\n\n        public visitLabeledStatement(node: LabeledStatementSyntax): LabeledStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: LabeledStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var identifier = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                this.movePast(node.colonToken);\n                var statement = node.statement.accept(this);\n\n                result = new LabeledStatement(identifier, statement);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitDoStatement(node: DoStatementSyntax): DoStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: DoStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.doKeyword);\n                var statement = node.statement.accept(this);\n                var whileSpan = new ASTSpan();\n                this.setSpan1(whileSpan, this.position, node.whileKeyword);\n\n                this.movePast(node.whileKeyword);\n                this.movePast(node.openParenToken);\n                var condition = node.condition.accept(this);\n                this.movePast(node.closeParenToken);\n                this.movePast(node.semicolonToken);\n\n                result = new DoStatement(statement, condition);\n                result.whileSpan = whileSpan;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitTypeOfExpression(node: TypeOfExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.typeOfKeyword);\n                var expression = node.expression.accept(this);\n\n                result = new UnaryExpression(NodeType.TypeOfExpression, expression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitDeleteExpression(node: DeleteExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.deleteKeyword);\n                var expression = node.expression.accept(this);\n\n                result = new UnaryExpression(NodeType.DeleteExpression, expression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitVoidExpression(node: VoidExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.voidKeyword);\n                var expression = node.expression.accept(this);\n\n                result = new UnaryExpression(NodeType.VoidExpression, expression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        public visitDebuggerStatement(node: DebuggerStatementSyntax): DebuggerStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: DebuggerStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.debuggerKeyword);\n                this.movePast(node.semicolonToken);\n\n                result = new DebuggerStatement();\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'core\\references.ts\' />\n///<reference path=\'text\\references.ts\' />\n///<reference path=\'syntax\\references.ts\' />\n///<reference path=\'diagnostics.ts\' />\n///<reference path=\'flags.ts\' />\n///<reference path=\'nodeTypes.ts\' />\n///<reference path=\'hashTable.ts\' />\n///<reference path=\'ast.ts\' />\n///<reference path=\'astWalker.ts\' />\n///<reference path=\'astWalkerCallback.ts\' />\n///<reference path=\'astPath.ts\' />\n///<reference path=\'base64.ts\' />\n///<reference path=\'sourceMapping.ts\' />\n///<reference path=\'emitter.ts\' />\n///<reference path=\'types.ts\' />\n///<reference path=\'pathUtils.ts\' />\n///<reference path=\'referenceResolution.ts\' />\n///<reference path=\'precompile.ts\' />\n///<reference path=\'declarationEmitter.ts\' />\n///<reference path=\'typecheck\\dataMap.ts\' />\n///<reference path=\'typecheck\\pullFlags.ts\' />\n///<reference path=\'typecheck\\pullDecls.ts\' />\n///<reference path=\'typecheck\\pullSymbols.ts\' />\n///<reference path=\'typecheck\\pullSymbolBindingContext.ts\' />\n///<reference path=\'typecheck\\pullTypeResolutionContext.ts\' />\n///<reference path=\'typecheck\\pullTypeResolution.ts\' />\n///<reference path=\'typecheck\\pullTypeResolution2.ts\' />\n///<reference path=\'typecheck\\pullTypeChecker.ts\' />\n///<reference path=\'typecheck\\pullDeclDiffer.ts\' />\n///<reference path=\'typecheck\\pullSemanticInfo.ts\' />\n///<reference path=\'typecheck\\pullDeclCollection.ts\' />\n///<reference path=\'typecheck\\pullSymbolBinder.ts\' />\n///<reference path=\'typecheck\\pullSymbolGraph.ts\' />\n///<reference path=\'typecheck\\SemanticDiagnostic.ts\' />\n///<reference path=\'typecheck\\pullHelpers.ts\' />\n///<reference path=\'syntaxTreeToAstVisitor.ts\' />\n\nmodule TypeScript {\n\n    declare var IO;\n\n    export interface EmitterIOHost {\n        // function that can even create a folder structure if needed\n        createFile(path: string, useUTF8?: boolean): ITextWriter;\n\n        // function to check if file exists on the disk\n        fileExists(path: string): boolean;\n\n        // Function to check if the directory exists on the disk\n        directoryExists(path: string): boolean;\n\n        // Resolves the path\n        resolvePath(path: string): string;\n    }\n\n    export interface PullTypeInfoAtPositionInfo {\n        symbol: PullSymbol;\n        ast: AST;\n        enclosingScopeSymbol: PullSymbol;\n        candidateSignature: PullSignatureSymbol;\n        callSignatures: PullSignatureSymbol[];\n        isConstructorCall: boolean;\n    }\n\n    export interface PullSymbolInfo {\n        symbol: PullSymbol;\n        ast: AST;\n        enclosingScopeSymbol: PullSymbol;\n    }\n\n    export interface PullCallSymbolInfo {\n        targetSymbol: PullSymbol;\n        resolvedSignatures: TypeScript.PullSignatureSymbol[];\n        candidateSignature: TypeScript.PullSignatureSymbol;\n        isConstructorCall: boolean;\n        ast: AST;\n        enclosingScopeSymbol: PullSymbol;\n    }\n\n    export interface PullVisibleSymbolsInfo {\n        symbols: PullSymbol[];\n        enclosingScopeSymbol: PullSymbol;\n    }\n\n    export class Document {\n        private _diagnostics: IDiagnostic[] = null;\n        private _syntaxTree: SyntaxTree = null;\n        public script: Script;\n        public lineMap: LineMap;\n\n        constructor(public fileName: string,\n                    private compilationSettings: CompilationSettings,\n                    private scriptSnapshot: IScriptSnapshot,\n                    public version: number,\n                    public isOpen: boolean,\n                    syntaxTree: SyntaxTree) {\n\n            if (isOpen) {\n                this._syntaxTree = syntaxTree;\n            }\n            else {\n                // Don\'t store the syntax tree for a closed file.\n                this._diagnostics = syntaxTree.diagnostics();\n            }\n\n            this.lineMap = syntaxTree.lineMap();\n            this.script = SyntaxTreeToAstVisitor.visit(syntaxTree, fileName, compilationSettings);\n        }\n\n        public diagnostics(): IDiagnostic[]{\n            if (this._diagnostics === null) {\n                this._diagnostics = this._syntaxTree.diagnostics();\n            }\n\n            return this._diagnostics;\n        }\n\n        public syntaxTree(): SyntaxTree {\n            if (this._syntaxTree) {\n                return this._syntaxTree;\n            }\n\n            return Parser.parse(\n                this.fileName,\n                SimpleText.fromScriptSnapshot(this.scriptSnapshot),\n                TypeScript.isDTSFile(this.fileName),\n                this.compilationSettings.codeGenTarget,\n                getParseOptions(this.compilationSettings));\n        }\n\n        public update(scriptSnapshot: IScriptSnapshot, version: number, isOpen: boolean, textChangeRange: TextChangeRange, settings: CompilationSettings): Document {\n            var oldScript = this.script;\n            var oldSyntaxTree = this._syntaxTree;\n\n            var text = SimpleText.fromScriptSnapshot(scriptSnapshot);\n\n            // If we don\'t have a text change, or we don\'t have an old syntax tree, then do a full\n            // parse.  Otherwise, do an incremental parse.\n            var newSyntaxTree = textChangeRange === null || oldSyntaxTree === null\n                ? TypeScript.Parser.parse(this.fileName, text, TypeScript.isDTSFile(this.fileName), settings.codeGenTarget, getParseOptions(this.compilationSettings))\n                : TypeScript.Parser.incrementalParse(oldSyntaxTree, textChangeRange, text);\n\n            return new Document(this.fileName, this.compilationSettings, scriptSnapshot, version, isOpen, newSyntaxTree);\n        }\n\n        public static create(fileName: string, scriptSnapshot: IScriptSnapshot, version: number, isOpen: boolean, referencedFiles: IFileReference[], compilationSettings): Document {\n            // for an open file, make a syntax tree and a script, and store both around.\n\n            var syntaxTree = Parser.parse(fileName, SimpleText.fromScriptSnapshot(scriptSnapshot), TypeScript.isDTSFile(fileName), compilationSettings.codeGenTarget, getParseOptions(compilationSettings));\n\n            var document = new Document(fileName, compilationSettings, scriptSnapshot, version, isOpen, syntaxTree);\n            document.script.referencedFiles = referencedFiles;\n\n            return document;\n        }\n\n        //public static fromClosed(fileName: string, scriptSnapshot: IScriptSnapshot, script: Script, syntaxTree: SyntaxTree): Document {\n        //    return new Document(fileName, scriptSnapshot, script, null, syntaxTree.diagnostics());\n        //}\n    }\n\n    export class TypeScriptCompiler {\n        public pullTypeChecker: PullTypeChecker = null;\n        public semanticInfoChain: SemanticInfoChain = null;\n\n        public emitOptions: EmitOptions;\n\n        public fileNameToDocument = new TypeScript.StringHashTable();\n\n        constructor(public logger: ILogger = new NullLogger(),\n                    public settings: CompilationSettings = new CompilationSettings(),\n                    public diagnosticMessages: IDiagnosticMessages = null) {\n            this.emitOptions = new EmitOptions(this.settings);\n\n            if (this.diagnosticMessages) {\n                TypeScript.diagnosticMessages = this.diagnosticMessages\n            }\n        }\n\n        public getDocument(fileName: string): Document {\n            return this.fileNameToDocument.lookup(fileName);\n        }\n\n        public timeFunction(funcDescription: string, func: () => any): any {\n            return TypeScript.timeFunction(this.logger, funcDescription, func);\n        }\n\n        public addSourceUnit(fileName: string,\n                             scriptSnapshot: IScriptSnapshot,\n                             version: number,\n                             isOpen: boolean,\n                             referencedFiles: IFileReference[] = []): Document {\n            return this.timeFunction(\"addSourceUnit(\" + fileName + \")\", () => {\n                var document = Document.create(fileName, scriptSnapshot, version, isOpen, referencedFiles, this.emitOptions.compilationSettings);\n                this.fileNameToDocument.addOrUpdate(fileName, document);\n\n                return document;\n            } );\n        }\n\n        public updateSourceUnit(fileName: string, scriptSnapshot: IScriptSnapshot, version: number, isOpen: boolean, textChangeRange: TextChangeRange): Document {\n            return this.timeFunction(\"pullUpdateUnit(\" + fileName + \")\", () => {\n                var document = this.getDocument(fileName);\n                var updatedDocument = document.update(scriptSnapshot, version, isOpen, textChangeRange, this.settings);\n\n                this.fileNameToDocument.addOrUpdate(fileName, updatedDocument);\n\n                this.pullUpdateScript(document, updatedDocument);\n\n                return updatedDocument;\n            });\n        }\n\n        private isDynamicModuleCompilation(): boolean {\n            var fileNames = this.fileNameToDocument.getAllKeys();\n            for (var i = 0, n = fileNames.length; i < n; i++) {\n                var document = this.getDocument(fileNames[i]);\n                var script = document.script;\n                if (!script.isDeclareFile && script.topLevelMod !== null) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private updateCommonDirectoryPath(): IDiagnostic {\n            var commonComponents: string[] = [];\n            var commonComponentsLength = -1;\n\n            var fileNames = this.fileNameToDocument.getAllKeys();\n            for (var i = 0, len = fileNames.length; i < len; i++) {\n                var fileName = fileNames[i];\n                var document = this.getDocument(fileNames[i]);\n                var script = document.script;\n\n                if (!script.isDeclareFile) {\n                    var fileComponents = filePathComponents(fileName);\n                    if (commonComponentsLength === -1) {\n                        // First time at finding common path\n                        // So common path = directory of file\n                        commonComponents = fileComponents;\n                        commonComponentsLength = commonComponents.length;\n                    } else {\n                        var updatedPath = false;\n                        for (var j = 0; j < commonComponentsLength && j < fileComponents.length; j++) {\n                            if (commonComponents[j] !== fileComponents[j]) {\n                                // The new components = 0 ... j -1\n                                commonComponentsLength = j;\n                                updatedPath = true;\n\n                                if (j === 0) {\n                                    // Its error to not have common path\n                                    return new Diagnostic(null, 0, 0, DiagnosticCode.Cannot_find_the_common_subdirectory_path_for_the_input_files, null);\n                                }\n\n                                break;\n                            }\n                        }\n\n                        // If the fileComponent path completely matched and less than already found update the length\n                        if (!updatedPath && fileComponents.length < commonComponentsLength) {\n                            commonComponentsLength = fileComponents.length;\n                        }\n                    }\n                }\n            }\n\n            this.emitOptions.commonDirectoryPath = commonComponents.slice(0, commonComponentsLength).join(\"/\") + \"/\";\n            if (this.emitOptions.compilationSettings.outputOption.charAt(this.emitOptions.compilationSettings.outputOption.length - 1) !== \"/\") {\n                this.emitOptions.compilationSettings.outputOption += \"/\";\n            }\n\n            return null;\n        }\n\n        public parseEmitOption(ioHost: EmitterIOHost): IDiagnostic {\n            this.emitOptions.ioHost = ioHost;\n            if (this.emitOptions.compilationSettings.outputOption === \"\") {\n                this.emitOptions.outputMany = true;\n                this.emitOptions.commonDirectoryPath = \"\";\n                return null;\n            }\n\n            this.emitOptions.compilationSettings.outputOption = switchToForwardSlashes(this.emitOptions.ioHost.resolvePath(this.emitOptions.compilationSettings.outputOption));\n\n            // Determine if output options is directory or file\n            if (this.emitOptions.ioHost.directoryExists(this.emitOptions.compilationSettings.outputOption)) {\n                // Existing directory\n                this.emitOptions.outputMany = true;\n            } else if (this.emitOptions.ioHost.fileExists(this.emitOptions.compilationSettings.outputOption)) {\n                // Existing file\n                this.emitOptions.outputMany = false;\n            }\n            else {\n                // New File/directory\n                this.emitOptions.outputMany = !isJSFile(this.emitOptions.compilationSettings.outputOption);\n            }\n\n            // Verify if options are correct\n            if (this.isDynamicModuleCompilation() && !this.emitOptions.outputMany) {\n                return new Diagnostic(null, 0, 0, DiagnosticCode.Cannot_compile_dynamic_modules_when_emitting_into_single_file, null);\n            }\n\n            // Parse the directory structure\n            if (this.emitOptions.outputMany) {\n                return this.updateCommonDirectoryPath();\n            }\n\n            return null;\n        }\n\n        public getScripts(): Script[] {\n            var result: TypeScript.Script[] = [];\n            var fileNames = this.fileNameToDocument.getAllKeys();\n\n            for (var i = 0, n = fileNames.length; i < n; i++) {\n                var document = this.getDocument(fileNames[i]);\n                result.push(document.script);\n            }\n\n            return result;\n        }\n\n        private useUTF8ForFile(script: Script) {\n            if (this.emitOptions.outputMany) {\n                return this.outputScriptToUTF8(script);\n            } else {\n                return this.outputScriptsToUTF8(this.getScripts());\n            }\n        }\n\n        static mapToDTSFileName(fileName: string, wholeFileNameReplaced: boolean) {\n            return getDeclareFilePath(fileName);\n        }\n\n        private canEmitDeclarations(script?: Script) {\n            if (!this.settings.generateDeclarationFiles) {\n                return false;\n            }\n\n            // If its already a declare file or is resident or does not contain body \n            if (!!script && (script.isDeclareFile || script.moduleElements === null)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        // Caller is responsible for closing emitter.\n        private emitDeclarations(document: Document, declarationEmitter?: DeclarationEmitter): DeclarationEmitter {\n            var script = document.script;\n            if (this.canEmitDeclarations(script)) {\n                if (!declarationEmitter) {\n                    var declareFileName = this.emitOptions.mapOutputFileName(document.fileName, TypeScriptCompiler.mapToDTSFileName);\n                    declarationEmitter = new DeclarationEmitter(\n                        declareFileName, this.useUTF8ForFile(script), this.semanticInfoChain, this.emitOptions);\n                }\n\n                declarationEmitter.fileName = document.fileName;\n                declarationEmitter.emitDeclarations(script);\n            }\n\n            return declarationEmitter;\n        }\n\n        // Will not throw exceptions.\n        public emitAllDeclarations(): IDiagnostic[] {\n            if (this.canEmitDeclarations()) {\n                var sharedEmitter: DeclarationEmitter = null;\n                var fileNames = this.fileNameToDocument.getAllKeys();\n\n                for (var i = 0, n = fileNames.length; i < n; i++) {\n                    var fileName = fileNames[i];\n\n                    try {\n                        var document = this.getDocument(fileNames[i]);\n\n                        if (this.emitOptions.outputMany) {\n                            var singleEmitter = this.emitDeclarations(document);\n                            if (singleEmitter) {\n                                singleEmitter.close();\n                            }\n                        }\n                        else {\n                            // Create or reuse file\n                            sharedEmitter = this.emitDeclarations(document, sharedEmitter);\n                        }\n                    }\n                    catch (ex1) {\n                        return Emitter.handleEmitterError(fileName, ex1);\n                    }\n                }\n\n                if (sharedEmitter) {\n                    try {\n                        sharedEmitter.close();\n                    }\n                    catch (ex2) {\n                        return Emitter.handleEmitterError(sharedEmitter.fileName, ex2);\n                    }\n                }\n            }\n\n            return [];\n        }\n\n        // Will not throw exceptions.\n        public emitUnitDeclarations(fileName: string): IDiagnostic[] {\n            if (this.canEmitDeclarations()) {\n                if (this.emitOptions.outputMany) {\n                    try {\n                        var document = this.getDocument(fileName);\n                        var emitter = this.emitDeclarations(document);\n                        if (emitter) {\n                            emitter.close();\n                        }\n                    }\n                    catch (ex1) {\n                        return Emitter.handleEmitterError(fileName, ex1);\n                    }\n                }\n                else\n                {\n                    return this.emitAllDeclarations();\n                }\n            }\n\n            return [];\n        }\n\n        static mapToFileNameExtension(extension: string, fileName: string, wholeFileNameReplaced: boolean) {\n            if (wholeFileNameReplaced) {\n                // The complete output is redirected in this file so do not change extension\n                return fileName;\n            } else {\n                // Change the extension of the file\n                var splitFname = fileName.split(\".\");\n                splitFname.pop();\n                return splitFname.join(\".\") + extension;\n            }\n        }\n\n        static mapToJSFileName(fileName: string, wholeFileNameReplaced: boolean) {\n            return TypeScriptCompiler.mapToFileNameExtension(\".js\", fileName, wholeFileNameReplaced);\n        }\n\n        // Caller is responsible for closing the returned emitter.\n        // May throw exceptions.\n        private emit(document: Document,\n                     inputOutputMapper?: (inputName: string, outputName: string) => void ,\n                     emitter?: Emitter): Emitter {\n\n            var script = document.script;\n            if (!script.isDeclareFile) {\n                var typeScriptFileName = document.fileName;\n                if (!emitter) {\n                    var javaScriptFileName = this.emitOptions.mapOutputFileName(typeScriptFileName, TypeScriptCompiler.mapToJSFileName);\n                    var outFile = this.createFile(javaScriptFileName, this.useUTF8ForFile(script));\n\n                    emitter = new Emitter(javaScriptFileName, outFile, this.emitOptions, this.semanticInfoChain);\n\n                    if (this.settings.mapSourceFiles) {\n                        var sourceMapFileName = javaScriptFileName + SourceMapper.MapFileExtension;\n                        emitter.setSourceMappings(new SourceMapper(typeScriptFileName, javaScriptFileName, sourceMapFileName, outFile,\n                        this.createFile(sourceMapFileName, /*isUTF8:*/ false), this.settings.emitFullSourceMapPath));\n                    }\n\n                    if (inputOutputMapper) {\n                        // Remember the name of the outfile for this source file\n                        inputOutputMapper(typeScriptFileName, javaScriptFileName);\n                    }\n                }\n                else if (this.settings.mapSourceFiles) {\n                    emitter.setSourceMappings(new SourceMapper(typeScriptFileName, emitter.emittingFileName, emitter.sourceMapper.sourceMapFileName, emitter.outfile,\n                    emitter.sourceMapper.sourceMapOut, this.settings.emitFullSourceMapPath));\n                }\n\n                // Set location info\n                emitter.setDocument(document);\n                emitter.emitJavascript(script, false);\n            }\n\n            return emitter;\n        }\n\n        // Will not throw exceptions.\n        public emitAll(ioHost: EmitterIOHost, inputOutputMapper?: (inputFile: string, outputFile: string) => void ): IDiagnostic[] {\n            var optionsDiagnostic = this.parseEmitOption(ioHost);\n            if (optionsDiagnostic) {\n                return [optionsDiagnostic];\n            }\n            \n            var startEmitTime = (new Date()).getTime();\n\n            var fileNames = this.fileNameToDocument.getAllKeys();\n            var sharedEmitter: Emitter = null;\n\n            // Iterate through the files, as long as we don\'t get an error.\n            for (var i = 0, n = fileNames.length; i < n; i++) {\n                var fileName = fileNames[i];\n\n                var document = this.getDocument(fileName);\n\n                try {\n                    if (this.emitOptions.outputMany) {\n                        // We\'re outputting to mulitple files.  We don\'t want to reuse an emitter in that case.\n                        var singleEmitter = this.emit(document, inputOutputMapper);\n\n                        // Close the emitter after each emitted file.\n                        if (singleEmitter) {\n                            singleEmitter.emitSourceMapsAndClose();\n                        }\n                    }\n                    else {\n                        // We\'re not outputting to multiple files.  Keep using the same emitter and don\'t\n                        // close until below.\n                        sharedEmitter = this.emit(document, inputOutputMapper, sharedEmitter);\n                    }\n                }\n                catch (ex1) {\n                    return Emitter.handleEmitterError(fileName, ex1);\n                }\n            }\n\n            this.logger.log(\"Emit: \" + ((new Date()).getTime() - startEmitTime));\n\n            if (sharedEmitter) {\n                try {\n                    sharedEmitter.emitSourceMapsAndClose();\n                }\n                catch (ex2) {\n                    return Emitter.handleEmitterError(sharedEmitter.document.fileName, ex2);\n                }\n            }\n\n            return [];\n        }\n\n        // Emit single file if outputMany is specified, else emit all\n        // Will not throw exceptions.\n        public emitUnit(fileName: string, ioHost: EmitterIOHost, inputOutputMapper?: (inputFile: string, outputFile: string) => void ): IDiagnostic[] {\n            var optionsDiagnostic = this.parseEmitOption(ioHost);\n            if (optionsDiagnostic) {\n                return [optionsDiagnostic];\n            }\n\n            if (this.emitOptions.outputMany) {\n                // In outputMany mode, only emit the document specified and its sourceMap if needed\n                var document = this.getDocument(fileName);\n                try {\n                    var emitter = this.emit(document, inputOutputMapper);\n\n                    // Close the emitter\n                    if (emitter) {\n                        emitter.emitSourceMapsAndClose();\n                    }\n                }\n                catch (ex1) {\n                    return Emitter.handleEmitterError(fileName, ex1);\n                }\n\n                return [];\n            }\n            else {\n                // In output Single file mode, emit everything\n                return this.emitAll(ioHost, inputOutputMapper);\n            }\n        }\n\n        private outputScriptToUTF8(script: Script): boolean {\n            return script.containsUnicodeChar || (this.emitOptions.compilationSettings.emitComments && script.containsUnicodeCharInComment);\n        }\n\n        private outputScriptsToUTF8(scripts: Script[]): boolean {\n            for (var i = 0, len = scripts.length; i < len; i++) {\n                var script = scripts[i];\n                if (this.outputScriptToUTF8(script)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private createFile(fileName: string, useUTF8: boolean): ITextWriter {\n            // Creating files can cause exceptions, they will be caught higher up in TypeScriptCompiler.emit\n            return this.emitOptions.ioHost.createFile(fileName, useUTF8);\n        }\n\n        //\n        // Pull typecheck infrastructure\n        //\n\n        public pullResolveFile(fileName: string): boolean {\n            if (!this.pullTypeChecker) {\n                return false;\n            }\n\n            var unit = this.semanticInfoChain.getUnit(fileName);\n\n            if (!unit) {\n                return false;\n            }\n\n            this.pullTypeChecker.setUnit(fileName);\n            this.pullTypeChecker.resolver.resolveBoundDecls(unit.getTopLevelDecls()[0], new PullTypeResolutionContext());\n\n            return true;\n        }\n\n        public getSyntacticDiagnostics(fileName: string): IDiagnostic[]{\n            return this.getDocument(fileName).diagnostics();\n        }\n\n        /** Used for diagnostics in tests */\n        private getSyntaxTree(fileName: string): SyntaxTree {\n            return this.getDocument(fileName).syntaxTree();\n        }\n        private getScript(fileName: string): Script {\n            return this.getDocument(fileName).script;\n        }\n\n        public getSemanticDiagnostics(fileName: string): IDiagnostic[] {\n            var errors: IDiagnostic[] = [];\n\n            var unit = this.semanticInfoChain.getUnit(fileName);\n\n            if (unit) {\n                var document = this.getDocument(fileName);\n                var script = document.script;\n\n                if (script) {\n                    this.pullTypeChecker.typeCheckScript(script, fileName, this);\n\n                    unit.getDiagnostics(errors);\n                }\n            }\n\n            return errors;\n        }\n\n        public pullTypeCheck() {\n            return this.timeFunction(\"pullTypeCheck()\", () => {\n\n                this.semanticInfoChain = new SemanticInfoChain();\n                this.pullTypeChecker = new PullTypeChecker(this.settings, this.semanticInfoChain);\n\n                var declCollectionContext: DeclCollectionContext = null;\n                var i: number, n: number;\n\n                var createDeclsStartTime = new Date().getTime();\n\n                var fileNames = this.fileNameToDocument.getAllKeys();\n                for (var i = 0, n = fileNames.length; i < n; i++) {\n                    var fileName = fileNames[i];\n                    var document = this.getDocument(fileName);\n                    var semanticInfo = new SemanticInfo(fileName);\n\n                    declCollectionContext = new DeclCollectionContext(semanticInfo);\n                    declCollectionContext.scriptName = fileName;\n\n                    // create decls\n                    getAstWalkerFactory().walk(document.script, preCollectDecls, postCollectDecls, null, declCollectionContext);\n\n                    semanticInfo.addTopLevelDecl(declCollectionContext.getParent());\n\n                    this.semanticInfoChain.addUnit(semanticInfo);\n                }\n\n                var createDeclsEndTime = new Date().getTime();\n\n                // bind declaration symbols\n                var bindStartTime = new Date().getTime();\n\n                var binder = new PullSymbolBinder(this.settings, this.semanticInfoChain);\n\n                // start at \'1\', so as to skip binding for global primitives such as \'any\'\n                for (var i = 1; i < this.semanticInfoChain.units.length; i++) {\n                    binder.bindDeclsForUnit(this.semanticInfoChain.units[i].getPath());\n                }\n\n                var bindEndTime = new Date().getTime();\n\n                var findErrorsStartTime = new Date().getTime();\n\n                //// type check\n                for (var i = 0, n = fileNames.length; i < n; i++) {\n                    fileName = fileNames[i];\n\n                    this.logger.log(\"Type checking \" + fileName);\n                    this.pullTypeChecker.typeCheckScript(this.getDocument(fileName).script, fileName, this);\n                }\n\n                var findErrorsEndTime = new Date().getTime();\n\n                this.logger.log(\"Decl creation: \" + (createDeclsEndTime - createDeclsStartTime));\n                this.logger.log(\"Binding: \" + (bindEndTime - bindStartTime));\n                this.logger.log(\"    Time in findSymbol: \" + time_in_findSymbol);\n                this.logger.log(\"Find errors: \" + (findErrorsEndTime - findErrorsStartTime));\n            } );\n        }\n\n        private pullUpdateScript(oldDocument: Document, newDocument: Document): void {\n            this.timeFunction(\"pullUpdateScript: \", () => {\n\n                var oldScript = oldDocument.script;\n                var newScript = newDocument.script;\n                \n                // want to name the new script semantic info the same as the old one\n                var newScriptSemanticInfo = new SemanticInfo(oldDocument.fileName);\n                var oldScriptSemanticInfo = this.semanticInfoChain.getUnit(oldDocument.fileName);\n\n                lastBoundPullDeclId = pullDeclID;\n                lastBoundPullSymbolID = pullSymbolID;\n\n                var declCollectionContext = new DeclCollectionContext(newScriptSemanticInfo);\n\n                declCollectionContext.scriptName = oldDocument.fileName;\n\n                // create decls\n                getAstWalkerFactory().walk(newScript, preCollectDecls, postCollectDecls, null, declCollectionContext);\n\n                var oldTopLevelDecl = oldScriptSemanticInfo.getTopLevelDecls()[0];\n                var newTopLevelDecl = declCollectionContext.getParent();\n\n                newScriptSemanticInfo.addTopLevelDecl(newTopLevelDecl);\n\n                var diffStartTime = new Date().getTime();\n                var diffResults = PullDeclDiffer.diffDecls(oldTopLevelDecl, oldScriptSemanticInfo, newTopLevelDecl, newScriptSemanticInfo);\n\n                var diffEndTime = new Date().getTime();\n                this.logger.log(\"Update Script - Diff time: \" + (diffEndTime - diffStartTime));\n\n                // replace the old semantic info\n                this.semanticInfoChain.updateUnit(oldScriptSemanticInfo, newScriptSemanticInfo);\n\n                // Re-bind - we do this even if there aren\'t changes in the decls so as to relate the\n                // existing symbols to new decls and ASTs\n                var innerBindStartTime = new Date().getTime();\n\n                var topLevelDecls = newScriptSemanticInfo.getTopLevelDecls();\n\n                this.semanticInfoChain.update(oldDocument.fileName);\n\n                var binder = new PullSymbolBinder(this.settings, this.semanticInfoChain);\n                binder.setUnit(oldDocument.fileName);\n\n                for (var i = 0; i < topLevelDecls.length; i++) {\n                    binder.bindDeclToPullSymbol(topLevelDecls[i], true);\n                }\n\n                var innerBindEndTime = new Date().getTime();\n\n                this.logger.log(\"Update Script - Inner bind time: \" + (innerBindEndTime - innerBindStartTime));\n                if (diffResults.length) {\n\n                    // propagate changes\n                    var graphUpdater = new PullSymbolGraphUpdater(this.semanticInfoChain);\n                    var diff: PullDeclDiff;\n\n                    var traceStartTime = new Date().getTime();\n                    for (var i = 0; i < diffResults.length; i++) {\n                        diff = diffResults[i];\n\n                        if (diff.kind === PullDeclEdit.DeclRemoved) {\n                            graphUpdater.removeDecl(diff.oldDecl);\n                        }\n                        else if (diff.kind === PullDeclEdit.DeclAdded) {\n                            graphUpdater.addDecl(diff.newDecl);\n                            graphUpdater.invalidateType(diff.oldDecl.getSymbol());\n                        }\n                        else {\n                            // PULLTODO: Other kinds of edits\n                            graphUpdater.invalidateType(diff.newDecl.getSymbol());\n                        }\n                    }\n\n                    var traceEndTime = new Date().getTime();\n\n                    // Don\'t re-typecheck or re-report errors just yet\n                    //this.pullTypeChecker.typeCheckScript(newScript, newScript.locationInfo.fileName, this);\n\n                    this.logger.log(\"Update Script - Trace time: \" + (traceEndTime - traceStartTime));\n                    this.logger.log(\"Update Script - Number of diffs: \" + diffResults.length);\n                }\n            } );\n        }\n\n        public getSymbolOfDeclaration(decl: PullDecl): PullSymbol {\n            if (!decl) {\n                return null;\n            }\n            var ast = this.pullTypeChecker.resolver.getASTForDecl(decl);\n            if (!ast) {\n                return null;\n            }\n            var enlosingDecl = this.pullTypeChecker.resolver.getEnclosingDecl(decl);\n            if (ast.nodeType === NodeType.Member) {\n                return this.getSymbolOfDeclaration(enlosingDecl);\n            }\n            var resolutionContext = new PullTypeResolutionContext();\n            return this.pullTypeChecker.resolver.resolveAST(ast, /*inContextuallyTypedAssignment:*/false, enlosingDecl, resolutionContext).symbol;\n        }\n\n        public resolvePosition(pos: number, document: Document): PullTypeInfoAtPositionInfo {\n\n            // find the enclosing decl\n            var declStack: PullDecl[] = [];\n            var resultASTs: AST[] = [];\n            var script = document.script;\n            var scriptName = document.fileName;\n\n            var semanticInfo = this.semanticInfoChain.getUnit(scriptName);\n            var lastDeclAST: AST = null;\n            var foundAST: AST = null;\n            var symbol: PullSymbol = null;\n            var candidateSignature: PullSignatureSymbol = null;\n            var callSignatures: PullSignatureSymbol[] = null;\n\n            // these are used to track intermediate nodes so that we can properly apply contextual types\n            var lambdaAST: FunctionDeclaration = null;\n            var declarationInitASTs: VariableDeclarator[] = [];\n            var objectLitAST: UnaryExpression = null;\n            var asgAST: BinaryExpression = null;\n            var typeAssertionASTs: UnaryExpression[] = [];\n            var resolutionContext = new PullTypeResolutionContext();\n            var inTypeReference = false;\n            var enclosingDecl: PullDecl = null;\n            var isConstructorCall = false;\n\n            var pre = (cur: AST, parent: AST): AST => {\n                if (isValidAstNode(cur)) {\n                    if (pos >= cur.minChar && pos <= cur.limChar) {\n\n                        var previous = resultASTs[resultASTs.length - 1];\n\n                        if (previous === undefined || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {\n\n                            var decl = semanticInfo.getDeclForAST(cur);\n\n                            if (decl) {\n                                declStack[declStack.length] = decl;\n                                lastDeclAST = cur;\n                            }\n\n                            if (cur.nodeType === NodeType.FunctionDeclaration && hasFlag((<FunctionDeclaration>cur).getFunctionFlags(), FunctionFlags.IsFunctionExpression)) {\n                                lambdaAST = <FunctionDeclaration>cur;\n                            }\n                            else if (cur.nodeType === NodeType.VariableDeclarator) {\n                                declarationInitASTs[declarationInitASTs.length] = <VariableDeclarator>cur;\n                            }\n                            else if (cur.nodeType === NodeType.ObjectLiteralExpression) {\n                                objectLitAST = <UnaryExpression>cur;\n                            }\n                            else if (cur.nodeType === NodeType.CastExpression) {\n                                typeAssertionASTs[typeAssertionASTs.length] = <UnaryExpression>cur;\n                            }\n                            else if (cur.nodeType === NodeType.AssignmentExpression) {\n                                asgAST = <BinaryExpression>cur;\n                            }\n                            else if (cur.nodeType === NodeType.TypeRef) {\n                                inTypeReference = true;\n                            }\n\n                            resultASTs[resultASTs.length] = cur;\n                        }\n                    }\n                }\n                return cur;\n            }\n\n            getAstWalkerFactory().walk(script, pre);\n\n            if (resultASTs.length) {\n                this.pullTypeChecker.setUnit(scriptName);\n\n                foundAST = resultASTs[resultASTs.length - 1];\n\n                // Check if is a name of a container\n                if (foundAST.nodeType === NodeType.Name && resultASTs.length > 1) {\n                    var previousAST = resultASTs[resultASTs.length - 2];\n                    switch (previousAST.nodeType) {\n                        case NodeType.InterfaceDeclaration:\n                        case NodeType.ClassDeclaration:\n                        case NodeType.ModuleDeclaration:\n                            if (foundAST === (<NamedDeclaration>previousAST).name) {\n                                foundAST = previousAST;\n                            }\n                            break;\n\n                        case NodeType.VariableDeclarator:\n                            if (foundAST === (<VariableDeclarator>previousAST).id) {\n                                foundAST = previousAST;\n                            }\n                            break;\n\n                        case NodeType.FunctionDeclaration:\n                            if (foundAST === (<FunctionDeclaration>previousAST).name) {\n                                foundAST = previousAST;\n                            }\n                            break;\n                    }\n                }\n\n                // are we within a decl?  if so, just grab its symbol\n                var funcDecl: FunctionDeclaration = null;\n                if (lastDeclAST === foundAST) {\n                    symbol = declStack[declStack.length - 1].getSymbol();\n                    this.pullTypeChecker.resolver.resolveDeclaredSymbol(symbol, null, resolutionContext);\n                    enclosingDecl = declStack[declStack.length - 1].getParentDecl();\n                    if (foundAST.nodeType === NodeType.FunctionDeclaration) {\n                        funcDecl = <FunctionDeclaration>foundAST;\n                    }\n                }\n                else {\n                    // otherwise, it\'s an expression that needs to be resolved, so we must pull...\n\n                    // first, find the enclosing decl\n                    for (var i = declStack.length - 1; i >= 0; i--) {\n                        if (!(declStack[i].getKind() & (PullElementKind.Variable | PullElementKind.Parameter))) {\n                            enclosingDecl = declStack[i];\n                            break;\n                        }\n                    }\n\n                    // next, obtain the assigning AST, if applicable\n                    // (this would be the ast for the last decl on the decl stack)\n\n                    // if the found AST is a named, we want to check for previous dotted expressions,\n                    // since those will give us the right typing\n                    var callExpression: CallExpression = null;\n                    if ((foundAST.nodeType === NodeType.SuperExpression || foundAST.nodeType === NodeType.ThisExpression || foundAST.nodeType === NodeType.Name) &&\n                    resultASTs.length > 1) {\n                        for (var i = resultASTs.length - 2; i >= 0; i--) {\n                            if (resultASTs[i].nodeType === NodeType.MemberAccessExpression &&\n                            (<BinaryExpression>resultASTs[i]).operand2 === resultASTs[i + 1]) {\n                                foundAST = resultASTs[i];\n                            }\n                            else if ((resultASTs[i].nodeType === NodeType.InvocationExpression || resultASTs[i].nodeType === NodeType.ObjectCreationExpression) &&\n                            (<CallExpression>resultASTs[i]).target === resultASTs[i + 1]) {\n                                callExpression = <CallExpression>resultASTs[i];\n                                break;\n                            } else if (resultASTs[i].nodeType === NodeType.FunctionDeclaration && (<FunctionDeclaration>resultASTs[i]).name === resultASTs[i + 1]) {\n                                funcDecl = <FunctionDeclaration>resultASTs[i];\n                                break;\n                            } else {\n                                break;\n                            }\n                        }\n                    }\n\n                    // if it\'s a list, we may not have an exact AST, so find the next nearest one\n                    if (foundAST.nodeType === NodeType.List) {\n                        for (var i = 0; i < (<ASTList>foundAST).members.length; i++) {\n                            if ((<ASTList>foundAST).members[i].minChar > pos) {\n                                foundAST = (<ASTList>foundAST).members[i];\n                                break;\n                            }\n                        }\n                    }\n\n                    resolutionContext.resolvingTypeReference = inTypeReference;\n\n                    var inContextuallyTypedAssignment = false;\n\n                    if (declarationInitASTs.length) {\n                        var assigningAST: VariableDeclarator;\n\n                        for (var i = 0; i < declarationInitASTs.length; i++) {\n\n                            assigningAST = declarationInitASTs[i];\n                            inContextuallyTypedAssignment = (assigningAST !== null) && (assigningAST.typeExpr !== null);\n\n                            this.pullTypeChecker.resolver.resolveAST(assigningAST, /*inContextuallyTypedAssignment:*/false, null, resolutionContext);\n                            var varSymbolAndDiagnostics = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(assigningAST, scriptName);\n                            var varSymbol = varSymbolAndDiagnostics && varSymbolAndDiagnostics.symbol;\n\n                            if (varSymbol && inContextuallyTypedAssignment) {\n                                var contextualType = varSymbol.getType();\n                                resolutionContext.pushContextualType(contextualType, false, null);\n                            }\n\n                            if (assigningAST.init) {\n                                this.pullTypeChecker.resolver.resolveAST(assigningAST.init, inContextuallyTypedAssignment, enclosingDecl, resolutionContext);\n                            }\n                        }\n                    }\n\n                    if (typeAssertionASTs.length) {\n                        for (var i = 0; i < typeAssertionASTs.length; i++) {\n                            this.pullTypeChecker.resolver.resolveAST(typeAssertionASTs[i], inContextuallyTypedAssignment, enclosingDecl, resolutionContext);\n                        }\n                    }\n\n                    if (asgAST) {\n                        this.pullTypeChecker.resolver.resolveAST(asgAST, inContextuallyTypedAssignment, enclosingDecl, resolutionContext);\n                    }\n\n                    if (objectLitAST) {\n                        this.pullTypeChecker.resolver.resolveAST(objectLitAST, inContextuallyTypedAssignment, enclosingDecl, resolutionContext);\n                    }\n\n                    if (lambdaAST) {\n                        this.pullTypeChecker.resolver.resolveAST(lambdaAST, true, enclosingDecl, resolutionContext);\n                        enclosingDecl = semanticInfo.getDeclForAST(lambdaAST);\n                    }\n\n                    symbol = this.pullTypeChecker.resolver.resolveAST(foundAST, inContextuallyTypedAssignment, enclosingDecl, resolutionContext).symbol;\n                    if (callExpression) {\n                        var isPropertyOrVar = symbol.getKind() === PullElementKind.Property || symbol.getKind() === PullElementKind.Variable;\n                        var typeSymbol = symbol.getType();\n                        if (isPropertyOrVar) {\n                            isPropertyOrVar = (typeSymbol.getKind() !== PullElementKind.Interface && typeSymbol.getKind() !== PullElementKind.ObjectType) || typeSymbol.getName() === \"\";\n                        }\n\n                        if (!isPropertyOrVar) {\n                            isConstructorCall = foundAST.nodeType === NodeType.SuperExpression || callExpression.nodeType === NodeType.ObjectCreationExpression;\n\n                            if (foundAST.nodeType === NodeType.SuperExpression) {\n                                if (symbol.getKind() === PullElementKind.Class) {\n                                    callSignatures = (<PullClassTypeSymbol>symbol).getConstructorMethod().getType().getConstructSignatures();\n                                }\n                            } else {\n                                callSignatures = callExpression.nodeType === NodeType.InvocationExpression ? typeSymbol.getCallSignatures() : typeSymbol.getConstructSignatures();\n                            }\n\n                            var callResolutionResults = new PullAdditionalCallResolutionData();\n                            if (callExpression.nodeType === NodeType.InvocationExpression) {\n                                this.pullTypeChecker.resolver.resolveCallExpression(callExpression, inContextuallyTypedAssignment, enclosingDecl, resolutionContext, callResolutionResults);\n                            } else {\n                                this.pullTypeChecker.resolver.resolveNewExpression(callExpression, inContextuallyTypedAssignment, enclosingDecl, resolutionContext, callResolutionResults);\n                            }\n\n                            if (callResolutionResults.candidateSignature) {\n                                candidateSignature = callResolutionResults.candidateSignature;\n                            }\n                            if (callResolutionResults.targetSymbol && callResolutionResults.targetSymbol.getName() !== \"\") {\n                                symbol = callResolutionResults.targetSymbol;\n                            }\n                            foundAST = callExpression;\n                        }\n                    }\n                }\n\n                if (funcDecl) {\n                    if (symbol && symbol.getKind() !== PullElementKind.Property) {\n                        var signatureInfo = PullHelpers.getSignatureForFuncDecl(funcDecl, this.semanticInfoChain.getUnit(scriptName));\n                        candidateSignature = signatureInfo.signature;\n                        callSignatures = signatureInfo.allSignatures;\n                    }\n                } else if (!callSignatures && symbol &&\n                (symbol.getKind() === PullElementKind.Method || symbol.getKind() === PullElementKind.Function)) {\n                    var typeSym = symbol.getType()\n                    if (typeSym) {\n                        callSignatures = typeSym.getCallSignatures();\n                    }\n                }\n            }\n\n            var enclosingScopeSymbol = this.getSymbolOfDeclaration(enclosingDecl);\n\n            return {\n                symbol: symbol,\n                ast: foundAST,\n                enclosingScopeSymbol: enclosingScopeSymbol,\n                candidateSignature: candidateSignature,\n                callSignatures: callSignatures,\n                isConstructorCall: isConstructorCall\n            };\n        }\n\n        private extractResolutionContextFromPath(path: AstPath, document: Document): { ast: AST; enclosingDecl: PullDecl; resolutionContext: PullTypeResolutionContext; inContextuallyTypedAssignment: boolean; } {\n            var script = document.script;\n            var scriptName = document.fileName;\n\n            var semanticInfo = this.semanticInfoChain.getUnit(scriptName);\n            var enclosingDecl: PullDecl = null;\n            var inContextuallyTypedAssignment = false;\n\n            var resolutionContext = new PullTypeResolutionContext();\n            resolutionContext.resolveAggressively = true;\n\n            if (path.count() === 0) {\n                return null;\n            }\n\n            this.pullTypeChecker.setUnit(semanticInfo.getPath());\n\n            // Extract infromation from path\n            for (var i = 0 , n = path.count(); i < n; i++) {\n                var current = path.asts[i];\n\n                switch (current.nodeType) {\n                    case NodeType.FunctionDeclaration:\n                        if (hasFlag((<FunctionDeclaration>current).getFunctionFlags(), FunctionFlags.IsFunctionExpression)) {\n                            this.pullTypeChecker.resolver.resolveAST((<FunctionDeclaration>current), true, enclosingDecl, resolutionContext);\n                        }\n\n                        break;\n\n                    case NodeType.VariableDeclarator:\n                        var assigningAST = <VariableDeclarator> current;\n                        inContextuallyTypedAssignment = (assigningAST.typeExpr !== null);\n\n                        this.pullTypeChecker.resolver.resolveAST(assigningAST, /*inContextuallyTypedAssignment*/false, null, resolutionContext);\n                        var varSymbolAndDiagnostics = this.semanticInfoChain.getSymbolAndDiagnosticsForAST(assigningAST, scriptName);\n                        var varSymbol = varSymbolAndDiagnostics && varSymbolAndDiagnostics.symbol;\n\n                        var contextualType: PullTypeSymbol = null;\n                        if (varSymbol && inContextuallyTypedAssignment) {\n                            contextualType = varSymbol.getType();\n                        }\n\n                        resolutionContext.pushContextualType(contextualType, false, null);\n\n                        if (assigningAST.init) {\n                            this.pullTypeChecker.resolver.resolveAST(assigningAST.init, inContextuallyTypedAssignment, enclosingDecl, resolutionContext);\n                        }\n\n                        break;\n\n                    case NodeType.InvocationExpression:\n                    case NodeType.ObjectCreationExpression:\n                        var isNew = current.nodeType === NodeType.ObjectCreationExpression;\n                        var callExpression = <CallExpression>current;\n                        var contextualType: PullTypeSymbol = null;\n\n                        // Check if we are in an argumnt for a call, propagate the contextual typing\n                        if ((i + 1 < n) && callExpression.arguments === path.asts[i + 1]) {\n                            var callResolutionResults = new PullAdditionalCallResolutionData();\n                            if (isNew) {\n                                this.pullTypeChecker.resolver.resolveNewExpression(callExpression, inContextuallyTypedAssignment, enclosingDecl, resolutionContext, callResolutionResults);\n                            }\n                            else {\n                                this.pullTypeChecker.resolver.resolveCallExpression(callExpression, inContextuallyTypedAssignment, enclosingDecl, resolutionContext, callResolutionResults);\n                            }\n\n                            // Find the index in the arguments list\n                            if (callResolutionResults.actualParametersContextTypeSymbols) {\n                                var argExpression = (path.asts[i + 1] && path.asts[i + 1].nodeType === NodeType.List) ? path.asts[i + 2] : path.asts[i + 1];\n                                if (argExpression) {\n                                    for (var j = 0, m = callExpression.arguments.members.length; j < m; j++) {\n                                        if (callExpression.arguments.members[j] === argExpression) {\n                                            var callContextualType = callResolutionResults.actualParametersContextTypeSymbols[j];\n                                            if (callContextualType) {\n                                                contextualType = callContextualType;\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            // Just resolve the call expression\n                            if (isNew) {\n                                this.pullTypeChecker.resolver.resolveNewExpression(callExpression, inContextuallyTypedAssignment, enclosingDecl, resolutionContext);\n                            }\n                            else {\n                                this.pullTypeChecker.resolver.resolveCallExpression(callExpression, inContextuallyTypedAssignment, enclosingDecl, resolutionContext);\n                            }\n                        }\n\n                        resolutionContext.pushContextualType(contextualType, false, null);\n\n                        break;\n\n                    case NodeType.ArrayLiteralExpression:\n                        this.pullTypeChecker.resolver.resolveAST(current, inContextuallyTypedAssignment, enclosingDecl, resolutionContext);\n\n                        // Propagate the child element type\n                        var contextualType: PullTypeSymbol = null;\n                        var currentContextualType = resolutionContext.getContextualType();\n                        if (currentContextualType && currentContextualType.isArray()) {\n                            contextualType = currentContextualType.getElementType();\n                        }\n\n                        resolutionContext.pushContextualType(contextualType, false, null);\n\n                        break;\n\n                    case NodeType.ObjectLiteralExpression:\n                        var objectLiteralExpression = <UnaryExpression>current;\n                        var objectLiteralResolutionContext = new PullAdditionalObjectLiteralResolutionData();\n                        this.pullTypeChecker.resolver.resolveObjectLiteralExpression(objectLiteralExpression, inContextuallyTypedAssignment, enclosingDecl, resolutionContext, objectLiteralResolutionContext);\n\n                       // find the member in the path\n                        var memeberAST = (path.asts[i + 1] && path.asts[i + 1].nodeType === NodeType.List) ? path.asts[i + 2] : path.asts[i + 1];\n                        if (memeberAST) {\n                            // Propagate the member contextual type\n                            var contextualType: PullTypeSymbol = null;\n                            var memberDecls = <ASTList>objectLiteralExpression.operand;\n                            if (memberDecls && objectLiteralResolutionContext.membersContextTypeSymbols) {\n                                for (var j = 0, m = memberDecls.members.length; j < m; j++) {\n                                    if (memberDecls.members[j] === memeberAST) {\n                                        var memberContextualType = objectLiteralResolutionContext.membersContextTypeSymbols[j];\n                                        if (memberContextualType) {\n                                            contextualType = memberContextualType;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n\n                            resolutionContext.pushContextualType(contextualType, false, null);\n                        }\n\n                        break;\n\n                    case NodeType.AssignmentExpression:\n                        var assignmentExpression = <BinaryExpression>current;\n                        var contextualType: PullTypeSymbol = null;\n\n                        if (path.asts[i + 1] && path.asts[i + 1] === assignmentExpression.operand2) {\n                            // propagate the left hand side type as a contextual type\n                            var leftType = this.pullTypeChecker.resolver.resolveAST(assignmentExpression.operand1, inContextuallyTypedAssignment, enclosingDecl, resolutionContext).symbol.getType();\n                            if (leftType) {\n                                inContextuallyTypedAssignment = true;\n                                contextualType = leftType;\n                            }\n                        }\n\n                        resolutionContext.pushContextualType(contextualType, false, null);\n\n                        break;\n\n                    case NodeType.CastExpression:\n                        var castExpression = <UnaryExpression>current;\n                        var contextualType: PullTypeSymbol = null;\n\n                        if (i + 1 < n && path.asts[i + 1] === castExpression.castTerm) {\n                            // We are inside the cast term\n                            resolutionContext.resolvingTypeReference = true;\n                        }\n\n                        var typeSymbol = this.pullTypeChecker.resolver.resolveTypeAssertionExpression(castExpression, inContextuallyTypedAssignment, enclosingDecl, resolutionContext).symbol;\n\n                        // Set the context type\n                        if (typeSymbol) {\n                            inContextuallyTypedAssignment = true;\n                            contextualType = typeSymbol;\n                        }\n\n                        resolutionContext.pushContextualType(contextualType, false, null);\n\n                        break;\n\n                    case NodeType.TypeRef:\n                    case NodeType.TypeParameter:\n                        resolutionContext.resolvingTypeReference = true;\n                        break;\n                }\n\n                // Record enclosing Decl\n                var decl = semanticInfo.getDeclForAST(current);\n                if (decl && !(decl.getKind() & (PullElementKind.Variable | PullElementKind.Parameter | PullElementKind.TypeParameter))) {\n                    enclosingDecl = decl;\n                }\n            }\n\n            // Other possible type space references\n            if (path.isNameOfInterface() || path.isInClassImplementsList() || path.isInInterfaceExtendsList()) {\n                resolutionContext.resolvingTypeReference = true;\n            }\n\n            // if the found AST is a named, we want to check for previous dotted expressions,\n            // since those will give us the right typing\n            if (path.ast().nodeType === NodeType.Name && path.count() > 1) {\n                for (var i = path.count() - 1; i >= 0; i--) {\n                    if (path.asts[path.top - 1].nodeType === NodeType.MemberAccessExpression &&\n                    (<BinaryExpression>path.asts[path.top - 1]).operand2 === path.asts[path.top]) {\n                        path.pop();\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n\n            return {\n                ast: path.ast(),\n                enclosingDecl: enclosingDecl,\n                resolutionContext: resolutionContext,\n                inContextuallyTypedAssignment: inContextuallyTypedAssignment\n            };\n        }\n\n        public pullGetSymbolInformationFromPath(path: AstPath, document: Document): PullSymbolInfo {\n            var context = this.extractResolutionContextFromPath(path, document);\n            if (!context) {\n                return null;\n            }\n\n            var symbolAndDiagnostics = this.pullTypeChecker.resolver.resolveAST(path.ast(), context.inContextuallyTypedAssignment, context.enclosingDecl, context.resolutionContext);\n            var symbol = symbolAndDiagnostics && symbolAndDiagnostics.symbol;\n\n            return {\n                symbol: symbol,\n                ast: path.ast(),\n                enclosingScopeSymbol: this.getSymbolOfDeclaration(context.enclosingDecl)\n            };\n        }\n\n        public pullGetDeclarationSymbolInformation(path: AstPath, document: Document): PullSymbolInfo {\n            var script = document.script;\n            var scriptName = document.fileName;\n\n            var ast = path.ast();\n\n            if (ast.nodeType !== NodeType.ClassDeclaration && ast.nodeType !== NodeType.InterfaceDeclaration && ast.nodeType !== NodeType.ModuleDeclaration && ast.nodeType !== NodeType.FunctionDeclaration && ast.nodeType !== NodeType.VariableDeclarator) {\n                return null;\n            }\n\n            var context = this.extractResolutionContextFromPath(path, document);\n            if (!context) {\n                return null;\n            }\n\n            var semanticInfo = this.semanticInfoChain.getUnit(scriptName);\n            var decl = semanticInfo.getDeclForAST(ast);\n            var symbol = (decl.getKind() & PullElementKind.SomeSignature) ? decl.getSignatureSymbol() : decl.getSymbol();\n            this.pullTypeChecker.resolver.resolveDeclaredSymbol(symbol, null, context.resolutionContext);\n\n            return {\n                symbol: symbol,\n                ast: path.ast(),\n                enclosingScopeSymbol: this.getSymbolOfDeclaration(context.enclosingDecl)\n            };\n        }\n\n        public pullGetCallInformationFromPath(path: AstPath, document: Document): PullCallSymbolInfo {\n            // AST has to be a call expression\n            if (path.ast().nodeType !== NodeType.InvocationExpression && path.ast().nodeType !== NodeType.ObjectCreationExpression) {\n                return null;\n            }\n\n            var isNew = (path.ast().nodeType === NodeType.ObjectCreationExpression);\n\n            var context = this.extractResolutionContextFromPath(path, document);\n            if (!context) {\n                return null;\n            }\n\n            var callResolutionResults = new PullAdditionalCallResolutionData();\n\n            if (isNew) {\n                this.pullTypeChecker.resolver.resolveNewExpression(<CallExpression>path.ast(), context.inContextuallyTypedAssignment, context.enclosingDecl, context.resolutionContext, callResolutionResults);\n            }\n            else {\n                this.pullTypeChecker.resolver.resolveCallExpression(<CallExpression>path.ast(), context.inContextuallyTypedAssignment, context.enclosingDecl, context.resolutionContext, callResolutionResults);\n            }\n\n            return {\n                targetSymbol: callResolutionResults.targetSymbol,\n                resolvedSignatures: callResolutionResults.resolvedSignatures,\n                candidateSignature: callResolutionResults.candidateSignature,\n                ast: path.ast(),\n                enclosingScopeSymbol: this.getSymbolOfDeclaration(context.enclosingDecl),\n                isConstructorCall: isNew\n            };\n        }\n\n        public pullGetVisibleMemberSymbolsFromPath(path: AstPath, document: Document): PullVisibleSymbolsInfo {\n            var context = this.extractResolutionContextFromPath(path, document);\n            if (!context) {\n                return null;\n            }\n\n            var symbols = this.pullTypeChecker.resolver.getVisibleMembersFromExpression(path.ast(), context.enclosingDecl, context.resolutionContext);\n            if (!symbols) {\n                return null;\n            }\n\n            return {\n                symbols: symbols,\n                enclosingScopeSymbol: this.getSymbolOfDeclaration(context.enclosingDecl)\n            };\n        }\n\n        public pullGetVisibleSymbolsFromPath(path: AstPath, document: Document): PullVisibleSymbolsInfo {\n            var context = this.extractResolutionContextFromPath(path, document);\n            if (!context) {\n                return null;\n            }\n\n            var symbols = this.pullTypeChecker.resolver.getVisibleSymbols(context.enclosingDecl, context.resolutionContext);\n            if (!symbols) {\n                return null;\n            }\n\n            return {\n                symbols: symbols,\n                enclosingScopeSymbol: this.getSymbolOfDeclaration(context.enclosingDecl)\n            };\n        }\n\n        public pullGetContextualMembersFromPath(path: AstPath, document: Document): PullVisibleSymbolsInfo {\n            // Input has to be an object literal\n            if (path.ast().nodeType !== NodeType.ObjectLiteralExpression) {\n                return null;\n            }\n\n            var context = this.extractResolutionContextFromPath(path, document);\n            if (!context) {\n                return null;\n            }\n\n            var members = this.pullTypeChecker.resolver.getVisibleContextSymbols(context.enclosingDecl, context.resolutionContext);\n\n            return {\n                symbols: members,\n                enclosingScopeSymbol: this.getSymbolOfDeclaration(context.enclosingDecl)\n            };\n        }\n\n        public pullGetTypeInfoAtPosition(pos: number, document: Document): PullTypeInfoAtPositionInfo {\n            return this.timeFunction(\"pullGetTypeInfoAtPosition for pos \" + pos + \":\", () => {\n                return this.resolvePosition(pos, document);\n            });\n        }\n\n        public getTopLevelDeclarations(scriptName: string): PullDecl[] {\n            this.pullResolveFile(scriptName);\n\n            var unit = this.semanticInfoChain.getUnit(scriptName);\n\n            if (!unit) {\n                return null;\n            }\n\n            return unit.getTopLevelDecls();\n        }\n\n        public reportDiagnostics(errors: IDiagnostic[], errorReporter: TypeScript.IDignosticsReporter): void {\n            for (var i = 0; i < errors.length; i++) {\n                errorReporter.addDiagnostic(errors[i]);\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'enumerator.ts\' />\n///<reference path=\'process.ts\' />\n///<reference path=\'core\\references.ts\' />\n\ninterface IResolvedFile {\n    content: string;\n    path: string;\n}\n\ninterface IFileWatcher {\n    close(): void;\n}\n\ninterface IIO {\n    readFile(path: string): string;\n    writeFile(path: string, contents: string): void;\n    createFile(path: string, useUTF8?: boolean): ITextWriter;\n    deleteFile(path: string): void;\n    dir(path: string, re?: RegExp, options?: { recursive?: boolean; }): string[];\n    fileExists(path: string): boolean;\n    directoryExists(path: string): boolean;\n    createDirectory(path: string): void;\n    resolvePath(path: string): string;\n    dirName(path: string): string;\n    findFile(rootPath: string, partialFilePath: string): IResolvedFile;\n    print(str: string): void;\n    printLine(str: string): void;\n    arguments: string[];\n    stderr: ITextWriter;\n    stdout: ITextWriter;\n    watchFile(fileName: string, callback: (string) => void ): IFileWatcher;\n    run(source: string, fileName: string): void;\n    getExecutingFilePath(): string;\n    quit(exitCode?: number);\n}\n\nmodule IOUtils {\n    // Creates the directory including its parent if not already present\n    function createDirectoryStructure(ioHost: IIO, dirName: string) {\n        if (ioHost.directoryExists(dirName)) {\n            return;\n        }\n\n        var parentDirectory = ioHost.dirName(dirName);\n        if (parentDirectory != \"\") {\n            createDirectoryStructure(ioHost, parentDirectory);\n        }\n        ioHost.createDirectory(dirName);\n    }\n\n    // Creates a file including its directory structure if not already present\n    export function createFileAndFolderStructure(ioHost: IIO, fileName: string, useUTF8?: boolean) {\n        var path = ioHost.resolvePath(fileName);\n        var dirName = ioHost.dirName(path);\n        createDirectoryStructure(ioHost, dirName);\n        return ioHost.createFile(path, useUTF8);\n    }\n\n    export function throwIOError(message: string, error: Error) {\n        var errorMessage = message;\n        if (error && error.message) {\n            errorMessage += (\" \" + error.message);\n        }\n        throw new Error(errorMessage);\n    }\n\n    export class BufferedTextWriter implements ITextWriter {\n        public buffer = \"\";\n        // Inner writer does not need a WriteLine method, since the BufferedTextWriter wraps it itself\n        constructor(public writer: { Write: (str: string) => void; Close: () => void; }, public capacity = 1024) { }\n        Write(str) {\n            this.buffer += str;\n            if (this.buffer.length >= this.capacity) {\n                this.writer.Write(this.buffer);\n                this.buffer = \"\";\n            }\n        }\n        WriteLine(str) {\n            this.Write(str + \'\\r\\n\');\n        }\n        Close() {\n            this.writer.Write(this.buffer);\n            this.writer.Close();\n            this.buffer = null;\n        }\n    }\n}\n\n// Declare dependencies needed for all supported hosts\ndeclare function setTimeout(callback: () =>void , ms?: number);\n\nvar IO = (function() {\n\n    // Create an IO object for use inside WindowsScriptHost hosts\n    // Depends on WSCript and FileSystemObject\n    function getWindowsScriptHostIO(): IIO {\n        var fso = new ActiveXObject(\"Scripting.FileSystemObject\");        \n        var streamObjectPool = [];\n\n        function getStreamObject(): any { \n            if (streamObjectPool.length > 0) {\n                return streamObjectPool.pop();\n            }  else {\n                return new ActiveXObject(\"ADODB.Stream\");\n            }\n        }\n\n        function releaseStreamObject(obj: any) { \n            streamObjectPool.push(obj);\n        }\n\n        var args = [];\n        for (var i = 0; i < WScript.Arguments.length; i++) {\n            args[i] = WScript.Arguments.Item(i);\n        }\n\n        return {\n            readFile: function(path) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Open();\n                    streamObj.Type = 2; // Text data\n                    streamObj.Charset = \'x-ansi\'; // Assume we are reading ansi text\n                    streamObj.LoadFromFile(path);\n                    var bomChar = streamObj.ReadText(2); // Read the BOM char\n                    streamObj.Position = 0; // Position has to be at 0 before changing the encoding\n                    if ((bomChar.charCodeAt(0) == 0xFE && bomChar.charCodeAt(1) == 0xFF)\n                        || (bomChar.charCodeAt(0) == 0xFF && bomChar.charCodeAt(1) == 0xFE)) {\n                        streamObj.Charset = \'unicode\';\n                    } else if (bomChar.charCodeAt(0) == 0xEF && bomChar.charCodeAt(1) == 0xBB) {\n                        streamObj.Charset = \'utf-8\'; \n                    }\n\n                    // Read the whole file\n                    var str = streamObj.ReadText(-1 /* read from the current position to EOS */);\n                    streamObj.Close();\n                    releaseStreamObject(streamObj);\n                    return <string>str;\n                }\n                catch (err) {\n                    IOUtils.throwIOError(\"Error reading file \\\"\" + path + \"\\\".\", err);\n                }\n            },\n\n            writeFile: function(path, contents) {\n                var file = this.createFile(path);\n                file.Write(contents);\n                file.Close();\n            },\n\n            fileExists: function(path: string): boolean {\n                return fso.FileExists(path);\n            },\n\n            resolvePath: function(path: string): string {\n                return fso.GetAbsolutePathName(path);\n            },\n\n            dirName: function(path: string): string {\n                return fso.GetParentFolderName(path);\n            },\n\n            findFile: function(rootPath: string, partialFilePath: string): IResolvedFile {\n                var path = fso.GetAbsolutePathName(rootPath) + \"/\" + partialFilePath;\n\n                while (true) {\n                    if (fso.FileExists(path)) {\n                        try {\n                            var content = this.readFile(path);\n                            return { content: content, path: path };\n                        }\n                        catch (err) {\n                            //Tools.CompilerDiagnostics.debugPrint(\"Could not find \" + path + \", trying parent\");\n                        }\n                    }\n                    else {\n                        rootPath = fso.GetParentFolderName(fso.GetAbsolutePathName(rootPath));\n\n                        if (rootPath == \"\") {\n                            return null;\n                        }\n                        else {\n                            path = fso.BuildPath(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n\n            deleteFile: function(path: string): void {\n                try {\n                    if (fso.FileExists(path)) {\n                        fso.DeleteFile(path, true); // true: delete read-only files\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn\'t delete file \'\" + path + \"\'.\", e);\n                }\n            },\n\n            createFile: function (path, useUTF8?) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Charset = useUTF8 ? \'utf-8\' : \'x-ansi\';\n                    streamObj.Open();\n                    return {\n                        Write: function (str) { streamObj.WriteText(str, 0); },\n                        WriteLine: function (str) { streamObj.WriteText(str, 1); },\n                        Close: function() {\n                            try {\n                                streamObj.SaveToFile(path, 2);\n                            } catch (saveError) {\n                                IOUtils.throwIOError(\"Couldn\'t write to file \'\" + path + \"\'.\", saveError);\n                            }\n                            finally {\n                                if (streamObj.State != 0 /*adStateClosed*/) {\n                                    streamObj.Close();\n                                }\n                                releaseStreamObject(streamObj);\n                            }\n                        }\n                    };\n                } catch (creationError) {\n                    IOUtils.throwIOError(\"Couldn\'t write to file \'\" + path + \"\'.\", creationError);\n                }\n            },\n\n            directoryExists: function(path) {\n                return <boolean>fso.FolderExists(path);\n            },\n\n            createDirectory: function(path) {\n                try {\n                    if (!this.directoryExists(path)) {\n                        fso.CreateFolder(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn\'t create directory \'\" + path + \"\'.\", e);\n                }\n            },\n\n            dir: function(path, spec?, options?) {\n                options = options || <{ recursive?: boolean; }>{};\n                function filesInFolder(folder, root): string[]{\n                    var paths = [];\n                    var fc: Enumerator;\n\n                    if (options.recursive) {\n                        fc = new Enumerator(folder.subfolders);\n\n                        for (; !fc.atEnd() ; fc.moveNext()) {\n                            paths = paths.concat(filesInFolder(fc.item(), root + \"/\" + fc.item().Name));\n                        }\n                    }\n\n                    fc = new Enumerator(folder.files);\n\n                    for (; !fc.atEnd() ; fc.moveNext()) {\n                        if (!spec || fc.item().Name.match(spec)) {\n                            paths.push(root + \"/\" + fc.item().Name);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                var folder = fso.GetFolder(path);\n                var paths = [];\n\n                return filesInFolder(folder, path);\n            },\n\n            print: function(str) {\n                WScript.StdOut.Write(str);\n            },\n\n            printLine: function(str) {\n                WScript.Echo(str);\n            },\n\n            arguments: <string[]>args,\n            stderr: WScript.StdErr,\n            stdout: WScript.StdOut,\n            watchFile: null,\n            run: function(source, fileName) {\n                try {\n                    eval(source);\n                } catch (e) {\n                    IOUtils.throwIOError(\"Error while executing file \'\" + fileName + \"\'.\", e);\n                }\n            },\n            getExecutingFilePath: function () {\n                return WScript.ScriptFullName;\n            },\n            quit: function (exitCode: number = 0) {\n                try {\n                    WScript.Quit(exitCode);\n                } catch (e) {\n                }\n            }\n        }\n\n    };\n\n    // Create an IO object for use inside Node.js hosts\n    // Depends on \'fs\' and \'path\' modules\n    function getNodeIO(): IIO {\n\n        var _fs = require(\'fs\');\n        var _path = require(\'path\');\n        var _module = require(\'module\');\n\n        return {\n            readFile: function(file) {\n                try {\n                    var buffer = _fs.readFileSync(file);\n                    switch (buffer[0]) {\n                        case 0xFE:\n                            if (buffer[1] == 0xFF) {\n                                // utf16-be. Reading the buffer as big endian is not supported, so convert it to \n                                // Little Endian first\n                                var i = 0;\n                                while ((i + 1) < buffer.length) {\n                                    var temp = buffer[i]\n                                    buffer[i] = buffer[i + 1];\n                                    buffer[i + 1] = temp;\n                                    i += 2;\n                                }\n                                return buffer.toString(\"ucs2\", 2);\n                            }\n                            break;\n                        case 0xFF:\n                            if (buffer[1] == 0xFE) {\n                                // utf16-le \n                                return buffer.toString(\"ucs2\", 2);\n                            }\n                            break;\n                        case 0xEF:\n                            if (buffer[1] == 0xBB) {\n                                // utf-8\n                                return buffer.toString(\"utf8\", 3);\n                            }\n                    }\n                    // Default behaviour\n                    return buffer.toString();\n                } catch (e) {\n                    IOUtils.throwIOError(\"Error reading file \\\"\" + file + \"\\\".\", e);\n                }\n            },\n\n            writeFile: <(path: string, contents: string) => void >_fs.writeFileSync,\n            deleteFile: function(path) {\n                try {\n                    _fs.unlinkSync(path);\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn\'t delete file \'\" + path + \"\'.\", e);\n                }\n            },\n            fileExists: function(path): boolean {\n                return _fs.existsSync(path);\n            },\n            createFile: function(path, useUTF8?) {\n                function mkdirRecursiveSync(path) {\n                    var stats = _fs.statSync(path);\n                    if (stats.isFile()) {\n                        IOUtils.throwIOError(\"\\\"\" + path + \"\\\" exists but isn\'t a directory.\", null);\n                    } else if (stats.isDirectory()) {\n                        return;\n                    } else {\n                        mkdirRecursiveSync(_path.dirname(path));\n                        _fs.mkdirSync(path, 0775);\n                    }\n                }\n\n                mkdirRecursiveSync(_path.dirname(path));\n\n                try {\n                    var fd = _fs.openSync(path, \'w\');\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn\'t write to file \'\" + path + \"\'.\", e);\n                }\n                // Writing to a buffer to improve performance\n                return new IOUtils.BufferedTextWriter({\n                    Write: function (str) { _fs.writeSync(fd, str); },\n                    Close: function () { _fs.closeSync(fd); fd = null; }\n                });\n            },\n            dir: function dir(path, spec?, options?) {\n                options = options || <{ recursive?: boolean; }>{};\n\n                function filesInFolder(folder: string): string[]{\n                    var paths = [];\n\n                    try {\n                        var files = _fs.readdirSync(folder);\n                        for (var i = 0; i < files.length; i++) {\n                            var stat = _fs.statSync(folder + \"/\" + files[i]);\n                            if (options.recursive && stat.isDirectory()) {\n                                paths = paths.concat(filesInFolder(folder + \"/\" + files[i]));\n                            } else if (stat.isFile() && (!spec || files[i].match(spec))) {\n                                paths.push(folder + \"/\" + files[i]);\n                            }\n                        }\n                    } catch (err) {\n                        /*\n                        *   Skip folders that are inaccessible\n                        */\n                    }\n\n                    return paths;\n                }\n\n                return filesInFolder(path);\n            },\n            createDirectory: function(path: string): void {\n                try {\n                    if (!this.directoryExists(path)) {\n                        _fs.mkdirSync(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn\'t create directory \'\" + path + \"\'.\", e);\n                }\n            },\n\n            directoryExists: function(path: string): boolean {\n                return _fs.existsSync(path) && _fs.statSync(path).isDirectory();\n            },\n            resolvePath: function(path: string): string {\n                return _path.resolve(path);\n            },\n            dirName: function(path: string): string {\n                return _path.dirname(path);\n            },\n            findFile: function(rootPath: string, partialFilePath): IResolvedFile {\n                var path = rootPath + \"/\" + partialFilePath;\n\n                while (true) {\n                    if (_fs.existsSync(path)) {\n                        try {\n                            var content = this.readFile(path);\n                            return { content: content, path: path };\n                        } catch (err) {\n                            //Tools.CompilerDiagnostics.debugPrint((\"Could not find \" + path) + \", trying parent\");\n                        }\n                    }\n                    else {\n                        var parentPath = _path.resolve(rootPath, \"..\");\n\n                        // Node will just continue to repeat the root path, rather than return null\n                        if (rootPath === parentPath) {\n                            return null;\n                        }\n                        else {\n                            rootPath = parentPath;\n                            path = _path.resolve(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n            print: function(str) { process.stdout.write(str) },\n            printLine: function(str) { process.stdout.write(str + \'\\n\') },\n            arguments: process.argv.slice(2),\n            stderr: {\n                Write: function(str) { process.stderr.write(str); },\n                WriteLine: function(str) { process.stderr.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n            stdout: {\n                Write: function(str) { process.stdout.write(str); },\n                WriteLine: function(str) { process.stdout.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n            watchFile: function(fileName: string, callback: (string) => void ): IFileWatcher {\n                var firstRun = true;\n                var processingChange = false;\n\n                var fileChanged: any = function(curr, prev) {\n                    if (!firstRun) {\n                        if (curr.mtime < prev.mtime) {\n                            return;\n                        }\n\n                        _fs.unwatchFile(fileName, fileChanged);\n                        if (!processingChange) {\n                            processingChange = true;\n                            callback(fileName);\n                            setTimeout(function() { processingChange = false; }, 100);\n                        }\n                    }\n                    firstRun = false;\n                    _fs.watchFile(fileName, { persistent: true, interval: 500 }, fileChanged);\n                };\n\n                fileChanged();\n                return {\n                    fileName: fileName,\n                    close: function() {\n                        _fs.unwatchFile(fileName, fileChanged);\n                    }\n                };\n            },\n            run: function(source, fileName) {\n                require.main.fileName = fileName;\n                require.main.paths = _module._nodeModulePaths(_path.dirname(_fs.realpathSync(fileName)));\n                require.main._compile(source, fileName);\n            }, \n            getExecutingFilePath: function () {\n                return process.mainModule.filename;\n            },\n            quit: process.exit\n        }\n    };\n\n    if (typeof ActiveXObject === \"function\")\n        return getWindowsScriptHostIO();\n    else if (typeof require === \"function\")\n        return getNodeIO();\n    else\n        return null; // Unsupported host\n})();\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\"io.ts\" />\n\ninterface IOptions {\n    name?: string;\n    flag?: boolean;\n    short?: string;\n    usage?: string;\n    set?: (s: string) => void;\n    type?: string;\n    experimental?: boolean;\n}\n\nclass OptionsParser {\n    private DEFAULT_SHORT_FLAG = \"-\";\n    private DEFAULT_LONG_FLAG = \"--\";\n\n    // Find the option record for the given string. Returns null if not found.\n    private findOption(arg: string) {\n\n        for (var i = 0; i < this.options.length; i++) {\n\n            if (arg === this.options[i].short || arg === this.options[i].name) {\n                return this.options[i];\n            }\n        }\n\n        return null;\n    }\n\n    public unnamed: string[] = [];\n\n    public options: IOptions[] = [];\n\n    constructor (public host: IIO) {\n    }\n\n    public printUsage() {\n        this.host.printLine(\"Syntax:   tsc [options] [file ..]\");\n        this.host.printLine(\"\");\n        this.host.printLine(\"Examples: tsc hello.ts\");\n        this.host.printLine(\"          tsc --out foo.js foo.ts\");\n        this.host.printLine(\"          tsc @args.txt\");\n        this.host.printLine(\"\");\n        this.host.printLine(\"Options:\");\n\n        var output = [];\n        var maxLength = 0;\n        var i = 0;\n\n        this.options = this.options.sort(function(a, b) {\n            var aName = a.name.toLowerCase();\n            var bName = b.name.toLowerCase();\n\n            if (aName > bName) {\n                return 1;\n            } else if (aName < bName) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n\n        // Build up output array\n        for (i = 0; i < this.options.length; i++) {\n            var option = this.options[i];\n\n            if (option.experimental) {\n                continue;\n            }\n\n            if (!option.usage) {\n                break;\n            }\n\n            var usageString = \"  \";\n            var type = option.type ? \" \" + option.type.toUpperCase() : \"\";\n\n            if (option.short) {\n                usageString += this.DEFAULT_SHORT_FLAG + option.short + type + \", \";\n            }\n\n            usageString += this.DEFAULT_LONG_FLAG + option.name + type;\n\n            output.push([usageString, option.usage]);\n\n            if (usageString.length > maxLength) {\n                maxLength = usageString.length;\n            }\n        }\n\n        output.push([\"  @<file>\", \"Insert command line options and files from a file.\"]);\n\n        // Print padded output\n        for (i = 0; i < output.length; i++) {\n            this.host.printLine(output[i][0] + (new Array(maxLength - output[i][0].length + 3)).join(\" \") + output[i][1]);\n        }\n    }\n\n    public option(name: string, config: IOptions, short?: string) {\n        if (!config) {\n            config = <any>short;\n            short = null;\n        }\n\n        config.name = name;\n        config.short = short;\n        config.flag = false;\n\n        this.options.push(config);\n    }\n\n    public flag(name: string, config: IOptions, short?: string) {\n        if (!config) {\n            config = <any>short;\n            short = null;\n        }\n\n        config.name = name;\n        config.short = short;\n        config.flag = true\n\n        this.options.push(config);\n    }\n\n    // Parse an arguments string\n    public parseString(argString: string) {\n        var position = 0;\n        var tokens = argString.match(/\\s+|\"|[^\\s\"]+/g);\n\n        function peek() {\n            return tokens[position];\n        }\n\n        function consume() {\n            return tokens[position++];\n        }\n\n        function consumeQuotedString() {\n            var value = \'\';\n            consume(); // skip opening quote.\n\n            var token = peek();\n\n            while (token && token !== \'\"\') {\n                consume();\n\n                value += token;\n\n                token = peek();\n            }\n\n            consume(); // skip ending quote;\n\n            return value;\n        }\n\n        var args: string[] = [];\n        var currentArg = \'\';\n\n        while (position < tokens.length) {\n            var token = peek();\n\n            if (token === \'\"\') {\n                currentArg += consumeQuotedString();\n            } else if (token.match(/\\s/)) {\n                if (currentArg.length > 0) {\n                    args.push(currentArg);\n                    currentArg = \'\';\n                }\n\n                consume();\n            } else {\n                consume();\n                currentArg += token;\n            }\n        }\n\n        if (currentArg.length > 0) {\n            args.push(currentArg);\n        }\n\n        this.parse(args);\n    }\n\n    // Parse arguments as they come from the platform: split into arguments.\n    public parse(args: string[]) {\n        var position = 0;\n\n        function consume() {\n            return args[position++];\n        }\n\n        while (position < args.length) {\n            var current = consume();\n            var match = current.match(/^(--?|@)(.*)/);\n            var value = null;\n\n            if (match) {\n                if (match[1] === \'@\') {\n                    this.parseString(this.host.readFile(match[2]));\n                } else {\n                    var arg = match[2];\n                    var option = this.findOption(arg);\n\n                    if (option === null) {\n                        this.host.printLine(\"Unknown option \'\" + arg +\"\'\");\n                        this.host.printLine(\"Use the \'--help\' flag to see options\");\n                    } else {\n                        if (!option.flag)\n                            value = consume();\n\n                        option.set(value);\n                    }\n                }\n            } else {\n                this.unnamed.push(current);\n            }\n        }\n    }\n}\n//\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\'/>\n///<reference path=\'io.ts\'/>\n///<reference path=\'optionsParser.ts\'/>\n\ndeclare var localizedDiagnosticMessages: TypeScript.IDiagnosticMessages;\n\nclass DiagnosticsLogger implements TypeScript.ILogger {\n    constructor(public ioHost: IIO) {\n    }\n    public information(): boolean { return false; }\n    public debug(): boolean { return false; }\n    public warning(): boolean { return false; }\n    public error(): boolean { return false; }\n    public fatal(): boolean { return false; }\n    public log(s: string): void {\n        this.ioHost.stdout.WriteLine(s);\n    }\n}\n\nclass ErrorReporter implements TypeScript.IDignosticsReporter {\n    private compilationEnvironment: TypeScript.CompilationEnvironment\n    public hasErrors: boolean;\n\n    constructor(public ioHost: IIO, compilationEnvironment: TypeScript.CompilationEnvironment) {\n        this.hasErrors = false;\n        this.setCompilationEnvironment(compilationEnvironment);\n    }\n\n    public addDiagnostic(diagnostic: TypeScript.IDiagnostic) {\n        this.hasErrors = true;\n\n        if (diagnostic.fileName()) {\n            var soruceUnit = this.compilationEnvironment.getSourceUnit(diagnostic.fileName());\n            if (!soruceUnit) {\n                soruceUnit = new TypeScript.SourceUnit(diagnostic.fileName(), this.ioHost.readFile(diagnostic.fileName()));\n            }\n            var lineMap = new TypeScript.LineMap(soruceUnit.getLineStartPositions(), soruceUnit.getLength());\n            var lineCol = { line: -1, character: -1 };\n            lineMap.fillLineAndCharacterFromPosition(diagnostic.start(), lineCol);\n\n            this.ioHost.stderr.Write(diagnostic.fileName() + \"(\" + (lineCol.line + 1) + \",\" + (lineCol.character+1) + \"): \");\n        }\n\n        this.ioHost.stderr.WriteLine(diagnostic.message());\n    }\n\n    public setCompilationEnvironment(compilationEnvironment: TypeScript.CompilationEnvironment): void {\n        this.compilationEnvironment = compilationEnvironment;\n    }\n\n    public reset() {\n        this.hasErrors = false;\n    }\n}\n\nclass CommandLineHost implements TypeScript.IResolverHost {\n\n    public pathMap: any = {};\n    public resolvedPaths: any = {};\n\n    constructor(public compilationSettings: TypeScript.CompilationSettings, public errorReporter: ErrorReporter) { \n    }\n\n    public getPathIdentifier(path: string) {\n        return this.compilationSettings.useCaseSensitiveFileResolution ? path : path.toLocaleUpperCase();\n    }\n\n    public isResolved(path: string) {\n        return this.resolvedPaths[this.getPathIdentifier(this.pathMap[path])] != undefined;\n    }\n\n    public resolveCompilationEnvironment(preEnv: TypeScript.CompilationEnvironment,\n                                         resolver: TypeScript.ICodeResolver,\n                                         traceDependencies: boolean): TypeScript.CompilationEnvironment {\n        var resolvedEnv = new TypeScript.CompilationEnvironment(preEnv.compilationSettings, preEnv.ioHost);\n\n        var nCode = preEnv.code.length;\n        var path = \"\";\n\n        this.errorReporter.setCompilationEnvironment(resolvedEnv);\n\n        var resolutionDispatcher: TypeScript.IResolutionDispatcher = {\n            errorReporter: this.errorReporter,\n            postResolution: (path: string, code: TypeScript.IScriptSnapshot) => {\n                var pathId = this.getPathIdentifier(path);\n                if (!this.resolvedPaths[pathId]) {\n                    resolvedEnv.code.push(<TypeScript.SourceUnit>code);\n                    this.resolvedPaths[pathId] = true;\n                }\n            }\n        };\n\n        for (var i = 0; i < nCode; i++) {\n            path = TypeScript.switchToForwardSlashes(preEnv.ioHost.resolvePath(preEnv.code[i].path));\n            this.pathMap[preEnv.code[i].path] = path;\n            resolver.resolveCode(path, \"\", false, resolutionDispatcher);\n        }\n\n        return resolvedEnv;\n    }\n}\n\nclass BatchCompiler {\n    public compilationSettings: TypeScript.CompilationSettings;\n    public compilationEnvironment: TypeScript.CompilationEnvironment;\n    public resolvedEnvironment: TypeScript.CompilationEnvironment = null;\n    public hasResolveErrors: boolean = false;\n    public compilerVersion = \"0.9.0.0\";\n    public printedVersion = false;\n    public errorReporter: ErrorReporter = null;\n\n    constructor(public ioHost: IIO) {\n        this.compilationSettings = new TypeScript.CompilationSettings();\n        this.compilationEnvironment = new TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);\n        this.errorReporter = new ErrorReporter(this.ioHost, this.compilationEnvironment);\n    }\n\n    public resolve() {\n        var resolver = new TypeScript.CodeResolver(this.compilationEnvironment);\n        var commandLineHost = new CommandLineHost(this.compilationSettings, this.errorReporter);\n        var ret = commandLineHost.resolveCompilationEnvironment(this.compilationEnvironment, resolver, true);\n\n        for (var i = 0; i < this.compilationEnvironment.code.length; i++) {\n            if (!commandLineHost.isResolved(this.compilationEnvironment.code[i].path)) {\n                var path = this.compilationEnvironment.code[i].path;\n                if (!TypeScript.isTSFile(path) && !TypeScript.isDTSFile(path)) {\n                    this.errorReporter.addDiagnostic(\n                        new TypeScript.Diagnostic(null, 0, 0, TypeScript.DiagnosticCode.Unknown_extension_for_file___0__Only__ts_and_d_ts_extensions_are_allowed, [path]));\n                }\n                else {\n                    this.errorReporter.addDiagnostic(\n                        new TypeScript.Diagnostic(null, 0, 0, TypeScript.DiagnosticCode.Could_not_find_file___0_, [path]));\n                }\n            }\n        }\n\n        return ret;\n    }\n    \n    /// Do the actual compilation reading from input files and\n    /// writing to output file(s).\n    public compile(): boolean {\n        if (typeof localizedDiagnosticMessages === \"undefined\") {\n            localizedDiagnosticMessages = null;\n        }\n\n        var logger = this.compilationSettings.gatherDiagnostics ? <TypeScript.ILogger>new DiagnosticsLogger(this.ioHost) : new TypeScript.NullLogger();\n        var compiler = new TypeScript.TypeScriptCompiler(logger, this.compilationSettings, localizedDiagnosticMessages);\n\n        var anySyntacticErrors = false;\n        var anySemanticErrors = false;\n\n        for (var iCode = 0 ; iCode < this.resolvedEnvironment.code.length; iCode++) {\n            var code = this.resolvedEnvironment.code[iCode];\n\n            // if file resolving is disabled, the file\'s content will not yet be loaded\n\n            if (!this.compilationSettings.resolve) {\n                code.content = this.ioHost.readFile(code.path);\n                // If declaration files are going to be emitted, \n                // preprocess the file contents and add in referenced files as well\n                if (this.compilationSettings.generateDeclarationFiles) {\n                    TypeScript.CompilerDiagnostics.assert(code.referencedFiles === null, \"With no resolve option, referenced files need to null\");\n                    code.referencedFiles = TypeScript.getReferencedFiles(code.path, code);\n                }\n            }\n\n            if (code.content != null) {\n                compiler.addSourceUnit(code.path, TypeScript.ScriptSnapshot.fromString(code.content), /*version:*/ 0, /*isOpen:*/ false, code.referencedFiles);\n\n                var syntacticDiagnostics = compiler.getSyntacticDiagnostics(code.path);\n                compiler.reportDiagnostics(syntacticDiagnostics, this.errorReporter);\n\n                if (syntacticDiagnostics.length > 0) {\n                    anySyntacticErrors = true;\n                }\n            }\n        }\n\n        if (anySyntacticErrors) {\n            return true;\n        }\n\n        compiler.pullTypeCheck();\n        var fileNames = compiler.fileNameToDocument.getAllKeys();\n        \n        for (var i = 0, n = fileNames.length; i < n; i++) {\n            var fileName = fileNames[i];\n            var semanticDiagnostics = compiler.getSemanticDiagnostics(fileName);\n            if (semanticDiagnostics.length > 0) {\n                anySemanticErrors = true;\n                compiler.reportDiagnostics(semanticDiagnostics, this.errorReporter);\n            }\n        }  \n\n        var emitterIOHost = {\n            createFile: (fileName: string, useUTF8?: boolean) => IOUtils.createFileAndFolderStructure(this.ioHost, fileName, useUTF8),\n            directoryExists: this.ioHost.directoryExists,\n            fileExists: this.ioHost.fileExists,\n            resolvePath: this.ioHost.resolvePath\n        } ;\n\n        var mapInputToOutput = (inputFile: string, outputFile: string): void => {\n            this.compilationEnvironment.inputFileNameToOutputFileName.addOrUpdate(inputFile, outputFile);\n        };\n\n        // TODO: if there are any emit diagnostics.  Don\'t proceed.\n        var emitDiagnostics = compiler.emitAll(emitterIOHost, mapInputToOutput);\n        compiler.reportDiagnostics(emitDiagnostics, this.errorReporter);\n        if (emitDiagnostics.length > 0) {\n            return true;\n        }\n\n        // Don\'t emit declarations if we have any semantic diagnostics.\n        if (anySemanticErrors) {\n            return true;\n        }\n\n        var emitDeclarationsDiagnostics = compiler.emitAllDeclarations();\n        compiler.reportDiagnostics(emitDeclarationsDiagnostics, this.errorReporter);\n        if (emitDeclarationsDiagnostics.length > 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public updateCompile(): boolean {\n        if (typeof localizedDiagnosticMessages === \"undefined\") {\n            localizedDiagnosticMessages = null;\n        }\n\n        var logger = this.compilationSettings.gatherDiagnostics ? <TypeScript.ILogger>new DiagnosticsLogger(this.ioHost) : new TypeScript.NullLogger();\n        var compiler = new TypeScript.TypeScriptCompiler(logger, this.compilationSettings, localizedDiagnosticMessages);\n\n        var anySyntacticErrors = false;\n        var foundLib = false;\n\n        for (var iCode = 0; iCode <= this.resolvedEnvironment.code.length; iCode++) {\n            var code = this.resolvedEnvironment.code[iCode];\n\n            if (code.path.indexOf(\"lib.d.ts\") != -1) {\n                foundLib = true;\n            }\n            else if ((foundLib && iCode > 1) || (!foundLib && iCode > 0)) {\n                break;\n            }\n\n            this.ioHost.stdout.WriteLine(\"Consuming \" + this.resolvedEnvironment.code[iCode].path + \"...\");\n\n            // if file resolving is disabled, the file\'s content will not yet be loaded\n\n            if (!this.compilationSettings.resolve) {\n                code.content = this.ioHost.readFile(code.path);\n                // If declaration files are going to be emitted, \n                // preprocess the file contents and add in referenced files as well\n                if (this.compilationSettings.generateDeclarationFiles) {\n                    TypeScript.CompilerDiagnostics.assert(code.referencedFiles === null, \"With no resolve option, referenced files need to null\");\n                    code.referencedFiles = TypeScript.getReferencedFiles(code.path, code);\n                }\n            }\n\n            if (code.content != null) {\n                compiler.addSourceUnit(code.path, TypeScript.ScriptSnapshot.fromString(code.content), /*version:*/ 0, /*isOpen:*/ true, code.referencedFiles);\n\n                var syntacticDiagnostics = compiler.getSyntacticDiagnostics(code.path);\n                compiler.reportDiagnostics(syntacticDiagnostics, this.errorReporter);\n\n                if (syntacticDiagnostics.length > 0) {\n                    anySyntacticErrors = true;\n                }\n            }\n        }\n\n        //if (anySyntacticErrors) {\n        //    return true;\n        //}\n\n        this.ioHost.stdout.WriteLine(\"**** Initial type check errors:\");\n        compiler.pullTypeCheck();\n\n        var semanticDiagnostics: TypeScript.IDiagnostic[];\n\n        for (var i = 0; i < iCode; i++) {\n            semanticDiagnostics = compiler.getSemanticDiagnostics(this.resolvedEnvironment.code[i].path);\n            compiler.reportDiagnostics(semanticDiagnostics, this.errorReporter);\n        }\n\n        // Note: we continue even if there were type check warnings.\n\n        // ok, now we got through the remaining files, 1-by-1, substituting the new code in for the old\n        if (iCode && iCode <= this.resolvedEnvironment.code.length - 1) {\n            var lastTypecheckedFileName = this.resolvedEnvironment.code[iCode - 1].path;\n            var snapshot: TypeScript.IScriptSnapshot;\n\n            for (; iCode < this.resolvedEnvironment.code.length; iCode++) {\n                this.ioHost.stdout.WriteLine(\"**** Update type check and errors for \" + this.resolvedEnvironment.code[iCode].path + \":\");\n                var text = this.resolvedEnvironment.code[iCode].getText(0, this.resolvedEnvironment.code[iCode].getLength());\n                snapshot = TypeScript.ScriptSnapshot.fromString(text);\n                compiler.updateSourceUnit(lastTypecheckedFileName, snapshot, /*version:*/ 0, /*isOpen:*/ true, null);\n                // resolve the file to simulate an IDE-driven pull\n                //compiler.pullResolveFile(lastTypecheckedFileName);\n                semanticDiagnostics = compiler.getSemanticDiagnostics(lastTypecheckedFileName);\n                compiler.reportDiagnostics(semanticDiagnostics, this.errorReporter);\n            }\n        }\n\n        return false;    \n    }\n\n    // Execute the provided inputs\n    private run() {\n        for (var i in this.compilationEnvironment.code) {\n            var outputFileName: string = this.compilationEnvironment.inputFileNameToOutputFileName.lookup(i);\n            if (this.ioHost.fileExists(outputFileName)) {\n                var unitRes = this.ioHost.readFile(outputFileName)\n                this.ioHost.run(unitRes, outputFileName);\n            }\n        }\n    }\n\n    /// Begin batch compilation\n    public batchCompile() {\n        TypeScript.CompilerDiagnostics.diagnosticWriter = { Alert: (s: string) => { this.ioHost.printLine(s); } }\n\n        var code: TypeScript.SourceUnit;\n\n        var opts = new OptionsParser(this.ioHost);\n\n        opts.option(\'out\', {\n            usage: \'Concatenate and emit output to single file | Redirect output structure to the directory\',\n            type: \'file|directory\',\n            set: (str) => {\n                this.compilationSettings.outputOption = str;\n            }\n        });\n\n        opts.flag(\'sourcemap\', {\n            usage: \'Generates corresponding .map file\',\n            set: () => {\n                this.compilationSettings.mapSourceFiles = true;\n            }\n        });\n\n        opts.flag(\'fullSourceMapPath\', {\n            usage: \'Writes the full path of map file in the generated js file\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.emitFullSourceMapPath = true;\n            }\n        });\n\n        opts.flag(\'declaration\', {\n            usage: \'Generates corresponding .d.ts file\',\n            set: () => {\n                this.compilationSettings.generateDeclarationFiles = true;\n            }\n        });\n\n        if (this.ioHost.watchFile) {\n            opts.flag(\'watch\', {\n                usage: \'Watch output files\',\n                set: () => {\n                    this.compilationSettings.watch = true;\n                }\n            }, \'w\');\n        }\n\n        opts.flag(\'exec\', {\n            usage: \'Execute the script after compilation\',\n            set: () => {\n                this.compilationSettings.exec = true;\n            }\n        }, \'e\');\n\n        opts.flag(\'minw\', {\n            usage: \'Minimize whitespace\',\n            experimental: true,\n            set: () => { this.compilationSettings.minWhitespace = true; }\n        }, \'mw\');\n\n        opts.flag(\'const\', {\n            usage: \'Propagate constants to emitted code\',\n            experimental: true,\n            set: () => { this.compilationSettings.propagateConstants = true; }\n        });\n\n        opts.flag(\'comments\', {\n            usage: \'Emit comments to output\',\n            set: () => {\n                this.compilationSettings.emitComments = true;\n            }\n        }, \'c\');\n\n        opts.flag(\'noresolve\', {\n            usage: \'Skip resolution and preprocessing\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.resolve = false;\n            }\n        });\n\n        opts.flag(\'debug\', {\n            usage: \'Print debug output\',\n            experimental: true,\n            set: () => {\n                TypeScript.CompilerDiagnostics.debug = true;\n            }\n        });\n\n        opts.flag(\'nolib\', {\n            usage: \'Do not include a default lib.d.ts with global declarations\',\n            set: () => {\n                this.compilationSettings.useDefaultLib = false;\n            }\n        });\n\n        opts.flag(\'diagnostics\', {\n            usage: \'gather diagnostic info about the compilation process\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.gatherDiagnostics = true;\n            }\n        });\n\n        opts.flag(\'update\', {\n            usage: \'Typecheck each file as an update on the first\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.updateTC = true;\n            }\n        });\n\n        opts.option(\'target\', {\n            usage: \'Specify ECMAScript target version: \"ES3\" (default), or \"ES5\"\',\n            type: \'VER\',\n            set: (type) => {\n                type = type.toLowerCase();\n\n                if (type === \'es3\') {\n                    this.compilationSettings.codeGenTarget = TypeScript.LanguageVersion.EcmaScript3;\n                }\n                else if (type === \'es5\') {\n                    this.compilationSettings.codeGenTarget = TypeScript.LanguageVersion.EcmaScript5;\n                }\n                else {\n                    this.errorReporter.addDiagnostic(\n                        new TypeScript.Diagnostic(null, 0, 0, TypeScript.DiagnosticCode.ECMAScript_target_version__0__not_supported___Using_default__1__code_generation, [type, \"ES3\"]));\n                }\n            }\n        });\n\n        opts.option(\'module\', {\n            usage: \'Specify module code generation: \"commonjs\" (default) or \"amd\"\',\n            type: \'kind\',\n            set: (type) => {\n                type = type.toLowerCase();\n\n                if (type === \'commonjs\' || type === \'node\') {\n                    this.compilationSettings.moduleGenTarget = TypeScript.ModuleGenTarget.Synchronous;\n                }\n                else if (type === \'amd\') {\n                    this.compilationSettings.moduleGenTarget = TypeScript.ModuleGenTarget.Asynchronous;\n                }\n                else {\n                    this.errorReporter.addDiagnostic(\n                        new TypeScript.Diagnostic(null, 0, 0, TypeScript.DiagnosticCode.Module_code_generation__0__not_supported___Using_default__1__code_generation, [type, \"commonjs\"]));\n                }\n            }\n        });\n\n        var printedUsage = false;\n\n        opts.flag(\'help\', {\n            usage: \'Print this message\',\n            set: () => {\n                this.printVersion();\n                opts.printUsage();\n                printedUsage = true;\n            }\n        }, \'h\');\n\n        opts.flag(\'useCaseSensitiveFileResolution\', {\n            usage: \'Force file resolution to be case sensitive\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.useCaseSensitiveFileResolution = true;\n            }\n        });\n\n        opts.flag(\'version\', {\n            usage: \'Print the compiler\\\'s version: \' + this.compilerVersion,\n            set: () => {\n                this.printVersion();\n            }\n        }, \'v\');\n\n        opts.flag(\'disallowbool\', {\n            usage: \'Throw error for use of deprecated \"bool\" type\',\n            set: () => {\n                this.compilationSettings.disallowBool = true;\n            }\n        }, \'b\');\n\n        opts.flag(\'disallowimportmodule\', {\n            usage: \'Throw error for use of deprecated \"module\" keyword when referencing an external module. Only allow \"require\" keyword.\',\n            set: () => {\n                this.compilationSettings.allowModuleKeywordInExternalModuleReference = false;\n            }\n        }, \'m\');\n\n        opts.parse(this.ioHost.arguments);\n        \n        if (this.compilationSettings.useDefaultLib) {\n            var compilerFilePath = this.ioHost.getExecutingFilePath()\n            var binDirPath = this.ioHost.dirName(compilerFilePath);\n            var libStrPath = this.ioHost.resolvePath(binDirPath + \"/lib.d.ts\");\n            code = new TypeScript.SourceUnit(libStrPath, null);\n            this.compilationEnvironment.code.push(code);\n        }\n\n        for (var i = 0; i < opts.unnamed.length; i++) {\n            code = new TypeScript.SourceUnit(opts.unnamed[i], null);\n            this.compilationEnvironment.code.push(code);\n        }\n\n        // If no source files provided to compiler - print usage information\n        if (this.compilationEnvironment.code.length === (this.compilationSettings.useDefaultLib ? 1 : 0)) {\n            if (!printedUsage && !this.printedVersion) {\n                this.printVersion();\n                opts.printUsage();\n                this.ioHost.quit(1);\n            }\n            return;\n        }\n\n        var sourceFiles: TypeScript.SourceUnit[] = [];\n        if (this.compilationSettings.watch) {\n            // Capture the state before calling resolve\n            sourceFiles = this.compilationEnvironment.code.slice(0);\n        }\n\n        // Resolve file dependencies, if requested\n        this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;\n\n        if (!this.compilationSettings.updateTC) {\n            this.compile();\n        }\n        else {\n            this.updateCompile();\n        }\n\n        if (!this.errorReporter.hasErrors) {\n            if (this.compilationSettings.exec) {\n                this.run();\n            }\n        }\n\n        if (this.compilationSettings.watch) {\n            // Watch will cause the program to stick around as long as the files exist\n            this.watchFiles(sourceFiles);\n        }\n        else {  \n            // Exit with the appropriate error code\n            this.ioHost.quit(this.errorReporter.hasErrors ? 1 : 0);\n        }\n    }\n\n    public printVersion() {\n        if (!this.printedVersion) {\n            this.ioHost.printLine(\"Version \" + this.compilerVersion);\n            this.printedVersion = true;\n        }\n    }\n\n    private watchFiles(sourceFiles: TypeScript.SourceUnit[]) {\n        if (!this.ioHost.watchFile) {\n            this.errorReporter.addDiagnostic(\n                new TypeScript.SemanticDiagnostic(null, 0, 0, TypeScript.DiagnosticCode.Current_host_does_not_support__w_atch_option, null));\n            return;\n        }\n\n        var resolvedFiles: string[] = []\n        var watchers: { [x: string]: IFileWatcher; } = {};\n\n        var addWatcher = (fileName: string) => {\n            if (!watchers[fileName]) {\n                var watcher = this.ioHost.watchFile(fileName, onWatchedFileChange);\n                watchers[fileName] = watcher;\n            }\n            else {\n                TypeScript.CompilerDiagnostics.debugPrint(\"Cannot watch file, it is already watched.\");\n            }\n        };\n\n        var removeWatcher = (fileName: string) => {\n            if (watchers[fileName]) {\n                watchers[fileName].close();\n                delete watchers[fileName];\n            }\n            else {\n                TypeScript.CompilerDiagnostics.debugPrint(\"Cannot stop watching file, it is not being watched.\");\n            }\n        };\n\n        var onWatchedFileChange = () => {\n            // Reset the state\n            this.compilationEnvironment.code = sourceFiles;\n\n            // Clean errors for previous compilation\n            this.errorReporter.reset();\n\n            // Resolve file dependencies, if requested\n            this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;\n\n            // Check if any new files were added to the environment as a result of the file change\n            var oldFiles = resolvedFiles;\n            var newFiles: string[] = [];\n            this.resolvedEnvironment.code.forEach((sf) => newFiles.push(sf.path));\n            newFiles = newFiles.sort();\n\n            var i = 0, j = 0;\n            while (i < oldFiles.length && j < newFiles.length) {\n\n                var compareResult = oldFiles[i].localeCompare(newFiles[j]);\n                if (compareResult === 0) {\n                    // No change here\n                    i++;\n                    j++;\n                }\n                else if (compareResult < 0) {\n                    // Entry in old list does not exist in the new one, it was removed\n                    removeWatcher(oldFiles[i]);\n                    i++;\n                }\n                else {\n                    // Entry in new list does exist in the new one, it was added\n                    addWatcher(newFiles[j]);\n                    j++;\n                }\n            }\n\n            // All remaining unmatched items in the old list have been removed\n            for (var k = i; k < oldFiles.length; k++) {\n                removeWatcher(oldFiles[k]);\n            }\n\n            // All remaing unmatched items in the new list have been added\n            for (k = j; k < newFiles.length; k++) {\n                addWatcher(newFiles[k]);\n            }\n\n            // Update the state\n            resolvedFiles = newFiles;\n\n            // Print header\n            this.ioHost.printLine(\"\");\n            this.ioHost.printLine(\"Recompiling (\" + new Date() + \"): \");\n            resolvedFiles.forEach((f) => this.ioHost.printLine(\"    \" + f));\n\n            // Trigger a new compilation\n            this.compile();\n\n            if (!this.errorReporter.hasErrors) {\n                if (this.compilationSettings.exec) {\n                    this.run();\n                }\n            }\n        };\n\n        // Switch to using stdout for all error messages\n        this.ioHost.stderr = this.ioHost.stdout;\n\n        // Initialize the initial list of resolved files, and add watches to them\n        this.resolvedEnvironment.code.forEach((sf) => {\n            resolvedFiles.push(sf.path);\n            addWatcher(sf.path);\n        });\n        resolvedFiles.sort();\n    }\n}\n\n// Start the batch compilation using the current hosts IO\nvar batch = new BatchCompiler(IO);\nbatch.batchCompile();\n";