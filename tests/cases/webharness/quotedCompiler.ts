var compilerString = "/* *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved. \nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \n \nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \nMERCHANTABLITY OR NON-INFRINGEMENT. \n \nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n/// <reference no-default-lib=\"true\"/>\n\n////////////////\n/// ECMAScript APIs\n////////////////\n\ndeclare var NaN: number;\ndeclare var Infinity: number;\n\n/**\n  * Evaluates JavaScript code and executes it. \n  * @param x A String value that contains valid JavaScript code.\n  */\ndeclare function eval(x: string): any;\n\n/**\n  * Converts A string to an integer.\n  * @param s A string to convert into a number.\n  * @param radix A value between 2 and 36 that specifies the base of the number in numString. \n  * If this argument is not supplied, strings with a prefix of \'0x\' are considered hexadecimal.\n  * All other strings are considered decimal.\n  */\ndeclare function parseInt(s: string, radix?: number): number;\n\n/**\n  * Converts a string to a floating-point number. \n  * @param string A string that contains a floating-point number. \n  */\ndeclare function parseFloat(string: string): number;\n\n/**\n  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number). \n  * @param number A numeric value.\n  */\ndeclare function isNaN(number: number): bool;\n\n/** \n  * Determines whether a supplied number is finite.\n  * @param number Any numeric value.\n  */\ndeclare function isFinite(number: number): bool;\n\n/**\n  * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\n  * @param encodedURI A value representing an encoded URI.\n  */\ndeclare function decodeURI(encodedURI: string): string;\n\n/**\n  * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\n  * @param encodedURIComponent A value representing an encoded URI component.\n  */\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\n\n/** \n  * Encodes a text string as a valid Uniform Resource Identifier (URI)\n  * @param uri A value representing an encoded URI.\n  */ \ndeclare function encodeURI(uri: string): string;\n\n/**\n  * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\n  * @param uriComponent A value representing an encoded URI component.\n  */\ndeclare function encodeURIComponent(uriComponent: string): string;\n\ninterface PropertyDescriptor {\n    configurable?: bool;\n    enumerable?: bool;\n    value?: any;\n    writable?: bool;\n    get?(): any;\n    set?(v: any): void;\n}\n\ninterface PropertyDescriptorMap {\n    [s: string]: PropertyDescriptor;\n}\n\ninterface Object {\n    /** Returns a string representation of an object. */\n    toString(): string;\n\n    /** Returns a date converted to a string using the current locale. */\n    toLocaleString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Object;\n\n    /**\n      * Determines whether an object has a property with the specified name. \n      * @param v A property name.\n      */\n    hasOwnProperty(v: string): bool;\n\n    /**\n      * Determines whether an object exists in another object\'s prototype chain. \n      * @param v Another object whose prototype chain is to be checked.\n      */\n    isPrototypeOf(v: Object): bool;\n\n    /** \n      * Determines whether a specified property is enumerable.\n      * @param v A property name.\n      */\n    propertyIsEnumerable(v: string): bool;\n\n    [s: string]: any;\n}\n\n/**\n  * Provides functionality common to all JavaScript objects.\n  */\ndeclare var Object: {\n    new (value?: any): Object;\n    (): any;\n    (value: any): any;\n\n    /** A reference to the prototype for a class of objects. */\n    prototype: Object;\n\n    /** \n      * Returns the prototype of an object. \n      * @param o The object that references the prototype.\n      */\n    getPrototypeOf(o: any): any;\n\n    /**\n      * Gets the own property descriptor of the specified object. \n      * An own property descriptor is one that is defined directly on the object and is not inherited from the object\'s prototype. \n      * @param o Object that contains the property.\n      * @param p Name of the property.\n    */\n    getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor;\n\n    /** \n      * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly \n      * on that object, and are not inherited from the object\'s prototype. The properties of an object include both fields (objects) and functions.\n      * @param o Object that contains the own properties.\n      */\n    getOwnPropertyNames(o: any): string[];\n\n    /** \n      * Creates an object that has the specified prototype, and that optionally contains specified properties.\n      * @param o Object to use as a prototype. May be null\n      * @param properties JavaScript object that contains one or more property descriptors. \n      */\n    create(o: any, properties?: PropertyDescriptorMap): any;\n\n    /**\n      * Adds a property to an object, or modifies attributes of an existing property. \n      * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\n      * @param p The property name.\n      * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\n      */\n    defineProperty(o: any, p: string, attributes: PropertyDescriptor): any;\n\n    /**\n      * Adds one or more properties to an object, and/or modifies attributes of existing properties. \n      * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\n      * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\n      */\n    defineProperties(o: any, properties: PropertyDescriptorMap): any;\n\n    /**\n      * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\n      * @param o Object on which to lock the attributes. \n      */\n    seal(o: any): any;\n\n    /**\n      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n      * @param o Object on which to lock the attributes.\n      */\n    freeze(o: any): any;\n\n    /**\n      * Prevents the addition of new properties to an object.\n      * @param o Object to make non-extensible. \n      */\n    preventExtensions(o: any): any;\n\n    /**\n      * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\n      * @param o Object to test. \n      */\n    isSealed(o: any): bool;\n\n    /**\n      * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\n      * @param o Object to test.  \n      */\n    isFrozen(o: any): bool;\n\n    /**\n      * Returns a value that indicates whether new properties can be added to an object.\n      * @param o Object to test. \n      */\n    isExtensible(o: any): bool;\n\n    /**\n      * Returns the names of the enumerable properties and methods of an object.\n      * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n      */\n    keys(o: any): string[];\n}\n\n/**\n  * Creates a new function.\n  */\ninterface Function {\n    /**\n      * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\n      * @param thisArg The object to be used as the this object.\n      * @param argArray A set of arguments to be passed to the function.\n      */\n    apply(thisArg: any, argArray?: any): any;\n\n    /**\n      * Calls a method of an object, substituting another object for the current object.\n      * @param thisArg The object to be used as the current object.\n      * @param argArray A list of arguments to be passed to the method.\n      */\n    call(thisArg: any, ...argArray: any[]): any;\n\n    /**\n      * For a given function, creates a bound function that has the same body as the original function. \n      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n      * @param thisArg An object to which the this keyword can refer inside the new function.\n      * @param argArray A list of arguments to be passed to the new function.\n      */\n    bind(thisArg: any, ...argArray: any[]): any;\n    \n    prototype: any;\n    length: number;\n\n    // Non-standard extensions\n    arguments: any;\n    caller: Function;\n}\n\ndeclare var Function: {\n    /** \n      * Creates a new function.\n      * @param args A list of arguments the function accepts.\n      */\n    new (...args: string[]): Function;\n    (...args: string[]): Function;\n    prototype: Function;\n}\n\ninterface IArguments {\n    [index: number]: any;\n    length: number;\n    callee: Function;\n}\n\ninterface String {\n    /** Returns a string representation of a string. */\n    toString(): string;\n\n    /**\n      * Returns the character at the specified index.\n      * @param pos The zero-based index of the desired character.\n      */\n    charAt(pos: number): string;\n\n    /** \n      * Returns the Unicode value of the character at the specified location.\n      * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\n      */\n    charCodeAt(index: number): number;\n\n    /**\n      * Returns a string that contains the concatenation of two or more strings.\n      * @param strings The strings to append to the end of the string.  \n      */\n    concat(...strings: string[]): string;\n\n    /**\n      * Returns the position of the first occurrence of a substring. \n      * @param searchString The substring to search for in the string\n      * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\n      */\n    indexOf(searchString: string, position?: number): number;\n\n    /**\n      * Returns the last occurrence of a substring in the string.\n      * @param searchString The substring to search for.\n      * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\n      */\n    lastIndexOf(searchString: string, position?: number): number;\n\n    /**\n      * Determines whether two strings are equivalent in the current locale.\n      * @param that String to compare to target string\n      */\n    localeCompare(that: string): number;\n\n    /** \n      * Matches a string with a regular expression, and returns an array containing the results of that search.\n      * @param regexp A variable name or string literal containing the regular expression pattern and flags.\n      */\n    match(regexp: string): string[];\n    /** \n      * Matches a string with a regular expression, and returns an array containing the results of that search.\n      * @param regexp A regular expression object that contains the regular expression pattern and applicable flags. \n      */\n    match(regexp: RegExp): string[];\n\n    /**\n      * Replaces text in a string, using a regular expression or search string.\n      * @param searchValue A String object or string literal that represents the regular expression\n      * @param replaceValue A String object or string literal containing the text to replace for every successful match of rgExp in stringObj.\n      */\n    replace(searchValue: string, replaceValue: string): string;\n    /**\n      * Replaces text in a string, using a regular expression or search string.\n      * @param searchValue A String object or string literal that represents the regular expression\n      * @param replaceValue A function that returns the replacement text.\n      */\n    replace(searchValue: string, replaceValue: (substring: string, ...args: any[]) => string): string;\n    /**\n      * Replaces text in a string, using a regular expression or search string.\n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags\n      * @param replaceValue A String object or string literal containing the text to replace for every successful match of rgExp in stringObj.\n      */\n    replace(searchValue: RegExp, replaceValue: string): string;\n    /**\n      * Replaces text in a string, using a regular expression or search string.\n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags\n      * @param replaceValue A function that returns the replacement text.\n      */\n    replace(searchValue: RegExp, replaceValue: (substring: string, ...args: any[]) => string): string;\n\n    /**\n      * Finds the first substring match in a regular expression search.\n      * @param regexp The regular expression pattern and applicable flags. \n      */\n    search(regexp: string): number;\n    /**\n      * Finds the first substring match in a regular expression search.\n      * @param regexp The regular expression pattern and applicable flags. \n      */\n    search(regexp: RegExp): number;\n\n    /**\n      * Returns a section of a string.\n      * @param start The index to the beginning of the specified portion of stringObj. \n      * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end. \n      * If this value is not specified, the substring continues to the end of stringObj.\n      */\n    slice(start: number, end?: number): string;\n\n    /**\n      * Split a string into substrings using the specified separator and return them as an array.\n      * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned. \n      * @param limit A value used to limit the number of elements returned in the array.\n      */\n    split(separator: string, limit?: number): string[];\n    /**\n      * Split a string into substrings using the specified separator and return them as an array.\n      * @param separator A Regular Express that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned. \n      * @param limit A value used to limit the number of elements returned in the array.\n      */\n    split(separator: RegExp, limit?: number): string[];\n\n    /**\n      * Returns the substring at the specified location within a String object. \n      * @param start The zero-based index integer indicating the beginning of the substring.\n      * @param end Zero-based index integer indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\n      * If end is omitted, the characters from start through the end of the original string are returned.\n      */\n    substring(start: number, end?: number): string;\n\n    /** Converts all the alphabetic characters in a string to lowercase. */\n    toLowerCase(): string;\n\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment\'s current locale. */\n    toLocaleLowerCase(): string;\n\n    /** Converts all the alphabetic characters in a string to uppercase. */\n    toUpperCase(): string;\n\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment\'s current locale. */\n    toLocaleUpperCase(): string;\n\n    /** Removes the leading and trailing white space and line terminator characters from a string. */\n    trim(): string;\n\n    /** Returns the length of a String object. */\n    length: number;\n\n    // IE extensions\n    /**\n      * Gets a substring beginning at the specified location and having the specified length.\n      * @param from The starting position of the desired substring. The index of the first character in the string is zero.\n      * @param length The number of characters to include in the returned substring.\n      */\n    substr(from: number, length?: number): string;\n}\n\n/** \n  * Allows manipulation and formatting of text strings and determination and location of substrings within strings. \n  */\ndeclare var String: {\n    new (value?: any): String;\n    (value?: any): string;\n    prototype: String;\n    fromCharCode(...codes: number[]): string;\n}\n\ninterface Boolean {\n}\ndeclare var Boolean: {\n    new (value?: any): Boolean;\n    (value?: any): bool;\n    prototype: Boolean;\n}\n\ninterface Number {\n    toString(radix?: number): string;\n    toFixed(fractionDigits?: number): string;\n    toExponential(fractionDigits?: number): string;\n    toPrecision(precision: number): string;\n}\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\ndeclare var Number: {\n    new (value?: any): Number;\n    (value?: any): number;\n    prototype: Number;\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\n    MAX_VALUE: number;\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\n    MIN_VALUE: number;\n    /** \n      * A value that is not a number.\n      * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\n      */\n    NaN: number;\n    /** \n      * A value that is less than the largest negative number that can be represented in JavaScript.\n      * JavaScript displays NEGATIVE_INFINITY values as -infinity. \n      */\n    NEGATIVE_INFINITY: number;\n    /**\n      * A value greater than the largest number that can be represented in JavaScript. \n      * JavaScript displays POSITIVE_INFINITY values as infinity. \n      */\n    POSITIVE_INFINITY: number;\n}\n\ninterface Math {\n    /** The mathematical constant e. This is Euler\'s number, the base of natural logarithms. */\n    E: number;\n    /** The natural logarithm of 10. */\n    LN10: number;\n    /** The natural logarithm of 2. */\n    LN2: number;\n    /** The base-2 logarithm of e. */\n    LOG2E: number;\n    /** The base-10 logarithm of e. */\n    LOG10E: number;\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\n    PI: number;\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\n    SQRT1_2: number;\n    /** The square root of 2. */\n    SQRT2: number;\n    /**\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative). \n      * For example, the absolute value of -5 is the same as the absolute value of 5.\n      * @param x A numeric expression for which the absolute value is needed.\n      */\n    abs(x: number): number;\n    /**\n      * Returns the arc cosine (or inverse cosine) of a number. \n      * @param x A numeric expression.\n      */ \n    acos(x: number): number;\n    /** \n      * Returns the arcsine of a number. \n      * @param x A numeric expression.\n      */\n    asin(x: number): number;\n    /**\n      * Returns the arctangent of a number. \n      * @param x A numeric expression for which the arctangent is needed.\n      */\n    atan(x: number): number;\n    /**\n      * Returns the angle (in radians) from the X axis to a point (y,x).\n      * @param y A numeric expression representing the cartesian y-coordinate.\n      * @param x A numeric expression representing the cartesian x-coordinate.\n      */\n    atan2(y: number, x: number): number;\n    /**\n      * Returns the smallest integer greater than or equal to its numeric argument. \n      * @param x A numeric expression.\n      */\n    ceil(x: number): number;\n    /**\n      * Returns the cosine of a number. \n      * @param x A numeric expression that contains an angle measured in radians.\n      */ \n    cos(x: number): number;\n    /**\n      * Returns e (the base of natural logarithms) raised to a power. \n      * @param x A numeric expression representing the power of e.\n      */\n    exp(x: number): number;\n    /**\n      * Returns the greatest integer less than or equal to its numeric argument. \n      * @param x A numeric expression.\n      */\n    floor(x: number): number;\n    /**\n      * Returns the natural logarithm (base e) of a number. \n      * @param x A numeric expression.\n      */\n    log(x: number): number;\n    /**\n      * Returns the larger of a set of supplied numeric expressions. \n      * @param values Numeric expressions to be evaluated.\n      */\n    max(...values: number[]): number;\n    /**\n      * Returns the smaller of a set of supplied numeric expressions. \n      * @param values Numeric expressions to be evaluated.\n      */\n    min(...values: number[]): number;\n    /**\n      * Returns the value of a base expression taken to a specified power. \n      * @param x The base value of the expression.\n      * @param y The exponent value of the expression.\n      */\n    pow(x: number, y: number): number;\n    /** Returns a pseudorandom number between 0 and 1. */ \n    random(): number;\n    /** \n      * Returns a supplied numeric expression rounded to the nearest integer.\n      * @param x The value to be rounded to the nearest integer.\n      */\n    round(x: number): number;\n    /**\n      * Returns the sine of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    sin(x: number): number;\n    /**\n      * Returns the square root of a number.\n      * @param x A numeric expression.\n      */\n    sqrt(x: number): number;\n    /**\n      * Returns the tangent of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    tan(x: number): number;\n}\n/** An intrinsic object that provides basic mathematics functionality and constants. */\ndeclare var Math: Math;\n\n/** Enables basic storage and retrieval of dates and times. */\ninterface Date {\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\n    toString(): string;\n    /** Returns a date as a string value. */\n    toDateString(): string;\n    /** Returns a time as a string value. */\n    toTimeString(): string;\n    toLocaleString(): string;\n    /** Returns a date as a string value appropriate to the host environment\'s current locale. */\n    toLocaleDateString(): string;\n    /** Returns a time as a string value appropriate to the host environment\'s current locale. */\n    toLocaleTimeString(): string;\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\n    valueOf(): number;\n    /** Gets the time value in milliseconds. */\n    getTime(): number;\n    /** Gets the year, using local time. */\n    getFullYear(): number;\n    /** Gets the year using Universal Coordinated Time (UTC). */\n    getUTCFullYear(): number;\n    /** Gets the month, using local time. */\n    getMonth(): number;\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMonth(): number;\n    /** Gets the day-of-the-month, using local time. */\n    getDate(): number;\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\n    getUTCDate(): number;\n    /** Gets the day of the week, using local time. */\n    getDay(): number;\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\n    getUTCDay(): number;\n    /** Gets the hours in a date, using local time. */\n    getHours(): number;\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\n    getUTCHours(): number;\n    /** Gets the minutes of a Date object, using local time. */\n    getMinutes(): number;\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMinutes(): number;\n    /** Gets the seconds of a Date object, using local time. */\n    getSeconds(): number;\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\n    getUTCSeconds(): number;\n    /** Gets the milliseconds of a Date, using local time. */\n    getMilliseconds(): number;\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMilliseconds(): number;\n    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */\n    getTimezoneOffset(): number;\n    /** \n      * Sets the date and time value in the Date object.\n      * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT. \n      */\n    setTime(time: number): void;\n    /**\n      * Sets the milliseconds value in the Date object using local time. \n      * @param ms A numeric value equal to the millisecond value.\n      */\n    setMilliseconds(ms: number): void;\n    /** \n      * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\n      * @param ms A numeric value equal to the millisecond value. \n      */\n    setUTCMilliseconds(ms: number): void;\n\n    /**\n      * Sets the seconds value in the Date object using local time. \n      * @param sec A numeric value equal to the seconds value.\n      * @param ms A numeric value equal to the milliseconds value.\n      */\n    setSeconds(sec: number, ms?: number): void;\n    /**\n      * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\n      * @param sec A numeric value equal to the seconds value.\n      * @param ms A numeric value equal to the milliseconds value.\n      */\n    setUTCSeconds(sec: number, ms?: number): void;\n    /**\n      * Sets the minutes value in the Date object using local time. \n      * @param min A numeric value equal to the minutes value. \n      * @param sec A numeric value equal to the seconds value. \n      * @param ms A numeric value equal to the milliseconds value.\n      */\n    setMinutes(min: number, sec?: number, ms?: number): void;\n    /**\n      * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\n      * @param min A numeric value equal to the minutes value. \n      * @param sec A numeric value equal to the seconds value. \n      * @param ms A numeric value equal to the milliseconds value.\n      */\n    setUTCMinutes(min: number, sec?: number, ms?: number): void;\n    /**\n      * Sets the hour value in the Date object using local time.\n      * @param hours A numeric value equal to the hours value.\n      * @param min A numeric value equal to the minutes value.\n      * @param sec A numeric value equal to the seconds value. \n      * @param ms A numeric value equal to the milliseconds value.\n      */\n    setHours(hours: number, min?: number, sec?: number, ms?: number): void;\n    /**\n      * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\n      * @param hours A numeric value equal to the hours value.\n      * @param min A numeric value equal to the minutes value.\n      * @param sec A numeric value equal to the seconds value. \n      * @param ms A numeric value equal to the milliseconds value.\n      */\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): void;\n    /**\n      * Sets the numeric day-of-the-month value of the Date object using local time. \n      * @param date A numeric value equal to the day of the month.\n      */\n    setDate(date: number): void;\n    /** \n      * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\n      * @param date A numeric value equal to the day of the month. \n      */\n    setUTCDate(date: number): void;\n    /** \n      * Sets the month value in the Date object using local time. \n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. \n      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\n      */\n    setMonth(month: number, date?: number): void;\n    /**\n      * Sets the month value in the Date object using Universal Coordinated Time (UTC).\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n      * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\n      */\n    setUTCMonth(month: number, date?: number): void;\n    /**\n      * Sets the year of the Date object using local time.\n      * @param year A numeric value for the year.\n      * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\n      * @param date A numeric value equal for the day of the month.\n      */\n    setFullYear(year: number, month?: number, date?: number): void;\n    /**\n      * Sets the year value in the Date object using Universal Coordinated Time (UTC).\n      * @param year A numeric value equal to the year.\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\n      * @param date A numeric value equal to the day of the month.\n      */\n    setUTCFullYear(year: number, month?: number, date?: number): void;\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\n    toUTCString(): string;\n    /** Returns a date as a string value in ISO format. */\n    toISOString(): string;\n    /** Used by the JSON.stringify method to enable the transformation of an object\'s data for JavaScript Object Notation (JSON) serialization. */ \n    toJSON(key?: any): string;\n}\n/**\n  * Enables basic storage and retrieval of dates and times.\n  */\ndeclare var Date: {\n    new (): Date;\n    new (value: number): Date;\n    new (value: string): Date;\n    new (year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\n    (): string;\n    prototype: Date;\n    /**\n      * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\n      * @param s A date string\n      */\n    parse(s: string): number;\n    /**\n      * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date. \n      * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n      * @param month The month as an integer between 0 and 11 (January to December).\n      * @param date The date as an integer between 1 and 31.\n      * @param hours Must be supplied if minutes is supplied. An integer from 0 to 23 (midnight to 11pm) that specifies the hour.\n      * @param minutes Must be supplied if seconds is supplied. An integer from 0 to 59 that specifies the minutes.\n      * @param seconds Must be supplied if milliseconds is supplied. An integer from 0 to 59 that specifies the seconds.\n      * @param ms An integer from 0 to 999 that specifies the milliseconds.\n      */\n    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\n    now(): number;\n}\n\ninterface RegExpExecArray {\n    [index: number]: string;\n    length: number;\n\n    index: number;\n    input: string;\n\n    toString(): string;\n    toLocaleString(): string;\n    concat(...items: string[][]): string[];\n    join(separator?: string): string;\n    pop(): string;\n    push(...items: string[]): number;\n    reverse(): string[];\n    shift(): string;\n    slice(start: number, end?: number): string[];\n    sort(compareFn?: (a: string, b: string) => number): string[];\n    splice(start: number): string[];\n    splice(start: number, deleteCount: number, ...items: string[]): string[];\n    unshift(...items: string[]): number;\n\n    indexOf(searchElement: string, fromIndex?: number): number;\n    lastIndexOf(searchElement: string, fromIndex?: number): number;\n    every(callbackfn: (value: string, index: number, array: string[]) => bool, thisArg?: any): bool;\n    some(callbackfn: (value: string, index: number, array: string[]) => bool, thisArg?: any): bool;\n    forEach(callbackfn: (value: string, index: number, array: string[]) => void , thisArg?: any): void;\n    map(callbackfn: (value: string, index: number, array: string[]) => any, thisArg?: any): any[];\n    filter(callbackfn: (value: string, index: number, array: string[]) => bool, thisArg?: any): string[];\n    reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: string[]) => any, initialValue?: any): any;\n    reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: string[]) => any, initialValue?: any): any;\n}\n\n\ninterface RegExp {\n    /** \n      * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\n      * @param string The String object or string literal on which to perform the search.\n      */\n    exec(string: string): RegExpExecArray;\n    /** \n      * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\n      * @param string String on which to perform the search.\n      */\n    test(string: string): bool;\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The rgExp argument is a Regular expression object. It can be a variable name or a literal. */\n    source: string;\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\n    global: bool;\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\n    ignoreCase: bool;\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\n    multiline: bool;\n\n    lastIndex: number;\n\n    // Non-standard extensions\n    compile(): RegExp;\n}\ndeclare var RegExp: {\n    new (pattern: string, flags?: string): RegExp;\n    (pattern: string, flags?: string): RegExp;\n\n    // Non-standard extensions\n    $1: string;\n    $2: string;\n    $3: string;\n    $4: string;\n    $5: string;\n    $6: string;\n    $7: string;\n    $8: string;\n    $9: string;\n    lastMatch: string;\n}\n\ninterface Error {\n    name: string;\n    message: string;\n}\ndeclare var Error: {\n    new (message?: string): Error;\n    (message?: string): Error;\n    prototype: Error;\n}\n\ninterface EvalError extends Error {\n}\ndeclare var EvalError: {\n    new (message?: string): EvalError;\n    (message?: string): EvalError;\n    prototype: EvalError;\n}\n\ninterface RangeError extends Error {\n}\ndeclare var RangeError: {\n    new (message?: string): RangeError;\n    (message?: string): RangeError;\n    prototype: RangeError;\n}\n\ninterface ReferenceError extends Error {\n}\ndeclare var ReferenceError: {\n    new (message?: string): ReferenceError;\n    (message?: string): ReferenceError;\n    prototype: ReferenceError;\n}\n\ninterface SyntaxError extends Error {\n}\ndeclare var SyntaxError: {\n    new (message?: string): SyntaxError;\n    (message?: string): SyntaxError;\n    prototype: SyntaxError;\n}\n\ninterface TypeError extends Error {\n}\ndeclare var TypeError: {\n    new (message?: string): TypeError;\n    (message?: string): TypeError;\n    prototype: TypeError;\n}\n\ninterface URIError extends Error {\n}\ndeclare var URIError: {\n    new (message?: string): URIError;\n    (message?: string): URIError;\n    prototype: URIError;\n}\n\ninterface JSON {\n    /**\n      * Converts a JavaScript Object Notation (JSON) string into an object.\n      * @param text A valid JSON string.\n      * @param reviver A function that transforms the results. This function is called for each member of the object. \n      * If a member contains nested objects, the nested objects are transformed before the parent object is. \n      */\n    parse(text: string, reviver?: (key: any, value: any) => any): any;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      */\n    stringify(value: any): string;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      * @param replacer A function that transforms the results.\n      */\n    stringify(value: any, replacer: (key: string, value: any) => any): string;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      * @param replacer Array that transforms the results.\n      */\n    stringify(value: any, replacer: any[]): string;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      * @param replacer A function that transforms the results.\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n      */\n    stringify(value: any, replacer: (key: string, value: any) => any, space: any): string;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      * @param replacer Array that transforms the results.\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n      */\n    stringify(value: any, replacer: any[], space: any): string;\n}\n/**\n  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\n  */\ndeclare var JSON: JSON;\n\n////////////////\n/// ECMAScript Array API (specially handled by compiler)\n////////////////\n\ninterface Array<T> {\n    toString(): string;\n    toLocaleString(): string;\n    concat(...items: T[][]): T[]; // Note: This overload needs to be picked for arrays of arrays, even though both are applicable\n    concat(...items: T[]): T[];\n    join(separator?: string): string;\n    pop(): T;\n    push(...items: T[]): number;\n    reverse(): T[];\n    shift(): T;\n    slice(start: number, end?: number): T[];\n    sort(compareFn?: (a: T, b: T) => number): T[];\n    splice(start: number): T[];\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\n    unshift(...items: T[]): number;\n\n    indexOf(searchElement: T, fromIndex?: number): number;\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    every(callbackfn: (value: T, index: number, array: T[]) => bool, thisArg?: any): bool;\n    some(callbackfn: (value: T, index: number, array: T[]) => bool, thisArg?: any): bool;\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void , thisArg?: any): void;\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n    filter(callbackfn: (value: T, index: number, array: T[]) => bool, thisArg?: any): T[];\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue?: U): U;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue?: U): U;\n\n    length: number;\n\n}\ndeclare var Array: {\n    new <T>(...items: T[]): T[];\n    new <T>(arrayLength: number): T[];    \n    <T>(...items: T[]): T[];\n    <T>(arrayLength: number): T[];\n    isArray(arg: any): bool;\n    prototype: Array; // Note: Implicitly Array<any>\n}\n\n////////////////\n/// IE10 ECMAScript Extensions\n////////////////\n\ninterface ArrayBuffer {\n    byteLength: number;\n}\ndeclare var ArrayBuffer: {\n    prototype: ArrayBuffer;\n    new (byteLength: number);\n}\n\ninterface ArrayBufferView {\n    buffer: ArrayBuffer;\n    byteOffset: number;\n    byteLength: number;\n}\n\ninterface Int8Array extends ArrayBufferView {\n    BYTES_PER_ELEMENT: number;\n    length: number;\n    [index: number]: number;\n    get(index: number): number;\n    set(index: number, value: number): void;\n    set(array: Int8Array, offset?: number): void;\n    set(array: number[], offset?: number): void;\n    subarray(begin: number, end?: number): Int8Array;\n}\ndeclare var Int8Array: {\n    prototype: Int8Array;\n    new (length: number): Int8Array;\n    new (array: Int8Array): Int8Array;\n    new (array: number[]): Int8Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int8Array;\n    BYTES_PER_ELEMENT: number;\n}\n\ninterface Uint8Array extends ArrayBufferView {\n    BYTES_PER_ELEMENT: number;\n    length: number;\n    [index: number]: number;\n    get(index: number): number;\n    set(index: number, value: number): void;\n    set(array: Uint8Array, offset?: number): void;\n    set(array: number[], offset?: number): void;\n    subarray(begin: number, end?: number): Uint8Array;\n}\ndeclare var Uint8Array: {\n    prototype: Uint8Array;\n    new (length: number): Uint8Array;\n    new (array: Uint8Array): Uint8Array;\n    new (array: number[]): Uint8Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8Array;\n    BYTES_PER_ELEMENT: number;\n}\n\ninterface Int16Array extends ArrayBufferView {\n    BYTES_PER_ELEMENT: number;\n    length: number;\n    [index: number]: number;\n    get(index: number): number;\n    set(index: number, value: number): void;\n    set(array: Int16Array, offset?: number): void;\n    set(array: number[], offset?: number): void;\n    subarray(begin: number, end?: number): Int16Array;\n}\ndeclare var Int16Array: {\n    prototype: Int16Array;\n    new (length: number): Int16Array;\n    new (array: Int16Array): Int16Array;\n    new (array: number[]): Int16Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int16Array;\n    BYTES_PER_ELEMENT: number;\n}\n\ninterface Uint16Array extends ArrayBufferView {\n    BYTES_PER_ELEMENT: number;\n    length: number;\n    [index: number]: number;\n    get(index: number): number;\n    set(index: number, value: number): void;\n    set(array: Uint16Array, offset?: number): void;\n    set(array: number[], offset?: number): void;\n    subarray(begin: number, end?: number): Uint16Array;\n}\ndeclare var Uint16Array: {\n    prototype: Uint16Array;\n    new (length: number): Uint16Array;\n    new (array: Uint16Array): Uint16Array;\n    new (array: number[]): Uint16Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint16Array;\n    BYTES_PER_ELEMENT: number;\n}\n\ninterface Int32Array extends ArrayBufferView {\n    BYTES_PER_ELEMENT: number;\n    length: number;\n    [index: number]: number;\n    get(index: number): number;\n    set(index: number, value: number): void;\n    set(array: Int32Array, offset?: number): void;\n    set(array: number[], offset?: number): void;\n    subarray(begin: number, end?: number): Int32Array;\n}\ndeclare var Int32Array: {\n    prototype: Int32Array;\n    new (length: number): Int32Array;\n    new (array: Int32Array): Int32Array;\n    new (array: number[]): Int32Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int32Array;\n    BYTES_PER_ELEMENT: number;\n}\n\ninterface Uint32Array extends ArrayBufferView {\n    BYTES_PER_ELEMENT: number;\n    length: number;\n    [index: number]: number;\n    get(index: number): number;\n    set(index: number, value: number): void;\n    set(array: Uint32Array, offset?: number): void;\n    set(array: number[], offset?: number): void;\n    subarray(begin: number, end?: number): Uint32Array;\n}\ndeclare var Uint32Array: {\n    prototype: Uint32Array;\n    new (length: number): Uint32Array;\n    new (array: Uint32Array): Uint32Array;\n    new (array: number[]): Uint32Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint32Array;\n    BYTES_PER_ELEMENT: number;\n}\n\ninterface Float32Array extends ArrayBufferView {\n    BYTES_PER_ELEMENT: number;\n    length: number;\n    [index: number]: number;\n    get(index: number): number;\n    set(index: number, value: number): void;\n    set(array: Float32Array, offset?: number): void;\n    set(array: number[], offset?: number): void;\n    subarray(begin: number, end?: number): Float32Array;\n}\ndeclare var Float32Array: {\n    prototype: Float32Array;\n    new (length: number): Float32Array;\n    new (array: Float32Array): Float32Array;\n    new (array: number[]): Float32Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float32Array;\n    BYTES_PER_ELEMENT: number;\n}\n\ninterface Float64Array extends ArrayBufferView {\n    BYTES_PER_ELEMENT: number;\n    length: number;\n    [index: number]: number;\n    get(index: number): number;\n    set(index: number, value: number): void;\n    set(array: Float64Array, offset?: number): void;\n    set(array: number[], offset?: number): void;\n    subarray(begin: number, end?: number): Float64Array;\n}\ndeclare var Float64Array: {\n    prototype: Float64Array;\n    new (length: number): Float64Array;\n    new (array: Float64Array): Float64Array;\n    new (array: number[]): Float64Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float64Array;\n    BYTES_PER_ELEMENT: number;\n}\n\ninterface DataView extends ArrayBufferView {\n    getInt8(byteOffset: number): number;\n    getUint8(byteOffset: number): number;\n    getInt16(byteOffset: number, littleEndian?: bool): number;\n    getUint16(byteOffset: number, littleEndian?: bool): number;\n    getInt32(byteOffset: number, littleEndian?: bool): number;\n    getUint32(byteOffset: number, littleEndian?: bool): number;\n    getFloat32(byteOffset: number, littleEndian?: bool): number;\n    getFloat64(byteOffset: number, littleEndian?: bool): number;\n\n    setInt8(byteOffset: number, value: number): void;\n    setUint8(byteOffset: number, value: number): void;\n    setInt16(byteOffset: number, value: number, littleEndian?: bool): void;\n    setUint16(byteOffset: number, value: number, littleEndian?: bool): void;\n    setInt32(byteOffset: number, value: number, littleEndian?: bool): void;\n    setUint32(byteOffset: number, value: number, littleEndian?: bool): void;\n    setFloat32(byteOffset: number, value: number, littleEndian?: bool): void;\n    setFloat64(byteOffset: number, value: number, littleEndian?: bool): void;\n}\ndeclare var DataView: {\n    prototype: DataView;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): DataView;\n}\n\n////////////////\n/// IE9 DOM APIs (note that \n////////////////\n\ninterface NavigatorID {\n    appVersion: string;\n    appName: string;\n    userAgent: string;\n    platform: string;\n}\n\ninterface HTMLTableElement extends HTMLElement, DOML2DeprecatedBorderStyle_HTMLTableElement, DOML2DeprecatedAlignmentStyle_HTMLTableElement, MSBorderColorStyle, MSDataBindingExtensions, MSHTMLTableElementExtensions, DOML2DeprecatedBackgroundStyle, MSBorderColorHighlightStyle, MSDataBindingTableExtensions, DOML2DeprecatedBackgroundColorStyle {\n    tBodies: HTMLCollection;\n    width: string;\n    tHead: HTMLTableSectionElement;\n    cellSpacing: string;\n    tFoot: HTMLTableSectionElement;\n    frame: string;\n    rows: HTMLCollection;\n    rules: string;\n    cellPadding: string;\n    summary: string;\n    caption: HTMLTableCaptionElement;\n    deleteRow(index?: number): void;\n    createTBody(): HTMLElement;\n    deleteCaption(): void;\n    insertRow(index?: number): HTMLElement;\n    deleteTFoot(): void;\n    createTHead(): HTMLElement;\n    deleteTHead(): void;\n    createCaption(): HTMLElement;\n    createTFoot(): HTMLElement;\n}\ndeclare var HTMLTableElement: {\n    prototype: HTMLTableElement;\n    new(): HTMLTableElement;\n}\n\ninterface TreeWalker {\n    whatToShow: number;\n    filter: NodeFilterCallback;\n    root: Node;\n    currentNode: Node;\n    expandEntityReferences: bool;\n    previousSibling(): Node;\n    lastChild(): Node;\n    nextSibling(): Node;\n    nextNode(): Node;\n    parentNode(): Node;\n    firstChild(): Node;\n    previousNode(): Node;\n}\ndeclare var TreeWalker: {\n    prototype: TreeWalker;\n    new(): TreeWalker;\n}\n\ninterface GetSVGDocument {\n    getSVGDocument(): SVGDocument;\n}\n\ninterface HTMLHtmlElementDOML2Deprecated {\n    version: string;\n}\n\ninterface SVGPathSegCurvetoQuadraticRel extends SVGPathSeg {\n    y: number;\n    y1: number;\n    x: number;\n    x1: number;\n}\ndeclare var SVGPathSegCurvetoQuadraticRel: {\n    prototype: SVGPathSegCurvetoQuadraticRel;\n    new(): SVGPathSegCurvetoQuadraticRel;\n}\n\ninterface Performance {\n    navigation: PerformanceNavigation;\n    timing: PerformanceTiming;\n    toJSON(): any;\n}\ndeclare var Performance: {\n    prototype: Performance;\n    new(): Performance;\n}\n\ninterface SVGSVGElementEventHandlers {\n    onresize: (ev: UIEvent) => any;\n    onunload: (ev: Event) => any;\n    onscroll: (ev: UIEvent) => any;\n    onerror: (ev: Event) => any;\n    onzoom: (ev: any) => any;\n    onabort: (ev: UIEvent) => any;\n}\n\ninterface MSDataBindingTableExtensions {\n    dataPageSize: number;\n    nextPage(): void;\n    firstPage(): void;\n    refresh(): void;\n    previousPage(): void;\n    lastPage(): void;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLParagraphElement {\n    align: string;\n}\n\ninterface CompositionEvent extends UIEvent {\n    data: string;\n    locale: string;\n    initCompositionEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: AbstractView, dataArg: string, locale: string): void;\n}\ndeclare var CompositionEvent: {\n    prototype: CompositionEvent;\n    new(): CompositionEvent;\n}\n\ninterface SVGMarkerElement extends SVGElement, SVGStylable, SVGLangSpace, SVGFitToViewBox {\n    orientType: SVGAnimatedEnumeration;\n    markerUnits: SVGAnimatedEnumeration;\n    markerWidth: SVGAnimatedLength;\n    markerHeight: SVGAnimatedLength;\n    orientAngle: SVGAnimatedAngle;\n    refY: SVGAnimatedLength;\n    refX: SVGAnimatedLength;\n    setOrientToAngle(angle: SVGAngle): void;\n    setOrientToAuto(): void;\n    SVG_MARKER_ORIENT_UNKNOWN: number;\n    SVG_MARKER_ORIENT_ANGLE: number;\n    SVG_MARKERUNITS_UNKNOWN: number;\n    SVG_MARKERUNITS_STROKEWIDTH: number;\n    SVG_MARKER_ORIENT_AUTO: number;\n    SVG_MARKERUNITS_USERSPACEONUSE: number;\n}\ndeclare var SVGMarkerElement: {\n    prototype: SVGMarkerElement;\n    new(): SVGMarkerElement;\n    SVG_MARKER_ORIENT_UNKNOWN: number;\n    SVG_MARKER_ORIENT_ANGLE: number;\n    SVG_MARKERUNITS_UNKNOWN: number;\n    SVG_MARKERUNITS_STROKEWIDTH: number;\n    SVG_MARKER_ORIENT_AUTO: number;\n    SVG_MARKERUNITS_USERSPACEONUSE: number;\n}\n\ninterface WindowTimers {\n    clearTimeout(handle: number): void;\n    setTimeout(expression: any, msec?: number, language?: any): number;\n    clearInterval(handle: number): void;\n    setInterval(expression: any, msec?: number, language?: any): number;\n}\n\ninterface CSSStyleDeclaration extends CSS3Properties, SVG1_1Properties, CSS2Properties {\n    cssText: string;\n    length: number;\n    parentRule: CSSRule;\n    getPropertyPriority(propertyName: string): string;\n    getPropertyValue(propertyName: string): string;\n    removeProperty(propertyName: string): string;\n    item(index: number): string;\n    [index: number]: string;\n    setProperty(propertyName: string, value: string, priority?: string): void;\n}\ndeclare var CSSStyleDeclaration: {\n    prototype: CSSStyleDeclaration;\n    new(): CSSStyleDeclaration;\n}\n\ninterface SVGGElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests {\n}\ndeclare var SVGGElement: {\n    prototype: SVGGElement;\n    new(): SVGGElement;\n}\n\ninterface MSStyleCSSProperties extends MSCSSProperties {\n    pixelWidth: number;\n    posHeight: number;\n    posLeft: number;\n    pixelTop: number;\n    pixelBottom: number;\n    textDecorationNone: bool;\n    pixelLeft: number;\n    posTop: number;\n    posBottom: number;\n    textDecorationOverline: bool;\n    posWidth: number;\n    textDecorationLineThrough: bool;\n    pixelHeight: number;\n    textDecorationBlink: bool;\n    posRight: number;\n    pixelRight: number;\n    textDecorationUnderline: bool;\n}\ndeclare var MSStyleCSSProperties: {\n    prototype: MSStyleCSSProperties;\n    new(): MSStyleCSSProperties;\n}\n\ninterface MSCSSStyleSheetExtensions {\n    owningElement: Element;\n    imports: StyleSheetList;\n    isAlternate: bool;\n    rules: MSCSSRuleList;\n    isPrefAlternate: bool;\n    readOnly: bool;\n    cssText: string;\n    href: string;\n    id: string;\n    pages: StyleSheetPageList;\n    addImport(bstrURL: string, lIndex?: number): number;\n    addPageRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;\n    removeRule(lIndex: number): void;\n    addRule(bstrSelector: string, bstrStyle?: string, lIndex?: number): number;\n    removeImport(lIndex: number): void;\n}\n\ninterface Navigator extends NavigatorID, NavigatorOnLine, NavigatorDoNotTrack, NavigatorAbilities, NavigatorGeolocation, MSNavigatorAbilities {\n}\ndeclare var Navigator: {\n    prototype: Navigator;\n    new(): Navigator;\n}\n\ninterface SVGPathSegCurvetoCubicSmoothAbs extends SVGPathSeg {\n    y: number;\n    x2: number;\n    x: number;\n    y2: number;\n}\ndeclare var SVGPathSegCurvetoCubicSmoothAbs: {\n    prototype: SVGPathSegCurvetoCubicSmoothAbs;\n    new(): SVGPathSegCurvetoCubicSmoothAbs;\n}\n\ninterface MSBorderColorStyle_HTMLFrameSetElement {\n    borderColor: any;\n}\n\ninterface SVGZoomEvent extends UIEvent {\n    zoomRectScreen: SVGRect;\n    previousScale: number;\n    newScale: number;\n    previousTranslate: SVGPoint;\n    newTranslate: SVGPoint;\n}\ndeclare var SVGZoomEvent: {\n    prototype: SVGZoomEvent;\n    new(): SVGZoomEvent;\n}\n\ninterface NodeSelector {\n    querySelectorAll(selectors: string): NodeList;\n    querySelector(selectors: string): Element;\n}\n\ninterface HTMLTableDataCellElement extends HTMLTableCellElement, MSHTMLTableDataCellElementExtensions {\n}\ndeclare var HTMLTableDataCellElement: {\n    prototype: HTMLTableDataCellElement;\n    new(): HTMLTableDataCellElement;\n}\n\ninterface MSHTMLDirectoryElementExtensions extends DOML2DeprecatedListNumberingAndBulletStyle {\n}\n\ninterface HTMLBaseElement extends HTMLElement {\n    target: string;\n    href: string;\n}\ndeclare var HTMLBaseElement: {\n    prototype: HTMLBaseElement;\n    new(): HTMLBaseElement;\n}\n\ninterface ClientRect {\n    left: number;\n    width: number;\n    right: number;\n    top: number;\n    bottom: number;\n    height: number;\n}\ndeclare var ClientRect: {\n    prototype: ClientRect;\n    new(): ClientRect;\n}\n\ninterface PositionErrorCallback {\n    (error: PositionError): void;\n}\n\ninterface DOMImplementation extends DOMHTMLImplementation {\n    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DocumentType;\n    createDocument(namespaceURI: string, qualifiedName: string, doctype: DocumentType): Document;\n    hasFeature(feature: string, version?: string): bool;\n}\ndeclare var DOMImplementation: {\n    prototype: DOMImplementation;\n    new(): DOMImplementation;\n}\n\ninterface DOML2DeprecatedWidthStyle_HTMLBlockElement {\n    width: number;\n}\n\ninterface SVGUnitTypes {\n    SVG_UNIT_TYPE_UNKNOWN: number;\n    SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number;\n    SVG_UNIT_TYPE_USERSPACEONUSE: number;\n}\ndeclare var SVGUnitTypes: {\n    prototype: SVGUnitTypes;\n    new(): SVGUnitTypes;\n    SVG_UNIT_TYPE_UNKNOWN: number;\n    SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number;\n    SVG_UNIT_TYPE_USERSPACEONUSE: number;\n}\n\ninterface DocumentRange {\n    createRange(): Range;\n}\n\ninterface MSHTMLDocumentExtensions {\n    onrowexit: (ev: MSEventObj) => any;\n    compatible: MSCompatibleInfoCollection;\n    oncontrolselect: (ev: MSEventObj) => any;\n    onrowsinserted: (ev: MSEventObj) => any;\n    onpropertychange: (ev: MSEventObj) => any;\n    media: string;\n    onafterupdate: (ev: MSEventObj) => any;\n    onhelp: (ev: Event) => any;\n    uniqueID: string;\n    onbeforeactivate: (ev: UIEvent) => any;\n    onstoragecommit: (ev: StorageEvent) => any;\n    onselectionchange: (ev: Event) => any;\n    documentMode: number;\n    onfocusout: (ev: FocusEvent) => any;\n    ondataavailable: (ev: MSEventObj) => any;\n    onbeforeupdate: (ev: MSEventObj) => any;\n    onfocusin: (ev: FocusEvent) => any;\n    security: string;\n    namespaces: MSNamespaceInfoCollection;\n    ondatasetcomplete: (ev: MSEventObj) => any;\n    onbeforedeactivate: (ev: UIEvent) => any;\n    onstop: (ev: Event) => any;\n    onactivate: (ev: UIEvent) => any;\n    onmssitemodejumplistitemremoved: (ev: MSSiteModeEvent) => any;\n    frames: Window;\n    onselectstart: (ev: Event) => any;\n    onerrorupdate: (ev: MSEventObj) => any;\n    parentWindow: Window;\n    ondeactivate: (ev: UIEvent) => any;\n    ondatasetchanged: (ev: MSEventObj) => any;\n    onrowsdelete: (ev: MSEventObj) => any;\n    onmsthumbnailclick: (ev: MSSiteModeEvent) => any;\n    onrowenter: (ev: MSEventObj) => any;\n    onbeforeeditfocus: (ev: MSEventObj) => any;\n    Script: MSScriptHost;\n    oncellchange: (ev: MSEventObj) => any;\n    URLUnencoded: string;\n    updateSettings(): void;\n    execCommandShowHelp(commandId: string): bool;\n    releaseCapture(): void;\n    focus(): void;\n}\n\ninterface CSS2Properties {\n    backgroundAttachment: string;\n    visibility: string;\n    fontFamily: string;\n    borderRightStyle: string;\n    clear: string;\n    content: string;\n    counterIncrement: string;\n    orphans: string;\n    marginBottom: string;\n    borderStyle: string;\n    counterReset: string;\n    outlineWidth: string;\n    marginRight: string;\n    paddingLeft: string;\n    borderBottom: string;\n    marginTop: string;\n    borderTopColor: string;\n    top: string;\n    fontWeight: string;\n    textIndent: string;\n    borderRight: string;\n    width: string;\n    listStyleImage: string;\n    cursor: string;\n    listStylePosition: string;\n    borderTopStyle: string;\n    direction: string;\n    maxWidth: string;\n    color: string;\n    clip: string;\n    borderRightWidth: string;\n    verticalAlign: string;\n    pageBreakAfter: string;\n    overflow: string;\n    borderBottomStyle: string;\n    borderLeftStyle: string;\n    fontStretch: string;\n    emptyCells: string;\n    padding: string;\n    paddingRight: string;\n    background: string;\n    bottom: string;\n    height: string;\n    paddingTop: string;\n    right: string;\n    borderLeftWidth: string;\n    borderLeft: string;\n    backgroundPosition: string;\n    backgroundColor: string;\n    widows: string;\n    lineHeight: string;\n    pageBreakInside: string;\n    borderTopWidth: string;\n    left: string;\n    outlineStyle: string;\n    borderTop: string;\n    paddingBottom: string;\n    outlineColor: string;\n    wordSpacing: string;\n    outline: string;\n    font: string;\n    marginLeft: string;\n    display: string;\n    maxHeight: string;\n    cssFloat: string;\n    letterSpacing: string;\n    borderSpacing: string;\n    backgroundRepeat: string;\n    fontSizeAdjust: string;\n    borderLeftColor: string;\n    borderWidth: string;\n    backgroundImage: string;\n    listStyleType: string;\n    whiteSpace: string;\n    fontStyle: string;\n    borderBottomColor: string;\n    minWidth: string;\n    position: string;\n    zIndex: string;\n    borderColor: string;\n    listStyle: string;\n    captionSide: string;\n    borderCollapse: string;\n    fontVariant: string;\n    quotes: string;\n    tableLayout: string;\n    unicodeBidi: string;\n    borderBottomWidth: string;\n    minHeight: string;\n    textDecoration: string;\n    fontSize: string;\n    border: string;\n    pageBreakBefore: string;\n    textAlign: string;\n    textTransform: string;\n    margin: string;\n    borderRightColor: string;\n}\n\ninterface MSImageResourceExtensions_HTMLInputElement {\n    dynsrc: string;\n    vrml: string;\n    lowsrc: string;\n    start: string;\n    loop: number;\n}\n\ninterface MSHTMLEmbedElementExtensions {\n    palette: string;\n    hidden: string;\n    pluginspage: string;\n    units: string;\n}\n\ninterface MSHTMLModElementExtensions {\n}\n\ninterface Element extends Node, NodeSelector, ElementTraversal, MSElementExtensions {\n    scrollTop: number;\n    clientLeft: number;\n    scrollLeft: number;\n    tagName: string;\n    clientWidth: number;\n    scrollWidth: number;\n    clientHeight: number;\n    clientTop: number;\n    scrollHeight: number;\n    getAttribute(name?: string): string;\n    getElementsByTagNameNS(namespaceURI: string, localName: string): NodeList;\n    hasAttributeNS(namespaceURI: string, localName: string): bool;\n    getBoundingClientRect(): ClientRect;\n    getAttributeNS(namespaceURI: string, localName: string): string;\n    getAttributeNodeNS(namespaceURI: string, localName: string): Attr;\n    setAttributeNodeNS(newAttr: Attr): Attr;\n    hasAttribute(name: string): bool;\n    removeAttribute(name?: string): void;\n    setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;\n    getAttributeNode(name: string): Attr;\n    getElementsByTagName(name: string): NodeList;\n    setAttributeNode(newAttr: Attr): Attr;\n    getClientRects(): ClientRectList;\n    removeAttributeNode(oldAttr: Attr): Attr;\n    setAttribute(name?: string, value?: string): void;\n    removeAttributeNS(namespaceURI: string, localName: string): void;\n}\ndeclare var Element: {\n    prototype: Element;\n    new(): Element;\n}\n\ninterface SVGDocument {\n    rootElement: SVGSVGElement;\n}\n\ninterface HTMLNextIdElement extends HTMLElement {\n    n: string;\n}\ndeclare var HTMLNextIdElement: {\n    prototype: HTMLNextIdElement;\n    new(): HTMLNextIdElement;\n}\n\ninterface SVGPathSegMovetoRel extends SVGPathSeg {\n    y: number;\n    x: number;\n}\ndeclare var SVGPathSegMovetoRel: {\n    prototype: SVGPathSegMovetoRel;\n    new(): SVGPathSegMovetoRel;\n}\n\ninterface SVGLineElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests {\n    y1: SVGAnimatedLength;\n    x2: SVGAnimatedLength;\n    x1: SVGAnimatedLength;\n    y2: SVGAnimatedLength;\n}\ndeclare var SVGLineElement: {\n    prototype: SVGLineElement;\n    new(): SVGLineElement;\n}\n\ninterface HTMLParagraphElement extends HTMLElement, DOML2DeprecatedAlignmentStyle_HTMLParagraphElement, MSHTMLParagraphElementExtensions {\n}\ndeclare var HTMLParagraphElement: {\n    prototype: HTMLParagraphElement;\n    new(): HTMLParagraphElement;\n}\n\ninterface MSHTMLTextAreaElementExtensions {\n    status: any;\n    createTextRange(): TextRange;\n}\n\ninterface ErrorFunction {\n    (eventOrMessage: any, source: string, fileno: number): any;\n}\n\ninterface HTMLAreasCollection extends HTMLCollection {\n    remove(index?: number): void;\n    add(element: HTMLElement, before?: any): void;\n}\ndeclare var HTMLAreasCollection: {\n    prototype: HTMLAreasCollection;\n    new(): HTMLAreasCollection;\n}\n\ninterface SVGDescElement extends SVGElement, SVGStylable, SVGLangSpace {\n}\ndeclare var SVGDescElement: {\n    prototype: SVGDescElement;\n    new(): SVGDescElement;\n}\n\ninterface Node extends EventTarget {\n    nodeType: number;\n    previousSibling: Node;\n    localName: string;\n    namespaceURI: string;\n    textContent: string;\n    parentNode: Node;\n    nextSibling: Node;\n    nodeValue: string;\n    lastChild: Node;\n    childNodes: NodeList;\n    nodeName: string;\n    ownerDocument: Document;\n    attributes: Attr[];\n    firstChild: Node;\n    prefix: string;\n    removeChild(oldChild: Node): Node;\n    appendChild(newChild: Node): Node;\n    isSupported(feature: string, version: string): bool;\n    isEqualNode(arg: Node): bool;\n    lookupPrefix(namespaceURI: string): string;\n    isDefaultNamespace(namespaceURI: string): bool;\n    compareDocumentPosition(other: Node): number;\n    normalize(): void;\n    isSameNode(other: Node): bool;\n    hasAttributes(): bool;\n    lookupNamespaceURI(prefix: string): string;\n    cloneNode(deep?: bool): Node;\n    hasChildNodes(): bool;\n    replaceChild(newChild: Node, oldChild: Node): Node;\n    insertBefore(newChild: Node, refChild?: Node): Node;\n    ENTITY_REFERENCE_NODE: number;\n    ATTRIBUTE_NODE: number;\n    DOCUMENT_FRAGMENT_NODE: number;\n    TEXT_NODE: number;\n    ELEMENT_NODE: number;\n    COMMENT_NODE: number;\n    DOCUMENT_POSITION_DISCONNECTED: number;\n    DOCUMENT_POSITION_CONTAINED_BY: number;\n    DOCUMENT_POSITION_CONTAINS: number;\n    DOCUMENT_TYPE_NODE: number;\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\n    DOCUMENT_NODE: number;\n    ENTITY_NODE: number;\n    PROCESSING_INSTRUCTION_NODE: number;\n    CDATA_SECTION_NODE: number;\n    NOTATION_NODE: number;\n    DOCUMENT_POSITION_FOLLOWING: number;\n    DOCUMENT_POSITION_PRECEDING: number;\n}\ndeclare var Node: {\n    prototype: Node;\n    new(): Node;\n    ENTITY_REFERENCE_NODE: number;\n    ATTRIBUTE_NODE: number;\n    DOCUMENT_FRAGMENT_NODE: number;\n    TEXT_NODE: number;\n    ELEMENT_NODE: number;\n    COMMENT_NODE: number;\n    DOCUMENT_POSITION_DISCONNECTED: number;\n    DOCUMENT_POSITION_CONTAINED_BY: number;\n    DOCUMENT_POSITION_CONTAINS: number;\n    DOCUMENT_TYPE_NODE: number;\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\n    DOCUMENT_NODE: number;\n    ENTITY_NODE: number;\n    PROCESSING_INSTRUCTION_NODE: number;\n    CDATA_SECTION_NODE: number;\n    NOTATION_NODE: number;\n    DOCUMENT_POSITION_FOLLOWING: number;\n    DOCUMENT_POSITION_PRECEDING: number;\n}\n\ninterface MSHTMLLegendElementExtensions {\n}\n\ninterface MSCSSStyleDeclarationExtensions {\n    getAttribute(attributeName: string, flags?: number): any;\n    setAttribute(attributeName: string, AttributeValue: any, flags?: number): void;\n    removeAttribute(attributeName: string, flags?: number): bool;\n}\n\ninterface SVGPathSegCurvetoQuadraticSmoothRel extends SVGPathSeg {\n    y: number;\n    x: number;\n}\ndeclare var SVGPathSegCurvetoQuadraticSmoothRel: {\n    prototype: SVGPathSegCurvetoQuadraticSmoothRel;\n    new(): SVGPathSegCurvetoQuadraticSmoothRel;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLTableRowElement {\n    align: string;\n}\n\ninterface DOML2DeprecatedBorderStyle_HTMLObjectElement {\n    border: string;\n}\n\ninterface MSHTMLSpanElementExtensions {\n}\n\ninterface MSHTMLObjectElementExtensions {\n    object: Object;\n    alt: string;\n    classid: string;\n    altHtml: string;\n    BaseHref: string;\n}\n\ninterface DOML2DeprecatedListSpaceReduction {\n    compact: bool;\n}\n\ninterface CSS3Properties {\n    textAlignLast: string;\n    textUnderlinePosition: string;\n    wordWrap: string;\n    borderTopLeftRadius: string;\n    backgroundClip: string;\n    msTransformOrigin: string;\n    opacity: string;\n    overflowY: string;\n    boxShadow: string;\n    backgroundSize: string;\n    wordBreak: string;\n    boxSizing: string;\n    rubyOverhang: string;\n    rubyAlign: string;\n    textJustify: string;\n    borderRadius: string;\n    overflowX: string;\n    borderTopRightRadius: string;\n    msTransform: string;\n    borderBottomLeftRadius: string;\n    rubyPosition: string;\n    borderBottomRightRadius: string;\n    backgroundOrigin: string;\n    textOverflow: string;\n}\n\ninterface MSScriptHost {\n}\ndeclare var MSScriptHost: {\n    prototype: MSScriptHost;\n    new(): MSScriptHost;\n}\n\ninterface SVGClipPathElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests {\n    clipPathUnits: SVGAnimatedEnumeration;\n}\ndeclare var SVGClipPathElement: {\n    prototype: SVGClipPathElement;\n    new(): SVGClipPathElement;\n}\n\ninterface MouseEvent extends UIEvent, MSMouseEventExtensions {\n    pageX: number;\n    offsetY: number;\n    x: number;\n    y: number;\n    altKey: bool;\n    metaKey: bool;\n    ctrlKey: bool;\n    offsetX: number;\n    screenX: number;\n    clientY: number;\n    shiftKey: bool;\n    screenY: number;\n    relatedTarget: EventTarget;\n    button: number;\n    pageY: number;\n    buttons: number;\n    clientX: number;\n    initMouseEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: AbstractView, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget): void;\n    getModifierState(keyArg: string): bool;\n}\ndeclare var MouseEvent: {\n    prototype: MouseEvent;\n    new(): MouseEvent;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLTableElement {\n    align: string;\n}\n\ninterface RangeException {\n    code: number;\n    message: string;\n    toString(): string;\n    INVALID_NODE_TYPE_ERR: number;\n    BAD_BOUNDARYPOINTS_ERR: number;\n}\ndeclare var RangeException: {\n    prototype: RangeException;\n    new(): RangeException;\n    INVALID_NODE_TYPE_ERR: number;\n    BAD_BOUNDARYPOINTS_ERR: number;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLHRElement {\n    align: string;\n}\n\ninterface SVGTextPositioningElement extends SVGTextContentElement {\n    y: SVGAnimatedLengthList;\n    rotate: SVGAnimatedNumberList;\n    dy: SVGAnimatedLengthList;\n    x: SVGAnimatedLengthList;\n    dx: SVGAnimatedLengthList;\n}\ndeclare var SVGTextPositioningElement: {\n    prototype: SVGTextPositioningElement;\n    new(): SVGTextPositioningElement;\n}\n\ninterface HTMLAppletElement extends HTMLElement, DOML2DeprecatedWidthStyle_HTMLAppletElement, DOML2DeprecatedMarginStyle_HTMLObjectElement, MSHTMLAppletElementExtensions, MSDataBindingExtensions, MSDataBindingRecordSetExtensions, DOML2DeprecatedAlignmentStyle_HTMLObjectElement {\n    object: string;\n    archive: string;\n    codeBase: string;\n    alt: string;\n    name: string;\n    height: string;\n    code: string;\n}\ndeclare var HTMLAppletElement: {\n    prototype: HTMLAppletElement;\n    new(): HTMLAppletElement;\n}\n\ninterface MSHTMLFieldSetElementExtensions extends DOML2DeprecatedAlignmentStyle_HTMLFieldSetElement {\n}\n\ninterface DocumentEvent {\n    createEvent(eventInterface: string): Event;\n}\n\ninterface MSHTMLUnknownElementExtensions {\n}\n\ninterface TextMetrics {\n    width: number;\n}\ndeclare var TextMetrics: {\n    prototype: TextMetrics;\n    new(): TextMetrics;\n}\n\ninterface DOML2DeprecatedWordWrapSuppression_HTMLBodyElement {\n    noWrap: bool;\n}\n\ninterface HTMLOListElement extends HTMLElement, DOML2DeprecatedListNumberingAndBulletStyle, DOML2DeprecatedListSpaceReduction, MSHTMLOListElementExtensions {\n    start: number;\n}\ndeclare var HTMLOListElement: {\n    prototype: HTMLOListElement;\n    new(): HTMLOListElement;\n}\n\ninterface MSHTMLTableCaptionElementExtensions {\n    vAlign: string;\n}\n\ninterface SVGAnimatedString {\n    animVal: string;\n    baseVal: string;\n}\ndeclare var SVGAnimatedString: {\n    prototype: SVGAnimatedString;\n    new(): SVGAnimatedString;\n}\n\ninterface SVGPathSegLinetoVerticalRel extends SVGPathSeg {\n    y: number;\n}\ndeclare var SVGPathSegLinetoVerticalRel: {\n    prototype: SVGPathSegLinetoVerticalRel;\n    new(): SVGPathSegLinetoVerticalRel;\n}\n\ninterface CDATASection extends Text {\n}\ndeclare var CDATASection: {\n    prototype: CDATASection;\n    new(): CDATASection;\n}\n\ninterface StyleMedia {\n    type: string;\n    matchMedium(mediaquery: string): bool;\n}\ndeclare var StyleMedia: {\n    prototype: StyleMedia;\n    new(): StyleMedia;\n}\n\ninterface TextRange {\n    boundingLeft: number;\n    htmlText: string;\n    offsetLeft: number;\n    boundingWidth: number;\n    boundingHeight: number;\n    boundingTop: number;\n    text: string;\n    offsetTop: number;\n    moveToPoint(x: number, y: number): void;\n    queryCommandValue(cmdID: string): any;\n    getBookmark(): string;\n    move(Unit: string, Count?: number): number;\n    queryCommandIndeterm(cmdID: string): bool;\n    scrollIntoView(fStart?: bool): void;\n    findText(string: string, count?: number, flags?: number): bool;\n    execCommand(cmdID: string, showUI?: bool, value?: any): bool;\n    getBoundingClientRect(): ClientRect;\n    moveToBookmark(Bookmark: string): bool;\n    isEqual(range: TextRange): bool;\n    duplicate(): TextRange;\n    collapse(Start?: bool): void;\n    queryCommandText(cmdID: string): string;\n    select(): void;\n    pasteHTML(html: string): void;\n    inRange(range: TextRange): bool;\n    moveEnd(Unit: string, Count?: number): number;\n    getClientRects(): ClientRectList;\n    moveStart(Unit: string, Count?: number): number;\n    parentElement(): Element;\n    queryCommandState(cmdID: string): bool;\n    compareEndPoints(how: string, sourceRange: TextRange): number;\n    execCommandShowHelp(cmdID: string): bool;\n    moveToElementText(element: Element): void;\n    expand(Unit: string): bool;\n    queryCommandSupported(cmdID: string): bool;\n    setEndPoint(how: string, SourceRange: TextRange): void;\n    queryCommandEnabled(cmdID: string): bool;\n}\ndeclare var TextRange: {\n    prototype: TextRange;\n    new(): TextRange;\n}\n\ninterface HTMLSelectElement extends HTMLElement, MSHTMLCollectionExtensions, MSDataBindingExtensions, MSHTMLSelectElementExtensions {\n    options: HTMLSelectElement;\n    value: string;\n    form: HTMLFormElement;\n    name: string;\n    size: number;\n    length: number;\n    selectedIndex: number;\n    multiple: bool;\n    type: string;\n    remove(index?: number): void;\n    add(element: HTMLElement, before?: any): void;\n    item(name?: any, index?: any): any;\n    (name: any, index: any): any;\n    namedItem(name: string): any;\n    [name: string]: any;\n    (name: string): any;\n}\ndeclare var HTMLSelectElement: {\n    prototype: HTMLSelectElement;\n    new(): HTMLSelectElement;\n}\n\ninterface CSSStyleSheet extends StyleSheet, MSCSSStyleSheetExtensions {\n    ownerRule: CSSRule;\n    cssRules: CSSRuleList;\n    insertRule(rule: string, index?: number): number;\n    deleteRule(index?: number): void;\n}\ndeclare var CSSStyleSheet: {\n    prototype: CSSStyleSheet;\n    new(): CSSStyleSheet;\n}\n\ninterface HTMLBlockElement extends HTMLElement, DOML2DeprecatedTextFlowControl_HTMLBlockElement, DOML2DeprecatedWidthStyle_HTMLBlockElement {\n    cite: string;\n}\ndeclare var HTMLBlockElement: {\n    prototype: HTMLBlockElement;\n    new(): HTMLBlockElement;\n}\n\ninterface SVGTests {\n    requiredFeatures: SVGStringList;\n    requiredExtensions: SVGStringList;\n    systemLanguage: SVGStringList;\n    hasExtension(extension: string): bool;\n}\n\ninterface MSSelection {\n    type: string;\n    typeDetail: string;\n    createRange(): TextRange;\n    clear(): void;\n    createRangeCollection(): TextRangeCollection;\n    empty(): void;\n}\ndeclare var MSSelection: {\n    prototype: MSSelection;\n    new(): MSSelection;\n}\n\ninterface MSHTMLDListElementExtensions {\n}\n\ninterface HTMLMetaElement extends HTMLElement, MSHTMLMetaElementExtensions {\n    httpEquiv: string;\n    name: string;\n    content: string;\n    scheme: string;\n}\ndeclare var HTMLMetaElement: {\n    prototype: HTMLMetaElement;\n    new(): HTMLMetaElement;\n}\n\ninterface Selection {\n    isCollapsed: bool;\n    anchorNode: Node;\n    focusNode: Node;\n    anchorOffset: number;\n    focusOffset: number;\n    rangeCount: number;\n    addRange(range: Range): void;\n    collapseToEnd(): void;\n    toString(): string;\n    selectAllChildren(parentNode: Node): void;\n    getRangeAt(index: number): Range;\n    collapse(parentNode: Node, offset: number): void;\n    removeAllRanges(): void;\n    collapseToStart(): void;\n    deleteFromDocument(): void;\n    removeRange(range: Range): void;\n}\ndeclare var Selection: {\n    prototype: Selection;\n    new(): Selection;\n}\n\ninterface SVGAnimatedAngle {\n    animVal: SVGAngle;\n    baseVal: SVGAngle;\n}\ndeclare var SVGAnimatedAngle: {\n    prototype: SVGAnimatedAngle;\n    new(): SVGAnimatedAngle;\n}\n\ninterface SVGPatternElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGTests, SVGFitToViewBox, SVGURIReference {\n    patternUnits: SVGAnimatedEnumeration;\n    y: SVGAnimatedLength;\n    width: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    patternContentUnits: SVGAnimatedEnumeration;\n    patternTransform: SVGAnimatedTransformList;\n    height: SVGAnimatedLength;\n}\ndeclare var SVGPatternElement: {\n    prototype: SVGPatternElement;\n    new(): SVGPatternElement;\n}\n\ninterface SVGScriptElement extends SVGElement, SVGURIReference {\n    type: string;\n}\ndeclare var SVGScriptElement: {\n    prototype: SVGScriptElement;\n    new(): SVGScriptElement;\n}\n\ninterface HTMLDDElement extends HTMLElement, DOML2DeprecatedWordWrapSuppression_HTMLDDElement {\n}\ndeclare var HTMLDDElement: {\n    prototype: HTMLDDElement;\n    new(): HTMLDDElement;\n}\n\ninterface NodeIterator {\n    whatToShow: number;\n    filter: NodeFilterCallback;\n    root: Node;\n    expandEntityReferences: bool;\n    nextNode(): Node;\n    detach(): void;\n    previousNode(): Node;\n}\ndeclare var NodeIterator: {\n    prototype: NodeIterator;\n    new(): NodeIterator;\n}\n\ninterface CSSStyleRule extends CSSRule, MSCSSStyleRuleExtensions {\n    selectorText: string;\n    style: MSStyleCSSProperties;\n}\ndeclare var CSSStyleRule: {\n    prototype: CSSStyleRule;\n    new(): CSSStyleRule;\n}\n\ninterface MSDataBindingRecordSetReadonlyExtensions {\n    recordset: Object;\n    namedRecordset(dataMember: string, hierarchy?: any): Object;\n}\n\ninterface HTMLLinkElement extends HTMLElement, MSLinkStyleExtensions, LinkStyle {\n    rel: string;\n    target: string;\n    href: string;\n    media: string;\n    rev: string;\n    type: string;\n    charset: string;\n    hreflang: string;\n}\ndeclare var HTMLLinkElement: {\n    prototype: HTMLLinkElement;\n    new(): HTMLLinkElement;\n}\n\ninterface SVGViewElement extends SVGElement, SVGZoomAndPan, SVGFitToViewBox {\n    viewTarget: SVGStringList;\n}\ndeclare var SVGViewElement: {\n    prototype: SVGViewElement;\n    new(): SVGViewElement;\n}\n\ninterface MSHTMLAppletElementExtensions extends DOML2DeprecatedBorderStyle_HTMLObjectElement {\n    codeType: string;\n    standby: string;\n    classid: string;\n    useMap: string;\n    form: HTMLFormElement;\n    data: string;\n    contentDocument: Document;\n    altHtml: string;\n    declare: bool;\n    type: string;\n    BaseHref: string;\n}\n\ninterface SVGLocatable {\n    farthestViewportElement: SVGElement;\n    nearestViewportElement: SVGElement;\n    getBBox(): SVGRect;\n    getTransformToElement(element: SVGElement): SVGMatrix;\n    getCTM(): SVGMatrix;\n    getScreenCTM(): SVGMatrix;\n}\n\ninterface HTMLFontElement extends HTMLElement, DOML2DeprecatedColorProperty, MSHTMLFontElementExtensions, DOML2DeprecatedSizeProperty {\n    face: string;\n}\ndeclare var HTMLFontElement: {\n    prototype: HTMLFontElement;\n    new(): HTMLFontElement;\n}\n\ninterface MSHTMLTableElementExtensions {\n    cells: HTMLCollection;\n    height: any;\n    cols: number;\n    moveRow(indexFrom?: number, indexTo?: number): Object;\n}\n\ninterface SVGTitleElement extends SVGElement, SVGStylable, SVGLangSpace {\n}\ndeclare var SVGTitleElement: {\n    prototype: SVGTitleElement;\n    new(): SVGTitleElement;\n}\n\ninterface ControlRangeCollection {\n    length: number;\n    queryCommandValue(cmdID: string): any;\n    remove(index: number): void;\n    add(item: Element): void;\n    queryCommandIndeterm(cmdID: string): bool;\n    scrollIntoView(varargStart?: any): void;\n    item(index: number): Element;\n    [index: number]: Element;\n    execCommand(cmdID: string, showUI?: bool, value?: any): bool;\n    addElement(item: Element): void;\n    queryCommandState(cmdID: string): bool;\n    queryCommandSupported(cmdID: string): bool;\n    queryCommandEnabled(cmdID: string): bool;\n    queryCommandText(cmdID: string): string;\n    select(): void;\n}\ndeclare var ControlRangeCollection: {\n    prototype: ControlRangeCollection;\n    new(): ControlRangeCollection;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLImageElement {\n    align: string;\n}\n\ninterface MSHTMLFrameElementExtensions {\n    width: any;\n    contentWindow: Window;\n    onload: (ev: Event) => any;\n    frameBorder: string;\n    height: any;\n    border: string;\n    frameSpacing: any;\n}\n\ninterface MSNamespaceInfo extends MSEventAttachmentTarget {\n    urn: string;\n    onreadystatechange: (ev: Event) => any;\n    name: string;\n    readyState: string;\n    doImport(implementationUrl: string): void;\n}\ndeclare var MSNamespaceInfo: {\n    prototype: MSNamespaceInfo;\n    new(): MSNamespaceInfo;\n}\n\ninterface WindowSessionStorage {\n    sessionStorage: Storage;\n}\n\ninterface SVGAnimatedTransformList {\n    animVal: SVGTransformList;\n    baseVal: SVGTransformList;\n}\ndeclare var SVGAnimatedTransformList: {\n    prototype: SVGAnimatedTransformList;\n    new(): SVGAnimatedTransformList;\n}\n\ninterface HTMLTableCaptionElement extends HTMLElement, MSHTMLTableCaptionElementExtensions, DOML2DeprecatedAlignmentStyle_HTMLTableCaptionElement {\n}\ndeclare var HTMLTableCaptionElement: {\n    prototype: HTMLTableCaptionElement;\n    new(): HTMLTableCaptionElement;\n}\n\ninterface HTMLOptionElement extends HTMLElement, MSDataBindingExtensions {\n    index: number;\n    defaultSelected: bool;\n    value: string;\n    text: string;\n    form: HTMLFormElement;\n    label: string;\n    selected: bool;\n}\ndeclare var HTMLOptionElement: {\n    prototype: HTMLOptionElement;\n    new(): HTMLOptionElement;\n}\n\ninterface HTMLMapElement extends HTMLElement {\n    name: string;\n    areas: HTMLAreasCollection;\n}\ndeclare var HTMLMapElement: {\n    prototype: HTMLMapElement;\n    new(): HTMLMapElement;\n}\n\ninterface HTMLMenuElement extends HTMLElement, DOML2DeprecatedListSpaceReduction, MSHTMLMenuElementExtensions {\n    type: string;\n}\ndeclare var HTMLMenuElement: {\n    prototype: HTMLMenuElement;\n    new(): HTMLMenuElement;\n}\n\ninterface MouseWheelEvent extends MouseEvent {\n    wheelDelta: number;\n    initMouseWheelEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: AbstractView, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, wheelDeltaArg: number): void;\n}\ndeclare var MouseWheelEvent: {\n    prototype: MouseWheelEvent;\n    new(): MouseWheelEvent;\n}\n\ninterface SVGFitToViewBox {\n    viewBox: SVGAnimatedRect;\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\n}\n\ninterface MSHTMLAnchorElementExtensions {\n    nameProp: string;\n    protocolLong: string;\n    urn: string;\n    mimeType: string;\n    Methods: string;\n}\n\ninterface SVGPointList {\n    numberOfItems: number;\n    replaceItem(newItem: SVGPoint, index: number): SVGPoint;\n    getItem(index: number): SVGPoint;\n    clear(): void;\n    appendItem(newItem: SVGPoint): SVGPoint;\n    initialize(newItem: SVGPoint): SVGPoint;\n    removeItem(index: number): SVGPoint;\n    insertItemBefore(newItem: SVGPoint, index: number): SVGPoint;\n}\ndeclare var SVGPointList: {\n    prototype: SVGPointList;\n    new(): SVGPointList;\n}\n\ninterface MSElementCSSInlineStyleExtensions {\n    doScroll(component?: any): void;\n    componentFromPoint(x: number, y: number): string;\n}\n\ninterface SVGAnimatedLengthList {\n    animVal: SVGLengthList;\n    baseVal: SVGLengthList;\n}\ndeclare var SVGAnimatedLengthList: {\n    prototype: SVGAnimatedLengthList;\n    new(): SVGAnimatedLengthList;\n}\n\ninterface MSHTMLTableDataCellElementExtensions {\n}\n\ninterface Window extends ViewCSS, MSEventAttachmentTarget, MSWindowExtensions, WindowPerformance, ScreenView, EventTarget, WindowLocalStorage, WindowSessionStorage, WindowTimers {\n    ondragend: (ev: DragEvent) => any;\n    onkeydown: (ev: KeyboardEvent) => any;\n    ondragover: (ev: DragEvent) => any;\n    onkeyup: (ev: KeyboardEvent) => any;\n    onreset: (ev: Event) => any;\n    onmouseup: (ev: MouseEvent) => any;\n    ondragstart: (ev: DragEvent) => any;\n    ondrag: (ev: DragEvent) => any;\n    onmouseover: (ev: MouseEvent) => any;\n    ondragleave: (ev: DragEvent) => any;\n    history: History;\n    name: string;\n    onafterprint: (ev: Event) => any;\n    onpause: (ev: Event) => any;\n    onbeforeprint: (ev: Event) => any;\n    top: Window;\n    onmousedown: (ev: MouseEvent) => any;\n    onseeked: (ev: Event) => any;\n    opener: Window;\n    onclick: (ev: MouseEvent) => any;\n    onwaiting: (ev: Event) => any;\n    ononline: (ev: Event) => any;\n    ondurationchange: (ev: Event) => any;\n    frames: Window;\n    onblur: (ev: FocusEvent) => any;\n    onemptied: (ev: Event) => any;\n    onseeking: (ev: Event) => any;\n    oncanplay: (ev: Event) => any;\n    onstalled: (ev: Event) => any;\n    onmousemove: (ev: MouseEvent) => any;\n    onoffline: (ev: Event) => any;\n    length: number;\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\n    onratechange: (ev: Event) => any;\n    onstorage: (ev: StorageEvent) => any;\n    onloadstart: (ev: Event) => any;\n    ondragenter: (ev: DragEvent) => any;\n    onsubmit: (ev: Event) => any;\n    self: Window;\n    onprogress: (ev: any) => any;\n    ondblclick: (ev: MouseEvent) => any;\n    oncontextmenu: (ev: MouseEvent) => any;\n    onchange: (ev: Event) => any;\n    onloadedmetadata: (ev: Event) => any;\n    onplay: (ev: Event) => any;\n    onerror: ErrorFunction;\n    onplaying: (ev: Event) => any;\n    parent: Window;\n    location: Location;\n    oncanplaythrough: (ev: Event) => any;\n    onabort: (ev: UIEvent) => any;\n    onreadystatechange: (ev: Event) => any;\n    onkeypress: (ev: KeyboardEvent) => any;\n    frameElement: Element;\n    onloadeddata: (ev: Event) => any;\n    onsuspend: (ev: Event) => any;\n    window: Window;\n    onfocus: (ev: FocusEvent) => any;\n    onmessage: (ev: MessageEvent) => any;\n    ontimeupdate: (ev: Event) => any;\n    onresize: (ev: UIEvent) => any;\n    navigator: Navigator;\n    onselect: (ev: UIEvent) => any;\n    ondrop: (ev: DragEvent) => any;\n    onmouseout: (ev: MouseEvent) => any;\n    onended: (ev: Event) => any;\n    onhashchange: (ev: Event) => any;\n    onunload: (ev: Event) => any;\n    onscroll: (ev: UIEvent) => any;\n    onmousewheel: (ev: MouseWheelEvent) => any;\n    onload: (ev: Event) => any;\n    onvolumechange: (ev: Event) => any;\n    oninput: (ev: Event) => any;\n    alert(message?: string): void;\n    focus(): void;\n    print(): void;\n    prompt(message?: string, defaul?: string): string;\n    toString(): string;\n    open(url?: string, target?: string, features?: string, replace?: bool): Window;\n    close(): void;\n    confirm(message?: string): bool;\n    postMessage(message: any, targetOrigin: string, ports?: any): void;\n    showModalDialog(url?: string, argument?: any, options?: any): any;\n    blur(): void;\n    getSelection(): Selection;\n}\ndeclare var Window: {\n    prototype: Window;\n    new(): Window;\n}\n\ninterface SVGAnimatedPreserveAspectRatio {\n    animVal: SVGPreserveAspectRatio;\n    baseVal: SVGPreserveAspectRatio;\n}\ndeclare var SVGAnimatedPreserveAspectRatio: {\n    prototype: SVGAnimatedPreserveAspectRatio;\n    new(): SVGAnimatedPreserveAspectRatio;\n}\n\ninterface MSSiteModeEvent extends Event {\n    buttonID: number;\n    actionURL: string;\n}\ndeclare var MSSiteModeEvent: {\n    prototype: MSSiteModeEvent;\n    new(): MSSiteModeEvent;\n}\n\ninterface MSCSSStyleRuleExtensions {\n    readOnly: bool;\n}\n\ninterface StyleSheetPageList {\n    length: number;\n    item(index: number): StyleSheetPage;\n    [index: number]: StyleSheetPage;\n}\ndeclare var StyleSheetPageList: {\n    prototype: StyleSheetPageList;\n    new(): StyleSheetPageList;\n}\n\ninterface HTMLCollection extends MSHTMLCollectionExtensions {\n    length: number;\n    item(nameOrIndex?: any, optionalIndex?: any): Element;\n    (nameOrIndex: any, optionalIndex: any): Element;\n    namedItem(name: string): Element;\n    [index: number]: Element;\n    [name: string]: Element;\n    (name: string): Element;\n}\ndeclare var HTMLCollection: {\n    prototype: HTMLCollection;\n    new(): HTMLCollection;\n}\n\ninterface MSCSSProperties extends CSSStyleDeclaration, MSCSSStyleDeclarationExtensions {\n    scrollbarShadowColor: string;\n    scrollbarHighlightColor: string;\n    layoutGridChar: string;\n    layoutGridType: string;\n    textAutospace: string;\n    textKashidaSpace: string;\n    writingMode: string;\n    scrollbarFaceColor: string;\n    backgroundPositionY: string;\n    lineBreak: string;\n    imeMode: string;\n    msBlockProgression: string;\n    layoutGridLine: string;\n    scrollbarBaseColor: string;\n    layoutGrid: string;\n    layoutFlow: string;\n    textKashida: string;\n    filter: string;\n    zoom: string;\n    scrollbarArrowColor: string;\n    behavior: string;\n    backgroundPositionX: string;\n    accelerator: string;\n    layoutGridMode: string;\n    textJustifyTrim: string;\n    scrollbar3dLightColor: string;\n    msInterpolationMode: string;\n    scrollbarTrackColor: string;\n    scrollbarDarkShadowColor: string;\n    styleFloat: string;\n}\ndeclare var MSCSSProperties: {\n    prototype: MSCSSProperties;\n    new(): MSCSSProperties;\n}\n\ninterface HTMLImageElement extends HTMLElement, DOML2DeprecatedMarginStyle, DOML2DeprecatedBorderStyle, DOML2DeprecatedAlignmentStyle_HTMLImageElement, MSImageResourceExtensions, MSHTMLImageElementExtensions, MSDataBindingExtensions, MSResourceMetadata {\n   width: number;\n    naturalHeight: number;\n    alt: string;\n    src: string;\n    useMap: string;\n    naturalWidth: number;\n    name: string;\n    height: number;\n    longDesc: string;\n    isMap: bool;\n    complete: bool;\n}\ndeclare var HTMLImageElement: {\n    prototype: HTMLImageElement;\n    new(): HTMLImageElement;\n}\n\ninterface HTMLAreaElement extends HTMLElement, MSHTMLAreaElementExtensions {\n    protocol: string;\n    search: string;\n    alt: string;\n    coords: string;\n    hostname: string;\n    port: string;\n    pathname: string;\n    host: string;\n    hash: string;\n    target: string;\n    href: string;\n    noHref: bool;\n    shape: string;\n    toString(): string;\n}\ndeclare var HTMLAreaElement: {\n    prototype: HTMLAreaElement;\n    new(): HTMLAreaElement;\n}\n\ninterface EventTarget {\n    removeEventListener(type: string, listener: EventListener, useCapture?: bool): void;\n    addEventListener(type: string, listener: EventListener, useCapture?: bool): void;\n    dispatchEvent(evt: Event): bool;\n}\n\ninterface SVGAngle {\n    valueAsString: string;\n    valueInSpecifiedUnits: number;\n    value: number;\n    unitType: number;\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\n    convertToSpecifiedUnits(unitType: number): void;\n    SVG_ANGLETYPE_RAD: number;\n    SVG_ANGLETYPE_UNKNOWN: number;\n    SVG_ANGLETYPE_UNSPECIFIED: number;\n    SVG_ANGLETYPE_DEG: number;\n    SVG_ANGLETYPE_GRAD: number;\n}\ndeclare var SVGAngle: {\n    prototype: SVGAngle;\n    new(): SVGAngle;\n    SVG_ANGLETYPE_RAD: number;\n    SVG_ANGLETYPE_UNKNOWN: number;\n    SVG_ANGLETYPE_UNSPECIFIED: number;\n    SVG_ANGLETYPE_DEG: number;\n    SVG_ANGLETYPE_GRAD: number;\n}\n\ninterface HTMLButtonElement extends HTMLElement, MSHTMLButtonElementExtensions, MSDataBindingExtensions {\n    value: string;\n    form: HTMLFormElement;\n    name: string;\n    type: string;\n}\ndeclare var HTMLButtonElement: {\n    prototype: HTMLButtonElement;\n    new(): HTMLButtonElement;\n}\n\ninterface MSHTMLLabelElementExtensions {\n}\n\ninterface HTMLSourceElement extends HTMLElement {\n    src: string;\n    media: string;\n    type: string;\n}\ndeclare var HTMLSourceElement: {\n    prototype: HTMLSourceElement;\n    new(): HTMLSourceElement;\n}\n\ninterface CanvasGradient {\n    addColorStop(offset: number, color: string): void;\n}\ndeclare var CanvasGradient: {\n    prototype: CanvasGradient;\n    new(): CanvasGradient;\n}\n\ninterface KeyboardEvent extends UIEvent, KeyboardEventExtensions {\n    location: number;\n    shiftKey: bool;\n    locale: string;\n    key: string;\n    altKey: bool;\n    metaKey: bool;\n    char: string;\n    ctrlKey: bool;\n    repeat: bool;\n    getModifierState(keyArg: string): bool;\n    initKeyboardEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: AbstractView, keyArg: string, locationArg: number, modifiersListArg: string, repeat: bool, locale: string): void;\n    DOM_KEY_LOCATION_RIGHT: number;\n    DOM_KEY_LOCATION_STANDARD: number;\n    DOM_KEY_LOCATION_LEFT: number;\n    DOM_KEY_LOCATION_NUMPAD: number;\n    DOM_KEY_LOCATION_JOYSTICK: number;\n    DOM_KEY_LOCATION_MOBILE: number;\n}\ndeclare var KeyboardEvent: {\n    prototype: KeyboardEvent;\n    new(): KeyboardEvent;\n    DOM_KEY_LOCATION_RIGHT: number;\n    DOM_KEY_LOCATION_STANDARD: number;\n    DOM_KEY_LOCATION_LEFT: number;\n    DOM_KEY_LOCATION_NUMPAD: number;\n    DOM_KEY_LOCATION_JOYSTICK: number;\n    DOM_KEY_LOCATION_MOBILE: number;\n}\n\ninterface Document extends Node, DocumentStyle, DocumentRange, HTMLDocument, NodeSelector, DocumentEvent, DocumentTraversal, DocumentView, SVGDocument {\n    doctype: DocumentType;\n    xmlVersion: string;\n    implementation: DOMImplementation;\n    xmlEncoding: string;\n    xmlStandalone: bool;\n    documentElement: HTMLElement;\n    inputEncoding: string;\n    createElement(tagName: string): HTMLElement;\n    adoptNode(source: Node): Node;\n    createComment(data: string): Comment;\n    createDocumentFragment(): DocumentFragment;\n    getElementsByTagName(tagname: string): NodeList;\n    getElementsByTagNameNS(namespaceURI: string, localName: string): NodeList;\n    createProcessingInstruction(target: string, data: string): ProcessingInstruction;\n    createElementNS(namespaceURI: string, qualifiedName: string): Element;\n    createAttribute(name: string): Attr;\n    createTextNode(data: string): Text;\n    importNode(importedNode: Node, deep: bool): Node;\n    createCDATASection(data: string): CDATASection;\n    createAttributeNS(namespaceURI: string, qualifiedName: string): Attr;\n    getElementById(elementId: string): HTMLElement;\n}\ndeclare var Document: {\n    prototype: Document;\n    new(): Document;\n}\n\ninterface MessageEvent extends Event {\n    source: Window;\n    origin: string;\n    data: any;\n    initMessageEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, dataArg: any, originArg: string, lastEventIdArg: string, sourceArg: Window): void;\n}\ndeclare var MessageEvent: {\n    prototype: MessageEvent;\n    new(): MessageEvent;\n}\n\ninterface SVGElement extends Element, SVGElementEventHandlers {\n    xmlbase: string;\n    viewportElement: SVGElement;\n    id: string;\n    ownerSVGElement: SVGSVGElement;\n}\ndeclare var SVGElement: {\n    prototype: SVGElement;\n    new(): SVGElement;\n}\n\ninterface HTMLScriptElement extends HTMLElement {\n    defer: bool;\n    text: string;\n    src: string;\n    htmlFor: string;\n    charset: string;\n    type: string;\n    event: string;\n}\ndeclare var HTMLScriptElement: {\n    prototype: HTMLScriptElement;\n    new(): HTMLScriptElement;\n}\n\ninterface MSHTMLBodyElementExtensions extends DOML2DeprecatedWordWrapSuppression_HTMLBodyElement {\n    scroll: string;\n    bottomMargin: any;\n    topMargin: any;\n    rightMargin: any;\n    bgProperties: string;\n    leftMargin: any;\n    createTextRange(): TextRange;\n}\n\ninterface HTMLTableRowElement extends HTMLElement, MSBorderColorHighlightStyle_HTMLTableRowElement, HTMLTableAlignment, MSBorderColorStyle_HTMLTableRowElement, DOML2DeprecatedAlignmentStyle_HTMLTableRowElement, DOML2DeprecatedBackgroundColorStyle, MSHTMLTableRowElementExtensions {\n    rowIndex: number;\n    cells: HTMLCollection;\n    sectionRowIndex: number;\n    deleteCell(index?: number): void;\n    insertCell(index?: number): HTMLElement;\n}\ndeclare var HTMLTableRowElement: {\n    prototype: HTMLTableRowElement;\n    new(): HTMLTableRowElement;\n}\n\ninterface MSCommentExtensions {\n    text: string;\n}\n\ninterface DOML2DeprecatedMarginStyle_HTMLMarqueeElement {\n    vspace: number;\n    hspace: number;\n}\n\ninterface MSCSSRuleList {\n    length: number;\n    item(index?: number): CSSStyleRule;\n    [index: number]: CSSStyleRule;\n}\ndeclare var MSCSSRuleList: {\n    prototype: MSCSSRuleList;\n    new(): MSCSSRuleList;\n}\n\ninterface CanvasRenderingContext2D {\n    shadowOffsetX: number;\n    lineWidth: number;\n    miterLimit: number;\n    canvas: HTMLCanvasElement;\n    strokeStyle: any;\n    font: string;\n    globalAlpha: number;\n    globalCompositeOperation: string;\n    shadowOffsetY: number;\n    fillStyle: any;\n    lineCap: string;\n    shadowBlur: number;\n    textAlign: string;\n    textBaseline: string;\n    shadowColor: string;\n    lineJoin: string;\n    restore(): void;\n    setTransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\n    save(): void;\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: bool): void;\n    measureText(text: string): TextMetrics;\n    isPointInPath(x: number, y: number): bool;\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\n    putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX?: number, dirtyY?: number, dirtyWidth?: number, dirtyHeight?: number): void;\n    rotate(angle: number): void;\n    fillText(text: string, x: number, y: number, maxWidth?: number): void;\n    translate(x: number, y: number): void;\n    scale(x: number, y: number): void;\n    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;\n    lineTo(x: number, y: number): void;\n    fill(): void;\n    createPattern(image: HTMLElement, repetition: string): CanvasPattern;\n    closePath(): void;\n    rect(x: number, y: number, w: number, h: number): void;\n    clip(): void;\n    createImageData(imageDataOrSw: any, sh?: number): ImageData;\n    clearRect(x: number, y: number, w: number, h: number): void;\n    moveTo(x: number, y: number): void;\n    getImageData(sx: number, sy: number, sw: number, sh: number): ImageData;\n    fillRect(x: number, y: number, w: number, h: number): void;\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\n    drawImage(image: HTMLElement, offsetX: number, offsetY: number, width?: number, height?: number, canvasOffsetX?: number, canvasOffsetY?: number, canvasImageWidth?: number, canvasImageHeight?: number): void;\n    transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\n    stroke(): void;\n    strokeRect(x: number, y: number, w: number, h: number): void;\n    strokeText(text: string, x: number, y: number, maxWidth?: number): void;\n    beginPath(): void;\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\n    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;\n}\ndeclare var CanvasRenderingContext2D: {\n    prototype: CanvasRenderingContext2D;\n    new(): CanvasRenderingContext2D;\n}\n\ninterface SVGPathSegLinetoHorizontalAbs extends SVGPathSeg {\n    x: number;\n}\ndeclare var SVGPathSegLinetoHorizontalAbs: {\n    prototype: SVGPathSegLinetoHorizontalAbs;\n    new(): SVGPathSegLinetoHorizontalAbs;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLObjectElement {\n    align: string;\n}\n\ninterface DOML2DeprecatedBorderStyle_MSHTMLIFrameElementExtensions {\n    border: string;\n}\n\ninterface MSHTMLElementRangeExtensions {\n    createControlRange(): ControlRangeCollection;\n}\n\ninterface SVGPathSegArcAbs extends SVGPathSeg {\n    y: number;\n    sweepFlag: bool;\n    r2: number;\n    x: number;\n    angle: number;\n    r1: number;\n    largeArcFlag: bool;\n}\ndeclare var SVGPathSegArcAbs: {\n    prototype: SVGPathSegArcAbs;\n    new(): SVGPathSegArcAbs;\n}\n\ninterface MSScreenExtensions {\n    deviceXDPI: number;\n    fontSmoothingEnabled: bool;\n    bufferDepth: number;\n    logicalXDPI: number;\n    systemXDPI: number;\n    logicalYDPI: number;\n    systemYDPI: number;\n    updateInterval: number;\n    deviceYDPI: number;\n}\n\ninterface HTMLHtmlElement extends HTMLElement, HTMLHtmlElementDOML2Deprecated {\n}\ndeclare var HTMLHtmlElement: {\n    prototype: HTMLHtmlElement;\n    new(): HTMLHtmlElement;\n}\n\ninterface MSBorderColorStyle {\n    borderColor: any;\n}\n\ninterface SVGTransformList {\n    numberOfItems: number;\n    getItem(index: number): SVGTransform;\n    consolidate(): SVGTransform;\n    clear(): void;\n    appendItem(newItem: SVGTransform): SVGTransform;\n    initialize(newItem: SVGTransform): SVGTransform;\n    removeItem(index: number): SVGTransform;\n    insertItemBefore(newItem: SVGTransform, index: number): SVGTransform;\n    replaceItem(newItem: SVGTransform, index: number): SVGTransform;\n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;\n}\ndeclare var SVGTransformList: {\n    prototype: SVGTransformList;\n    new(): SVGTransformList;\n}\n\ninterface SVGPathSegClosePath extends SVGPathSeg {\n}\ndeclare var SVGPathSegClosePath: {\n    prototype: SVGPathSegClosePath;\n    new(): SVGPathSegClosePath;\n}\n\ninterface DOML2DeprecatedMarginStyle_MSHTMLIFrameElementExtensions {\n    vspace: number;\n    hspace: number;\n}\n\ninterface HTMLFrameElement extends HTMLElement, GetSVGDocument, MSHTMLFrameElementExtensions, MSDataBindingExtensions, MSBorderColorStyle_HTMLFrameElement {\n    scrolling: string;\n    marginHeight: string;\n    src: string;\n    name: string;\n    marginWidth: string;\n    contentDocument: Document;\n    longDesc: string;\n    noResize: bool;\n}\ndeclare var HTMLFrameElement: {\n    prototype: HTMLFrameElement;\n    new(): HTMLFrameElement;\n}\n\ninterface SVGAnimatedLength {\n    animVal: SVGLength;\n    baseVal: SVGLength;\n}\ndeclare var SVGAnimatedLength: {\n    prototype: SVGAnimatedLength;\n    new(): SVGAnimatedLength;\n}\n\ninterface CSSMediaRule extends CSSRule {\n    media: MediaList;\n    cssRules: CSSRuleList;\n    insertRule(rule: string, index?: number): number;\n    deleteRule(index?: number): void;\n}\ndeclare var CSSMediaRule: {\n    prototype: CSSMediaRule;\n    new(): CSSMediaRule;\n}\n\ninterface HTMLQuoteElement extends HTMLElement, MSHTMLQuoteElementExtensions {\n    cite: string;\n}\ndeclare var HTMLQuoteElement: {\n    prototype: HTMLQuoteElement;\n    new(): HTMLQuoteElement;\n}\n\ninterface SVGDefsElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests {\n}\ndeclare var SVGDefsElement: {\n    prototype: SVGDefsElement;\n    new(): SVGDefsElement;\n}\n\ninterface SVGAnimatedPoints {\n    points: SVGPointList;\n    animatedPoints: SVGPointList;\n}\n\ninterface WindowModal {\n    dialogArguments: any;\n    returnValue: any;\n}\n\ninterface MSHTMLButtonElementExtensions {\n    status: any;\n    createTextRange(): TextRange;\n}\n\ninterface XMLHttpRequest extends EventTarget, MSXMLHttpRequestExtensions {\n    onreadystatechange: (ev: Event) => any;\n    status: number;\n    onload: (ev: Event) => any;\n    readyState: number;\n    responseText: string;\n    responseXML: Document;\n    statusText: string;\n    open(method: string, url: string, async?: bool, user?: string, password?: string): void;\n    send(data?: any): void;\n    abort(): void;\n    getAllResponseHeaders(): string;\n    setRequestHeader(header: string, value: string): void;\n    getResponseHeader(header: string): string;\n    LOADING: number;\n    DONE: number;\n    UNSENT: number;\n    OPENED: number;\n    HEADERS_RECEIVED: number;\n}\ndeclare var XMLHttpRequest: {\n    prototype: XMLHttpRequest;\n    new (): XMLHttpRequest;\n    LOADING: number;\n    DONE: number;\n    UNSENT: number;\n    OPENED: number;\n    HEADERS_RECEIVED: number;\n}\n\ninterface HTMLTableHeaderCellElement extends HTMLTableCellElement, HTMLTableHeaderCellScope {\n}\ndeclare var HTMLTableHeaderCellElement: {\n    prototype: HTMLTableHeaderCellElement;\n    new(): HTMLTableHeaderCellElement;\n}\n\ninterface HTMLDListElement extends HTMLElement, DOML2DeprecatedListSpaceReduction, MSHTMLDListElementExtensions {\n}\ndeclare var HTMLDListElement: {\n    prototype: HTMLDListElement;\n    new(): HTMLDListElement;\n}\n\ninterface MSDataBindingExtensions {\n    dataSrc: string;\n    dataFormatAs: string;\n    dataFld: string;\n}\n\ninterface SVGEllipseElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests {\n    ry: SVGAnimatedLength;\n    cx: SVGAnimatedLength;\n    rx: SVGAnimatedLength;\n    cy: SVGAnimatedLength;\n}\ndeclare var SVGEllipseElement: {\n    prototype: SVGEllipseElement;\n    new(): SVGEllipseElement;\n}\n\ninterface SVGPathSegLinetoHorizontalRel extends SVGPathSeg {\n    x: number;\n}\ndeclare var SVGPathSegLinetoHorizontalRel: {\n    prototype: SVGPathSegLinetoHorizontalRel;\n    new(): SVGPathSegLinetoHorizontalRel;\n}\n\ninterface SVGAElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGURIReference {\n    target: SVGAnimatedString;\n}\ndeclare var SVGAElement: {\n    prototype: SVGAElement;\n    new(): SVGAElement;\n}\n\ninterface MSHTMLMetaElementExtensions {\n    url: string;\n    charset: string;\n}\n\ninterface SVGStylable {\n    className: SVGAnimatedString;\n    style: CSSStyleDeclaration;\n}\n\ninterface MSHTMLTableCellElementExtensions {\n}\n\ninterface HTMLFrameSetElement extends HTMLElement, MSHTMLFrameSetElementExtensions, MSBorderColorStyle_HTMLFrameSetElement {\n    onresize: (ev: UIEvent) => any;\n    ononline: (ev: Event) => any;\n    onafterprint: (ev: Event) => any;\n    onbeforeprint: (ev: Event) => any;\n    onoffline: (ev: Event) => any;\n    rows: string;\n    cols: string;\n    onblur: (ev: FocusEvent) => any;\n    onunload: (ev: Event) => any;\n    onhashchange: (ev: Event) => any;\n    onfocus: (ev: FocusEvent) => any;\n    onmessage: (ev: MessageEvent) => any;\n    onload: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\n    onstorage: (ev: StorageEvent) => any;\n}\ndeclare var HTMLFrameSetElement: {\n    prototype: HTMLFrameSetElement;\n    new(): HTMLFrameSetElement;\n}\n\ninterface SVGTransformable extends SVGLocatable {\n    transform: SVGAnimatedTransformList;\n}\n\ninterface Screen extends MSScreenExtensions {\n    width: number;\n    colorDepth: number;\n    availWidth: number;\n    pixelDepth: number;\n    availHeight: number;\n    height: number;\n}\ndeclare var Screen: {\n    prototype: Screen;\n    new(): Screen;\n}\n\ninterface NavigatorGeolocation {\n    geolocation: Geolocation;\n}\n\ninterface Coordinates {\n    altitudeAccuracy: number;\n    longitude: number;\n    latitude: number;\n    speed: number;\n    heading: number;\n    altitude: number;\n    accuracy: number;\n}\ndeclare var Coordinates: {\n    prototype: Coordinates;\n    new(): Coordinates;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLTableColElement {\n    align: string;\n}\n\ninterface EventListener {\n    (evt: Event): void;\n}\n\ninterface SVGLangSpace {\n    xmllang: string;\n    xmlspace: string;\n}\n\ninterface DataTransfer {\n    effectAllowed: string;\n    dropEffect: string;\n    clearData(format?: string): bool;\n    setData(format: string, data: string): bool;\n    getData(format: string): string;\n}\ndeclare var DataTransfer: {\n    prototype: DataTransfer;\n    new(): DataTransfer;\n}\n\ninterface FocusEvent extends UIEvent {\n    relatedTarget: EventTarget;\n    initFocusEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: AbstractView, detailArg: number, relatedTargetArg: EventTarget): void;\n}\ndeclare var FocusEvent: {\n    prototype: FocusEvent;\n    new(): FocusEvent;\n}\n\ninterface Range {\n    startOffset: number;\n    collapsed: bool;\n    endOffset: number;\n    startContainer: Node;\n    endContainer: Node;\n    commonAncestorContainer: Node;\n    setStart(refNode: Node, offset: number): void;\n    setEndBefore(refNode: Node): void;\n    setStartBefore(refNode: Node): void;\n    selectNode(refNode: Node): void;\n    detach(): void;\n    getBoundingClientRect(): ClientRect;\n    toString(): string;\n    compareBoundaryPoints(how: number, sourceRange: Range): number;\n    insertNode(newNode: Node): void;\n    collapse(toStart: bool): void;\n    selectNodeContents(refNode: Node): void;\n    cloneContents(): DocumentFragment;\n    setEnd(refNode: Node, offset: number): void;\n    cloneRange(): Range;\n    getClientRects(): ClientRectList;\n    surroundContents(newParent: Node): void;\n    deleteContents(): void;\n    setStartAfter(refNode: Node): void;\n    extractContents(): DocumentFragment;\n    setEndAfter(refNode: Node): void;\n    END_TO_END: number;\n    START_TO_START: number;\n    START_TO_END: number;\n    END_TO_START: number;\n}\ndeclare var Range: {\n    prototype: Range;\n    new(): Range;\n    END_TO_END: number;\n    START_TO_START: number;\n    START_TO_END: number;\n    END_TO_START: number;\n}\n\ninterface MSHTMLPreElementExtensions extends DOML2DeprecatedTextFlowControl_HTMLBlockElement {\n    cite: string;\n}\n\ninterface SVGPoint {\n    y: number;\n    x: number;\n    matrixTransform(matrix: SVGMatrix): SVGPoint;\n}\ndeclare var SVGPoint: {\n    prototype: SVGPoint;\n    new(): SVGPoint;\n}\n\ninterface MSPluginsCollection {\n    length: number;\n    refresh(reload?: bool): void;\n}\ndeclare var MSPluginsCollection: {\n    prototype: MSPluginsCollection;\n    new(): MSPluginsCollection;\n}\n\ninterface MSHTMLFontElementExtensions {\n}\n\ninterface SVGAnimatedNumberList {\n    animVal: SVGNumberList;\n    baseVal: SVGNumberList;\n}\ndeclare var SVGAnimatedNumberList: {\n    prototype: SVGAnimatedNumberList;\n    new(): SVGAnimatedNumberList;\n}\n\ninterface SVGSVGElement extends SVGElement, SVGZoomAndPan, SVGLangSpace, SVGLocatable, SVGTests, SVGFitToViewBox, SVGSVGElementEventHandlers, SVGStylable, DocumentEvent, ViewCSS_SVGSVGElement {\n    width: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    contentStyleType: string;\n    screenPixelToMillimeterY: number;\n    height: SVGAnimatedLength;\n    contentScriptType: string;\n    pixelUnitToMillimeterX: number;\n    currentTranslate: SVGPoint;\n    y: SVGAnimatedLength;\n    viewport: SVGRect;\n    currentScale: number;\n    screenPixelToMillimeterX: number;\n    pixelUnitToMillimeterY: number;\n    setCurrentTime(seconds: number): void;\n    createSVGLength(): SVGLength;\n    getIntersectionList(rect: SVGRect, referenceElement: SVGElement): NodeList;\n    unpauseAnimations(): void;\n    createSVGRect(): SVGRect;\n    checkIntersection(element: SVGElement, rect: SVGRect): bool;\n    unsuspendRedrawAll(): void;\n    pauseAnimations(): void;\n    suspendRedraw(maxWaitMilliseconds: number): number;\n    deselectAll(): void;\n    createSVGAngle(): SVGAngle;\n    getEnclosureList(rect: SVGRect, referenceElement: SVGElement): NodeList;\n    createSVGTransform(): SVGTransform;\n    unsuspendRedraw(suspendHandleID: number): void;\n    forceRedraw(): void;\n    getCurrentTime(): number;\n    checkEnclosure(element: SVGElement, rect: SVGRect): bool;\n    createSVGMatrix(): SVGMatrix;\n    createSVGPoint(): SVGPoint;\n    createSVGNumber(): SVGNumber;\n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;\n    getElementById(elementId: string): Element;\n}\ndeclare var SVGSVGElement: {\n    prototype: SVGSVGElement;\n    new(): SVGSVGElement;\n}\n\ninterface HTMLLabelElement extends HTMLElement, MSDataBindingExtensions, MSHTMLLabelElementExtensions {\n    htmlFor: string;\n    form: HTMLFormElement;\n}\ndeclare var HTMLLabelElement: {\n    prototype: HTMLLabelElement;\n    new(): HTMLLabelElement;\n}\n\ninterface MSResourceMetadata {\n    protocol: string;\n    fileSize: string;\n    fileUpdatedDate: string;\n    nameProp: string;\n    fileCreatedDate: string;\n    fileModifiedDate: string;\n    mimeType: string;\n}\n\ninterface MSHTMLQuoteElementExtensions {\n    dateTime: string;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLIFrameElement {\n    align: string;\n}\n\ninterface HTMLLegendElement extends HTMLElement, DOML2DeprecatedAlignmentStyle_HTMLLegendElement, MSDataBindingExtensions, MSHTMLLegendElementExtensions {\n    form: HTMLFormElement;\n}\ndeclare var HTMLLegendElement: {\n    prototype: HTMLLegendElement;\n    new(): HTMLLegendElement;\n}\n\ninterface HTMLDirectoryElement extends HTMLElement, DOML2DeprecatedListSpaceReduction, MSHTMLDirectoryElementExtensions {\n}\ndeclare var HTMLDirectoryElement: {\n    prototype: HTMLDirectoryElement;\n    new(): HTMLDirectoryElement;\n}\n\ninterface NavigatorAbilities {\n}\n\ninterface MSHTMLImageElementExtensions {\n    href: string;\n}\n\ninterface SVGAnimatedInteger {\n    animVal: number;\n    baseVal: number;\n}\ndeclare var SVGAnimatedInteger: {\n    prototype: SVGAnimatedInteger;\n    new(): SVGAnimatedInteger;\n}\n\ninterface SVGTextElement extends SVGTextPositioningElement, SVGTransformable {\n}\ndeclare var SVGTextElement: {\n    prototype: SVGTextElement;\n    new(): SVGTextElement;\n}\n\ninterface SVGTSpanElement extends SVGTextPositioningElement {\n}\ndeclare var SVGTSpanElement: {\n    prototype: SVGTSpanElement;\n    new(): SVGTSpanElement;\n}\n\ninterface HTMLLIElement extends HTMLElement, DOML2DeprecatedListNumberingAndBulletStyle, MSHTMLLIElementExtensions {\n    value: number;\n}\ndeclare var HTMLLIElement: {\n    prototype: HTMLLIElement;\n    new(): HTMLLIElement;\n}\n\ninterface SVGPathSegLinetoVerticalAbs extends SVGPathSeg {\n    y: number;\n}\ndeclare var SVGPathSegLinetoVerticalAbs: {\n    prototype: SVGPathSegLinetoVerticalAbs;\n    new(): SVGPathSegLinetoVerticalAbs;\n}\n\ninterface ViewCSS {\n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\n}\n\ninterface MSAttrExtensions {\n    expando: bool;\n}\n\ninterface MSStorageExtensions {\n    remainingSpace: number;\n}\n\ninterface SVGStyleElement extends SVGElement, SVGLangSpace {\n    media: string;\n    type: string;\n    title: string;\n}\ndeclare var SVGStyleElement: {\n    prototype: SVGStyleElement;\n    new(): SVGStyleElement;\n}\n\ninterface MSCurrentStyleCSSProperties extends MSCSSProperties {\n    blockDirection: string;\n    clipBottom: string;\n    clipLeft: string;\n    clipRight: string;\n    clipTop: string;\n    hasLayout: string;\n}\ndeclare var MSCurrentStyleCSSProperties: {\n    prototype: MSCurrentStyleCSSProperties;\n    new(): MSCurrentStyleCSSProperties;\n}\n\ninterface MSLinkStyleExtensions {\n    styleSheet: StyleSheet;\n}\n\ninterface MSHTMLCollectionExtensions {\n    urns(urn: any): Object;\n    tags(tagName: any): Object;\n}\n\ninterface DOML2DeprecatedWordWrapSuppression_HTMLDivElement {\n    noWrap: bool;\n}\n\ninterface DocumentTraversal {\n    createNodeIterator(root: Node, whatToShow: number, filter: NodeFilterCallback, entityReferenceExpansion: bool): NodeIterator;\n    createTreeWalker(root: Node, whatToShow: number, filter: NodeFilterCallback, entityReferenceExpansion: bool): TreeWalker;\n}\n\ninterface Storage extends MSStorageExtensions {\n    length: number;\n    getItem(key: string): any;\n    [key: string]: any;\n    setItem(key: string, data: string): void;\n    clear(): void;\n    removeItem(key: string): void;\n    key(index: number): string;\n    [index: number]: any;\n}\ndeclare var Storage: {\n    prototype: Storage;\n    new(): Storage;\n}\n\ninterface HTMLTableHeaderCellScope {\n    scope: string;\n}\n\ninterface HTMLIFrameElement extends HTMLElement, GetSVGDocument, MSHTMLIFrameElementExtensions, MSDataBindingExtensions, DOML2DeprecatedAlignmentStyle_HTMLIFrameElement {\n    width: string;\n    contentWindow: Window;\n    scrolling: string;\n    src: string;\n    marginHeight: string;\n    name: string;\n    marginWidth: string;\n    height: string;\n    contentDocument: Document;\n    longDesc: string;\n    frameBorder: string;\n}\ndeclare var HTMLIFrameElement: {\n    prototype: HTMLIFrameElement;\n    new(): HTMLIFrameElement;\n}\n\ninterface MSNavigatorAbilities {\n    userLanguage: string;\n    plugins: MSPluginsCollection;\n    cookieEnabled: bool;\n    appCodeName: string;\n    cpuClass: string;\n    appMinorVersion: string;\n    connectionSpeed: number;\n    browserLanguage: string;\n    mimeTypes: MSMimeTypesCollection;\n    product: string;\n    systemLanguage: string;\n    javaEnabled(): bool;\n    taintEnabled(): bool;\n}\n\ninterface TextRangeCollection {\n    length: number;\n    item(index: number): TextRange;\n    [index: number]: TextRange;\n}\ndeclare var TextRangeCollection: {\n    prototype: TextRangeCollection;\n    new(): TextRangeCollection;\n}\n\ninterface HTMLBodyElement extends HTMLElement, HTMLBodyElementDOML2Deprecated, MSHTMLBodyElementExtensions, DOML2DeprecatedBackgroundStyle, DOML2DeprecatedBackgroundColorStyle {\n    onresize: (ev: UIEvent) => any;\n    ononline: (ev: Event) => any;\n    onafterprint: (ev: Event) => any;\n    onbeforeprint: (ev: Event) => any;\n    onoffline: (ev: Event) => any;\n    onblur: (ev: FocusEvent) => any;\n    onhashchange: (ev: Event) => any;\n    onunload: (ev: Event) => any;\n    onfocus: (ev: FocusEvent) => any;\n    onmessage: (ev: MessageEvent) => any;\n    onload: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\n    onstorage: (ev: StorageEvent) => any;\n}\ndeclare var HTMLBodyElement: {\n    prototype: HTMLBodyElement;\n    new(): HTMLBodyElement;\n}\n\ninterface DocumentType extends Node {\n    name: string;\n    notations: NamedNodeMap;\n    systemId: string;\n    internalSubset: string;\n    entities: NamedNodeMap;\n    publicId: string;\n}\ndeclare var DocumentType: {\n    prototype: DocumentType;\n    new(): DocumentType;\n}\n\ninterface MSHTMLInputElementExtensions extends DOML2DeprecatedMarginStyle_HTMLInputElement, DOML2DeprecatedBorderStyle_HTMLInputElement {\n    status: bool;\n    complete: bool;\n    createTextRange(): TextRange;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLLegendElement {\n    align: string;\n}\n\ninterface SVGRadialGradientElement extends SVGGradientElement {\n    cx: SVGAnimatedLength;\n    r: SVGAnimatedLength;\n    cy: SVGAnimatedLength;\n    fx: SVGAnimatedLength;\n    fy: SVGAnimatedLength;\n}\ndeclare var SVGRadialGradientElement: {\n    prototype: SVGRadialGradientElement;\n    new(): SVGRadialGradientElement;\n}\n\ninterface MutationEvent extends Event {\n    newValue: string;\n    attrChange: number;\n    attrName: string;\n    prevValue: string;\n    relatedNode: Node;\n    initMutationEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, relatedNodeArg: Node, prevValueArg: string, newValueArg: string, attrNameArg: string, attrChangeArg: number): void;\n    MODIFICATION: number;\n    REMOVAL: number;\n    ADDITION: number;\n}\ndeclare var MutationEvent: {\n    prototype: MutationEvent;\n    new(): MutationEvent;\n    MODIFICATION: number;\n    REMOVAL: number;\n    ADDITION: number;\n}\n\ninterface DragEvent extends MouseEvent {\n    dataTransfer: DataTransfer;\n    initDragEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: AbstractView, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget, dataTransferArg: DataTransfer): void;\n}\ndeclare var DragEvent: {\n    prototype: DragEvent;\n    new(): DragEvent;\n}\n\ninterface DOML2DeprecatedWidthStyle_HTMLTableCellElement {\n    width: number;\n}\n\ninterface HTMLTableSectionElement extends HTMLElement, MSHTMLTableSectionElementExtensions, DOML2DeprecatedAlignmentStyle_HTMLTableSectionElement, HTMLTableAlignment {\n    rows: HTMLCollection;\n    deleteRow(index?: number): void;\n    insertRow(index?: number): HTMLElement;\n}\ndeclare var HTMLTableSectionElement: {\n    prototype: HTMLTableSectionElement;\n    new(): HTMLTableSectionElement;\n}\n\ninterface DOML2DeprecatedListNumberingAndBulletStyle {\n    type: string;\n}\n\ninterface HTMLInputElement extends HTMLElement, DOML2DeprecatedAlignmentStyle_HTMLInputElement, MSImageResourceExtensions_HTMLInputElement, MSHTMLInputElementExtensions, MSDataBindingExtensions {\n    width: string;\n    defaultChecked: bool;\n    alt: string;\n    accept: string;\n    value: string;\n    src: string;\n    useMap: string;\n    name: string;\n    form: HTMLFormElement;\n    selectionStart: number;\n    height: string;\n    indeterminate: bool;\n    readOnly: bool;\n    size: number;\n    checked: bool;\n    maxLength: number;\n    selectionEnd: number;\n    type: string;\n    defaultValue: string;\n    setSelectionRange(start: number, end: number): void;\n    select(): void;\n}\ndeclare var HTMLInputElement: {\n    prototype: HTMLInputElement;\n    new(): HTMLInputElement;\n}\n\ninterface HTMLAnchorElement extends HTMLElement, MSHTMLAnchorElementExtensions, MSDataBindingExtensions {\n    rel: string;\n    protocol: string;\n    search: string;\n    coords: string;\n    hostname: string;\n    pathname: string;\n    target: string;\n    href: string;\n    name: string;\n    charset: string;\n    hreflang: string;\n    port: string;\n    host: string;\n    hash: string;\n    rev: string;\n    type: string;\n    shape: string;\n    toString(): string;\n}\ndeclare var HTMLAnchorElement: {\n    prototype: HTMLAnchorElement;\n    new(): HTMLAnchorElement;\n}\n\ninterface SVGImageElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGURIReference {\n    y: SVGAnimatedLength;\n    width: SVGAnimatedLength;\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\n    x: SVGAnimatedLength;\n    height: SVGAnimatedLength;\n}\ndeclare var SVGImageElement: {\n    prototype: SVGImageElement;\n    new(): SVGImageElement;\n}\n\ninterface MSElementExtensions {\n    msMatchesSelector(selectors: string): bool;\n    fireEvent(eventName: string, eventObj?: any): bool;\n}\n\ninterface HTMLParamElement extends HTMLElement {\n    value: string;\n    name: string;\n    type: string;\n    valueType: string;\n}\ndeclare var HTMLParamElement: {\n    prototype: HTMLParamElement;\n    new(): HTMLParamElement;\n}\n\ninterface MSHTMLDocumentViewExtensions {\n    createStyleSheet(href?: string, index?: number): CSSStyleSheet;\n}\n\ninterface SVGAnimatedNumber {\n    animVal: number;\n    baseVal: number;\n}\ndeclare var SVGAnimatedNumber: {\n    prototype: SVGAnimatedNumber;\n    new(): SVGAnimatedNumber;\n}\n\ninterface PerformanceTiming {\n    redirectStart: number;\n    domainLookupEnd: number;\n    responseStart: number;\n    domComplete: number;\n    domainLookupStart: number;\n    loadEventStart: number;\n    msFirstPaint: number;\n    unloadEventEnd: number;\n    fetchStart: number;\n    requestStart: number;\n    domInteractive: number;\n    navigationStart: number;\n    connectEnd: number;\n    loadEventEnd: number;\n    connectStart: number;\n    responseEnd: number;\n    domLoading: number;\n    redirectEnd: number;\n    unloadEventStart: number;\n    domContentLoadedEventStart: number;\n    domContentLoadedEventEnd: number;\n    toJSON(): any;\n}\ndeclare var PerformanceTiming: {\n    prototype: PerformanceTiming;\n    new(): PerformanceTiming;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLInputElement {\n    align: string;\n}\n\ninterface HTMLPreElement extends HTMLElement, DOML2DeprecatedWidthStyle, MSHTMLPreElementExtensions {\n}\ndeclare var HTMLPreElement: {\n    prototype: HTMLPreElement;\n    new(): HTMLPreElement;\n}\n\ninterface EventException {\n    code: number;\n    message: string;\n    toString(): string;\n    DISPATCH_REQUEST_ERR: number;\n    UNSPECIFIED_EVENT_TYPE_ERR: number;\n}\ndeclare var EventException: {\n    prototype: EventException;\n    new(): EventException;\n    DISPATCH_REQUEST_ERR: number;\n    UNSPECIFIED_EVENT_TYPE_ERR: number;\n}\n\ninterface MSBorderColorHighlightStyle_HTMLTableCellElement {\n    borderColorLight: any;\n    borderColorDark: any;\n}\n\ninterface DOMHTMLImplementation {\n    createHTMLDocument(title: string): Document;\n}\n\ninterface NavigatorOnLine {\n    onLine: bool;\n}\n\ninterface SVGElementEventHandlers {\n    onmouseover: (ev: MouseEvent) => any;\n    onmousemove: (ev: MouseEvent) => any;\n    onmouseout: (ev: MouseEvent) => any;\n    ondblclick: (ev: MouseEvent) => any;\n    onfocusout: (ev: FocusEvent) => any;\n    onfocusin: (ev: FocusEvent) => any;\n    onmousedown: (ev: MouseEvent) => any;\n    onmouseup: (ev: MouseEvent) => any;\n    onload: (ev: Event) => any;\n    onclick: (ev: MouseEvent) => any;\n}\n\ninterface WindowLocalStorage {\n    localStorage: Storage;\n}\n\ninterface SVGMetadataElement extends SVGElement {\n}\ndeclare var SVGMetadataElement: {\n    prototype: SVGMetadataElement;\n    new(): SVGMetadataElement;\n}\n\ninterface SVGPathSegArcRel extends SVGPathSeg {\n    y: number;\n    sweepFlag: bool;\n    r2: number;\n    x: number;\n    angle: number;\n    r1: number;\n    largeArcFlag: bool;\n}\ndeclare var SVGPathSegArcRel: {\n    prototype: SVGPathSegArcRel;\n    new(): SVGPathSegArcRel;\n}\n\ninterface SVGPathSegMovetoAbs extends SVGPathSeg {\n    y: number;\n    x: number;\n}\ndeclare var SVGPathSegMovetoAbs: {\n    prototype: SVGPathSegMovetoAbs;\n    new(): SVGPathSegMovetoAbs;\n}\n\ninterface SVGStringList {\n    numberOfItems: number;\n    replaceItem(newItem: string, index: number): string;\n    getItem(index: number): string;\n    clear(): void;\n    appendItem(newItem: string): string;\n    initialize(newItem: string): string;\n    removeItem(index: number): string;\n    insertItemBefore(newItem: string, index: number): string;\n}\ndeclare var SVGStringList: {\n    prototype: SVGStringList;\n    new(): SVGStringList;\n}\n\ninterface XDomainRequest {\n    timeout: number;\n    onerror: (ev: Event) => any;\n    onload: (ev: Event) => any;\n    onprogress: (ev: any) => any;\n    ontimeout: (ev: Event) => any;\n    responseText: string;\n    contentType: string;\n    open(method: string, url: string): void;\n    abort(): void;\n    send(data?: any): void;\n}\ndeclare var XDomainRequest: {\n    prototype: XDomainRequest;\n    new (): XDomainRequest;\n}\n\ninterface DOML2DeprecatedBackgroundColorStyle {\n    bgColor: any;\n}\n\ninterface ElementTraversal {\n    childElementCount: number;\n    previousElementSibling: Element;\n    lastElementChild: Element;\n    nextElementSibling: Element;\n    firstElementChild: Element;\n}\n\ninterface SVGLength {\n    valueAsString: string;\n    valueInSpecifiedUnits: number;\n    value: number;\n    unitType: number;\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\n    convertToSpecifiedUnits(unitType: number): void;\n    SVG_LENGTHTYPE_NUMBER: number;\n    SVG_LENGTHTYPE_CM: number;\n    SVG_LENGTHTYPE_PC: number;\n    SVG_LENGTHTYPE_PERCENTAGE: number;\n    SVG_LENGTHTYPE_MM: number;\n    SVG_LENGTHTYPE_PT: number;\n    SVG_LENGTHTYPE_IN: number;\n    SVG_LENGTHTYPE_EMS: number;\n    SVG_LENGTHTYPE_PX: number;\n    SVG_LENGTHTYPE_UNKNOWN: number;\n    SVG_LENGTHTYPE_EXS: number;\n}\ndeclare var SVGLength: {\n    prototype: SVGLength;\n    new(): SVGLength;\n    SVG_LENGTHTYPE_NUMBER: number;\n    SVG_LENGTHTYPE_CM: number;\n    SVG_LENGTHTYPE_PC: number;\n    SVG_LENGTHTYPE_PERCENTAGE: number;\n    SVG_LENGTHTYPE_MM: number;\n    SVG_LENGTHTYPE_PT: number;\n    SVG_LENGTHTYPE_IN: number;\n    SVG_LENGTHTYPE_EMS: number;\n    SVG_LENGTHTYPE_PX: number;\n    SVG_LENGTHTYPE_UNKNOWN: number;\n    SVG_LENGTHTYPE_EXS: number;\n}\n\ninterface SVGPolygonElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGAnimatedPoints, SVGTests {\n}\ndeclare var SVGPolygonElement: {\n    prototype: SVGPolygonElement;\n    new(): SVGPolygonElement;\n}\n\ninterface HTMLPhraseElement extends HTMLElement {\n    dateTime: string;\n    cite: string;\n}\ndeclare var HTMLPhraseElement: {\n    prototype: HTMLPhraseElement;\n    new(): HTMLPhraseElement;\n}\n\ninterface MSHTMLAreaElementExtensions {\n}\n\ninterface SVGPathSegCurvetoCubicRel extends SVGPathSeg {\n    y: number;\n    y1: number;\n    x2: number;\n    x: number;\n    x1: number;\n    y2: number;\n}\ndeclare var SVGPathSegCurvetoCubicRel: {\n    prototype: SVGPathSegCurvetoCubicRel;\n    new(): SVGPathSegCurvetoCubicRel;\n}\n\ninterface MSEventObj {\n    nextPage: string;\n    keyCode: number;\n    toElement: Element;\n    returnValue: any;\n    dataFld: string;\n    y: number;\n    dataTransfer: DataTransfer;\n    propertyName: string;\n    url: string;\n    offsetX: number;\n    recordset: Object;\n    screenX: number;\n    buttonID: number;\n    wheelDelta: number;\n    reason: number;\n    origin: string;\n    data: string;\n    srcFilter: Object;\n    boundElements: HTMLCollection;\n    cancelBubble: bool;\n    altLeft: bool;\n    behaviorCookie: number;\n    bookmarks: BookmarkCollection;\n    type: string;\n    repeat: bool;\n    srcElement: Element;\n    source: Window;\n    fromElement: Element;\n    offsetY: number;\n    x: number;\n    behaviorPart: number;\n    qualifier: string;\n    altKey: bool;\n    ctrlKey: bool;\n    clientY: number;\n    shiftKey: bool;\n    shiftLeft: bool;\n    contentOverflow: bool;\n    screenY: number;\n    ctrlLeft: bool;\n    button: number;\n    srcUrn: string;\n    clientX: number;\n    actionURL: string;\n    getAttribute(strAttributeName: string, lFlags?: number): any;\n    setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;\n    removeAttribute(strAttributeName: string, lFlags?: number): bool;\n}\ndeclare var MSEventObj: {\n    prototype: MSEventObj;\n    new(): MSEventObj;\n}\n\ninterface SVGTextContentElement extends SVGElement, SVGStylable, SVGLangSpace, SVGTests {\n    textLength: SVGAnimatedLength;\n    lengthAdjust: SVGAnimatedEnumeration;\n    getCharNumAtPosition(point: SVGPoint): number;\n    getStartPositionOfChar(charnum: number): SVGPoint;\n    getExtentOfChar(charnum: number): SVGRect;\n    getComputedTextLength(): number;\n    getSubStringLength(charnum: number, nchars: number): number;\n    selectSubString(charnum: number, nchars: number): void;\n    getNumberOfChars(): number;\n    getRotationOfChar(charnum: number): number;\n    getEndPositionOfChar(charnum: number): SVGPoint;\n    LENGTHADJUST_SPACING: number;\n    LENGTHADJUST_SPACINGANDGLYPHS: number;\n    LENGTHADJUST_UNKNOWN: number;\n}\ndeclare var SVGTextContentElement: {\n    prototype: SVGTextContentElement;\n    new(): SVGTextContentElement;\n    LENGTHADJUST_SPACING: number;\n    LENGTHADJUST_SPACINGANDGLYPHS: number;\n    LENGTHADJUST_UNKNOWN: number;\n}\n\ninterface DOML2DeprecatedColorProperty {\n    color: string;\n}\n\ninterface MSHTMLLIElementExtensions {\n}\n\ninterface HTMLCanvasElement extends HTMLElement {\n    width: number;\n    height: number;\n    toDataURL(): string;\n    toDataURL(type: string, ...args: any[]): string;\n    getContext(contextId: string): CanvasRenderingContext2D;\n}\ndeclare var HTMLCanvasElement: {\n    prototype: HTMLCanvasElement;\n    new(): HTMLCanvasElement;\n}\n\ninterface HTMLTitleElement extends HTMLElement {\n    text: string;\n}\ndeclare var HTMLTitleElement: {\n    prototype: HTMLTitleElement;\n    new(): HTMLTitleElement;\n}\n\ninterface Location {\n    hash: string;\n    protocol: string;\n    search: string;\n    href: string;\n    hostname: string;\n    port: string;\n    pathname: string;\n    host: string;\n    reload(flag?: bool): void;\n    replace(url: string): void;\n    assign(url: string): void;\n    toString(): string;\n}\ndeclare var Location: {\n    prototype: Location;\n    new(): Location;\n}\n\ninterface HTMLStyleElement extends HTMLElement, MSLinkStyleExtensions, LinkStyle {\n    media: string;\n    type: string;\n}\ndeclare var HTMLStyleElement: {\n    prototype: HTMLStyleElement;\n    new(): HTMLStyleElement;\n}\n\ninterface MSHTMLOptGroupElementExtensions {\n    index: number;\n    defaultSelected: bool;\n    text: string;\n    value: string;\n    form: HTMLFormElement;\n    selected: bool;\n}\n\ninterface MSBorderColorHighlightStyle {\n    borderColorLight: any;\n    borderColorDark: any;\n}\n\ninterface DOML2DeprecatedSizeProperty_HTMLBaseFontElement {\n    size: number;\n}\n\ninterface SVGTransform {\n    type: number;\n    angle: number;\n    matrix: SVGMatrix;\n    setTranslate(tx: number, ty: number): void;\n    setScale(sx: number, sy: number): void;\n    setMatrix(matrix: SVGMatrix): void;\n    setSkewY(angle: number): void;\n    setRotate(angle: number, cx: number, cy: number): void;\n    setSkewX(angle: number): void;\n    SVG_TRANSFORM_SKEWX: number;\n    SVG_TRANSFORM_UNKNOWN: number;\n    SVG_TRANSFORM_SCALE: number;\n    SVG_TRANSFORM_TRANSLATE: number;\n    SVG_TRANSFORM_MATRIX: number;\n    SVG_TRANSFORM_ROTATE: number;\n    SVG_TRANSFORM_SKEWY: number;\n}\ndeclare var SVGTransform: {\n    prototype: SVGTransform;\n    new(): SVGTransform;\n    SVG_TRANSFORM_SKEWX: number;\n    SVG_TRANSFORM_UNKNOWN: number;\n    SVG_TRANSFORM_SCALE: number;\n    SVG_TRANSFORM_TRANSLATE: number;\n    SVG_TRANSFORM_MATRIX: number;\n    SVG_TRANSFORM_ROTATE: number;\n    SVG_TRANSFORM_SKEWY: number;\n}\n\ninterface MSCSSFilter {\n    Percent: number;\n    Enabled: bool;\n    Duration: number;\n    Play(Duration: number): void;\n    Apply(): void;\n    Stop(): void;\n}\ndeclare var MSCSSFilter: {\n    prototype: MSCSSFilter;\n    new(): MSCSSFilter;\n}\n\ninterface UIEvent extends Event {\n    detail: number;\n    view: AbstractView;\n    initUIEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: AbstractView, detailArg: number): void;\n}\ndeclare var UIEvent: {\n    prototype: UIEvent;\n    new(): UIEvent;\n}\n\ninterface ViewCSS_SVGSVGElement {\n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\n}\n\ninterface SVGURIReference {\n    href: SVGAnimatedString;\n}\n\ninterface SVGPathSeg {\n    pathSegType: number;\n    pathSegTypeAsLetter: string;\n    PATHSEG_MOVETO_REL: number;\n    PATHSEG_LINETO_VERTICAL_REL: number;\n    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;\n    PATHSEG_CURVETO_QUADRATIC_REL: number;\n    PATHSEG_CURVETO_CUBIC_ABS: number;\n    PATHSEG_LINETO_HORIZONTAL_ABS: number;\n    PATHSEG_CURVETO_QUADRATIC_ABS: number;\n    PATHSEG_LINETO_ABS: number;\n    PATHSEG_CLOSEPATH: number;\n    PATHSEG_LINETO_HORIZONTAL_REL: number;\n    PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;\n    PATHSEG_LINETO_REL: number;\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;\n    PATHSEG_ARC_REL: number;\n    PATHSEG_CURVETO_CUBIC_REL: number;\n    PATHSEG_UNKNOWN: number;\n    PATHSEG_LINETO_VERTICAL_ABS: number;\n    PATHSEG_ARC_ABS: number;\n    PATHSEG_MOVETO_ABS: number;\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;\n}\ndeclare var SVGPathSeg: {\n    PATHSEG_MOVETO_REL: number;\n    PATHSEG_LINETO_VERTICAL_REL: number;\n    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;\n    PATHSEG_CURVETO_QUADRATIC_REL: number;\n    PATHSEG_CURVETO_CUBIC_ABS: number;\n    PATHSEG_LINETO_HORIZONTAL_ABS: number;\n    PATHSEG_CURVETO_QUADRATIC_ABS: number;\n    PATHSEG_LINETO_ABS: number;\n    PATHSEG_CLOSEPATH: number;\n    PATHSEG_LINETO_HORIZONTAL_REL: number;\n    PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;\n    PATHSEG_LINETO_REL: number;\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;\n    PATHSEG_ARC_REL: number;\n    PATHSEG_CURVETO_CUBIC_REL: number;\n    PATHSEG_UNKNOWN: number;\n    PATHSEG_LINETO_VERTICAL_ABS: number;\n    PATHSEG_ARC_ABS: number;\n    PATHSEG_MOVETO_ABS: number;\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;\n}\n\ninterface WheelEvent extends MouseEvent {\n    deltaZ: number;\n    deltaX: number;\n    deltaMode: number;\n    deltaY: number;\n    initWheelEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: AbstractView, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, deltaXArg: number, deltaYArg: number, deltaZArg: number, deltaMode: number): void;\n    DOM_DELTA_PIXEL: number;\n    DOM_DELTA_LINE: number;\n    DOM_DELTA_PAGE: number;\n}\ndeclare var WheelEvent: {\n    prototype: WheelEvent;\n    new(): WheelEvent;\n    DOM_DELTA_PIXEL: number;\n    DOM_DELTA_LINE: number;\n    DOM_DELTA_PAGE: number;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLDivElement {\n    align: string;\n}\n\ninterface MSEventAttachmentTarget {\n    attachEvent(event: string, listener: EventListener): bool;\n    detachEvent(event: string, listener: EventListener): void;\n}\n\ninterface SVGNumber {\n    value: number;\n}\ndeclare var SVGNumber: {\n    prototype: SVGNumber;\n    new(): SVGNumber;\n}\n\ninterface SVGPathElement extends SVGElement, SVGStylable, SVGAnimatedPathData, SVGTransformable, SVGLangSpace, SVGTests {\n    getPathSegAtLength(distance: number): number;\n    getPointAtLength(distance: number): SVGPoint;\n    createSVGPathSegCurvetoQuadraticAbs(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticAbs;\n    createSVGPathSegLinetoRel(x: number, y: number): SVGPathSegLinetoRel;\n    createSVGPathSegCurvetoQuadraticRel(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticRel;\n    createSVGPathSegCurvetoCubicAbs(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicAbs;\n    createSVGPathSegLinetoAbs(x: number, y: number): SVGPathSegLinetoAbs;\n    createSVGPathSegClosePath(): SVGPathSegClosePath;\n    createSVGPathSegCurvetoCubicRel(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicRel;\n    createSVGPathSegCurvetoQuadraticSmoothRel(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothRel;\n    createSVGPathSegMovetoRel(x: number, y: number): SVGPathSegMovetoRel;\n    createSVGPathSegCurvetoCubicSmoothAbs(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothAbs;\n    createSVGPathSegMovetoAbs(x: number, y: number): SVGPathSegMovetoAbs;\n    createSVGPathSegLinetoVerticalRel(y: number): SVGPathSegLinetoVerticalRel;\n    createSVGPathSegArcRel(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: bool, sweepFlag: bool): SVGPathSegArcRel;\n    createSVGPathSegCurvetoQuadraticSmoothAbs(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothAbs;\n    createSVGPathSegLinetoHorizontalRel(x: number): SVGPathSegLinetoHorizontalRel;\n    getTotalLength(): number;\n    createSVGPathSegCurvetoCubicSmoothRel(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothRel;\n    createSVGPathSegLinetoHorizontalAbs(x: number): SVGPathSegLinetoHorizontalAbs;\n    createSVGPathSegLinetoVerticalAbs(y: number): SVGPathSegLinetoVerticalAbs;\n    createSVGPathSegArcAbs(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: bool, sweepFlag: bool): SVGPathSegArcAbs;\n}\ndeclare var SVGPathElement: {\n    prototype: SVGPathElement;\n    new(): SVGPathElement;\n}\n\ninterface MSCompatibleInfo {\n    version: string;\n    userAgent: string;\n}\ndeclare var MSCompatibleInfo: {\n    prototype: MSCompatibleInfo;\n    new(): MSCompatibleInfo;\n}\n\ninterface MSHTMLDocumentEventExtensions {\n    createEventObject(eventObj?: any): MSEventObj;\n    fireEvent(eventName: string, eventObj?: any): bool;\n}\n\ninterface Text extends CharacterData, MSNodeExtensions {\n    wholeText: string;\n    splitText(offset: number): Text;\n    replaceWholeText(content: string): Text;\n}\ndeclare var Text: {\n    prototype: Text;\n    new(): Text;\n}\n\ninterface SVGAnimatedRect {\n    animVal: SVGRect;\n    baseVal: SVGRect;\n}\ndeclare var SVGAnimatedRect: {\n    prototype: SVGAnimatedRect;\n    new(): SVGAnimatedRect;\n}\n\ninterface CSSNamespaceRule extends CSSRule {\n    namespaceURI: string;\n    prefix: string;\n}\ndeclare var CSSNamespaceRule: {\n    prototype: CSSNamespaceRule;\n    new(): CSSNamespaceRule;\n}\n\ninterface HTMLUnknownElement extends HTMLElement, MSDataBindingRecordSetReadonlyExtensions, MSHTMLUnknownElementExtensions {\n}\ndeclare var HTMLUnknownElement: {\n    prototype: HTMLUnknownElement;\n    new(): HTMLUnknownElement;\n}\n\ninterface SVGPathSegList {\n    numberOfItems: number;\n    replaceItem(newItem: SVGPathSeg, index: number): SVGPathSeg;\n    getItem(index: number): SVGPathSeg;\n    clear(): void;\n    appendItem(newItem: SVGPathSeg): SVGPathSeg;\n    initialize(newItem: SVGPathSeg): SVGPathSeg;\n    removeItem(index: number): SVGPathSeg;\n    insertItemBefore(newItem: SVGPathSeg, index: number): SVGPathSeg;\n}\ndeclare var SVGPathSegList: {\n    prototype: SVGPathSegList;\n    new(): SVGPathSegList;\n}\n\ninterface HTMLAudioElement extends HTMLMediaElement {\n}\ndeclare var HTMLAudioElement: {\n    prototype: HTMLAudioElement;\n    new(): HTMLAudioElement;\n}\n\ninterface MSImageResourceExtensions {\n    dynsrc: string;\n    vrml: string;\n    lowsrc: string;\n    start: string;\n    loop: number;\n}\n\ninterface MSBorderColorHighlightStyle_HTMLTableRowElement {\n    borderColorLight: any;\n    borderColorDark: any;\n}\n\ninterface PositionError {\n    code: number;\n    message: string;\n    toString(): string;\n    POSITION_UNAVAILABLE: number;\n    PERMISSION_DENIED: number;\n    TIMEOUT: number;\n}\ndeclare var PositionError: {\n    POSITION_UNAVAILABLE: number;\n    PERMISSION_DENIED: number;\n    TIMEOUT: number;\n}\n\ninterface BrowserPublic {\n}\ndeclare var BrowserPublic: {\n    prototype: BrowserPublic;\n    new(): BrowserPublic;\n}\n\ninterface HTMLTableCellElement extends HTMLElement, DOML2DeprecatedTableCellHeight, HTMLTableAlignment, MSBorderColorHighlightStyle_HTMLTableCellElement, DOML2DeprecatedWidthStyle_HTMLTableCellElement, DOML2DeprecatedBackgroundStyle, MSBorderColorStyle_HTMLTableCellElement, MSHTMLTableCellElementExtensions, DOML2DeprecatedAlignmentStyle_HTMLTableCellElement, HTMLTableHeaderCellScope, DOML2DeprecatedWordWrapSuppression, DOML2DeprecatedBackgroundColorStyle {\n    headers: string;\n    abbr: string;\n    rowSpan: number;\n    cellIndex: number;\n    colSpan: number;\n    axis: string;\n}\ndeclare var HTMLTableCellElement: {\n    prototype: HTMLTableCellElement;\n    new(): HTMLTableCellElement;\n}\n\ninterface MSNamespaceInfoCollection {\n    length: number;\n    add(namespace?: string, urn?: string, implementationUrl?: any): Object;\n    item(index: any): Object;\n    [index: string]: Object;\n    (index: any): Object;\n}\ndeclare var MSNamespaceInfoCollection: {\n    prototype: MSNamespaceInfoCollection;\n    new(): MSNamespaceInfoCollection;\n}\n\ninterface SVGElementInstance extends EventTarget {\n    previousSibling: SVGElementInstance;\n    parentNode: SVGElementInstance;\n    lastChild: SVGElementInstance;\n    nextSibling: SVGElementInstance;\n    childNodes: SVGElementInstanceList;\n    correspondingUseElement: SVGUseElement;\n    correspondingElement: SVGElement;\n    firstChild: SVGElementInstance;\n}\ndeclare var SVGElementInstance: {\n    prototype: SVGElementInstance;\n    new(): SVGElementInstance;\n}\n\ninterface MSHTMLUListElementExtensions {\n}\n\ninterface SVGCircleElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests {\n    cx: SVGAnimatedLength;\n    r: SVGAnimatedLength;\n    cy: SVGAnimatedLength;\n}\ndeclare var SVGCircleElement: {\n    prototype: SVGCircleElement;\n    new(): SVGCircleElement;\n}\n\ninterface HTMLBaseFontElement extends HTMLElement, DOML2DeprecatedSizeProperty_HTMLBaseFontElement, DOML2DeprecatedColorProperty {\n    face: string;\n}\ndeclare var HTMLBaseFontElement: {\n    prototype: HTMLBaseFontElement;\n    new(): HTMLBaseFontElement;\n}\n\ninterface CustomEvent extends Event {\n    detail: Object;\n    initCustomEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, detailArg: Object): void;\n}\ndeclare var CustomEvent: {\n    prototype: CustomEvent;\n    new(): CustomEvent;\n}\n\ninterface CSSImportRule extends CSSRule {\n    styleSheet: CSSStyleSheet;\n    href: string;\n    media: MediaList;\n}\ndeclare var CSSImportRule: {\n    prototype: CSSImportRule;\n    new(): CSSImportRule;\n}\n\ninterface StyleSheetList {\n    length: number;\n    item(index?: number): StyleSheet;\n    [index: number]: StyleSheet;\n}\ndeclare var StyleSheetList: {\n    prototype: StyleSheetList;\n    new(): StyleSheetList;\n}\n\ninterface HTMLTextAreaElement extends HTMLElement, MSDataBindingExtensions, MSHTMLTextAreaElementExtensions {\n    value: string;\n    form: HTMLFormElement;\n    name: string;\n    selectionStart: number;\n    rows: number;\n    cols: number;\n    readOnly: bool;\n    wrap: string;\n    selectionEnd: number;\n    type: string;\n    defaultValue: string;\n    setSelectionRange(start: number, end: number): void;\n    select(): void;\n}\ndeclare var HTMLTextAreaElement: {\n    prototype: HTMLTextAreaElement;\n    new(): HTMLTextAreaElement;\n}\n\ninterface MSHTMLFormElementExtensions {\n    encoding: string;\n}\n\ninterface DOML2DeprecatedMarginStyle {\n    vspace: number;\n    hspace: number;\n}\n\ninterface Geolocation {\n    clearWatch(watchId: number): void;\n    getCurrentPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): void;\n    watchPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): number;\n}\ndeclare var Geolocation: {\n    prototype: Geolocation;\n    new(): Geolocation;\n}\n\ninterface MSWindowModeless {\n    dialogTop: any;\n    dialogLeft: any;\n    dialogWidth: any;\n    dialogHeight: any;\n    menuArguments: any;\n}\n\ninterface HTMLMarqueeElement extends HTMLElement, DOML2DeprecatedMarginStyle_HTMLMarqueeElement, MSDataBindingExtensions, MSHTMLMarqueeElementExtensions, DOML2DeprecatedBackgroundColorStyle {\n    width: string;\n    onbounce: (ev: Event) => any;\n    trueSpeed: bool;\n    scrollAmount: number;\n    scrollDelay: number;\n    behavior: string;\n    height: string;\n    loop: number;\n    direction: string;\n    onstart: (ev: Event) => any;\n    onfinish: (ev: Event) => any;\n    stop(): void;\n    start(): void;\n}\ndeclare var HTMLMarqueeElement: {\n    prototype: HTMLMarqueeElement;\n    new(): HTMLMarqueeElement;\n}\n\ninterface SVGRect {\n    y: number;\n    width: number;\n    x: number;\n    height: number;\n}\ndeclare var SVGRect: {\n    prototype: SVGRect;\n    new(): SVGRect;\n}\n\ninterface MSNodeExtensions {\n    swapNode(otherNode: Node): Node;\n    removeNode(deep?: bool): Node;\n    replaceNode(replacement: Node): Node;\n}\n\ninterface KeyboardEventExtensions {\n    keyCode: number;\n    which: number;\n    charCode: number;\n}\n\ninterface History {\n    length: number;\n    back(distance?: any): void;\n    forward(distance?: any): void;\n    go(delta?: any): void;\n}\ndeclare var History: {\n    prototype: History;\n    new(): History;\n}\n\ninterface DocumentStyle {\n    styleSheets: StyleSheetList;\n}\n\ninterface SVGPathSegCurvetoCubicAbs extends SVGPathSeg {\n    y: number;\n    y1: number;\n    x2: number;\n    x: number;\n    x1: number;\n    y2: number;\n}\ndeclare var SVGPathSegCurvetoCubicAbs: {\n    prototype: SVGPathSegCurvetoCubicAbs;\n    new(): SVGPathSegCurvetoCubicAbs;\n}\n\ninterface TimeRanges {\n    length: number;\n    start(index: number): number;\n    end(index: number): number;\n}\ndeclare var TimeRanges: {\n    prototype: TimeRanges;\n    new(): TimeRanges;\n}\n\ninterface SVGPathSegCurvetoQuadraticAbs extends SVGPathSeg {\n    y: number;\n    y1: number;\n    x: number;\n    x1: number;\n}\ndeclare var SVGPathSegCurvetoQuadraticAbs: {\n    prototype: SVGPathSegCurvetoQuadraticAbs;\n    new(): SVGPathSegCurvetoQuadraticAbs;\n}\n\ninterface MSHTMLSelectElementExtensions {\n}\n\ninterface CSSRule {\n    cssText: string;\n    parentStyleSheet: CSSStyleSheet;\n    parentRule: CSSRule;\n    type: number;\n    IMPORT_RULE: number;\n    MEDIA_RULE: number;\n    STYLE_RULE: number;\n    NAMESPACE_RULE: number;\n    PAGE_RULE: number;\n    UNKNOWN_RULE: number;\n    FONT_FACE_RULE: number;\n    CHARSET_RULE: number;\n}\ndeclare var CSSRule: {\n    prototype: CSSRule;\n    new(): CSSRule;\n    IMPORT_RULE: number;\n    MEDIA_RULE: number;\n    STYLE_RULE: number;\n    NAMESPACE_RULE: number;\n    PAGE_RULE: number;\n    UNKNOWN_RULE: number;\n    FONT_FACE_RULE: number;\n    CHARSET_RULE: number;\n}\n\ninterface SVGPathSegLinetoAbs extends SVGPathSeg {\n    y: number;\n    x: number;\n}\ndeclare var SVGPathSegLinetoAbs: {\n    prototype: SVGPathSegLinetoAbs;\n    new(): SVGPathSegLinetoAbs;\n}\n\ninterface MSMouseEventExtensions {\n    toElement: Element;\n    layerY: number;\n    fromElement: Element;\n    which: number;\n    layerX: number;\n}\n\ninterface HTMLModElement extends HTMLElement, MSHTMLModElementExtensions {\n    dateTime: string;\n    cite: string;\n}\ndeclare var HTMLModElement: {\n    prototype: HTMLModElement;\n    new(): HTMLModElement;\n}\n\ninterface DOML2DeprecatedWordWrapSuppression {\n    noWrap: bool;\n}\n\ninterface BeforeUnloadEvent extends Event {\n    returnValue: string;\n}\ndeclare var BeforeUnloadEvent: {\n    prototype: BeforeUnloadEvent;\n    new(): BeforeUnloadEvent;\n}\n\ninterface MSPopupWindow {\n    document: HTMLDocument;\n    isOpen: bool;\n    show(x: number, y: number, w: number, h: number, element?: any): void;\n    hide(): void;\n}\ndeclare var MSPopupWindow: {\n    prototype: MSPopupWindow;\n    new(): MSPopupWindow;\n}\n\ninterface SVGMatrix {\n    e: number;\n    c: number;\n    a: number;\n    b: number;\n    d: number;\n    f: number;\n    multiply(secondMatrix: SVGMatrix): SVGMatrix;\n    flipY(): SVGMatrix;\n    skewY(angle: number): SVGMatrix;\n    inverse(): SVGMatrix;\n    scaleNonUniform(scaleFactorX: number, scaleFactorY: number): SVGMatrix;\n    rotate(angle: number): SVGMatrix;\n    flipX(): SVGMatrix;\n    translate(x: number, y: number): SVGMatrix;\n    scale(scaleFactor: number): SVGMatrix;\n    rotateFromVector(x: number, y: number): SVGMatrix;\n    skewX(angle: number): SVGMatrix;\n}\ndeclare var SVGMatrix: {\n    prototype: SVGMatrix;\n    new(): SVGMatrix;\n}\n\ninterface SVGUseElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGURIReference {\n    y: SVGAnimatedLength;\n    width: SVGAnimatedLength;\n    animatedInstanceRoot: SVGElementInstance;\n    instanceRoot: SVGElementInstance;\n    x: SVGAnimatedLength;\n    height: SVGAnimatedLength;\n}\ndeclare var SVGUseElement: {\n    prototype: SVGUseElement;\n    new(): SVGUseElement;\n}\n\ninterface Event extends MSEventExtensions {\n    timeStamp: number;\n    defaultPrevented: bool;\n    isTrusted: bool;\n    currentTarget: EventTarget;\n    target: EventTarget;\n    eventPhase: number;\n    type: string;\n    cancelable: bool;\n    bubbles: bool;\n    initEvent(eventTypeArg: string, canBubbleArg: bool, cancelableArg: bool): void;\n    stopPropagation(): void;\n    stopImmediatePropagation(): void;\n    preventDefault(): void;\n    CAPTURING_PHASE: number;\n    AT_TARGET: number;\n    BUBBLING_PHASE: number;\n}\ndeclare var Event: {\n    prototype: Event;\n    new(): Event;\n    CAPTURING_PHASE: number;\n    AT_TARGET: number;\n    BUBBLING_PHASE: number;\n}\n\ninterface ImageData {\n    width: number;\n    data: number[];\n    height: number;\n}\ndeclare var ImageData: {\n    prototype: ImageData;\n    new(): ImageData;\n}\n\ninterface MSHTMLElementExtensions {\n    onlosecapture: (ev: MSEventObj) => any;\n    onrowexit: (ev: MSEventObj) => any;\n    oncontrolselect: (ev: MSEventObj) => any;\n    onrowsinserted: (ev: MSEventObj) => any;\n    onmouseleave: (ev: MouseEvent) => any;\n    document: HTMLDocument;\n    behaviorUrns: MSBehaviorUrnsCollection;\n    onpropertychange: (ev: MSEventObj) => any;\n    children: HTMLCollection;\n    filters: Object;\n    onbeforecut: (ev: DragEvent) => any;\n    scopeName: string;\n    onbeforepaste: (ev: DragEvent) => any;\n    onmove: (ev: MSEventObj) => any;\n    onafterupdate: (ev: MSEventObj) => any;\n    onbeforecopy: (ev: DragEvent) => any;\n    onlayoutcomplete: (ev: MSEventObj) => any;\n    onresizeend: (ev: MSEventObj) => any;\n    uniqueID: string;\n    onhelp: (ev: Event) => any;\n    onbeforeactivate: (ev: UIEvent) => any;\n    isMultiLine: bool;\n    uniqueNumber: number;\n    tagUrn: string;\n    onfocusout: (ev: FocusEvent) => any;\n    ondataavailable: (ev: MSEventObj) => any;\n    hideFocus: bool;\n    onbeforeupdate: (ev: MSEventObj) => any;\n    onfilterchange: (ev: MSEventObj) => any;\n    onfocusin: (ev: FocusEvent) => any;\n    recordNumber: any;\n    parentTextEdit: Element;\n    ondatasetcomplete: (ev: MSEventObj) => any;\n    onbeforedeactivate: (ev: UIEvent) => any;\n    outerText: string;\n    onresizestart: (ev: MSEventObj) => any;\n    onactivate: (ev: UIEvent) => any;\n    isTextEdit: bool;\n    isDisabled: bool;\n    readyState: string;\n    all: HTMLCollection;\n    onmouseenter: (ev: MouseEvent) => any;\n    onmovestart: (ev: MSEventObj) => any;\n    onselectstart: (ev: Event) => any;\n    onpaste: (ev: DragEvent) => any;\n    canHaveHTML: bool;\n    innerText: string;\n    onerrorupdate: (ev: MSEventObj) => any;\n    ondeactivate: (ev: UIEvent) => any;\n    oncut: (ev: DragEvent) => any;\n    onmoveend: (ev: MSEventObj) => any;\n    onresize: (ev: UIEvent) => any;\n    language: string;\n    ondatasetchanged: (ev: MSEventObj) => any;\n    oncopy: (ev: DragEvent) => any;\n    onrowsdelete: (ev: MSEventObj) => any;\n    parentElement: HTMLElement;\n    onrowenter: (ev: MSEventObj) => any;\n    onbeforeeditfocus: (ev: MSEventObj) => any;\n    canHaveChildren: bool;\n    sourceIndex: number;\n    oncellchange: (ev: MSEventObj) => any;\n    dragDrop(): bool;\n    releaseCapture(): void;\n    addFilter(filter: Object): void;\n    setCapture(containerCapture?: bool): void;\n    removeBehavior(cookie: number): bool;\n    contains(child: HTMLElement): bool;\n    applyElement(apply: Element, where?: string): Element;\n    replaceAdjacentText(where: string, newText: string): string;\n    mergeAttributes(source: HTMLElement, preserveIdentity?: bool): void;\n    insertAdjacentElement(position: string, insertedElement: Element): Element;\n    insertAdjacentText(where: string, text: string): void;\n    getAdjacentText(where: string): string;\n    removeFilter(filter: Object): void;\n    setActive(): void;\n    addBehavior(bstrUrl: string, factory?: any): number;\n    clearAttributes(): void;\n}\n\ninterface HTMLTableColElement extends HTMLElement, MSHTMLTableColElementExtensions, HTMLTableAlignment, DOML2DeprecatedAlignmentStyle_HTMLTableColElement {\n    width: any;\n    span: number;\n}\ndeclare var HTMLTableColElement: {\n    prototype: HTMLTableColElement;\n    new(): HTMLTableColElement;\n}\n\ninterface HTMLDocument extends MSEventAttachmentTarget, MSHTMLDocumentSelection, MSHTMLDocumentExtensions, MSNodeExtensions, MSResourceMetadata, MSHTMLDocumentEventExtensions, MSHTMLDocumentViewExtensions {\n    ondragend: (ev: DragEvent) => any;\n    ondragover: (ev: DragEvent) => any;\n    onkeydown: (ev: KeyboardEvent) => any;\n    bgColor: string;\n    onkeyup: (ev: KeyboardEvent) => any;\n    onreset: (ev: Event) => any;\n    onmouseup: (ev: MouseEvent) => any;\n    ondragstart: (ev: DragEvent) => any;\n    scripts: HTMLCollection;\n    ondrag: (ev: DragEvent) => any;\n    linkColor: string;\n    ondragleave: (ev: DragEvent) => any;\n    onmouseover: (ev: MouseEvent) => any;\n    onpause: (ev: Event) => any;\n    charset: string;\n    vlinkColor: string;\n    onmousedown: (ev: MouseEvent) => any;\n    onseeked: (ev: Event) => any;\n    title: string;\n    onclick: (ev: MouseEvent) => any;\n    onwaiting: (ev: Event) => any;\n    defaultCharset: string;\n    embeds: HTMLCollection;\n    ondurationchange: (ev: Event) => any;\n    all: HTMLCollection;\n    applets: HTMLCollection;\n    forms: HTMLCollection;\n    onblur: (ev: FocusEvent) => any;\n    dir: string;\n    body: HTMLElement;\n    designMode: string;\n    onemptied: (ev: Event) => any;\n    domain: string;\n    onseeking: (ev: Event) => any;\n    oncanplay: (ev: Event) => any;\n    onstalled: (ev: Event) => any;\n    onmousemove: (ev: MouseEvent) => any;\n    onratechange: (ev: Event) => any;\n    onloadstart: (ev: Event) => any;\n    ondragenter: (ev: DragEvent) => any;\n    onsubmit: (ev: Event) => any;\n    onprogress: (ev: any) => any;\n    ondblclick: (ev: MouseEvent) => any;\n    oncontextmenu: (ev: MouseEvent) => any;\n    activeElement: Element;\n    onchange: (ev: Event) => any;\n    onloadedmetadata: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    onplay: (ev: Event) => any;\n    links: HTMLCollection;\n    onplaying: (ev: Event) => any;\n    URL: string;\n    images: HTMLCollection;\n    head: HTMLHeadElement;\n    location: Location;\n    cookie: string;\n    oncanplaythrough: (ev: Event) => any;\n    onabort: (ev: UIEvent) => any;\n    characterSet: string;\n    anchors: HTMLCollection;\n    lastModified: string;\n    onreadystatechange: (ev: Event) => any;\n    onkeypress: (ev: KeyboardEvent) => any;\n    onloadeddata: (ev: Event) => any;\n    plugins: HTMLCollection;\n    onsuspend: (ev: Event) => any;\n    referrer: string;\n    readyState: string;\n    alinkColor: string;\n    onfocus: (ev: FocusEvent) => any;\n    fgColor: string;\n    ontimeupdate: (ev: Event) => any;\n    onselect: (ev: UIEvent) => any;\n    ondrop: (ev: DragEvent) => any;\n    onmouseout: (ev: MouseEvent) => any;\n    onended: (ev: Event) => any;\n    compatMode: string;\n    onscroll: (ev: UIEvent) => any;\n    onmousewheel: (ev: MouseWheelEvent) => any;\n    onload: (ev: Event) => any;\n    onvolumechange: (ev: Event) => any;\n    oninput: (ev: Event) => any;\n    queryCommandValue(commandId: string): string;\n    queryCommandIndeterm(commandId: string): bool;\n    execCommand(commandId: string, showUI?: bool, value?: any): bool;\n    getElementsByName(elementName: string): NodeList;\n    writeln(...content: string[]): void;\n    open(url?: string, name?: string, features?: string, replace?: bool): any;\n    queryCommandState(commandId: string): bool;\n    close(): void;\n    hasFocus(): bool;\n    getElementsByClassName(classNames: string): NodeList;\n    queryCommandSupported(commandId: string): bool;\n    getSelection(): Selection;\n    queryCommandEnabled(commandId: string): bool;\n    write(...content: string[]): void;\n    queryCommandText(commandId: string): string;\n}\n\ninterface SVGException {\n    code: number;\n    message: string;\n    toString(): string;\n    SVG_MATRIX_NOT_INVERTABLE: number;\n    SVG_WRONG_TYPE_ERR: number;\n    SVG_INVALID_VALUE_ERR: number;\n}\ndeclare var SVGException: {\n    prototype: SVGException;\n    new(): SVGException;\n    SVG_MATRIX_NOT_INVERTABLE: number;\n    SVG_WRONG_TYPE_ERR: number;\n    SVG_INVALID_VALUE_ERR: number;\n}\n\ninterface DOML2DeprecatedTableCellHeight {\n    height: any;\n}\n\ninterface HTMLTableAlignment {\n    ch: string;\n    vAlign: string;\n    chOff: string;\n}\n\ninterface SVGAnimatedEnumeration {\n    animVal: number;\n    baseVal: number;\n}\ndeclare var SVGAnimatedEnumeration: {\n    prototype: SVGAnimatedEnumeration;\n    new(): SVGAnimatedEnumeration;\n}\n\ninterface SVGLinearGradientElement extends SVGGradientElement {\n    y1: SVGAnimatedLength;\n    x2: SVGAnimatedLength;\n    x1: SVGAnimatedLength;\n    y2: SVGAnimatedLength;\n}\ndeclare var SVGLinearGradientElement: {\n    prototype: SVGLinearGradientElement;\n    new(): SVGLinearGradientElement;\n}\n\ninterface DOML2DeprecatedSizeProperty {\n    size: number;\n}\n\ninterface MSHTMLHeadingElementExtensions extends DOML2DeprecatedTextFlowControl_HTMLBlockElement {\n}\n\ninterface MSBorderColorStyle_HTMLTableCellElement {\n    borderColor: any;\n}\n\ninterface DOML2DeprecatedWidthStyle_HTMLHRElement {\n    width: number;\n}\n\ninterface HTMLUListElement extends HTMLElement, DOML2DeprecatedListSpaceReduction, DOML2DeprecatedListNumberingAndBulletStyle, MSHTMLUListElementExtensions {\n}\ndeclare var HTMLUListElement: {\n    prototype: HTMLUListElement;\n    new(): HTMLUListElement;\n}\n\ninterface SVGRectElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests {\n    y: SVGAnimatedLength;\n    width: SVGAnimatedLength;\n    ry: SVGAnimatedLength;\n    rx: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    height: SVGAnimatedLength;\n}\ndeclare var SVGRectElement: {\n    prototype: SVGRectElement;\n    new(): SVGRectElement;\n}\n\ninterface DOML2DeprecatedBorderStyle {\n    border: string;\n}\n\ninterface HTMLDivElement extends HTMLElement, DOML2DeprecatedAlignmentStyle_HTMLDivElement, MSHTMLDivElementExtensions, MSDataBindingExtensions {\n}\ndeclare var HTMLDivElement: {\n    prototype: HTMLDivElement;\n    new(): HTMLDivElement;\n}\n\ninterface NavigatorDoNotTrack {\n    msDoNotTrack: string;\n}\n\ninterface SVG1_1Properties {\n    fillRule: string;\n    strokeLinecap: string;\n    stopColor: string;\n    glyphOrientationHorizontal: string;\n    kerning: string;\n    alignmentBaseline: string;\n    dominantBaseline: string;\n    fill: string;\n    strokeMiterlimit: string;\n    marker: string;\n    glyphOrientationVertical: string;\n    markerMid: string;\n    textAnchor: string;\n    fillOpacity: string;\n    strokeDasharray: string;\n    mask: string;\n    stopOpacity: string;\n    stroke: string;\n    strokeDashoffset: string;\n    strokeOpacity: string;\n    markerStart: string;\n    pointerEvents: string;\n    baselineShift: string;\n    markerEnd: string;\n    clipRule: string;\n    strokeLinejoin: string;\n    clipPath: string;\n    strokeWidth: string;\n}\n\ninterface NamedNodeMap {\n    length: number;\n    removeNamedItemNS(namespaceURI: string, localName: string): Node;\n    item(index: number): Node;\n    [index: number]: Node;\n    removeNamedItem(name: string): Node;\n    getNamedItem(name: string): Node;\n    [name: string]: Node;\n    setNamedItem(arg: Node): Node;\n    getNamedItemNS(namespaceURI: string, localName: string): Node;\n    setNamedItemNS(arg: Node): Node;\n}\ndeclare var NamedNodeMap: {\n    prototype: NamedNodeMap;\n    new(): NamedNodeMap;\n}\n\ninterface MediaList {\n    length: number;\n    mediaText: string;\n    deleteMedium(oldMedium: string): void;\n    appendMedium(newMedium: string): void;\n    item(index: number): string;\n    [index: number]: string;\n    toString(): string;\n}\ndeclare var MediaList: {\n    prototype: MediaList;\n    new(): MediaList;\n}\n\ninterface SVGPathSegCurvetoQuadraticSmoothAbs extends SVGPathSeg {\n    y: number;\n    x: number;\n}\ndeclare var SVGPathSegCurvetoQuadraticSmoothAbs: {\n    prototype: SVGPathSegCurvetoQuadraticSmoothAbs;\n    new(): SVGPathSegCurvetoQuadraticSmoothAbs;\n}\n\ninterface SVGLengthList {\n    numberOfItems: number;\n    replaceItem(newItem: SVGLength, index: number): SVGLength;\n    getItem(index: number): SVGLength;\n    clear(): void;\n    appendItem(newItem: SVGLength): SVGLength;\n    initialize(newItem: SVGLength): SVGLength;\n    removeItem(index: number): SVGLength;\n    insertItemBefore(newItem: SVGLength, index: number): SVGLength;\n}\ndeclare var SVGLengthList: {\n    prototype: SVGLengthList;\n    new(): SVGLengthList;\n}\n\ninterface SVGPathSegCurvetoCubicSmoothRel extends SVGPathSeg {\n    y: number;\n    x2: number;\n    x: number;\n    y2: number;\n}\ndeclare var SVGPathSegCurvetoCubicSmoothRel: {\n    prototype: SVGPathSegCurvetoCubicSmoothRel;\n    new(): SVGPathSegCurvetoCubicSmoothRel;\n}\n\ninterface MSWindowExtensions {\n    status: string;\n    onmouseleave: (ev: MouseEvent) => any;\n    screenLeft: number;\n    offscreenBuffering: any;\n    maxConnectionsPerServer: number;\n    onmouseenter: (ev: MouseEvent) => any;\n    clipboardData: DataTransfer;\n    defaultStatus: string;\n    clientInformation: Navigator;\n    closed: bool;\n    onhelp: (ev: Event) => any;\n    external: BrowserPublic;\n    event: MSEventObj;\n    onfocusout: (ev: FocusEvent) => any;\n    screenTop: number;\n    onfocusin: (ev: FocusEvent) => any;\n    showModelessDialog(url?: string, argument?: any, options?: any): Window;\n    navigate(url: string): void;\n    resizeBy(x?: number, y?: number): void;\n    item(index: any): any;\n    resizeTo(x?: number, y?: number): void;\n    createPopup(arguments?: any): MSPopupWindow;\n    toStaticHTML(html: string): string;\n    execScript(code: string, language?: string): any;\n    msWriteProfilerMark(profilerMarkName: string): void;\n    moveTo(x?: number, y?: number): void;\n    moveBy(x?: number, y?: number): void;\n    showHelp(url: string, helpArg?: any, features?: string): void;\n}\n\ninterface ProcessingInstruction extends Node {\n    target: string;\n    data: string;\n}\ndeclare var ProcessingInstruction: {\n    prototype: ProcessingInstruction;\n    new(): ProcessingInstruction;\n}\n\ninterface MSBehaviorUrnsCollection {\n    length: number;\n    item(index: number): string;\n}\ndeclare var MSBehaviorUrnsCollection: {\n    prototype: MSBehaviorUrnsCollection;\n    new(): MSBehaviorUrnsCollection;\n}\n\ninterface CSSFontFaceRule extends CSSRule {\n    style: CSSStyleDeclaration;\n}\ndeclare var CSSFontFaceRule: {\n    prototype: CSSFontFaceRule;\n    new(): CSSFontFaceRule;\n}\n\ninterface DOML2DeprecatedBackgroundStyle {\n    background: string;\n}\n\ninterface TextEvent extends UIEvent {\n    inputMethod: number;\n    data: string;\n    locale: string;\n    initTextEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: AbstractView, dataArg: string, inputMethod: number, locale: string): void;\n    DOM_INPUT_METHOD_KEYBOARD: number;\n    DOM_INPUT_METHOD_DROP: number;\n    DOM_INPUT_METHOD_IME: number;\n    DOM_INPUT_METHOD_SCRIPT: number;\n    DOM_INPUT_METHOD_VOICE: number;\n    DOM_INPUT_METHOD_UNKNOWN: number;\n    DOM_INPUT_METHOD_PASTE: number;\n    DOM_INPUT_METHOD_HANDWRITING: number;\n    DOM_INPUT_METHOD_OPTION: number;\n    DOM_INPUT_METHOD_MULTIMODAL: number;\n}\ndeclare var TextEvent: {\n    prototype: TextEvent;\n    new(): TextEvent;\n    DOM_INPUT_METHOD_KEYBOARD: number;\n    DOM_INPUT_METHOD_DROP: number;\n    DOM_INPUT_METHOD_IME: number;\n    DOM_INPUT_METHOD_SCRIPT: number;\n    DOM_INPUT_METHOD_VOICE: number;\n    DOM_INPUT_METHOD_UNKNOWN: number;\n    DOM_INPUT_METHOD_PASTE: number;\n    DOM_INPUT_METHOD_HANDWRITING: number;\n    DOM_INPUT_METHOD_OPTION: number;\n    DOM_INPUT_METHOD_MULTIMODAL: number;\n}\n\ninterface MSHTMLHRElementExtensions extends DOML2DeprecatedColorProperty {\n}\n\ninterface AbstractView {\n    styleMedia: StyleMedia;\n    document: Document;\n}\n\ninterface DocumentFragment extends Node, NodeSelector, MSEventAttachmentTarget, MSNodeExtensions {\n}\ndeclare var DocumentFragment: {\n    prototype: DocumentFragment;\n    new(): DocumentFragment;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLFieldSetElement {\n    align: string;\n}\n\ninterface SVGPolylineElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGAnimatedPoints, SVGTests {\n}\ndeclare var SVGPolylineElement: {\n    prototype: SVGPolylineElement;\n    new(): SVGPolylineElement;\n}\n\ninterface DOML2DeprecatedWidthStyle {\n    width: number;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLHeadingElement {\n    align: string;\n}\n\ninterface SVGAnimatedPathData {\n    pathSegList: SVGPathSegList;\n}\n\ninterface Position {\n    timestamp: Date;\n    coords: Coordinates;\n}\ndeclare var Position: {\n    prototype: Position;\n    new(): Position;\n}\n\ninterface BookmarkCollection {\n    length: number;\n    item(index: number): any;\n    [index: number]: any;\n}\ndeclare var BookmarkCollection: {\n    prototype: BookmarkCollection;\n    new(): BookmarkCollection;\n}\n\ninterface CSSPageRule extends CSSRule, StyleSheetPage {\n    selectorText: string;\n    style: CSSStyleDeclaration;\n}\ndeclare var CSSPageRule: {\n    prototype: CSSPageRule;\n    new(): CSSPageRule;\n}\n\ninterface WindowPerformance {\n    performance: any;\n}\n\ninterface HTMLBRElement extends HTMLElement, DOML2DeprecatedTextFlowControl_HTMLBRElement {\n}\ndeclare var HTMLBRElement: {\n    prototype: HTMLBRElement;\n    new(): HTMLBRElement;\n}\n\ninterface MSHTMLDivElementExtensions extends DOML2DeprecatedWordWrapSuppression_HTMLDivElement {\n}\n\ninterface DOML2DeprecatedBorderStyle_HTMLInputElement {\n    border: string;\n}\n\ninterface HTMLSpanElement extends HTMLElement, MSHTMLSpanElementExtensions, MSDataBindingExtensions {\n}\ndeclare var HTMLSpanElement: {\n    prototype: HTMLSpanElement;\n    new(): HTMLSpanElement;\n}\n\ninterface HTMLHRElementDOML2Deprecated {\n    noShade: bool;\n}\n\ninterface HTMLHeadElement extends HTMLElement {\n    profile: string;\n}\ndeclare var HTMLHeadElement: {\n    prototype: HTMLHeadElement;\n    new(): HTMLHeadElement;\n}\n\ninterface NodeFilterCallback {\n    (...args: any[]): any;\n}\n\ninterface HTMLHeadingElement extends HTMLElement, DOML2DeprecatedAlignmentStyle_HTMLHeadingElement, MSHTMLHeadingElementExtensions {\n}\ndeclare var HTMLHeadingElement: {\n    prototype: HTMLHeadingElement;\n    new(): HTMLHeadingElement;\n}\n\ninterface HTMLFormElement extends HTMLElement, MSHTMLFormElementExtensions, MSHTMLCollectionExtensions {\n    length: number;\n    target: string;\n    acceptCharset: string;\n    enctype: string;\n    elements: HTMLCollection;\n    action: string;\n    name: string;\n    method: string;\n    reset(): void;\n    item(name?: any, index?: any): any;\n    (name: any, index: any): any;\n    submit(): void;\n    namedItem(name: string): any;\n    [name: string]: any;\n    (name: string): any;\n}\ndeclare var HTMLFormElement: {\n    prototype: HTMLFormElement;\n    new(): HTMLFormElement;\n}\n\ninterface SVGZoomAndPan {\n    zoomAndPan: number;\n    SVG_ZOOMANDPAN_MAGNIFY: number;\n    SVG_ZOOMANDPAN_UNKNOWN: number;\n    SVG_ZOOMANDPAN_DISABLE: number;\n}\ndeclare var SVGZoomAndPan: {\n    prototype: SVGZoomAndPan;\n    new(): SVGZoomAndPan;\n    SVG_ZOOMANDPAN_MAGNIFY: number;\n    SVG_ZOOMANDPAN_UNKNOWN: number;\n    SVG_ZOOMANDPAN_DISABLE: number;\n}\n\ninterface MSEventExtensions {\n    cancelBubble: bool;\n    srcElement: Element;\n}\n\ninterface HTMLMediaElement extends HTMLElement {\n    initialTime: number;\n    played: TimeRanges;\n    currentSrc: string;\n    readyState: string;\n    autobuffer: bool;\n    loop: bool;\n    ended: bool;\n    buffered: TimeRanges;\n    error: MediaError;\n    seekable: TimeRanges;\n    autoplay: bool;\n    controls: bool;\n    volume: number;\n    src: string;\n    playbackRate: number;\n    duration: number;\n    muted: bool;\n    defaultPlaybackRate: number;\n    paused: bool;\n    seeking: bool;\n    currentTime: number;\n    preload: string;\n    networkState: number;\n    pause(): void;\n    play(): void;\n    load(): void;\n    canPlayType(type: string): string;\n    HAVE_METADATA: number;\n    HAVE_CURRENT_DATA: number;\n    HAVE_NOTHING: number;\n    NETWORK_NO_SOURCE: number;\n    HAVE_ENOUGH_DATA: number;\n    NETWORK_EMPTY: number;\n    NETWORK_LOADING: number;\n    NETWORK_IDLE: number;\n    HAVE_FUTURE_DATA: number;\n}\ndeclare var HTMLMediaElement: {\n    prototype: HTMLMediaElement;\n    new(): HTMLMediaElement;\n    HAVE_METADATA: number;\n    HAVE_CURRENT_DATA: number;\n    HAVE_NOTHING: number;\n    NETWORK_NO_SOURCE: number;\n    HAVE_ENOUGH_DATA: number;\n    NETWORK_EMPTY: number;\n    NETWORK_LOADING: number;\n    NETWORK_IDLE: number;\n    HAVE_FUTURE_DATA: number;\n}\n\ninterface ElementCSSInlineStyle extends MSElementCSSInlineStyleExtensions {\n    runtimeStyle: MSStyleCSSProperties;\n    currentStyle: MSCurrentStyleCSSProperties;\n}\n\ninterface DOMParser {\n    parseFromString(source: string, mimeType: string): Document;\n}\ndeclare var DOMParser: {\n    prototype: DOMParser;\n    new (): DOMParser;\n}\n\ninterface MSMimeTypesCollection {\n    length: number;\n}\ndeclare var MSMimeTypesCollection: {\n    prototype: MSMimeTypesCollection;\n    new(): MSMimeTypesCollection;\n}\n\ninterface StyleSheet {\n    disabled: bool;\n    ownerNode: Node;\n    parentStyleSheet: StyleSheet;\n    href: string;\n    media: MediaList;\n    type: string;\n    title: string;\n}\ndeclare var StyleSheet: {\n    prototype: StyleSheet;\n    new(): StyleSheet;\n}\n\ninterface DOML2DeprecatedBorderStyle_HTMLTableElement {\n    border: string;\n}\n\ninterface DOML2DeprecatedWidthStyle_HTMLAppletElement {\n    width: number;\n}\n\ninterface SVGTextPathElement extends SVGTextContentElement, SVGURIReference {\n    startOffset: SVGAnimatedLength;\n    method: SVGAnimatedEnumeration;\n    spacing: SVGAnimatedEnumeration;\n    TEXTPATH_SPACINGTYPE_EXACT: number;\n    TEXTPATH_METHODTYPE_STRETCH: number;\n    TEXTPATH_SPACINGTYPE_AUTO: number;\n    TEXTPATH_SPACINGTYPE_UNKNOWN: number;\n    TEXTPATH_METHODTYPE_UNKNOWN: number;\n    TEXTPATH_METHODTYPE_ALIGN: number;\n}\ndeclare var SVGTextPathElement: {\n    prototype: SVGTextPathElement;\n    new(): SVGTextPathElement;\n    TEXTPATH_SPACINGTYPE_EXACT: number;\n    TEXTPATH_METHODTYPE_STRETCH: number;\n    TEXTPATH_SPACINGTYPE_AUTO: number;\n    TEXTPATH_SPACINGTYPE_UNKNOWN: number;\n    TEXTPATH_METHODTYPE_UNKNOWN: number;\n    TEXTPATH_METHODTYPE_ALIGN: number;\n}\n\ninterface NodeList {\n    length: number;\n    item(index: number): Node;\n    [index: number]: Node;\n}\ndeclare var NodeList: {\n    prototype: NodeList;\n    new(): NodeList;\n}\n\ninterface HTMLDTElement extends HTMLElement, DOML2DeprecatedWordWrapSuppression_HTMLDTElement {\n}\ndeclare var HTMLDTElement: {\n    prototype: HTMLDTElement;\n    new(): HTMLDTElement;\n}\n\ninterface XMLSerializer {\n    serializeToString(target: Node): string;\n}\ndeclare var XMLSerializer: {\n    prototype: XMLSerializer;\n    new (): XMLSerializer;\n}\n\ninterface StyleSheetPage {\n    pseudoClass: string;\n    selector: string;\n}\n\ninterface DOML2DeprecatedWordWrapSuppression_HTMLDDElement {\n    noWrap: bool;\n}\n\ninterface MSHTMLTableRowElementExtensions {\n    height: any;\n}\n\ninterface SVGGradientElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGURIReference {\n    spreadMethod: SVGAnimatedEnumeration;\n    gradientTransform: SVGAnimatedTransformList;\n    gradientUnits: SVGAnimatedEnumeration;\n    SVG_SPREADMETHOD_REFLECT: number;\n    SVG_SPREADMETHOD_PAD: number;\n    SVG_SPREADMETHOD_UNKNOWN: number;\n    SVG_SPREADMETHOD_REPEAT: number;\n}\ndeclare var SVGGradientElement: {\n    prototype: SVGGradientElement;\n    new(): SVGGradientElement;\n    SVG_SPREADMETHOD_REFLECT: number;\n    SVG_SPREADMETHOD_PAD: number;\n    SVG_SPREADMETHOD_UNKNOWN: number;\n    SVG_SPREADMETHOD_REPEAT: number;\n}\n\ninterface DOML2DeprecatedTextFlowControl_HTMLBRElement {\n    clear: string;\n}\n\ninterface MSHTMLParagraphElementExtensions extends DOML2DeprecatedTextFlowControl_HTMLBlockElement {\n}\n\ninterface NodeFilter {\n    acceptNode(n: Node): number;\n    SHOW_ENTITY_REFERENCE: number;\n    SHOW_NOTATION: number;\n    SHOW_ENTITY: number;\n    SHOW_DOCUMENT: number;\n    SHOW_PROCESSING_INSTRUCTION: number;\n    FILTER_REJECT: number;\n    SHOW_CDATA_SECTION: number;\n    FILTER_ACCEPT: number;\n    SHOW_ALL: number;\n    SHOW_DOCUMENT_TYPE: number;\n    SHOW_TEXT: number;\n    SHOW_ELEMENT: number;\n    SHOW_COMMENT: number;\n    FILTER_SKIP: number;\n    SHOW_ATTRIBUTE: number;\n    SHOW_DOCUMENT_FRAGMENT: number;\n}\ndeclare var NodeFilter: {\n    prototype: NodeFilter;\n    new(): NodeFilter;\n    SHOW_ENTITY_REFERENCE: number;\n    SHOW_NOTATION: number;\n    SHOW_ENTITY: number;\n    SHOW_DOCUMENT: number;\n    SHOW_PROCESSING_INSTRUCTION: number;\n    FILTER_REJECT: number;\n    SHOW_CDATA_SECTION: number;\n    FILTER_ACCEPT: number;\n    SHOW_ALL: number;\n    SHOW_DOCUMENT_TYPE: number;\n    SHOW_TEXT: number;\n    SHOW_ELEMENT: number;\n    SHOW_COMMENT: number;\n    FILTER_SKIP: number;\n    SHOW_ATTRIBUTE: number;\n    SHOW_DOCUMENT_FRAGMENT: number;\n}\n\ninterface MSBorderColorStyle_HTMLFrameElement {\n    borderColor: any;\n}\n\ninterface MSHTMLOListElementExtensions {\n}\n\ninterface DOML2DeprecatedWordWrapSuppression_HTMLDTElement {\n    noWrap: bool;\n}\n\ninterface ScreenView extends AbstractView {\n    outerWidth: number;\n    pageXOffset: number;\n    innerWidth: number;\n    pageYOffset: number;\n    screenY: number;\n    outerHeight: number;\n    screen: Screen;\n    innerHeight: number;\n    screenX: number;\n    scroll(x?: number, y?: number): void;\n    scrollBy(x?: number, y?: number): void;\n    scrollTo(x?: number, y?: number): void;\n}\n\ninterface DOML2DeprecatedMarginStyle_HTMLObjectElement {\n    vspace: number;\n    hspace: number;\n}\n\ninterface DOML2DeprecatedMarginStyle_HTMLInputElement {\n    vspace: number;\n    hspace: number;\n}\n\ninterface MSHTMLTableSectionElementExtensions extends DOML2DeprecatedBackgroundColorStyle {\n    moveRow(indexFrom?: number, indexTo?: number): Object;\n}\n\ninterface HTMLFieldSetElement extends HTMLElement, MSHTMLFieldSetElementExtensions {\n    form: HTMLFormElement;\n}\ndeclare var HTMLFieldSetElement: {\n    prototype: HTMLFieldSetElement;\n    new(): HTMLFieldSetElement;\n}\n\ninterface MediaError {\n    code: number;\n    MEDIA_ERR_ABORTED: number;\n    MEDIA_ERR_NETWORK: number;\n    MEDIA_ERR_SRC_NOT_SUPPORTED: number;\n    MEDIA_ERR_DECODE: number;\n}\ndeclare var MediaError: {\n    prototype: MediaError;\n    new(): MediaError;\n    MEDIA_ERR_ABORTED: number;\n    MEDIA_ERR_NETWORK: number;\n    MEDIA_ERR_SRC_NOT_SUPPORTED: number;\n    MEDIA_ERR_DECODE: number;\n}\n\ninterface SVGNumberList {\n    numberOfItems: number;\n    replaceItem(newItem: SVGNumber, index: number): SVGNumber;\n    getItem(index: number): SVGNumber;\n    clear(): void;\n    appendItem(newItem: SVGNumber): SVGNumber;\n    initialize(newItem: SVGNumber): SVGNumber;\n    removeItem(index: number): SVGNumber;\n    insertItemBefore(newItem: SVGNumber, index: number): SVGNumber;\n}\ndeclare var SVGNumberList: {\n    prototype: SVGNumberList;\n    new(): SVGNumberList;\n}\n\ninterface HTMLBGSoundElement extends HTMLElement {\n    balance: any;\n    volume: any;\n    src: string;\n    loop: number;\n}\ndeclare var HTMLBGSoundElement: {\n    prototype: HTMLBGSoundElement;\n    new(): HTMLBGSoundElement;\n}\n\ninterface HTMLElement extends Element, MSHTMLElementRangeExtensions, ElementCSSInlineStyle, MSEventAttachmentTarget, MSHTMLElementExtensions, MSNodeExtensions {\n    ondragend: (ev: DragEvent) => any;\n    onkeydown: (ev: KeyboardEvent) => any;\n    ondragover: (ev: DragEvent) => any;\n    onkeyup: (ev: KeyboardEvent) => any;\n    offsetTop: number;\n    onreset: (ev: Event) => any;\n    onmouseup: (ev: MouseEvent) => any;\n    ondragstart: (ev: DragEvent) => any;\n    ondrag: (ev: DragEvent) => any;\n    innerHTML: string;\n    onmouseover: (ev: MouseEvent) => any;\n    ondragleave: (ev: DragEvent) => any;\n    lang: string;\n    onpause: (ev: Event) => any;\n    className: string;\n    onseeked: (ev: Event) => any;\n    onmousedown: (ev: MouseEvent) => any;\n    title: string;\n    onclick: (ev: MouseEvent) => any;\n    onwaiting: (ev: Event) => any;\n    outerHTML: string;\n    offsetLeft: number;\n    ondurationchange: (ev: Event) => any;\n    offsetHeight: number;\n    dir: string;\n    onblur: (ev: FocusEvent) => any;\n    onemptied: (ev: Event) => any;\n    onseeking: (ev: Event) => any;\n    oncanplay: (ev: Event) => any;\n    onstalled: (ev: Event) => any;\n    onmousemove: (ev: MouseEvent) => any;\n    style: MSStyleCSSProperties;\n    isContentEditable: bool;\n    onratechange: (ev: Event) => any;\n    onloadstart: (ev: Event) => any;\n    ondragenter: (ev: DragEvent) => any;\n    contentEditable: string;\n    onsubmit: (ev: Event) => any;\n    tabIndex: number;\n    onprogress: (ev: any) => any;\n    ondblclick: (ev: MouseEvent) => any;\n    oncontextmenu: (ev: MouseEvent) => any;\n    onchange: (ev: Event) => any;\n    onloadedmetadata: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    onplay: (ev: Event) => any;\n    id: string;\n    onplaying: (ev: Event) => any;\n    oncanplaythrough: (ev: Event) => any;\n    onabort: (ev: UIEvent) => any;\n    onreadystatechange: (ev: Event) => any;\n    onkeypress: (ev: KeyboardEvent) => any;\n    offsetParent: Element;\n    onloadeddata: (ev: Event) => any;\n    disabled: bool;\n    onsuspend: (ev: Event) => any;\n    accessKey: string;\n    onfocus: (ev: FocusEvent) => any;\n    ontimeupdate: (ev: Event) => any;\n    onselect: (ev: UIEvent) => any;\n    ondrop: (ev: DragEvent) => any;\n    offsetWidth: number;\n    onmouseout: (ev: MouseEvent) => any;\n    onended: (ev: Event) => any;\n    onscroll: (ev: UIEvent) => any;\n    onmousewheel: (ev: MouseWheelEvent) => any;\n    onvolumechange: (ev: Event) => any;\n    onload: (ev: Event) => any;\n    oninput: (ev: Event) => any;\n    click(): void;\n    getElementsByClassName(classNames: string): NodeList;\n    scrollIntoView(top?: bool): void;\n    focus(): void;\n    blur(): void;\n    insertAdjacentHTML(where: string, html: string): void;\n}\ndeclare var HTMLElement: {\n    prototype: HTMLElement;\n    new(): HTMLElement;\n}\n\ninterface Comment extends CharacterData, MSCommentExtensions {\n}\ndeclare var Comment: {\n    prototype: Comment;\n    new(): Comment;\n}\n\ninterface CanvasPattern {\n}\ndeclare var CanvasPattern: {\n    prototype: CanvasPattern;\n    new(): CanvasPattern;\n}\n\ninterface HTMLHRElement extends HTMLElement, DOML2DeprecatedWidthStyle_HTMLHRElement, MSHTMLHRElementExtensions, HTMLHRElementDOML2Deprecated, DOML2DeprecatedAlignmentStyle_HTMLHRElement, DOML2DeprecatedSizeProperty {\n}\ndeclare var HTMLHRElement: {\n    prototype: HTMLHRElement;\n    new(): HTMLHRElement;\n}\n\ninterface MSHTMLFrameSetElementExtensions {\n    name: string;\n    frameBorder: string;\n    border: string;\n    frameSpacing: any;\n}\n\ninterface DOML2DeprecatedTextFlowControl_HTMLBlockElement {\n    clear: string;\n}\n\ninterface PositionOptions {\n    enableHighAccuracy?: bool;\n    timeout?: number;\n    maximumAge?: number;\n}\n\ninterface HTMLObjectElement extends HTMLElement, MSHTMLObjectElementExtensions, GetSVGDocument, DOML2DeprecatedMarginStyle_HTMLObjectElement, MSDataBindingExtensions, MSDataBindingRecordSetExtensions, DOML2DeprecatedAlignmentStyle_HTMLObjectElement, DOML2DeprecatedBorderStyle_HTMLObjectElement {\n    width: string;\n    codeType: string;\n    archive: string;\n    standby: string;\n    name: string;\n    useMap: string;\n    form: HTMLFormElement;\n    data: string;\n    height: string;\n    contentDocument: Document;\n    codeBase: string;\n    declare: bool;\n    type: string;\n    code: string;\n}\ndeclare var HTMLObjectElement: {\n    prototype: HTMLObjectElement;\n    new(): HTMLObjectElement;\n}\n\ninterface MSHTMLMenuElementExtensions {\n}\n\ninterface DocumentView {\n    defaultView: AbstractView;\n    elementFromPoint(x: number, y: number): Element;\n}\n\ninterface StorageEvent extends Event {\n    oldValue: any;\n    newValue: any;\n    url: string;\n    storageArea: Storage;\n    key: string;\n    initStorageEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, keyArg: string, oldValueArg: any, newValueArg: any, urlArg: string, storageAreaArg: Storage): void;\n}\ndeclare var StorageEvent: {\n    prototype: StorageEvent;\n    new(): StorageEvent;\n}\n\ninterface HTMLEmbedElement extends HTMLElement, GetSVGDocument, MSHTMLEmbedElementExtensions {\n    width: string;\n    src: string;\n    name: string;\n    height: string;\n}\ndeclare var HTMLEmbedElement: {\n    prototype: HTMLEmbedElement;\n    new(): HTMLEmbedElement;\n}\n\ninterface CharacterData extends Node {\n    length: number;\n    data: string;\n    deleteData(offset: number, count: number): void;\n    replaceData(offset: number, count: number, arg: string): void;\n    appendData(arg: string): void;\n    insertData(offset: number, arg: string): void;\n    substringData(offset: number, count: number): string;\n}\ndeclare var CharacterData: {\n    prototype: CharacterData;\n    new(): CharacterData;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLTableSectionElement {\n    align: string;\n}\n\ninterface HTMLOptGroupElement extends HTMLElement, MSDataBindingExtensions, MSHTMLOptGroupElementExtensions {\n    label: string;\n}\ndeclare var HTMLOptGroupElement: {\n    prototype: HTMLOptGroupElement;\n    new(): HTMLOptGroupElement;\n}\n\ninterface HTMLIsIndexElement extends HTMLElement, MSHTMLIsIndexElementExtensions {\n    form: HTMLFormElement;\n    prompt: string;\n}\ndeclare var HTMLIsIndexElement: {\n    prototype: HTMLIsIndexElement;\n    new(): HTMLIsIndexElement;\n}\n\ninterface SVGPathSegLinetoRel extends SVGPathSeg {\n    y: number;\n    x: number;\n}\ndeclare var SVGPathSegLinetoRel: {\n    prototype: SVGPathSegLinetoRel;\n    new(): SVGPathSegLinetoRel;\n}\n\ninterface MSHTMLDocumentSelection {\n    selection: MSSelection;\n}\n\ninterface DOMException {\n    code: number;\n    message: string;\n    toString(): string;\n    HIERARCHY_REQUEST_ERR: number;\n    NO_MODIFICATION_ALLOWED_ERR: number;\n    INVALID_MODIFICATION_ERR: number;\n    NAMESPACE_ERR: number;\n    INVALID_CHARACTER_ERR: number;\n    TYPE_MISMATCH_ERR: number;\n    ABORT_ERR: number;\n    INVALID_STATE_ERR: number;\n    SECURITY_ERR: number;\n    NETWORK_ERR: number;\n    WRONG_DOCUMENT_ERR: number;\n    QUOTA_EXCEEDED_ERR: number;\n    INDEX_SIZE_ERR: number;\n    DOMSTRING_SIZE_ERR: number;\n    SYNTAX_ERR: number;\n    SERIALIZE_ERR: number;\n    VALIDATION_ERR: number;\n    NOT_FOUND_ERR: number;\n    URL_MISMATCH_ERR: number;\n    PARSE_ERR: number;\n    NO_DATA_ALLOWED_ERR: number;\n    NOT_SUPPORTED_ERR: number;\n    INVALID_ACCESS_ERR: number;\n    INUSE_ATTRIBUTE_ERR: number;\n}\ndeclare var DOMException: {\n    prototype: DOMException;\n    new(): DOMException;\n    HIERARCHY_REQUEST_ERR: number;\n    NO_MODIFICATION_ALLOWED_ERR: number;\n    INVALID_MODIFICATION_ERR: number;\n    NAMESPACE_ERR: number;\n    INVALID_CHARACTER_ERR: number;\n    TYPE_MISMATCH_ERR: number;\n    ABORT_ERR: number;\n    INVALID_STATE_ERR: number;\n    SECURITY_ERR: number;\n    NETWORK_ERR: number;\n    WRONG_DOCUMENT_ERR: number;\n    QUOTA_EXCEEDED_ERR: number;\n    INDEX_SIZE_ERR: number;\n    DOMSTRING_SIZE_ERR: number;\n    SYNTAX_ERR: number;\n    SERIALIZE_ERR: number;\n    VALIDATION_ERR: number;\n    NOT_FOUND_ERR: number;\n    URL_MISMATCH_ERR: number;\n    PARSE_ERR: number;\n    NO_DATA_ALLOWED_ERR: number;\n    NOT_SUPPORTED_ERR: number;\n    INVALID_ACCESS_ERR: number;\n    INUSE_ATTRIBUTE_ERR: number;\n}\n\ninterface MSCompatibleInfoCollection {\n    length: number;\n    item(index: number): MSCompatibleInfo;\n}\ndeclare var MSCompatibleInfoCollection: {\n    prototype: MSCompatibleInfoCollection;\n    new(): MSCompatibleInfoCollection;\n}\n\ninterface MSHTMLIsIndexElementExtensions {\n    action: string;\n}\n\ninterface SVGAnimatedBoolean {\n    animVal: bool;\n    baseVal: bool;\n}\ndeclare var SVGAnimatedBoolean: {\n    prototype: SVGAnimatedBoolean;\n    new(): SVGAnimatedBoolean;\n}\n\ninterface SVGSwitchElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests {\n}\ndeclare var SVGSwitchElement: {\n    prototype: SVGSwitchElement;\n    new(): SVGSwitchElement;\n}\n\ninterface MSHTMLIFrameElementExtensions extends DOML2DeprecatedMarginStyle_MSHTMLIFrameElementExtensions, DOML2DeprecatedBorderStyle_MSHTMLIFrameElementExtensions {\n    onload: (ev: Event) => any;\n    frameSpacing: any;\n    noResize: bool;\n}\n\ninterface SVGPreserveAspectRatio {\n    align: number;\n    meetOrSlice: number;\n    SVG_PRESERVEASPECTRATIO_NONE: number;\n    SVG_PRESERVEASPECTRATIO_XMINYMID: number;\n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\n    SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\n    SVG_MEETORSLICE_UNKNOWN: number;\n    SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\n    SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\n    SVG_MEETORSLICE_MEET: number;\n   SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\n    SVG_MEETORSLICE_SLICE: number;\n    SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\n}\ndeclare var SVGPreserveAspectRatio: {\n    prototype: SVGPreserveAspectRatio;\n    new(): SVGPreserveAspectRatio;\n    SVG_PRESERVEASPECTRATIO_NONE: number;\n    SVG_PRESERVEASPECTRATIO_XMINYMID: number;\n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\n    SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\n    SVG_MEETORSLICE_UNKNOWN: number;\n    SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\n    SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\n    SVG_MEETORSLICE_MEET: number;\n    SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\n    SVG_MEETORSLICE_SLICE: number;\n    SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\n}\n\ninterface Attr extends Node, MSAttrExtensions {\n    specified: bool;\n    ownerElement: Element;\n    value: string;\n    name: string;\n}\ndeclare var Attr: {\n    prototype: Attr;\n    new(): Attr;\n}\n\ninterface MSBorderColorStyle_HTMLTableRowElement {\n    borderColor: any;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLTableCaptionElement {\n    align: string;\n}\n\ninterface PerformanceNavigation {\n    redirectCount: number;\n    type: number;\n    toJSON(): any;\n    TYPE_RELOAD: number;\n    TYPE_RESERVED: number;\n    TYPE_BACK_FORWARD: number;\n    TYPE_NAVIGATE: number;\n}\ndeclare var PerformanceNavigation: {\n    prototype: PerformanceNavigation;\n    new(): PerformanceNavigation;\n    TYPE_RELOAD: number;\n    TYPE_RESERVED: number;\n    TYPE_BACK_FORWARD: number;\n    TYPE_NAVIGATE: number;\n}\n\ninterface HTMLBodyElementDOML2Deprecated {\n    link: any;\n    aLink: any;\n    text: any;\n    vLink: any;\n}\n\ninterface SVGStopElement extends SVGElement, SVGStylable {\n    offset: SVGAnimatedNumber;\n}\ndeclare var SVGStopElement: {\n    prototype: SVGStopElement;\n    new(): SVGStopElement;\n}\n\ninterface PositionCallback {\n    (position: Position): void;\n}\n\ninterface SVGSymbolElement extends SVGElement, SVGStylable, SVGLangSpace, SVGFitToViewBox {\n}\ndeclare var SVGSymbolElement: {\n    prototype: SVGSymbolElement;\n    new(): SVGSymbolElement;\n}\n\ninterface SVGElementInstanceList {\n    length: number;\n    item(index: number): SVGElementInstance;\n}\ndeclare var SVGElementInstanceList: {\n    prototype: SVGElementInstanceList;\n    new(): SVGElementInstanceList;\n}\n\ninterface MSDataBindingRecordSetExtensions {\n    recordset: Object;\n    namedRecordset(dataMember: string, hierarchy?: any): Object;\n}\n\ninterface CSSRuleList {\n    length: number;\n    item(index: number): CSSRule;\n    [index: number]: CSSRule;\n}\ndeclare var CSSRuleList: {\n    prototype: CSSRuleList;\n    new(): CSSRuleList;\n}\n\ninterface MSHTMLTableColElementExtensions {\n}\n\ninterface LinkStyle {\n    sheet: StyleSheet;\n}\n\ninterface MSHTMLMarqueeElementExtensions {\n}\n\ninterface HTMLVideoElement extends HTMLMediaElement {\n    width: number;\n    videoWidth: number;\n    videoHeight: number;\n    height: number;\n    poster: string;\n}\ndeclare var HTMLVideoElement: {\n    prototype: HTMLVideoElement;\n    new(): HTMLVideoElement;\n}\n\ninterface MSXMLHttpRequestExtensions {\n    responseBody: any;\n    timeout: number;\n    ontimeout: (ev: Event) => any;\n}\n\ninterface ClientRectList {\n    length: number;\n    item(index: number): ClientRect;\n    [index: number]: ClientRect;\n}\ndeclare var ClientRectList: {\n    prototype: ClientRectList;\n    new(): ClientRectList;\n}\n\ninterface DOML2DeprecatedAlignmentStyle_HTMLTableCellElement {\n    align: string;\n}\n\ninterface SVGMaskElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGTests {\n    y: SVGAnimatedLength;\n    width: SVGAnimatedLength;\n    maskUnits: SVGAnimatedEnumeration;\n    maskContentUnits: SVGAnimatedEnumeration;\n    x: SVGAnimatedLength;\n    height: SVGAnimatedLength;\n}\ndeclare var SVGMaskElement: {\n    prototype: SVGMaskElement;\n    new(): SVGMaskElement;\n}\n\ndeclare var Audio: { new (src?: string): HTMLAudioElement; };\ndeclare var Option: { new (text?: string, value?: string, defaultSelected?: bool, selected?: bool): HTMLOptionElement; };\ndeclare var Image: { new (width?: number, height?: number): HTMLImageElement; };\n\ndeclare var ondragend: (ev: DragEvent) => any;\ndeclare var onkeydown: (ev: KeyboardEvent) => any;\ndeclare var ondragover: (ev: DragEvent) => any;\ndeclare var onkeyup: (ev: KeyboardEvent) => any;\ndeclare var onreset: (ev: Event) => any;\ndeclare var onmouseup: (ev: MouseEvent) => any;\ndeclare var ondragstart: (ev: DragEvent) => any;\ndeclare var ondrag: (ev: DragEvent) => any;\ndeclare var onmouseover: (ev: MouseEvent) => any;\ndeclare var ondragleave: (ev: DragEvent) => any;\ndeclare var history: History;\ndeclare var name: string;\ndeclare var onafterprint: (ev: Event) => any;\ndeclare var onpause: (ev: Event) => any;\ndeclare var onbeforeprint: (ev: Event) => any;\ndeclare var top: Window;\ndeclare var onmousedown: (ev: MouseEvent) => any;\ndeclare var onseeked: (ev: Event) => any;\ndeclare var opener: Window;\ndeclare var onclick: (ev: MouseEvent) => any;\ndeclare var onwaiting: (ev: Event) => any;\ndeclare var ononline: (ev: Event) => any;\ndeclare var ondurationchange: (ev: Event) => any;\ndeclare var frames: Window;\ndeclare var onblur: (ev: FocusEvent) => any;\ndeclare var onemptied: (ev: Event) => any;\ndeclare var onseeking: (ev: Event) => any;\ndeclare var oncanplay: (ev: Event) => any;\ndeclare var onstalled: (ev: Event) => any;\ndeclare var onmousemove: (ev: MouseEvent) => any;\ndeclare var onoffline: (ev: Event) => any;\ndeclare var length: number;\ndeclare var onbeforeunload: (ev: BeforeUnloadEvent) => any;\ndeclare var onratechange: (ev: Event) => any;\ndeclare var onstorage: (ev: StorageEvent) => any;\ndeclare var onloadstart: (ev: Event) => any;\ndeclare var ondragenter: (ev: DragEvent) => any;\ndeclare var onsubmit: (ev: Event) => any;\ndeclare var self: Window;\ndeclare var onprogress: (ev: any) => any;\ndeclare var ondblclick: (ev: MouseEvent) => any;\ndeclare var oncontextmenu: (ev: MouseEvent) => any;\ndeclare var onchange: (ev: Event) => any;\ndeclare var onloadedmetadata: (ev: Event) => any;\ndeclare var onplay: (ev: Event) => any;\ndeclare var onerror: ErrorFunction;\ndeclare var onplaying: (ev: Event) => any;\ndeclare var parent: Window;\ndeclare var location: Location;\ndeclare var oncanplaythrough: (ev: Event) => any;\ndeclare var onabort: (ev: UIEvent) => any;\ndeclare var onreadystatechange: (ev: Event) => any;\ndeclare var onkeypress: (ev: KeyboardEvent) => any;\ndeclare var frameElement: Element;\ndeclare var onloadeddata: (ev: Event) => any;\ndeclare var onsuspend: (ev: Event) => any;\ndeclare var window: Window;\ndeclare var onfocus: (ev: FocusEvent) => any;\ndeclare var onmessage: (ev: MessageEvent) => any;\ndeclare var ontimeupdate: (ev: Event) => any;\ndeclare var onresize: (ev: UIEvent) => any;\ndeclare var navigator: Navigator;\ndeclare var onselect: (ev: UIEvent) => any;\ndeclare var ondrop: (ev: DragEvent) => any;\ndeclare var onmouseout: (ev: MouseEvent) => any;\ndeclare var onended: (ev: Event) => any;\ndeclare var onhashchange: (ev: Event) => any;\ndeclare var onunload: (ev: Event) => any;\ndeclare var onscroll: (ev: UIEvent) => any;\ndeclare var onmousewheel: (ev: MouseWheelEvent) => any;\ndeclare var onload: (ev: Event) => any;\ndeclare var onvolumechange: (ev: Event) => any;\ndeclare var oninput: (ev: Event) => any;\ndeclare function alert(message?: string): void;\ndeclare function focus(): void;\ndeclare function print(): void;\ndeclare function prompt(message?: string, defaul?: string): string;\ndeclare function toString(): string;\ndeclare function open(url?: string, target?: string, features?: string, replace?: bool): Window;\ndeclare function close(): void;\ndeclare function confirm(message?: string): bool;\ndeclare function postMessage(message: any, targetOrigin: string, ports?: any): void;\ndeclare function showModalDialog(url?: string, argument?: any, options?: any): any;\ndeclare function blur(): void;\ndeclare function getSelection(): Selection;\ndeclare function getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\ndeclare function attachEvent(event: string, listener: EventListener): bool;\ndeclare function detachEvent(event: string, listener: EventListener): void;\ndeclare var status: string;\ndeclare var onmouseleave: (ev: MouseEvent) => any;\ndeclare var screenLeft: number;\ndeclare var offscreenBuffering: any;\ndeclare var maxConnectionsPerServer: number;\ndeclare var onmouseenter: (ev: MouseEvent) => any;\ndeclare var clipboardData: DataTransfer;\ndeclare var defaultStatus: string;\ndeclare var clientInformation: Navigator;\ndeclare var closed: bool;\ndeclare var onhelp: (ev: Event) => any;\ndeclare var external: BrowserPublic;\ndeclare var event: MSEventObj;\ndeclare var onfocusout: (ev: FocusEvent) => any;\ndeclare var screenTop: number;\ndeclare var onfocusin: (ev: FocusEvent) => any;\ndeclare function showModelessDialog(url?: string, argument?: any, options?: any): Window;\ndeclare function navigate(url: string): void;\ndeclare function resizeBy(x?: number, y?: number): void;\ndeclare function item(index: any): any;\ndeclare function resizeTo(x?: number, y?: number): void;\ndeclare function createPopup(arguments?: any): MSPopupWindow;\ndeclare function toStaticHTML(html: string): string;\ndeclare function execScript(code: string, language?: string): any;\ndeclare function msWriteProfilerMark(profilerMarkName: string): void;\ndeclare function moveTo(x?: number, y?: number): void;\ndeclare function moveBy(x?: number, y?: number): void;\ndeclare function showHelp(url: string, helpArg?: any, features?: string): void;\ndeclare var performance: any;\ndeclare var outerWidth: number;\ndeclare var pageXOffset: number;\ndeclare var innerWidth: number;\ndeclare var pageYOffset: number;\ndeclare var screenY: number;\ndeclare var outerHeight: number;\ndeclare var screen: Screen;\ndeclare var innerHeight: number;\ndeclare var screenX: number;\ndeclare function scroll(x?: number, y?: number): void;\ndeclare function scrollBy(x?: number, y?: number): void;\ndeclare function scrollTo(x?: number, y?: number): void;\ndeclare var styleMedia: StyleMedia;\ndeclare var document: Document;\ndeclare function removeEventListener(type: string, listener: EventListener, useCapture?: bool): void;\ndeclare function addEventListener(type: string, listener: EventListener, useCapture?: bool): void;\ndeclare function dispatchEvent(evt: Event): bool;\ndeclare var localStorage: Storage;\ndeclare var sessionStorage: Storage;\ndeclare function clearTimeout(handle: number): void;\ndeclare function setTimeout(expression: any, msec?: number, language?: any): number;\ndeclare function clearInterval(handle: number): void;\ndeclare function setInterval(expression: any, msec?: number, language?: any): number;\n\n\n/////////////////////////////\n/// IE10 DOM APIs \n/////////////////////////////\n\ninterface HTMLBodyElement {\n    onpopstate: (ev: PopStateEvent) => any;\n}\n\ninterface MSGestureEvent extends UIEvent {\n    offsetY: number;\n    translationY: number;\n    velocityExpansion: number;\n    velocityY: number;\n    velocityAngular: number;\n    translationX: number;\n    velocityX: number;\n    hwTimestamp: number;\n    offsetX: number;\n    screenX: number;\n    rotation: number;\n    expansion: number;\n    clientY: number;\n    screenY: number;\n    scale: number;\n    gestureObject: any;\n    clientX: number;\n    initGestureEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: AbstractView, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, offsetXArg: number, offsetYArg: number, translationXArg: number, translationYArg: number, scaleArg: number, expansionArg: number, rotationArg: number, velocityXArg: number, velocityYArg: number, velocityExpansionArg: number, velocityAngularArg: number, hwTimestampArg: number): void;\n    MSGESTURE_FLAG_BEGIN: number;\n    MSGESTURE_FLAG_END: number;\n    MSGESTURE_FLAG_CANCEL: number;\n    MSGESTURE_FLAG_INERTIA: number;\n    MSGESTURE_FLAG_NONE: number;\n}\ndeclare var MSGestureEvent: {\n    prototype: MSGestureEvent;\n    new(): MSGestureEvent;\n    MSGESTURE_FLAG_BEGIN: number;\n    MSGESTURE_FLAG_END: number;\n    MSGESTURE_FLAG_CANCEL: number;\n    MSGESTURE_FLAG_INERTIA: number;\n    MSGESTURE_FLAG_NONE: number;\n}\n\ninterface HTMLAnchorElement {\n    text: string;\n}\n\ninterface HTMLInputElement {\n    validationMessage: string;\n    files: FileList;\n    max: string;\n    formTarget: string;\n    willValidate: bool;\n    step: string;\n    autofocus: bool;\n    required: bool;\n    formEnctype: string;\n    valueAsNumber: number;\n    placeholder: string;\n    formMethod: string;\n    list: HTMLElement;\n    autocomplete: string;\n    min: string;\n    formAction: string;\n    pattern: string;\n    validity: ValidityState;\n    formNoValidate: string;\n    multiple: bool;\n    checkValidity(): bool;\n    stepDown(n?: number): void;\n    stepUp(n?: number): void;\n    setCustomValidity(error: string): void;\n}\n\ninterface ErrorEvent extends Event {\n    colno: number;\n    filename: string;\n    lineno: number;\n    message: string;\n    initErrorEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, messageArg: string, filenameArg: string, linenoArg: number): void;\n}\ndeclare var ErrorEvent: {\n    prototype: ErrorEvent;\n    new(): ErrorEvent;\n}\n\ninterface SVGFilterElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGURIReference {\n    y: SVGAnimatedLength;\n    width: SVGAnimatedLength;\n    filterResX: SVGAnimatedInteger;\n    filterUnits: SVGAnimatedEnumeration;\n    primitiveUnits: SVGAnimatedEnumeration;\n    x: SVGAnimatedLength;\n    height: SVGAnimatedLength;\n    filterResY: SVGAnimatedInteger;\n    setFilterRes(filterResX: number, filterResY: number): void;\n}\ndeclare var SVGFilterElement: {\n    prototype: SVGFilterElement;\n    new(): SVGFilterElement;\n}\n\ninterface TrackEvent extends Event {\n    track: any;\n}\ndeclare var TrackEvent: {\n    prototype: TrackEvent;\n    new(): TrackEvent;\n}\n\ninterface SVGFEMergeNodeElement extends SVGElement {\n    in1: SVGAnimatedString;\n}\ndeclare var SVGFEMergeNodeElement: {\n    prototype: SVGFEMergeNodeElement;\n    new(): SVGFEMergeNodeElement;\n}\n\ninterface SVGFEFloodElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n}\ndeclare var SVGFEFloodElement: {\n    prototype: SVGFEFloodElement;\n    new(): SVGFEFloodElement;\n}\n\ninterface MSElementExtensions {\n    msRegionOverflow: string;\n    onmspointerdown: (ev: any) => any;\n    onmsgotpointercapture: (ev: any) => any;\n    onmsgesturedoubletap: (ev: any) => any;\n    onmspointerhover: (ev: any) => any;\n    onmsgesturehold: (ev: any) => any;\n    onmspointermove: (ev: any) => any;\n    onmsgesturechange: (ev: any) => any;\n    onmsgesturestart: (ev: any) => any;\n    onmspointercancel: (ev: any) => any;\n    onmsgestureend: (ev: any) => any;\n    onmsgesturetap: (ev: any) => any;\n    onmspointerout: (ev: any) => any;\n    onmsinertiastart: (ev: any) => any;\n    onmslostpointercapture: (ev: any) => any;\n    onmspointerover: (ev: any) => any;\n    msContentZoomFactor: number;\n    onmspointerup: (ev: any) => any;\n    msGetRegionContent(): MSRangeCollection;\n    msReleasePointerCapture(pointerId: number): void;\n    msSetPointerCapture(pointerId: number): void;\n}\ndeclare var MSElementExtensions: {\n    prototype: MSElementExtensions;\n    new(): MSElementExtensions;\n}\n\ninterface MSCSSScrollTranslationProperties {\n    msScrollTranslation: string;\n}\n\ninterface MSGesture {\n    target: Element;\n    addPointer(pointerId: number): void;\n    stop(): void;\n}\ndeclare var MSGesture: {\n    prototype: MSGesture;\n    new (): MSGesture;\n}\n\ninterface TextTrackCue extends EventTarget {\n    onenter: (ev: Event) => any;\n    track: TextTrack;\n    endTime: number;\n    text: string;\n    pauseOnExit: bool;\n    id: string;\n    startTime: number;\n    onexit: (ev: Event) => any;\n    getCueAsHTML(): DocumentFragment;\n}\ndeclare var TextTrackCue: {\n    prototype: TextTrackCue;\n    new(): TextTrackCue;\n}\n\ninterface MSHTMLDocumentViewExtensions {\n    msCSSOMElementFloatMetrics: bool;\n    msElementsFromPoint(x: number, y: number): NodeList;\n    msElementsFromRect(left: number, top: number, width: number, height: number): NodeList;\n}\ndeclare var MSHTMLDocumentViewExtensions: {\n    prototype: MSHTMLDocumentViewExtensions;\n    new(): MSHTMLDocumentViewExtensions;\n}\n\ninterface MSStreamReader extends MSBaseReader {\n    error: DOMError;\n    readAsArrayBuffer(stream: MSStream, size?: number): void;\n    readAsBlob(stream: MSStream, size?: number): void;\n    readAsDataURL(stream: MSStream, size?: number): void;\n    readAsText(stream: MSStream, encoding?: string, size?: number): void;\n}\ndeclare var MSStreamReader: {\n    prototype: MSStreamReader;\n    new (): MSStreamReader;\n}\n\ninterface CSSFlexibleBoxProperties {\n    msFlex: string;\n    msFlexDirection: string;\n    msFlexNegative: string;\n    msFlexPack: string;\n    msFlexWrap: string;\n    msFlexItemAlign: string;\n    msFlexOrder: string;\n    msFlexPositive: string;\n    msFlexAlign: string;\n    msFlexFlow: string;\n    msFlexPreferredSize: string;\n    msFlexLinePack: string;\n}\n\ninterface DOMTokenList {\n    length: number;\n    contains(token: string): bool;\n    remove(token: string): void;\n    toggle(token: string): bool;\n    add(token: string): void;\n    item(index: number): string;\n    [index: number]: string;\n    toString(): string;\n}\ndeclare var DOMTokenList: {\n    prototype: DOMTokenList;\n    new(): DOMTokenList;\n}\n\ninterface EventException {\n    name: string;\n}\n\ninterface SVGFEFuncAElement extends SVGComponentTransferFunctionElement {\n}\ndeclare var SVGFEFuncAElement: {\n    prototype: SVGFEFuncAElement;\n    new(): SVGFEFuncAElement;\n}\n\ninterface Performance {\n    now(): number;\n}\n\ninterface SVGFETileElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in1: SVGAnimatedString;\n}\ndeclare var SVGFETileElement: {\n    prototype: SVGFETileElement;\n    new(): SVGFETileElement;\n}\n\ninterface SVGFEBlendElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in2: SVGAnimatedString;\n    mode: SVGAnimatedEnumeration;\n    in1: SVGAnimatedString;\n    SVG_FEBLEND_MODE_DARKEN: number;\n    SVG_FEBLEND_MODE_UNKNOWN: number;\n    SVG_FEBLEND_MODE_MULTIPLY: number;\n    SVG_FEBLEND_MODE_NORMAL: number;\n    SVG_FEBLEND_MODE_SCREEN: number;\n    SVG_FEBLEND_MODE_LIGHTEN: number;\n}\ndeclare var SVGFEBlendElement: {\n    prototype: SVGFEBlendElement;\n    new(): SVGFEBlendElement;\n    SVG_FEBLEND_MODE_DARKEN: number;\n    SVG_FEBLEND_MODE_UNKNOWN: number;\n    SVG_FEBLEND_MODE_MULTIPLY: number;\n    SVG_FEBLEND_MODE_NORMAL: number;\n    SVG_FEBLEND_MODE_SCREEN: number;\n    SVG_FEBLEND_MODE_LIGHTEN: number;\n}\n\ninterface WindowTimers extends WindowTimersExtension {\n}\ndeclare var WindowTimers: {\n    prototype: WindowTimers;\n    new(): WindowTimers;\n}\n\ninterface CSSStyleDeclaration extends CSS2DTransformsProperties, CSSTransitionsProperties, CSSFontsProperties, MSCSSHighContrastProperties, CSSGridProperties, CSSAnimationsProperties, MSCSSContentZoomProperties, MSCSSScrollTranslationProperties, MSCSSTouchManipulationProperties, CSSFlexibleBoxProperties, MSCSSPositionedFloatsProperties, MSCSSRegionProperties, MSCSSSelectionBoundaryProperties, CSSMultiColumnProperties, CSSTextProperties, CSS3DTransformsProperties {\n}\n\ninterface MessageChannel {\n    port2: MessagePort;\n    port1: MessagePort;\n}\ndeclare var MessageChannel: {\n    prototype: MessageChannel;\n    new (): MessageChannel;\n}\n\ninterface SVGFEMergeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n}\ndeclare var SVGFEMergeElement: {\n    prototype: SVGFEMergeElement;\n    new(): SVGFEMergeElement;\n}\n\ninterface Navigator extends MSFileSaver {\n}\n\ninterface TransitionEvent extends Event {\n    propertyName: string;\n    elapsedTime: number;\n    initTransitionEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, propertyNameArg: string, elapsedTimeArg: number): void;\n}\ndeclare var TransitionEvent: {\n    prototype: TransitionEvent;\n    new(): TransitionEvent;\n}\n\ninterface MediaQueryList {\n    matches: bool;\n    media: string;\n    addListener(listener: MediaQueryListListener): void;\n    removeListener(listener: MediaQueryListListener): void;\n}\ndeclare var MediaQueryList: {\n    prototype: MediaQueryList;\n    new(): MediaQueryList;\n}\n\ninterface DOMError {\n    name: string;\n    toString(): string;\n}\ndeclare var DOMError: {\n    prototype: DOMError;\n    new(): DOMError;\n}\n\ninterface SVGFEPointLightElement extends SVGElement {\n    y: SVGAnimatedNumber;\n    x: SVGAnimatedNumber;\n    z: SVGAnimatedNumber;\n}\ndeclare var SVGFEPointLightElement: {\n    prototype: SVGFEPointLightElement;\n    new(): SVGFEPointLightElement;\n}\n\ninterface CSSFontsProperties {\n    msFontFeatureSettings: string;\n    fontFeatureSettings: string;\n}\n\ninterface CloseEvent extends Event {\n    wasClean: bool;\n    reason: string;\n    code: number;\n    initCloseEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, wasCleanArg: bool, codeArg: number, reasonArg: string): void;\n}\ndeclare var CloseEvent: {\n    prototype: CloseEvent;\n    new(): CloseEvent;\n}\n\ninterface WebSocket extends EventTarget {\n    protocol: string;\n    readyState: number;\n    bufferedAmount: number;\n    onopen: (ev: Event) => any;\n    extensions: string;\n    onmessage: (ev: any) => any;\n    onclose: (ev: CloseEvent) => any;\n    onerror: (ev: ErrorEvent) => any;\n    binaryType: string;\n    url: string;\n    close(code?: number, reason?: string): void;\n    send(data: any): void;\n    OPEN: number;\n    CLOSING: number;\n    CONNECTING: number;\n    CLOSED: number;\n}\ndeclare var WebSocket: {\n    prototype: WebSocket;\n    new (url: string): WebSocket;\n    new (url: string, prototcol: string): WebSocket;\n    new (url: string, prototcol: string[]): WebSocket;\n    OPEN: number;\n    CLOSING: number;\n    CONNECTING: number;\n    CLOSED: number;\n}\n\ninterface ProgressEvent extends Event {\n    loaded: number;\n    lengthComputable: bool;\n    total: number;\n    initProgressEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, lengthComputableArg: bool, loadedArg: number, totalArg: number): void;\n}\ndeclare var ProgressEvent: {\n    prototype: ProgressEvent;\n    new(): ProgressEvent;\n}\n\ninterface HTMLCanvasElement {\n    msToBlob(): Blob;\n}\n\ninterface IDBObjectStore {\n    indexNames: DOMStringList;\n    name: string;\n    transaction: IDBTransaction;\n    keyPath: string;\n    count(key?: any): IDBRequest;\n    add(value: any, key?: any): IDBRequest;\n    clear(): IDBRequest;\n    createIndex(name: string, keyPath: string, optionalParameters?: any): IDBIndex;\n    put(value: any, key?: any): IDBRequest;\n    openCursor(range?: any, direction?: string): IDBRequest;\n    deleteIndex(indexName: string): void;\n    index(name: string): IDBIndex;\n    get(key: any): IDBRequest;\n    delet(key: any): IDBRequest;\n}\ndeclare var IDBObjectStore: {\n    prototype: IDBObjectStore;\n    new(): IDBObjectStore;\n}\n\ninterface ObjectURLOptions {\n    oneTimeOnly?: bool;\n}\n\ninterface SVGFEGaussianBlurElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    stdDeviationX: SVGAnimatedNumber;\n    in1: SVGAnimatedString;\n    stdDeviationY: SVGAnimatedNumber;\n    setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;\n}\ndeclare var SVGFEGaussianBlurElement: {\n    prototype: SVGFEGaussianBlurElement;\n    new(): SVGFEGaussianBlurElement;\n}\n\ninterface MSHTMLDocumentExtensions {\n    onmspointerdown: (ev: any) => any;\n    onmspointercancel: (ev: any) => any;\n    onmsgesturedoubletap: (ev: any) => any;\n    onmsgesturetap: (ev: any) => any;\n    onmsgestureend: (ev: any) => any;\n    onmspointerout: (ev: any) => any;\n    onmsmanipulationstatechanged: (ev: any) => any;\n    onmsinertiastart: (ev: any) => any;\n    onmspointerhover: (ev: any) => any;\n    onmscontentzoom: (ev: any) => any;\n    onmsgesturehold: (ev: any) => any;\n    onmspointermove: (ev: any) => any;\n    onmspointerover: (ev: any) => any;\n    onmsgesturechange: (ev: any) => any;\n    onmsgesturestart: (ev: any) => any;\n    onmspointerup: (ev: any) => any;\n}\ndeclare var MSHTMLDocumentExtensions: {\n    prototype: MSHTMLDocumentExtensions;\n    new(): MSHTMLDocumentExtensions;\n}\n\ninterface MSCSSSelectionBoundaryProperties {\n    msUserSelect: string;\n}\n\ninterface SVGFilterPrimitiveStandardAttributes extends SVGStylable {\n    y: SVGAnimatedLength;\n    width: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    height: SVGAnimatedLength;\n    result: SVGAnimatedString;\n}\n\ninterface IDBVersionChangeEvent extends Event {\n    newVersion: number;\n    oldVersion: number;\n}\ndeclare var IDBVersionChangeEvent: {\n    prototype: IDBVersionChangeEvent;\n    new(): IDBVersionChangeEvent;\n}\n\ninterface IDBIndex {\n    unique: bool;\n    name: string;\n    keyPath: string;\n    objectStore: IDBObjectStore;\n    count(key?: any): IDBRequest;\n    getKey(key: any): IDBRequest;\n    openKeyCursor(range?: IDBKeyRange, direction?: string): IDBRequest;\n    get(key: any): IDBRequest;\n    openCursor(range?: IDBKeyRange, direction?: string): IDBRequest;\n}\ndeclare var IDBIndex: {\n    prototype: IDBIndex;\n    new(): IDBIndex;\n}\n\ninterface FileList {\n    length: number;\n    item(index: number): File;\n    [index: number]: File;\n}\ndeclare var FileList: {\n    prototype: FileList;\n    new(): FileList;\n}\n\ninterface IDBCursor {\n    source: any;\n    direction: string;\n    key: any;\n    primaryKey: any;\n    advance(count: number): void;\n    delet(): IDBRequest;\n    continu(key?: any): void;\n    update(value: any): IDBRequest;\n}\ndeclare var IDBCursor: {\n    prototype: IDBCursor;\n    new(): IDBCursor;\n}\n\ninterface CSSAnimationsProperties {\n    animationFillMode: string;\n    msAnimationDirection: string;\n    msAnimationDelay: string;\n    msAnimationFillMode: string;\n    animationIterationCount: string;\n    msAnimationPlayState: string;\n    msAnimationIterationCount: string;\n    animationDelay: string;\n    animationTimingFunction: string;\n    msAnimation: string;\n    animation: string;\n    animationDirection: string;\n    animationDuration: string;\n    animationName: string;\n    animationPlayState: string;\n    msAnimationTimingFunction: string;\n    msAnimationName: string;\n    msAnimationDuration: string;\n}\n\ninterface SVGFESpecularLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    kernelUnitLengthY: SVGAnimatedNumber;\n    surfaceScale: SVGAnimatedNumber;\n    specularExponent: SVGAnimatedNumber;\n    in1: SVGAnimatedString;\n    kernelUnitLengthX: SVGAnimatedNumber;\n    specularConstant: SVGAnimatedNumber;\n}\ndeclare var SVGFESpecularLightingElement: {\n    prototype: SVGFESpecularLightingElement;\n    new(): SVGFESpecularLightingElement;\n}\n\ninterface File extends Blob {\n    lastModifiedDate: any;\n    name: string;\n}\ndeclare var File: {\n    prototype: File;\n    new(): File;\n}\n\ninterface URL {\n    revokeObjectURL(url: string): void;\n    createObjectURL(object: any, options?: ObjectURLOptions): string;\n}\ndeclare var URL: URL;\n\ninterface RangeException {\n    name: string;\n}\n\ninterface IDBCursorWithValue extends IDBCursor {\n    value: any;\n}\ndeclare var IDBCursorWithValue: {\n    prototype: IDBCursorWithValue;\n    new(): IDBCursorWithValue;\n}\n\ninterface HTMLTextAreaElement {\n    validationMessage: string;\n    autofocus: bool;\n    validity: ValidityState;\n    required: bool;\n    maxLength: number;\n    willValidate: bool;\n    placeholder: string;\n    checkValidity(): bool;\n    setCustomValidity(error: string): void;\n}\n\ninterface XMLHttpRequestEventTarget extends EventTarget {\n    onprogress: (ev: ProgressEvent) => any;\n    onerror: (ev: ErrorEvent) => any;\n    onload: (ev: any) => any;\n    ontimeout: (ev: any) => any;\n    onabort: (ev: any) => any;\n    onloadstart: (ev: any) => any;\n    onloadend: (ev: ProgressEvent) => any;\n}\ndeclare var XMLHttpRequestEventTarget: {\n    prototype: XMLHttpRequestEventTarget;\n    new(): XMLHttpRequestEventTarget;\n}\n\ninterface IDBEnvironment {\n    msIndexedDB: IDBFactory;\n    indexedDB: IDBFactory;\n}\n\ninterface AudioTrackList extends EventTarget {\n    length: number;\n    onchange: (ev: any) => any;\n    onaddtrack: (ev: TrackEvent) => any;\n    getTrackById(id: string): AudioTrack;\n    item(index: number): AudioTrack;\n    [index: number]: AudioTrack;\n}\ndeclare var AudioTrackList: {\n    prototype: AudioTrackList;\n    new(): AudioTrackList;\n}\n\ninterface MSBaseReader extends EventTarget {\n    onprogress: (ev: ProgressEvent) => any;\n    readyState: number;\n    onabort: (ev: any) => any;\n    onloadend: (ev: ProgressEvent) => any;\n    onerror: (ev: ErrorEvent) => any;\n    onload: (ev: any) => any;\n    onloadstart: (ev: any) => any;\n    result: any;\n    abort(): void;\n    LOADING: number;\n    EMPTY: number;\n    DONE: number;\n}\n\ninterface History {\n    state: any;\n    replaceState(statedata: any, title: string, url?: string): void;\n    pushState(statedata: any, title: string, url?: string): void;\n}\n\ninterface MSProtocol {\n    protocol: string;\n}\ndeclare var MSProtocol: {\n    prototype: MSProtocol;\n    new(): MSProtocol;\n}\n\ninterface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    operator: SVGAnimatedEnumeration;\n    radiusX: SVGAnimatedNumber;\n    radiusY: SVGAnimatedNumber;\n    in1: SVGAnimatedString;\n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\n    SVG_MORPHOLOGY_OPERATOR_ERODE: number;\n    SVG_MORPHOLOGY_OPERATOR_DILATE: number;\n}\ndeclare var SVGFEMorphologyElement: {\n    prototype: SVGFEMorphologyElement;\n    new(): SVGFEMorphologyElement;\n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\n    SVG_MORPHOLOGY_OPERATOR_ERODE: number;\n    SVG_MORPHOLOGY_OPERATOR_DILATE: number;\n}\n\ninterface HTMLSelectElement {\n    validationMessage: string;\n    autofocus: bool;\n    validity: ValidityState;\n    required: bool;\n    willValidate: bool;\n    checkValidity(): bool;\n    setCustomValidity(error: string): void;\n}\n\ninterface CSSTransitionsProperties {\n    transition: string;\n    transitionDelay: string;\n    transitionDuration: string;\n    msTransitionTimingFunction: string;\n    msTransition: string;\n    msTransitionDuration: string;\n    transitionTimingFunction: string;\n    msTransitionDelay: string;\n    transitionProperty: string;\n    msTransitionProperty: string;\n}\n\ninterface SVGFEFuncRElement extends SVGComponentTransferFunctionElement {\n}\ndeclare var SVGFEFuncRElement: {\n    prototype: SVGFEFuncRElement;\n    new(): SVGFEFuncRElement;\n}\n\ninterface CSSRule {\n    KEYFRAMES_RULE: number;\n    KEYFRAME_RULE: number;\n    VIEWPORT_RULE: number;\n}\n//var CSSRule: {\n//    KEYFRAMES_RULE: number;\n//    KEYFRAME_RULE: number;\n//    VIEWPORT_RULE: number;\n//}\n\ninterface WindowTimersExtension {\n    msSetImmediate(expression: any, ...args: any[]): number;\n    clearImmediate(handle: number): void;\n    msClearImmediate(handle: number): void;\n    setImmediate(expression: any, ...args: any[]): number;\n}\n\ninterface SVGFEDisplacementMapElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in2: SVGAnimatedString;\n    xChannelSelector: SVGAnimatedEnumeration;\n    yChannelSelector: SVGAnimatedEnumeration;\n    scale: SVGAnimatedNumber;\n    in1: SVGAnimatedString;\n    SVG_CHANNEL_B: number;\n    SVG_CHANNEL_R: number;\n    SVG_CHANNEL_G: number;\n    SVG_CHANNEL_UNKNOWN: number;\n    SVG_CHANNEL_A: number;\n}\ndeclare var SVGFEDisplacementMapElement: {\n    prototype: SVGFEDisplacementMapElement;\n    new(): SVGFEDisplacementMapElement;\n    SVG_CHANNEL_B: number;\n    SVG_CHANNEL_R: number;\n    SVG_CHANNEL_G: number;\n    SVG_CHANNEL_UNKNOWN: number;\n    SVG_CHANNEL_A: number;\n}\n\ninterface MSCSSContentZoomProperties {\n    msContentZoomLimit: string;\n    msContentZooming: string;\n    msContentZoomSnapType: string;\n    msContentZoomLimitMax: any;\n    msContentZoomSnapPoints: string;\n    msContentZoomSnap: string;\n    msContentZoomLimitMin: any;\n    msContentZoomChaining: string;\n}\n\ninterface AnimationEvent extends Event {\n    animationName: string;\n    elapsedTime: number;\n    initAnimationEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, animationNameArg: string, elapsedTimeArg: number): void;\n}\ndeclare var AnimationEvent: {\n    prototype: AnimationEvent;\n    new(): AnimationEvent;\n}\n\ninterface SVGComponentTransferFunctionElement extends SVGElement {\n    tableValues: SVGAnimatedNumberList;\n    slope: SVGAnimatedNumber;\n    type: SVGAnimatedEnumeration;\n    exponent: SVGAnimatedNumber;\n    amplitude: SVGAnimatedNumber;\n    intercept: SVGAnimatedNumber;\n    offset: SVGAnimatedNumber;\n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\n}\ndeclare var SVGComponentTransferFunctionElement: {\n    prototype: SVGComponentTransferFunctionElement;\n    new(): SVGComponentTransferFunctionElement;\n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\n}\n\ninterface MSRangeCollection {\n    length: number;\n    item(index: number): Range;\n    [index: number]: Range;\n}\ndeclare var MSRangeCollection: {\n    prototype: MSRangeCollection;\n    new(): MSRangeCollection;\n}\n\ninterface MSHTMLElementExtensions {\n    onmscontentzoom: (ev: any) => any;\n    onmsmanipulationstatechanged: (ev: any) => any;\n}\ndeclare var MSHTMLElementExtensions: {\n    prototype: MSHTMLElementExtensions;\n    new(): MSHTMLElementExtensions;\n}\n\ninterface MSCSSPositionedFloatsProperties {\n    msWrapMargin: any;\n    msWrapFlow: string;\n}\n\ninterface SVGException {\n    name: string;\n}\n\ninterface SVGFEDistantLightElement extends SVGElement {\n    azimuth: SVGAnimatedNumber;\n    elevation: SVGAnimatedNumber;\n}\ndeclare var SVGFEDistantLightElement: {\n    prototype: SVGFEDistantLightElement;\n    new(): SVGFEDistantLightElement;\n}\n\ninterface MSCSSRegionProperties {\n    msFlowFrom: string;\n    msFlowInto: string;\n    msWrapThrough: string;\n}\n\ninterface SVGFEFuncBElement extends SVGComponentTransferFunctionElement {\n}\ndeclare var SVGFEFuncBElement: {\n    prototype: SVGFEFuncBElement;\n    new(): SVGFEFuncBElement;\n}\n\ninterface IDBKeyRange {\n    upper: any;\n    upperOpen: bool;\n    lower: any;\n    lowerOpen: bool;\n    bound(lower: any, upper: any, lowerOpen?: bool, upperOpen?: bool): IDBKeyRange;\n    only(value: any): IDBKeyRange;\n    lowerBound(bound: any, open?: bool): IDBKeyRange;\n    upperBound(bound: any, open?: bool): IDBKeyRange;\n}\ndeclare var IDBKeyRange: {\n    prototype: IDBKeyRange;\n    new(): IDBKeyRange;\n}\n\ninterface WindowConsole {\n    console: Console;\n}\n\ninterface SVG1_1Properties {\n    floodOpacity: string;\n    floodColor: string;\n    filter: string;\n    lightingColor: string;\n    enableBackground: string;\n    colorInterpolationFilters: string;\n}\ndeclare var SVG1_1Properties: {\n    prototype: SVG1_1Properties;\n    new(): SVG1_1Properties;\n}\n\ninterface IDBTransaction extends EventTarget {\n    oncomplete: (ev: Event) => any;\n    db: IDBDatabase;\n    mode: string;\n    error: DOMError;\n    onerror: (ev: ErrorEvent) => any;\n    onabort: (ev: any) => any;\n    abort(): void;\n    objectStore(name: string): IDBObjectStore;\n}\ndeclare var IDBTransaction: {\n    prototype: IDBTransaction;\n    new(): IDBTransaction;\n}\n\ninterface MSWindowExtensions {\n    onmspointerdown: (ev: any) => any;\n    onmspointercancel: (ev: any) => any;\n    onmsgesturedoubletap: (ev: any) => any;\n    onmsgestureend: (ev: any) => any;\n    onmsgesturetap: (ev: any) => any;\n    onmspointerout: (ev: any) => any;\n    onmspointerhover: (ev: any) => any;\n    onmsinertiastart: (ev: any) => any;\n    onmspointermove: (ev: any) => any;\n    onmsgesturehold: (ev: any) => any;\n    onmspointerover: (ev: any) => any;\n    onmsgesturechange: (ev: any) => any;\n    onmsgesturestart: (ev: any) => any;\n    onmspointerup: (ev: any) => any;\n    msIsStaticHTML(html: string): bool;\n}\ndeclare var MSWindowExtensions: {\n    prototype: MSWindowExtensions;\n    new(): MSWindowExtensions;\n}\n\ninterface AudioTrack {\n    kind: string;\n    language: string;\n    id: string;\n    label: string;\n    enabled: bool;\n}\ndeclare var AudioTrack: {\n    prototype: AudioTrack;\n    new(): AudioTrack;\n}\n\ninterface SVGFEConvolveMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    orderY: SVGAnimatedInteger;\n    kernelUnitLengthY: SVGAnimatedNumber;\n    orderX: SVGAnimatedInteger;\n    preserveAlpha: SVGAnimatedBoolean;\n    kernelMatrix: SVGAnimatedNumberList;\n    edgeMode: SVGAnimatedEnumeration;\n    kernelUnitLengthX: SVGAnimatedNumber;\n    bias: SVGAnimatedNumber;\n    targetX: SVGAnimatedInteger;\n    targetY: SVGAnimatedInteger;\n    divisor: SVGAnimatedNumber;\n    in1: SVGAnimatedString;\n    SVG_EDGEMODE_WRAP: number;\n    SVG_EDGEMODE_DUPLICATE: number;\n    SVG_EDGEMODE_UNKNOWN: number;\n    SVG_EDGEMODE_NONE: number;\n}\ndeclare var SVGFEConvolveMatrixElement: {\n    prototype: SVGFEConvolveMatrixElement;\n    new(): SVGFEConvolveMatrixElement;\n    SVG_EDGEMODE_WRAP: number;\n    SVG_EDGEMODE_DUPLICATE: number;\n    SVG_EDGEMODE_UNKNOWN: number;\n    SVG_EDGEMODE_NONE: number;\n}\n\ninterface TextTrackCueList {\n    length: number;\n    item(index: number): TextTrackCue;\n    [index: number]: TextTrackCue;\n    getCueById(id: string): TextTrackCue;\n}\ndeclare var TextTrackCueList: {\n    prototype: TextTrackCueList;\n    new(): TextTrackCueList;\n}\n\ninterface CSSKeyframesRule extends CSSRule {\n    name: string;\n    cssRules: CSSRuleList;\n    findRule(rule: string): CSSKeyframeRule;\n    deleteRule(rule: string): void;\n    appendRule(rule: string): void;\n}\ndeclare var CSSKeyframesRule: {\n    prototype: CSSKeyframesRule;\n    new(): CSSKeyframesRule;\n}\n\ninterface MSCSSTouchManipulationProperties {\n    msScrollSnapPointsY: string;\n    msOverflowStyle: string;\n    msScrollLimitXMax: any;\n    msScrollSnapType: string;\n    msScrollSnapPointsX: string;\n    msScrollLimitYMax: any;\n    msScrollSnapY: string;\n    msScrollLimitXMin: any;\n    msScrollLimitYMin: any;\n    msScrollChaining: string;\n    msTouchAction: string;\n    msScrollSnapX: string;\n    msScrollLimit: string;\n    msScrollRails: string;\n    msTouchSelect: string;\n}\n\ninterface Window extends WindowAnimationTiming, WindowBase64, IDBEnvironment, WindowConsole {\n    onpopstate: (ev: PopStateEvent) => any;\n    applicationCache: ApplicationCache;\n    matchMedia(mediaQuery: string): MediaQueryList;\n    msMatchMedia(mediaQuery: string): MediaQueryList;\n}\n\ninterface SVGFETurbulenceElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    baseFrequencyX: SVGAnimatedNumber;\n    numOctaves: SVGAnimatedInteger;\n    type: SVGAnimatedEnumeration;\n    baseFrequencyY: SVGAnimatedNumber;\n    stitchTiles: SVGAnimatedEnumeration;\n    seed: SVGAnimatedNumber;\n    SVG_STITCHTYPE_UNKNOWN: number;\n    SVG_STITCHTYPE_NOSTITCH: number;\n    SVG_TURBULENCE_TYPE_UNKNOWN: number;\n    SVG_TURBULENCE_TYPE_TURBULENCE: number;\n    SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\n    SVG_STITCHTYPE_STITCH: number;\n}\ndeclare var SVGFETurbulenceElement: {\n    prototype: SVGFETurbulenceElement;\n    new(): SVGFETurbulenceElement;\n    SVG_STITCHTYPE_UNKNOWN: number;\n    SVG_STITCHTYPE_NOSTITCH: number;\n    SVG_TURBULENCE_TYPE_UNKNOWN: number;\n    SVG_TURBULENCE_TYPE_TURBULENCE: number;\n    SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\n    SVG_STITCHTYPE_STITCH: number;\n}\n\ninterface TextTrackList {\n    length: number;\n    item(index: number): TextTrack;\n    [index: number]: TextTrack;\n}\ndeclare var TextTrackList: {\n    prototype: TextTrackList;\n    new(): TextTrackList;\n}\n\ninterface WindowAnimationTiming {\n    animationStartTime: number;\n    msAnimationStartTime: number;\n    msCancelRequestAnimationFrame(handle: number): void;\n    cancelAnimationFrame(handle: number): void;\n    requestAnimationFrame(callback: FrameRequestCallback): number;\n    msRequestAnimationFrame(callback: FrameRequestCallback): number;\n}\n\ninterface SVGFEFuncGElement extends SVGComponentTransferFunctionElement {\n}\ndeclare var SVGFEFuncGElement: {\n    prototype: SVGFEFuncGElement;\n    new(): SVGFEFuncGElement;\n}\n\ninterface SVGFEColorMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in1: SVGAnimatedString;\n    type: SVGAnimatedEnumeration;\n    values: SVGAnimatedNumberList;\n    SVG_FECOLORMATRIX_TYPE_SATURATE: number;\n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\n    SVG_FECOLORMATRIX_TYPE_MATRIX: number;\n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\n}\ndeclare var SVGFEColorMatrixElement: {\n    prototype: SVGFEColorMatrixElement;\n    new(): SVGFEColorMatrixElement;\n    SVG_FECOLORMATRIX_TYPE_SATURATE: number;\n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\n    SVG_FECOLORMATRIX_TYPE_MATRIX: number;\n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\n}\n\ninterface Console {\n    info(): void;\n    info(message: any, ...optionalParams: any[]): void;\n    profile(reportName?: string): bool;\n    assert(): void;\n    assert(test: bool): void;\n    assert(test: bool, message: any, ...optionalParams: any[]): void;\n    msIsIndependentlyComposed(element: Element): bool;\n    clear(): bool;\n    dir(): bool;\n    dir(value: any, ...optionalParams: any[]): bool;\n    warn(): void;\n    warn(message: any, ...optionalParams: any[]): void;\n    error(): void;\n    error(message: any, ...optionalParams: any[]): void;\n    log(): void;\n    log(message: any, ...optionalParams: any[]): void;\n    profileEnd(): bool;\n}\ndeclare var Console: {\n    prototype: Console;\n    new(): Console;\n}\n\ninterface SVGFESpotLightElement extends SVGElement {\n    pointsAtY: SVGAnimatedNumber;\n    y: SVGAnimatedNumber;\n    limitingConeAngle: SVGAnimatedNumber;\n    specularExponent: SVGAnimatedNumber;\n    x: SVGAnimatedNumber;\n    pointsAtZ: SVGAnimatedNumber;\n    z: SVGAnimatedNumber;\n    pointsAtX: SVGAnimatedNumber;\n}\ndeclare var SVGFESpotLightElement: {\n    prototype: SVGFESpotLightElement;\n    new(): SVGFESpotLightElement;\n}\n\ninterface DocumentVisibility {\n    msHidden: bool;\n    msVisibilityState: string;\n    visibilityState: string;\n    hidden: bool;\n}\n\ninterface WindowBase64 {\n    btoa(rawString: string): string;\n    atob(encodedString: string): string;\n}\n\ninterface IDBDatabase extends EventTarget {\n    version: string;\n    name: string;\n    objectStoreNames: DOMStringList;\n    onerror: (ev: ErrorEvent) => any;\n    onabort: (ev: any) => any;\n    createObjectStore(name: string, optionalParameters?: any): IDBObjectStore;\n    close(): void;\n    transaction(storeNames: any, mode?: string): IDBTransaction;\n    deleteObjectStore(name: string): void;\n}\ndeclare var IDBDatabase: {\n    prototype: IDBDatabase;\n    new(): IDBDatabase;\n}\n\ninterface MSProtocolsCollection {\n}\ndeclare var MSProtocolsCollection: {\n    prototype: MSProtocolsCollection;\n    new(): MSProtocolsCollection;\n}\n\ninterface DOMStringList {\n    length: number;\n    contains(str: string): bool;\n    item(index: number): string;\n    [index: number]: string;\n}\ndeclare var DOMStringList: {\n    prototype: DOMStringList;\n    new(): DOMStringList;\n}\n\ninterface CSSMultiColumnProperties {\n    breakAfter: string;\n    columnSpan: string;\n    columnRule: string;\n    columnFill: string;\n    columnRuleStyle: string;\n    breakBefore: string;\n    columnCount: any;\n    breakInside: string;\n    columnWidth: any;\n    columns: string;\n    columnRuleColor: any;\n    columnGap: any;\n    columnRuleWidth: any;\n}\n\ninterface IDBOpenDBRequest extends IDBRequest {\n    onupgradeneeded: (ev: IDBVersionChangeEvent) => any;\n    onblocked: (ev: Event) => any;\n}\ndeclare var IDBOpenDBRequest: {\n    prototype: IDBOpenDBRequest;\n    new(): IDBOpenDBRequest;\n}\n\ninterface HTMLButtonElement {\n    validationMessage: string;\n    formTarget: string;\n    willValidate: bool;\n    formAction: string;\n    autofocus: bool;\n    validity: ValidityState;\n    formNoValidate: string;\n    formEnctype: string;\n    formMethod: string;\n    checkValidity(): bool;\n    setCustomValidity(error: string): void;\n}\n\ninterface HTMLProgressElement extends HTMLElement {\n    value: number;\n    max: number;\n    position: number;\n    form: HTMLFormElement;\n}\ndeclare var HTMLProgressElement: {\n    prototype: HTMLProgressElement;\n    new(): HTMLProgressElement;\n}\n\ninterface SVGFEOffsetElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    dy: SVGAnimatedNumber;\n    in1: SVGAnimatedString;\n    dx: SVGAnimatedNumber;\n}\ndeclare var SVGFEOffsetElement: {\n    prototype: SVGFEOffsetElement;\n    new(): SVGFEOffsetElement;\n}\n\ninterface HTMLFormElement {\n    autocomplete: string;\n    noValidate: bool;\n    checkValidity(): bool;\n}\n\ninterface MSUnsafeFunctionCallback {\n    (): any;\n}\n\ninterface Document extends DocumentVisibility {\n}\n\ninterface MessageEvent extends Event {\n    ports: any;\n}\n\ninterface HTMLScriptElement {\n    async: bool;\n}\n\ninterface HTMLMediaElement extends MSHTMLMediaElementExtensions {\n    textTracks: TextTrackList;\n    audioTracks: AudioTrackList;\n}\n\ninterface TextTrack extends EventTarget {\n    language: string;\n    mode: number;\n    readyState: string;\n    activeCues: TextTrackCueList;\n    cues: TextTrackCueList;\n    oncuechange: (ev: Event) => any;\n    kind: string;\n    onload: (ev: any) => any;\n    onerror: (ev: ErrorEvent) => any;\n    label: string;\n    ERROR: number;\n    SHOWING: number;\n    LOADING: number;\n    LOADED: number;\n    NONE: number;\n    HIDDEN: number;\n    DISABLED: number;\n}\ndeclare var TextTrack: {\n    prototype: TextTrack;\n    new(): TextTrack;\n    ERROR: number;\n    SHOWING: number;\n    LOADING: number;\n    LOADED: number;\n    NONE: number;\n    HIDDEN: number;\n    DISABLED: number;\n}\n\ninterface MediaQueryListListener {\n    (mql: MediaQueryList): void;\n}\n\ninterface IDBRequest extends EventTarget {\n    source: any;\n    onsuccess: (ev: Event) => any;\n    error: DOMError;\n    transaction: IDBTransaction;\n    onerror: (ev: ErrorEvent) => any;\n    readyState: string;\n    result: any;\n}\ndeclare var IDBRequest: {\n    prototype: IDBRequest;\n    new(): IDBRequest;\n}\n\ninterface MessagePort extends EventTarget {\n    onmessage: (ev: any) => any;\n    close(): void;\n    postMessage(message: any, ports?: any): void;\n    start(): void;\n}\ndeclare var MessagePort: {\n    prototype: MessagePort;\n    new(): MessagePort;\n}\n\ninterface FileReader extends MSBaseReader {\n    error: DOMError;\n    readAsArrayBuffer(blob: Blob): void;\n    readAsDataURL(blob: Blob): void;\n    readAsText(blob: Blob, encoding?: string): void;\n}\ndeclare var FileReader: {\n    prototype: FileReader;\n    new (): FileReader;\n}\n\ninterface Blob {\n    type: string;\n    size: number;\n    msDetachStream(): any;\n    slice(start?: number, end?: number, contentType?: string): Blob;\n    close(): void;\n    msClose(): void;\n}\ninterface BlobPropertyBag {\n    /** Corresponds to the \'type\' property of the Blob object */\n    type?: string;\n    /** Either \'transparent\' or \'native\' */\n    endings?: string;\n}\ndeclare var Blob: {\n    prototype: Blob;\n    new (blobParts?: any[], options?: BlobPropertyBag): Blob;\n}\n\ninterface ApplicationCache extends EventTarget {\n    status: number;\n    ondownloading: (ev: Event) => any;\n    onprogress: (ev: ProgressEvent) => any;\n    onupdateready: (ev: Event) => any;\n    oncached: (ev: Event) => any;\n    onobsolete: (ev: Event) => any;\n    onerror: (ev: ErrorEvent) => any;\n    onchecking: (ev: Event) => any;\n    onnoupdate: (ev: Event) => any;\n    swapCache(): void;\n    abort(): void;\n    update(): void;\n    CHECKING: number;\n    UNCACHED: number;\n    UPDATEREADY: number;\n    DOWNLOADING: number;\n    IDLE: number;\n    OBSOLETE: number;\n}\ndeclare var ApplicationCache: {\n    prototype: ApplicationCache;\n    new(): ApplicationCache;\n    CHECKING: number;\n    UNCACHED: number;\n    UPDATEREADY: number;\n    DOWNLOADING: number;\n    IDLE: number;\n    OBSOLETE: number;\n}\n\ninterface MSHTMLVideoElementExtensions {\n    msIsStereo3D: bool;\n    msStereo3DPackingMode: string;\n    onMSVideoOptimalLayoutChanged: (ev: any) => any;\n    onMSVideoFrameStepCompleted: (ev: any) => any;\n    msStereo3DRenderMode: string;\n    msIsLayoutOptimalForPlayback: bool;\n    msHorizontalMirror: bool;\n    onMSVideoFormatChanged: (ev: any) => any;\n    msZoom: bool;\n    msInsertVideoEffect(activatableClassId: string, effectRequired: bool, config?: any): void;\n    msSetVideoRectangle(left: number, top: number, right: number, bottom: number): void;\n    msFrameStep(forward: bool): void;\n}\n\ninterface FrameRequestCallback {\n    (time: number): void;\n}\n\ninterface CSS3DTransformsProperties {\n    perspective: string;\n    msBackfaceVisibility: string;\n    perspectiveOrigin: string;\n    transformStyle: string;\n    backfaceVisibility: string;\n    msPerspectiveOrigin: string;\n    msTransformStyle: string;\n    msPerspective: string;\n}\n\ninterface XMLHttpRequest {\n    withCredentials: bool;\n}\n\ninterface PopStateEvent extends Event {\n    state: any;\n    initPopStateEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, stateArg: any): void;\n}\ndeclare var PopStateEvent: {\n    prototype: PopStateEvent;\n    new(): PopStateEvent;\n}\n\ninterface CSSKeyframeRule extends CSSRule {\n    keyText: string;\n    style: CSSStyleDeclaration;\n}\ndeclare var CSSKeyframeRule: {\n    prototype: CSSKeyframeRule;\n    new(): CSSKeyframeRule;\n}\n\ninterface CSSGridProperties {\n    msGridRows: string;\n    msGridColumnSpan: any;\n    msGridRow: any;\n    msGridRowSpan: any;\n    msGridColumns: string;\n    msGridColumnAlign: string;\n    msGridRowAlign: string;\n    msGridColumn: any;\n}\n\ninterface MSFileSaver {\n    msSaveBlob(blob: any, defaultName?: string): bool;\n    msSaveOrOpenBlob(blob: any, defaultName?: string): bool;\n}\n\ninterface MSStream {\n    type: string;\n    msDetachStream(): any;\n    msClose(): void;\n}\ndeclare var MSStream: {\n    prototype: MSStream;\n    new(): MSStream;\n}\n\ninterface MediaError extends MSMediaErrorExtensions {\n}\n\ninterface HTMLFieldSetElement {\n    validationMessage: string;\n    validity: ValidityState;\n    willValidate: bool;\n    checkValidity(): bool;\n    setCustomValidity(error: string): void;\n}\n\ninterface MSBlobBuilder {\n    append(data: any, endings?: string): void;\n    getBlob(contentType?: string): Blob;\n}\ndeclare var MSBlobBuilder: {\n    prototype: MSBlobBuilder;\n    new (): MSBlobBuilder;\n}\n\ninterface MSRangeExtensions {\n    createContextualFragment(fragment: string): DocumentFragment;\n}\n\ninterface HTMLElement {\n    oncuechange: (ev: Event) => any;\n    spellcheck: bool;\n    classList: DOMTokenList;\n    draggable: bool;\n}\n\ninterface DataTransfer {\n    types: DOMStringList;\n    files: FileList;\n}\n\ninterface DOMSettableTokenList extends DOMTokenList {\n    value: string;\n}\ndeclare var DOMSettableTokenList: {\n    prototype: DOMSettableTokenList;\n    new(): DOMSettableTokenList;\n}\n\ninterface IDBFactory {\n    open(name: string, version?: number): IDBOpenDBRequest;\n    cmp(first: any, second: any): number;\n    deleteDatabase(name: string): IDBOpenDBRequest;\n}\ndeclare var IDBFactory: {\n    prototype: IDBFactory;\n    new(): IDBFactory;\n}\n\ninterface Range extends MSRangeExtensions {\n}\n\ninterface HTMLObjectElement {\n    validationMessage: string;\n    validity: ValidityState;\n    willValidate: bool;\n    checkValidity(): bool;\n    setCustomValidity(error: string): void;\n}\n\ninterface MSPointerEvent extends MouseEvent {\n    width: number;\n    rotation: number;\n    pressure: number;\n    pointerType: number;\n    isPrimary: bool;\n    tiltY: number;\n    height: number;\n    intermediatePoints: any;\n    currentPoint: any;\n    tiltX: number;\n    hwTimestamp: number;\n    pointerId: number;\n    initPointerEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: AbstractView, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: number, hwTimestampArg: number, isPrimary: bool): void;\n    getCurrentPoint(element: Element): void;\n    getIntermediatePoints(element: Element): void;\n    MSPOINTER_TYPE_PEN: number;\n    MSPOINTER_TYPE_MOUSE: number;\n    MSPOINTER_TYPE_TOUCH: number;\n}\ndeclare var MSPointerEvent: {\n    prototype: MSPointerEvent;\n    new(): MSPointerEvent;\n    MSPOINTER_TYPE_PEN: number;\n    MSPOINTER_TYPE_MOUSE: number;\n    MSPOINTER_TYPE_TOUCH: number;\n}\n\ninterface CSSTextProperties {\n    textShadow: string;\n    msHyphenateLimitLines: any;\n    msHyphens: string;\n    msHyphenateLimitChars: string;\n    msHyphenateLimitZone: any;\n}\n\ninterface CSS2DTransformsProperties {\n    transform: string;\n    transformOrigin: string;\n}\n\ninterface DOMException {\n    name: string;\n    INVALID_NODE_TYPE_ERR: number;\n    DATA_CLONE_ERR: number;\n    TIMEOUT_ERR: number;\n}\n//var DOMException: {\n//    INVALID_NODE_TYPE_ERR: number;\n//    DATA_CLONE_ERR: number;\n//    TIMEOUT_ERR: number;\n//}\n\ninterface MSCSSHighContrastProperties {\n    msHighContrastAdjust: string;\n}\n\ninterface MSManipulationEvent extends UIEvent {\n    lastState: number;\n    currentState: number;\n    initMSManipulationEvent(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: AbstractView, detailArg: number, lastState: number, currentState: number): void;\n    MS_MANIPULATION_STATE_STOPPED: number;\n    MS_MANIPULATION_STATE_ACTIVE: number;\n    MS_MANIPULATION_STATE_INERTIA: number;\n}\ndeclare var MSManipulationEvent: {\n    prototype: MSManipulationEvent;\n    new(): MSManipulationEvent;\n    MS_MANIPULATION_STATE_STOPPED: number;\n    MS_MANIPULATION_STATE_ACTIVE: number;\n    MS_MANIPULATION_STATE_INERTIA: number;\n}\n\ninterface FormData {\n    append(name: any, value: any, blobName?: string): void;\n}\ndeclare var FormData: {\n    prototype: FormData;\n    new (): FormData;\n}\n\ninterface MSHTMLImageElementExtensions {\n    msPlayToPrimary: bool;\n    msPlayToDisabled: bool;\n    msPlayToSource: any;\n}\ndeclare var MSHTMLImageElementExtensions: {\n    prototype: MSHTMLImageElementExtensions;\n    new(): MSHTMLImageElementExtensions;\n}\n\ninterface MSHTMLMediaElementExtensions {\n    msAudioCategory: string;\n    msRealTime: bool;\n    msPlayToPrimary: bool;\n    msPlayToDisabled: bool;\n    msPlayToSource: any;\n    msAudioDeviceType: string;\n    msClearEffects(): void;\n    msSetMediaProtectionManager(mediaProtectionManager?: any): void;\n    msInsertAudioEffect(activatableClassId: string, effectRequired: bool, config?: any): void;\n}\n\ninterface SVGFEImageElement extends SVGElement, SVGLangSpace, SVGFilterPrimitiveStandardAttributes, SVGURIReference {\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\n}\ndeclare var SVGFEImageElement: {\n    prototype: SVGFEImageElement;\n    new(): SVGFEImageElement;\n}\n\ninterface HTMLDataListElement extends HTMLElement {\n    options: HTMLCollection;\n}\ndeclare var HTMLDataListElement: {\n    prototype: HTMLDataListElement;\n    new(): HTMLDataListElement;\n}\n\ninterface AbstractWorker extends EventTarget {\n    onerror: (ev: ErrorEvent) => any;\n}\n\ninterface SVGFECompositeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    operator: SVGAnimatedEnumeration;\n    in2: SVGAnimatedString;\n    k2: SVGAnimatedNumber;\n    k1: SVGAnimatedNumber;\n    k3: SVGAnimatedNumber;\n    in1: SVGAnimatedString;\n    k4: SVGAnimatedNumber;\n    SVG_FECOMPOSITE_OPERATOR_OUT: number;\n    SVG_FECOMPOSITE_OPERATOR_OVER: number;\n    SVG_FECOMPOSITE_OPERATOR_XOR: number;\n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\n    SVG_FECOMPOSITE_OPERATOR_IN: number;\n    SVG_FECOMPOSITE_OPERATOR_ATOP: number;\n}\ndeclare var SVGFECompositeElement: {\n    prototype: SVGFECompositeElement;\n    new(): SVGFECompositeElement;\n    SVG_FECOMPOSITE_OPERATOR_OUT: number;\n    SVG_FECOMPOSITE_OPERATOR_OVER: number;\n    SVG_FECOMPOSITE_OPERATOR_XOR: number;\n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\n    SVG_FECOMPOSITE_OPERATOR_IN: number;\n    SVG_FECOMPOSITE_OPERATOR_ATOP: number;\n}\n\ninterface ValidityState {\n    customError: bool;\n    valueMissing: bool;\n    stepMismatch: bool;\n    rangeUnderflow: bool;\n    rangeOverflow: bool;\n    typeMismatch: bool;\n    patternMismatch: bool;\n    tooLong: bool;\n    valid: bool;\n}\ndeclare var ValidityState: {\n    prototype: ValidityState;\n    new(): ValidityState;\n}\n\ninterface HTMLVideoElement extends MSHTMLVideoElementExtensions {\n}\n\ninterface HTMLTrackElement extends HTMLElement {\n    kind: string;\n    src: string;\n    srclang: string;\n    track: TextTrack;\n    label: string;\n    defaul: bool;\n}\ndeclare var HTMLTrackElement: {\n    prototype: HTMLTrackElement;\n    new(): HTMLTrackElement;\n}\n\ninterface MSApp {\n    createFileFromStorageFile(storageFile: any): File;\n    createBlobFromRandomAccessStream(type: string, seeker: any): Blob;\n    createStreamFromInputStream(type: string, inputStream: any): MSStream;\n    terminateApp(exceptionObject: any): void;\n    createDataPackage(object: any): any;\n    execUnsafeLocalFunction(unsafeFunction: MSUnsafeFunctionCallback): any;\n    getHtmlPrintDocumentSource(htmlDoc: any, printTemplate?: string): any;\n    addPublicLocalApplicationUri(uri: string): void;\n    createDataPackageFromSelection(): any;\n}\ndeclare var MSApp: MSApp;\n\ninterface MSXMLHttpRequestExtensions {\n    response: any;\n    onprogress: (ev: ProgressEvent) => any;\n    onabort: (ev: any) => any;\n    responseType: string;\n    onloadend: (ev: ProgressEvent) => any;\n    upload: XMLHttpRequestEventTarget;\n    onerror: (ev: ErrorEvent) => any;\n    onloadstart: (ev: any) => any;\n}\ndeclare var MSXMLHttpRequestExtensions: {\n    prototype: MSXMLHttpRequestExtensions;\n    new(): MSXMLHttpRequestExtensions;\n}\n\ninterface SVGFEDiffuseLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    kernelUnitLengthY: SVGAnimatedNumber;\n    surfaceScale: SVGAnimatedNumber;\n    in1: SVGAnimatedString;\n    kernelUnitLengthX: SVGAnimatedNumber;\n    diffuseConstant: SVGAnimatedNumber;\n}\ndeclare var SVGFEDiffuseLightingElement: {\n    prototype: SVGFEDiffuseLightingElement;\n    new(): SVGFEDiffuseLightingElement;\n}\n\ninterface SVGFEComponentTransferElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in1: SVGAnimatedString;\n}\ndeclare var SVGFEComponentTransferElement: {\n    prototype: SVGFEComponentTransferElement;\n    new(): SVGFEComponentTransferElement;\n}\n\ninterface MSCSSMatrix {\n    m24: number;\n    m34: number;\n    a: number;\n    d: number;\n    m32: number;\n    m41: number;\n    m11: number;\n    f: number;\n    e: number;\n    m23: number;\n    m14: number;\n    m33: number;\n    m22: number;\n    m21: number;\n    c: number;\n    m12: number;\n    b: number;\n    m42: number;\n    m31: number;\n    m43: number;\n    m13: number;\n    m44: number;\n    multiply(secondMatrix: MSCSSMatrix): MSCSSMatrix;\n    skewY(angle: number): MSCSSMatrix;\n    setMatrixValue(value: string): void;\n    inverse(): MSCSSMatrix;\n    rotateAxisAngle(x: number, y: number, z: number, angle: number): MSCSSMatrix;\n    toString(): string;\n    rotate(angleX: number, angleY?: number, angleZ?: number): MSCSSMatrix;\n    translate(x: number, y: number, z?: number): MSCSSMatrix;\n    scale(scaleX: number, scaleY?: number, scaleZ?: number): MSCSSMatrix;\n    skewX(angle: number): MSCSSMatrix;\n}\ndeclare var MSCSSMatrix: {\n    prototype: MSCSSMatrix;\n    new (text?: string): MSCSSMatrix;\n}\n\ninterface Worker extends AbstractWorker {\n    onmessage: (ev: any) => any;\n    postMessage(message: any, ports?: any): void;\n    terminate(): void;\n}\ndeclare var Worker: {\n    prototype: Worker;\n    new (stringUrl: string): Worker;\n}\n\ninterface HTMLIFrameElement {\n    sandbox: DOMSettableTokenList;\n}\n\ninterface MSMediaErrorExtensions {\n    msExtendedCode: number;\n}\n\ninterface MSNavigatorAbilities {\n    msProtocols: MSProtocolsCollection;\n    msMaxTouchPoints: number;\n    msPointerEnabled: bool;\n    msManipulationViewsEnabled: bool;\n}\ndeclare var MSNavigatorAbilities: {\n    prototype: MSNavigatorAbilities;\n    new(): MSNavigatorAbilities;\n}\n\ndeclare var onpopstate: (ev: PopStateEvent) => any;\ndeclare var applicationCache: ApplicationCache;\ndeclare function matchMedia(mediaQuery: string): MediaQueryList;\ndeclare function msMatchMedia(mediaQuery: string): MediaQueryList;\ndeclare var animationStartTime: number;\ndeclare var msAnimationStartTime: number;\ndeclare function msCancelRequestAnimationFrame(handle: number): void;\ndeclare function cancelAnimationFrame(handle: number): void;\ndeclare function requestAnimationFrame(callback: FrameRequestCallback): number;\ndeclare function msRequestAnimationFrame(callback: FrameRequestCallback): number;\ndeclare function btoa(rawString: string): string;\ndeclare function atob(encodedString: string): string;\ndeclare var msIndexedDB: IDBFactory;\ndeclare var indexedDB: IDBFactory;\ndeclare var console: Console;\n\n\n/////////////////////////////\n/// WorkerGlobalScope APIs \n/////////////////////////////\n// TODO: These are only available in a Web Worker - should be in a separate lib file\ndeclare function importScripts(...urls: string[]): void;\n\n\n/////////////////////////////\n/// Windows Script Host APIS\n/////////////////////////////\ndeclare var ActiveXObject: { new (s: string): any; };\n\ninterface ITextWriter {\n    Write(s: string): void;\n    WriteLine(s: string): void;\n    Close(): void;\n}\n\ndeclare var WScript : {\n    Echo(s: any);\n    StdErr: ITextWriter;\n    StdOut: ITextWriter;\n    Arguments: { length: number; Item(n: number): string; };\n    ScriptFullName: string;\n    Quit(exitCode?: number);\n}\n\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export module CompilerDiagnostics {\n        export var debug = false;\n        export interface IDiagnosticWriter {\n            Alert(output: string): void;\n        }\n\n        export var diagnosticWriter: IDiagnosticWriter = null;\n\n        export var analysisPass: number = 0;\n\n        export function Alert(output: string) {\n            if (diagnosticWriter) {\n                diagnosticWriter.Alert(output);\n            }\n        }\n\n        export function debugPrint(s: string) {\n            if (debug) {\n                Alert(s);\n            }\n        }\n\n        export function assert(condition: bool, s: string) {\n            if (debug) {\n                if (!condition) {\n                    Alert(s);\n                }\n            }\n        }\n\n    }\n\n    export interface ILogger {\n        information(): bool;\n        debug(): bool;\n        warning(): bool;\n        error(): bool;\n        fatal(): bool;\n        log(s: string): void;\n    }\n\n    export class NullLogger implements ILogger {\n        public information(): bool { return false; }\n        public debug(): bool { return false; }\n        public warning(): bool { return false; }\n        public error(): bool { return false; }\n        public fatal(): bool { return false; }\n        public log(s: string): void {\n        }\n    }\n\n    export class LoggerAdapter implements ILogger {\n        private _information: bool;\n        private _debug: bool;\n        private _warning: bool;\n        private _error: bool;\n        private _fatal: bool;\n\n        constructor (public logger: ILogger) { \n            this._information = this.logger.information();\n            this._debug = this.logger.debug();\n            this._warning = this.logger.warning();\n            this._error = this.logger.error();\n            this._fatal = this.logger.fatal();\n        }\n\n\n        public information(): bool { return this._information; }\n        public debug(): bool { return this._debug; }\n        public warning(): bool { return this._warning; }\n        public error(): bool { return this._error; }\n        public fatal(): bool { return this._fatal; }\n        public log(s: string): void {\n            this.logger.log(s);\n        }\n    }\n\n    export class BufferedLogger implements ILogger {\n        public logContents = [];\n\n        public information(): bool { return false; }\n        public debug(): bool { return false; }\n        public warning(): bool { return false; }\n        public error(): bool { return false; }\n        public fatal(): bool { return false; }\n        public log(s: string): void {\n            this.logContents.push(s);\n        }\n    }\n\n    export function timeFunction(logger: ILogger, funcDescription: string, func: () =>any): any {\n        var start = (new Date()).getTime();\n        var result = func();\n        var end = (new Date()).getTime();\n        logger.log(funcDescription + \" completed in \" + (end - start) + \" msec\");\n        return result;\n    }\n\n    // TODO: Just use JSON.stringify here.\n    export function stringToLiteral(value: string, length: number): string {\n        var result = \"\";\n\n        var addChar = (index: number) => {\n            var ch = value.charCodeAt(index);\n            switch (ch) {\n                case 0x09: // tab\n                    result += \"\\\\t\";\n                    break;\n                case 0x0a: // line feed\n                    result += \"\\\\n\";\n                    break;\n                case 0x0b: // vertical tab\n                    result += \"\\\\v\";\n                    break;\n                case 0x0c: // form feed\n                    result += \"\\\\f\";\n                    break;\n                case 0x0d: // carriage return\n                    result += \"\\\\r\";\n                    break;\n                case 0x22:  // double quote\n                    result += \"\\\\\\\"\";\n                    break;\n                case 0x27: // single quote\n                    result += \"\\\\\\\'\";\n                    break;\n                case 0x5c: // Backslash\n                    result += \"\\\\\";\n                    break;\n                default:\n                    result += value.charAt(index);\n            }\n        }\n\n        var tooLong = (value.length > length);\n        var i = 0;\n        if (tooLong) {\n            var mid = length >> 1;\n            for (i = 0; i < mid; i++) addChar(i);\n            result += \"(...)\";\n            for (i = value.length - mid; i < value.length; i++) addChar(i);\n        }\n        else {\n            length = value.length;\n            for (i = 0; i < length; i++) addChar(i);\n        }\n        return result;\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export function hasFlag(val: number, flag: number): bool {\n        return (val & flag) !== 0;\n    }\n\n    export function withoutFlag(val: number, flag: number): number {\n        return val & ~flag;\n    }\n\n    export enum ASTFlags {\n        None = 0,\n        StrictMode = 1 << 1, // node is in the strict mode environment\n        OptionalName = 1 << 2,\n        // REVIEW: This flag is to mark lambda nodes to note that the LParen of an expression has already been matched in the lambda header.\n        //         The flag is used to communicate this piece of information to the calling parseTerm, which intern will remove it.\n        //         Once we have a better way to associate information with nodes, this flag should not be used.\n        TypeReference = 1 << 3,\n        EnumInitializer = 1 << 4,\n    }\n\n    export enum DeclFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n    }\n\n    export enum ModuleFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        IsEnum = 1 << 7,\n        ShouldEmitModuleDecl = 1 << 8,\n        IsWholeFile = 1 << 9,\n        IsDynamic = 1 << 10,\n    }\n\n    export enum SymbolFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        Property = 1 << 7,\n        ModuleMember = 1 << 8,\n        InterfaceMember = 1 << 9,\n        ClassMember = 1 << 10,\n        BuiltIn = 1 << 11,\n        TypeSetDuringScopeAssignment = 1 << 12,\n        Constant = 1 << 13,\n        Optional = 1 << 14,\n        RecursivelyReferenced = 1 << 15,\n        Bound = 1 << 16,\n        CompilerGenerated = 1 << 17,\n    }\n\n    export enum VariableFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        Property = 1 << 8,\n        ClassProperty = 1 << 11,\n        Constant = 1 << 12,\n    }\n\n    export enum FunctionFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        GetAccessor = 1 << 5,\n        SetAccessor = 1 << 6,\n        Signature = 1 << 7,\n        Method = 1 << 8,\n        CallMember = 1 << 9,\n        ConstructMember = 1 << 10,\n        IsFatArrowFunction = 1 << 11,\n        IndexerMember = 1 << 12,\n        IsFunctionExpression = 1 << 13,\n        ClassMethod = 1 << 14,\n        ClassPropertyMethodExported = 1 << 15,\n    }\n\n    export enum SignatureFlags {\n        None = 0,\n        IsIndexer = 1,\n        IsStringIndexer = 1 << 1,\n        IsNumberIndexer = 1 << 2,\n    }\n\n    export function ToDeclFlags(functionFlags: FunctionFlags) : DeclFlags;\n    export function ToDeclFlags(varFlags: VariableFlags) : DeclFlags;\n    export function ToDeclFlags(symFlags: SymbolFlags): DeclFlags;\n    export function ToDeclFlags(moduleFlags: ModuleFlags): DeclFlags;\n    export function ToDeclFlags(fncOrVarOrSymbolOrModuleFlags: any) {\n        return <DeclFlags>fncOrVarOrSymbolOrModuleFlags;\n    }\n\n    export enum TypeFlags {\n        None = 0,\n        HasImplementation = 1,\n        HasSelfReference = 1 << 1,\n        MergeResult = 1 << 2,\n        IsEnum = 1 << 3,\n        BuildingName = 1 << 4,\n        HasBaseType = 1 << 5,\n        HasBaseTypeOfObject = 1 << 6,\n        IsClass = 1 << 7,\n    }\n\n    export enum TypeRelationshipFlags {\n        SuccessfulComparison = 0,\n        SourceIsNullTargetIsVoidOrUndefined = 1,\n        RequiredPropertyIsMissing = 1 << 1,\n        IncompatibleSignatures = 1 << 2,\n        SourceSignatureHasTooManyParameters = 3,\n        IncompatibleReturnTypes = 1 << 4,\n        IncompatiblePropertyTypes = 1 << 5,\n        IncompatibleParameterTypes = 1 << 6,\n    }\n\n    export enum ModuleGenTarget {\n        Synchronous = 0,\n        Asynchronous = 1,\n        Local = 1 << 1,\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    // Note: Any addition to the NodeType should also be supported with addition to AstWalkerDetailCallback\n    export enum NodeType {\n        None,\n        Empty,\n        EmptyExpr,\n        TrueLiteral,\n        FalseLiteral,\n        ThisExpression,\n        SuperExpression,\n        StringLiteral,\n        RegularExpressionLiteral,\n        Null,\n        ArrayLit,\n        ObjectLit,\n        Void,\n        Comma,\n        Pos,\n        Neg,\n        Delete,\n        In,\n        Dot,\n        Is,\n        InstOf,\n        Typeof,\n        NumberLit,\n        Name,\n        TypeParameter,\n        GenericType,\n        TypeRef,\n        Index,\n        Call,\n        New,\n        Asg,\n        AsgAdd,\n        AsgSub,\n        AsgDiv,\n        AsgMul,\n        AsgMod,\n        AsgAnd,\n        AsgXor,\n        AsgOr,\n        AsgLsh,\n        AsgRsh,\n        AsgRs2,\n        ConditionalExpression,\n        LogOr,\n        LogAnd,\n        Or,\n        Xor,\n        And,\n        Eq,\n        Ne,\n        Eqv,\n        NEqv,\n        Lt,\n        Le,\n        Gt,\n        Ge,\n        Add,\n        Sub,\n        Mul,\n        Div,\n        Mod,\n        Lsh,\n        Rsh,\n        Rs2,\n        Not,\n        LogNot,\n        IncPre,\n        DecPre,\n        IncPost,\n        DecPost,\n        CastExpression,\n        ParenthesizedExpression,\n        FuncDecl,\n        Member,\n        VarDecl,\n        ArgDecl,\n        ReturnStatement,\n        BreakStatement,\n        ContinueStatement,\n        ThrowStatement,\n        ForStatement,\n        ForInStatement,\n        IfStatement,\n        WhileStatement,\n        DoStatement,\n        Block,\n        CaseClause,\n        SwitchStatement,\n        TryStatement,\n        CatchClause,\n        List,\n        Script,\n        ClassDeclaration,\n        InterfaceDeclaration,\n        ModuleDeclaration,\n        ImportDeclaration,\n        ExportAssignment,\n        WithStatement,\n        ExpressionStatement,\n        LabeledStatement,\n        EndCode,\n        Comment,\n        Debugger,\n        GeneralNode = FuncDecl,\n        LastAsg = AsgRs2,\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class BlockIntrinsics {\n        public prototype = undefined;\n        public toString = undefined;\n        public toLocaleString = undefined;\n        public valueOf = undefined;\n        public hasOwnProperty = undefined;\n        public propertyIsEnumerable = undefined;\n        public isPrototypeOf = undefined;\n\n        constructor () {\n            // initialize the \'constructor\' field\n            this[\"constructor\"] = undefined;\n        }\n    }\n\n    export interface IHashTable {\n        getAllKeys(): string[];\n        add(key: string, data): bool;\n        addOrUpdate(key: string, data): bool;\n        map(fn: (k: string, value: any, context: any) => void , context: any): void;\n        every(fn: (k: string, value: any, context: any) => void , context: any): bool;\n        some(fn: (k: string, value: any, context: any) => void , context: any): bool;\n        count(): number;\n        lookup(key: string): any;\n    }\n\n    export class StringHashTable implements IHashTable {\n        public itemCount = 0;\n        public table: any = new BlockIntrinsics();\n\n        public getAllKeys(): string[] {\n            var result: string[] = [];\n\n            for (var k in this.table) {\n                if (this.table[k] !== undefined) {\n                    result.push(k);\n                }\n            }\n\n            return result;\n        }\n\n        public add(key: string, data): bool {\n            if (this.table[key] !== undefined) {\n                return false;\n            }\n\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        }\n\n        public addOrUpdate(key: string, data): bool {\n            if (this.table[key] !== undefined) {\n                this.table[key] = data;\n                return false;\n            }\n\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        }\n\n        public map(fn: (k: string, value: any, context: any) => void , context: any) {\n            for (var k in this.table) {\n                var data = this.table[k];\n\n                if (data !== undefined) {\n                    fn(k, this.table[k], context);\n                }\n            }\n        }\n\n        public every(fn: (k: string, value: any, context: any) => void , context: any) {\n            for (var k in this.table) {\n                var data = this.table[k];\n\n                if (data !== undefined) {\n                    if (!fn(k, this.table[k], context)) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }\n\n        public some(fn: (k: string, value: any, context: any) => void , context: any) {\n            for (var k in this.table) {\n                var data = this.table[k];\n\n                if (data !== undefined) {\n                    if (fn(k, this.table[k], context)) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        public count(): number {\n            return this.itemCount;\n        }\n\n        public lookup(key: string) {\n            var data = this.table[key];\n            return data === undefined ? null : data;\n        }\n    }\n\n    // The resident table is expected to reference the same table object, whereas the \n    // transientTable may reference different objects over time\n    // REVIEW:  WARNING:  For performance reasons, neither the primary nor secondary table may be null\n    export class DualStringHashTable implements IHashTable {\n\n        public insertPrimary = true;\n\n        constructor (public primaryTable: IHashTable,\n                                        public secondaryTable: IHashTable) { }\n\n        public getAllKeys(): string[]{\n            return this.primaryTable.getAllKeys().concat(this.secondaryTable.getAllKeys());\n        }\n\n        public add(key: string, data): bool {\n            if (this.insertPrimary) {\n                return this.primaryTable.add(key, data);\n            }\n            else {\n                return this.secondaryTable.add(key, data);\n            }\n        }\n\n        public addOrUpdate(key: string, data): bool {\n            if (this.insertPrimary) {\n                return this.primaryTable.addOrUpdate(key, data);\n            }\n            else {\n                return this.secondaryTable.addOrUpdate(key, data);\n            }\n        }\n\n        public map(fn: (k: string, v, c) => void , context) {\n            this.primaryTable.map(fn, context);\n            this.secondaryTable.map(fn, context);\n        }\n\n        public every(fn: (k: string, v, c) => bool, context) {\n            return this.primaryTable.every(fn, context) && this.secondaryTable.every(fn, context);\n        }\n\n        public some(fn: (k: string, v, c) => bool, context) {\n            return this.primaryTable.some(fn, context) || this.secondaryTable.some(fn, context);\n        }\n\n        public count() {\n            return this.primaryTable.count() + this.secondaryTable.count();\n        }\n\n        public lookup(key: string) {\n            var data = this.primaryTable.lookup(key);\n            if (data != undefined) {\n                return data;\n            }\n            else {\n                return this.secondaryTable.lookup(key);\n            }\n        }\n    }\n\n    export function numberHashFn(key: number): number {\n        var c2 = 0x27d4eb2d; // a prime or an odd constant\n        key = (key ^ 61) ^ (key >>> 16);\n        key = key + (key << 3);\n        key = key ^ (key >>> 4);\n        key = key * c2;\n        key = key ^ (key >>> 15);\n        return key;\n    }\n\n    export function combineHashes(key1: number, key2: number) {\n        return key2 ^ ((key1 >> 5) + key1);\n    }\n\n    export class HashEntry {\n        public next: HashEntry;\n\n        constructor (public key, public data) { }\n    }\n\n    export class HashTable {\n        public itemCount: number = 0;\n        public table: HashEntry[] = [];\n\n        constructor (public size: number, public hashFn: (key) =>number,\n                    public equalsFn: (key1, key2) =>bool) {\n            for (var i: number = 0; i < this.size; i++) {\n                this.table[i] = null;\n            }\n        }\n\n        public add(key, data): bool {\n            var current: HashEntry;\n            var entry: HashEntry = new HashEntry(key, data);\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    return false;\n                }\n            }\n            entry.next = this.table[val];\n            this.table[val] = entry;\n            this.itemCount++;\n            return true;\n        }\n\n        public remove(key) {\n            var current: HashEntry;\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n            var result = null;\n            var prevEntry: HashEntry = null;\n\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    result = current.data;\n                    this.itemCount--;\n                    if (prevEntry) {\n                        prevEntry.next = current.next;\n                    }\n                    else {\n                        this.table[val] = current.next;\n                    }\n                    break;\n                }\n                prevEntry = current;\n            }\n            return result;\n        }\n\n        public count(): number { return this.itemCount; }\n\n        public lookup(key) {\n            var current: HashEntry;\n            var val: number = this.hashFn(key);\n            val = val % this.size;\n            for (current = this.table[val]; current != null ; current = current.next) {\n                if (this.equalsFn(key, current.key)) {\n                    return (current.data);\n                }\n            }\n            return (null);\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export interface IASTSpan {\n        minChar: number;\n        limChar: number;\n    }\n\n    export class ASTSpan implements IASTSpan {\n        public minChar: number = -1;  // -1 = \"undefined\" or \"compiler generated\"\n        public limChar: number = -1;  // -1 = \"undefined\" or \"compiler generated\"   \n    }\n\n    export var astID = 0;\n\n    export function structuralEqualsNotIncludingPosition(ast1: AST, ast2: AST): bool {\n        return structuralEquals(ast1, ast2, false);\n    }\n\n    export function structuralEqualsIncludingPosition(ast1: AST, ast2: AST): bool {\n        return structuralEquals(ast1, ast2, true);\n    }\n\n    function structuralEquals(ast1: AST, ast2: AST, includingPosition: bool): bool {\n        if (ast1 === ast2) {\n            return true;\n        }\n\n        return ast1 !== null && ast2 !== null &&\n               ast1.nodeType === ast2.nodeType &&\n               ast1.structuralEquals(ast2, includingPosition);\n    }\n\n    function astArrayStructuralEquals(array1: AST[], array2: AST[], includingPosition): bool {\n        return ArrayUtilities.sequenceEquals(array1, array2,\n            includingPosition ? structuralEqualsIncludingPosition : structuralEqualsNotIncludingPosition);\n    }\n\n    export class AST implements IASTSpan {\n        public minChar: number = -1;  // -1 = \"undefined\" or \"compiler generated\"\n        public limChar: number = -1;  // -1 = \"undefined\" or \"compiler generated\"   \n\n        public type: Type = null;\n        private _flags = ASTFlags.None;\n\n        public typeCheckPhase = -1;\n\n        private astID = astID++;\n\n        // REVIEW: for diagnostic purposes\n        public passCreated: number = CompilerDiagnostics.analysisPass;\n\n        public preComments: Comment[] = null;\n        public postComments: Comment[] = null;\n        private docComments: Comment[] = null;\n\n        constructor(public nodeType: NodeType) {\n        }\n\n        public getFlags(): ASTFlags {\n            return this._flags;\n        }\n\n        // Must only be called from SyntaxTreeVisitor\n        public setFlags(flags: ASTFlags): void {\n            this._flags = flags;\n        }\n\n        public getLength() { return this.limChar - this.minChar; }\n\n        public getID() { return this.astID; }\n\n        public isDeclaration() { return false; }\n\n        public isStatement() {\n            return false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.EmptyExpr:\n                    this.type = typeFlow.anyType;\n                    break;\n                case NodeType.ThisExpression:\n                    return typeFlow.typeCheckThis(this);\n                case NodeType.Null:\n                    this.type = typeFlow.nullType;\n                    break;\n                case NodeType.FalseLiteral:\n                case NodeType.TrueLiteral:\n                    this.type = typeFlow.booleanType;\n                    break;\n                case NodeType.SuperExpression:\n                    return typeFlow.typeCheckSuper(this);\n                case NodeType.EndCode:\n                case NodeType.Empty:\n                case NodeType.Void:\n                    this.type = typeFlow.voidType;\n                    break;\n                default:\n                    throw new Error(\"please implement in derived class\");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            switch (this.nodeType) {\n                case NodeType.ThisExpression:\n                    emitter.recordSourceMappingStart(this);\n                    if (emitter.thisFnc && (hasFlag(emitter.thisFnc.getFunctionFlags(), FunctionFlags.IsFatArrowFunction))) {\n                        emitter.writeToOutput(\"_this\");\n                    }\n                    else {\n                        emitter.writeToOutput(\"this\");\n                    }\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Null:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput(\"null\");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.FalseLiteral:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput(\"false\");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.TrueLiteral:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput(\"true\");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.SuperExpression:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.emitSuperReference();\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.EndCode:\n                case NodeType.EmptyExpr:\n                    break;\n                case NodeType.Empty:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                case NodeType.Void:\n                    emitter.recordSourceMappingStart(this);\n                    emitter.writeToOutput(\"void \");\n                    emitter.recordSourceMappingEnd(this);\n                    break;\n                default:\n                    throw new Error(\"please implement in derived class\");\n            }\n            emitter.emitComments(this, false);\n        }\n\n        public print(context: PrintContext) {\n            context.startLine();\n            context.writeLine(this.printLabel());\n        }\n\n        public printLabel() {\n            if (nodeTypeTable[this.nodeType] !== undefined) {\n                return nodeTypeTable[this.nodeType];\n            }\n            else {\n                return (<any>NodeType)._map[this.nodeType];\n            }\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            // by default, AST adds itself to current basic block and does not check its children\n            context.walker.options.goChildren = false;\n            context.addContent(this);\n        }\n\n        public treeViewLabel() {\n            return (<any>NodeType)._map[this.nodeType];\n        }\n\n        public getDocComments(): Comment[] {\n            if (!this.isDeclaration() || !this.preComments || this.preComments.length === 0) {\n                return [];\n            }\n\n            if (!this.docComments) {\n                var preCommentsLength = this.preComments.length;\n                var docComments: Comment[] = [];\n                for (var i = preCommentsLength - 1; i >= 0; i--) {\n                    if (this.preComments[i].isDocComment()) {\n                        var prevDocComment = docComments.length > 0 ? docComments[docComments.length - 1] : null;\n                        if (prevDocComment === null || // If the help comments were not yet set then this is the comment\n                             (this.preComments[i].limLine === prevDocComment.minLine ||\n                              this.preComments[i].limLine + 1 === prevDocComment.minLine)) { // On same line or next line\n                            docComments.push(this.preComments[i]);\n                            continue;\n                        }\n                    }\n                    break;\n                }\n\n                this.docComments = docComments.reverse();\n            }\n\n            return this.docComments;\n        }\n\n        public structuralEquals(ast: AST, includingPosition: bool): bool {\n            if (includingPosition) {\n                if (this.minChar !== ast.minChar || this.limChar !== ast.limChar) {\n                    return false;\n                }\n            }\n\n            return this._flags === ast._flags &&\n                   astArrayStructuralEquals(this.preComments, ast.preComments, includingPosition) &&\n                   astArrayStructuralEquals(this.postComments, ast.postComments, includingPosition)\n        }\n    }\n\n    export class ASTList extends AST {\n        // public enclosingScope: SymbolScope = null;\n        public members: AST[] = [];\n\n        constructor() {\n            super(NodeType.List);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var len = this.members.length;\n            for (var i = 0; i < len; i++) {\n                if (context.noContinuation) {\n                    context.addUnreachable(this.members[i]);\n                    break;\n                }\n                else {\n                    this.members[i] = context.walk(this.members[i], this);\n                }\n            }\n            context.walker.options.goChildren = false;\n        }\n\n        public append(ast: AST) {\n            this.members[this.members.length] = ast;\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascriptList(this, null, TokenID.Semicolon, startLine, false, false);\n            emitter.recordSourceMappingEnd(this);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var len = this.members.length;\n            typeFlow.nestingLevel++;\n            for (var i = 0; i < len; i++) {\n                if (this.members[i]) {\n                    this.members[i] = this.members[i].typeCheck(typeFlow);\n                }\n            }\n            typeFlow.nestingLevel--;\n            return this;\n        }\n\n        public structuralEquals(ast: ASTList, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   astArrayStructuralEquals(this.members, ast.members, includingPosition);\n        }\n    }\n\n    export class Identifier extends AST {\n        public sym: Symbol = null;\n        public text: string;\n\n        // \'actualText\' is the text that the user has entered for the identifier. the text might \n        // include any Unicode escape sequences (e.g.: \\u0041 for \'A\'). \'text\', however, contains \n        // the resolved value of any escape sequences in the actual text; so in the previous \n        // example, actualText = \'\\u0041\', text = \'A\'.\n        //\n        // For purposes of finding a symbol, use text, as this will allow you to match all \n        // variations of the variable text. For full-fidelity translation of the user input, such\n        // as emitting, use the actualText field.\n        // \n        // Note: \n        //    To change text, and to avoid running into a situation where \'actualText\' does not \n        //    match \'text\', always use setText.\n        constructor(public actualText: string) {\n            super(NodeType.Name);\n            this.setText(actualText);\n        }\n\n        public setText(actualText: string) {\n            this.actualText = actualText;\n            this.text = actualText;\n        }\n\n        public isMissing() { return false; }\n\n        public treeViewLabel() {\n            return \"id: \" + this.actualText;\n        }\n\n        public printLabel() {\n            if (this.actualText) {\n                return \"id: \" + this.actualText;\n            }\n            else {\n                return \"name node\";\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckName(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptName(this, true);\n        }\n\n        public structuralEquals(ast: Identifier, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.text === ast.text &&\n                   this.actualText === ast.actualText &&\n                   this.isMissing() === ast.isMissing();\n        }\n    }\n\n    export class MissingIdentifier extends Identifier {\n        constructor() {\n            super(\"__missing\");\n        }\n\n        public isMissing() {\n            return true;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            // Emit nothing for a missing ID\n        }\n    }\n\n    export class Expression extends AST {\n        constructor(nodeType: NodeType) {\n            super(nodeType);\n        }\n    }\n\n    export class ParenthesizedExpression extends Expression {\n        constructor(public expression: AST) {\n            super(NodeType.ParenthesizedExpression);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.writeToOutput(\"(\");\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.expression, TokenID.CloseParen, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.writeToOutput(\")\");\n            emitter.emitComments(this, false);\n        }\n\n\n        public structuralEquals(ast: ParenthesizedExpression, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.expression, ast.expression, includingPosition);\n        }\n    }\n\n    export class UnaryExpression extends Expression {\n        public targetType: Type = null; // Target type for an object literal (null if no target type)\n        public castTerm: AST = null;\n\n        constructor(nodeType: NodeType, public operand: AST) {\n            super(nodeType);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            // TODO: add successor as catch block/finally block if present\n            if (this.nodeType === NodeType.ThrowStatement) {\n                context.returnStmt();\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Not:\n                    return typeFlow.typeCheckBitNot(this);\n\n                case NodeType.LogNot:\n                    return typeFlow.typeCheckLogNot(this);\n\n                case NodeType.Pos:\n                case NodeType.Neg:\n                    return typeFlow.typeCheckUnaryNumberOperator(this);\n\n                case NodeType.IncPost:\n                case NodeType.IncPre:\n                case NodeType.DecPost:\n                case NodeType.DecPre:\n                    return typeFlow.typeCheckIncOrDec(this);\n\n                case NodeType.ArrayLit:\n                    typeFlow.typeCheckArrayLit(this);\n                    return this;\n\n                case NodeType.ObjectLit:\n                    typeFlow.typeCheckObjectLit(this);\n                    return this;\n\n                case NodeType.ThrowStatement:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.voidType;\n                    return this;\n\n                case NodeType.Typeof:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.stringType;\n                    return this;\n\n                case NodeType.Delete:\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.booleanType;\n                    break;\n\n                case NodeType.CastExpression:\n                    this.castTerm = typeFlow.typeCheck(this.castTerm);\n                    var applyTargetType = this.operand.nodeType !== NodeType.ParenthesizedExpression;\n\n                    var targetType = applyTargetType ? this.castTerm.type : null;\n\n                    typeFlow.checker.typeCheckWithContextualType(targetType, typeFlow.checker.inProvisionalTypecheckMode(), true, this.operand);\n                    typeFlow.castWithCoercion(this.operand, this.castTerm.type, false, true);\n                    this.type = this.castTerm.type;\n                    return this;\n\n                case NodeType.Void:\n                    // REVIEW - Although this is good to do for completeness\'s sake,\n                    // this shouldn\'t be strictly necessary from the void operator\'s\n                    // point of view\n                    this.operand = typeFlow.typeCheck(this.operand);\n                    this.type = typeFlow.checker.undefinedType;\n                    break;\n\n                default:\n                    throw new Error(\"please implement in derived class\");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            switch (this.nodeType) {\n                case NodeType.IncPost:\n                    emitter.emitJavascript(this.operand, TokenID.PlusPlus, false);\n                    emitter.writeToOutput(\"++\");\n                    break;\n                case NodeType.LogNot:\n                    emitter.writeToOutput(\"!\");\n                    emitter.emitJavascript(this.operand, TokenID.Exclamation, false);\n                    break;\n                case NodeType.DecPost:\n                    emitter.emitJavascript(this.operand, TokenID.MinusMinus, false);\n                    emitter.writeToOutput(\"--\");\n                    break;\n                case NodeType.ObjectLit:\n                    emitter.emitObjectLiteral(<ASTList>this.operand);\n                    break;\n                case NodeType.ArrayLit:\n                    emitter.emitArrayLiteral(<ASTList>this.operand);\n                    break;\n                case NodeType.Not:\n                    emitter.writeToOutput(\"~\");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Neg:\n                    emitter.writeToOutput(\"-\");\n                    if (this.operand.nodeType === NodeType.Neg || this.operand.nodeType === NodeType.DecPre) {\n                        emitter.writeToOutput(\" \");\n                    }\n                    emitter.emitJavascript(this.operand, TokenID.Minus, false);\n                    break;\n                case NodeType.Pos:\n                    emitter.writeToOutput(\"+\");\n                    if (this.operand.nodeType === NodeType.Pos || this.operand.nodeType === NodeType.IncPre) {\n                        emitter.writeToOutput(\" \");\n                    }\n                    emitter.emitJavascript(this.operand, TokenID.Plus, false);\n                    break;\n                case NodeType.IncPre:\n                    emitter.writeToOutput(\"++\");\n                    emitter.emitJavascript(this.operand, TokenID.PlusPlus, false);\n                    break;\n                case NodeType.DecPre:\n                    emitter.writeToOutput(\"--\");\n                    emitter.emitJavascript(this.operand, TokenID.MinusMinus, false);\n                    break;\n                case NodeType.ThrowStatement:\n                    emitter.writeToOutput(\"throw \");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    emitter.writeToOutput(\";\");\n                    break;\n                case NodeType.Typeof:\n                    emitter.writeToOutput(\"typeof \");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Delete:\n                    emitter.writeToOutput(\"delete \");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.Void:\n                    emitter.writeToOutput(\"void \");\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                case NodeType.CastExpression:\n                    emitter.emitJavascript(this.operand, TokenID.Tilde, false);\n                    break;\n                default:\n                    throw new Error(\"please implement in derived class\");\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public structuralEquals(ast: UnaryExpression, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.castTerm, ast.castTerm, includingPosition) &&\n                   structuralEquals(this.operand, ast.operand, includingPosition);\n        }\n    }\n\n    export class CallExpression extends Expression {\n        constructor(nodeType: NodeType,\n                    public target: AST,\n                    public typeArguments: ASTList,\n                    public arguments: ASTList) {\n            super(nodeType);\n        }\n\n        public signature: Signature = null;\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (this.nodeType === NodeType.New) {\n                return typeFlow.typeCheckNew(this);\n            }\n            else {\n                return typeFlow.typeCheckCall(this);\n            }\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n\n            if (this.nodeType === NodeType.New) {\n                emitter.emitNew(this.target, this.arguments);\n            }\n            else {\n                emitter.emitCall(this, this.target, this.arguments);\n            }\n\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public structuralEquals(ast: CallExpression, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.target, ast.target, includingPosition) &&\n                   structuralEquals(this.typeArguments, ast.typeArguments, includingPosition) &&\n                   structuralEquals(this.arguments, ast.arguments, includingPosition);\n        }\n    }\n\n    export class BinaryExpression extends Expression {\n        constructor(nodeType: NodeType,\n                    public operand1: AST,\n                    public operand2: AST) {\n            super(nodeType);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            switch (this.nodeType) {\n                case NodeType.Dot:\n                    return typeFlow.typeCheckDotOperator(this);\n                case NodeType.Asg:\n                    return typeFlow.typeCheckAsgOperator(this);\n                case NodeType.Add:\n                case NodeType.Sub:\n                case NodeType.Mul:\n                case NodeType.Div:\n                case NodeType.Mod:\n                case NodeType.Or:\n                case NodeType.And:\n                    return typeFlow.typeCheckArithmeticOperator(this, false);\n                case NodeType.Xor:\n                    return typeFlow.typeCheckBitwiseOperator(this, false);\n                case NodeType.Ne:\n                case NodeType.Eq:\n                    var text: string;\n                    if (typeFlow.checker.styleSettings.eqeqeq) {\n                        text = nodeTypeTable[this.nodeType];\n                        typeFlow.checker.errorReporter.styleError(this, \"use of \" + text);\n                    }\n                    else if (typeFlow.checker.styleSettings.eqnull) {\n                        text = nodeTypeTable[this.nodeType];\n                        if ((this.operand2 !== null) && (this.operand2.nodeType === NodeType.Null)) {\n                            typeFlow.checker.errorReporter.styleError(this, \"use of \" + text + \" to compare with null\");\n                        }\n                    }\n                case NodeType.Eqv:\n                case NodeType.NEqv:\n                case NodeType.Lt:\n                case NodeType.Le:\n                case NodeType.Ge:\n                case NodeType.Gt:\n                    return typeFlow.typeCheckBooleanOperator(this);\n                case NodeType.Index:\n                    return typeFlow.typeCheckIndex(this);\n                case NodeType.Member:\n                    this.type = typeFlow.voidType;\n                    return this;\n                case NodeType.LogOr:\n                    return typeFlow.typeCheckLogOr(this);\n                case NodeType.LogAnd:\n                    return typeFlow.typeCheckLogAnd(this);\n                case NodeType.AsgAdd:\n                case NodeType.AsgSub:\n                case NodeType.AsgMul:\n                case NodeType.AsgDiv:\n                case NodeType.AsgMod:\n                case NodeType.AsgOr:\n                case NodeType.AsgAnd:\n                    return typeFlow.typeCheckArithmeticOperator(this, true);\n                case NodeType.AsgXor:\n                    return typeFlow.typeCheckBitwiseOperator(this, true);\n                case NodeType.Lsh:\n                case NodeType.Rsh:\n                case NodeType.Rs2:\n                    return typeFlow.typeCheckShift(this, false);\n                case NodeType.AsgLsh:\n                case NodeType.AsgRsh:\n                case NodeType.AsgRs2:\n                    return typeFlow.typeCheckShift(this, true);\n                case NodeType.Comma:\n                    return typeFlow.typeCheckCommaOperator(this);\n                case NodeType.InstOf:\n                    return typeFlow.typeCheckInstOf(this);\n                case NodeType.In:\n                    return typeFlow.typeCheckInOperator(this);\n                    break;\n                default:\n                    throw new Error(\"please implement in derived class\");\n            }\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            var binTokenId = nodeTypeToTokTable[this.nodeType];\n\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.nodeType != NodeType.Comma && binTokenId != undefined) {\n                emitter.emitJavascript(this.operand1, binTokenId, false);\n\n                if (tokenTable[binTokenId].text === \"instanceof\") {\n                    emitter.writeToOutput(\" instanceof \");\n                }\n                else if (tokenTable[binTokenId].text === \"in\") {\n                    emitter.writeToOutput(\" in \");\n                }\n                else {\n                    emitter.writeToOutputTrimmable(\" \" + tokenTable[binTokenId].text + \" \");\n                }\n\n                emitter.emitJavascript(this.operand2, binTokenId, false);\n            }\n            else {\n                switch (this.nodeType) {\n                    case NodeType.Dot:\n                        if (!emitter.tryEmitConstant(this)) {\n                            emitter.emitJavascript(this.operand1, TokenID.Dot, false);\n                            emitter.writeToOutput(\".\");\n                            emitter.emitJavascriptName(<Identifier>this.operand2, false);\n                        }\n                        break;\n                    case NodeType.Index:\n                        emitter.emitIndex(this.operand1, this.operand2);\n                        break;\n\n                    case NodeType.Member:\n                        if (this.operand2.nodeType === NodeType.FuncDecl && (<FuncDecl>this.operand2).isAccessor()) {\n                            var funcDecl = <FuncDecl>this.operand2;\n                            if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor)) {\n                                emitter.writeToOutput(\"get \");\n                            }\n                            else {\n                                emitter.writeToOutput(\"set \");\n                            }\n                            emitter.emitJavascript(this.operand1, TokenID.Colon, false);\n                        }\n                        else {\n                            emitter.emitJavascript(this.operand1, TokenID.Colon, false);\n                            emitter.writeToOutputTrimmable(\": \");\n                        }\n                        emitter.emitJavascript(this.operand2, TokenID.Comma, false);\n                        break;\n                    case NodeType.Comma:\n                        emitter.emitJavascript(this.operand1, TokenID.Comma, false);\n                        if (emitter.emitState.inObjectLiteral) {\n                            emitter.writeLineToOutput(\", \");\n                        }\n                        else {\n                            emitter.writeToOutput(\", \");\n                        }\n                        emitter.emitJavascript(this.operand2, TokenID.Comma, false);\n                        break;\n                    case NodeType.Is:\n                        throw new Error(\"should be de-sugared during type check\");\n                    default:\n                        throw new Error(\"please implement in derived class\");\n                }\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public structuralEquals(ast: BinaryExpression, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.operand1, ast.operand1, includingPosition) &&\n                   structuralEquals(this.operand2, ast.operand2, includingPosition);\n        }\n    }\n\n    export class ConditionalExpression extends Expression {\n        constructor(public operand1: AST,\n                    public operand2: AST,\n                    public operand3: AST) {\n            super(NodeType.ConditionalExpression);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckQMark(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitJavascript(this.operand1, TokenID.Question, false);\n            emitter.writeToOutput(\" ? \");\n            emitter.emitJavascript(this.operand2, TokenID.Question, false);\n            emitter.writeToOutput(\" : \");\n            emitter.emitJavascript(this.operand3, TokenID.Question, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public structuralEquals(ast: ConditionalExpression, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.operand1, ast.operand1, includingPosition) &&\n                   structuralEquals(this.operand2, ast.operand2, includingPosition) &&\n                   structuralEquals(this.operand3, ast.operand3, includingPosition);\n        }\n    }\n\n    export class NumberLiteral extends Expression {\n        constructor(public value: number, public text: string) {\n            super(NodeType.NumberLit);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.doubleType;\n            return this;\n        }\n\n        public treeViewLabel() {\n            return \"num: \" + this.printLabel();\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(this.text);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public printLabel(): string {\n            return this.text;\n        }\n\n        public structuralEquals(ast: NumberLiteral, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.value === ast.value &&\n                   this.text === ast.text;\n        }\n    }\n\n    export class RegexLiteral extends Expression {\n        constructor(public text: string) {\n            super(NodeType.RegularExpressionLiteral);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.regexType;\n            return this;\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(this.text);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public structuralEquals(ast: RegexLiteral, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.text === ast.text;\n        }\n    }\n\n    export class StringLiteral extends Expression {\n        constructor(public text: string) {\n            super(NodeType.StringLiteral);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.emitStringLiteral(this.text);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.stringType;\n            return this;\n        }\n\n        public treeViewLabel() {\n            return \"st: \" + this.text;\n        }\n\n        public printLabel() {\n            return this.text;\n        }\n\n        public structuralEquals(ast: StringLiteral, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.text === ast.text;\n        }\n    }\n\n    export class ImportDeclaration extends AST {\n        public isDynamicImport = false;\n\n        constructor(public id: Identifier, public alias: AST) {\n            super(NodeType.ImportDeclaration);\n        }\n\n        public isDeclaration() { return true; }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            // REVIEW: Only modules may be aliased for now, though there\'s no real\n            // restriction on what the type symbol may be\n            if (emitter.importStatementShouldBeEmitted(this)) {\n                var prevModAliasId = emitter.modAliasId;\n                var prevFirstModAlias = emitter.firstModAlias;\n\n                emitter.recordSourceMappingStart(this);\n                emitter.emitComments(this, true);\n                emitter.writeToOutput(\"var \" + this.id.actualText + \" = \");\n                emitter.modAliasId = this.id.actualText;\n                emitter.firstModAlias = this.firstAliasedModToString();\n                var aliasAST = this.alias.nodeType == NodeType.TypeRef ? (<TypeReference>this.alias).term : this.alias;\n\n                emitter.emitJavascript(aliasAST, TokenID.Tilde, false);\n                // the dynamic import case will insert the semi-colon automatically\n                if (!this.isDynamicImport) {\n                    emitter.writeToOutput(\";\");\n                }\n                emitter.emitComments(this, false);\n                emitter.recordSourceMappingEnd(this);\n\n                emitter.modAliasId = prevModAliasId;\n                emitter.firstModAlias = prevFirstModAlias;\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckImportDecl(this);\n        }\n\n        public getAliasName(aliasAST: AST = this.alias): string {\n            if (aliasAST.nodeType === NodeType.Name) {\n                return (<Identifier>aliasAST).actualText;\n            } else {\n                var dotExpr = <BinaryExpression>aliasAST;\n                return this.getAliasName(dotExpr.operand1) + \".\" + this.getAliasName(dotExpr.operand2);\n            }\n        }\n\n        public firstAliasedModToString() {\n            if (this.alias.nodeType === NodeType.Name) {\n                return (<Identifier>this.alias).actualText;\n            }\n            else {\n                var dotExpr = <TypeReference>this.alias;\n                var firstMod = <Identifier>(<BinaryExpression>dotExpr.term).operand1;\n                return firstMod.actualText;\n            }\n        }\n\n        public structuralEquals(ast: ImportDeclaration, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.id, ast.id, includingPosition) &&\n                   structuralEquals(this.alias, ast.alias, includingPosition);\n        }\n    }\n\n    export class ExportAssignment extends AST {\n        constructor(public id: Identifier) {\n            super(NodeType.ExportAssignment);\n        }\n\n        public structuralEquals(ast: ExportAssignment, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.id, ast.id, includingPosition);\n        }\n    }\n\n    export class BoundDecl extends AST {\n        public init: AST = null;\n        public typeExpr: AST = null;\n        private _varFlags = VariableFlags.None;\n        public sym: Symbol = null;\n        public isDeclaration() { return true; }\n\n        constructor(public id: Identifier, nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public getVarFlags(): VariableFlags {\n            return this._varFlags;\n        }\n\n        // Must only be called from SyntaxTreeVisitor\n        public setVarFlags(flags: VariableFlags): void {\n            this._varFlags = flags;\n        }\n\n        public isProperty() { return hasFlag(this.getVarFlags(), VariableFlags.Property); }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckBoundDecl(this);\n        }\n\n        public printLabel() {\n            return this.treeViewLabel();\n        }\n\n        public structuralEquals(ast: BoundDecl, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this._varFlags === ast._varFlags &&\n                   structuralEquals(this.init, ast.init, includingPosition) &&\n                   structuralEquals(this.typeExpr, ast.typeExpr, includingPosition) &&\n                   structuralEquals(this.id, ast.id, includingPosition);\n        }\n    }\n\n    export class VarDecl extends BoundDecl {\n        constructor(id: Identifier) {\n            super(id, NodeType.VarDecl);\n        }\n\n        public isExported() { return hasFlag(this.getVarFlags(), VariableFlags.Exported); }\n\n        public isStatic() { return hasFlag(this.getVarFlags(), VariableFlags.Static); }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptVarDecl(this, tokenId);\n        }\n\n        public treeViewLabel() {\n            return \"var \" + this.id.actualText;\n        }\n    }\n\n    export class ArgDecl extends BoundDecl {\n        constructor(id: Identifier) {\n            super(id, NodeType.ArgDecl);\n        }\n\n        public isOptional = false;\n\n        public isOptionalArg() { return this.isOptional || this.init; }\n\n        public treeViewLabel() {\n            return \"arg: \" + this.id.actualText;\n        }\n\n        public parameterPropertySym: FieldSymbol = null;\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(this.id.actualText);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public structuralEquals(ast: ArgDecl, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.isOptional === ast.isOptional;\n        }\n    }\n\n    export class FuncDecl extends AST {\n        public hint: string = null;\n        private _functionFlags = FunctionFlags.None;\n        public returnTypeAnnotation: AST = null;\n        public symbols: IHashTable;\n        public variableArgList = false;\n        public signature: Signature;\n        public freeVariables: Symbol[] = [];\n        public classDecl: NamedDeclaration = null;\n\n        public accessorSymbol: Symbol = null;\n        public returnStatementsWithExpressions: ReturnStatement[];\n        public scopeType: Type = null; // Type of the FuncDecl, before target typing\n        public endingToken: ASTSpan = null;\n        public isDeclaration() { return true; }\n\n        constructor(public name: Identifier,\n                    public bod: ASTList,\n                    public isConstructor: bool,\n                    public typeArguments: ASTList,\n                    public arguments: ASTList,\n                    nodeType: number) {\n\n            super(nodeType);\n        }\n\n        public getFunctionFlags(): FunctionFlags {\n            return this._functionFlags;\n        }\n\n        // Must only be called from SyntaxTreeVisitor\n        public setFunctionFlags(flags: FunctionFlags): void {\n            this._functionFlags = flags;\n        }\n\n        public structuralEquals(ast: FuncDecl, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this._functionFlags === ast._functionFlags &&\n                   this.hint === ast.hint &&\n                   this.variableArgList === ast.variableArgList &&\n                   structuralEquals(this.name, ast.name, includingPosition) &&\n                   structuralEquals(this.bod, ast.bod, includingPosition) &&\n                   this.isConstructor === ast.isConstructor &&\n                   structuralEquals(this.typeArguments, ast.typeArguments, includingPosition) &&\n                   structuralEquals(this.arguments, ast.arguments, includingPosition);\n        }\n\n        public buildControlFlow(): ControlFlowContext {\n            var entry = new BasicBlock();\n            var exit = new BasicBlock();\n\n            var context = new ControlFlowContext(entry, exit);\n\n            var controlFlowPrefix = (ast: AST, parent: AST, walker: IAstWalker) => {\n                ast.addToControlFlow(walker.state);\n                return ast;\n            }\n\n            var walker = getAstWalkerFactory().getWalker(controlFlowPrefix, null, null, context);\n            context.walker = walker;\n            walker.walk(this.bod, this);\n\n            return context;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckFunction(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptFunction(this);\n        }\n\n        public getNameText() {\n            if (this.name) {\n                return this.name.actualText;\n            }\n            else {\n                return this.hint;\n            }\n        }\n\n        public isMethod() {\n            return (this.getFunctionFlags() & FunctionFlags.Method) != FunctionFlags.None;\n        }\n\n        public isCallMember() { return hasFlag(this.getFunctionFlags(), FunctionFlags.CallMember); }\n        public isConstructMember() { return hasFlag(this.getFunctionFlags(), FunctionFlags.ConstructMember); }\n        public isIndexerMember() { return hasFlag(this.getFunctionFlags(), FunctionFlags.IndexerMember); }\n        public isSpecialFn() { return this.isCallMember() || this.isIndexerMember() || this.isConstructMember(); }\n        public isAccessor() { return hasFlag(this.getFunctionFlags(), FunctionFlags.GetAccessor) || hasFlag(this.getFunctionFlags(), FunctionFlags.SetAccessor); }\n        public isGetAccessor() { return hasFlag(this.getFunctionFlags(), FunctionFlags.GetAccessor); }\n        public isSetAccessor() { return hasFlag(this.getFunctionFlags(), FunctionFlags.SetAccessor); }\n        public isStatic() { return hasFlag(this.getFunctionFlags(), FunctionFlags.Static); }\n\n        public treeViewLabel() {\n            if (this.name === null) {\n                return \"funcExpr\";\n            }\n            else {\n                return \"func: \" + this.name.actualText\n            }\n        }\n\n        public isSignature() { return (this.getFunctionFlags() & FunctionFlags.Signature) != FunctionFlags.None; }\n    }\n\n    export class LocationInfo {\n        constructor(public fileName: string,\n                    public lineMap: LineMap) {\n        }\n    }\n\n    export var unknownLocationInfo = new LocationInfo(\"unknown\", null);\n\n    export class Script extends FuncDecl {\n        public locationInfo: LocationInfo = null;\n        public referencedFiles: IFileReference[] = [];\n        public requiresExtendsBlock = false;\n        public isDeclareFile = false;\n        public topLevelMod: ModuleDeclaration = null;\n        // Remember if the script contains Unicode chars, that is needed when generating code for this script object to decide the output file correct encoding.\n        public containsUnicodeChar = false;\n        public containsUnicodeCharInComment = false;\n        public cachedEmitRequired: bool;\n\n        private setCachedEmitRequired(value: bool) {\n            this.cachedEmitRequired = value;\n            return this.cachedEmitRequired;\n        }\n\n        constructor() {\n            super(new Identifier(\"script\"), null, false, null, null, NodeType.Script);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckScript(this);\n        }\n\n        public treeViewLabel() {\n            return \"Script\";\n        }\n\n        public emitRequired(emitOptions: EmitOptions) {\n            if (this.cachedEmitRequired != undefined) {\n                return this.cachedEmitRequired;\n            }\n\n            if (!this.isDeclareFile && this.bod) {\n                if (this.bod.members.length === 0) {\n                    // allow empty files that are not declare files \n                    return this.setCachedEmitRequired(true);\n                }\n\n                for (var i = 0, len = this.bod.members.length; i < len; i++) {\n                    var stmt = this.bod.members[i];\n                    if (stmt.nodeType === NodeType.ModuleDeclaration) {\n                        if (!hasFlag((<ModuleDeclaration>stmt).getModuleFlags(), ModuleFlags.ShouldEmitModuleDecl | ModuleFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType === NodeType.ClassDeclaration) {\n                        if (!hasFlag((<ClassDeclaration>stmt).getVarFlags(), VariableFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType === NodeType.VarDecl) {\n                        if (!hasFlag((<VarDecl>stmt).getVarFlags(), VariableFlags.Ambient)) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType === NodeType.FuncDecl) {\n                        if (!(<FuncDecl>stmt).isSignature()) {\n                            return this.setCachedEmitRequired(true);\n                        }\n                    }\n                    else if (stmt.nodeType != NodeType.InterfaceDeclaration && stmt.nodeType != NodeType.Empty) {\n                        return this.setCachedEmitRequired(true);\n                    }\n                }\n\n                if (emitOptions.compilationSettings.emitComments &&\n                    ((this.bod.preComments && this.bod.preComments.length > 0) || (this.bod.postComments && this.bod.postComments.length > 0))) {\n                    return this.setCachedEmitRequired(true);\n                }\n            }\n            return this.setCachedEmitRequired(false);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            if (this.emitRequired(emitter.emitOptions)) {\n                emitter.emitJavascriptList(this.bod, null, TokenID.Semicolon, true, false, false, true, this.requiresExtendsBlock);\n            }\n        }\n\n        public externallyVisibleImportedSymbols: Symbol[] = [];\n\n        public AddExternallyVisibleImportedSymbol(symbol: Symbol, checker: TypeChecker) {\n            if (this.isExternallyVisibleSymbol(symbol)) {\n                return;\n            }\n\n            // Before adding check if the external symbol is also marked for visibility\n            if (!symbol.getType().symbol.isExternallyVisible(checker)) {\n                // Report error\n                var quotes = \"\";\n                var moduleName = symbol.getType().symbol.prettyName;\n                if (!isQuoted(moduleName)) {\n                    quotes = \"\'\";\n                }\n                checker.errorReporter.simpleError(symbol.declAST, \"Externally visible import statement uses non exported module \" + quotes + moduleName + quotes);\n            }\n            this.externallyVisibleImportedSymbols.push(symbol);\n        }\n\n        public isExternallyVisibleSymbol(symbol: Symbol) {\n            for (var i = 0 ; i < this.externallyVisibleImportedSymbols.length; i++) {\n                if (this.externallyVisibleImportedSymbols[i] === symbol) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    export class NamedDeclaration extends AST {\n        public isDeclaration() { return true; }\n\n        constructor(nodeType: NodeType,\n                    public name: Identifier,\n                    public members: ASTList) {\n            super(nodeType);\n        }\n\n        public structuralEquals(ast: NamedDeclaration, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.name, ast.name, includingPosition) &&\n                   structuralEquals(this.members, ast.members, includingPosition);\n        }\n    }\n\n    export class ModuleDeclaration extends NamedDeclaration {\n        private _moduleFlags = ModuleFlags.ShouldEmitModuleDecl;\n        public mod: ModuleType = null;\n        public prettyName: string;\n        public amdDependencies: string[] = [];\n        // Remember if the module contains Unicode chars, that is needed for dynamic module as we will generate a file for each.\n        public containsUnicodeChar = false;\n        public containsUnicodeCharInComment = false;\n\n        constructor(name: Identifier, members: ASTList, public endingToken: ASTSpan) {\n            super(NodeType.ModuleDeclaration, name, members);\n\n            this.prettyName = this.name.actualText;\n        }\n\n        public getModuleFlags(): ModuleFlags {\n            return this._moduleFlags;\n        }\n\n        // Must only be called from SyntaxTreeVisitor\n        public setModuleFlags(flags: ModuleFlags): void {\n            this._moduleFlags = flags;\n        }\n\n        public structuralEquals(ast: ModuleDeclaration, includePosition: bool): bool {\n            if (super.structuralEquals(ast, includePosition)) {\n                // TODO: We don\'t need the \'withoutFlag\' calls here once we get rid of \n                // ShouldEmitModuleDecl.\n                return withoutFlag(this._moduleFlags, ModuleFlags.ShouldEmitModuleDecl) ===\n                       withoutFlag(ast._moduleFlags, ModuleFlags.ShouldEmitModuleDecl);\n            }\n\n            return false;\n        }\n\n        public isEnum() { return hasFlag(this.getModuleFlags(), ModuleFlags.IsEnum); }\n        public isWholeFile() { return hasFlag(this.getModuleFlags(), ModuleFlags.IsWholeFile); }\n\n        public recordNonInterface() {\n            this.setModuleFlags(this.getModuleFlags() & ~ModuleFlags.ShouldEmitModuleDecl);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckModule(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            if (!hasFlag(this.getModuleFlags(), ModuleFlags.ShouldEmitModuleDecl)) {\n                emitter.emitComments(this, true);\n                emitter.emitJavascriptModule(this);\n                emitter.emitComments(this, false);\n            }\n        }\n    }\n\n    export class TypeDeclaration extends NamedDeclaration {\n        private _varFlags = VariableFlags.None;\n\n        constructor(nodeType: NodeType,\n                    name: Identifier,\n                    public typeParameters: ASTList,\n                    public extendsList: ASTList,\n                    public implementsList: ASTList,\n                    members: ASTList) {\n            super(nodeType, name, members);\n        }\n\n        public getVarFlags(): VariableFlags {\n            return this._varFlags;\n        }\n\n        // Must only be called from SyntaxTreeVisitor\n        public setVarFlags(flags: VariableFlags): void {\n            this._varFlags = flags;\n        }\n\n        public structuralEquals(ast: TypeDeclaration, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this._varFlags === ast._varFlags &&\n                   structuralEquals(this.typeParameters, ast.typeParameters, includingPosition) &&\n                   structuralEquals(this.extendsList, ast.extendsList, includingPosition) &&\n                   structuralEquals(this.implementsList, ast.implementsList, includingPosition);\n        }\n    }\n\n    export class ClassDeclaration extends TypeDeclaration {\n        public constructorDecl: FuncDecl = null;\n        public endingToken: ASTSpan = null;\n\n        constructor(name: Identifier,\n                    typeParameters: ASTList,\n                    members: ASTList,\n                    extendsList: ASTList,\n                    implementsList: ASTList) {\n            super(NodeType.ClassDeclaration, name, typeParameters, extendsList, implementsList, members);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckClass(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascriptClass(this);\n        }\n    }\n\n    export class InterfaceDeclaration extends TypeDeclaration {\n        constructor(name: Identifier,\n            typeParameters: ASTList,\n            members: ASTList,\n            extendsList: ASTList,\n            implementsList: ASTList) {\n            super(NodeType.InterfaceDeclaration, name, typeParameters, extendsList, implementsList, members);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckInterface(this);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n        }\n    }\n\n    export class Statement extends AST {\n        constructor(nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public isStatement() {\n            return true;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.type = typeFlow.voidType;\n            return this;\n        }\n    }\n\n    export class ExpressionStatement extends Statement {\n        constructor(public expression: AST) {\n            super(NodeType.ExpressionStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            this.expression.emit(emitter, TokenID.Semicolon, startLine);\n            emitter.writeLineToOutput(\";\");\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public structuralEquals(ast: ExpressionStatement, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.expression, ast.expression, includingPosition);\n        }\n    }\n\n    export class LabeledStatement extends Statement {\n        constructor(public identifier: Identifier, public statement: AST) {\n            super(NodeType.LabeledStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n\n            emitter.recordSourceMappingStart(this.identifier);\n            emitter.writeToOutput(this.identifier.actualText);\n            emitter.recordSourceMappingEnd(this.identifier);\n            emitter.writeLineToOutput(\":\");\n\n            this.statement.emit(emitter, tokenId, true);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.statement = this.statement.typeCheck(typeFlow);\n            return this;\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var beforeBB = context.current;\n            var bb = new BasicBlock();\n            context.current = bb;\n            beforeBB.addSuccessor(bb);\n        }\n\n        public structuralEquals(ast: LabeledStatement, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.identifier, ast.identifier, includingPosition) &&\n                   structuralEquals(this.statement, ast.statement, includingPosition);\n        }\n    }\n\n    export class Block extends Statement {\n        constructor(public statements: ASTList,\n                    public isStatementBlock: bool) {\n            super(NodeType.Block);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.isStatementBlock) {\n                emitter.writeLineToOutput(\" {\");\n                emitter.indenter.increaseIndent();\n            } else {\n                emitter.setInVarBlock(this.statements.members.length);\n            }\n            var temp = emitter.setInObjectLiteral(false);\n            if (this.statements) {\n                emitter.emitJavascriptList(this.statements, null, TokenID.Semicolon, true, false, false);\n            }\n            if (this.isStatementBlock) {\n                emitter.indenter.decreaseIndent();\n                emitter.emitIndent();\n                emitter.writeToOutput(\"}\");\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            var afterIfNeeded = new BasicBlock();\n            context.pushStatement(this, context.current, afterIfNeeded);\n            if (this.statements) {\n                context.walk(this.statements, this);\n            }\n            context.walker.options.goChildren = false;\n            context.popStatement();\n            if (afterIfNeeded.predecessors.length > 0) {\n                context.current.addSuccessor(afterIfNeeded);\n                context.current = afterIfNeeded;\n            }\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            if (!typeFlow.checker.styleSettings.emptyBlocks) {\n                if ((this.statements === null) || (this.statements.members.length === 0)) {\n                    typeFlow.checker.errorReporter.styleError(this, \"empty block\");\n                }\n            }\n\n            typeFlow.typeCheck(this.statements);\n            return this;\n        }\n\n        public structuralEquals(ast: Block, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.statements, ast.statements, includingPosition) &&\n                   this.isStatementBlock === ast.isStatementBlock;\n        }\n    }\n\n    export class Jump extends Statement {\n        public target: string = null;\n        public hasExplicitTarget() { return (this.target); }\n        public resolvedTarget: Statement = null;\n\n        constructor(nodeType: NodeType) {\n            super(nodeType);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            context.unconditionalBranch(this.resolvedTarget, (this.nodeType === NodeType.ContinueStatement));\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.nodeType === NodeType.BreakStatement) {\n                emitter.writeToOutput(\"break\");\n            }\n            else {\n                emitter.writeToOutput(\"continue\");\n            }\n            if (this.hasExplicitTarget()) {\n                emitter.writeToOutput(\" \" + this.target);\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.writeToOutput(\";\");\n            emitter.emitComments(this, false);\n        }\n\n        public structuralEquals(ast: Jump, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.target === ast.target;\n        }\n    }\n\n    export class WhileStatement extends Statement {\n        constructor(public cond: AST, public body: AST) {\n            super(NodeType.WhileStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput(\"while(\");\n            emitter.emitJavascript(this.cond, TokenID.While, false);\n            emitter.writeToOutput(\")\");\n            emitter.emitJavascriptStatements(this.body, false);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckWhile(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            context.addContent(this.cond);\n            var condBlock = context.current;\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.current = new BasicBlock();\n                condBlock.addSuccessor(context.current);\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopEnd = context.current;\n                loopEnd.addSuccessor(loopStart);\n            }\n            context.current = afterLoop;\n            condBlock.addSuccessor(afterLoop);\n            // TODO: check for while (true) and then only continue if afterLoop has predecessors\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n\n        public structuralEquals(ast: WhileStatement, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.cond, ast.cond, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition);\n        }\n    }\n\n    export class DoWhileStatement extends Statement {\n        public whileSpan: ASTSpan = null;\n\n        constructor(public body: AST, public cond: AST) {\n            super(NodeType.DoStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput(\"do\");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.recordSourceMappingStart(this.whileSpan);\n            emitter.writeToOutput(\" while\");\n            emitter.recordSourceMappingEnd(this.whileSpan);\n            emitter.writeToOutput(\'(\');\n            emitter.emitJavascript(this.cond, TokenID.CloseParen, false);\n            emitter.writeToOutput(\")\");\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.writeToOutput(\";\");\n            emitter.emitComments(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckDoWhile(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopEnd = context.current;\n                loopEnd.addSuccessor(loopStart);\n                context.addContent(this.cond);\n                // TODO: check for while (true) \n                context.current = afterLoop;\n                loopEnd.addSuccessor(afterLoop);\n            }\n            else {\n                context.addUnreachable(this.cond);\n            }\n            context.walker.options.goChildren = false;\n        }\n\n        public structuralEquals(ast: DoWhileStatement, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition) &&\n                   structuralEquals(this.cond, ast.cond, includingPosition);\n        }\n    }\n\n    export class IfStatement extends Statement {\n        public statement: ASTSpan = new ASTSpan();\n\n        constructor(public cond: AST,\n                    public thenBod: AST,\n                    public elseBod: AST) {\n            super(NodeType.IfStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput(\"if (\");\n            emitter.emitJavascript(this.cond, TokenID.If, false);\n            emitter.writeToOutput(\")\");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascriptStatements(this.thenBod, true);\n            if (this.elseBod) {\n                if (this.elseBod.nodeType === NodeType.IfStatement) {\n                    emitter.writeToOutput(\" else \");\n                    this.elseBod.emit(emitter, tokenId, /*startLine:*/ false);\n                }\n                else {\n                    emitter.writeToOutput(\" else\");\n                    emitter.emitJavascriptStatements(this.elseBod, true);\n                }\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckIf(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            this.cond.addToControlFlow(context);\n            var afterIf = new BasicBlock();\n            var beforeIf = context.current;\n            context.pushStatement(this, beforeIf, afterIf);\n            var hasContinuation = false;\n            context.current = new BasicBlock();\n            beforeIf.addSuccessor(context.current);\n            context.walk(this.thenBod, this);\n            if (!context.noContinuation) {\n                hasContinuation = true;\n                context.current.addSuccessor(afterIf);\n            }\n            if (this.elseBod) {\n                // current block will be thenBod\n                context.current = new BasicBlock();\n                context.noContinuation = false;\n                beforeIf.addSuccessor(context.current);\n                context.walk(this.elseBod, this);\n                if (!context.noContinuation) {\n                    hasContinuation = true;\n                    context.current.addSuccessor(afterIf);\n                }\n                else {\n                    // thenBod created continuation for if statement\n                    if (hasContinuation) {\n                        context.noContinuation = false;\n                    }\n                }\n            }\n            else {\n                beforeIf.addSuccessor(afterIf);\n                context.noContinuation = false;\n                hasContinuation = true;\n            }\n            var targetInfo = context.popStatement();\n            if (afterIf.predecessors.length > 0) {\n                context.noContinuation = false;\n                hasContinuation = true;\n            }\n            if (hasContinuation) {\n                context.current = afterIf;\n            }\n            context.walker.options.goChildren = false;\n        }\n\n        public structuralEquals(ast: IfStatement, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.cond, ast.cond, includingPosition) &&\n                   structuralEquals(this.thenBod, ast.thenBod, includingPosition) &&\n                   structuralEquals(this.elseBod, ast.elseBod, includingPosition);\n        }\n    }\n\n    export class ReturnStatement extends Statement {\n        constructor(public returnExpression: AST) {\n            super(NodeType.ReturnStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            if (this.returnExpression) {\n                emitter.writeToOutput(\"return \");\n                emitter.emitJavascript(this.returnExpression, TokenID.Semicolon, false);\n                emitter.writeLineToOutput(\";\");\n            }\n            else {\n                emitter.writeLineToOutput(\"return;\");\n            }\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            super.addToControlFlow(context);\n            context.returnStmt();\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckReturn(this);\n        }\n\n        public structuralEquals(ast: ReturnStatement, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.returnExpression, ast.returnExpression, includingPosition);\n        }\n    }\n\n    export class EndCode extends AST {\n        constructor() {\n            super(NodeType.EndCode);\n        }\n    }\n\n    export class ForInStatement extends Statement {\n        constructor(public lval: AST, public obj: AST, public body: AST) {\n            super(NodeType.ForInStatement);\n        }\n\n        public statement: ASTSpan = new ASTSpan();\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput(\"for(\");\n            emitter.emitJavascript(this.lval, TokenID.For, false);\n            emitter.writeToOutput(\" in \");\n            emitter.emitJavascript(this.obj, TokenID.For, false);\n            emitter.writeToOutput(\")\");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckForIn(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            if (this.lval) {\n                context.addContent(this.lval);\n            }\n            if (this.obj) {\n                context.addContent(this.obj);\n            }\n\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            if (this.body) {\n                context.pushStatement(this, loopStart, afterLoop);\n                context.walk(this.body, this);\n                context.popStatement();\n            }\n            if (!(context.noContinuation)) {\n                var loopEnd = context.current;\n                loopEnd.addSuccessor(loopStart);\n            }\n            context.current = afterLoop;\n            context.noContinuation = false;\n            loopHeader.addSuccessor(afterLoop);\n            context.walker.options.goChildren = false;\n        }\n\n        public structuralEquals(ast: ForInStatement, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.lval, ast.lval, includingPosition) &&\n                   structuralEquals(this.obj, ast.obj, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition);\n        }\n    }\n\n    export class ForStatement extends Statement {\n        constructor(public init: AST,\n                    public cond: AST,\n                    public incr: AST,\n                    public body: AST) {\n            super(NodeType.ForStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.writeToOutput(\"for(\");\n            if (this.init) {\n                if (this.init.nodeType != NodeType.List) {\n                    emitter.emitJavascript(this.init, TokenID.For, false);\n                }\n                else {\n                    emitter.setInVarBlock((<ASTList>this.init).members.length);\n                    emitter.emitJavascriptList(this.init, null, TokenID.For, false, false, false);\n                }\n            }\n            emitter.writeToOutput(\"; \");\n            emitter.emitJavascript(this.cond, TokenID.For, false);\n            emitter.writeToOutput(\"; \");\n            emitter.emitJavascript(this.incr, TokenID.For, false);\n            emitter.writeToOutput(\")\");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckFor(this);\n        }\n\n        public addToControlFlow(context: ControlFlowContext): void {\n            if (this.init) {\n                context.addContent(this.init);\n            }\n            var loopHeader = context.current;\n            var loopStart = new BasicBlock();\n            var afterLoop = new BasicBlock();\n\n            loopHeader.addSuccessor(loopStart);\n            context.current = loopStart;\n            var condBlock: BasicBlock = null;\n            var continueTarget = loopStart;\n            var incrBB: BasicBlock = null;\n            if (this.incr) {\n                incrBB = new BasicBlock();\n                continueTarget = incrBB;\n            }\n            if (this.cond) {\n                condBlock = context.current;\n                context.addContent(this.cond);\n                context.current = new BasicBlock();\n                condBlock.addSuccessor(context.current);\n            }\n            var targetInfo: ITargetInfo = null;\n            if (this.body) {\n                context.pushStatement(this, continueTarget, afterLoop);\n                context.walk(this.body, this);\n                targetInfo = context.popStatement();\n            }\n            if (this.incr) {\n                if (context.noContinuation) {\n                    if (incrBB.predecessors.length === 0) {\n                        context.addUnreachable(this.incr);\n                    }\n                }\n                else {\n                    context.current.addSuccessor(incrBB);\n                    context.current = incrBB;\n                    context.addContent(this.incr);\n                }\n            }\n            var loopEnd = context.current;\n            if (!(context.noContinuation)) {\n                loopEnd.addSuccessor(loopStart);\n\n            }\n            if (condBlock) {\n                condBlock.addSuccessor(afterLoop);\n                context.noContinuation = false;\n            }\n            if (afterLoop.predecessors.length > 0) {\n                context.noContinuation = false;\n                context.current = afterLoop;\n            }\n            context.walker.options.goChildren = false;\n        }\n\n        public structuralEquals(ast: ForStatement, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.init, ast.init, includingPosition) &&\n                   structuralEquals(this.cond, ast.cond, includingPosition) &&\n                   structuralEquals(this.incr, ast.incr, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition);\n        }\n    }\n\n    export class WithStatement extends Statement {\n        public withSym: WithSymbol = null;\n\n        constructor(public expr: AST, public body: AST) {\n            super(NodeType.WithStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(\"with (\");\n            if (this.expr) {\n                emitter.emitJavascript(this.expr, TokenID.With, false);\n            }\n\n            emitter.writeToOutput(\")\");\n            emitter.emitJavascriptStatements(this.body, true);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            return typeFlow.typeCheckWith(this);\n        }\n\n        public structuralEquals(ast: WithStatement, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.expr, ast.expr, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition);\n        }\n    }\n\n    export class SwitchStatement extends Statement {\n        public caseList: ASTList;\n        public defaultCase: CaseClause = null;\n        public statement: ASTSpan = new ASTSpan();\n\n        constructor(public val: AST) {\n            super(NodeType.SwitchStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            var temp = emitter.setInObjectLiteral(false);\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput(\"switch(\");\n            emitter.emitJavascript(this.val, TokenID.Identifier, false);\n            emitter.writeToOutput(\")\");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.writeLineToOutput(\" {\");\n            emitter.indenter.increaseIndent();\n            var casesLen = this.caseList.members.length;\n            for (var i = 0; i < casesLen; i++) {\n                var caseExpr = this.caseList.members[i];\n                emitter.emitJavascript(caseExpr, TokenID.Case, true);\n            }\n            emitter.indenter.decreaseIndent();\n            emitter.emitIndent();\n            emitter.writeToOutput(\"}\");\n            emitter.setInObjectLiteral(temp);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var len = this.caseList.members.length;\n            this.val = typeFlow.typeCheck(this.val);\n            for (var i = 0; i < len; i++) {\n                this.caseList.members[i] = typeFlow.typeCheck(this.caseList.members[i]);\n            }\n            this.defaultCase = <CaseClause>typeFlow.typeCheck(this.defaultCase);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        // if there are break statements that match this switch, then just link cond block with block after switch\n        public addToControlFlow(context: ControlFlowContext) {\n            var condBlock = context.current;\n            context.addContent(this.val);\n            var execBlock = new BasicBlock();\n            var afterSwitch = new BasicBlock();\n\n            condBlock.addSuccessor(execBlock);\n            context.pushSwitch(execBlock);\n            context.current = execBlock;\n            context.pushStatement(this, execBlock, afterSwitch);\n            context.walk(this.caseList, this);\n            context.popSwitch();\n            var targetInfo = context.popStatement();\n            var hasCondContinuation = (this.defaultCase === null);\n            if (this.defaultCase === null) {\n                condBlock.addSuccessor(afterSwitch);\n            }\n            if (afterSwitch.predecessors.length > 0) {\n                context.noContinuation = false;\n                context.current = afterSwitch;\n            }\n            else {\n                context.noContinuation = true;\n            }\n            context.walker.options.goChildren = false;\n        }\n\n        public structuralEquals(ast: SwitchStatement, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.caseList, ast.caseList, includingPosition) &&\n                   structuralEquals(this.val, ast.val, includingPosition);\n        }\n    }\n\n    export class CaseClause extends AST {\n        public expr: AST = null;\n        public body: ASTList;\n        public colonSpan: ASTSpan = new ASTSpan();\n\n        constructor() {\n            super(NodeType.CaseClause);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            if (this.expr) {\n                emitter.writeToOutput(\"case \");\n                emitter.emitJavascript(this.expr, TokenID.Identifier, false);\n            }\n            else {\n                emitter.writeToOutput(\"default\");\n            }\n            emitter.recordSourceMappingStart(this.colonSpan);\n            emitter.writeToOutput(\":\");\n            emitter.recordSourceMappingEnd(this.colonSpan);\n            if (this.body.members.length === 1 && this.body.members[0].nodeType === NodeType.Block) {\n                // The case statement was written with curly braces, so emit it with the appropriate formatting\n                emitter.emitJavascriptStatements(this.body, false);\n            }\n            else {\n                // No curly braces. Format in the expected way\n                emitter.writeLineToOutput(\"\");\n                emitter.indenter.increaseIndent();\n                emitter.emitBareJavascriptStatements(this.body);\n                emitter.indenter.decreaseIndent();\n            }\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            this.expr = typeFlow.typeCheck(this.expr);\n            typeFlow.typeCheck(this.body);\n            this.type = typeFlow.voidType;\n            return this;\n        }\n\n        // TODO: more reasoning about unreachable cases (such as duplicate literals as case expressions)\n        // for now, assume all cases are reachable, regardless of whether some cases fall through\n        public addToControlFlow(context: ControlFlowContext) {\n            var execBlock = new BasicBlock();\n            var sw = context.currentSwitch[context.currentSwitch.length - 1];\n            // TODO: fall-through from previous (+ to end of switch)\n            if (this.expr) {\n                var exprBlock = new BasicBlock();\n                context.current = exprBlock;\n                sw.addSuccessor(exprBlock);\n                context.addContent(this.expr);\n                exprBlock.addSuccessor(execBlock);\n            }\n            else {\n                sw.addSuccessor(execBlock);\n            }\n            context.current = execBlock;\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n\n        public structuralEquals(ast: CaseClause, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.expr, ast.expr, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition);\n        }\n    }\n\n    export class TypeParameter extends AST {\n        constructor(public name: Identifier, public constraint: AST) {\n            super(NodeType.TypeParameter);\n        }\n\n        public structuralEquals(ast: TypeParameter, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.name, ast.name, includingPosition) &&\n                   structuralEquals(this.constraint, ast.constraint, includingPosition);\n        }\n    }\n\n    export class GenericType extends AST {\n        constructor(public name: AST, public typeArguments: ASTList) {\n            super(NodeType.GenericType);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitJavascript(this.name, TokenID.Identifier, false);\n        }\n\n        public structuralEquals(ast: GenericType, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.name, ast.name, includingPosition) &&\n                   structuralEquals(this.typeArguments, ast.typeArguments, includingPosition);\n        }\n    }\n\n    export class TypeReference extends AST {\n        constructor(public term: AST, public arrayCount: number) {\n            super(NodeType.TypeRef);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            throw new Error(\"should not emit a type ref\");\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var prevInTCTR = typeFlow.inTypeRefTypeCheck;\n            typeFlow.inTypeRefTypeCheck = true;\n            var typeLink = getTypeLink(this, typeFlow.checker, true);\n            typeFlow.checker.resolveTypeLink(typeFlow.scope, typeLink, false);\n\n            if (this.term) {\n                typeFlow.typeCheck(this.term);\n            }\n\n            typeFlow.checkForVoidConstructor(typeLink.type, this);\n\n            this.type = typeLink.type;\n\n            // in error recovery cases, there may not be a term\n            if (this.term) {\n                this.term.type = this.type;\n            }\n\n            typeFlow.inTypeRefTypeCheck = prevInTCTR;\n            return this;\n        }\n\n        public structuralEquals(ast: TypeReference, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.term, ast.term, includingPosition) &&\n                   this.arrayCount === ast.arrayCount;\n        }\n    }\n\n    export class TryStatement extends Statement {\n        constructor(public tryBody: AST, public catchClause: CatchClause, public finallyBody: AST) {\n            super(NodeType.TryStatement);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(\"try \");\n            emitter.emitJavascript(this.tryBody, TokenID.Try, false);\n            emitter.emitJavascript(this.catchClause, TokenID.Catch, false);\n\n            if (this.finallyBody) {\n                emitter.writeToOutput(\" finally\");\n                emitter.emitJavascript(this.finallyBody, TokenID.Finally, false);\n            }\n\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public structuralEquals(ast: TryStatement, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.tryBody, ast.tryBody, includingPosition) &&\n                   structuralEquals(this.catchClause, ast.catchClause, includingPosition) &&\n                   structuralEquals(this.finallyBody, ast.finallyBody, includingPosition);\n        }\n    }\n\n    export class CatchClause extends AST {\n        constructor(public param: VarDecl, public body: AST) {\n            super(NodeType.CatchClause);\n        }\n\n        public statement: ASTSpan = new ASTSpan();\n        public containedScope: SymbolScope = null;\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(\" \");\n            emitter.recordSourceMappingStart(this.statement);\n            emitter.writeToOutput(\"catch (\");\n            emitter.emitJavascript(this.param, TokenID.OpenParen, false);\n            emitter.writeToOutput(\")\");\n            emitter.recordSourceMappingEnd(this.statement);\n            emitter.emitJavascript(this.body, TokenID.Catch, false);\n            emitter.recordSourceMappingEnd(this);\n            emitter.emitComments(this, false);\n        }\n\n        public addToControlFlow(context: ControlFlowContext) {\n            if (this.param) {\n                context.addContent(this.param);\n                var bodBlock = new BasicBlock();\n                context.current.addSuccessor(bodBlock);\n                context.current = bodBlock;\n            }\n            if (this.body) {\n                context.walk(this.body, this);\n            }\n            context.noContinuation = false;\n            context.walker.options.goChildren = false;\n        }\n\n        public typeCheck(typeFlow: TypeFlow) {\n            var prevScope = typeFlow.scope;\n            typeFlow.scope = this.containedScope;\n            this.param = <VarDecl>typeFlow.typeCheck(this.param);\n            var exceptVar = new ValueLocation();\n            var varSym = new VariableSymbol((<VarDecl>this.param).id.text,\n                                          this.param.minChar,\n                                          typeFlow.checker.locationInfo.fileName,\n                                          exceptVar);\n            exceptVar.symbol = varSym;\n            exceptVar.typeLink = new TypeLink();\n            // var type for now (add syntax for type annotation)\n            exceptVar.typeLink.type = typeFlow.anyType;\n            var thisFnc = typeFlow.thisFnc;\n            if (thisFnc && thisFnc.type) {\n                exceptVar.symbol.container = thisFnc.type.symbol;\n            }\n            else {\n                exceptVar.symbol.container = null;\n            }\n            this.param.sym = exceptVar.symbol;\n            typeFlow.scope.enter(exceptVar.symbol.container, this.param, exceptVar.symbol,\n                                 typeFlow.checker.errorReporter, false, false, false);\n            this.body = typeFlow.typeCheck(this.body);\n\n            // if we\'re in provisional typecheck mode, clean up the symbol entry\n            // REVIEW: This is obviously bad form, since we\'re counting on the internal\n            // layout of the symbol table, but this is also the only place where we insert\n            // symbols during typecheck\n            if (typeFlow.checker.inProvisionalTypecheckMode()) {\n                var table = typeFlow.scope.getTable();\n                (<any>table).secondaryTable.table[exceptVar.symbol.name] = undefined;\n            }\n            this.type = typeFlow.voidType;\n            typeFlow.scope = prevScope;\n            return this;\n        }\n\n        public structuralEquals(ast: CatchClause, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   structuralEquals(this.param, ast.param, includingPosition) &&\n                   structuralEquals(this.body, ast.body, includingPosition);\n        }\n    }\n\n    export class Comment extends AST {\n        public text: string[] = null;\n        public minLine: number;\n        public limLine: number;\n        private docCommentText: string = null;\n\n        constructor(public content: string,\n                    public isBlockComment: bool,\n                    public endsLine) {\n            super(NodeType.Comment);\n        }\n\n        public structuralEquals(ast: Comment, includingPosition: bool): bool {\n            return super.structuralEquals(ast, includingPosition) &&\n                   this.minLine === ast.minLine &&\n                   this.content === ast.content &&\n                   this.isBlockComment === ast.isBlockComment &&\n                   this.endsLine === ast.endsLine;\n        }\n\n        public getText(): string[] {\n            if (this.text === null) {\n                if (this.isBlockComment) {\n                    this.text = this.content.split(\"\\n\");\n                    for (var i = 0; i < this.text.length; i++) {\n                        this.text[i] = this.text[i].replace(/^\\s+|\\s+$/g, \'\');\n                    }\n                }\n                else {\n                    this.text = [(this.content.replace(/^\\s+|\\s+$/g, \'\'))];\n                }\n            }\n\n            return this.text;\n        }\n\n        public isDocComment() {\n            if (this.isBlockComment) {\n                return this.content.charAt(2) === \"*\" && this.content.charAt(3) != \"/\";\n            }\n\n            return false;\n        }\n\n        public getDocCommentTextValue() {\n            if (this.docCommentText === null) {\n                this.docCommentText = Comment.cleanJSDocComment(this.content);\n            }\n\n            return this.docCommentText;\n        }\n\n        static consumeLeadingSpace(line: string, startIndex: number, maxSpacesToRemove?: number) {\n            var endIndex = line.length;\n            if (maxSpacesToRemove != undefined) {\n                endIndex = min(startIndex + maxSpacesToRemove, endIndex);\n            }\n\n            for (; startIndex < endIndex; startIndex++) {\n                var charCode = line.charCodeAt(startIndex);\n                if (charCode != LexCodeSpace && charCode != LexCodeTAB) {\n                    return startIndex;\n                }\n            }\n\n            if (endIndex != line.length) {\n                return endIndex;\n            }\n\n            return -1;\n        }\n\n        static isSpaceChar(line: string, index: number) {\n            var length = line.length;\n            if (index < length) {\n                var charCode = line.charCodeAt(index);\n                // If the character is space\n                return charCode === LexCodeSpace || charCode === LexCodeTAB;\n            }\n\n            // If the index is end of the line it is space\n            return index === length;\n        }\n\n        static cleanDocCommentLine(line: string, jsDocStyleComment: bool, jsDocLineSpaceToRemove?: number) {\n            var nonSpaceIndex = Comment.consumeLeadingSpace(line, 0);\n            if (nonSpaceIndex != -1) {\n                var jsDocSpacesRemoved = nonSpaceIndex;\n                if (jsDocStyleComment && line.charAt(nonSpaceIndex) === \'*\') { // remove leading * in case of jsDocComment\n                    var startIndex = nonSpaceIndex + 1;\n                    nonSpaceIndex = Comment.consumeLeadingSpace(line, startIndex, jsDocLineSpaceToRemove);\n\n                    if (nonSpaceIndex != -1) {\n                        jsDocSpacesRemoved = nonSpaceIndex - startIndex;\n                    } else {\n                        return null;\n                    }\n                }\n\n                return {\n                    minChar: nonSpaceIndex,\n                    limChar: line.charAt(line.length - 1) === \"\\r\" ? line.length - 1 : line.length,\n                    jsDocSpacesRemoved: jsDocSpacesRemoved\n                };\n            }\n\n            return null;\n        }\n\n        static cleanJSDocComment(content: string, spacesToRemove?: number) {\n\n            var docCommentLines: string[] = [];\n            content = content.replace(\"/**\", \"\"); // remove /**\n            if (content.length >= 2 && content.charAt(content.length - 1) === \"/\" && content.charAt(content.length - 2) === \"*\") {\n                content = content.substring(0, content.length - 2); // remove last */\n            }\n            var lines = content.split(\"\\n\");\n            var inParamTag = false;\n            for (var l = 0; l < lines.length; l++) {\n                var line = lines[l];\n                var cleanLinePos = Comment.cleanDocCommentLine(line, true, spacesToRemove);\n                if (!cleanLinePos) {\n                    // Whole line empty, read next line\n                    continue;\n                }\n\n                var docCommentText = \"\";\n                var prevPos = cleanLinePos.minChar;\n                for (var i = line.indexOf(\"@\", cleanLinePos.minChar); 0 <= i && i < cleanLinePos.limChar; i = line.indexOf(\"@\", i + 1)) {\n                    // We have encoutered @. \n                    // If we were omitting param comment, we dont have to do anything\n                    // other wise the content of the text till @ tag goes as doc comment\n                    var wasInParamtag = inParamTag;\n\n                    // Parse contents next to @\n                    if (line.indexOf(\"param\", i + 1) === i + 1 && Comment.isSpaceChar(line, i + 6)) {\n                        // It is param tag. \n\n                        // If we were not in param tag earlier, push the contents from prev pos of the tag this tag start as docComment\n                        if (!wasInParamtag) {\n                            docCommentText += line.substring(prevPos, i);\n                        }\n\n                        // New start of contents \n                        prevPos = i;\n                        inParamTag = true;\n                    } else if (wasInParamtag) {\n                        // Non param tag start\n                        prevPos = i;\n                        inParamTag = false;\n                    }\n                }\n\n                if (!inParamTag) {\n                    docCommentText += line.substring(prevPos, cleanLinePos.limChar);\n                }\n\n                // Add line to comment text if it is not only white space line\n                var newCleanPos = Comment.cleanDocCommentLine(docCommentText, false);\n                if (newCleanPos) {\n                    if (spacesToRemove === undefined) {\n                        spacesToRemove = cleanLinePos.jsDocSpacesRemoved;\n                    }\n                    docCommentLines.push(docCommentText);\n                }\n            }\n\n            return docCommentLines.join(\"\\n\");\n        }\n\n        static getDocCommentText(comments: Comment[]) {\n            var docCommentText: string[] = [];\n            for (var c = 0 ; c < comments.length; c++) {\n                var commentText = comments[c].getDocCommentTextValue();\n                if (commentText != \"\") {\n                    docCommentText.push(commentText);\n                }\n            }\n            return docCommentText.join(\"\\n\");\n        }\n\n        static getParameterDocCommentText(param: string, fncDocComments: Comment[]) {\n            if (fncDocComments.length === 0 || !fncDocComments[0].isBlockComment) {\n                // there were no fnc doc comments and the comment is not block comment then it cannot have \n                // @param comment that can be parsed\n                return \"\";\n            }\n\n            for (var i = 0; i < fncDocComments.length; i++) {\n                var commentContents = fncDocComments[i].content;\n                for (var j = commentContents.indexOf(\"@param\", 0); 0 <= j; j = commentContents.indexOf(\"@param\", j)) {\n                    j += 6;\n                    if (!Comment.isSpaceChar(commentContents, j)) {\n                        // This is not param tag but a tag line @paramxxxxx\n                        continue;\n                    }\n\n                    // This is param tag. Check if it is what we are looking for\n                    j = Comment.consumeLeadingSpace(commentContents, j);\n                    if (j === -1) {\n                        break;\n                    }\n\n                    // Ignore the type expression\n                    if (commentContents.charCodeAt(j) === LexCodeLC) {\n                        j++;\n                        // Consume the type\n                        var charCode = 0;\n                        for (var curlies = 1; j < commentContents.length; j++) {\n                            charCode = commentContents.charCodeAt(j);\n                            // { character means we need to find another } to match the found one\n                            if (charCode === LexCodeLC) {\n                                curlies++;\n                                continue;\n                            }\n\n                            // } char\n                            if (charCode === LexCodeRC) {\n                                curlies--;\n                                if (curlies === 0) {\n                                    // We do not have any more } to match the type expression is ignored completely\n                                    break;\n                                } else {\n                                    // there are more { to be matched with }\n                                    continue;\n                                }\n                            }\n\n                            // Found start of another tag\n                            if (charCode === LexCodeAtSign) {\n                                break;\n                            }\n                        }\n\n                        // End of the comment\n                        if (j === commentContents.length) {\n                            break;\n                        }\n\n                        // End of the tag, go onto looking for next tag\n                        if (charCode === LexCodeAtSign) {\n                            continue;\n                        }\n\n                        j = Comment.consumeLeadingSpace(commentContents, j + 1);\n                        if (j === -1) {\n                            break;\n                        }\n                    }\n\n                    // Parameter name\n                    if (param != commentContents.substr(j, param.length) || !Comment.isSpaceChar(commentContents, j + param.length)) {\n                        // this is not the parameter we are looking for\n                        continue;\n                    }\n\n                    // Found the parameter we were looking for\n                    j = Comment.consumeLeadingSpace(commentContents, j + param.length);\n                    if (j === -1) {\n                        return \"\";\n                    }\n\n                    var endOfParam = commentContents.indexOf(\"@\", j);\n                    var paramHelpString = commentContents.substring(j, endOfParam < 0 ? commentContents.length : endOfParam);\n\n                    // Find alignement spaces to remove\n                    var paramSpacesToRemove: number = undefined;\n                    var paramLineIndex = commentContents.substring(0, j).lastIndexOf(\"\\n\") + 1;\n                    if (paramLineIndex != 0) {\n                        if (paramLineIndex < j && commentContents.charAt(paramLineIndex + 1) === \"\\r\") {\n                            paramLineIndex++;\n                        }\n                    }\n                    var startSpaceRemovalIndex = Comment.consumeLeadingSpace(commentContents, paramLineIndex);\n                    if (startSpaceRemovalIndex != j && commentContents.charAt(startSpaceRemovalIndex) === \"*\") {\n                        paramSpacesToRemove = j - startSpaceRemovalIndex - 1;\n                    }\n\n                    // Clean jsDocComment and return\n                    return Comment.cleanJSDocComment(paramHelpString, paramSpacesToRemove);\n                }\n            }\n\n            return \"\";\n        }\n\n        static getDocCommentFirstOverloadSignature(signatureGroup: SignatureGroup) {\n            for (var i = 0; i < signatureGroup.signatures.length; i++) {\n                var signature = signatureGroup.signatures[i];\n                if (signature === signatureGroup.definitionSignature) {\n                    continue;\n                }\n\n                return TypeScript.Comment.getDocCommentText(signature.declAST.getDocComments());\n            }\n\n            return \"\";\n        }\n    }\n\n    export class DebuggerStatement extends Statement {\n        constructor() {\n            super(NodeType.Debugger);\n        }\n\n        public emit(emitter: Emitter, tokenId: TokenID, startLine: bool) {\n            emitter.emitComments(this, true);\n            emitter.recordSourceMappingStart(this);\n            emitter.writeToOutput(\"debugger\");\n            emitter.recordSourceMappingEnd(this);\n            emitter.writeLineToOutput(\";\");\n            emitter.emitComments(this, false);\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export interface IAstWalker {\n        walk(ast: AST, parent: AST): AST;\n        options: AstWalkOptions;\n        state: any; // user state object\n    }\n\n    export class AstWalkOptions {\n        public goChildren = true;\n    }\n\n    export interface IAstWalkCallback {\n        (ast: AST, parent: AST, walker: IAstWalker): AST;\n    }\n\n    export interface IAstWalkChildren {\n        (preAst: AST, parent: AST, walker: IAstWalker): void;\n    }\n\n    class AstWalker implements IAstWalker {\n        constructor(\n            private childrenWalkers: IAstWalkChildren[],\n            private pre: IAstWalkCallback,\n            private post: IAstWalkCallback,\n            public options: AstWalkOptions,\n            public state: any) {\n        }\n\n        public walk(ast: AST, parent: AST): AST {\n            var preAst = this.pre(ast, parent, this);\n            if (preAst === undefined) {\n                preAst = ast;\n            }\n            if (this.options.goChildren) {\n                // Call the \"walkChildren\" function corresponding to \"nodeType\".\n                this.childrenWalkers[ast.nodeType](ast, parent, this);\n            }\n            else {\n                // no go only applies to children of node issuing it\n                this.options.goChildren = true;\n            }\n\n            if (this.post) {\n                var postAst = this.post(preAst, parent, this);\n                if (postAst === undefined) {\n                    postAst = preAst;\n                }\n                return postAst;\n            }\n            else {\n                return preAst;\n            }\n        }\n    }\n\n    export class AstWalkerFactory {\n        private childrenWalkers: IAstWalkChildren[] = [];\n\n        constructor() {\n            this.initChildrenWalkers();\n        }\n\n        public walk(ast: AST, pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): AST {\n            return this.getWalker(pre, post, options, state).walk(ast, null)\n        }\n\n        public getWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {\n            return this.getSlowWalker(pre, post, options, state);\n        }\n\n        private getSlowWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {\n            if (!options) {\n                options = new AstWalkOptions();\n            }\n\n            return new AstWalker(this.childrenWalkers, pre, post, options, state);\n        }\n\n        private initChildrenWalkers(): void {\n            this.childrenWalkers[NodeType.None] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Empty] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.EmptyExpr] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.TrueLiteral] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.FalseLiteral] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.ThisExpression] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.SuperExpression] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.StringLiteral] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.RegularExpressionLiteral] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Null] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.ArrayLit] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.ObjectLit] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Void] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Comma] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Pos] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Neg] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.Delete] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.In] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Dot] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Is] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.InstOf] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Typeof] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.NumberLit] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Name] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.TypeParameter] = ChildrenWalkers.walkTypeParameterChildren;\n            this.childrenWalkers[NodeType.GenericType] = ChildrenWalkers.walkGenericTypeChildren;\n            this.childrenWalkers[NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren;\n            this.childrenWalkers[NodeType.Index] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Call] = ChildrenWalkers.walkCallExpressionChildren;\n            this.childrenWalkers[NodeType.New] = ChildrenWalkers.walkCallExpressionChildren;\n            this.childrenWalkers[NodeType.Asg] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgAdd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgSub] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgDiv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgMul] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgMod] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgAnd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgXor] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgOr] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgLsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgRsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.AsgRs2] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogOr] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogAnd] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Or] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Xor] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.And] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Eq] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Ne] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Eqv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.NEqv] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Lt] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Le] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Gt] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Ge] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Add] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Sub] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Mul] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Div] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Mod] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Lsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Rsh] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Rs2] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.Not] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.LogNot] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.IncPre] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.DecPre] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.IncPost] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.DecPost] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.CastExpression] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.ParenthesizedExpression] = ChildrenWalkers.walkParenthesizedExpressionChildren;\n            this.childrenWalkers[NodeType.FuncDecl] = ChildrenWalkers.walkFuncDeclChildren;\n            this.childrenWalkers[NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren;\n            this.childrenWalkers[NodeType.VarDecl] = ChildrenWalkers.walkBoundDeclChildren;\n            this.childrenWalkers[NodeType.ArgDecl] = ChildrenWalkers.walkBoundDeclChildren;\n            this.childrenWalkers[NodeType.ReturnStatement] = ChildrenWalkers.walkReturnStatementChildren;\n            this.childrenWalkers[NodeType.BreakStatement] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.ContinueStatement] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.ThrowStatement] = ChildrenWalkers.walkUnaryExpressionChildren;\n            this.childrenWalkers[NodeType.ForStatement] = ChildrenWalkers.walkForStatementChildren;\n            this.childrenWalkers[NodeType.ForInStatement] = ChildrenWalkers.walkForInStatementChildren;\n            this.childrenWalkers[NodeType.IfStatement] = ChildrenWalkers.walkIfStatementChildren;\n            this.childrenWalkers[NodeType.WhileStatement] = ChildrenWalkers.walkWhileStatementChildren;\n            this.childrenWalkers[NodeType.DoStatement] = ChildrenWalkers.walkDoWhileStatementChildren;\n            this.childrenWalkers[NodeType.Block] = ChildrenWalkers.walkBlockChildren;\n            this.childrenWalkers[NodeType.CaseClause] = ChildrenWalkers.walkCaseClauseChildren;\n            this.childrenWalkers[NodeType.SwitchStatement] = ChildrenWalkers.walkSwitchStatementChildren;\n            this.childrenWalkers[NodeType.TryStatement] = ChildrenWalkers.walkTryStatementChildren;\n            this.childrenWalkers[NodeType.CatchClause] = ChildrenWalkers.walkCatchClauseChildren;\n            this.childrenWalkers[NodeType.List] = ChildrenWalkers.walkListChildren;\n            this.childrenWalkers[NodeType.Script] = ChildrenWalkers.walkScriptChildren;\n            this.childrenWalkers[NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren;\n            this.childrenWalkers[NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren;\n            this.childrenWalkers[NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren;\n            this.childrenWalkers[NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren;\n            this.childrenWalkers[NodeType.ExportAssignment] = ChildrenWalkers.walkExportAssignmentChildren;\n            this.childrenWalkers[NodeType.WithStatement] = ChildrenWalkers.walkWithStatementChildren;\n            this.childrenWalkers[NodeType.ExpressionStatement] = ChildrenWalkers.walkExpressionStatementChildren;\n            this.childrenWalkers[NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren;\n            this.childrenWalkers[NodeType.EndCode] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Comment] = ChildrenWalkers.walkNone;\n            this.childrenWalkers[NodeType.Debugger] = ChildrenWalkers.walkNone;\n\n            // Verify the code is up to date with the enum\n            for (var e in (<any>NodeType)._map) {\n                if ((<any>this.childrenWalkers)[e] === undefined) {\n                    throw new Error(\"initWalkers function is not up to date with enum content!\");\n                }\n            }\n        }\n    }\n\n    var globalAstWalkerFactory: AstWalkerFactory;\n\n    export function getAstWalkerFactory(): AstWalkerFactory {\n        if (!globalAstWalkerFactory) {\n            globalAstWalkerFactory = new AstWalkerFactory();\n        }\n        return globalAstWalkerFactory;\n    }\n\n    module ChildrenWalkers {\n        export function walkNone(preAst: ASTList, parent: AST, walker: IAstWalker): void {\n            // Nothing to do\n        }\n\n        export function walkListChildren(preAst: ASTList, parent: AST, walker: IAstWalker): void {\n            var len = preAst.members.length;\n\n            for (var i = 0; i < len; i++) {\n                preAst.members[i] = walker.walk(preAst.members[i], preAst);\n            }\n        }\n\n        export function walkUnaryExpressionChildren(preAst: UnaryExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.castTerm) {\n                preAst.castTerm = walker.walk(preAst.castTerm, preAst);\n            }\n            if (preAst.operand) {\n                preAst.operand = walker.walk(preAst.operand, preAst);\n            }\n        }\n\n        export function walkParenthesizedExpressionChildren(preAst: ParenthesizedExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.expression) {\n                preAst.expression = walker.walk(preAst.expression, preAst);\n            }\n        }\n\n        export function walkBinaryExpressionChildren(preAst: BinaryExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.operand1) {\n                preAst.operand1 = walker.walk(preAst.operand1, preAst);\n            }\n            if (preAst.operand2) {\n                preAst.operand2 = walker.walk(preAst.operand2, preAst);\n            }\n        }\n\n        export function walkTypeParameterChildren(preAst: TypeParameter, parent: AST, walker: IAstWalker): void {\n            if (preAst.name) {\n                preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            }\n\n            if (preAst.constraint) {\n                preAst.constraint = <ASTList> walker.walk(preAst.constraint, preAst);\n            }\n        }\n\n        export function walkGenericTypeChildren(preAst: GenericType, parent: AST, walker: IAstWalker): void {\n            if (preAst.name) {\n                preAst.name = walker.walk(preAst.name, preAst);\n            }\n\n            if (preAst.typeArguments) {\n                preAst.typeArguments = <ASTList> walker.walk(preAst.typeArguments, preAst);\n            }\n        }\n\n        export function walkTypeReferenceChildren(preAst: TypeReference, parent: AST, walker: IAstWalker): void {\n            if (preAst.term) {\n                preAst.term = walker.walk(preAst.term, preAst);\n            }\n        }\n\n        export function walkCallExpressionChildren(preAst: CallExpression, parent: AST, walker: IAstWalker): void {\n            preAst.target = walker.walk(preAst.target, preAst);\n\n            if (preAst.arguments) {\n                preAst.arguments = <ASTList> walker.walk(preAst.arguments, preAst);\n            }\n        }\n\n        export function walkTrinaryExpressionChildren(preAst: ConditionalExpression, parent: AST, walker: IAstWalker): void {\n            if (preAst.operand1) {\n                preAst.operand1 = walker.walk(preAst.operand1, preAst);\n            }\n            if (preAst.operand2) {\n                preAst.operand2 = walker.walk(preAst.operand2, preAst);\n            }\n            if (preAst.operand3) {\n                preAst.operand3 = walker.walk(preAst.operand3, preAst);\n            }\n        }\n\n        export function walkFuncDeclChildren(preAst: FuncDecl, parent: AST, walker: IAstWalker): void {\n            if (preAst.name) {\n                preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            }\n            if (preAst.typeArguments) {\n                preAst.typeArguments = <ASTList>walker.walk(preAst.typeArguments, preAst);\n            }\n            if (preAst.arguments) {\n                preAst.arguments = <ASTList>walker.walk(preAst.arguments, preAst);\n            }\n            if (preAst.returnTypeAnnotation) {\n                preAst.returnTypeAnnotation = walker.walk(preAst.returnTypeAnnotation, preAst);\n            }\n            if (preAst.bod) {\n                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);\n            }\n        }\n\n        export function walkBoundDeclChildren(preAst: BoundDecl, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n            if (preAst.init) {\n                preAst.init = walker.walk(preAst.init, preAst);\n            }\n            if (preAst.typeExpr) {\n                preAst.typeExpr = walker.walk(preAst.typeExpr, preAst);\n            }\n        }\n\n        export function walkReturnStatementChildren(preAst: ReturnStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.returnExpression) {\n                preAst.returnExpression = walker.walk(preAst.returnExpression, preAst);\n            }\n        }\n\n        export function walkForStatementChildren(preAst: ForStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.init) {\n                preAst.init = walker.walk(preAst.init, preAst);\n            }\n\n            if (preAst.cond) {\n                preAst.cond = walker.walk(preAst.cond, preAst);\n            }\n\n            if (preAst.incr) {\n                preAst.incr = walker.walk(preAst.incr, preAst);\n            }\n\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkForInStatementChildren(preAst: ForInStatement, parent: AST, walker: IAstWalker): void {\n            preAst.lval = walker.walk(preAst.lval, preAst);\n            preAst.obj = walker.walk(preAst.obj, preAst);\n\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkIfStatementChildren(preAst: IfStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.thenBod) {\n                preAst.thenBod = walker.walk(preAst.thenBod, preAst);\n            }\n            if (preAst.elseBod) {\n                preAst.elseBod = walker.walk(preAst.elseBod, preAst);\n            }\n        }\n\n        export function walkWhileStatementChildren(preAst: WhileStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkDoWhileStatementChildren(preAst: DoWhileStatement, parent: AST, walker: IAstWalker): void {\n            preAst.cond = walker.walk(preAst.cond, preAst);\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkBlockChildren(preAst: Block, parent: AST, walker: IAstWalker): void {\n            if (preAst.statements) {\n                preAst.statements = <ASTList>walker.walk(preAst.statements, preAst);\n            }\n        }\n\n        export function walkCaseClauseChildren(preAst: CaseClause, parent: AST, walker: IAstWalker): void {\n            if (preAst.expr) {\n                preAst.expr = walker.walk(preAst.expr, preAst);\n            }\n\n            if (preAst.body) {\n                preAst.body = <ASTList>walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkSwitchStatementChildren(preAst: SwitchStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.val) {\n                preAst.val = walker.walk(preAst.val, preAst);\n            }\n\n            if (preAst.caseList) {\n                preAst.caseList = <ASTList>walker.walk(preAst.caseList, preAst);\n            }\n        }\n\n        export function walkTryStatementChildren(preAst: TryStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.tryBody) {\n                preAst.tryBody = walker.walk(preAst.tryBody, preAst);\n            }\n            if (preAst.catchClause) {\n                preAst.catchClause = <CatchClause>walker.walk(preAst.catchClause, preAst);\n            }\n            if (preAst.finallyBody) {\n                preAst.finallyBody = walker.walk(preAst.finallyBody, preAst);\n            }\n        }\n\n        export function walkCatchClauseChildren(preAst: CatchClause, parent: AST, walker: IAstWalker): void {\n            if (preAst.param) {\n                preAst.param = <VarDecl>walker.walk(preAst.param, preAst);\n            }\n\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkRecordChildren(preAst: NamedDeclaration, parent: AST, walker: IAstWalker): void {\n            preAst.name = <Identifier>walker.walk(preAst.name, preAst);\n            if (preAst.members) {\n                preAst.members = <ASTList>walker.walk(preAst.members, preAst);\n            }\n        }\n\n        export function walkNamedTypeChildren(preAst: TypeDeclaration, parent: AST, walker: IAstWalker): void {\n            walkRecordChildren(preAst, parent, walker);\n        }\n\n        export function walkClassDeclChildren(preAst: ClassDeclaration, parent: AST, walker: IAstWalker): void {\n            walkNamedTypeChildren(preAst, parent, walker);\n\n            if (preAst.typeParameters) {\n                preAst.typeParameters = <ASTList>walker.walk(preAst.typeParameters, preAst);\n            }\n\n            if (preAst.extendsList) {\n                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);\n            }\n\n            if (preAst.implementsList) {\n                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);\n            }\n        }\n\n        export function walkScriptChildren(preAst: Script, parent: AST, walker: IAstWalker): void {\n            if (preAst.bod) {\n                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);\n            }\n        }\n\n        export function walkTypeDeclChildren(preAst: InterfaceDeclaration, parent: AST, walker: IAstWalker): void {\n            walkNamedTypeChildren(preAst, parent, walker);\n\n            if (preAst.typeParameters) {\n                preAst.typeParameters = <ASTList>walker.walk(preAst.typeParameters, preAst);\n            }\n\n            // walked arguments as part of members\n            if (preAst.extendsList) {\n                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);\n            }\n\n            if (preAst.implementsList) {\n                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);\n            }\n        }\n\n        export function walkModuleDeclChildren(preAst: ModuleDeclaration, parent: AST, walker: IAstWalker): void {\n            walkRecordChildren(preAst, parent, walker);\n        }\n\n        export function walkImportDeclChildren(preAst: ImportDeclaration, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n            if (preAst.alias) {\n                preAst.alias = walker.walk(preAst.alias, preAst);\n            }\n        }\n\n        export function walkExportAssignmentChildren(preAst: ExportAssignment, parent: AST, walker: IAstWalker): void {\n            if (preAst.id) {\n                preAst.id = <Identifier>walker.walk(preAst.id, preAst);\n            }\n        }\n\n        export function walkWithStatementChildren(preAst: WithStatement, parent: AST, walker: IAstWalker): void {\n            if (preAst.expr) {\n                preAst.expr = walker.walk(preAst.expr, preAst);\n            }\n\n            if (preAst.body) {\n                preAst.body = walker.walk(preAst.body, preAst);\n            }\n        }\n\n        export function walkExpressionStatementChildren(preAst: ExpressionStatement, parent: AST, walker: IAstWalker): void {\n            preAst.expression = <AST>walker.walk(preAst.expression, preAst);\n        }\n\n        export function walkLabeledStatementChildren(preAst: LabeledStatement, parent: AST, walker: IAstWalker): void {\n            preAst.identifier = <Identifier>walker.walk(preAst.identifier, preAst);\n            preAst.statement = walker.walk(preAst.statement, preAst);\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript.AstWalkerWithDetailCallback {\n    export interface AstWalkerDetailCallback {\n        EmptyCallback? (pre, ast: AST): bool;\n        EmptyExprCallback? (pre, ast: AST): bool;\n        TrueCallback? (pre, ast: AST): bool;\n        FalseCallback? (pre, ast: AST): bool;\n        ThisCallback? (pre, ast: AST): bool;\n        SuperCallback? (pre, ast: AST): bool;\n        QStringCallback? (pre, ast: AST): bool;\n        RegexCallback? (pre, ast: AST): bool;\n        NullCallback? (pre, ast: AST): bool;\n        ArrayLitCallback? (pre, ast: AST): bool;\n        ObjectLitCallback? (pre, ast: AST): bool;\n        VoidCallback? (pre, ast: AST): bool;\n        CommaCallback? (pre, ast: AST): bool;\n        PosCallback? (pre, ast: AST): bool;\n        NegCallback? (pre, ast: AST): bool;\n        DeleteCallback? (pre, ast: AST): bool;\n        AwaitCallback? (pre, ast: AST): bool;\n        InCallback? (pre, ast: AST): bool;\n        DotCallback? (pre, ast: AST): bool;\n        FromCallback? (pre, ast: AST): bool;\n        IsCallback? (pre, ast: AST): bool;\n        InstOfCallback? (pre, ast: AST): bool;\n        TypeofCallback? (pre, ast: AST): bool;\n        NumberLitCallback? (pre, ast: AST): bool;\n        NameCallback? (pre, identifierAst: Identifier): bool;\n        TypeRefCallback? (pre, ast: AST): bool;\n        IndexCallback? (pre, ast: AST): bool;\n        CallCallback? (pre, ast: AST): bool;\n        NewCallback? (pre, ast: AST): bool;\n        AsgCallback? (pre, ast: AST): bool;\n        AsgAddCallback? (pre, ast: AST): bool;\n        AsgSubCallback? (pre, ast: AST): bool;\n        AsgDivCallback? (pre, ast: AST): bool;\n        AsgMulCallback? (pre, ast: AST): bool;\n        AsgModCallback? (pre, ast: AST): bool;\n        AsgAndCallback? (pre, ast: AST): bool;\n        AsgXorCallback? (pre, ast: AST): bool;\n        AsgOrCallback? (pre, ast: AST): bool;\n        AsgLshCallback? (pre, ast: AST): bool;\n        AsgRshCallback? (pre, ast: AST): bool;\n        AsgRs2Callback? (pre, ast: AST): bool;\n        QMarkCallback? (pre, ast: AST): bool;\n        LogOrCallback? (pre, ast: AST): bool;\n        LogAndCallback? (pre, ast: AST): bool;\n        OrCallback? (pre, ast: AST): bool;\n        XorCallback? (pre, ast: AST): bool;\n        AndCallback? (pre, ast: AST): bool;\n        EqCallback? (pre, ast: AST): bool;\n        NeCallback? (pre, ast: AST): bool;\n        EqvCallback? (pre, ast: AST): bool;\n        NEqvCallback? (pre, ast: AST): bool;\n        LtCallback? (pre, ast: AST): bool;\n        LeCallback? (pre, ast: AST): bool;\n        GtCallback? (pre, ast: AST): bool;\n        GeCallback? (pre, ast: AST): bool;\n        AddCallback? (pre, ast: AST): bool;\n        SubCallback? (pre, ast: AST): bool;\n        MulCallback? (pre, ast: AST): bool;\n        DivCallback? (pre, ast: AST): bool;\n        ModCallback? (pre, ast: AST): bool;\n        LshCallback? (pre, ast: AST): bool;\n        RshCallback? (pre, ast: AST): bool;\n        Rs2Callback? (pre, ast: AST): bool;\n        NotCallback? (pre, ast: AST): bool;\n        LogNotCallback? (pre, ast: AST): bool;\n        IncPreCallback? (pre, ast: AST): bool;\n        DecPreCallback? (pre, ast: AST): bool;\n        IncPostCallback? (pre, ast: AST): bool;\n        DecPostCallback? (pre, ast: AST): bool;\n        TypeAssertionCallback? (pre, ast: AST): bool;\n        FuncDeclCallback? (pre, funcDecl: FuncDecl): bool;\n        MemberCallback? (pre, ast: AST): bool;\n        VarDeclCallback? (pre, varDecl: VarDecl): bool;\n        ArgDeclCallback? (pre, ast: AST): bool;\n        ReturnCallback? (pre, ast: AST): bool;\n        BreakCallback? (pre, ast: AST): bool;\n        ContinueCallback? (pre, ast: AST): bool;\n        ThrowCallback? (pre, ast: AST): bool;\n        ForCallback? (pre, ast: AST): bool;\n        ForInCallback? (pre, ast: AST): bool;\n        IfCallback? (pre, ast: AST): bool;\n        WhileCallback? (pre, ast: AST): bool;\n        DoWhileCallback? (pre, ast: AST): bool;\n        BlockCallback? (pre, block: Block): bool;\n        CaseCallback? (pre, ast: AST): bool;\n        SwitchCallback? (pre, ast: AST): bool;\n        TryCallback? (pre, ast: AST): bool;\n        TryCatchCallback? (pre, ast: AST): bool;\n        TryFinallyCallback? (pre, ast: AST): bool;\n        FinallyCallback? (pre, ast: AST): bool;\n        CatchCallback? (pre, ast: AST): bool;\n        ListCallback? (pre, astList: ASTList): bool;\n        ScriptCallback? (pre, script: Script): bool;\n        ClassDeclarationCallback? (pre, ast: AST): bool;\n        InterfaceDeclarationCallback? (pre, interfaceDecl: InterfaceDeclaration): bool;\n        ModuleDeclarationCallback? (pre, moduleDecl: ModuleDeclaration): bool;\n        ImportDeclarationCallback? (pre, ast: AST): bool;\n        ExportAssignmentCallback? (pre, ast: AST): bool;\n        WithCallback? (pre, ast: AST): bool;\n        LabelCallback? (pre, labelAST: AST): bool;\n        LabeledStatementCallback? (pre, ast: AST): bool;\n        EBStartCallback? (pre, ast: AST): bool;\n        GotoEBCallback? (pre, ast: AST): bool;\n        EndCodeCallback? (pre, ast: AST): bool;\n        ErrorCallback? (pre, ast: AST): bool;\n        CommentCallback? (pre, ast: AST): bool;\n        DebuggerCallback? (pre, ast: AST): bool;\n        DefaultCallback? (pre, ast: AST): bool;\n    }\n\n    export function walk(script: Script, callback: AstWalkerDetailCallback): void {\n        var pre = (cur: AST, parent: AST) => {\n            walker.options.goChildren = AstWalkerCallback(true, cur, callback);\n            return cur;\n        }\n\n        var post = (cur: AST, parent: AST) => {\n            AstWalkerCallback(false, cur, callback);\n            return cur;\n        }\n\n        var walker = TypeScript.getAstWalkerFactory().getWalker(pre, post);\n        walker.walk(script, null);\n    }\n\n    function AstWalkerCallback(pre: bool, ast: AST, callback: AstWalkerDetailCallback): bool {\n        // See if the Callback needs to be handled using specific one or default one\n        var nodeType = ast.nodeType;\n        var callbackString = (<any>NodeType)._map[nodeType] + \"Callback\";\n        if (callback[callbackString]) {\n            return callback[callbackString](pre, ast);\n        }\n\n        if (callback.DefaultCallback) {\n            return callback.DefaultCallback(pre, ast);\n        }\n\n        return true;\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export function lastOf(items: any[]): any {\n        return (items === null || items.length === 0) ? null : items[items.length - 1];\n    }\n\n    export function max(a: number, b: number): number {\n        return a >= b ? a : b;\n    }\n\n    export function min(a: number, b: number): number {\n        return a <= b ? a : b;\n    }\n\n    //\n    // Helper class representing a path from a root ast node to a (grand)child ast node.\n    // This is helpful as our tree don\'t have parents.\n    //\n    export class AstPath {\n        public asts: AST[] = [];\n        public top: number = -1;\n\n        static reverseIndexOf(items: any[], index: number): any {\n            return (items === null || items.length <= index) ? null : items[items.length - index - 1];\n        }\n\n        public clone(): AstPath {\n            var clone = new AstPath();\n            clone.asts = this.asts.map((value) => { return value; });\n            clone.top = this.top;\n            return clone;\n        }\n\n        public pop(): TypeScript.AST {\n            var head = this.ast();\n            this.up();\n\n            while (this.asts.length > this.count()) {\n                this.asts.pop();\n            }\n            return head;\n        }\n\n        public push(ast: TypeScript.AST) {\n            while (this.asts.length > this.count()) {\n                this.asts.pop();\n            }\n            this.top = this.asts.length;\n            this.asts.push(ast);\n        }\n\n        public up() {\n            if (this.top <= -1)\n                throw new Error(\"Invalid call to \'up\'\");\n            this.top--;\n        }\n\n        public down() {\n            if (this.top === this.ast.length - 1)\n                throw new Error(\"Invalid call to \'down\'\");\n            this.top++;\n        }\n\n        public nodeType(): TypeScript.NodeType {\n            if (this.ast() === null)\n                return TypeScript.NodeType.None;\n            return this.ast().nodeType;\n        }\n\n        public ast() {\n            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1));\n        }\n\n        public parent() {\n            return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - this.top);\n        }\n\n        public count() {\n            return this.top + 1;\n        }\n\n        public get(index: number): TypeScript.AST {\n            return this.asts[index];\n        }\n\n        public isNameOfClass(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) &&\n                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfInterface(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) &&\n                ((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfArgument(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ArgDecl) &&\n                ((<TypeScript.ArgDecl>this.parent()).id === this.ast());\n        }\n\n        public isNameOfVariable(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.VarDecl) &&\n                ((<TypeScript.VarDecl>this.parent()).id === this.ast());\n        }\n\n        public isNameOfModule(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration) &&\n                ((<TypeScript.ModuleDeclaration>this.parent()).name === this.ast());\n        }\n\n        public isNameOfFunction(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.ast().nodeType === TypeScript.NodeType.Name) &&\n                (this.parent().nodeType === TypeScript.NodeType.FuncDecl) &&\n                ((<TypeScript.FuncDecl>this.parent()).name === this.ast());\n        }\n\n        public isChildOfScript(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Script;\n        }\n\n        public isChildOfModule(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ModuleDeclaration;\n        }\n\n        public isChildOfClass(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ClassDeclaration;\n        }\n\n        public isArgumentOfClassConstructor(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 5 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&\n                this.asts[this.top - 3].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration &&\n                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) &&\n                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1]) &&\n                ((<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2]);\n        }\n\n        public isChildOfInterface(): bool {\n            var ast = lastOf(this.asts);\n            return this.count() >= 3 &&\n                this.asts[this.top] === ast &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.InterfaceDeclaration;\n        }\n\n        public isTopLevelImplicitModule() {\n            return this.count() >= 1 &&\n                this.asts[this.top].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top]).getModuleFlags(), TypeScript.ModuleFlags.IsWholeFile);\n        }\n\n        public isBodyOfTopLevelImplicitModule() {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members === this.asts[this.top - 0] &&\n                TypeScript.hasFlag((<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).getModuleFlags(), TypeScript.ModuleFlags.IsWholeFile);\n        }\n\n        public isBodyOfScript(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Script &&\n                 (<TypeScript.Script>this.asts[this.top - 1]).bod === this.asts[this.top - 0];\n        }\n\n        public isBodyOfSwitch(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.SwitchStatement &&\n                 (<TypeScript.SwitchStatement>this.asts[this.top - 1]).caseList === this.asts[this.top - 0];\n        }\n\n        public isBodyOfModule(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&\n                 (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members === this.asts[this.top - 0];\n        }\n\n        public isBodyOfClass(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ClassDeclaration &&\n                 (<TypeScript.ClassDeclaration>this.asts[this.top - 1]).members === this.asts[this.top - 0];\n        }\n\n        public isBodyOfFunction(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&\n                 (<TypeScript.FuncDecl>this.asts[this.top - 1]).bod === this.asts[this.top - 0];\n        }\n\n        public isBodyOfInterface(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.InterfaceDeclaration &&\n                 (<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]).members === this.asts[this.top - 0];\n        }\n\n        public isBodyOfBlock(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Block &&\n                (<TypeScript.Block>this.asts[this.top - 1]).statements === this.asts[this.top - 0];\n        }\n\n        public isBodyOfFor(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ForStatement &&\n                (<TypeScript.ForStatement>this.asts[this.top - 1]).body === this.asts[this.top - 0];\n        }\n\n        public isBodyOfDoWhile(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.DoStatement &&\n                (<TypeScript.DoWhileStatement>this.asts[this.top - 1]).body === this.asts[this.top - 0];\n        }\n\n        public isBodyOfWhile(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.WhileStatement &&\n                (<TypeScript.WhileStatement>this.asts[this.top - 1]).body === this.asts[this.top - 0];\n        }\n\n        public isBodyOfForIn(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ForInStatement &&\n                (<TypeScript.ForInStatement>this.asts[this.top - 1]).body === this.asts[this.top - 0];\n        }\n\n        public isBodyOfWith(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.WithStatement &&\n                (<TypeScript.WithStatement>this.asts[this.top - 1]).body === this.asts[this.top - 0];\n        }\n\n        public isCaseOfSwitch(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.SwitchStatement &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList === this.asts[this.top - 1];\n        }\n\n        public isDefaultCaseOfSwitch(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.SwitchStatement &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList === this.asts[this.top - 1] &&\n                (<TypeScript.SwitchStatement>this.asts[this.top - 2]).defaultCase === this.asts[this.top - 0];\n        }\n\n        public isListOfObjectLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand === this.asts[this.top - 0];\n        }\n\n        public isBodyOfObjectLit(): bool {\n            return this.isListOfObjectLit();\n        }\n\n        public isEmptyListOfObjectLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand === this.asts[this.top - 0] &&\n                (<TypeScript.ASTList>this.asts[this.top - 0]).members.length === 0;\n        }\n\n        public isMemberOfObjectLit(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 2]).operand === this.asts[this.top - 1];\n        }\n\n        public isNameOfMemberOfObjectLit(): bool {\n            return this.count() >= 4 &&\n                this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Name &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 3]).operand === this.asts[this.top - 2];\n        }\n\n        public isListOfArrayLit(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.ArrayLit &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand === this.asts[this.top - 0];\n        }\n\n        public isTargetOfMember(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand1 === this.asts[this.top - 0];\n        }\n\n        public isMemberOfMember(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&\n                (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];\n        }\n\n        public isItemOfList(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List;\n            //(<Tools.ASTList>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];\n        }\n\n        public isThenOfIf(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.IfStatement &&\n                (<TypeScript.IfStatement>this.asts[this.top - 1]).thenBod === this.asts[this.top - 0];\n        }\n\n        public isElseOfIf(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.IfStatement &&\n                (<TypeScript.IfStatement>this.asts[this.top - 1]).elseBod === this.asts[this.top - 0];\n        }\n\n        public isSingleStatementList(): bool {\n            return this.count() >= 1 &&\n                this.asts[this.top].nodeType === TypeScript.NodeType.List &&\n                (<TypeScript.ASTList>this.asts[this.top]).members.length === 1;\n        }\n\n        public isArgumentListOfFunction(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&\n                (<TypeScript.FuncDecl>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isArgumentOfFunction(): bool {\n            return this.count() >= 3 &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&\n                (<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1];\n        }\n\n        public isArgumentListOfCall(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.Call &&\n                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isArgumentListOfNew(): bool {\n            return this.count() >= 2 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&\n                this.asts[this.top - 1].nodeType === TypeScript.NodeType.New &&\n                (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];\n        }\n\n        public isSynthesizedBlock(): bool {\n            return this.count() >= 1 &&\n                this.asts[this.top - 0].nodeType === TypeScript.NodeType.Block &&\n                (<TypeScript.Block>this.asts[this.top - 0]).isStatementBlock === false;\n        }\n\n        public isInClassImplementsList(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) &&\n                (this.isMemberOfList((<TypeScript.ClassDeclaration>this.parent()).implementsList, this.ast()));\n        }\n\n        public isInInterfaceExtendsList(): bool {\n            if (this.ast() === null || this.parent() === null)\n                return false;\n\n            return (this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) &&\n                (this.isMemberOfList((<TypeScript.InterfaceDeclaration>this.parent()).extendsList, this.ast()));\n        }\n\n        private isMemberOfList(list: ASTList, item: AST): bool {\n            if (list && list.members) {\n                for (var i = 0, n = list.members.length; i < n; i++) {\n                    if (list.members[i] === item) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n    }\n\n    export function isValidAstNode(ast: TypeScript.IASTSpan): bool {\n        if (ast === null)\n            return false;\n\n        if (ast.minChar === -1 || ast.limChar === -1)\n            return false;\n\n        return true;\n    }\n\n    export class AstPathContext {\n        public path = new TypeScript.AstPath();\n    }\n\n    export enum GetAstPathOptions {\n        Default = 0,\n        EdgeInclusive = 1,\n        //We need this options dealing with an AST coming from an incomplete AST. For example:\n        //     class foo { // r\n        // If we ask for the AST at the position after the \"r\" character, we won\'t see we are \n        // inside a comment, because the \"class\" AST node has a limChar corresponding to the position of \n        // the \"{\" character, meaning we don\'t traverse the tree down to the stmt list of the class, meaning\n        // we don\'t find the \"precomment\" attached to the errorneous empty stmt.\n        //TODO: It would be nice to be able to get rid of this.\n        DontPruneSearchBasedOnPosition = 1 << 1,\n    }\n\n    ///\n    /// Return the stack of AST nodes containing \"position\"\n    ///\n    export function getAstPathToPosition(script: TypeScript.AST, pos: number, options = GetAstPathOptions.Default): TypeScript.AstPath {\n        var lookInComments = (comments: TypeScript.Comment[]) => {\n            if (comments && comments.length > 0) {\n                for (var i = 0; i < comments.length; i++) {\n                    var minChar = comments[i].minChar;\n                    var limChar = comments[i].limChar;\n                    if (!comments[i].isBlockComment) {\n                        limChar++; // For single line comments, include 1 more character (for the newline)\n                    }\n                    if (pos >= minChar && pos < limChar) {\n                        ctx.path.push(comments[i]);\n                    }\n                }\n            }\n        }\n\n        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) {\n            if (isValidAstNode(cur)) {\n\n                // Add \"cur\" to the stack if it contains our position\n                // For \"identifier\" nodes, we need a special case: A position equal to \"limChar\" is\n                // valid, since the position corresponds to a caret position (in between characters)\n                // For example:\n                //  bar\n                //  0123\n                // If \"position === 3\", the caret is at the \"right\" of the \"r\" character, which should be considered valid\n                var inclusive =\n                    hasFlag(options, GetAstPathOptions.EdgeInclusive) ||\n                    cur.nodeType === TypeScript.NodeType.Name ||\n                    cur.nodeType === TypeScript.NodeType.Dot ||\n                    cur.nodeType === TypeScript.NodeType.TypeRef ||\n                    pos === script.limChar; // Special \"EOF\" case\n\n                var minChar = cur.minChar;\n                var limChar = cur.limChar + (inclusive ? 1 : 0)\n                if (pos >= minChar && pos < limChar) {\n\n                    // TODO: Since AST is sometimes not correct wrt to position, only add \"cur\" if it\'s better\n                    //       than top of the stack.\n                    var previous = ctx.path.ast();\n                    if (previous === null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {\n                        ctx.path.push(cur);\n                    }\n                    else {\n                        //logger.log(\"TODO: Ignoring node because minChar, limChar not better than previous node in stack\");\n                    }\n                }\n\n                // The AST walker skips comments, but we might be in one, so check the pre/post comments for this node manually\n                if (pos < limChar) {\n                    lookInComments(cur.preComments);\n                }\n                if (pos >= minChar) {\n                    lookInComments(cur.postComments);\n                }\n\n                if (!hasFlag(options, GetAstPathOptions.DontPruneSearchBasedOnPosition)) {\n                    // Don\'t go further down the tree if pos is outside of [minChar, limChar]\n                    walker.options.goChildren = (minChar <= pos && pos <= limChar);\n                }\n            }\n            return cur;\n        }\n\n        var ctx = new AstPathContext();\n        TypeScript.getAstWalkerFactory().walk(script, pre, null, null, ctx);\n        return ctx.path;\n    }\n\n    ///\n    /// Simple function to Walk an AST using a simple callback function.\n    ///\n    export function walkAST(ast: TypeScript.AST, callback: (path: AstPath, walker: TypeScript.IAstWalker) => void ): void {\n        var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n            var path: TypeScript.AstPath = walker.state;\n            path.push(cur);\n            callback(path, walker);\n            return cur;\n        }\n        var post = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n            var path: TypeScript.AstPath = walker.state;\n            path.pop();\n            return cur;\n        }\n\n        var path = new AstPath();\n        TypeScript.getAstWalkerFactory().walk(ast, pre, post, null, path);\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Binder {\n        constructor(public checker: TypeChecker) { }\n        \n        public resolveBaseTypeLinks(typeLinks: TypeLink[], scope: SymbolScope) {\n            var extendsList: Type[] = null;\n            if (typeLinks) {\n                extendsList = [];\n                for (var i = 0, len = typeLinks.length; i < len; i++) {\n                    extendsList[i] = this.checker.resolveBaseTypeLink(typeLinks[i], scope);\n                }\n            }\n            return extendsList;\n        }\n\n        public resolveBases(scope: SymbolScope, type: Type) {\n            type.extendsList = this.resolveBaseTypeLinks(type.extendsTypeLinks, scope);\n\n            var i = 0, len = type.extendsList.length;\n            var derivedIsClass = type.isClassInstance();\n            var baseRef: AST = null;\n            for (; i < len; i++) {\n                var baseIsClass = type.extendsList[i].isClassInstance();\n                if (type.extendsList[i] != this.checker.anyType) {\n                    baseRef = type.extendsTypeLinks[i].ast;\n                    if (derivedIsClass) {\n                        if (!baseIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     \"A class may only extend other classes, \" + type.extendsList[i].symbol.fullName() + \" is not a class.\");\n                        }\n                    }\n                    else {\n                        if (baseIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     \"An interface may only extend other interfaces, \" + type.extendsList[i].symbol.fullName() + \" is a class.\");\n                        }\n                    }\n                }\n            }\n\n            type.implementsList = this.resolveBaseTypeLinks(type.implementsTypeLinks, scope);\n\n            if (type.implementsList) {\n                for (i = 0, len = type.implementsList.length; i < len; i++) {\n                    var iface = type.implementsList[i];\n                    baseRef = type.implementsTypeLinks[i].ast;\n                    if (iface.isClassInstance()) {\n                        if (derivedIsClass) {\n                            this.checker.errorReporter.simpleError(baseRef,\n                                                                     \"A class may only implement an interface; \" + iface.symbol.fullName() + \" is a class.\");\n                        }\n                    }\n                }\n            }\n        }\n\n        public resolveSignatureGroup(signatureGroup: SignatureGroup, scope: SymbolScope, instanceType: Type) {\n            var supplyVar = !(signatureGroup.hasImplementation);\n            for (var i = 0, len = signatureGroup.signatures.length; i < len; i++) {\n                var signature = signatureGroup.signatures[i];\n                if (instanceType) {\n                    signature.returnType.type = instanceType;\n                }\n                else {\n                    this.checker.resolveTypeLink(scope, signature.returnType, supplyVar);\n                }\n                var paramLen = signature.parameters.length;\n                for (var j = 0; j < paramLen; j++) {\n                    this.bindSymbol(scope, signature.parameters[j]);\n                }\n                if (signature.hasVariableArgList) {\n                    // check that last parameter has an array type\n                    var lastParam = <ParameterSymbol>signature.parameters[paramLen - 1];\n                    lastParam.argsOffset = paramLen - 1;\n                    if (!lastParam.getType().isArray()) {\n                        this.checker.errorReporter.simpleErrorFromSym(lastParam,\n                                                                 \"... parameter must have array type\");\n                        lastParam.parameter.typeLink.type = this.checker.makeArrayType(lastParam.parameter.typeLink.type);\n                    }\n                }\n            }\n        }\n\n        public bindType(scope: SymbolScope, type: Type, instanceType: Type): void {\n            if (instanceType) {\n                this.bindType(scope, instanceType, null);\n            }\n            var callAndConstructScope = scope;\n            if (type.hasMembers()) {\n                var members = type.members;\n                var ambientMembers = type.ambientMembers;\n                var typeMembers = type.getAllEnclosedTypes(); // REVIEW: Should only be getting exported types?\n                var ambientTypeMembers = type.getAllAmbientEnclosedTypes(); // REVIEW: Should only be getting exported types?\n                var memberScope = new SymbolTableScope(members, ambientMembers, typeMembers, ambientTypeMembers, type.symbol);\n                var agg = new SymbolAggregateScope(type.symbol);\n                var prevCurrentModDecl = this.checker.currentModDecl;\n                var prevBindStatus = this.checker.inBind;\n                agg.addParentScope(memberScope);\n                agg.addParentScope(scope);\n                if (type.isModuleType()) {\n                    this.checker.currentModDecl = <ModuleDeclaration>type.symbol.declAST;\n                    this.checker.inBind = true;\n                }\n                if (members) {\n                    this.bind(agg, type.members.allMembers); // REVIEW: Should only be getting exported types?\n                }\n                if (typeMembers) {\n                    this.bind(agg, typeMembers.allMembers);\n                }\n                if (ambientMembers) {\n                    this.bind(agg, ambientMembers.allMembers);\n                }\n                if (ambientTypeMembers) {\n                    this.bind(agg, ambientTypeMembers.allMembers);\n                }\n                if (type.isModuleType()) {\n                    callAndConstructScope = agg;\n                }\n                this.checker.currentModDecl = prevCurrentModDecl;\n                this.checker.inBind = prevBindStatus;\n            }\n            if (type.extendsTypeLinks) {\n                this.resolveBases(scope, type);\n            }\n            if (type.construct) {\n                this.resolveSignatureGroup(type.construct, callAndConstructScope, instanceType);\n            }\n            if (type.call) {\n                this.resolveSignatureGroup(type.call, callAndConstructScope, null);\n            }\n            if (type.index) {\n                this.resolveSignatureGroup(type.index, scope, null);\n            }\n            if (type.elementType) {\n                this.bindType(scope, type.elementType, null);\n            }\n        }\n\n        public bindSymbol(scope: SymbolScope, symbol: Symbol) {\n            if (!symbol.bound) {\n                var prevLocationInfo = this.checker.locationInfo;\n                if (this.checker.fileNameToLocationInfo && (symbol.fileName != unknownLocationInfo.fileName) && this.checker.fileNameToLocationInfo.lookup(symbol.fileName)) {\n                    this.checker.locationInfo = this.checker.fileNameToLocationInfo.lookup(symbol.fileName);\n                }\n                switch (symbol.kind()) {\n                    case SymbolKind.Type:\n\n                        if (symbol.flags & SymbolFlags.Bound) {\n                            break;\n                        }\n\n                        var typeSymbol = <TypeSymbol>symbol;\n                        typeSymbol.flags |= SymbolFlags.Bound;\n\n                        // Since type collection happens out of order, a dynamic module referenced by an import statement\n                        // may not yet be in scope when the import symbol is created.  In that case, we need to search\n                        // out the module symbol now\n                        // Note that we\'ll also want to do this in resolveTypeMembers, in case the symbol is set outside the\n                        // context of a given module  (E.g., an outer import statement)\n                        if (typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType == NodeType.Name) {\n                            var modPath = (<Identifier>typeSymbol.aliasLink.alias).text;\n                            var modSym = this.checker.findSymbolForDynamicModule(modPath, this.checker.locationInfo.fileName, (id) => scope.find(id, false, true));\n                            if (modSym) {\n                                typeSymbol.type = modSym.getType();\n                            }\n                        }\n\n                        if (typeSymbol.type && typeSymbol.type != this.checker.gloModType) {\n                            this.bindType(scope, typeSymbol.type, typeSymbol.instanceType);\n\n                            // bind expansions on the parent type symbol\n                            if (typeSymbol.type.isModuleType()) {\n                                for (var i = 0; i < typeSymbol.expansions.length; i++) {\n                                    this.bindType(scope, typeSymbol.expansions[i], typeSymbol.instanceType);\n                                }\n                            }\n                        }\n                        break;\n                    case SymbolKind.Field:\n                        this.checker.resolveTypeLink(scope, (<FieldSymbol>symbol).field.typeLink,\n                                                false);\n                        break;\n                    case SymbolKind.Parameter:\n                        this.checker.resolveTypeLink(scope,\n                                                (<ParameterSymbol>symbol).parameter.typeLink,\n                                                true);\n                        break;\n                }\n                this.checker.locationInfo = prevLocationInfo;\n            }\n            symbol.bound = true;\n        }\n\n        public bind(scope: SymbolScope, table: IHashTable) {\n            table.map(\n                (key, sym, binder) => {\n                    return binder.bindSymbol(scope, sym);\n                },\n                this);\n        }\n    }\n\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nmodule TypeScript {\n    class Base64Format {\n        static encodedValues = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\n        static encode(inValue: number) {\n            if (inValue < 64) {\n                return Base64Format.encodedValues.charAt(inValue);\n            }\n            throw TypeError(inValue + \": not a 64 based value\");\n        }\n\n        static decodeChar(inChar: string) {\n            if (inChar.length === 1) {\n                return Base64Format.encodedValues.indexOf(inChar);\n            } else {\n                throw TypeError(\'\"\' + inChar + \'\" must have length 1\');\n            }\n        }\n    }\n\n    export class Base64VLQFormat {\n        static encode(inValue: number) {\n            // Add a new least significant bit that has the sign of the value.\n            // if negative number the least significant bit that gets added to the number has value 1\n            // else least significant bit value that gets added is 0\n            // eg. -1 changes to binary : 01 [1] => 3\n            //     +1 changes to binary : 01 [0] => 2\n            if (inValue < 0) {\n                inValue = ((-inValue) << 1) + 1;\n            }\n            else {\n                inValue = inValue << 1;\n            }\n\n            // Encode 5 bits at a time starting from least significant bits\n            var encodedStr = \"\";\n            do {\n                var currentDigit = inValue & 31; // 11111\n                inValue = inValue >> 5;\n                if (inValue > 0) {\n                    // There are still more digits to decode, set the msb (6th bit)\n                    currentDigit = currentDigit | 32; \n                }\n                encodedStr = encodedStr + Base64Format.encode(currentDigit);\n            } while (inValue > 0);\n\n            return encodedStr;\n        }\n\n        static decode(inString: string) {\n            var result = 0;\n            var negative = false;\n\n            var shift = 0;\n            for (var i = 0; i < inString.length; i++) {\n                var byte = Base64Format.decodeChar(inString[i]);\n                if (i === 0) {\n                    // Sign bit appears in the LSBit of the first value\n                    if ((byte & 1) === 1) {\n                        negative = true;\n                    }\n                    result = (byte >> 1) & 15; // 1111x\n                } else {\n                    result = result | ((byte & 31) << shift); // 11111\n                }\n\n                shift += (i == 0) ? 4 : 5;\n\n                if ((byte & 32) === 32) {\n                    // Continue\n                } else {\n                    return { value: negative ? -(result) : result, rest: inString.substr(i + 1) };\n                }\n            }\n\n            throw new Error(\'Base64 value \"\' + inString + \'\" finished with a continuation bit\');\n        }\n    }\n}\n﻿/* -----------------------------------------------------------------------------\nThis file is based on or incorporates material from the projects listed below \n(collectively, \"Third Party Code\"). Microsoft is not the original author of the \nThird Party Code. The original copyright notice and the license, under which \nMicrosoft received such Third Party Code, are set forth below. Such licenses \nand notices are provided for informational purposes only. Microsoft, not the \nthird party, licenses the Third Party Code to you under the terms of the \nApache License, Version 2.0. See License.txt in the project root for complete \nlicense information. Microsoft reserves all rights not expressly granted under \nthe Apache 2.0 License, whether by implication, estoppel or otherwise. \n----------------------------------------------------------------------------- */\n\n/*\n    json2.js\n    2011-10-19\n\n    Public Domain.\n\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\n    See http://www.JSON.org/js.html\n\n\n    This code should be minified before deployment.\n    See http://javascript.crockford.com/jsmin.html\n\n    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n    NOT CONTROL.\n\n\n    This file creates a global JSON object containing two methods: stringify\n    and parse.\n\n        JSON.stringify(value, replacer, space)\n            value       any JavaScript value, usually an object or array.\n\n            replacer    an optional parameter that determines how object\n                        values are stringified for objects. It can be a\n                        function or an array of strings.\n\n            space       an optional parameter that specifies the indentation\n                        of nested structures. If it is omitted, the text will\n                        be packed without extra whitespace. If it is a number,\n                        it will specify the number of spaces to indent at each\n                        level. If it is a string (such as \'\\t\' or \'&nbsp;\'),\n                        it contains the characters used to indent at each level.\n\n            This method produces a JSON text from a JavaScript value.\n\n            When an object value is found, if the object contains a toJSON\n            method, its toJSON method will be called and the result will be\n            stringified. A toJSON method does not serialize: it returns the\n            value represented by the name/value pair that should be serialized,\n            or undefined if nothing should be serialized. The toJSON method\n            will be passed the key associated with the value, and this will be\n            bound to the value\n\n            For example, this would serialize Dates as ISO strings.\n\n                Date.prototype.toJSON = function (key) {\n                    function f(n) {\n                        // Format integers to have at least two digits.\n                        return n < 10 ? \'0\' + n : n;\n                    }\n\n                    return this.getUTCFullYear()   + \'-\' +\n                         f(this.getUTCMonth() + 1) + \'-\' +\n                         f(this.getUTCDate())      + \'T\' +\n                         f(this.getUTCHours())     + \':\' +\n                         f(this.getUTCMinutes())   + \':\' +\n                         f(this.getUTCSeconds())   + \'Z\';\n                };\n\n            You can provide an optional replacer method. It will be passed the\n            key and value of each member, with this bound to the containing\n            object. The value that is returned from your method will be\n            serialized. If your method returns undefined, then the member will\n            be excluded from the serialization.\n\n            If the replacer parameter is an array of strings, then it will be\n            used to select the members to be serialized. It filters the results\n            such that only members with keys listed in the replacer array are\n            stringified.\n\n            Values that do not have JSON representations, such as undefined or\n            functions, will not be serialized. Such values in objects will be\n            dropped; in arrays they will be replaced with null. You can use\n            a replacer function to replace those with JSON values.\n            JSON.stringify(undefined) returns undefined.\n\n            The optional space parameter produces a stringification of the\n            value that is filled with line breaks and indentation to make it\n            easier to read.\n\n            If the space parameter is a non-empty string, then that string will\n            be used for indentation. If the space parameter is a number, then\n            the indentation will be that many spaces.\n\n            Example:\n\n            text = JSON.stringify([\'e\', {pluribus: \'unum\'}]);\n            // text is \'[\"e\",{\"pluribus\":\"unum\"}]\'\n\n\n            text = JSON.stringify([\'e\', {pluribus: \'unum\'}], null, \'\\t\');\n            // text is \'[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]\'\n\n            text = JSON.stringify([new Date()], function (key, value) {\n                return this[key] instanceof Date ?\n                    \'Date(\' + this[key] + \')\' : value;\n            });\n            // text is \'[\"Date(---current time---)\"]\'\n\n\n        JSON.parse(text, reviver)\n            This method parses a JSON text to produce an object or array.\n            It can throw a SyntaxError exception.\n\n            The optional reviver parameter is a function that can filter and\n            transform the results. It receives each of the keys and values,\n            and its return value is used instead of the original value.\n            If it returns what it received, then the structure is not modified.\n            If it returns undefined then the member is deleted.\n\n            Example:\n\n            // Parse the text. Values that look like ISO date strings will\n            // be converted to Date objects.\n\n            myData = JSON.parse(text, function (key, value) {\n                var a;\n                if (typeof value === \'string\') {\n                    a =\n/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n                    if (a) {\n                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n                            +a[5], +a[6]));\n                    }\n                }\n                return value;\n            });\n\n            myData = JSON.parse(\'[\"Date(09/09/2001)\"]\', function (key, value) {\n                var d;\n                if (typeof value === \'string\' &&\n                        value.slice(0, 5) === \'Date(\' &&\n                        value.slice(-1) === \')\') {\n                    d = new Date(value.slice(5, -1));\n                    if (d) {\n                        return d;\n                    }\n                }\n                return value;\n            });\n\n\n    This is a reference implementation. You are free to copy, modify, or\n    redistribute.\n*/\n\n/*jslint evil: true, regexp: true */\n\n/*members \"\", \"\\b\", \"\\t\", \"\\n\", \"\\f\", \"\\r\", \"\\\"\", JSON, \"\\\\\", apply,\n    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\nvar JSON2: any = {};\n\n(function() {\n    \'use strict\';\n\n    function f(n) {\n        // Format integers to have at least two digits.\n        return n < 10 ? \'0\' + n : n;\n    }\n\n    if (typeof Date.prototype.toJSON !== \'function\') {\n\n        (<any>Date.prototype.toJSON) = <any>function (key) {\n\n            return isFinite(this.valueOf())\n                ? this.getUTCFullYear() + \'-\' +\n                    f(this.getUTCMonth() + 1) + \'-\' +\n                    f(this.getUTCDate()) + \'T\' +\n                    f(this.getUTCHours()) + \':\' +\n                    f(this.getUTCMinutes()) + \':\' +\n                    f(this.getUTCSeconds()) + \'Z\'\n                : null;\n        };\n\n        var strProto: any = String.prototype;\n        var numProto: any = Number.prototype;\n        numProto.JSON = strProto.JSON =\n            (<any>Boolean).prototype.toJSON = function (key) {\n                return this.valueOf();\n            };\n    }\n\n    var escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        gap,\n        indent,\n        meta = {    // table of character substitutions\n            \'\\b\': \'\\\\b\',\n            \'\\t\': \'\\\\t\',\n            \'\\n\': \'\\\\n\',\n            \'\\f\': \'\\\\f\',\n            \'\\r\': \'\\\\r\',\n            \'\"\': \'\\\\\"\',\n            \'\\\\\': \'\\\\\\\\\'\n        },\n        rep;\n\n\n    function quote(string) {\n\n        // If the string contains no control characters, no quote characters, and no\n        // backslash characters, then we can safely slap some quotes around it.\n        // Otherwise we must also replace the offending characters with safe escape\n        // sequences.\n\n        escapable.lastIndex = <any>0;\n        return escapable.test(string) ? \'\"\' + string.replace(escapable, function (a: string) {\n            var c = meta[a];\n            return typeof c === \'string\'\n                ? c\n                : \'\\\\u\' + (\'0000\' + a.charCodeAt(0).toString(16)).slice(-4);\n        }) + \'\"\' : \'\"\' + string + \'\"\';\n    }\n\n\n    function str(key, holder): string {\n\n        // Produce a string from holder[key].\n\n        var i,          // The loop counter.\n            k = null,          // The member key.\n            v,          // The member value.\n            length,\n            mind = gap,\n            partial,\n            value = holder[key];\n\n        // If the value has a toJSON method, call it to obtain a replacement value.\n\n        if (value && typeof value === \'object\' &&\n                typeof value.toJSON === \'function\') {\n            value = value.toJSON(key);\n        }\n\n        // If we were called with a replacer function, then call the replacer to\n        // obtain a replacement value.\n\n        if (typeof rep === \'function\') {\n            value = rep.call(holder, key, value);\n        }\n\n        // What happens next depends on the value\'s type.\n\n        switch (typeof value) {\n            case \'string\':\n                return quote(value);\n\n            case \'number\':\n\n                // JSON numbers must be finite. Encode non-finite numbers as null.\n\n                return isFinite(value) ? String(value) : \'null\';\n\n            case \'boolean\':\n            case \'null\':\n\n                // If the value is a boolean or null, convert it to a string. Note:\n                // typeof null does not produce \'null\'. The case is included here in\n                // the remote chance that this gets fixed someday.\n\n                return String(value);\n\n            // If the type is \'object\', we might be dealing with an object or an array or\n            // null.\n\n            case \'object\':\n\n                // Due to a specification blunder in ECMAScript, typeof null is \'object\',\n                // so watch out for that case.\n\n                if (!value) {\n                    return \'null\';\n                }\n\n                // Make an array to hold the partial results of stringifying this object value.\n\n                gap += indent;\n                partial = [];\n\n                // Is the value an array?\n\n                if (Object.prototype.toString.apply(value, []) === \'[object Array]\') {\n\n                    // The value is an array. Stringify every element. Use null as a placeholder\n                    // for non-JSON values.\n\n                    length = value.length;\n                    for (i = 0; i < length; i += 1) {\n                        partial[i] = str(i, value) || \'null\';\n                    }\n\n                    // Join all of the elements together, separated with commas, and wrap them in\n                    // brackets.\n\n                    v = partial.length === 0\n                        ? \'[]\'\n                        : gap\n                        ? \'[\\n\' + gap + partial.join(\',\\n\' + gap) + \'\\n\' + mind + \']\'\n                        : \'[\' + partial.join(\',\') + \']\';\n                    gap = mind;\n                    return v;\n                }\n\n                // If the replacer is an array, use it to select the members to be stringified.\n\n                if (rep && typeof rep === \'object\') {\n                    length = rep.length;\n                    for (i = 0; i < length; i += 1) {\n                        if (typeof rep[i] === \'string\') {\n                            k = rep[i];\n                            v = str(k, value);\n                            if (v) {\n                                partial.push(quote(k) + (gap ? \': \' : \':\') + v);\n                            }\n                        }\n                    }\n                } else {\n\n                    // Otherwise, iterate through all of the keys in the object.\n\n                    for (k in value) {\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {\n                            v = str(k, value);\n                            if (v) {\n                                partial.push(quote(k) + (gap ? \': \' : \':\') + v);\n                            }\n                        }\n                    }\n                }\n\n                // Join all of the member texts together, separated with commas,\n                // and wrap them in braces.\n\n                v = partial.length === 0\n                    ? \'{}\'\n                    : gap\n                    ? \'{\\n\' + gap + partial.join(\',\\n\' + gap) + \'\\n\' + mind + \'}\'\n                    : \'{\' + partial.join(\',\') + \'}\';\n                gap = mind;\n                return v;\n        }\n    }\n\n    // If the JSON object does not yet have a stringify method, give it one.\n\n    if (typeof JSON2.stringify !== \'function\') {\n        JSON2.stringify = function (value, replacer, space) {\n\n            // The stringify method takes a value and an optional replacer, and an optional\n            // space parameter, and returns a JSON text. The replacer can be a function\n            // that can replace values, or an array of strings that will select the keys.\n            // A default replacer method can be provided. Use of the space parameter can\n            // produce text that is more easily readable.\n\n            var i;\n            gap = \'\';\n            indent = \'\';\n\n            // If the space parameter is a number, make an indent string containing that\n            // many spaces.\n\n            if (typeof space === \'number\') {\n                for (i = 0; i < space; i += 1) {\n                    indent += \' \';\n                }\n\n                // If the space parameter is a string, it will be used as the indent string.\n\n            } else if (typeof space === \'string\') {\n                indent = space;\n            }\n\n            // If there is a replacer, it must be a function or an array.\n            // Otherwise, throw an error.\n\n            rep = replacer;\n            if (replacer && typeof replacer !== \'function\' &&\n                    (typeof replacer !== \'object\' ||\n                    typeof replacer.length !== \'number\')) {\n                throw new Error(\'JSON.stringify\');\n            }\n\n            // Make a fake root object containing our value under the key of \'\'.\n            // Return the result of stringifying the value.\n\n            return str(\'\', { \'\': value });\n        };\n    }\n} ());\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n///<reference path=\'..\\harness\\external\\json2Stringify.ts\' />\n\nmodule TypeScript {\n    export class SourceMapPosition {\n        public sourceLine: number;\n        public sourceColumn: number;\n        public emittedLine: number;\n        public emittedColumn: number;\n    }\n\n    export class SourceMapping {\n        public start = new SourceMapPosition();\n        public end = new SourceMapPosition();\n        public nameIndex: number = -1;\n        public childMappings: SourceMapping[] = [];\n    }\n\n    export class SourceMapper {\n        static MapFileExtension = \".map\";\n        \n        public sourceMappings: SourceMapping[] = [];\n        public currentMappings: SourceMapping[][] = [];\n\n        public names: string[] = [];\n        public currentNameIndex: number[] = [];\n\n        public jsFileName: string;\n        public tsFileName: string;\n\n        constructor(tsFileName: string,\n                    jsFileName: string,\n                    public sourceMapFileName: string,\n                    public jsFile: ITextWriter,\n                    public sourceMapOut: ITextWriter,\n                    emitFullPathOfSourceMap: bool) {\n            this.currentMappings.push(this.sourceMappings);\n\n            jsFileName = switchToForwardSlashes(jsFileName);\n            this.jsFileName = TypeScript.getPrettyName(jsFileName, false, true);\n            \n            var removalIndex = jsFileName.lastIndexOf(this.jsFileName);\n            var fixedPath = jsFileName.substring(0, removalIndex);\n\n            if (emitFullPathOfSourceMap) {\n                if (jsFileName.indexOf(\"://\") == -1) {\n                    jsFileName = \"file:///\" + jsFileName;\n                }\n                this.jsFileName = jsFileName;\n            }\n\n            this.tsFileName = TypeScript.getRelativePathToFixedPath(fixedPath, tsFileName);\n        }\n        \n        // Generate source mapping.\n        // Creating files can cause exceptions, they will be caught higher up in TypeScriptCompiler.emit\n        static emitSourceMapping(allSourceMappers: SourceMapper[]): void {\n            // At this point we know that there is at least one source mapper present.\n            // If there are multiple source mappers, all will correspond to same map file but different sources\n\n            // Output map file name into the js file\n            var sourceMapper = allSourceMappers[0];\n            sourceMapper.jsFile.WriteLine(\"//@ sourceMappingURL=\" + sourceMapper.jsFileName + SourceMapper.MapFileExtension);\n\n            // Now output map file\n            var sourceMapOut = sourceMapper.sourceMapOut;\n            var mappingsString = \"\";\n            var tsFiles: string[] = [];\n\n            var prevEmittedColumn = 0;\n            var prevEmittedLine = 0;\n            var prevSourceColumn = 0;\n            var prevSourceLine = 0;\n            var prevSourceIndex = 0;\n            var prevNameIndex = 0;\n            var namesList: string[] = [];\n            var namesCount = 0;\n            var emitComma = false;\n\n            var recordedPosition: SourceMapPosition = null;\n            for (var sourceMapperIndex = 0; sourceMapperIndex < allSourceMappers.length; sourceMapperIndex++) {\n                sourceMapper = allSourceMappers[sourceMapperIndex];\n\n                // If there are any mappings generated\n                var currentSourceIndex = tsFiles.length;\n                tsFiles.push(sourceMapper.tsFileName);\n\n                // Join namelist\n                if (sourceMapper.names.length > 0) {\n                    namesList.push.apply(namesList, sourceMapper.names);\n                }\n\n                var recordSourceMapping = (mappedPosition: SourceMapPosition, nameIndex: number) => {\n                    if (recordedPosition != null &&\n                        recordedPosition.emittedColumn == mappedPosition.emittedColumn &&\n                        recordedPosition.emittedLine == mappedPosition.emittedLine) {\n                        // This position is already recorded\n                        return;\n                    }\n\n                    // Record this position\n                    if (prevEmittedLine !== mappedPosition.emittedLine) {\n                        while (prevEmittedLine < mappedPosition.emittedLine) {\n                            prevEmittedColumn = 0;\n                            mappingsString = mappingsString + \";\";\n                            prevEmittedLine++;\n                        }\n                        emitComma = false;\n                    }\n                    else if (emitComma) {\n                        mappingsString = mappingsString + \",\";\n                    }\n\n                    // 1. Relative Column\n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.emittedColumn - prevEmittedColumn);\n                    prevEmittedColumn = mappedPosition.emittedColumn;\n\n                    // 2. Relative sourceIndex \n                    mappingsString = mappingsString + Base64VLQFormat.encode(currentSourceIndex - prevSourceIndex);\n                    prevSourceIndex = currentSourceIndex;\n\n                    // 3. Relative sourceLine 0 based\n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.sourceLine - 1 - prevSourceLine);\n                    prevSourceLine = mappedPosition.sourceLine - 1;\n\n                    // 4. Relative sourceColumn 0 based \n                    mappingsString = mappingsString + Base64VLQFormat.encode(mappedPosition.sourceColumn - prevSourceColumn);\n                    prevSourceColumn = mappedPosition.sourceColumn;\n\n                    // 5. Relative namePosition 0 based\n                    if (nameIndex >= 0) {\n                        mappingsString = mappingsString + Base64VLQFormat.encode(namesCount + nameIndex - prevNameIndex);\n                        prevNameIndex = namesCount + nameIndex;\n                    }\n\n                    emitComma = true;\n                    recordedPosition = mappedPosition;\n                }\n\n                // Record starting spans\n                var recordSourceMappingSiblings = (sourceMappings: SourceMapping[]) => {\n                    for (var i = 0; i < sourceMappings.length; i++) {\n                        var sourceMapping = sourceMappings[i];\n                        recordSourceMapping(sourceMapping.start, sourceMapping.nameIndex);\n                        recordSourceMappingSiblings(sourceMapping.childMappings);\n                        recordSourceMapping(sourceMapping.end, sourceMapping.nameIndex);\n                    }\n                }\n\n                recordSourceMappingSiblings(sourceMapper.sourceMappings);\n                namesCount = namesCount + sourceMapper.names.length;\n            }\n\n            // Write the actual map file\n            sourceMapOut.Write(JSON2.stringify({\n                version: 3,\n                file: sourceMapper.jsFileName,\n                sources: tsFiles,\n                names: namesList,\n                mappings: mappingsString\n            }));\n\n            // Closing files could result in exceptions, report them if they occur\n            sourceMapOut.Close();\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export enum EmitContainer {\n        Prog,\n        Module,\n        DynamicModule,\n        Class,\n        Constructor,\n        Function,\n        Args,\n        Interface,\n    }\n\n    export class EmitState {\n        public column: number;\n        public line: number;\n        public pretty: bool;\n        public inObjectLiteral: bool;\n        public container: EmitContainer;\n\n        constructor() {\n            this.column = 0;\n            this.line = 0;\n            this.pretty = false;\n            this.inObjectLiteral = false;\n            this.container = EmitContainer.Prog;\n        }\n    }\n\n    export class EmitOptions {\n        public ioHost: EmitterIOHost = null;\n        public outputMany: bool = true;\n        public commonDirectoryPath = \"\";\n\n        constructor(public compilationSettings: CompilationSettings) {\n        }\n\n        public mapOutputFileName(fileName: string, extensionChanger: (fname: string, wholeFileNameReplaced: bool) => string) {\n            if (this.outputMany) {\n                var updatedFileName = fileName;\n                if (this.compilationSettings.outputOption != \"\") {\n                    // Replace the common directory path with the option specified\n                    updatedFileName = fileName.replace(this.commonDirectoryPath, \"\");\n                    updatedFileName = this.compilationSettings.outputOption + updatedFileName;\n                }\n                return extensionChanger(updatedFileName, false);\n            } else {\n                return extensionChanger(this.compilationSettings.outputOption, true);\n            }\n        }\n    }\n\n    export class Indenter {\n        static indentStep: number = 4;\n        static indentStepString: string = \"    \";\n        static indentStrings: string[] = [];\n        public indentAmt: number = 0;\n\n        public increaseIndent() {\n            this.indentAmt += Indenter.indentStep;\n        }\n\n        public decreaseIndent() {\n            this.indentAmt -= Indenter.indentStep;\n        }\n\n        public getIndent() {\n            var indentString = Indenter.indentStrings[this.indentAmt];\n            if (indentString === undefined) {\n                indentString = \"\";\n                for (var i = 0; i < this.indentAmt; i = i + Indenter.indentStep) {\n                    indentString += Indenter.indentStepString;\n                }\n                Indenter.indentStrings[this.indentAmt] = indentString;\n            }\n            return indentString;\n        }\n    }\n\n    export interface BoundDeclInfo {\n        boundDecl: BoundDecl;\n        pullDecl: PullDecl;\n    }\n\n    export class Emitter {\n        public globalThisCapturePrologueEmitted = false;\n        public extendsPrologueEmitted = false;\n        public thisClassNode: TypeDeclaration = null;\n        public thisFnc: FuncDecl = null;\n        public moduleDeclList: ModuleDeclaration[] = [];\n        public moduleName = \"\";\n        public emitState = new EmitState();\n        public indenter = new Indenter();\n        public ambientModule = false;\n        public modAliasId: string = null;\n        public firstModAlias: string = null;\n        public allSourceMappers: SourceMapper[] = [];\n        public sourceMapper: SourceMapper = null;\n        public captureThisStmtString = \"var _this = this;\";\n        public varListCountStack: number[] = [0];\n        public locationInfo: LocationInfo = null;\n        private pullTypeChecker: PullTypeChecker = null;\n        private declStack: PullDecl[] = [];\n\n        constructor(public emittingFileName: string,\n                    public outfile: ITextWriter,\n                    public emitOptions: EmitOptions,\n                    private semanticInfoChain: SemanticInfoChain) {\n            this.pullTypeChecker = new PullTypeChecker(emitOptions.compilationSettings, semanticInfoChain);\n        }\n\n        public diagnostics(): IDiagnostic[] { return []; }\n\n        private pushDecl(decl: PullDecl) {\n            if (decl) {\n                this.declStack[this.declStack.length] = decl;\n            }\n        }\n\n        private popDecl(decl: PullDecl) {\n            if (decl) {\n                this.declStack.length--;\n            }\n        }\n\n        private getEnclosingDecl() {\n            var declStackLen = this.declStack.length;\n            var enclosingDecl = declStackLen > 0 ? this.declStack[declStackLen - 1] : null;\n            return enclosingDecl;\n        }\n\n        private setTypeCheckerUnit(fileName: string) {\n            if (!this.pullTypeChecker.resolver) {\n                this.pullTypeChecker.setUnit(fileName);\n                return;\n            }\n\n            this.pullTypeChecker.resolver.setUnitPath(fileName);\n        }\n\n        public setUnit(locationInfo: LocationInfo) {\n            this.locationInfo = locationInfo;\n        }\n\n        public importStatementShouldBeEmitted(importDeclAST: ImportDeclaration, unitPath?: string): bool {\n            if (!importDeclAST.isDynamicImport) {\n                return true;\n            }\n\n            var importDecl = this.semanticInfoChain.getDeclForAST(importDeclAST, this.locationInfo.fileName);\n            var pullSymbol = <PullTypeAliasSymbol>importDecl.getSymbol();\n            return pullSymbol.getIsUsedAsValue();\n        }\n\n        public setSourceMappings(mapper: SourceMapper) {\n            this.allSourceMappers.push(mapper);\n            this.sourceMapper = mapper;\n        }\n\n        public writeToOutput(s: string) {\n            this.outfile.Write(s);\n            // TODO: check s for newline\n            this.emitState.column += s.length;\n        }\n\n        public writeToOutputTrimmable(s: string) {\n            if (this.emitOptions.compilationSettings.minWhitespace) {\n                s = s.replace(/[\\s]*/g, \'\');\n            }\n            this.writeToOutput(s);\n        }\n\n        public writeLineToOutput(s: string) {\n            if (this.emitOptions.compilationSettings.minWhitespace) {\n                this.writeToOutput(s);\n                var c = s.charCodeAt(s.length - 1);\n                if (!((c === LexCodeSpace) || (c === LexCodeSMC) || (c === LexCodeLBR))) {\n                    this.writeToOutput(\' \');\n                }\n            }\n            else {\n                this.outfile.WriteLine(s);\n                this.emitState.column = 0\n                this.emitState.line++;\n            }\n        }\n\n        public writeCaptureThisStatement(ast: AST) {\n            this.emitIndent();\n            this.recordSourceMappingStart(ast);\n            this.writeToOutput(this.captureThisStmtString);\n            this.recordSourceMappingEnd(ast);\n            this.writeLineToOutput(\"\");\n        }\n\n        public setInVarBlock(count: number) {\n            this.varListCountStack[this.varListCountStack.length - 1] = count;\n        }\n\n        public setInObjectLiteral(val: bool): bool {\n            var temp = this.emitState.inObjectLiteral;\n            this.emitState.inObjectLiteral = val;\n            return temp;\n        }\n\n        public setContainer(c: number): number {\n            var temp = this.emitState.container;\n            this.emitState.container = c;\n            return temp;\n        }\n\n        private getIndentString() {\n            if (this.emitOptions.compilationSettings.minWhitespace) {\n                return \"\";\n            }\n            else {\n                return this.indenter.getIndent();\n            }\n        }\n\n        public emitIndent() {\n            this.writeToOutput(this.getIndentString());\n        }\n\n        public emitCommentInPlace(comment: Comment) {\n            var text = comment.getText();\n            var hadNewLine = false;\n\n            if (comment.isBlockComment) {\n                if (this.emitState.column === 0) {\n                    this.emitIndent();\n                }\n                this.recordSourceMappingStart(comment);\n                this.writeToOutput(text[0]);\n\n                if (text.length > 1 || comment.endsLine) {\n                    for (var i = 1; i < text.length; i++) {\n                        this.writeLineToOutput(\"\");\n                        this.emitIndent();\n                        this.writeToOutput(text[i]);\n                    }\n                    this.recordSourceMappingEnd(comment);\n                    this.writeLineToOutput(\"\");\n                    hadNewLine = true;\n                } else {\n                    this.recordSourceMappingEnd(comment);\n                }\n            }\n            else {\n                if (this.emitState.column === 0) {\n                    this.emitIndent();\n                }\n                this.recordSourceMappingStart(comment);\n                this.writeToOutput(text[0]);\n                this.recordSourceMappingEnd(comment);\n                this.writeLineToOutput(\"\");\n                hadNewLine = true;\n            }\n\n            if (hadNewLine) {\n                this.emitIndent();\n            }\n            else {\n                this.writeToOutput(\" \");\n            }\n        }\n\n        public emitComments(ast: AST, pre: bool) {\n            var comments = pre ? ast.preComments : ast.postComments;\n\n            if (this.emitOptions.compilationSettings.emitComments && comments && comments.length != 0) {\n                for (var i = 0; i < comments.length; i++) {\n                    this.emitCommentInPlace(comments[i]);\n                }\n            }\n        }\n\n        // TODO: emit accessor pattern\n        public emitObjectLiteral(content: ASTList) {\n            if (content.members.length === 0) {\n                this.writeToOutput(\"{}\");\n                return;\n            }\n\n            this.writeLineToOutput(\"{\");\n            this.indenter.increaseIndent();\n            var inObjectLiteral = this.setInObjectLiteral(true);\n            this.emitJavascriptList(content, \",\", TokenID.Comma, true, false, false);\n            this.setInObjectLiteral(inObjectLiteral);\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.writeToOutput(\"}\");\n        }\n\n        public emitArrayLiteral(content: ASTList) {\n            this.writeToOutput(\"[\");\n            if (content && content.members.length > 0) {\n                this.writeLineToOutput(\"\");\n                this.indenter.increaseIndent();\n                this.emitJavascriptList(content, \", \", TokenID.Comma, true, false, false);\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n            }\n            this.writeToOutput(\"]\");\n        }\n\n        public emitNew(target: AST, args: ASTList) {\n            this.writeToOutput(\"new \");\n            if (target.nodeType === NodeType.TypeRef) {\n                var typeRef = <TypeReference>target;\n                if (typeRef.arrayCount) {\n                    this.writeToOutput(\"Array()\");\n                }\n                else {\n                    this.emitJavascript(typeRef.term, TokenID.Tilde, false);\n                    this.writeToOutput(\"()\");\n                }\n            }\n            else {\n                this.emitJavascript(target, TokenID.Tilde, false);\n                this.recordSourceMappingStart(args);\n                this.writeToOutput(\"(\");\n                this.emitJavascriptList(args, \", \", TokenID.Comma, false, false, false);\n                this.writeToOutput(\")\");\n                this.recordSourceMappingEnd(args);\n            }\n        }\n\n        public getVarDeclFromIdentifier(boundDeclInfo: BoundDeclInfo): BoundDeclInfo {\n            CompilerDiagnostics.assert(boundDeclInfo.boundDecl && boundDeclInfo.boundDecl.init &&\n                boundDeclInfo.boundDecl.init.nodeType == NodeType.Name,\n                \"The init expression of bound declaration when emitting as constant has to be indentifier\");\n\n            var init = boundDeclInfo.boundDecl.init;\n            var ident = <Identifier>init;\n\n            var resolvingContext = new PullTypeResolutionContext();\n            this.setTypeCheckerUnit(this.locationInfo.fileName);\n            var pullSymbol = this.pullTypeChecker.resolver.resolveNameExpression(ident, boundDeclInfo.pullDecl.getParentDecl(), resolvingContext);\n            if (pullSymbol) {\n                var pullDecls = pullSymbol.getDeclarations();\n                if (pullDecls.length == 1) {\n                    var pullDecl = pullDecls[0];\n                    var ast = this.semanticInfoChain.getASTForDecl(pullDecl, pullDecl.getScriptName());\n                    if (ast && ast.nodeType == NodeType.VarDecl) {\n                        return { boundDecl: <VarDecl>ast, pullDecl: pullDecl };\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        private getConstantValue(boundDeclInfo: BoundDeclInfo): number {\n            var init = boundDeclInfo.boundDecl.init;\n            if (init) {\n                if (init.nodeType === NodeType.NumberLit) {\n                    var numLit = <NumberLiteral>init;\n                    return numLit.value;\n                }\n                else if (init.nodeType === NodeType.Lsh) {\n                    var binop = <BinaryExpression>init;\n                    if (binop.operand1.nodeType === NodeType.NumberLit &&\n                        binop.operand2.nodeType === NodeType.NumberLit) {\n                        return (<NumberLiteral>binop.operand1).value << (<NumberLiteral>binop.operand2).value;\n                    }\n                }\n                else if (init.nodeType === NodeType.Name) {\n                    var varDeclInfo = this.getVarDeclFromIdentifier(boundDeclInfo);\n                    if (varDeclInfo) {\n                        return this.getConstantValue(varDeclInfo);\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public getConstantDecl(dotExpr: BinaryExpression): BoundDeclInfo {\n            var resolvingContext = new PullTypeResolutionContext();\n            this.setTypeCheckerUnit(this.locationInfo.fileName);\n            var pullSymbol = this.pullTypeChecker.resolver.resolveDottedNameExpression(dotExpr, this.getEnclosingDecl(), resolvingContext);\n            if (pullSymbol && pullSymbol.hasFlag(PullElementFlags.Constant)) {\n                var pullDecls = pullSymbol.getDeclarations();\n                if (pullDecls.length == 1) {\n                    var pullDecl = pullDecls[0];\n                    var ast = this.semanticInfoChain.getASTForDecl(pullDecl, pullDecl.getScriptName());\n                    if (ast && ast.nodeType == NodeType.VarDecl) {\n                        return { boundDecl: <VarDecl>ast, pullDecl: pullDecl };\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public tryEmitConstant(dotExpr: BinaryExpression) {\n            if (!this.emitOptions.compilationSettings.propagateConstants) {\n                return false;\n            }\n            var propertyName = <Identifier>dotExpr.operand2;\n            var boundDeclInfo = this.getConstantDecl(dotExpr);\n            if (boundDeclInfo) {\n                var value = this.getConstantValue(boundDeclInfo);\n                if (value !== null) {\n                    this.writeToOutput(value.toString());\n                    var comment = \" /* \";\n                    comment += propertyName.actualText;\n                    comment += \" */ \";\n                    this.writeToOutput(comment);\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public emitCall(callNode: CallExpression, target: AST, args: ASTList) {\n            if (!this.emitSuperCall(callNode)) {\n                if (target.nodeType === NodeType.FuncDecl) {\n                    this.writeToOutput(\"(\");\n                }\n                if (callNode.target.nodeType === NodeType.SuperExpression && this.emitState.container === EmitContainer.Constructor) {\n                    this.writeToOutput(\"_super.call\");\n                }\n                else {\n                    this.emitJavascript(target, TokenID.OpenParen, false);\n                }\n                if (target.nodeType === NodeType.FuncDecl) {\n                    this.writeToOutput(\")\");\n                }\n                this.recordSourceMappingStart(args);\n                this.writeToOutput(\"(\");\n                if (callNode.target.nodeType === NodeType.SuperExpression && this.emitState.container === EmitContainer.Constructor) {\n                    this.writeToOutput(\"this\");\n                    if (args && args.members.length) {\n                        this.writeToOutput(\", \");\n                    }\n                }\n                this.emitJavascriptList(args, \", \", TokenID.Comma, false, false, false);\n                this.writeToOutput(\")\");\n                this.recordSourceMappingEnd(args);\n            }\n        }\n\n        public emitConstructorCalls(bases: ASTList, classDecl: TypeDeclaration) {\n            if (bases === null) {\n                return;\n            }\n            var basesLen = bases.members.length;\n            this.recordSourceMappingStart(classDecl);\n            for (var i = 0; i < basesLen; i++) {\n                var baseExpr = bases.members[i];\n                var baseSymbol: Symbol = null;\n                if (baseExpr.nodeType === NodeType.Call) {\n                    baseSymbol = (<CallExpression>baseExpr).target.type.symbol;\n                }\n                else {\n                    baseSymbol = baseExpr.type.symbol;\n                }\n                var baseName = baseSymbol.name;\n                if (baseSymbol.declModule != classDecl.type.symbol.declModule) {\n                    baseName = baseSymbol.fullName();\n                }\n                if (baseExpr.nodeType === NodeType.Call) {\n                    this.emitIndent();\n                    this.writeToOutput(\"_super.call(this\");\n                    var args = (<CallExpression>baseExpr).arguments;\n                    if (args && (args.members.length > 0)) {\n                        this.writeToOutput(\", \");\n                        this.emitJavascriptList(args, \", \", TokenID.Comma, false, false, false);\n                    }\n                    this.writeToOutput(\")\");\n                }\n                else {\n                    if (baseExpr.type && (baseExpr.type.isClassInstance())) {\n                        // parameterless constructor call;\n                        this.emitIndent();\n                        this.writeToOutput(classDecl.name.actualText + \"._super.constructor\");\n                        //emitJavascript(baseExpr,TokenID.LParen,false);\n                        this.writeToOutput(\".call(this)\");\n                    }\n                }\n            }\n            this.recordSourceMappingEnd(classDecl);\n        }\n\n        public emitInnerFunction(funcDecl: FuncDecl, printName: bool, isMember: bool,\n            hasSelfRef: bool, classDecl: TypeDeclaration) {\n\n            /// REVIEW: The code below causes functions to get pushed to a newline in cases where they shouldn\'t\n            /// such as: \n            ///     Foo.prototype.bar = \n            ///         function() {\n            ///         };\n            /// Once we start emitting comments, we should pull this code out to place on the outer context where the function\n            /// is used.\n            //if (funcDecl.preComments!=null && funcDecl.preComments.length>0) {\n            //    this.writeLineToOutput(\"\");\n            //    this.increaseIndent();\n            //    emitIndent();\n            //}\n\n            var pullDecl = this.semanticInfoChain.getDeclForAST(funcDecl, this.locationInfo.fileName);\n            this.pushDecl(pullDecl);\n\n            var isClassConstructor = funcDecl.isConstructor && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ClassMethod);\n            var hasNonObjectBaseType = isClassConstructor && classDecl.extendsList && classDecl.extendsList.members.length > 0;\n            var classPropertiesMustComeAfterSuperCall = hasNonObjectBaseType;\n\n            // We have no way of knowing if the current function is used as an expression or a statement, so as to enusre that the emitted\n            // JavaScript is always valid, add an extra parentheses for unparenthesized function expressions\n            var shouldParenthesize = false;// hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.IsFunctionExpression) && !funcDecl.isAccessor() && (hasFlag(funcDecl.getFlags(), ASTFlags.ExplicitSemicolon) || hasFlag(funcDecl.getFlags(), ASTFlags.AutomaticSemicolon));\n\n            this.emitComments(funcDecl, true);\n            if (shouldParenthesize) {\n                this.writeToOutput(\"(\");\n            }\n            this.recordSourceMappingStart(funcDecl);\n            var accessorSymbol = funcDecl.isAccessor() ? PullHelpers.getAccessorSymbol(funcDecl, this.semanticInfoChain, this.locationInfo.fileName) : null;\n            var container = accessorSymbol ? accessorSymbol.getContainer() : null;\n            var containerKind = container ? container.getKind() : PullElementKind.None;\n            if (!(funcDecl.isAccessor() && containerKind != PullElementKind.Class && containerKind != PullElementKind.ConstructorType)) {\n                this.writeToOutput(\"function \");\n            }\n            if (printName) {\n                var id = funcDecl.getNameText();\n                if (id && !funcDecl.isAccessor()) {\n                    if (funcDecl.name) {\n                        this.recordSourceMappingStart(funcDecl.name);\n                    }\n                    this.writeToOutput(id);\n                    if (funcDecl.name) {\n                        this.recordSourceMappingEnd(funcDecl.name);\n                    }\n                }\n            }\n\n            this.writeToOutput(\"(\");\n            var argsLen = 0;\n            var i = 0;\n            var arg: ArgDecl;\n            var defaultArgs: ArgDecl[] = [];\n            if (funcDecl.arguments) {\n                var tempContainer = this.setContainer(EmitContainer.Args);\n                argsLen = funcDecl.arguments.members.length;\n                var printLen = argsLen;\n                if (funcDecl.variableArgList) {\n                    printLen--;\n                }\n                for (i = 0; i < printLen; i++) {\n                    arg = <ArgDecl>funcDecl.arguments.members[i];\n                    if (arg.init) {\n                        defaultArgs.push(arg);\n                    }\n                    this.emitJavascript(arg, TokenID.OpenParen, false);\n                    if (i < (printLen - 1)) {\n                        this.writeToOutput(\", \");\n                    }\n                }\n                this.setContainer(tempContainer);\n            }\n            this.writeLineToOutput(\") {\");\n\n            if (funcDecl.isConstructor) {\n                this.recordSourceMappingNameStart(\"constructor\");\n            } else if (funcDecl.isGetAccessor()) {\n                this.recordSourceMappingNameStart(\"get_\" + funcDecl.getNameText());\n            } else if (funcDecl.isSetAccessor()) {\n                this.recordSourceMappingNameStart(\"set_\" + funcDecl.getNameText());\n            } else {\n                this.recordSourceMappingNameStart(funcDecl.getNameText());\n            }\n            this.indenter.increaseIndent();\n\n            // set default args first\n            for (i = 0; i < defaultArgs.length; i++) {\n                arg = defaultArgs[i];\n                this.emitIndent();\n                this.recordSourceMappingStart(arg);\n                this.writeToOutput(\"if (typeof \" + arg.id.actualText + \" === \\\"undefined\\\") { \");//\n                this.recordSourceMappingStart(arg.id);\n                this.writeToOutput(arg.id.actualText);\n                this.recordSourceMappingEnd(arg.id);\n                this.writeToOutput(\" = \");\n                this.emitJavascript(arg.init, TokenID.OpenParen, false);\n                this.writeLineToOutput(\"; }\")\n                this.recordSourceMappingEnd(arg);\n            }\n\n            if (funcDecl.isConstructor && this.shouldCaptureThis(funcDecl.classDecl)) {\n                this.writeCaptureThisStatement(funcDecl);\n            }\n\n            if (funcDecl.isConstructor && !classPropertiesMustComeAfterSuperCall) {\n                if (funcDecl.arguments) {\n                    argsLen = funcDecl.arguments.members.length;\n                    for (i = 0; i < argsLen; i++) {\n                        arg = <ArgDecl>funcDecl.arguments.members[i];\n                        if ((arg.getVarFlags() & VariableFlags.Property) != VariableFlags.None) {\n                            this.emitIndent();\n                            this.recordSourceMappingStart(arg);\n                            this.recordSourceMappingStart(arg.id);\n                            this.writeToOutput(\"this.\" + arg.id.actualText);\n                            this.recordSourceMappingEnd(arg.id);\n                            this.writeToOutput(\" = \");\n                            this.recordSourceMappingStart(arg.id);\n                            this.writeToOutput(arg.id.actualText);\n                            this.recordSourceMappingEnd(arg.id);\n                            this.writeLineToOutput(\";\");\n                            this.recordSourceMappingEnd(arg);\n                        }\n                    }\n                }\n            }\n            if (hasSelfRef) {\n                this.writeCaptureThisStatement(funcDecl);\n            }\n            if (funcDecl.variableArgList) {\n                argsLen = funcDecl.arguments.members.length;\n                var lastArg = <ArgDecl>funcDecl.arguments.members[argsLen - 1];\n                this.emitIndent();\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(\"var \");\n                this.recordSourceMappingStart(lastArg.id);\n                this.writeToOutput(lastArg.id.actualText);\n                this.recordSourceMappingEnd(lastArg.id);\n                this.writeLineToOutput(\" = [];\");\n                this.recordSourceMappingEnd(lastArg);\n                this.emitIndent();\n                this.writeToOutput(\"for (\")\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(\"var _i = 0;\");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeToOutput(\" \");\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(\"_i < (arguments.length - \" + (argsLen - 1) + \")\");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeToOutput(\"; \");\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(\"_i++\");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeLineToOutput(\") {\");\n                this.indenter.increaseIndent();\n                this.emitIndent();\n\n                this.recordSourceMappingStart(lastArg);\n                this.writeToOutput(lastArg.id.actualText + \"[_i] = arguments[_i + \" + (argsLen - 1) + \"];\");\n                this.recordSourceMappingEnd(lastArg);\n                this.writeLineToOutput(\"\");\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.writeLineToOutput(\"}\");\n            }\n\n            // if it\'s a class, emit the uninitializedMembers, first emit the non-proto class body members\n            if (funcDecl.isConstructor && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ClassMethod) && !classPropertiesMustComeAfterSuperCall) {\n\n                var nProps = (<ASTList>this.thisClassNode.members).members.length;\n\n                for (i = 0; i < nProps; i++) {\n                    if ((<ASTList>this.thisClassNode.members).members[i].nodeType === NodeType.VarDecl) {\n                        var varDecl = <VarDecl>(<ASTList>this.thisClassNode.members).members[i];\n                        if (!hasFlag(varDecl.getVarFlags(), VariableFlags.Static) && varDecl.init) {\n                            this.emitIndent();\n                            this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                            this.writeLineToOutput(\"\");\n                        }\n                    }\n                }\n                //this.writeLineToOutput(\"\");\n            }\n\n            this.emitBareJavascriptStatements(funcDecl.bod, classPropertiesMustComeAfterSuperCall);\n\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.recordSourceMappingStart(funcDecl.endingToken);\n            this.writeToOutput(\"}\");\n\n            this.recordSourceMappingNameEnd();\n            this.recordSourceMappingEnd(funcDecl.endingToken);\n            this.recordSourceMappingEnd(funcDecl);\n\n            if (shouldParenthesize) {\n                this.writeToOutput(\")\");\n            }\n\n            // The extra call is to make sure the caller\'s funcDecl end is recorded, since caller wont be able to record it\n            this.recordSourceMappingEnd(funcDecl);\n\n            this.emitComments(funcDecl, false);\n\n            if (!isMember &&\n                !funcDecl.isAccessor() &&\n                //funcDecl.name != null &&\n                !hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.IsFunctionExpression) &&\n                (!hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Signature) || funcDecl.isConstructor)) {\n                this.writeLineToOutput(\"\");\n            }\n\n            this.popDecl(pullDecl);\n        }\n\n        public getModuleImportAndDepencyList(moduleDecl: ModuleDeclaration) {\n            var importList = \"\";\n            var dependencyList = \"\";\n            var i = 0;\n\n            var semanticInfo = this.semanticInfoChain.getUnit(this.locationInfo.fileName);\n            var imports = semanticInfo.getDynamicModuleImports();\n\n            // all dependencies are quoted\n            if (imports.length) {\n                for (i = 0; i < imports.length; i++) {\n                    var importStatement = imports[i];\n                    var importStatementAST = <ImportDeclaration>semanticInfo.getASTForDecl(importStatement.getDeclarations()[0]);\n\n                    if (importStatement.getIsUsedAsValue()) {\n                        if (i <= imports.length - 1) {\n                            dependencyList += \", \";\n                            importList += \", \";\n                        }\n\n                        importList += \"__\" + importStatement.getName() + \"__\";\n                        dependencyList += importStatementAST.firstAliasedModToString();\n                    }\n                }\n            }\n\n            // emit any potential amd dependencies\n            for (i = 0; i < moduleDecl.amdDependencies.length; i++) {\n                dependencyList += \", \\\"\" + moduleDecl.amdDependencies[i] + \"\\\"\";\n            }\n\n            return {\n                importList: importList,\n                dependencyList: dependencyList\n            };\n        }\n\n        public shouldCaptureThis(ast: AST) {\n            if (ast == null) {\n                var scriptDecl = this.semanticInfoChain.getUnit(this.locationInfo.fileName).getTopLevelDecls()[0];\n                return (scriptDecl.getFlags() & PullElementFlags.MustCaptureThis) == PullElementFlags.MustCaptureThis;\n            }\n\n            var decl = this.semanticInfoChain.getDeclForAST(ast, this.locationInfo.fileName);\n            if (decl) {\n                return (decl.getFlags() & PullElementFlags.MustCaptureThis) == PullElementFlags.MustCaptureThis;\n            }\n\n            return false;\n        }\n\n        public emitJavascriptModule(moduleDecl: ModuleDeclaration) {\n            var pullDecl = this.semanticInfoChain.getDeclForAST(moduleDecl, this.locationInfo.fileName);\n            this.pushDecl(pullDecl);\n\n            var modName = moduleDecl.name.actualText;\n            if (isTSFile(modName)) {\n                moduleDecl.name.setText(modName.substring(0, modName.length - 3));\n            }\n\n            if (!hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.Ambient)) {\n                var isDynamicMod = hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsDynamic);\n                var prevOutFile = this.outfile;\n                var prevOutFileName = this.emittingFileName;\n                var prevAllSourceMappers = this.allSourceMappers;\n                var prevSourceMapper = this.sourceMapper;\n                var prevColumn = this.emitState.column;\n                var prevLine = this.emitState.line;\n                var temp = this.setContainer(EmitContainer.Module);\n                var svModuleName = this.moduleName;\n                var isExported = hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.Exported);\n                this.moduleDeclList[this.moduleDeclList.length] = moduleDecl;\n                var isWholeFile = hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsWholeFile);\n                this.moduleName = moduleDecl.name.actualText;\n\n                // prologue\n                if (isDynamicMod) {\n                    // create the new outfile for this module\n                    var tsModFileName = stripQuotes(moduleDecl.name.actualText);\n                    var modFilePath = trimModName(tsModFileName) + \".js\";\n                    modFilePath = this.emitOptions.mapOutputFileName(modFilePath, TypeScriptCompiler.mapToJSFileName);\n\n                    if (this.emitOptions.ioHost) {\n                        // Ensure that the slashes are normalized so that the comparison is fair\n                        // REVIEW: Note that modFilePath is normalized to forward slashes in Parser.parse, so the \n                        // first call to switchToForwardSlashes is technically a no-op, but it will prevent us from\n                        // regressing if the parser changes\n                        if (switchToForwardSlashes(modFilePath) != switchToForwardSlashes(this.emittingFileName)) {\n                            this.emittingFileName = modFilePath;\n                            var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.compilationSettings.emitComments && moduleDecl.containsUnicodeCharInComment);\n                            this.outfile = this.createFile(this.emittingFileName, useUTF8InOutputfile);\n                            if (prevSourceMapper != null) {\n                                this.allSourceMappers = [];\n                                var sourceMapFile = this.emittingFileName + SourceMapper.MapFileExtension;\n                                var sourceMappingFile = this.createFile(sourceMapFile, false);\n                                this.setSourceMappings(new SourceMapper(tsModFileName, this.emittingFileName, sourceMapFile, this.outfile, sourceMappingFile, this.emitOptions.compilationSettings.emitFullSourceMapPath));\n                                this.emitState.column = 0;\n                                this.emitState.line = 0;\n                            }\n                        } else {\n                            CompilerDiagnostics.assert(this.emitOptions.outputMany, \"Cannot have dynamic modules compiling into single file\");\n                        }\n                    }\n\n                    this.setContainer(EmitContainer.DynamicModule); // discard the previous \'Module\' container\n\n                    this.recordSourceMappingStart(moduleDecl);\n                    if (this.emitOptions.compilationSettings.moduleGenTarget === ModuleGenTarget.Asynchronous) { // AMD\n                        var dependencyList = \"[\\\"require\\\", \\\"exports\\\"\";\n                        var importList = \"require, exports\";\n\n                        var importAndDependencyList = this.getModuleImportAndDepencyList(moduleDecl);\n                        importList += importAndDependencyList.importList;\n                        dependencyList += importAndDependencyList.dependencyList + \"]\";\n\n                        this.writeLineToOutput(\"define(\" + dependencyList + \",\" + \" function(\" + importList + \") {\");\n                    }\n                    else { // Node\n\n                    }\n                }\n                else {\n\n                    if (!isExported) {\n                        this.recordSourceMappingStart(moduleDecl);\n                        this.writeToOutput(\"var \");\n                        this.recordSourceMappingStart(moduleDecl.name);\n                        this.writeToOutput(this.moduleName);\n                        this.recordSourceMappingEnd(moduleDecl.name);\n                        this.writeLineToOutput(\";\");\n                        this.recordSourceMappingEnd(moduleDecl);\n                        this.emitIndent();\n                    }\n\n                    this.writeToOutput(\"(\");\n                    this.recordSourceMappingStart(moduleDecl);\n                    this.writeToOutput(\"function (\");\n                    this.recordSourceMappingStart(moduleDecl.name);\n                    this.writeToOutput(this.moduleName);\n                    this.recordSourceMappingEnd(moduleDecl.name);\n                    this.writeLineToOutput(\") {\");\n                }\n\n                if (!isWholeFile) {\n                    this.recordSourceMappingNameStart(this.moduleName);\n                }\n\n                // body - don\'t indent for Node\n                if (!isDynamicMod || this.emitOptions.compilationSettings.moduleGenTarget === ModuleGenTarget.Asynchronous) {\n                    this.indenter.increaseIndent();\n                }\n\n                if (this.shouldCaptureThis(moduleDecl)) {\n                    this.writeCaptureThisStatement(moduleDecl);\n                }\n\n                this.emitJavascriptList(moduleDecl.members, null, TokenID.Semicolon, true, false, false);\n                if (!isDynamicMod || this.emitOptions.compilationSettings.moduleGenTarget === ModuleGenTarget.Asynchronous) {\n                    this.indenter.decreaseIndent();\n                }\n                this.emitIndent();\n\n                // epilogue\n                if (isDynamicMod) {\n                    if (this.emitOptions.compilationSettings.moduleGenTarget === ModuleGenTarget.Asynchronous) { // AMD\n                        this.writeLineToOutput(\"})\");\n                    }\n                    else { // Node\n                    }\n                    if (!isWholeFile) {\n                        this.recordSourceMappingNameEnd();\n                    }\n                    this.recordSourceMappingEnd(moduleDecl);\n\n                    // close the module outfile, and restore the old one\n                    if (this.outfile != prevOutFile) {\n                        this.emitSourceMapsAndClose();\n                        if (prevSourceMapper != null) {\n                            this.allSourceMappers = prevAllSourceMappers;\n                            this.sourceMapper = prevSourceMapper;\n                            this.emitState.column = prevColumn;\n                            this.emitState.line = prevLine;\n                        }\n                        this.outfile = prevOutFile;\n                        this.emittingFileName = prevOutFileName;\n                    }\n                }\n                else {\n                    var parentIsDynamic = temp == EmitContainer.DynamicModule;\n                    this.recordSourceMappingStart(moduleDecl.endingToken);\n                    if (temp === EmitContainer.Prog && isExported) {\n                        this.writeToOutput(\"}\");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(\")(this.\" + this.moduleName + \" || (this.\" + this.moduleName + \" = {}));\");\n                    }\n                    else if (isExported || temp === EmitContainer.Prog) {\n                        var dotMod = svModuleName != \"\" ? (parentIsDynamic ? \"exports\" : svModuleName) + \".\" : svModuleName;\n                        this.writeToOutput(\"}\");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(\")(\" + dotMod + this.moduleName + \" || (\" + dotMod + this.moduleName + \" = {}));\");\n                    }\n                    else if (!isExported && temp != EmitContainer.Prog) {\n                        this.writeToOutput(\"}\");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(\")(\" + this.moduleName + \" || (\" + this.moduleName + \" = {}));\");\n                    }\n                    else {\n                        this.writeToOutput(\"}\");\n                        if (!isWholeFile) {\n                            this.recordSourceMappingNameEnd();\n                        }\n                        this.recordSourceMappingEnd(moduleDecl.endingToken);\n                        this.writeToOutput(\")();\");\n                    }\n                    this.recordSourceMappingEnd(moduleDecl);\n                    this.writeLineToOutput(\"\");\n                    if (temp != EmitContainer.Prog && isExported) {\n                        this.emitIndent();\n                        this.recordSourceMappingStart(moduleDecl);\n                        if (parentIsDynamic) {\n                            this.writeLineToOutput(\"var \" + this.moduleName + \" = exports.\" + this.moduleName + \";\");\n                        } else {\n                            this.writeLineToOutput(\"var \" + this.moduleName + \" = \" + svModuleName + \".\" + this.moduleName + \";\");\n                        }\n                        this.recordSourceMappingEnd(moduleDecl);\n                    }\n                }\n\n                this.setContainer(temp);\n                this.moduleName = svModuleName;\n                this.moduleDeclList.length--;\n            }\n            this.popDecl(pullDecl);\n        }\n\n        public emitIndex(operand1: AST, operand2: AST) {\n            var temp = this.setInObjectLiteral(false);\n            this.emitJavascript(operand1, TokenID.Tilde, false);\n            this.writeToOutput(\"[\");\n            this.emitJavascriptList(operand2, \", \", TokenID.Comma, false, false, false);\n            this.writeToOutput(\"]\");\n            this.setInObjectLiteral(temp);\n        }\n\n        public emitStringLiteral(text: string) {\n            // should preserve escape etc.\n            // TODO: simplify object literal simple name\n            this.writeToOutput(text);\n        }\n\n        public emitJavascriptFunction(funcDecl: FuncDecl) {\n            if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Signature) /*|| funcDecl.isOverload*/) {\n                return;\n            }\n            var temp: number;\n            var tempFnc = this.thisFnc;\n            this.thisFnc = funcDecl;\n\n            if (funcDecl.isConstructor) {\n                temp = this.setContainer(EmitContainer.Constructor);\n            }\n            else {\n                temp = this.setContainer(EmitContainer.Function);\n            }\n\n            var hasSelfRef = false;\n            var funcName = funcDecl.getNameText();\n\n            if ((this.emitState.inObjectLiteral || !funcDecl.isAccessor()) &&\n                ((temp != EmitContainer.Constructor) ||\n                ((funcDecl.getFunctionFlags() & FunctionFlags.Method) === FunctionFlags.None))) {\n                var tempLit = this.setInObjectLiteral(false);\n                hasSelfRef = this.shouldCaptureThis(funcDecl);\n                this.recordSourceMappingStart(funcDecl);\n                this.emitInnerFunction(funcDecl, (funcDecl.name && !funcDecl.name.isMissing()), false, hasSelfRef, this.thisClassNode);\n                this.setInObjectLiteral(tempLit);\n            }\n            this.setContainer(temp);\n            this.thisFnc = tempFnc;\n\n            if (!hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Signature)) {\n                if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Static)) {\n                    if (this.thisClassNode) {\n                        if (funcDecl.isAccessor()) {\n                            this.emitPropertyAccessor(funcDecl, this.thisClassNode.name.actualText, false);\n                        }\n                        else {\n                            this.emitIndent();\n                            this.recordSourceMappingStart(funcDecl);\n                            this.writeLineToOutput(this.thisClassNode.name.actualText + \".\" + funcName + \" = \" + funcName + \";\");\n                            this.recordSourceMappingEnd(funcDecl);\n                        }\n                    }\n                }\n                else if ((this.emitState.container === EmitContainer.Module || this.emitState.container === EmitContainer.DynamicModule) && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Exported | FunctionFlags.ClassPropertyMethodExported)) {\n                    this.emitIndent();\n                    var modName = this.emitState.container === EmitContainer.Module ? this.moduleName : \"exports\";\n                    this.recordSourceMappingStart(funcDecl);\n                    this.writeLineToOutput(modName + \".\" + funcName +\n                                      \" = \" + funcName + \";\");\n                    this.recordSourceMappingEnd(funcDecl);\n                }\n            }\n        }\n\n        public emitAmbientVarDecl(varDecl: VarDecl) {\n            if (varDecl.init) {\n                this.emitComments(varDecl, true);\n                this.recordSourceMappingStart(varDecl);\n                this.recordSourceMappingStart(varDecl.id);\n                this.writeToOutput(varDecl.id.actualText);\n                this.recordSourceMappingEnd(varDecl.id);\n                this.writeToOutput(\" = \");\n                this.emitJavascript(varDecl.init, TokenID.Comma, false);\n                this.recordSourceMappingEnd(varDecl);\n                this.writeToOutput(\";\");\n                this.emitComments(varDecl, false);\n            }\n        }\n\n        public varListCount(): number {\n            return this.varListCountStack[this.varListCountStack.length - 1];\n        }\n\n        // Emits \"var \" if it is allowed\n        public emitVarDeclVar() {\n            // If it is var list of form var a, b, c = emit it only if count > 0 - which will be when emitting first var\n            // If it is var list of form  var a = varList count will be 0\n            if (this.varListCount() >= 0) {\n                this.writeToOutput(\"var \");\n                this.setInVarBlock(-this.varListCount());\n            }\n            return true;\n        }\n\n        public onEmitVar() {\n            if (this.varListCount() > 0) {\n                this.setInVarBlock(this.varListCount() - 1);\n            }\n            else if (this.varListCount() < 0) {\n                this.setInVarBlock(this.varListCount() + 1);\n            }\n        }\n\n        public emitJavascriptVarDecl(varDecl: VarDecl, tokenId: TokenID) {\n            var pullDecl = this.semanticInfoChain.getDeclForAST(varDecl, this.locationInfo.fileName);\n            this.pushDecl(pullDecl);\n            if ((varDecl.getVarFlags() & VariableFlags.Ambient) === VariableFlags.Ambient) {\n                this.emitAmbientVarDecl(varDecl);\n                this.onEmitVar();\n            }\n            else {\n                this.emitComments(varDecl, true);\n                this.recordSourceMappingStart(varDecl);\n\n                var symbol = this.semanticInfoChain.getSymbolForAST(varDecl, this.locationInfo.fileName);\n                var parentSymbol = symbol ? symbol.getContainer() : null;\n                var parentKind = parentSymbol ? parentSymbol.getKind() : PullElementKind.None;\n                var associatedParentSymbol = parentSymbol ? parentSymbol.getAssociatedContainerType() : null;\n                var associatedParentSymbolKind = associatedParentSymbol ? associatedParentSymbol.getKind() : PullElementKind.None;\n                if (parentKind == PullElementKind.Class) {\n                    // class\n                    if (this.emitState.container != EmitContainer.Args) {\n                        if (varDecl.isStatic()) {\n                            this.writeToOutput(parentSymbol.getName() + \".\");\n                        }\n                        else {\n                            this.writeToOutput(\"this.\");\n                        }\n                    }\n                }\n                else if (parentKind == PullElementKind.Enum ||\n                    parentKind == PullElementKind.DynamicModule ||\n                    associatedParentSymbolKind == PullElementKind.Container ||\n                    associatedParentSymbolKind == PullElementKind.DynamicModule ||\n                    associatedParentSymbolKind == PullElementKind.Enum) {\n                    // module\n                    if (!varDecl.isExported() && !varDecl.isProperty()) {\n                        this.emitVarDeclVar();\n                    }\n                    else {\n                        if (this.emitState.container === EmitContainer.DynamicModule) {\n                            this.writeToOutput(\"exports.\");\n                        }\n                        else {\n                            this.writeToOutput(this.moduleName + \".\");\n                        }\n                    }\n                }\n                else {\n                    // function, constructor, method etc.\n                    if (tokenId != TokenID.OpenParen) {\n                        this.emitVarDeclVar();\n                    }\n                }\n                this.recordSourceMappingStart(varDecl.id);\n                this.writeToOutput(varDecl.id.actualText);\n                this.recordSourceMappingEnd(varDecl.id);\n                var hasInitializer = (varDecl.init != null);\n                if (hasInitializer) {\n                    this.writeToOutputTrimmable(\" = \");\n\n                    // Ensure we have a fresh var list count when recursing into the variable \n                    // initializer.  We don\'t want our current list of variables to affect how we\n                    // emit nested variable lists.\n                    this.varListCountStack.push(0);\n                    this.emitJavascript(varDecl.init, TokenID.Comma, false);\n                    this.varListCountStack.pop();\n                }\n                this.onEmitVar();\n                if ((tokenId != TokenID.OpenParen)) {\n                    if (this.varListCount() < 0) {\n                        this.writeToOutput(\", \");\n                    } else if (tokenId != TokenID.For) {\n                        this.writeToOutputTrimmable(\";\");\n                    }\n                }\n                this.recordSourceMappingEnd(varDecl);\n                this.emitComments(varDecl, false);\n            }\n            this.popDecl(pullDecl);\n        }\n\n        public declEnclosed(moduleDecl: ModuleDeclaration): bool {\n            if (moduleDecl === null) {\n                return true;\n            }\n            for (var i = 0, len = this.moduleDeclList.length; i < len; i++) {\n                if (this.moduleDeclList[i] === moduleDecl) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private symbolIsUsedInItsEnclosingContainer(symbol: PullSymbol, dynamic = false) {\n            var symDecls = symbol.getDeclarations();\n\n            if (symDecls.length) {\n                var enclosingDecl = this.getEnclosingDecl();\n                if (enclosingDecl) {\n                    var parentDecl = symDecls[0].getParentDecl();\n                    if (parentDecl) {\n                        var symbolDeclarationEnclosingContainer = parentDecl;\n                        var enclosingContainer = enclosingDecl;\n\n                        // compute the closing container of the symbol\'s declaration\n                        while (symbolDeclarationEnclosingContainer) {\n                            if (symbolDeclarationEnclosingContainer.getKind() == (dynamic ? PullElementKind.DynamicModule : PullElementKind.Container)) {\n                                break;\n                            }\n                            symbolDeclarationEnclosingContainer = symbolDeclarationEnclosingContainer.getParentDecl();\n                        }\n\n                        // if the symbol in question is not a global, compute the nearest\n                        // enclosing declaration from the point of usage\n                        if (symbolDeclarationEnclosingContainer) {\n                            while (enclosingContainer) {\n                                if (enclosingContainer.getKind() == (dynamic ? PullElementKind.DynamicModule : PullElementKind.Container)) {\n                                    break;\n                                }\n\n                                enclosingContainer = enclosingContainer.getParentDecl();\n                            }\n                        }\n\n                        if (symbolDeclarationEnclosingContainer && enclosingContainer) {\n                            var same = symbolDeclarationEnclosingContainer == enclosingContainer;\n\n                            // initialized module object variables are bound to their parent\'s decls\n                            if (!same && symbol.hasFlag(PullElementFlags.InitializedModule)) {\n                                same = symbolDeclarationEnclosingContainer == enclosingContainer.getParentDecl();\n                            }\n\n                            return same;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        public emitJavascriptName(name: Identifier, addThis: bool) {\n            this.emitComments(name, true);\n            this.recordSourceMappingStart(name);\n            if (!name.isMissing()) {\n                var resolvingContext = new PullTypeResolutionContext();\n                this.setTypeCheckerUnit(this.locationInfo.fileName);\n                var pullSymbol = this.pullTypeChecker.resolver.resolveNameExpression(name,\n                    this.getEnclosingDecl(), resolvingContext);\n                var pullSymbolKind = pullSymbol.getKind();\n                if (addThis && (this.emitState.container != EmitContainer.Args) && pullSymbol) {\n                    var pullSymbolContainer = pullSymbol.getContainer();\n                    if (pullSymbolContainer) {\n                        var pullSymbolContainerKind = pullSymbolContainer.getKind();\n\n                        if (pullSymbolContainerKind == PullElementKind.Class) {\n                            if (pullSymbol.hasFlag(PullElementFlags.Static)) {\n                                // This is static symbol\n                                this.writeToOutput(pullSymbolContainer.getName() + \".\");\n                            }\n                            else if (pullSymbolKind == PullElementKind.Property) {\n                                this.emitThis();\n                                this.writeToOutput(\".\");\n                            }\n                        }\n                        else if (pullSymbolContainerKind == PullElementKind.Container || pullSymbolContainerKind == PullElementKind.Enum ||\n                                    pullSymbolContainer.hasFlag(PullElementFlags.InitializedModule)) {\n                            // If property or, say, a constructor being invoked locally within the module of its definition\n                            if (pullSymbolKind == PullElementKind.Property || pullSymbolKind == PullElementKind.EnumMember) {\n                                this.writeToOutput(pullSymbolContainer.getName() + \".\");\n                            }\n                            else if (pullSymbol.hasFlag(PullElementFlags.Exported) &&\n                                pullSymbolKind == PullElementKind.Variable &&\n                                !pullSymbol.hasFlag(PullElementFlags.InitializedModule)) {\n                                this.writeToOutput(pullSymbolContainer.getName() + \".\");\n                            }\n                            else if (pullSymbol.hasFlag(PullElementFlags.Exported) &&\n                                !this.symbolIsUsedInItsEnclosingContainer(pullSymbol)) {\n                                this.writeToOutput(pullSymbolContainer.getName() + \".\");\n                            }\n                            // else if (pullSymbol.hasFlag(PullElementFlags.Exported) && \n                            //             pullSymbolKind != PullElementKind.Class && \n                            //             pullSymbolKind != PullElementKind.ConstructorMethod && \n                            //             !pullSymbol.hasFlag(PullElementFlags.ClassConstructorVariable)) {\n                            //         this.writeToOutput(pullSymbolContainer.getName() + \".\");\n                            // }\n                        }\n                        else if (pullSymbolContainerKind == PullElementKind.DynamicModule) {\n                            if (pullSymbolKind == PullElementKind.Property || pullSymbol.hasFlag(PullElementFlags.Exported)) {\n                                // If dynamic module\n                                if (pullSymbolKind == PullElementKind.Property) {\n                                    this.writeToOutput(\"exports.\");\n                                }\n                                else if (pullSymbol.hasFlag(PullElementFlags.Exported) &&\n                                    !this.symbolIsUsedInItsEnclosingContainer(pullSymbol, true)) {\n                                    this.writeToOutput(\"exports.\");\n                                }\n                            }\n                        }\n                        else if (pullSymbolKind == PullElementKind.Property) {\n                            if (pullSymbolContainer.getKind() == PullElementKind.Class) {\n                                this.emitThis();\n                                this.writeToOutput(\".\");\n                            }\n                        }\n                        else {\n                            var pullDecls = pullSymbol.getDeclarations();\n                            var emitContainerName = true;\n                            for (var i = 0 ; i < pullDecls.length; i++) {\n                                if (pullDecls[i].getScriptName() == this.locationInfo.fileName) {\n                                    emitContainerName = false;\n                                }\n                            }\n                            if (emitContainerName) {\n                                this.writeToOutput(pullSymbolContainer.getName() + \".\");\n                            }\n                        }\n                    }\n                }\n\n                // If it\'s a dynamic module, we need to print the \"require\" invocation\n                if (pullSymbol && pullSymbolKind == PullElementKind.DynamicModule) {\n                    if (this.emitOptions.compilationSettings.moduleGenTarget == ModuleGenTarget.Asynchronous) {\n                        this.writeLineToOutput(\"__\" + this.modAliasId + \"__;\");\n                    }\n                    else {\n                        var moduleDecl: ModuleDeclaration = <ModuleDeclaration>this.semanticInfoChain.getASTForSymbol(pullSymbol, this.locationInfo.fileName);\n                        var modPath = name.actualText;\n                        var isAmbient = pullSymbol.hasFlag(PullElementFlags.Ambient);\n                        modPath = isAmbient ? modPath : this.firstModAlias ? this.firstModAlias : quoteBaseName(modPath);\n                        modPath = isAmbient ? modPath : (!isRelative(stripQuotes(modPath)) ? quoteStr(\"./\" + stripQuotes(modPath)) : modPath);\n                        this.writeToOutput(\"require(\" + modPath + \")\");\n                    }\n                }\n                else {\n                    this.writeToOutput(name.actualText);\n                }\n            }\n\n            this.recordSourceMappingEnd(name);\n            this.emitComments(name, false);\n        }\n\n        public emitJavascriptStatements(stmts: AST, emitEmptyBod: bool) {\n            if (stmts) {\n                if (stmts.nodeType != NodeType.Block) {\n                    var hasContents = (stmts && (stmts.nodeType != NodeType.List || ((<ASTList>stmts).members.length > 0)));\n                    if (emitEmptyBod || hasContents) {\n                        var hasOnlyBlockStatement = ((stmts.nodeType === NodeType.Block) ||\n                            ((stmts.nodeType === NodeType.List) && ((<ASTList>stmts).members.length === 1) && ((<ASTList>stmts).members[0].nodeType === NodeType.Block)));\n\n                        this.recordSourceMappingStart(stmts);\n                        if (!hasOnlyBlockStatement) {\n                            this.writeLineToOutput(\" {\");\n                            this.indenter.increaseIndent();\n                        }\n                        this.emitJavascriptList(stmts, null, TokenID.Semicolon, true, false, false);\n                        if (!hasOnlyBlockStatement) {\n                            this.writeLineToOutput(\"\");\n                            this.indenter.decreaseIndent();\n                            this.emitIndent();\n                            this.writeToOutput(\"}\");\n                        }\n                        this.recordSourceMappingEnd(stmts);\n                    }\n                }\n                else {\n                    this.emitJavascript(stmts, TokenID.Semicolon, true);\n                }\n            }\n            else if (emitEmptyBod) {\n                this.writeToOutput(\"{ }\");\n            }\n        }\n\n        public emitBareJavascriptStatements(stmts: AST, emitClassPropertiesAfterSuperCall: bool = false) {\n            // just the statements without enclosing curly braces\n            if (stmts.nodeType != NodeType.Block) {\n                if (stmts.nodeType === NodeType.List) {\n                    var stmtList = <ASTList>stmts;\n                    if ((stmtList.members.length === 2) &&\n                        (stmtList.members[0].nodeType === NodeType.Block) &&\n                        (stmtList.members[1].nodeType === NodeType.EndCode)) {\n                        this.emitJavascript(stmtList.members[0], TokenID.Semicolon, true);\n                        this.writeLineToOutput(\"\");\n                    }\n                    else {\n                        this.emitJavascriptList(stmts, null, TokenID.Semicolon, true, false, emitClassPropertiesAfterSuperCall);\n                    }\n                }\n                else {\n                    this.emitJavascript(stmts, TokenID.Semicolon, true);\n                }\n            }\n            else {\n                this.emitJavascript(stmts, TokenID.Semicolon, true);\n            }\n        }\n\n        public recordSourceMappingNameStart(name: string) {\n            if (this.sourceMapper) {\n                var finalName = name;\n                if (!name) {\n                    finalName = \"\";\n                } else if (this.sourceMapper.currentNameIndex.length > 0) {\n                    finalName = this.sourceMapper.names[this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length - 1]] + \".\" + name;\n                }\n\n                // We are currently not looking for duplicate but that is possible.\n                this.sourceMapper.names.push(finalName);\n                this.sourceMapper.currentNameIndex.push(this.sourceMapper.names.length - 1);\n            }\n        }\n\n        public recordSourceMappingNameEnd() {\n            if (this.sourceMapper) {\n                this.sourceMapper.currentNameIndex.pop();\n            }\n        }\n\n        public recordSourceMappingStart(ast: IASTSpan) {\n            if (this.sourceMapper && isValidAstNode(ast)) {\n                var lineCol = { line: -1, character: -1 };\n                var sourceMapping = new SourceMapping();\n                sourceMapping.start.emittedColumn = this.emitState.column;\n                sourceMapping.start.emittedLine = this.emitState.line;\n                // REVIEW: check time consumed by this binary search (about two per leaf statement)\n                var lineMap = this.locationInfo.lineMap;\n                lineMap.fillLineAndCharacterFromPosition(ast.minChar, lineCol);\n                sourceMapping.start.sourceColumn = lineCol.character;\n                sourceMapping.start.sourceLine = lineCol.line + 1;\n                lineMap.fillLineAndCharacterFromPosition(ast.limChar, lineCol);\n                sourceMapping.end.sourceColumn = lineCol.character;\n                sourceMapping.end.sourceLine = lineCol.line + 1;\n                if (this.sourceMapper.currentNameIndex.length > 0) {\n                    sourceMapping.nameIndex = this.sourceMapper.currentNameIndex[this.sourceMapper.currentNameIndex.length - 1];\n                }\n                // Set parent and child relationship\n                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];\n                siblings.push(sourceMapping);\n                this.sourceMapper.currentMappings.push(sourceMapping.childMappings);\n            }\n        }\n\n        public recordSourceMappingEnd(ast: IASTSpan) {\n            if (this.sourceMapper && isValidAstNode(ast)) {\n                // Pop source mapping childs\n                this.sourceMapper.currentMappings.pop();\n\n                // Get the last source mapping from sibling list = which is the one we are recording end for\n                var siblings = this.sourceMapper.currentMappings[this.sourceMapper.currentMappings.length - 1];\n                var sourceMapping = siblings[siblings.length - 1];\n\n                sourceMapping.end.emittedColumn = this.emitState.column;\n                sourceMapping.end.emittedLine = this.emitState.line;\n            }\n        }\n\n        // Note: may throw exception.\n        public emitSourceMapsAndClose(): void {\n            // Output a source mapping.  As long as we haven\'t gotten any errors yet.\n            if (this.sourceMapper !== null) {\n                SourceMapper.emitSourceMapping(this.allSourceMappers);\n            }\n\n            try {\n                this.outfile.Close();\n            }\n            catch (e) {\n                Emitter.throwEmitterError(e);\n            }\n        }\n\n        public emitJavascriptList(ast: AST, delimiter: string, tokenId: TokenID, startLine: bool, onlyStatics: bool, emitClassPropertiesAfterSuperCall: bool = false, emitPrologue = false, requiresExtendsBlock?: bool) {\n            if (ast === null) {\n                return;\n            }\n            else if (ast.nodeType != NodeType.List) {\n                this.emitPrologue(emitPrologue);\n                this.emitJavascript(ast, tokenId, startLine);\n            }\n            else {\n                var list = <ASTList>ast;\n                this.emitComments(ast, true);\n                if (list.members.length === 0) {\n                    this.emitComments(ast, false);\n                    return;\n                }\n\n                var len = list.members.length;\n                for (var i = 0; i < len; i++) {\n                    if (emitPrologue) {\n                        // If the list has Strict mode flags, emit prologue after first statement\n                        // otherwise emit before first statement\n                        if (i === 1 || !hasFlag(list.getFlags(), ASTFlags.StrictMode)) {\n                            this.emitPrologue(requiresExtendsBlock);\n                            emitPrologue = false;\n                        }\n                    }\n\n                    // In some circumstances, class property initializers must be emitted immediately after the \'super\' constructor\n                    // call which, in these cases, must be the first statement in the constructor body\n                    if (i === 1 && emitClassPropertiesAfterSuperCall) {\n\n                        // emit any parameter properties first\n                        var constructorDecl = (<ClassDeclaration>this.thisClassNode).constructorDecl;\n\n                        if (constructorDecl && constructorDecl.arguments) {\n                            var argsLen = constructorDecl.arguments.members.length;\n                            for (var iArg = 0; iArg < argsLen; iArg++) {\n                                var arg = <BoundDecl>constructorDecl.arguments.members[iArg];\n                                if ((arg.getVarFlags() & VariableFlags.Property) != VariableFlags.None) {\n                                    this.emitIndent();\n                                    this.recordSourceMappingStart(arg);\n                                    this.recordSourceMappingStart(arg.id);\n                                    this.writeToOutput(\"this.\" + arg.id.actualText);\n                                    this.recordSourceMappingEnd(arg.id);\n                                    this.writeToOutput(\" = \");\n                                    this.recordSourceMappingStart(arg.id);\n                                    this.writeToOutput(arg.id.actualText);\n                                    this.recordSourceMappingEnd(arg.id);\n                                    this.writeLineToOutput(\";\");\n                                    this.recordSourceMappingEnd(arg);\n                                }\n                            }\n                        }\n\n                        var nProps = (<ASTList>this.thisClassNode.members).members.length;\n\n                        for (var iMember = 0; iMember < nProps; iMember++) {\n                            if ((<ASTList>this.thisClassNode.members).members[iMember].nodeType === NodeType.VarDecl) {\n                                var varDecl = <VarDecl>(<ASTList>this.thisClassNode.members).members[iMember];\n                                if (!hasFlag(varDecl.getVarFlags(), VariableFlags.Static) && varDecl.init) {\n                                    this.emitIndent();\n                                    this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                                    this.writeLineToOutput(\"\");\n                                }\n                            }\n                        }\n                    }\n\n                    var emitNode = list.members[i];\n\n                    var isStaticDecl =\n                                (emitNode.nodeType === NodeType.FuncDecl && hasFlag((<FuncDecl>emitNode).getFunctionFlags(), FunctionFlags.Static)) ||\n                                (emitNode.nodeType === NodeType.VarDecl && hasFlag((<VarDecl>emitNode).getVarFlags(), VariableFlags.Static))\n\n                    if (onlyStatics ? !isStaticDecl : isStaticDecl) {\n                        continue;\n                    }\n                    this.emitJavascript(emitNode, tokenId, startLine);\n\n                    if (delimiter && (i < (len - 1))) {\n                        if (startLine) {\n                            this.writeLineToOutput(delimiter);\n                        }\n                        else {\n                            this.writeToOutput(delimiter);\n                        }\n                    }\n                    else if (startLine &&\n                             (emitNode.nodeType !== NodeType.ExpressionStatement) &&\n                             (emitNode.nodeType !== NodeType.ReturnStatement) &&\n                             (emitNode.nodeType != NodeType.ModuleDeclaration) &&\n                             (emitNode.nodeType != NodeType.InterfaceDeclaration) &&\n                             (!((emitNode.nodeType === NodeType.VarDecl) &&\n                                ((((<VarDecl>emitNode).getVarFlags()) & VariableFlags.Ambient) === VariableFlags.Ambient) &&\n                                (((<VarDecl>emitNode).init) === null)) && this.varListCount() >= 0) &&\n                             (emitNode.nodeType != NodeType.Block || (<Block>emitNode).isStatementBlock) &&\n                             (emitNode.nodeType != NodeType.EndCode) &&\n                             (emitNode.nodeType != NodeType.FuncDecl)) {\n                        this.writeLineToOutput(\"\");\n                    }\n                }\n                this.emitComments(ast, false);\n            }\n        }\n\n        // tokenId is the id the preceding token\n        public emitJavascript(ast: AST, tokenId: TokenID, startLine: bool) {\n            if (ast === null) {\n                return;\n            }\n\n            // REVIEW: simplify rules for indenting\n            if (startLine && (this.indenter.indentAmt > 0) && (ast.nodeType != NodeType.List) &&\n                (ast.nodeType != NodeType.Block)) {\n                if ((ast.nodeType != NodeType.InterfaceDeclaration) &&\n                    (!((ast.nodeType === NodeType.VarDecl) &&\n                       ((((<VarDecl>ast).getVarFlags()) & VariableFlags.Ambient) === VariableFlags.Ambient) &&\n                       (((<VarDecl>ast).init) === null)) && this.varListCount() >= 0) &&\n                    (ast.nodeType != NodeType.EndCode) &&\n                    ((ast.nodeType != NodeType.FuncDecl) ||\n                     (this.emitState.container != EmitContainer.Constructor))) {\n                    this.emitIndent();\n                }\n            }\n\n            ast.emit(this, tokenId, startLine);\n        }\n\n        public emitPropertyAccessor(funcDecl: FuncDecl, className: string, isProto: bool) {\n            if (!hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor)) {\n                var accessorSymbol = PullHelpers.getAccessorSymbol(funcDecl, this.semanticInfoChain, this.locationInfo.fileName);\n                if (accessorSymbol.getGetter()) {\n                    return;\n                }\n            }\n\n            this.emitIndent();\n            this.recordSourceMappingStart(funcDecl);\n            this.writeLineToOutput(\"Object.defineProperty(\" + className + (isProto ? \".prototype, \\\"\" : \", \\\"\") + funcDecl.name.actualText + \"\\\"\" + \", {\");\n            this.indenter.increaseIndent();\n\n            var accessors = PullHelpers.getGetterAndSetterFunction(funcDecl, this.semanticInfoChain, this.locationInfo.fileName);\n            if (accessors.getter) {\n                this.emitIndent();\n                this.recordSourceMappingStart(accessors.getter);\n                this.writeToOutput(\"get: \");\n                this.emitInnerFunction(accessors.getter, false, isProto, this.shouldCaptureThis(accessors.getter), null);\n                this.writeLineToOutput(\",\");\n            }\n\n            if (accessors.setter) {\n                this.emitIndent();\n                this.recordSourceMappingStart(accessors.setter);\n                this.writeToOutput(\"set: \");\n                this.emitInnerFunction(accessors.setter, false, isProto, this.shouldCaptureThis(accessors.setter), null);\n                this.writeLineToOutput(\",\");\n            }\n\n            this.emitIndent();\n            this.writeLineToOutput(\"enumerable: true,\");\n            this.emitIndent();\n            this.writeLineToOutput(\"configurable: true\");\n            this.indenter.decreaseIndent();\n            this.emitIndent();\n            this.writeLineToOutput(\"});\");\n            this.recordSourceMappingEnd(funcDecl);\n        }\n\n        public emitPrototypeMember(member: AST, className: string) {\n            if (member.nodeType === NodeType.FuncDecl) {\n                var funcDecl = <FuncDecl>member;\n                if (funcDecl.isAccessor()) {\n                    this.emitPropertyAccessor(funcDecl, className, true);\n                }\n                else {\n                    this.emitIndent();\n                    this.recordSourceMappingStart(funcDecl);\n                    this.writeToOutput(className + \".prototype.\" + funcDecl.getNameText() + \" = \");\n                    this.emitInnerFunction(funcDecl, false, true, this.shouldCaptureThis(funcDecl), null);\n                    this.writeLineToOutput(\";\");\n                }\n            }\n            else if (member.nodeType === NodeType.VarDecl) {\n                var varDecl = <VarDecl>member;\n\n                if (varDecl.init) {\n                    this.emitIndent();\n                    this.recordSourceMappingStart(varDecl);\n                    this.recordSourceMappingStart(varDecl.id);\n                    this.writeToOutput(className + \".prototype.\" + varDecl.id.actualText);\n                    this.recordSourceMappingEnd(varDecl.id);\n                    this.writeToOutput(\" = \");\n                    this.emitJavascript(varDecl.init, TokenID.Equals, false);\n                    this.recordSourceMappingEnd(varDecl);\n                    this.writeLineToOutput(\";\");\n                }\n            }\n        }\n\n        public emitJavascriptClass(classDecl: ClassDeclaration) {\n            if (!hasFlag(classDecl.getVarFlags(), VariableFlags.Ambient)) {\n                var pullDecl = this.semanticInfoChain.getDeclForAST(classDecl, this.locationInfo.fileName);\n                this.pushDecl(pullDecl);\n\n                var svClassNode = this.thisClassNode;\n                var i = 0;\n                this.thisClassNode = classDecl;\n                var className = classDecl.name.actualText;\n                this.emitComments(classDecl, true);\n                var temp = this.setContainer(EmitContainer.Class);\n\n                this.recordSourceMappingStart(classDecl);\n                this.writeToOutput(\"var \" + className);\n\n                //if (hasFlag(classDecl.getVarFlags(), VarFlags.Exported) && (temp === EmitContainer.Module || temp === EmitContainer.DynamicModule)) {\n                //    var modName = temp === EmitContainer.Module ? this.moduleName : \"exports\";\n                //    this.writeToOutput(\" = \" + modName + \".\" + className);\n                //}\n\n                var hasBaseClass = classDecl.extendsList && classDecl.extendsList.members.length;\n                var baseNameDecl: AST = null;\n                var baseName: AST = null;\n                var varDecl: VarDecl = null;\n\n                if (hasBaseClass) {\n                    this.writeLineToOutput(\" = (function (_super) {\");\n                } else {\n                    this.writeLineToOutput(\" = (function () {\");\n                }\n\n                this.recordSourceMappingNameStart(className);\n                this.indenter.increaseIndent();\n\n                if (hasBaseClass) {\n                    baseNameDecl = classDecl.extendsList.members[0];\n                    baseName = baseNameDecl.nodeType === NodeType.Call ? (<CallExpression>baseNameDecl).target : baseNameDecl;\n                    this.emitIndent();\n                    this.writeLineToOutput(\"__extends(\" + className + \", _super);\");\n                }\n\n                this.emitIndent();\n\n                var constrDecl = classDecl.constructorDecl;\n\n                // output constructor\n                if (constrDecl) {\n                    // declared constructor\n                    this.emitJavascript(classDecl.constructorDecl, TokenID.OpenParen, false);\n\n                }\n                else {\n                    var wroteProps = 0;\n\n                    this.recordSourceMappingStart(classDecl);\n                    // default constructor\n                    this.indenter.increaseIndent();\n                    this.writeToOutput(\"function \" + classDecl.name.actualText + \"() {\");\n                    this.recordSourceMappingNameStart(\"constructor\");\n                    if (hasBaseClass) {\n                        this.writeLineToOutput(\"\");\n                        this.emitIndent();\n                        this.writeLineToOutput(\"_super.apply(this, arguments);\");\n                        wroteProps++;\n                    }\n\n                    /*\n                    if (classDecl.getVarFlags() & VariableFlags.MustCaptureThis) {\n                        this.writeCaptureThisStatement(classDecl);\n                    }\n                    */\n\n                    var members = (<ASTList>this.thisClassNode.members).members\n\n                    // output initialized properties\n                    for (i = 0; i < members.length; i++) {\n                        if (members[i].nodeType === NodeType.VarDecl) {\n                            varDecl = <VarDecl>members[i];\n                            if (!hasFlag(varDecl.getVarFlags(), VariableFlags.Static) && varDecl.init) {\n                                this.writeLineToOutput(\"\");\n                                this.emitIndent();\n                                this.emitJavascriptVarDecl(varDecl, TokenID.Tilde);\n                                wroteProps++;\n                            }\n                        }\n                    }\n                    if (wroteProps) {\n                        this.writeLineToOutput(\"\");\n                        this.indenter.decreaseIndent();\n                        this.emitIndent();\n                        this.writeLineToOutput(\"}\");\n                    }\n                    else {\n                        this.writeLineToOutput(\" }\");\n                        this.indenter.decreaseIndent();\n                    }\n                    this.recordSourceMappingNameEnd();\n                    this.recordSourceMappingEnd(classDecl);\n                }\n\n                var membersLen = classDecl.members.members.length;\n                for (var j = 0; j < membersLen; j++) {\n\n                    var memberDecl: AST = classDecl.members.members[j];\n\n                    if (memberDecl.nodeType === NodeType.FuncDecl) {\n                        var fn = <FuncDecl>memberDecl;\n\n                        if (hasFlag(fn.getFunctionFlags(), FunctionFlags.Method) && !fn.isSignature()) {\n                            if (!hasFlag(fn.getFunctionFlags(), FunctionFlags.Static)) {\n                                this.emitPrototypeMember(fn, className);\n                            }\n                            else { // static functions\n                                if (fn.isAccessor()) {\n                                    this.emitPropertyAccessor(fn, this.thisClassNode.name.actualText, false);\n                                }\n                                else {\n                                    this.emitIndent();\n                                    this.recordSourceMappingStart(fn)\n                                    this.writeToOutput(classDecl.name.actualText + \".\" + fn.name.actualText + \" = \");\n                                    this.emitInnerFunction(fn, (fn.name && !fn.name.isMissing()), true,\n                                            this.shouldCaptureThis(fn), null);\n                                    this.writeLineToOutput(\";\");\n                                }\n                            }\n                        }\n                    }\n                    else if (memberDecl.nodeType === NodeType.VarDecl) {\n                        varDecl = <VarDecl>memberDecl;\n                        if (hasFlag(varDecl.getVarFlags(), VariableFlags.Static)) {\n\n                            if (varDecl.init) {\n                                // EMITREVIEW\n                                this.emitIndent();\n                                this.recordSourceMappingStart(varDecl);\n                                this.writeToOutput(classDecl.name.actualText + \".\" + varDecl.id.actualText + \" = \");\n                                this.emitJavascript(varDecl.init, TokenID.Equals, false);\n                                // EMITREVIEW\n\n                                this.writeLineToOutput(\";\");\n                                this.recordSourceMappingEnd(varDecl);\n                            }\n                        }\n                    }\n                    else {\n                        throw Error(\"We want to catch this\");\n                    }\n                }\n\n                this.emitIndent();\n                this.recordSourceMappingStart(classDecl.endingToken);\n                this.writeLineToOutput(\"return \" + className + \";\");\n                this.recordSourceMappingEnd(classDecl.endingToken);\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.recordSourceMappingStart(classDecl.endingToken);\n                this.writeToOutput(\"}\");\n                this.recordSourceMappingNameEnd();\n                this.recordSourceMappingEnd(classDecl.endingToken);\n                this.recordSourceMappingStart(classDecl);\n                this.writeToOutput(\")(\");\n                if (hasBaseClass)\n                    this.emitJavascript(baseName, TokenID.Tilde, false);\n                this.writeToOutput(\");\");\n                this.recordSourceMappingEnd(classDecl);\n\n                if ((temp === EmitContainer.Module || temp === EmitContainer.DynamicModule) && hasFlag(classDecl.getVarFlags(), VariableFlags.Exported)) {\n                    this.writeLineToOutput(\"\");\n                    this.emitIndent();\n                    var modName = temp === EmitContainer.Module ? this.moduleName : \"exports\";\n                    this.recordSourceMappingStart(classDecl);\n                    this.writeToOutput(modName + \".\" + className + \" = \" + className + \";\");\n                    this.recordSourceMappingEnd(classDecl);\n                }\n\n                this.emitIndent();\n                this.recordSourceMappingEnd(classDecl);\n                this.emitComments(classDecl, false);\n                this.setContainer(temp);\n                this.thisClassNode = svClassNode;\n\n                this.popDecl(pullDecl);\n            }\n        }\n\n        public emitPrologue(reqInherits: bool) {\n            if (!this.extendsPrologueEmitted) {\n                if (reqInherits) {\n                    this.extendsPrologueEmitted = true;\n                    this.writeLineToOutput(\"var __extends = this.__extends || function (d, b) {\");\n                    this.writeLineToOutput(\"    function __() { this.constructor = d; }\");\n                    this.writeLineToOutput(\"    __.prototype = b.prototype;\");\n                    this.writeLineToOutput(\"    d.prototype = new __();\");\n                    this.writeLineToOutput(\"};\");\n                }\n            }\n\n            if (!this.globalThisCapturePrologueEmitted) {\n                if (this.shouldCaptureThis(null)) {\n                    this.globalThisCapturePrologueEmitted = true;\n                    this.writeLineToOutput(this.captureThisStmtString);\n                }\n            }\n        }\n\n        public emitSuperReference() {\n            this.writeToOutput(\"_super.prototype\");\n        }\n\n        public emitSuperCall(callEx: CallExpression): bool {\n            if (callEx.target.nodeType === NodeType.Dot) {\n                var dotNode = <BinaryExpression>callEx.target;\n                if (dotNode.operand1.nodeType === NodeType.SuperExpression) {\n                    this.emitJavascript(dotNode, TokenID.OpenParen, false);\n                    this.writeToOutput(\".call(\");\n                    this.emitThis();\n                    if (callEx.arguments && callEx.arguments.members.length > 0) {\n                        this.writeToOutput(\", \");\n                        this.emitJavascriptList(callEx.arguments, \", \", TokenID.Comma, false, false, false);\n                    }\n                    this.writeToOutput(\")\");\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public emitThis() {\n            if (this.thisFnc && !this.thisFnc.isMethod() && (!this.thisFnc.isConstructor)) {\n                this.writeToOutput(\"_this\");\n            }\n            else {\n                this.writeToOutput(\"this\");\n            }\n        }\n\n        public static throwEmitterError(e: Error): void {\n            var error: any = new Error(e.message);\n            error.isEmitterError = true;\n            throw error;\n        }\n\n        public static handleEmitterError(fileName: string, e: Error): IDiagnostic[] {\n            if ((<any>e).isEmitterError === true) {\n                return [new Diagnostic(0, 0, fileName, e.message)];\n            }\n\n            throw e;\n        }\n\n        // Note: throws exception.  \n        private createFile(fileName: string, useUTF8: bool): ITextWriter {\n            try {\n                return this.emitOptions.ioHost.createFile(fileName, useUTF8);\n            }\n            catch (e) {\n                Emitter.throwEmitterError(e);\n            }\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ErrorReporter {\n        public errorCallback: (minChar: number, charLen: number, message: string, fileName: string, lineMap: LineMap) => void = null;\n        public locationInfo: LocationInfo = unknownLocationInfo;\n        public lineCol = { line: 0, character: 0 };\n        public hasErrors = false;\n        public pushToErrorSink = false;\n        public errorSink: string[] = [];\n\n        constructor (public outfile: ITextWriter) { }\n\n        public getCapturedErrors() { return this.errorSink; }\n        public freeCapturedErrors() { this.errorSink = []; }\n        public captureError(emsg: string) { this.errorSink[this.errorSink.length] = emsg; }\n\n        public emitPrefix() {\n            this.outfile.Write(this.locationInfo.fileName + \"(\" + this.lineCol.line + \",\" + this.lineCol.character + \"): \");\n        }\n\n        public writePrefix(ast: AST): void {\n            if (ast) {\n                this.setError(ast);\n            }\n            else {\n                this.lineCol.line = 0;\n                this.lineCol.character = 0;\n            }\n            this.emitPrefix();\n        }\n\n        public writePrefixFromSym(symbol: Symbol): void {\n            if (symbol && this.locationInfo.lineMap) {\n                this.locationInfo.lineMap.fillLineAndCharacterFromPosition(symbol.location, this.lineCol);\n                if (this.lineCol.line >= 0) {\n                    this.lineCol.line++;\n                }\n            }\n            else {\n                this.lineCol.line = -1;\n                this.lineCol.character = -1;\n            }\n            this.emitPrefix();\n        }\n\n        public setError(ast: AST) {\n            if (ast) {\n                // ast.flags |= ASTFlags.Error;\n                if (this.locationInfo.lineMap) {\n                    this.locationInfo.lineMap.fillLineAndCharacterFromPosition(ast.minChar, this.lineCol);\n                    if (this.lineCol.line >= 0) {\n                        this.lineCol.line++;\n                    }\n                }\n            }\n        }\n\n        public reportError(ast: AST, message: string) {\n            if (this.pushToErrorSink) {\n                this.captureError(message);\n                return;\n            }\n\n            this.hasErrors = true;\n            if (ast && this.errorCallback) {\n                var len = (ast.limChar - ast.minChar);\n                this.errorCallback(ast.minChar, len, message, this.locationInfo.fileName, this.locationInfo.lineMap);\n            }\n            else {\n                this.writePrefix(ast);\n                this.outfile.WriteLine(message); // Right after the semi-colon\n            }\n        }\n\n        public reportErrorFromSym(symbol: Symbol, message: string) {\n            if (this.pushToErrorSink) {\n                this.captureError(message);\n                return;\n            }\n\n            this.hasErrors = true;\n            if (this.errorCallback) {\n                this.errorCallback(symbol.location, symbol.length, message, this.locationInfo.fileName, this.locationInfo.lineMap);\n            }\n            else {\n                this.writePrefixFromSym(symbol);\n                this.outfile.WriteLine(message);\n            }\n        }\n\n        public duplicateIdentifier(ast: AST, name: string) {\n            this.reportError(ast, \"Duplicate identifier \'\" + name + \"\'\");\n        }\n\n        public unresolvedSymbol(ast: AST, name: string) {\n            this.reportError(ast, \"The name \'\" + name + \"\' does not exist in the current scope\");\n        }\n\n        public symbolDoesNotReferToAValue(ast: AST, name: string): void {\n            this.reportError(ast, \"The name \'\" + name + \"\' does not refer to a value\");\n        }\n\n        public styleError(ast: AST, msg: string): void {\n            var bkThrow = this.pushToErrorSink;\n            this.pushToErrorSink = false;\n            this.reportError(ast, \"STYLE: \" + msg);\n            this.pushToErrorSink = bkThrow;\n        }\n\n        public simpleError(ast: AST, msg: string): void {\n            this.reportError(ast, msg);\n        }\n\n        public simpleErrorFromSym(sym: Symbol, msg: string): void {\n            this.reportErrorFromSym(sym, msg);\n        }\n\n        public Keyword__super__can_only_be_used_inside_a_class_instance_method(ast: AST) {\n            this.simpleError(ast, \"Keyword \'super\' can only be used inside a class instance method\");\n        }\n\n        public The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer(ast: AST) {\n            this.simpleError(ast, \"The left-hand side of an assignment expression must be a variable, property or indexer\");\n        }\n\n        public invalidCall(ast: CallExpression, nodeType: number, scope: SymbolScope): void {\n            var targetType = ast.target.type;\n            var typeName = targetType.getScopedTypeName(scope);\n            if (targetType.construct && (nodeType == NodeType.Call)) {\n                this.reportError(ast, \"Value of type \'\" + typeName + \"\' is not callable.  Did you mean to include \'new\'?\");\n            } else {\n                var catString = (nodeType == NodeType.Call) ? \"callable\" : \"newable\";\n\n                this.reportError(ast, \"Value of type \'\" + typeName + \"\' is not \" + catString);\n            }\n        }\n\n        public indexLHS(ast: BinaryExpression, scope: SymbolScope): void {\n            var targetType = ast.operand1.type.getScopedTypeName(scope);\n            var indexType = ast.operand2.type.getScopedTypeName(scope);\n            this.simpleError(ast, \"Value of type \'\" + targetType + \"\' is not indexable by type \'\" + indexType + \"\'\");\n        }\n\n        public incompatibleTypes(ast: AST, t1: Type, t2: Type, op: string, scope: SymbolScope, comparisonInfo?:TypeComparisonInfo) {\n            if (!t1) {\n                // t1 = this.checker.anyType;\n            }\n            if (!t2) {\n                // t2 = this.checker.anyType;\n            }\n\n            var reason = comparisonInfo ? comparisonInfo.message : \"\";\n            if (op) {\n                this.reportError(ast, \"Operator \'\" + op + \"\' cannot be applied to types \'\" + t1.getScopedTypeName(scope) +\n                                  \"\' and \'\" + t2.getScopedTypeName(scope) + \"\'\" + (reason ? \": \" + reason : \"\"));\n            }\n            else {\n                this.reportError(ast, \"Cannot convert \'\" + t1.getScopedTypeName(scope) +\n                                  \"\' to \'\" + t2.getScopedTypeName(scope) + \"\'\" + (reason ? \": \" + reason : \"\"));\n            }\n        }\n\n        public Expected_var__class__interface__or_module(ast: AST): void {\n            this.simpleError(ast, \"Expected var, class, interface, or module\");\n        }\n\n        public unaryOperatorTypeError(ast: AST, op: string, type: Type) {\n            this.reportError(ast, \"Operator \'\" + op + \"\' cannot be applied to type \'\" + type.getTypeName() + \"\'\");\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    // TODO: refactor indent logic for use in emit\n    export class PrintContext {\n        public builder = \"\";\n        public indent1 = \"  \";\n        public indentStrings: string[] = [];\n        public indentAmt = 0;\n\n        constructor (public outfile: ITextWriter) {\n        }\n\n        public increaseIndent() {\n            this.indentAmt++;\n        }\n\n        public decreaseIndent() {\n            this.indentAmt--;\n        }\n\n        public startLine() {\n            if (this.builder.length > 0) {\n                CompilerDiagnostics.Alert(this.builder);\n            }\n            var indentString = this.indentStrings[this.indentAmt];\n            if (indentString === undefined) {\n                indentString = \"\";\n                for (var i = 0; i < this.indentAmt; i++) {\n                    indentString += this.indent1;\n                }\n                this.indentStrings[this.indentAmt] = indentString;\n            }\n            this.builder += indentString;\n        }\n\n        public write(s) {\n            this.builder += s;\n        }\n\n        public writeLine(s) {\n            this.builder += s;\n            this.outfile.WriteLine(this.builder);\n            this.builder = \"\";\n        }\n\n    }\n\n    export function prePrintAST(ast: AST, parent: AST, walker: IAstWalker) {\n        var pc: PrintContext = <PrintContext>walker.state;\n\n        ast.print(pc);\n        pc.increaseIndent();\n        return ast;\n    }\n\n\n    export function postPrintAST(ast: AST, parent: AST, walker: IAstWalker) {\n        var pc: PrintContext = <PrintContext>walker.state;\n        pc.decreaseIndent();\n        return ast;\n    }\n}\n﻿/* -----------------------------------------------------------------------------\nThis file is based on or incorporates material from the projects listed below \n(collectively, \"Third Party Code\"). Microsoft is not the original author of the \nThird Party Code. The original copyright notice and the license, under which \nMicrosoft received such Third Party Code, are set forth below. Such licenses \nand notices are provided for informational purposes only. Microsoft, not the \nthird party, licenses the Third Party Code to you under the terms of the \nApache License, Version 2.0. See License.txt in the project root for complete \nlicense information. Microsoft reserves all rights not expressly granted under \nthe Apache 2.0 License, whether by implication, estoppel or otherwise. \n----------------------------------------------------------------------------- */\n\n/*\n    json2.js\n    2011-10-19\n\n    Public Domain.\n\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\n    See http://www.JSON.org/js.html\n\n\n    This code should be minified before deployment.\n    See http://javascript.crockford.com/jsmin.html\n\n    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n    NOT CONTROL.\n\n\n    This file creates a global JSON object containing two methods: stringify\n    and parse.\n\n        JSON.stringify(value, replacer, space)\n            value       any JavaScript value, usually an object or array.\n\n            replacer    an optional parameter that determines how object\n                        values are stringified for objects. It can be a\n                        function or an array of strings.\n\n            space       an optional parameter that specifies the indentation\n                        of nested structures. If it is omitted, the text will\n                        be packed without extra whitespace. If it is a number,\n                        it will specify the number of spaces to indent at each\n                        level. If it is a string (such as \'\\t\' or \'&nbsp;\'),\n                        it contains the characters used to indent at each level.\n\n            This method produces a JSON text from a JavaScript value.\n\n            When an object value is found, if the object contains a toJSON\n            method, its toJSON method will be called and the result will be\n            stringified. A toJSON method does not serialize: it returns the\n            value represented by the name/value pair that should be serialized,\n            or undefined if nothing should be serialized. The toJSON method\n            will be passed the key associated with the value, and this will be\n            bound to the value\n\n            For example, this would serialize Dates as ISO strings.\n\n                Date.prototype.toJSON = function (key) {\n                    function f(n) {\n                        // Format integers to have at least two digits.\n                        return n < 10 ? \'0\' + n : n;\n                    }\n\n                    return this.getUTCFullYear()   + \'-\' +\n                         f(this.getUTCMonth() + 1) + \'-\' +\n                         f(this.getUTCDate())      + \'T\' +\n                         f(this.getUTCHours())     + \':\' +\n                         f(this.getUTCMinutes())   + \':\' +\n                         f(this.getUTCSeconds())   + \'Z\';\n                };\n\n            You can provide an optional replacer method. It will be passed the\n            key and value of each member, with this bound to the containing\n            object. The value that is returned from your method will be\n            serialized. If your method returns undefined, then the member will\n            be excluded from the serialization.\n\n            If the replacer parameter is an array of strings, then it will be\n            used to select the members to be serialized. It filters the results\n            such that only members with keys listed in the replacer array are\n            stringified.\n\n            Values that do not have JSON representations, such as undefined or\n            functions, will not be serialized. Such values in objects will be\n            dropped; in arrays they will be replaced with null. You can use\n            a replacer function to replace those with JSON values.\n            JSON.stringify(undefined) returns undefined.\n\n            The optional space parameter produces a stringification of the\n            value that is filled with line breaks and indentation to make it\n            easier to read.\n\n            If the space parameter is a non-empty string, then that string will\n            be used for indentation. If the space parameter is a number, then\n            the indentation will be that many spaces.\n\n            Example:\n\n            text = JSON.stringify([\'e\', {pluribus: \'unum\'}]);\n            // text is \'[\"e\",{\"pluribus\":\"unum\"}]\'\n\n\n            text = JSON.stringify([\'e\', {pluribus: \'unum\'}], null, \'\\t\');\n            // text is \'[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]\'\n\n            text = JSON.stringify([new Date()], function (key, value) {\n                return this[key] instanceof Date ?\n                    \'Date(\' + this[key] + \')\' : value;\n            });\n            // text is \'[\"Date(---current time---)\"]\'\n\n\n        JSON.parse(text, reviver)\n            This method parses a JSON text to produce an object or array.\n            It can throw a SyntaxError exception.\n\n            The optional reviver parameter is a function that can filter and\n            transform the results. It receives each of the keys and values,\n            and its return value is used instead of the original value.\n            If it returns what it received, then the structure is not modified.\n            If it returns undefined then the member is deleted.\n\n            Example:\n\n            // Parse the text. Values that look like ISO date strings will\n            // be converted to Date objects.\n\n            myData = JSON.parse(text, function (key, value) {\n                var a;\n                if (typeof value === \'string\') {\n                    a =\n/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n                    if (a) {\n                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n                            +a[5], +a[6]));\n                    }\n                }\n                return value;\n            });\n\n            myData = JSON.parse(\'[\"Date(09/09/2001)\"]\', function (key, value) {\n                var d;\n                if (typeof value === \'string\' &&\n                        value.slice(0, 5) === \'Date(\' &&\n                        value.slice(-1) === \')\') {\n                    d = new Date(value.slice(5, -1));\n                    if (d) {\n                        return d;\n                    }\n                }\n                return value;\n            });\n\n\n    This is a reference implementation. You are free to copy, modify, or\n    redistribute.\n*/\n\n/*jslint evil: true, regexp: true */\n\n/*members \"\", \"\\b\", \"\\t\", \"\\n\", \"\\f\", \"\\r\", \"\\\"\", JSON, \"\\\\\", apply,\n    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\n///<reference path=\'json2Stringify.ts\'/>\nvar JSON = (typeof JSON === \"undefined\") ? JSON2 : JSON;\n(function() {\n    \'use strict\';\n\n    var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\n    // If the JSON object does not yet have a parse method, give it one.\n\n    if (typeof JSON2.parse !== \'function\') {\n        JSON2.parse = function (text, reviver) {\n\n            // The parse method takes a text and an optional reviver function, and returns\n            // a JavaScript value if the text is a valid JSON text.\n\n            var j;\n\n            function walk(holder, key): {} {\n\n                // The walk method is used to recursively walk the resulting structure so\n                // that modifications can be made.\n\n                var k = null, v, value = holder[key];\n                if (value && typeof value === \'object\') {\n                    for (k in value) {\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {\n                            v = walk(value, k);\n                            if (v !== undefined) {\n                                value[k] = v;\n                            } else {\n                                delete value[k];\n                            }\n                        }\n                    }\n                }\n                return reviver.call(holder, key, value);\n            }\n\n\n            // Parsing happens in four stages. In the first stage, we replace certain\n            // Unicode characters with escape sequences. JavaScript handles many characters\n            // incorrectly, either silently deleting them, or treating them as line endings.\n\n            text = String(text);\n            cx.lastIndex = <any>0;\n            if (cx.test(text)) {\n                text = text.replace(cx, function (a) {\n                    return \'\\\\u\' +\n                        (\'0000\' + a.charCodeAt(0).toString(16)).slice(-4);\n                });\n            }\n\n            // In the second stage, we run the text against regular expressions that look\n            // for non-JSON patterns. We are especially concerned with \'()\' and \'new\'\n            // because they can cause invocation, and \'=\' because it can cause mutation.\n            // But just to be safe, we want to reject all unexpected forms.\n\n            // We split the second stage into 4 regexp operations in order to work around\n            // crippling inefficiencies in IE\'s and Safari\'s regexp engines. First we\n            // replace the JSON backslash pairs with \'@\' (a non-JSON character). Second, we\n            // replace all simple value tokens with \']\' characters. Third, we delete all\n            // open brackets that follow a colon or comma or that begin the text. Finally,\n            // we look to see that the remaining characters are only whitespace or \']\' or\n            // \',\' or \':\' or \'{\' or \'}\'. If that is so, then the text is safe for eval.\n\n            if (/^[\\],:{}\\s]*$/\n                    .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, \'@\')\n                        .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, \']\')\n                        .replace(/(?:^|:|,)(?:\\s*\\[)+/g, \'\'))) {\n\n                // In the third stage we use the eval function to compile the text into a\n                // JavaScript structure. The \'{\' operator is subject to a syntactic ambiguity\n                // in JavaScript: it can begin a block or an object literal. We wrap the text\n                // in parens to eliminate the ambiguity.\n\n                j = eval(\'(\' + text + \')\');\n\n                // In the optional fourth stage, we recursively walk the new structure, passing\n                // each name/value pair to a reviver function for possible transformation.\n\n                return typeof reviver === \'function\'\n                    ? walk({ \'\': j }, \'\')\n                    : j;\n            }\n\n            // If the text is not JSON parseable, then a SyntaxError is thrown.\n\n            throw new SyntaxError(\'JSON.parse\');\n        };\n    }\n} ());\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n///<reference path=\'typescript.ts\' />\n///<reference path=\'..\\harness\\external\\json2.ts\' />\n\nmodule TypeScript {\n\n    export var LexEOF = (-1);\n\n    export var LexCodeNWL = 0x0A;\n    export var LexCodeRET = 0x0D;\n    export var LexCodeLS = 0x2028;\n    export var LexCodePS = 0x2029;\n    export var LexCodeTAB = 0x09;\n    export var LexCodeVTAB = 0x0B;\n    export var LexCode_e = \'e\'.charCodeAt(0);\n    export var LexCode_E = \'E\'.charCodeAt(0);\n    export var LexCode_x = \'x\'.charCodeAt(0);\n    export var LexCode_X = \'X\'.charCodeAt(0);\n    export var LexCode_a = \'a\'.charCodeAt(0);\n    export var LexCode_A = \'A\'.charCodeAt(0);\n    export var LexCode_f = \'f\'.charCodeAt(0);\n    export var LexCode_F = \'F\'.charCodeAt(0);\n\n    export var LexCode_g = \'g\'.charCodeAt(0);\n    export var LexCode_m = \'m\'.charCodeAt(0);\n    export var LexCode_i = \'i\'.charCodeAt(0);\n\n    export var LexCode_u = \'u\'.charCodeAt(0);\n\n    export var LexCode_0 = \'0\'.charCodeAt(0);\n    export var LexCode_9 = \'9\'.charCodeAt(0);\n    export var LexCode_8 = \'8\'.charCodeAt(0);\n    export var LexCode_7 = \'7\'.charCodeAt(0);\n\n    export var LexCodeBSL = \'\\\\\'.charCodeAt(0);\n    export var LexCodeSHP = \'#\'.charCodeAt(0);\n    export var LexCodeBNG = \'!\'.charCodeAt(0);\n    export var LexCodeQUO = \'\"\'.charCodeAt(0);\n    export var LexCodeAPO = \'\\\'\'.charCodeAt(0);\n    export var LexCodePCT = \'%\'.charCodeAt(0);\n    export var LexCodeAMP = \'&\'.charCodeAt(0);\n    export var LexCodeLPR = \'(\'.charCodeAt(0);\n    export var LexCodeRPR = \')\'.charCodeAt(0);\n    export var LexCodePLS = \'+\'.charCodeAt(0);\n    export var LexCodeMIN = \'-\'.charCodeAt(0);\n    export var LexCodeMUL = \'*\'.charCodeAt(0);\n    export var LexCodeSLH = \'/\'.charCodeAt(0);\n    export var LexCodeXOR = \'^\'.charCodeAt(0);\n    export var LexCodeCMA = \',\'.charCodeAt(0);\n    export var LexCodeDOT = \'.\'.charCodeAt(0);\n    export var LexCodeLT = \'<\'.charCodeAt(0);\n    export var LexCodeEQ = \'=\'.charCodeAt(0);\n    export var LexCodeGT = \'>\'.charCodeAt(0);\n    export var LexCodeQUE = \'?\'.charCodeAt(0);\n    export var LexCodeLBR = \'[\'.charCodeAt(0);\n    export var LexCodeRBR = \']\'.charCodeAt(0);\n    export var LexCodeUSC = \'_\'.charCodeAt(0);\n    export var LexCodeLC = \'{\'.charCodeAt(0);\n    export var LexCodeRC = \'}\'.charCodeAt(0);\n    export var LexCodeBAR = \'|\'.charCodeAt(0);\n    export var LexCodeTIL = \'~\'.charCodeAt(0);\n    export var LexCodeCOL = \':\'.charCodeAt(0);\n    export var LexCodeSMC = \';\'.charCodeAt(0);\n    export var LexCodeUnderscore = \'_\'.charCodeAt(0);\n    export var LexCodeDollar = \'$\'.charCodeAt(0);\n    export var LexCodeSpace = 32;\n    export var LexCodeAtSign = \'@\'.charCodeAt(0);\n    export var LexCodeASCIIChars = 128;\n\n    export var LexKeywordTable = undefined;\n    // PULLTODO: When generics are on by default, remove the assertion to \'any[]\'\n    var autoToken: Token[] = <any[]>(new Array(LexCodeASCIIChars));\n    var lexIdStartTable: bool[] = <any[]>(new Array(LexCodeASCIIChars));\n\n    // Unicode range maps\n    // REVIEW: These range maps have been extracted from the Unicode specifications, they might be missing values, and/or include \n    //         incorrect ranges. but for the most they seem to be correct. A more accurate and thorough review is needed.\n\n    /*\n        As per ECMAScript Language Specification 3th Edition, Section 7.6: Identifiers\n        IdentifierStart :: Can contain Unicode 3.0.0  categories “Uppercase letter (Lu)”, “Lowercase letter (Ll)”, “Titlecase letter (Lt)”, “Modifier letter (Lm)”, “Other letter (Lo)”, or “Letter number (Nl)”.\n        IdentifierPart :: Can contain IdentifierStart + Unicode 3.0.0  categories “Non-spacing mark (Mn)”, “Combining spacing mark (Mc)”, “Decimal number (Nd)”, or “Connector punctuation (Pc)”.\n                    \n        Codepoint ranges for ES3 Identifiers are extracted from the Unicode 3.0.0 specification at:\n        http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\n    */\n    var unicodeES3IdStart = [\n        170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n        1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611,\n        2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970,\n        2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517,\n        3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138,\n        4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885,\n        4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147,\n        8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588,\n        12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65138, 65140, 65140,\n        65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n    ];\n\n    var unicodeES3IdCont = [\n        768, 846, 864, 866, 1155, 1158, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1611, 1621, 1632, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 2305, 2307, 2364, 2364, 2366, 2381, 2385, 2388, 2402, 2403, 2406, 2415, 2433, 2435, 2492, 2492,\n        2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 2562, 2562, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2662, 2673, 2689, 2691, 2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2790, 2799, 2817, 2819, 2876, 2876, 2878, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2918, 2927, 2946, 2947, 3006, 3010, 3014, 3016,\n        3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3174, 3183, 3202, 3203, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3302, 3311, 3330, 3331, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3633, 3633,\n        3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903, 3953, 3972, 3974, 3975, 3984, 3991, 3993, 4028, 4038, 4038, 4140, 4146, 4150, 4153, 4160, 4169, 4182, 4185, 4969, 4977, 6068, 6099, 6112, 6121, 6160, 6169, 6313, 6313,\n        8255, 8256, 8400, 8412, 8417, 8417, 12330, 12335, 12441, 12442, 12539, 12539, 64286, 64286, 65056, 65059, 65075, 65076, 65101, 65103, 65296, 65305, 65343, 65343, 65381, 65381,\n    ];\n\n\n    /*\n        As per ECMAScript Language Specification 5th Edition, Section 7.6: Identifier Names and Identifiers\n        IdentifierStart :: Can contain Unicode 6.2  categories “Uppercase letter (Lu)”, “Lowercase letter (Ll)”, “Titlecase letter (Lt)”, “Modifier letter (Lm)”, “Other letter (Lo)”, or “Letter number (Nl)”.\n        IdentifierPart :: Can contain IdentifierStart + Unicode 6.2  categories “Non-spacing mark (Mn)”, “Combining spacing mark (Mc)”, “Decimal number (Nd)”, “Connector punctuation (Pc)”, <ZWNJ>, or <ZWJ>.\n                    \n        Codepoint ranges for ES5 Identifiers are extracted from the Unicode 6.2 specification at:\n        http://www.unicode.org/Public/6.2.0/ucd/UnicodeData.txt\n    */\n    var unicodeES5IdStart = [\n         170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775,\n         1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489,\n         2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864,\n         2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n         3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743,\n         3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680,\n         4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000,\n         6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957,\n         7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486,\n         8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726,\n         11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606,\n         42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595,\n         43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262,\n         64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n    ];\n\n    var unicodeES5IdCont = [\n        768, 879, 1155, 1159, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1552, 1562, 1611, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 1984, 1993, 2027, 2035, 2070, 2073, 2075, 2083, 2085, 2087, 2089, 2093, 2137, 2139, 2276, 2302, 2304, 2307, 2362, 2364,\n        2366, 2383, 2385, 2391, 2402, 2403, 2406, 2415, 2433, 2435, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 2561, 2563, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2662, 2673, 2677, 2677, 2689, 2691, 2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2786, 2787, 2790, 2799, 2817, 2819,\n        2876, 2876, 2878, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2914, 2915, 2918, 2927, 2946, 2946, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3046, 3055, 3073, 3075, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3170, 3171, 3174, 3183, 3202, 3203, 3260, 3260, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3298, 3299, 3302, 3311,\n        3330, 3331, 3390, 3396, 3398, 3400, 3402, 3405, 3415, 3415, 3426, 3427, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3633, 3633, 3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903,\n        3953, 3972, 3974, 3975, 3981, 3991, 3993, 4028, 4038, 4038, 4139, 4158, 4160, 4169, 4182, 4185, 4190, 4192, 4194, 4196, 4199, 4205, 4209, 4212, 4226, 4237, 4239, 4253, 4957, 4959, 5906, 5908, 5938, 5940, 5970, 5971, 6002, 6003, 6068, 6099, 6109, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6313, 6313, 6432, 6443, 6448, 6459, 6470, 6479,\n        6576, 6592, 6600, 6601, 6608, 6617, 6679, 6683, 6741, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6912, 6916, 6964, 6980, 6992, 7001, 7019, 7027, 7040, 7042, 7073, 7085, 7088, 7097, 7142, 7155, 7204, 7223, 7232, 7241, 7248, 7257, 7376, 7378, 7380, 7400, 7405, 7405, 7410, 7412, 7616, 7654, 7676, 7679, 8204, 8205, 8255, 8256, 8276, 8276,\n        8400, 8412, 8417, 8417, 8421, 8432, 11503, 11505, 11647, 11647, 11744, 11775, 12330, 12335, 12441, 12442, 42528, 42537, 42607, 42607, 42612, 42621, 42655, 42655, 42736, 42737, 43010, 43010, 43014, 43014, 43019, 43019, 43043, 43047, 43136, 43137, 43188, 43204, 43216, 43225, 43232, 43249, 43264, 43273, 43302, 43309, 43335, 43347,\n        43392, 43395, 43443, 43456, 43472, 43481, 43561, 43574, 43587, 43587, 43596, 43597, 43600, 43609, 43643, 43643, 43696, 43696, 43698, 43700, 43703, 43704, 43710, 43711, 43713, 43713, 43755, 43759, 43765, 43766, 44003, 44010, 44012, 44013, 44016, 44025, 64286, 64286, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103,\n        65296, 65305, 65343, 65343,\n    ];\n\n    export function LexLookUpUnicodeMap(code: number, map: number[]): bool {\n        // Perform binary search in one of the unicode range maps\n        var lo: number = 0;\n        var hi: number = map.length;\n        var mid: number;\n\n        while (lo + 1 < hi) {\n            mid = lo + (hi - lo) / 2;\n            // mid has to be even to catch a range\'s beginning\n            mid -= mid % 2;\n            if (map[mid] <= code && code <= map[mid + 1])\n                return true;\n            if (code < map[mid])\n                hi = mid;\n            else\n                lo = mid + 2;\n        }\n        return false;\n    }\n\n    export function LexIsUnicodeDigit(code: number, codeGenTarget: LanguageVersion): bool {\n        if (codeGenTarget === LanguageVersion.EcmaScript3) {\n            return LexLookUpUnicodeMap(code, unicodeES3IdCont);\n        } else {\n            return LexLookUpUnicodeMap(code, unicodeES5IdCont);\n        }\n    }\n\n    export function LexIsUnicodeIdStart(code: number, codeGenTarget: LanguageVersion): bool {\n        if (codeGenTarget === LanguageVersion.EcmaScript3) {\n            return LexLookUpUnicodeMap(code, unicodeES3IdStart);\n        } else {\n            return LexLookUpUnicodeMap(code, unicodeES5IdStart);\n        }\n    }\n\n    export function LexInitialize() {\n        initializeStaticTokens();\n        autoToken[LexCodeLPR] = staticTokens[TokenID.OpenParen];\n        autoToken[LexCodeRPR] = staticTokens[TokenID.CloseParen];\n        autoToken[LexCodeCMA] = staticTokens[TokenID.Comma];\n        autoToken[LexCodeSMC] = staticTokens[TokenID.Semicolon];\n        autoToken[LexCodeLBR] = staticTokens[TokenID.OpenBracket];\n        autoToken[LexCodeRBR] = staticTokens[TokenID.CloseBracket];\n        autoToken[LexCodeTIL] = staticTokens[TokenID.Tilde];\n        autoToken[LexCodeQUE] = staticTokens[TokenID.Question];\n        autoToken[LexCodeLC] = staticTokens[TokenID.OpenBrace];\n        autoToken[LexCodeRC] = staticTokens[TokenID.CloseBrace];\n        autoToken[LexCodeCOL] = staticTokens[TokenID.Colon];\n        LexKeywordTable = new StringHashTable();\n        for (var i in (<any>TokenID)._map) {\n            if ((<number><any>i) <= TokenID.LimKeyword) {\n                LexKeywordTable.add((<any>TokenID)._map[i].toLowerCase(), i);\n            }\n        }\n        for (var j = 0; j < LexCodeASCIIChars; j++) {\n            if (LexIsIdentifierStartChar(j)) {\n                lexIdStartTable[j] = true;\n            }\n            else {\n                lexIdStartTable[j] = false;\n            }\n        }\n    }\n\n    export function LexAdjustIndent(code, indentAmt) {\n        if ((code === LexCodeLBR) || (code === LexCodeLC) || (code === LexCodeLPR)) {\n            return indentAmt + 1;\n        }\n        else if ((code === LexCodeRBR) || (code === LexCodeRC) || (code === LexCodeRPR)) {\n            return indentAmt - 1;\n        }\n        else return indentAmt;\n    }\n\n    export function LexIsIdentifierStartChar(code): bool {\n        return (((code >= 97) && (code <= 122)) ||\n                ((code >= 65) && (code <= 90)) ||\n                (code === LexCodeDollar) ||\n                (code === LexCodeUnderscore));\n    }\n\n    export function LexIsDigit(code): bool {\n        return ((code >= 48) && (code <= 57));\n    }\n\n    export function LexIsIdentifierChar(code: number) {\n        return lexIdStartTable[code] || LexIsDigit(code);\n    }\n\n    export function LexMatchingOpen(code) {\n        if (code === LexCodeRBR)\n            return LexCodeLBR;\n        else if (code === LexCodeRC)\n            return LexCodeLC;\n        else if (code === LexCodeRPR)\n            return LexCodeLPR;\n        else return 0;\n    }\n\n    export enum NumberScanState {\n        Start,\n        InFraction,\n        InEmptyFraction,\n        InExponent\n    }\n\n    export enum LexState {\n        Start,\n        InMultilineComment,\n        InMultilineSingleQuoteString,\n        InMultilineDoubleQuoteString,\n    }\n\n    export enum LexMode {\n        Line,\n        File,\n    }\n\n    export enum CommentStyle {\n        Line,\n        Block\n    }\n    \n    export interface IScanner {\n        startPos: number;\n        pos: number;\n        scan(): Token;\n        previousToken(): Token;\n        prevLine: number;\n        line: number;\n        col: number;\n        lastTokenLimChar(): number;\n        lastTokenHadNewline(): bool;\n        lexState: number;\n        getComments(): CommentToken[];\n        getCommentsForLine(line: number): CommentToken[];\n        resetComments(): void;\n        lineMap: LineMap;\n        setSourceText(newSrc: IScriptSnapshot, textMode: number): void;\n        setErrorHandler(reportError: (message: string) => void ): void;\n        seenUnicodeChar: bool;\n        seenUnicodeCharInComment: bool;\n        getLookAheadToken(): Token;\n    }\n\n    export class Scanner implements IScanner {\n        // REVIEW: When adding new variables make sure to handle storing them in getLookAheadToken. \n        //         The method works by storing the state before scanning and restoring it later on,\n        //         missing a member variable could result in an inconsistent state.\n        public prevLine = 0;\n        public line = 0;\n        public col = 0;\n        public pos = 0;\n        public startPos = 0;\n        public startCol: number;\n        public startLine: number;\n        public src: string;\n        public len = 0;\n        public lineMap: LineMap = null;\n\n        public ch = LexEOF;\n        public lexState = LexState.Start;\n        public mode = LexMode.File;\n        public scanComments: bool = true;\n        public interveningWhitespace = false; // Was there a whitespace token between the last token and the current one?\n        private interveningWhitespacePos = 0; //  If yes, this contains the start position of the whitespace\n        public commentStack: CommentToken[] = [];\n        public seenUnicodeChar: bool = false;\n        seenUnicodeCharInComment: bool = false;\n\n        private reportError: (message: string) => void;\n\n        private prevTok = staticTokens[TokenID.EndOfFile];\n\n        constructor(private codeGenTarget: LanguageVersion) {\n            this.startCol = this.col;\n            this.startLine = this.line;\n\n            if (!LexKeywordTable) {\n                LexInitialize();\n            }\n        }\n\n        public previousToken() { return this.prevTok; }\n\n        public setSourceText(newSrc: IScriptSnapshot, textMode: number) {\n            this.mode = textMode;\n            this.scanComments = (this.mode === LexMode.Line);\n            this.pos = 0;\n            this.interveningWhitespacePos = 0;\n            this.startPos = 0;\n            this.line = 0;\n            this.col = 0;\n            this.startCol = this.col;\n            this.startLine = this.line;\n            this.len = 0;\n            this.src = newSrc.getText(0, newSrc.getLength());\n            this.len = this.src.length;\n            this.lineMap = LineMap.fromScriptSnapshot(newSrc);\n            this.commentStack = [];\n            this.seenUnicodeChar = false;\n            this.seenUnicodeCharInComment = false;\n        }\n\n        public setErrorHandler(reportError: (message: string) => void ) {\n            this.reportError = reportError;\n        }\n\n        public setText(newSrc: string, textMode: number) {\n            this.setSourceText(ScriptSnapshot.fromString(newSrc), textMode);\n        }\n\n        public setScanComments(value: bool) {\n            this.scanComments = value;\n        }\n\n        public tokenStart(): void {\n            this.startPos = this.pos;\n            this.startLine = this.line;\n            this.startCol = this.col;\n            this.interveningWhitespace = false;\n        }\n\n        public peekChar(): number {\n            if (this.pos < this.len) {\n                return this.src.charCodeAt(this.pos);\n            }\n            else {\n                return LexEOF;\n            }\n        }\n\n        public peekCharAt(index: number): number {\n            if (index < this.len) {\n                return this.src.charCodeAt(index);\n            }\n            else {\n                return LexEOF;\n            }\n        }\n\n        public IsHexDigit(c: number) {\n            return ((c >= LexCode_0) && (c <= LexCode_9)) || ((c >= LexCode_A) && (c <= LexCode_F)) ||\n                ((c >= LexCode_a) && (c <= LexCode_f));\n        }\n\n        public IsOctalDigit(c: number) {\n            return ((c >= LexCode_0) && (c <= LexCode_7)) ||\n                ((c >= LexCode_a) && (c <= LexCode_f));\n        }\n\n        public scanHexDigits(): Token {\n            var atLeastOneDigit = false;\n            for (; ;) {\n                if (this.IsHexDigit(this.ch)) {\n                    this.nextChar();\n                    atLeastOneDigit = true;\n                }\n                else {\n                    if (atLeastOneDigit) {\n                        var text = this.src.substring(this.startPos, this.pos);\n                        return new NumberLiteralToken(parseInt(text), text);\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            }\n\n        }\n\n        public scanOctalDigits(): Token {\n            var atLeastOneDigit = false;\n            for (; ;) {\n                if (this.IsOctalDigit(this.ch)) {\n                    this.nextChar();\n                    atLeastOneDigit = true;\n                }\n                else {\n                    if (atLeastOneDigit) {\n                        var text = this.src.substring(this.startPos, this.pos);\n                        return new NumberLiteralToken(parseInt(text), text);\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            }\n\n        }\n\n        public scanDecimalNumber(state: number): Token {\n            var atLeastOneDigit = false;\n            var svPos = this.pos;\n            var svCol = this.col;\n            var text: string;\n            \n            for (; ;) {\n                if (LexIsDigit(this.ch)) {\n                    atLeastOneDigit = true;\n                    if (this.ch != LexCode_0 && state === NumberScanState.InEmptyFraction) {\n                        state = NumberScanState.InFraction;\n                    }\n                    this.nextChar();\n                }\n                else if (this.ch === LexCodeDOT) {\n                    if (state === NumberScanState.Start) {\n                        // DecimalDigit* .\n                        this.nextChar();\n                        state = NumberScanState.InEmptyFraction;\n                    }\n                    else {\n                        // dot not part of number\n                        if (atLeastOneDigit) {\n                            // DecimalDigit* . DecimalDigit+\n                            text = this.src.substring(this.startPos, this.pos);\n                            return new NumberLiteralToken(parseFloat(text), text);\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                } else if ((this.ch === LexCode_e) || (this.ch === LexCode_E)) {\n                    if (state === NumberScanState.Start) {\n                        if (atLeastOneDigit) {\n                            // DecimalDigit+ (. DecimalDigit*) [eE] [+-]DecimalDigit+\n                            atLeastOneDigit = false;\n                            this.nextChar();\n                            state = NumberScanState.InExponent;\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                    else if (state === NumberScanState.InFraction || state === NumberScanState.InEmptyFraction) {\n                        // DecimalDigit+ . DecimalDigit* [eE]\n                        this.nextChar();\n                        state = NumberScanState.InExponent;\n                        atLeastOneDigit = false;\n                    }\n                    else {\n                        // DecimalDigit+ . DecimalDigit* [eE] DecimalDigit+\n                        if (atLeastOneDigit) {\n                            text = this.src.substring(this.startPos, this.pos);\n                            return new NumberLiteralToken(parseFloat(text), text);\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                }\n                else if ((this.ch === LexCodePLS) || (this.ch === LexCodeMIN)) {\n                    if (state === NumberScanState.InExponent) {\n                        if (!atLeastOneDigit) {\n                            this.nextChar();\n                        }\n                        else {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                    }\n                    else if (state === NumberScanState.InEmptyFraction || state === NumberScanState.InFraction) {\n                        // This case will not generate bad javascript if we miss the fractional part, but we just want to be consistent with the dot case\n                        text = this.src.substring(this.startPos, this.pos);\n                        return new NumberLiteralToken(parseFloat(text), text);\n                    }\n                    else {\n                        if (!atLeastOneDigit) {\n                            this.pos = svPos;\n                            this.col = svCol;\n                            return null;\n                        }\n                        else {\n                            text = this.src.substring(this.startPos, this.pos);\n                            return new NumberLiteralToken(parseFloat(text), text);\n                        }\n                    }\n                }\n                else {\n                    if (!atLeastOneDigit) {\n                        this.pos = svPos;\n                        this.col = svCol;\n                        return null;\n                    }\n                    else {\n                        text = this.src.substring(this.startPos, this.pos);\n                        return new NumberLiteralToken(parseFloat(text), text);\n                    }\n                }\n            }\n        }\n\n        // 0 [xX] hexDigits\n        // 0 octalDigits\n        // 0 [89] decimalDigits\n        // decimalDigits? fraction? exponent?\n\n        public scanNumber(): Token {\n            if (this.peekChar() === LexCode_0) {\n                switch (this.peekCharAt(this.pos + 1)) {\n                    case LexCode_x:\n                    case LexCode_X:\n                        // Hex\n                        this.advanceChar(2);\n                        return this.scanHexDigits();\n                    case LexCode_8:\n                    case LexCode_9:\n                    case LexCodeDOT:\n                        return this.scanDecimalNumber(NumberScanState.Start);\n                    default:\n                        // Octal\n                        return this.scanOctalDigits();\n                }\n            }\n            else {\n                return this.scanDecimalNumber(NumberScanState.Start);\n            }\n        }\n\n        public scanFraction(): Token {\n            return this.scanDecimalNumber(NumberScanState.InFraction);\n        }\n\n        public newLine(): void {\n            this.col = 0;\n            if (this.mode === LexMode.File) {\n                this.line++;\n            }\n        }\n\n        public finishMultilineComment(): bool {\n            var ch2: number;\n            this.lexState = LexState.InMultilineComment;\n            while (this.pos < this.len) {\n                if (this.ch === LexCodeMUL) {\n                    ch2 = this.peekCharAt(this.pos + 1);\n                    if (ch2 === LexCodeSLH) {\n                        this.advanceChar(2);\n                        if (this.mode === LexMode.File) {\n                            this.tokenStart();\n                        }\n                        this.lexState = LexState.Start;\n                        return true;\n                    }\n                }\n                else if (this.ch === LexCodeNWL) {\n                    this.newLine();\n                    if (this.mode === LexMode.Line) {\n                        this.nextChar();\n                        return false;\n                    }\n                }\n                else if (this.ch >= LexCodeASCIIChars) {\n                    this.seenUnicodeCharInComment = true;\n                }\n                this.nextChar();\n            }\n            return false;\n        }\n\n        public pushComment(comment: CommentToken) {\n            this.commentStack.push(comment);\n        }\n\n        public getComments() {\n            var stack = this.commentStack;\n            this.commentStack = [];\n            return stack;\n        }\n\n        public getCommentsForLine(line: number) {\n            var comments: CommentToken[] = null;\n            while ((this.commentStack.length > 0) && (this.commentStack[0].line === line)) {\n                if (comments === null) {\n                    comments = [this.commentStack.shift()];\n                }\n                else {\n                    comments = comments.concat([this.commentStack.shift()]);\n                }\n\n            }\n            return comments;\n        }\n\n        public resetComments() {\n            this.commentStack = [];\n        }\n\n        public endsLine(c: number) {\n            return (c === LexCodeNWL) || (c === LexCodeRET) || (c === LexCodeLS) || (c === LexCodePS);\n        }\n\n        public finishSinglelineComment() {\n            while (this.pos < this.len) {\n                if (this.endsLine(this.ch))\n                    break;\n                if (this.ch >= LexCodeASCIIChars) {\n                    this.seenUnicodeCharInComment = true;\n                }\n                this.nextChar();\n            }\n\n            if (this.mode === LexMode.File) {\n                this.tokenStart();\n            }\n        }\n\n        public findClosingSLH() {\n            var index = this.pos;\n            var ch2 = this.src.charCodeAt(index);\n            var prevCh = 0;\n            var liveEsc = false;\n            while (!this.endsLine(ch2) && (index < this.len)) {\n                if ((ch2 === LexCodeSLH) && (!liveEsc)) {\n                    return index;\n                }\n                prevCh = ch2;\n                index++;\n                if (liveEsc) {\n                    liveEsc = false;\n                }\n                else {\n                    liveEsc = (prevCh === LexCodeBSL);\n                }\n\n                ch2 = this.src.charCodeAt(index);\n            }\n            return -1;\n        }\n\n        public speculateRegex(): Token {\n            if (noRegexTable[this.prevTok.tokenId] != undefined) {\n                return null;\n            }\n            var svPos = this.pos;\n            var svCol = this.col;\n            // first char is \'/\' and has been skipped\n            var index = this.findClosingSLH();\n            if (index > 0) {\n                // found closing /\n                var pattern = this.src.substring(svPos, index);\n                var flags = \"\";\n                this.pos = index + 1;\n                this.ch = this.peekChar();\n                var flagsStart = this.pos;\n                // TODO: check for duplicate flags\n                while ((this.ch === LexCode_i) || (this.ch === LexCode_g) || (this.ch === LexCode_m)) {\n                    this.nextChar();\n                }\n\n                if ((this.pos - flagsStart) > 3) {\n                    return null;\n                }\n                else {\n                    flags = this.src.substring(flagsStart, this.pos);\n                }\n\n                var regex = undefined;\n                try {\n                    regex = new RegExp(pattern, flags);\n                }\n                catch (regexException) {\n                }\n\n                if (regex) {\n                    // no line boundary in regex string\n                    this.col = svCol + (this.pos - this.startPos);\n                    return new RegularExpressionLiteralToken(this.src.substring(svPos - 1, this.pos));\n                }\n            }\n\n            this.pos = svPos;\n            this.col = svCol;\n\n            return null;\n        }\n\n        public lastTokenHadNewline() {\n            return this.prevLine != this.startLine;\n        }\n\n        public lastTokenLimChar() {\n            return this.interveningWhitespace ? this.interveningWhitespacePos : this.startPos;\n        }\n\n        // use only when known not to skip line terminators\n        public advanceChar(amt: number) {\n            this.pos += amt;\n            this.col += amt;\n            this.ch = this.peekChar();\n        }\n\n        public nextChar() {\n            this.pos++;\n            this.col++;\n            this.ch = this.peekChar();\n        }\n\n        public getLookAheadToken(): Token {\n            // REVIEW: This method is only used for parsing varargs in lambda expressions. If this \n            //         functionality is needed for more common cases, it needs to be designed. \n            //         Look-ahead token needs to be integrated in the scanner design to allow for \n            //         an efficient lookup.\n\n            // Store the scanner state\n            var prevLine = this.prevLine;\n            var line = this.line;\n            var col = this.col;\n            var pos = this.pos;\n            var startPos = this.startPos;\n            var startCol = this.startCol;\n            var startLine = this.startLine;\n            var ch = this.ch;\n            var prevTok = this.prevTok;\n            var lexState = this.lexState;\n            var interveningWhitespace = this.interveningWhitespace;\n            var interveningWhitespacePos = this.interveningWhitespacePos;\n            var seenUnicodeChar = this.seenUnicodeChar;\n            var seenUnicodeCharInComment = this.seenUnicodeCharInComment;\n            var commentStackLength = this.commentStack.length;\n\n            var lookAheadToken = this.scan();\n\n            // Restore state\n            this.prevLine = prevLine;\n            this.line = line;\n            this.col = col;\n            this.pos = pos;\n            this.startPos = startPos;\n            this.startCol = startCol;\n            this.startLine = startLine;\n            this.ch = ch;\n            this.prevTok = prevTok;\n            this.lexState = lexState;\n            this.interveningWhitespace = interveningWhitespace;\n            this.interveningWhitespacePos = interveningWhitespacePos;\n            this.seenUnicodeChar = seenUnicodeChar;\n            this.seenUnicodeCharInComment = seenUnicodeCharInComment;\n            this.commentStack.length = commentStackLength;\n\n            return lookAheadToken;\n        }\n\n        public scanInLine(): Token {\n            if ((this.lexState === LexState.InMultilineComment) && (this.scanComments)) {\n                this.ch = this.peekChar();\n                var commentLine = this.line;\n                this.finishMultilineComment();\n                if (this.startPos < this.pos) {\n                    var commentText = this.src.substring(this.startPos, this.pos);\n                    this.tokenStart();\n                    return new CommentToken(commentText,/*isBlock*/true, this.startPos, commentLine,/*endsLine*/true);\n                }\n                else {\n                    return staticTokens[TokenID.EndOfFile];\n                }\n            }\n            else if (this.lexState === LexState.InMultilineSingleQuoteString && this.pos < this.len) {\n                this.ch = this.peekChar();\n                this.lexState = LexState.Start;\n                return this.scanStringConstant(LexCodeAPO);\n            }\n            else if (this.lexState === LexState.InMultilineDoubleQuoteString && this.pos < this.len) {\n                this.ch = this.peekChar();\n                this.lexState = LexState.Start;\n                return this.scanStringConstant(LexCodeQUO);\n            }\n            this.prevLine = this.line;\n            var prevTok = this.innerScan();\n\n            // Ingore white spaces\n            if (prevTok.tokenId != TokenID.Whitespace) {\n                this.prevTok = prevTok;\n            }\n            return prevTok;\n        }\n\n        public scan(): Token {\n            this.prevLine = this.line;\n            this.prevTok = this.innerScan();\n            return this.prevTok;\n        }\n\n        private isValidUnicodeIdentifierChar(): bool {\n            var valid = LexIsUnicodeIdStart(this.ch, this.codeGenTarget) || LexIsUnicodeDigit(this.ch, this.codeGenTarget);\n            this.seenUnicodeChar = this.seenUnicodeChar || valid;\n            return valid;\n        }\n\n        private scanStringConstant(endCode: number): Token {\n\n            // Accumulate with escape characters\n            scanStringConstantLoop:\n            for (; ;) {\n                switch (this.ch) {\n                    case LexEOF:\n                        // Unexpected end of file\n                        this.reportScannerError(\"Unterminated string constant\");\n                        break scanStringConstantLoop;\n\n                    case LexCodeLS:\n                    case LexCodePS:\n                        this.seenUnicodeChar = true;\n                    // Intentional fall through\n                    case LexCodeRET:\n                    case LexCodeNWL:\n                        this.reportScannerError(\"Unterminated string constant\");\n                        break scanStringConstantLoop;\n\n                    case LexCodeAPO:\n                    case LexCodeQUO:\n                        if (this.ch === endCode) {\n                            // Found string terminator. Skip past end code.\n                            this.nextChar();\n                            break scanStringConstantLoop;\n                        }\n                        break;\n\n                    case LexCodeBSL:\n                        // Consume the current slash\n                        this.nextChar();\n\n                        switch (this.ch) {\n                            case LexCodeAPO:\n                            case LexCodeQUO:\n                            case LexCodeBSL:\n                                // Valid escape sequences\n                                this.nextChar();\n                                continue scanStringConstantLoop;\n\n                            case LexCodeLS:\n                            case LexCodePS:\n                                this.seenUnicodeChar = true;\n                            // Intentional fall through\n                            case LexCodeRET:\n                            case LexCodeNWL:\n                                // Skip /r in a /r/n sequence\n                                if (this.ch === LexCodeRET && this.peekCharAt(this.pos + 1) === LexCodeNWL) {\n                                    this.nextChar();\n                                }\n\n                                // Record new line\n                                this.newLine();\n\n                                if (this.mode === LexMode.Line) {\n                                    // Consume the new line char\n                                    this.nextChar();\n                                    this.lexState = endCode === LexCodeAPO ? LexState.InMultilineSingleQuoteString : LexState.InMultilineDoubleQuoteString;\n                                    break scanStringConstantLoop;\n                                }\n                                break;\n\n                            case LexCode_x:\n                            case LexCode_u:\n                                var expectedHexDigits = this.ch === LexCode_x ? 2 : 4;\n                                this.nextChar();\n                                for (var i = 0; i < expectedHexDigits; i++) {\n                                    if (this.IsHexDigit(this.ch)) {\n                                        this.nextChar();\n                                    }\n                                    else {\n                                        this.reportScannerError(\"Invalid Unicode escape sequence\");\n                                        break;\n                                    }\n                                }\n                                continue scanStringConstantLoop;\n                        }\n                        break;\n                }\n\n                // Record seeing a Unicode char\n                if (this.ch >= LexCodeASCIIChars) {\n                    this.seenUnicodeChar = true;\n                }\n\n                this.nextChar();\n            }\n\n            return new StringLiteralToken(this.src.substring(this.startPos, this.pos));\n        }\n\n        private scanIdentifier(): Token {\n            var hasEscape = false;\n            var isFirstChar = (this.ch === LexCodeBSL);\n            var hasUnicode: any = false;\n\n            for (; ;) {\n                while (lexIdStartTable[this.ch] || LexIsDigit(this.ch) ||\n                      (this.ch >= LexCodeASCIIChars && this.isValidUnicodeIdentifierChar())) {\n                    this.nextChar();\n                }\n                if (this.ch === LexCodeBSL) {\n                    this.nextChar();\n                    if (this.ch === LexCode_u) {\n                        // 4 hex digits\n                        this.nextChar();\n                        for (var h = 0; h < 4 ; h++) {\n                            if (this.IsHexDigit(this.ch)) {\n                                this.nextChar();\n                            }\n                            else {\n                                this.reportScannerError(\"Invalid Unicode escape sequence\");\n                                return staticTokens[TokenID.Error];\n                            }\n                        }\n                        var hexChar = parseInt(this.src.substring(this.pos - 4, this.pos), 16);\n\n                        // Verify is valid ID char \n                        if (lexIdStartTable[hexChar] || (!isFirstChar && LexIsDigit(hexChar)) ||\n                            (hexChar >= LexCodeASCIIChars && (LexIsUnicodeIdStart(hexChar, this.codeGenTarget) || (!isFirstChar && LexIsUnicodeDigit(hexChar, this.codeGenTarget))))) {\n                        }\n                        else {\n                            this.reportScannerError(\"Invalid identifier character\");\n                            return staticTokens[TokenID.Error];\n                        }\n\n                        hasEscape = true;\n                        isFirstChar = false;\n                        continue;\n                    }\n\n                    this.reportScannerError(\"Invalid Unicode escape sequence\");\n                    return staticTokens[TokenID.Error];\n                }\n                break;\n            }\n\n            var id: number;\n            var text = this.src.substring(this.startPos, this.pos);\n            if (!hasEscape && (id = LexKeywordTable.lookup(text)) != null) {\n                return staticTokens[id];\n            }\n            else {\n                return new IdentifierToken(text, hasEscape);\n            }\n        }\n\n        public innerScan(): Token {\n            var rtok;\n            this.tokenStart();\n            this.ch = this.peekChar();\n\n            start: while (this.pos < this.len) {\n                if (lexIdStartTable[this.ch] || this.ch === LexCodeBSL || (this.ch >= LexCodeASCIIChars && LexIsUnicodeIdStart(this.ch, this.codeGenTarget))) {\n                    // identifier or keyword\n                    return this.scanIdentifier();\n                }\n                else if (this.ch === LexCodeSpace) {\n                    if (!this.interveningWhitespace) {\n                        this.interveningWhitespacePos = this.pos;\n                    }\n                    do {\n                        this.nextChar();\n                    } while (this.ch === LexCodeSpace);\n                    if (this.mode === LexMode.Line) {\n                        var whitespaceText = this.src.substring(this.startPos, this.pos);\n                        return new WhitespaceToken(TokenID.Whitespace, whitespaceText);\n                    }\n                    else {\n                        this.tokenStart();\n                        this.interveningWhitespace = true;\n                    }\n                }\n                else if (this.ch === LexCodeSLH) {\n                    this.nextChar();\n                    var commentText;\n                    if (this.ch === LexCodeSLH) {\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos - 1;\n                        }\n                        var commentStartPos = this.pos - 1;\n                        var commentStartLine = this.line;\n                        this.finishSinglelineComment();\n                        var commentText = this.src.substring(commentStartPos, this.pos);\n                        var commentToken = new CommentToken(commentText,/*isBlock*/false, commentStartPos, commentStartLine,/*endsLine*/false);\n                        if (this.scanComments) {\n                            // respect scanner contract: when returning a token, startPos is the start position of the token\n                            this.startPos = commentStartPos;\n                            return commentToken;\n                        }\n                        else {\n                            this.pushComment(commentToken);\n                        }\n\n                        this.interveningWhitespace = true;\n                    }\n                    else if (this.ch === LexCodeMUL) {\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos - 1;\n                        }\n                        var commentStartPos = this.pos - 1;\n                        var commentStartLine = this.line;\n                        this.nextChar();  // Skip the \"*\"\n                        this.finishMultilineComment();\n                        var commentText = this.src.substring(commentStartPos, this.pos);\n                        var endsLine = this.endsLine(this.peekChar());\n                        var commentToken = new CommentToken(commentText,/*isBlock*/true, commentStartPos, commentStartLine, endsLine);\n                        if (this.scanComments) {\n                            // respect scanner contract: when returning a token, startPos is the start position of the token\n                            this.startPos = commentStartPos;\n                            return commentToken;\n                        }\n                        else {\n                            this.pushComment(commentToken);\n                        }\n                        this.interveningWhitespace = true;\n                    }\n                    else {\n                        var regexTok = this.speculateRegex();\n                        if (regexTok) {\n                            return regexTok;\n                        }\n                        else {\n                            if (this.peekCharAt(this.pos) === LexCodeEQ) {\n                                this.nextChar();\n                                return staticTokens[TokenID.SlashEquals];\n                            }\n                            else {\n                                return staticTokens[TokenID.Slash];\n                            }\n                        }\n                    }\n                }\n                else if (this.ch === LexCodeSMC) {\n                    this.nextChar();\n                    return staticTokens[TokenID.Semicolon];\n                }\n                else if ((this.ch === LexCodeAPO) || (this.ch === LexCodeQUO)) {\n                    // Skip the first quote\n                    var endCode = this.ch;\n                    this.nextChar();\n                    return this.scanStringConstant(endCode);\n                }\n                else if (autoToken[this.ch]) {\n                    var atok = autoToken[this.ch];\n                    this.nextChar();\n                    return atok;\n                }\n                else if ((this.ch >= LexCode_0) && (this.ch <= LexCode_9)) {\n                    rtok = this.scanNumber();\n                    if (rtok) {\n                        return rtok;\n                    }\n                    else {\n                        this.nextChar();\n                        return staticTokens[TokenID.Error];\n                    }\n                }\n                else switch (this.ch) {\n                    // TAB\n                    case LexCodeTAB:\n                    case LexCodeVTAB:\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos;\n                        }\n                        if (this.mode === LexMode.Line) {\n                            do {\n                                this.nextChar();\n                            } while ((this.ch === LexCodeSpace) || (this.ch === 9));\n                            var wsText = this.src.substring(this.startPos, this.pos);\n                            return new WhitespaceToken(TokenID.Whitespace, wsText);\n                        }\n                        else {\n                            this.interveningWhitespace = true;\n                        }\n                    // Newlines and BOM\n                    case 0xFF: // UTF16 SEQUENCE\n                    case 0xFE:\n                    case 0xEF:    // UTF8 SEQUENCE\n                    case 0xBB:\n                    case 0xBF:\n                    case LexCodeLS:\n                    case LexCodePS:\n                    case LexCodeNWL:\n                    case LexCodeRET:\n                        if (this.ch === LexCodeNWL) {\n                            this.newLine();\n                            if (this.mode === LexMode.Line) {\n                                return staticTokens[TokenID.EndOfFile];\n                            }\n                        }\n                        if (!this.interveningWhitespace) {\n                            this.interveningWhitespacePos = this.pos;\n                        }\n                        this.nextChar();\n                        this.tokenStart();\n                        this.interveningWhitespace = true;\n                        break;\n                    case LexCodeDOT: {\n                        if (this.peekCharAt(this.pos + 1) === LexCodeDOT) {\n                            if (this.peekCharAt(this.pos + 2) === LexCodeDOT) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.DotDotDot];\n                            }\n                            else {\n                                this.nextChar();\n                                return staticTokens[TokenID.Dot];\n                            }\n                        }\n                        else {\n                            this.nextChar();\n                            rtok = this.scanFraction();\n                            if (rtok) {\n                                return rtok;\n                            }\n                            else {\n                                return staticTokens[TokenID.Dot];\n                            }\n                        }\n                        // break;\n                    }\n                    case LexCodeEQ:\n                        if (this.peekCharAt(this.pos + 1) === LexCodeEQ) {\n                            if (this.peekCharAt(this.pos + 2) === LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.EqualsEqualsEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.EqualsEquals];\n                            }\n                        }\n                        else if (this.peekCharAt(this.pos + 1) === LexCodeGT) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.EqualsGreaterThan];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Equals];\n                        }\n                    // break;\n                    case LexCodeBNG:\n                        if (this.peekCharAt(this.pos + 1) === LexCodeEQ) {\n                            if (this.peekCharAt(this.pos + 2) === LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.ExclamationEqualsEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.ExclamationEquals];\n                            }\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Exclamation];\n                        }\n                    // break;\n                    case LexCodePLS:\n                        if (this.peekCharAt(this.pos + 1) === LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PlusEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) === LexCodePLS) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PlusPlus];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Plus];\n                        }\n                    // break;\n                    case LexCodeMIN:\n                        if (this.peekCharAt(this.pos + 1) === LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.MinusEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) === LexCodeMIN) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.MinusMinus];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Minus];\n                        }\n                    // break;\n                    case LexCodeMUL:\n                        if (this.peekCharAt(this.pos + 1) === LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AsteriskEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Asterisk];\n                        }\n                    // break;\n                    case LexCodePCT:\n                        if (this.peekCharAt(this.pos + 1) === LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.PercentEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Percent];\n                        }\n                    // break;\n                    case LexCodeLT:\n                        if (this.peekCharAt(this.pos + 1) === LexCodeLT) {\n                            if (this.peekCharAt(this.pos + 2) === LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.LessThanLessThanEquals];\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.LessThanLessThan];\n                            }\n                        }\n                        else if (this.peekCharAt(this.pos + 1) === LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.LessThanEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.LessThan];\n                        }\n                    //  break;\n                    case LexCodeGT:\n                        if (this.peekCharAt(this.pos + 1) === LexCodeGT) {\n                            if (this.peekCharAt(this.pos + 2) === LexCodeEQ) {\n                                this.advanceChar(3);\n                                return staticTokens[TokenID.GreaterThanGreaterThanEquals];\n                            }\n                            else if (this.peekCharAt(this.pos + 2) === LexCodeGT) {\n                                if (this.peekCharAt(this.pos + 3) === LexCodeEQ) {\n                                    this.advanceChar(4);\n                                    return staticTokens[TokenID.GreaterThanGreaterThanGreaterThanEquals];\n                                }\n                                else {\n                                    this.advanceChar(3);\n                                    return staticTokens[TokenID.GreaterThanGreaterThanGreaterThan];\n                                }\n                            }\n                            else {\n                                this.advanceChar(2);\n                                return staticTokens[TokenID.GreaterThanGreaterThan];\n                            }\n                        }\n                        else if (this.peekCharAt(this.pos + 1) === LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.GreaterThanEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.GreaterThan];\n                        }\n                    // break;\n                    case LexCodeXOR:\n                        if (this.peekCharAt(this.pos + 1) === LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.CaretEquals];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Caret];\n                        }\n                    //  break;\n                    case LexCodeBAR:\n                        if (this.peekCharAt(this.pos + 1) === LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.BarEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) === LexCodeBAR) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.BarBar];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.Bar];\n                        }\n                    //  break;\n                    case LexCodeAMP:\n                        if (this.peekCharAt(this.pos + 1) === LexCodeEQ) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AmpersandEquals];\n                        }\n                        else if (this.peekCharAt(this.pos + 1) === LexCodeAMP) {\n                            this.advanceChar(2);\n                            return staticTokens[TokenID.AmpersandAmpersand];\n                        }\n                        else {\n                            this.nextChar();\n                            return staticTokens[TokenID.And];\n                        }\n                    //  break;\n                    default:\n                        // Report error\n                        this.reportScannerError(\"Invalid character\");\n                        this.nextChar();\n\n                        continue start;\n                }\n            }\n            return staticTokens[TokenID.EndOfFile];\n        }\n\n        private reportScannerError(message: string) {\n            if (this.reportError) {\n                this.reportError(message);\n            }\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export class AssignScopeContext {\n        constructor (public scopeChain: ScopeChain,\n                     public typeFlow: TypeFlow,\n                     public modDeclChain: ModuleDeclaration[]) {\n        }\n    }\n\n    export function pushAssignScope(scope: SymbolScope,\n        context: AssignScopeContext,\n        type: Type,\n        classType: Type,\n        fnc: FuncDecl) {\n\n        var chain = new ScopeChain(null, context.scopeChain, scope);\n        chain.thisType = type;\n        chain.classType = classType;\n        chain.fnc = fnc;\n        context.scopeChain = chain;\n    }\n\n    export function popAssignScope(context: AssignScopeContext) {\n        context.scopeChain = context.scopeChain.previous;\n    }\n\n    export function instanceCompare(a: Symbol, b: Symbol) {\n        if (((a === null) || (!a.isInstanceProperty()))) {\n            return b;\n        }\n        else {\n            return a;\n        }\n    }\n\n    export function instanceFilterStop(s: Symbol) {\n        return s.isInstanceProperty();\n    }\n\n    export class ScopeSearchFilter {\n\n        constructor (public select: (a: Symbol, b: Symbol) =>Symbol,\n                            public stop: (s: Symbol) =>bool) { }\n\n        public result: Symbol = null;\n\n        public reset() {\n            this.result = null;\n        }\n\n        public update(b: Symbol): bool {\n            this.result = this.select(this.result, b);\n            if (this.result) {\n                return this.stop(this.result);\n            }\n            else {\n                return false;\n            }\n        }\n    }\n\n    export var instanceFilter = new ScopeSearchFilter(instanceCompare, instanceFilterStop);\n\n    export function preAssignModuleScopes(ast: AST, context: AssignScopeContext) {\n        var moduleDecl = <ModuleDeclaration>ast;\n        var memberScope: SymbolTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (moduleDecl.name && moduleDecl.mod) {\n            moduleDecl.name.sym = moduleDecl.mod.symbol;\n        }\n\n        var mod = moduleDecl.mod;\n\n        // We\'re likely here because of error recovery\n        if (!mod) {\n            return;\n        }\n\n        memberScope = new SymbolTableScope(mod.members, mod.ambientMembers, mod.enclosedTypes, mod.ambientEnclosedTypes, mod.symbol);\n        mod.memberScope = memberScope;\n        context.modDeclChain.push(moduleDecl);\n        context.typeFlow.checker.currentModDecl = moduleDecl;\n        aggScope = new SymbolAggregateScope(mod.symbol);\n        aggScope.addParentScope(memberScope);\n        aggScope.addParentScope(context.scopeChain.scope);\n        pushAssignScope(aggScope, context, null, null, null);\n        mod.containedScope = aggScope;\n        if (mod.symbol) {\n            context.typeFlow.addLocalsFromScope(mod.containedScope, mod.symbol, /*moduleDecl.vars*/ null, mod.members.privateMembers, true);\n        }\n    }\n\n    export function preAssignClassScopes(ast: AST, context: AssignScopeContext) {\n        var classDecl = <InterfaceDeclaration>ast;\n        var memberScope: SymbolTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (classDecl.name && classDecl.type) {\n            classDecl.name.sym = classDecl.type.symbol;\n        }\n\n        var classType = ast.type;\n\n        if (classType) {\n            var classSym = classType.symbol;\n            memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(classType);\n\n            aggScope = new SymbolAggregateScope(classType.symbol);\n            aggScope.addParentScope(memberScope);\n            aggScope.addParentScope(context.scopeChain.scope);\n\n            classType.containedScope = aggScope;\n            classType.memberScope = memberScope;\n\n            var instanceType = classType.instanceType;\n            memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(instanceType);\n            instanceType.memberScope = memberScope;\n\n            aggScope = new SymbolAggregateScope(instanceType.symbol);\n            aggScope.addParentScope(context.scopeChain.scope);\n\n            pushAssignScope(aggScope, context, instanceType, classType, null);\n            instanceType.containedScope = aggScope;\n        }\n        else {\n            ast.type = context.typeFlow.anyType;\n        }\n    }\n\n    export function preAssignInterfaceScopes(ast: AST, context: AssignScopeContext) {\n        var interfaceDecl = <InterfaceDeclaration>ast;\n        var memberScope: SymbolTableScope = null;\n        var aggScope: SymbolAggregateScope = null;\n\n        if (interfaceDecl.name && interfaceDecl.type) {\n            interfaceDecl.name.sym = interfaceDecl.type.symbol;\n        }\n\n        var interfaceType = ast.type;\n        memberScope = <SymbolTableScope>context.typeFlow.checker.scopeOf(interfaceType);\n        interfaceType.memberScope = memberScope;\n        aggScope = new SymbolAggregateScope(interfaceType.symbol);\n        aggScope.addParentScope(memberScope);\n        aggScope.addParentScope(context.scopeChain.scope);\n        pushAssignScope(aggScope, context, null, null, null);\n        interfaceType.containedScope = aggScope;\n    }\n\n    export function preAssignWithScopes(ast: AST, context: AssignScopeContext) {\n        var withStmt = <WithStatement>ast;\n        var withType = withStmt.type;\n\n        var members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n        var ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n        withType = new Type();\n        var withSymbol = new WithSymbol(withStmt.minChar, context.typeFlow.checker.locationInfo.fileName, withType, context.typeFlow.compilationSettings.optimizeModuleCodeGen);\n        withType.members = members;\n        withType.ambientMembers = ambientMembers;\n        withType.symbol = withSymbol;\n        withType.setHasImplementation();\n        withStmt.type = withType;\n\n        var withScope = new TypeScript.SymbolScopeBuilder(withType.members, withType.ambientMembers, null, null, context.scopeChain.scope, withType.symbol);\n\n        pushAssignScope(withScope, context, null, null, null);\n        withType.containedScope = withScope;\n    }\n\n    export function preAssignFuncDeclScopes(ast: AST, context: AssignScopeContext) {\n        var funcDecl = <FuncDecl>ast;\n\n        var container: Symbol = null;\n        var localContainer: Symbol = null;\n        if (funcDecl.type) {\n            localContainer = ast.type.symbol;\n        }\n\n        var isStatic = hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Static);\n        var isInnerStatic = isStatic && context.scopeChain.fnc != null;\n        // for inner static functions, use the parent\'s member scope, so local vars cannot be captured\n        var parentScope = isInnerStatic ? context.scopeChain.fnc.type.memberScope : context.scopeChain.scope;\n\n        // if this is not a method, but enclosed by class, use constructor as\n        // the enclosing scope\n        // REVIEW: Some twisted logic here - this needs to be cleaned up once old classes are removed\n        //  - if it\'s a new class, always use the contained scope, since we initialize the constructor scope below\n        if (context.scopeChain.thisType &&\n            (!funcDecl.isConstructor || hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ClassMethod))) {\n            var instType = context.scopeChain.thisType;\n\n            if (!(instType.typeFlags & TypeFlags.IsClass) && !hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ClassMethod)) {\n                if (!funcDecl.isMethod() || isStatic) {\n                    parentScope = instType.constructorScope;\n                }\n                else {\n                    // use constructor scope if a method as well\n                    parentScope = instType.containedScope;\n                }\n            }\n            else {\n                if (context.scopeChain.previous.scope.container &&\n                    context.scopeChain.previous.scope.container.declAST &&\n                    context.scopeChain.previous.scope.container.declAST.nodeType === NodeType.FuncDecl &&\n                    (<FuncDecl>context.scopeChain.previous.scope.container.declAST).isConstructor) {\n\n                        // if the parent is the class constructor, use the constructor scope\n                    parentScope = instType.constructorScope;\n                }\n                else if (isStatic && context.scopeChain.classType) {\n                    parentScope = context.scopeChain.classType.containedScope;\n                }\n                else {\n                    // else, use the contained scope\n                    parentScope = instType.containedScope;\n                }\n            }\n            container = instType.symbol;\n        }\n        else if (funcDecl.isConstructor && context.scopeChain.thisType) {\n            // sets the container to the class type\'s symbol (which is shared by the instance type)\n            container = context.scopeChain.thisType.symbol;\n        }\n\n        var fgSym: TypeSymbol = null;\n\n        if (funcDecl.type === null || hasFlag(funcDecl.type.symbol.flags, SymbolFlags.TypeSetDuringScopeAssignment)) {\n            if (context.scopeChain.fnc && context.scopeChain.fnc.type) {\n                container = context.scopeChain.fnc.type.symbol;\n            }\n\n            var funcScope = null;\n            var outerFnc: FuncDecl = context.scopeChain.fnc;\n            var nameText = funcDecl.name ? funcDecl.name.text : null;\n\n            if (isStatic) {\n                // In the case of function-nested statics, no member list will have bee initialized for the function, so we need\n                // to copy it over.  We don\'t set this by default because having a non-null member list will throw off assignment\n                // compatibility tests\n                if (outerFnc.type.members === null && container.getType().memberScope) {\n                    outerFnc.type.members = (<SymbolScopeBuilder>(<TypeSymbol>container).type.memberScope).valueMembers;\n                }\n                funcScope = context.scopeChain.fnc.type.memberScope;\n                //outerFnc.innerStaticFuncs[outerFnc.innerStaticFuncs.length] = funcDecl;\n            }\n            else {\n                funcScope = context.scopeChain.scope;\n            }\n\n            // REVIEW: We don\'t search for another sym for accessors to prevent us from\n            // accidentally coalescing function signatures with the same name (E.g., a function\n            // \'f\' the outer scope and a setter \'f\' in an object literal within that scope)\n            if (nameText && nameText != \"__missing\" && !funcDecl.isAccessor()) {\n                if (isStatic) {\n                    fgSym = funcScope.findLocal(nameText, false, false);\n                }\n                else {\n                    // REVIEW: This logic should be symmetric with preCollectClassTypes\n                    fgSym = funcScope.findLocal(nameText, false, false);\n                }\n            }\n\n            context.typeFlow.checker.createFunctionSignature(funcDecl, container,\n                                                            funcScope, fgSym, fgSym === null);\n\n            // it\'s a getter or setter for a class property                     \n            if (!funcDecl.accessorSymbol && \n                (funcDecl.getFunctionFlags() & FunctionFlags.ClassMethod) &&\n                container && \n                ((!fgSym || fgSym.declAST.nodeType != NodeType.FuncDecl) && funcDecl.isAccessor()) || \n                    (fgSym && fgSym.isAccessor())) \n            {\n                funcDecl.accessorSymbol = context.typeFlow.checker.createAccessorSymbol(funcDecl, fgSym, container.getType(), (funcDecl.isMethod() && isStatic), true, funcScope, container);\n            }\n\n            funcDecl.type.symbol.flags |= SymbolFlags.TypeSetDuringScopeAssignment;\n        }\n\n        // Set the symbol for functions and their overloads\n        if (funcDecl.name && funcDecl.type) {\n            funcDecl.name.sym = funcDecl.type.symbol;\n        }\n\n        // Keep track of the original scope type, because target typing might override\n        // the \"type\" member. We need the original \"Scope type\" for completion list, etc.\n        funcDecl.scopeType = funcDecl.type;\n\n        // Overloads have no scope, so bail here\n        //if (funcDecl.isOverload) {\n        //    return;\n        //}\n\n        var funcTable = new StringHashTable();\n        var funcMembers = new ScopedMembers(new DualStringHashTable(funcTable, new StringHashTable()));\n        var ambientFuncTable = new StringHashTable();\n        var ambientFuncMembers = new ScopedMembers(new DualStringHashTable(ambientFuncTable, new StringHashTable()));\n        var funcStaticTable = new StringHashTable();\n        var funcStaticMembers = new ScopedMembers(new DualStringHashTable(funcStaticTable, new StringHashTable()));\n        var ambientFuncStaticTable = new StringHashTable();\n        var ambientFuncStaticMembers = new ScopedMembers(new DualStringHashTable(ambientFuncStaticTable, new StringHashTable()));\n\n        // REVIEW: Is it a problem that this is being set twice for properties and constructors?\n        // funcDecl.fileName = context.typeFlow.checker.locationInfo.fileName;\n\n        var locals = new SymbolScopeBuilder(funcMembers, ambientFuncMembers, null, null, parentScope, localContainer);\n        var statics = new SymbolScopeBuilder(funcStaticMembers, ambientFuncStaticMembers, null, null, parentScope, null);\n\n        if (funcDecl.isConstructor && context.scopeChain.thisType) {\n            context.scopeChain.thisType.constructorScope = locals;\n        }\n\n        // basically, there are two problems\n        // - Above, for new classes, we were overwriting the constructor scope with the containing scope.  This caused constructor params to be\n        // in scope everywhere\n        // - Below, we\'re setting the contained scope table to the same table we were overwriting the constructor scope with, which we need to\n        // fish lambda params, etc, out (see funcTable below)\n        //\n        // A good first approach to solving this would be to change addLocalsFromScope to take a scope instead of a table, and add to the\n        // constructor scope as appropriate\n\n        funcDecl.symbols = funcTable;\n\n        if (!funcDecl.isSpecialFn()) {\n            var group = funcDecl.type;\n            var signature = funcDecl.signature;\n\n            if (!funcDecl.isConstructor) {\n                group.containedScope = locals;\n                locals.container = group.symbol;\n\n                group.memberScope = statics;\n                statics.container = group.symbol;\n            }\n            // funcDecl.enclosingFnc = context.scopeChain.fnc;\n            group.enclosingType = isStatic ? context.scopeChain.classType : context.scopeChain.thisType;\n            // for mapping when type checking\n            fgSym = <TypeSymbol>ast.type.symbol;\n            if (((funcDecl.getFunctionFlags() & FunctionFlags.Signature) === FunctionFlags.None) && /*funcDecl.vars*/ false) {\n                context.typeFlow.addLocalsFromScope(locals, fgSym, /*funcDecl.vars*/ null,\n                                                    funcTable, false);\n                context.typeFlow.addLocalsFromScope(statics, fgSym, /*funcDecl.statics*/ null,\n                                                    funcStaticTable, false);\n            }\n            if (signature.parameters) {\n                var len = signature.parameters.length;\n                for (var i = 0; i < len; i++) {\n                    var paramSym: ParameterSymbol = signature.parameters[i];\n                    context.typeFlow.checker.resolveTypeLink(locals,\n                                                                paramSym.parameter.typeLink, true);\n                }\n            }\n            context.typeFlow.checker.resolveTypeLink(locals, signature.returnType,\n                                                        funcDecl.isSignature());\n        }\n\n        if (!funcDecl.isConstructor || hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ClassMethod)) {\n            var thisType = (funcDecl.isConstructor && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ClassMethod)) ? context.scopeChain.thisType : null;\n            pushAssignScope(locals, context, thisType, null, funcDecl);\n        }\n\n        if (funcDecl.name && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.IsFunctionExpression) && !funcDecl.isAccessor()) {\n            // If the function is an expression, the name will not be visible in the enclosing scope.\n            // Add the function symbol under its name to the local scope to allow for recursive calls.\n            if (funcDecl.name.sym) {\n                funcTable.add(funcDecl.name.text, funcDecl.name.sym);\n            }\n        }\n    }\n\n    export function preAssignCatchScopes(ast: AST, context: AssignScopeContext) {\n        var catchBlock = <CatchClause>ast;\n        if (catchBlock.param) {\n            var catchTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable())); // REVIEW: Should we be allocating a public table instead of a private one?\n            var catchLocals = new SymbolScopeBuilder(catchTable, null, null, null, context.scopeChain.scope,\n                                                   context.scopeChain.scope.container);\n            catchBlock.containedScope = catchLocals;\n            pushAssignScope(catchLocals, context, context.scopeChain.thisType, context.scopeChain.classType, context.scopeChain.fnc);\n        }\n    }\n\n    export function preAssignScopes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context:AssignScopeContext = walker.state;\n        var go = true;\n\n        if (ast) {\n            if (ast.nodeType === NodeType.List) {\n                var list = <ASTList>ast;\n                // list.enclosingScope = context.scopeChain.scope;\n            }\n            else if (ast.nodeType === NodeType.ModuleDeclaration) {\n                preAssignModuleScopes(ast, context);\n            }\n            else if (ast.nodeType === NodeType.ClassDeclaration) {\n                preAssignClassScopes(ast, context);\n            }\n            else if (ast.nodeType === NodeType.InterfaceDeclaration) {\n                preAssignInterfaceScopes(ast, context);\n            }\n            else if (ast.nodeType === NodeType.WithStatement) {\n                preAssignWithScopes(ast, context);\n            }\n            else if (ast.nodeType === NodeType.FuncDecl) {\n                preAssignFuncDeclScopes(ast, context);\n            }\n            else if (ast.nodeType === NodeType.CatchClause) {\n                preAssignCatchScopes(ast, context);\n            }\n            else if (ast.nodeType === NodeType.TypeRef) {\n                go = false;\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n\n    export function postAssignScopes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context:AssignScopeContext = walker.state;\n        var go = true;\n        if (ast) {\n            if (ast.nodeType === NodeType.ModuleDeclaration) {\n                var prevModDecl = <ModuleDeclaration>ast;\n\n                popAssignScope(context);\n\n                context.modDeclChain.pop();\n                if (context.modDeclChain.length >= 1) {\n                    context.typeFlow.checker.currentModDecl = context.modDeclChain[context.modDeclChain.length - 1];\n                }\n            }\n            else if (ast.nodeType === NodeType.ClassDeclaration) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType === NodeType.InterfaceDeclaration) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType === NodeType.WithStatement) {\n                popAssignScope(context);\n            }\n            else if (ast.nodeType === NodeType.FuncDecl) {\n                var funcDecl = <FuncDecl>ast;\n                if ((!funcDecl.isConstructor || hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ClassMethod)) /*&& !funcDecl.isOverload*/) {\n                    popAssignScope(context);\n                }\n            }\n            else if (ast.nodeType === NodeType.CatchClause) {\n                var catchBlock = <CatchClause>ast;\n                if (catchBlock.param) {\n                    popAssignScope(context);\n                }\n            }\n            else {\n                go = false;\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class TypeCollectionContext {\n        public script: Script = null;\n\n        constructor (public scopeChain: ScopeChain, public checker: TypeChecker) {\n        }\n    }\n\n    export function pushTypeCollectionScope(container: Symbol,\n        valueMembers: ScopedMembers,\n        ambientValueMembers: ScopedMembers,\n        enclosedTypes: ScopedMembers,\n        ambientEnclosedTypes: ScopedMembers,\n        context: TypeCollectionContext,\n        thisType: Type,\n        classType: Type,\n        moduleDecl: ModuleDeclaration) {\n        var builder = new SymbolScopeBuilder(valueMembers, ambientValueMembers, enclosedTypes, ambientEnclosedTypes, null, container);\n        var chain: ScopeChain = new ScopeChain(container, context.scopeChain, builder);\n        chain.thisType = thisType;\n        chain.classType = classType;\n        chain.moduleDecl = moduleDecl;\n        context.scopeChain = chain;\n    }\n\n    export function popTypeCollectionScope(context: TypeCollectionContext) {\n        context.scopeChain = context.scopeChain.previous;\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Signature {\n        public hasVariableArgList = false;\n        public returnType: TypeLink;\n        public parameters: ParameterSymbol[] = null;\n        public declAST: FuncDecl = null;\n        public typeCheckStatus = TypeCheckStatus.NotStarted;\n        public nonOptionalParameterCount = 0;\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Signature {\n            var result = new Signature();\n            if (this.hasVariableArgList) {\n                result.hasVariableArgList = true;\n            }\n            result.returnType = new TypeLink();\n            if (this.returnType.type) {\n                result.returnType.type =\n                    this.returnType.type.specializeType(pattern, replacement, checker, false);\n            }\n            else {\n                result.returnType.type = checker.anyType;\n            }\n\n            if (this.parameters) {\n                result.parameters = [];\n                for (var i = 0, len = this.parameters.length; i < len; i++) {\n                    var oldSym:ParameterSymbol = this.parameters[i];\n                    var paramDef = new ValueLocation();\n                    var paramSym = new ParameterSymbol(oldSym.name, oldSym.location,\n                                                     checker.locationInfo.fileName,\n                                                     paramDef);\n\n                    paramSym.declAST = this.declAST;\n                    paramDef.symbol = paramSym;\n                    paramDef.typeLink = new TypeLink();\n                    result.parameters[i] = paramSym;\n                    var oldType = oldSym.getType();\n                    if (oldType) {\n                        paramDef.typeLink.type = oldType.specializeType(pattern, replacement, checker, false);\n                    }\n                    else {\n                        paramDef.typeLink.type = checker.anyType;\n                    }\n                }\n            }\n            result.nonOptionalParameterCount = this.nonOptionalParameterCount;\n            result.declAST = this.declAST;\n\n            return result;\n        }\n\n        public toString() {\n            return this.toStringHelper(false, false, null);\n        }\n\n        public toStringHelper(shortform: bool, brackets: bool, scope: SymbolScope) {\n            return this.toStringHelperEx(shortform, brackets, scope).toString();\n        }\n\n        public toStringHelperEx(shortform: bool, brackets: bool, scope: SymbolScope, prefix: string = \"\"): MemberNameArray {\n            var builder = new MemberNameArray();\n            if (brackets) {\n                builder.prefix =  prefix + \"[\";\n            }\n            else {\n                builder.prefix = prefix + \"(\";\n            }\n\n            var paramLen = this.parameters.length;\n            var len = this.hasVariableArgList ? paramLen - 1 : paramLen;\n            for (var i = 0; i < len; i++) {\n                builder.add(MemberName.create(this.parameters[i].name + (this.parameters[i].isOptional() ? \"?\" : \"\") + \": \"));\n                builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));\n                if (i < paramLen - 1) {\n                    builder.add(MemberName.create(\", \"));\n                }\n            }\n\n            if (this.hasVariableArgList) {\n                builder.add(MemberName.create(\"...\" + this.parameters[i].name + \": \"));\n                builder.add(this.parameters[i].getType().getScopedTypeNameEx(scope));\n            }\n\n            if (shortform) {\n                if (brackets) {\n                    builder.add(MemberName.create(\"] => \"));\n                }\n                else {\n                    builder.add(MemberName.create(\") => \"));\n                }\n            }\n            else {\n                if (brackets) {\n                    builder.add(MemberName.create(\"]: \"));\n                }\n                else {\n                    builder.add(MemberName.create(\"): \"));\n                }\n            }\n\n            if (this.returnType.type) {\n                 builder.add(this.returnType.type.getScopedTypeNameEx(scope));\n            }\n            else {\n                builder.add(MemberName.create(\"any\"));\n            }\n            return builder;\n        }\n    }\n\n    export class SignatureGroup {\n        public signatures: Signature[] = [];\n        public hasImplementation = true;\n        public definitionSignature: Signature = null;\n        public hasBeenTypechecked = false;\n        public flags: SignatureFlags = SignatureFlags.None;\n        public addSignature(signature: Signature) {\n            if (this.signatures == null) {\n                this.signatures = [];\n            }\n            this.signatures[this.signatures.length] = signature;\n            \n            // REVIEW: duplicates should be found within createFunctionSignature,\n            // so we won\'t check for them here\n            if (signature.declAST &&\n                //!signature.declAST.isOverload &&\n                !signature.declAST.isSignature() && \n                !hasFlag(signature.declAST.getFunctionFlags(), FunctionFlags.Ambient) &&\n                !hasFlag(signature.declAST.getFunctionFlags(), FunctionFlags.Signature)) {\n                this.definitionSignature = signature;\n            }\n        }\n\n        public toString() { return this.signatures.toString(); }\n        public toStrings(prefix: string, shortform: bool, scope: SymbolScope, getPrettyTypeName? : bool, useSignature? : Signature) {\n            var result : MemberName[] = [];  \n            var len = this.signatures.length;\n            if (!getPrettyTypeName && len > 1) {\n                shortform = false;\n            }\n\n            var getMemberNameOfSignature = (signature: Signature) => {\n                if (this.flags & SignatureFlags.IsIndexer) {\n                    return signature.toStringHelperEx(shortform, true, scope);\n                }\n                else {\n                    return signature.toStringHelperEx(shortform, false, scope, prefix);\n                }\n            }\n\n            if (useSignature) {\n                result.push(getMemberNameOfSignature(useSignature));\n            } else {\n                for (var i = 0; i < len; i++) {\n                    // the definition signature shouldn\'t be printed if there are overloads\n                    if (len > 1 && this.signatures[i] == this.definitionSignature) {\n                        continue;\n                    }\n\n                    result.push(getMemberNameOfSignature(this.signatures[i]));\n                    if (getPrettyTypeName) {\n                        break;\n                    }\n                }\n            }\n\n            if (getPrettyTypeName && len > 1) {\n                var lastMemberName = <MemberNameArray>result[result.length - 1];\n                var overloadString = \" (+ \" + ((this.definitionSignature != null) ? len - 2 : len - 1) + \" overload(s))\";\n                lastMemberName.add(MemberName.create(overloadString));\n            }\n\n            return result;\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): SignatureGroup {\n            var result = new SignatureGroup();\n            if (this.signatures) {\n                for (var i = 0, len = this.signatures.length; i < len; i++) {\n                    result.addSignature(this.signatures[i].specializeType(pattern, replacement, checker));\n                }\n            }\n            return result;\n        }\n\n        // verifies that signatures are\n        //  - unique within a given group\n        //  - compatible with the declaration signature\n        public verifySignatures(checker: TypeChecker) {\n\n            var len = 0;\n            \n            // TODO: verify no signature pair with identical parameters\n            if (this.signatures && ((len = this.signatures.length) > 0)) {\n                \n                for (var i = 0; i < len; i++) {\n                    \n                    for (var j = i + 1; j < len; j++) {\n                        // next check for equivalence between overloads - no two can be exactly the same                     \n                        if (this.signatures[i].declAST && this.signatures[j].declAST &&\n                            (hasFlag(this.signatures[i].declAST.getFunctionFlags(), FunctionFlags.Signature) && hasFlag(this.signatures[j].declAST.getFunctionFlags(), FunctionFlags.Signature)) &&\n                            checker.signaturesAreIdentical(this.signatures[i], this.signatures[j])) {\n                            checker.errorReporter.simpleError(this.signatures[i].declAST, (this.signatures[i].declAST && this.signatures[i].declAST.name) ? \"Signature for \'\" + this.signatures[i].declAST.name.actualText + \"\' is duplicated\" :\"Signature is duplicated\");\n                        }\n                    }\n                    \n                    // finally, ensure that the definition is assignable to each signature\n                    if (this.definitionSignature) {\n                        if (!checker.signatureIsAssignableToTarget(this.definitionSignature, this.signatures[i])) {\n                            checker.errorReporter.simpleError(this.signatures[i].declAST, \"Overload signature is not compatible with function definition\");\n                        }\n                    }\n                }\n            }\n        }\n\n        public typeCheck(checker: TypeChecker, ast: AST, hasConstruct:bool) {\n            \n            if (this.hasBeenTypechecked) {\n                return;\n            }\n            \n            // set here to prevent us from recursively invoking typeCheck again\n            this.hasBeenTypechecked = true;\n            \n            var len = 0;\n            \n            if (this.signatures && ((len = this.signatures.length) > 0)) {\n                \n                // first, typecheck each signature\n                for (var i = 0; i < len; i++) {\n\n                    if (!hasConstruct && !this.definitionSignature && this.signatures[i].declAST && /*this.signatures[i].declAST.isOverload && */!hasFlag(this.signatures[i].declAST.getFunctionFlags(), FunctionFlags.Ambient)) {\n                        checker.errorReporter.simpleError(this.signatures[i].declAST, \"Overload declaration lacks definition\");\n                    }\n\n                    // If we\'re typechecking a constructor via one of its overloads, ensure that the outer class is typechecked, since we need to validate its inheritance properties\n                    // to properly check that \'super\' is being used correctly\n                    if (this.signatures[i].declAST && this.signatures[i].declAST.isConstructor && this.signatures[i].declAST.classDecl && this.signatures[i].declAST.classDecl.type.symbol.typeCheckStatus == TypeCheckStatus.NotStarted) {\n                        checker.typeFlow.typeCheck(this.signatures[i].declAST.classDecl);\n                    }\n\n                    checker.typeFlow.typeCheck(this.signatures[i].declAST);\n                }\n\n                this.verifySignatures(checker);\n            }\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum TypeCheckStatus {\n        NotStarted,\n        Started,\n        Finished,\n    }\n\n    // For lexically-scoped constructs\n    export function aLexicallyEnclosesB(a: Symbol, b: Symbol) {\n        if (a.declAST && b && b.declAST && a.declAST.nodeType === NodeType.FuncDecl) {\n            return a.declAST.minChar <= b.declAST.minChar && a.declAST.limChar >= b.declAST.limChar;\n        }\n        else {\n            return false;\n        }\n    }\n\n    export function aEnclosesB(a: Symbol, b: Symbol) {\n        while (a.container) {\n            if (a === b || aLexicallyEnclosesB(a.container, b)) {\n                return true;\n            }\n            a = a.container;\n        }\n        return false;\n    }\n\n    export interface PhasedTypecheckObject {\n        typeCheckStatus: TypeCheckStatus;\n    }\n\n    export class Symbol {\n        public bound = false;\n        public container: Symbol;\n        public instanceScope(): SymbolScope { return null; }\n        public isVariable() { return false; }\n        public isMember() { return false; }\n        public isInferenceSymbol() { return false; }\n        public isWith() { return false; }\n        public writeable() { return false; }\n        public isType(): bool { return false; }\n        public getType(): Type { return null; }\n        public flags: SymbolFlags = SymbolFlags.None;\n        public refs: Identifier[];\n        public isAccessor() { return false; }\n        public isObjectLitField = false;\n\n        public declAST: AST = null;\n        public declModule: ModuleDeclaration = null;  // if child of module, this is the module that declared it\n\n        public passSymbolCreated: number = CompilerDiagnostics.analysisPass;\n\n        constructor(public name: string,\n                    public location: number,\n                    public length: number,\n                    public fileName: string) {\n        }\n\n        public isInstanceProperty() {\n            return hasFlag(this.flags, SymbolFlags.Property) && (!hasFlag(this.flags, SymbolFlags.ModuleMember));\n        }\n\n        public getTypeName(scope: SymbolScope): string {\n            return this.getTypeNameEx(scope).toString();\n        }\n        \n        public getTypeNameEx(scope: SymbolScope): MemberName {\n            return MemberName.create(this.toString());\n        }\n\n        public getOptionalNameString() {\n            return hasFlag(this.flags, SymbolFlags.Optional) ? \"?\" : \"\";\n        }\n\n        public pathToRoot() {\n            var path: Symbol[] = [];\n            var node = this;\n            while (node && (node.name != globalId)) {\n                path[path.length] = node;\n                node = node.container;\n            }\n            return path;\n        }\n\n        public findCommonAncestorPath(b: Symbol): Symbol[] {\n            if (this.container === null) {\n                return [];\n            }\n            var aPath = this.container.pathToRoot();\n            var bPath: Symbol[];\n            if (b) {\n                bPath = b.pathToRoot();\n            }\n            else {\n                bPath = [];\n            }\n            var commonNodeIndex = -1;\n            for (var i = 0, aLen = aPath.length; i < aLen; i++) {\n                var aNode = aPath[i];\n                for (var j = 0, bLen = bPath.length; j < bLen; j++) {\n                    var bNode = bPath[j];\n                    if (aNode === bNode) {\n                        commonNodeIndex = i;\n                        break;\n                    }\n                }\n                if (commonNodeIndex >= 0) {\n                    break;\n                }\n            }\n            if (commonNodeIndex >= 0) {\n                return aPath.slice(0, commonNodeIndex);\n            }\n            else {\n                return aPath;\n            }\n        }\n\n        // Gets the pretty Name for the symbol withing the scope\n        public getPrettyName(scopeSymbol: Symbol) {\n            return this.name;\n        }\n\n        public scopeRelativeName(scope: SymbolScope): string {\n            if (scope === null) {\n                return this.getPrettyName(null) + this.getOptionalNameString();\n            }\n            var lca = this.findCommonAncestorPath(scope.container);\n            var builder = \"\";\n            for (var i = 0, len = lca.length; i < len; i++) {\n                var prettyName = lca[i].getPrettyName(i === len - 1 ? scope.container : lca[i + 1]);\n                builder = prettyName + \".\" + builder;\n            }\n            builder += this.getPrettyName(len === 0 ? scope.container : lca[0]) + this.getOptionalNameString();\n            return builder;\n        }\n\n        public fullName(scope?: SymbolScope): string {\n            var scopeSymbol = !scope ? null : scope.container;\n            var scopeRootPath: Symbol[] = !scopeSymbol ? [] : scopeSymbol.pathToRoot();\n            var dynamicModuleRoot: Symbol = null;\n            if (scopeRootPath.length > 0 && scopeRootPath[scopeRootPath.length - 1].declAST &&\n                scopeRootPath[scopeRootPath.length - 1].declAST.nodeType === NodeType.ModuleDeclaration &&\n                (<ModuleDeclaration>scopeRootPath[scopeRootPath.length - 1].declAST).isWholeFile()) {\n                dynamicModuleRoot = scopeRootPath[scopeRootPath.length - 1];\n            }\n            var builder = this.getPrettyName(scopeSymbol);\n            var ancestor = this.container;\n            while (ancestor && (ancestor.name != globalId) && ancestor != dynamicModuleRoot) {\n                builder = ancestor.getPrettyName(scopeSymbol) + \".\" + builder;\n                ancestor = ancestor.container;\n            }\n            return builder;\n        }\n\n        public isExternallyVisible(checker: TypeChecker) {\n            // Global module is not hidden\n            if (this === checker.gloMod) {\n                return true;\n            }\n\n            // private symbol\n            if (hasFlag(this.flags, SymbolFlags.Private)) {\n                return false;\n            }\n\n            // If the current container is not exported\n            // If its in global - it is visible, otherwise it isn\'t\n            if (!hasFlag(this.flags, SymbolFlags.Exported)) {\n                return this.container === checker.gloMod;\n            }\n\n            // It is visible if its container is visible too\n            return this.container.isExternallyVisible(checker);\n        }\n\n        public visible(scope: SymbolScope, checker: TypeChecker) {\n            if (checker === null || this.container === checker.gloMod) {\n                return true;\n            }\n\n            if (hasFlag(this.flags, SymbolFlags.ModuleMember)) {\n\n                if (hasFlag(this.flags, SymbolFlags.Exported)) {\n                    if (!hasFlag(this.flags, SymbolFlags.Private)) {\n                        return true;\n                    }\n                    else {\n                        return aEnclosesB(this, scope.container);\n                    }\n                }\n                else {\n                    // REVIEW:\n                    // Note that in the scope-assignment and binding phases,\n                    // currentModDecl will point to the \"master\" module decl,\n                    // and not necessarily the one that the symbol in question\n                    // was declared in.\n                    // That\'s ok - there\'s no harm done in attributing the symbol\n                    // to the master mod decl in either of those phases, so long\n                    // as we reference the actual module fragment of declaration\n                    // during typecheck.  Doing this also prevents us from printing\n                    // multiple error messages if the symbol is not visible.\n                    return checker && (checker.currentModDecl === this.declModule) ||\n                                                (checker.currentModDecl &&\n                                                    checker.currentModDecl.mod &&\n                                                    checker.currentModDecl.mod.symbol &&\n                                                    this.declModule &&\n                                                    this.declModule.mod &&\n                                                    this.declModule.mod.symbol &&\n                                                    aEnclosesB(checker.currentModDecl.mod.symbol, this.declModule.mod.symbol));\n                }\n            }\n            else {\n                // field or method\n                var isFunction = this.declAST && this.declAST.nodeType === NodeType.FuncDecl;\n                var isMethod = isFunction && (<FuncDecl>this.declAST).isMethod();\n                var isStaticFunction = isFunction && hasFlag((<FuncDecl>this.declAST).getFunctionFlags(), FunctionFlags.Static)\n                var isPrivateMethod = isMethod && hasFlag((<FuncDecl>this.declAST).getFunctionFlags(), FunctionFlags.Private);\n                var isAlias = this.isType() && (<TypeSymbol>this).aliasLink;\n\n                if (this.isMember() || isMethod || isStaticFunction || isAlias) {\n                    if (hasFlag(this.flags, SymbolFlags.Private) || isPrivateMethod) {\n                        if (scope.container === null && this.container != scope.container) {\n                            return false; // it\'s an inner member being accessed by the global scope\n                        }\n                        else {\n                            return this.container === null ? true : aEnclosesB(scope.container, this.container);\n                        }\n                    }\n                    else {\n                        return true;\n                    }\n                }\n                else if (this.container) {\n                    return aEnclosesB(this, scope.container);\n                }\n                else {\n                    return true;\n                }\n            }\n        }\n\n        public addRef(identifier: Identifier) {\n            if (!this.refs) {\n                this.refs = [];\n            }\n            this.refs[this.refs.length] = identifier;\n        }\n\n        public toString() {\n            if (this.name) {\n                return this.name;\n            }\n            else {\n                return \"_anonymous\";\n            }\n        }\n\n        public print(outfile) {\n            outfile.Write(this.toString());\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            throw new Error(\"please implement in derived class\");\n        }\n\n        public setType(type: Type) {\n            throw new Error(\"please implement in derived class\");\n        }\n\n        public kind(): SymbolKind {\n            throw new Error(\"please implement in derived class\");\n        }\n\n        public getInterfaceDeclFromSymbol(checker: TypeChecker) {\n            if (this.declAST != null) {\n                if (this.declAST.nodeType === NodeType.InterfaceDeclaration) {\n                    return <InterfaceDeclaration>this.declAST;\n                } else if (this.container != null && this.container != checker.gloMod && this.container.declAST.nodeType === NodeType.InterfaceDeclaration) {\n                    return <InterfaceDeclaration>this.container.declAST;\n                }\n            }\n\n            return null;\n        }\n\n        public getVarDeclFromSymbol() {\n            if (this.declAST != null && this.declAST.nodeType === NodeType.VarDecl) {\n                return <VarDecl>this.declAST;\n            }\n\n            return null;\n        }\n\n        public getDocComments() : Comment[] {\n            if (this.declAST != null) {\n                return this.declAST.getDocComments();\n            }\n\n            return [];\n        }\n\n        public isStatic() {\n            return hasFlag(this.flags, SymbolFlags.Static);\n        }\n    }\n\n    export class ValueLocation {\n        public symbol: Symbol;\n        public typeLink: TypeLink;\n    }\n\n    export class InferenceSymbol extends Symbol {\n        constructor (name: string, location: number, length: number, fileName: string) {\n            super(name, location, length, fileName);\n        }\n\n        public typeCheckStatus = TypeCheckStatus.NotStarted;\n        public isInferenceSymbol() { return true; }\n        public transferVarFlags(varFlags: VariableFlags) {\n            if (hasFlag(varFlags, VariableFlags.Ambient)) {\n                this.flags |= SymbolFlags.Ambient;\n            }\n            if (hasFlag(varFlags, VariableFlags.Constant)) {\n                this.flags |= SymbolFlags.Constant;\n            }\n            if (hasFlag(varFlags, VariableFlags.Static)) {\n                this.flags |= SymbolFlags.Static;\n            }\n            if (hasFlag(varFlags, VariableFlags.Property)) {\n                this.flags |= SymbolFlags.Property;\n            }\n            if (hasFlag(varFlags, VariableFlags.Private)) {\n                this.flags |= SymbolFlags.Private;\n            }\n            if (hasFlag(varFlags, VariableFlags.Public)) {\n                this.flags |= SymbolFlags.Public;\n            }\n            if (hasFlag(varFlags, VariableFlags.Exported)) {\n                this.flags |= SymbolFlags.Exported;\n            }\n        }\n    }\n\n    export class TypeSymbol extends InferenceSymbol {\n        public additionalLocations: number[];\n        public expansions: Type[] = []; // For types that may be \"split\", keep track of the subsequent definitions\n        public expansionsDeclAST: AST[] = [];\n        public isDynamic = false;\n        public onlyReferencedAsTypeRef: bool;\n\n        constructor(locName: string, location: number, length: number, fileName: string, public type: Type, optimizeModuleCodeGen: bool) {\n            super(locName, location, length, fileName);\n            this.prettyName = this.name;\n            this.onlyReferencedAsTypeRef = optimizeModuleCodeGen;\n        }\n\n        public addLocation(loc: number) {\n            if (!this.additionalLocations) {\n                this.additionalLocations = [];\n            }\n            this.additionalLocations[this.additionalLocations.length] = loc;\n        }\n        public isMethod = false;\n        public aliasLink:ImportDeclaration = null;\n        public kind() { return SymbolKind.Type; }\n        public isType(): bool { return true; }\n        public getType() { return this.type; }\n        public prettyName: string;\n\n        public getTypeNameEx(scope: SymbolScope) {\n            return this.type.getMemberTypeNameEx(this.name ? this.name + this.getOptionalNameString() : \"\", false, false, scope);\n        }\n\n        public instanceScope(): SymbolScope {\n            // Don\'t use the constructor scope for a class body or methods - use the contained scope\n            if (!(this.type.typeFlags & TypeFlags.IsClass) && this.type.isClass()) {\n                return this.type.instanceType.constructorScope;\n            }\n            else {\n                return this.type.containedScope;\n            }\n        }\n        // corresponding instance type if this is a class\n        public instanceType: Type;\n\n        public toString() {\n            var result = this.type.getTypeName();\n            if (this.name) {\n                result = this.name + \":\" + result;\n            }\n            return result;\n        }\n\n        public isClass() { return this.instanceType != null; }\n        public isFunction() { return this.declAST != null && this.declAST.nodeType === NodeType.FuncDecl; }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            if (this.type === pattern) {\n                return replacement.symbol;\n            }\n            else {\n                var replType = this.type.specializeType(pattern, replacement, checker, false);\n                if (replType != this.type) {\n                    var result = new TypeSymbol(this.name, -1, 0, unknownLocationInfo.fileName, replType, checker.compilationSettings.optimizeModuleCodeGen);\n                    return result;\n                }\n                else {\n                    return this;\n                }\n            }\n        }\n\n        // Gets the pretty name of the symbol with respect to symbol of the scope (scopeSymbol)\n        // searchTillRoot specifies if the name need to searched in the root path of the scope\n        public getPrettyName(scopeSymbol: Symbol) {\n            if (!!scopeSymbol && isQuoted(this.prettyName) && this.type.isModuleType()) {\n                // Its a dynamic module - and need to be specialized with the scope\n                // Check in exported module members in each scope\n                var symbolPath = scopeSymbol.pathToRoot();\n                var prettyName = this.getPrettyNameOfDynamicModule(symbolPath);\n                if (prettyName != null) {\n                    return prettyName.name;\n                }\n            }\n\n            return this.prettyName;\n        }\n\n        public getPrettyNameOfDynamicModule(scopeSymbolPath: Symbol[]) {\n            var scopeSymbolPathLength = scopeSymbolPath.length;\n            var externalSymbol: { name: string; symbol: Symbol; } = null;\n            var moduleType: ModuleType;\n\n            if (scopeSymbolPath.length > 0 &&\n                scopeSymbolPath[scopeSymbolPathLength - 1].getType().isModuleType() &&\n                (<TypeSymbol>scopeSymbolPath[scopeSymbolPathLength - 1]).isDynamic) {\n\n                // Check if submodule is dynamic\n                if (scopeSymbolPathLength > 1 &&\n                    scopeSymbolPath[scopeSymbolPathLength - 2].getType().isModuleType() &&\n                    (<TypeSymbol>scopeSymbolPath[scopeSymbolPathLength - 2]).isDynamic) {\n                    moduleType = <ModuleType>scopeSymbolPath[scopeSymbolPathLength - 2].getType();\n                    externalSymbol = moduleType.findDynamicModuleName(this.type);\n\n                }\n\n                if (externalSymbol === null) {\n                    // Check in this module\n                    moduleType = <ModuleType>scopeSymbolPath[scopeSymbolPathLength - 1].getType();\n                    externalSymbol = moduleType.findDynamicModuleName(this.type);\n                }\n            }\n\n            return externalSymbol;\n        }\n\n        public getDocComments(): Comment[]{\n            var comments : Comment[] = [];\n            if (this.declAST != null) {\n                comments = comments.concat(this.declAST.getDocComments());\n            }\n\n            for (var i = 0; i < this.expansionsDeclAST.length; i++) {\n                comments = comments.concat(this.expansionsDeclAST[i].getDocComments());\n            }\n\n            return comments;\n        }\n    }\n\n    export class WithSymbol extends TypeSymbol {\n        constructor(location: number, fileName: string, withType: Type, optimizeModuleCodeGen: bool) {\n            super(\"with\", location, 4, fileName, withType, optimizeModuleCodeGen);\n        }\n        public isWith() { return true; }\n    }\n\n    export class FieldSymbol extends InferenceSymbol {\n        public name: string;\n        public location: number;\n\n        constructor (name: string, location: number, fileName: string, public canWrite: bool,\n                      public field: ValueLocation) {\n\n            super(name, location, name.length, fileName);\n            this.name = name;\n            this.location = location;\n        }\n        public kind() { return SymbolKind.Field; }\n        public writeable() { return this.isAccessor() ? this.setter != null : this.canWrite; }\n        public getType() { return this.field.typeLink.type; }\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.field.typeLink.type ? this.field.typeLink.type.getScopedTypeNameEx(scope) : MemberName.create(\"any\"), this.name + this.getOptionalNameString() + \": \", \"\");\n        }\n\n        public isMember() { return true; }\n        public setType(type: Type) {\n            this.field.typeLink.type = type;\n        }\n\n        public getter: TypeSymbol = null;\n        public setter: TypeSymbol = null;\n        public hasBeenEmitted = false; // since getters and setters are emitted together, need to track if one has been emitted\n\n        public isAccessor() { return this.getter != null || this.setter != null; }\n\n        public isVariable() { return true; }\n        public toString() { return this.getTypeNameEx(null).toString(); }\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            var rType = this.field.typeLink.type.specializeType(pattern, replacement, checker, false);\n            if (rType != this.field.typeLink.type) {\n                var fieldDef = new ValueLocation();\n                var result = new FieldSymbol(this.name, 0, checker.locationInfo.fileName,\n                                           this.canWrite, fieldDef);\n                result.flags = this.flags;\n                fieldDef.symbol = result;\n                fieldDef.typeLink = new TypeLink();\n                result.setType(rType);\n                result.typeCheckStatus = TypeCheckStatus.Finished;\n                return result;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public getDocComments(): Comment[] {\n            if (this.getter != null || this.setter != null) {\n                var comments : Comment[] = [];\n                if (this.getter != null) {\n                    comments = comments.concat(this.getter.getDocComments());\n                }\n                if (this.setter != null) {\n                    comments = comments.concat(this.setter.getDocComments());\n                }\n                return comments;\n            }\n            else if (this.declAST != null) {\n                return this.declAST.getDocComments();\n            }\n\n            return [];\n        }\n\n    }\n\n    export class ParameterSymbol extends InferenceSymbol {\n        public name: string;\n        public location: number;\n        private paramDocComment: string = null;\n        public funcDecl: AST = null;\n        \n        constructor (name: string, location: number, fileName: string,\n                          public parameter: ValueLocation) {\n            super(name, location, name.length, fileName);\n\n            this.name = name;\n            this.location = location;\n        }\n        public kind() { return SymbolKind.Parameter; }\n        public writeable() { return true; }\n        public getType() { return this.parameter.typeLink.type; }\n        public setType(type: Type) {\n            this.parameter.typeLink.type = type;\n        }\n        public isVariable() { return true; }\n        public argsOffset = (-1);\n        public isOptional() {\n            if (this.parameter && this.parameter.symbol && this.parameter.symbol.declAST) {\n                return (<ArgDecl>this.parameter.symbol.declAST).isOptional;\n            }\n            else {\n                return false;\n            }\n        }\n\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.getType().getScopedTypeNameEx(scope), this.name + (this.isOptional() ? \"?\" : \"\") + \": \", \"\");\n        }\n\n        public toString() { return this.getTypeNameEx(null).toString(); }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker): Symbol {\n            var rType = this.parameter.typeLink.type.specializeType(pattern, replacement, checker, false);\n            if (this.parameter.typeLink.type != rType) {\n                var paramDef = new ValueLocation();\n                var result = new ParameterSymbol(this.name, 0, checker.locationInfo.fileName,\n                                               paramDef);\n                paramDef.symbol = result;\n                result.setType(rType);\n                return result;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public getParameterDocComments() {\n            if (!this.paramDocComment) {\n                var parameterComments: string[] = [];\n                if (this.funcDecl) {\n                    var fncDocComments = this.funcDecl.getDocComments();\n                    var paramComment = Comment.getParameterDocCommentText(this.name, fncDocComments);\n                    if (paramComment != \"\") {\n                        parameterComments.push(paramComment);\n                    }\n                }\n                var docComments = TypeScript.Comment.getDocCommentText(this.getDocComments());\n                if (docComments != \"\") {\n                    parameterComments.push(docComments);\n                }\n                \n                this.paramDocComment = parameterComments.join(\"\\n\");\n            }\n\n            return this.paramDocComment;\n        }\n\n        public fullName(): string {\n            return this.name;\n        }\n    }\n\n    export class VariableSymbol extends InferenceSymbol {\n        constructor (name: string, location: number, fileName: string, public variable: ValueLocation) {\n            super(name, location, name.length, fileName);\n        }\n\n        public kind() { return SymbolKind.Variable; }\n        public writeable() { return true; }\n        public getType() { return this.variable.typeLink.type; }\n        public getTypeNameEx(scope: SymbolScope) {\n            return MemberName.create(this.getType().getScopedTypeNameEx(scope), this.name + \": \", \"\");\n        }\n\n        public setType(type: Type) {\n            this.variable.typeLink.type = type;\n        }\n        public isVariable() { return true; }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    // private members are private to the scope\n    // public members are public to the scope\n    export class ScopedMembers {\n\n        public allMembers: IHashTable;\n        public publicMembers: IHashTable;\n        public privateMembers: IHashTable;\n\n        constructor (public dualMembers: DualStringHashTable) { \n            this.allMembers = this.dualMembers;\n            this.publicMembers = this.dualMembers.primaryTable;\n            this.privateMembers = this.dualMembers.secondaryTable;\n        }\n\n        // add a public member\n        public addPublicMember(key: string, data) { return this.dualMembers.primaryTable.add(key, data); }\n\n        // add a private member \n        public addPrivateMember(key: string, data) { return this.dualMembers.secondaryTable.add(key, data); }\n    }\n\n    export enum SymbolKind {\n        None,\n        Type,\n        Field,\n        Parameter,\n        Variable,\n    }\n\n    export class SymbolScope {\n        constructor (public container: Symbol) { }\n        public printLabel() { return \"base\"; }\n        public getAllSymbolNames(members: bool): string[]{\n            return [\"please\", \"implement\", \"in\", \"derived\", \"classes\"];\n        }\n        public getAllTypeSymbolNames(members: bool): string[]{\n            return [\"please\", \"implement\", \"in\", \"derived\", \"classes\"];\n        }\n        public getAllValueSymbolNames(members: bool): string[]{\n            return [\"please\", \"implement\", \"in\", \"derived\", \"classes\"];\n        }\n        // advanced search using a filter\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find in this immediate scope\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find in value namespace \n        public find(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // find symbol that supplies an implementation\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        // restrict the search to ambient values\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol { return null; }\n        public print(outfile: ITextWriter) {\n            if (this.container) {\n                outfile.WriteLine(this.printLabel() + \" scope with container: \" + this.container.name + \"...\");\n            }\n            else {\n                outfile.WriteLine(this.printLabel() + \" scope...\");\n            }\n        }\n\n        public enter(container: Symbol, ast: AST, symbol: Symbol, errorReporter: ErrorReporter, publicOnly: bool,\n            typespace: bool, ambient: bool): void {\n            throw new Error(\"please implement in derived class\");\n        }\n\n        public getTable(): IHashTable {\n            throw new Error(\"please implement in derived class\");\n        }\n    }\n\n    function symbolCanBeUsed(sym: Symbol, publicOnly) {\n        return publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                            (sym.declAST && sym.declAST.nodeType === NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).getFunctionFlags(), FunctionFlags.Private)))\n                          : true;\n    }\n\n    export class SymbolAggregateScope extends SymbolScope {\n        public printLabel() { return \"agg\"; }\n        public valueCache: IHashTable = null;\n        public valueImplCache: IHashTable = null;\n        public valueAmbientCache: IHashTable = null;\n        public typeCache: IHashTable = null;\n        public typeImplCache: IHashTable = null;\n        public typeAmbientCache: IHashTable = null;\n        public parents: SymbolScope[] = null;\n        public container: Symbol;\n\n        constructor (container: Symbol) {\n            super(container);\n            this.container = container;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var sym = this.parents[i].search(filter, name, publicOnly, typespace);\n                    if (sym) {\n                        if (filter.update(sym)) {\n                            return sym;\n                        }\n                    }\n                }\n            }\n            return filter.result;\n        }\n\n        public getAllSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllTypeSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    var parentResult = this.parents[i].getAllValueSymbolNames(members);\n                    if (parentResult) {\n                        result = result.concat(parentResult);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.parents) {\n                for (var i = 0; i < this.parents.length; i++) {\n                    this.parents[i].print(outfile);\n                }\n            }\n        }\n\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var implCache = this.valueImplCache;\n\n            if (typespace) {\n                implCache = this.typeImplCache;\n            }\n            if (implCache &&\n                ((sym = implCache.lookup(name)) != null) &&\n                (publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                                        (sym.declAST && sym.declAST.nodeType === NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).getFunctionFlags(), FunctionFlags.Private)))\n                                        : true)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym = this.parents[i].findImplementation(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (implCache) {\n                if (typespace) {\n                    this.typeImplCache = new StringHashTable();\n                    implCache = this.typeImplCache;\n                }\n                else {\n                    this.valueImplCache = new StringHashTable();\n                    implCache = this.valueImplCache;\n                }\n            }\n            implCache.add(name, sym);\n            return sym;\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var cache = this.valueCache;\n\n            if (typespace) {\n                cache = this.typeCache;\n            }\n            if (cache &&\n                ((sym = cache.lookup(name)) != null) &&\n                (publicOnly ? !(hasFlag(sym.flags, SymbolFlags.Private) ||\n                                        (sym.declAST && sym.declAST.nodeType === NodeType.FuncDecl && hasFlag((<FuncDecl>sym.declAST).getFunctionFlags(), FunctionFlags.Private)))\n                                        : true)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym = this.parents[i].find(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (cache === null) {\n                if (typespace) {\n                    this.typeCache = new StringHashTable();\n                    cache = this.typeCache;\n                }\n                else {\n                    this.valueCache = new StringHashTable();\n                    cache = this.valueCache;\n                }\n            }\n            cache.add(name, sym);\n            return sym;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var i = 0;\n            var cache = this.valueAmbientCache;\n            if (typespace) {\n                cache = this.typeAmbientCache;\n            }\n            if (cache && ((sym = cache.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parents) {\n                for (i = 0; i < this.parents.length; i++) {\n                    sym = this.parents[i].findAmbient(name, publicOnly, typespace);\n                    if (sym) {\n                        break;\n                    }\n                }\n            }\n            if (cache === null) {\n                if (typespace) {\n                    this.typeAmbientCache = new StringHashTable();\n                    cache = this.typeAmbientCache;\n                }\n                else {\n                    this.valueAmbientCache = new StringHashTable();\n                    cache = this.valueAmbientCache;\n                }\n            }\n            cache.add(name, sym);\n            return sym;\n        }\n\n        public addParentScope(parent: SymbolScope): void {\n            if (this.parents === null) {\n                this.parents = [];\n            }\n            this.parents[this.parents.length] = parent;\n        }\n    }\n\n    export class SymbolTableScope extends SymbolScope {\n        public container: Symbol;\n\n        constructor(public valueMembers: ScopedMembers,\n                            public ambientValueMembers: ScopedMembers,\n                            public enclosedTypes: ScopedMembers,\n                            public ambientEnclosedTypes: ScopedMembers,\n                            container: Symbol)\n        {\n            super(container);\n            this.container = container;\n        }\n\n        public printLabel() { return \"table\"; }\n\n        public getAllSymbolNames(members: bool): string[]{\n            var result = this.getAllTypeSymbolNames(members);\n\n            return result.concat(this.getAllValueSymbolNames(members));\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result = [];\n            if (this.ambientEnclosedTypes) {\n                result = result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());\n            }\n            if (this.enclosedTypes) {\n                result = result.concat(this.enclosedTypes.allMembers.getAllKeys());\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result = [];\n            if (this.ambientValueMembers) {\n                result = result.concat(this.ambientValueMembers.allMembers.getAllKeys());\n            }\n            if (this.valueMembers) {\n                result = result.concat(this.valueMembers.allMembers.getAllKeys());\n            }\n            return result;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            var sym = this.find(name, publicOnly, typespace);\n            filter.update(sym);\n            return filter.result;\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var table: IHashTable = null;\n            var ambientTable: IHashTable = null;\n\n            if (typespace) {\n                table = (this.enclosedTypes === null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes === null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            else {\n                table = (this.valueMembers === null) ? null :\n                                publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n                ambientTable = (this.ambientValueMembers === null) ? null :\n                                    publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            }\n            var s: Symbol;\n            \n            if (ambientTable) {\n                s = ambientTable.lookup(name);\n                if (s) { return s; }\n            }\n            if (table) {\n                s = table.lookup(name);\n                if (s) { return s; }\n            }\n\n            return null;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var ambientTable = (this.ambientValueMembers === null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                ambientTable = (this.ambientEnclosedTypes === null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable) {\n                var s = ambientTable.lookup(name);\n                if (s) { return s; }\n            }\n\n            return null;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.ambientValueMembers) {\n                this.ambientValueMembers.allMembers.map((key, sym, context) =>\n                    outfile.WriteLine(\"  \" + key), null);\n            }\n            if (this.valueMembers) {\n                this.valueMembers.allMembers.map((key, sym, context) =>\n                    outfile.WriteLine(\"  \" + key), null);\n            }\n            if (this.ambientEnclosedTypes) {\n                this.ambientEnclosedTypes.allMembers.map((key, sym, context) =>\n                    outfile.WriteLine(\"  \" + key), null);\n            }\n            if (this.enclosedTypes) {\n                this.enclosedTypes.allMembers.map((key, sym, context) =>\n                    outfile.WriteLine(\"  \" + key), null);\n            }\n        }\n\n        public findImplementation(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = this.find(name, publicOnly, typespace);\n            if (sym) {\n                if (sym.kind() === SymbolKind.Type) {\n                    var typeSym = <TypeSymbol>sym;\n                    if (!typeSym.type.hasImplementation()) {\n                        sym = null;\n                    }\n                }\n                else if (sym.container) {\n                    if (sym.container.kind() === SymbolKind.Type) {\n                        var ctypeSym = <TypeSymbol>sym.container;\n                        if (!ctypeSym.type.hasImplementation()) {\n                            sym = null;\n                        }\n                    }\n                }\n            }\n            return sym;\n        }\n\n        public getTable() {\n            return this.valueMembers.publicMembers;\n        }\n    }\n\n    export class SymbolScopeBuilder extends SymbolScope {\n        public container: Symbol;\n        \n        constructor (public valueMembers: ScopedMembers,\n                    public ambientValueMembers: ScopedMembers,\n                    public enclosedTypes: ScopedMembers,\n                    public ambientEnclosedTypes: ScopedMembers,\n                    public parent: SymbolScope,\n                    container: Symbol)\n        {\n            super(container);\n            this.container = container;\n        }\n\n        public printLabel() { return \"builder\"; }\n        public getAllSymbolNames(members: bool): string[]{\n            var result: string[] = this.getAllTypeSymbolNames(members);\n            return result.concat(this.getAllValueSymbolNames(members));\n        }\n\n        public getAllTypeSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.ambientEnclosedTypes) {\n                result = result.concat(this.ambientEnclosedTypes.allMembers.getAllKeys());\n            }\n            if (this.enclosedTypes) {\n                result = result.concat(this.enclosedTypes.allMembers.getAllKeys());\n            }\n            if (!members && this.parent) {\n                var parentResult = this.parent.getAllTypeSymbolNames(members);\n                if (parentResult) {\n                    result = result.concat(parentResult);\n                }\n            }\n            return result;\n        }\n\n        public getAllValueSymbolNames(members: bool): string[]{\n            var result: string[] = [];\n            if (this.ambientValueMembers) {\n                result = result.concat(this.ambientValueMembers.allMembers.getAllKeys());\n            }\n            if (this.valueMembers) {\n                result = result.concat(this.valueMembers.allMembers.getAllKeys());\n            }\n            if (!members && this.parent) {\n                var parentResult = this.parent.getAllValueSymbolNames(members);\n                if (parentResult) {\n                    result = result.concat(parentResult);\n                }\n            }\n            return result;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool) {\n            var sym: Symbol = null;\n            var table = (this.valueMembers === null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers === null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes === null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes === null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable) {\n                if ((sym = ambientTable.lookup(name)) != null) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n                }\n            }\n            if (table) {\n                if ((sym = table.lookup(name)) != null) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n                }\n            }\n            if (this.parent) {\n                sym = this.parent.search(filter, name, publicOnly, typespace);\n                if (sym) {\n                    if (filter.update(sym)) {\n                        return sym;\n                    }\n                }\n            }\n            return filter.result;\n        }\n\n        public print(outfile: ITextWriter) {\n            super.print(outfile);\n            if (this.ambientValueMembers) {\n                this.ambientValueMembers.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine(\"  \" + key);\n                }, null);\n            }\n            if (this.valueMembers) {\n                this.valueMembers.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine(\"  \" + key);\n                }, null);\n            }\n            if (this.ambientEnclosedTypes) {\n                this.ambientEnclosedTypes.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine(\"  \" + key);\n                }, null);\n            }\n            if (this.enclosedTypes) {\n                this.enclosedTypes.allMembers.map(function (key, s, context) {\n                    var sym = <Symbol>s;\n                    outfile.WriteLine(\"  \" + key);\n                }, null);\n            }\n            if (this.parent) {\n                this.parent.print(outfile);\n            }\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var table = (this.valueMembers === null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers === null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes === null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes === null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable && ((sym = ambientTable.lookup(name)) != null)) {\n                return sym;\n            }\n            if (table && ((sym = table.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parent) {\n                return this.parent.find(name, publicOnly, typespace);\n            }\n            return null;\n        }\n\n        public findAmbient(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var ambientTable = (this.ambientValueMembers === null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                ambientTable = (this.ambientEnclosedTypes === null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (ambientTable && ((sym = ambientTable.lookup(name)) != null)) {\n                return sym;\n            }\n            if (this.parent) {\n                return this.parent.findAmbient(name, publicOnly, typespace);\n            }\n            return null;\n        }\n\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym: Symbol = null;\n            var table = (this.valueMembers === null) ? null :\n                            publicOnly ? this.valueMembers.publicMembers : this.valueMembers.allMembers;\n            var ambientTable = (this.ambientValueMembers === null) ? null :\n                                publicOnly ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.allMembers;\n            if (typespace) {\n                table = (this.enclosedTypes === null) ? null :\n                            publicOnly ? this.enclosedTypes.publicMembers : this.enclosedTypes.allMembers;\n                ambientTable = (this.ambientEnclosedTypes === null) ? null :\n                                    publicOnly ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.allMembers;\n            }\n            if (table) {\n                if ((sym = table.lookup(name)) != null) {\n                    if (sym) { return sym; }\n                }\n            }\n            if (ambientTable) {\n                if ((sym = ambientTable.lookup(name)) != null) {\n                    if (sym) { return sym; }\n                }\n            }\n            return null;\n        }\n\n        public enter(container: Symbol, ast: AST, symbol: Symbol, errorReporter: ErrorReporter, insertAsPublic: bool, typespace: bool, ambient: bool): void {\n            var table = null;\n\n            if (ambient) {\n                if (typespace) {\n                    table = (this.ambientEnclosedTypes === null) ? null :\n                                    insertAsPublic ? this.ambientEnclosedTypes.publicMembers : this.ambientEnclosedTypes.privateMembers;\n                }\n                else {\n                    table = (this.ambientValueMembers === null) ? null :\n                                insertAsPublic ? this.ambientValueMembers.publicMembers : this.ambientValueMembers.privateMembers;\n                }\n            }\n            else {\n                if (typespace) {\n                    table = (this.enclosedTypes === null) ? null :\n                                insertAsPublic ? this.enclosedTypes.publicMembers : this.enclosedTypes.privateMembers;\n                }\n                else {\n                    table = (this.valueMembers === null) ? null :\n                                insertAsPublic ? this.valueMembers.publicMembers : this.valueMembers.privateMembers;\n                }\n            }\n\n            if (table) {\n                if (!table.add(symbol.name, symbol)) {\n                    errorReporter.duplicateIdentifier(ast, symbol.name);\n                }\n            }\n            else {\n                CompilerDiagnostics.Alert(\"YYYYY\");  // REVIEW: Surely we can do better than this...\n            }\n            symbol.container = container;\n        }\n\n        public getTable() { return this.valueMembers.allMembers; }\n    }\n\n    export class FilteredSymbolScope extends SymbolScope {\n        constructor (public scope: SymbolScope, container: Symbol, public filter: ScopeSearchFilter) {\n            super(container);\n        }\n        public print(outfile: ITextWriter) {\n            this.scope.print(outfile);\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool) {\n            this.filter.reset();\n            return this.scope.search(this.filter, name, publicOnly, typespace);\n        }\n        public findLocal(name: string, publicOnly: bool, typespace: bool) { return this.scope.findLocal(name, publicOnly, typespace); }\n    }\n\n    export class FilteredSymbolScopeBuilder extends SymbolScopeBuilder {\n        constructor (valueMembers: ScopedMembers, parent: SymbolScope, container: Symbol, public filter: (sym: Symbol) =>bool) {\n            super(valueMembers, null, null, null, parent, container);\n        }\n        public findLocal(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = super.findLocal(name, publicOnly, typespace);\n            if (sym) {\n                if (!this.filter(sym)) {\n                    return null;\n                }\n            }\n            return sym;\n        }\n\n        public search(filter: ScopeSearchFilter, name: string, publicOnly: bool, typespace: bool):Symbol {\n            throw new Error(\"please implement\");\n        }\n\n        public find(name: string, publicOnly: bool, typespace: bool): Symbol {\n            var sym = super.findLocal(name, publicOnly, typespace);\n            if (sym) {\n                if (!this.filter(sym)) {\n                    return null;\n                }\n            }\n            return super.find(name, publicOnly, typespace);\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export enum TokenID {\n        // Keywords\n        Any,\n        Bool,\n        Break,\n        Case,\n        Catch,\n        Class,\n        Const,\n        Continue,\n        Debugger,\n        Default,\n        Delete,\n        Do,\n        Else,\n        Enum,\n        Export,\n        Extends,\n        Declare,\n        False,\n        Finally,\n        For,\n        Function,\n        Constructor,\n        Get,\n        If,\n        Implements,\n        Import,\n        In,\n        InstanceOf,\n        Interface,\n        Let,\n        Module,\n        New,\n        Number,\n        Null,\n        Package,\n        Private,\n        Protected,\n        Public,\n        Return,\n        Set,\n        Static,\n        String,\n        Super,\n        Switch,\n        This,\n        Throw,\n        True,\n        Try,\n        TypeOf,\n        Var,\n        Void,\n        With,\n        While,\n        Yield,\n        // Punctuation\n        Semicolon,\n        OpenParen,\n        CloseParen,\n        OpenBracket,\n        CloseBracket,\n        OpenBrace,\n        CloseBrace,\n        Comma,\n        Equals,\n        PlusEquals,\n        MinusEquals,\n        AsteriskEquals,\n        SlashEquals,\n        PercentEquals,\n        AmpersandEquals,\n        CaretEquals,\n        BarEquals,\n        LessThanLessThanEquals,\n        GreaterThanGreaterThanEquals,\n        GreaterThanGreaterThanGreaterThanEquals,\n        Question,\n        Colon,\n        BarBar,\n        AmpersandAmpersand,\n        Bar,\n        Caret,\n        And,\n        EqualsEquals,\n        ExclamationEquals,\n        EqualsEqualsEquals,\n        ExclamationEqualsEquals,\n        LessThan,\n        LessThanEquals,\n        GreaterThan,\n        GreaterThanEquals,\n        LessThanLessThan,\n        GreaterThanGreaterThan,\n        GreaterThanGreaterThanGreaterThan,\n        Plus,\n        Minus,\n        Asterisk,\n        Slash,\n        Percent,\n        Tilde,\n        Exclamation,\n        PlusPlus,\n        MinusMinus,\n        Dot,\n        DotDotDot,\n        Error,\n        EndOfFile,\n        EqualsGreaterThan,\n        Identifier,\n        StringLiteral,\n        RegularExpressionLiteral,\n        NumberLiteral,\n        Whitespace,\n        Comment,\n        Lim,\n        LimFixed = EqualsGreaterThan,\n        LimKeyword = Yield,\n    }\n\n    export var tokenTable: TokenInfo[] = [];\n    export var nodeTypeTable: string[] = [];\n    export var nodeTypeToTokTable: number[] = [];\n    export var noRegexTable: bool[] = [];\n\n    noRegexTable[TokenID.Identifier] = true;\n    noRegexTable[TokenID.StringLiteral] = true;\n    noRegexTable[TokenID.NumberLiteral] = true;\n    noRegexTable[TokenID.RegularExpressionLiteral] = true;\n    noRegexTable[TokenID.This] = true;\n    noRegexTable[TokenID.PlusPlus] = true;\n    noRegexTable[TokenID.MinusMinus] = true;\n    noRegexTable[TokenID.CloseParen] = true;\n    noRegexTable[TokenID.CloseBracket] = true;\n    noRegexTable[TokenID.CloseBrace] = true;\n    noRegexTable[TokenID.True] = true;\n    noRegexTable[TokenID.False] = true;\n\n    export enum OperatorPrecedence {\n        None,\n        Comma,\n        Assignment,\n        Conditional,\n        LogicalOr,\n        LogicalAnd,\n        BitwiseOr,\n        BitwiseExclusiveOr,\n        BitwiseAnd,\n        Equality,\n        Relational,\n        Shift,\n        Additive,\n        Multiplicative,\n        Unary,\n        Lim\n    }\n\n    export class TokenInfo {\n        constructor(public binopPrecedence: number,\n                    public binopNodeType: number,\n                    public unopPrecedence: number,\n                    public unopNodeType: number,\n                    public text: string) {\n        }\n    }\n\n    function setTokenInfo(tokenId: TokenID, binopPrecedence: number,\n        binopNodeType: number, unopPrecedence: number, unopNodeType: number,\n        text: string) {\n        if (tokenId !== undefined) {\n            tokenTable[tokenId] = new TokenInfo(binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text);\n            if (binopNodeType != NodeType.None) {\n                nodeTypeTable[binopNodeType] = text;\n                nodeTypeToTokTable[binopNodeType] = tokenId;\n            }\n            if (unopNodeType != NodeType.None) {\n                nodeTypeTable[unopNodeType] = text;\n            }\n        }\n    }\n\n    setTokenInfo(TokenID.Any, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"any\");\n    setTokenInfo(TokenID.Bool, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"bool\");\n    setTokenInfo(TokenID.Break, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"break\");\n    setTokenInfo(TokenID.Case, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"case\");\n    setTokenInfo(TokenID.Catch, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"catch\");\n    setTokenInfo(TokenID.Class, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"class\");\n    setTokenInfo(TokenID.Const, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"const\");\n    setTokenInfo(TokenID.Continue, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"continue\");\n    setTokenInfo(TokenID.Debugger, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.Debugger, \"debugger\");\n    setTokenInfo(TokenID.Default, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"default\");\n    setTokenInfo(TokenID.Delete, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Delete, \"delete\");\n    setTokenInfo(TokenID.Do, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"do\");\n    setTokenInfo(TokenID.Else, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"else\");\n    setTokenInfo(TokenID.Enum, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"enum\");\n    setTokenInfo(TokenID.Export, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"export\");\n    setTokenInfo(TokenID.Extends, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"extends\");\n    setTokenInfo(TokenID.Declare, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"declare\");\n    setTokenInfo(TokenID.False, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"false\");\n    setTokenInfo(TokenID.Finally, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"finally\");\n    setTokenInfo(TokenID.For, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"for\");\n    setTokenInfo(TokenID.Function, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"function\");\n    setTokenInfo(TokenID.Constructor, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"constructor\");\n    setTokenInfo(TokenID.Get, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"get\");\n    setTokenInfo(TokenID.Set, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"set\");\n    setTokenInfo(TokenID.If, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"if\");\n    setTokenInfo(TokenID.Implements, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"implements\");\n    setTokenInfo(TokenID.Import, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"import\");\n    setTokenInfo(TokenID.In, OperatorPrecedence.Relational, NodeType.In, OperatorPrecedence.None, NodeType.None, \"in\");\n    setTokenInfo(TokenID.InstanceOf, OperatorPrecedence.Relational, NodeType.InstOf, OperatorPrecedence.None, NodeType.None, \"instanceof\");\n    setTokenInfo(TokenID.Interface, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"interface\");\n    setTokenInfo(TokenID.Let, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"let\");\n    setTokenInfo(TokenID.Module, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"module\");\n    setTokenInfo(TokenID.New, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"new\");\n    setTokenInfo(TokenID.Number, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"number\");\n    setTokenInfo(TokenID.Null, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"null\");\n    setTokenInfo(TokenID.Package, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"package\");\n    setTokenInfo(TokenID.Private, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"private\");\n    setTokenInfo(TokenID.Protected, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"protected\");\n    setTokenInfo(TokenID.Public, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"public\");\n    setTokenInfo(TokenID.Return, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"return\");\n    setTokenInfo(TokenID.Static, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"static\");\n    setTokenInfo(TokenID.String, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"string\");\n    setTokenInfo(TokenID.Super, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"super\");\n    setTokenInfo(TokenID.Switch, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"switch\");\n    setTokenInfo(TokenID.This, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"this\");\n    setTokenInfo(TokenID.Throw, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"throw\");\n    setTokenInfo(TokenID.True, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"true\");\n    setTokenInfo(TokenID.Try, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"try\");\n    setTokenInfo(TokenID.TypeOf, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Typeof, \"typeof\");\n    setTokenInfo(TokenID.Var, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"var\");\n    setTokenInfo(TokenID.Void, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Void, \"void\");\n    setTokenInfo(TokenID.With, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.WithStatement, \"with\");\n    setTokenInfo(TokenID.While, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"while\");\n    setTokenInfo(TokenID.Yield, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"yield\");\n\n    setTokenInfo(TokenID.Identifier, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"identifier\");\n    setTokenInfo(TokenID.NumberLiteral, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"numberLiteral\");\n    setTokenInfo(TokenID.RegularExpressionLiteral, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"regex\");\n    setTokenInfo(TokenID.StringLiteral, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"qstring\");\n\n    // Non-operator non-identifier tokens\n    setTokenInfo(TokenID.Semicolon, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \";\"); // ;\n    setTokenInfo(TokenID.CloseParen, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \")\"); // )\n    setTokenInfo(TokenID.CloseBracket, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"]\"); // ]\n    setTokenInfo(TokenID.OpenBrace, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"{\"); // {\n    setTokenInfo(TokenID.CloseBrace, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"}\"); // }\n    setTokenInfo(TokenID.DotDotDot, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"...\"); // ...\n\n    // Operator non-identifier tokens\n    setTokenInfo(TokenID.Comma, OperatorPrecedence.Comma, NodeType.Comma, OperatorPrecedence.None, NodeType.None, \",\"); // ,\n    setTokenInfo(TokenID.Equals, OperatorPrecedence.Assignment, NodeType.Asg, OperatorPrecedence.None, NodeType.None, \"=\"); // =\n    setTokenInfo(TokenID.PlusEquals, OperatorPrecedence.Assignment, NodeType.AsgAdd, OperatorPrecedence.None, NodeType.None, \"+=\"); // +=\n    setTokenInfo(TokenID.MinusEquals, OperatorPrecedence.Assignment, NodeType.AsgSub, OperatorPrecedence.None, NodeType.None, \"-=\"); // -=\n    setTokenInfo(TokenID.AsteriskEquals, OperatorPrecedence.Assignment, NodeType.AsgMul, OperatorPrecedence.None, NodeType.None, \"*=\"); // *=\n\n    setTokenInfo(TokenID.SlashEquals, OperatorPrecedence.Assignment, NodeType.AsgDiv, OperatorPrecedence.None, NodeType.None, \"/=\"); // /=\n    setTokenInfo(TokenID.PercentEquals, OperatorPrecedence.Assignment, NodeType.AsgMod, OperatorPrecedence.None, NodeType.None, \"%=\"); // %=\n    setTokenInfo(TokenID.AmpersandEquals, OperatorPrecedence.Assignment, NodeType.AsgAnd, OperatorPrecedence.None, NodeType.None, \"&=\"); // &=\n    setTokenInfo(TokenID.CaretEquals, OperatorPrecedence.Assignment, NodeType.AsgXor, OperatorPrecedence.None, NodeType.None, \"^=\"); // ^=\n    setTokenInfo(TokenID.BarEquals, OperatorPrecedence.Assignment, NodeType.AsgOr, OperatorPrecedence.None, NodeType.None, \"|=\"); // |=\n    setTokenInfo(TokenID.LessThanLessThanEquals, OperatorPrecedence.Assignment, NodeType.AsgLsh, OperatorPrecedence.None, NodeType.None, \"<<=\"); // <<=\n    setTokenInfo(TokenID.GreaterThanGreaterThanEquals, OperatorPrecedence.Assignment, NodeType.AsgRsh, OperatorPrecedence.None, NodeType.None, \">>=\"); // >>=\n    setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThanEquals, OperatorPrecedence.Assignment, NodeType.AsgRs2, OperatorPrecedence.None, NodeType.None, \">>>=\"); // >>>=\n    setTokenInfo(TokenID.Question, OperatorPrecedence.Conditional, NodeType.ConditionalExpression, OperatorPrecedence.None, NodeType.None, \"?\"); // ?\n    setTokenInfo(TokenID.Colon, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \":\"); // :\n    setTokenInfo(TokenID.BarBar, OperatorPrecedence.LogicalOr, NodeType.LogOr, OperatorPrecedence.None, NodeType.None, \"||\"); // ||\n    setTokenInfo(TokenID.AmpersandAmpersand, OperatorPrecedence.LogicalAnd, NodeType.LogAnd, OperatorPrecedence.None, NodeType.None, \"&&\"); // &&\n    setTokenInfo(TokenID.Bar, OperatorPrecedence.BitwiseOr, NodeType.Or, OperatorPrecedence.None, NodeType.None, \"|\"); // |\n    setTokenInfo(TokenID.Caret, OperatorPrecedence.BitwiseExclusiveOr, NodeType.Xor, OperatorPrecedence.None, NodeType.None, \"^\"); // ^\n    setTokenInfo(TokenID.And, OperatorPrecedence.BitwiseAnd, NodeType.And, OperatorPrecedence.None, NodeType.None, \"&\"); // &\n    setTokenInfo(TokenID.EqualsEquals, OperatorPrecedence.Equality, NodeType.Eq, OperatorPrecedence.None, NodeType.None, \"==\"); // ==\n    setTokenInfo(TokenID.ExclamationEquals, OperatorPrecedence.Equality, NodeType.Ne, OperatorPrecedence.None, NodeType.None, \"!=\"); // !=\n    setTokenInfo(TokenID.EqualsEqualsEquals, OperatorPrecedence.Equality, NodeType.Eqv, OperatorPrecedence.None, NodeType.None, \"===\"); // ===\n    setTokenInfo(TokenID.ExclamationEqualsEquals, OperatorPrecedence.Equality, NodeType.NEqv, OperatorPrecedence.None, NodeType.None, \"!==\"); // !==\n    setTokenInfo(TokenID.LessThan, OperatorPrecedence.Relational, NodeType.Lt, OperatorPrecedence.None, NodeType.None, \"<\"); // <\n    setTokenInfo(TokenID.LessThanEquals, OperatorPrecedence.Relational, NodeType.Le, OperatorPrecedence.None, NodeType.None, \"<=\"); // <=\n    setTokenInfo(TokenID.GreaterThan, OperatorPrecedence.Relational, NodeType.Gt, OperatorPrecedence.None, NodeType.None, \">\"); // >\n    setTokenInfo(TokenID.GreaterThanEquals, OperatorPrecedence.Relational, NodeType.Ge, OperatorPrecedence.None, NodeType.None, \">=\"); // >=\n    setTokenInfo(TokenID.LessThanLessThan, OperatorPrecedence.Shift, NodeType.Lsh, OperatorPrecedence.None, NodeType.None, \"<<\"); // <<\n    setTokenInfo(TokenID.GreaterThanGreaterThan, OperatorPrecedence.Shift, NodeType.Rsh, OperatorPrecedence.None, NodeType.None, \">>\"); // >>\n    setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThan, OperatorPrecedence.Shift, NodeType.Rs2, OperatorPrecedence.None, NodeType.None, \">>>\"); // >>>\n    setTokenInfo(TokenID.Plus, OperatorPrecedence.Additive, NodeType.Add, OperatorPrecedence.Unary, NodeType.Pos, \"+\"); // +\n    setTokenInfo(TokenID.Minus, OperatorPrecedence.Additive, NodeType.Sub, OperatorPrecedence.Unary, NodeType.Neg, \"-\"); // -\n    setTokenInfo(TokenID.Asterisk, OperatorPrecedence.Multiplicative, NodeType.Mul, OperatorPrecedence.None, NodeType.None, \"*\"); // *\n    setTokenInfo(TokenID.Slash, OperatorPrecedence.Multiplicative, NodeType.Div, OperatorPrecedence.None, NodeType.None, \"/\"); // /\n    setTokenInfo(TokenID.Percent, OperatorPrecedence.Multiplicative, NodeType.Mod, OperatorPrecedence.None, NodeType.None, \"%\"); // %\n    setTokenInfo(TokenID.Tilde, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Not, \"~\"); // ~\n    setTokenInfo(TokenID.Exclamation, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.LogNot, \"!\"); // !\n    setTokenInfo(TokenID.PlusPlus, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.IncPre, \"++\"); // ++\n    setTokenInfo(TokenID.MinusMinus, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.DecPre, \"--\"); // --\n    setTokenInfo(TokenID.OpenParen, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"(\"); // (\n    setTokenInfo(TokenID.OpenBracket, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"[\"); // [\n    setTokenInfo(TokenID.Dot, OperatorPrecedence.Unary, NodeType.None, OperatorPrecedence.None, NodeType.None, \".\"); // .\n    setTokenInfo(TokenID.EndOfFile, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"<EOF>\"); // EOF\n    setTokenInfo(TokenID.EqualsGreaterThan, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, \"=>\"); // =>\n\n    export function lookupToken(tokenId: TokenID): TokenInfo {\n        return tokenTable[tokenId];\n    }\n\n    export enum TokenClass {\n        Punctuation,\n        Keyword,\n        Operator,\n        Comment,\n        Whitespace,\n        Identifier,\n        NumberLiteral,\n        StringLiteral,\n        RegExpLiteral,\n    }\n\n    export class SavedToken {\n        constructor (public tok: Token, public minChar: number, public limChar: number) { }\n    }\n\n    export class Token {\n        constructor (public tokenId: TokenID) {\n        }\n\n        public toString() {\n            return \"token: \" + this.tokenId + \" \" + this.getText() + \" (\" + (<any>TokenID)._map[this.tokenId] + \")\";\n        }\n\n        public print(line: number, outfile) {\n            outfile.WriteLine(this.toString() + \",on line\" + line);\n        }\n\n        public getText(): string {\n            return tokenTable[this.tokenId].text;\n        }\n\n        public classification(): TokenClass {\n            if (this.tokenId <= TokenID.LimKeyword) {\n                return TokenClass.Keyword;\n            }\n            else {\n                var tokenInfo = lookupToken(this.tokenId);\n                if (tokenInfo != undefined) {\n                    if ((tokenInfo.unopNodeType != NodeType.None) ||\n                        (tokenInfo.binopNodeType != NodeType.None)) {\n                        return TokenClass.Operator;\n                    }\n                }\n            }\n\n            return TokenClass.Punctuation;\n        }\n    }\n\n    export class NumberLiteralToken extends Token {\n        constructor (public value: number, public text: string) {\n            super(TokenID.NumberLiteral);\n        }\n\n        public getText(): string {\n            return this.text;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.NumberLiteral;\n        }\n    }\n\n    export class StringLiteralToken extends Token {\n        constructor (public value: string) {\n            super(TokenID.StringLiteral);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n        \n        public classification(): TokenClass {\n            return TokenClass.StringLiteral;\n        }\n    }\n\n    export class IdentifierToken extends Token {\n        constructor (public value: string, public hasEscapeSequence : bool) {\n            super(TokenID.Identifier);\n        }\n        public getText(): string {\n            return this.value;\n        }\n        public classification(): TokenClass {\n            return TokenClass.Identifier;\n        }\n    }\n\n    export class WhitespaceToken extends Token {\n        constructor (tokenId: TokenID, public value: string) {\n            super(tokenId);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.Whitespace;\n        }\n    }\n\n    export class CommentToken extends Token {\n        constructor(public value: string,\n                    public isBlock: bool,\n                    public startPos: number,\n                    public line: number,\n                    public endsLine: bool) {\n            super(TokenID.Comment);\n        }\n\n        public getText(): string {\n            return this.value;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.Comment;\n        }\n    }\n\n    export class RegularExpressionLiteralToken extends Token {\n        constructor(public text: string) {\n            super(TokenID.RegularExpressionLiteral);\n        }\n\n        public getText(): string {\n            return this.text;\n        }\n\n        public classification(): TokenClass {\n            return TokenClass.RegExpLiteral;\n        }\n    }\n\n    // TODO: new with length TokenID.LimFixed\n    export var staticTokens: Token[] = [];\n    export function initializeStaticTokens() {\n        for (var i = 0; i <= TokenID.LimFixed; i++) {\n            staticTokens[i] = new Token(i);\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ArrayCache {\n        public arrayType: Type;\n        public arrayBase: Type = null;\n\n        public specialize(arrInstType: Type, checker: TypeChecker): Type {\n            if (this.arrayBase === null) {\n                this.arrayBase = arrInstType.specializeType(checker.wildElm.type, this.arrayType.elementType,\n                                                   checker, true);\n            }\n            return this.arrayBase;\n        }\n    }\n\n    export class TypeComparisonInfo {\n        public onlyCaptureFirstError = false;\n        public flags: TypeRelationshipFlags = TypeRelationshipFlags.SuccessfulComparison;\n        public message = \"\";\n\n        public addMessageToFront(message) {\n            if (!this.onlyCaptureFirstError) {\n                this.message = this.message ? message + \":\\n\\t\" + this.message : message;\n            }\n            else {\n                this.setMessage(message);\n            }\n        }\n\n        public setMessage(message) {\n            this.message = message;\n        }\n    }\n\n    export interface SignatureData {\n        parameters: ParameterSymbol[];\n        nonOptionalParameterCount: number;\n    }\n\n    export interface ApplicableSignature {\n        signature: Signature;\n        hadProvisionalErrors: bool;\n    }\n\n    export enum TypeCheckCollectionMode {\n        Resident,\n        Transient\n    }\n\n    export class PersistentGlobalTypeState {\n        public importedGlobalsTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n        public importedGlobalsTypeTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n        public importedGlobals: SymbolScopeBuilder;\n\n        // transient state\n        public globals: IHashTable = null;\n        public globalTypes: IHashTable = null;\n        public ambientGlobals: IHashTable = null;\n        public ambientGlobalTypes: IHashTable = null;\n\n        // resident state\n        public residentGlobalValues = new StringHashTable();\n        public residentGlobalTypes = new StringHashTable();\n        public residentGlobalAmbientValues = new StringHashTable();\n        public residentGlobalAmbientTypes = new StringHashTable();\n\n        // dual resident/transient state\n\n        // REVIEW: We shouldn\'t need to allocate private hash tables for these, since there\'s no private global scope\n        // REVIEW: In general, we should audit each instance of DualStringHashTable to ensure that both the primary\n        // and secondary tables are necessary.  If it\'s not necessary, we should sub in a constant sentinel value.\n        public dualGlobalValues: DualStringHashTable;\n        public dualGlobalTypes: DualStringHashTable;\n        public dualAmbientGlobalValues: DualStringHashTable;\n        public dualAmbientGlobalTypes: DualStringHashTable;\n\n        public globalScope: SymbolScope;\n\n        public voidType: Type;\n        public booleanType: Type;\n        public doubleType: Type;\n\n        public stringType: Type;\n        public anyType: Type;\n        public nullType: Type;\n        public undefinedType: Type;\n\n        // Use this flag to turn resident checking on and off\n        public residentTypeCheck: bool = true;\n\n        public mod: ModuleType = null;\n        public gloMod: TypeSymbol = null;\n\n        public wildElm: TypeSymbol = null;\n\n        constructor (public errorReporter: ErrorReporter, private compilationSettings: CompilationSettings) {\n            this.importedGlobals = new SymbolScopeBuilder(null, this.importedGlobalsTable, null, this.importedGlobalsTypeTable, null, null);\n\n            this.dualGlobalValues = new DualStringHashTable(this.residentGlobalValues, new StringHashTable());\n            this.dualGlobalTypes = new DualStringHashTable(this.residentGlobalTypes, new StringHashTable());\n            this.dualAmbientGlobalValues = new DualStringHashTable(this.residentGlobalAmbientValues, new StringHashTable());\n            this.dualAmbientGlobalTypes = new DualStringHashTable(this.residentGlobalAmbientTypes, new StringHashTable());\n\n            var dualGlobalScopedMembers = new ScopedMembers(new DualStringHashTable(this.dualGlobalValues, new StringHashTable()));\n            var dualGlobalScopedAmbientMembers = new ScopedMembers(new DualStringHashTable(this.dualAmbientGlobalValues, new StringHashTable()));\n            var dualGlobalScopedEnclosedTypes = new ScopedMembers(new DualStringHashTable(this.dualGlobalTypes, new StringHashTable()));\n            var dualGlobalScopedAmbientEnclosedTypes = new ScopedMembers(new DualStringHashTable(this.dualAmbientGlobalTypes, new StringHashTable()));\n\n            this.globalScope = new SymbolScopeBuilder(dualGlobalScopedMembers, dualGlobalScopedAmbientMembers, dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes, this.importedGlobals, null);\n\n            this.voidType = this.enterPrimitive(Primitive.Void, \"void\");\n            this.booleanType = this.enterPrimitive(Primitive.Boolean, \"bool\");\n            this.doubleType = this.enterPrimitive(Primitive.Double, \"number\");\n            this.importedGlobals.ambientEnclosedTypes.addPublicMember(\"number\", this.doubleType.symbol);\n\n            this.stringType = this.enterPrimitive(Primitive.String, \"string\");\n            this.anyType = this.enterPrimitive(Primitive.Any, \"any\");\n            this.nullType = this.enterPrimitive(Primitive.Null, \"null\");\n            this.undefinedType = this.enterPrimitive(Primitive.Undefined, \"undefined\");\n\n            // shared global state is resident\n            this.setCollectionMode(TypeCheckCollectionMode.Resident);\n\n            this.wildElm = new TypeSymbol(\"_element\", -1, 0, unknownLocationInfo.fileName, new Type(), this.compilationSettings.optimizeModuleCodeGen);\n            this.importedGlobalsTypeTable.addPublicMember(this.wildElm.name, this.wildElm);\n\n            this.mod = new ModuleType(dualGlobalScopedEnclosedTypes, dualGlobalScopedAmbientEnclosedTypes);\n            this.mod.members = dualGlobalScopedMembers;\n            this.mod.ambientMembers = dualGlobalScopedAmbientMembers;\n            this.mod.containedScope = this.globalScope;\n\n            this.gloMod = new TypeSymbol(globalId, -1, 0, unknownLocationInfo.fileName, this.mod, this.compilationSettings.optimizeModuleCodeGen);\n            this.mod.members.addPublicMember(this.gloMod.name, this.gloMod);\n\n            this.defineGlobalValue(\"undefined\", this.undefinedType);\n        }\n\n        public enterPrimitive(flags: number, name: string) {\n            var primitive = new Type();\n            primitive.primitiveTypeClass = flags;\n            var symbol = new TypeSymbol(name, -1, name.length, unknownLocationInfo.fileName, primitive, this.compilationSettings.optimizeModuleCodeGen);\n            symbol.typeCheckStatus = TypeCheckStatus.Finished;\n            primitive.symbol = symbol;\n            this.importedGlobals.enter(null, null, symbol, this.errorReporter, true, true, true);\n            return primitive;\n        }\n\n        public setCollectionMode(mode: TypeCheckCollectionMode) {\n            this.residentTypeCheck =\n                this.dualGlobalValues.insertPrimary =\n                    this.dualGlobalTypes.insertPrimary =\n                        this.dualAmbientGlobalValues.insertPrimary =\n                            this.dualAmbientGlobalTypes.insertPrimary = mode === TypeCheckCollectionMode.Resident;\n        }\n\n        public refreshPersistentState() {\n            this.globals = new StringHashTable();\n            this.globalTypes = new StringHashTable();\n            this.ambientGlobals = new StringHashTable();\n            this.ambientGlobalTypes = new StringHashTable();\n\n            // add global types to the global scope\n            this.globalTypes.add(this.voidType.symbol.name, this.voidType.symbol);\n            this.globalTypes.add(this.booleanType.symbol.name, this.booleanType.symbol);\n            this.globalTypes.add(this.doubleType.symbol.name, this.doubleType.symbol);\n            this.globalTypes.add(\"number\", this.doubleType.symbol);\n            this.globalTypes.add(this.stringType.symbol.name, this.stringType.symbol);\n            this.globalTypes.add(this.anyType.symbol.name, this.anyType.symbol);\n            this.globalTypes.add(this.nullType.symbol.name, this.nullType.symbol);\n            this.globalTypes.add(this.undefinedType.symbol.name, this.undefinedType.symbol);\n\n            this.dualGlobalValues.secondaryTable = this.globals;\n            this.dualGlobalTypes.secondaryTable = this.globalTypes;\n            this.dualAmbientGlobalValues.secondaryTable = this.ambientGlobals;\n            this.dualAmbientGlobalTypes.secondaryTable = this.ambientGlobalTypes;\n        }\n\n        public defineGlobalValue(name: string, type: Type) {\n            var valueLocation = new ValueLocation();\n            valueLocation.typeLink = new TypeLink();\n            var sym = new VariableSymbol(name, 0, unknownLocationInfo.fileName, valueLocation);\n            sym.setType(type);\n            sym.typeCheckStatus = TypeCheckStatus.Finished;\n            sym.container = this.gloMod;\n            this.importedGlobalsTable.addPublicMember(name, sym);\n        }\n    }\n\n    export class ContextualTypeContext {\n        public targetSig: Signature = null;\n        public targetThis: Type = null;\n        public targetAccessorType: Type = null;\n\n        constructor (public contextualType: Type,\n            public provisional: bool, public contextID: number) { }\n    }\n\n    export class ContextualTypingContextStack {\n        private contextStack: ContextualTypeContext[] = [];\n        static contextID = TypeCheckStatus.Finished + 1;\n        public pushContextualType(type: Type, provisional: bool) { this.contextStack.push(new ContextualTypeContext(type, provisional, ContextualTypingContextStack.contextID++)); this.checker.errorReporter.pushToErrorSink = provisional; }\n        public hadProvisionalErrors = false; // somewhere in the chain a provisional typecheck error was thrown\n        public popContextualType() {\n            var tc = this.contextStack.pop();\n            this.checker.errorReporter.pushToErrorSink = this.isProvisional();\n            this.hadProvisionalErrors = this.hadProvisionalErrors || (tc.provisional && (this.checker.errorReporter.getCapturedErrors().length));\n            this.checker.errorReporter.freeCapturedErrors();\n            return tc;\n        }\n        public getContextualType(): ContextualTypeContext { return (!this.contextStack.length ? null : this.contextStack[this.contextStack.length - 1]); }\n        public getContextID() { return (!this.contextStack.length ? TypeCheckStatus.Finished : this.contextStack[this.contextStack.length - 1].contextID); }\n        public isProvisional() { return (!this.contextStack.length ? false : this.contextStack[this.contextStack.length - 1].provisional); }\n\n        constructor (public checker: TypeChecker) { }\n    }\n\n    export class TypeChecker {\n        public errorReporter: ErrorReporter = null;\n        public globalScope: SymbolScope;\n\n        public checkControlFlow = false;\n        public printControlFlowGraph = false;\n        public checkControlFlowUseDef = false;\n        public styleSettings: StyleSettings = null;\n\n        public fileNameToLocationInfo: StringHashTable = null;\n\n        public voidType: Type;\n        public booleanType: Type;\n        public numberType: Type;\n        public stringType: Type;\n        public anyType: Type;\n        public nullType: Type;\n        public undefinedType: Type;\n\n        public anon = \"_anonymous\";\n\n        public globals: DualStringHashTable;\n        public globalTypes: DualStringHashTable;\n        public ambientGlobals: DualStringHashTable;\n        public ambientGlobalTypes: DualStringHashTable;\n        public gloModType: ModuleType;\n        public gloMod: TypeSymbol;\n        public wildElm: TypeSymbol;\n\n        public locationInfo: LocationInfo = null;\n        public typeFlow: TypeFlow = null;\n\n        public currentCompareA: Symbol = null;\n        public currentCompareB: Symbol = null;\n\n        public currentModDecl: ModuleDeclaration = null;\n\n        public inBind = false;\n        public inWith = false;\n        public errorsOnWith = true;\n\n        public typingContextStack: ContextualTypingContextStack;\n        public currentContextualTypeContext: ContextualTypeContext = null;\n\n        public resolvingBases = false;\n\n        public canCallDefinitionSignature = false;\n\n        public assignableCache: any[] = <any>{};\n        public subtypeCache: any[] = <any>{};\n        public identicalCache: any[] = <any>{};\n\n        public provisionalStartedTypecheckObjects: PhasedTypecheckObject[] = [];\n\n        public mustCaptureGlobalThis = false;\n\n        constructor(public persistentState: PersistentGlobalTypeState,\n                    public compilationSettings: CompilationSettings) {\n            this.voidType = this.persistentState.voidType;\n            this.booleanType = this.persistentState.booleanType;\n            this.numberType = this.persistentState.doubleType;\n            this.stringType = this.persistentState.stringType;\n            this.anyType = this.persistentState.anyType;\n            this.nullType = this.persistentState.nullType;\n            this.undefinedType = this.persistentState.undefinedType;\n\n            this.globals = this.persistentState.dualGlobalValues;\n            this.globalTypes = this.persistentState.dualGlobalTypes;\n            this.ambientGlobals = this.persistentState.dualAmbientGlobalValues;\n            this.ambientGlobalTypes = this.persistentState.dualAmbientGlobalTypes;\n            this.gloModType = this.persistentState.mod;\n            this.gloMod = this.persistentState.gloMod;\n            this.wildElm = this.persistentState.wildElm;\n\n            this.globalScope = this.persistentState.globalScope;\n\n            this.typingContextStack = new ContextualTypingContextStack(this);\n        }\n\n        public setStyleOptions(style: StyleSettings) {\n            this.styleSettings = style;\n        }\n\n        // Contextual typing\n        public setContextualType(type: Type, provisional: bool) {\n            this.typingContextStack.pushContextualType(type, provisional);\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n        }\n\n        public unsetContextualType() {\n            var lastTC = this.typingContextStack.popContextualType();\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n            return lastTC;\n        }\n\n        public hadProvisionalErrors() {\n            return this.typingContextStack.hadProvisionalErrors;\n        }\n        public resetProvisionalErrors() {\n            if (!this.typingContextStack.getContextualType()) {\n                this.typingContextStack.hadProvisionalErrors = false;\n            }\n        }\n\n        public typeCheckWithContextualType(contextType: Type, provisional: bool, condition: bool, ast: AST) {\n            if (condition) {\n                this.setContextualType(contextType, this.typingContextStack.isProvisional() || provisional);\n            }\n            this.typeFlow.typeCheck(ast);\n            if (condition) {\n                this.unsetContextualType();\n            }\n        }\n\n        public resetTargetType() {\n            this.currentContextualTypeContext = this.typingContextStack.getContextualType();\n        }\n\n        // Unset the current contextual type without disturbing the stack, effectively \"killing\" the contextual typing process\n        public killCurrentContextualType() { this.currentContextualTypeContext = null; this.errorReporter.pushToErrorSink = false; }\n        public hasTargetType() { return this.currentContextualTypeContext && this.currentContextualTypeContext.contextualType; }\n        public getTargetTypeContext() { return this.currentContextualTypeContext; }\n\n        public inProvisionalTypecheckMode() {\n            return this.typingContextStack.isProvisional();\n        }\n\n        public getTypeCheckFinishedStatus() {\n            if (this.inProvisionalTypecheckMode()) {\n                return this.typingContextStack.getContextID();\n            }\n            return TypeCheckStatus.Finished;\n        }\n\n        public typeStatusIsFinished(status: TypeCheckStatus) {\n\n            return status === TypeCheckStatus.Finished ||\n                   (this.inProvisionalTypecheckMode() && status === this.typingContextStack.getContextID());\n        }\n\n        public addStartedPTO(pto: PhasedTypecheckObject) {\n            if (this.inProvisionalTypecheckMode()) {\n                this.provisionalStartedTypecheckObjects[this.provisionalStartedTypecheckObjects.length] = pto;\n            }\n        }\n\n        public cleanStartedPTO() {\n            for (var i = 0; i < this.provisionalStartedTypecheckObjects.length; i++) {\n                if (this.provisionalStartedTypecheckObjects[i].typeCheckStatus >= this.typingContextStack.getContextID()) {\n                    this.provisionalStartedTypecheckObjects[i].typeCheckStatus = TypeCheckStatus.NotStarted;\n                }\n            }\n            this.provisionalStartedTypecheckObjects = [];\n        }\n\n        // type collection      \n        public collectTypes(ast: AST): void {\n            if (ast.nodeType === NodeType.Script) {\n                var script = <Script>ast;\n                this.locationInfo = script.locationInfo;\n            }\n            var globalChain = new ScopeChain(this.gloMod, null, this.globalScope);\n            var context = new TypeCollectionContext(globalChain, this);\n            getAstWalkerFactory().walk(ast, preCollectTypes, postCollectTypes, null, context);\n        }\n\n        public makeArrayType(type: Type): Type {\n            if (!type.arrayCache) {\n                type.arrayCache = new ArrayCache();\n                type.arrayCache.arrayType = new Type();\n                type.arrayCache.arrayType.elementType = type;\n                type.arrayCache.arrayType.symbol = type.symbol;\n            }\n            return type.arrayCache.arrayType;\n        }\n\n        public getParameterList(funcDecl: FuncDecl, container: Symbol): SignatureData {\n            var args = funcDecl.arguments;\n            var parameterTable = null;\n            var parameterBuilder = null;\n            var len = args.members.length;\n            var nonOptionalParams = 0;\n            var result: ParameterSymbol[] = [];\n\n            if (len > 0) {\n                parameterTable = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                parameterBuilder = new SymbolScopeBuilder(parameterTable, null, null, null, null, container);\n\n                for (var i = 0; i < len; i++) {\n                    var parameter = <ArgDecl>args.members[i];\n                    var paramDef = new ValueLocation();\n                    var parameterSymbol = new ParameterSymbol(parameter.id.text, parameter.minChar,\n                                                            this.locationInfo.fileName, paramDef);\n                    parameterSymbol.declAST = parameter;\n                    parameterSymbol.funcDecl = funcDecl;\n                    parameter.id.sym = parameterSymbol;\n                    parameter.sym = parameterSymbol;\n                    paramDef.symbol = parameterSymbol;\n                    paramDef.typeLink = getTypeLink(parameter.typeExpr, this, false);\n                    parameterBuilder.enter(null, parameter, parameterSymbol, this.errorReporter, true, false, false); // REVIEW: Should this be entered into the private scope?\n                    result[result.length] = parameterSymbol;\n                    if (!parameter.isOptionalArg()) {\n                        nonOptionalParams++;\n                    }\n                }\n            }\n            return { parameters: result, nonOptionalParameterCount: nonOptionalParams };\n        }\n\n        // Create a signature for a function definition\n        //  (E.g., has a function body - function declarations, property declarations, lambdas)\n        public createFunctionSignature(funcDecl: FuncDecl, container: Symbol, scope: SymbolScope, overloadGroupSym: Symbol, addToScope: bool): Signature {\n\n            var isExported = hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Exported | FunctionFlags.ClassPropertyMethodExported) || container === this.gloMod;\n            var isStatic = hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Static);\n            var isPrivate = hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Private);\n            var isDefinition = !hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Signature);\n            var isAmbient = hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Ambient);\n            var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;\n            var isGlobal = container === this.gloMod;\n\n            var signature: Signature = new Signature();\n            var isLambda = funcDecl.getFunctionFlags() & FunctionFlags.IsFunctionExpression;\n\n            // If a return type has been declared for the signature, set the type link.\n            // Otherwise:\n            //  if it\'s a signature, its type will be \'any\'\n            //  if it\'s a definition, the return type will be inferred  \n            if (funcDecl.returnTypeAnnotation || isDefinition) {\n                signature.returnType = getTypeLink(funcDecl.returnTypeAnnotation, this, false);\n            }\n            else {\n                signature.returnType = new TypeLink();\n                signature.returnType.type = this.anyType;\n            }\n\n            signature.hasVariableArgList = funcDecl.variableArgList;\n\n            var sigData = this.getParameterList(funcDecl, container);\n\n            signature.parameters = sigData.parameters;\n            signature.nonOptionalParameterCount = sigData.nonOptionalParameterCount;\n\n            funcDecl.signature = signature;\n            signature.declAST = funcDecl;\n\n            var useOverloadGroupSym =\n                overloadGroupSym &&\n                overloadGroupSym.getType() &&\n                !overloadGroupSym.isAccessor() &&\n                (funcDecl.isSignature() || (isAmbient === hasFlag(overloadGroupSym.flags, SymbolFlags.Ambient)));\n\n            if (useOverloadGroupSym && isPrivate != hasFlag(overloadGroupSym.flags, SymbolFlags.Private)) {\n                this.errorReporter.simpleError(funcDecl, \"Public/Private visibility of overloads does not agree\");\n            }\n\n            var groupType = useOverloadGroupSym ? overloadGroupSym.getType() : new Type();\n\n            if (isConstructor) {\n                if (groupType.construct === null) {\n                    groupType.construct = new SignatureGroup();\n                }\n                groupType.construct.addSignature(signature);\n                groupType.construct.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.construct.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n            else if (funcDecl.isIndexerMember()) {\n                if (groupType.index === null) {\n                    groupType.index = new SignatureGroup();\n                    groupType.index.flags |= SignatureFlags.IsIndexer;\n                }\n\n                groupType.index.addSignature(signature);\n                groupType.index.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.index.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n            else {\n                if (groupType.call === null) {\n                    groupType.call = new SignatureGroup();\n                }\n                groupType.call.addSignature(signature);\n\n                groupType.call.hasImplementation = !(funcDecl.isSignature());\n                if (groupType.call.hasImplementation) {\n                    groupType.setHasImplementation();\n                }\n            }\n\n            var instanceType = groupType.instanceType;\n\n            // Ensure that the function\'s symbol is properly configured\n            // (If there were overloads, we\'ll already have a symbol, otherwise we need to create one)\n            var funcName: string = null;\n\n            // Set the function\'s name:\n            //  In the case of anonymous or functions resulting from error\n            //  correction in the parser (isMissing() === true), we do not\n            //  want to set a function name, since they shouldn\'t be inserted\n            //  into the enclosing scope\n\n            // usedHint prevents functions bound to object literal fields from being added to the\n            // enclosing scope\n            var usedHint = false;\n            if (funcDecl.name && !funcDecl.name.isMissing()) {\n                funcName = funcDecl.name.text;\n            }\n            else if (funcDecl.hint) {\n                funcName = funcDecl.hint;\n                usedHint = true;\n            }\n\n            if (!groupType.symbol) {\n                groupType.symbol =\n                    new TypeSymbol(funcName ? funcName : this.anon,\n                                    funcDecl.minChar, funcDecl.limChar - funcDecl.minChar,\n                                    this.locationInfo.fileName,\n                                    groupType, this.compilationSettings.optimizeModuleCodeGen);\n                if (!useOverloadGroupSym) {\n                    groupType.symbol.declAST = funcDecl;\n                }\n            }\n\n            // REVIEW: Are we missing any other flags?\n            if (isStatic) {\n                groupType.symbol.flags |= SymbolFlags.Static;\n            }\n\n            if (isAmbient) {\n                groupType.symbol.flags |= SymbolFlags.Ambient;\n            }\n\n            if (isPrivate) {\n                groupType.symbol.flags |= SymbolFlags.Private;\n            }\n\n            groupType.symbol.isMethod = funcDecl.isMethod();\n            if (groupType.symbol.isMethod) {\n                groupType.symbol.flags |= SymbolFlags.Property;\n            }\n\n            funcDecl.type = groupType;\n\n            // Add the function symbol to the appropriate scope\n            // if the funcDecl is a constructor, it will be added to the enclosing scope as a class\n            if (!isConstructor) {\n                // Add the function\'s symbol to its enclosing scope\n                if (funcName && !isLambda && !funcDecl.isAccessor() && !usedHint) {\n\n                    // REVIEW: We\'re not setting the isDecl flags for fuctions bound to object literal properties\n                    // so removing the isDefiniton clause would break object literals\n                    if (addToScope) {  // REVIEW: If we combine this with createFunctionDeclarationSignature, we\'ll need to broaden this for both decls and defs                      \n                        // if it\'s a static method, enter directly into the container\'s scope\n                        if (funcDecl.isMethod() && isStatic) {\n\n                            // REVIEW: What about private statics?\n                            if (!(<TypeSymbol>container).type.members.publicMembers.add(funcName, groupType.symbol)) {\n                                this.errorReporter.duplicateIdentifier(funcDecl, funcName);\n                            }\n\n                            groupType.symbol.container = container;\n                        } // REVIEW: Another check for overloads...\n                        else if (overloadGroupSym === null || (overloadGroupSym.declAST /*&& !(<FuncDecl>overloadGroupSym.declAST).isOverload*/ && (container.isType()))) {\n                            scope.enter(container, funcDecl, groupType.symbol, this.errorReporter, !isPrivate && (isExported || isStatic || isGlobal), false, isAmbient);\n                        }\n                    }\n                    else if (!funcDecl.isSpecialFn()) {\n                        groupType.symbol.container = container; // REVIEW: Set container for overloads or anonymous?\n                    }\n                }\n                else if (!funcDecl.isSpecialFn()) {\n                    groupType.symbol.container = container; // REVIEW: Set container for lambdas and accessors?\n                }\n            }\n\n            // If, say, a call signature overload was declared before the class type was, we want to reuse\n            // the type that\'s already been instantiated for the class type, rather than allocate a new one\n            if (useOverloadGroupSym) {\n                var overloadGroupType = overloadGroupSym ? overloadGroupSym.getType() : null;\n                var classType = groupType;\n\n                if (classType != overloadGroupType) {\n                    if (classType.construct === null) {\n                        if (overloadGroupType && overloadGroupType.construct) {\n                            classType.construct = overloadGroupType.construct;\n                        }\n                        else {\n                            classType.construct = new SignatureGroup();\n                        }\n                    }\n                    else if (overloadGroupType) {\n                        if (overloadGroupType.construct) {\n                            classType.construct.signatures.concat(overloadGroupType.construct.signatures);\n                        }\n                    }\n\n                    // sync call and index signatures as well, but don\'t allocate should they not\n                    // already exist\n                    if (overloadGroupType) {\n                        if (classType.call === null) {\n                            classType.call = overloadGroupType.call;\n                        }\n                        else if (overloadGroupType.call) {\n                            classType.call.signatures.concat(overloadGroupType.call.signatures);\n                        }\n\n                        // if the function is not static, we need to add any call overloads onto the\n                        // instance type\'s call signature list\n                        if (!isStatic) {\n\n                            if (classType.instanceType === null) {\n                                classType.instanceType = overloadGroupType.instanceType;\n                            }\n\n                            instanceType = classType.instanceType;\n\n                            if (instanceType) {\n                                if (instanceType.call === null) {\n                                    instanceType.call = overloadGroupType.call;\n                                }\n                                else if (overloadGroupType.call) {\n                                    instanceType.call.signatures.concat(overloadGroupType.call.signatures);\n                                }\n                            }\n                        }\n\n                        if (classType.index === null) {\n                            classType.index = overloadGroupType.index;\n                        }\n                        else if (overloadGroupType.index) {\n                            classType.index.signatures.concat(overloadGroupType.index.signatures);\n                        }\n                    }\n                }\n            }\n\n            return signature;\n        }\n\n        // Creates a new symbol for an accessor property\n        // Note that funcDecl.type.symbol and fgSym may not be the same (E.g., in the case of type collection)\n        public createAccessorSymbol(funcDecl: FuncDecl, fgSym: Symbol, enclosingClass: Type, addToMembers: bool, isClassProperty: bool, scope: SymbolScope, container: Symbol) {\n            var accessorSym: FieldSymbol = null\n            var sig = funcDecl.signature;\n            var nameText = funcDecl.name.text;\n            var isStatic = hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Static);\n            var isPrivate = hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Private);\n\n            if (fgSym === null) {\n                var field = new ValueLocation();\n                accessorSym = new FieldSymbol(nameText, funcDecl.minChar, this.locationInfo.fileName, false, field);\n                field.symbol = accessorSym;\n                accessorSym.declAST = funcDecl; // REVIEW: need to reset for getters and setters\n\n                if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor)) {\n                    if (accessorSym.getter) {\n                        this.errorReporter.simpleError(funcDecl, \"Redeclaration of property getter\");\n                    }\n                    accessorSym.getter = <TypeSymbol>sig.declAST.type.symbol;\n                }\n                else {\n                    if (accessorSym.setter) {\n                        this.errorReporter.simpleError(funcDecl, \"Redeclaration of property setter\");\n                    }\n                    accessorSym.setter = <TypeSymbol>sig.declAST.type.symbol;\n                }\n\n                field.typeLink = getTypeLink(null, this, false);\n\n                // if it\'s static, enter it into the class\'s member list directly\n                if (addToMembers) {\n                    if (enclosingClass) {\n                        if (!enclosingClass.members.publicMembers.add(nameText, accessorSym)) {\n                            this.errorReporter.duplicateIdentifier(funcDecl, accessorSym.name);\n                        }\n                        accessorSym.container = enclosingClass.symbol;\n                    }\n                    else {\n                        this.errorReporter.simpleError(funcDecl, \"Accessor property may not be added in this context\");\n                    }\n                }\n                else {\n                    scope.enter(container, funcDecl, accessorSym, this.errorReporter, !isPrivate || isStatic, false, false);\n                }\n\n                // We set the flags here, instead of below, because the accessor symbol does not yet have a type\n                if (isClassProperty) {\n                    accessorSym.flags |= SymbolFlags.Property;\n                }\n                if (isStatic) {\n                    accessorSym.flags |= SymbolFlags.Static;\n                }\n\n                if (isPrivate) {\n                    accessorSym.flags |= SymbolFlags.Private;\n                }\n                else {\n                    accessorSym.flags |= SymbolFlags.Public;\n                }\n            }\n            else {\n                accessorSym = <FieldSymbol>(<any>fgSym);\n\n                if (isPrivate != hasFlag(accessorSym.flags, SymbolFlags.Private)) {\n                    this.errorReporter.simpleError(funcDecl, \"Getter and setter accessors do not agree in visibility\");\n                }\n\n                if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor)) {\n                    if (accessorSym.getter) {\n                        this.errorReporter.simpleError(funcDecl, \"Redeclaration of property getter\");\n                    }\n                    accessorSym.getter = <TypeSymbol>funcDecl.type.symbol;\n                }\n                else {\n                    if (accessorSym.setter) {\n                        this.errorReporter.simpleError(funcDecl, \"Redeclaration of property setter\");\n                    }\n                    accessorSym.setter = <TypeSymbol>funcDecl.type.symbol;\n                }\n            }\n\n            return accessorSym;\n        }\n\n        public addBases(resultScope: SymbolAggregateScope, type: Type, baseContext: { base: string; baseId: number; }): void {\n            resultScope.addParentScope(new SymbolTableScope(type.members, type.ambientMembers, type.getAllEnclosedTypes(), type.getAllAmbientEnclosedTypes(), type.symbol));\n            var i = 0;\n            var parent: Type;\n            if (type.extendsList) {\n                for (var len = type.extendsList.length; i < len; i++) {\n                    parent = type.extendsList[i];\n                    if (baseContext.baseId === parent.typeID) {\n                        this.errorReporter.reportErrorFromSym(parent.symbol, \"Type \'\" + baseContext.base + \"\' is recursively referenced as a base class of itself\");\n                        parent.symbol.flags |= SymbolFlags.RecursivelyReferenced;\n                        break;\n                    }\n                    this.addBases(resultScope, parent, baseContext);\n                }\n            }\n        }\n\n        public scopeOf(type: Type): SymbolScope {\n            var resultScope = new SymbolAggregateScope(type.symbol);\n            var baseContext = { base: type.symbol && type.symbol.name ? type.symbol.name : \"{}\", baseId: type.typeID };\n            this.addBases(resultScope, type, baseContext);\n            return resultScope;\n        }\n\n        public lookupMemberTypeSymbol(containingType: Type, name: string): Symbol {\n            var symbol: Symbol = null;\n            if (containingType.containedScope) {\n                symbol = containingType.containedScope.find(name, false, true);\n            }\n            else if (containingType.members) {\n                symbol = containingType.members.allMembers.lookup(name);\n\n                if (symbol === null && containingType.ambientMembers) {\n                    symbol = containingType.ambientMembers.allMembers.lookup(name);\n                }\n            }\n            if (symbol === null || !symbol.isType()) {\n                var typeMembers = containingType.getAllEnclosedTypes();\n                var ambientTypeMembers = containingType.getAllAmbientEnclosedTypes();\n                if (typeMembers) {\n                    symbol = typeMembers.allMembers.lookup(name);\n\n                    if (symbol === null && ambientTypeMembers) {\n                        symbol = ambientTypeMembers.allMembers.lookup(name);\n                    }\n\n                }\n            }\n            if (symbol && symbol.isType()) {\n                return symbol;\n            }\n            else {\n                return null;\n            }\n        }\n\n        public findSymbolForDynamicModule(idText: string, currentFileName: string, search: (id: string) =>Symbol): Symbol {\n            var originalIdText = idText;\n            var symbol = search(idText);\n           \n            if (symbol === null) {\n                // perhaps it\'s a dynamic module?\n                if (!symbol) {\n                    idText = swapQuotes(originalIdText);\n                    symbol = search(idText);\n                }\n\n                // Check the literal path first\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + \".ts\";\n                    symbol = search(idText);\n                }\n\n                // Check check for .d.str\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + \".d.ts\";\n                    symbol = search(idText);\n                }\n\n                // If the literal path doesn\'t work, begin the search\n                if (!symbol && !isRelative(originalIdText)) {\n                    // check the full path first, as this is the most likely scenario\n                    idText = originalIdText;\n\n                    var strippedIdText = stripQuotes(idText);\n\n                    // REVIEW: Technically, we shouldn\'t have to normalize here - we should normalize in addUnit.\n                    // Still, normalizing here alows any language services to be free of assumptions\n                    var path = getRootFilePath(switchToForwardSlashes(currentFileName));\n\n                    while (symbol === null && path != \"\") {\n                        idText = normalizePath(path + strippedIdText + \".ts\");\n                        symbol = search(idText);\n\n                        // check for .d.ts\n                        if (symbol === null) {\n                            idText = changePathToDTS(idText);\n                            symbol = search(idText);\n                        }\n\n                        if (symbol === null) {\n                            if (path === \'/\') {\n                                path = \'\';\n                            } else {\n                                path = normalizePath(path + \"..\");\n                                path = path && path != \'/\' ? path + \'/\' : path;\n                            }\n                        }\n                    }\n                }\n            }\n\n            return symbol;\n        }\n\n        public resolveTypeMember(scope: SymbolScope, dotNode: BinaryExpression): Type {\n            var lhs = dotNode.operand1;\n            var rhs = dotNode.operand2;\n            var resultType = this.anyType;\n            var lhsType = this.anyType;\n\n            if (lhs && rhs && (rhs.nodeType === NodeType.Name)) {\n                if (lhs.nodeType === NodeType.Dot) {\n                    lhsType = this.resolveTypeMember(scope, <BinaryExpression>lhs);\n                }\n                else if (lhs.nodeType === NodeType.Name) {\n                    var identifier = <Identifier>lhs;\n                    var symbol = scope.find(identifier.text, false, true);\n                    if (symbol === null) {\n                        this.errorReporter.unresolvedSymbol(identifier, identifier.actualText);\n                    }\n                    else if (symbol.isType()) {\n\n                        var typeSymbol = <TypeSymbol> symbol;\n\n                        if (typeSymbol.aliasLink && !typeSymbol.type && typeSymbol.aliasLink.alias.nodeType === NodeType.Name) {\n                            var modPath = (<Identifier>typeSymbol.aliasLink.alias).text;\n                            var modSym = this.findSymbolForDynamicModule(modPath, this.locationInfo.fileName, (id) => scope.find(id, false, true));\n                            if (modSym) {\n                                typeSymbol.type = modSym.getType();\n                            }\n                        }\n\n                        if (this.compilationSettings.optimizeModuleCodeGen && symbol) {\n                            var symType = symbol.getType();\n                            // Once the type has been referenced outside of a type ref position, there\'s\n                            // no going back                        \n                            if (symType && typeSymbol.aliasLink && typeSymbol.onlyReferencedAsTypeRef) {\n\n                                var modDecl = <ModuleDeclaration>symType.symbol.declAST;\n                                if (modDecl && hasFlag(modDecl.getModuleFlags(), ModuleFlags.IsDynamic)) {\n                                    typeSymbol.onlyReferencedAsTypeRef = !this.resolvingBases;\n                                }\n                            }\n                        }\n                        if (!symbol.visible(scope, this)) {\n                            this.errorReporter.simpleError(lhs, \"The symbol \'\" + identifier.actualText + \"\' is not visible at this point\");\n                        }\n                        lhsType = symbol.getType();\n\n                        identifier.sym = symbol;\n                    }\n                    else {\n                        this.errorReporter.simpleError(lhs, \"Expected type\");\n                    }\n\n                }\n\n                // if the LHS type is a module alias, we won\'t be able to resolve it until\n                // typecheck type.  If this is called during binding, lhsType will be null\n                if (!lhsType) {\n                    lhsType = this.anyType;\n                }\n\n                if (lhsType != this.anyType) {\n                    var rhsIdentifier = <Identifier>rhs;\n                    var resultSymbol = this.lookupMemberTypeSymbol(lhsType, rhsIdentifier.text);\n                    if (resultSymbol === null) {\n                        resultType = this.anyType;\n                        this.errorReporter.simpleError(dotNode, \"Expected type\");\n                    }\n                    else {\n                        resultType = resultSymbol.getType();\n                        if (!resultSymbol.visible(scope, this)) {\n                            this.errorReporter.simpleError(lhs, \"The symbol \'\" + (<Identifier>rhs).actualText + \"\' is not visible at this point\");\n                        }\n                    }\n                    rhsIdentifier.sym = resultType.symbol;\n                }\n            }\n            if (resultType.isClass()) {\n                resultType = resultType.instanceType;\n            }\n            return resultType;\n        }\n\n        public resolveFuncDecl(funcDecl: FuncDecl, scope: SymbolScope,\n            fgSym: TypeSymbol): Symbol {\n            var functionGroupSymbol = this.createFunctionSignature(funcDecl, scope.container, scope, fgSym, false).declAST.type.symbol;\n            var signatures: Signature[];\n            if (funcDecl.isConstructMember()) {\n                signatures = functionGroupSymbol.type.construct.signatures;\n            }\n            else if (funcDecl.isIndexerMember()) {\n                signatures = functionGroupSymbol.type.getInstanceType().index.signatures;\n            }\n            else {\n                signatures = functionGroupSymbol.type.call.signatures;\n            }\n\n            var signature = signatures[signatures.length - 1];\n            var len = signature.parameters.length;\n            for (var i = 0; i < len; i++) {\n                var paramSym: ParameterSymbol = signature.parameters[i];\n                this.resolveTypeLink(scope, paramSym.parameter.typeLink, true);\n            }\n\n            // If a vararg list is present, check that the type is an array type\n            if (len && funcDecl.variableArgList) {\n                if (!signature.parameters[len - 1].parameter.typeLink.type.elementType) {\n                    this.errorReporter.simpleErrorFromSym(signature.parameters[len - 1].parameter.symbol, \"... parameter must have array type\");\n                    signature.parameters[len - 1].parameter.typeLink.type = this.makeArrayType(signature.parameters[len - 1].parameter.typeLink.type);\n                }\n            }\n            this.resolveTypeLink(scope, signature.returnType,\n                            funcDecl.isSignature());\n            return functionGroupSymbol;\n        }\n\n        public resolveVarDecl(varDecl: VarDecl, scope: SymbolScope): Symbol {\n            var field = new ValueLocation();\n            var fieldSymbol =\n                new FieldSymbol(varDecl.id.text, varDecl.minChar, this.locationInfo.fileName, true,\n                                //(varDecl.getVarFlags() & VariableFlags.Readonly) === VariableFlags.None,\n                                field);\n            fieldSymbol.transferVarFlags(varDecl.getVarFlags());\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = varDecl;\n            field.typeLink = getTypeLink(varDecl.typeExpr, this, varDecl.init === null);\n            this.resolveTypeLink(scope, field.typeLink, true);\n            varDecl.sym = fieldSymbol;\n            varDecl.type = field.typeLink.type;\n            return fieldSymbol;\n        }\n\n        public resolveTypeLink(scope: SymbolScope, typeLink: TypeLink, supplyVar: bool): void {\n            var arrayCount = 0;\n            if (typeLink.type === null) {\n                var ast: AST = typeLink.ast;\n                if (ast) {\n                    while (typeLink.type === null) {\n                        switch (ast.nodeType) {\n                            case NodeType.Name:\n                                var identifier = <Identifier>ast;\n                                var symbol = scope.find(identifier.text, false, true);\n                                if (symbol === null) {\n                                    typeLink.type = this.anyType;\n                                    this.errorReporter.unresolvedSymbol(identifier, identifier.actualText);\n                                }\n                                else if (symbol.isType()) {\n                                    if (!symbol.visible(scope, this)) {\n                                        this.errorReporter.simpleError(ast, \"The symbol \'\" + identifier.actualText + \"\' is not visible at this point\");\n                                    }\n                                    identifier.sym = symbol;\n                                    typeLink.type = symbol.getType();\n                                    if (typeLink.type) {\n                                        if (typeLink.type.isClass()) {\n                                            typeLink.type = typeLink.type.instanceType;\n                                        }\n                                    }\n                                    else {\n                                        typeLink.type = this.anyType;\n                                    }\n                                }\n                                else {\n                                    typeLink.type = this.anyType;\n                                    this.errorReporter.simpleError(ast, \"Expected type\");\n                                }\n                                break;\n                            case NodeType.Dot:\n                                typeLink.type = this.resolveTypeMember(scope, <BinaryExpression>ast);\n                                break;\n                            case NodeType.TypeRef:\n                                var typeRef = <TypeReference>ast;\n                                arrayCount = typeRef.arrayCount;\n                                ast = typeRef.term;\n                                if (ast === null) {\n                                    typeLink.type = this.anyType;\n                                }\n                                break;\n                            case NodeType.InterfaceDeclaration:\n                                var interfaceDecl = <InterfaceDeclaration>ast;\n                                var interfaceType = new Type();\n                                var interfaceSymbol = new TypeSymbol((<Identifier>interfaceDecl.name).text,\n                                                                   ast.minChar,\n                                                                   ast.limChar - ast.minChar,\n                                                                   this.locationInfo.fileName,\n                                                                   interfaceType, this.compilationSettings.optimizeModuleCodeGen);\n                                interfaceType.symbol = interfaceSymbol;\n                                interfaceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n                                interfaceType.containedScope =\n                                    new SymbolTableScope(interfaceType.members, null, null, null,\n                                                         interfaceSymbol);\n\n                                interfaceType.containedScope.container = interfaceSymbol;\n                                interfaceType.memberScope = interfaceType.containedScope;\n\n                                var memberList = <ASTList>interfaceDecl.members;\n                                var props: AST[] = memberList.members;\n                                var propsLen = props.length;\n\n                                for (var j = 0; j < propsLen; j++) {\n                                    var propDecl = props[j];\n                                    var propSym: Symbol = null;\n                                    var addMember = true;\n                                    var id: Identifier = null;\n                                    if (propDecl.nodeType === NodeType.FuncDecl) {\n                                        var funcDecl = <FuncDecl>propDecl;\n                                        id = funcDecl.name;\n                                        propSym = interfaceType.members.allMembers.lookup(funcDecl.getNameText());\n                                        addMember = (propSym === null);\n                                        if (funcDecl.isSpecialFn()) {\n                                            addMember = false;\n                                            propSym = this.resolveFuncDecl(funcDecl, scope, interfaceSymbol);\n                                        }\n                                        else {\n                                            propSym = this.resolveFuncDecl(funcDecl, scope, <TypeSymbol>propSym);\n                                        }\n                                        funcDecl.type = (<TypeSymbol>propSym).type;\n                                    }\n                                    else {\n                                        id = (<VarDecl>propDecl).id;\n                                        propSym = this.resolveVarDecl(<VarDecl>propDecl, scope);\n\n                                        // Don\'t add the member if it was missing a name.  This \n                                        // generally just leads to cascading errors that make things\n                                        // more confusing for the user.\n                                        addMember = !id.isMissing();\n                                    }\n\n                                    if (addMember) {\n                                        if (id && hasFlag(id.getFlags(), ASTFlags.OptionalName)) {\n                                            propSym.flags |= SymbolFlags.Optional;\n                                        }\n                                        if (!interfaceType.members.allMembers.add(propSym.name, propSym)) {\n                                            this.errorReporter.duplicateIdentifier(ast, propSym.name);\n                                        }\n                                    }\n                                }\n\n                                ast.type = interfaceType;\n                                typeLink.type = interfaceType;\n\n                                break;\n                            case NodeType.FuncDecl:\n                                var tsym = <TypeSymbol>this.resolveFuncDecl(<FuncDecl>ast, scope, null);\n                                typeLink.type = tsym.type;\n                                break;\n                            default:\n                                typeLink.type = this.anyType;\n                                this.errorReporter.simpleError(ast, \"Expected type\");\n                                break;\n                        }\n                    }\n                }\n                for (var count = arrayCount; count > 0; count--) {\n                    typeLink.type = this.makeArrayType(typeLink.type);\n                }\n                if (supplyVar && (typeLink.type === null)) {\n                    typeLink.type = this.anyType;\n                }\n                if (typeLink.ast) {\n                    typeLink.ast.type = typeLink.type;\n                }\n            }\n            // else wait for type inference\n        }\n\n        public resolveBaseTypeLink(typeLink: TypeLink, scope: SymbolScope) {\n            this.resolvingBases = true;\n            this.resolveTypeLink(scope, typeLink, true);\n            this.resolvingBases = false;\n            var extendsType: Type = null;\n            if (typeLink.type.isClass()) {\n                extendsType = typeLink.type.instanceType;\n            }\n            else {\n                extendsType = typeLink.type;\n            }\n\n            return extendsType;\n        }\n\n        public findMostApplicableSignature(signatures: ApplicableSignature[], args: ASTList): { sig: Signature; ambiguous: bool; } {\n\n            if (signatures.length === 1) {\n                return { sig: signatures[0].signature, ambiguous: false };\n            }\n\n            var best: ApplicableSignature = signatures[0];\n            var Q: ApplicableSignature = null;\n            var AType: Type = null;\n            var PType: Type = null;\n            var QType: Type = null;\n            var ambiguous = false;\n\n            for (var qSig = 1; qSig < signatures.length; qSig++) {\n                Q = signatures[qSig];\n                var i = 0;\n                // find the better conversion\n                for (i = 0; args && i < args.members.length; i++) {\n                    AType = args.members[i].type;\n                    PType = i < best.signature.parameters.length ? best.signature.parameters[i].getType() : best.signature.parameters[best.signature.parameters.length - 1].getType().elementType;\n                    QType = i < Q.signature.parameters.length ? Q.signature.parameters[i].getType() : Q.signature.parameters[Q.signature.parameters.length - 1].getType().elementType;\n\n                    if (this.typesAreIdentical(PType, QType)) {\n                        continue;\n                    }\n                    else if (this.typesAreIdentical(AType, PType)) {\n                        break;\n                    }\n                    else if (this.typesAreIdentical(AType, QType)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(PType, QType)) {\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(QType, PType)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (Q.hadProvisionalErrors) {\n                        break;\n                    }\n                    else if (best.hadProvisionalErrors) {\n                        best = Q;\n                        break;\n                    }\n                }\n\n                if (!args || i === args.members.length) {\n                    var collection: ITypeCollection = {\n                        getLength: () => { return 2; },\n                        setTypeAtIndex: (index: number, type: Type) => { }, // no contextual typing here, so no need to do anything\n                        getTypeAtIndex: (index: number) => { return index ? Q.signature.returnType.type : best.signature.returnType.type; } // we only want the \"second\" type - the \"first\" is skipped\n                    }\n                    var bct = this.findBestCommonType(best.signature.returnType.type, null, collection, true);\n                    ambiguous = !bct;\n                }\n                else {\n                    ambiguous = false;\n                }\n            }\n\n            return { sig: best.signature, ambiguous: ambiguous };\n        }\n\n        public getApplicableSignatures(signatures: Signature[], args: ASTList, comparisonInfo: TypeComparisonInfo): ApplicableSignature[] {\n\n            var applicableSigs: ApplicableSignature[] = [];\n            var memberType: Type = null;\n            var miss = false;\n            var cxt: ContextualTypeContext = null;\n            var hadProvisionalErrors = false;\n\n            for (var i = 0; i < signatures.length; i++) {\n                miss = false;\n\n                for (var j = 0; j < args.members.length; j++) {\n\n                    if (j >= signatures[i].parameters.length) {\n                        continue;\n                    }\n                    memberType = signatures[i].parameters[j].getType();\n\n                    // account for varargs\n                    if (signatures[i].declAST.variableArgList && (j >= signatures[i].nonOptionalParameterCount - 1) && memberType.isArray()) {\n                        memberType = memberType.elementType;\n                    }\n\n                    if (memberType === this.anyType) {\n                        continue;\n                    }\n                    else if (args.members[j].nodeType === NodeType.FuncDecl) {\n                        if (this.typeFlow.functionInterfaceType && memberType === this.typeFlow.functionInterfaceType) {\n                            continue;\n                        }\n                        if (!this.canContextuallyTypeFunction(memberType, <FuncDecl>args.members[j], true)) {\n                            // if it\'s just annotations that are blocking us, typecheck the function and add it to the list\n                            if (this.canContextuallyTypeFunction(memberType, <FuncDecl>args.members[j], false)) {\n                                this.typeFlow.typeCheck(args.members[j]);\n                                if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                                    break;\n                                }\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        else { // if it can be contextually typed, try it out...\n\n                            this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                            this.cleanStartedPTO();\n                            hadProvisionalErrors = this.hadProvisionalErrors();\n\n                            if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                                if (comparisonInfo) {\n                                    comparisonInfo.setMessage(\"Could not apply type \'\" + memberType.getTypeName() + \"\' to argument \" + (j + 1) + \", which is of type \'\" + args.members[j].type.getTypeName() + \"\'\");\n                                }\n                                miss = true;\n                            }\n\n                            // clean the type\n                            //if (hadProvisionalErrors) {\n                            //    cxt = this.currentContextualTypeContext;\n                            //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n                            //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                            //        miss = true;\n                            //    }\n                            //    this.cleanStartedPTO();\n                            //}\n\n                            this.resetProvisionalErrors();\n                            if (miss) {\n                                break;\n                            }\n                        }\n                    }\n                    else if (args.members[j].nodeType === NodeType.ObjectLit) {\n                        // now actually attempt to typecheck as the contextual type\n                        if (this.typeFlow.objectInterfaceType && memberType === this.typeFlow.objectInterfaceType) {\n                            continue;\n                        }\n\n                        this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                        this.cleanStartedPTO();\n                        hadProvisionalErrors = this.hadProvisionalErrors(); \n\n                        if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage(\"Could not apply type \'\" + memberType.getTypeName() + \"\' to argument \" + (j + 1) + \", which is of type \'\" + args.members[j].type.getTypeName() + \"\'\");\n                            }\n                            miss = true;\n                        }\n\n                        // clean the type\n                        //if (hadProvisionalErrors) {\n                        //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n\n                        //    // is the \"cleaned\" type even assignable?\n                        //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                        //        miss = true;\n                        //    }\n\n                        //    this.cleanStartedPTO();\n                        //}\n\n                        this.resetProvisionalErrors();\n                        if (miss) {\n                            break;\n                        }\n                    }\n                    else if (args.members[j].nodeType === NodeType.ArrayLit) {\n                        // attempt to contextually type the array literal\n                        if (this.typeFlow.arrayInterfaceType && memberType === this.typeFlow.arrayInterfaceType) {\n                            continue;\n                        }\n\n                        this.typeCheckWithContextualType(memberType, true, true, args.members[j]);\n                        this.cleanStartedPTO();\n                        hadProvisionalErrors = this.hadProvisionalErrors(); \n\n                        if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage(\"Could not apply type \'\" + memberType.getTypeName() + \"\' to argument \" + (j + 1) + \", which is of type \'\" + args.members[j].type.getTypeName() + \"\'\");\n                            }\n                            break;\n                        }\n\n                        // clean the type\n                        //if (hadProvisionalErrors) {\n                        //    this.typeCheckWithContextualType(null, true, true, args.members[j]);\n                        //    if (!this.sourceIsAssignableToTarget(args.members[j].type, memberType)) {\n                        //        miss = true;\n                        //    }\n\n                        //    this.cleanStartedPTO();\n                        //}\n\n                        this.resetProvisionalErrors();\n                        if (miss) {\n                            break;\n                        }\n                    }\n                }\n\n                if (j === args.members.length) {\n                    applicableSigs[applicableSigs.length] = { signature: signatures[i], hadProvisionalErrors: hadProvisionalErrors };\n                }\n                hadProvisionalErrors = false;\n            }\n\n            return applicableSigs;\n        }\n\n        public canContextuallyTypeFunction(candidateType: Type, funcDecl: FuncDecl, beStringent: bool): bool {\n\n            // in these cases, we do not attempt to apply a contextual type\n            //  RE: isInlineCallLiteral - if the call target is a function literal, we don\'t want to apply the target type\n            //  to its body - instead, it should be applied to its return type\n            if (funcDecl.isMethod() ||\n                beStringent && funcDecl.returnTypeAnnotation) {\n                return false;\n            }\n\n            beStringent = beStringent || (this.typeFlow.functionInterfaceType === candidateType);\n\n            // At this point, if we\'re not being stringent, there\'s no need to check for multiple call sigs\n            // or count parameters - we just want to unblock typecheck\n            if (!beStringent) {\n                return true;\n            }\n\n            // If we\'re coming from an in-scope typecheck, lambdas may not have had function signatures created for them\n            // REVIEW: Should we search out the overload group here?\n            if (!funcDecl.signature) {\n                this.createFunctionSignature(funcDecl, this.typeFlow.scope.container, this.typeFlow.scope, null, null);\n                this.typeFlow.typeCheck(funcDecl);\n            }\n\n            var signature = funcDecl.signature;\n            var paramLen = signature.parameters.length;\n\n            // Check that the argument declarations have no type annotations\n            for (var i = 0; i < paramLen; i++) {\n                var param = signature.parameters[i];\n                var symbol = <ParameterSymbol>param;\n                var argDecl = <ArgDecl>symbol.declAST;\n\n                // REVIEW: a valid typeExpr is a requirement for varargs,\n                // so we may want to revise our invariant\n                if (beStringent && argDecl.typeExpr) {\n                    return false;\n                }\n            }\n\n            if (candidateType.construct && candidateType.call) {\n                return false;\n            }\n\n            var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;\n\n            if (!candidateSigs || candidateSigs.signatures.length > 1) {\n                return false;\n            }\n\n            // if we\'re here, the contextual type can be applied to the function\n            return true;\n        }\n\n        public canContextuallyTypeObjectLiteral(targetType: Type, objectLit: UnaryExpression): bool {\n\n            if (targetType === this.typeFlow.objectInterfaceType) {\n                return true;\n            }\n\n            var memberDecls = <ASTList>objectLit.operand;\n\n            if (!(memberDecls && targetType.memberScope)) {\n                return false;\n            }\n\n            var id: AST = null;\n            var targetMember: Symbol = null;\n            var text = \"\";\n            var foundSyms = {};\n            var i = 0;\n\n            // Check that each property in the object literal is present in the target\n            // type\n            for (i = 0; i < memberDecls.members.length; i++) {\n                id = (<BinaryExpression>memberDecls.members[i]).operand1;\n\n                if (id.nodeType === NodeType.Name) {\n                    text = (<Identifier>id).text;\n                }\n                else if (id.nodeType === NodeType.StringLiteral) {\n                    // TODO: set text to unescaped string\n                    var idText = (<StringLiteral>id).text;\n                    text = idText.substring(1, idText.length - 1);\n                }\n                else {\n                    return false;\n                }\n\n                targetMember = targetType.memberScope.find(text, true, false);\n\n                if (!targetMember) {\n                    return false;\n                }\n\n                foundSyms[text] = true;\n            }\n\n            // Check that all members in the target type are present in the object literal\n            var targetMembers = targetType.memberScope.getAllValueSymbolNames(true);\n\n            for (i = 0; i < targetMembers.length; i++) {\n                var memberName = targetMembers[i];\n                var memberSym = targetType.memberScope.find(memberName, true, false);\n\n                if (!foundSyms[targetMembers[i]] &&\n                    !hasFlag(memberSym.flags, SymbolFlags.Optional)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public widenType(t: Type) {\n            if (t === this.undefinedType || t === this.nullType) { // REVIEW: not isNullOrUndefinedType for perf reasons\n                return this.anyType;\n            }\n\n            return t;\n        }\n\n        public isNullOrUndefinedType(t: Type) {\n            return t === this.undefinedType || t === this.nullType;\n        }\n\n        public findBestCommonType(initialType: Type, targetType: Type, collection: ITypeCollection, acceptVoid:bool, comparisonInfo?: TypeComparisonInfo) {\n            var i = 0;\n            var len = collection.getLength();\n            var nlastChecked = 0;\n            var bestCommonType = initialType;\n\n            if (targetType) {\n                bestCommonType = bestCommonType ? bestCommonType.mergeOrdered(targetType, this, acceptVoid) : targetType;\n            }\n\n            // it\'s important that we set the convergence type here, and not in the loop,\n            // since the first element considered may be the contextual type\n            var convergenceType: Type = bestCommonType;\n\n            while (nlastChecked < len) {\n\n                for (i = 0; i < len; i++) {\n\n                    // no use in comparing a type against itself\n                    if (i === nlastChecked) {\n                        continue;\n                    }\n\n                    if (convergenceType && (bestCommonType = convergenceType.mergeOrdered(collection.getTypeAtIndex(i), this, acceptVoid, comparisonInfo))) {\n                        convergenceType = bestCommonType;\n                    }\n\n                    if (bestCommonType === this.anyType || bestCommonType === null) {\n                        break;\n                    }\n                    else if (targetType) { // set the element type to the target type\n                        collection.setTypeAtIndex(i, targetType);\n                    }\n                }\n\n                // use the type if we\'ve agreed upon it\n                if (convergenceType && bestCommonType) {\n                    break;\n                }\n\n                nlastChecked++;\n                if (nlastChecked < len) {\n                    convergenceType = collection.getTypeAtIndex(nlastChecked);\n                }\n            }\n\n            return acceptVoid ? bestCommonType : (bestCommonType === this.voidType ? null : bestCommonType);\n        }\n\n        // Type Identity\n\n        public typesAreIdentical(t1: Type, t2: Type) {\n\n            // This clause will cover both primitive types (since the type objects are shared),\n            // as well as shared brands\n            if (t1 === t2) {\n                return true;\n            }\n\n            if (!t1 || !t2) {\n                return false;\n            }\n\n            if (t1.isClass() || t1.isClassInstance()) {\n                return false;\n            }\n\n            var comboId = (t2.typeID << 16) | t1.typeID;\n\n            if (this.identicalCache[comboId]) {\n                return true;\n            }\n\n            // If one is an enum, and they\'re not the same type, they\'re not identical\n            if ((t1.typeFlags & TypeFlags.IsEnum) || (t2.typeFlags & TypeFlags.IsEnum)) {\n                return false;\n            }\n\n            if (t1.isArray() || t2.isArray()) {\n                if (!(t1.isArray() && t2.isArray())) {\n                    return false;\n                }\n                this.identicalCache[comboId] = false;\n                var ret = this.typesAreIdentical(t1.elementType, t2.elementType);\n                if (ret) {\n                    this.subtypeCache[comboId] = true;\n                }\n                else {\n                    this.subtypeCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            if (t1.primitiveTypeClass != t2.primitiveTypeClass) {\n                return false;\n            }\n\n            this.identicalCache[comboId] = false;\n\n            // properties are identical in name, optionality, and type\n            // REVIEW: TypeChanges - The compiler does not currently check against the members of parent types!\n            // REVIEW: TypeChanges - What about ambientMembers?\n            if (t1.memberScope && t2.memberScope) {\n                var t1MemberKeys = t1.memberScope.getAllValueSymbolNames(true).sort();\n                var t2MemberKeys = t2.memberScope.getAllValueSymbolNames(true).sort();\n\n                if (t1MemberKeys.length != t2MemberKeys.length) {\n                    this.identicalCache[comboId] = undefined;\n                    return false;\n                }\n\n                var t1MemberSymbol: Symbol = null;\n                var t2MemberSymbol: Symbol = null;\n\n                var t1MemberType: Type = null;\n                var t2MemberType: Type = null;\n\n                for (var iMember = 0; iMember < t1MemberKeys.length; iMember++) {\n                    if (t1MemberKeys[iMember] != t2MemberKeys[iMember]) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n\n                    t1MemberSymbol = <Symbol>t1.memberScope.find(t1MemberKeys[iMember], false, false);\n                    t2MemberSymbol = <Symbol>t2.memberScope.find(t2MemberKeys[iMember], false, false);\n\n                    if ((t1MemberSymbol.flags & SymbolFlags.Optional) != (t2MemberSymbol.flags & SymbolFlags.Optional)) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n\n                    t1MemberType = t1MemberSymbol.getType();\n                    t2MemberType = t2MemberSymbol.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (t1MemberType && t2MemberType && (this.identicalCache[(t2MemberType.typeID << 16) | t1MemberType.typeID] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.typesAreIdentical(t1MemberType, t2MemberType)) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n                }\n            }\n            else if (t1.memberScope || t2.memberScope) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.call, t2.call)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.construct, t2.construct)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1.index, t2.index)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            this.identicalCache[comboId] = true;\n            return true;\n        }\n\n        public signatureGroupsAreIdentical(sg1: SignatureGroup, sg2: SignatureGroup) {\n\n            // covers the null case\n            if (sg1 === sg2) {\n                return true;\n            }\n\n            // covers the mixed-null case\n            if (!sg1 || !sg2) {\n                return false;\n            }\n\n            if (sg1.signatures.length != sg2.signatures.length) {\n                return false;\n            }\n\n            var sig1: Signature = null;\n            var sig2: Signature = null;\n            var sigsMatch = false;\n\n            // The signatures in the signature group may not be ordered...\n            // REVIEW: Should definition signatures be required to be identical as well?\n            for (var iSig1 = 0; iSig1 < sg1.signatures.length; iSig1++) {\n                sig1 = sg1.signatures[iSig1];\n\n                for (var iSig2 = 0; iSig2 < sg2.signatures.length; iSig2++) {\n                    sig2 = sg2.signatures[iSig2];\n\n                    if (this.signaturesAreIdentical(sig1, sig2)) {\n                        sigsMatch = true;\n                        break;\n                    }\n                }\n\n                if (sigsMatch) {\n                    sigsMatch = false;\n                    continue;\n                }\n\n                // no match found for a specific signature\n                return false;\n            }\n\n            return true;\n        }\n\n        public signaturesAreIdentical(s1: Signature, s2: Signature) {\n\n            if (s1.hasVariableArgList != s2.hasVariableArgList) {\n                return false;\n            }\n\n            if (s1.nonOptionalParameterCount != s2.nonOptionalParameterCount) {\n                return false;\n            }\n\n            if (s1.parameters.length != s2.parameters.length) {\n                return false;\n            }\n\n            if (!this.typesAreIdentical(s1.returnType.type, s2.returnType.type)) {\n                return false;\n            }\n\n            for (var iParam = 0; iParam < s1.parameters.length; iParam++) {\n                if (!this.typesAreIdentical(s1.parameters[iParam].parameter.typeLink.type, s2.parameters[iParam].parameter.typeLink.type)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        // Subtyping and Assignment compatibility\n\n        public sourceIsSubtypeOfTarget(source: Type, target: Type, comparisonInfo?: TypeComparisonInfo) { return this.sourceIsRelatableToTarget(source, target, false, this.subtypeCache, comparisonInfo); }\n        public signatureGroupIsSubtypeOfTarget(sg1: SignatureGroup, sg2: SignatureGroup, comparisonInfo?: TypeComparisonInfo) { return this.signatureGroupIsRelatableToTarget(sg1, sg2, false, this.subtypeCache, comparisonInfo); }\n        public signatureIsSubtypeOfTarget(s1: Signature, s2: Signature, comparisonInfo?: TypeComparisonInfo) { return this.signatureIsRelatableToTarget(s1, s2, false, this.subtypeCache, comparisonInfo); }\n\n        public sourceIsAssignableToTarget(source: Type, target: Type, comparisonInfo?: TypeComparisonInfo) { return this.sourceIsRelatableToTarget(source, target, true, this.assignableCache, comparisonInfo); }\n        public signatureGroupIsAssignableToTarget(sg1: SignatureGroup, sg2: SignatureGroup, comparisonInfo?: TypeComparisonInfo) { return this.signatureGroupIsRelatableToTarget(sg1, sg2, true, this.assignableCache, comparisonInfo); }\n        public signatureIsAssignableToTarget(s1: Signature, s2: Signature, comparisonInfo?: TypeComparisonInfo) { return this.signatureIsRelatableToTarget(s1, s2, true, this.assignableCache, comparisonInfo); }\n\n        public sourceIsRelatableToTarget(source: Type, target: Type, assignableTo: bool, comparisonCache: any, comparisonInfo: TypeComparisonInfo) {\n\n            // REVIEW: Does this check even matter?\n            //if (this.typesAreIdentical(source, target)) {\n            //    return true;\n            //}\n            if (source === target) {\n                return true;\n            }\n\n            // An error has already been reported in this case\n            if (!(source && target)) {\n                return true;\n            }\n\n            var comboId = (source.typeID << 16) | target.typeID;\n\n            // In the case of a \'false\', we want to short-circuit a recursive typecheck\n            if (comparisonCache[comboId] != undefined) {\n                return true;\n            }\n\n            // this is one difference between subtyping and assignment compatibility\n            if (assignableTo) {\n                if (source === this.anyType || target === this.anyType) {\n                    return true;\n                }\n            }\n            else {\n                // This is one difference between assignment compatibility and subtyping\n                if (target === this.anyType) {\n                    return true;\n                }\n            }\n\n            if (source === this.undefinedType) {\n                return true;\n            }\n\n            if ((source === this.nullType) && (target != this.undefinedType && target != this.voidType)) {\n                return true;\n            }\n\n            // REVIEW: enum types aren\'t explicitly covered in the spec\n            if (target === this.numberType && (source.typeFlags & TypeFlags.IsEnum)) {\n                return true;\n            }\n            if (source === this.numberType && (target.typeFlags & TypeFlags.IsEnum)) {\n                return true;\n            }\n            if ((source.typeFlags & TypeFlags.IsEnum) || (target.typeFlags & TypeFlags.IsEnum)) {\n                return false;\n            }\n\n            if (source.isArray() || target.isArray()) {\n                if (!(source.isArray() && target.isArray())) {\n                    return false;\n                }\n                comparisonCache[comboId] = false;\n                var ret = this.sourceIsRelatableToTarget(source.elementType, target.elementType, assignableTo, comparisonCache, comparisonInfo);\n                if (ret) {\n                    comparisonCache[comboId] = true;\n                }\n                else {\n                    comparisonCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            // this check ensures that we only operate on object types from this point forward,\n            // since the checks involving primitives occurred above\n            if (source.primitiveTypeClass != target.primitiveTypeClass) {\n\n                if (target.primitiveTypeClass === Primitive.None) {\n                    if (source === this.numberType && this.typeFlow.numberInterfaceType) {\n                        source = this.typeFlow.numberInterfaceType;\n                    }\n                    else if (source === this.stringType && this.typeFlow.stringInterfaceType) {\n                        source = this.typeFlow.stringInterfaceType;\n                    }\n                    else if (source === this.booleanType && this.typeFlow.booleanInterfaceType) {\n                        source = this.typeFlow.booleanInterfaceType;\n                    }\n                    else {\n                        return false;\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = false;\n\n            if (source.hasBase(target)) {\n                comparisonCache[comboId] = true;\n                return true;\n            }\n\n            if (this.typeFlow.objectInterfaceType && target === this.typeFlow.objectInterfaceType) {\n                return true;\n            }\n\n            if (this.typeFlow.functionInterfaceType && (source.call || source.construct) && target === this.typeFlow.functionInterfaceType) {\n                return true;\n            }\n\n            // REVIEW: We should perhaps do this, though it wouldn\'t be quite right without generics support\n            //if (this.typeFlow.arrayInterfaceType && (source.index) && target === this.typeFlow.arrayInterfaceType) {\n            //    return true;\n            //}\n\n            // At this point, if the target is a class, but not the source or a parent of the source, bail\n            if (target.isClass() || target.isClassInstance()) {\n                comparisonCache[comboId] = undefined;\n                return false;\n            }\n\n            if (target.memberScope && source.memberScope) {\n                var mPropKeys = target.memberScope.getAllValueSymbolNames(true);\n                var mProp: Symbol = null;\n                var nProp: Symbol = null;\n                var mPropType: Type = null;\n                var nPropType: Type = null;\n                var inferenceSymbol: InferenceSymbol = null;\n\n                for (var iMProp = 0; iMProp < mPropKeys.length; iMProp++) {\n                    mProp = target.memberScope.find(mPropKeys[iMProp], false, false);\n                    nProp = source.memberScope.find(mPropKeys[iMProp], false, false);\n\n                    // methods do not have the \"arguments\" field\n                    if (mProp.name === \"arguments\" &&\n                        this.typeFlow.iargumentsInterfaceType &&\n                        (this.typeFlow.iargumentsInterfaceType.symbol.flags & SymbolFlags.CompilerGenerated) &&\n                        mProp.kind() === SymbolKind.Variable &&\n                        (<VariableSymbol>mProp).variable.typeLink.type === this.typeFlow.iargumentsInterfaceType) {\n                        continue;\n                    }\n\n                    if (mProp.isInferenceSymbol()) {\n                        inferenceSymbol = <InferenceSymbol>mProp;\n                        if (inferenceSymbol.typeCheckStatus === TypeCheckStatus.NotStarted) {\n                            // REVIEW: TypeChanges: Does this ever really happen?  Maybe for out-of-order typecheck?\n                            this.typeFlow.typeCheck(mProp.declAST);\n                        }\n                    }\n                    mPropType = mProp.getType();\n\n                    if (!nProp) {\n                        // If it\'s not present on the type in question, look for the property on \'Object\'\n                        if (this.typeFlow.objectInterfaceType) {\n                            nProp = this.typeFlow.objectInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);\n                        }\n\n                        if (!nProp) {\n                            // Now, the property was not found on Object, but the type in question is a function, look\n                            // for it on function\n                            if (this.typeFlow.functionInterfaceType && (mPropType.call || mPropType.construct)) {\n                                nProp = this.typeFlow.functionInterfaceType.memberScope.find(mPropKeys[iMProp], false, false);\n                            }\n\n                            // finally, check to see if the property is optional\n                            if (!nProp) {\n                                if (!(mProp.flags & SymbolFlags.Optional)) {\n                                    comparisonCache[comboId] = undefined;\n                                    if (comparisonInfo) { // only surface the first error\n                                        comparisonInfo.flags |= TypeRelationshipFlags.RequiredPropertyIsMissing;\n                                        comparisonInfo.addMessageToFront(\"Type \'\" + source.getTypeName() + \"\' is missing property \'\" + mPropKeys[iMProp] + \"\' from type \'\" + target.getTypeName() + \"\'\");\n                                    }\n                                    return false;\n                                }\n                                else {\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    if (nProp.isInferenceSymbol()) {\n                        inferenceSymbol = <InferenceSymbol>nProp;\n                        if (inferenceSymbol.typeCheckStatus === TypeCheckStatus.NotStarted) {\n                            this.typeFlow.typeCheck(nProp.declAST);\n                        }\n                    }\n\n\n                    nPropType = nProp.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (mPropType && nPropType && (comparisonCache[(nPropType.typeID << 16) | mPropType.typeID] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.sourceIsRelatableToTarget(nPropType, mPropType, assignableTo, comparisonCache, comparisonInfo)) {\n                        comparisonCache[comboId] = undefined;\n                        if (comparisonInfo) { // only surface the first error\n                            comparisonInfo.flags |= TypeRelationshipFlags.IncompatiblePropertyTypes;\n                            comparisonInfo.addMessageToFront(\"Types of property \'\" + mProp.name + \"\' of types \'\" + source.getTypeName() + \"\' and \'\" + target.getTypeName() + \"\' are incompatible\");\n                        }\n                        return false;\n                    }\n                }\n            }\n\n            // check signature groups\n            var hasSig: string;\n            var lacksSig: string;\n            \n            if (source.call || target.call) {\n                if (!this.signatureGroupIsRelatableToTarget(source.call, target.call, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        if (source.call && target.call) {\n                            comparisonInfo.addMessageToFront(\"Call signatures of types \'\" + source.getTypeName() + \"\' and \'\" + target.getTypeName() + \"\' are incompatible\");\n                        }\n                        else {\n                            hasSig = target.call ? target.getTypeName() : source.getTypeName();\n                            lacksSig = !target.call ? target.getTypeName() : source.getTypeName();\n                            comparisonInfo.setMessage(\"Type \'\" + hasSig + \"\' requires a call signature, but Type \'\" + lacksSig + \"\' lacks one\");\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            if (source.construct || target.construct) {\n                if (!this.signatureGroupIsRelatableToTarget(source.construct, target.construct, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        if (source.construct && target.construct) {\n                            comparisonInfo.addMessageToFront(\"Construct signatures of types \'\" + source.getTypeName() + \"\' and \'\" + target.getTypeName() + \"\' are incompatible\");\n                        }\n                        else {\n                            hasSig = target.construct ? target.getTypeName() : source.getTypeName();\n                            lacksSig = !target.construct ? target.getTypeName() : source.getTypeName();\n                            comparisonInfo.setMessage(\"Type \'\" + hasSig + \"\' requires a construct signature, but Type \'\" + lacksSig + \"\' lacks one\");\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            if (target.index) {\n                var targetIndex = !target.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : target.index;\n                var sourceIndex = !source.index && this.typeFlow.objectInterfaceType ? this.typeFlow.objectInterfaceType.index : source.index;\n\n                if (!this.signatureGroupIsRelatableToTarget(sourceIndex, targetIndex, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.addMessageToFront(\"Index signatures of types \'\" + source.getTypeName() + \"\' and \'\" + target.getTypeName() + \"\' are incompatible\");\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = true;\n            return true;\n        }\n\n        // REVIEW: TypeChanges: Return an error context object so the user can get better diagnostic info\n        public signatureGroupIsRelatableToTarget(sourceSG: SignatureGroup, targetSG: SignatureGroup, assignableTo: bool, comparisonCache: any, comparisonInfo?: TypeComparisonInfo) {\n            if (sourceSG === targetSG) {\n                return true;\n            }\n\n            if (!(sourceSG && targetSG)) {\n                return false;\n            }\n\n            var mSig: Signature = null;\n            var nSig: Signature = null;\n            var foundMatch = false;\n\n            for (var iMSig = 0; iMSig < targetSG.signatures.length; iMSig++) {\n                mSig = targetSG.signatures[iMSig];\n\n                for (var iNSig = 0; iNSig < sourceSG.signatures.length; iNSig++) {\n                    nSig = sourceSG.signatures[iNSig];\n                    if (this.signatureIsRelatableToTarget(nSig, mSig, assignableTo, comparisonCache, comparisonInfo)) {\n                        foundMatch = true;\n                        break;\n                    }\n                }\n\n                if (foundMatch) {\n                    foundMatch = false;\n                    continue;\n                }\n                return false;\n            }\n\n            return true;\n        }\n\n        public signatureIsRelatableToTarget(sourceSig: Signature, targetSig: Signature, assignableTo: bool, comparisonCache: any, comparisonInfo?: TypeComparisonInfo) {\n\n            if (!sourceSig.parameters || !targetSig.parameters) {\n                return false;\n            }\n\n            var targetVarArgCount = targetSig.hasVariableArgList ? targetSig.nonOptionalParameterCount - 1 : targetSig.nonOptionalParameterCount;\n            var sourceVarArgCount = sourceSig.hasVariableArgList ? sourceSig.nonOptionalParameterCount - 1 : sourceSig.nonOptionalParameterCount;\n\n            if (sourceVarArgCount > targetVarArgCount && !targetSig.hasVariableArgList) {\n                if (comparisonInfo) {\n                    comparisonInfo.flags |= TypeRelationshipFlags.SourceSignatureHasTooManyParameters;\n                    comparisonInfo.addMessageToFront(\"Call signature expects \" + targetVarArgCount + \" or fewer parameters\");\n                }\n                return false;\n            }\n\n            var sourceReturnType = sourceSig.returnType.type;\n            var targetReturnType = targetSig.returnType.type;\n\n            if (targetReturnType != this.voidType) {\n                if (!this.sourceIsRelatableToTarget(sourceReturnType, targetReturnType, assignableTo, comparisonCache, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleReturnTypes;\n                        // No need to print this one here - it\'s printed as part of the signature error in sourceIsRelatableToTarget\n                        //comparisonInfo.addMessageToFront(\"Incompatible return types: \'\" + sourceReturnType.getTypeName() + \"\' and \'\" + targetReturnType.getTypeName() + \"\'\");\n                    }\n                    return false;\n                }\n            }\n\n            var len = (sourceVarArgCount < targetVarArgCount && sourceSig.hasVariableArgList) ? targetVarArgCount : sourceVarArgCount;\n            var sourceParamType: Type = null;\n            var targetParamType: Type = null;\n            var sourceParamName = \"\";\n            var targetParamName = \"\";\n\n            for (var iSource = 0, iTarget = 0; iSource < len; iSource++, iTarget++) {\n\n                if (!sourceSig.hasVariableArgList || iSource < sourceVarArgCount) {\n                    sourceParamType = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.typeLink.type;\n                    sourceParamName = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.symbol.name;\n                }\n                else if (iSource === sourceVarArgCount) {\n                    sourceParamType = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.typeLink.type;\n                    if (sourceParamType.elementType) {\n                        sourceParamType = sourceParamType.elementType;\n                    }\n                    sourceParamName = (<ParameterSymbol>sourceSig.parameters[iSource]).parameter.symbol.name;\n                }\n\n                if (iTarget < targetSig.parameters.length && iTarget < targetVarArgCount) {\n                    targetParamType = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.typeLink.type;\n                    targetParamName = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.symbol.name;\n                }\n                else if (targetSig.hasVariableArgList && iTarget === targetVarArgCount) {\n                    targetParamType = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.typeLink.type;\n                    if (targetParamType.elementType) {\n                        targetParamType = targetParamType.elementType;\n                    }\n                    targetParamName = (<ParameterSymbol>targetSig.parameters[iTarget]).parameter.symbol.name;\n                }\n\n                if (!(this.sourceIsRelatableToTarget(sourceParamType, targetParamType, assignableTo, comparisonCache, comparisonInfo) ||\n                        this.sourceIsRelatableToTarget(targetParamType, sourceParamType, assignableTo, comparisonCache, comparisonInfo))) {\n\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleParameterTypes;\n                    }\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class Continuation {\n        public exceptionBlock = -1;\n        constructor (public normalBlock: number) { }\n    }\n\n    function getBaseTypeLinks(bases: ASTList, baseTypeLinks: TypeLink[]) {\n        if (bases) {\n            var len = bases.members.length;\n            if (!baseTypeLinks) {\n                baseTypeLinks = [];\n            }\n            for (var i = 0; i < len; i++) {\n                var baseExpr = bases.members[i];\n                var name = baseExpr;\n                var typeLink = new TypeLink();\n                typeLink.ast = name;\n                baseTypeLinks[baseTypeLinks.length] = typeLink;\n            }\n        }\n        return baseTypeLinks;\n    }\n\n    function getBases(type: Type, typeDecl: TypeDeclaration) {\n        type.extendsTypeLinks = getBaseTypeLinks(typeDecl.extendsList, type.extendsTypeLinks);\n        type.implementsTypeLinks = getBaseTypeLinks(typeDecl.implementsList, type.implementsTypeLinks);\n    }\n\n    function addPrototypeField(classType: Type, ast: AST, context: TypeCollectionContext) {\n        var field = new ValueLocation();\n        field.typeLink = new TypeLink();\n        field.typeLink.ast = ast;\n        field.typeLink.type = classType.instanceType;\n\n        var fieldSymbol =\n            new FieldSymbol(\"prototype\", ast.minChar,\n                            context.checker.locationInfo.fileName, true, field);\n        fieldSymbol.flags |= (SymbolFlags.Property | SymbolFlags.BuiltIn);\n        field.symbol = fieldSymbol;\n        fieldSymbol.declAST = ast;\n        classType.members.addPublicMember(\"prototype\", fieldSymbol);\n    }\n\n    export function createNewConstructGroupForType(type: Type) {\n        var signature = new Signature();\n        signature.returnType = new TypeLink();\n        signature.returnType.type = type.instanceType;\n        signature.parameters = [];\n\n        type.construct = new SignatureGroup();\n        type.construct.addSignature(signature);     \n    }\n\n    export function cloneParentConstructGroupForChildType(child: Type, parent: Type) {\n        child.construct = new SignatureGroup();\n        var sig: Signature = null;\n\n        if (!parent.construct) {\n            createNewConstructGroupForType(parent);\n        }\n\n        for (var i = 0; i < parent.construct.signatures.length; i++) { \n            sig = new Signature();\n            sig.parameters = parent.construct.signatures[i].parameters;\n            sig.nonOptionalParameterCount = parent.construct.signatures[i].nonOptionalParameterCount;\n            sig.typeCheckStatus = parent.construct.signatures[i].typeCheckStatus;\n            sig.declAST = parent.construct.signatures[i].declAST;\n            sig.returnType = new TypeLink();\n            sig.returnType.type = child.instanceType;\n            child.construct.addSignature(sig);\n        }\n\n    }\n\n    export var globalId = \"__GLO\";\n\n    export interface IAliasScopeContext {\n        topLevelScope: ScopeChain;\n        members: IHashTable;\n        tcContext: TypeCollectionContext;\n    }\n\n    function findTypeSymbolInScopeChain(name: string, scopeChain: ScopeChain): Symbol {\n        var symbol = scopeChain.scope.find(name, false, true);\n\n        if (symbol === null && scopeChain.previous) {\n            symbol = findTypeSymbolInScopeChain(name, scopeChain.previous);\n        }\n\n        return symbol;\n    }\n\n    function findSymbolFromAlias(alias: AST, context: IAliasScopeContext): Symbol {\n        var symbol: Symbol = null;\n        switch (alias.nodeType) {\n            case NodeType.Name:\n                var name = (<Identifier>alias).text;\n                var isDynamic = isQuoted(name);\n\n                var findSym = (id: string) => {\n                    if (context.members) {\n                        return context.members.lookup(name);\n                    }\n                    else {\n                        return findTypeSymbolInScopeChain(name, context.topLevelScope);\n                    }\n                }\n\n                if (isDynamic) {\n                    symbol = context.tcContext.checker.findSymbolForDynamicModule(name, context.tcContext.script.locationInfo.fileName, findSym);\n                }\n                else {\n                    symbol = findSym(name);\n                }\n\n                break;\n\n            case NodeType.Dot:\n                var dottedExpr = <BinaryExpression>alias;\n                var op1Sym = findSymbolFromAlias(dottedExpr.operand1, context);\n\n                if (op1Sym && op1Sym.getType()) {\n                    symbol = findSymbolFromAlias(dottedExpr.operand2, context);\n                }\n\n                break;\n\n            default:\n                break;\n        }\n\n        if (symbol) {\n            var symType = symbol.getType();\n            if (symType) {\n                var members = symType.members;\n                if (members) {\n                    context.members = members.publicMembers;\n                }\n            }\n        }\n\n        return symbol;\n    }\n\n    export function preCollectImportTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var typeSymbol: TypeSymbol = null;\n        var modType: ModuleType = null;\n        var importDecl = <ImportDeclaration>ast;\n\n        // REVIEW: technically, this call isn\'t strictly necessary, since we\'ll find the type during the call to resolveTypeMembers\n        var aliasedModSymbol = findSymbolFromAlias(importDecl.alias, { topLevelScope: scopeChain, members: null, tcContext: context });\n        var isGlobal = context.scopeChain.container === context.checker.gloMod;\n\n        if (aliasedModSymbol) {\n            var aliasedModType = aliasedModSymbol.getType();\n\n            if (aliasedModType) {\n                modType = <ModuleType>aliasedModType;\n            }\n        }\n\n        typeSymbol = new TypeSymbol(importDecl.id.text, importDecl.id.minChar, importDecl.limChar - importDecl.minChar,\n                                    context.checker.locationInfo.fileName, modType, context.checker.compilationSettings.optimizeModuleCodeGen);\n\n        typeSymbol.aliasLink = importDecl;\n\n        if (context.scopeChain.moduleDecl) {\n            typeSymbol.flags |= SymbolFlags.ModuleMember;\n            typeSymbol.declModule = context.scopeChain.moduleDecl;\n        }\n\n        typeSymbol.declAST = importDecl;\n        importDecl.id.sym = typeSymbol;\n        scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                context.checker.errorReporter, isGlobal, true, false);\n        scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                context.checker.errorReporter, isGlobal, false, false);\n        return true;\n    }\n\n    export function preCollectModuleTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n\n        var moduleDecl: ModuleDeclaration = <ModuleDeclaration>ast;\n\n        var isAmbient = hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.Ambient);\n        var isEnum = hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsEnum);\n        var isGlobal = context.scopeChain.container === context.checker.gloMod;\n        var isExported = hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.Exported);\n        var modName = (<Identifier>moduleDecl.name).text;\n\n        var isDynamic = isQuoted(modName);\n\n        var symbol = scopeChain.scope.findLocal(modName, false, false);\n        var typeSymbol: TypeSymbol = null;\n        var modType: ModuleType = null;\n\n        if (symbol && symbol.declAST && symbol.declAST.nodeType != NodeType.ModuleDeclaration) {\n            context.checker.errorReporter.simpleError(moduleDecl, \"Conflicting symbol name for module \'\" + modName + \"\'\");\n            // Create a new type symbol for the module but keep it anonyms\n            symbol = null;\n            modName = \"\";\n        }\n\n        if (symbol) {\n            var modDeclAST = <ModuleDeclaration>symbol.declAST;\n            var modDeclASTIsExported = hasFlag(modDeclAST.getModuleFlags(), ModuleFlags.Exported);\n            if ((modDeclASTIsExported && !isExported) || (!modDeclASTIsExported && isExported)) {\n                context.checker.errorReporter.simpleError(moduleDecl, \'All contributions to a module must be \"export\" or none\');\n            }\n        }\n        \n        var enclosedTypes: ScopedMembers = null;\n        var ambientEnclosedTypes: ScopedMembers = null;\n\n        if ((symbol === null) || (symbol.kind() != SymbolKind.Type)) {\n\n            if (modType === null) {\n                enclosedTypes = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                ambientEnclosedTypes = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType = new ModuleType(enclosedTypes, ambientEnclosedTypes);\n                if (isEnum) {\n                    modType.typeFlags |= TypeFlags.IsEnum;\n                }\n                modType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                modType.setHasImplementation();\n            }\n\n            typeSymbol = new TypeSymbol(modName, moduleDecl.name.minChar, modName.length,\n                                        context.checker.locationInfo.fileName, modType, context.checker.compilationSettings.optimizeModuleCodeGen);\n            typeSymbol.isDynamic = isQuoted(moduleDecl.prettyName);\n\n            if (context.scopeChain.moduleDecl) {\n                typeSymbol.declModule = context.scopeChain.moduleDecl;\n            }\n            typeSymbol.declAST = moduleDecl;\n            typeSymbol.prettyName = moduleDecl.prettyName;\n            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                    context.checker.errorReporter, isExported || isGlobal, true, isAmbient);\n            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,\n                                    context.checker.errorReporter, isExported || isGlobal, false, isAmbient);\n            modType.symbol = typeSymbol;\n        }\n        else {\n            typeSymbol = <TypeSymbol>symbol;\n\n            // initialize new private scope for the type\n            var publicEnclosedTypes = typeSymbol.type.getAllEnclosedTypes().publicMembers;\n            var publicEnclosedTypesTable = (publicEnclosedTypes === null) ? new StringHashTable() : publicEnclosedTypes;\n            enclosedTypes = new ScopedMembers(new DualStringHashTable(publicEnclosedTypesTable, new StringHashTable()));\n\n            var publicEnclosedAmbientTypes = typeSymbol.type.getAllAmbientEnclosedTypes().publicMembers;\n            var publicAmbientEnclosedTypesTable = (publicEnclosedAmbientTypes === null) ? new StringHashTable() : publicEnclosedAmbientTypes;\n            ambientEnclosedTypes = new ScopedMembers(new DualStringHashTable(publicAmbientEnclosedTypesTable, new StringHashTable()));\n\n            var publicMembers = typeSymbol.type.members.publicMembers;\n            var publicMembersTable = (publicMembers === null) ? new StringHashTable() : publicMembers;\n            var members = new ScopedMembers(new DualStringHashTable(publicMembersTable, new StringHashTable()));\n\n            var publicAmbientMembers = typeSymbol.type.ambientMembers.publicMembers;\n            var publicAmbientMembersTable = (publicAmbientMembers === null) ? new StringHashTable() : publicAmbientMembers;\n            var ambientMembers = new ScopedMembers(new DualStringHashTable(publicAmbientMembersTable, new StringHashTable()));\n\n            modType = new ModuleType(enclosedTypes, ambientEnclosedTypes);\n            if (isEnum) {\n                modType.typeFlags |= TypeFlags.IsEnum;\n            }\n            modType.members = members;\n            modType.ambientMembers = ambientMembers;\n            modType.setHasImplementation();\n            modType.symbol = typeSymbol;\n\n            typeSymbol.addLocation(moduleDecl.minChar);\n            typeSymbol.expansions.push(modType);\n            typeSymbol.expansionsDeclAST.push(moduleDecl);\n\n        }\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n        // REVIEW: If multiple disparate module decls for the same module don\'t agree\n        // in export privileges, how should we handle it?\n        if (isExported) {\n            typeSymbol.flags |= SymbolFlags.Exported;\n        }\n        if ((context.scopeChain.moduleDecl) ||\n            (context.scopeChain.container === context.checker.gloMod)) {\n            typeSymbol.flags |= SymbolFlags.ModuleMember;\n        }\n\n        moduleDecl.mod = modType;\n        pushTypeCollectionScope(typeSymbol, modType.members,\n                                modType.ambientMembers,\n                                modType.enclosedTypes,\n                                modType.ambientEnclosedTypes,\n                                context, null, null, moduleDecl);\n\n        return true;\n    }\n\n    export function preCollectClassTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var classDecl = <ClassDeclaration>ast;\n\n        var classType: Type;\n        var instanceType: Type;\n        var typeSymbol: TypeSymbol = null;\n        var className = (<Identifier>classDecl.name).text;\n        var alreadyInScope = false;\n        var isAmbient = hasFlag(classDecl.getVarFlags(), VariableFlags.Ambient);\n        var isExported = hasFlag(classDecl.getVarFlags(), VariableFlags.Exported);\n        var isGlobal = context.scopeChain.container === context.checker.gloMod;\n        var containerMod = <TypeSymbol>scopeChain.container;\n        var foundValSymbol = false;\n\n        typeSymbol = <TypeSymbol>scopeChain.scope.findLocal(className, false, true);\n        \n        // check the value space, since an override may have been declared with the type\'s name\n        // REVIEW-CLASSES\n        if (!typeSymbol) {\n            var valTypeSymbol = scopeChain.scope.findLocal(className, false, false);\n            \n            if (valTypeSymbol &&\n                valTypeSymbol.isType() &&\n                valTypeSymbol.declAST &&\n                valTypeSymbol.declAST.nodeType === NodeType.FuncDecl &&\n                (<FuncDecl>valTypeSymbol.declAST).isSignature()) {\n                \n                typeSymbol = <TypeSymbol>valTypeSymbol;\n                foundValSymbol = true;\n                \n                if (isExported) {\n                    typeSymbol.flags |= SymbolFlags.Exported;\n                }\n            \n                if (isAmbient) {\n                    typeSymbol.flags |= SymbolFlags.Ambient;\n                }                \n                \n                // the class was never entered into type space, so add it\n                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checker.errorReporter, isExported || isGlobal, true, isAmbient);                \n            }\n        }\n        \n        if (typeSymbol && !foundValSymbol && (typeSymbol.declAST != classDecl)) {\n            typeSymbol = null;\n        }\n\n        if (typeSymbol === null) {\n            var valueSymbol = scopeChain.scope.findLocal(className, false, false);\n            classType = new Type();\n            classType.setHasImplementation();\n            instanceType = new Type();\n            instanceType.setHasImplementation();\n            classType.instanceType = instanceType;\n            classType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            classType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            addPrototypeField(classType, classDecl, context);\n            instanceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            instanceType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            typeSymbol = new TypeSymbol(className, classDecl.name.minChar, className.length,\n                                        context.checker.locationInfo.fileName, classType, context.checker.compilationSettings.optimizeModuleCodeGen);\n            typeSymbol.declAST = classDecl;\n            typeSymbol.instanceType = instanceType;\n            classType.symbol = typeSymbol;\n            instanceType.symbol = typeSymbol;\n\n            if (context.scopeChain.moduleDecl) {\n                context.scopeChain.moduleDecl.recordNonInterface();\n                typeSymbol.declModule = context.scopeChain.moduleDecl;\n                typeSymbol.flags |= SymbolFlags.ModuleMember;\n            }\n\n            if (isExported) {\n                typeSymbol.flags |= SymbolFlags.Exported;\n            }\n            \n            if (isAmbient) {\n                typeSymbol.flags |= SymbolFlags.Ambient;\n            }\n\n            ast.type = classType;\n\n            // class in both name spaces (type for instance type; constructor representative in value space)\n            context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checker.errorReporter, isExported || isGlobal, true, isAmbient);\n\n            if (valueSymbol === null) {\n                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,\n                                            context.checker.errorReporter, isExported || isGlobal, false, isAmbient);\n            }\n        }\n        else {                            \n            classType = typeSymbol.type;\n            \n            // If the instance type is null, a call overload was likely declared before the class constructor\n            if (classType.instanceType === null) {\n                classType.instanceType = new Type();\n                classType.instanceType.setHasImplementation();\n                classType.instanceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                classType.instanceType.symbol = classType.symbol;\n                classType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                classType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            }\n            \n            instanceType = classType.instanceType;\n            ast.type = classType;\n        }\n        \n        // if the class has no declared constructor, either create a default signature or adapt \n        // it\'s base class\'s signature group\n        if (!classDecl.constructorDecl) {\n\n            if (typeSymbol && typeSymbol.declAST && typeSymbol.declAST.type && typeSymbol.declAST.type.call /*&& !(<FuncDecl>typeSymbol.declAST).isOverload*/) {\n                context.checker.errorReporter.duplicateIdentifier(typeSymbol.declAST, typeSymbol.name);\n            }\n\n            createNewConstructGroupForType(classDecl.type);\n        }\n\n        classType.typeFlags |= TypeFlags.IsClass;\n        instanceType.typeFlags |= TypeFlags.IsClass;\n\n        getBases(instanceType, classDecl);\n        pushTypeCollectionScope(typeSymbol, instanceType.members, instanceType.ambientMembers, null, null,\n                                context, instanceType, classType, null);\n        return true;\n    }\n\n    export function preCollectInterfaceTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var interfaceDecl = <InterfaceDeclaration>ast;\n        var interfaceSymbol: TypeSymbol = null;\n        var interfaceType: Type = null;\n        var isExported = hasFlag(interfaceDecl.getVarFlags(), VariableFlags.Exported);\n        var isGlobal = context.scopeChain.container === context.checker.gloMod;\n        var alreadyInScope = true;\n\n        alreadyInScope = false;\n        var interfaceName = (<Identifier>interfaceDecl.name).text;\n        interfaceSymbol = <TypeSymbol>scopeChain.scope.findLocal(interfaceName, false, true);\n        if (interfaceSymbol === null) {\n            interfaceType = new Type();\n            interfaceSymbol = new TypeSymbol(interfaceName,\n                                        interfaceDecl.name.minChar,\n                                        interfaceName.length,\n                                        context.checker.locationInfo.fileName,\n                                        interfaceType, context.checker.compilationSettings.optimizeModuleCodeGen);\n            interfaceType.symbol = interfaceSymbol;\n            // REVIEW: Shouldn\'t allocate another table for interface privates\n            interfaceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            interfaceType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            interfaceSymbol.declAST = interfaceDecl;\n            interfaceSymbol.declModule = context.scopeChain.moduleDecl;\n        }\n        else {\n            alreadyInScope = true;\n            interfaceType = interfaceSymbol.type;\n        }\n\n        if (!interfaceType) {\n            interfaceType = context.checker.anyType;\n        }\n\n        ast.type = interfaceType;\n        getBases(interfaceType, interfaceDecl);\n\n        if (isExported) {\n            interfaceSymbol.flags |= SymbolFlags.Exported;\n        }\n\n        if (context.scopeChain.moduleDecl) {\n            interfaceSymbol.flags |= SymbolFlags.ModuleMember;\n        }\n\n        if (!alreadyInScope) {\n            context.scopeChain.scope.enter(context.scopeChain.container, ast,\n                                            interfaceSymbol, context.checker.errorReporter, isGlobal || isExported, true, false); // REVIEW: Technically, interfaces should be ambient\n        }\n        pushTypeCollectionScope(interfaceSymbol, interfaceType.members, interfaceType.ambientMembers, null, null,\n                                context, interfaceType, null, null);\n        return true;\n    }\n\n    export function preCollectArgDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var argDecl = <ArgDecl>ast;\n        if (hasFlag(argDecl.getVarFlags(), VariableFlags.Public | VariableFlags.Private)) {\n            var field = new ValueLocation();\n            var isPrivate = hasFlag(argDecl.getVarFlags(), VariableFlags.Private);\n            var fieldSymbol =\n                new FieldSymbol(argDecl.id.text, argDecl.id.minChar,\n                                context.checker.locationInfo.fileName,\n                                true, //!hasFlag(argDecl.getVarFlags(), VariableFlags.Readonly),\n                                field);\n            fieldSymbol.transferVarFlags(argDecl.getVarFlags());\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = ast;\n            argDecl.parameterPropertySym = fieldSymbol;\n\n            context.scopeChain.scope.enter(context.scopeChain.container, ast,\n                                            fieldSymbol, context.checker.errorReporter, !isPrivate, false, false);\n\n            field.typeLink = getTypeLink(argDecl.typeExpr, context.checker, argDecl.init === null);\n            argDecl.sym = fieldSymbol;\n        }\n        return false;\n    }\n\n    export function preCollectVarDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n        var varDecl = <VarDecl>ast;\n        var isAmbient = hasFlag(varDecl.getVarFlags(), VariableFlags.Ambient);\n        var isExported = hasFlag(varDecl.getVarFlags(), VariableFlags.Exported);\n        var isGlobal = context.scopeChain.container === context.checker.gloMod;\n        var isProperty = hasFlag(varDecl.getVarFlags(), VariableFlags.Property);\n        var isStatic = hasFlag(varDecl.getVarFlags(), VariableFlags.Static);\n        var isPrivate = hasFlag(varDecl.getVarFlags(), VariableFlags.Private);\n        var isOptional = hasFlag(varDecl.id.getFlags(), ASTFlags.OptionalName);\n\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n        if (isProperty ||\n            isExported ||\n            (context.scopeChain.container === context.checker.gloMod) ||\n            context.scopeChain.moduleDecl) {\n            if (isAmbient) {\n                var existingSym =\n                    <FieldSymbol>scopeChain.scope.findLocal(varDecl.id.text, false, false);\n                if (existingSym) {\n                    varDecl.sym = existingSym;\n                    return false;\n                }\n            }\n\n            // Defensive error detection...\n            if (varDecl.id === null) {\n                context.checker.errorReporter.simpleError(varDecl, \"Expected variable identifier at this location\");\n                return false;\n            }\n\n            var field = new ValueLocation();\n            var fieldSymbol =\n                new FieldSymbol(varDecl.id.text, varDecl.id.minChar, context.checker.locationInfo.fileName, true, field);\n            fieldSymbol.transferVarFlags(varDecl.getVarFlags());\n            if (isOptional) {\n                fieldSymbol.flags |= SymbolFlags.Optional;\n            }\n            field.symbol = fieldSymbol;\n            fieldSymbol.declAST = ast;\n            if ((context.scopeChain.moduleDecl) ||\n                (context.scopeChain.container === context.checker.gloMod)) {\n                fieldSymbol.flags |= SymbolFlags.ModuleMember;\n                fieldSymbol.declModule = context.scopeChain.moduleDecl;\n            }\n\n            // if it\'s static, enter it into the class\'s member list directly\n            if (hasFlag(varDecl.getVarFlags(), VariableFlags.Property) && isStatic && context.scopeChain.classType) {\n                if (!context.scopeChain.classType.members.publicMembers.add(varDecl.id.text, fieldSymbol)) {\n                    context.checker.errorReporter.duplicateIdentifier(ast, fieldSymbol.name);\n                }\n                fieldSymbol.container = context.scopeChain.classType.symbol;\n            }\n            else {\n                context.scopeChain.scope.enter(context.scopeChain.container,\n                                                ast,\n                                                fieldSymbol,\n                                                context.checker.errorReporter,\n                                                !isPrivate && (isProperty || isExported || isGlobal || isStatic),\n                                                false,\n                                                isAmbient);\n            }\n\n            if (hasFlag(varDecl.getVarFlags(), VariableFlags.Exported)) {\n                fieldSymbol.flags |= SymbolFlags.Exported;\n            }\n\n            field.typeLink = getTypeLink(varDecl.typeExpr, context.checker,\n                                        varDecl.init === null);\n            varDecl.sym = fieldSymbol;\n        }\n        return false;\n    }\n\n    export function preCollectFuncDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {\n        var scopeChain = context.scopeChain;\n\n        // REVIEW: This will have to change when we move to \"export\"\n        if (context.scopeChain.moduleDecl) {\n            context.scopeChain.moduleDecl.recordNonInterface();\n        }\n\n        var funcDecl = <FuncDecl>ast;\n        var fgSym: TypeSymbol = null;\n        var nameText = funcDecl.getNameText();\n        var isExported = hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Exported | FunctionFlags.ClassPropertyMethodExported);\n        var isStatic = hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Static);\n        var isPrivate = hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Private);\n        var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;\n        var containerSym:TypeSymbol = <TypeSymbol> (((funcDecl.isMethod() && isStatic) || funcDecl.isAccessor()) && context.scopeChain.classType ? context.scopeChain.classType.symbol : context.scopeChain.container);\n        var containerScope: SymbolScope = context.scopeChain.scope;\n        var isGlobal = containerSym === context.checker.gloMod;\n        var isOptional = funcDecl.name && hasFlag(funcDecl.name.getFlags(), ASTFlags.OptionalName);\n        var go = false;\n        var foundSymbol = false; \n\n        // If this is a class constructor, the \"container\" is actually the class declaration\n        if (isConstructor && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ClassMethod)) {\n            containerSym = <TypeSymbol>containerSym.container;\n            containerScope = scopeChain.previous.scope;\n        }\n\n        // funcDecl.fileName = context.checker.locationInfo.fileName;\n        \n        // If the parent is the constructor, and this isn\'t an instance method, skip it.\n        // That way, we\'ll set the type during scope assignment, and can be sure that the\n        // function will be placed in the constructor-local scope\n        if (!funcDecl.isConstructor &&\n            containerSym &&\n            containerSym.declAST &&\n            containerSym.declAST.nodeType === NodeType.FuncDecl &&\n            (<FuncDecl>containerSym.declAST).isConstructor &&\n            !funcDecl.isMethod()) {\n            return go;\n        }        \n\n        // Interfaces and overloads\n        if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Signature)) {\n            var instType = context.scopeChain.thisType;                       \n\n            // If the function is static, search in the class type\'s\n            if (nameText && nameText != \"__missing\") {\n                if (isStatic) {\n                    fgSym = containerSym.type.members.allMembers.lookup(nameText);\n                }\n                else {\n                    // REVIEW: This logic should be symmetric with preCollectClassTypes\n                    fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, false);\n                    \n                    // If we could not find the function symbol in the value context, look\n                    // in the type context.\n                    // This would be the case, for example, if a class constructor override\n                    // were declared before a call override for a given class\n                    if (fgSym === null) {\n                        fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, true);\n                    }\n                }\n                \n                if (fgSym) {\n                    foundSymbol = true;\n                    \n                    // We\'ll combine ambient and non-ambient funcdecls during typecheck (for contextual typing).,\n                    // So, if they don\'t agree, don\'t use the symbol we\'ve found                    \n                    if (!funcDecl.isSignature() && (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Ambient) != hasFlag(fgSym.flags, SymbolFlags.Ambient))) {\n                       fgSym = null;\n                    }\n                }                \n            }\n            \n            // a function with this symbol has not yet been declared in this scope\n            // REVIEW: In the code below, we need to ensure that only function overloads are considered\n            //  (E.g., if a vardecl has the same id as a function or class, we may use the vardecl symbol\n            //  as the overload.)  Defensively, however, the vardecl won\'t have a type yet, so it should\n            //  suffice to just check for a null type when considering the overload symbol in\n            //  createFunctionSignature\n            if (fgSym === null) {\n                if (!(funcDecl.isSpecialFn())) {                    \n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, null, !foundSymbol).declAST.type.symbol;\n                }\n                else {\n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, containerSym, false).declAST.type.symbol;                                                                         \n                }\n                \n                // set the symbol\'s declAST, which will point back to the first declaration (symbol or otherwise)\n                // related to this symbol\n                if (fgSym.declAST === null || !funcDecl.isSpecialFn()) {\n                    fgSym.declAST = ast;\n                }\n            }\n            else { // there exists a symbol with this name\n                \n                if ((fgSym.kind() === SymbolKind.Type)) {\n\n                    fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, false).declAST.type.symbol;\n                }\n                else {\n                    context.checker.errorReporter.simpleError(funcDecl, \"Function or method \'\" + funcDecl.name.actualText + \"\' already declared as a property\");\n                }\n            }\n         \n            if (funcDecl.isSpecialFn() && !isStatic) {\n                funcDecl.type = instType ? instType : fgSym.type; \n            }\n            else {\n                funcDecl.type = fgSym.type;\n            }            \n        }\n        else {\n            // declarations\n            \n            if (nameText) {\n                if (isStatic) {\n                    fgSym = containerSym.type.members.allMembers.lookup(nameText);\n                }\n                else {\n                    // in the constructor case, we want to check the parent scope for overloads\n                    if (funcDecl.isConstructor && context.scopeChain.previous) {\n                        fgSym = <TypeSymbol>context.scopeChain.previous.scope.findLocal(nameText, false, false);\n                    }\n                    \n                    if (fgSym === null) {\n                        fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, false);\n                    }\n                }\n                if (fgSym) {\n                    foundSymbol = true;\n                    \n                    if (!isConstructor && fgSym.declAST.nodeType === NodeType.FuncDecl && !(<FuncDecl>fgSym.declAST).isAccessor() && !(<FuncDecl>fgSym.declAST).isSignature()) {\n                        fgSym = null;\n                        foundSymbol = false;\n                    }\n                }                \n            }\n\n            // REVIEW: Move this check into the typecheck phase?  It\'s only being run over properties...\n            if (fgSym &&\n                !fgSym.isAccessor() &&\n                fgSym.type &&\n                fgSym.type.construct &&\n                fgSym.type.construct.signatures != [] &&\n                (fgSym.type.construct.signatures[0].declAST === null ||\n                    !hasFlag(fgSym.type.construct.signatures[0].declAST.getFunctionFlags(), FunctionFlags.Ambient)) &&\n                !funcDecl.isConstructor) {\n                context.checker.errorReporter.simpleError(funcDecl, \"Functions may not have class overloads\");\n            }\n\n            if (fgSym && !(fgSym.kind() === SymbolKind.Type) && funcDecl.isMethod() && !funcDecl.isAccessor() && !funcDecl.isConstructor) {\n                context.checker.errorReporter.simpleError(funcDecl, \"Function or method \'\" + funcDecl.name.actualText + \"\' already declared as a property\");\n                fgSym.type = context.checker.anyType;\n            }\n            // If the current function is accessor and the existing symbol isnt, set the symbol to null so\n            // we could error about duplicate symbol\n            if (fgSym && !fgSym.isAccessor() && funcDecl.isAccessor()) {\n                fgSym = null;\n            }\n            var sig = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, !foundSymbol);\n\n            // it\'s a getter or setter function                                   \n            if (((!fgSym || fgSym.declAST.nodeType != NodeType.FuncDecl) && funcDecl.isAccessor()) || (fgSym && fgSym.isAccessor())) {\n                funcDecl.accessorSymbol = context.checker.createAccessorSymbol(funcDecl, fgSym, containerSym.type, (funcDecl.isMethod() && isStatic), true, containerScope, containerSym);\n            }\n\n            funcDecl.type.symbol.declAST = ast;\n            if (funcDecl.isConstructor) { // REVIEW: Remove when classes completely replace oldclass\n                go = true;\n            };\n        }\n        if (isExported) {\n            if (funcDecl.type.call) {\n                funcDecl.type.symbol.flags |= SymbolFlags.Exported;\n            }\n            \n            // Accessors are set to \'exported\' above\n            if (fgSym && !fgSym.isAccessor() && fgSym.kind() === SymbolKind.Type && fgSym.type.call) {\n                fgSym.flags |= SymbolFlags.Exported;\n            }\n        }\n        if (context.scopeChain.moduleDecl && !funcDecl.isSpecialFn()) {\n            funcDecl.type.symbol.flags |= SymbolFlags.ModuleMember;\n            funcDecl.type.symbol.declModule = context.scopeChain.moduleDecl;\n        }\n\n        if (fgSym && isOptional) {\n            fgSym.flags |= SymbolFlags.Optional;\n        }\n\n        return go;\n    }\n\n    export function preCollectTypes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: TypeCollectionContext = walker.state;\n        var go = false;\n        var scopeChain = context.scopeChain;\n\n        if (ast.nodeType === NodeType.Script) {\n            var script: Script = <Script>ast;\n            context.script = script;\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.List) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.ImportDeclaration) {\n            go = preCollectImportTypes(ast, parent, context);\n        }\n        else if (ast.nodeType === NodeType.WithStatement) {\n            go = false;\n        }\n        else if (ast.nodeType === NodeType.ModuleDeclaration) {\n            go = preCollectModuleTypes(ast, parent, context);\n        }\n        else if (ast.nodeType === NodeType.ClassDeclaration) {\n            go = preCollectClassTypes(ast, parent, context);\n        }\n        else if (ast.nodeType === NodeType.Block) {\n            go = true;\n        }\n        else if (ast.nodeType === NodeType.InterfaceDeclaration) {\n            go = preCollectInterfaceTypes(ast, parent, context);\n        }\n        // This will be a constructor arg because this pass only traverses\n        // constructor arg lists\n        else if (ast.nodeType === NodeType.ArgDecl) {\n            go = preCollectArgDeclTypes(ast, parent, context);\n        }\n        else if (ast.nodeType === NodeType.VarDecl) {\n            go = preCollectVarDeclTypes(ast, parent, context);\n        }\n        else if (ast.nodeType === NodeType.FuncDecl) {\n            go = preCollectFuncDeclTypes(ast, parent, context);\n        }\n        else {\n            if (/* ast.isStatementOrExpression() && */ context.scopeChain.moduleDecl) {\n                context.scopeChain.moduleDecl.recordNonInterface();\n            }\n        }\n        walker.options.goChildren = go;\n        return ast;\n    }\n\n    export function postCollectTypes(ast: AST, parent: AST, walker: IAstWalker) {\n        var context: TypeCollectionContext = walker.state;\n\n        if (ast.nodeType === NodeType.ModuleDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        else if (ast.nodeType === NodeType.ClassDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        else if (ast.nodeType === NodeType.InterfaceDeclaration) {\n            popTypeCollectionScope(context);\n        }\n        return ast;\n    }\n\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class ScopeChain {\n        public thisType: Type;\n        public classType: Type;\n        public fnc: FuncDecl;\n        public moduleDecl: ModuleDeclaration;\n\n        constructor(public container: Symbol, public previous: ScopeChain,\n                     public scope: SymbolScope) { }\n    }\n\n    export class BBUseDefInfo {\n        public defsBySymbol: bool[] = [];\n        public gen: BitVector;\n        public kill: BitVector;\n        public top: BitVector;\n        // use lists by symbol \n        public useIndexBySymbol: number[][] = [];\n\n        constructor(public bb: BasicBlock) { }\n\n        public updateTop() {\n            var temp = new BitVector(this.top.bitCount);\n            for (var i = 0, succLen = this.bb.successors.length; i < succLen; i++) {\n                var succ = this.bb.successors[i];\n                if (succ.useDef) {\n                    temp.union(succ.useDef.top);\n                }\n            }\n            temp.difference(this.kill);\n            temp.union(this.gen);\n            var changed = temp.notEq(this.top);\n            this.top = temp;\n            return changed;\n        }\n\n\n        public initialize(useDefContext: UseDefContext) {\n            var defSym = (sym: Symbol, context: UseDefContext) => {\n                if (context.isLocalSym(sym)) {\n                    var index = context.getSymbolIndex(sym);\n                    // clear pending uses\n                    this.useIndexBySymbol[index] = [];\n                    this.defsBySymbol[index] = true;\n                }\n            }\n\n            var useSym = (sym: Symbol, context: UseDefContext, ast: AST) => {\n                if (context.isLocalSym(sym)) {\n                    var symIndex = context.getSymbolIndex(sym);\n                    if (this.useIndexBySymbol[symIndex] === undefined) {\n                        this.useIndexBySymbol[symIndex] = [];\n                    }\n                    var symUses = this.useIndexBySymbol[symIndex];\n                    var astIndex = context.getUseIndex(ast);\n                    context.addUse(symIndex, astIndex);\n                    symUses.push(astIndex);\n                }\n            }\n\n            function initUseDefPre(cur: AST, parent: AST, walker: IAstWalker) {\n                var context: UseDefContext = walker.state;\n                var asg: BinaryExpression;\n                var id: Identifier;\n\n                if (cur === null) {\n                    cur = null;\n                }\n                if (cur.nodeType === NodeType.VarDecl) {\n                    var varDecl = <BoundDecl>cur;\n                    if (varDecl.init /*|| hasFlag(varDecl.getVarFlags(), VariableFlags.AutoInit)*/) {\n                        defSym(varDecl.sym, context);\n                    }\n                }\n                else if (cur.nodeType === NodeType.Name) {\n                    // use\n                    if (parent) {\n                        if (parent.nodeType === NodeType.Asg) {\n                            asg = <BinaryExpression>parent;\n                            if (asg.operand1 === cur) {\n                                return cur;\n                            }\n                        }\n                        else if (parent.nodeType === NodeType.VarDecl) {\n                            var parentDecl = <BoundDecl>parent;\n                            if (parentDecl.id === cur) {\n                                return cur;\n                            }\n                        }\n                    }\n                    id = <Identifier>cur;\n                    useSym(id.sym, context, cur);\n                }\n                else if ((cur.nodeType >= NodeType.Asg) && (cur.nodeType <= NodeType.LastAsg)) {\n                    // def\n                    asg = <BinaryExpression>cur;\n                    if (asg.operand1 && (asg.operand1.nodeType === NodeType.Name)) {\n                        id = <Identifier>asg.operand1;\n                        defSym(id.sym, context);\n                    }\n                }\n                else if (cur.nodeType === NodeType.FuncDecl) {\n                    walker.options.goChildren = false;\n                }\n\n                return cur;\n            }\n\n            var options = new AstWalkOptions();\n            // traverse ASTs in reverse order of execution (to match uses with preceding defs)\n            // options.reverseSiblings = true;\n\n            getAstWalkerFactory().walk(this.bb.content, initUseDefPre, null, options, useDefContext);\n        }\n\n        public initializeGen(useDefContext: UseDefContext) {\n            var symbolLen = this.useIndexBySymbol.length;\n            var bitCount = useDefContext.uses.length;\n            this.gen = new BitVector(bitCount);\n            for (var s = 0; s < symbolLen; s++) {\n                var symUses = this.useIndexBySymbol[s];\n                if ((symUses !== undefined) && (symUses.length > 0)) {\n                    for (var u = 0, uLen = symUses.length; u < uLen; u++) {\n                        this.gen.set(symUses[u], true);\n                    }\n                }\n            }\n            this.top = this.gen;\n        }\n\n        public initializeKill(useDefContext: UseDefContext) {\n            this.kill = new BitVector(this.gen.bitCount);\n            for (var s = 0, symbolLen = this.defsBySymbol.length; s < symbolLen; s++) {\n                if (this.defsBySymbol[s]) {\n                    var globalSymUses = useDefContext.useIndexBySymbol[s];\n                    if (globalSymUses) {\n                        for (var u = 0, useLen = globalSymUses.length; u < useLen; u++) {\n                            this.kill.set(globalSymUses[u], true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    export class UseDefContext {\n        // global use lists by symbol\n        public useIndexBySymbol: number[][] = [];\n        // global list of uses (flat)\n        public uses: AST[] = [];\n        public symbols: VariableSymbol[] = [];\n        public symbolMap = new StringHashTable();\n        public symbolCount = 0;\n        public func: Symbol;\n\n        constructor() {\n        }\n\n        public getSymbolIndex(sym: Symbol) {\n            var name = sym.name;\n            var index = <number>(this.symbolMap.lookup(name));\n            if (index === null) {\n                index = this.symbolCount++;\n                this.symbols[index] = <VariableSymbol>sym;\n                this.symbolMap.add(name, index);\n            }\n            return index;\n        }\n\n        public addUse(symIndex: number, astIndex: number) {\n            var useBySym = this.useIndexBySymbol[symIndex];\n            if (useBySym === undefined) {\n                useBySym = [];\n                this.useIndexBySymbol[symIndex] = useBySym;\n            }\n            useBySym[useBySym.length] = astIndex;\n        }\n\n        public getUseIndex(ast: AST) {\n            this.uses[this.uses.length] = ast;\n            return this.uses.length - 1;\n        }\n\n        public isLocalSym(sym: Symbol) { return (sym && (sym.container === this.func) && (sym.kind() === SymbolKind.Variable)); }\n\n        public killSymbol(sym: VariableSymbol, bbUses: BitVector) {\n            var index: number = this.symbolMap.lookup(sym.name);\n            var usesOfSym = this.useIndexBySymbol[index];\n            for (var k = 0, len = usesOfSym.length; k < len; k++) {\n                bbUses.set(usesOfSym[k], true);\n            }\n        }\n    }\n\n    export class BitVector {\n        static packBits = 30;\n        public firstBits = 0;\n        public restOfBits: number[] = null;\n\n        constructor(public bitCount: number) {\n            if (this.bitCount > BitVector.packBits) {\n                this.restOfBits = [];\n                var len = Math.floor(this.bitCount / BitVector.packBits);\n                for (var i = 0; i < len; i++) {\n                    this.restOfBits[i] = 0;\n                }\n            }\n        }\n\n        public set (bitIndex: number, value: bool) {\n            if (bitIndex < BitVector.packBits) {\n                if (value) {\n                    this.firstBits |= (1 << bitIndex);\n                }\n                else {\n                    this.firstBits &= (~(1 << bitIndex));\n                }\n            }\n            else {\n                var offset = Math.floor(bitIndex / BitVector.packBits) - 1;\n                var localIndex = bitIndex % BitVector.packBits;\n                if (value) {\n                    this.restOfBits[offset] |= (1 << localIndex);\n                }\n                else {\n                    this.restOfBits[offset] &= (~(1 << localIndex));\n                }\n            }\n        }\n\n        public map(fn: (index: number) => any) {\n            var k: number;\n            for (k = 0; k < BitVector.packBits; k++) {\n                if (k === this.bitCount) {\n                    return;\n                }\n                if (((1 << k) & this.firstBits) !== 0) {\n                    fn(k);\n                }\n            }\n            if (this.restOfBits) {\n                var len: number;\n                var cumu = BitVector.packBits;\n                for (k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    for (var j = 0; j < BitVector.packBits; j++) {\n                        if (((1 << j) & myBits) !== 0) {\n                            fn(cumu);\n                        }\n                        cumu++;\n                        if (cumu === this.bitCount) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public union(b: BitVector) {\n            this.firstBits |= b.firstBits;\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] = myBits | bBits;\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public intersection(b: BitVector) {\n            this.firstBits &= b.firstBits;\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] = myBits & bBits;\n                }\n            }\n        }\n\n        // assume conforming sizes\n        public notEq(b: BitVector) {\n            if (this.firstBits !== b.firstBits) {\n                return true;\n            }\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    if (myBits !== bBits) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        public difference(b: BitVector) {\n            var oldFirstBits = this.firstBits;\n            this.firstBits &= (~b.firstBits);\n            if (this.restOfBits) {\n                for (var k = 0, len = this.restOfBits.length; k < len; k++) {\n                    var myBits = this.restOfBits[k];\n                    var bBits = b.restOfBits[k];\n                    this.restOfBits[k] &= (~bBits);\n                }\n            }\n        }\n    }\n\n    export class BasicBlock {\n        // blocks that branch to the block after this one\n        public predecessors: BasicBlock[] = [];\n        public index = -1;\n        public markValue = 0;\n        public marked(markBase: number) { return this.markValue > markBase; }\n        public mark() {\n            this.markValue++;\n        }\n        public successors: BasicBlock[] = [];\n        public useDef: BBUseDefInfo = null;\n        public content = new ASTList();\n        public addSuccessor(successor: BasicBlock): void {\n            this.successors[this.successors.length] = successor;\n            successor.predecessors[successor.predecessors.length] = this;\n        }\n    }\n\n    export interface ITargetInfo {\n        stmt: AST;\n        continueBB: BasicBlock;\n        breakBB: BasicBlock;\n    }\n\n    export class ControlFlowContext {\n        public entry = null;\n        // first unreachable ast for each unreachable code segment\n        public unreachable: AST[] = null;\n        public noContinuation = false;\n        // statements enclosing the current statement\n        public statementStack: ITargetInfo[] = [];\n        public currentSwitch: BasicBlock[] = [];\n        public walker: IAstWalker;\n\n        constructor(public current: BasicBlock,\n                     public exit: BasicBlock) {\n            this.entry = this.current;\n        }\n\n        public walk(ast: AST, parent: AST) {\n            return this.walker.walk(ast, parent);\n        }\n\n        public pushSwitch(bb: BasicBlock) {\n            this.currentSwitch.push(bb);\n        }\n\n        public popSwitch() {\n            return this.currentSwitch.pop();\n        }\n\n        public reportUnreachable(er: ErrorReporter) {\n            if (this.unreachable && (this.unreachable.length > 0)) {\n                var len = this.unreachable.length;\n                for (var i = 0; i < len; i++) {\n                    var unreachableAST = this.unreachable[i];\n                    if (unreachableAST.nodeType !== NodeType.EndCode) {\n                        er.simpleError(unreachableAST, \"unreachable code\");\n                    }\n                }\n            }\n        }\n\n        private printAST(ast: AST, outfile: ITextWriter) {\n            var printContext = new PrintContext(outfile);\n\n            printContext.increaseIndent();\n            //ast.walk(prePrintAST, postPrintAST, null, printContext);\n            getAstWalkerFactory().walk(ast, prePrintAST, postPrintAST, null, printContext);\n\n            printContext.decreaseIndent();\n        }\n\n        private printBlockContent(bb: BasicBlock, outfile: ITextWriter) {\n            var content = bb.content;\n            for (var i = 0, len = content.members.length; i < len; i++) {\n                var ast = content.members[i];\n                this.printAST(ast, outfile);\n            }\n        }\n\n        public markBase = 0;\n\n        public bfs(nodeFunc: (bb: BasicBlock) => void , edgeFunc: (node1: BasicBlock, node2: BasicBlock) => void ,\n            preEdges: () => void , postEdges: () => void ) {\n            var markValue = this.markBase++;\n            var q: BasicBlock[] = [];\n            q[q.length] = this.entry;\n\n            while (q.length > 0) {\n                var bb = q.pop();\n                if (!(bb.marked(markValue))) {\n                    bb.mark();\n                    if (nodeFunc) {\n                        nodeFunc(bb);\n                    }\n                    var succLen = bb.successors.length;\n                    if (succLen > 0) {\n                        if (preEdges) {\n                            preEdges();\n                        }\n                        for (var j = succLen - 1; j >= 0; j--) {\n                            var successor = bb.successors[j];\n                            if (!(successor.marked(this.markBase))) {\n                                if (edgeFunc) {\n                                    edgeFunc(bb, successor);\n                                }\n                                q[q.length] = successor;\n                            }\n                        }\n                        if (postEdges) {\n                            postEdges();\n                        }\n                    }\n                }\n            }\n        }\n\n        public linearBBs: BasicBlock[] = [];\n\n        public useDef(er: ErrorReporter, funcSym: Symbol) {\n            var useDefContext = new UseDefContext();\n            useDefContext.func = funcSym;\n            var useDefInit = (bb: BasicBlock) => {\n                bb.useDef = new BBUseDefInfo(bb);\n                bb.useDef.initialize(useDefContext);\n                this.linearBBs[this.linearBBs.length] = bb;\n            }\n            this.bfs(useDefInit, null, null, null);\n            var i: number, bbLen: number;\n            for (i = 0, bbLen = this.linearBBs.length; i < bbLen; i++) {\n                this.linearBBs[i].useDef.initializeGen(useDefContext);\n                this.linearBBs[i].useDef.initializeKill(useDefContext);\n            }\n            var changed = true;\n\n            while (changed) {\n                changed = false;\n                for (i = 0; i < bbLen; i++) {\n                    changed = this.linearBBs[i].useDef.updateTop() || changed;\n                }\n            }\n\n            var top = this.entry.useDef.top;\n            top.map((index) => {\n                var ast = <Identifier>useDefContext.uses[<number>index];\n                er.simpleError(ast, \"use of variable \'\" + ast.actualText + \"\' that is not definitely assigned\");\n            });\n        }\n\n        public print(outfile: ITextWriter) {\n            var index = 0;\n            var node = (bb: BasicBlock) => {\n                if (bb.index < 0) {\n                    bb.index = index++;\n                }\n                if (bb === this.exit) {\n                    outfile.WriteLine(\"Exit block with index \" + bb.index);\n                }\n                else {\n                    outfile.WriteLine(\"Basic block with index \" + bb.index);\n                    this.printBlockContent(bb, outfile);\n                }\n            }\n\n            function preEdges() {\n                outfile.Write(\"  Branches to \");\n            }\n\n            function postEdges() {\n                outfile.WriteLine(\"\");\n            }\n\n            function edge(node1: BasicBlock, node2: BasicBlock) {\n                if (node2.index < 0) {\n                    node2.index = index++;\n                }\n                outfile.Write(node2.index + \" \");\n            }\n\n            this.bfs(node, edge, preEdges, postEdges);\n            if (this.unreachable !== null) {\n                for (var i = 0, len = this.unreachable.length; i < len; i++) {\n                    outfile.WriteLine(\"Unreachable basic block ...\");\n                    this.printAST(this.unreachable[i], outfile);\n                }\n            }\n        }\n\n        public pushStatement(stmt: Statement, continueBB: BasicBlock, breakBB: BasicBlock) {\n            this.statementStack.push({ stmt: stmt, continueBB: continueBB, breakBB: breakBB });\n        }\n\n        public popStatement() { return this.statementStack.pop(); }\n\n        public returnStmt() {\n            // TODO: make successor finally block if return stmt inside of try/finally \n            this.current.addSuccessor(this.exit);\n            this.setUnreachable();\n        }\n\n        public setUnreachable() {\n            this.current = null;\n            this.noContinuation = true;\n        }\n\n        public addUnreachable(ast: AST) {\n            if (this.unreachable === null) {\n                this.unreachable = [];\n            }\n            this.unreachable[this.unreachable.length] = ast;\n        }\n\n        public unconditionalBranch(target: AST, isContinue: bool) {\n            var targetBB = null;\n            for (var i = 0, len = this.statementStack.length; i < len; i++) {\n                var targetInfo = this.statementStack[i];\n                if (targetInfo.stmt === target) {\n                    if (isContinue) {\n                        targetBB = targetInfo.continueBB;\n                    }\n                    else {\n                        targetBB = targetInfo.breakBB;\n                    }\n                    break;\n                }\n            }\n            if (targetBB) {\n                this.current.addSuccessor(targetBB);\n            }\n            this.setUnreachable();\n        }\n\n        public addContent(ast: AST): void {\n            if (this.current) {\n                this.current.content.append(ast);\n            }\n        }\n    }\n\n    export interface IResolutionData {\n        actuals: Type[];\n        exactCandidates: Signature[];\n        conversionCandidates: Signature[];\n        id: number;\n    }\n\n    export class ResolutionDataCache {\n        public cacheSize = 16;\n        public rdCache: IResolutionData[] = [];\n        public nextUp: number = 0;\n\n        constructor() {\n            for (var i = 0; i < this.cacheSize; i++) {\n                this.rdCache[i] = {\n                    actuals: [],\n                    exactCandidates: [],\n                    conversionCandidates: [],\n                    id: i\n                };\n            }\n        }\n\n        public getResolutionData(): IResolutionData {\n            var rd: IResolutionData = null;\n\n            if (this.nextUp < this.cacheSize) {\n                rd = this.rdCache[this.nextUp];\n            }\n\n            if (rd === null) {\n                this.cacheSize++;\n                rd = {\n                    actuals: [],\n                    exactCandidates: [],\n                    conversionCandidates: [],\n                    id: this.cacheSize\n                };\n                this.rdCache[this.cacheSize] = rd;\n            }\n\n            // cache operates as a stack - RD is always served up in-order\n            this.nextUp++;\n\n            return rd;\n        }\n\n        public returnResolutionData(rd: IResolutionData) {\n            // Pop to save on array allocations, which are a bottleneck\n            // REVIEW: On some VMs, Array.pop doesn\'t always pop the last value in the array\n            rd.actuals.length = 0;\n            rd.exactCandidates.length = 0;\n            rd.conversionCandidates.length = 0;\n\n            this.nextUp = rd.id;\n        }\n    }\n\n    export class TypeFlow {\n        public scope: SymbolScope;\n        public globalScope: SymbolScope;\n\n        public thisType: Type;\n        public thisFnc: FuncDecl = null;\n        public thisClassNode: TypeDeclaration = null;\n        public enclosingFncIsMethod = false;\n\n        // REVIEW: Prune in favor of typechecker fields\n        public doubleType: Type;\n        public booleanType: Type;\n        public stringType: Type;\n        public anyType: Type;\n        public regexType: Type;\n        public nullType: Type;\n        public voidType: Type;\n        public arrayAnyType: Type;\n\n        public arrayInterfaceType: Type = null;\n        public stringInterfaceType: Type = null;\n        public objectInterfaceType: Type = null;\n        public functionInterfaceType: Type = null;\n        public numberInterfaceType: Type = null;\n        public booleanInterfaceType: Type = null;\n        public iargumentsInterfaceType: Type = null;\n\n        public currentScript: Script = null;\n\n        public inImportTypeCheck = false;\n        public inTypeRefTypeCheck = false;\n        public inArrayElementTypeCheck = false;\n        public resolutionDataCache = new ResolutionDataCache();\n        public nestingLevel = 0;\n        public inSuperCall = false;\n\n        constructor(public logger: ILogger,\n                    public initScope: SymbolScope,\n                    public checker: TypeChecker,\n                    public compilationSettings: CompilationSettings) {\n            this.checker.typeFlow = this;\n            this.scope = this.initScope;\n            this.globalScope = this.initScope;\n            this.doubleType = this.checker.numberType;\n            this.booleanType = this.checker.booleanType;\n            this.stringType = this.checker.stringType;\n            this.anyType = this.checker.anyType;\n            this.regexType = this.anyType;\n            this.nullType = this.checker.nullType;\n            this.voidType = this.checker.voidType;\n            this.arrayAnyType = this.checker.makeArrayType(this.anyType);\n        }\n\n        public initLibs() {\n            var arraySym = this.globalScope.find(\"Array\", false, true);\n            if (arraySym && (arraySym.kind() === SymbolKind.Type)) {\n                this.arrayInterfaceType = (<TypeSymbol>arraySym).type;\n            }\n            var stringSym = this.globalScope.find(\"String\", false, true);\n            if (stringSym && (stringSym.kind() === SymbolKind.Type)) {\n                this.stringInterfaceType = (<TypeSymbol>stringSym).type;\n            }\n            var objectSym = this.globalScope.find(\"Object\", false, true);\n            if (objectSym && (objectSym.kind() === SymbolKind.Type)) {\n                this.objectInterfaceType = (<TypeSymbol>objectSym).type;\n            }\n            var fnSym = this.globalScope.find(\"Function\", false, true);\n            if (fnSym && (fnSym.kind() === SymbolKind.Type)) {\n                this.functionInterfaceType = (<TypeSymbol>fnSym).type;\n            }\n            var numberSym = this.globalScope.find(\"Number\", false, true);\n            if (numberSym && (numberSym.kind() === SymbolKind.Type)) {\n                this.numberInterfaceType = (<TypeSymbol>numberSym).type;\n            }\n            var booleanSym = this.globalScope.find(\"Boolean\", false, true);\n            if (booleanSym && (booleanSym.kind() === SymbolKind.Type)) {\n                this.booleanInterfaceType = (<TypeSymbol>booleanSym).type;\n            }\n            var regexSym = this.globalScope.find(\"RegExp\", false, true);\n            if (regexSym && (regexSym.kind() === SymbolKind.Type)) {\n                this.regexType = (<TypeSymbol>regexSym).type;\n            }\n        }\n\n        public cast(ast: AST, type: Type): AST {\n            return this.castWithCoercion(ast, type, true, false);\n        }\n\n        public castWithCoercion(ast: AST, type: Type, applyCoercion: bool, typeAssertion: bool): AST {\n            var comparisonInfo = new TypeComparisonInfo();\n            if (this.checker.sourceIsAssignableToTarget(ast.type, type, comparisonInfo) || (typeAssertion && this.checker.sourceIsAssignableToTarget(type, ast.type, comparisonInfo))) {\n                if (applyCoercion) {\n                    if (type === null) {\n                        ast.type = this.anyType;\n                    }\n                    else if (type.isClass()) {\n                        ast.type = type.instanceType;\n                    }\n                    else {\n                        ast.type = type;\n                    }\n                }\n                return ast;\n            }\n            else {\n                this.checker.errorReporter.incompatibleTypes(ast, ast.type, type, null, this.scope, comparisonInfo);\n                return ast;\n            }\n        }\n\n        public inScopeTypeCheck(ast: AST, enclosingScope: SymbolScope): AST {\n            var prevScope = this.scope;\n            this.scope = enclosingScope;\n            var svThisFnc = this.thisFnc;\n            var svThisType = this.thisType;\n            var svThisClassNode = this.thisClassNode;\n            var svCurrentModDecl = this.checker.currentModDecl;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var container = this.scope.container;\n            var fnc: FuncDecl = null;\n            while (container) {\n                if (container.kind() === SymbolKind.Type) {\n                    var typeSym = <TypeSymbol>container;\n                    var type = typeSym.type;\n                    if (type.call) {\n                        if (fnc === null) {\n                            // use innermost function\n                            this.enclosingFncIsMethod = typeSym.isMethod;\n                            fnc = <FuncDecl>container.declAST;\n                        }\n                    }\n                    if (type.isClass()) {\n                        this.thisType = type.instanceType;\n                        if (typeSym.declAST &&\n                            (typeSym.declAST.nodeType === NodeType.ClassDeclaration)) {\n                            this.thisClassNode = <TypeDeclaration>typeSym.declAST;\n                        }\n                        // use innermost class\n                        break;\n                    }\n                    if (type.isModuleType()) {\n                        this.checker.currentModDecl = <ModuleDeclaration>typeSym.declAST;\n                        // use innermost module\n                        break;\n                    }\n                }\n                container = container.container;\n            }\n            this.thisFnc = fnc;\n\n            var updated = this.typeCheck(ast);\n\n            this.thisFnc = svThisFnc;\n            this.thisType = svThisType;\n            this.thisClassNode = svThisClassNode;\n            this.checker.currentModDecl = svCurrentModDecl;\n            this.enclosingFncIsMethod = prevMethodStatus;\n            this.scope = prevScope;\n            return updated;\n        }\n\n        public typeCheck(ast: AST): AST {\n            if (ast) {\n                return ast.typeCheck(this);\n            }\n            else {\n                return null;\n            }\n        }\n\n        public inScopeTypeCheckDecl(ast: AST) {\n            if (ast.nodeType === NodeType.VarDecl || ast.nodeType === NodeType.ArgDecl) {\n                this.inScopeTypeCheckBoundDecl(<BoundDecl>ast);\n            }\n            else if (ast.nodeType === NodeType.FuncDecl) {\n\n                var funcDecl = <FuncDecl>ast;\n\n                if (funcDecl.isAccessor()) {\n                    this.typeCheckFunction(funcDecl);\n                }\n            }\n        }\n\n        public inScopeTypeCheckBoundDecl(varDecl: BoundDecl) {\n            var sym = varDecl.sym;\n            var svThisFnc = this.thisFnc;\n            var svThisType = this.thisType;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var prevLocationInfo = this.checker.locationInfo;\n            if (sym && sym.container) {\n                var instanceScope = /* hasFlag(varDecl.getVarFlags(), VariableFlags.ClassConstructorProperty) ? sym.container.getType().constructorScope : */ sym.container.instanceScope();\n                if (hasFlag(varDecl.getVarFlags(), VariableFlags.Property) && sym.container.declAST.nodeType === NodeType.FuncDecl) {\n                    this.thisFnc = <FuncDecl>sym.container.declAST;\n                }\n                if (instanceScope) {\n                    var prevScope = this.scope;\n                    this.scope = instanceScope;\n                    var container = sym.container;\n                    var svCurrentModDecl = this.checker.currentModDecl;\n                    if (this.checker.fileNameToLocationInfo &&\n                        (sym.fileName !== unknownLocationInfo.fileName) &&\n                        this.checker.fileNameToLocationInfo.lookup(sym.fileName)) {\n                        this.checker.locationInfo = this.checker.fileNameToLocationInfo.lookup(sym.fileName);\n                    }\n                    else {\n                        this.checker.locationInfo = unknownLocationInfo;\n                    }\n                    // REVIEW: container linkage for function expressions\n                    while (container) {\n                        if (container.kind() === SymbolKind.Type) {\n                            var typeSym = <TypeSymbol>container;\n                            var type = typeSym.type;\n                            if (type.call) {\n                                this.enclosingFncIsMethod = typeSym.isMethod;\n                            }\n                            if (type.isClass()) {\n                                this.thisType = type.instanceType;\n                            }\n                            if (type.isModuleType()) {\n                                this.checker.currentModDecl = <ModuleDeclaration>container.declAST;\n                                break;\n                            }\n                        }\n                        container = container.container;\n                    }\n\n                    this.typeCheckBoundDecl(varDecl);\n                    this.checker.currentModDecl = svCurrentModDecl;\n                    this.scope = prevScope;\n                }\n            }\n            this.thisFnc = svThisFnc;\n            this.thisType = svThisType;\n            this.checker.locationInfo = prevLocationInfo;\n            this.enclosingFncIsMethod = prevMethodStatus;\n        }\n\n        public resolveBoundDecl(varDecl: BoundDecl) {\n            if (varDecl.typeExpr) {\n                if (varDecl.typeExpr.type === null ||\n                    (varDecl.typeExpr.type && varDecl.typeExpr.type === this.anyType && this.scope) ||\n                    (!varDecl.typeExpr.type.symbol) ||\n                    !this.checker.typeStatusIsFinished(varDecl.typeExpr.type.symbol.typeCheckStatus)) {\n                    this.typeCheck(varDecl.typeExpr);\n                }\n                varDecl.type = varDecl.typeExpr.type;\n                if (varDecl.sym) {\n                    varDecl.sym.setType(varDecl.type);\n                }\n            }\n            else if (varDecl.init === null) {\n                if (this.checker.styleSettings.implicitAny) {\n                    this.checker.errorReporter.styleError(varDecl, \"type implicitly set to \'any\'\");\n                }\n                varDecl.type = this.anyType;\n                if (varDecl.sym) {\n                    if (varDecl.sym.isType()) {\n                        var tsym = <TypeSymbol>varDecl.sym;\n                        if (tsym.isMethod) {\n                            this.checker.errorReporter.simpleError(varDecl, \"Cannot bind method group to variable.  (Did you mean to use \'declare function\' instead of \'declare var\'?)\");\n                            return;\n                        }\n                        else {\n                            this.checker.errorReporter.simpleError(varDecl, \"Cannot bind type to variable\");\n                            return;\n                        }\n                    }\n                    varDecl.sym.setType(varDecl.type);\n                }\n            }\n        }\n\n        public typeCheckBoundDecl(varDecl: BoundDecl): VarDecl {\n            // symbol has already been added to the scope\n            var infSym = <InferenceSymbol>varDecl.sym;\n            if (infSym === null) {\n                if (varDecl.init) {\n                    varDecl.init = this.typeCheck(varDecl.init);\n                    varDecl.type = this.checker.widenType(varDecl.init.type);\n                }\n                else {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(varDecl, \"type implicitly set to \'any\'\");\n                    }\n                    varDecl.type = this.anyType;\n                }\n            }\n            else {\n                if (infSym.typeCheckStatus === TypeCheckStatus.Started) {\n                    if (this.checker.styleSettings.implicitAny) {\n                        this.checker.errorReporter.styleError(varDecl, \"type implicitly set to \'any\'\");\n                    }\n                    varDecl.type = this.anyType;\n                    infSym.setType(this.anyType);\n                }\n                else if (infSym.typeCheckStatus === TypeCheckStatus.NotStarted) {\n                    infSym.typeCheckStatus = TypeCheckStatus.Started;\n                    this.checker.addStartedPTO(infSym);\n                    var resolved = false;\n                    if (varDecl.type === null) {\n                        // propagate declared type\n                        if (varDecl.typeExpr) {\n                            this.resolveBoundDecl(varDecl);\n                            resolved = true;\n                            varDecl.type = varDecl.typeExpr.type;\n                            infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                        }\n                    }\n\n                    if (varDecl.init) {\n                        // if the bound decl is a function-local static, we need to set the\n                        // encapsulating scope to the function\'s member scope\n                        // var isLocalStatic = hasFlag(varDecl.getVarFlags(), VarFlags.LocalStatic);\n                        var prevScope = this.scope;\n                        var applyTargetType = varDecl.init.nodeType !== NodeType.ParenthesizedExpression;\n                        //if (isLocalStatic) {\n                        //    this.scope = varDecl.sym.container.getType().memberScope;\n                        //}\n\n                        // Mark Lambda expressions with IsPropertyBound flag\n                        if (hasFlag(varDecl.getVarFlags(), VariableFlags.Property) && this.thisClassNode) {\n                            getAstWalkerFactory().walk(varDecl.init, (ast: AST, parent: AST, walker: IAstWalker) => {\n                                if (ast && ast.nodeType === NodeType.FuncDecl) {\n                                    if (hasFlag((<FuncDecl>ast).getFunctionFlags(), FunctionFlags.IsFatArrowFunction)) {\n                                        // Found a Lambda, mark it\n                                        //(<FuncDecl>ast).getFunctionFlags() |= FncFlags.IsPropertyBound;\n                                    }\n                                    // Only mark the top level functions\n                                    walker.options.goChildren = false;\n                                }\n                                return ast;\n                            });\n                        }\n\n                        this.checker.typeCheckWithContextualType(varDecl.type, this.checker.inProvisionalTypecheckMode(), applyTargetType, varDecl.init);\n\n                        this.scope = prevScope;\n                        if (varDecl.type) {\n                            // If the cast is to a target type, in the case of a funcdecl,\n                            // we may overwrite the init\'s type with one generated from a signature.\n                            // In that case, we need to preserve the contained scope of the actual decl\n                            var preserveScope = false;\n                            var preservedContainedScope = null;\n\n                            if (varDecl.init.type) {\n                                preservedContainedScope = varDecl.init.type.containedScope;\n                                preserveScope = true;\n                                if (varDecl.init.type === this.voidType) {\n                                    this.checker.errorReporter.simpleError(varDecl, \"Cannot assign type \'void\' to variable \'\" + varDecl.id.actualText + \"\'\");\n                                }\n                            }\n\n                            varDecl.init = this.castWithCoercion(varDecl.init, varDecl.type, applyTargetType && !this.checker.inProvisionalTypecheckMode(), false);\n\n                            if (preserveScope && varDecl.init.type.containedScope === null) {\n                                varDecl.init.type.containedScope = preservedContainedScope;\n                            }\n                        }\n                        else {\n                            varDecl.type = this.checker.widenType(varDecl.init.type);\n                            if (varDecl.type === this.voidType) {\n                                this.checker.errorReporter.simpleError(varDecl, \"Cannot assign type \'void\' to variable \'\" + varDecl.id.actualText + \"\'\");\n                                varDecl.type = this.anyType;\n                            }\n                        }\n                        infSym.setType(varDecl.type);\n                    }\n                    else {\n                        if (!resolved) {\n                            this.resolveBoundDecl(varDecl);\n                        }\n                    }\n                    infSym.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                }\n                else if (this.checker.typeStatusIsFinished(infSym.typeCheckStatus) &&\n                         (infSym.declAST !== varDecl)) {\n                    if (varDecl.init) {\n                        varDecl.init = this.typeCheck(varDecl.init);\n                        varDecl.type = infSym.getType();\n                        varDecl.init = this.cast(varDecl.init, varDecl.type);\n                    }\n                }\n            }\n            if (varDecl.id && varDecl.sym) {\n                varDecl.id.sym = varDecl.sym;\n            }\n\n            // Check if variable satisfies type privacy\n            if (varDecl.sym && varDecl.sym.container) {\n                this.checkTypePrivacy(varDecl.sym.getType(), varDecl.sym, (typeName: string, isModuleName: bool) => this.varPrivacyErrorReporter(varDecl, typeName, isModuleName));\n            }\n            return <VarDecl>varDecl;\n        }\n\n        private varPrivacyErrorReporter(varDecl: BoundDecl, typeName: string, isModuleName: bool) {\n            var typestring = \"\";\n            if (isModuleName) {\n                var quotestring = \"\";\n                if (!isQuoted(typeName)) {\n                    quotestring = \"\'\";\n                }\n                typestring = \" is using inaccessible module \" + quotestring + typeName + quotestring;\n            } else {\n                typestring = \" has or is using private type \'\" + typeName + \"\'\";\n            }\n\n            if (hasFlag(varDecl.getVarFlags(), VariableFlags.Public)) {\n                if (varDecl.sym.container.declAST.nodeType === NodeType.InterfaceDeclaration) {\n                    this.checker.errorReporter.simpleError(varDecl, \"property \'\" + varDecl.sym.name + \"\' of exported interface\" + typestring);\n                } else {\n                    this.checker.errorReporter.simpleError(varDecl, \"public member \'\" + varDecl.sym.name + \"\' of exported class\" + typestring);\n                }\n            } else {\n                this.checker.errorReporter.simpleError(varDecl, \"exported variable \'\" + varDecl.sym.name + \"\'\" + typestring);\n            }\n        }\n\n        public typeCheckSuper(ast: AST): AST {\n            if (this.thisType && (this.enclosingFncIsMethod && !this.thisFnc.isStatic()) && this.thisType.baseClass()) {\n                ast.type = this.thisType.baseClass();\n            }\n            else {\n                // redirect \'super\' used within lambdas\n                if (!this.enclosingFncIsMethod &&\n                    this.thisType && this.thisType.baseClass() &&\n                    this.thisFnc && hasFlag(this.thisFnc.getFunctionFlags(), FunctionFlags.IsFatArrowFunction)) {\n                    // Find the closest non lambda function\n                    var enclosingFnc = null;  //this.thisFnc.enclosingFnc;\n                    while (hasFlag(enclosingFnc.getFunctionFlags(), FunctionFlags.IsFatArrowFunction)) {\n                        enclosingFnc = enclosingFnc.enclosingFnc;\n                    }\n\n                    // If the lambda is enclosed is a valid member, use the base type\n                    if (enclosingFnc && (enclosingFnc.isMethod() || enclosingFnc.isConstructor) && !enclosingFnc.isStatic()) {\n                        ast.type = this.thisType.baseClass();\n                        // enclosingFnc.setHasSuperReferenceInFatArrowFunction();\n                        return ast;\n                    }\n                }\n\n                ast.type = this.anyType;\n                this.checker.errorReporter.Keyword__super__can_only_be_used_inside_a_class_instance_method(ast);\n            }\n            return ast;\n        }\n\n        public typeCheckThis(ast: AST): AST {\n            ast.type = this.anyType;\n            var illegalThisRef = false;\n            if (this.thisFnc === null) {\n                // \'this\' in class bodies should bind to \'any\'\n                if (this.thisType) {\n                    if (this.thisClassNode && this.thisClassNode.nodeType === NodeType.ClassDeclaration) {\n                        illegalThisRef = true;\n                    }\n                    else {\n                        ast.type = this.thisType;\n                    }\n                }\n                else if (this.checker.currentModDecl) {\n                    this.checker.errorReporter.simpleError(ast, \"\'this\' may not be referenced within module bodies\");\n                }\n            }\n            else {\n                if (this.thisClassNode/* && (hasFlag(this.thisFnc.getFunctionFlags(), FunctionFlags.IsPropertyBound)*/ ||\n                    (this.inSuperCall /*&& hasFlag((<ClassDeclaration>this.thisClassNode).getVarFlags(), VariableFlags.ClassSuperMustBeFirstCallInConstructor)*/)) {\n                    illegalThisRef = true;\n                }\n                if (this.thisFnc.isMethod() || this.thisFnc.isConstructor) {\n                    if (this.thisType && !(this.thisFnc.getFunctionFlags() & FunctionFlags.Static)) {\n                        ast.type = this.thisType;\n                    }\n                }\n            }\n\n            // redirect \'this\' used within lambdas\n            if (!this.enclosingFncIsMethod &&\n                this.thisFnc &&\n                hasFlag(this.thisFnc.getFunctionFlags(), FunctionFlags.IsFatArrowFunction)) {\n\n                // if the enclosing function was bound to a property,\n                // checkInitSelf would not have been able to mark the \n                // function for a self init\n                if (false /*this.thisFnc.boundToProperty*/) {\n                    var container = null; //this.thisFnc.boundToProperty.sym.container;\n                    if (container.declAST.nodeType === NodeType.FuncDecl) {\n                        // (<FuncDecl>container.declAST).setHasSelfReference();\n                    }\n                }\n                else {\n                    var encFnc = null;// this.thisFnc.enclosingFnc;\n                    var firstEncFnc = encFnc;\n\n                    while (encFnc) {\n                        if (this.thisClassNode/* && hasFlag(encFnc.getFunctionFlags(), FunctionFlags.IsPropertyBound)*/) {\n                            illegalThisRef = true;\n                        }\n\n                        if (!hasFlag(encFnc.getFunctionFlags(), FunctionFlags.IsFatArrowFunction) || encFnc.hasSelfReference()) {\n                            encFnc.setHasSelfReference();\n                            break;\n                        }\n\n                        encFnc = encFnc.enclosingFnc;\n                    }\n\n                    if (!encFnc && firstEncFnc) {\n                        encFnc = firstEncFnc;\n                        encFnc.setHasSelfReference();\n                    }\n                    else if (!encFnc) { // the lambda is bound at the top-level...\n                        if (this.thisClassNode) {\n                            //(<ClassDeclaration>this.thisClassNode).getVarFlags() |= VarFlags.MustCaptureThis;\n                        }\n                        else if (this.checker.currentModDecl) {\n                            //this.checker.currentModDecl.getModuleFlags() |= ModuleFlags.MustCaptureThis;\n                        }\n                        else {\n                            this.checker.mustCaptureGlobalThis = true;\n                        }\n                    }\n\n                    if (encFnc && (encFnc.isMethod() || encFnc.isConstructor) && this.thisType && !hasFlag(encFnc.getFunctionFlags(), FunctionFlags.Static)) {\n                        ast.type = this.thisType;\n                    }\n                }\n            }\n\n            if (illegalThisRef) {\n                this.checker.errorReporter.simpleError(ast, \"Keyword \'this\' cannot be referenced in initializers in a class body, or in super constructor calls\");\n            }\n            return ast;\n        }\n\n        public setTypeFromSymbol(ast: AST, symbol: Symbol): void {\n            if (symbol.isVariable()) {\n                if (symbol.isInferenceSymbol()) {\n                    var infSym = <InferenceSymbol>symbol;\n                    if (infSym.declAST && !this.checker.typeStatusIsFinished(infSym.typeCheckStatus)) {\n                        if (infSym.typeCheckStatus === TypeCheckStatus.Started) {\n                            // Since we have started the declAST type check, but not finished, it must be a recursive variable reference.\n                            infSym.declAST.type = this.anyType;\n                            infSym.setType(this.anyType);\n                        }\n                        else {\n                            this.inScopeTypeCheckDecl(infSym.declAST);\n                        }\n                    }\n                    if (!this.checker.styleSettings.innerScopeDeclEscape) {\n                        if (infSym.declAST && (infSym.declAST.nodeType === NodeType.VarDecl)) {\n                            //if (this.nestingLevel < (<VarDecl>infSym.declAST).nestingLevel) {\n                            //    this.checker.errorReporter.styleError(ast, \"Illegal reference to a variable defined in more nested scope\");\n                            //}\n                        }\n                    }\n                }\n                ast.type = symbol.getType();\n                if (!symbol.writeable()) {\n                    // ast.flags = ast.flags & (~(ASTFlags.Writeable));\n                }\n            }\n            else if (symbol.isType()) {\n                ast.type = symbol.getType();\n                // ast.flags = ast.flags & (~(ASTFlags.Writeable));\n            }\n            else {\n                ast.type = this.anyType;\n                this.checker.errorReporter.symbolDoesNotReferToAValue(ast, symbol.name);\n            }\n        }\n\n        public typeCheckName(ast: AST): AST {\n            var identifier = <Identifier>ast;\n\n            if (this.checker.inWith) {\n                identifier.type = this.anyType;\n            }\n            else {\n                var typespace = this.inTypeRefTypeCheck;\n                var idText = identifier.text;\n                var originalIdText = idText;\n                var isDynamicModuleName = isQuoted(identifier.text);\n\n                var symbol = this.scope.find(idText, false, typespace);\n\n                if (symbol === null && isDynamicModuleName) {\n                    symbol = this.checker.findSymbolForDynamicModule(idText, this.currentScript.locationInfo.fileName, (id) => this.scope.find(id, false, typespace));\n                }\n\n                if (!symbol) {\n                    if (!identifier.isMissing()) {\n                        this.checker.errorReporter.unresolvedSymbol(identifier, identifier.text);\n                    }\n                    identifier.type = this.anyType;\n                }\n                else {\n                    if (this.compilationSettings.optimizeModuleCodeGen && symbol && symbol.isType()) {\n                        var symType = symbol.getType();\n                        // Once the type has been referenced outside of a type ref position, there\'s\n                        // no going back                        \n                        if (symType && (<TypeSymbol>symbol).aliasLink && (<TypeSymbol>symbol).onlyReferencedAsTypeRef) {\n\n                            var modDecl = <ModuleDeclaration>symType.symbol.declAST;\n                            if (modDecl && hasFlag(modDecl.getModuleFlags(), ModuleFlags.IsDynamic)) {\n                                (<TypeSymbol>symbol).onlyReferencedAsTypeRef = this.inTypeRefTypeCheck;\n                            }\n                        }\n                    }\n\n                    if (symbol.declAST &&\n                        symbol.declAST.nodeType === NodeType.FuncDecl &&\n                        !(<FuncDecl>symbol.declAST).returnTypeAnnotation &&\n                        (<FuncDecl>symbol.declAST).signature.typeCheckStatus === TypeCheckStatus.Started) {\n                        (<FuncDecl>symbol.declAST).type.symbol.flags |= SymbolFlags.RecursivelyReferenced;\n                        (<FuncDecl>symbol.declAST).signature.returnType.type = this.anyType;\n                    }\n\n                    this.setTypeFromSymbol(ast, symbol);\n                    identifier.sym = symbol;\n                    if (this.thisFnc) {\n                        if (this.thisFnc.type && symbol.container !== this.thisFnc.type.symbol) {\n                            this.thisFnc.freeVariables[this.thisFnc.freeVariables.length] = symbol;\n                        }\n                    }\n                }\n            }\n            return ast;\n        }\n\n        public typeCheckScript(script: Script): Script {\n            this.checker.locationInfo = script.locationInfo;\n            this.scope = this.checker.globalScope;\n\n            // if it\'s a top-level module, the globals have already been added to the implicit\n            // module decl\n            if (!script.topLevelMod) {\n                this.addLocalsFromScope(this.scope, this.checker.gloMod, /*script.vars*/ null, this.checker.globals, true);\n            }\n\n            this.currentScript = script;\n            script.bod = <ASTList>this.typeCheck(script.bod);\n            this.currentScript = null;\n            return script;\n        }\n\n        public typeCheckBitNot(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.doubleType;\n            return unex;\n        }\n\n        public typeCheckUnaryNumberOperator(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.doubleType;\n            return ast;\n        }\n\n        public typeCheckLogNot(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            unex.operand = this.typeCheck(unex.operand);\n            unex.type = this.booleanType;\n            return unex;\n        }\n\n        public typeCheckIncOrDec(ast: AST): AST {\n            var unex = <UnaryExpression>ast;\n            var lval = unex.operand;\n            //if (!this.astIsWriteable(unex)) {\n            //    this.checker.errorReporter.The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer(unex);\n            //    unex.type = this.doubleType;\n            //}\n            //else {\n                unex = <UnaryExpression> this.typeCheckUnaryNumberOperator(ast);\n                if (unex.operand.type !== this.checker.numberType && unex.operand.type !== this.checker.anyType && !(unex.operand.type.typeFlags & TypeFlags.IsEnum)) {\n                    this.checker.errorReporter.simpleError(ast, \"\'++\' and \'--\' may only be applied to operands of type \'number\' or \'any\'\");\n                }\n            //}\n            return unex;\n        }\n\n        public typeCheckBitwiseOperator(ast: AST, assignment: bool): AST {\n            var binex = <BinaryExpression>ast;\n            var resultType: Type = null;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            //if (assignment && (!this.astIsWriteable(binex))) {\n            //    this.checker.errorReporter.The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer(binex);\n            //}\n\n            if (this.checker.styleSettings.bitwise) {\n                this.checker.errorReporter.styleError(ast, \"use of \" + nodeTypeTable[binex.nodeType]);\n            }\n\n            if (this.checker.sourceIsSubtypeOfTarget(leftType, this.doubleType) && (this.checker.sourceIsSubtypeOfTarget(rightType, this.doubleType))) {\n                resultType = this.doubleType;\n            }\n            else if ((leftType === this.booleanType) &&\n                     (rightType === this.booleanType)) {\n                resultType = this.booleanType;\n            }\n            else if (leftType === this.anyType) {\n                if ((rightType === this.anyType) ||\n                    (rightType === this.doubleType) ||\n                    (rightType === this.booleanType)) {\n                    resultType = this.anyType;\n                }\n            }\n            else if (rightType === this.anyType) {\n                if ((leftType === this.anyType) ||\n                    (leftType === this.doubleType) ||\n                    (leftType === this.booleanType)) {\n                    resultType = this.anyType;\n                }\n            }\n            if (resultType === null) {\n                resultType = this.anyType;\n                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                        binex.printLabel(), this.scope);\n            }\n            binex.type = resultType;\n            return binex;\n        }\n\n        public typeCheckArithmeticOperator(ast: AST, assignment: bool): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            //if (assignment && (!this.astIsWriteable(binex.operand1))) {\n            //    this.checker.errorReporter.The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer(binex);\n            //}\n\n            if (this.checker.styleSettings.bitwise &&\n                ((binex.nodeType === NodeType.And) ||\n                (binex.nodeType === NodeType.Or) ||\n                (binex.nodeType === NodeType.AsgAnd) ||\n                (binex.nodeType === NodeType.AsgOr))) {\n                this.checker.errorReporter.styleError(ast, \"use of \" + nodeTypeTable[binex.nodeType]);\n            }\n\n            var nodeType = binex.nodeType;\n\n            if (this.checker.isNullOrUndefinedType(leftType)) {\n                leftType = rightType;\n            }\n            if (this.checker.isNullOrUndefinedType(rightType)) {\n                rightType = leftType;\n            }\n            leftType = this.checker.widenType(leftType);\n            rightType = this.checker.widenType(rightType);\n\n            if (nodeType === NodeType.Add || nodeType === NodeType.AsgAdd) {\n\n                if (leftType === this.checker.stringType || rightType === this.checker.stringType) {\n                    binex.type = this.checker.stringType;\n                }\n                else if (leftType === this.checker.numberType && rightType === this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(leftType, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.checker.numberType)) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (leftType === this.checker.anyType || rightType === this.checker.anyType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    binex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                            binex.printLabel(), this.scope);\n                }\n            }\n            else {\n                if (leftType === this.checker.numberType && rightType === this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(leftType, this.checker.numberType) && this.checker.sourceIsSubtypeOfTarget(rightType, this.checker.numberType)) {\n                    binex.type = this.checker.numberType;\n                }\n                else if (leftType === this.checker.anyType || rightType === this.checker.anyType) {\n                    binex.type = this.checker.numberType;\n                }\n                else {\n                    binex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType,\n                                                            binex.printLabel(), this.scope);\n                }\n            }\n\n            return binex;\n        }\n\n        public typeCheckDotOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            var leftIsFnc = false;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            var leftType = binex.operand1.type;\n            var leftScope: SymbolScope = null;\n            // REVIEW: replace with get member scope\n            if (leftType) {\n                if (leftType === this.anyType) {\n                    binex.type = this.anyType;\n                    return binex;\n                }\n                else if (leftType === this.stringType) {\n                    if (this.stringInterfaceType) {\n                        leftScope = this.stringInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if (leftType === this.doubleType) {\n                    if (this.numberInterfaceType) {\n                        leftScope = this.numberInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if (leftType === this.booleanType) {\n                    if (this.booleanInterfaceType) {\n                        leftScope = this.booleanInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if ((leftType.call || leftType.construct) && !leftType.members) {\n                    if (this.functionInterfaceType) {\n                        leftScope = this.functionInterfaceType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else if (leftType.elementType) {\n                    if (this.arrayInterfaceType) {\n                        var arrInstType = leftType.elementType.getArrayBase(this.arrayInterfaceType, this.checker);\n                        leftScope = arrInstType.memberScope;\n                    }\n                    else {\n                        binex.type = this.anyType;\n                        return binex;\n                    }\n                }\n                else {\n                    leftScope = leftType.memberScope;\n                }\n            }\n            if (!leftScope) {\n                this.checker.errorReporter.Expected_var__class__interface__or_module(binex);\n                binex.type = this.anyType;\n            }\n            else {\n                var propertyName = <Identifier>binex.operand2;\n                var lhsIsEnclosingType = (this.thisClassNode && binex.operand1.type === this.thisClassNode.type.instanceType) || this.inTypeRefTypeCheck;\n                var symbol = leftScope.find(propertyName.text, !lhsIsEnclosingType, this.inTypeRefTypeCheck); // only search the public members, unless the rhs is a \'this\' pointer\n\n                // If the symbol wasn\'t found, delegate to the appropriate \'virtual\' parent type\n                if (!symbol) {\n                    if (this.objectInterfaceType && leftType) {\n                        // check \'Object\' for the symbol\n                        if (leftType.isReferenceType()) {\n                            symbol = this.objectInterfaceType.memberScope.find(propertyName.text, false, this.inTypeRefTypeCheck);\n                        }\n                        if (!symbol) {\n                            // check \'Function\', if appropriate\n                            if (this.functionInterfaceType && (leftType.call || leftType.construct)) {\n                                symbol = this.functionInterfaceType.memberScope.find(propertyName.text, false, this.inTypeRefTypeCheck);\n                            }\n                        }\n                    }\n                }\n\n                if (!symbol || (!symbol.visible(leftScope, this.checker))) {\n                    binex.type = this.anyType;\n\n                    if (symbol === null) {\n                        this.checker.errorReporter.simpleError(propertyName, \"The property \'\" + propertyName.actualText + \"\' does not exist on value of type \'\" + leftType.getScopedTypeName(this.scope) + \"\'\");\n                    }\n                    else if (!this.inTypeRefTypeCheck) {  // if it\'s a dotted type reference, we\'ll catch the visibility error during binding\n                        this.checker.errorReporter.simpleError(binex, \"The property \'\" + propertyName.actualText + \" on type \'\" + leftType.getScopedTypeName(this.scope) + \"\' is not visible\");\n                    }\n                }\n                else {\n                    if (symbol.isVariable()) {\n                        if (symbol.isInferenceSymbol()) {\n                            var infSym = <InferenceSymbol>symbol;\n                            if (infSym.declAST && !this.checker.typeStatusIsFinished(infSym.typeCheckStatus)) {\n                                this.inScopeTypeCheckDecl(infSym.declAST);\n                            }\n                        }\n                    }\n                    propertyName.sym = symbol;\n                    binex.type = symbol.getType();\n                }\n            }\n            if (binex.type === null) {\n                binex.type = this.anyType;\n            }\n\n            return binex;\n        }\n\n        public typeCheckBooleanOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n            if ((!(this.checker.sourceIsAssignableToTarget(leftType, rightType))) &&\n                (!(this.checker.sourceIsAssignableToTarget(rightType, leftType)))) {\n                this.checker.errorReporter.incompatibleTypes(binex, leftType, rightType, binex.printLabel(), this.scope);\n            }\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckAsgOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            var applyTargetType = binex.operand2.nodeType !== NodeType.ParenthesizedExpression;\n            binex.operand1 = this.typeCheck(binex.operand1);\n\n            this.checker.typeCheckWithContextualType(binex.operand1.type, this.checker.inProvisionalTypecheckMode(), applyTargetType, binex.operand2);\n\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            //if (!(this.astIsWriteable(binex.operand1))) {\n            //    this.checker.errorReporter.The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer(binex);\n            //}\n            if (binex.operand1.nodeType === NodeType.Call) {\n                var callEx = <CallExpression>binex.operand1;\n            }\n            var preserveScope = false;\n            var preservedContainedScope = null;\n            if (binex.operand2.type) {\n                preservedContainedScope = binex.operand2.type.containedScope;\n                preserveScope = true;\n            }\n            // Do not re-write the AST in provisional typecheck mode\n            binex.operand2 = this.castWithCoercion(binex.operand2, leftType, applyTargetType && !this.checker.inProvisionalTypecheckMode(), false);\n            if (preserveScope && binex.operand2.type.containedScope === null) {\n                binex.operand2.type.containedScope = preservedContainedScope;\n            }\n            binex.type = rightType;\n            return binex;\n        }\n\n        public typeCheckIndex(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1); // ObjExpr\n            binex.operand2 = this.typeCheck(binex.operand2); // IndexExpr\n\n            if (!this.checker.styleSettings.literalSubscript) {\n                if (binex.operand2.nodeType === NodeType.StringLiteral) {\n                    this.checker.errorReporter.styleError(ast, \"use literal subscript (\'.\') notation instead)\");\n                }\n            }\n\n            var objExprType = binex.operand1.type;\n            var indexExprType = binex.operand2.type;\n\n            if (objExprType.elementType) { // arrays\n                if (indexExprType === this.checker.anyType || indexExprType === this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)) {\n                    binex.type = objExprType.elementType;\n                }\n                else if (indexExprType === this.checker.stringType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    this.checker.errorReporter.simpleError(binex, \"Illegal property access\");\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (objExprType.index) { // types with index sigs\n\n                if (indexExprType === this.checker.anyType ||\n                    !((objExprType.index.flags & SignatureFlags.IsStringIndexer) || (objExprType.index.flags & SignatureFlags.IsNumberIndexer)) || // REVIEW: unvalidated type expression\n                    ((objExprType.index.flags & SignatureFlags.IsStringIndexer) && indexExprType === this.checker.stringType) ||\n                    ((objExprType.index.flags & SignatureFlags.IsNumberIndexer) && (indexExprType === this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)))) {\n                    var sig = this.resolveOverload(ast, objExprType.index);\n                    if (sig) {\n                        binex.type = sig.returnType.type;//objExprType.index.signatures[0].returnType.type;\n                    }\n                    else {\n                        binex.type = this.checker.anyType;\n                    }\n                }\n                else if (indexExprType === this.checker.stringType) {\n                    binex.type = this.checker.anyType;\n                }\n                else {\n                    this.checker.errorReporter.simpleError(binex, \"Illegal property access\");\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if ((objExprType === this.checker.anyType ||\n                     objExprType === this.checker.stringType ||\n                     objExprType === this.checker.numberType ||\n                     objExprType === this.checker.booleanType ||\n                     objExprType.isReferenceType()) &&\n                     (indexExprType === this.checker.anyType ||\n                      indexExprType === this.checker.stringType ||\n                      (indexExprType === this.checker.numberType || hasFlag(indexExprType.typeFlags, TypeFlags.IsEnum)))) { // REVIEW: Do we want to allow indexes of type \'number\'?\n                binex.type = this.checker.anyType;\n            }\n            else {\n                this.checker.errorReporter.simpleError(binex, \"Illegal property access\");\n                binex.type = this.checker.anyType;\n            }\n\n            return binex;\n        }\n\n        public typeCheckInOperator(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.cast(this.typeCheck(binex.operand1), this.stringType);\n            binex.operand2 = this.typeCheck(binex.operand2);\n\n            if (!((binex.operand1.type === this.checker.anyType || binex.operand1.type === this.checker.stringType) &&\n                    (binex.operand2.type === this.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand2.type, this.objectInterfaceType)))) {\n                this.checker.errorReporter.simpleError(binex, \"The in operator requires the left operand to be of type Any or the String primitive type, and the right operand to be of type Any or an object type\");\n            }\n\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckShift(binex: BinaryExpression, assignment: bool): BinaryExpression {\n            binex.operand1 = this.cast(this.typeCheck(binex.operand1), this.doubleType);\n            binex.operand2 = this.cast(this.typeCheck(binex.operand2), this.doubleType);\n            //if (assignment && (!(this.astIsWriteable(binex.operand1)))) {\n            //    this.checker.errorReporter.The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer(binex);\n            //}\n            binex.type = this.doubleType;\n            return binex;\n        }\n\n        public typeCheckQMark(trinex: ConditionalExpression): ConditionalExpression {\n            trinex.operand1 = this.typeCheck(trinex.operand1);\n            trinex.operand2 = this.typeCheck(trinex.operand2);\n            trinex.operand3 = this.typeCheck(trinex.operand3);\n            var leftType = trinex.operand2.type;\n            var rightType = trinex.operand3.type;\n\n            if (leftType === rightType) {\n                trinex.type = leftType;\n            }\n            else {\n                if (this.checker.sourceIsSubtypeOfTarget(leftType, rightType)) {\n                    trinex.type = rightType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(rightType, leftType)) {\n                    trinex.type = leftType;\n                }\n                else {\n                    trinex.type = this.anyType;\n                    this.checker.errorReporter.incompatibleTypes(trinex, leftType, rightType, trinex.printLabel(), this.scope);\n                }\n            }\n\n            return trinex;\n        }\n\n        public addFormals(container: Symbol, signature: Signature,\n            table: IHashTable) {\n            var len = signature.parameters.length;\n            for (var i = 0; i < len; i++) {\n                var symbol = <ParameterSymbol>signature.parameters[i];\n                symbol.container = container;\n                table.add(symbol.name, symbol);\n            }\n        }\n\n        // REVIEW: We use isModContainer instead of container.getType().isModuleType because container.type may be null at this\n        // juncture\n        public addLocalsFromScope(scope: SymbolScope, container: Symbol, vars: ASTList, table: IHashTable, isModContainer: bool) {\n            var len = vars.members.length;\n            var hasArgsDef = false;\n            for (var i = 0; i < len; i++) {\n                var local = <VarDecl>vars.members[i];\n                if (((local.sym === null) || (local.sym.kind() !== SymbolKind.Field))) {\n                    var result: Symbol = null;\n                    if ((result = table.lookup(local.id.text)) === null) {\n                        var localVar: ValueLocation = new ValueLocation();\n                        localVar.typeLink = new TypeLink();\n                        var varSym = null;\n\n                        if (hasFlag(local.getVarFlags(), VariableFlags.Static)) {\n                            //local.getVarFlags() |= VarFlags.LocalStatic;\n                            varSym = new FieldSymbol(local.id.text, local.minChar,\n                                                      this.checker.locationInfo.fileName,\n                                                      true, localVar);\n                        }\n                        else {\n                            varSym = new VariableSymbol(local.id.text, local.minChar,\n                                                      this.checker.locationInfo.fileName,\n                                                      localVar);\n                        }\n                        varSym.transferVarFlags(local.getVarFlags());\n                        localVar.symbol = varSym;\n                        varSym.declAST = local;\n                        localVar.typeLink.ast = local.typeExpr;\n                        this.checker.resolveTypeLink(scope, localVar.typeLink, false);\n                        if ((local.type === null) && (local.init === null)) {\n                            local.type = this.anyType;\n                        }\n                        localVar.typeLink.type = local.type;\n                        localVar.symbol.container = container;\n                        local.sym = localVar.symbol;\n                        table.add(local.id.text, varSym);\n                        if (local.id.text === \"arguments\") {\n                            hasArgsDef = true;\n                        }\n                    }\n                    else {\n                        local.type = result.getType();\n                        local.sym = result;\n                    }\n                }\n            }\n            if (!isModContainer) {\n                if (!hasArgsDef) {\n                    var argLoc = new ValueLocation();\n                    argLoc.typeLink = new TypeLink();\n                    var theArgSym = new VariableSymbol(\"arguments\", vars.minChar,\n                                                     this.checker.locationInfo.fileName,\n                                                     argLoc);\n\n                    // if the user is using a custom lib.d.ts where IArguments has not been defined\n                    // (or they\'re compiling with the --nolib option), use \'any\' as the argument type\n                    if (!this.iargumentsInterfaceType) {\n                        var argumentsSym = scope.find(\"IArguments\", false, true);\n\n                        if (argumentsSym) {\n                            argumentsSym.flags |= SymbolFlags.CompilerGenerated;\n                            this.iargumentsInterfaceType = argumentsSym.getType();\n                        }\n                        else {\n                            this.iargumentsInterfaceType = this.anyType;\n                        }\n                    }\n                    argLoc.typeLink.type = this.iargumentsInterfaceType;\n                    table.add(\"arguments\", theArgSym);\n                }\n            }\n        }\n\n        // REVIEW: isClass param may now be redundant\n        public addConstructorLocalArgs(constructorDecl: FuncDecl, table: IHashTable, isClass: bool): void {\n            var container = constructorDecl.type.symbol;\n            var args = constructorDecl.arguments;\n            if (args) {\n                var len = args.members.length;\n                for (var i = 0; i < len; i++) {\n                    var local = <ArgDecl>args.members[i];\n                    if ((local.sym === null) ||\n                        (isClass || (local.sym.kind() !== SymbolKind.Field))) {\n                        var result: Symbol = null;\n                        if ((result = table.lookup(local.id.text)) === null) {\n                            this.resolveBoundDecl(local);\n                            var localVar: ValueLocation = new ValueLocation();\n                            localVar.typeLink = new TypeLink();\n                            var varSym = new ParameterSymbol(local.id.text, local.minChar,\n                                                                   this.checker.locationInfo.fileName,\n                                                                   localVar);\n                            varSym.funcDecl = constructorDecl;\n                            varSym.declAST = local;\n                            localVar.symbol = varSym;\n                            localVar.typeLink.type = local.type;\n                            localVar.symbol.container = container;\n                            local.sym = localVar.symbol;\n                            table.add(local.id.text, varSym);\n                        }\n                        else {\n                            local.type = result.getType();\n                            local.sym = result;\n                        }\n                    }\n                }\n            }\n        }\n\n        public checkInitSelf(funcDecl: FuncDecl): bool {\n            if (!funcDecl.isMethod()) {\n                var freeVars = funcDecl.freeVariables;\n                for (var k = 0, len = freeVars.length; k < len; k++) {\n                    var sym = freeVars[k];\n                    if (sym.isInstanceProperty()) {\n                        return true;\n                    }\n                }\n            }\n            /*\n            var fns = funcDecl.scopes;\n            var fnsLen = fns.members.length;\n\n            for (var j = 0; j < fnsLen; j++) {\n                var fn = <FuncDecl>fns.members[j];\n                if (this.checkInitSelf(fn)) {\n                    return true;\n                }\n            }\n            */\n            return false;\n        }\n\n        public checkPromoteFreeVars(funcDecl: FuncDecl, constructorSym: Symbol): void {\n            var freeVars = funcDecl.freeVariables;\n            for (var k = 0, len = freeVars.length; k < len; k++) {\n                var sym = freeVars[k];\n                if ((!sym.isInstanceProperty()) && (sym.container === constructorSym)) {\n                    instanceFilter.reset();\n                    if (this.scope.search(instanceFilter, sym.name, false, false)) {\n                        this.checker.errorReporter.simpleError(funcDecl, \"Constructor-local variable shadows class property \'\" + sym.name + \"\'. To access the class property, use \'self.\" + sym.name + \"\'\");\n                    }\n\n                    this.checker.errorReporter.simpleError(funcDecl, \"Constructor-local variables may not be accessed from instance method bodies. Consider changing local variable \'\" + sym.name + \"\' to a class property\")\n                }\n            }\n        }\n\n        public allReturnsAreVoid(funcDecl: FuncDecl) {\n            // in the case of a function or method with no declared return type, walk the body to \n            // pre-emptively determine if the function has a return type of void\n            //\n            // REVIEW: Eventually, we\'ll want to perform exit graph analysis to determine\n            // if the function ever \"escapes\" without a return expression\n            // This would require moving some of this logic into the function\'s typecheck-proper,\n            // which would slow things down a fair bit, but would open up more analysis opportunities\n            var allReturnsAreVoid = true;\n\n            if (funcDecl.signature.returnType.type === null) {\n                var preFindReturnExpressionTypes = function (ast: AST, parent: AST, walker: IAstWalker) {\n                    var go = true;\n                    switch (ast.nodeType) {\n                        case NodeType.FuncDecl:\n                            // don\'t recurse into a function decl - we don\'t want to confuse a nested\n                            // return type with the top-level function\'s return type\n                            go = false;\n                            break;\n                        case NodeType.ReturnStatement:\n                            var returnStmt: ReturnStatement = <ReturnStatement>ast;\n\n                            if (returnStmt.returnExpression) {\n                                allReturnsAreVoid = false;\n                                go = false;\n                            }\n\n                        default:\n                            break;\n                    }\n                    walker.options.goChildren = go;\n                    // walker.options.goNextSibling = go;\n                    return ast;\n                }\n\n                getAstWalkerFactory().walk(funcDecl.bod, preFindReturnExpressionTypes);\n            }\n\n            return allReturnsAreVoid;\n        }\n\n        public classConstructorHasSuperCall(funcDecl: FuncDecl) {\n            var foundSuper = false;\n\n            var preFindSuperCall = function (ast: AST, parent: AST, walker: IAstWalker) {\n\n                var go = true;\n\n                switch (ast.nodeType) {\n                    case NodeType.FuncDecl:\n                        go = false;\n                        break;\n                    case NodeType.Call:\n                        var call = <CallExpression>ast;\n\n                        if (call.target.nodeType === NodeType.SuperExpression) {\n                            go = false;\n                            foundSuper = true;\n                            break;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                walker.options.goChildren = go;\n                return ast;\n            }\n\n            getAstWalkerFactory().walk(funcDecl.bod, preFindSuperCall);\n\n            return foundSuper;\n        }\n\n        private baseListPrivacyErrorReporter(bases: ASTList, i: number, declSymbol: Symbol, extendsList: bool, typeName: string, isModuleName: bool) {\n            var baseSymbol = bases.members[i].type.symbol;\n            var declTypeString = (declSymbol.declAST.nodeType === NodeType.InterfaceDeclaration) ? \"interface\" : \"class\";\n            var baseListTypeString = extendsList ? \"extends\" : \"implements\";\n            var baseTypeString = (baseSymbol.declAST.nodeType === NodeType.InterfaceDeclaration) ? \"interface\" : \"class\";\n            var typestring = \"\";\n            if (isModuleName) {\n                var quotestring = \"\";\n                if (!isQuoted(typeName)) {\n                    quotestring = \"\'\";\n                }\n                typestring = \" is using inaccessible module \";\n                baseTypeString = \" \" + baseTypeString + \" from private module \" + quotestring + typeName + quotestring;\n            } else {\n                baseTypeString = \" private \" + baseTypeString + \" \'\" + typeName + \"\'\";\n            }\n            this.checker.errorReporter.simpleError(bases.members[i], \"exported \" + declTypeString + \" \'\" + declSymbol.name + \"\' \" + baseListTypeString + baseTypeString);\n        }\n\n        // Check if declSymbol can satisfy baselist privacy\n        private typeCheckBaseListPrivacy(bases: ASTList, declSymbol: Symbol, extendsList: bool) {\n            if (bases) {\n                var basesLen = bases.members.length;\n                for (var i = 0; i < basesLen; i++) {\n                    if (!bases.members[i].type || bases.members[i].type === this.checker.anyType) {\n                        // This type is coming from external module so it has to be exported, or we\'re recovering from an\n                        // error condition\n                        continue;\n                    }\n\n                    this.checkSymbolPrivacy(bases.members[i].type.symbol, declSymbol, (typeName: string, isModuleName: bool) => this.baseListPrivacyErrorReporter(bases, i, declSymbol, extendsList, typeName, isModuleName));\n                }\n            }\n        }\n\n        // Checks if the privacy is satisfied by typeSymbol that is used in the declaration inside container\n        private checkSymbolPrivacy(typeSymbol: TypeSymbol, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName: bool) => void ) {\n            var externalModuleSymbol: TypeSymbol = null;\n            var declSymbolPath: Symbol[] = null;\n\n            // Type is visible type, so this can be used by anyone.\n            if (typeSymbol.isExternallyVisible(this.checker)) {\n                // Symbol could be from external module, go ahead and find the external module\n                var typeSymbolPath = typeSymbol.pathToRoot();\n                declSymbolPath = declSymbol.pathToRoot();\n                var typeSymbolLength = typeSymbolPath.length;\n                var declSymbolPathLength = declSymbolPath.length;\n\n                if (typeSymbolLength > 0) {\n                    if (typeSymbolPath[typeSymbolLength - 1].getType().isModuleType() &&\n                        (<TypeSymbol>typeSymbolPath[typeSymbolLength - 1]).isDynamic &&\n                        typeSymbolPath[typeSymbolLength - 1] !== declSymbolPath[declSymbolPathLength - 1]) {\n                        // Symbol from external module that was imported using one of the import statement\n                        externalModuleSymbol = <TypeSymbol>typeSymbolPath[typeSymbolLength - 1];\n                    } else if (typeSymbolLength > 1) {\n                        // Is symbol from declared quoted module\n                        if (typeSymbolPath[typeSymbolLength - 2].getType().isModuleType() &&\n                            (<TypeSymbol>typeSymbolPath[typeSymbolLength - 2]).isDynamic &&\n                            (declSymbolPathLength === 1 || typeSymbolPath[typeSymbolLength - 2] !== declSymbolPath[declSymbolPathLength - 2])) {\n                            // From quoted module name\n                            externalModuleSymbol = <TypeSymbol>typeSymbolPath[typeSymbolLength - 2];\n                        }\n                    }\n                }\n\n                if (externalModuleSymbol === null) {\n                    return;\n                }\n            }\n\n            // Interface symbol doesn\'t reflect correct Exported state so use AST instead\n            var interfaceDecl: InterfaceDeclaration = declSymbol.getInterfaceDeclFromSymbol(this.checker);\n            if (interfaceDecl && !hasFlag(interfaceDecl.getVarFlags(), VariableFlags.Exported)) {\n                return;\n            }\n\n            var checkVisibilitySymbol = declSymbol;\n            // Var decl symbol doesnt reflect correct exported state so use AST instead\n            var varDecl = declSymbol.getVarDeclFromSymbol();\n            if (varDecl) {\n                if (hasFlag(varDecl.getVarFlags(), VariableFlags.Private)) {\n                    return;\n                } else if (hasFlag(varDecl.getVarFlags(), VariableFlags.Public)) {\n                    // Its a member from class so check visibility of its container\n                    checkVisibilitySymbol = declSymbol.container;\n                }\n            }\n\n            // If the container is visible from global scrope it is error\n            if (checkVisibilitySymbol.isExternallyVisible(this.checker)) {\n                var privateSymbolName = typeSymbol.name;\n\n                // If imported typeSymbol mark it as visible externally and verify that the symbol it imports is visible externally\n                if (externalModuleSymbol !== null) {\n                    var prettyName = externalModuleSymbol.getPrettyNameOfDynamicModule(declSymbolPath);\n                    if (prettyName !== null) {\n                        this.currentScript.AddExternallyVisibleImportedSymbol(prettyName.symbol, this.checker);\n                        return;\n                    } else {\n                        privateSymbolName = externalModuleSymbol.prettyName;\n                    }\n                }\n\n                // Visible declaration using non visible type.\n                errorCallback(privateSymbolName, typeSymbol.name !== privateSymbolName);\n            }\n        }\n\n        // Checks if the privacy is satisfied by type that is used in the declaration inside container\n        private checkTypePrivacy(type: Type, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName: bool) => void ) {\n            // Primitive types\n            if (!(type && type.primitiveTypeClass === Primitive.None)) {\n                return;\n            }\n\n\n            // If type is array, check element type\n            if (type.isArray()) {\n                return this.checkTypePrivacy(type.elementType, declSymbol, errorCallback);\n            }\n\n            // Going to be printing symbol name, verify if symbol can be emitted\n            if (type.symbol && type.symbol.name && type.symbol.name !== \"_anonymous\" &&\n                        (((type.call === null) && (type.construct === null) && (type.index === null)) ||\n                        (type.members && (!type.isClass())))) {\n                return this.checkSymbolPrivacy(<TypeSymbol>type.symbol, declSymbol, errorCallback);\n            }\n\n            if (type.members) {\n                // Verify symbols for members\n                type.members.allMembers.map((key, s, unused) => {\n                    var sym = <Symbol>s;\n                    if (!hasFlag(sym.flags, SymbolFlags.BuiltIn)) {\n                        this.checkTypePrivacy(sym.getType(), declSymbol, errorCallback);\n                    }\n                }, null);\n            }\n\n            this.checkSignatureGroupPrivacy(type.call, declSymbol, errorCallback);\n            this.checkSignatureGroupPrivacy(type.construct, declSymbol, errorCallback);\n            this.checkSignatureGroupPrivacy(type.index, declSymbol, errorCallback);\n        }\n\n        // Checks if the privacy is satisfied by typeSymbol that is used in the declaration inside container\n        private checkSignatureGroupPrivacy(sgroup: SignatureGroup, declSymbol: Symbol, errorCallback: (typeName: string, isModuleName: bool) => void ) {\n            if (sgroup) {\n                var len = sgroup.signatures.length;\n                for (var i = 0; i < sgroup.signatures.length; i++) {\n                    var signature = sgroup.signatures[i];\n                    if (len > 1 && signature === sgroup.definitionSignature) {\n                        // In case of overloads don\'t look up for overload defintion types.\n                        continue;\n                    }\n\n                    if (signature.returnType) {\n                        this.checkTypePrivacy(signature.returnType.type, declSymbol, errorCallback);\n                    }\n\n                    var paramLen = signature.parameters.length;\n                    for (var j = 0; j < paramLen; j++) {\n                        var param = signature.parameters[j];\n                        this.checkTypePrivacy(param.getType(), declSymbol, errorCallback);\n                    }\n                }\n            }\n        }\n\n        private functionArgumentPrivacyErrorReporter(funcDecl: FuncDecl, p: number, paramSymbol: Symbol, typeName: string, isModuleName: bool) {\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.SetAccessor);\n            var isPublicFunc = hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Public);\n            var isContainerInterface = funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker) !== null;\n            var typestring = \"\";\n            if (isModuleName) {\n                var quotestring = \"\";\n                if (!isQuoted(typeName)) {\n                    quotestring = \"\'\";\n                }\n                typestring = \" is using inaccessible module \" + quotestring + typeName + quotestring;\n            } else {\n                typestring = \" has or is using private type \'\" + typeName + \"\'\";\n            }\n\n            if (!isContainerInterface) {\n                if (funcDecl.isConstructor) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], \"exported class\'s constructor parameter \'\" + paramSymbol.name + \"\'\" + typestring);\n                } else if (isSetter) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], (isPublicFunc ? \"public\" : \"exported\") + \" setter parameter \'\" + paramSymbol.name + \"\'\" + typestring);\n                } else if (!isGetter) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], (isPublicFunc ? \"public\" : \"exported\") + \" function parameter \'\" + paramSymbol.name + \"\'\" + typestring);\n                }\n            } else {\n                if (funcDecl.isConstructMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], \"exported interface\'s constructor parameter \'\" + paramSymbol.name + \"\'\" + typestring);\n                } else if (funcDecl.isCallMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], \"exported interface\'s call parameter \'\" + paramSymbol.name + \"\'\" + typestring);\n                } else if (!funcDecl.isIndexerMember()) {\n                    this.checker.errorReporter.simpleError(funcDecl.arguments.members[p], \"exported interface\'s function parameter \'\" + paramSymbol.name + \"\'\" + typestring);\n                }\n            }\n        }\n\n        private returnTypePrivacyError(astError: AST, funcDecl: FuncDecl, typeName: string, isModuleName: bool) {\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.SetAccessor);\n            var isPublicFunc = hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Public);\n            var isContainerInterface = funcDecl.type.symbol.getInterfaceDeclFromSymbol(this.checker) !== null;\n            var typestring = \"\";\n            if (isModuleName) {\n                var quotestring = \"\";\n                if (!isQuoted(typeName)) {\n                    quotestring = \"\'\";\n                }\n                typestring = \" is using inaccessible module \" + quotestring + typeName + quotestring;\n            } else {\n                typestring = \" has or is using private type \'\" + typeName + \"\'\";\n            }\n            if (!isContainerInterface) {\n                if (isGetter) {\n                    this.checker.errorReporter.simpleError(astError, (isPublicFunc ? \"public\" : \"exported\") + \" getter return type\" + typestring);\n                } else if (!isSetter) {\n                    this.checker.errorReporter.simpleError(astError, (isPublicFunc ? \"public\" : \"exported\") + \" function return type\" + typestring);\n                }\n            } else {\n                if (funcDecl.isConstructMember()) {\n                    this.checker.errorReporter.simpleError(astError, \"exported interface\'s constructor return type\" + typestring);\n                } else if (funcDecl.isCallMember()) {\n                    this.checker.errorReporter.simpleError(astError, \"exported interface\'s call return type\" + typestring);\n                } else if (funcDecl.isIndexerMember()) {\n                    this.checker.errorReporter.simpleError(astError, \"exported interface\'s indexer return type\" + typestring);\n                } else {\n                    this.checker.errorReporter.simpleError(astError, \"exported interface\'s function return type\" + typestring);\n                }\n            }\n        }\n\n        private functionReturnTypePrivacyErrorReporter(funcDecl: FuncDecl, signature: Signature, typeName: string, isModuleName: bool) {\n            var reportOnFuncDecl = false;\n\n            // Error coming from return annotation\n            if (funcDecl.returnTypeAnnotation !== null &&\n                funcDecl.returnTypeAnnotation.type === signature.returnType.type) {\n                this.returnTypePrivacyError(funcDecl.returnTypeAnnotation, funcDecl, typeName, isModuleName);\n            }\n\n            // Check if return statement\'s type matches the one that we concluded\n            for (var i = 0; i < funcDecl.returnStatementsWithExpressions.length; i++) {\n                if (funcDecl.returnStatementsWithExpressions[i].type === signature.returnType.type) {\n                    this.returnTypePrivacyError(funcDecl.returnStatementsWithExpressions[i], funcDecl, typeName, isModuleName);\n                } else {\n                    reportOnFuncDecl = true;\n                }\n            }\n\n            if (reportOnFuncDecl) {\n                // Show on function decl\n                this.returnTypePrivacyError(funcDecl, funcDecl, typeName, isModuleName);\n            }\n        }\n\n        public typeCheckFunction(funcDecl: FuncDecl): FuncDecl {\n            this.nestingLevel = 0;\n            var fnType = funcDecl.type;\n\n            var fgSym = fnType.symbol;\n            var signature = funcDecl.signature;\n\n            if (this.checker.typeStatusIsFinished(signature.typeCheckStatus)) {\n                return funcDecl;\n            }\n            else if (signature.typeCheckStatus === TypeCheckStatus.Started) {\n                if (!funcDecl.returnTypeAnnotation &&\n                    funcDecl.bod &&\n                       !funcDecl.isSignature() &&\n                       !(funcDecl.isConstructor) &&\n                       this.allReturnsAreVoid(funcDecl)) {\n\n                    signature.returnType.type = this.voidType;\n                    return funcDecl;\n                }\n                else {\n                    if (funcDecl.returnTypeAnnotation === null) {\n                        if (this.checker.styleSettings.implicitAny) {\n                            this.checker.errorReporter.styleError(funcDecl, \"type implicitly set to \'any\'\");\n                        }\n                        signature.returnType.type = this.anyType;\n                        fgSym.flags |= SymbolFlags.RecursivelyReferenced;\n                    }\n                    return funcDecl;\n                }\n            }\n\n            signature.typeCheckStatus = TypeCheckStatus.Started;\n            this.checker.addStartedPTO(signature);\n            var prevScope = this.scope;\n            var prevFnc = this.thisFnc;\n            var prevMethodStatus = this.enclosingFncIsMethod;\n            var prevClassNode = this.thisClassNode;\n            this.enclosingFncIsMethod = funcDecl.isMethod() || funcDecl.isConstructor;\n            this.thisFnc = funcDecl;\n            var container = funcDecl.type.symbol;\n            var prevThisType = this.thisType;\n            var prevLocationInfo = this.checker.locationInfo;\n            var funcTable: IHashTable = null;\n            var acceptedContextualType = false;\n            var targetParams: ParameterSymbol[] = null;\n            var targetReturnType: Type = null;\n            var isGetter = funcDecl.isAccessor() && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor);\n            var isSetter = funcDecl.isAccessor() && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.SetAccessor);\n            var accessorType: Type = (isGetter || isSetter) && funcDecl.accessorSymbol ? funcDecl.accessorSymbol.getType() : null;\n            var prevModDecl = this.checker.currentModDecl;\n            var ssb: SymbolScopeBuilder;\n\n            if (funcDecl.isConstructor/* && !funcDecl.isOverload*/) {\n                if (fnType.instanceType === null) {\n                    this.checker.errorReporter.simpleError(funcDecl, \"Malformed function body (is this a class named the same as an existing interface?)\");\n                    return funcDecl;\n                }\n                if (funcDecl.classDecl.type.construct === null) {\n                    this.checker.errorReporter.simpleError(funcDecl, \"Malformed constructor (is this a class named the same as an existing class?)\");\n                    return funcDecl;\n                }\n                this.scope = fnType.instanceType.constructorScope;\n                ssb = <SymbolScopeBuilder>this.scope;\n                funcTable = ssb.valueMembers.allMembers;\n            }\n            else if ((funcDecl.isSpecialFn() && !(funcDecl.getFunctionFlags() & FunctionFlags.Signature))/* || funcDecl.isOverload*/) {\n                funcTable = funcDecl.symbols;\n                // if the function is static, we just want to use the \n                // current scope\n                if (!hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Static) && fnType.containedScope) {\n                    this.scope = fnType.containedScope;\n                }\n            }\n            else {\n                if (funcDecl.bod) {\n                    this.scope = fnType.containedScope;\n                }\n                ssb = <SymbolScopeBuilder>this.scope;\n\n                // If it is null, it\'s an ambient declaration with no body, so it doesn\'t strictly matter\n                // if funcTable is not set\n                if (ssb && ssb.valueMembers) {\n                    funcTable = ssb.valueMembers.allMembers;\n                }\n            }\n\n            // If it\'s a class constructor, we need to check for the presence (or absense) of calls\n            // to the \'super\' constructor\n            //\n            // A super constructor call must exist if:\n            //  - the class has a base class\n            //\n            // A super constructor call must be the first statement in the function body if:\n            //  - the constructor has parameter properties or\n            //  - the class body has initialized property decls\n            //\n            // A super constructor call may not exist if:\n            //  - The class has no base type, or inherits directly from \'Object\'\n            if (funcDecl.isConstructor && funcDecl.bod && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ClassMethod)) {\n\n                var hasBaseType = hasFlag(funcDecl.classDecl.type.instanceType.typeFlags, TypeFlags.HasBaseType);\n                var noSuperCallAllowed = !hasBaseType || hasFlag(funcDecl.classDecl.type.instanceType.typeFlags, TypeFlags.HasBaseTypeOfObject);\n                var superCallMustBeFirst = false;  /*hasFlag((<ClassDeclaration>funcDecl.classDecl).getVarFlags(), VariableFlags.ClassSuperMustBeFirstCallInConstructor);*/\n\n                if (noSuperCallAllowed && this.classConstructorHasSuperCall(funcDecl)) {\n                    this.checker.errorReporter.simpleError(funcDecl, \"Calls to \'super\' constructor are not allowed in classes that either inherit directly from \'Object\' or have no base class\");\n                }\n                else if (hasBaseType) {\n                    if (superCallMustBeFirst) {\n                        if (!funcDecl.bod ||\n                            !funcDecl.bod.members.length ||\n                            !((funcDecl.bod.members[0].nodeType === NodeType.Call && (<CallExpression>funcDecl.bod.members[0]).target.nodeType === NodeType.SuperExpression) ||\n                            (hasFlag(funcDecl.bod.getFlags(), ASTFlags.StrictMode) && funcDecl.bod.members.length > 1 &&\n                             funcDecl.bod.members[1].nodeType === NodeType.Call && (<CallExpression>funcDecl.bod.members[1]).target.nodeType === NodeType.SuperExpression))) {\n                            this.checker.errorReporter.simpleError(funcDecl, \"If a derived class contains initialized properties or constructor parameter properties, the first statement in the constructor body must be a call to the super constructor\");\n                        }\n                    }\n                    else if (!this.classConstructorHasSuperCall(funcDecl)) {\n                        this.checker.errorReporter.simpleError(funcDecl, \"Constructors for derived classes must contain a call to the class\'s \'super\' constructor\");\n                    }\n                }\n            }\n\n            // If we\'ve typechecked this method \"out of order\" (not by walking the class, but through a method call somewhere else),\n            // we need to reset the current class node in question, so that visibility checks on class members don\'t fail\n            if (funcDecl.isMethod() && funcDecl.type.enclosingType) {\n\n                var enclosingClassNode: TypeDeclaration = null;\n\n                if (funcDecl.type.enclosingType.symbol.declAST.nodeType === NodeType.FuncDecl) {\n                    enclosingClassNode = <TypeDeclaration>(<FuncDecl>funcDecl.type.enclosingType.symbol.declAST).classDecl;\n                }\n                else if (funcDecl.type.enclosingType.symbol.declAST.nodeType === NodeType.ClassDeclaration) {\n                    enclosingClassNode = <TypeDeclaration>funcDecl.type.enclosingType.symbol.declAST;\n                }\n\n                if (enclosingClassNode) {\n                    this.thisClassNode = enclosingClassNode;\n                }\n            }\n\n            // if this function is contained in a module, we may be in the midst of a recursive typecheck operation\n            // should that be the case, we need to properly set the current module (for visibility tests)\n            if (fnType.enclosingType) {;\n                var enclosingSym = fnType.symbol.container;\n\n                // if the enclosing type is a class, grab the parent module\n                if (enclosingSym && enclosingSym.isType() && enclosingSym.getType().isClass()) {\n                    enclosingSym = enclosingSym.container;\n                }\n\n                if (enclosingSym && enclosingSym.declAST && enclosingSym.declAST.nodeType === NodeType.ModuleDeclaration) {\n                    this.checker.currentModDecl = <ModuleDeclaration>enclosingSym.declAST;\n                }\n            }\n\n            //if (funcDecl.fileName !== unknownLocationInfo.fileName) {\n            //    if (this.checker.fileNameToLocationInfo &&\n            //        this.checker.fileNameToLocationInfo.lookup(funcDecl.fileName)) {\n            //        this.checker.locationInfo = this.checker.fileNameToLocationInfo.lookup(funcDecl.fileName);\n            //    }\n            //    else {\n            //        this.checker.locationInfo = unknownLocationInfo;\n            //    }\n            //}\n\n            if (fnType.enclosingType) {\n                this.thisType = fnType.enclosingType;\n            }\n            else {\n                this.thisType = prevThisType;\n            }\n\n            var paramLen = signature.parameters.length;\n            var candidateTypeContext: ContextualTypeContext;\n            var p = 0;\n\n            if (!funcDecl.isConstructor && funcDecl.bod && !funcDecl.isSignature()) {\n                var tmpParamScope = this.scope;\n                ssb = <SymbolScopeBuilder>this.scope;\n\n                // Attempt to contextually type the function declaration             \n                if (!funcDecl.isMethod() && funcDecl.returnTypeAnnotation === null) {\n\n                    // the funcDecl may be a candidate for contextual typing                 \n                    // REVIEW: prevScope will only be null in the case of an upstream error\n                    if (prevScope && funcDecl.name && !funcDecl.name.isMissing()) {\n                        // Go ahead and check for an ambient symbol\n                        var considerSym: Symbol = prevScope.findAmbient(funcDecl.name.text, false, false);\n\n                        if (considerSym && considerSym.declAST && considerSym.declAST.type) {\n                            // REVIEW: Ambients beget signatures, and signatures don\'t need to be typechecked\n                            //typeCheck(considerSym.declAST);\n                            this.checker.setContextualType(considerSym.declAST.type, false);\n                        }\n                    }\n\n                    if (this.checker.hasTargetType()) {\n                        candidateTypeContext = this.checker.getTargetTypeContext();\n                        var candidateType = candidateTypeContext.contextualType;\n\n                        if (this.checker.canContextuallyTypeFunction(candidateType, funcDecl, true)) {\n\n                            // Safe to do this, since the indices and fields are guaranteed to be\n                            // non-null and valid by the above call to canContextuallyTypeFunction\n                            var candidateSigs = candidateType.construct ? candidateType.construct : candidateType.call;\n                            candidateTypeContext.targetSig = candidateSigs.signatures[0];\n                            var candidateParams = candidateTypeContext.targetSig.parameters;\n\n                            // the target type has been accepted\n                            targetParams = candidateParams;\n                            targetReturnType = candidateTypeContext.targetSig.returnType.type;\n\n                            fgSym.type = candidateTypeContext.contextualType;\n                            acceptedContextualType = true;\n                        }\n                        else if (candidateType && funcDecl.isAccessor()) {\n                            accessorType = candidateType;\n                            candidateTypeContext.targetAccessorType = accessorType;\n                        }\n                        else {\n                            this.checker.killCurrentContextualType();\n                        }\n                    }\n                }\n\n                // typecheck parameters\n                // Add parameter symbols to current scope for typechecking (in case default params reference each other)\n                // Order matters here - default parameters can reference previously defined parameters\n                var paramTable = ssb.valueMembers;\n                this.scope = new SymbolScopeBuilder(paramTable, null, null, null, prevScope, container);\n\n                for (p = 0; p < paramLen; p++) {\n                    var symbol = signature.parameters[p];\n                    var ast = <ArgDecl>symbol.declAST\n\n                    if (this.checker.hasTargetType() && (targetParams && (this.checker.getTargetTypeContext().targetSig.hasVariableArgList || p < targetParams.length))) {\n                        candidateTypeContext = this.checker.getTargetTypeContext();\n                        var hasVarArgList = candidateTypeContext.targetSig.hasVariableArgList;\n                        ast.type = hasVarArgList && p >= targetParams.length - 1 ? targetParams[targetParams.length - 1].getType().elementType : targetParams[p].getType();\n                        ast.sym.setType(ast.type);\n                        (<InferenceSymbol>ast.sym).typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                    }\n                    else {\n                        this.typeCheck(ast);\n                    }\n\n                    // infer the setter type, if necessary\n                    if (isSetter && accessorType) {\n                        ast = <ArgDecl>this.cast(ast, accessorType);\n                    }\n\n                    symbol.container = container;\n                    // Verify the parameter for the privacy\n                    this.checkTypePrivacy(symbol.getType(), container, (typeName: string, isModuleName: bool) => this.functionArgumentPrivacyErrorReporter(funcDecl, p, symbol, typeName, isModuleName));\n                    paramTable.publicMembers.add(symbol.name, symbol);\n                }\n                this.scope = tmpParamScope;\n            }\n            else {\n                this.typeCheck(funcDecl.arguments)\n\n                // Because some terms were not yet type-checkable during binding, ensure that\n                // param symbols are updated with the proper argument types\n                for (p = 0; p < paramLen; p++) {\n                    signature.parameters[p].parameter.typeLink.type = funcDecl.arguments.members[p].type;\n                    // Verify the parameter for the privacy\n                    this.checkTypePrivacy(signature.parameters[p].getType(), container, (typeName: string, isModuleName: bool) => this.functionArgumentPrivacyErrorReporter(funcDecl, p, signature.parameters[p], typeName, isModuleName));\n                    if ((<ArgDecl>funcDecl.arguments.members[p]).parameterPropertySym) {\n                        (<ArgDecl>funcDecl.arguments.members[p]).parameterPropertySym.setType(funcDecl.arguments.members[p].type);\n                    }\n                }\n\n                if ((funcDecl.getFunctionFlags() & FunctionFlags.IndexerMember)) {\n                    if (!paramLen || paramLen > 1) {\n                        this.checker.errorReporter.simpleError(funcDecl, \"Index signatures may take one and only one parameter\");\n                    }\n                    else if (funcDecl.arguments.members[0].type === this.checker.numberType) {\n                        fnType.index.flags |= SignatureFlags.IsNumberIndexer;\n                    }\n                    else if (funcDecl.arguments.members[0].type === this.checker.stringType) {\n                        fnType.index.flags |= SignatureFlags.IsStringIndexer;\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(funcDecl.arguments.members[0], \"Index signatures may only take \'string\' or \'number\' as their parameter\");\n                    }\n\n                }\n            }\n\n            // typecheck body\n            if (funcDecl.bod && (!funcDecl.isSignature())) {\n                if (!(funcDecl.isConstructor)) {\n                    this.addFormals(container, signature, funcTable);\n                }\n                else {\n                    this.addConstructorLocalArgs(funcDecl, funcTable, hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ClassMethod));\n\n                    if (this.thisClassNode && this.thisClassNode.extendsList) {\n                        var tmpScope = this.scope;\n                        var funcMembers = new ScopedMembers(<DualStringHashTable>funcTable);\n                        this.scope = new FilteredSymbolScopeBuilder(funcMembers, prevScope, funcDecl.type.symbol,\n                                                             function (sym) {\n                                                                 return sym.kind() === SymbolKind.Parameter;\n                                                             });\n                        this.typeCheckBaseCalls(this.thisClassNode.extendsList);\n                        this.scope = tmpScope;\n                    }\n                }\n\n                // Because this function may have been typechecked in a different visiblity context as its caller (e.g., this\n                // function is being typechecked as a result of a call, before the declaration could be typechecked), we need\n                // to set the enclosing module\n                var prevMod = this.checker.currentModDecl;\n                if (funcDecl.type &&\n                    funcDecl.type.symbol &&\n                    !funcDecl.isMethod() &&\n                    funcDecl.type.symbol.declModule) {\n                    this.checker.currentModDecl = funcDecl.type.symbol.declModule;\n                }\n\n\n                // unset the contextual type before typechecking the function body\n                if (acceptedContextualType) {\n                    this.checker.setContextualType(null, this.checker.inProvisionalTypecheckMode());\n                }\n\n                this.typeCheck(funcDecl.bod);\n\n                if (acceptedContextualType) {\n                    this.checker.unsetContextualType();\n                }\n\n                this.checker.currentModDecl = prevMod;\n\n                if (this.checker.checkControlFlow) {\n                    var cfg = funcDecl.buildControlFlow();\n                    if (this.checker.printControlFlowGraph) {\n                        cfg.print(this.checker.errorReporter.outfile);\n                    }\n                    cfg.reportUnreachable(this.checker.errorReporter);\n                    if (this.checker.checkControlFlowUseDef) {\n                        cfg.useDef(this.checker.errorReporter, funcDecl.type.symbol);\n                    }\n                }\n\n                if (funcDecl.isConstructor) {\n                    /*\n                    var fns: ASTList = funcDecl.scopes;\n                    var fnsLen = fns.members.length;\n                    var freeVars: Symbol[];\n                    var sym: Symbol;\n                    var j = 0;\n                    for (; j < fnsLen; j++) {\n                        var fn = <FuncDecl>fns.members[j];\n                        if (!fn.isSignature()) {\n                            if (hasFlag(fn.getFunctionFlags(), FncFlags.Method) && (!hasFlag(fn.getFunctionFlags(), FncFlags.Static))) {\n                                this.checkPromoteFreeVars(fn, funcDecl.type.symbol);\n                            }\n                        }\n                    }\n                    */\n                }\n            }\n\n            this.scope = prevScope;\n            this.thisFnc = prevFnc;\n            this.thisClassNode = prevClassNode;\n            this.enclosingFncIsMethod = prevMethodStatus;\n            this.thisType = prevThisType;\n            this.checker.locationInfo = prevLocationInfo;\n            this.checker.currentModDecl = prevModDecl;\n\n            signature.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n\n            // set the return type\n            if (funcDecl.returnTypeAnnotation) {\n                this.checkForVoidConstructor(funcDecl.returnTypeAnnotation.type, funcDecl.returnTypeAnnotation);\n\n                if (signature.returnType.type === null) {\n                    this.checker.resolveTypeLink(this.scope, signature.returnType, false);\n                }\n            }\n            else if (targetReturnType) {\n                signature.returnType.type = targetReturnType;\n            }\n\n            // If no return type annotation has been applied to the function declaration\n            // unify the return types from the given return statements\n\n            if (!(fgSym.flags & SymbolFlags.RecursivelyReferenced) && funcDecl.returnStatementsWithExpressions.length > 0) {\n                var collection: ITypeCollection = {\n                    getLength: () => { return funcDecl.returnStatementsWithExpressions.length; },\n                    setTypeAtIndex: (index: number, type: Type) => { funcDecl.returnStatementsWithExpressions[index].type = type; },\n                    getTypeAtIndex: (index: number) => { return funcDecl.returnStatementsWithExpressions[index].type; }\n                }\n\n                var bestCommonReturnType = funcDecl.returnStatementsWithExpressions[0].type;\n                bestCommonReturnType = this.checker.findBestCommonType(bestCommonReturnType, null, collection, true);\n\n                if (bestCommonReturnType) {\n                    signature.returnType.type = this.checker.widenType(bestCommonReturnType);\n                }\n                else {\n                    for (var i = 0; i < funcDecl.returnStatementsWithExpressions.length; i++) {\n                        this.checker.errorReporter.simpleError(funcDecl.returnStatementsWithExpressions[i], \"Incompatible return type\");\n                    }\n                    signature.returnType.type = this.anyType;\n                }\n            }\n\n            var onlyHasThrow = false;\n\n            if (signature.returnType.type === null) {\n                //if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.HasReturnExpression)) {\n                //    if (this.checker.styleSettings.implicitAny) {\n                //        this.checker.errorReporter.styleError(funcDecl, \"type implicitly set to \'any\'\");\n                //    }\n                //    signature.returnType.type = this.anyType;\n                //}\n                //else {\n                    signature.returnType.type = this.voidType;\n                //}\n            }\n            else if (signature.returnType.type === this.nullType || signature.returnType.type === this.checker.undefinedType) {\n                signature.returnType.type = this.anyType;\n            }\n            else if ((signature.returnType.type !== this.voidType && signature.returnType.type !== this.checker.undefinedType && signature.returnType.type !== this.anyType)) {\n                // the signature declared a non-void type, but there\'s no return statement\n                if (!funcDecl.isSignature() &&\n                    !funcDecl.isConstructor &&\n                    /*!hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.HasReturnExpression) && */\n                    !hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.IsFatArrowFunction)) {\n                    // relax the restriction if the method only contains a single \"throw\" statement\n                    onlyHasThrow = (funcDecl.bod.members.length > 0) && (funcDecl.bod.members[0].nodeType === NodeType.ThrowStatement)\n\n                    if (!onlyHasThrow) {\n                        this.checker.errorReporter.simpleError(funcDecl.returnTypeAnnotation || funcDecl,\n                             \"Function declared a non-void return type, but has no return expression\");\n                    }\n                }\n\n                // Type check for return type Privacy\n                this.checkTypePrivacy(signature.returnType.type, container, (typeName: string, isModuleName: bool) => this.functionReturnTypePrivacyErrorReporter(funcDecl, signature, typeName, isModuleName));\n            }\n\n            // if the function declaration is a getter or a setter, set the type of the associated getter/setter symbol\n            if (funcDecl.accessorSymbol) {\n                accessorType = funcDecl.accessorSymbol.getType();\n                if (!onlyHasThrow && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor) && true /*!hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.HasReturnExpression)*/) {\n                    this.checker.errorReporter.simpleError(funcDecl, \"Getters must return a value\");\n                }\n                if (accessorType) {\n                    if ((hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor) && accessorType !== signature.returnType.type) ||\n                        (funcDecl.arguments.members.length > 0 && accessorType !== funcDecl.arguments.members[0].type)) {\n                        this.checker.errorReporter.simpleError(funcDecl, \"Getter and setter types do not agree\");\n                    }\n                }\n                else {\n                    if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor)) {\n                        funcDecl.accessorSymbol.setType(signature.returnType.type);\n                    }\n                    else {\n                        if (funcDecl.arguments.members.length !== 1) {\n                            this.checker.errorReporter.simpleError(funcDecl, \"Setters may have one and only one argument\");\n                        }\n                        else {\n                            funcDecl.accessorSymbol.setType(funcDecl.arguments.members[0].type);\n                        }\n                    }\n                }\n            }\n\n            this.typeCheckOverloadSignatures(fnType, funcDecl);\n            return funcDecl;\n        }\n\n        public typeCheckBases(type: Type) {\n            var seenInterface = false;\n            var bases = type.extendsList;\n            var baseLinks = type.extendsTypeLinks;\n            if (bases) {\n                var len = bases.length;\n\n                if (len > 0) {\n                    type.typeFlags |= TypeFlags.HasBaseType;\n                }\n\n                for (var i = 0; i < len; i++) {\n                    if (bases[i] === this.checker.anyType) {\n                        // This may be the type from imported module and hence the type was not really resolved to the correct one.\n                        // Try resolving it again\n                        baseLinks[i].type = null;\n                        // There are no contextual errors when trying to verify the base class\n                        var oldErrors = this.checker.errorReporter.getCapturedErrors();\n                        CompilerDiagnostics.assert(oldErrors.length === 0, \"There shouldnt be any contextual errors when typechecking base type names\");\n                        this.checker.errorReporter.pushToErrorSink = true;\n                        bases[i] = this.checker.resolveBaseTypeLink(baseLinks[i], type.containedScope);\n                        this.checker.errorReporter.pushToErrorSink = false;\n                        this.checker.errorReporter.freeCapturedErrors();\n                    }\n\n                    var base = bases[i];\n                    var baseRef = baseLinks[i].ast;\n\n                    // make sure it\'s the global \'Object\' and not some alias\n                    var baseTypeOfObject = base.symbol && base.symbol.name === \"Object\" && base.symbol.container === this.checker.gloMod;\n\n                    if (baseTypeOfObject) {\n                        type.typeFlags |= TypeFlags.HasBaseTypeOfObject;\n                    }\n\n                    if (base.isClassInstance()) {\n                        if (!(type.isClassInstance())) {\n                            this.checker.errorReporter.simpleError(baseRef, \"Interface base type must be interface\");\n                        }\n                        else {\n                            if (seenInterface) {\n                                this.checker.errorReporter.simpleError(baseRef, \"Class may not follow interface as base type\");\n                            }\n                        }\n                    }\n                    else if (base.isModuleType()) {\n                        this.checker.errorReporter.simpleError(baseRef, \"Types may not be derived from module types\");\n                    }\n                    else if (base.members) {\n                        if (!seenInterface) {\n                            seenInterface = true;\n                        }\n                    }\n                    else {\n                        if (!(type.isClassInstance())) {\n                            this.checker.errorReporter.simpleError(baseRef, \"Interface base type must be interface\");\n                        }\n                        else {\n                            this.checker.errorReporter.simpleError(baseRef, \"Base type must be interface or class\");\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n        public checkMembersImplementInterfaces(implementingType: Type) {\n            var instanceType = implementingType.getInstanceType();\n            if (instanceType.implementsList) {\n                var len = instanceType.implementsList.length;\n\n                for (var i = 0; i < len; i++) {\n                    var interfaceType = instanceType.implementsList[i];\n                    var comparisonInfo = new TypeComparisonInfo();\n                    if (!this.checker.sourceIsSubtypeOfTarget(instanceType, interfaceType, comparisonInfo)) {\n                        var emsg = \"Class \'\" + instanceType.getTypeName() +\n                              \"\' declares interface \'\" + interfaceType.getTypeName() +\n                              \"\' but does not implement it\";\n                        if (!comparisonInfo.message) {\n                            this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol, emsg);\n                        }\n                        else {\n                            this.checker.errorReporter.simpleErrorFromSym(instanceType.symbol, emsg + \": \" + comparisonInfo.message);\n                        }\n                    }\n                }\n            }\n        }\n\n        public typeCheckBaseCalls(bases: ASTList) {\n            if (bases === null) {\n                return;\n            }\n            var basesLen = bases.members.length;\n            for (var i = 0; i < basesLen; i++) {\n                var baseExpr = bases.members[i];\n                var baseSymbol: Symbol = null;\n                if (baseExpr.nodeType === NodeType.Call) {\n                    this.typeCheckNew(baseExpr);\n                }\n            }\n        }\n\n        public assertUniqueNamesInBaseTypes(names: IHashTable, type: Type, classDecl: InterfaceDeclaration, checkUnique: bool): void {\n            if (type) {\n                if (type.members) {\n                    type.members.publicMembers.map((key, s, c) => {\n                        var sym = <Symbol>s;\n                        var dup = names.lookup(sym.name);\n                        if (dup) {\n                            if (checkUnique) {\n                                this.checker.errorReporter.simpleError(classDecl,\n                                                                  \"duplicate member name in bases for \" + classDecl.name.actualText + \": \" + type.symbol.name + \" and \" + dup.container.name + \" both contain member with name \" + sym.name);\n                            }\n                        }\n                        else {\n                            names.add(sym.name, sym);\n                        }\n                    }, null);\n                }\n                if (type.extendsList) {\n                    var len = type.extendsList.length;\n                    for (var i = 0; i < len; i++) {\n                        if (!(type.extendsList[i].symbol.flags & SymbolFlags.RecursivelyReferenced)) {\n                            this.assertUniqueNamesInBaseTypes(names, type.extendsList[i], classDecl, checkUnique);\n                        }\n                    }\n                }\n            }\n        }\n\n        public checkBaseTypeMemberInheritance(derivedType: Type, derivedTypeDecl: AST): void {\n            var instanceType = derivedType.getInstanceType();\n            if (!instanceType.extendsList) {\n                return;\n            }\n\n            var len = instanceType.extendsList.length;\n            if (len > 0) {\n                var names = new StringHashTable();\n                if (instanceType.isClassInstance()) {\n                    for (var i = 0; i < len; i++) {\n                        this.assertUniqueNamesInBaseTypes(names, instanceType.extendsList[i], <InterfaceDeclaration>derivedTypeDecl, i > 0);\n                    }\n                }\n\n                if (instanceType.members) {\n                    instanceType.members.publicMembers.map((key, s, c) => {\n                        var sym = <Symbol>s;\n                        for (var j = 0; j < len; j++) {\n                            var base = instanceType.extendsList[j];\n                            if (!base.memberScope) {\n                                this.checker.errorReporter.simpleError(derivedTypeDecl, \"Base type \'\" + base.symbol.name + \"\' lacks an implementation.\")\n                            }\n                            else {\n                                var bSym = base.memberScope.find(sym.name, false, false);\n                                if (bSym) {\n                                    var aType = sym.getType();\n                                    var bType = bSym.getType();\n                                    if (!(this.checker.sourceIsSubtypeOfTarget(aType, bType))) {\n                                        this.checker.errorReporter.simpleErrorFromSym(sym,\n                                                                          \"Type of overridden member \'\" + sym.name + \"\' is not subtype of original member defined by type \'\" + bSym.container.name + \"\'\");\n                                    }\n                                    else if ((sym.kind() === SymbolKind.Type) &&\n                                             (bSym.kind() === SymbolKind.Field)) {\n                                        this.checker.errorReporter.simpleErrorFromSym(sym,\n                                                                          \"Cannot override field \'\" + sym.name + \"\' with method\");\n                                    }\n                                }\n                            }\n                        }\n                    }, null);\n                }\n            }\n        }\n\n        public typeCheckClass(classDecl: ClassDeclaration): ClassDeclaration {\n            var typeSymbol = <TypeSymbol>classDecl.type.symbol;\n\n            if (typeSymbol.typeCheckStatus === TypeCheckStatus.Finished) {\n                return classDecl;\n            }\n            else if (typeSymbol.typeCheckStatus === TypeCheckStatus.Started) {\n                // REVIEW: report this recursion\n                //checker.errorReporter.recursionRequiresTypeAnnotation(classDecl);\n                return classDecl;\n            }\n            else {\n                typeSymbol.typeCheckStatus = TypeCheckStatus.Started;\n                this.checker.addStartedPTO(typeSymbol);\n            }\n\n            var prevScope = this.scope;\n            var svClassNode = this.thisClassNode;\n            this.thisClassNode = classDecl;\n            var classType = classDecl.type;\n            this.typeCheckBases(classType.instanceType);\n\n            this.typeCheckBaseListPrivacy(classDecl.extendsList, typeSymbol, true);\n            this.typeCheckBaseListPrivacy(classDecl.implementsList, typeSymbol, false);\n\n            var prevThisType = this.thisType;\n            this.thisType = classType.instanceType;\n            this.scope = classType.instanceType.containedScope;\n\n            // Add the constructor locals, if necessary\n            if (classDecl.constructorDecl) {\n                this.scope = classType.instanceType.constructorScope;\n                var ssb = <SymbolScopeBuilder>this.scope;\n                var funcTable = ssb.valueMembers.allMembers;\n\n                this.addConstructorLocalArgs(classDecl.constructorDecl, funcTable, true);\n            }\n\n            this.typeCheck(classDecl.members);\n            typeSymbol.typeCheckStatus = TypeCheckStatus.Finished;\n            this.checkBaseTypeMemberInheritance(classType, classDecl);\n            this.checkMembersImplementInterfaces(classType);\n\n            this.typeCheckOverloadSignatures(classType, classDecl);\n            this.typeCheckOverloadSignatures(classType.instanceType, classDecl);\n\n            // if the class has no declared constructor, adapt its base class\'s signature group, if necessary\n            if (!classDecl.constructorDecl) {\n                if (classDecl.extendsList &&\n                    classDecl.extendsList.members.length &&\n                    classDecl.extendsList.members[0].type &&\n                    classDecl.extendsList.members[0].type.symbol.type.isClass()) {\n                    cloneParentConstructGroupForChildType(classDecl.type, classDecl.extendsList.members[0].type.symbol.type);\n                }\n            }\n\n            this.thisType = prevThisType;\n            this.thisClassNode = svClassNode;\n            this.scope = prevScope;\n            return classDecl;\n        }\n\n        public typeCheckOverloadSignatures(type: Type, ast: AST) {\n            if (type.call) {\n                type.call.typeCheck(this.checker, ast, type.construct !== null);\n            }\n            if (type.construct) {\n                type.construct.typeCheck(this.checker, ast, false);\n            }\n            if (type.index) {\n                type.index.typeCheck(this.checker, ast, false);\n            }\n        }\n\n        public typeCheckInterface(interfaceDecl: InterfaceDeclaration): InterfaceDeclaration {\n            // overloads will be typechecked inline by the members\n            //this.typeCheckOverloadSignatures(interfaceDecl.type, interfaceDecl);\n            this.typeCheckBases(interfaceDecl.type);\n            this.typeCheckBaseListPrivacy(interfaceDecl.extendsList, interfaceDecl.type.symbol, true);\n            this.typeCheck(interfaceDecl.members);\n            this.checkBaseTypeMemberInheritance(interfaceDecl.type, interfaceDecl);\n\n            // propagate base type signatures\n            if (interfaceDecl.extendsList) {\n                for (var i = 0; i < interfaceDecl.extendsList.members.length; i++) {\n                    if (interfaceDecl.extendsList.members[i].type.call) {\n                        if (interfaceDecl.type.call) {\n                            interfaceDecl.type.call.signatures = interfaceDecl.type.call.signatures.concat(interfaceDecl.extendsList.members[i].type.call.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.call = interfaceDecl.extendsList.members[i].type.call;\n                        }\n                    }\n                    if (interfaceDecl.extendsList.members[i].type.construct) {\n                        if (interfaceDecl.type.construct) {\n                            interfaceDecl.type.construct.signatures = interfaceDecl.type.construct.signatures.concat(interfaceDecl.extendsList.members[i].type.construct.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.construct = interfaceDecl.extendsList.members[i].type.construct;\n                        }\n                    }\n                    if (interfaceDecl.extendsList.members[i].type.index) {\n                        if (interfaceDecl.type.index) {\n                            interfaceDecl.type.index.signatures = interfaceDecl.type.index.signatures.concat(interfaceDecl.extendsList.members[i].type.index.signatures);\n                        }\n                        else {\n                            interfaceDecl.type.index = interfaceDecl.extendsList.members[i].type.index;\n                        }\n                    }\n                }\n            }\n\n            return interfaceDecl;\n        }\n\n        public typeCheckImportDecl(importDecl: ImportDeclaration) {\n            var mod: ModuleType = <ModuleType>importDecl.alias.type;\n            var sym: TypeSymbol = null;\n            var prevInImportTC = this.inImportTypeCheck;\n            this.inImportTypeCheck = true;\n\n            this.typeCheck(importDecl.alias);\n            mod = <ModuleType>importDecl.alias.type;\n\n            if (mod === null) {\n                this.checker.errorReporter.simpleError(importDecl.alias, \"Could not resolve module alias \'\" + importDecl.id.actualText + \"\'\");\n                mod = <ModuleType>this.checker.anyType;\n                (<TypeSymbol>importDecl.id.sym).type = mod;\n            }\n\n            importDecl.id.type = mod;\n            sym = mod.symbol;\n\n            if (!mod.isModuleType()) {\n                this.checker.errorReporter.simpleError(importDecl.alias, \"A module cannot be aliased to a non-module type\");\n            }\n            else {\n                sym.type = mod;\n\n                // Add the imported module to the AMD dependency list\n                if (this.checker.typeFlow.currentScript &&\n                    this.checker.typeFlow.currentScript.topLevelMod &&\n                    this.checker.typeFlow.currentScript.topLevelMod.mod) {\n                    this.checker.typeFlow.currentScript.topLevelMod.mod.importedModules.push(importDecl);\n                }\n\n                (<TypeSymbol>importDecl.id.sym).type = mod;\n\n                if (mod.symbol && mod.symbol.declAST) {\n                    // (<ModuleDeclaration>mod.symbol.declAST).getModuleFlags() &= ~ModuleFlags.ShouldEmitModuleDecl;\n                }\n\n                //importDecl.id.sym = sym;\n                // REVIEW: Uncomment when you can toggle module codegen targets from the language service\n                //else if (typeFlow.checker.currentModDecl === null && \n                //            hasFlag((<ModuleDecl>sym.declAST).getModuleFlags(),ModuleFlags.IsDynamic) &&\n                //            moduleGenTarget === ModuleGenTarget.Asynchronous) \n                //{\n                //    typeFlow.checker.errorReporter.simpleError(alias, \"In AMD codegen mode, dynamic modules may not be referenced from global scope.  (Wrap the file in a module declaration.)\");\n                //}\n            }\n            this.inImportTypeCheck = prevInImportTC;\n            return importDecl;\n        }\n\n        public typeCheckModule(moduleDecl: ModuleDeclaration): ModuleDeclaration {\n\n            // In some really nasty cases of error recovery, we may not have a type\n            if (!moduleDecl.mod) {\n                return moduleDecl;\n            }\n\n            //if (this.currentScript) {\n            //    this.currentScript.requiresGlobal = true;\n            //}\n            var mod = moduleDecl.mod;\n            var sym: TypeSymbol = null;\n\n            var prevScope = this.scope;\n            var prevThisType = this.thisType;\n            var prevCurrentModDecl = this.checker.currentModDecl;\n            this.checker.currentModDecl = moduleDecl;\n\n            this.thisType = null;\n            this.scope = mod.containedScope;\n            this.typeCheck(moduleDecl.members);\n            sym = mod.symbol;\n\n            this.checker.currentModDecl = prevCurrentModDecl;\n            this.thisType = prevThisType;\n            this.scope = prevScope;\n\n            moduleDecl.type = mod;\n\n            if (sym) {\n                sym.typeCheckStatus = TypeCheckStatus.Finished;\n            }\n            return moduleDecl;\n        }\n\n        public typeCheckFor(forStmt: ForStatement): ForStatement {\n            forStmt.init = this.typeCheck(forStmt.init);\n            this.nestingLevel++;\n            forStmt.cond = this.typeCheck(forStmt.cond);\n            this.typeCheckCondExpr(forStmt.cond);\n            forStmt.incr = this.typeCheck(forStmt.incr);\n            this.nestingLevel--;\n            forStmt.body = this.typeCheck(forStmt.body);\n            this.typeCheckCompoundStmtBlock(forStmt.body, \"for statement\");\n            forStmt.type = this.voidType;\n            return forStmt;\n        }\n\n        public typeCheckWith(withStmt: WithStatement): WithStatement {\n            if (this.checker.errorsOnWith) {\n                this.checker.errorReporter.simpleError(withStmt.expr, \"All symbols within a \'with\' block will be typed as \'any\'\");\n            }\n            withStmt.expr = this.typeCheck(withStmt.expr);\n            this.checker.inWith = true;\n            withStmt.body = this.typeCheck(withStmt.body);\n            this.typeCheckCompoundStmtBlock(withStmt.body, \"with statement\");\n            this.checker.inWith = false;\n            return withStmt;\n        }\n\n        public typeCheckForIn(forInStmt: ForInStatement): ForInStatement {\n            forInStmt.obj = this.typeCheck(forInStmt.obj);\n            forInStmt.lval = this.cast(this.typeCheck(forInStmt.lval), this.checker.stringType);\n            if (forInStmt.lval.nodeType === NodeType.VarDecl) {\n\n                var varDecl = <VarDecl>forInStmt.lval;\n                if (varDecl.typeExpr) {\n                    this.checker.errorReporter.simpleError(varDecl, \"Variable declarations for for/in expressions may not contain a type annotation\");\n                }\n\n                if (varDecl.sym) {\n                    varDecl.sym.setType(this.checker.stringType);\n                }\n            }\n            forInStmt.body = this.typeCheck(forInStmt.body);\n            this.typeCheckCompoundStmtBlock(forInStmt.body, \"for in statement\");\n            return forInStmt;\n        }\n\n        public typeCheckWhile(whileStmt: WhileStatement): WhileStatement {\n            whileStmt.cond = this.typeCheck(whileStmt.cond);\n            this.typeCheckCondExpr(whileStmt.cond);\n            whileStmt.body = this.typeCheck(whileStmt.body);\n            this.typeCheckCompoundStmtBlock(whileStmt.body, \"while statement\");\n            whileStmt.type = this.voidType;\n            return whileStmt;\n        }\n\n        public typeCheckDoWhile(doWhileStmt: DoWhileStatement): DoWhileStatement {\n            doWhileStmt.cond = this.typeCheck(doWhileStmt.cond);\n            this.typeCheckCondExpr(doWhileStmt.cond);\n            doWhileStmt.body = this.typeCheck(doWhileStmt.body);\n            this.typeCheckCompoundStmtBlock(doWhileStmt.body, \"do while statement\");\n            doWhileStmt.type = this.voidType;\n            return doWhileStmt;\n        }\n\n        public typeCheckCondExpr(cond: AST) {\n            if (this.checker.styleSettings.assignmentInCond) {\n                if ((cond !== null) &&\n                    (cond.nodeType >= NodeType.Asg) &&\n                    (cond.nodeType <= NodeType.LastAsg)) {\n                    this.checker.errorReporter.simpleError(cond, \"top-level assignment statement in conditional expression\");\n                }\n            }\n        }\n\n        public typeCheckCompoundStmtBlock(stmts: AST, stmtType: string) {\n            if (this.checker.styleSettings.blockInCompoundStmt && stmts) {\n                if (stmts.nodeType !== NodeType.Block) {\n                    this.checker.errorReporter.styleError(stmts, stmtType + \" requires a block\");\n                }\n            }\n        }\n\n        public typeCheckIf(ifStmt: IfStatement): IfStatement {\n            ifStmt.cond = this.typeCheck(ifStmt.cond);\n            this.typeCheckCondExpr(ifStmt.cond);\n            ifStmt.thenBod = this.typeCheck(ifStmt.thenBod);\n            ifStmt.elseBod = this.typeCheck(ifStmt.elseBod);\n            this.typeCheckCompoundStmtBlock(ifStmt.thenBod, \"if statement\");\n            this.typeCheckCompoundStmtBlock(ifStmt.elseBod, \"if statement\");\n            ifStmt.type = this.voidType;\n            return ifStmt;\n        }\n\n        public typeFromAccessorFuncDecl(funcDecl: FuncDecl) {\n            if (!funcDecl.isAccessor()) {\n                return null;\n            }\n\n            if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor)) {\n                return funcDecl.type.call.signatures[0].returnType.type;\n            }\n            else {\n                return funcDecl.type.call.signatures[0].parameters[0].getType();\n            }\n        }\n\n        public typeCheckObjectLit(objectLit: UnaryExpression): void {\n\n            var resultType = new Type();\n            resultType.symbol = new TypeSymbol(this.checker.anon, objectLit.minChar,\n                                             objectLit.limChar - objectLit.minChar,\n                                             this.checker.locationInfo.fileName,\n                                             resultType, this.compilationSettings.optimizeModuleCodeGen);\n\n            resultType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n            resultType.memberScope = new SymbolTableScope(resultType.members, null, null, null, null);\n\n            var aggScope = new SymbolAggregateScope(resultType.symbol);\n            aggScope.addParentScope(resultType.memberScope);\n            aggScope.addParentScope(this.scope);\n            resultType.containedScope = aggScope;\n            var memberDecls = <ASTList>objectLit.operand;\n            var prevThisType = this.thisType;\n            var acceptTargetType = false;\n            var targetType: Type = null;\n\n            if (this.checker.hasTargetType()) {\n                targetType = this.checker.getTargetTypeContext().contextualType;\n\n                if (targetType && targetType.symbol && !this.checker.typeStatusIsFinished(targetType.symbol.typeCheckStatus)) {\n                    if (targetType.symbol.declAST) {\n                        this.typeCheck(targetType.symbol.declAST);\n                    }\n                }\n                acceptTargetType = true;\n            }\n\n            if (memberDecls) {\n                for (var i = 0, len = memberDecls.members.length; i < len; i++) {\n\n                    var binex = <BinaryExpression>memberDecls.members[i];\n\n                    var id = binex.operand1;\n                    var text: string;\n                    var targetMember: Symbol = null;\n                    var fieldSymbol: FieldSymbol = null;\n\n                    if (id.nodeType === NodeType.Name) {\n                        text = (<Identifier>id).text;\n                    }\n                    else if (id.nodeType === NodeType.StringLiteral) {\n                        // TODO: set text to unescaped string\n                        var idText = (<StringLiteral>id).text;\n                        text = idText.substring(1, idText.length - 1);\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(objectLit,\n                                                          \"malformed object literal\");\n                        resultType = this.anyType;\n                        break;\n                    }\n\n                    if (acceptTargetType && targetType.memberScope) {\n                        targetMember = targetType.memberScope.find(text, false, false);\n                    }\n\n                    // before typechecking an accessor function member, we need to initialize its accessor symbol\n                    if (binex.operand2.nodeType === NodeType.FuncDecl && (<FuncDecl>binex.operand2).isAccessor()) {\n\n                        var funcDecl = <FuncDecl>binex.operand2;\n                        var accessorSym: FieldSymbol = resultType.members.publicMembers.lookup(text);\n\n                        accessorSym = this.checker.createAccessorSymbol(funcDecl, accessorSym, resultType, true, false, resultType.memberScope, null);\n                        funcDecl.accessorSymbol = accessorSym;\n                        fieldSymbol = accessorSym;\n                        if (id.nodeType === NodeType.Name) {\n                            (<Identifier>id).sym = accessorSym;\n                        }\n                    }\n\n                    this.checker.typeCheckWithContextualType(acceptTargetType && targetMember ? targetMember.getType() : null, false, acceptTargetType, binex.operand2);\n\n                    if (acceptTargetType && targetMember) {\n                        // Note that we accept \'any\' in place of a valid subtype                     \n                        if ((binex.operand2.type === this.anyType || this.checker.sourceIsAssignableToTarget(binex.operand2.type, targetMember.getType())) ||\n                            (binex.operand2.nodeType === NodeType.FuncDecl &&\n                            (<FuncDecl>binex.operand2).isAccessor() &&\n                                this.typeFromAccessorFuncDecl(<FuncDecl>binex.operand2) === targetMember.getType())) {\n                            // set the field type to the proper contextual type\n                            // this is especially important in the \'any\' case, so that\n                            // fields typed to \'any\' aren\'t accepted for contextual typing,\n                            // but never properly set to the target type\n                            binex.operand1.type = targetMember.getType();\n                        }\n                    }\n                    else {\n                        // here we sub in \'any\' for \'undefined\' to account for field initialization to\n                        // \'undefined\'  \n                        binex.operand2.type = binex.operand2.type === this.checker.undefinedType ? this.anyType : binex.operand2.type;\n                    }\n\n                    // the field symbol hasn\'t been set by a getter or setter\n                    if (fieldSymbol === null) {\n                        var memberType = binex.operand2.type;\n                        var field = new ValueLocation();\n                        fieldSymbol =\n                            new FieldSymbol(text, id.minChar,\n                                            this.checker.locationInfo.fileName,\n                                            true, field);\n                        fieldSymbol.flags |= SymbolFlags.Property;\n                        field.symbol = fieldSymbol;\n                        fieldSymbol.typeCheckStatus = this.checker.getTypeCheckFinishedStatus();\n                        field.typeLink = new TypeLink();\n                        field.typeLink.type = memberType;\n                        resultType.members.publicMembers.add(text, fieldSymbol);\n                    }\n                    fieldSymbol.isObjectLitField = true;\n                }\n            }\n\n            this.thisType = prevThisType;\n            objectLit.type = resultType;\n            if (targetType) {\n                objectLit.targetType = targetType;\n            }\n        }\n\n        public typeCheckArrayLit(arrayLit: UnaryExpression): void {\n            var elements = <ASTList>arrayLit.operand;\n            var elementType = this.anyType;\n            var targetElementType: Type = null;\n            var comparisonInfo = new TypeComparisonInfo();\n            comparisonInfo.onlyCaptureFirstError = true;\n\n            // if the target type is an array type, extract the element type\n            if (this.checker.hasTargetType()) {\n                var targetType = this.checker.getTargetTypeContext().contextualType;\n                if (targetType.elementType) {\n                    targetElementType = targetType.elementType;\n                }\n            }\n\n            if (elements) {\n\n                var prevInArrayElemTypeCheck = this.inArrayElementTypeCheck;\n\n                this.inArrayElementTypeCheck = true;\n                this.checker.typeCheckWithContextualType(targetElementType, this.checker.inProvisionalTypecheckMode(), targetElementType !== null, elements);\n                this.inArrayElementTypeCheck = prevInArrayElemTypeCheck;\n\n                elementType = elements.members[0].type;\n\n                var collection: ITypeCollection = {\n                    getLength: () => { return elements.members.length; },\n                    setTypeAtIndex: (index: number, type: Type) => { elements.members[index].type = type; },\n                    getTypeAtIndex: (index: number) => { return elements.members[index].type; }\n                }\n\n                elementType = this.checker.findBestCommonType(elementType, targetElementType, collection, false, comparisonInfo);\n\n                // if the array type is the undefined type, we should widen it to any\n                // if it\'s of the null type, only widen it if it\'s not in a nested array element, so as not to \n                // short-circuit any checks for the best common type\n                if (elementType === this.checker.undefinedType || (!prevInArrayElemTypeCheck && elementType === this.nullType)) {\n                    elementType = this.anyType;\n                }\n            }\n            if (!elementType) {\n                var emsg = \"Incompatible types in array literal expression\";\n                if (!comparisonInfo.message) {\n                    this.checker.errorReporter.simpleError(arrayLit, emsg);\n                }\n                else {\n                    this.checker.errorReporter.simpleError(arrayLit, emsg + \": \" + comparisonInfo.message);\n                }\n                elementType = this.anyType;\n            }\n            else if (targetElementType) {\n                // for the case of zero-length \'any\' arrays, we still want to set the contextual type, if\n                // need be\n                if (this.checker.sourceIsAssignableToTarget(elementType, targetElementType)) {\n                    elementType = targetElementType;\n                }\n            }\n\n            arrayLit.type = this.checker.makeArrayType(elementType);\n\n        }\n\n        public checkForVoidConstructor(type: Type, ast: AST) {\n            if (type &&\n                type.construct &&\n                type.construct.signatures.length > 0) {\n\n                for (var i = 0; i < type.construct.signatures.length; i++) {\n                    if (type.construct.signatures[i].returnType.type === this.checker.voidType) {\n                        this.checker.errorReporter.simpleError(ast, \"Constructors may not have a return type of \'void\'\");\n                        break;\n                    }\n                }\n            }\n        }\n\n        // REVIEW: the code below could set the signature type of the function to the current return\n        // type, which would have a benefit of reducing the risk of a recursive typecheck scenario, but is\n        // is technically wrong - mergeOrdered will only work properly if the best common supertype\n        // comes before any sibling types.  This would mean that if a function, \"color()\", returned\n        // three types (in order) - \"Red\", \"Blue\", and \"IColor\", an \"Incompatible return type\" error \n        // would be triggered.  However, if \"color()\" returned (in order) \"Red\", \"IColor\" and \"Blue\"\n        // no error would be triggered, and the return type of the function would be \"IColor\"\n        public typeCheckReturn(returnStmt: ReturnStatement): ReturnStatement {\n\n            if (this.thisFnc) {\n                var targetType: Type = null;\n\n                // determine the target type\n                if (this.checker.hasTargetType()) {\n                    var tcContext = this.checker.getTargetTypeContext();\n                    var accessorType = tcContext.targetAccessorType;\n\n                    if (accessorType) {\n                        targetType = accessorType;\n                    }\n                    else {\n                        var targetSig = this.checker.getTargetTypeContext().targetSig;\n                        if (targetSig && targetSig.returnType.type !== this.voidType) {\n                            targetType = targetSig.returnType.type;\n                        }\n                    }\n                }\n\n                if (returnStmt.returnExpression) {\n                    // this.thisFnc.getFunctionFlags() |= FncFlags.HasReturnExpression;\n\n                    if (targetType === null && this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type && this.thisFnc.returnTypeAnnotation.type !== this.voidType) {\n                        targetType = this.thisFnc.returnTypeAnnotation.type;\n                    }\n\n                    this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), targetType !== null, returnStmt.returnExpression);\n\n                    var expectedReturnType: Type =\n                        (this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type) ?\n                            this.thisFnc.returnTypeAnnotation.type :\n                            targetType;\n                    if (expectedReturnType) {\n                        if (expectedReturnType === this.voidType && returnStmt.returnExpression.type !== this.voidType) {\n                            this.checker.errorReporter.simpleError(returnStmt,\n                                                              \"Return with value expression in void function\");\n\n                            // even though we\'ve raised an error, use the more specific type\n                            returnStmt.type = returnStmt.returnExpression.type;\n                        }\n                        else {\n                            returnStmt.returnExpression = this.cast(returnStmt.returnExpression, expectedReturnType);\n                            returnStmt.type = expectedReturnType;\n                        }\n                    }\n                    else {\n                        if (targetType) {\n                            if (returnStmt.returnExpression.type !== this.voidType) {\n                                returnStmt.returnExpression = this.cast(returnStmt.returnExpression, targetType);\n                            }\n                            else {\n                                returnStmt.returnExpression.type = targetType;\n                            }\n                        }\n                        returnStmt.type = returnStmt.returnExpression.type;\n                    }\n                    this.thisFnc.returnStatementsWithExpressions[this.thisFnc.returnStatementsWithExpressions.length] = returnStmt;\n                }\n                else {\n                    returnStmt.type = targetType === null ? this.checker.voidType : targetType; //((this.thisFnc.returnTypeAnnotation && this.thisFnc.returnTypeAnnotation.type) ? this.thisFnc.returnTypeAnnotation.type : this.checker.voidType) : targetType;\n                }\n            }\n\n            return returnStmt;\n        }\n\n        public typeCheckInstOf(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n\n            if (!((binex.operand1.type === this.checker.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand1.type, this.objectInterfaceType)) &&\n                    (binex.operand2.type === this.anyType || this.checker.sourceIsSubtypeOfTarget(binex.operand2.type, this.functionInterfaceType)))) {\n                this.checker.errorReporter.simpleError(ast, \"The instanceof operator requires the left operand to be of type Any or an object type, and the right operand to be of type Any or a subtype of the Function interface type\");\n            }\n            binex.type = this.booleanType;\n            return binex;\n        }\n\n        public typeCheckCommaOperator(ast: AST): AST {\n            var binex = <BinaryExpression>ast;\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            binex.type = binex.operand2.type;\n            return binex;\n        }\n\n        public typeCheckLogOr(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            var leftType = binex.operand1.type;\n            var rightType = binex.operand2.type;\n\n            if (leftType === this.checker.anyType || rightType === this.checker.anyType) {\n                binex.type = this.checker.anyType;\n            }\n            else if (leftType === this.checker.booleanType) {\n                if (rightType === this.checker.booleanType) {\n                    binex.type = this.checker.booleanType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (leftType === this.checker.numberType) {\n                if (rightType === this.checker.numberType) {\n                    binex.type = this.checker.numberType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else if (leftType === this.checker.stringType) {\n                if (rightType === this.checker.stringType) {\n                    binex.type = this.checker.stringType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            else {\n                if (this.checker.sourceIsSubtypeOfTarget(leftType, rightType)) {\n                    binex.type = rightType;\n                }\n                else if (this.checker.sourceIsSubtypeOfTarget(rightType, leftType)) {\n                    binex.type = leftType;\n                }\n                else {\n                    binex.type = this.checker.anyType;\n                }\n            }\n            return binex;\n        }\n\n        public typeCheckLogAnd(binex: BinaryExpression): BinaryExpression {\n            binex.operand1 = this.typeCheck(binex.operand1);\n            binex.operand2 = this.typeCheck(binex.operand2);\n            binex.type = binex.operand2.type;\n            return binex;\n        }\n\n        public tryAddCandidates(signature: Signature, actuals: Type[], exactCandidates: Signature[], conversionCandidates: Signature[], comparisonInfo: TypeComparisonInfo): void {\n            var lowerBound = signature.nonOptionalParameterCount; // required parameters\n            var upperBound = signature.parameters.length; // required and optional parameters\n            var formalLen = lowerBound;\n            var acceptable = false;\n\n            if ((actuals.length >= lowerBound) && (signature.hasVariableArgList || actuals.length <= upperBound)) {\n                formalLen = (signature.hasVariableArgList ? signature.parameters.length : actuals.length);\n                acceptable = true;\n            }\n\n            var repeatType: Type = null;\n\n            if (acceptable || signature.hasVariableArgList) {\n                // assumed structure here is checked when signature is formed\n                if (signature.hasVariableArgList) {\n                    formalLen -= 1;\n                    repeatType = (<ParameterSymbol>signature.parameters[formalLen]).parameter.typeLink.type;\n                    repeatType = repeatType.elementType;\n                    acceptable = actuals.length >= formalLen;\n                }\n                var len = actuals.length;\n\n                var exact = acceptable;\n                var convert = acceptable;\n                for (var i = 0; i < len; i++) {\n                    var typeA: Type;\n                    if (i < formalLen) {\n                        typeA =\n                            (<ParameterSymbol>signature.parameters[i]).parameter.typeLink.type;\n                    }\n                    else {\n                        typeA = repeatType;\n                    }\n\n                    var typeB = actuals[i];\n                    if (!typeA || !typeB || !(this.checker.typesAreIdentical(typeA, typeB))) {\n                        exact = false;\n                    }\n                    // is the argument assignable to the parameter?\n                    if (!this.checker.sourceIsAssignableToTarget(typeB, typeA, comparisonInfo)) {\n                        convert = false;\n                    }\n                    if (!(exact || convert)) {\n                        break;\n                    }\n                }\n                if (exact) {\n                    exactCandidates[exactCandidates.length] = signature;\n                }\n                else if (convert && (exactCandidates.length === 0)) {\n                    conversionCandidates[conversionCandidates.length] = signature;\n                }\n\n            }\n        }\n\n        public resolveOverload(application: AST, group: SignatureGroup): Signature {\n            var rd = this.resolutionDataCache.getResolutionData();\n            var actuals = rd.actuals;\n            var exactCandidates = rd.exactCandidates;\n            var conversionCandidates = rd.conversionCandidates;\n            var candidate: Signature = null;\n            var hasOverloads = group.signatures.length > 1;\n            var comparisonInfo = new TypeComparisonInfo();\n            var args: ASTList = null;\n            var target: AST = null;\n            var i = 0;\n\n            if (application.nodeType === NodeType.Call || application.nodeType === NodeType.New) {\n                var callEx = <CallExpression>application;\n                args = callEx.arguments;\n                target = callEx.target;\n                if (callEx.arguments) {\n                    var len = callEx.arguments.members.length;\n                    for (i = 0; i < len; i++) {\n                        actuals[i] = callEx.arguments.members[i].type;\n                    }\n                }\n            }\n            else if (application.nodeType === NodeType.Index) {\n                var binExp = <BinaryExpression>application;\n                target = binExp.operand1;\n                args = new ASTList();\n                args.members[0] = binExp.operand2;\n                actuals[0] = binExp.operand2.type;\n            }\n\n            for (var j = 0, groupLen = group.signatures.length; j < groupLen; j++) {\n                var signature = group.signatures[j];\n                if (hasOverloads && signature === group.definitionSignature && !this.checker.canCallDefinitionSignature) {\n                    continue;\n                }\n                if (!signature.returnType.type && signature.declAST &&\n                    (signature.typeCheckStatus !== TypeCheckStatus.Finished)) {\n                    this.typeCheckFunction(signature.declAST);\n                }\n                this.tryAddCandidates(signature, actuals, exactCandidates, conversionCandidates, comparisonInfo);\n            }\n\n            // For error reporting, we want to use the span of just the function\'s name if it is a method or a field of some object, so go to the right child if the node is a dot.\n            // No need to recurse since dots are left associative\n            var apparentTarget = target.nodeType === NodeType.Dot ? (<BinaryExpression> target).operand2 : target;\n            if (exactCandidates.length === 0) {\n                var candidateInfo: { sig: Signature; ambiguous: bool; };\n                var applicableCandidates = this.checker.getApplicableSignatures(conversionCandidates, args, comparisonInfo);\n                if (applicableCandidates.length > 0) {\n                    candidateInfo = this.checker.findMostApplicableSignature(applicableCandidates, args);\n                    if (candidateInfo.ambiguous) {\n                        this.checker.errorReporter.simpleError(apparentTarget, \"Ambiguous call expression - could not choose overload\");\n                    }\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    var emsg = \"Supplied parameters do not match any signature of call target\";\n                    if (comparisonInfo.message) {\n                        this.checker.errorReporter.simpleError(apparentTarget, emsg + \":\\n\\t\" + comparisonInfo.message);\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(apparentTarget, emsg);\n                    }\n                }\n            }\n            else {\n                if (exactCandidates.length > 1) {\n                    var applicableSigs: ApplicableSignature[] = [];\n                    for (i = 0; i < exactCandidates.length; i++) {\n                        applicableSigs[i] = { signature: exactCandidates[i], hadProvisionalErrors: false };\n                    }\n                    candidateInfo = this.checker.findMostApplicableSignature(applicableSigs, args);\n                    if (candidateInfo.ambiguous) {\n                        this.checker.errorReporter.simpleError(apparentTarget, \"Ambiguous call expression - could not choose overload\");\n                    }\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    candidate = exactCandidates[0];\n                }\n            }\n\n            this.resolutionDataCache.returnResolutionData(rd);\n            return candidate;\n        }\n\n        public typeCheckNew(ast: AST): AST {\n            var callEx = <CallExpression>ast;\n            var signature: Signature;\n\n            callEx.target = this.typeCheck(callEx.target);\n            var target = callEx.target;\n            if (target.type.construct || target.type.call) {\n                this.preTypeCheckCallArgs(callEx.arguments);\n            }\n            else {\n                callEx.arguments = <ASTList>this.typeCheck(callEx.arguments);\n            }\n\n            if (target.type === this.anyType) {\n                callEx.type = this.anyType;\n                callEx.arguments = <ASTList>this.typeCheck(callEx.arguments);\n            }\n            else {\n                if (target.type.construct) {\n                    signature = this.resolveOverload(callEx, target.type.construct);\n                    if (signature === null) {\n                        callEx.type = this.anyType;\n                    }\n                    else if (signature.returnType.type === this.voidType) {\n                        callEx.type = this.anyType;\n                        callEx.signature = signature;\n                    }\n                    else {\n                        callEx.type = signature.returnType.type;\n                        callEx.signature = signature;\n                    }\n                }\n                else if (target.type.call) {\n                    signature = this.resolveOverload(callEx, target.type.call);\n                    if (signature === null) {\n                        callEx.type = this.anyType;\n                    }\n                    else if ((signature.returnType.type === this.voidType) || (signature.returnType.type === this.anyType)) {\n                        callEx.type = this.anyType;\n                        callEx.signature = signature;\n                    }\n                    else {\n                        this.checker.errorReporter.simpleError(callEx.target,\n                           \"new expression only valid on constructors\");\n                    }\n                }\n                else if (target.type.elementType) {\n                    callEx.type = target.type;\n                }\n                else {\n                    this.checker.errorReporter.invalidCall(callEx, callEx.nodeType, this.scope);\n                    callEx.type = this.anyType;\n                }\n            }\n\n            this.postTypeCheckCallArgs(callEx);\n\n            return callEx;\n        }\n\n        // Typecheck all args that cannot be affected by contextual typing of overloads\n        public preTypeCheckCallArgs(args: ASTList) {\n\n            if (!args) {\n                return;\n            }\n\n            for (var i = 0; i < args.members.length; i++) {\n                switch (args.members[i].nodeType) {\n                    case NodeType.FuncDecl:\n                    case NodeType.ObjectLit:\n                    case NodeType.ArrayLit:\n                        continue;\n                    default:\n                        this.typeCheck(args.members[i]);\n                        break;\n                }\n            }\n        }\n\n        public postTypeCheckCallArgs(callEx: CallExpression) {\n\n            var acceptedTargetType = false;\n            var i = 0;\n\n            if (callEx.target &&\n                callEx.target.type &&\n                callEx.signature &&\n                callEx.arguments) {\n                var sig = callEx.signature;\n\n                if (sig && callEx.arguments.members.length >= sig.nonOptionalParameterCount) {\n                    acceptedTargetType = true;\n                    var targetType: Type = null;\n                    var nonVarArgFormalParamLength = sig.hasVariableArgList ? sig.parameters.length - 1 : sig.parameters.length;\n                    var nonVarArgActualParamLength = callEx.arguments.members.length < nonVarArgFormalParamLength ? callEx.arguments.members.length : nonVarArgFormalParamLength\n\n                    for (i = 0; i < nonVarArgActualParamLength; i++) {\n                        targetType = sig.parameters[i].getType();\n                        switch (callEx.arguments.members[i].nodeType) {\n                            case NodeType.FuncDecl:\n                            case NodeType.ObjectLit:\n                            case NodeType.ArrayLit:\n                                this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(),\n                                    sig.parameters[i].declAST.nodeType !== NodeType.ParenthesizedExpression, callEx.arguments.members[i]);\n                                break;\n                        }\n                    }\n\n                    if (sig.hasVariableArgList) {\n                        var varArgParamIndex = sig.nonOptionalParameterCount - 1;\n                        targetType = sig.parameters[varArgParamIndex].getType();\n                        if (targetType) {\n                            targetType = targetType.elementType;\n                        }\n                        var isParenthesized = sig.parameters[varArgParamIndex].declAST.nodeType !== NodeType.ParenthesizedExpression;\n                        for (i = nonVarArgActualParamLength; i < callEx.arguments.members.length; i++) {\n                            switch (callEx.arguments.members[i].nodeType) {\n                                case NodeType.FuncDecl:\n                                case NodeType.ObjectLit:\n                                case NodeType.ArrayLit:\n                                    this.checker.typeCheckWithContextualType(targetType, this.checker.inProvisionalTypecheckMode(), isParenthesized, callEx.arguments.members[i]);\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!acceptedTargetType && callEx.arguments) {\n                this.checker.killCurrentContextualType();\n\n                for (i = 0; i < callEx.arguments.members.length; i++) {\n                    switch (callEx.arguments.members[i].nodeType) {\n                        case NodeType.FuncDecl:\n                        case NodeType.ObjectLit:\n                        case NodeType.ArrayLit:\n                            this.typeCheck(callEx.arguments.members[i]);\n                            break;\n                        default:\n                            continue;\n                    }\n                }\n            }\n        }\n\n        public typeCheckCall(ast: AST): AST {\n            var callEx = <CallExpression>ast;\n            if (this.checker.styleSettings.newMustBeUsed && (ast.nodeType === NodeType.New)) {\n                //if (hasFlag(ast.flags, ASTFlags.IsStatement)) {\n                //    this.checker.errorReporter.styleError(ast, \"use of new expression as a statement\");\n                //}\n            }\n            else if ((!this.checker.styleSettings.evalOK) && (ast.nodeType === NodeType.Call)) {\n                if ((callEx.target.nodeType === NodeType.Name) && ((<Identifier>callEx.target).text === \"eval\")) {\n                    this.checker.errorReporter.styleError(callEx, \"eval not permitted\");\n                }\n            }\n\n            //if (callEx.target.nodeType === NodeType.FuncDecl) {\n            //    (<FuncDecl>callEx.target).isInlineCallLiteral = true;\n            //}\n\n            var prevInSuperCall = this.inSuperCall;\n\n            if (callEx.target.nodeType === NodeType.SuperExpression) {\n                this.inSuperCall = true;\n            }\n\n            callEx.target = this.typeCheck(callEx.target);\n            this.preTypeCheckCallArgs(callEx.arguments);\n\n            var target = callEx.target;\n            var signature: Signature;\n\n            if ((target.type === null) || (target.type === this.anyType) || (this.functionInterfaceType && target.type === this.functionInterfaceType)) {\n                callEx.type = this.anyType;\n            }\n            else {\n                var fnType = target.type;\n                if (fnType.call) {\n                    signature = this.resolveOverload(callEx, fnType.call);\n                    if (signature === null) {\n                        callEx.type = this.anyType;\n                    }\n                    else {\n                        callEx.type = signature.returnType.type;\n                        callEx.signature = signature;\n                    }\n                }\n                else {\n                    // track calls to class base class\n                    if (callEx.target.nodeType === NodeType.SuperExpression &&\n                        this.thisFnc &&\n                        this.thisFnc.isConstructor &&\n                        hasFlag(this.thisFnc.getFunctionFlags(), FunctionFlags.ClassMethod)) {\n\n                        // Need to use the class type for the construct signature, not the instance type\n                        signature = fnType.symbol.type.construct ? this.resolveOverload(callEx, fnType.symbol.type.construct) : null;\n\n                        if (signature === null) {\n                            callEx.type = this.anyType;\n                        }\n                        else {\n                            // callEx.flags |= ASTFlags.ClassBaseConstructorCall;\n                            callEx.type = signature.returnType.type;\n                            callEx.signature = signature;\n                        }\n                    }\n                    else {\n                        callEx.type = this.anyType;\n                        this.checker.errorReporter.invalidCall(callEx, callEx.nodeType, this.scope);\n                    }\n                }\n            }\n            this.postTypeCheckCallArgs(callEx);\n\n            this.inSuperCall = prevInSuperCall;\n\n            return callEx;\n        }\n\n        public assignScopes(ast: AST) {\n            var script = <Script>ast;\n            this.checker.locationInfo = script.locationInfo;\n            var globalChain = new ScopeChain(this.checker.gloMod, null, this.globalScope);\n            var context = new AssignScopeContext(globalChain, this, [this.checker.currentModDecl]);\n            getAstWalkerFactory().walk(ast, preAssignScopes, postAssignScopes, null, context);\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum Primitive {\n        None = 0,\n        Void = 1,\n        Double = 2,\n        String = 4,\n        Boolean = 8,\n        Any = 16,\n        Null = 32,\n        Undefined = 64,\n    }\n\n    export class MemberName {\n        public prefix: string = \"\";\n        public suffix: string = \"\";\n\n        public isString() { return false; }\n        public isArray() { return false; }\n\n        public toString(): string {\n            return MemberName.memberNameToString(this);\n        }\n\n        static memberNameToString(memberName: MemberName): string {\n            var result = memberName.prefix;\n\n            if (memberName.isString()) {\n                result += (<MemberNameString>memberName).text;\n            }\n            else {\n                var ar = <MemberNameArray>memberName;\n                for (var index = 0; index < ar.entries.length; index++) {\n\n                    result += MemberName.memberNameToString(ar.entries[index]);\n                    result += ar.delim;\n                }\n            }\n\n            result += memberName.suffix;\n            return result;\n        }\n\n        static create(text: string): MemberName;\n        static create(entry: MemberName, prefix: string, suffix: string): MemberName;\n        static create(arg1: any, arg2?: any, arg3?: any): MemberName {\n            if (typeof arg1 === \"string\") {\n                return new MemberNameString(arg1);\n            }\n            else {\n                var result = new MemberNameArray();\n                if (arg2)\n                    result.prefix = arg2;\n                if (arg3)\n                    result.suffix = arg3;\n                result.entries.push(arg1);\n                return result;\n            }\n        }\n\n        constructor() {\n        }\n    }\n\n    export class MemberNameString extends MemberName {\n        constructor (public text: string) {\n            super();\n        }\n\n        public isString() { return true; }\n    }\n\n    export class MemberNameArray extends MemberName {\n        public delim: string = \"\";\n        public entries: MemberName[] = [];\n\n        public isArray() { return true; }\n\n        public add(entry: MemberName) {\n            this.entries.push(entry);\n        }\n\n        public addAll(entries: MemberName[]) {\n            for (var i = 0 ; i < entries.length; i++) {\n                this.entries.push(entries[i]);\n            }\n        }\n\n        constructor() {\n            super();\n        }\n    }\n\n    var currentTypeID = -1;\n\n    export class Type {\n        public typeID = currentTypeID++;\n\n        public members: ScopedMembers;\n        public ambientMembers: ScopedMembers;\n\n        public construct: SignatureGroup = null;\n        public call: SignatureGroup = null;\n        public index: SignatureGroup = null;\n\n        // REVIEW: for either of the below, why do we have lists of types and lists of type links?\n        // interface can only extend\n        public extendsList: Type[];\n        public extendsTypeLinks: TypeLink[];\n\n        // class can also implement\n        public implementsList: Type[];\n        public implementsTypeLinks: TypeLink[];\n\n        public passTypeCreated: number = CompilerDiagnostics.analysisPass;\n\n        public baseClass(): Type {\n            if (this.extendsList && (this.extendsList.length > 0)) {\n                return this.extendsList[0];\n            }\n            else {\n                return null;\n            }\n        }\n\n        public elementType: Type;\n\n        public getArrayBase(arrInstType: Type, checker: TypeChecker): Type {\n            return this.arrayCache.specialize(arrInstType, checker);\n        }\n\n        public primitiveTypeClass: number = Primitive.None;\n\n        // REVIEW: Prune constructorScope\n        public constructorScope: SymbolScope;\n        public containedScope: SymbolScope;\n        public memberScope: SymbolScope;\n\n        public arrayCache: ArrayCache;\n\n        public typeFlags = TypeFlags.None;\n\n        public symbol: TypeSymbol;\n\n        public enclosingType: Type;\n        public instanceType: Type;\n\n        // REVIEW: Prune\n        public isClass() { return this.instanceType != null; }\n        public isArray() { return this.elementType != null; }\n        public isClassInstance() {\n            return this.symbol && !this.elementType && (<TypeSymbol>this.symbol).type.isClass();\n        }\n\n        public getInstanceType() {\n            if (this.isClass()) {\n                return this.instanceType;\n            }\n            else {\n                return this;\n            }\n        }\n\n        public hasImplementation() { return hasFlag(this.typeFlags, TypeFlags.HasImplementation); }\n        public setHasImplementation() { this.typeFlags |= TypeFlags.HasImplementation; }\n\n        public isDouble() { return hasFlag(this.primitiveTypeClass, Primitive.Double); }\n        public isString() { return hasFlag(this.primitiveTypeClass, Primitive.String); }\n        public isBoolean() { return hasFlag(this.primitiveTypeClass, Primitive.Boolean); }\n        public isNull() { return hasFlag(this.primitiveTypeClass, Primitive.Null); }\n\n        // REVIEW: No need for this to be a method\n        public getTypeName(): string {\n            return this.getMemberTypeName(\"\", true, false, null);\n        }\n\n        public getScopedTypeName(scope: SymbolScope, getPrettyTypeName?: bool) {\n            return this.getMemberTypeName(\"\", true, false, scope, getPrettyTypeName);\n        }\n\n        public getScopedTypeNameEx(scope: SymbolScope, getPrettyTypeName?: bool) {\n            return this.getMemberTypeNameEx(\"\", true, false, scope, getPrettyTypeName);\n        }\n\n        // REVIEW: No need for this to be a method\n        public callCount() {\n            var total = 0;\n            if (this.call) {\n                total += this.call.signatures.length;\n            }\n            if (this.construct) {\n                total += this.construct.signatures.length;\n            }\n            if (this.index) {\n                total += this.index.signatures.length;\n            }\n            return total;\n        }\n\n        // REVIEW: No need for this to be a method\n        public getMemberTypeName(prefix: string, topLevel: bool, isElementType: bool, scope: SymbolScope, getPrettyTypeName?: bool): string {\n            var memberName = this.getMemberTypeNameEx(prefix, topLevel, isElementType, scope, getPrettyTypeName);\n            return memberName.toString();\n        }\n\n        // REVIEW: No need for this to be a method\n        public getMemberTypeNameEx(prefix: string, topLevel: bool, isElementType: bool, scope: SymbolScope, getPrettyTypeName?: bool): MemberName {\n            if (this.elementType) {\n                return MemberName.create(this.elementType.getMemberTypeNameEx(prefix, false, true, scope), \"\", \"[]\");\n            }\n            else if (this.symbol && this.symbol.name && this.symbol.name != \"_anonymous\" &&\n                     (((this.call === null) && (this.construct === null) && (this.index === null)) ||\n                      (hasFlag(this.typeFlags, TypeFlags.BuildingName)) ||\n                      (this.members && (!this.isClass())))) {\n                var tn = this.symbol.scopeRelativeName(scope);\n                return MemberName.create(tn === \"null\" ? \"any\" : tn); // REVIEW: GROSS!!!\n            }\n            else {\n                if (this.members || this.call || this.construct) {\n                    if (hasFlag(this.typeFlags, TypeFlags.BuildingName)) {\n                        return MemberName.create(\"this\");\n                    }\n                    this.typeFlags |= TypeFlags.BuildingName;\n                    var builder = \"\";\n                    var allMemberNames = new MemberNameArray();\n                    var curlies = isElementType || this.index != null;\n                    var memCount = 0;\n                    var delim = \"; \";\n                    if (this.members) {\n                        this.members.allMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            if (!hasFlag(sym.flags, SymbolFlags.BuiltIn)) {\n                                // Remove the delimiter character from the generated type name, since\n                                // our \"allMemberNames\" array takes care of storing delimiters\n                                var typeNameMember = sym.getTypeNameEx(scope);\n                                if (typeNameMember.isArray() && (<MemberNameArray>typeNameMember).delim === delim) {\n                                    allMemberNames.addAll((<MemberNameArray>typeNameMember).entries);\n                                } else {\n                                    allMemberNames.add(typeNameMember);\n                                }\n                                memCount++;\n                                curlies = true;\n                            }\n                        }, null);\n                    }\n\n                    var signatureCount = this.callCount();\n                    var j: number;\n                    var len = 0;\n                    var getPrettyFunctionOverload = getPrettyTypeName && !curlies && this.call && this.call.signatures.length > 1 && !this.members && !this.construct;\n                    var shortform = !curlies && (signatureCount === 1 || getPrettyFunctionOverload) && topLevel;\n                    if (this.call) {\n                        allMemberNames.addAll(this.call.toStrings(prefix, shortform, scope, getPrettyFunctionOverload));\n                    }\n\n                    if (this.construct) {\n                        allMemberNames.addAll(this.construct.toStrings(\"new\", shortform, scope));\n                    }\n\n                    if (this.index) {\n                        allMemberNames.addAll(this.index.toStrings(\"\", shortform, scope));\n                    }\n\n                    if ((curlies) || (!getPrettyFunctionOverload && (signatureCount > 1) && topLevel)) {\n                        allMemberNames.prefix = \"{ \";\n                        allMemberNames.suffix = \"}\";\n                        allMemberNames.delim = delim;\n                    } else if (allMemberNames.entries.length > 1) {\n                        allMemberNames.delim = delim;\n                    }\n\n                    this.typeFlags &= (~TypeFlags.BuildingName);\n                    if ((signatureCount === 0) && (memCount === 0)) {\n                        return MemberName.create(\"{}\");\n                    }\n                    else {\n                        return allMemberNames;\n                    }\n                }\n                else {\n                    return MemberName.create(\"{}\");\n                }\n            }\n        }\n\n        public checkDecl(checker: TypeChecker) {\n            if (this.isClassInstance() || this.isClass()) {\n                if (this.symbol.declAST) {\n                    checker.typeFlow.inScopeTypeCheckDecl(this.symbol.declAST);\n                }\n            }\n        }\n\n        public getMemberScope(flow: TypeFlow) {\n            if (this === flow.anyType) {\n                return null;\n            }\n            else if (this.isDouble()) {\n                if (flow.numberInterfaceType) {\n                    return flow.numberInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this.isBoolean()) {\n                if (flow.booleanInterfaceType) {\n                    return flow.booleanInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this === flow.stringType) {\n                if (flow.stringInterfaceType) {\n                    return flow.stringInterfaceType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (this.elementType) {\n                if (flow.arrayInterfaceType) {\n                    var arrInstType = this.elementType.getArrayBase(flow.arrayInterfaceType, flow.checker);\n                    return arrInstType.memberScope;\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return this.memberScope;\n            }\n        }\n\n        public isReferenceType() {\n            return this.members || this.extendsList ||\n                this.construct || this.call || this.index ||\n                this.elementType;\n        }\n\n        public specializeType(pattern: Type, replacement: Type, checker: TypeChecker, membersOnly: bool): Type {\n            if (pattern === this) {\n                return replacement;\n            }\n            var result = this;\n            if (membersOnly) {\n                // assume interface type without bases\n                if (this.isReferenceType()) {\n                    result = new Type();\n                    if (this.members) {\n                        result.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n\n                        this.members.publicMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.members.addPublicMember(bSym.name, bSym);\n                        }, null);\n\n                        this.members.privateMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.members.addPrivateMember(bSym.name, bSym);\n                        }, null);\n                    }\n                    if (this.ambientMembers) {\n                        result.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));\n                        this.ambientMembers.publicMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.ambientMembers.addPublicMember(bSym.name, bSym);\n                        }, null);\n\n                        this.ambientMembers.privateMembers.map((key, s, unused) => {\n                            var sym = <Symbol>s;\n                            var bSym = sym.specializeType(pattern, replacement, checker);\n                            result.ambientMembers.addPrivateMember(bSym.name, bSym);\n                        }, null);\n                    }\n                    result.containedScope = checker.scopeOf(result);\n                    result.memberScope = result.containedScope;\n                }\n            }\n            else {\n                if (this.elementType) {\n                    if (this.elementType === pattern) {\n                        result = checker.makeArrayType(replacement);\n                    }\n                    else {\n                        if (this.elementType.elementType === pattern) {\n                            result = checker.makeArrayType(checker.makeArrayType(replacement));\n                        }\n                    }\n                }\n                else if (this.call) {\n                    result = new Type();\n                    result.call = this.call.specializeType(pattern, replacement, checker);\n                }\n            }\n            return result;\n        }\n\n        public hasBase(baseType: Type): bool {\n            if (baseType === this) {\n                return true;\n            }\n            else {\n                if (this.extendsList) {\n                    for (var i = 0, len = this.extendsList.length; i < len; i++) {\n                        if (this.extendsList[i].hasBase(baseType)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        public mergeOrdered(b: Type, checker: TypeChecker, acceptVoid: bool, comparisonInfo?: TypeComparisonInfo): Type {\n            if ((this === checker.anyType) || (b === checker.anyType)) {\n                return checker.anyType;\n            }\n            else if (this === b) {\n                return this;\n            }\n            else if ((b === checker.nullType) && this != checker.nullType) {\n                return this;\n            }\n            else if ((this === checker.nullType) && (b != checker.nullType)) {\n                return b;\n            }\n            else if (acceptVoid && (b === checker.voidType) && this != checker.voidType) {\n                return this;\n            }\n            else if (acceptVoid && (this === checker.voidType) && (b != checker.voidType)) {\n                return b;\n            }\n            else if ((b === checker.undefinedType) && this != checker.undefinedType) {\n                return this;\n            }\n            else if ((this === checker.undefinedType) && (b != checker.undefinedType)) {\n                return b;\n            }\n            else if (this.elementType && b.elementType) {\n                if (this.elementType === b.elementType) {\n                    return this;\n                }\n                else {\n                    var mergedET = this.elementType.mergeOrdered(b.elementType, checker, acceptVoid, comparisonInfo);\n                    if (mergedET === null) {\n                        return checker.makeArrayType(checker.anyType);\n                    }\n                    else {\n                        return checker.makeArrayType(mergedET);\n                    }\n                }\n            }\n            else if (checker.sourceIsSubtypeOfTarget(this, b, comparisonInfo)) {\n                return b;\n            }\n            else if (checker.sourceIsSubtypeOfTarget(b, this, comparisonInfo)) {\n                return this;\n            }\n            else {\n                return null;\n            }\n        }\n\n        public isModuleType() { return false; }\n        public hasMembers() { return this.members != null; }\n        public getAllEnclosedTypes(): ScopedMembers { return null; }\n        public getAllAmbientEnclosedTypes(): ScopedMembers { return null; }\n        public getPublicEnclosedTypes(): ScopedMembers { return null; }\n        public getpublicAmbientEnclosedTypes(): ScopedMembers { return null; }\n\n        public getDocComments(): Comment[]{\n            if (this.elementType || !this.symbol) {\n                return [];\n            }\n\n            if (this.isClassInstance() || this.isClass()) {\n                if (this.symbol.declAST.nodeType === NodeType.FuncDecl) {\n                    // Its a constructor - use the class declaration instead\n                    return (<FuncDecl>this.symbol.declAST).classDecl.getDocComments();\n                } else {\n                    // Its a class without constructor\n                    return this.symbol.getDocComments();\n                }\n            }\n\n            if (this.symbol.name && this.symbol.name != \"_anonymous\" &&\n                (((this.call === null) && (this.construct === null) && (this.index === null))\n                  || this.members)) {\n                return this.symbol.getDocComments();\n            }\n\n            return [];\n        }\n    }\n\n    export interface ITypeCollection {\n        // returns null when types are exhausted\n        getLength(): number;\n        setTypeAtIndex(index: number, type: Type): void;\n        getTypeAtIndex(index: number): Type;\n    }\n\n    export class ModuleType extends Type {\n\n        constructor (public enclosedTypes: ScopedMembers, public ambientEnclosedTypes: ScopedMembers) {\n            super();\n        }\n\n        public isModuleType() { return true; }\n        public hasMembers() { return this.members != null || this.enclosedTypes != null; }\n        public getAllEnclosedTypes() { return this.enclosedTypes; }\n        public getAllAmbientEnclosedTypes() { return this.ambientEnclosedTypes; }\n        public getPublicEnclosedTypes(): ScopedMembers { return null; }\n        public getpublicAmbientEnclosedTypes(): ScopedMembers { return null; }\n        public importedModules: ImportDeclaration[] = [];\n\n        // Finds the dynamic module name of moduleType in the members\n        // ignoreSymbols define list of symbols already visited - to avoid recursion\n        static findDynamicModuleNameInHashTable(moduleType: Type, members: IHashTable) {\n            var moduleName: { name: string; symbol: Symbol; } = null;\n            members.map((key, s, c) => {\n                if (moduleName === null && !isQuoted(key)) {\n                    var symbol = <Symbol>s;\n                    var type = symbol.getType();\n                    if (type === moduleType) {\n                        // If this is the module type we were looking for\n                        moduleName = { name: key, symbol: symbol };\n                    }\n                }\n            }, null);\n\n            return moduleName;\n        }\n\n        // Finds the Dynamic module name of the moduleType in this moduleType\n        // onlyPublic tells if we are looking for module name in public members only\n        public findDynamicModuleName(moduleType: Type): { name: string; symbol: Symbol; } {\n            var moduleName: { name: string; symbol: Symbol; } = null;\n            // Not cached, so seach and add to the cache\n            moduleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.members.allMembers);\n            if (moduleName === null) {\n                moduleName = ModuleType.findDynamicModuleNameInHashTable(moduleType, this.ambientMembers.allMembers);\n            }\n            return moduleName;\n        }\n    }\n\n    export class TypeLink {\n        public type: Type = null;\n        public ast: AST = null;\n    }\n\n    export function getTypeLink(ast: AST, checker: TypeChecker, autoVar: bool): TypeLink {\n        var result = new TypeLink();\n\n        result.ast = ast;\n\n        if ((ast === null) && (autoVar)) {\n            result.type = checker.anyType;\n        }\n        else {\n            result.type = null;\n        }\n\n        return result;\n    }\n\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    // We need to catch both left and right quotes\n    // (depending on your editor\'s font, this may not be clear...)    \n    export function stripQuotes(str: string) {\n        return str.replace(\"\\\"\", \"\").replace(\"\'\", \"\").replace(\"\'\", \"\").replace(\"\\\"\", \"\")\n    }\n\n    export function isSingleQuoted(str: string) {\n        return str.indexOf(\"\'\") != -1;\n    }\n\n    export function isQuoted(str: string) {\n        return str.indexOf(\"\\\"\") != -1 || isSingleQuoted(str);\n    }\n\n    export function quoteStr(str: string) {\n        return \"\\\"\" + str + \"\\\"\";\n    }\n\n    export function swapQuotes(str: string) {\n\n        if (str.indexOf(\"\\\"\") != -1) {\n            str = str.replace(\"\\\"\", \"\'\");\n            str = str.replace(\"\\\"\", \"\'\");\n        }\n        else {\n            str = str.replace(\"\'\", \"\\\"\");\n            str = str.replace(\"\'\", \"\\\"\");\n        }\n\n        return str;\n    }\n\n    export function changeToSingleQuote(str: string) {\n        if (str.indexOf(\"\\\"\") != -1) {\n            str = str.replace(\"\\\"\", \"\'\");\n            str = str.replace(\"\\\"\", \"\'\");\n        }\n        return str;\n    }\n\n    export function switchToForwardSlashes(path: string) {\n        return path.replace(/\\\\/g, \"/\");\n    }\n\n    export function trimModName(modName: string) {\n        // in case\'s it\'s a declare file...\n        if (modName.length > 5 && modName.substring(modName.length - 5, modName.length) == \".d.ts\") {\n            return modName.substring(0, modName.length - 5);\n        }\n        if (modName.length > 3 && modName.substring(modName.length - 3, modName.length) == \".ts\") {\n            return modName.substring(0, modName.length - 3);\n        }\n        // in case\'s it\'s a .js file\n        if (modName.length > 3 && modName.substring(modName.length - 3, modName.length) == \".js\") {\n            return modName.substring(0, modName.length - 3);\n        }\n\n        return modName;\n    }\n\n    export function getDeclareFilePath(fname: string) {\n        return isTSFile(fname) ? changePathToDTS(fname) : changePathToDTS(fname);\n    }\n\n    function isFileOfExtension(fname: string, ext: string) {\n        var invariantFname = fname.toLocaleUpperCase();\n        var invariantExt = ext.toLocaleUpperCase();\n        var extLength = invariantExt.length;\n        return invariantFname.length > extLength && invariantFname.substring(invariantFname.length - extLength, invariantFname.length) == invariantExt;\n    }\n\n    export function isJSFile(fname: string) {\n        return isFileOfExtension(fname, \".js\");\n    }\n\n    export function isTSFile(fname: string) {\n        return isFileOfExtension(fname, \".ts\");\n    }\n\n    export function isDTSFile(fname: string) {\n        return isFileOfExtension(fname, \".d.ts\");\n    }\n\n    export function getPrettyName(modPath: string, quote=true, treatAsFileName=false) { \n        var modName = treatAsFileName ? switchToForwardSlashes(modPath) : trimModName(stripQuotes(modPath));\n        var components = this.getPathComponents(modName);\n        return components.length ? (quote ? quoteStr(components[components.length - 1]) : components[components.length - 1]) : modPath;\n    }\n\n    export function getPathComponents(path: string) {\n        return path.split(\"/\");\n    }\n\n    export function getRelativePathToFixedPath(fixedModFilePath: string, absoluteModPath: string) {\n        absoluteModPath = switchToForwardSlashes(absoluteModPath);\n\n        var modComponents = this.getPathComponents(absoluteModPath);\n        var fixedModComponents = this.getPathComponents(fixedModFilePath);\n\n        // Find the component that differs\n        var joinStartIndex = 0;\n        for (; joinStartIndex < modComponents.length && joinStartIndex < fixedModComponents.length ; joinStartIndex++) {\n            if (fixedModComponents[joinStartIndex] != modComponents[joinStartIndex]) {\n                break;\n            }\n        }\n\n        // Get the relative path\n        if (joinStartIndex != 0) {\n            var relativePath = \"\";\n            var relativePathComponents = modComponents.slice(joinStartIndex, modComponents.length);\n            for (; joinStartIndex < fixedModComponents.length; joinStartIndex++) {\n                if (fixedModComponents[joinStartIndex] != \"\") {\n                    relativePath = relativePath + \"../\";\n                }\n            }\n\n            return relativePath + relativePathComponents.join(\"/\");\n        }\n\n        return absoluteModPath;\n    }\n\n    export function quoteBaseName(modPath: string) {\n        var modName = trimModName(stripQuotes(modPath));\n        var path = getRootFilePath(modName);\n        if (path == \"\") {\n            return modPath;\n        }\n        else {\n            var components = modName.split(path);\n            var fileIndex = components.length > 1 ? 1 : 0;\n            return quoteStr(components[fileIndex]);\n        }\n    }\n\n    export function changePathToTS(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + \".ts\";\n    }\n\n    export function changePathToDTS(modPath: string) {\n        return trimModName(stripQuotes(modPath)) + \".d.ts\";\n    }\n\n    export function isRelative(path: string) {\n        return path.charAt(0) == \".\";\n    }\n    export function isRooted(path: string) {\n        return path.charAt(0) == \"\\\\\" || path.charAt(0) == \"/\" || (path.indexOf(\":\\\\\") != -1) || (path.indexOf(\":/\") != -1);\n    }\n\n    export function getRootFilePath(outFname: string) {\n        if (outFname == \"\") {\n            return outFname;\n        }\n        else {\n            var isPath = outFname.indexOf(\"/\") != -1;\n            return isPath ? filePath(outFname) : \"\";\n        }\n    }\n\n    export function filePathComponents(fullPath: string) {\n        fullPath = switchToForwardSlashes(fullPath);\n        var components = getPathComponents(fullPath);\n        return components.slice(0, components.length - 1);\n    }\n\n    export function filePath(fullPath: string) {\n        var path = filePathComponents(fullPath);\n        return path.join(\"/\") + \"/\";\n    }\n\n    export function normalizeURL(url: string): string {\n        var hostDomainAndPortRegex = /^(https?:\\/\\/[\\-\\w\\.]+(:\\d+)?\\/)(.*)$/i;\n        var matches = hostDomainAndPortRegex.exec(url);\n        if (matches) {\n            var hostDomainAndPort = matches[1];\n            var actualPath = matches[3];\n            return hostDomainAndPort + normalizePath(actualPath);\n        }\n        return normalizePath(url);\n    }\n\n    export var pathNormalizeRegExp = /\\//g;\n\n    export function normalizePath(path: string): string {\n        path = switchToForwardSlashes(path);\n        var startedWithSep = path.charAt(0) === \"/\";\n        var parts = this.getPathComponents(path);\n        for (var i = 0; i < parts.length; i++) {\n            if (parts[i] === \".\" || parts[i] === \"\") {\n                parts.splice(i, 1);\n                i--;\n            }\n            if (i > 0 && parts[i] === \"..\" && parts[i - 1] !== \"..\") {\n                parts.splice(i - 1, 2);\n                i -= 2;\n            }\n        }\n        return (startedWithSep ? \"/\" : \"\") + parts.join(\"/\");\n    }\n\n    export function normalizeImportPath(path: string): string {\n        return normalizePath(path);\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n\n    export interface IResolvedFile {\n        content: string;\n        path: string;\n    }\n\n    /// This class acts as a convenience class to store path and content information in places\n    /// where we need an ISourceText object\n    export class SourceUnit implements IScriptSnapshot, IResolvedFile {\n        public referencedFiles: IFileReference[] = null;\n        private lineStarts: number[] = null;\n\n        constructor(public path: string,\n                    public content: string) {\n        }\n\n        public getText(start: number, end: number): string {\n            return this.content.substring(start, end);\n        }\n\n        public getLength(): number {\n            return this.content.length;\n        }\n\n        public getLineStartPositions(): number[]{\n            if (this.lineStarts === null) {\n                this.lineStarts = LineMap.fromString(this.content).lineStarts();\n            }\n\n            return this.lineStarts;\n        }\n\n        public getTextChangeRangeSinceVersion(scriptVersion: number): TypeScript.TextChangeRange {\n            throw Errors.notYetImplemented();\n        }\n    }\n\n    // Note: This is being using by the host (VS) and is marshaled back and forth. When changing this make sure the changes \n    // are reflected in the managed side as well.\n    export interface IFileReference extends ILineAndCharacter {\n        path: string;\n        isResident: bool;\n        position: number;\n        length: number;\n    }\n\n    /// Limited API for file system manipulation\n    export interface IFileSystemObject {\n        resolvePath(path: string): string;\n        readFile(path: string): string;\n        findFile(rootPath: string, partialFilePath: string): IResolvedFile;\n        dirName(path: string): string;\n    }\n\n    export class CompilationEnvironment {\n        constructor (public compilationSettings: CompilationSettings, public ioHost: IFileSystemObject) { }\n        public code: SourceUnit[] = [];\n        public inputFileNameToOutputFileName = new StringHashTable();\n    }\n\n    export interface IResolutionDispatcher {\n        postResolutionError(errorFile: string, fileReference: IFileReference, errorMessage: string): void;\n        postResolution(path: string, source: IScriptSnapshot): void;\n    }\n\n    export interface ICodeResolver {\n        resolveCode(referencePath: string, rootPath: string, performSearch:bool, state: IResolutionDispatcher): void;\n    }\n\n    export interface IResolverHost {\n        resolveCompilationEnvironment(preEnvironment: CompilationEnvironment, resolver: ICodeResolver, traceDependencies: bool): CompilationEnvironment;\n    }\n\n    export class CodeResolver implements TypeScript.ICodeResolver {\n        public visited: any = { };\n\n        constructor (public environment: CompilationEnvironment) { }\n\n        public resolveCode(referencePath: string, parentPath: string, performSearch: bool, resolutionDispatcher: TypeScript.IResolutionDispatcher): bool {\n            \n            var resolvedFile: IResolvedFile = { content: null, path: referencePath };\n            \n            var ioHost = this.environment.ioHost;\n            \n            // If the path is relative, normalize it, based on the root\n            var isRelativePath = TypeScript.isRelative(referencePath);\n            var isRootedPath = isRelativePath ? false : isRooted(referencePath);\n            var normalizedPath: string = \n                isRelativePath ? ioHost.resolvePath(parentPath + \"/\" + referencePath) : \n                // we only follow the second clause if the path is a non-rooted triple-slash reference path\n                (isRootedPath || !parentPath || performSearch ? referencePath : parentPath + \"/\" + referencePath);\n\n            // We use +=.ts to make sure we don\'t accidentally pick up \".js\" files or the like\n            if (!isTSFile(normalizedPath)) {\n                normalizedPath += \".ts\";  //changePathToSTR(normalizedPath);\n            }\n\n            normalizedPath = switchToForwardSlashes(stripQuotes(normalizedPath));\n            var absoluteModuleID = this.environment.compilationSettings.useCaseSensitiveFileResolution ? normalizedPath : normalizedPath.toLocaleUpperCase();\n\n            // read the file contents - if it doesn\'t exist, trigger a resolution error\n            if (!this.visited[absoluteModuleID]) {\n                // if the path is relative, or came from a reference tag, we don\'t perform a search\n                if (isRelativePath || isRootedPath || !performSearch) {\n                    try {\n                        CompilerDiagnostics.debugPrint(\"   Reading code from \" + normalizedPath);\n                            \n                        // Look for the .ts file first - if not present, the .d.ts\n                        try {\n                            resolvedFile.content = ioHost.readFile(normalizedPath);\n                        }\n                        catch (err1) {\n                            if (isTSFile(normalizedPath)) {\n                                normalizedPath = changePathToDTS(normalizedPath);\n                                CompilerDiagnostics.debugPrint(\"   Reading code from \" + normalizedPath);\n                                resolvedFile.content = ioHost.readFile(normalizedPath);\n                            }\n                        }\n                        CompilerDiagnostics.debugPrint(\"   Found code at \" + normalizedPath);\n\n                        resolvedFile.path = normalizedPath;\n                        this.visited[absoluteModuleID] = true;\n                    }\n                    catch (err4) {\n                        CompilerDiagnostics.debugPrint(\"   Did not find code for \" + referencePath);\n                        // Resolution failed\n                        return false;\n                    }\n                }\n                else {\n\n                    // if the path is non-relative, we should attempt to search on the relative path\n                    resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n\n                    if (!resolvedFile) {\n                        if (isTSFile(normalizedPath)) {\n                            normalizedPath = changePathToDTS(normalizedPath);\n                            resolvedFile = ioHost.findFile(parentPath, normalizedPath);\n                        }\n                    }\n\n                    if (resolvedFile) {\n                        resolvedFile.path = switchToForwardSlashes(TypeScript.stripQuotes(resolvedFile.path));\n                        CompilerDiagnostics.debugPrint(referencePath + \" resolved to: \" + resolvedFile.path);\n                        resolvedFile.content = resolvedFile.content;\n                        this.visited[absoluteModuleID] = true;\n                    }\n                    else {\n                        CompilerDiagnostics.debugPrint(\"Could not find \" + referencePath);\n                    }\n                }\n\n                if (resolvedFile && resolvedFile.content != null) {\n                    // preprocess the file, to gather dependencies\n                    var rootDir = ioHost.dirName(resolvedFile.path);\n                    var sourceUnit = new SourceUnit(resolvedFile.path, resolvedFile.content);\n                    var preProcessedFileInfo = preProcessFile(resolvedFile.path, sourceUnit, this.environment.compilationSettings);\n                    var resolvedFilePath = ioHost.resolvePath(resolvedFile.path);\n                    var i = 0;\n                    var resolutionResult: bool;\n\n                    sourceUnit.referencedFiles = preProcessedFileInfo.referencedFiles;\n\n                    // resolve explicit references\n                    for (i = 0; i < preProcessedFileInfo.referencedFiles.length; i++) {\n                        var fileReference = preProcessedFileInfo.referencedFiles[i];\n\n                        normalizedPath = isRooted(fileReference.path) ? fileReference.path : rootDir + \"/\" + fileReference.path;\n                        normalizedPath = ioHost.resolvePath(normalizedPath);\n\n                        if (resolvedFilePath == normalizedPath) {\n                            resolutionDispatcher.postResolutionError(normalizedPath, fileReference, \"Incorrect reference: File contains reference to itself.\");\n                            continue;\n                        }\n\n                        resolutionResult = this.resolveCode(fileReference.path, rootDir, false, resolutionDispatcher);\n\n                        if (!resolutionResult) {\n                            resolutionDispatcher.postResolutionError(resolvedFilePath, fileReference, \"Incorrect reference: referenced file: \\\"\" + fileReference.path + \"\\\" cannot be resolved.\");\n                        }\n                    }\n                    \n                    // resolve imports\n                    for (i = 0; i < preProcessedFileInfo.importedFiles.length; i++) {\n                        var fileImport = preProcessedFileInfo.importedFiles[i];\n\n                        resolutionResult = this.resolveCode(fileImport.path, rootDir, true, resolutionDispatcher);\n\n                        if (!resolutionResult) {\n                            resolutionDispatcher.postResolutionError(resolvedFilePath, fileImport, \"Incorrect reference: imported file: \\\"\" + fileImport.path + \"\\\" cannot be resolved.\");\n                        }\n                    }\n\n                    // add the file to the appropriate code list\n                    resolutionDispatcher.postResolution(sourceUnit.path, sourceUnit);\n                }\n            }\n            return true;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\ndeclare var require: any;\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class ArrayUtilities {\n        public static isArray(value: any): bool {\n            return Object.prototype.toString.apply(value, []) === \'[object Array]\';\n        }\n\n        public static sequenceEquals(array1: any[], array2: any[], equals: (v1, v2) => bool) {\n            if (array1 === array2) {\n                return true;\n            }\n\n            if (array1 === null || array2 === null) {\n                return false;\n            }\n\n            if (array1.length !== array2.length) {\n                return false;\n            }\n\n            for (var i = 0, n = array1.length; i < n; i++) {\n                if (!equals(array1[i], array2[i])) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public static contains(array: any[], value: any): bool {\n            for (var i = 0; i < array.length; i++) {\n                if (array[i] === value) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public static groupBy(array: any[], func: (v: any) => string): any {\n            var result = {};\n\n            for (var i = 0, n = array.length; i < n; i++) {\n                var v = array[i];\n                var k = func(v);\n\n                var list = result[k] || [];\n                list.push(v);\n                result[k] = list;\n            }\n\n            return result;\n        }\n\n        public static min(array: any[], func: (v: any) => number): number {\n            // Debug.assert(array.length > 0);\n            var min = func(array[0]);\n\n            for (var i = 1; i < array.length; i++) {\n                var next = func(array[i]);\n                if (next < min) {\n                    min = next;\n                }\n            }\n\n            return min;\n        }\n\n        public static max(array: any[], func: (v: any) => number): number {\n            // Debug.assert(array.length > 0);\n            var max = func(array[0]);\n\n            for (var i = 1; i < array.length; i++) {\n                var next = func(array[i]);\n                if (next > max) {\n                    max = next;\n                }\n            }\n\n            return max;\n        }\n\n        public static last(array: any[]) {\n            if (array.length === 0) {\n                throw Errors.argumentOutOfRange(\'array\');\n            }\n\n            return array[array.length - 1];\n        }\n\n        public static firstOrDefault(array: any[], func: (v: any) => bool): any {\n            for (var i = 0, n = array.length; i < n; i++) {\n                var value = array[i];\n                if (func(value)) {\n                    return value;\n                }\n            }\n\n            return null;\n        }\n\n        public static sum(array: any[], func: (v: any) => number): number {\n            var result = 0;\n\n            for (var i = 0, n = array.length; i < n; i++) {\n                result += func(array[i]);\n            }\n\n            return result;\n        }\n\n        public static whereNotNull(array: any[]): any[] {\n            var result = [];\n            for (var i = 0; i < array.length; i++) {\n                var value = array[i];\n                if (value !== null) {\n                    result.push(value);\n                }\n            }\n\n            return result;\n        }\n\n        public static select(values: any[], func: (v: any) => any): any[] {\n            var result = [];\n\n            for (var i = 0; i < values.length; i++) {\n                result.push(func(values[i]));\n            }\n\n            return result;\n        }\n\n        public static where(values: any[], func: (v: any) => bool): any[] {\n            var result = [];\n\n            for (var i = 0; i < values.length; i++) {\n                if (func(values[i])) {\n                    result.push(values[i]);\n                }\n            }\n\n            return result;\n        }\n\n        public static any(array: any[], func: (v: any) => bool): bool {\n            for (var i = 0, n = array.length; i < n; i++) {\n                if (func(array[i])) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public static all(array: any[], func: (v: any) => bool): bool {\n            for (var i = 0, n = array.length; i < n; i++) {\n                if (!func(array[i])) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public static binarySearch(array: number[], value: number): number {\n            var low = 0;\n            var high = array.length - 1;\n\n            while (low <= high) {\n                var middle = low + ((high - low) >> 1);\n                var midValue = array[middle];\n\n                if (midValue === value) {\n                    return middle;\n                }\n                else if (midValue > value) {\n                    high = middle - 1;\n                }\n                else {\n                    low = middle + 1;\n                }\n            }\n\n            return ~low;\n        }\n\n        public static createArray(length: number, defaultvalue: any): any[] {\n            var result = [];\n            for (var i = 0; i < length; i++) {\n                result.push(defaultvalue);\n            }\n\n            return result;\n        }\n\n        public static grow(array: any[], length: number, defaultValue: any): void {\n            var count = length - array.length;\n            for (var i = 0; i < count; i++) {\n                array.push(defaultValue);\n            }\n        }\n\n        public static copy(sourceArray: any[], sourceIndex: number, destinationArray: any[], destinationIndex: number, length: number): void {\n            for (var i = 0; i < length; i++) {\n                destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\n            }\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export enum Constants {\n        // 2^30-1\n        Max31BitInteger = 1073741823,\n        Min31BitInteger = -1073741824,\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class Contract {\n        public static requires(expression: bool): void {\n            if (!expression) {\n                throw new Error(\"Contract violated. False expression.\");\n            }\n        }\n\n        public static throwIfFalse(expression: bool): void {\n            if (!expression) {\n                throw new Error(\"Contract violated. False expression.\");\n            }\n        }\n\n        public static throwIfNull(value: any): void {\n            if (value === null) {\n                throw new Error(\"Contract violated. Null value.\");\n            }\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class Debug {\n        public static assert(expression: bool, message?: string): void {\n            if (!expression) {\n                throw new Error(\"Debug Failure. False expression.\" + (message ? message : \"\"));\n            }\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export enum DiagnosticCategory {\n        Warning,\n        Error,\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export enum DiagnosticCode {\n        error_TS_0__1,\n        warning_TS_0__1,\n\n        // Syntactic diagnostics.\n        Unrecognized_escape_sequence,\n        Unexpected_character_0,\n        Missing_closing_quote_character,\n        Identifier_expected,\n        _0_keyword_expected,\n        _0_expected,\n        Identifier_expected__0_is_a_keyword,\n        Automatic_semicolon_insertion_not_allowed,\n        Unexpected_token__0_expected,\n        Trailing_separator_not_allowed,\n        _StarSlash__expected,\n        _public_or_private_modifier_must_precede__static_,\n        Unexpected_token_,\n        A_catch_clause_variable_cannot_have_a_type_annotation,\n        Rest_parameter_must_be_last_in_list,\n        Parameter_cannot_have_question_mark_and_initializer,\n        Required_parameter_cannot_follow_optional_parameter,\n        Index_signatures_cannot_have_rest_parameters,\n        Index_signature_parameter_cannot_have_accessibility_modifierss,\n        Index_signature_parameter_cannot_have_a_question_mark,\n        Index_signature_parameter_cannot_have_an_initializer,\n        Index_signature_must_have_a_type_annotation,\n        Index_signature_parameter_must_have_a_type_annotation,\n        Index_signature_parameter_type_must_be__string__or__number_,\n        _extends__clause_already_seen,\n        _extends__clause_must_precede__implements__clause,\n        Class_can_only_extend_single_type,\n        _implements__clause_already_seen,\n        Accessibility_modifier_already_seen,\n        _0__modifier_must_precede__1__modifier,\n        _0__modifier_already_seen,\n        _0__modifier_cannot_appear_on_a_class_element,\n        Interface_declaration_cannot_have__implements__clause,\n        Enum_element_must_have_initializer,\n        _super__invocation_cannot_have_type_arguments,\n        Non_ambient_modules_cannot_use_quoted_names,\n        Statements_are_not_allowed_in_ambient_contexts,\n        Implementations_are_not_allowed_in_ambient_contexts,\n        _declare__modifier_not_allowed_for_code_already_in_an_ambient_context,\n        Initializers_are_not_allowed_in_ambient_contexts,\n        Overload_and_ambient_signatures_cannot_specify_parameter_properties,\n        Function_implementation_expected,\n        Constructor_implementation_expected,\n        Function_overload_name_must_be__0_,\n        _0__modifier_cannot_appear_on_a_module_element,\n        _declare__modifier_cannot_appear_on_an_interface_declaration,\n        _declare__modifier_required_for_top_level_element,\n\n\n\n\n        // Semantic diagnostics.\n        Duplicate_identifier__0_,\n        The_name__0__does_not_exist_in_the_current_scope,\n        The_name__0__does_not_refer_to_a_value,\n        Keyword__super__can_only_be_used_inside_a_class_instance_method,\n        The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer,\n        Value_of_type__0__is_not_callable__Did_you_mean_to_include__new__,\n        Value_of_type__0__is_not_callable,\n        Value_of_type__0__is_not_newable,\n        Value_of_type__0__is_not_indexable_by_type__1_,\n        Operator__0__cannot_be_applied_to_types__1__and__2_,\n        Operator__0__cannot_be_applied_to_types__1__and__2__3,\n        Cannot_convert__0__to__1_,\n        Cannot_convert__0__to__1___2,\n        Expected_var__class__interface__or_module,\n        Operator__0__cannot_be_applied_to_type__1_,\n        Getter__0__already_declared,\n        Setter__0__already_declared,\n        Accessor_may_not_take_type_parameters,\n\n        // Privacy error messages\n        Exported_class__0__extends_private_class__1_,\n        Exported_class__0__implements_private_interface__1_,\n        Exported_interface__0__extends_private_interface__1_,\n        Exported_class__0__extends_class_from_private_module__1_,\n        Exported_class__0__implements_interface_from_private_module__1_,\n        Exported_interface__0__extends_interface_from_private_module__1_,\n        Public_static_property__0__of__exported_class_has_or_is_using_private_type__1_,\n        Public_property__0__of__exported_class_has_or_is_using_private_type__1_,\n        Property__0__of__exported_interface_has_or_is_using_private_type__1_,\n        Exported_variable__0__has_or_is_using_private_type__1_,\n        Public_static_property__0__of__exported_class_is_using_inaccessible_module__1_,\n        Public_property__0__of__exported_class_is_using_inaccessible_module__1_,\n        Property__0__of__exported_interface_is_using_inaccessible_module__1_,\n        Exported_variable__0__is_using_inaccessible_module__1_,\n        Parameter__0__of_constructor_from_exported_class_has_or_is_using_private_type__1_,\n        Parameter__0__of_public_static_property_setter_from_exported_class_has_or_is_using_private_type__1_,\n        Parameter__0__of_public_property_setter_from_exported_class_has_or_is_using_private_type__1_,\n        Parameter__0__of_constructor_signature_from_exported_interface_has_or_is_using_private_type__1_,\n        Parameter__0__of_call_signature_from_exported_interface_has_or_is_using_private_type__1_,\n        Parameter__0__of_public_static_method_from_exported_class_has_or_is_using_private_type__1_,\n        Parameter__0__of_public_method_from_exported_class_has_or_is_using_private_type__1_,\n        Parameter__0__of_method_from_exported_interface_has_or_is_using_private_type__1_,\n        Parameter__0__of_exported_function_has_or_is_using_private_type__1_,\n        Parameter__0__of_constructor_from_exported_class_is_using_inaccessible_module__1_,\n        Parameter__0__of_public_static_property_setter_from_exported_class_is_using_inaccessible_module__1_,\n        Parameter__0__of_public_property_setter_from_exported_class_is_using_inaccessible_module__1_,\n        Parameter__0__of_constructor_signature_from_exported_interface_is_using_inaccessible_module__1_,\n        Parameter__0__of_call_signature_from_exported_interface_is_using_inaccessible_module__1_,\n        Parameter__0__of_public_static_method_from_exported_class_is_using_inaccessible_module__1_,\n        Parameter__0__of_public_method_from_exported_class_is_using_inaccessible_module__1_,\n        Parameter__0__of_method_from_exported_interface_is_using_inaccessible_module__1_,\n        Parameter__0__of_exported_function_is_using_inaccessible_module__1_,\n        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type__0_,\n        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type__0_,\n        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type__0_,\n        Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type__0_,\n        Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type__0_,\n        Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type__0_,\n        Return_type_of_public_method_from_exported_class_has_or_is_using_private_type__0_,\n        Return_type_of_method_from_exported_interface_has_or_is_using_private_type__0_,\n        Return_type_of_exported_function_has_or_is_using_private_type__0_,\n        Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module__0_,\n        Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module__0_,\n        Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module__0_,\n        Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module__0_,\n        Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module__0_,\n        Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module__0_,\n        Return_type_of_public_method_from_exported_class_is_using_inaccessible_module__0_,\n        Return_type_of_method_from_exported_interface_is_using_inaccessible_module__0_,\n        Return_type_of_exported_function_is_using_inaccessible_module__0_,\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface DiagnosticInfo {\n        category: DiagnosticCategory;\n        message: string;\n        code: number;\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export var diagnosticMessages: IDiagnosticMessages = {\n        error_TS_0__1: {\n            category: DiagnosticCategory.Error,\n            message: \"error TS{0}: {1}\",\n            code: 0\n        },\n\n        warning_TS_0__1: {\n            category: DiagnosticCategory.Warning,\n            message: \"warning TS{0}: {1}\",\n            code: 1\n        },\n\n        // Syntactic errors start at 100.\n        Unrecognized_escape_sequence: {\n            category: DiagnosticCategory.Error,\n            message: \"Unrecognized escape sequence.\",\n            code: 1000\n        },\n\n        Unexpected_character_0: {\n            category: DiagnosticCategory.Error,\n            message: \"Unexpected character {0}.\",\n            code: 1001\n        },\n\n        Missing_closing_quote_character: {\n            category: DiagnosticCategory.Error,\n            message: \"Missing close quote character.\",\n            code: 1002\n        },\n\n        Identifier_expected: {\n            category: DiagnosticCategory.Error,\n            message: \"Identifier expected.\",\n            code: 1003\n        },\n\n        _0_keyword_expected: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}\' keyword expected.\",\n            code: 1004\n        },\n\n        _0_expected: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}\' expected.\",\n            code: 1005\n        },\n\n        Identifier_expected__0_is_a_keyword: {\n            category: DiagnosticCategory.Error,\n            message: \"Identifier expected; \'{0}\' is a keyword.\",\n            code: 1006\n        },\n\n        Automatic_semicolon_insertion_not_allowed: {\n            category: DiagnosticCategory.Error,\n            message: \"Automatic semicolon insertion not allowed.\",\n            code: 1007\n        },\n\n        Unexpected_token__0_expected: {\n            category: DiagnosticCategory.Error,\n            message: \"Unexpected token; \'{0}\' expected.\",\n            code: 1008\n        },\n\n        Trailing_separator_not_allowed: {\n            category: DiagnosticCategory.Error,\n            message: \"Trailing separator not allowed.\",\n            code: 1009\n        },\n\n        _StarSlash__expected: {\n            category: DiagnosticCategory.Error,\n            message: \"\'*/\' expected.\",\n            code: 1010\n        },\n\n        _public_or_private_modifier_must_precede__static_: {\n            category: DiagnosticCategory.Error,\n            message: \"\'public\' or \'private\' modifier must precede \'static\'.\",\n            code: 1011\n        },\n\n        Unexpected_token_: {\n            category: DiagnosticCategory.Error,\n            message: \"Unexpected token.\",\n            code: 1012\n        },\n\n        A_catch_clause_variable_cannot_have_a_type_annotation: {\n            category: DiagnosticCategory.Error,\n            message: \"A catch clause variable cannot have a type annotation.\",\n            code: 1013\n        },\n\n        Rest_parameter_must_be_last_in_list: {\n            category: DiagnosticCategory.Error,\n            message: \"Rest parameter must be last in list.\",\n            code: 1014\n        },\n\n        Parameter_cannot_have_question_mark_and_initializer: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter cannot have question mark and initializer.\",\n            code: 1015\n        },\n\n        Required_parameter_cannot_follow_optional_parameter: {\n            category: DiagnosticCategory.Error,\n            message: \"required parameter cannot follow optional parameter.\",\n            code: 1016\n        },\n\n        Index_signatures_cannot_have_rest_parameters: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signatures cannot have rest parameters.\",\n            code: 1017\n        },\n\n        Index_signature_parameter_cannot_have_accessibility_modifiers: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signature parameter cannot have accessibility modifiers.\",\n            code: 1018\n        },\n\n        Index_signature_parameter_cannot_have_a_question_mark: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signature parameter cannot have a question mark.\",\n            code: 1019\n        },\n\n        Index_signature_parameter_cannot_have_an_initializer: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signature parameter cannot have an initializer.\",\n            code: 1020\n        },\n\n        Index_signature_must_have_a_type_annotation: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signature must have a type annotation.\",\n            code: 1021\n        },\n\n        Index_signature_parameter_must_have_a_type_annotation: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signature parameter must have a type annotation.\",\n            code: 1022\n        },\n\n        Index_signature_parameter_type_must_be__string__or__number_: {\n            category: DiagnosticCategory.Error,\n            message: \"Index signature parameter type must be \'string\' or \'number\'.\",\n            code: 1023\n        },\n\n        _extends__clause_already_seen: {\n            category: DiagnosticCategory.Error,\n            message: \"\'extends\' clause already seen.\",\n            code: 1024\n        },\n\n        _extends__clause_must_precede__implements__clause: {\n            category: DiagnosticCategory.Error,\n            message: \"\'extends\' clause must precede \'implements\' clause.\",\n            code: 1025\n        },\n\n        Class_can_only_extend_single_type: {\n            category: DiagnosticCategory.Error,\n            message: \"Class can only extend single type.\",\n            code: 1026\n        },\n\n        _implements__clause_already_seen: {\n            category: DiagnosticCategory.Error,\n            message: \"\'implements\' clause already seen.\",\n            code: 1027\n        },\n\n        Accessibility_modifier_already_seen: {\n            category: DiagnosticCategory.Error,\n            message: \"Accessibility modifier already seen.\",\n            code: 1028\n        },\n\n        _0__modifier_must_precede__1__modifier: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}\' modifier must precede \'{1}\' modifier.\",\n            code: 1029\n        },\n\n        _0__modifier_already_seen: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}\' modifier already seen.\",\n            code: 1030\n        },\n\n        _0__modifier_cannot_appear_on_a_class_element: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}\' modifier cannot appear on a class element.\",\n            code: 1031\n        },\n\n        Interface_declaration_cannot_have__implements__clause: {\n            category: DiagnosticCategory.Error,\n            message: \"Interface declaration cannot have \'implements\' clause.\",\n            code: 1032\n        },\n\n        Enum_element_must_have_initializer: {\n            category: DiagnosticCategory.Error,\n            message: \"Enum element must have initializer.\",\n            code: 1033\n        },\n\n        _super__invocation_cannot_have_type_arguments: {\n            category: DiagnosticCategory.Error,\n            message: \"\'super\' invocation cannot have type arguments.\",\n            code: 1034\n        },\n\n        Non_ambient_modules_cannot_use_quoted_names: {\n            category: DiagnosticCategory.Error,\n            message: \"Non ambient modules cannot use quoted names.\",\n            code: 1035\n        },\n\n        Statements_are_not_allowed_in_ambient_contexts: {\n            category: DiagnosticCategory.Error,\n            message: \"Statements are not allowed in ambient contexts.\",\n            code: 1036\n        },\n\n        Implementations_are_not_allowed_in_ambient_contexts: {\n            category: DiagnosticCategory.Error,\n            message: \"Implementations are not allowed in ambient contexts.\",\n            code: 1037\n        },\n\n        _declare__modifier_not_allowed_for_code_already_in_an_ambient_context: {\n            category: DiagnosticCategory.Error,\n            message: \"\'declare\' modifier not allowed for code already in an ambient context.\",\n            code: 1038\n        },\n\n        Initializers_are_not_allowed_in_ambient_contexts: {\n            category: DiagnosticCategory.Error,\n            message: \"Initializers are not allowed in ambient contexts.\",\n            code: 1039\n        },\n\n        Overload_and_ambient_signatures_cannot_specify_parameter_properties: {\n            category: DiagnosticCategory.Error,\n            message: \"Overload and ambient signatures cannot specify parameter properties.\",\n            code: 1040\n        },\n\n        Function_implementation_expected: {\n            category: DiagnosticCategory.Error,\n            message: \"Function implementation expected.\",\n            code: 1041\n        },\n\n        Constructor_implementation_expected: {\n            category: DiagnosticCategory.Error,\n            message: \"Constructor implementation expected.\",\n            code: 1042\n        },\n\n        Function_overload_name_must_be__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Function overload name must be \'{0}\'.\",\n            code: 1043\n        },\n\n        _0__modifier_cannot_appear_on_a_module_element: {\n            category: DiagnosticCategory.Error,\n            message: \"\'{0}\' modifier cannot appear on a module element.\",\n            code: 1044\n        },\n\n        _declare__modifier_cannot_appear_on_an_interface_declaration: {\n            category: DiagnosticCategory.Error,\n            message: \"\'declare\' modifier cannot appear on an interface declaration.\",\n            code: 1045\n        },\n\n        _declare__modifier_required_for_top_level_element: {\n            category: DiagnosticCategory.Error,\n            message: \"\'declare\' modifier required for top level element.\",\n            code: 1046\n        },\n\n\n\n\n\n\n\n\n\n        // Semantic errors start at 200.\n        Duplicate_identifier__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Duplicate identifier \'{0}\'.\",\n            code: 2000\n        },\n\n        The_name__0__does_not_exist_in_the_current_scope: {\n            category: DiagnosticCategory.Error,\n            message: \"The name \'{0}\' does not exist in the current scope.\",\n            code: 2001\n        },\n\n        The_name__0__does_not_refer_to_a_value: {\n            category: DiagnosticCategory.Error,\n            message: \"The name \'{0}\' does not refer to a value.\",\n            code: 2002\n        },\n\n        Keyword__super__can_only_be_used_inside_a_class_instance_method: {\n            category: DiagnosticCategory.Error,\n            message: \"Keyword \'super\' can only be used inside a class instance method.\",\n            code: 2003\n        },\n\n        The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer: {\n            category: DiagnosticCategory.Error,\n            message: \"The left-hand side of an assignment expression must be a variable, property or indexer.\",\n            code: 2004\n        },\n\n        Value_of_type__0__is_not_callable__Did_you_mean_to_include__new__: {\n            category: DiagnosticCategory.Error,\n            message: \"Value of type \'{0}\' is not callable. Did you mean to include \'new\'?\",\n            code: 2005\n        },\n\n        Value_of_type__0__is_not_callable: {\n            category: DiagnosticCategory.Error,\n            message: \"Value of type \'{0}\' is not callable.\",\n            code: 2006\n        },\n\n        Value_of_type__0__is_not_newable: {\n            category: DiagnosticCategory.Error,\n            message: \"Value of type \'{0}\' is not newable.\",\n            code: 2007\n        },\n\n        Value_of_type__0__is_not_indexable_by_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Value of type \'{0}\' is not indexable by type \'{1}\'.\",\n            code: 2008\n        },\n\n        Operator__0__cannot_be_applied_to_types__1__and__2_: {\n            category: DiagnosticCategory.Error,\n            message: \"Operator \'{0}\' cannot be applied to types \'{1}\' and \'{2}\'.\",\n            code: 2009\n        },\n\n        Operator__0__cannot_be_applied_to_types__1__and__2__3: {\n            category: DiagnosticCategory.Error,\n            message: \"Operator \'{0}\' cannot be applied to types \'{1}\' and \'{2}\': {3}\",\n            code: 2010\n        },\n\n        Cannot_convert__0__to__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Cannot convert \'{0}\' to \'{1}\'.\",\n            code: 2011\n        },\n\n        Cannot_convert__0__to__1___2: {\n            category: DiagnosticCategory.Error,\n            message: \"Cannot convert \'{0}\' to \'{1}\': {2}\",\n            code: 2012\n        },\n\n        Expected_var__class__interface__or_module: {\n            category: DiagnosticCategory.Error,\n            message: \"Expected var, class, interface, or module.\",\n            code: 2013\n        },\n\n        Operator__0__cannot_be_applied_to_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Operator \'{0}\' cannot be applied to type \'{1}\'.\",\n            code: 2014\n        },\n\n        Getter__0__already_declared: {\n            category: DiagnosticCategory.Error,\n            message: \"Getter \'{0}\' already declared.\",\n            code: 2015\n        },\n\n        Setter__0__already_declared: {\n            category: DiagnosticCategory.Error,\n            message: \"Setter \'{0}\' already declared.\",\n            code: 2016\n        },\n\n        Accessor_may_not_take_type_parameters: {\n            category: DiagnosticCategory.Error,\n            message: \"Accessors may not take type parameters.\",\n            code: 2017\n        },\n\n        Exported_class__0__extends_private_class__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported class \'{0}\' extends private class \'{1}\'\",\n            code: 2018\n        },\n        Exported_class__0__implements_private_interface__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported class \'{0}\' implements private interface \'{1}\'\",\n            code: 2019\n        },\n        Exported_interface__0__extends_private_interface__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported interface \'{0}\' extends private interface \'{1}\'\",\n            code: 2020\n        },\n        Exported_class__0__extends_class_from_private_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported class \'{0}\' extends class from private module {1}\",\n            code: 2021\n        },\n        Exported_class__0__implements_interface_from_private_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported class \'{0}\' implements interface from private module {1}\",\n            code: 2022\n        },\n        Exported_interface__0__extends_interface_from_private_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported interface \'{0}\' extends interface from private module {1}\",\n            code: 2023\n        },\n        Public_static_property__0__of__exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Public static property \'{0}\' of exported class has or is using private type \'{1}\'\",\n            code: 2024\n        },\n        Public_property__0__of__exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Public property \'{0}\' of exported class has or is using private type \'{1}\'\",\n            code: 2025\n        },\n        Property__0__of__exported_interface_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Property \'{0}\' of exported interface has or is using private type \'{1}\'\",\n            code: 2026\n        },\n        Exported_variable__0__has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported variable \'{0}\' has or is using private type \'{1}\'\",\n            code: 2027\n        },\n        Public_static_property__0__of__exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Public static property \'{0}\' of exported class is using inaccessible module {1}\",\n            code: 2028\n        },\n        Public_property__0__of__exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Public property \'{0}\' of exported class is using inaccessible module {1}\",\n            code: 2029\n        },\n        Property__0__of__exported_interface_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Property \'{0}\' of exported interface is using inaccessible module {1}\",\n            code: 2030\n        },\n        Exported_variable__0__is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Exported variable \'{0}\' is using inaccessible module {1}\",\n            code: 2031\n        },\n        Parameter__0__of_constructor_from_exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of constructor from exported class has or is using private type \'{1}\'\",\n            code: 2032\n        },\n        Parameter__0__of_public_static_property_setter_from_exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public static property setter from exported class has or is using private type \'{1}\'\",\n            code: 2033\n        },\n        Parameter__0__of_public_property_setter_from_exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public property setter from exported class has or is using private type \'{1}\'\",\n            code: 2034\n        },\n        Parameter__0__of_constructor_signature_from_exported_interface_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of constructor signature from exported interface has or is using private type \'{1}\'\",\n            code: 2035\n        },\n        Parameter__0__of_call_signature_from_exported_interface_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of call signature from exported interface has or is using private type \'{1}\'\",\n            code: 2036\n        },\n        Parameter__0__of_public_static_method_from_exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public static method from exported class has or is using private type \'{1}\'\",\n            code: 2037\n        },\n        Parameter__0__of_public_method_from_exported_class_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public method from exported class has or is using private type \'{1}\'\",\n            code: 2038\n        },\n        Parameter__0__of_method_from_exported_interface_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of method from exported interface has or is using private type \'{1}\'\",\n            code: 2039\n        },\n        Parameter__0__of_exported_function_has_or_is_using_private_type__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of exported function has or is using private type \'{1}\'\",\n            code: 2040\n        },\n        Parameter__0__of_constructor_from_exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of constructor from exported class is using inaccessible module {1}\",\n            code: 2041\n        },\n        Parameter__0__of_public_static_property_setter_from_exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public static property setter from exported class is using inaccessible module {1}\",\n            code: 2042\n        },\n        Parameter__0__of_public_property_setter_from_exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public property setter from exported class is using inaccessible module {1}\",\n            code: 2043\n        },\n        Parameter__0__of_constructor_signature_from_exported_interface_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of constructor signature from exported interface is using inaccessible module {1}\",\n            code: 2044\n        },\n        Parameter__0__of_call_signature_from_exported_interface_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of call signature from exported interface is using inaccessible module {1}\",\n            code: 2045\n        },\n        Parameter__0__of_public_static_method_from_exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public static method from exported class is using inaccessible module {1}\",\n            code: 2046\n        },\n        Parameter__0__of_public_method_from_exported_class_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of public method from exported class is using inaccessible module {1}\",\n            code: 2047\n        },\n        Parameter__0__of_method_from_exported_interface_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of method from exported interface is using inaccessible module {1}\",\n            code: 2048\n        },\n        Parameter__0__of_exported_function_is_using_inaccessible_module__1_: {\n            category: DiagnosticCategory.Error,\n            message: \"Parameter \'{0}\' of exported function is using inaccessible module {1}\",\n            code: 2049\n        },\n        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public static property getter from exported class has or is using private type \'{0}\'\",\n            code: 2050\n        },\n        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public property getter from exported class has or is using private type \'{0}\'\",\n            code: 2051\n        },\n        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of constructor signature from exported interface has or is using private type \'{0}\'\",\n            code: 2052\n        },\n        Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of call signature from exported interface has or is using private type \'{0}\'\",\n            code: 2053\n        },\n        Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of index signature from exported interface has or is using private type \'{0}\'\",\n            code: 2054\n        },\n        Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public static method from exported class has or is using private type \'{0}\'\",\n            code: 2055\n        },\n        Return_type_of_public_method_from_exported_class_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public method from exported class has or is using private type \'{0}\'\",\n            code: 2056\n        },\n        Return_type_of_method_from_exported_interface_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of method from exported interface has or is using private type \'{0}\'\",\n            code: 2057\n        },\n        Return_type_of_exported_function_has_or_is_using_private_type__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of exported function has or is using private type \'{0}\'\",\n            code: 2058\n        },\n        Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public static property getter from exported class is using inaccessible module {0}\",\n            code: 2059\n        },\n        Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public property getter from exported class is using inaccessible module {0}\",\n            code: 2060\n        },\n        Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of constructor signature from exported interface is using inaccessible module {0}\",\n            code: 2061\n        },\n        Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of call signature from exported interface is using inaccessible module {0}\",\n            code: 2062\n        },\n        Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of index signature from exported interface is using inaccessible module {0}\",\n            code: 2063\n        },\n        Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public static method from exported class is using inaccessible module {0}\",\n            code: 2064\n        },\n        Return_type_of_public_method_from_exported_class_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of public method from exported class is using inaccessible module {0}\",\n            code: 2065\n        },\n        Return_type_of_method_from_exported_interface_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of method from exported interface is using inaccessible module {0}\",\n            code: 2066\n        },\n        Return_type_of_exported_function_is_using_inaccessible_module__0_: {\n            category: DiagnosticCategory.Error,\n            message: \"Return type of exported function is using inaccessible module {0}\",\n            code: 2067\n        }\n    };\n\n    var seenCodes = [];\n    for (var name in diagnosticMessages) {\n        if (diagnosticMessages.hasOwnProperty(name)) {\n            var diagnosticMessage = <DiagnosticInfo>diagnosticMessages[name];\n            var value = seenCodes[diagnosticMessage.code];\n            if (value) {\n                throw new Error(\"Duplicate diagnostic code: \" + diagnosticMessage.code);\n            }\n\n            seenCodes[diagnosticMessage.code] = diagnosticMessage;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class Errors {\n        public static argument(argument: string, message?: string): Error {\n            return new Error(\"Invalid argument: \" + argument + \".\"  + (message ? (\" \" + message) : \"\"));\n        }\n\n        public static argumentOutOfRange(argument: string): Error {\n            return new Error(\"Argument out of range: \" + argument + \".\");\n        }\n\n        public static argumentNull(argument: string): Error {\n            return new Error(\"Argument null: \" + argument + \".\");\n        }\n\n        public static abstract(): Error {\n            return new Error(\"Operation not implemented properly by subclass.\");\n        }\n\n        public static notYetImplemented(): Error {\n            return new Error(\"Not yet implemented.\");\n        }\n\n        public static invalidOperation(message?: string): Error {\n            return new Error(message ? (\"Invalid operation: \" + message) :\"Invalid operation.\");\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class Hash {\n        // This table uses FNV1a as a string hash\n        private static FNV_BASE = 2166136261;\n        private static FNV_PRIME = 16777619;\n\n        private static computeFnv1aCharArrayHashCode(text: number[], start: number, len: number): number {\n            var hashCode = Hash.FNV_BASE;\n            var end = start + len;\n\n            for (var i = start; i < end; i++) {\n                hashCode = (hashCode ^ text[i]) * Hash.FNV_PRIME;\n            }\n\n            return hashCode;\n        }\n\n        public static computeSimple31BitCharArrayHashCode(key: number[], start: number, len: number): number {\n            // Start with an int.\n            var hash = 0;\n\n            for (var i = 0; i < len; i++) {\n                var ch = key[start + i];\n\n                // Left shift keeps things as a 32bit int.  And we\'re only doing two adds.  Chakra and\n                // V8 recognize this as not needing to go past the 53 bits needed for the float \n                // mantissa.  Or\'ing with 0 keeps this 32 bits.\n                hash = (((hash << 5) + hash) + ch) | 0;\n            }\n\n            // Ensure we fit in 31 bits.  That way if/when this gets stored, it won\'t require any heap\n            // allocation.\n            return hash & 0x7FFFFFFF;\n        }\n\n        public static computeSimple31BitStringHashCode(key: string): number {\n            // Start with an int.\n            var hash = 0;\n\n            var start = 0;\n            var len = key.length;\n\n            for (var i = 0; i < len; i++) {\n                var ch = key.charCodeAt(start + i);\n\n                // Left shift keeps things as a 32bit int.  And we\'re only doing two adds.  Chakra and\n                // V8 recognize this as not needing to go past the 53 bits needed for the float \n                // mantissa.  Or\'ing with 0 keeps this 32 bits.\n                hash = (((hash << 5) + hash) + ch) | 0;\n            }\n\n            // Ensure we fit in 31 bits.  That way if/when this gets stored, it won\'t require any heap\n            // allocation.\n            return hash & 0x7FFFFFFF;\n        }\n\n        public static computeMurmur2CharArrayHashCode(key: number[], start: number, len: number): number {\n            // \'m\' and \'r\' are mixing constants generated offline.\n            // They\'re not really \'magic\', they just happen to work well.\n            var m = 0x5bd1e995;\n            var r = 24;\n\n            // Initialize the hash to a \'random\' value\n            var numberOfCharsLeft = len;\n            var h = (0 ^ numberOfCharsLeft);\n\n            // Mix 4 bytes at a time into the hash.  NOTE: 4 bytes is two chars, so we iterate\n            // through the string two chars at a time.\n            var index = start;\n            while (numberOfCharsLeft >= 2) {\n                var c1 = key[index];\n                var c2 = key[index + 1];\n\n                var k = c1 | (c2 << 16);\n\n                k *= m;\n                k ^= k >> r;\n                k *= m;\n\n                h *= m;\n                h ^= k;\n\n                index += 2;\n                numberOfCharsLeft -= 2;\n            }\n\n            // Handle the last char (or 2 bytes) if they exist.  This happens if the original string had\n            // odd length.\n            if (numberOfCharsLeft === 1) {\n                h ^= key[index];\n                h *= m;\n            }\n\n            // Do a few final mixes of the hash to ensure the last few bytes are well-incorporated.\n\n            h ^= h >> 13;\n            h *= m;\n            h ^= h >> 15;\n\n            return h;\n        }\n\n        public static computeMurmur2StringHashCode(key: string): number {\n            // \'m\' and \'r\' are mixing constants generated offline.\n            // They\'re not really \'magic\', they just happen to work well.\n            var m = 0x5bd1e995;\n            var r = 24;\n\n            var start = 0;\n            var len = key.length;\n            var numberOfCharsLeft = len;\n\n            // Initialize the hash to a \'random\' value.\n            var h = (0 ^ numberOfCharsLeft);\n\n            // Mix 4 bytes at a time into the hash.  NOTE: 4 bytes is two chars, so we iterate\n            // through the string two chars at a time.\n            var index = start;\n            while (numberOfCharsLeft >= 2) {\n                var c1 = key.charCodeAt(index);\n                var c2 = key.charCodeAt(index + 1);\n\n                var k = c1 | (c2 << 16);\n\n                k *= m;\n                k ^= k >> r;\n                k *= m;\n\n                h *= m;\n                h ^= k;\n\n                index += 2;\n                numberOfCharsLeft -= 2;\n            }\n\n            // Handle the last char (or 2 bytes) if they exist.  This happens if the original string had\n            // odd length.\n            if (numberOfCharsLeft === 1) {\n                h ^= key.charCodeAt(index);\n                h *= m;\n            }\n\n            // Do a few final mixes of the hash to ensure the last few bytes are well-incorporated.\n\n            h ^= h >> 13;\n            h *= m;\n            h ^= h >> 15;\n\n            return h;\n        }\n\n        private static primes =\n            [3, 7, 11, 17, 23, 29, 37, 47, 59, 71, 89, 107, 131, 163, 197, 239, 293, 353, 431, 521,\n              631, 761, 919, 1103, 1327, 1597, 1931, 2333, 2801, 3371, 4049, 4861, 5839, 7013, 8419,\n              10103, 12143, 14591, 17519, 21023, 25229, 30293, 36353, 43627, 52361, 62851, 75431,\n              90523, 108631, 130363, 156437, 187751, 225307, 270371, 324449, 389357, 467237, 560689,\n              672827, 807403, 968897, 1162687, 1395263, 1674319, 2009191, 2411033, 2893249, 3471899,\n              4166287, 4999559, 5999471, 7199369];\n\n        public static getPrime(min: number): number {\n            for (var i = 0; i < Hash.primes.length; i++) {\n                var num = Hash.primes[i];\n                if (num >= min) {\n                    return num;\n                }\n            }\n\n            throw Errors.notYetImplemented();\n        }\n\n        public static expandPrime(oldSize: number): number {\n            var num = oldSize << 1;\n            if (num > 2146435069 && 2146435069 > oldSize) {\n                // NOTE: 2146435069 fits in 31 bits.\n                return 2146435069;\n            }\n            return Hash.getPrime(num);\n        }\n\n        public static combine(value: number, currentHash: number): number {\n            // Ensure we stay within 31 bits.\n            return (((currentHash << 5) + currentHash) + value) & 0x7FFFFFFF;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript.Collections {\n    export var DefaultHashTableCapacity = 256;\n\n    class HashTableEntry {\n        constructor(public Key: any,\n                    public Value: any,\n                    public HashCode: number,\n                    public Next: HashTableEntry) {\n        }\n    }\n\n    export class HashTable {\n        // TODO: figure out why the type checker dosn\'t like \"HashTableEntry[]\" here.\n        private entries /*: HashTableEntry[]*/ = [];\n        private count: number = 0;\n\n        constructor(capacity: number,\n                    private hash: (k: any) => number,\n                    private equals: (k1: any, k2: any) => bool) {\n            var size = Hash.getPrime(capacity);\n            this.hash = hash;\n            this.equals = equals;\n            this.entries = ArrayUtilities.createArray(size, null);\n        }\n\n        // Maps \'key\' to \'value\' in this table.  Does not throw if \'key\' is already in the table.\n        public set (key: any, value: any) {\n            this.addOrSet(key, value, /*throwOnExistingEntry:*/ false);\n        }\n\n        // Maps \'key\' to \'value\' in this table.  Throws if \'key\' is already in the table.\n        public add(key: any, value: any) {\n            this.addOrSet(key, value, /*throwOnExistingEntry:*/ true);\n        }\n\n        public containsKey(key: any): bool {\n            var hashCode = this.computeHashCode(key);\n            var entry = this.findEntry(key, hashCode);\n            return entry !== null;\n        }\n\n        public get (key: any): any {\n            var hashCode = this.computeHashCode(key);\n            var entry = this.findEntry(key, hashCode);\n\n            return entry === null ? null : entry.Value;\n        }\n\n        private computeHashCode(key: any): number {\n            var hashCode = this.hash === null\n                ? key.hashCode()\n                : this.hash(key);\n\n            hashCode = hashCode & 0x7FFFFFFF;\n            Debug.assert(hashCode > 0);\n\n            return hashCode;\n        }\n\n        private addOrSet(key: any, value: any, throwOnExistingEntry: bool) {\n            // Compute the hash for this key.  Also ensure that it\'s non negative.\n            var hashCode = this.computeHashCode(key);\n\n            var entry = this.findEntry(key, hashCode);\n            if (entry !== null) {\n                if (throwOnExistingEntry) {\n                    throw Errors.argument(\'key\', \'Key was already in table.\');\n                }\n\n                entry.Key = key;\n                entry.Value = value;\n                return;\n            }\n\n            return this.addEntry(key, value, hashCode);\n        }\n\n        private findEntry(key: any, hashCode: number) /*: HashTableEntry*/ {\n            for (var e = this.entries[hashCode % this.entries.length]; e !== null; e = e.Next) {\n                if (e.HashCode === hashCode) {\n                    var equals = this.equals === null\n                        ? key === e.Key\n                        : this.equals(key, e.Key);\n\n                    if (equals) {\n                        return e;\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        private addEntry(key: any, value: any, hashCode: number): any {\n            var index = hashCode % this.entries.length;\n\n            var e = new HashTableEntry(key, value, hashCode, this.entries[index]);\n\n            this.entries[index] = e;\n\n            // Right now we grow when we get a load factor of 1.  We\'re basically guaranteed to have had\n            // a collision at that point.  Should we potentially change this to a lower load factor?  It\n            // will require more space, but provide us with faster lookup.  We could potentially make this\n            // configurable as well.\n            if (this.count === this.entries.length) {\n                this.grow();\n            }\n\n            this.count++;\n            return e.Key;\n        }\n\n        //private dumpStats() {\n        //    var standardOut = Environment.standardOut;\n\n        //    standardOut.WriteLine(\"----------------------\")\n        //    standardOut.WriteLine(\"Hash table stats\");\n        //    standardOut.WriteLine(\"Count            : \" + this.count);\n        //    standardOut.WriteLine(\"Entries Length   : \" + this.entries.length);\n\n        //    var occupiedSlots = 0;\n        //    for (var i = 0; i < this.entries.length; i++) {\n        //        if (this.entries[i] !== null) {\n        //            occupiedSlots++;\n        //        }\n        //    }\n\n        //    standardOut.WriteLine(\"Occupied slots   : \" + occupiedSlots);\n        //    standardOut.WriteLine(\"Avg Length/Slot  : \" + (this.count / occupiedSlots));\n        //    standardOut.WriteLine(\"----------------------\");\n        //}\n\n        private grow(): void {\n            // this.dumpStats();\n\n            var newSize = Hash.expandPrime(this.entries.length);\n\n            var oldEntries = this.entries;\n            var newEntries: HashTableEntry[] = ArrayUtilities.createArray(newSize, null);\n\n            this.entries = newEntries;\n\n            for (var i = 0; i < oldEntries.length; i++) {\n                var e = oldEntries[i];\n\n                while (e !== null) {\n                    var newIndex = e.HashCode % newSize;\n                    var tmp = e.Next;\n                    e.Next = newEntries[newIndex];\n                    newEntries[newIndex] = e;\n                    e = tmp;\n                }\n            }\n\n            // this.dumpStats();\n        }\n    }\n\n    export function createHashTable(capacity: number = DefaultHashTableCapacity,\n        hash: (k: any) => number = null,\n        equals: (k1: any, k2: any) => bool = null): HashTable {\n        return new HashTable(capacity, hash, equals);\n    }\n\n    var currentHashCode = 1;\n    export function identityHashCode(value: any): number {\n        if (value.__hash === undefined) {\n            value.__hash = currentHashCode;\n            currentHashCode++;\n        }\n\n        return value.__hash;\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface IDiagnostic {\n        fileName(): string;\n        start(): number;\n        length(): number;\n        message(): string;\n    }\n\n     export class Diagnostic implements IDiagnostic {\n        private _fileName: string;\n        private _start: number;\n        private _length: number;\n        private _message: string;\n\n        constructor(start: number, length: number, fileName: string, message: string) {\n            this._fileName = fileName;\n            this._start = start;\n            this._length = length;\n            this._message = message;\n        }\n\n        public fileName(): string {\n            return this._fileName;\n        }\n\n        public start(): number {\n            return this._start;\n        }\n\n        public length(): number {\n            return this._length;\n        }\n\n        public message(): string {\n            return this._message;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface IDiagnosticMessages {\n        error_TS_0__1: DiagnosticInfo;\n        warning_TS_0__1: DiagnosticInfo;\n\n        // Syntactic diagnostics.\n        Unrecognized_escape_sequence: DiagnosticInfo;\n        Unexpected_character_0: DiagnosticInfo;\n        Missing_closing_quote_character: DiagnosticInfo;\n        Identifier_expected: DiagnosticInfo;\n        _0_keyword_expected: DiagnosticInfo;\n        _0_expected: DiagnosticInfo;\n        Identifier_expected__0_is_a_keyword: DiagnosticInfo;\n        Automatic_semicolon_insertion_not_allowed: DiagnosticInfo;\n        Unexpected_token__0_expected: DiagnosticInfo;\n        Trailing_separator_not_allowed: DiagnosticInfo;\n        _StarSlash__expected: DiagnosticInfo;\n        _public_or_private_modifier_must_precede__static_: DiagnosticInfo;\n        Unexpected_token_: DiagnosticInfo;\n        A_catch_clause_variable_cannot_have_a_type_annotation: DiagnosticInfo;\n        Rest_parameter_must_be_last_in_list: DiagnosticInfo;\n        Parameter_cannot_have_question_mark_and_initializer: DiagnosticInfo;\n        Required_parameter_cannot_follow_optional_parameter: DiagnosticInfo;\n        Index_signatures_cannot_have_rest_parameters: DiagnosticInfo;\n        Index_signature_parameter_cannot_have_accessibility_modifiers: DiagnosticInfo;\n        Index_signature_parameter_cannot_have_a_question_mark: DiagnosticInfo;\n        Index_signature_parameter_cannot_have_an_initializer: DiagnosticInfo;\n        Index_signature_must_have_a_type_annotation: DiagnosticInfo;\n        Index_signature_parameter_must_have_a_type_annotation: DiagnosticInfo;\n        Index_signature_parameter_type_must_be__string__or__number_: DiagnosticInfo;\n        _extends__clause_already_seen: DiagnosticInfo;\n        _extends__clause_must_precede__implements__clause: DiagnosticInfo;\n        Class_can_only_extend_single_type: DiagnosticInfo;\n        _implements__clause_already_seen: DiagnosticInfo;\n        Accessibility_modifier_already_seen: DiagnosticInfo;\n        _0__modifier_must_precede__1__modifier: DiagnosticInfo;\n        _0__modifier_already_seen: DiagnosticInfo;\n        _0__modifier_cannot_appear_on_a_class_element: DiagnosticInfo;\n        Interface_declaration_cannot_have__implements__clause: DiagnosticInfo;\n        Enum_element_must_have_initializer: DiagnosticInfo;\n        _super__invocation_cannot_have_type_arguments: DiagnosticInfo;\n        Non_ambient_modules_cannot_use_quoted_names: DiagnosticInfo;\n        Statements_are_not_allowed_in_ambient_contexts: DiagnosticInfo;\n        Implementations_are_not_allowed_in_ambient_contexts: DiagnosticInfo;\n        _declare__modifier_not_allowed_for_code_already_in_an_ambient_context: DiagnosticInfo;\n        Initializers_are_not_allowed_in_ambient_contexts: DiagnosticInfo;\n        Overload_and_ambient_signatures_cannot_specify_parameter_properties: DiagnosticInfo;\n        Function_implementation_expected: DiagnosticInfo;\n        Constructor_implementation_expected: DiagnosticInfo;\n        Function_overload_name_must_be__0_: DiagnosticInfo;\n        _0__modifier_cannot_appear_on_a_module_element: DiagnosticInfo;\n        _declare__modifier_cannot_appear_on_an_interface_declaration: DiagnosticInfo;\n        _declare__modifier_required_for_top_level_element: DiagnosticInfo;\n\n\n\n\n\n\n\n        // Semantic diagnostics.\n        Duplicate_identifier__0_: DiagnosticInfo;\n        The_name__0__does_not_exist_in_the_current_scope: DiagnosticInfo;\n        The_name__0__does_not_refer_to_a_value: DiagnosticInfo;\n        Keyword__super__can_only_be_used_inside_a_class_instance_method: DiagnosticInfo;\n        The_left_hand_side_of_an_assignment_expression_must_be_a_variable__property_or_indexer: DiagnosticInfo;\n        Value_of_type__0__is_not_callable__Did_you_mean_to_include__new__: DiagnosticInfo;\n        Value_of_type__0__is_not_callable: DiagnosticInfo;\n        Value_of_type__0__is_not_newable: DiagnosticInfo;\n        Value_of_type__0__is_not_indexable_by_type__1_: DiagnosticInfo;\n        Operator__0__cannot_be_applied_to_types__1__and__2_: DiagnosticInfo;\n        Operator__0__cannot_be_applied_to_types__1__and__2__3: DiagnosticInfo;\n        Cannot_convert__0__to__1_: DiagnosticInfo;\n        Cannot_convert__0__to__1___2: DiagnosticInfo;\n        Expected_var__class__interface__or_module: DiagnosticInfo;\n        Operator__0__cannot_be_applied_to_type__1_: DiagnosticInfo;\n        Getter__0__already_declared: DiagnosticInfo;\n        Setter__0__already_declared: DiagnosticInfo;\n        Accessor_may_not_take_type_parameters: DiagnosticInfo;\n\n        //Privacy error related diagnostics\n        Exported_class__0__extends_private_class__1_: DiagnosticInfo;\n        Exported_class__0__implements_private_interface__1_: DiagnosticInfo;\n        Exported_interface__0__extends_private_interface__1_: DiagnosticInfo;\n        Exported_class__0__extends_class_from_private_module__1_: DiagnosticInfo;\n        Exported_class__0__implements_interface_from_private_module__1_: DiagnosticInfo;\n        Exported_interface__0__extends_interface_from_private_module__1_: DiagnosticInfo;\n        Public_static_property__0__of__exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Public_property__0__of__exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Property__0__of__exported_interface_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Exported_variable__0__has_or_is_using_private_type__1_: DiagnosticInfo;\n        Public_static_property__0__of__exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Public_property__0__of__exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Property__0__of__exported_interface_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Exported_variable__0__is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_constructor_from_exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_public_static_property_setter_from_exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_public_property_setter_from_exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_constructor_signature_from_exported_interface_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_call_signature_from_exported_interface_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_public_static_method_from_exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_public_method_from_exported_class_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_method_from_exported_interface_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_exported_function_has_or_is_using_private_type__1_: DiagnosticInfo;\n        Parameter__0__of_constructor_from_exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_public_static_property_setter_from_exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_public_property_setter_from_exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_constructor_signature_from_exported_interface_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_call_signature_from_exported_interface_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_public_static_method_from_exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_public_method_from_exported_class_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_method_from_exported_interface_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Parameter__0__of_exported_function_is_using_inaccessible_module__1_: DiagnosticInfo;\n        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_public_method_from_exported_class_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_method_from_exported_interface_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_exported_function_has_or_is_using_private_type__0_: DiagnosticInfo;\n        Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_public_method_from_exported_class_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_method_from_exported_interface_is_using_inaccessible_module__0_: DiagnosticInfo;\n        Return_type_of_exported_function_is_using_inaccessible_module__0_: DiagnosticInfo;\n    }\n}\ninterface IEnvironment {\n    readFile(path: string, useUTF8?: bool): string;\n    writeFile(path: string, contents: string, useUTF8?: bool): void;\n    deleteFile(path: string): void;\n    fileExists(path: string): bool;\n    directoryExists(path: string): bool;\n    listFiles(path: string, re?: RegExp, options?: { recursive?: bool; }): string[];\n\n    arguments: string[];\n    standardOut: ITextWriter;\n\n    currentDirectory(): string;\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class IntegerUtilities {\n        public static integerDivide(numerator: number, denominator: number): number {\n            return (numerator / denominator) >> 0;\n        }\n\n        public static integerMultiplyLow32Bits(n1: number, n2: number): number {\n            var n1Low16 = n1 & 0x0000ffff;\n            var n1High16 = n1 >>> 16;\n\n            var n2Low16 = n2 & 0x0000ffff;\n            var n2High16 = n2 >>> 16;\n\n            var resultLow32 = (((n1 & 0xffff0000) * n2) >>> 0) + (((n1 & 0x0000ffff) * n2) >>> 0) >>> 0;\n            return resultLow32;\n        }\n\n        public static integerMultiplyHigh32Bits(n1: number, n2: number): number {\n            var n1Low16 = n1 & 0x0000ffff;\n            var n1High16 = n1 >>> 16;\n\n            var n2Low16 = n2 & 0x0000ffff;\n            var n2High16 = n2 >>> 16;\n\n            var resultHigh32 = n1High16 * n2High16 + ((((n1Low16 * n2Low16) >>> 17) + n1Low16 * n2High16) >>> 15);\n            return resultHigh32;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class MathPrototype {\n        public static max(a: number, b: number): number {\n            return a >= b ? a : b;\n        }\n\n        public static min(a: number, b: number): number {\n            return a <= b ? a : b;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript.Collections {\n    export var DefaultStringTableCapacity = 256;\n\n    class StringTableEntry {\n        constructor(public Text: string,\n                    public HashCode: number,\n                    public Next: StringTableEntry) {\n        }\n    }\n\n    // A table of interned strings.  Faster and better than an arbitrary hashtable for the needs of the\n    // scanner. Specifically, the scanner operates over a sliding window of characters, with a start \n    // and end pointer for the current lexeme.  The scanner then wants to get the *interned* string\n    // represented by that subsection.\n    //\n    // Importantly, if the string is already interned, then it wants ask \"is the string represented by \n    // this section of a char array contained within the table\" in a non-allocating fashion.  i.e. if \n    // you have \"[\' \', \'p\', \'u\', \'b\', \'l\', \'i\', \'c\', \' \']\" and you ask to get the string represented by\n    //  range [1, 7), then this table will return \"public\" without any allocations if that value was \n    // already in the table.\n    //\n    // Of course, if the value is not in the table then there will be an initial cost to allocate the \n    // string and the bucket for the table.  However, that is only incurred the first time each unique \n    // string is added.\n    export class StringTable {\n        // TODO: uncomment this once typecheck bug is fixed.\n        private entries /*: StringTableEntry[]*/ = [];\n        private count: number = 0;\n\n        constructor(capacity) {\n            var size = Hash.getPrime(capacity);\n            this.entries = ArrayUtilities.createArray(size, null);\n        }\n\n        public addCharArray(key: number[], start: number, len: number): string {\n            // Compute the hash for this key.  Also ensure that it fits within 31 bits  (so that it \n            // stays a non-heap integer, and so we can index into the array safely).\n            var hashCode = Hash.computeSimple31BitCharArrayHashCode(key, start, len) & 0x7FFFFFFF;\n            // Debug.assert(hashCode > 0);\n\n            // First see if we already have the string represented by \"key[start, start + len)\" already\n            // present in this table.  If we do, just return that string.  Do this without any \n            // allocations\n            var entry = this.findCharArrayEntry(key, start, len, hashCode);\n            if (entry !== null) {\n                return entry.Text;\n            }\n\n            // We don\'t have an entry for that string in our table.  Convert that \n            var slice: number[] = key.slice(start, start + len);\n            return this.addEntry(StringUtilities.fromCharCodeArray(slice), hashCode);\n        }\n\n        private findCharArrayEntry(key: number[], start: number, len: number, hashCode: number) {\n            for (var e = this.entries[hashCode % this.entries.length]; e !== null; e = e.Next) {\n                if (e.HashCode === hashCode && StringTable.textCharArrayEquals(e.Text, key, start, len)) {\n                    return e;\n                }\n            }\n\n            return null;\n        }\n\n        private addEntry(text: string, hashCode: number): string {\n            var index = hashCode % this.entries.length;\n\n            var e = new StringTableEntry(text, hashCode, this.entries[index]);\n\n            this.entries[index] = e;\n\n            // We grow when our load factor equals 1.  I tried different load factors (like .75 and \n            // .5), however they seemed to have no effect on running time.  With a load factor of 1\n            // we seem to get about 80% slot fill rate with an average of around 1.25 table entries \n            // per slot.\n            if (this.count === this.entries.length) {\n                this.grow();\n            }\n\n            this.count++;\n            return e.Text;\n        }\n\n        //private dumpStats() {\n        //    var standardOut = Environment.standardOut;\n\n        //    standardOut.WriteLine(\"----------------------\")\n        //    standardOut.WriteLine(\"String table stats\");\n        //    standardOut.WriteLine(\"Count            : \" + this.count);\n        //    standardOut.WriteLine(\"Entries Length   : \" + this.entries.length);\n\n        //    var longestSlot = 0;\n        //    var occupiedSlots = 0;\n        //    for (var i = 0; i < this.entries.length; i++) {\n        //        if (this.entries[i] !== null) {\n        //            occupiedSlots++;\n\n        //            var current = this.entries[i];\n        //            var slotCount = 0;\n        //            while (current !== null) {\n        //                slotCount++;\n        //                current = current.Next;\n        //            }\n\n        //            longestSlot = MathPrototype.max(longestSlot, slotCount);\n        //        }\n        //    }\n\n        //    standardOut.WriteLine(\"Occupied slots   : \" + occupiedSlots);\n        //    standardOut.WriteLine(\"Longest  slot    : \" + longestSlot);\n        //    standardOut.WriteLine(\"Avg Length/Slot  : \" + (this.count / occupiedSlots));\n        //    standardOut.WriteLine(\"----------------------\");\n        //}\n\n        private grow(): void {\n            // this.dumpStats();\n\n            var newSize = Hash.expandPrime(this.entries.length);\n\n            var oldEntries = this.entries;\n            var newEntries: StringTableEntry[] = ArrayUtilities.createArray(newSize, null);\n\n            this.entries = newEntries;\n\n            for (var i = 0; i < oldEntries.length; i++) {\n                var e = oldEntries[i];\n                while (e !== null) {\n                    var newIndex = e.HashCode % newSize;\n                    var tmp = e.Next;\n                    e.Next = newEntries[newIndex];\n                    newEntries[newIndex] = e;\n                    e = tmp;\n                }\n            }\n\n            // this.dumpStats();\n        }\n\n        private static textCharArrayEquals(text: string, array: number[], start: number, length: number): bool {\n            if (text.length !== length) {\n                return false;\n            }\n\n            var s = start;\n            for (var i = 0; i < length; i++) {\n                if (text.charCodeAt(i) !== array[s]) {\n                    return false;\n                }\n\n                s++;\n            }\n\n            return true;\n        }\n    }\n\n    export var DefaultStringTable = new StringTable(DefaultStringTableCapacity);\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class StringUtilities {\n        public static fromCharCodeArray(array: number[]): string {\n            return String.fromCharCode.apply(null, array);\n        }\n\n        public static endsWith(string: string, value: string): bool {\n            return string.substring(string.length - value.length, string.length) === value;\n        }\n\n        public static startsWith(string: string, value: string): bool {\n            return string.substr(0, value.length) === value;\n        }\n\n        public static copyTo(source: string, sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            for (var i = 0; i < count; i++) {\n                destination[destinationIndex + i] = source.charCodeAt(sourceIndex + i);\n            }\n        }\n\n        public static repeat(value: string, count: number) {\n            return Array(count + 1).join(value);\n        }\n\n        public static stringEquals(val1: string, val2: string): bool {\n            return val1 === val2;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nvar global = <any>Function(\"return this\").call(null);\n\nmodule TypeScript {\n    module Clock {\n        export var now: () => number;\n        export var resolution: number;\n\n        declare module WScript {\n            export function InitializeProjection();\n        }\n\n        declare module TestUtilities {\n            export function QueryPerformanceCounter(): number;\n            export function QueryPerformanceFrequency(): number;\n        }\n\n        if (typeof WScript !== \"undefined\" && typeof global[\'WScript\'].InitializeProjection !== \"undefined\") {\n            // Running in JSHost.\n            global[\'WScript\'].InitializeProjection();\n\n            now = function () {\n                return TestUtilities.QueryPerformanceCounter();\n            }\n\n            resolution = TestUtilities.QueryPerformanceFrequency();\n        } else {\n            now = function () {\n                return Date.now();\n            }\n\n            resolution = 1000;\n        }\n    }\n\n    export class Timer {\n        public startTime;\n        public time = 0;\n\n        public start() {\n            this.time = 0;\n            this.startTime = Clock.now();\n        }\n\n        public end() {\n            // Set time to MS.\n            this.time = (Clock.now() - this.startTime);\n        }\n    }\n}\n///<reference path=\'Require.ts\' />\n\n///<reference path=\'ArrayUtilities.ts\' />\n///<reference path=\'Constants.ts\' />\n///<reference path=\'Contract.ts\' />\n///<reference path=\'Debug.ts\' />\n///<reference path=\'DiagnosticCategory.ts\' />\n///<reference path=\'DiagnosticCode.ts\' />\n///<reference path=\'DiagnosticInfo.ts\' />\n///<reference path=\'DiagnosticMessages.ts\' />\n///<reference path=\'Errors.ts\' />\n///<reference path=\'Hash.ts\' />\n///<reference path=\'HashTable.ts\' />\n///<reference path=\'IDiagnostic.ts\' />\n///<reference path=\'IDiagnosticMessages.ts\' />\n///<reference path=\'IEnvironment.ts\' />\n///<reference path=\'IntegerUtilities.ts\' />\n///<reference path=\'MathPrototype.ts\' />\n///<reference path=\'StringTable.ts\' />\n///<reference path=\'StringUtilities.ts\' />\n///<reference path=\'Timer.ts\' />\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export enum CharacterCodes {\n        nullCharacter = 0,\n        maxAsciiCharacter = 127,\n\n        lineFeed = 10,       // \\n\n        carriageReturn = 13,       // \\r\n        lineSeparator = 0x2028,\n        paragraphSeparator = 0x2029,\n\n        // REVIEW: do we need to support this?  The scanner doesn\'t, but our IText does.  This seems \n        // like an odd disparity?  (Or maybe it\'s completely fine for them to be different).\n        nextLine = 0x0085,\n\n        // Unicode 3.0 space characters\n        space = 0x0020,   // \" \"\n        nonBreakingSpace = 0x00A0,   //\n        enQuad = 0x2000,\n        emQuad = 0x2001,\n        enSpace = 0x2002,\n        emSpace = 0x2003,\n        threePerEmSpace = 0x2004,\n        fourPerEmSpace = 0x2005,\n        sixPerEmSpace = 0x2006,\n        figureSpace = 0x2007,\n        punctuationSpace = 0x2008,\n        thinSpace = 0x2009,\n        hairSpace = 0x200A,\n        zeroWidthSpace = 0x200B,\n        narrowNoBreakSpace = 0x202F,\n        ideographicSpace = 0x3000,\n\n        _ = 95,\n        $ = 36,\n\n        _0 = 48,\n        _9 = 57,\n\n        a = 97,\n        b = 98,\n        c = 99,\n        d = 100,\n        e = 101,\n        f = 102,\n        g = 103,\n        h = 104,\n        i = 105,\n        k = 107,\n        l = 108,\n        m = 109,\n        n = 110,\n        o = 111,\n        p = 112,\n        r = 114,\n        s = 115,\n        t = 116,\n        u = 117,\n        v = 118,\n        w = 119,\n        x = 120,\n        y = 121,\n        z = 122,\n\n        A = 65,\n        E = 69,\n        F = 70,\n        X = 88,\n        Z = 90,\n\n        ampersand = 38,          // &\n        asterisk = 42,          // *\n        backslash = 92,          // \\\n        bar = 124,         // |\n        caret = 94,          // ^\n        closeBrace = 125,         // }\n        closeBracket = 93,          // ]\n        closeParen = 41,          // )\n        colon = 58,          // : \n        comma = 44,          // ,\n        dot = 46,          // .\n        doubleQuote = 34,          // \"\n        equals = 61,          // =\n        exclamation = 33,          // !\n        greaterThan = 62,          // >\n        lessThan = 60,          // <\n        minus = 45,          // -\n        openBrace = 123,         // {\n        openBracket = 91,          // [\n        openParen = 40,          // (\n        percent = 37,          // %\n        plus = 43,          // +\n        question = 63,          // ?\n        semicolon = 59,          // ;\n        singleQuote = 39,          // \'\n        slash = 47,          // /\n        tilde = 126,         // ~\n\n        backspace = 8,          // \\b\n        formFeed = 12,         // \\f\n        byteOrderMark = 0xFEFF,\n        tab = 9,          // \\t\n        verticalTab = 11,         // \\v\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface ILineAndCharacter {\n        line: number;\n        character: number;\n    }\n}\n///<reference path=\'References.ts\' />\n\n/// <summary>\n/// Represents an immutable snapshot of text.\n/// </summary>\nmodule TypeScript {\n    export interface ISimpleText {\n        /// <summary>\n        /// Total number of characters in the text source.\n        /// </summary>\n        length(): number;\n\n        /// <summary>\n        /// Copy the count contents of IText starting from sourceIndex to destination starting at\n        /// destinationIndex.\n        /// </summary>\n        copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void;\n\n        substr(start: number, length: number, intern: bool): string;\n\n        /// <summary>\n        /// Gets the a new IText that corresponds to the contents of this IText for the given span.\n        /// </summary>\n        subText(span: TextSpan): ISimpleText;\n\n        charCodeAt(index: number): number;\n        lineMap(): LineMap;\n    }\n\n    /// <summary>\n    /// Represents an immutable snapshot of text.\n    /// </summary>\n    export interface IText extends ISimpleText {\n        /// <summary>\n        /// Total number of lines in the text.\n        /// </summary>\n        lineCount(): number;\n\n        /// <summary>\n        /// Returns the collection of line information for the <see cref=\"T:IText\"/> instance.\n        /// </summary>\n        lines(): ITextLine[];\n\n        /// <summary>\n        /// Return the char at position in the IText.\n        /// </summary>\n        charCodeAt(position: number): number;\n\n        /// <summary>\n        /// Gets the line corresponding to the provided line number.\n        /// </summary>\n        getLineFromLineNumber(lineNumber: number): ITextLine;\n\n        /// <summary>\n        /// Gets the line which encompasses the provided position.\n        /// </summary>\n        getLineFromPosition(position: number): ITextLine;\n\n        /// <summary>\n        /// Gets the number of the line that contains the character at the specified position.\n        /// </summary>\n        getLineNumberFromPosition(position: number): number;\n\n        /// <summary>\n        /// Gets a line number, and position within that line, for the character at the \n        /// specified position\n        /// </summary>\n        getLinePosition(position: number): LineAndCharacter;\n\n        /// <summary>\n        /// Returns a string representation of the contents of this IText within the given span.\n        /// </summary>\n        toString(span?: TextSpan): string;\n\n        /// <summary>\n        /// Gets the a new IText that corresponds to the contents of this IText for the given span.\n        /// </summary>\n        subText(span: TextSpan): IText;\n    }\n}\n///<reference path=\'References.ts\' />\n\n/// <summary>\n/// Immutable representation of a line in an IText instance.\n/// </summary>\nmodule TypeScript {\n    export interface ITextLine {\n        /// <summary>\n        /// Start of the line.\n        /// </summary>\n        start(): number;\n\n        /// <summary>\n        /// End of the line not including the line break.\n        /// </summary>\n        end(): number;\n\n        /// <summary>\n        /// End of the line including the line break.\n        /// </summary>\n        endIncludingLineBreak(): number;\n\n        /// <summary>\n        /// Extent of the line not including the line break.\n        /// </summary>\n        extent(): TextSpan;\n\n        /// <summary>\n        /// Extent of the line including the line break.\n        /// </summary>\n        extentIncludingLineBreak(): TextSpan;\n\n        /// <summary>\n        /// Gets the text of the line excluding the line break.\n        /// </summary>\n        toString(): string;\n\n        /// <summary>\n        /// Gets the line number for this line.\n        /// </summary>\n        lineNumber(): number;\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class LineMap {\n        public static empty = new LineMap([0], 0);\n\n        constructor(private _lineStarts: number[], private length: number) {\n        }\n\n        public toJSON(key) {\n            return { lineStarts: this._lineStarts, length: this.length };\n        }\n\n        public equals(other: LineMap): bool {\n            return this.length === other.length &&\n                   ArrayUtilities.sequenceEquals(this.lineStarts(), other.lineStarts(), (v1, v2) => v1 === v2);\n        }\n\n        public lineStarts(): number[] {\n            return this._lineStarts;\n        }\n\n        public lineCount(): number {\n            return this.lineStarts().length;\n        }\n\n        public getPosition(line: number, character: number): number {\n            return this.lineStarts()[line] + character;\n        }\n\n        public getLineNumberFromPosition(position: number): number {\n            if (position < 0 || position > this.length) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            if (position === this.length) {\n                // this can happen when the user tried to get the line of items\n                // that are at the absolute end of this text (i.e. the EndOfLine\n                // token, or missing tokens that are at the end of the text).\n                // In this case, we want the last line in the text.\n                return this.lineCount() - 1;\n            }\n\n            // Binary search to find the right line\n            var lineNumber = ArrayUtilities.binarySearch(this.lineStarts(), position);\n            if (lineNumber < 0) {\n                lineNumber = (~lineNumber) - 1;\n            }\n\n            return lineNumber;\n        }\n\n        public getLineStartPosition(lineNumber: number): number {\n            return this.lineStarts()[lineNumber];\n        }\n\n        public fillLineAndCharacterFromPosition(position: number, lineAndCharacter: ILineAndCharacter): void {\n            if (position < 0 || position > this.length) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            var lineNumber = this.getLineNumberFromPosition(position);\n            lineAndCharacter.line = lineNumber;\n            lineAndCharacter.character = position - this.lineStarts()[lineNumber];\n        }\n\n        public getLineAndCharacterFromPosition(position: number): LineAndCharacter {\n            if (position < 0 || position > this.length) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            var lineNumber = this.getLineNumberFromPosition(position);\n\n            return new LineAndCharacter(lineNumber, position - this.lineStarts()[lineNumber]);\n        }\n\n        public static fromSimpleText(text: ISimpleText): LineMap {\n            var lineStarts = TextUtilities.parseLineStarts(text);\n\n            return new LineMap(lineStarts, text.length());\n        }\n\n        public static fromScriptSnapshot(scriptSnapshot: IScriptSnapshot): LineMap {\n            return new LineMap(scriptSnapshot.getLineStartPositions(), scriptSnapshot.getLength());\n        }\n\n        public static fromString(text: string): LineMap {\n            return LineMap.fromSimpleText(SimpleText.fromString(text));\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class LineAndCharacter {\n        private _line: number = 0;\n        private _character: number = 0;\n\n        /// <summary>\n        /// Initializes a new instance of a <see cref=\"LinePosition\"/> with the given line and character.\n        /// </summary>\n        /// <param name=\"line\">\n        /// The line of the line position. The first line in a file is defined as line 0 (zero based line numbering).\n        /// </param>\n        /// <param name=\"character\">\n        /// The character position in the line.\n        /// </param>\n        /// <exception cref=\"ArgumentOutOfRangeException\"><paramref name=\"line\"/> or <paramref name=\"character\"/> is less than zero. </exception>\n        constructor(line: number, character: number) {\n            if (line < 0) {\n                throw Errors.argumentOutOfRange(\"line\");\n            }\n\n            if (character < 0) {\n                throw Errors.argumentOutOfRange(\"character\");\n            }\n\n            this._line = line;\n            this._character = character;\n        }\n\n        public line(): number {\n            return this._line;\n        }\n\n        public character(): number {\n            return this._character;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript.TextFactory {\n    /// <summary>\n    /// Return startLineBreak = index-1, lengthLineBreak = 2   if there is a \\r\\n at index-1\n    /// Return startLineBreak = index,   lengthLineBreak = 1   if there is a 1-char newline at index\n    /// Return startLineBreak = index+1, lengthLineBreak = 0   if there is no newline at index.\n    /// </summary>\n    function getStartAndLengthOfLineBreakEndingAt(\n        text: IText, index: number, info: LinebreakInfo): void {\n\n        var c = text.charCodeAt(index);\n        if (c === CharacterCodes.lineFeed) {\n            if (index > 0 && text.charCodeAt(index - 1) === CharacterCodes.carriageReturn) {\n                // \"\\r\\n\" is the only 2-character line break.\n                info.startPosition = index - 1;\n                info.length = 2;\n            }\n            else {\n                info.startPosition = index;\n                info.length = 1;\n            }\n        }\n        else if (TextUtilities.isAnyLineBreakCharacter(c)) {\n            info.startPosition = index;\n            info.length = 1;\n        }\n        else {\n            info.startPosition = index + 1;\n            info.length = 0;\n        }\n    }\n\n    class LinebreakInfo {\n        constructor(public startPosition: number,\n                     public length: number) {\n        }\n    }\n\n    class TextLine implements ITextLine {\n        private _text: IText = null;\n        private _textSpan: TextSpan = null;\n        private _lineBreakLength: number;\n        private _lineNumber: number;\n\n        constructor(text: IText, body: TextSpan, lineBreakLength: number, lineNumber: number) {\n            Contract.throwIfNull(text);\n            Contract.throwIfFalse(lineBreakLength >= 0);\n            Contract.requires(lineNumber >= 0);\n            this._text = text;\n            this._textSpan = body;\n            this._lineBreakLength = lineBreakLength;\n            this._lineNumber = lineNumber;\n        }\n\n        public start(): number {\n            return this._textSpan.start();\n        }\n\n        public end(): number {\n            return this._textSpan.end();\n        }\n\n        public endIncludingLineBreak(): number {\n            return this.end() + this._lineBreakLength;\n        }\n\n        public extent(): TextSpan {\n            return this._textSpan;\n        }\n\n        public extentIncludingLineBreak(): TextSpan {\n            return TextSpan.fromBounds(this.start(), this.endIncludingLineBreak());\n        }\n\n        public toString(): string {\n            return this._text.toString(this._textSpan);\n        }\n\n        public lineNumber(): number {\n            return this._lineNumber;\n        }\n    }\n\n    class TextBase implements IText {\n        /// <summary>\n        /// The line start position of each line.\n        /// </summary>\n        private lazyLineStarts: number[] = null;\n\n        /// <summary>\n        /// The length of the text represented by <see cref=\"T:StringText\"/>.\n        /// </summary>\n        public length(): number {\n            throw Errors.abstract();\n        }\n\n        /// <summary>\n        /// Returns a character at given position.\n        /// </summary>\n        /// <param name=\"position\">The position to get the character from.</param>\n        /// <returns>The character.</returns>\n        /// <exception cref=\"T:ArgumentOutOfRangeException\">When position is negative or \n        /// greater than <see cref=\"T:\"/> length.</exception>\n        public charCodeAt(position: number): number {\n            throw Errors.abstract();\n        }\n\n        checkSubSpan(span: TextSpan): void {\n            if (span.start() < 0 || span.start() > this.length() || span.end() > this.length()) {\n                throw Errors.argumentOutOfRange(\"span\");\n            }\n        }\n\n        /// <summary>\n        /// Provides a string representation of the StringText located within given span.\n        /// </summary>\n        /// <exception cref=\"T:ArgumentOutOfRangeException\">When given span is outside of the text range.</exception>\n        public toString(span: TextSpan = null): string {\n            throw Errors.abstract();\n        }\n\n        public subText(span: TextSpan): IText {\n            this.checkSubSpan(span);\n\n            return new SubText(this, span);\n        }\n\n        public substr(start: number, length: number, intern: bool): string {\n            throw Errors.abstract();\n        }\n\n        /// <summary>\n        /// Copy a range of characters from this IText to a destination array.\n        /// </summary>\n        public copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            throw Errors.abstract();\n        }\n\n        /// <summary>\n        /// The length of the text represented by <see cref=\"T:StringText\"/>.\n        /// </summary>\n        public lineCount(): number {\n            return this.lineStarts().length;\n        }\n\n        /// <summary>\n        /// The sequence of lines represented by <see cref=\"T:StringText\"/>.\n        /// </summary>\n        public lines(): ITextLine[] {\n            var lines: ITextLine[] = [];\n\n            var length = this.lineCount();\n            for (var i = 0; i < length; ++i) {\n                lines[i] = this.getLineFromLineNumber(i);\n            }\n\n            return lines;\n        }\n\n        public lineMap(): LineMap {\n            return new LineMap(this.lineStarts(), this.length());\n        }\n\n        private lineStarts(): number[] {\n            if (this.lazyLineStarts === null) {\n                this.lazyLineStarts = TextUtilities.parseLineStarts(this);\n            }\n\n            return this.lazyLineStarts;\n        }\n\n        private linebreakInfo = new LinebreakInfo(0, 0);\n        public getLineFromLineNumber(lineNumber: number): ITextLine {\n            var lineStarts = this.lineStarts();\n\n            if (lineNumber < 0 || lineNumber >= lineStarts.length) {\n                throw Errors.argumentOutOfRange(\"lineNumber\");\n            }\n\n            var first = lineStarts[lineNumber];\n            if (lineNumber === lineStarts.length - 1) {\n                return new TextLine(this, new TextSpan(first, this.length() - first), 0, lineNumber);\n            }\n            else {\n                getStartAndLengthOfLineBreakEndingAt(this, lineStarts[lineNumber + 1] - 1, this.linebreakInfo);\n                return new TextLine(this, new TextSpan(first, this.linebreakInfo.startPosition - first), this.linebreakInfo.length, lineNumber);\n            }\n\n        }\n\n        private lastLineFoundForPosition: ITextLine = null;\n        public getLineFromPosition(position: number): ITextLine {\n            // After asking about a location on a particular line\n            // it is common to ask about other position in the same line again.\n            // try to see if this is the case.\n            var lastFound = this.lastLineFoundForPosition;\n            if (lastFound !== null &&\n                lastFound.start() <= position &&\n                lastFound.endIncludingLineBreak() > position) {\n                return lastFound;\n            }\n\n            var lineNumber = this.getLineNumberFromPosition(position);\n\n            var result = this.getLineFromLineNumber(lineNumber);\n            this.lastLineFoundForPosition = result;\n            return result;\n        }\n\n        public getLineNumberFromPosition(position: number): number {\n            if (position < 0 || position > this.length()) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            if (position === this.length()) {\n                // this can happen when the user tried to get the line of items\n                // that are at the absolute end of this text (i.e. the EndOfLine\n                // token, or missing tokens that are at the end of the text).\n                // In this case, we want the last line in the text.\n                return this.lineCount() - 1;\n            }\n\n            // Binary search to find the right line\n            var lineNumber = ArrayUtilities.binarySearch(this.lineStarts(), position);\n            if (lineNumber < 0) {\n                lineNumber = (~lineNumber) - 1;\n            }\n\n            return lineNumber;\n        }\n\n        public getLinePosition(position: number): LineAndCharacter {\n            if (position < 0 || position > this.length()) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            var lineNumber = this.getLineNumberFromPosition(position);\n\n            return new LineAndCharacter(lineNumber, position - this.lineStarts()[lineNumber]);\n        }\n    }\n\n    /// <summary>\n    /// An IText that represents a subrange of another IText.\n    /// </summary>\n    class SubText extends TextBase {\n        private text: IText;\n        private span: TextSpan;\n\n        constructor(text: IText, span: TextSpan) {\n            super();\n\n            if (text === null) {\n                throw Errors.argumentNull(\"text\");\n            }\n\n            if (span.start() < 0 ||\n                span.start() >= text.length() ||\n                 span.end() < 0 ||\n                 span.end() > text.length()) {\n                throw Errors.argument(\"span\");\n            }\n\n            this.text = text;\n            this.span = span;\n        }\n\n        public length(): number {\n            return this.span.length();\n        }\n\n        public charCodeAt(position: number): number {\n            if (position < 0 || position > this.length()) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            return this.text.charCodeAt(this.span.start() + position);\n        }\n\n        public subText(span: TextSpan): IText {\n            this.checkSubSpan(span);\n\n            return new SubText(this.text, this.getCompositeSpan(span.start(), span.length()));\n        }\n\n        public copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            var span = this.getCompositeSpan(sourceIndex, count);\n            this.text.copyTo(span.start(), destination, destinationIndex, span.length());\n        }\n\n        private getCompositeSpan(start: number, length: number): TextSpan {\n            var compositeStart = MathPrototype.min(this.text.length(), this.span.start() + start);\n            var compositeEnd = MathPrototype.min(this.text.length(), compositeStart + length);\n            return new TextSpan(compositeStart, compositeEnd - compositeStart);\n        }\n    }\n\n    /// <summary>\n    /// Implementation of IText based on a <see cref=\"T:System.String\"/> input\n    /// </summary>\n    class StringText extends TextBase {\n        /// <summary>\n        /// Underlying string on which this IText instance is based\n        /// </summary>\n        private source: string = null;\n\n        /// <summary>\n        /// Initializes an instance of <see cref=\"T:StringText\"/> with provided data.\n        /// </summary>\n        constructor(data: string) {\n            super();\n\n            if (data === null) {\n                throw Errors.argumentNull(\"data\");\n            }\n\n            this.source = data;\n        }\n\n        /// <summary>\n        /// The length of the text represented by <see cref=\"T:StringText\"/>.\n        /// </summary>\n        public length(): number {\n            return this.source.length;\n        }\n\n        /// <summary>\n        /// Returns a character at given position.\n        /// </summary>\n        /// <param name=\"position\">The position to get the character from.</param>\n        /// <returns>The character.</returns>\n        /// <exception cref=\"T:ArgumentOutOfRangeException\">When position is negative or \n        /// greater than <see cref=\"T:\"/> length.</exception>\n        public charCodeAt(position: number): number {\n            if (position < 0 || position >= this.source.length) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            return this.source.charCodeAt(position);\n        }\n\n        public substr(start: number, length: number, intern: bool) {\n            return this.source.substr(start, length);\n        }\n\n        /// <summary>\n        /// Provides a string representation of the StringText located within given span.\n        /// </summary>\n        /// <exception cref=\"T:ArgumentOutOfRangeException\">When given span is outside of the text range.</exception>\n        public toString(span: TextSpan = null): string {\n            if (span === null) {\n                span = new TextSpan(0, this.length());\n            }\n\n            this.checkSubSpan(span);\n\n            if (span.start() === 0 && span.length() === this.length()) {\n                return this.source;\n            }\n\n            return this.source.substr(span.start(), span.length());\n        }\n\n        public copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            StringUtilities.copyTo(this.source, sourceIndex, destination, destinationIndex, count);\n        }\n    }\n\n    export function createText(value: string): IText {\n        return new StringText(value);\n    }\n}\n\nmodule TypeScript.SimpleText {\n    /// <summary>\n    /// An IText that represents a subrange of another IText.\n    /// </summary>\n    class SimpleSubText implements ISimpleText {\n        private text: ISimpleText = null;\n        private span: TextSpan = null;\n\n        constructor(text: ISimpleText, span: TextSpan) {\n            if (text === null) {\n                throw Errors.argumentNull(\"text\");\n            }\n\n            if (span.start() < 0 ||\n                span.start() >= text.length() ||\n                 span.end() < 0 ||\n                 span.end() > text.length()) {\n                throw Errors.argument(\"span\");\n            }\n\n            this.text = text;\n            this.span = span;\n        }\n\n        private checkSubSpan(span: TextSpan): void {\n            if (span.start() < 0 || span.start() > this.length() || span.end() > this.length()) {\n                throw Errors.argumentOutOfRange(\"span\");\n            }\n        }\n\n        private checkSubPosition(position: number): void {\n            if (position < 0 || position >= this.length()) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n        }\n\n        public length(): number {\n            return this.span.length();\n        }\n\n        public subText(span: TextSpan): ISimpleText {\n            this.checkSubSpan(span);\n\n            return new SimpleSubText(this.text, this.getCompositeSpan(span.start(), span.length()));\n        }\n\n        public copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            var span = this.getCompositeSpan(sourceIndex, count);\n            this.text.copyTo(span.start(), destination, destinationIndex, span.length());\n        }\n\n        public substr(start: number, length: number, intern: bool): string {\n            var span = this.getCompositeSpan(start, length);\n            return this.text.substr(span.start(), span.length(), intern);\n        }\n\n        private getCompositeSpan(start: number, length: number): TextSpan {\n            var compositeStart = MathPrototype.min(this.text.length(), this.span.start() + start);\n            var compositeEnd = MathPrototype.min(this.text.length(), compositeStart + length);\n            return new TextSpan(compositeStart, compositeEnd - compositeStart);\n        }\n\n        public charCodeAt(index: number): number {\n            this.checkSubPosition(index);\n            return this.text.charCodeAt(this.span.start() + index);\n        }\n\n        public lineMap(): LineMap {\n            return LineMap.fromSimpleText(this);\n        }\n    }\n\n    class SimpleStringText implements ISimpleText {\n        constructor(private value: string) {\n        }\n\n        public length(): number {\n            return this.value.length;\n        }\n\n        public copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            StringUtilities.copyTo(this.value, sourceIndex, destination, destinationIndex, count);\n        }\n\n        private static charArray: number[] = ArrayUtilities.createArray(1024, 0);\n\n        public substr(start: number, length: number, intern: bool): string {\n            if (intern) {\n                // use a shared array instance of the length of this substring isn\'t too large.\n                var array = length <= SimpleStringText.charArray.length\n                    ? SimpleStringText.charArray\n                    : ArrayUtilities.createArray(length, /*defaultValue:*/0);\n                this.copyTo(start, array, 0, length);\n                return Collections.DefaultStringTable.addCharArray(array, 0, length);\n            }\n\n            return this.value.substr(start, length);\n        }\n\n        public subText(span: TextSpan): ISimpleText {\n            return new SimpleSubText(this, span);\n        }\n\n        public charCodeAt(index: number): number {\n            return this.value.charCodeAt(index);\n        }\n\n        public lineMap(): LineMap {\n            return LineMap.fromSimpleText(this);\n        }\n    }\n\n    // Class which wraps a host IScriptSnapshot and exposes an ISimpleText for newer compiler code. \n    class SimpleScriptSnapshotText implements ISimpleText {\n\n        constructor(public scriptSnapshot: IScriptSnapshot) {\n        }\n\n        public charCodeAt(index: number): number {\n            return this.scriptSnapshot.getText(index, index + 1).charCodeAt(0);\n        }\n\n        public length(): number {\n            return this.scriptSnapshot.getLength();\n        }\n\n        public copyTo(sourceIndex: number, destination: number[], destinationIndex: number, count: number): void {\n            var text = this.scriptSnapshot.getText(sourceIndex, sourceIndex + count);\n            StringUtilities.copyTo(text, 0, destination, destinationIndex, count);\n        }\n\n        public substr(start: number, length: number, intern: bool): string {\n            return this.scriptSnapshot.getText(start, start + length);\n        }\n\n        public subText(span: TextSpan): ISimpleText {\n            return new SimpleSubText(this, span);\n        }\n\n        public lineMap(): LineMap {\n            var lineStartPositions = this.scriptSnapshot.getLineStartPositions();\n            return new LineMap(lineStartPositions, this.length());\n        }\n    }\n\n    export function fromString(value: string): ISimpleText {\n        return new SimpleStringText(value);\n    }\n\n    export function fromScriptSnapshot(scriptSnapshot: IScriptSnapshot): ISimpleText {\n        return new SimpleScriptSnapshotText(scriptSnapshot);\n    }\n}\n   \n///<reference path=\'References.ts\' />\n\nmodule TypeScript.TextUtilities {\n    export function parseLineStarts(text: ISimpleText): number[]{\n        var length = text.length();\n\n        // Corner case check\n        if (0 === length) {\n            var result: number[] = [];\n            result.push(0);\n            return result;\n        }\n\n        var position = 0;\n        var index = 0;\n        var arrayBuilder: number[] = [];\n        var lineNumber = 0;\n\n        // The following loop goes through every character in the text. It is highly\n        // performance critical, and thus inlines knowledge about common line breaks\n        // and non-line breaks.\n        while (index < length) {\n            var c = text.charCodeAt(index);\n            var lineBreakLength;\n\n            // common case - ASCII & not a line break\n            if (c > CharacterCodes.carriageReturn && c <= 127) {\n                index++;\n                continue;\n            }\n            else if (c === CharacterCodes.carriageReturn && index + 1 < length && text.charCodeAt(index + 1) === CharacterCodes.lineFeed) {\n                lineBreakLength = 2;\n            }\n            else if (c === CharacterCodes.lineFeed) {\n                lineBreakLength = 1;\n            }\n            else {\n                lineBreakLength = TextUtilities.getLengthOfLineBreak(text, index);\n            }\n\n            if (0 === lineBreakLength) {\n                index++;\n            }\n            else {\n                arrayBuilder.push(position);\n                index += lineBreakLength;\n                position = index;\n                lineNumber++;\n            }\n        }\n\n        // Create a start for the final line.  \n        arrayBuilder.push(position);\n\n        return arrayBuilder;\n    }\n\n    export function getLengthOfLineBreakSlow(text: ISimpleText, index: number, c: number): number {\n        if (c === CharacterCodes.carriageReturn) {\n            var next = index + 1;\n            return (next < text.length()) && CharacterCodes.lineFeed === text.charCodeAt(next) ? 2 : 1;\n        }\n        else if (isAnyLineBreakCharacter(c)) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    export function getLengthOfLineBreak(text: ISimpleText, index: number): number {\n        var c = text.charCodeAt(index);\n\n        // common case - ASCII & not a line break\n        if (c > CharacterCodes.carriageReturn && c <= 127) {\n            return 0;\n        }\n\n        return getLengthOfLineBreakSlow(text, index, c);\n    }\n\n    export function isAnyLineBreakCharacter(c: number): bool {\n        return c === CharacterCodes.lineFeed ||\n               c === CharacterCodes.carriageReturn ||\n               c === CharacterCodes.nextLine ||\n               c === CharacterCodes.lineSeparator ||\n               c === CharacterCodes.paragraphSeparator;\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class TextSpan {\n        private _start: number;\n        private _length: number;\n\n        /// <summary>\n        /// Creates a TextSpan instance beginning with the position Start and having the Length\n        /// specified with length.\n        /// </summary>\n        constructor(start: number, length: number) {\n            if (start < 0) {\n                Errors.argument(\"start\");\n            }\n\n            if (start + length < start) {\n                throw new Error(\"length\");\n            }\n\n            this._start = start;\n            this._length = length;\n        }\n\n        public start(): number {\n            return this._start;\n        }\n\n        public length(): number {\n            return this._length;\n        }\n\n        public end(): number {\n            return this._start + this._length;\n        }\n\n        public isEmpty(): bool {\n            return this._length === 0;\n        }\n\n        /// <summary>\n        /// Determines whether the position lies within the span.\n        /// </summary>\n        /// <param name=\"position\">\n        /// The position to check.\n        /// </param>\n        /// <returns>\n        /// <c>true</c> if the position is greater than or equal to Start and strictly less \n        /// than End, otherwise <c>false</c>.\n        /// </returns>\n        public containsPosition(position: number): bool {\n            return position >= this._start && position < this.end();\n        }\n\n        /// <summary>\n        /// Determines whether <paramref name=\"span\"/> falls completely within this span.\n        /// </summary>\n        /// <param name=\"span\">\n        /// The span to check.\n        /// </param>\n        /// <returns>\n        /// <c>true</c> if the specified span falls completely within this span, otherwise <c>false</c>.\n        /// </returns>\n        public containsTextSpan(span: TextSpan): bool {\n            return span._start >= this._start && span.end() <= this.end();\n        }\n\n        /// <summary>\n        /// Determines whether <paramref name=\"span\"/> overlaps this span. Two spans are considered to overlap \n        /// if they have positions in common and neither is empty. Empty spans do not overlap with any \n        /// other span.\n        /// </summary>\n        /// <param name=\"span\">\n        /// The span to check.\n        /// </param>\n        /// <returns>\n        /// <c>true</c> if the spans overlap, otherwise <c>false</c>.\n        /// </returns>\n        public overlapsWith(span: TextSpan): bool {\n            var overlapStart = MathPrototype.max(this._start, span._start);\n            var overlapEnd = MathPrototype.min(this.end(), span.end());\n\n            return overlapStart < overlapEnd;\n        }\n\n        /// <summary>\n        /// Returns the overlap with the given span, or null if there is no overlap.\n        /// </summary>\n        /// <param name=\"span\">\n        /// The span to check.\n        /// </param>\n        /// <returns>\n        /// The overlap of the spans, or null if the overlap is empty.\n        /// </returns>\n        public overlap(span: TextSpan): TextSpan {\n            var overlapStart = MathPrototype.max(this._start, span._start);\n            var overlapEnd = MathPrototype.min(this.end(), span.end());\n\n            if (overlapStart < overlapEnd) {\n                return TextSpan.fromBounds(overlapStart, overlapEnd);\n            }\n\n            return null;\n        }\n\n        /// <summary>\n        /// Determines whether <paramref name=\"span\"/> intersects this span. Two spans are considered to \n        /// intersect if they have positions in common or the end of one span \n        /// coincides with the start of the other span.\n        /// </summary>\n        /// <param name=\"span\">\n        /// The span to check.\n        /// </param>\n        /// <returns>\n        /// <c>true</c> if the spans intersect, otherwise <c>false</c>.\n        /// </returns>\n        public intersectsWithTextSpan(span: TextSpan): bool {\n            return span._start <= this.end() && span.end() >= this._start;\n        }\n\n        public intersectsWith(start: number, length: number): bool {\n            var end = start + length;\n            return start <= this.end() && end >= this._start;\n        }\n\n        /// <summary>\n        /// Determines whether <paramref name=\"position\"/> intersects this span. \n        /// A position is considered to intersect if it is between the start and\n        /// end positions (inclusive) of this span.\n        /// </summary>\n        /// <param name=\"position\">\n        /// The position to check.\n        /// </param>\n        /// <returns>\n        /// <c>true</c> if the position intersects, otherwise <c>false</c>.\n        /// </returns>\n        public intersectsWithPosition(position: number): bool {\n            return position <= this.end() && position >= this._start;\n        }\n\n        /// <summary>\n        /// Returns the intersection with the given span, or null if there is no intersection.\n        /// </summary>\n        /// <param name=\"span\">\n        /// The span to check.\n        /// </param>\n        /// <returns>\n        /// The intersection of the spans, or null if the intersection is empty.\n        /// </returns>\n        public intersection(span: TextSpan): TextSpan {\n            var intersectStart = MathPrototype.max(this._start, span._start);\n            var intersectEnd = MathPrototype.min(this.end(), span.end());\n\n            if (intersectStart <= intersectEnd) {\n                return TextSpan.fromBounds(intersectStart, intersectEnd);\n            }\n\n            return null;\n        }\n\n        /// <summary>\n        /// Creates a new <see cref=\"T:TextSpan\"/> from <param name=\"start\" /> and <param\n        /// name=\"end\"/> positions as opposed to a position and length.\n        /// </summary>\n        public static fromBounds(start: number, end: number): TextSpan {\n            Contract.requires(start >= 0);\n            Contract.requires(end - start >= 0);\n            return new TextSpan(start, end - start);\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class TextChangeRange {\n        public static unchanged = new TextChangeRange(new TextSpan(0, 0), 0);\n\n        private _span: TextSpan;\n        private _newLength: number;\n\n        /// <summary>\n        /// Initializes a new instance of <see cref=\"T:TextChangeRange\"/>.\n        /// </summary>\n        /// <param name=\"span\"></param>\n        /// <param name=\"newLength\"></param>\n        constructor(span: TextSpan, newLength: number) {\n            if (newLength < 0) {\n                throw Errors.argumentOutOfRange(\"newLength\");\n            }\n\n            this._span = span;\n            this._newLength = newLength;\n        }\n\n        /// <summary>\n        /// The span of text before the edit which is being changed\n        /// </summary>\n        public span(): TextSpan {\n            return this._span;\n        }\n\n        /// <summary>\n        /// Width of the span after the edit.  A 0 here would represent a delete\n        /// </summary>\n        public newLength(): number {\n            return this._newLength;\n        }\n\n        public newSpan(): TextSpan {\n            return new TextSpan(this.span().start(), this.newLength());\n        }\n\n        public isUnchanged(): bool {\n            return this.span().isEmpty() && this.newLength() === 0;\n        }\n\n        /// <summary>\n        /// Called to merge all the changes that occurred between one version of a script snapshot to \n        /// the next into a single change.  i.e. say a user did a box selection and made an edit.  That\n        /// will show up as N text change ranges between version V of a script and version V+1.  This\n        /// function collapses those N changes into a single change range valid between V and V+1.\n        /// </summary>\n        public static collapseChangesFromSingleVersion(changes: TextChangeRange[]): TextChangeRange {\n            var diff = 0;\n            var start = Constants.Max31BitInteger;\n            var end = 0;\n\n            // TODO: we are assuming that changes are normalized. That is currently not guaranteed,\n            // but changes that we get from IDE are normalized. Idealy changes should come in a kind\n            // of normalized change collection instead of IEnumerable to really guarantee that they\n            // are normalized.\n            for (var i = 0; i < changes.length; i++) {\n                var change = changes[i];\n                diff += change.newLength() - change.span().length();\n\n                if (change.span().start() < start) {\n                    start = change.span().start();\n                }\n\n                if (change.span().end() > end) {\n                    end = change.span().end();\n                }\n            }\n\n            if (start > end) {\n                return null;\n            }\n\n            var combined = TextSpan.fromBounds(start, end);\n            var newLen = combined.length() + diff;\n\n            return new TextChangeRange(combined, newLen);\n        }\n\n        /// <summary>\n        /// Called to merge all the changes that occurred across several versions of a script snapshot \n        /// into a single change.  i.e. if a user keeps making successive edits to a script we will\n        /// have a text change from V1 to V2, V2 to V3, ..., Vn.  \n        /// \n        /// This function will then merge those changes into a single change range valid between V1 and\n        /// Vn.\n        /// </summary>\n        public static collapseChangesAcrossMultipleVersions(changes: TextChangeRange[]): TextChangeRange {\n            if (changes.length == 0) {\n                return TextChangeRange.unchanged;\n            }\n\n            if (changes.length == 1) {\n                return changes[0];\n            }\n\n            // We change from talking about { { oldStart, oldLength }, newLength } to { oldStart, oldEnd, newEnd }\n            // as it makes things much easier to reason about.\n            var change0 = changes[0];\n\n            var oldStartN = change0.span().start();\n            var oldEndN = change0.span().end();\n            var newEndN = oldStartN + change0.newLength();\n\n            for (var i = 1; i < changes.length; i++) {\n                var nextChange = changes[i];\n\n                // Consider the following case:\n                // i.e. two edits.  The first represents the text change range { { 10, 50 }, 30 }.  i.e. The span starting\n                // at 10, with length 50 is reduced to length 30.  The second represents the text change range { { 30, 30 }, 40 }.\n                // i.e. the span starting at 30 with length 30 is increased to length 40.\n                //\n                //      0         10        20        30        40        50        60        70        80        90        100\n                //      -------------------------------------------------------------------------------------------------------\n                //                |                                                 /                                          \n                //                |                                            /----                                           \n                //  T1            |                                       /----                                                \n                //                |                                  /----                                                     \n                //                |                             /----                                                          \n                //      -------------------------------------------------------------------------------------------------------\n                //                                     |                            \\                                          \n                //                                     |                               \\                                       \n                //   T2                                |                                 \\                                     \n                //                                     |                                   \\                                   \n                //                                     |                                      \\                                \n                //      -------------------------------------------------------------------------------------------------------\n                //\n                // Merging these turns out to not be too difficult.  First, determining the new start of the change is trivial\n                // it\'s just the min of the old and new starts.  i.e.:\n                //\n                //      0         10        20        30        40        50        60        70        80        90        100\n                //      ------------------------------------------------------------*------------------------------------------\n                //                |                                                 /                                          \n                //                |                                            /----                                           \n                //  T1            |                                       /----                                                \n                //                |                                  /----                                                     \n                //                |                             /----                                                          \n                //      ----------------------------------------$-------------------$------------------------------------------\n                //                .                    |                            \\                                          \n                //                .                    |                               \\                                       \n                //   T2           .                    |                                 \\                                     \n                //                .                    |                                   \\                                   \n                //                .                    |                                      \\                                \n                //      ----------------------------------------------------------------------*--------------------------------\n                //\n                // (Note the dots represent the newly inferrred start.\n                // Determining the new and old end is also pretty simple.  Basically it boils down to paying attention to the\n                // absolute positions at the asterixes, and the relative change between the dollar signs. Basically, we see\n                // which if the two $\'s precedes the other, and we move that one forward until they line up.  in this case that\n                // means:\n                //\n                //      0         10        20        30        40        50        60        70        80        90        100\n                //      --------------------------------------------------------------------------------*----------------------\n                //                |                                                                     /                      \n                //                |                                                                /----                       \n                //  T1            |                                                           /----                            \n                //                |                                                      /----                                 \n                //                |                                                 /----                                      \n                //      ------------------------------------------------------------$------------------------------------------\n                //                .                    |                            \\                                          \n                //                .                    |                               \\                                       \n                //   T2           .                    |                                 \\                                     \n                //                .                    |                                   \\                                   \n                //                .                    |                                      \\                                \n                //      ----------------------------------------------------------------------*--------------------------------\n                //\n                // In other words (in this case), we\'re recognizing that the second edit happened after where the first edit\n                // ended with a delta of 20 characters (60 - 40).  Thus, if we go back in time to where the first edit started\n                // that\'s the same as if we started at char 80 instead of 60.  \n                //\n                // As it so happens, the same logic applies if the second edit precedes the first edit.  In that case rahter\n                // than pusing the first edit forward to match the second, we\'ll push the second edit forward to match the\n                // first.\n                //\n                // In this case that means we have { oldStart: 10, oldEnd: 80, newEnd: 70 } or, in TextChangeRange\n                // semantics: { { start: 10, length: 70 }, newLength: 60 }\n                //\n                // The math then works out as follows.\n                // If we have { oldStart1, oldEnd1, newEnd1 } and { oldStart2, oldEnd2, newEnd2 } then we can compute the \n                // final result like so:\n                //\n                // {\n                //      oldStart3: Min(oldStart1, oldStart2),\n                //      oldEnd3  : Max(oldEnd1, oldEnd1 + (oldEnd2 - newEnd1)),\n                //      newEnd3  : Max(newEnd2, newEnd2 + (newEnd1 - oldEnd2))\n                // }\n\n                var oldStart1 = oldStartN;\n                var oldEnd1 = oldEndN;\n                var newEnd1 = newEndN;\n\n                var oldStart2 = nextChange.span().start();\n                var oldEnd2 = nextChange.span().end();\n                var newEnd2 = oldStart2 + nextChange.newLength();\n\n                oldStartN = MathPrototype.min(oldStart1, oldStart2);\n                oldEndN = MathPrototype.max(oldEnd1, oldEnd1 + (oldEnd2 - newEnd1));\n                newEndN = MathPrototype.max(newEnd2, newEnd2 + (newEnd1 - oldEnd2));\n            }\n\n            return new TextChangeRange(TextSpan.fromBounds(oldStartN, oldEndN), /*newLength: */newEndN - oldStartN);\n        }\n    }\n}\n///<reference path=\'..\\Core\\References.ts\' />\n\n///<reference path=\'CharacterCodes.ts\' />\n///<reference path=\'ILineAndCharacter.ts\' />\n///<reference path=\'IScriptSnapshot.ts\' />\n///<reference path=\'IText.ts\' />\n///<reference path=\'ITextLine.ts\' />\n///<reference path=\'LineMap.ts\' />\n///<reference path=\'LinePosition.ts\' />\n///<reference path=\'TextFactory.ts\' />\n///<reference path=\'TextUtilities.ts\' />\n///<reference path=\'TextSpan.ts\' />\n\n// TextChangeRange depends on TextSpan.\n///<reference path=\'TextChangeRange.ts\' />\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    // Represents an immutable snapshot of a script at a specified time.  Once acquired, the \n    // snapshot is observably immutable.  i.e. the same calls with the same parameters will return\n    // the same values.\n    export interface IScriptSnapshot {\n        // Get\'s a portion of the script snapshot specified by [start, end).  \n        getText(start: number, end: number): string;\n\n        // Get\'s the length of this script snapshot.\n        getLength(): number;\n\n        // This call returns the array containing the start position of every line.  \n        // i.e.\"[0, 10, 55]\".  TODO: consider making this optional.  The language service could\n        // always determine this (albeit in a more expensive manner).\n        getLineStartPositions(): number[];\n\n        // Returns a text change range representing what text has changed since the specified version.\n        // If the change cannot be determined (say, because a file was opened/closed), then \'null\' \n        // should be returned.\n        getTextChangeRangeSinceVersion(scriptVersion: number): TextChangeRange;\n    }\n\n    export module ScriptSnapshot {\n        class StringScriptSnapshot implements IScriptSnapshot {\n            constructor(private text: string) {\n            }\n\n            public getText(start: number, end: number): string {\n                return this.text.substring(start, end);\n            }\n\n            public getLength(): number {\n                return this.text.length;\n            }\n\n            public getLineStartPositions(): number[] {\n                return TextUtilities.parseLineStarts(SimpleText.fromString(this.text));\n            }\n\n            public getTextChangeRangeSinceVersion(scriptVersion: number): TypeScript.TextChangeRange {\n                throw Errors.notYetImplemented();\n            }\n        }\n\n        export function fromString(text: string): IScriptSnapshot {\n            return new StringScriptSnapshot(text);\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n///<reference path=\'Text\\IScriptSnapshot.ts\' />\n\nmodule TypeScript {\n\n    /// Compiler settings\n\n    export class StyleSettings {\n        // bitwise operations not permitted\n        public bitwise = false;  \n        // disallow non-block statements as bodies of compound statements\n        public blockInCompoundStmt = false;\n        // disallow == and !=\n        public eqeqeq = false;\n        // require body of for in loop to start with a filter\n        public forin = false;\n        // empty blocks permitted\n        public emptyBlocks = true;\n        // require result of new expression to be used (no new just for side-effects)\n        public newMustBeUsed = false;\n        // require semicolons to terminate statements\n        public requireSemi = false;\n        // no top-level assignment in conditionals if (a=b) { ...\n        public assignmentInCond = false;\n        // no == null or != null\n        public eqnull = false;\n        // permit eval\n        public evalOK = true;\n        // permit var use if decl in inner scope as in if (c) { var v=10; } v=11;\n        public innerScopeDeclEscape = true;\n        // permit functions in loops\n        public funcInLoop = true;\n        // permit re-declaration of local variable \n        public reDeclareLocal = true;\n        // permit obj[\'x\'] in addition to obj.x\n        public literalSubscript = true;\n        // flag implicit \'any\'\n        public implicitAny = false;\n\n        public setOption(opt: string, val: bool): bool {\n            var optExists = this[opt];\n            if (optExists !== undefined) {\n                this[opt] = val;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        \n        public parseOptions(str: string) {\n            var opts=str.split(\";\");\n            for (var i = 0, len = opts.length; i < len; i++) {\n                var opt = opts[i];\n                var val = true;\n                var colonIndex=opt.lastIndexOf(\":\");\n                if (colonIndex >= 0) {\n                    var valStr = opt.substring(colonIndex+1);\n                    opt = opt.substring(0, colonIndex);\n                    if (valStr == \"off\") {\n                        val = false;\n                    }\n                }\n                if (!this.setOption(opt, val)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    \n    export class CompilationSettings {\n        public styleSettings = new StyleSettings();\n        public propagateConstants = false;\n        public minWhitespace = false;\n        public emitComments = false;\n        public watch = false;\n        public exec = false;\n        public resolve = true;\n        public controlFlow = false;\n        public printControlFlow = false;\n        public controlFlowUseDef = false;\n        public errorOnWith = true;\n        public canCallDefinitionSignature = false;\n\n        public useDefaultLib = true;\n\n        public codeGenTarget = LanguageVersion.EcmaScript3;\n        public moduleGenTarget = ModuleGenTarget.Synchronous;\n        public optimizeModuleCodeGen = true;\n\n        // --out option passed. \n        // Default is the \"\" which leads to multiple files generated next to the.ts files\n        public outputOption: string = \"\";\n        public mapSourceFiles = false;\n        public emitFullSourceMapPath = false; // By default emit relative path of the soucemap\n        public generateDeclarationFiles = false;\n\n        public useCaseSensitiveFileResolution = false;\n        public gatherDiagnostics = false;\n\n        public updateTC = false;\n\n        public setStyleOptions(str: string) {\n            this.styleSettings.parseOptions(str);\n        }\n    }\n\n    ///\n    /// Preprocessing\n    ///\n    export interface IPreProcessedFileInfo {\n        settings: CompilationSettings;\n        referencedFiles: IFileReference[];\n        importedFiles: IFileReference[];\n        isLibFile: bool;\n    }\n\n    export interface ITripleSlashDirectiveProperties {\n        noDefaultLib: bool;\n    }\n\n    function getFileReferenceFromReferencePath(comment: string): IFileReference {\n        var referencesRegEx = /^(\\/\\/\\/\\s*<reference\\s+path=)(\'|\")(.+?)\\2\\s*(static=(\'|\")(.+?)\\2\\s*)*\\/>/gim;\n        var match = referencesRegEx.exec(comment);\n\n        if (match) {\n            var path: string = normalizePath(match[3]);\n            var adjustedPath = normalizePath(path);\n    \n            var isResident = match.length >= 7 && match[6] == \"true\";\n            if (isResident) {\n                CompilerDiagnostics.debugPrint(path + \" is resident\");\n            }\n            return {\n                line: 0,\n                character: 0,\n                position: 0,\n                length: 0,\n                path: switchToForwardSlashes(adjustedPath),\n                isResident: isResident\n            };\n        }\n        else {\n            return null;\n        }\n    }\n\n    // used in the parser, but kept here in case we want to reintegrate it with preprocessing\n    export function getAdditionalDependencyPath(comment: string): string {\n        var amdDependencyRegEx = /^(\\/\\/\\/\\s*<amd-dependency\\s+path=)(\'|\")(.+?)\\2\\s*(static=(\'|\")(.+?)\\2\\s*)*\\/>/gim;\n        var match = amdDependencyRegEx.exec(comment);\n\n        if (match) {\n            var path: string = match[3];\n            return path;\n        }\n        else {\n            return null;\n        }\n    }\n\n    export function getImplicitImport(comment: string): bool {\n        var implicitImportRegEx = /^(\\/\\/\\/\\s*<implicit-import\\s*)*\\/>/gim;\n        var match = implicitImportRegEx.exec(comment);\n\n        if (match) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    export function getStyleSettings(comment: string, styleSettings: StyleSettings) {\n        var styleRegEx = /^(\\/\\/\\/\\s*<style\\s+)(([a-zA-Z])+=(\'|\").+(\'|\"))\\s*\\/>/gim;\n\n        var settings = styleRegEx.exec(comment);\n\n        if (settings) {\n            var settingsRegEx = /^([a-zA-Z]+=[\'\"]on[\'|\"])/gim;\n            settings = settingsRegEx.exec(settings[2]);\n                \n            if (settings) {\n                for (var i = 0; i < settings.length; i++) {\n                    var setting = (<string>settings[i]).split(\"=\");\n                    var on = \"\\\"on\\\"\";\n\n                    switch (setting[0]) {\n                        case \"blockInCompoundStmt\": styleSettings.blockInCompoundStmt = setting[1] == on; break;\n                        case \"eqeqeq\": styleSettings.eqeqeq = setting[1] == on; break;\n                        case \"forin\": styleSettings.forin = setting[1] == on; break;\n                        case \"emptyBlocks\": styleSettings.emptyBlocks = setting[1] == on; break;\n                        case \"newMustBeUsed\": styleSettings.newMustBeUsed = setting[1] == on; break;\n                        case \"requireSemi\": styleSettings.requireSemi = setting[1] == on; break;\n                        case \"assignmentInCond\": styleSettings.assignmentInCond = setting[1] == on; break;\n                        case \"eqnull\": styleSettings.eqnull = setting[1] == on; break;\n                        case \"evalOK\": styleSettings.evalOK = setting[1] == on; break;\n                        case \"innerScopeDeclEscape\": styleSettings.innerScopeDeclEscape = setting[1] == on; break;\n                        case \"funcInLoop\": styleSettings.funcInLoop = setting[1] == on; break;\n                        case \"reDeclareLocal\": styleSettings.reDeclareLocal = setting[1] == on; break;\n                        case \"literalSubscript\": styleSettings.literalSubscript = setting[1] == on; break;\n                        case \"implicitAny\": styleSettings.implicitAny = setting[1] == on; break;                               \n                    }\n                }\n            }\n        }\n    }\n\n    export function getReferencedFiles(fileName: string, sourceText: IScriptSnapshot): IFileReference[] {\n        var preProcessInfo = preProcessFile(fileName, sourceText, null, false);\n        return preProcessInfo.referencedFiles;\n    }\n\n    var scannerWindow = ArrayUtilities.createArray(2048, 0);\n    var scannerDiagnostics = [];\n\n    function processImports(lineMap: LineMap, scanner: Scanner1, token: ISyntaxToken, importedFiles: IFileReference[]): void {\n        var position = 0;\n        var lineChar = { line: -1, character: -1 };\n\n        // Look for: \n        // import foo = module(\"foo\")\n        while (token.tokenKind !== SyntaxKind.EndOfFileToken) {\n            if (token.tokenKind === SyntaxKind.ImportKeyword) {\n                var importStart = position + token.leadingTriviaWidth();\n                token = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n\n                if (SyntaxFacts.isIdentifierNameOrAnyKeyword(token)) {\n                    token = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n\n                    if (token.tokenKind === SyntaxKind.EqualsToken) {\n                        token = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n\n                        if (token.tokenKind === SyntaxKind.ModuleKeyword) {\n                            token = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n\n                            if (token.tokenKind === SyntaxKind.OpenParenToken) {\n                                var afterOpenParenPosition = scanner.absoluteIndex();\n                                token = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n\n                                lineMap.fillLineAndCharacterFromPosition(importStart, lineChar);\n\n                                if (token.tokenKind === SyntaxKind.StringLiteral) {\n                                    var ref = {\n                                        line: lineChar.line,\n                                        character: lineChar.character,\n                                        position: afterOpenParenPosition + token.leadingTriviaWidth(),\n                                        length: token.width(),\n                                        path: stripQuotes(switchToForwardSlashes(token.text())),\n                                        isResident: false\n                                    };\n                                    importedFiles.push(ref);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            position = scanner.absoluteIndex();\n            token = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n        }\n    }\n\n    export function processTripleSlashDirectives(lineMap: LineMap, firstToken: ISyntaxToken, settings: CompilationSettings, referencedFiles: IFileReference[]): ITripleSlashDirectiveProperties {\n        var leadingTrivia = firstToken.leadingTrivia();\n\n        var position = 0;\n        var lineChar = { line: -1, character: -1 };\n        var noDefaultLib = false;\n\n        for (var i = 0, n = leadingTrivia.count(); i < n; i++) {\n            var trivia = leadingTrivia.syntaxTriviaAt(i);\n\n            if (trivia.kind() === SyntaxKind.SingleLineCommentTrivia) {\n                var triviaText = trivia.fullText();\n                var referencedCode = getFileReferenceFromReferencePath(triviaText);\n\n                if (referencedCode) {\n                    lineMap.fillLineAndCharacterFromPosition(position, lineChar);\n                    referencedCode.line = lineChar.line;\n                    referencedCode.character = lineChar.character;\n\n                    referencedFiles.push(referencedCode);\n                }\n\n                if (settings) {\n                    getStyleSettings(triviaText, settings.styleSettings);\n\n                    // is it a lib file?\n                    var isNoDefaultLibRegex = /^(\\/\\/\\/\\s*<reference\\s+no-default-lib=)(\'|\")(.+?)\\2\\s*\\/>/gim;\n                    var isNoDefaultLibMatch: any = isNoDefaultLibRegex.exec(triviaText);\n                    if (isNoDefaultLibMatch) {\n                        noDefaultLib = (isNoDefaultLibMatch[3] == \"true\");\n                    }\n                }\n            }\n\n            position += trivia.fullWidth();\n        }\n\n        return { noDefaultLib: noDefaultLib};\n    }\n\n    export function preProcessFile(fileName: string, sourceText: IScriptSnapshot, settings: CompilationSettings = new CompilationSettings(), readImportFiles = true): IPreProcessedFileInfo {\n        var text = SimpleText.fromScriptSnapshot(sourceText);\n        var scanner = new Scanner1(fileName, text, LanguageVersion.EcmaScript5, scannerWindow);\n\n        var firstToken = scanner.scan(scannerDiagnostics, /*allowRegularExpression:*/ false);\n\n        // only search out dynamic mods\n        // if you find a dynamic mod, ignore every other mod inside, until you balance rcurlies\n        // var position\n\n        var importedFiles: IFileReference[] = [];\n        if (readImportFiles) {\n            processImports(text.lineMap(), scanner, firstToken, importedFiles);\n        }\n        \n        var referencedFiles: IFileReference[] = [];\n        var properties  = processTripleSlashDirectives(text.lineMap(), firstToken, settings, referencedFiles);\n\n        scannerDiagnostics.length = 0;\n        return { settings:settings, referencedFiles: referencedFiles, importedFiles: importedFiles, isLibFile: properties.noDefaultLib };\n    }\n\n} // Tools\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\' />\n\nmodule TypeScript {\n    export class DeclFileWriter {\n        public onNewLine = true;\n        constructor(private declFile: ITextWriter) {\n        }\n\n        public Write(s: string) {\n            this.declFile.Write(s);\n            this.onNewLine = false;\n        }\n\n        public WriteLine(s: string) {\n            this.declFile.WriteLine(s);\n            this.onNewLine = true;\n        }\n\n        public Close() {\n            try {\n                this.declFile.Close();\n            }\n            catch (e) {\n                Emitter.throwEmitterError(e);\n            }\n        }\n    }\n    \n    export class DeclarationEmitter implements AstWalkerWithDetailCallback.AstWalkerDetailCallback {\n        public locationInfo: LocationInfo = null;\n        private declFile: DeclFileWriter = null;\n        private indenter = new Indenter();\n        private declarationContainerStack: AST[] = [];\n        private isDottedModuleName: bool[] = [];\n        private dottedModuleEmit: string;\n        private ignoreCallbackAst: AST = null;\n        private singleDeclFile: DeclFileWriter = null;\n        private varListCount: number = 0;\n\n        constructor(private emittingFileName: string,\n            isUTF8: bool,\n            private semanticInfoChain: SemanticInfoChain,\n            public emitOptions: EmitOptions) {\n            // Creating files can cause exceptions, report them.   \n            var file = this.createFile(emittingFileName, isUTF8);\n            this.declFile = new DeclFileWriter(file);\n        }\n\n        public close() {\n            try {\n                this.declFile.Close();\n            }\n            catch (e) {\n                Emitter.throwEmitterError(e);\n            }\n        }\n\n        private createFile(fileName: string, useUTF8: bool): ITextWriter {\n            try {\n                return this.emitOptions.ioHost.createFile(fileName, useUTF8);\n            }\n            catch (e) {\n                Emitter.throwEmitterError(e);\n            }\n        }\n\n        public emitDeclarations(script: TypeScript.Script): void {\n            AstWalkerWithDetailCallback.walk(script, this);\n        }\n\n        public getAstDeclarationContainer() {\n            return this.declarationContainerStack[this.declarationContainerStack.length - 1];\n        }\n\n        private emitDottedModuleName() {\n            return (this.isDottedModuleName.length === 0) ? false : this.isDottedModuleName[this.isDottedModuleName.length - 1];\n        }\n\n        private getIndentString(declIndent = false) {\n            if (this.emitOptions.compilationSettings.minWhitespace) {\n                return \"\";\n            }\n            else {\n                return this.indenter.getIndent();\n            }\n        }\n\n        private emitIndent() {\n            this.declFile.Write(this.getIndentString());\n        }\n\n        private canEmitSignature(declFlags: DeclFlags, canEmitGlobalAmbientDecl: bool = true, useDeclarationContainerTop: bool = true) {\n            var container: AST;\n            if (useDeclarationContainerTop) {\n                container = this.getAstDeclarationContainer();\n            } else {\n                container = this.declarationContainerStack[this.declarationContainerStack.length - 2];\n            }\n\n            if (container.nodeType === NodeType.ModuleDeclaration && !hasFlag(declFlags, DeclFlags.Exported)) {\n                return false;\n            }\n\n            if (!canEmitGlobalAmbientDecl && container.nodeType === NodeType.Script && hasFlag(declFlags, DeclFlags.Ambient)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        private canEmitPrePostAstSignature(declFlags: DeclFlags, astWithPrePostCallback: AST, preCallback: bool) {\n            if (this.ignoreCallbackAst) {\n                CompilerDiagnostics.assert(this.ignoreCallbackAst != astWithPrePostCallback, \"Ignore Callback AST mismatch\");\n                this.ignoreCallbackAst = null;\n                return false;\n            } else if (preCallback &&\n                !this.canEmitSignature(declFlags, true, preCallback)) {\n                this.ignoreCallbackAst = astWithPrePostCallback;\n                return false;\n            }\n\n            return true;\n        }\n\n        private getDeclFlagsString(declFlags: DeclFlags, typeString: string) {\n            var result = this.getIndentString();\n\n            // Static/public/private/global declare\n            if (hasFlag(declFlags, DeclFlags.Static)) {\n                if (hasFlag(declFlags, DeclFlags.Private)) {\n                    result += \"private \";\n                }\n                result += \"static \";\n            }\n            else {\n                if (hasFlag(declFlags, DeclFlags.Private)) {\n                    result += \"private \";\n                }\n                else if (hasFlag(declFlags, DeclFlags.Public)) {\n                    result += \"public \";\n                }\n                else {\n                    var emitDeclare = !hasFlag(declFlags, DeclFlags.Exported);\n\n                    // Emit export only for global export statements. \n                    // The container for this would be dynamic module which is whole file\n                    var container = this.getAstDeclarationContainer();\n                    if (container.nodeType === NodeType.ModuleDeclaration &&\n                        hasFlag((<ModuleDeclaration>container).getModuleFlags(), ModuleFlags.IsWholeFile) &&\n                        hasFlag(declFlags, DeclFlags.Exported)) {\n                        result += \"export \";\n                        emitDeclare = true;\n                    }\n\n                    // Emit declare if not interface declaration && is not from module\n                    if (emitDeclare && typeString != \"interface\") {\n                        result += \"declare \";\n                    }\n\n                    result += typeString + \" \";\n                }\n            }\n\n            return result;\n        }\n\n        private emitDeclFlags(declFlags: DeclFlags, typeString: string) {\n            this.declFile.Write(this.getDeclFlagsString(declFlags, typeString));\n        }\n\n        private canEmitTypeAnnotationSignature(declFlag: DeclFlags = DeclFlags.None) {\n            // Private declaration, shouldnt emit type any time.\n            return !hasFlag(declFlag, DeclFlags.Private);\n        }\n\n        private pushDeclarationContainer(ast: AST) {\n            this.declarationContainerStack.push(ast);\n        }\n\n        private popDeclarationContainer(ast: AST) {\n            CompilerDiagnostics.assert(ast != this.getAstDeclarationContainer(), \'Declaration container mismatch\');\n            this.declarationContainerStack.pop();\n        }\n\n        public emitTypeNamesMember(memberName: MemberName, emitIndent: bool = false) {\n            if (memberName.prefix === \"{ \") {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.WriteLine(\"{\");\n                this.indenter.increaseIndent();\n                emitIndent = true;\n            } else if (memberName.prefix != \"\") {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.Write(memberName.prefix);\n                emitIndent = false;\n            }\n\n            if (memberName.isString()) {\n                if (emitIndent) {\n                    this.emitIndent();\n                }\n                this.declFile.Write((<MemberNameString>memberName).text);\n            } else {\n                var ar = <MemberNameArray>memberName;\n                for (var index = 0; index < ar.entries.length; index++) {\n                    this.emitTypeNamesMember(ar.entries[index], emitIndent);\n                    if (ar.delim === \"; \") {\n                        this.declFile.WriteLine(\";\");\n                    }\n                }\n            }\n\n            if (memberName.suffix === \"}\") {\n                this.indenter.decreaseIndent();\n                this.emitIndent();\n                this.declFile.Write(memberName.suffix);\n            } else {\n                this.declFile.Write(memberName.suffix);\n            }\n        }\n\n        private emitTypeSignature(type: PullTypeSymbol) {\n            var declarationContainerAst = this.getAstDeclarationContainer();\n            var declarationPullSymbol = this.semanticInfoChain.getSymbolForAST(declarationContainerAst, this.locationInfo.fileName);\n            var typeNameMembers = type.getScopedNameEx(declarationPullSymbol);\n            this.emitTypeNamesMember(typeNameMembers);\n        }\n\n        private emitComment(comment: Comment) {\n            var text = comment.getText();\n            if (this.declFile.onNewLine) {\n                this.emitIndent();\n            } else if (!comment.isBlockComment) {\n                this.declFile.WriteLine(\"\");\n                this.emitIndent();\n            }\n            \n            this.declFile.Write(text[0]);\n\n            for (var i = 1; i < text.length; i++) {\n                this.declFile.WriteLine(\"\");\n                this.emitIndent();\n                this.declFile.Write(text[i]);\n            }\n\n            if (comment.endsLine || !comment.isBlockComment) {\n                this.declFile.WriteLine(\"\");\n            } else {\n                this.declFile.Write(\" \");\n            }\n        }\n\n        private emitDeclarationComments(ast: AST, endLine?: bool);\n        private emitDeclarationComments(symbol: Symbol, endLine?: bool);\n        private emitDeclarationComments(astOrSymbol, endLine = true) {\n            if (!this.emitOptions.compilationSettings.emitComments) {\n                return;\n            }\n\n            var declComments = <Comment[]>astOrSymbol.getDocComments();\n            this.writeDeclarationComments(declComments, endLine);\n        }\n\n        public writeDeclarationComments(declComments: Comment[], endLine = true) {\n            if (declComments.length > 0) {\n                for (var i = 0; i < declComments.length; i++) {\n                    this.emitComment(declComments[i]);\n                }\n\n                if (endLine) {\n                    if (!this.declFile.onNewLine) {\n                        this.declFile.WriteLine(\"\");\n                    }\n                } else {\n                    if (this.declFile.onNewLine) {\n                        this.emitIndent();\n                    }\n                }\n            }\n        }\n\n        public emitTypeOfBoundDecl(boundDecl: BoundDecl) {\n            var pullSymbol = this.semanticInfoChain.getSymbolForAST(boundDecl, this.locationInfo.fileName);\n            var type = pullSymbol.getType();\n            if (!type) {\n                // PULLTODO\n                return;\n            }\n            if (boundDecl.typeExpr || // Specified type expression\n                (boundDecl.init && type != this.semanticInfoChain.anyTypeSymbol)) { // Not infered any\n                this.declFile.Write(\": \");\n                this.emitTypeSignature(type);\n            }\n        }\n\n        public VarDeclCallback(pre: bool, varDecl: VarDecl): bool {\n            if (pre && this.canEmitSignature(ToDeclFlags(varDecl.getVarFlags()), false)) {\n                var interfaceMember = (this.getAstDeclarationContainer().nodeType === NodeType.InterfaceDeclaration);\n                this.emitDeclarationComments(varDecl);\n                if (!interfaceMember) {\n                    // If it is var list of form var a, b, c = emit it only if count > 0 - which will be when emitting first var\n                    // If it is var list of form  var a = varList count will be 0\n                    if (this.varListCount >= 0) {\n                        this.emitDeclFlags(ToDeclFlags(varDecl.getVarFlags()), \"var\");\n                        this.varListCount = -this.varListCount;\n                    }\n                    this.declFile.Write(varDecl.id.text);\n                } else {\n                    this.emitIndent();\n                    this.declFile.Write(varDecl.id.text);\n                    if (hasFlag(varDecl.id.getFlags(), ASTFlags.OptionalName)) {\n                        this.declFile.Write(\"?\");\n                    }\n                }\n\n                if (this.canEmitTypeAnnotationSignature(ToDeclFlags(varDecl.getVarFlags()))) {\n                    this.emitTypeOfBoundDecl(varDecl);\n                }\n               \n                // emitted one var decl\n                if (this.varListCount > 0) { this.varListCount--; } else if (this.varListCount < 0) { this.varListCount++; }\n\n                // Write ; or ,\n                if (this.varListCount < 0) {\n                    this.declFile.Write(\", \");\n                } else {\n                    this.declFile.WriteLine(\";\");\n                }\n            }\n            return false;\n        }\n\n        public BlockCallback(pre: bool, block: Block): bool {\n            if (!block.isStatementBlock) {\n                if (pre) {\n                    this.varListCount = block.statements.members.length;\n                } else {\n                    this.varListCount = 0;\n                }\n                return true;\n            }\n            return false;\n        }\n\n        private emitArgDecl(argDecl: ArgDecl, funcDecl: FuncDecl) {\n            this.emitDeclarationComments(argDecl, false);\n            this.declFile.Write(argDecl.id.text);\n            if (argDecl.isOptionalArg()) {\n                this.declFile.Write(\"?\");\n            }\n            if (this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.getFunctionFlags()))) {\n                this.emitTypeOfBoundDecl(argDecl);\n            }\n        }\n\n        public isOverloadedCallSignature(funcDecl: FuncDecl) {\n            var funcSymbol = this.semanticInfoChain.getSymbolForAST(funcDecl, this.locationInfo.fileName);\n            var funcTypeSymbol = funcSymbol.getType();\n            var signatures = funcTypeSymbol.getCallSignatures();\n            return signatures && signatures.length > 1;\n        }\n\n        public FuncDeclCallback(pre: bool, funcDecl: FuncDecl): bool {\n            if (!pre) {\n                return false;\n            }\n\n            if (funcDecl.isAccessor()) {\n                return this.emitPropertyAccessorSignature(funcDecl);\n            }\n\n            var isInterfaceMember = (this.getAstDeclarationContainer().nodeType === NodeType.InterfaceDeclaration);\n            var funcSymbol = this.semanticInfoChain.getSymbolForAST(funcDecl, this.locationInfo.fileName);\n            var funcTypeSymbol = funcSymbol.getType();\n            if (funcDecl.bod) {\n                var constructSignatures = funcTypeSymbol.getConstructSignatures();\n                if (constructSignatures && constructSignatures.length > 1) {\n                    return false;\n                }\n                else if (this.isOverloadedCallSignature(funcDecl)) {\n                    // This means its implementation of overload signature. do not emit\n                    return false;\n                }\n            } else if (!isInterfaceMember && hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Private) && this.isOverloadedCallSignature(funcDecl)) {\n                // Print only first overload of private function\n                var callSignatures = funcTypeSymbol.getCallSignatures();\n                Debug.assert(callSignatures && callSignatures.length > 1);\n                var firstSignature = callSignatures[0].isDefinition() ? callSignatures[1] : callSignatures[0];\n                var firstSignatureDecl = firstSignature.getDeclarations()[0];\n                var firstFuncDecl = <FuncDecl>PullHelpers.getASTForDecl(firstSignatureDecl, this.semanticInfoChain);\n                if (firstFuncDecl != funcDecl) {\n                    return false;\n                }\n            }\n\n            if (!this.canEmitSignature(ToDeclFlags(funcDecl.getFunctionFlags()), false)) {\n                return false;\n            }\n\n            var funcSignatureInfo = PullHelpers.getSignatureForFuncDecl(funcDecl, this.semanticInfoChain, this.locationInfo.fileName);\n            var funcSignature = funcSignatureInfo ? funcSignatureInfo.signature : null;\n            this.emitDeclarationComments(funcDecl);\n            if (funcDecl.isConstructor) {\n                this.emitIndent();\n                this.declFile.Write(\"constructor\");\n                this.emitTypeParameters(funcDecl.typeArguments, funcSignature);\n            }\n            else {\n                var id = funcDecl.getNameText();\n                if (!isInterfaceMember) {\n                    this.emitDeclFlags(ToDeclFlags(funcDecl.getFunctionFlags()), \"function\");\n                    if (id != \"__missing\" || !funcDecl.name || !funcDecl.name.isMissing()) {\n                        this.declFile.Write(id);\n                    } else if (funcDecl.isConstructMember()) {\n                        this.declFile.Write(\"new\");\n                    }\n                    this.emitTypeParameters(funcDecl.typeArguments, funcSignature);\n                } else {\n                    this.emitIndent();\n                    if (funcDecl.isConstructMember()) {\n                        this.declFile.Write(\"new\");\n                        this.emitTypeParameters(funcDecl.typeArguments, funcSignature);\n                    } else if (!funcDecl.isCallMember() && !funcDecl.isIndexerMember()) {\n                        this.declFile.Write(id);\n                        this.emitTypeParameters(funcDecl.typeArguments, funcSignature);\n                        if (hasFlag(funcDecl.name.getFlags(), ASTFlags.OptionalName)) {\n                            this.declFile.Write(\"? \");\n                        }\n                    } else {\n                        this.emitTypeParameters(funcDecl.typeArguments, funcSignature);\n                    }\n                }\n            }\n\n            if (!funcDecl.isIndexerMember()) {\n                this.declFile.Write(\"(\");\n            } else {\n                this.declFile.Write(\"[\");\n            }\n\n            this.indenter.increaseIndent();\n\n            if (funcDecl.arguments) {\n                var argsLen = funcDecl.arguments.members.length;\n                if (funcDecl.variableArgList) {\n                    argsLen--;\n                }\n                for (var i = 0; i < argsLen; i++) {\n                    var argDecl = <ArgDecl>funcDecl.arguments.members[i];\n                    this.emitArgDecl(argDecl, funcDecl);\n                    if (i < (argsLen - 1)) {\n                        this.declFile.Write(\", \");\n                    }\n                }\n            }\n\n            if (funcDecl.variableArgList) {\n                var lastArg = <ArgDecl>funcDecl.arguments.members[funcDecl.arguments.members.length - 1];\n                if (funcDecl.arguments.members.length > 1) {\n                    this.declFile.Write(\", ...\");\n                }\n                else {\n                    this.declFile.Write(\"...\");\n                }\n                this.emitArgDecl(lastArg, funcDecl);\n            }\n\n            this.indenter.decreaseIndent();\n\n            if (!funcDecl.isIndexerMember()) {\n                this.declFile.Write(\")\");\n            } else {\n                this.declFile.Write(\"]\");\n            }\n\n            if (!funcDecl.isConstructor &&\n                this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.getFunctionFlags()))) {\n                var returnType = funcSignature.getReturnType();\n                if (funcDecl.returnTypeAnnotation ||\n                    (returnType && returnType != this.semanticInfoChain.anyTypeSymbol)) {\n                    this.declFile.Write(\": \");\n                    this.emitTypeSignature(returnType);\n                }\n            }\n\n            this.declFile.WriteLine(\";\");\n\n            return false;\n        }\n\n        public emitBaseExpression(bases: ASTList, index: number, useExtendsList: bool) {\n            var containerAst = this.getAstDeclarationContainer();\n            var containerSymbol = <PullTypeSymbol>this.semanticInfoChain.getSymbolForAST(containerAst, this.locationInfo.fileName);\n            var baseType: PullTypeSymbol\n            if (useExtendsList) {\n                baseType = containerSymbol.getExtendedTypes()[index];\n            } else {\n                baseType = containerSymbol.getImplementedTypes()[index];\n            }\n\n            if (baseType) {\n                this.emitTypeSignature(baseType);\n            }\n        }\n\n        private emitBaseList(typeDecl: TypeDeclaration, useExtendsList: bool) {\n            var bases = useExtendsList ? typeDecl.extendsList : typeDecl.implementsList;\n            if (bases && (bases.members.length > 0)) {\n                var qual = useExtendsList ? \"extends\" : \"implements\";\n                this.declFile.Write(\" \" + qual + \" \");\n                var basesLen = bases.members.length;\n                for (var i = 0; i < basesLen; i++) {\n                    if (i > 0) {\n                        this.declFile.Write(\", \");\n                    }\n                    this.emitBaseExpression(bases, i, useExtendsList);\n                }\n            }\n        }\n\n        private emitAccessorDeclarationComments(funcDecl: FuncDecl) {\n            if (!this.emitOptions.compilationSettings.emitComments) {\n                return;\n            }\n\n            var accessors = PullHelpers.getGetterAndSetterFunction(funcDecl, this.semanticInfoChain, this.locationInfo.fileName);\n            var comments: Comment[] = [];\n            if (accessors.getter) {\n                comments = comments.concat(accessors.getter.getDocComments());\n            }\n            if (accessors.setter) {\n                comments = comments.concat(accessors.setter.getDocComments());\n            }\n            this.writeDeclarationComments(comments);\n        }\n\n        public emitPropertyAccessorSignature(funcDecl: FuncDecl) {\n            var accessorSymbol = PullHelpers.getAccessorSymbol(funcDecl, this.semanticInfoChain, this.locationInfo.fileName);\n            if (!hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.GetAccessor) && accessorSymbol.getGetter()) {\n                // Setter is being used to emit the type info. \n                return false;\n            }\n\n            this.emitAccessorDeclarationComments(funcDecl);\n            this.emitDeclFlags(ToDeclFlags(funcDecl.getFunctionFlags()), \"var\");\n            this.declFile.Write(funcDecl.name.text);\n            if (this.canEmitTypeAnnotationSignature(ToDeclFlags(funcDecl.getFunctionFlags()))) {\n                this.declFile.Write(\" : \");\n                var type = accessorSymbol.getType();\n                this.emitTypeSignature(type);\n            }\n            this.declFile.WriteLine(\";\");\n\n            return false;\n        }\n\n        private emitClassMembersFromConstructorDefinition(funcDecl: FuncDecl) {\n            if (funcDecl.arguments) {\n                var argsLen = funcDecl.arguments.members.length; if (funcDecl.variableArgList) { argsLen--; }\n\n                for (var i = 0; i < argsLen; i++) {\n                    var argDecl = <ArgDecl>funcDecl.arguments.members[i];\n                    if (hasFlag(argDecl.getVarFlags(), VariableFlags.Property)) {\n                        this.emitDeclarationComments(argDecl);\n                        this.emitDeclFlags(ToDeclFlags(argDecl.getVarFlags()), \"var\");\n                        this.declFile.Write(argDecl.id.text);\n\n                        if (this.canEmitTypeAnnotationSignature(ToDeclFlags(argDecl.getVarFlags()))) {\n                            this.emitTypeOfBoundDecl(argDecl);\n                        }\n                        this.declFile.WriteLine(\";\");\n                    }\n                }\n            }\n        }\n\n        public ClassDeclarationCallback(pre: bool, classDecl: ClassDeclaration): bool {\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(classDecl.getVarFlags()), classDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                var className = classDecl.name.text;\n                this.emitDeclarationComments(classDecl);\n                this.emitDeclFlags(ToDeclFlags(classDecl.getVarFlags()), \"class\");\n                this.declFile.Write(className);\n                this.pushDeclarationContainer(classDecl);\n                this.emitTypeParameters(classDecl.typeParameters);\n                this.emitBaseList(classDecl, true);\n                this.emitBaseList(classDecl, false);\n                this.declFile.WriteLine(\" {\");\n\n                this.indenter.increaseIndent();\n                if (classDecl.constructorDecl) {\n                    this.emitClassMembersFromConstructorDefinition(classDecl.constructorDecl);\n                }\n            } else {\n                this.indenter.decreaseIndent();\n                this.popDeclarationContainer(classDecl);\n\n                this.emitIndent();\n                this.declFile.WriteLine(\"}\");\n            }\n\n            return true;\n        }\n\n        private emitTypeParameters(typeParams: ASTList, funcSignature?: PullSignatureSymbol) {\n            if (!typeParams || !typeParams.members.length) {\n                return;\n            }\n\n            this.declFile.Write(\"<\");\n            var containerAst = this.getAstDeclarationContainer();\n            var containerSymbol = <PullTypeSymbol>this.semanticInfoChain.getSymbolForAST(containerAst, this.locationInfo.fileName);\n            var typars: PullTypeSymbol[];\n            if (funcSignature) {\n                typars = funcSignature.getTypeParameters();\n            } else {\n                typars = containerSymbol.getTypeArguments();\n                if (!typars || !typars.length) {\n                    typars = containerSymbol.getTypeParameters();\n                }\n            }\n\n            for (var i = 0; i < typars.length; i++) {\n                if (i) {\n                    this.declFile.Write(\", \");\n                }\n                var memberName = typars[i].getScopedNameEx(containerSymbol, true);\n                this.emitTypeNamesMember(memberName);\n            }\n            this.declFile.Write(\">\");\n        }\n\n        public InterfaceDeclarationCallback(pre: bool, interfaceDecl: InterfaceDeclaration): bool {\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(interfaceDecl.getVarFlags()), interfaceDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                var interfaceName = interfaceDecl.name.text;\n                this.emitDeclarationComments(interfaceDecl);\n                this.emitDeclFlags(ToDeclFlags(interfaceDecl.getVarFlags()), \"interface\");\n                this.declFile.Write(interfaceName);\n                this.pushDeclarationContainer(interfaceDecl);\n                this.emitTypeParameters(interfaceDecl.typeParameters);\n                this.emitBaseList(interfaceDecl, true);\n                this.declFile.WriteLine(\" {\");\n\n                this.indenter.increaseIndent();\n            } else {\n                this.indenter.decreaseIndent();\n                this.popDeclarationContainer(interfaceDecl);\n\n                this.emitIndent();\n                this.declFile.WriteLine(\"}\");\n            }\n\n            return true;\n        }\n\n        public ImportDeclarationCallback(pre: bool, importDecl: ImportDeclaration): bool {\n            if (pre) {\n                var importSymbol = <PullTypeAliasSymbol>this.semanticInfoChain.getSymbolForAST(importDecl, this.locationInfo.fileName);\n                if (importSymbol.getTypeUsedExternally()) {\n                    this.emitDeclarationComments(importDecl);\n                    this.emitIndent();\n                    this.declFile.Write(\"import \");\n\n                    this.declFile.Write(importDecl.id.text + \" = \");\n                    if (importDecl.isDynamicImport) {\n                        this.declFile.WriteLine(\"module (\" + importDecl.getAliasName() + \");\");\n                    } else {\n                        this.declFile.WriteLine(importDecl.getAliasName() + \";\");\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        private emitEnumSignature(moduleDecl: ModuleDeclaration) {\n            if (!this.canEmitSignature(ToDeclFlags(moduleDecl.getModuleFlags()))) {\n                return false;\n            }\n\n            this.emitDeclarationComments(moduleDecl);\n            this.emitDeclFlags(ToDeclFlags(moduleDecl.getModuleFlags()), \"enum\");\n            this.declFile.WriteLine(moduleDecl.name.text + \" {\");\n\n            this.indenter.increaseIndent();\n            var membersLen = moduleDecl.members.members.length;\n            for (var j = 1; j < membersLen; j++) {\n                var memberDecl: AST = moduleDecl.members.members[j];\n                if (memberDecl.nodeType === NodeType.VarDecl) {\n                    this.emitDeclarationComments(memberDecl);\n                    this.emitIndent();\n                    this.declFile.WriteLine((<VarDecl>memberDecl).id.text + \",\");\n                } else {\n                    CompilerDiagnostics.assert(memberDecl.nodeType != NodeType.Asg, \"We want to catch this\");\n                }\n            }\n            this.indenter.decreaseIndent();\n\n            this.emitIndent();\n            this.declFile.WriteLine(\"}\");\n\n            return false;\n        }\n\n        public ModuleDeclarationCallback(pre: bool, moduleDecl: ModuleDeclaration): bool {\n            if (hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsWholeFile)) {\n                // This is dynamic modules and we are going to outputing single file, \n                // we need to change the declFile because dynamic modules are always emitted to their corresponding .d.ts\n                if (hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsDynamic)) {\n                    if (pre) {\n                        if (!this.emitOptions.outputMany) {\n                            this.singleDeclFile = this.declFile;\n                            CompilerDiagnostics.assert(this.indenter.indentAmt === 0, \"Indent has to be 0 when outputing new file\");\n                            // Create new file\n                            var tsFileName = (<Script>this.getAstDeclarationContainer()).locationInfo.fileName;\n                            var declareFileName = this.emitOptions.mapOutputFileName(tsFileName, TypeScriptCompiler.mapToDTSFileName);\n                            var useUTF8InOutputfile = moduleDecl.containsUnicodeChar || (this.emitOptions.compilationSettings.emitComments && moduleDecl.containsUnicodeCharInComment);\n\n                            // Creating files can cause exceptions, they will be caught higher up in TypeScriptCompiler.emit\n                            this.declFile = new DeclFileWriter(this.createFile(declareFileName, useUTF8InOutputfile));\n                        }\n                        this.pushDeclarationContainer(moduleDecl);\n                    } else {\n                        if (!this.emitOptions.outputMany) {\n                            CompilerDiagnostics.assert(this.singleDeclFile != this.declFile, \"singleDeclFile cannot be null as we are going to revert back to it\");\n                            CompilerDiagnostics.assert(this.indenter.indentAmt === 0, \"Indent has to be 0 when outputing new file\");\n\n                            // Creating files can cause exceptions, they will be caught higher up in TypeScriptCompiler.emit\n                            try {\n                                this.declFile.Close();\n                            }\n                            catch (e) {\n                                Emitter.throwEmitterError(e);\n                            }\n\n                            this.declFile = this.singleDeclFile;\n                        }\n\n                        this.popDeclarationContainer(moduleDecl);\n                    }\n                }\n\n                return true;\n            }\n\n            if (moduleDecl.isEnum()) {\n                if (pre) {\n                    this.emitEnumSignature(moduleDecl);\n                }\n                return false;\n            }\n\n            if (!this.canEmitPrePostAstSignature(ToDeclFlags(moduleDecl.getModuleFlags()), moduleDecl, pre)) {\n                return false;\n            }\n\n            if (pre) {\n                if (this.emitDottedModuleName()) {\n                    this.dottedModuleEmit += \".\";\n                } else {\n                    this.dottedModuleEmit = this.getDeclFlagsString(ToDeclFlags(moduleDecl.getModuleFlags()), \"module\");\n                }\n                this.dottedModuleEmit += moduleDecl.name.text;\n\n                var isCurrentModuleDotted = (moduleDecl.members.members.length === 1 &&\n                    moduleDecl.members.members[0].nodeType === NodeType.ModuleDeclaration &&\n                    !(<ModuleDeclaration>moduleDecl.members.members[0]).isEnum() &&\n                    hasFlag((<ModuleDeclaration>moduleDecl.members.members[0]).getModuleFlags(), ModuleFlags.Exported));\n\n                // Module is dotted only if it does not have doc comments for it\n                var moduleDeclComments = moduleDecl.getDocComments();\n                isCurrentModuleDotted = isCurrentModuleDotted && (moduleDeclComments === null || moduleDeclComments.length === 0);\n\n                this.isDottedModuleName.push(isCurrentModuleDotted);\n                this.pushDeclarationContainer(moduleDecl);\n\n                if (!isCurrentModuleDotted) {\n                    this.emitDeclarationComments(moduleDecl);\n                    this.declFile.Write(this.dottedModuleEmit);\n                    this.declFile.WriteLine(\" {\");\n                    this.indenter.increaseIndent();\n                }\n            } else {\n                if (!this.emitDottedModuleName()) {\n                    this.indenter.decreaseIndent();\n                    this.emitIndent();\n                    this.declFile.WriteLine(\"}\");\n                }\n                this.popDeclarationContainer(moduleDecl);\n                this.isDottedModuleName.pop();\n            }\n\n            return true;\n        }\n\n        public ScriptCallback(pre: bool, script: Script): bool {\n            if (pre) {\n                this.locationInfo = script.locationInfo;\n                if (this.emitOptions.outputMany) {\n                    for (var i = 0; i < script.referencedFiles.length; i++) {\n                        var referencePath = script.referencedFiles[i].path;\n                        var declareFileName: string;\n                        if (isRooted(referencePath)) {\n                            declareFileName = this.emitOptions.mapOutputFileName(referencePath, TypeScriptCompiler.mapToDTSFileName)\n                        } else {\n                            declareFileName = getDeclareFilePath(script.referencedFiles[i].path);\n                        }\n                        this.declFile.WriteLine(\'/// <reference path=\"\' + declareFileName + \'\" />\');\n                    }\n                }\n                this.pushDeclarationContainer(script);\n            }\n            else {\n                this.popDeclarationContainer(script);\n            }\n            return true;\n        }\n\n        public DefaultCallback(pre: bool, ast: AST): bool {\n            return !ast.isStatement();\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class CharacterInfo {\n        public static isDecimalDigit(c: number): bool {\n            return c >= CharacterCodes._0 && c <= CharacterCodes._9;\n        }\n\n        public static isHexDigit(c: number): bool {\n            return CharacterInfo.isDecimalDigit(c) ||\n                   (c >= CharacterCodes.A && c <= CharacterCodes.F) ||\n                   (c >= CharacterCodes.a && c <= CharacterCodes.f);\n        }\n\n        public static hexValue(c: number): number {\n            // Debug.assert(isHexDigit(c));\n            return CharacterInfo.isDecimalDigit(c)\n                ? (c - CharacterCodes._0)\n                : (c >= CharacterCodes.A && c <= CharacterCodes.F)\n                    ? c - CharacterCodes.A + 10\n                    : c - CharacterCodes.a + 10;\n        }\n\n        public static isWhitespace(ch: number): bool {\n            switch (ch) {\n                // Unicode 3.0 space characters.\n                case CharacterCodes.space:\n                case CharacterCodes.nonBreakingSpace:\n                case CharacterCodes.enQuad:\n                case CharacterCodes.emQuad:\n                case CharacterCodes.enSpace:\n                case CharacterCodes.emSpace:\n                case CharacterCodes.threePerEmSpace:\n                case CharacterCodes.fourPerEmSpace:\n                case CharacterCodes.sixPerEmSpace:\n                case CharacterCodes.figureSpace:\n                case CharacterCodes.punctuationSpace:\n                case CharacterCodes.thinSpace:\n                case CharacterCodes.hairSpace:\n                case CharacterCodes.zeroWidthSpace:\n                case CharacterCodes.narrowNoBreakSpace:\n                case CharacterCodes.ideographicSpace:\n\n                case CharacterCodes.tab:\n                case CharacterCodes.verticalTab:\n                case CharacterCodes.formFeed:\n                case CharacterCodes.byteOrderMark:\n                    return true;\n            }\n\n            return false;\n        }\n\n        public static isLineTerminator(ch: number): bool {\n            switch (ch) {\n                case CharacterCodes.carriageReturn:\n                case CharacterCodes.lineFeed:\n                case CharacterCodes.paragraphSeparator:\n                case CharacterCodes.lineSeparator:\n                    return true;\n            }\n\n            return false;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export enum SyntaxConstants {\n        // Masks that we use to place information about trivia into a single int. The first two flags \n        // mark bools that tell us if the trivia contains a comment or a newline. The width of the \n        // trivia is then stored in the rest of the int.  This allows trivia of nearly any length.\n        // However, nearly all of the time the trivia will be less than 511MB, and will fit into 31\n        // bits (which will only be stored a a single 32bit int in chakra).\n        TriviaNewLineMask = 0x00000001, //  0000 0000 0000 0000 0000 0000 0000 0001\n        TriviaCommentMask = 0x00000002, //  0000 0100 0000 0000 0000 0000 0000 0010\n        TriviaFullWidthShift = 2,       //  1111 1111 1111 1111 1111 1111 1111 1100\n\n        // Masks that we use to place information about a node into a single int.  The first bit tells\n        // us if we\'ve computed the data for a node.\n        //\n        // The second bit tells us if the node is incrementally reusable if it does not\n        // containe any skipped tokens, zero width tokens, regex tokens in it (\"/\", \"/=\" or \"/.../\"), \n        // and contains no tokens that were parser generated.\n        //\n        // The next bit lets us know if the nodes was parsed in a strict context or node.  A node can\n        // only be used by the incremental parser if it is parsed in the same strict context as before.\n        // last masks off the part of the int\n        //\n        // The width of the node is stored in the remainder of the int.  This allows us up to 512MB\n        // for a node by using all 29 bits.  However, in the common case, we\'ll use less than 29 bits\n        // for the width.  Thus, the info will be stored in a single int in chakra.\n        NodeDataComputed              = 0x00000001, // 0000 0000 0000 0000 0000 0000 0000 0001\n        NodeIncrementallyUnusableMask = 0x00000002, // 0000 0000 0000 0000 0000 0000 0000 0010\n        NodeParsedInStrictModeMask    = 0x00000004, // 0000 0000 0000 0000 0000 0000 0000 0100\n        NodeFullWidthShift            = 3,          // 1111 1111 1111 1111 1111 1111 1111 1000\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class Diagnostic1 {\n        private _diagnosticCode: DiagnosticCode;\n        private _arguments: any[];\n\n        constructor(diagnosticCode: DiagnosticCode, arguments: any[]) {\n            this._diagnosticCode = diagnosticCode;\n            this._arguments = (arguments && arguments.length > 0) ? arguments : null;\n        }\n\n        /// <summary>\n        /// The error code, as an integer.\n        /// </summary>\n        public diagnosticCode(): DiagnosticCode {\n            return this._diagnosticCode;\n        }\n\n        /// <summary>\n        /// If a derived class has additional information about other referenced symbols, it can\n        /// expose the locations of those symbols in a general way, so they can be reported along\n        /// with the error.\n        /// </summary>\n        public additionalLocations(): Location[] {\n            return [];\n        }\n\n        /// <summary>\n        /// Get the text of the message in the given language.\n        /// </summary>\n        public message(): string {\n            return getDiagnosticMessage(this._diagnosticCode, this._arguments);\n        }\n\n        public static equals(diagnostic1: Diagnostic1, diagnostic2: Diagnostic1): bool {\n            return diagnostic1._diagnosticCode === diagnostic2._diagnosticCode &&\n                   ArrayUtilities.sequenceEquals(diagnostic1._arguments, diagnostic2._arguments, (v1, v2) => v1 === v2);\n        }\n    }\n\n    function getLargestIndex(diagnostic: string): number {\n        var largest = -1;\n        var stringComponents = diagnostic.split(\"_\");\n\n        for (var i = 0; i < stringComponents.length; i++) {\n            var val = parseInt(stringComponents[i]);\n            if (!isNaN(val) && val > largest) {\n                largest = val;\n            }\n        }\n\n        return largest;\n    }\n\n    export function getDiagnosticMessage(diagnosticType: DiagnosticCode, args: any[]): string {\n        var diagnosticName: string = (<any>DiagnosticCode)._map[diagnosticType];\n\n        var diagnostic = <DiagnosticInfo>diagnosticMessages[diagnosticName];\n\n        if (!diagnostic) {\n            throw new Error(\"Invalid diagnostic\");\n        }\n        else {\n            // We have a string like \"foo_0_bar_1\".  We want to find the largest integer there.\n            // (i.e.\'1\').  We then need one more arg than that to be correct.\n            var expectedCount = 1 + getLargestIndex(diagnosticName);\n            var actualCount = args ? args.length : 0;\n\n            if (expectedCount !== actualCount) {\n                throw new Error(\"Expected \" + expectedCount + \" arguments to diagnostic, got \" + actualCount + \" instead\");\n            }\n        }\n\n        var diagnosticMessage = diagnostic.message.replace(/{(\\d+)}/g, function (match, num) {\n            return typeof args[num] !== \'undefined\'\n                ? args[num]\n                : match;\n        });\n\n        var message: string;\n\n        if (diagnosticType != DiagnosticCode.error_TS_0__1 && diagnosticType != DiagnosticCode.warning_TS_0__1) {\n            var errorOrWarning = diagnostic.category == DiagnosticCategory.Error ?\n                                    DiagnosticCode.error_TS_0__1 :\n                                    DiagnosticCode.warning_TS_0__1;\n\n            message = getDiagnosticMessage(errorOrWarning, [diagnostic.code, diagnosticMessage]);\n        }\n        else {\n            message = diagnosticMessage;\n        }\n\n        return message;\n    }\n}\n///<reference path=\'References.ts\' />\n\nclass FormattingOptions {\n    constructor(public useTabs: bool,\n                public spacesPerTab: number,\n                public indentSpaces: number,\n                public newLineCharacter: string) {\n    }\n\n    public static defaultOptions = new FormattingOptions(/*useTabs:*/ false, /*spacesPerTab:*/ 4, /*indentSpaces:*/ 4, /*newLineCharacter*/ \"\\r\\n\");\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript.Indentation {\n    export function columnForEndOfToken(token: ISyntaxToken,\n                                        syntaxInformationMap: SyntaxInformationMap,\n                                        options: FormattingOptions): number {\n        return columnForStartOfToken(token, syntaxInformationMap, options) + token.width();\n    }\n\n    export function columnForStartOfToken(token: ISyntaxToken,\n                                          syntaxInformationMap: SyntaxInformationMap,\n                                          options: FormattingOptions): number {\n        // Walk backward from this token until we find the first token in the line.  For each token \n        // we see (that is not the first tokem in line), push the entirety of the text into the text \n        // array.  Then, for the first token, add its text (without its leading trivia) to the text\n        // array.  i.e. if we have:\n        //\n        //      var foo = a => bar();\n        //\n        // And we want the column for the start of \'bar\', then we\'ll add the underlinded portions to\n        // the text array:\n        //\n        //      var foo = a => bar();\n        //                  ___\n        //                __\n        //              __\n        //          ____\n        //      ____\n        var firstTokenInLine = syntaxInformationMap.firstTokenInLineContainingToken(token);\n        var leadingTextInReverse: string[] = [];\n\n        var current = token;\n        while (current !== firstTokenInLine) {\n            current = syntaxInformationMap.previousToken(current);\n\n            if (current === firstTokenInLine) {\n                // We\'re at the first token in teh line.\n                // We don\'t want the leading trivia for this token.  That will be taken care of in\n                // columnForFirstNonWhitespaceCharacterInLine.  So just push the trailing trivia\n                // and then the token text.\n                leadingTextInReverse.push(current.trailingTrivia().fullText());\n                leadingTextInReverse.push(current.text());\n            }\n            else {\n                // We\'re at an intermediate token on the line.  Just push all its text into the array.\n                leadingTextInReverse.push(current.fullText());\n            }\n        }\n\n        // Now, add all trivia to the start of the line on the first token in the list.\n        collectLeadingTriviaTextToStartOfLine(firstTokenInLine, leadingTextInReverse);\n\n        return columnForLeadingTextInReverse(leadingTextInReverse, options);\n    }\n\n    export function columnForStartOfFirstTokenInLineContainingToken(\n            token: ISyntaxToken,\n            syntaxInformationMap: SyntaxInformationMap,\n            options: FormattingOptions): number {\n        // Walk backward through the tokens until we find the first one on the line.\n        var firstTokenInLine = syntaxInformationMap.firstTokenInLineContainingToken(token);\n        var leadingTextInReverse: string[] = [];\n\n        // Now, add all trivia to the start of the line on the first token in the list.\n        collectLeadingTriviaTextToStartOfLine(firstTokenInLine, leadingTextInReverse);\n\n        return columnForLeadingTextInReverse(leadingTextInReverse, options);\n    }\n\n    // Collect all the trivia that precedes this token.  Stopping when we hit a newline trivia\n    // or a multiline comment that spans multiple lines.  This is meant to be called on the first\n    // token in a line.\n    function collectLeadingTriviaTextToStartOfLine(firstTokenInLine: ISyntaxToken,\n                                                   leadingTextInReverse: string[]) {\n        var leadingTrivia = firstTokenInLine.leadingTrivia();\n\n        for (var i = leadingTrivia.count() - 1; i >= 0; i--) {\n            var trivia = leadingTrivia.syntaxTriviaAt(i);\n            if (trivia.kind() === SyntaxKind.NewLineTrivia) {\n                break;\n            }\n\n            if (trivia.kind() === SyntaxKind.MultiLineCommentTrivia) {\n                var lineSegments = Syntax.splitMultiLineCommentTriviaIntoMultipleLines(trivia);\n                leadingTextInReverse.push(ArrayUtilities.last(lineSegments));\n\n                if (lineSegments.length > 0) {\n                    // This multiline comment actually spanned multiple lines.  So we\'re done.\n                    break;\n                }\n\n                // It was only on a single line, so keep on going.\n            }\n\n            leadingTextInReverse.push(trivia.fullText());\n        }\n    }\n\n    function columnForLeadingTextInReverse(leadingTextInReverse: string[],\n                                           options: FormattingOptions): number {\n        var column = 0;\n\n        // walk backwards.  This means we\'re actually walking forward from column 0 to the start of\n        // the token.\n        for (var i = leadingTextInReverse.length - 1; i >= 0; i--) {\n            var text = leadingTextInReverse[i];\n            column = columnForPositionInStringWorker(text, text.length, column, options);\n       }\n\n        return column;\n    }\n\n    // Returns the column that this input string ends at (assuming it starts at column 0).\n    export function columnForPositionInString(input: string, position: number, options: FormattingOptions): number {\n        return columnForPositionInStringWorker(input, position, 0, options);\n    }\n    \n    function columnForPositionInStringWorker(input: string, position: number, startColumn: number, options: FormattingOptions): number {\n        var column = startColumn;\n        var spacesPerTab = options.spacesPerTab;\n\n        for (var j = 0; j < position; j++) {\n            var ch = input.charCodeAt(j);\n\n            if (ch === CharacterCodes.tab) {\n                column += spacesPerTab - column % spacesPerTab;\n            }\n            else {\n                column++;\n            }\n        }\n\n        return column;\n    }\n\n    export function indentationString(column: number, options: FormattingOptions): string {\n        var numberOfTabs = 0;\n        var numberOfSpaces = MathPrototype.max(0, column);\n\n        if (options.useTabs) {\n            numberOfTabs = Math.floor(column / options.spacesPerTab);\n            numberOfSpaces -= numberOfTabs * options.spacesPerTab;\n        }\n\n        return StringUtilities.repeat(\'\\t\', numberOfTabs) +\n               StringUtilities.repeat(\' \', numberOfSpaces);\n    }\n\n    export function indentationTrivia(column: number, options: FormattingOptions): ISyntaxTrivia {\n        return Syntax.whitespace(this.indentationString(column, options));\n    }\n\n    export function firstNonWhitespacePosition(value: string): number {\n        for (var i = 0; i < value.length; i++) {\n            var ch = value.charCodeAt(i);\n            if (!CharacterInfo.isWhitespace(ch)) {\n                return i;\n            }\n        }\n\n        return value.length;\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface ISeparatedSyntaxList extends ISyntaxElement {\n        childAt(index: number): ISyntaxNodeOrToken;\n\n        toArray(): ISyntaxNodeOrToken[];\n        toNonSeparatorArray(): ISyntaxNodeOrToken[];\n\n        separatorCount();\n        separatorAt(index: number): ISyntaxToken;\n\n        nonSeparatorCount();\n        nonSeparatorAt(index: number): ISyntaxNodeOrToken;\n\n        insertChildrenInto(array: ISyntaxElement[], index: number): void;\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxElement {\n        kind(): SyntaxKind;\n\n        isNode(): bool;\n        isToken(): bool;\n        isList(): bool;\n        isSeparatedList(): bool;\n\n        childCount(): number;\n        childAt(index: number): ISyntaxElement;\n\n        // True if this element is typescript specific and would not be legal in pure javascript.\n        isTypeScriptSpecific(): bool;\n\n        // True if this element cannot be reused in incremental parsing.  There are several situations\n        // in which an element can not be reused.  They are:\n        //\n        // 1) The element contained skipped text.\n        // 2) The element contained zero width tokens.\n        // 3) The element contains tokens generated by the parser (like >> or a keyword -> identifier\n        //    conversion).\n        // 4) The element contains a regex token somewhere under it.  A regex token is either a \n        //    regex itself (i.e. /foo/), or is a token which could start a regex (i.e. \"/\" or \"/=\").  This\n        //    data is used by the incremental parser to decide if a node can be reused.  Due to the \n        //    lookahead nature of regex tokens, a node containing a regex token cannot be reused.  Normally,\n        //    changes to text only affect the tokens directly intersected.  However, because regex tokens \n        //    have such unbounded lookahead (technically bounded at the end of a line, but htat\'s minor), \n        //    we need to recheck them to see if they\'ve changed due to the edit.  For example, if you had:\n        //    \n        //         while (true) /3; return;\n        //    \n        //    And you changed it to:\n        //    \n        //         while (true) /3; return/;\n        //    \n        //    Then even though only the \'return\' and \';\' colons were touched, we\'d want to rescan the \'/\'\n        //    token which we would then realize was a regex.\n        isIncrementallyUnusable(): bool;\n\n        // With of this element, including leading and trailing trivia.\n        fullWidth(): number;\n\n        // Width of this element, not including leading and trailing trivia.\n        width(): number;\n\n        // Text for this element, including leading and trailing trivia.\n        fullText(): string;\n\n        leadingTrivia(): ISyntaxTriviaList;\n        trailingTrivia(): ISyntaxTriviaList;\n\n        leadingTriviaWidth(): number;\n        trailingTriviaWidth(): number;\n\n        firstToken(): ISyntaxToken;\n        lastToken(): ISyntaxToken;\n\n        collectTextElements(elements: string[]): void;\n    }\n\n    export interface ISyntaxNode extends ISyntaxNodeOrToken {\n    }\n\n    export interface IModuleReferenceSyntax extends ISyntaxNode {\n    }\n\n    export interface IModuleElementSyntax extends ISyntaxNode {\n    }\n\n    export interface IStatementSyntax extends IModuleElementSyntax {\n    }\n\n    export interface ITypeMemberSyntax extends ISyntaxNode {\n    }\n\n    export interface IClassElementSyntax extends ISyntaxNode {\n    }\n\n    export interface IMemberDeclarationSyntax extends IClassElementSyntax {\n    }\n\n    export interface ISwitchClauseSyntax extends ISyntaxNode {\n    }\n\n    export interface IExpressionSyntax extends ISyntaxNodeOrToken {\n    }\n\n    export interface IUnaryExpressionSyntax extends IExpressionSyntax {\n    }\n\n    export interface ITypeSyntax extends IUnaryExpressionSyntax {\n    }\n\n    export interface INameSyntax extends ITypeSyntax {\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxList extends ISyntaxElement {\n        childAt(index: number): ISyntaxNodeOrToken;\n        toArray(): ISyntaxNodeOrToken[];\n\n        insertChildrenInto(array: ISyntaxElement[], index: number): void;\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxToken extends ISyntaxNodeOrToken, INameSyntax {\n        // Same as kind(), just exposed through a property for perf.\n        tokenKind: SyntaxKind;\n\n        // Text for this token, not including leading or trailing trivia.\n        text(): string;\n\n        value(): any;\n        valueText(): string;\n\n        hasLeadingTrivia(): bool;\n        hasLeadingComment(): bool;\n        hasLeadingNewLine(): bool;\n        hasLeadingSkippedText(): bool;\n\n        hasTrailingTrivia(): bool;\n        hasTrailingComment(): bool;\n        hasTrailingNewLine(): bool;\n        hasTrailingSkippedText(): bool;\n\n        hasSkippedText(): bool;\n\n        leadingTrivia(): ISyntaxTriviaList;\n        trailingTrivia(): ISyntaxTriviaList;\n\n        withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken;\n        withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken;\n\n        clone(): ISyntaxToken;\n    }\n\n    export interface ITokenInfo {\n        leadingTrivia?: ISyntaxTrivia[];\n        text?: string;\n        trailingTrivia?: ISyntaxTrivia[];\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxTrivia {\n        kind(): SyntaxKind;\n\n        isWhitespace(): bool;\n        isComment(): bool;\n        isNewLine(): bool;\n        isSkippedText(): bool;\n\n        // With of this trivia.\n        fullWidth(): number;\n\n        // Text for this trivia.\n        fullText(): string;\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxTriviaList {\n        count(): number;\n        syntaxTriviaAt(index: number): ISyntaxTrivia;\n\n        // With of this trivia list.\n        fullWidth(): number;\n\n        // Text for this trivia list.\n        fullText(): string;\n\n        hasComment(): bool;\n        hasNewLine(): bool;\n        hasSkippedText(): bool;\n\n        last(): ISyntaxTrivia;\n        toArray(): ISyntaxTrivia[];\n\n        concat(trivia: ISyntaxTriviaList): ISyntaxTriviaList;\n\n        collectTextElements(elements: string[]): void;\n    }\n}\nmodule TypeScript {\n    export enum LanguageVersion {\n        EcmaScript3,\n        EcmaScript5,\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class ParseOptions {\n        private _allowAutomaticSemicolonInsertion: bool;\n\n        constructor(allowAutomaticSemicolonInsertion: bool = true) {\n            this._allowAutomaticSemicolonInsertion = allowAutomaticSemicolonInsertion;\n        }\n\n        public toJSON(key) {\n            return { allowAutomaticSemicolonInsertion: this._allowAutomaticSemicolonInsertion };\n        }\n\n        public allowAutomaticSemicolonInsertion(): bool {\n            return this._allowAutomaticSemicolonInsertion;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class PositionedElement {\n        private _parent: PositionedElement;\n        private _element: ISyntaxElement;\n        private _fullStart: number;\n\n        constructor(parent: PositionedElement, element: ISyntaxElement, fullStart: number) {\n            this._parent = parent;\n            this._element = element;\n            this._fullStart = fullStart;\n        }\n\n        public static create(parent: PositionedElement, element: ISyntaxElement, fullStart: number): PositionedElement {\n            if (element === null) {\n                return null;\n            }\n\n            if (element.isNode()) {\n                return new PositionedNode(parent, <SyntaxNode>element, fullStart);\n            }\n            else if (element.isToken()) {\n                return new PositionedToken(parent, <ISyntaxToken>element, fullStart);\n            }\n            else if (element.isList()) {\n                return new PositionedList(parent, <ISyntaxList>element, fullStart);\n            }\n            else if (element.isSeparatedList()) {\n                return new PositionedSeparatedList(parent, <ISeparatedSyntaxList>element, fullStart);\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        public parent(): PositionedElement {\n            return this._parent;\n        }\n\n        public parentElement(): ISyntaxElement {\n            return this._parent && this._parent._element;\n        }\n\n        public element(): ISyntaxElement {\n            return this._element;\n        }\n\n        public kind(): SyntaxKind {\n            return this.element().kind();\n        }\n\n        public childCount(): number {\n            return this.element().childCount();\n        }\n\n        public childAt(index: number): PositionedElement {\n            var offset = 0;\n\n            for (var i = 0; i < index; i++) {\n                offset += this.element().childAt(i).fullWidth();\n            }\n\n            return PositionedElement.create(this, this.element().childAt(index), offset);\n        }\n\n        public getPositionedChild(child: ISyntaxElement) {\n            var offset = Syntax.childOffset(this.element(), child);\n\n            return PositionedElement.create(this, child, offset);\n        }\n\n        public fullStart(): number {\n            return this._fullStart;\n        }\n\n        public fullEnd(): number {\n            return this.fullStart() + this.element().fullWidth();\n        }\n\n        public fullWidth(): number {\n            return this.element().fullWidth();\n        }\n\n        public start(): number {\n            return this.fullStart() + this.element().leadingTriviaWidth();\n        }\n\n        public end(): number {\n            return this.fullStart() + this.element().leadingTriviaWidth() + this.element().width();\n        }\n\n        public root(): PositionedNode {\n            var current = this;\n            while (current.parent() !== null) {\n                current = current.parent();\n            }\n\n            return <PositionedNode>current;\n        }\n\n        public containingNode(): PositionedNode {\n            var current = this.parent();\n\n            while (current !== null && !current.element().isNode()) {\n                current = current.parent();\n            }\n\n            return <PositionedNode>current;\n        }\n    }\n\n    export class PositionedNodeOrToken extends PositionedElement {\n        constructor(parent: PositionedElement, nodeOrToken: ISyntaxNodeOrToken, fullStart: number) {\n            super(parent, nodeOrToken, fullStart);\n        }\n\n        public nodeOrToken(): ISyntaxNodeOrToken {\n            return <ISyntaxNodeOrToken>this.element();\n        }\n    }\n\n    export class PositionedNode extends PositionedNodeOrToken {\n        constructor(parent: PositionedElement, node: SyntaxNode, fullStart: number) {\n            super(parent, node, fullStart);\n        }\n\n        public node(): SyntaxNode {\n            return <SyntaxNode>this.element();\n        }\n    }\n\n    export class PositionedToken extends PositionedNodeOrToken {\n        constructor(parent: PositionedElement, token: ISyntaxToken, fullStart: number) {\n            super(parent, token, fullStart);\n        }\n\n        public token(): ISyntaxToken {\n            return <ISyntaxToken>this.element();\n        }\n\n        public previousToken(): PositionedToken {\n            var fullStart = this.fullStart();\n            if (fullStart === 0) {\n                return null;\n            }\n\n            return this.root().node().findToken(fullStart - 1);\n        }\n\n        public nextToken(): PositionedToken {\n            if (this.token().tokenKind === SyntaxKind.EndOfFileToken) {\n                return null;\n            }\n\n            return this.root().node().findToken(this.fullEnd());\n        }\n    }\n\n    export class PositionedList extends PositionedElement {\n        constructor(parent: PositionedElement, list: ISyntaxList, fullStart: number) {\n            super(parent, list, fullStart);\n        }\n\n        public list(): ISyntaxList {\n            return <ISyntaxList>this.element();\n        }\n    }\n\n    export class PositionedSeparatedList extends PositionedElement {\n        constructor(parent: PositionedElement, list: ISeparatedSyntaxList, fullStart: number) {\n            super(parent, list, fullStart);\n        }\n\n        public list(): ISeparatedSyntaxList {\n            return <ISeparatedSyntaxList>this.element();\n        }\n    }\n}\n﻿///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class Scanner1 implements ISlidingWindowSource {\n        private slidingWindow: SlidingWindow;\n\n        private fileName: string;\n        private text: ISimpleText;\n        private _languageVersion: LanguageVersion;\n\n        private static isKeywordStartCharacter: bool[] = [];\n        private static isIdentifierStartCharacter: bool[] = [];\n        public static isIdentifierPartCharacter: bool[] = [];\n        private static isNumericLiteralStart: bool[] = [];\n\n        private static initializeStaticData() {\n            if (Scanner1.isKeywordStartCharacter.length === 0) {\n                Scanner1.isKeywordStartCharacter = ArrayUtilities.createArray(CharacterCodes.maxAsciiCharacter, false);\n                Scanner1.isIdentifierStartCharacter = ArrayUtilities.createArray(CharacterCodes.maxAsciiCharacter, false);\n                Scanner1.isIdentifierPartCharacter = ArrayUtilities.createArray(CharacterCodes.maxAsciiCharacter, false);\n                Scanner1.isNumericLiteralStart = ArrayUtilities.createArray(CharacterCodes.maxAsciiCharacter, false);\n\n                for (var character = 0; character < CharacterCodes.maxAsciiCharacter; character++) {\n                    if (character >= CharacterCodes.a && character <= CharacterCodes.z) {\n                        Scanner1.isIdentifierStartCharacter[character] = true;\n                        Scanner1.isIdentifierPartCharacter[character] = true;\n                    }\n                    else if ((character >= CharacterCodes.A && character <= CharacterCodes.Z) ||\n                             character === CharacterCodes._ ||\n                             character === CharacterCodes.$) {\n                        Scanner1.isIdentifierStartCharacter[character] = true;\n                        Scanner1.isIdentifierPartCharacter[character] = true;\n                    }\n                    else if (character >= CharacterCodes._0 && character <= CharacterCodes._9) {\n                        Scanner1.isIdentifierPartCharacter[character] = true;\n                        Scanner1.isNumericLiteralStart[character] = true;\n                    }\n                }\n\n                Scanner1.isNumericLiteralStart[CharacterCodes.dot] = true;\n\n                for (var keywordKind = SyntaxKind.FirstKeyword; keywordKind <= SyntaxKind.LastKeyword; keywordKind++) {\n                    var keyword = SyntaxFacts.getText(keywordKind);\n                    Scanner1.isKeywordStartCharacter[keyword.charCodeAt(0)] = true;\n                }\n            }\n        }\n\n        constructor(fileName: string,\n                    text: ISimpleText,\n                    languageVersion: LanguageVersion,\n                    window: number[] = ArrayUtilities.createArray(2048, 0)) {\n            Scanner1.initializeStaticData();\n\n            this.slidingWindow = new SlidingWindow(this, window, 0, text.length());\n            this.fileName = fileName;\n            this.text = text;\n            this._languageVersion = languageVersion;\n        }\n\n        public languageVersion(): LanguageVersion {\n            return this._languageVersion;\n        }\n\n        public fetchMoreItems(argument: any, sourceIndex: number, window: number[], destinationIndex: number, spaceAvailable: number): number {\n            var charactersRemaining = this.text.length() - sourceIndex;\n            var amountToRead = MathPrototype.min(charactersRemaining, spaceAvailable);\n            this.text.copyTo(sourceIndex, window, destinationIndex, amountToRead);\n            return amountToRead;\n        }\n\n        private currentCharCode(): number {\n            return this.slidingWindow.currentItem(/*argument:*/ null);\n        }\n\n        public absoluteIndex(): number {\n            return this.slidingWindow.absoluteIndex();\n        }\n\n        // Set\'s the scanner to a specific position in the text.\n        public setAbsoluteIndex(index: number): void {\n            this.slidingWindow.setAbsoluteIndex(index);\n        }\n\n        // Scans a token starting at the current position.  Any errors encountered will be added to \n        // \'diagnostics\'.\n        public scan(diagnostics: SyntaxDiagnostic[], allowRegularExpression: bool): ISyntaxToken {\n            var diagnosticsLength = diagnostics.length;\n            var fullStart = this.slidingWindow.absoluteIndex();\n            var leadingTriviaInfo = this.scanTriviaInfo(diagnostics, /*isTrailing: */ false);\n\n            var start = this.slidingWindow.absoluteIndex();\n            var kind = this.scanSyntaxToken(diagnostics, allowRegularExpression);\n            var end = this.slidingWindow.absoluteIndex();\n\n            var trailingTriviaInfo = this.scanTriviaInfo(diagnostics,/*isTrailing: */true);\n\n            var token = this.createToken(fullStart, leadingTriviaInfo, start, kind, end, trailingTriviaInfo);\n\n            // If we produced any diagnostics while creating this token, then realize the token so \n            // it won\'t be reused in incremental scenarios.\n            return diagnosticsLength !== diagnostics.length\n                ? Syntax.realizeToken(token)\n                : token;\n        }\n\n        private createToken(fullStart: number, leadingTriviaInfo: number, start: number, kind: SyntaxKind, end: number, trailingTriviaInfo: number): ISyntaxToken {\n            if (kind >= SyntaxKind.FirstFixedWidth) {\n                if (leadingTriviaInfo === 0) {\n                    if (trailingTriviaInfo === 0) {\n                        return new Syntax.FixedWidthTokenWithNoTrivia(kind);\n                    }\n                    else {\n                        return new Syntax.FixedWidthTokenWithTrailingTrivia(this.text, fullStart, kind, trailingTriviaInfo);\n                    }\n                }\n                else if (trailingTriviaInfo === 0) {\n                    return new Syntax.FixedWidthTokenWithLeadingTrivia(this.text, fullStart, kind, leadingTriviaInfo);\n                }\n                else {\n                    return new Syntax.FixedWidthTokenWithLeadingAndTrailingTrivia(this.text, fullStart, kind, leadingTriviaInfo, trailingTriviaInfo);\n                }\n            }\n            else {\n                var width = end - start;\n                if (leadingTriviaInfo === 0) {\n                    if (trailingTriviaInfo === 0) {\n                        return new Syntax.VariableWidthTokenWithNoTrivia(this.text, fullStart, kind, width);\n                    }\n                    else {\n                        return new Syntax.VariableWidthTokenWithTrailingTrivia(this.text, fullStart, kind, width, trailingTriviaInfo);\n                    }\n                }\n                else if (trailingTriviaInfo === 0) {\n                    return new Syntax.VariableWidthTokenWithLeadingTrivia(this.text, fullStart, kind, leadingTriviaInfo, width);\n                }\n                else {\n                    return new Syntax.VariableWidthTokenWithLeadingAndTrailingTrivia(this.text, fullStart, kind, leadingTriviaInfo, width, trailingTriviaInfo);\n                }\n            }\n        }\n\n        private static triviaWindow = ArrayUtilities.createArray(2048, 0);\n\n        // Scans a subsection of \'text\' as trivia.\n        public static scanTrivia(text: ISimpleText, start: number, length: number, isTrailing: bool): ISyntaxTriviaList {\n            // Debug.assert(length > 0);\n            var scanner = new Scanner1(/*fileName:*/ null, text.subText(new TextSpan(start, length)), LanguageVersion.EcmaScript5, Scanner1.triviaWindow);\n            return scanner.scanTrivia(isTrailing);\n        }\n\n        private scanTrivia(isTrailing: bool): ISyntaxTriviaList {\n            // Keep this exactly in sync with scanTriviaInfo\n            var trivia: ISyntaxTrivia[] = [];\n\n            while (true) {\n                if (!this.slidingWindow.isAtEndOfSource()) {\n                    var ch = this.currentCharCode();\n\n                    switch (ch) {\n                        // Unicode 3.0 space characters\n                        case CharacterCodes.space:\n                        case CharacterCodes.nonBreakingSpace:\n                        case CharacterCodes.enQuad:\n                        case CharacterCodes.emQuad:\n                        case CharacterCodes.enSpace:\n                        case CharacterCodes.emSpace:\n                        case CharacterCodes.threePerEmSpace:\n                        case CharacterCodes.fourPerEmSpace:\n                        case CharacterCodes.sixPerEmSpace:\n                        case CharacterCodes.figureSpace:\n                        case CharacterCodes.punctuationSpace:\n                        case CharacterCodes.thinSpace:\n                        case CharacterCodes.hairSpace:\n                        case CharacterCodes.zeroWidthSpace:\n                        case CharacterCodes.narrowNoBreakSpace:\n                        case CharacterCodes.ideographicSpace:\n\n                        case CharacterCodes.tab:\n                        case CharacterCodes.verticalTab:\n                        case CharacterCodes.formFeed:\n                        case CharacterCodes.byteOrderMark:\n                            // Normal whitespace.  Consume and continue.\n                            trivia.push(this.scanWhitespaceTrivia());\n                            continue;\n\n                        case CharacterCodes.slash:\n                            // Potential comment.  Consume if so.  Otherwise, break out and return.\n                            var ch2 = this.slidingWindow.peekItemN(1);\n                            if (ch2 === CharacterCodes.slash) {\n                                trivia.push(this.scanSingleLineCommentTrivia());\n                                continue;\n                            }\n\n                            if (ch2 === CharacterCodes.asterisk) {\n                                trivia.push(this.scanMultiLineCommentTrivia());\n                                continue;\n                            }\n\n                            // Not a comment.  Don\'t consume.\n                            throw Errors.invalidOperation();\n\n                        case CharacterCodes.carriageReturn:\n                        case CharacterCodes.lineFeed:\n                        case CharacterCodes.paragraphSeparator:\n                        case CharacterCodes.lineSeparator:\n                            trivia.push(this.scanLineTerminatorSequenceTrivia(ch));\n\n                            // If we\'re consuming leading trivia, then we will continue consuming more \n                            // trivia (including newlines) up to the first token we see.  If we\'re \n                            // consuming trailing trivia, then we break after the first newline we see.\n                            if (!isTrailing) {\n                                continue;\n                            }\n\n                            break;\n\n                        default:\n                            throw Errors.invalidOperation();\n                    }\n                }\n\n                // Debug.assert(trivia.length > 0);\n                return Syntax.triviaList(trivia);\n            }\n        }\n\n        private scanTriviaInfo(diagnostics: SyntaxDiagnostic[], isTrailing: bool): number {\n            // Keep this exactly in sync with scanTrivia\n            var width = 0;\n            var hasCommentOrNewLine = 0;\n\n            while (true) {\n                var ch = this.currentCharCode();\n\n                switch (ch) {\n                    // Unicode 3.0 space characters\n                    case CharacterCodes.space:\n                    case CharacterCodes.nonBreakingSpace:\n                    case CharacterCodes.enQuad:\n                    case CharacterCodes.emQuad:\n                    case CharacterCodes.enSpace:\n                    case CharacterCodes.emSpace:\n                    case CharacterCodes.threePerEmSpace:\n                    case CharacterCodes.fourPerEmSpace:\n                    case CharacterCodes.sixPerEmSpace:\n                    case CharacterCodes.figureSpace:\n                    case CharacterCodes.punctuationSpace:\n                    case CharacterCodes.thinSpace:\n                    case CharacterCodes.hairSpace:\n                    case CharacterCodes.zeroWidthSpace:\n                    case CharacterCodes.narrowNoBreakSpace:\n                    case CharacterCodes.ideographicSpace:\n\n                    case CharacterCodes.tab:\n                    case CharacterCodes.verticalTab:\n                    case CharacterCodes.formFeed:\n                    case CharacterCodes.byteOrderMark:\n                        // Normal whitespace.  Consume and continue.\n                        this.slidingWindow.moveToNextItem();\n                        width++;\n                        continue;\n\n                    case CharacterCodes.slash:\n                        // Potential comment.  Consume if so.  Otherwise, break out and return.\n                        var ch2 = this.slidingWindow.peekItemN(1);\n                        if (ch2 === CharacterCodes.slash) {\n                            hasCommentOrNewLine |= SyntaxConstants.TriviaCommentMask;\n                            width += this.scanSingleLineCommentTriviaLength();\n                            continue;\n                        }\n\n                        if (ch2 === CharacterCodes.asterisk) {\n                            hasCommentOrNewLine |= SyntaxConstants.TriviaCommentMask;\n                            width += this.scanMultiLineCommentTriviaLength(diagnostics);\n                            continue;\n                        }\n\n                        // Not a comment.  Don\'t consume.\n                        break;\n\n                    case CharacterCodes.carriageReturn:\n                    case CharacterCodes.lineFeed:\n                    case CharacterCodes.paragraphSeparator:\n                    case CharacterCodes.lineSeparator:\n                        hasCommentOrNewLine |= SyntaxConstants.TriviaNewLineMask;\n                        width += this.scanLineTerminatorSequenceLength(ch);\n\n                        // If we\'re consuming leading trivia, then we will continue consuming more \n                        // trivia (including newlines) up to the first token we see.  If we\'re \n                        // consuming trailing trivia, then we break after the first newline we see.\n                        if (!isTrailing) {\n                            continue;\n                        }\n\n                        break;\n                }\n\n                return (width << SyntaxConstants.TriviaFullWidthShift) | hasCommentOrNewLine;\n            }\n        }\n\n        private isNewLineCharacter(ch: number): bool {\n            switch (ch) {\n                case CharacterCodes.carriageReturn:\n                case CharacterCodes.lineFeed:\n                case CharacterCodes.paragraphSeparator:\n                case CharacterCodes.lineSeparator:\n                    return true;\n                default:\n                    return false;\n            }\n        }\n\n        private scanWhitespaceTrivia(): ISyntaxTrivia {\n            // We\'re going to be extracting text out of sliding window.  Make sure it can\'t move past\n            // this point.\n            var absoluteStartIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n\n            var width = 0;\n            while (true) {\n                var ch = this.currentCharCode();\n\n                switch (ch) {\n                    // Unicode 3.0 space characters\n                    case CharacterCodes.space:\n                    case CharacterCodes.nonBreakingSpace:\n                    case CharacterCodes.enQuad:\n                    case CharacterCodes.emQuad:\n                    case CharacterCodes.enSpace:\n                    case CharacterCodes.emSpace:\n                    case CharacterCodes.threePerEmSpace:\n                    case CharacterCodes.fourPerEmSpace:\n                    case CharacterCodes.sixPerEmSpace:\n                    case CharacterCodes.figureSpace:\n                    case CharacterCodes.punctuationSpace:\n                    case CharacterCodes.thinSpace:\n                    case CharacterCodes.hairSpace:\n                    case CharacterCodes.zeroWidthSpace:\n                    case CharacterCodes.narrowNoBreakSpace:\n                    case CharacterCodes.ideographicSpace:\n\n                    case CharacterCodes.tab:\n                    case CharacterCodes.verticalTab:\n                    case CharacterCodes.formFeed:\n                    case CharacterCodes.byteOrderMark:\n                        // Normal whitespace.  Consume and continue.\n                        this.slidingWindow.moveToNextItem();\n                        width++;\n                        continue;\n                }\n\n                break;\n            }\n\n            // TODO: we probably should intern whitespace.\n            var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, /*intern:*/ false);\n            this.slidingWindow.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);\n\n            return Syntax.whitespace(text);\n        }\n\n        private scanSingleLineCommentTrivia(): ISyntaxTrivia {\n            var absoluteStartIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n            var width = this.scanSingleLineCommentTriviaLength();\n\n            var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, /*intern:*/ false);\n            this.slidingWindow.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);\n\n            return Syntax.singleLineComment(text);\n        }\n\n        private scanSingleLineCommentTriviaLength(): number {\n            this.slidingWindow.moveToNextItem();\n            this.slidingWindow.moveToNextItem();\n\n            // The \'2\' is for the \"//\" we consumed.\n            var width = 2;\n            while (true) {\n                if (this.slidingWindow.isAtEndOfSource() || this.isNewLineCharacter(this.currentCharCode())) {\n                    return width;\n                }\n\n                this.slidingWindow.moveToNextItem();\n                width++;\n            }\n        }\n\n        private scanMultiLineCommentTrivia(): ISyntaxTrivia {\n            var absoluteStartIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n            var width = this.scanMultiLineCommentTriviaLength(null);\n\n            var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, /*intern:*/ false);\n            this.slidingWindow.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);\n\n            return Syntax.multiLineComment(text);\n        }\n\n        private scanMultiLineCommentTriviaLength(diagnostics: SyntaxDiagnostic[]): number {\n            this.slidingWindow.moveToNextItem();\n            this.slidingWindow.moveToNextItem();\n\n            // The \'2\' is for the \"/*\" we consumed.\n            var width = 2;\n            while (true) {\n                if (this.slidingWindow.isAtEndOfSource()) {\n                    if (diagnostics !== null) {\n                        diagnostics.push(new SyntaxDiagnostic(\n                            this.fileName,\n                            this.slidingWindow.absoluteIndex(), 0, DiagnosticCode._StarSlash__expected, null));\n                    }\n\n                    return width;\n                }\n\n                var ch = this.currentCharCode();\n                if (ch === CharacterCodes.asterisk && this.slidingWindow.peekItemN(1) === CharacterCodes.slash) {\n                    this.slidingWindow.moveToNextItem();\n                    this.slidingWindow.moveToNextItem();\n                    width += 2;\n                    return width;\n                }\n\n                this.slidingWindow.moveToNextItem();\n                width++;\n            }\n        }\n\n        private scanLineTerminatorSequenceTrivia(ch: number): ISyntaxTrivia {\n            var absoluteStartIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n            var width = this.scanLineTerminatorSequenceLength(ch);\n\n            var text = this.substring(absoluteStartIndex, absoluteStartIndex + width, /*intern:*/ false);\n            this.slidingWindow.releaseAndUnpinAbsoluteIndex(absoluteStartIndex);\n\n            return Syntax.trivia(SyntaxKind.NewLineTrivia, text);\n        }\n\n        private scanLineTerminatorSequenceLength(ch: number): number {\n            // Consume the first of the line terminator we saw.\n            this.slidingWindow.moveToNextItem();\n\n            // If it happened to be a \\r and there\'s a following \\n, then consume both.\n            if (ch === CharacterCodes.carriageReturn && this.currentCharCode() === CharacterCodes.lineFeed) {\n                this.slidingWindow.moveToNextItem();\n                return 2;\n            }\n            else {\n                return 1;\n            }\n        }\n\n        private scanSyntaxToken(diagnostics: SyntaxDiagnostic[], allowRegularExpression: bool): SyntaxKind {\n            if (this.slidingWindow.isAtEndOfSource()) {\n                return SyntaxKind.EndOfFileToken;\n            }\n\n            var character = this.currentCharCode();\n\n            switch (character) {\n                case CharacterCodes.doubleQuote:\n                case CharacterCodes.singleQuote:\n                    return this.scanStringLiteral(diagnostics);\n\n                // These are the set of variable width punctuation tokens.\n                case CharacterCodes.slash:\n                    return this.scanSlashToken(allowRegularExpression);\n\n                case CharacterCodes.dot:\n                    return this.scanDotToken();\n\n                case CharacterCodes.minus:\n                    return this.scanMinusToken();\n\n                case CharacterCodes.exclamation:\n                    return this.scanExclamationToken();\n\n                case CharacterCodes.equals:\n                    return this.scanEqualsToken();\n\n                case CharacterCodes.bar:\n                    return this.scanBarToken();\n\n                case CharacterCodes.asterisk:\n                    return this.scanAsteriskToken();\n\n                case CharacterCodes.plus:\n                    return this.scanPlusToken();\n\n                case CharacterCodes.percent:\n                    return this.scanPercentToken();\n\n                case CharacterCodes.ampersand:\n                    return this.scanAmpersandToken();\n\n                case CharacterCodes.caret:\n                    return this.scanCaretToken();\n\n                case CharacterCodes.lessThan:\n                    return this.scanLessThanToken();\n\n                // These are the set of fixed, single character length punctuation tokens.\n                // The token kind does not depend on what follows.\n                case CharacterCodes.greaterThan:\n                    return this.advanceAndSetTokenKind(SyntaxKind.GreaterThanToken);\n\n                case CharacterCodes.comma:\n                    return this.advanceAndSetTokenKind(SyntaxKind.CommaToken);\n\n                case CharacterCodes.colon:\n                    return this.advanceAndSetTokenKind(SyntaxKind.ColonToken);\n\n                case CharacterCodes.semicolon:\n                    return this.advanceAndSetTokenKind(SyntaxKind.SemicolonToken);\n\n                case CharacterCodes.tilde:\n                    return this.advanceAndSetTokenKind(SyntaxKind.TildeToken);\n\n                case CharacterCodes.openParen:\n                    return this.advanceAndSetTokenKind(SyntaxKind.OpenParenToken);\n\n                case CharacterCodes.closeParen:\n                    return this.advanceAndSetTokenKind(SyntaxKind.CloseParenToken);\n\n                case CharacterCodes.openBrace:\n                    return this.advanceAndSetTokenKind(SyntaxKind.OpenBraceToken);\n\n                case CharacterCodes.closeBrace:\n                    return this.advanceAndSetTokenKind(SyntaxKind.CloseBraceToken);\n\n                case CharacterCodes.openBracket:\n                    return this.advanceAndSetTokenKind(SyntaxKind.OpenBracketToken);\n\n                case CharacterCodes.closeBracket:\n                    return this.advanceAndSetTokenKind(SyntaxKind.CloseBracketToken);\n\n                case CharacterCodes.question:\n                    return this.advanceAndSetTokenKind(SyntaxKind.QuestionToken);\n            }\n\n            if (Scanner1.isNumericLiteralStart[character]) {\n                return this.scanNumericLiteral();\n            }\n\n            // We run into so many identifiers (and keywords) when scanning, that we want the code to\n            // be as fast as possible.  To that end, we have an extremely fast path for scanning that\n            // handles the 99.9% case of no-unicode characters and no unicode escapes.\n            if (Scanner1.isIdentifierStartCharacter[character]) {\n                var result = this.tryFastScanIdentifierOrKeyword(character);\n                if (result !== SyntaxKind.None) {\n                    return result;\n                }\n            }\n\n            if (this.isIdentifierStart(this.peekCharOrUnicodeEscape())) {\n                return this.slowScanIdentifier(diagnostics);\n            }\n\n            return this.scanDefaultCharacter(character, diagnostics);\n        }\n\n        private isIdentifierStart(interpretedChar: number): bool {\n            if (Scanner1.isIdentifierStartCharacter[interpretedChar]) {\n                return true;\n            }\n\n            return interpretedChar > CharacterCodes.maxAsciiCharacter && Unicode.isIdentifierStart(interpretedChar, this._languageVersion);\n        }\n\n        private isIdentifierPart(interpretedChar: number): bool {\n            if (Scanner1.isIdentifierPartCharacter[interpretedChar]) {\n                return true;\n            }\n\n            return interpretedChar > CharacterCodes.maxAsciiCharacter && Unicode.isIdentifierPart(interpretedChar, this._languageVersion);\n        }\n\n        private tryFastScanIdentifierOrKeyword(firstCharacter: number): SyntaxKind {\n            var startIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n\n            while (true) {\n                var character = this.currentCharCode();\n                if (Scanner1.isIdentifierPartCharacter[character]) {\n                    // Still part of an identifier.  Move to the next caracter.\n                    this.slidingWindow.moveToNextItem();\n                }\n                else if (character === CharacterCodes.backslash || character > CharacterCodes.maxAsciiCharacter) {\n                    // We saw a \\ (which could start a unicode escape), or we saw a unicode character.\n                    // This can\'t be scanned quickly.  Reset to the beginning and bail out.  We\'ll \n                    // go and try the slow path instead.\n                    this.slidingWindow.rewindToPinnedIndex(startIndex);\n                    this.slidingWindow.releaseAndUnpinAbsoluteIndex(startIndex);\n                    return SyntaxKind.None;\n                }\n                else {\n                    // Saw an ascii character that wasn\'t a backslash and wasn\'t an identifier \n                    // character.  This identifier is done.\n                    var endIndex = this.slidingWindow.absoluteIndex();\n\n                    // Also check if it a keyword if it started with a lowercase letter.\n                    var kind;\n                    if (Scanner1.isKeywordStartCharacter[firstCharacter]) {\n                        var offset = startIndex - this.slidingWindow.windowAbsoluteStartIndex;\n                        kind = ScannerUtilities.identifierKind(this.slidingWindow.window, offset, endIndex - startIndex);\n                    }\n                    else {\n                        kind = SyntaxKind.IdentifierName;\n                    }\n\n                    this.slidingWindow.releaseAndUnpinAbsoluteIndex(startIndex);\n                    return kind;\n                }\n            }\n        }\n\n        // A slow path for scanning identifiers.  Called when we run into a unicode character or \n        // escape sequence while processing the fast path.\n        private slowScanIdentifier(diagnostics: SyntaxDiagnostic[]): SyntaxKind {\n            var startIndex = this.slidingWindow.absoluteIndex();\n\n            do {\n                this.scanCharOrUnicodeEscape(diagnostics);\n            }\n            while (this.isIdentifierPart(this.peekCharOrUnicodeEscape()));\n\n            return SyntaxKind.IdentifierName;\n        }\n\n        private scanNumericLiteral(): SyntaxKind {\n            if (this.isHexNumericLiteral()) {\n                return this.scanHexNumericLiteral();\n            }\n            else {\n                return this.scanDecimalNumericLiteral();\n            }\n        }\n\n        private scanDecimalNumericLiteral(): SyntaxKind {\n            while (CharacterInfo.isDecimalDigit(this.currentCharCode())) {\n                this.slidingWindow.moveToNextItem();\n            }\n\n            if (this.currentCharCode() === CharacterCodes.dot) {\n                this.slidingWindow.moveToNextItem();\n            }\n\n            while (CharacterInfo.isDecimalDigit(this.currentCharCode())) {\n                this.slidingWindow.moveToNextItem();\n            }\n\n            var ch = this.currentCharCode();\n            if (ch === CharacterCodes.e || ch === CharacterCodes.E) {\n                this.slidingWindow.moveToNextItem();\n\n                ch = this.currentCharCode();\n                if (ch === CharacterCodes.minus || ch === CharacterCodes.plus) {\n                    if (CharacterInfo.isDecimalDigit(this.slidingWindow.peekItemN(1))) {\n                        this.slidingWindow.moveToNextItem();\n                    }\n                }\n            }\n\n            while (CharacterInfo.isDecimalDigit(this.currentCharCode())) {\n                this.slidingWindow.moveToNextItem();\n            }\n\n            return SyntaxKind.NumericLiteral;\n        }\n\n        private scanHexNumericLiteral(): SyntaxKind {\n            // Debug.assert(this.isHexNumericLiteral());\n\n            // Move past the 0x.\n            this.slidingWindow.moveToNextItem();\n            this.slidingWindow.moveToNextItem();\n\n            while (CharacterInfo.isHexDigit(this.currentCharCode())) {\n                this.slidingWindow.moveToNextItem();\n            }\n\n            return SyntaxKind.NumericLiteral;\n        }\n\n        private isHexNumericLiteral(): bool {\n            if (this.currentCharCode() === CharacterCodes._0) {\n                var ch = this.slidingWindow.peekItemN(1);\n\n                if (ch === CharacterCodes.x || ch === CharacterCodes.X) {\n                    ch = this.slidingWindow.peekItemN(2);\n\n                    return CharacterInfo.isHexDigit(ch);\n                }\n            }\n\n            return false;\n        }\n\n        private advanceAndSetTokenKind(kind: SyntaxKind): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            return kind;\n        }\n\n        private scanLessThanToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.LessThanEqualsToken;\n            }\n            else if (this.currentCharCode() === CharacterCodes.lessThan) {\n                this.slidingWindow.moveToNextItem();\n                if (this.currentCharCode() === CharacterCodes.equals) {\n                    this.slidingWindow.moveToNextItem();\n                    return SyntaxKind.LessThanLessThanEqualsToken;\n                }\n                else {\n                    return SyntaxKind.LessThanLessThanToken;\n                }\n            }\n            else {\n                return SyntaxKind.LessThanToken;\n            }\n        }\n\n        private scanBarToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.BarEqualsToken;\n            }\n            else if (this.currentCharCode() === CharacterCodes.bar) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.BarBarToken;\n            }\n            else {\n                return SyntaxKind.BarToken;\n            }\n        }\n\n        private scanCaretToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.CaretEqualsToken;\n            }\n            else {\n                return SyntaxKind.CaretToken;\n            }\n        }\n\n        private scanAmpersandToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            var character = this.currentCharCode();\n            if (character === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.AmpersandEqualsToken;\n            }\n            else if (this.currentCharCode() === CharacterCodes.ampersand) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.AmpersandAmpersandToken;\n            }\n            else {\n                return SyntaxKind.AmpersandToken;\n            }\n        }\n\n        private scanPercentToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.PercentEqualsToken;\n            }\n            else {\n                return SyntaxKind.PercentToken;\n            }\n        }\n\n        private scanMinusToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            var character = this.currentCharCode();\n\n            if (character === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.MinusEqualsToken;\n            }\n            else if (character === CharacterCodes.minus) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.MinusMinusToken;\n            }\n            else {\n                return SyntaxKind.MinusToken;\n            }\n        }\n\n        private scanPlusToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            var character = this.currentCharCode();\n            if (character === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.PlusEqualsToken;\n            }\n            else if (character === CharacterCodes.plus) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.PlusPlusToken;\n            }\n            else {\n                return SyntaxKind.PlusToken;\n            }\n        }\n\n        private scanAsteriskToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.AsteriskEqualsToken;\n            }\n            else {\n                return SyntaxKind.AsteriskToken;\n            }\n        }\n\n        private scanEqualsToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            var character = this.currentCharCode()\n            if (character === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n\n                if (this.currentCharCode() === CharacterCodes.equals) {\n                    this.slidingWindow.moveToNextItem();\n\n                    return SyntaxKind.EqualsEqualsEqualsToken;\n                }\n                else {\n                    return SyntaxKind.EqualsEqualsToken;\n                }\n            }\n            else if (character === CharacterCodes.greaterThan) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.EqualsGreaterThanToken;\n            }\n            else {\n                return SyntaxKind.EqualsToken;\n            }\n        }\n\n        private isDotPrefixedNumericLiteral(): bool {\n            if (this.currentCharCode() === CharacterCodes.dot) {\n                var ch = this.slidingWindow.peekItemN(1);\n                return CharacterInfo.isDecimalDigit(ch);\n            }\n\n            return false;\n        }\n\n        private scanDotToken(): SyntaxKind {\n            if (this.isDotPrefixedNumericLiteral()) {\n                return this.scanNumericLiteral();\n            }\n\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.dot &&\n                this.slidingWindow.peekItemN(1) === CharacterCodes.dot) {\n\n                this.slidingWindow.moveToNextItem();\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.DotDotDotToken;\n            }\n            else {\n                return SyntaxKind.DotToken;\n            }\n        }\n\n        private scanSlashToken(allowRegularExpression: bool): SyntaxKind {\n            // NOTE: By default, we do not try scanning a / as a regexp here.  We instead consider it a\n            // div or div-assign.  Later on, if the parser runs into a situation where it would like a \n            // term, and it sees one of these then it may restart us asking specifically if we could \n            // scan out a regex.\n            if (allowRegularExpression) {\n                var result = this.tryScanRegularExpressionToken();\n                if (result !== SyntaxKind.None) {\n                    return result;\n                }\n            }\n\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n                return SyntaxKind.SlashEqualsToken;\n            }\n            else {\n                return SyntaxKind.SlashToken;\n            }\n        }\n\n        private tryScanRegularExpressionToken(): SyntaxKind {\n            // Debug.assert(this.currentCharCode() === CharacterCodes.slash);\n\n            var startIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n            try {\n                this.slidingWindow.moveToNextItem();\n\n                var inEscape = false;\n                var inCharacterClass = false;\n                while (true) {\n                    var ch = this.currentCharCode();\n                    if (this.isNewLineCharacter(ch) || this.slidingWindow.isAtEndOfSource()) {\n                        this.slidingWindow.rewindToPinnedIndex(startIndex);\n                        return SyntaxKind.None;\n                    }\n\n                    this.slidingWindow.moveToNextItem();\n                    if (inEscape) {\n                        inEscape = false;\n                        continue;\n                    }\n\n                    switch (ch) {\n                        case CharacterCodes.backslash:\n                            // We\'re now in an escape.  Consume the next character we see (unless it\'s\n                            // a newline or null.\n                            inEscape = true;\n                            continue;\n\n                        case CharacterCodes.openBracket:\n                            // If we see a [ then we\'re starting an character class.  Note: it\'s ok if \n                            // we then hit another [ inside a character class.  We\'ll just set the value\n                            // to true again and that\'s ok.\n                            inCharacterClass = true;\n                            continue;\n\n                        case CharacterCodes.closeBracket:\n                            // If we ever hit a cloe bracket then we\'re now no longer in a character \n                            // class.  If we weren\'t in a character class to begin with, then this has \n                            // no effect.\n                            inCharacterClass = false;\n                            continue;\n\n                        case CharacterCodes.slash:\n                            // If we see a slash, and we\'re in a character class, then ignore it.\n                            if (inCharacterClass) {\n                                continue;\n                            }\n\n                            // We\'re done with the regex.  Break out of the switch (which will break \n                            // out of hte loop.\n                            break;\n\n                        default:\n                            // Just consume any other characters.\n                            continue;\n                    }\n\n                    break;\n                }\n\n                // TODO: The grammar says any identifier part is allowed here.  Do we need to support\n                // \\u identifiers here?  The existing typescript parser does not.  \n                while (Scanner1.isIdentifierPartCharacter[this.currentCharCode()]) {\n                    this.slidingWindow.moveToNextItem();\n                }\n\n                return SyntaxKind.RegularExpressionLiteral;\n            }\n            finally {\n                this.slidingWindow.releaseAndUnpinAbsoluteIndex(startIndex);\n            }\n        }\n\n        private scanExclamationToken(): SyntaxKind {\n            this.slidingWindow.moveToNextItem();\n            if (this.currentCharCode() === CharacterCodes.equals) {\n                this.slidingWindow.moveToNextItem();\n\n                if (this.currentCharCode() === CharacterCodes.equals) {\n                    this.slidingWindow.moveToNextItem();\n\n                    return SyntaxKind.ExclamationEqualsEqualsToken;\n                }\n                else {\n                    return SyntaxKind.ExclamationEqualsToken;\n                }\n            }\n            else {\n                return SyntaxKind.ExclamationToken;\n            }\n        }\n\n        private scanDefaultCharacter(character: number, diagnostics: SyntaxDiagnostic[]): SyntaxKind {\n            var position = this.slidingWindow.absoluteIndex();\n            this.slidingWindow.moveToNextItem();\n\n            var text = String.fromCharCode(character);\n            var messageText = this.getErrorMessageText(text);\n            diagnostics.push(new SyntaxDiagnostic(this.fileName,\n                position, 1, DiagnosticCode.Unexpected_character_0, [messageText]));\n\n            return SyntaxKind.ErrorToken;\n        }\n\n        // Convert text into a printable form usable for an error message.  This will both quote the \n        // string, and ensure all characters printable (i.e. by using unicode escapes when they\'re not).\n        private getErrorMessageText(text: string): string {\n            // For just a simple backslash, we return it as is.  The default behavior of JSON2.stringify\n            // is not what we want here.\n            if (text === \"\\\\\") {\n                return \'\"\\\\\"\';\n            }\n\n            return JSON2.stringify(text);\n        }\n\n        private skipEscapeSequence(diagnostics: SyntaxDiagnostic[]): void {\n            // Debug.assert(this.currentCharCode() === CharacterCodes.backslash);\n\n            var rewindPoint = this.slidingWindow.getAndPinAbsoluteIndex();\n            try {\n                // Consume the backslash.\n                this.slidingWindow.moveToNextItem();\n\n                // Get the char after the backslash\n                var ch = this.currentCharCode();\n                this.slidingWindow.moveToNextItem();\n                switch (ch) {\n                    case CharacterCodes.x:\n                    case CharacterCodes.u:\n                        this.slidingWindow.rewindToPinnedIndex(rewindPoint);\n                        var value = this.scanUnicodeOrHexEscape(diagnostics);\n                        return;\n\n                    case CharacterCodes.carriageReturn:\n                        // If it\'s \\r\\n then consume both characters.\n                        if (this.currentCharCode() === CharacterCodes.lineFeed) {\n                            this.slidingWindow.moveToNextItem();\n                        }\n                        return;\n\n                    // We don\'t have to do anything special about these characters.  I\'m including them\n                    // Just so it\'s clear that we intentially process them in the exact same way:\n                    //case CharacterCodes.singleQuote:\n                    //case CharacterCodes.doubleQuote:\n                    //case CharacterCodes.backslash:\n                    //case CharacterCodes._0:\n                    //case CharacterCodes.b:\n                    //case CharacterCodes.f:\n                    //case CharacterCodes.n:\n                    //case CharacterCodes.r:\n                    //case CharacterCodes.t:\n                    //case CharacterCodes.v:\n                    //case CharacterCodes.lineFeed:\n                    //case CharacterCodes.paragraphSeparator:\n                    //case CharacterCodes.lineSeparator:\n                    default:\n                        // Any other character is ok as well.  As per rule:\n                        // EscapeSequence :: CharacterEscapeSequence\n                        // CharacterEscapeSequence :: NonEscapeCharacter\n                        // NonEscapeCharacter :: SourceCharacter but notEscapeCharacter or LineTerminator\n                        return;\n                }\n            }\n            finally {\n                this.slidingWindow.releaseAndUnpinAbsoluteIndex(rewindPoint);\n            }\n        }\n\n        private scanStringLiteral(diagnostics: SyntaxDiagnostic[]): SyntaxKind {\n            var quoteCharacter = this.currentCharCode();\n\n            // Debug.assert(quoteCharacter === CharacterCodes.singleQuote || quoteCharacter === CharacterCodes.doubleQuote);\n\n            this.slidingWindow.moveToNextItem();\n\n            while (true) {\n                var ch = this.currentCharCode();\n                if (ch === CharacterCodes.backslash) {\n                    this.skipEscapeSequence(diagnostics);\n                }\n                else if (ch === quoteCharacter) {\n                    this.slidingWindow.moveToNextItem();\n                    break;\n                }\n                else if (this.isNewLineCharacter(ch) || this.slidingWindow.isAtEndOfSource()) {\n                    diagnostics.push(new SyntaxDiagnostic(this.fileName,\n                        this.slidingWindow.absoluteIndex(), 1, DiagnosticCode.Missing_closing_quote_character, null));\n                    break;\n                }\n                else {\n                    this.slidingWindow.moveToNextItem();\n                }\n            }\n\n            return SyntaxKind.StringLiteral;\n        }\n\n        private isUnicodeOrHexEscape(character: number): bool {\n            return this.isUnicodeEscape(character) || this.isHexEscape(character);\n        }\n\n        private isUnicodeEscape(character: number): bool {\n            if (character === CharacterCodes.backslash) {\n                var ch2 = this.slidingWindow.peekItemN(1);\n                if (ch2 === CharacterCodes.u) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private isHexEscape(character: number): bool {\n            if (character === CharacterCodes.backslash) {\n                var ch2 = this.slidingWindow.peekItemN(1);\n                if (ch2 === CharacterCodes.x) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private peekCharOrUnicodeOrHexEscape(): number {\n            var character = this.currentCharCode();\n            if (this.isUnicodeOrHexEscape(character)) {\n                return this.peekUnicodeOrHexEscape();\n            }\n            else {\n                return character;\n            }\n        }\n\n        private peekCharOrUnicodeEscape(): number {\n            var character = this.currentCharCode();\n            if (this.isUnicodeEscape(character)) {\n                return this.peekUnicodeOrHexEscape();\n            }\n            else {\n                return character;\n            }\n        }\n\n        private peekUnicodeOrHexEscape(): number {\n            var startIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n\n            // if we\'re peeking, then we don\'t want to change the position\n            var ch = this.scanUnicodeOrHexEscape(/*errors:*/ null);\n\n            this.slidingWindow.rewindToPinnedIndex(startIndex);\n            this.slidingWindow.releaseAndUnpinAbsoluteIndex(startIndex);\n\n            return ch;\n        }\n\n        private scanCharOrUnicodeEscape(errors: SyntaxDiagnostic[]): number {\n            var ch = this.currentCharCode();\n            if (ch === CharacterCodes.backslash) {\n                var ch2 = this.slidingWindow.peekItemN(1);\n                if (ch2 === CharacterCodes.u) {\n                    return this.scanUnicodeOrHexEscape(errors);\n                }\n            }\n\n            this.slidingWindow.moveToNextItem();\n            return ch;\n        }\n\n        private scanCharOrUnicodeOrHexEscape(errors: SyntaxDiagnostic[]): number {\n            var ch = this.currentCharCode();\n            if (ch === CharacterCodes.backslash) {\n                var ch2 = this.slidingWindow.peekItemN(1);\n                if (ch2 === CharacterCodes.u || ch2 === CharacterCodes.x) {\n                    return this.scanUnicodeOrHexEscape(errors);\n                }\n            }\n\n            this.slidingWindow.moveToNextItem();\n            return ch;\n        }\n\n        private scanUnicodeOrHexEscape(errors: SyntaxDiagnostic[]): number {\n            var start = this.slidingWindow.absoluteIndex();\n            var character = this.currentCharCode();\n            // Debug.assert(character === CharacterCodes.backslash);\n            this.slidingWindow.moveToNextItem();\n\n            character = this.currentCharCode();\n            // Debug.assert(character === CharacterCodes.u || character === CharacterCodes.x);\n\n            var intChar = 0;\n            this.slidingWindow.moveToNextItem();\n\n            var count = character === CharacterCodes.u ? 4 : 2;\n\n            for (var i = 0; i < count; i++) {\n                var ch2 = this.currentCharCode();\n                if (!CharacterInfo.isHexDigit(ch2)) {\n                    if (errors !== null) {\n                        var end = this.slidingWindow.absoluteIndex();\n                        var info = this.createIllegalEscapeDiagnostic(start, end);\n                        errors.push(info);\n                    }\n\n                    break;\n                }\n\n                intChar = (intChar << 4) + CharacterInfo.hexValue(ch2);\n                this.slidingWindow.moveToNextItem();\n            }\n\n            return intChar;\n        }\n\n        public substring(start: number, end: number, intern: bool): string {\n            var length = end - start;\n            var offset = start - this.slidingWindow.windowAbsoluteStartIndex;\n\n            // Debug.assert(offset >= 0);\n            if (intern) {\n                return Collections.DefaultStringTable.addCharArray(this.slidingWindow.window, offset, length);\n            }\n            else {\n                return StringUtilities.fromCharCodeArray(this.slidingWindow.window.slice(offset, offset + length));\n            }\n        }\n\n        private createIllegalEscapeDiagnostic(start: number, end: number): SyntaxDiagnostic {\n            return new SyntaxDiagnostic(this.fileName, start, end - start,\n                DiagnosticCode.Unrecognized_escape_sequence, null);\n        }\n    }\n}\n﻿///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class ScannerUtilities {\n        public static identifierKind(array: number[], startIndex: number, length: number): SyntaxKind {\n            switch (length) {\n            case 2:\n                // do, if, in\n            switch(array[startIndex]) {\n            case CharacterCodes.d:\n                // do\n                return (array[startIndex + 1] === CharacterCodes.o) ? SyntaxKind.DoKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.i:\n                // if, in\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.f:\n                    // if\n                    return SyntaxKind.IfKeyword;\n                case CharacterCodes.n:\n                    // in\n                    return SyntaxKind.InKeyword;\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 3:\n                // for, new, try, var, let, any, get, set\n            switch(array[startIndex]) {\n            case CharacterCodes.f:\n                // for\n                return (array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.r) ? SyntaxKind.ForKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.n:\n                // new\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.w) ? SyntaxKind.NewKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.t:\n                // try\n                return (array[startIndex + 1] === CharacterCodes.r && array[startIndex + 2] === CharacterCodes.y) ? SyntaxKind.TryKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.v:\n                // var\n                return (array[startIndex + 1] === CharacterCodes.a && array[startIndex + 2] === CharacterCodes.r) ? SyntaxKind.VarKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.l:\n                // let\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.t) ? SyntaxKind.LetKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.a:\n                // any\n                return (array[startIndex + 1] === CharacterCodes.n && array[startIndex + 2] === CharacterCodes.y) ? SyntaxKind.AnyKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.g:\n                // get\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.t) ? SyntaxKind.GetKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.s:\n                // set\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.t) ? SyntaxKind.SetKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 4:\n                // case, else, null, this, true, void, with, enum, bool\n            switch(array[startIndex]) {\n            case CharacterCodes.c:\n                // case\n                return (array[startIndex + 1] === CharacterCodes.a && array[startIndex + 2] === CharacterCodes.s && array[startIndex + 3] === CharacterCodes.e) ? SyntaxKind.CaseKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.e:\n                // else, enum\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.l:\n                    // else\n                    return (array[startIndex + 2] === CharacterCodes.s && array[startIndex + 3] === CharacterCodes.e) ? SyntaxKind.ElseKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.n:\n                    // enum\n                    return (array[startIndex + 2] === CharacterCodes.u && array[startIndex + 3] === CharacterCodes.m) ? SyntaxKind.EnumKeyword : SyntaxKind.IdentifierName;\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            case CharacterCodes.n:\n                // null\n                return (array[startIndex + 1] === CharacterCodes.u && array[startIndex + 2] === CharacterCodes.l && array[startIndex + 3] === CharacterCodes.l) ? SyntaxKind.NullKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.t:\n                // this, true\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.h:\n                    // this\n                    return (array[startIndex + 2] === CharacterCodes.i && array[startIndex + 3] === CharacterCodes.s) ? SyntaxKind.ThisKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.r:\n                    // true\n                    return (array[startIndex + 2] === CharacterCodes.u && array[startIndex + 3] === CharacterCodes.e) ? SyntaxKind.TrueKeyword : SyntaxKind.IdentifierName;\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            case CharacterCodes.v:\n                // void\n                return (array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.i && array[startIndex + 3] === CharacterCodes.d) ? SyntaxKind.VoidKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.w:\n                // with\n                return (array[startIndex + 1] === CharacterCodes.i && array[startIndex + 2] === CharacterCodes.t && array[startIndex + 3] === CharacterCodes.h) ? SyntaxKind.WithKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.b:\n                // bool\n                return (array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.o && array[startIndex + 3] === CharacterCodes.l) ? SyntaxKind.BoolKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 5:\n                // break, catch, false, throw, while, class, const, super, yield\n            switch(array[startIndex]) {\n            case CharacterCodes.b:\n                // break\n                return (array[startIndex + 1] === CharacterCodes.r && array[startIndex + 2] === CharacterCodes.e && array[startIndex + 3] === CharacterCodes.a && array[startIndex + 4] === CharacterCodes.k) ? SyntaxKind.BreakKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.c:\n                // catch, class, const\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.a:\n                    // catch\n                    return (array[startIndex + 2] === CharacterCodes.t && array[startIndex + 3] === CharacterCodes.c && array[startIndex + 4] === CharacterCodes.h) ? SyntaxKind.CatchKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.l:\n                    // class\n                    return (array[startIndex + 2] === CharacterCodes.a && array[startIndex + 3] === CharacterCodes.s && array[startIndex + 4] === CharacterCodes.s) ? SyntaxKind.ClassKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.o:\n                    // const\n                    return (array[startIndex + 2] === CharacterCodes.n && array[startIndex + 3] === CharacterCodes.s && array[startIndex + 4] === CharacterCodes.t) ? SyntaxKind.ConstKeyword : SyntaxKind.IdentifierName;\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            case CharacterCodes.f:\n                // false\n                return (array[startIndex + 1] === CharacterCodes.a && array[startIndex + 2] === CharacterCodes.l && array[startIndex + 3] === CharacterCodes.s && array[startIndex + 4] === CharacterCodes.e) ? SyntaxKind.FalseKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.t:\n                // throw\n                return (array[startIndex + 1] === CharacterCodes.h && array[startIndex + 2] === CharacterCodes.r && array[startIndex + 3] === CharacterCodes.o && array[startIndex + 4] === CharacterCodes.w) ? SyntaxKind.ThrowKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.w:\n                // while\n                return (array[startIndex + 1] === CharacterCodes.h && array[startIndex + 2] === CharacterCodes.i && array[startIndex + 3] === CharacterCodes.l && array[startIndex + 4] === CharacterCodes.e) ? SyntaxKind.WhileKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.s:\n                // super\n                return (array[startIndex + 1] === CharacterCodes.u && array[startIndex + 2] === CharacterCodes.p && array[startIndex + 3] === CharacterCodes.e && array[startIndex + 4] === CharacterCodes.r) ? SyntaxKind.SuperKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.y:\n                // yield\n                return (array[startIndex + 1] === CharacterCodes.i && array[startIndex + 2] === CharacterCodes.e && array[startIndex + 3] === CharacterCodes.l && array[startIndex + 4] === CharacterCodes.d) ? SyntaxKind.YieldKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 6:\n                // delete, return, switch, typeof, export, import, public, static, module, number, string\n            switch(array[startIndex]) {\n            case CharacterCodes.d:\n                // delete\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.l && array[startIndex + 3] === CharacterCodes.e && array[startIndex + 4] === CharacterCodes.t && array[startIndex + 5] === CharacterCodes.e) ? SyntaxKind.DeleteKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.r:\n                // return\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.t && array[startIndex + 3] === CharacterCodes.u && array[startIndex + 4] === CharacterCodes.r && array[startIndex + 5] === CharacterCodes.n) ? SyntaxKind.ReturnKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.s:\n                // switch, static, string\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.w:\n                    // switch\n                    return (array[startIndex + 2] === CharacterCodes.i && array[startIndex + 3] === CharacterCodes.t && array[startIndex + 4] === CharacterCodes.c && array[startIndex + 5] === CharacterCodes.h) ? SyntaxKind.SwitchKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.t:\n                    // static, string\n                    switch(array[startIndex + 2]) {\n                    case CharacterCodes.a:\n                        // static\n                        return (array[startIndex + 3] === CharacterCodes.t && array[startIndex + 4] === CharacterCodes.i && array[startIndex + 5] === CharacterCodes.c) ? SyntaxKind.StaticKeyword : SyntaxKind.IdentifierName;\n                    case CharacterCodes.r:\n                        // string\n                        return (array[startIndex + 3] === CharacterCodes.i && array[startIndex + 4] === CharacterCodes.n && array[startIndex + 5] === CharacterCodes.g) ? SyntaxKind.StringKeyword : SyntaxKind.IdentifierName;\n                    default:\n                        return SyntaxKind.IdentifierName;\n                    }\n\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            case CharacterCodes.t:\n                // typeof\n                return (array[startIndex + 1] === CharacterCodes.y && array[startIndex + 2] === CharacterCodes.p && array[startIndex + 3] === CharacterCodes.e && array[startIndex + 4] === CharacterCodes.o && array[startIndex + 5] === CharacterCodes.f) ? SyntaxKind.TypeOfKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.e:\n                // export\n                return (array[startIndex + 1] === CharacterCodes.x && array[startIndex + 2] === CharacterCodes.p && array[startIndex + 3] === CharacterCodes.o && array[startIndex + 4] === CharacterCodes.r && array[startIndex + 5] === CharacterCodes.t) ? SyntaxKind.ExportKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.i:\n                // import\n                return (array[startIndex + 1] === CharacterCodes.m && array[startIndex + 2] === CharacterCodes.p && array[startIndex + 3] === CharacterCodes.o && array[startIndex + 4] === CharacterCodes.r && array[startIndex + 5] === CharacterCodes.t) ? SyntaxKind.ImportKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.p:\n                // public\n                return (array[startIndex + 1] === CharacterCodes.u && array[startIndex + 2] === CharacterCodes.b && array[startIndex + 3] === CharacterCodes.l && array[startIndex + 4] === CharacterCodes.i && array[startIndex + 5] === CharacterCodes.c) ? SyntaxKind.PublicKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.m:\n                // module\n                return (array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.d && array[startIndex + 3] === CharacterCodes.u && array[startIndex + 4] === CharacterCodes.l && array[startIndex + 5] === CharacterCodes.e) ? SyntaxKind.ModuleKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.n:\n                // number\n                return (array[startIndex + 1] === CharacterCodes.u && array[startIndex + 2] === CharacterCodes.m && array[startIndex + 3] === CharacterCodes.b && array[startIndex + 4] === CharacterCodes.e && array[startIndex + 5] === CharacterCodes.r) ? SyntaxKind.NumberKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 7:\n                // default, finally, extends, package, private, boolean, declare\n            switch(array[startIndex]) {\n            case CharacterCodes.d:\n                // default, declare\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.e:\n                    // default, declare\n                    switch(array[startIndex + 2]) {\n                    case CharacterCodes.f:\n                        // default\n                        return (array[startIndex + 3] === CharacterCodes.a && array[startIndex + 4] === CharacterCodes.u && array[startIndex + 5] === CharacterCodes.l && array[startIndex + 6] === CharacterCodes.t) ? SyntaxKind.DefaultKeyword : SyntaxKind.IdentifierName;\n                    case CharacterCodes.c:\n                        // declare\n                        return (array[startIndex + 3] === CharacterCodes.l && array[startIndex + 4] === CharacterCodes.a && array[startIndex + 5] === CharacterCodes.r && array[startIndex + 6] === CharacterCodes.e) ? SyntaxKind.DeclareKeyword : SyntaxKind.IdentifierName;\n                    default:\n                        return SyntaxKind.IdentifierName;\n                    }\n\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            case CharacterCodes.f:\n                // finally\n                return (array[startIndex + 1] === CharacterCodes.i && array[startIndex + 2] === CharacterCodes.n && array[startIndex + 3] === CharacterCodes.a && array[startIndex + 4] === CharacterCodes.l && array[startIndex + 5] === CharacterCodes.l && array[startIndex + 6] === CharacterCodes.y) ? SyntaxKind.FinallyKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.e:\n                // extends\n                return (array[startIndex + 1] === CharacterCodes.x && array[startIndex + 2] === CharacterCodes.t && array[startIndex + 3] === CharacterCodes.e && array[startIndex + 4] === CharacterCodes.n && array[startIndex + 5] === CharacterCodes.d && array[startIndex + 6] === CharacterCodes.s) ? SyntaxKind.ExtendsKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.p:\n                // package, private\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.a:\n                    // package\n                    return (array[startIndex + 2] === CharacterCodes.c && array[startIndex + 3] === CharacterCodes.k && array[startIndex + 4] === CharacterCodes.a && array[startIndex + 5] === CharacterCodes.g && array[startIndex + 6] === CharacterCodes.e) ? SyntaxKind.PackageKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.r:\n                    // private\n                    return (array[startIndex + 2] === CharacterCodes.i && array[startIndex + 3] === CharacterCodes.v && array[startIndex + 4] === CharacterCodes.a && array[startIndex + 5] === CharacterCodes.t && array[startIndex + 6] === CharacterCodes.e) ? SyntaxKind.PrivateKeyword : SyntaxKind.IdentifierName;\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            case CharacterCodes.b:\n                // boolean\n                return (array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.o && array[startIndex + 3] === CharacterCodes.l && array[startIndex + 4] === CharacterCodes.e && array[startIndex + 5] === CharacterCodes.a && array[startIndex + 6] === CharacterCodes.n) ? SyntaxKind.BooleanKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 8:\n                // continue, debugger, function\n            switch(array[startIndex]) {\n            case CharacterCodes.c:\n                // continue\n                return (array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.n && array[startIndex + 3] === CharacterCodes.t && array[startIndex + 4] === CharacterCodes.i && array[startIndex + 5] === CharacterCodes.n && array[startIndex + 6] === CharacterCodes.u && array[startIndex + 7] === CharacterCodes.e) ? SyntaxKind.ContinueKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.d:\n                // debugger\n                return (array[startIndex + 1] === CharacterCodes.e && array[startIndex + 2] === CharacterCodes.b && array[startIndex + 3] === CharacterCodes.u && array[startIndex + 4] === CharacterCodes.g && array[startIndex + 5] === CharacterCodes.g && array[startIndex + 6] === CharacterCodes.e && array[startIndex + 7] === CharacterCodes.r) ? SyntaxKind.DebuggerKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.f:\n                // function\n                return (array[startIndex + 1] === CharacterCodes.u && array[startIndex + 2] === CharacterCodes.n && array[startIndex + 3] === CharacterCodes.c && array[startIndex + 4] === CharacterCodes.t && array[startIndex + 5] === CharacterCodes.i && array[startIndex + 6] === CharacterCodes.o && array[startIndex + 7] === CharacterCodes.n) ? SyntaxKind.FunctionKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 9:\n                // interface, protected\n            switch(array[startIndex]) {\n            case CharacterCodes.i:\n                // interface\n                return (array[startIndex + 1] === CharacterCodes.n && array[startIndex + 2] === CharacterCodes.t && array[startIndex + 3] === CharacterCodes.e && array[startIndex + 4] === CharacterCodes.r && array[startIndex + 5] === CharacterCodes.f && array[startIndex + 6] === CharacterCodes.a && array[startIndex + 7] === CharacterCodes.c && array[startIndex + 8] === CharacterCodes.e) ? SyntaxKind.InterfaceKeyword : SyntaxKind.IdentifierName;\n            case CharacterCodes.p:\n                // protected\n                return (array[startIndex + 1] === CharacterCodes.r && array[startIndex + 2] === CharacterCodes.o && array[startIndex + 3] === CharacterCodes.t && array[startIndex + 4] === CharacterCodes.e && array[startIndex + 5] === CharacterCodes.c && array[startIndex + 6] === CharacterCodes.t && array[startIndex + 7] === CharacterCodes.e && array[startIndex + 8] === CharacterCodes.d) ? SyntaxKind.ProtectedKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 10:\n                // instanceof, implements\n            switch(array[startIndex]) {\n            case CharacterCodes.i:\n                // instanceof, implements\n                switch(array[startIndex + 1]) {\n                case CharacterCodes.n:\n                    // instanceof\n                    return (array[startIndex + 2] === CharacterCodes.s && array[startIndex + 3] === CharacterCodes.t && array[startIndex + 4] === CharacterCodes.a && array[startIndex + 5] === CharacterCodes.n && array[startIndex + 6] === CharacterCodes.c && array[startIndex + 7] === CharacterCodes.e && array[startIndex + 8] === CharacterCodes.o && array[startIndex + 9] === CharacterCodes.f) ? SyntaxKind.InstanceOfKeyword : SyntaxKind.IdentifierName;\n                case CharacterCodes.m:\n                    // implements\n                    return (array[startIndex + 2] === CharacterCodes.p && array[startIndex + 3] === CharacterCodes.l && array[startIndex + 4] === CharacterCodes.e && array[startIndex + 5] === CharacterCodes.m && array[startIndex + 6] === CharacterCodes.e && array[startIndex + 7] === CharacterCodes.n && array[startIndex + 8] === CharacterCodes.t && array[startIndex + 9] === CharacterCodes.s) ? SyntaxKind.ImplementsKeyword : SyntaxKind.IdentifierName;\n                default:\n                    return SyntaxKind.IdentifierName;\n                }\n\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n\n            case 11:\n                // constructor\n            return (array[startIndex] === CharacterCodes.c && array[startIndex + 1] === CharacterCodes.o && array[startIndex + 2] === CharacterCodes.n && array[startIndex + 3] === CharacterCodes.s && array[startIndex + 4] === CharacterCodes.t && array[startIndex + 5] === CharacterCodes.r && array[startIndex + 6] === CharacterCodes.u && array[startIndex + 7] === CharacterCodes.c && array[startIndex + 8] === CharacterCodes.t && array[startIndex + 9] === CharacterCodes.o && array[startIndex + 10] === CharacterCodes.r) ? SyntaxKind.ConstructorKeyword : SyntaxKind.IdentifierName;\n            default:\n                return SyntaxKind.IdentifierName;\n            }\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript.Syntax {\n    export var emptySeparatedList: ISeparatedSyntaxList = {\n        kind: () => SyntaxKind.SeparatedList,\n\n        isNode: () => false,\n        isToken: () => false,\n        isList: () => false,\n        isSeparatedList: () => true,\n\n        toJSON: (key) => [],\n\n        childCount: () => 0,\n        nonSeparatorCount: () => 0,\n        separatorCount: () => 0,\n\n        toArray: () => [],\n        toNonSeparatorArray: () => [],\n\n        childAt: (index: number): ISyntaxNodeOrToken => {\n            throw Errors.argumentOutOfRange(\"index\");\n        },\n\n        nonSeparatorAt: (index: number): ISyntaxNodeOrToken => {\n            throw Errors.argumentOutOfRange(\"index\");\n        },\n\n        separatorAt: (index: number): ISyntaxToken => {\n            throw Errors.argumentOutOfRange(\"index\");\n        },\n\n        collectTextElements: (elements: string[]): void => { },\n\n        firstToken: (): ISyntaxToken => null,\n        lastToken: (): ISyntaxToken => null,\n\n        fullWidth: () => 0,\n        fullText: () => \"\",\n\n        width: () => 0,\n\n        isTypeScriptSpecific: () => false,\n        isIncrementallyUnusable: () => false,\n\n        findTokenInternal: (parent: PositionedElement, position: number, fullStart: number): PositionedToken => {\n            // This should never have been called on this list.  It has a 0 width, so the client \n            // should have skipped over this.\n            throw Errors.invalidOperation();\n        },\n\n        insertChildrenInto: (array: ISyntaxElement[], index: number): void => {\n        },\n\n        leadingTrivia: () => Syntax.emptyTriviaList,\n        trailingTrivia: () => Syntax.emptyTriviaList,\n\n        leadingTriviaWidth: () => 0,\n        trailingTriviaWidth:() => 0\n    }\n\n    class SingletonSeparatedSyntaxList implements ISeparatedSyntaxList {\n        private item: ISyntaxNodeOrToken;\n\n        constructor(item: ISyntaxNodeOrToken) {\n            this.item = item;\n        }\n\n        public toJSON(key) {\n            return [this.item];\n        }\n\n        public kind() { return SyntaxKind.SeparatedList; }\n\n        public isNode(): bool { return false; }\n        public isToken(): bool { return false; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return true; }\n\n        public childCount() { return 1; }\n        public nonSeparatorCount() { return 1; }\n        public separatorCount() { return 0; }\n\n        public toArray() { return [this.item]; }\n        public toNonSeparatorArray() { return [this.item]; }\n\n        public childAt(index: number): ISyntaxNodeOrToken {\n            if (index !== 0) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.item;\n        }\n\n        public nonSeparatorAt(index: number): ISyntaxNodeOrToken {\n            if (index !== 0) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.item;\n        }\n\n        public separatorAt(index: number): ISyntaxToken {\n            throw Errors.argumentOutOfRange(\"index\");\n        }\n\n        private collectTextElements(elements: string[]): void {\n            this.item.collectTextElements(elements);\n        }\n\n        public firstToken(): ISyntaxToken {\n            return this.item.firstToken();\n        }\n\n        public lastToken(): ISyntaxToken {\n            return this.item.lastToken();\n        }\n\n        public fullWidth(): number {\n            return this.item.fullWidth();\n        }\n\n        public width(): number {\n            return this.item.width();\n        }\n\n        public fullText(): string {\n            return this.item.fullText();\n        }\n\n        public leadingTrivia(): ISyntaxTriviaList {\n            return this.item.leadingTrivia();\n        }\n\n        public trailingTrivia(): ISyntaxTriviaList {\n            return this.item.trailingTrivia();\n        }\n\n        public leadingTriviaWidth(): number {\n            return this.item.leadingTriviaWidth();\n        }\n\n        public trailingTriviaWidth(): number {\n            return this.item.trailingTriviaWidth();\n        }\n\n        public isTypeScriptSpecific(): bool {\n            return this.item.isTypeScriptSpecific();\n        }\n\n        public isIncrementallyUnusable(): bool {\n            return this.item.isIncrementallyUnusable();\n        }\n\n        public findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            // Debug.assert(position >= 0 && position < this.item.fullWidth());\n            return (<any>this.item).findTokenInternal(\n                new PositionedSeparatedList(parent, this, fullStart), position, fullStart);\n        }\n\n        public insertChildrenInto(array: ISyntaxElement[], index: number): void {\n            array.splice(index, 0, this.item);\n        }\n    }\n\n    class NormalSeparatedSyntaxList implements ISeparatedSyntaxList {\n        private elements: ISyntaxNodeOrToken[];\n        private _data: number = 0;\n\n        constructor(elements: ISyntaxNodeOrToken[]) {\n            this.elements = elements;\n        }\n\n        public kind() { return SyntaxKind.SeparatedList; }\n\n        public isToken(): bool { return false; }\n        public isNode(): bool { return false; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return true; }\n        public toJSON(key) { return this.elements; }\n\n        public childCount() { return this.elements.length; }\n        public nonSeparatorCount() { return IntegerUtilities.integerDivide(this.elements.length + 1, 2); }\n        public separatorCount() { return IntegerUtilities.integerDivide(this.elements.length, 2); }\n\n        public toArray(): ISyntaxNodeOrToken[] { return this.elements.slice(0); }\n\n        public toNonSeparatorArray(): ISyntaxNodeOrToken[] {\n            var result: ISyntaxNodeOrToken[] = [];\n            for (var i = 0, n = this.nonSeparatorCount(); i < n; i++) {\n                result.push(this.nonSeparatorAt(i));\n            }\n\n            return result;\n        }\n        \n        public childAt(index: number): ISyntaxNodeOrToken {\n            if (index < 0 || index >= this.elements.length) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.elements[index];\n        }\n\n        public nonSeparatorAt(index: number): ISyntaxNodeOrToken {\n            var value = index * 2;\n            if (value < 0 || value >= this.elements.length) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.elements[value];\n        }\n\n        public separatorAt(index: number): ISyntaxToken {\n            var value = index * 2 + 1;\n            if (value < 0 || value >= this.elements.length) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return <ISyntaxToken>this.elements[value];\n        }\n\n        public firstToken(): ISyntaxToken {\n            var token;\n            for (var i = 0, n = this.elements.length; i < n; i++) {\n                if (i % 2 === 0) {\n                    var nodeOrToken = this.elements[i];\n                    token = nodeOrToken.firstToken();\n                    if (token !== null) {\n                        return token;\n                    }\n                }\n                else {\n                    token = <ISyntaxToken>this.elements[i];\n                    if (token.width() > 0) {\n                        return token;\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public lastToken(): ISyntaxToken {\n            var token;\n            for (var i = this.elements.length - 1; i >= 0; i--) {\n                if (i % 2 === 0) {\n                    var nodeOrToken = this.elements[i];\n                    token = nodeOrToken.lastToken();\n                    if (token !== null) {\n                        return token;\n                    }\n                }\n                else {\n                    token = <ISyntaxToken>this.elements[i];\n                    if (token.width() > 0) {\n                        return token;\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public fullText(): string {\n            var elements: string[] = [];\n            this.collectTextElements(elements);\n            return elements.join(\"\");\n        }\n\n        public isTypeScriptSpecific(): bool {\n            for (var i = 0, n = this.nonSeparatorCount(); i < n; i++) {\n                if (this.nonSeparatorAt(i).isTypeScriptSpecific()) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public isIncrementallyUnusable(): bool {\n            return (this.data() & SyntaxConstants.NodeIncrementallyUnusableMask) !== 0;\n        }\n\n        public fullWidth(): number {\n            return this.data() >>> SyntaxConstants.NodeFullWidthShift;\n        }\n\n        public width(): number {\n            var fullWidth = this.fullWidth();\n            return fullWidth - this.leadingTriviaWidth() - this.trailingTriviaWidth();\n        }\n\n        public leadingTrivia(): ISyntaxTriviaList {\n            return this.firstToken().leadingTrivia();\n        }\n\n        public trailingTrivia(): ISyntaxTriviaList {\n            return this.lastToken().trailingTrivia();\n        }\n\n        public leadingTriviaWidth(): number {\n            return this.firstToken().leadingTriviaWidth();\n        }\n\n        public trailingTriviaWidth(): number {\n            return this.lastToken().trailingTriviaWidth();\n        }\n\n        private computeData(): number {\n            var fullWidth = 0;\n            var isIncrementallyUnusable = false;\n\n            for (var i = 0, n = this.elements.length; i < n; i++) {\n                var element = this.elements[i];\n\n                var childWidth = element.fullWidth();\n                fullWidth += childWidth;\n\n                isIncrementallyUnusable = isIncrementallyUnusable || element.isIncrementallyUnusable();\n            }\n\n            return (fullWidth << SyntaxConstants.NodeFullWidthShift)\n                 | (isIncrementallyUnusable ? SyntaxConstants.NodeIncrementallyUnusableMask : 0)\n                 | SyntaxConstants.NodeDataComputed;\n        }\n\n        private data(): number {\n            if ((this._data & SyntaxConstants.NodeDataComputed) === 0) {\n                this._data = this.computeData();\n            }\n\n            return this._data;\n        }\n\n        public findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            parent = new PositionedSeparatedList(parent, this, fullStart);\n            for (var i = 0, n = this.elements.length; i < n; i++) {\n                var element = this.elements[i];\n\n                var childWidth = element.fullWidth();\n                if (position < childWidth) {\n                    return (<any>element).findTokenInternal(parent, position, fullStart);\n                }\n\n                position -= childWidth;\n                fullStart += childWidth;\n            }\n\n            throw Errors.invalidOperation();\n        }\n\n        private collectTextElements(elements: string[]): void {\n            for (var i = 0, n = this.elements.length; i < n; i++) {\n                var element = this.elements[i];\n                element.collectTextElements(elements);\n            }\n        }\n\n        public insertChildrenInto(array: ISyntaxElement[], index: number): void {\n            if (index === 0) {\n                array.unshift.apply(array, this.elements);\n            }\n            else {\n                // TODO: this seems awfully innefficient.  Can we do better here?\n                array.splice.apply(array, [index, <any>0].concat(this.elements));\n            }\n        }\n    }\n\n    export function separatedList(nodes: ISyntaxNodeOrToken[]): ISeparatedSyntaxList {\n        return separatedListAndValidate(nodes, false);\n    }\n\n    function separatedListAndValidate(nodes: ISyntaxNodeOrToken[], validate: bool): ISeparatedSyntaxList {\n        if (nodes === undefined || nodes === null || nodes.length === 0) {\n            return emptySeparatedList;\n        }\n\n        if (validate) {\n            for (var i = 0; i < nodes.length; i++) {\n                var item = nodes[i];\n\n                if (i % 2 === 1) {\n                    // Debug.assert(SyntaxFacts.isTokenKind(item.kind()));\n                }\n            }\n        }\n\n        if (nodes.length === 1) {\n            return new SingletonSeparatedSyntaxList(nodes[0]);\n        }\n\n        return new NormalSeparatedSyntaxList(nodes);\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface ISlidingWindowSource {\n        // Asks the source to copy items starting at sourceIndex into the window at \'destinationIndex\'\n        // with up to \'spaceAvailable\' items.  The actual number of items fetched should be given as \n        // the return value.\n        fetchMoreItems(argument: any, sourceIndex: number, window: any[], destinationIndex: number, spaceAvailable: number): number;\n    }\n\n    export class SlidingWindow {\n\n        // The number of valid items in window.\n        private windowCount: number = 0;\n\n        // The *absolute* index in the *full* array of items the *window* array starts at.  i.e.\n        // if there were 100 items, and window contains tokens [70, 80), then this value would be\n        // 70.\n        public windowAbsoluteStartIndex: number = 0;\n\n        // The index in the window array that we\'re at. i.e. if there 100 items and \n        // window contains tokens [70, 80), and we\'re on item 75, then this value would be \'5\'.\n        // Note: it is not absolute.  It is relative to the start of the window.\n        private currentRelativeItemIndex: number = 0;\n\n        // The number of pinned points there are.  As long as there is at least one  pinned point, we \n        // will not advance the start of the window array past the item marked by that pin point.\n        private _pinCount: number = 0;\n\n        // If there are any outstanding rewind points, this is index in the full array of items\n        // that the first rewind point points to.  If this is not -1, then we will not shift the\n        // start of the items array past this point.\n        private firstPinnedAbsoluteIndex: number = -1;\n\n        constructor(// Underlying source that we retrieve items from.\n                    private source: ISlidingWindowSource,\n                    // A window of items that has been read in from the underlying source.\n                    public window: any[],\n                    // The default value to return when there are no more items left in the window.\n                    private defaultValue: any,\n                    // The length of the source we\'re reading from if we know it up front.  -1 if we do not.\n                    private sourceLength = -1) {\n        }\n\n        // The last legal index of the window (exclusive).\n        private windowAbsoluteEndIndex(): number {\n            return this.windowAbsoluteStartIndex + this.windowCount;\n        }\n\n        private addMoreItemsToWindow(argument: any): bool {\n            if (this.sourceLength >= 0 && this.absoluteIndex() >= this.sourceLength) {\n                return false;\n            }\n\n            // First, make room for the new items if we\'re out of room.\n            if (this.windowCount >= this.window.length) {\n                this.tryShiftOrGrowWindow();\n            }\n\n            var spaceAvailable = this.window.length - this.windowCount;\n            var amountFetched = this.source.fetchMoreItems(argument, this.windowAbsoluteEndIndex(), this.window, this.windowCount, spaceAvailable);\n\n            // Assert disabled because it is actually expensive enugh to affect perf.\n\n            this.windowCount += amountFetched;\n            return amountFetched > 0;\n        }\n\n        private tryShiftOrGrowWindow(): void {\n            // We want to shift if our current item is past the halfway point of the current item window.\n            var currentIndexIsPastWindowHalfwayPoint = this.currentRelativeItemIndex > (this.window.length >>> 1);\n\n            // However, we can only shift if we have no outstanding rewind points.  Or, if we have an \n            // outstanding rewind point, that it points to some point after the start of the window.\n            var isAllowedToShift =\n                this.firstPinnedAbsoluteIndex === -1 ||\n                this.firstPinnedAbsoluteIndex > this.windowAbsoluteStartIndex;\n\n            if (currentIndexIsPastWindowHalfwayPoint && isAllowedToShift) {\n                // Figure out where we\'re going to start shifting from. If we have no oustanding rewind \n                // points, then we\'ll start shifting over all the items starting from the current \n                // token we\'re point out.  Otherwise, we\'ll shift starting from the first item that \n                // the rewind point is pointing at.\n                // \n                // We\'ll call that point \'N\' from now on. \n                var shiftStartIndex = this.firstPinnedAbsoluteIndex === -1\n                    ? this.currentRelativeItemIndex\n                    : this.firstPinnedAbsoluteIndex - this.windowAbsoluteStartIndex;\n\n                // We have to shift the number of elements between the start index and the number of \n                // items in the window.\n                var shiftCount = this.windowCount - shiftStartIndex;\n\n                // Debug.assert(shiftStartIndex > 0);\n                if (shiftCount > 0) {\n                    ArrayUtilities.copy(this.window, shiftStartIndex, this.window, 0, shiftCount);\n                }\n\n                // The window has now moved over to the right by N.\n                this.windowAbsoluteStartIndex += shiftStartIndex;\n\n                // The number of valid items in the window has now decreased by N.\n                this.windowCount -= shiftStartIndex;\n\n                // The current item now starts further to the left in the window.\n                this.currentRelativeItemIndex -= shiftStartIndex;\n            }\n            else {\n                // Grow the exisitng array.\n                // this.window[this.window.length * 2 - 1] = this.defaultValue;\n                ArrayUtilities.grow(this.window, this.window.length * 2, this.defaultValue);\n            }\n        }\n\n        public absoluteIndex(): number {\n            return this.windowAbsoluteStartIndex + this.currentRelativeItemIndex;\n        }\n\n        public isAtEndOfSource(): bool {\n            return this.absoluteIndex() >= this.sourceLength;\n        }\n\n        public getAndPinAbsoluteIndex(): number {\n            // Find the absolute index of this pin point.  i.e. it\'s the index as if we had an \n            // array containing *all* tokens.  \n            var absoluteIndex = this.absoluteIndex();\n            var pinCount = this._pinCount++;\n            if (pinCount === 0) {\n                // If this is the first pinned point, then store off this index.  We will ensure that\n                // we never shift the window past this point.\n                this.firstPinnedAbsoluteIndex = absoluteIndex;\n            }\n\n            return absoluteIndex;\n        }\n\n        public releaseAndUnpinAbsoluteIndex(absoluteIndex: number) {\n            this._pinCount--;\n            if (this._pinCount === 0) {\n                // If we just released the last outstanding pin, then we no longer need to \'fix\' the \n                // token window so it can\'t move forward.  Set the index to -1 so that we can shift \n                // things over the next time we read past the end of the array.\n                this.firstPinnedAbsoluteIndex = -1;\n            }\n        }\n\n        public rewindToPinnedIndex(absoluteIndex: number): void {\n            // The rewind point shows which absolute item we want to rewind to.  Get the relative \n            // index in the actual array that we want to point to.\n            var relativeIndex = absoluteIndex - this.windowAbsoluteStartIndex;\n\n            // Make sure we haven\'t screwed anything up.\n            // Debug.assert(relativeIndex >= 0 && relativeIndex < this.windowCount);\n\n            // Set ourselves back to that point.\n            this.currentRelativeItemIndex = relativeIndex;\n        }\n\n        public currentItem(argument: any): any {\n            if (this.currentRelativeItemIndex >= this.windowCount) {\n                if (!this.addMoreItemsToWindow(argument)) {\n                    return this.defaultValue;\n                }\n            }\n\n            return this.window[this.currentRelativeItemIndex];\n        }\n\n        public peekItemN(n: number): any {\n            // Assert disabled because it is actually expensive enugh to affect perf.\n            // Debug.assert(n >= 0);\n            while (this.currentRelativeItemIndex + n >= this.windowCount) {\n                if (!this.addMoreItemsToWindow(/*argument:*/ null)) {\n                    return this.defaultValue;\n                }\n            }\n\n            return this.window[this.currentRelativeItemIndex + n];\n        }\n\n        public moveToNextItem(): void {\n            this.currentRelativeItemIndex++;\n        }\n\n        public disgardAllItemsFromCurrentIndexOnwards(): void {\n            // By setting the window count to the current relative offset, we are effectively making\n            // any items we added to the window from the current offset onwards unusable.  When we\n            // try to get the next item, we\'ll be forced to refetch them from the underlying source.\n            this.windowCount = this.currentRelativeItemIndex;\n        }\n\n        public setAbsoluteIndex(absoluteIndex: number): void {\n            if (this.absoluteIndex() === absoluteIndex) {\n                // Nothing to do if we\'re setting hte absolute index to where we current are.\n                return;\n            }\n\n            if (this._pinCount > 0) {\n                // If we have any active pins, then the caller better be setting the index somewhere\n                // inside our active window.\n                // Debug.assert(absoluteIndex >= this.windowAbsoluteStartIndex && absoluteIndex < this.windowAbsoluteEndIndex());\n            }\n\n            if (absoluteIndex >= this.windowAbsoluteStartIndex && absoluteIndex < this.windowAbsoluteEndIndex()) {\n                // The caller is setting the index to some place inside our current window.  This is \n                // easy to handle (and should be the common case).\n                this.currentRelativeItemIndex = (absoluteIndex - this.windowAbsoluteStartIndex);\n            }\n            else {\n                // The caller is setting the index to a place not in the window.  Just throw away \n                // everything we\'ve got.\n\n                // First, set the window start to that index.\n                this.windowAbsoluteStartIndex = absoluteIndex;\n\n                // Now, set the count to 0.  So we\'ll be forced to fetch more items.\n                this.windowCount = 0;\n\n                // And set us back to the start of the window.\n                this.currentRelativeItemIndex = 0;\n            }\n        }\n\n        public pinCount(): number {\n            return this._pinCount;\n        }\n    }\n}\n// Localizable string constants.  TODO: Figure out a way to actually localize things.\n\nmodule TypeScript {\n    export class Strings {\n        public static module__class__interface__enum__import_or_statement: string = \"module, class, interface, enum, import or statement\";\n        public static constructor__function__accessor_or_variable: string = \"constructor, function, accessor or variable\";\n        public static statement: string = \"statement\";\n        public static case_or_default_clause: string = \"case or default clause\";\n        public static identifier: string = \"identifier\";\n        public static call__construct__index__property_or_function_signature: string = \"call, construct, index, property or function signature\";\n        public static expression: string = \"expression\";\n        public static type_name: string = \"type name\";\n        public static property_or_accessor: string = \"property or accessor\";\n        public static parameter: string = \"parameter\";\n        public static type: string = \"type\";\n        public static type_parameter: string = \"type parameter\";\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript.Syntax {\n    export function emptySourceUnit() {\n        return Syntax.normalModeFactory.sourceUnit(Syntax.emptyList, Syntax.token(SyntaxKind.EndOfFileToken, { text: \"\" }));\n    }\n\n    export function getStandaloneExpression(positionedToken: PositionedToken): PositionedNodeOrToken\n    {\n        var token = positionedToken.token();\n        if (positionedToken !== null && positionedToken.kind() === SyntaxKind.IdentifierName) {\n            var parentPositionedNode = positionedToken.containingNode();\n            var parentNode = parentPositionedNode.node();\n\n            if (parentNode.kind() === SyntaxKind.QualifiedName && (<QualifiedNameSyntax>parentNode).right === token) {\n                return parentPositionedNode;\n            }\n            else if (parentNode.kind() === SyntaxKind.MemberAccessExpression && (<MemberAccessExpressionSyntax>parentNode).name === token) {\n                return parentPositionedNode;\n            }\n        }\n\n        return positionedToken;\n    }\n\n    export function isInModuleOrTypeContext(positionedToken: PositionedToken): bool {\n        if (positionedToken !== null) {\n            var positionedNodeOrToken = Syntax.getStandaloneExpression(positionedToken);\n            var parent = positionedNodeOrToken.containingNode();\n\n            if (parent !== null) {\n                switch (parent.kind()) {\n                    case SyntaxKind.ModuleNameModuleReference:\n                        return true;\n                    case SyntaxKind.QualifiedName:\n                        // left of QN is namespace or type.  Note: when you have \"a.b.c()\", then\n                        // \"a.b\" is not a qualified name, it is a member access expression.\n                        // Qualified names are only parsed when the parser knows it\'s a type only\n                        // context.\n                        return true;\n                    default:\n                        return isInTypeOnlyContext(positionedToken);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    export function isInTypeOnlyContext(positionedToken: PositionedToken): bool {\n        var positionedNodeOrToken = Syntax.getStandaloneExpression(positionedToken);\n        var positionedParent = positionedNodeOrToken.containingNode();\n\n        var parent = positionedParent.node();\n        var nodeOrToken = positionedNodeOrToken.nodeOrToken();\n\n        if (parent !== null) {\n            switch (parent.kind()) {\n                case SyntaxKind.ArrayType:\n                    return (<ArrayTypeSyntax>parent).type === nodeOrToken;\n                case SyntaxKind.CastExpression:\n                    return (<CastExpressionSyntax>parent).type === nodeOrToken;\n                case SyntaxKind.TypeAnnotation:\n                case SyntaxKind.HeritageClause:\n                case SyntaxKind.TypeArgumentList:\n                    return true;\n                // TODO: add more cases if necessary.  This list may not be complete.\n            }\n        }\n\n        return false;\n    }\n\n    export function childOffset(parent: ISyntaxElement, child: ISyntaxElement): number {\n        var offset = 0;\n        for (var i = 0, n = parent.childCount(); i < n; i++) {\n            var current = parent.childAt(i);\n            if (current === child) {\n                return offset;\n            }\n\n            if (current !== null) {\n                offset += current.fullWidth();\n            }\n        }\n\n        throw Errors.invalidOperation();\n    }\n\n    export function nodeStructuralEquals(node1: SyntaxNode, node2: SyntaxNode): bool {\n        if (node1 === null) {\n            return node2 === null;\n        }\n\n        return node1.structuralEquals(node2);\n    }\n\n    export function nodeOrTokenStructuralEquals(node1: ISyntaxNodeOrToken, node2: ISyntaxNodeOrToken): bool {\n        if (node1 === node2) {\n            return true;\n        }\n\n        if (node1 === null || node2 === null) {\n            return false;\n        }\n\n        if (node1.isToken()) {\n            return node2.isToken() ? tokenStructuralEquals(<ISyntaxToken>node1, <ISyntaxToken>node2) : false;\n        }\n\n        return node2.isNode() ? nodeStructuralEquals(<SyntaxNode>node1, <SyntaxNode>node2) : false;\n    }\n\n    export function tokenStructuralEquals(token1: ISyntaxToken, token2: ISyntaxToken): bool {\n        if (token1 === token2) {\n            return true;\n        }\n\n        if (token1 === null || token2 === null) {\n            return false;\n        }\n\n        return token1.kind() === token2.kind() &&\n               token1.width() === token2.width() &&\n               token1.fullWidth() === token2.fullWidth() &&\n               token1.text() === token2.text() &&\n               Syntax.triviaListStructuralEquals(token1.leadingTrivia(), token2.leadingTrivia()) &&\n               Syntax.triviaListStructuralEquals(token1.trailingTrivia(), token2.trailingTrivia());\n    }\n\n    export function triviaListStructuralEquals(triviaList1: ISyntaxTriviaList, triviaList2: ISyntaxTriviaList): bool {\n        if (triviaList1.count() !== triviaList2.count()) {\n            return false;\n        }\n\n        for (var i = 0, n = triviaList1.count(); i < n; i++) {\n            if (!Syntax.triviaStructuralEquals(triviaList1.syntaxTriviaAt(i), triviaList2.syntaxTriviaAt(i))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    export function triviaStructuralEquals(trivia1: ISyntaxTrivia, trivia2: ISyntaxTrivia): bool {\n        return trivia1.kind() === trivia2.kind() &&\n               trivia1.fullWidth() === trivia2.fullWidth() &&\n               trivia1.fullText() === trivia2.fullText();\n    }\n\n    export function listStructuralEquals(list1: ISyntaxList, list2: ISyntaxList): bool {\n        if (list1.childCount() !== list2.childCount()) {\n            return false;\n        }\n\n        for (var i = 0, n = list1.childCount(); i < n; i++) {\n            if (!Syntax.nodeOrTokenStructuralEquals(list1.childAt(i), list2.childAt(i))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    export function separatedListStructuralEquals(list1: ISeparatedSyntaxList, list2: ISeparatedSyntaxList): bool {\n        if (list1.childCount() !== list2.childCount()) {\n            return false;\n        }\n\n        for (var i = 0, n = list1.childCount(); i < n; i++) {\n            var element1 = list1.childAt(i);\n            var element2 = list2.childAt(i);\n            if (!Syntax.nodeOrTokenStructuralEquals(element1, element2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n    \n    export function elementStructuralEquals(element1: ISyntaxElement, element2: ISyntaxElement) {\n        if (element1 === element2) {\n            return true;\n        }\n\n        if (element1 === null || element2 === null) {\n            return false;\n        }\n\n        if (element2.kind() !== element2.kind()) {\n            return false;\n        }\n\n        if (element1.isToken()) {\n            return tokenStructuralEquals(<ISyntaxToken>element1, <ISyntaxToken>element2);\n        }\n        else if (element1.isNode()) {\n            return nodeStructuralEquals(<SyntaxNode>element1, <SyntaxNode>element2) ;\n        }\n        else if (element1.isList()) {\n            return listStructuralEquals(<ISyntaxList>element1, <ISyntaxList>element2);\n        }\n        else if (element1.isSeparatedList()) {\n            return separatedListStructuralEquals(<ISeparatedSyntaxList>element1, <ISeparatedSyntaxList>element2);\n        }\n\n        throw Errors.invalidOperation();\n    }\n\n    export function identifierName(text: string, info: ITokenInfo = null): ISyntaxToken {\n        return identifier(text);\n    }\n\n    export function trueExpression(): IUnaryExpressionSyntax {\n        return Syntax.token(SyntaxKind.TrueKeyword);\n    }\n\n    export function falseExpression(): IUnaryExpressionSyntax {\n        return Syntax.token(SyntaxKind.FalseKeyword);\n    }\n\n    export function numericLiteralExpression(text: string): IUnaryExpressionSyntax {\n        return Syntax.token(SyntaxKind.NumericLiteral, { text: text });\n    }\n\n    export function stringLiteralExpression(text: string): IUnaryExpressionSyntax {\n        return Syntax.token(SyntaxKind.StringLiteral, { text: text });\n    }\n\n    export function isSuperInvocationExpression(node: IExpressionSyntax): bool {\n        return node.kind() === SyntaxKind.InvocationExpression &&\n            (<InvocationExpressionSyntax>node).expression.kind() === SyntaxKind.SuperKeyword;\n    }\n\n    export function isSuperInvocationExpressionStatement(node: SyntaxNode): bool {\n        return node.kind() === SyntaxKind.ExpressionStatement &&\n            isSuperInvocationExpression((<ExpressionStatementSyntax>node).expression);\n    }\n\n    export function isSuperMemberAccessExpression(node: IExpressionSyntax): bool {\n        return node.kind() === SyntaxKind.MemberAccessExpression &&\n            (<MemberAccessExpressionSyntax>node).expression.kind() === SyntaxKind.SuperKeyword;\n    }\n\n    export function isSuperMemberAccessInvocationExpression(node: SyntaxNode): bool {\n        return node.kind() === SyntaxKind.InvocationExpression &&\n            isSuperMemberAccessExpression((<InvocationExpressionSyntax>node).expression);\n    }\n\n    export function assignmentExpression(left: IExpressionSyntax, token: ISyntaxToken, right: IExpressionSyntax): BinaryExpressionSyntax {\n        return Syntax.normalModeFactory.binaryExpression(SyntaxKind.AssignmentExpression, left, token, right);\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class SyntaxDiagnostic extends Diagnostic1 implements IDiagnostic {\n        private _fileName: string;\n        private _start: number;\n        private _length: number;\n\n        constructor(fileName: string, start: number, length: number, code: DiagnosticCode, args: any[]) {\n            super(code, args);\n\n            if (length < 0) {\n                throw Errors.argumentOutOfRange(\"width\");\n            }\n\n            this._fileName = fileName;\n            this._start = start;\n            this._length = length;\n        }\n\n        public toJSON(key) {\n            var result: any = {};\n            result._position = this._start;\n            result._width = this._length;\n            result._diagnosticCode = (<any>DiagnosticCode)._map[this.diagnosticCode()];\n\n            var arguments = (<any>this)._arguments;\n            if (arguments && arguments.length > 0) {\n                result._arguments = arguments;\n            }\n\n            return result;\n        }\n\n        public fileName(): string {\n            return this._fileName;\n        }\n\n        public start(): number {\n            return this._start;\n        }\n\n        public length(): number {\n            return this._length;\n        }\n\n        public static equals(diagnostic1: SyntaxDiagnostic, diagnostic2: SyntaxDiagnostic): bool {\n            return diagnostic1._start === diagnostic2._start &&\n                   diagnostic1._length === diagnostic2._length &&\n                   Diagnostic1.equals(diagnostic1, diagnostic2);\n        }\n    }\n}\n﻿///<reference path=\'References.ts\' />\n\nmodule TypeScript.Syntax {\n    export interface IFactory {\n        sourceUnit(moduleElements: ISyntaxList, endOfFileToken: ISyntaxToken): SourceUnitSyntax;\n        externalModuleReference(moduleKeyword: ISyntaxToken, openParenToken: ISyntaxToken, stringLiteral: ISyntaxToken, closeParenToken: ISyntaxToken): ExternalModuleReferenceSyntax;\n        moduleNameModuleReference(moduleName: INameSyntax): ModuleNameModuleReferenceSyntax;\n        importDeclaration(importKeyword: ISyntaxToken, identifier: ISyntaxToken, equalsToken: ISyntaxToken, moduleReference: ModuleReferenceSyntax, semicolonToken: ISyntaxToken): ImportDeclarationSyntax;\n        exportAssignment(exportKeyword: ISyntaxToken, equalsToken: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): ExportAssignmentSyntax;\n        classDeclaration(modifiers: ISyntaxList, classKeyword: ISyntaxToken, identifier: ISyntaxToken, typeParameterList: TypeParameterListSyntax, heritageClauses: ISyntaxList, openBraceToken: ISyntaxToken, classElements: ISyntaxList, closeBraceToken: ISyntaxToken): ClassDeclarationSyntax;\n        interfaceDeclaration(modifiers: ISyntaxList, interfaceKeyword: ISyntaxToken, identifier: ISyntaxToken, typeParameterList: TypeParameterListSyntax, heritageClauses: ISyntaxList, body: ObjectTypeSyntax): InterfaceDeclarationSyntax;\n        heritageClause(extendsOrImplementsKeyword: ISyntaxToken, typeNames: ISeparatedSyntaxList): HeritageClauseSyntax;\n        moduleDeclaration(modifiers: ISyntaxList, moduleKeyword: ISyntaxToken, moduleName: INameSyntax, stringLiteral: ISyntaxToken, openBraceToken: ISyntaxToken, moduleElements: ISyntaxList, closeBraceToken: ISyntaxToken): ModuleDeclarationSyntax;\n        functionDeclaration(modifiers: ISyntaxList, functionKeyword: ISyntaxToken, identifier: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): FunctionDeclarationSyntax;\n        variableStatement(modifiers: ISyntaxList, variableDeclaration: VariableDeclarationSyntax, semicolonToken: ISyntaxToken): VariableStatementSyntax;\n        variableDeclaration(varKeyword: ISyntaxToken, variableDeclarators: ISeparatedSyntaxList): VariableDeclarationSyntax;\n        variableDeclarator(identifier: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, equalsValueClause: EqualsValueClauseSyntax): VariableDeclaratorSyntax;\n        equalsValueClause(equalsToken: ISyntaxToken, value: IExpressionSyntax): EqualsValueClauseSyntax;\n        prefixUnaryExpression(kind: SyntaxKind, operatorToken: ISyntaxToken, operand: IUnaryExpressionSyntax): PrefixUnaryExpressionSyntax;\n        arrayLiteralExpression(openBracketToken: ISyntaxToken, expressions: ISeparatedSyntaxList, closeBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax;\n        omittedExpression(): OmittedExpressionSyntax;\n        parenthesizedExpression(openParenToken: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken): ParenthesizedExpressionSyntax;\n        simpleArrowFunctionExpression(identifier: ISyntaxToken, equalsGreaterThanToken: ISyntaxToken, body: ISyntaxNodeOrToken): SimpleArrowFunctionExpressionSyntax;\n        parenthesizedArrowFunctionExpression(callSignature: CallSignatureSyntax, equalsGreaterThanToken: ISyntaxToken, body: ISyntaxNodeOrToken): ParenthesizedArrowFunctionExpressionSyntax;\n        qualifiedName(left: INameSyntax, dotToken: ISyntaxToken, right: ISyntaxToken): QualifiedNameSyntax;\n        typeArgumentList(lessThanToken: ISyntaxToken, typeArguments: ISeparatedSyntaxList, greaterThanToken: ISyntaxToken): TypeArgumentListSyntax;\n        constructorType(newKeyword: ISyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, equalsGreaterThanToken: ISyntaxToken, type: ITypeSyntax): ConstructorTypeSyntax;\n        functionType(typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, equalsGreaterThanToken: ISyntaxToken, type: ITypeSyntax): FunctionTypeSyntax;\n        objectType(openBraceToken: ISyntaxToken, typeMembers: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): ObjectTypeSyntax;\n        arrayType(type: ITypeSyntax, openBracketToken: ISyntaxToken, closeBracketToken: ISyntaxToken): ArrayTypeSyntax;\n        genericType(name: INameSyntax, typeArgumentList: TypeArgumentListSyntax): GenericTypeSyntax;\n        typeAnnotation(colonToken: ISyntaxToken, type: ITypeSyntax): TypeAnnotationSyntax;\n        block(openBraceToken: ISyntaxToken, statements: ISyntaxList, closeBraceToken: ISyntaxToken): BlockSyntax;\n        parameter(dotDotDotToken: ISyntaxToken, publicOrPrivateKeyword: ISyntaxToken, identifier: ISyntaxToken, questionToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, equalsValueClause: EqualsValueClauseSyntax): ParameterSyntax;\n        memberAccessExpression(expression: IExpressionSyntax, dotToken: ISyntaxToken, name: ISyntaxToken): MemberAccessExpressionSyntax;\n        postfixUnaryExpression(kind: SyntaxKind, operand: IExpressionSyntax, operatorToken: ISyntaxToken): PostfixUnaryExpressionSyntax;\n        elementAccessExpression(expression: IExpressionSyntax, openBracketToken: ISyntaxToken, argumentExpression: IExpressionSyntax, closeBracketToken: ISyntaxToken): ElementAccessExpressionSyntax;\n        invocationExpression(expression: IExpressionSyntax, argumentList: ArgumentListSyntax): InvocationExpressionSyntax;\n        argumentList(typeArgumentList: TypeArgumentListSyntax, openParenToken: ISyntaxToken, arguments: ISeparatedSyntaxList, closeParenToken: ISyntaxToken): ArgumentListSyntax;\n        binaryExpression(kind: SyntaxKind, left: IExpressionSyntax, operatorToken: ISyntaxToken, right: IExpressionSyntax): BinaryExpressionSyntax;\n        conditionalExpression(condition: IExpressionSyntax, questionToken: ISyntaxToken, whenTrue: IExpressionSyntax, colonToken: ISyntaxToken, whenFalse: IExpressionSyntax): ConditionalExpressionSyntax;\n        constructSignature(newKeyword: ISyntaxToken, callSignature: CallSignatureSyntax): ConstructSignatureSyntax;\n        methodSignature(propertyName: ISyntaxToken, questionToken: ISyntaxToken, callSignature: CallSignatureSyntax): MethodSignatureSyntax;\n        indexSignature(openBracketToken: ISyntaxToken, parameter: ParameterSyntax, closeBracketToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax): IndexSignatureSyntax;\n        propertySignature(propertyName: ISyntaxToken, questionToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax): PropertySignatureSyntax;\n        callSignature(typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, typeAnnotation: TypeAnnotationSyntax): CallSignatureSyntax;\n        parameterList(openParenToken: ISyntaxToken, parameters: ISeparatedSyntaxList, closeParenToken: ISyntaxToken): ParameterListSyntax;\n        typeParameterList(lessThanToken: ISyntaxToken, typeParameters: ISeparatedSyntaxList, greaterThanToken: ISyntaxToken): TypeParameterListSyntax;\n        typeParameter(identifier: ISyntaxToken, constraint: ConstraintSyntax): TypeParameterSyntax;\n        constraint(extendsKeyword: ISyntaxToken, type: ITypeSyntax): ConstraintSyntax;\n        elseClause(elseKeyword: ISyntaxToken, statement: IStatementSyntax): ElseClauseSyntax;\n        ifStatement(ifKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax, elseClause: ElseClauseSyntax): IfStatementSyntax;\n        expressionStatement(expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ExpressionStatementSyntax;\n        constructorDeclaration(constructorKeyword: ISyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): ConstructorDeclarationSyntax;\n        memberFunctionDeclaration(modifiers: ISyntaxList, propertyName: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): MemberFunctionDeclarationSyntax;\n        getMemberAccessorDeclaration(modifiers: ISyntaxList, getKeyword: ISyntaxToken, propertyName: ISyntaxToken, parameterList: ParameterListSyntax, typeAnnotation: TypeAnnotationSyntax, block: BlockSyntax): GetMemberAccessorDeclarationSyntax;\n        setMemberAccessorDeclaration(modifiers: ISyntaxList, setKeyword: ISyntaxToken, propertyName: ISyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax): SetMemberAccessorDeclarationSyntax;\n        memberVariableDeclaration(modifiers: ISyntaxList, variableDeclarator: VariableDeclaratorSyntax, semicolonToken: ISyntaxToken): MemberVariableDeclarationSyntax;\n        throwStatement(throwKeyword: ISyntaxToken, expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ThrowStatementSyntax;\n        returnStatement(returnKeyword: ISyntaxToken, expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ReturnStatementSyntax;\n        objectCreationExpression(newKeyword: ISyntaxToken, expression: IExpressionSyntax, argumentList: ArgumentListSyntax): ObjectCreationExpressionSyntax;\n        switchStatement(switchKeyword: ISyntaxToken, openParenToken: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken, openBraceToken: ISyntaxToken, switchClauses: ISyntaxList, closeBraceToken: ISyntaxToken): SwitchStatementSyntax;\n        caseSwitchClause(caseKeyword: ISyntaxToken, expression: IExpressionSyntax, colonToken: ISyntaxToken, statements: ISyntaxList): CaseSwitchClauseSyntax;\n        defaultSwitchClause(defaultKeyword: ISyntaxToken, colonToken: ISyntaxToken, statements: ISyntaxList): DefaultSwitchClauseSyntax;\n        breakStatement(breakKeyword: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): BreakStatementSyntax;\n        continueStatement(continueKeyword: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): ContinueStatementSyntax;\n        forStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken, variableDeclaration: VariableDeclarationSyntax, initializer: IExpressionSyntax, firstSemicolonToken: ISyntaxToken, condition: IExpressionSyntax, secondSemicolonToken: ISyntaxToken, incrementor: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): ForStatementSyntax;\n        forInStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken, variableDeclaration: VariableDeclarationSyntax, left: IExpressionSyntax, inKeyword: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): ForInStatementSyntax;\n        whileStatement(whileKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): WhileStatementSyntax;\n        withStatement(withKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): WithStatementSyntax;\n        enumDeclaration(modifiers: ISyntaxList, enumKeyword: ISyntaxToken, identifier: ISyntaxToken, openBraceToken: ISyntaxToken, enumElements: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): EnumDeclarationSyntax;\n        enumElement(propertyName: ISyntaxToken, equalsValueClause: EqualsValueClauseSyntax): EnumElementSyntax;\n        castExpression(lessThanToken: ISyntaxToken, type: ITypeSyntax, greaterThanToken: ISyntaxToken, expression: IUnaryExpressionSyntax): CastExpressionSyntax;\n        objectLiteralExpression(openBraceToken: ISyntaxToken, propertyAssignments: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax;\n        simplePropertyAssignment(propertyName: ISyntaxToken, colonToken: ISyntaxToken, expression: IExpressionSyntax): SimplePropertyAssignmentSyntax;\n        getAccessorPropertyAssignment(getKeyword: ISyntaxToken, propertyName: ISyntaxToken, openParenToken: ISyntaxToken, closeParenToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, block: BlockSyntax): GetAccessorPropertyAssignmentSyntax;\n        setAccessorPropertyAssignment(setKeyword: ISyntaxToken, propertyName: ISyntaxToken, openParenToken: ISyntaxToken, parameter: ParameterSyntax, closeParenToken: ISyntaxToken, block: BlockSyntax): SetAccessorPropertyAssignmentSyntax;\n        functionExpression(functionKeyword: ISyntaxToken, identifier: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax): FunctionExpressionSyntax;\n        emptyStatement(semicolonToken: ISyntaxToken): EmptyStatementSyntax;\n        tryStatement(tryKeyword: ISyntaxToken, block: BlockSyntax, catchClause: CatchClauseSyntax, finallyClause: FinallyClauseSyntax): TryStatementSyntax;\n        catchClause(catchKeyword: ISyntaxToken, openParenToken: ISyntaxToken, identifier: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, closeParenToken: ISyntaxToken, block: BlockSyntax): CatchClauseSyntax;\n        finallyClause(finallyKeyword: ISyntaxToken, block: BlockSyntax): FinallyClauseSyntax;\n        labeledStatement(identifier: ISyntaxToken, colonToken: ISyntaxToken, statement: IStatementSyntax): LabeledStatementSyntax;\n        doStatement(doKeyword: ISyntaxToken, statement: IStatementSyntax, whileKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, semicolonToken: ISyntaxToken): DoStatementSyntax;\n        typeOfExpression(typeOfKeyword: ISyntaxToken, expression: IExpressionSyntax): TypeOfExpressionSyntax;\n        deleteExpression(deleteKeyword: ISyntaxToken, expression: IExpressionSyntax): DeleteExpressionSyntax;\n        voidExpression(voidKeyword: ISyntaxToken, expression: IExpressionSyntax): VoidExpressionSyntax;\n        debuggerStatement(debuggerKeyword: ISyntaxToken, semicolonToken: ISyntaxToken): DebuggerStatementSyntax;\n    }\n\n    export class NormalModeFactory implements IFactory {\n        sourceUnit(moduleElements: ISyntaxList, endOfFileToken: ISyntaxToken): SourceUnitSyntax {\n            return new SourceUnitSyntax(moduleElements, endOfFileToken, /*parsedInStrictMode:*/ false);\n        }\n        externalModuleReference(moduleKeyword: ISyntaxToken, openParenToken: ISyntaxToken, stringLiteral: ISyntaxToken, closeParenToken: ISyntaxToken): ExternalModuleReferenceSyntax {\n            return new ExternalModuleReferenceSyntax(moduleKeyword, openParenToken, stringLiteral, closeParenToken, /*parsedInStrictMode:*/ false);\n        }\n        moduleNameModuleReference(moduleName: INameSyntax): ModuleNameModuleReferenceSyntax {\n            return new ModuleNameModuleReferenceSyntax(moduleName, /*parsedInStrictMode:*/ false);\n        }\n        importDeclaration(importKeyword: ISyntaxToken, identifier: ISyntaxToken, equalsToken: ISyntaxToken, moduleReference: ModuleReferenceSyntax, semicolonToken: ISyntaxToken): ImportDeclarationSyntax {\n            return new ImportDeclarationSyntax(importKeyword, identifier, equalsToken, moduleReference, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        exportAssignment(exportKeyword: ISyntaxToken, equalsToken: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): ExportAssignmentSyntax {\n            return new ExportAssignmentSyntax(exportKeyword, equalsToken, identifier, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        classDeclaration(modifiers: ISyntaxList, classKeyword: ISyntaxToken, identifier: ISyntaxToken, typeParameterList: TypeParameterListSyntax, heritageClauses: ISyntaxList, openBraceToken: ISyntaxToken, classElements: ISyntaxList, closeBraceToken: ISyntaxToken): ClassDeclarationSyntax {\n            return new ClassDeclarationSyntax(modifiers, classKeyword, identifier, typeParameterList, heritageClauses, openBraceToken, classElements, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        interfaceDeclaration(modifiers: ISyntaxList, interfaceKeyword: ISyntaxToken, identifier: ISyntaxToken, typeParameterList: TypeParameterListSyntax, heritageClauses: ISyntaxList, body: ObjectTypeSyntax): InterfaceDeclarationSyntax {\n            return new InterfaceDeclarationSyntax(modifiers, interfaceKeyword, identifier, typeParameterList, heritageClauses, body, /*parsedInStrictMode:*/ false);\n        }\n        heritageClause(extendsOrImplementsKeyword: ISyntaxToken, typeNames: ISeparatedSyntaxList): HeritageClauseSyntax {\n            return new HeritageClauseSyntax(extendsOrImplementsKeyword, typeNames, /*parsedInStrictMode:*/ false);\n        }\n        moduleDeclaration(modifiers: ISyntaxList, moduleKeyword: ISyntaxToken, moduleName: INameSyntax, stringLiteral: ISyntaxToken, openBraceToken: ISyntaxToken, moduleElements: ISyntaxList, closeBraceToken: ISyntaxToken): ModuleDeclarationSyntax {\n            return new ModuleDeclarationSyntax(modifiers, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        functionDeclaration(modifiers: ISyntaxList, functionKeyword: ISyntaxToken, identifier: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): FunctionDeclarationSyntax {\n            return new FunctionDeclarationSyntax(modifiers, functionKeyword, identifier, callSignature, block, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        variableStatement(modifiers: ISyntaxList, variableDeclaration: VariableDeclarationSyntax, semicolonToken: ISyntaxToken): VariableStatementSyntax {\n            return new VariableStatementSyntax(modifiers, variableDeclaration, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        variableDeclaration(varKeyword: ISyntaxToken, variableDeclarators: ISeparatedSyntaxList): VariableDeclarationSyntax {\n            return new VariableDeclarationSyntax(varKeyword, variableDeclarators, /*parsedInStrictMode:*/ false);\n        }\n        variableDeclarator(identifier: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, equalsValueClause: EqualsValueClauseSyntax): VariableDeclaratorSyntax {\n            return new VariableDeclaratorSyntax(identifier, typeAnnotation, equalsValueClause, /*parsedInStrictMode:*/ false);\n        }\n        equalsValueClause(equalsToken: ISyntaxToken, value: IExpressionSyntax): EqualsValueClauseSyntax {\n            return new EqualsValueClauseSyntax(equalsToken, value, /*parsedInStrictMode:*/ false);\n        }\n        prefixUnaryExpression(kind: SyntaxKind, operatorToken: ISyntaxToken, operand: IUnaryExpressionSyntax): PrefixUnaryExpressionSyntax {\n            return new PrefixUnaryExpressionSyntax(kind, operatorToken, operand, /*parsedInStrictMode:*/ false);\n        }\n        arrayLiteralExpression(openBracketToken: ISyntaxToken, expressions: ISeparatedSyntaxList, closeBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax {\n            return new ArrayLiteralExpressionSyntax(openBracketToken, expressions, closeBracketToken, /*parsedInStrictMode:*/ false);\n        }\n        omittedExpression(): OmittedExpressionSyntax {\n            return new OmittedExpressionSyntax(/*parsedInStrictMode:*/ false);\n        }\n        parenthesizedExpression(openParenToken: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken): ParenthesizedExpressionSyntax {\n            return new ParenthesizedExpressionSyntax(openParenToken, expression, closeParenToken, /*parsedInStrictMode:*/ false);\n        }\n        simpleArrowFunctionExpression(identifier: ISyntaxToken, equalsGreaterThanToken: ISyntaxToken, body: ISyntaxNodeOrToken): SimpleArrowFunctionExpressionSyntax {\n            return new SimpleArrowFunctionExpressionSyntax(identifier, equalsGreaterThanToken, body, /*parsedInStrictMode:*/ false);\n        }\n        parenthesizedArrowFunctionExpression(callSignature: CallSignatureSyntax, equalsGreaterThanToken: ISyntaxToken, body: ISyntaxNodeOrToken): ParenthesizedArrowFunctionExpressionSyntax {\n            return new ParenthesizedArrowFunctionExpressionSyntax(callSignature, equalsGreaterThanToken, body, /*parsedInStrictMode:*/ false);\n        }\n        qualifiedName(left: INameSyntax, dotToken: ISyntaxToken, right: ISyntaxToken): QualifiedNameSyntax {\n            return new QualifiedNameSyntax(left, dotToken, right, /*parsedInStrictMode:*/ false);\n        }\n        typeArgumentList(lessThanToken: ISyntaxToken, typeArguments: ISeparatedSyntaxList, greaterThanToken: ISyntaxToken): TypeArgumentListSyntax {\n            return new TypeArgumentListSyntax(lessThanToken, typeArguments, greaterThanToken, /*parsedInStrictMode:*/ false);\n        }\n        constructorType(newKeyword: ISyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, equalsGreaterThanToken: ISyntaxToken, type: ITypeSyntax): ConstructorTypeSyntax {\n            return new ConstructorTypeSyntax(newKeyword, typeParameterList, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ false);\n        }\n        functionType(typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, equalsGreaterThanToken: ISyntaxToken, type: ITypeSyntax): FunctionTypeSyntax {\n            return new FunctionTypeSyntax(typeParameterList, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ false);\n        }\n        objectType(openBraceToken: ISyntaxToken, typeMembers: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): ObjectTypeSyntax {\n            return new ObjectTypeSyntax(openBraceToken, typeMembers, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        arrayType(type: ITypeSyntax, openBracketToken: ISyntaxToken, closeBracketToken: ISyntaxToken): ArrayTypeSyntax {\n            return new ArrayTypeSyntax(type, openBracketToken, closeBracketToken, /*parsedInStrictMode:*/ false);\n        }\n        genericType(name: INameSyntax, typeArgumentList: TypeArgumentListSyntax): GenericTypeSyntax {\n            return new GenericTypeSyntax(name, typeArgumentList, /*parsedInStrictMode:*/ false);\n        }\n        typeAnnotation(colonToken: ISyntaxToken, type: ITypeSyntax): TypeAnnotationSyntax {\n            return new TypeAnnotationSyntax(colonToken, type, /*parsedInStrictMode:*/ false);\n        }\n        block(openBraceToken: ISyntaxToken, statements: ISyntaxList, closeBraceToken: ISyntaxToken): BlockSyntax {\n            return new BlockSyntax(openBraceToken, statements, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        parameter(dotDotDotToken: ISyntaxToken, publicOrPrivateKeyword: ISyntaxToken, identifier: ISyntaxToken, questionToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, equalsValueClause: EqualsValueClauseSyntax): ParameterSyntax {\n            return new ParameterSyntax(dotDotDotToken, publicOrPrivateKeyword, identifier, questionToken, typeAnnotation, equalsValueClause, /*parsedInStrictMode:*/ false);\n        }\n        memberAccessExpression(expression: IExpressionSyntax, dotToken: ISyntaxToken, name: ISyntaxToken): MemberAccessExpressionSyntax {\n            return new MemberAccessExpressionSyntax(expression, dotToken, name, /*parsedInStrictMode:*/ false);\n        }\n        postfixUnaryExpression(kind: SyntaxKind, operand: IExpressionSyntax, operatorToken: ISyntaxToken): PostfixUnaryExpressionSyntax {\n            return new PostfixUnaryExpressionSyntax(kind, operand, operatorToken, /*parsedInStrictMode:*/ false);\n        }\n        elementAccessExpression(expression: IExpressionSyntax, openBracketToken: ISyntaxToken, argumentExpression: IExpressionSyntax, closeBracketToken: ISyntaxToken): ElementAccessExpressionSyntax {\n            return new ElementAccessExpressionSyntax(expression, openBracketToken, argumentExpression, closeBracketToken, /*parsedInStrictMode:*/ false);\n        }\n        invocationExpression(expression: IExpressionSyntax, argumentList: ArgumentListSyntax): InvocationExpressionSyntax {\n            return new InvocationExpressionSyntax(expression, argumentList, /*parsedInStrictMode:*/ false);\n        }\n        argumentList(typeArgumentList: TypeArgumentListSyntax, openParenToken: ISyntaxToken, _arguments: ISeparatedSyntaxList, closeParenToken: ISyntaxToken): ArgumentListSyntax {\n            return new ArgumentListSyntax(typeArgumentList, openParenToken, _arguments, closeParenToken, /*parsedInStrictMode:*/ false);\n        }\n        binaryExpression(kind: SyntaxKind, left: IExpressionSyntax, operatorToken: ISyntaxToken, right: IExpressionSyntax): BinaryExpressionSyntax {\n            return new BinaryExpressionSyntax(kind, left, operatorToken, right, /*parsedInStrictMode:*/ false);\n        }\n        conditionalExpression(condition: IExpressionSyntax, questionToken: ISyntaxToken, whenTrue: IExpressionSyntax, colonToken: ISyntaxToken, whenFalse: IExpressionSyntax): ConditionalExpressionSyntax {\n            return new ConditionalExpressionSyntax(condition, questionToken, whenTrue, colonToken, whenFalse, /*parsedInStrictMode:*/ false);\n        }\n        constructSignature(newKeyword: ISyntaxToken, callSignature: CallSignatureSyntax): ConstructSignatureSyntax {\n            return new ConstructSignatureSyntax(newKeyword, callSignature, /*parsedInStrictMode:*/ false);\n        }\n        methodSignature(propertyName: ISyntaxToken, questionToken: ISyntaxToken, callSignature: CallSignatureSyntax): MethodSignatureSyntax {\n            return new MethodSignatureSyntax(propertyName, questionToken, callSignature, /*parsedInStrictMode:*/ false);\n        }\n        indexSignature(openBracketToken: ISyntaxToken, parameter: ParameterSyntax, closeBracketToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax): IndexSignatureSyntax {\n            return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, typeAnnotation, /*parsedInStrictMode:*/ false);\n        }\n        propertySignature(propertyName: ISyntaxToken, questionToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax): PropertySignatureSyntax {\n            return new PropertySignatureSyntax(propertyName, questionToken, typeAnnotation, /*parsedInStrictMode:*/ false);\n        }\n        callSignature(typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, typeAnnotation: TypeAnnotationSyntax): CallSignatureSyntax {\n            return new CallSignatureSyntax(typeParameterList, parameterList, typeAnnotation, /*parsedInStrictMode:*/ false);\n        }\n        parameterList(openParenToken: ISyntaxToken, parameters: ISeparatedSyntaxList, closeParenToken: ISyntaxToken): ParameterListSyntax {\n            return new ParameterListSyntax(openParenToken, parameters, closeParenToken, /*parsedInStrictMode:*/ false);\n        }\n        typeParameterList(lessThanToken: ISyntaxToken, typeParameters: ISeparatedSyntaxList, greaterThanToken: ISyntaxToken): TypeParameterListSyntax {\n            return new TypeParameterListSyntax(lessThanToken, typeParameters, greaterThanToken, /*parsedInStrictMode:*/ false);\n        }\n        typeParameter(identifier: ISyntaxToken, constraint: ConstraintSyntax): TypeParameterSyntax {\n            return new TypeParameterSyntax(identifier, constraint, /*parsedInStrictMode:*/ false);\n        }\n        constraint(extendsKeyword: ISyntaxToken, type: ITypeSyntax): ConstraintSyntax {\n            return new ConstraintSyntax(extendsKeyword, type, /*parsedInStrictMode:*/ false);\n        }\n        elseClause(elseKeyword: ISyntaxToken, statement: IStatementSyntax): ElseClauseSyntax {\n            return new ElseClauseSyntax(elseKeyword, statement, /*parsedInStrictMode:*/ false);\n        }\n        ifStatement(ifKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax, elseClause: ElseClauseSyntax): IfStatementSyntax {\n            return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause, /*parsedInStrictMode:*/ false);\n        }\n        expressionStatement(expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ExpressionStatementSyntax {\n            return new ExpressionStatementSyntax(expression, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        constructorDeclaration(constructorKeyword: ISyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): ConstructorDeclarationSyntax {\n            return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, block, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        memberFunctionDeclaration(modifiers: ISyntaxList, propertyName: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): MemberFunctionDeclarationSyntax {\n            return new MemberFunctionDeclarationSyntax(modifiers, propertyName, callSignature, block, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        getMemberAccessorDeclaration(modifiers: ISyntaxList, getKeyword: ISyntaxToken, propertyName: ISyntaxToken, parameterList: ParameterListSyntax, typeAnnotation: TypeAnnotationSyntax, block: BlockSyntax): GetMemberAccessorDeclarationSyntax {\n            return new GetMemberAccessorDeclarationSyntax(modifiers, getKeyword, propertyName, parameterList, typeAnnotation, block, /*parsedInStrictMode:*/ false);\n        }\n        setMemberAccessorDeclaration(modifiers: ISyntaxList, setKeyword: ISyntaxToken, propertyName: ISyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax): SetMemberAccessorDeclarationSyntax {\n            return new SetMemberAccessorDeclarationSyntax(modifiers, setKeyword, propertyName, parameterList, block, /*parsedInStrictMode:*/ false);\n        }\n        memberVariableDeclaration(modifiers: ISyntaxList, variableDeclarator: VariableDeclaratorSyntax, semicolonToken: ISyntaxToken): MemberVariableDeclarationSyntax {\n            return new MemberVariableDeclarationSyntax(modifiers, variableDeclarator, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        throwStatement(throwKeyword: ISyntaxToken, expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ThrowStatementSyntax {\n            return new ThrowStatementSyntax(throwKeyword, expression, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        returnStatement(returnKeyword: ISyntaxToken, expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ReturnStatementSyntax {\n            return new ReturnStatementSyntax(returnKeyword, expression, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        objectCreationExpression(newKeyword: ISyntaxToken, expression: IExpressionSyntax, argumentList: ArgumentListSyntax): ObjectCreationExpressionSyntax {\n            return new ObjectCreationExpressionSyntax(newKeyword, expression, argumentList, /*parsedInStrictMode:*/ false);\n        }\n        switchStatement(switchKeyword: ISyntaxToken, openParenToken: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken, openBraceToken: ISyntaxToken, switchClauses: ISyntaxList, closeBraceToken: ISyntaxToken): SwitchStatementSyntax {\n            return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, switchClauses, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        caseSwitchClause(caseKeyword: ISyntaxToken, expression: IExpressionSyntax, colonToken: ISyntaxToken, statements: ISyntaxList): CaseSwitchClauseSyntax {\n            return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, statements, /*parsedInStrictMode:*/ false);\n        }\n        defaultSwitchClause(defaultKeyword: ISyntaxToken, colonToken: ISyntaxToken, statements: ISyntaxList): DefaultSwitchClauseSyntax {\n            return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, statements, /*parsedInStrictMode:*/ false);\n        }\n        breakStatement(breakKeyword: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): BreakStatementSyntax {\n            return new BreakStatementSyntax(breakKeyword, identifier, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        continueStatement(continueKeyword: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): ContinueStatementSyntax {\n            return new ContinueStatementSyntax(continueKeyword, identifier, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        forStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken, variableDeclaration: VariableDeclarationSyntax, initializer: IExpressionSyntax, firstSemicolonToken: ISyntaxToken, condition: IExpressionSyntax, secondSemicolonToken: ISyntaxToken, incrementor: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): ForStatementSyntax {\n            return new ForStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement, /*parsedInStrictMode:*/ false);\n        }\n        forInStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken, variableDeclaration: VariableDeclarationSyntax, left: IExpressionSyntax, inKeyword: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): ForInStatementSyntax {\n            return new ForInStatementSyntax(forKeyword, openParenToken, variableDeclaration, left, inKeyword, expression, closeParenToken, statement, /*parsedInStrictMode:*/ false);\n        }\n        whileStatement(whileKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): WhileStatementSyntax {\n            return new WhileStatementSyntax(whileKeyword, openParenToken, condition, closeParenToken, statement, /*parsedInStrictMode:*/ false);\n        }\n        withStatement(withKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): WithStatementSyntax {\n            return new WithStatementSyntax(withKeyword, openParenToken, condition, closeParenToken, statement, /*parsedInStrictMode:*/ false);\n        }\n        enumDeclaration(modifiers: ISyntaxList, enumKeyword: ISyntaxToken, identifier: ISyntaxToken, openBraceToken: ISyntaxToken, enumElements: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): EnumDeclarationSyntax {\n            return new EnumDeclarationSyntax(modifiers, enumKeyword, identifier, openBraceToken, enumElements, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        enumElement(propertyName: ISyntaxToken, equalsValueClause: EqualsValueClauseSyntax): EnumElementSyntax {\n            return new EnumElementSyntax(propertyName, equalsValueClause, /*parsedInStrictMode:*/ false);\n        }\n        castExpression(lessThanToken: ISyntaxToken, type: ITypeSyntax, greaterThanToken: ISyntaxToken, expression: IUnaryExpressionSyntax): CastExpressionSyntax {\n            return new CastExpressionSyntax(lessThanToken, type, greaterThanToken, expression, /*parsedInStrictMode:*/ false);\n        }\n        objectLiteralExpression(openBraceToken: ISyntaxToken, propertyAssignments: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax {\n            return new ObjectLiteralExpressionSyntax(openBraceToken, propertyAssignments, closeBraceToken, /*parsedInStrictMode:*/ false);\n        }\n        simplePropertyAssignment(propertyName: ISyntaxToken, colonToken: ISyntaxToken, expression: IExpressionSyntax): SimplePropertyAssignmentSyntax {\n            return new SimplePropertyAssignmentSyntax(propertyName, colonToken, expression, /*parsedInStrictMode:*/ false);\n        }\n        getAccessorPropertyAssignment(getKeyword: ISyntaxToken, propertyName: ISyntaxToken, openParenToken: ISyntaxToken, closeParenToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, block: BlockSyntax): GetAccessorPropertyAssignmentSyntax {\n            return new GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, typeAnnotation, block, /*parsedInStrictMode:*/ false);\n        }\n        setAccessorPropertyAssignment(setKeyword: ISyntaxToken, propertyName: ISyntaxToken, openParenToken: ISyntaxToken, parameter: ParameterSyntax, closeParenToken: ISyntaxToken, block: BlockSyntax): SetAccessorPropertyAssignmentSyntax {\n            return new SetAccessorPropertyAssignmentSyntax(setKeyword, propertyName, openParenToken, parameter, closeParenToken, block, /*parsedInStrictMode:*/ false);\n        }\n        functionExpression(functionKeyword: ISyntaxToken, identifier: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax): FunctionExpressionSyntax {\n            return new FunctionExpressionSyntax(functionKeyword, identifier, callSignature, block, /*parsedInStrictMode:*/ false);\n        }\n        emptyStatement(semicolonToken: ISyntaxToken): EmptyStatementSyntax {\n            return new EmptyStatementSyntax(semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        tryStatement(tryKeyword: ISyntaxToken, block: BlockSyntax, catchClause: CatchClauseSyntax, finallyClause: FinallyClauseSyntax): TryStatementSyntax {\n            return new TryStatementSyntax(tryKeyword, block, catchClause, finallyClause, /*parsedInStrictMode:*/ false);\n        }\n        catchClause(catchKeyword: ISyntaxToken, openParenToken: ISyntaxToken, identifier: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, closeParenToken: ISyntaxToken, block: BlockSyntax): CatchClauseSyntax {\n            return new CatchClauseSyntax(catchKeyword, openParenToken, identifier, typeAnnotation, closeParenToken, block, /*parsedInStrictMode:*/ false);\n        }\n        finallyClause(finallyKeyword: ISyntaxToken, block: BlockSyntax): FinallyClauseSyntax {\n            return new FinallyClauseSyntax(finallyKeyword, block, /*parsedInStrictMode:*/ false);\n        }\n        labeledStatement(identifier: ISyntaxToken, colonToken: ISyntaxToken, statement: IStatementSyntax): LabeledStatementSyntax {\n            return new LabeledStatementSyntax(identifier, colonToken, statement, /*parsedInStrictMode:*/ false);\n        }\n        doStatement(doKeyword: ISyntaxToken, statement: IStatementSyntax, whileKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, semicolonToken: ISyntaxToken): DoStatementSyntax {\n            return new DoStatementSyntax(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n        typeOfExpression(typeOfKeyword: ISyntaxToken, expression: IExpressionSyntax): TypeOfExpressionSyntax {\n            return new TypeOfExpressionSyntax(typeOfKeyword, expression, /*parsedInStrictMode:*/ false);\n        }\n        deleteExpression(deleteKeyword: ISyntaxToken, expression: IExpressionSyntax): DeleteExpressionSyntax {\n            return new DeleteExpressionSyntax(deleteKeyword, expression, /*parsedInStrictMode:*/ false);\n        }\n        voidExpression(voidKeyword: ISyntaxToken, expression: IExpressionSyntax): VoidExpressionSyntax {\n            return new VoidExpressionSyntax(voidKeyword, expression, /*parsedInStrictMode:*/ false);\n        }\n        debuggerStatement(debuggerKeyword: ISyntaxToken, semicolonToken: ISyntaxToken): DebuggerStatementSyntax {\n            return new DebuggerStatementSyntax(debuggerKeyword, semicolonToken, /*parsedInStrictMode:*/ false);\n        }\n    }\n\n    export class StrictModeFactory implements IFactory {\n        sourceUnit(moduleElements: ISyntaxList, endOfFileToken: ISyntaxToken): SourceUnitSyntax {\n            return new SourceUnitSyntax(moduleElements, endOfFileToken, /*parsedInStrictMode:*/ true);\n        }\n        externalModuleReference(moduleKeyword: ISyntaxToken, openParenToken: ISyntaxToken, stringLiteral: ISyntaxToken, closeParenToken: ISyntaxToken): ExternalModuleReferenceSyntax {\n            return new ExternalModuleReferenceSyntax(moduleKeyword, openParenToken, stringLiteral, closeParenToken, /*parsedInStrictMode:*/ true);\n        }\n        moduleNameModuleReference(moduleName: INameSyntax): ModuleNameModuleReferenceSyntax {\n            return new ModuleNameModuleReferenceSyntax(moduleName, /*parsedInStrictMode:*/ true);\n        }\n        importDeclaration(importKeyword: ISyntaxToken, identifier: ISyntaxToken, equalsToken: ISyntaxToken, moduleReference: ModuleReferenceSyntax, semicolonToken: ISyntaxToken): ImportDeclarationSyntax {\n            return new ImportDeclarationSyntax(importKeyword, identifier, equalsToken, moduleReference, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        exportAssignment(exportKeyword: ISyntaxToken, equalsToken: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): ExportAssignmentSyntax {\n            return new ExportAssignmentSyntax(exportKeyword, equalsToken, identifier, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        classDeclaration(modifiers: ISyntaxList, classKeyword: ISyntaxToken, identifier: ISyntaxToken, typeParameterList: TypeParameterListSyntax, heritageClauses: ISyntaxList, openBraceToken: ISyntaxToken, classElements: ISyntaxList, closeBraceToken: ISyntaxToken): ClassDeclarationSyntax {\n            return new ClassDeclarationSyntax(modifiers, classKeyword, identifier, typeParameterList, heritageClauses, openBraceToken, classElements, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        interfaceDeclaration(modifiers: ISyntaxList, interfaceKeyword: ISyntaxToken, identifier: ISyntaxToken, typeParameterList: TypeParameterListSyntax, heritageClauses: ISyntaxList, body: ObjectTypeSyntax): InterfaceDeclarationSyntax {\n            return new InterfaceDeclarationSyntax(modifiers, interfaceKeyword, identifier, typeParameterList, heritageClauses, body, /*parsedInStrictMode:*/ true);\n        }\n        heritageClause(extendsOrImplementsKeyword: ISyntaxToken, typeNames: ISeparatedSyntaxList): HeritageClauseSyntax {\n            return new HeritageClauseSyntax(extendsOrImplementsKeyword, typeNames, /*parsedInStrictMode:*/ true);\n        }\n        moduleDeclaration(modifiers: ISyntaxList, moduleKeyword: ISyntaxToken, moduleName: INameSyntax, stringLiteral: ISyntaxToken, openBraceToken: ISyntaxToken, moduleElements: ISyntaxList, closeBraceToken: ISyntaxToken): ModuleDeclarationSyntax {\n            return new ModuleDeclarationSyntax(modifiers, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        functionDeclaration(modifiers: ISyntaxList, functionKeyword: ISyntaxToken, identifier: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): FunctionDeclarationSyntax {\n            return new FunctionDeclarationSyntax(modifiers, functionKeyword, identifier, callSignature, block, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        variableStatement(modifiers: ISyntaxList, variableDeclaration: VariableDeclarationSyntax, semicolonToken: ISyntaxToken): VariableStatementSyntax {\n            return new VariableStatementSyntax(modifiers, variableDeclaration, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        variableDeclaration(varKeyword: ISyntaxToken, variableDeclarators: ISeparatedSyntaxList): VariableDeclarationSyntax {\n            return new VariableDeclarationSyntax(varKeyword, variableDeclarators, /*parsedInStrictMode:*/ true);\n        }\n        variableDeclarator(identifier: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, equalsValueClause: EqualsValueClauseSyntax): VariableDeclaratorSyntax {\n            return new VariableDeclaratorSyntax(identifier, typeAnnotation, equalsValueClause, /*parsedInStrictMode:*/ true);\n        }\n        equalsValueClause(equalsToken: ISyntaxToken, value: IExpressionSyntax): EqualsValueClauseSyntax {\n            return new EqualsValueClauseSyntax(equalsToken, value, /*parsedInStrictMode:*/ true);\n        }\n        prefixUnaryExpression(kind: SyntaxKind, operatorToken: ISyntaxToken, operand: IUnaryExpressionSyntax): PrefixUnaryExpressionSyntax {\n            return new PrefixUnaryExpressionSyntax(kind, operatorToken, operand, /*parsedInStrictMode:*/ true);\n        }\n        arrayLiteralExpression(openBracketToken: ISyntaxToken, expressions: ISeparatedSyntaxList, closeBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax {\n            return new ArrayLiteralExpressionSyntax(openBracketToken, expressions, closeBracketToken, /*parsedInStrictMode:*/ true);\n        }\n        omittedExpression(): OmittedExpressionSyntax {\n            return new OmittedExpressionSyntax(/*parsedInStrictMode:*/ true);\n        }\n        parenthesizedExpression(openParenToken: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken): ParenthesizedExpressionSyntax {\n            return new ParenthesizedExpressionSyntax(openParenToken, expression, closeParenToken, /*parsedInStrictMode:*/ true);\n        }\n        simpleArrowFunctionExpression(identifier: ISyntaxToken, equalsGreaterThanToken: ISyntaxToken, body: ISyntaxNodeOrToken): SimpleArrowFunctionExpressionSyntax {\n            return new SimpleArrowFunctionExpressionSyntax(identifier, equalsGreaterThanToken, body, /*parsedInStrictMode:*/ true);\n        }\n        parenthesizedArrowFunctionExpression(callSignature: CallSignatureSyntax, equalsGreaterThanToken: ISyntaxToken, body: ISyntaxNodeOrToken): ParenthesizedArrowFunctionExpressionSyntax {\n            return new ParenthesizedArrowFunctionExpressionSyntax(callSignature, equalsGreaterThanToken, body, /*parsedInStrictMode:*/ true);\n        }\n        qualifiedName(left: INameSyntax, dotToken: ISyntaxToken, right: ISyntaxToken): QualifiedNameSyntax {\n            return new QualifiedNameSyntax(left, dotToken, right, /*parsedInStrictMode:*/ true);\n        }\n        typeArgumentList(lessThanToken: ISyntaxToken, typeArguments: ISeparatedSyntaxList, greaterThanToken: ISyntaxToken): TypeArgumentListSyntax {\n            return new TypeArgumentListSyntax(lessThanToken, typeArguments, greaterThanToken, /*parsedInStrictMode:*/ true);\n        }\n        constructorType(newKeyword: ISyntaxToken, typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, equalsGreaterThanToken: ISyntaxToken, type: ITypeSyntax): ConstructorTypeSyntax {\n            return new ConstructorTypeSyntax(newKeyword, typeParameterList, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ true);\n        }\n        functionType(typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, equalsGreaterThanToken: ISyntaxToken, type: ITypeSyntax): FunctionTypeSyntax {\n            return new FunctionTypeSyntax(typeParameterList, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ true);\n        }\n        objectType(openBraceToken: ISyntaxToken, typeMembers: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): ObjectTypeSyntax {\n            return new ObjectTypeSyntax(openBraceToken, typeMembers, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        arrayType(type: ITypeSyntax, openBracketToken: ISyntaxToken, closeBracketToken: ISyntaxToken): ArrayTypeSyntax {\n            return new ArrayTypeSyntax(type, openBracketToken, closeBracketToken, /*parsedInStrictMode:*/ true);\n        }\n        genericType(name: INameSyntax, typeArgumentList: TypeArgumentListSyntax): GenericTypeSyntax {\n            return new GenericTypeSyntax(name, typeArgumentList, /*parsedInStrictMode:*/ true);\n        }\n        typeAnnotation(colonToken: ISyntaxToken, type: ITypeSyntax): TypeAnnotationSyntax {\n            return new TypeAnnotationSyntax(colonToken, type, /*parsedInStrictMode:*/ true);\n        }\n        block(openBraceToken: ISyntaxToken, statements: ISyntaxList, closeBraceToken: ISyntaxToken): BlockSyntax {\n            return new BlockSyntax(openBraceToken, statements, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        parameter(dotDotDotToken: ISyntaxToken, publicOrPrivateKeyword: ISyntaxToken, identifier: ISyntaxToken, questionToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, equalsValueClause: EqualsValueClauseSyntax): ParameterSyntax {\n            return new ParameterSyntax(dotDotDotToken, publicOrPrivateKeyword, identifier, questionToken, typeAnnotation, equalsValueClause, /*parsedInStrictMode:*/ true);\n        }\n        memberAccessExpression(expression: IExpressionSyntax, dotToken: ISyntaxToken, name: ISyntaxToken): MemberAccessExpressionSyntax {\n            return new MemberAccessExpressionSyntax(expression, dotToken, name, /*parsedInStrictMode:*/ true);\n        }\n        postfixUnaryExpression(kind: SyntaxKind, operand: IExpressionSyntax, operatorToken: ISyntaxToken): PostfixUnaryExpressionSyntax {\n            return new PostfixUnaryExpressionSyntax(kind, operand, operatorToken, /*parsedInStrictMode:*/ true);\n        }\n        elementAccessExpression(expression: IExpressionSyntax, openBracketToken: ISyntaxToken, argumentExpression: IExpressionSyntax, closeBracketToken: ISyntaxToken): ElementAccessExpressionSyntax {\n            return new ElementAccessExpressionSyntax(expression, openBracketToken, argumentExpression, closeBracketToken, /*parsedInStrictMode:*/ true);\n        }\n        invocationExpression(expression: IExpressionSyntax, argumentList: ArgumentListSyntax): InvocationExpressionSyntax {\n            return new InvocationExpressionSyntax(expression, argumentList, /*parsedInStrictMode:*/ true);\n        }\n        argumentList(typeArgumentList: TypeArgumentListSyntax, openParenToken: ISyntaxToken, _arguments: ISeparatedSyntaxList, closeParenToken: ISyntaxToken): ArgumentListSyntax {\n            return new ArgumentListSyntax(typeArgumentList, openParenToken, _arguments, closeParenToken, /*parsedInStrictMode:*/ true);\n        }\n        binaryExpression(kind: SyntaxKind, left: IExpressionSyntax, operatorToken: ISyntaxToken, right: IExpressionSyntax): BinaryExpressionSyntax {\n            return new BinaryExpressionSyntax(kind, left, operatorToken, right, /*parsedInStrictMode:*/ true);\n        }\n        conditionalExpression(condition: IExpressionSyntax, questionToken: ISyntaxToken, whenTrue: IExpressionSyntax, colonToken: ISyntaxToken, whenFalse: IExpressionSyntax): ConditionalExpressionSyntax {\n            return new ConditionalExpressionSyntax(condition, questionToken, whenTrue, colonToken, whenFalse, /*parsedInStrictMode:*/ true);\n        }\n        constructSignature(newKeyword: ISyntaxToken, callSignature: CallSignatureSyntax): ConstructSignatureSyntax {\n            return new ConstructSignatureSyntax(newKeyword, callSignature, /*parsedInStrictMode:*/ true);\n        }\n        methodSignature(propertyName: ISyntaxToken, questionToken: ISyntaxToken, callSignature: CallSignatureSyntax): MethodSignatureSyntax {\n            return new MethodSignatureSyntax(propertyName, questionToken, callSignature, /*parsedInStrictMode:*/ true);\n        }\n        indexSignature(openBracketToken: ISyntaxToken, parameter: ParameterSyntax, closeBracketToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax): IndexSignatureSyntax {\n            return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, typeAnnotation, /*parsedInStrictMode:*/ true);\n        }\n        propertySignature(propertyName: ISyntaxToken, questionToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax): PropertySignatureSyntax {\n            return new PropertySignatureSyntax(propertyName, questionToken, typeAnnotation, /*parsedInStrictMode:*/ true);\n        }\n        callSignature(typeParameterList: TypeParameterListSyntax, parameterList: ParameterListSyntax, typeAnnotation: TypeAnnotationSyntax): CallSignatureSyntax {\n            return new CallSignatureSyntax(typeParameterList, parameterList, typeAnnotation, /*parsedInStrictMode:*/ true);\n        }\n        parameterList(openParenToken: ISyntaxToken, parameters: ISeparatedSyntaxList, closeParenToken: ISyntaxToken): ParameterListSyntax {\n            return new ParameterListSyntax(openParenToken, parameters, closeParenToken, /*parsedInStrictMode:*/ true);\n        }\n        typeParameterList(lessThanToken: ISyntaxToken, typeParameters: ISeparatedSyntaxList, greaterThanToken: ISyntaxToken): TypeParameterListSyntax {\n            return new TypeParameterListSyntax(lessThanToken, typeParameters, greaterThanToken, /*parsedInStrictMode:*/ true);\n        }\n        typeParameter(identifier: ISyntaxToken, constraint: ConstraintSyntax): TypeParameterSyntax {\n            return new TypeParameterSyntax(identifier, constraint, /*parsedInStrictMode:*/ true);\n        }\n        constraint(extendsKeyword: ISyntaxToken, type: ITypeSyntax): ConstraintSyntax {\n            return new ConstraintSyntax(extendsKeyword, type, /*parsedInStrictMode:*/ true);\n        }\n        elseClause(elseKeyword: ISyntaxToken, statement: IStatementSyntax): ElseClauseSyntax {\n            return new ElseClauseSyntax(elseKeyword, statement, /*parsedInStrictMode:*/ true);\n        }\n        ifStatement(ifKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax, elseClause: ElseClauseSyntax): IfStatementSyntax {\n            return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause, /*parsedInStrictMode:*/ true);\n        }\n        expressionStatement(expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ExpressionStatementSyntax {\n            return new ExpressionStatementSyntax(expression, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        constructorDeclaration(constructorKeyword: ISyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): ConstructorDeclarationSyntax {\n            return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, block, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        memberFunctionDeclaration(modifiers: ISyntaxList, propertyName: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax, semicolonToken: ISyntaxToken): MemberFunctionDeclarationSyntax {\n            return new MemberFunctionDeclarationSyntax(modifiers, propertyName, callSignature, block, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        getMemberAccessorDeclaration(modifiers: ISyntaxList, getKeyword: ISyntaxToken, propertyName: ISyntaxToken, parameterList: ParameterListSyntax, typeAnnotation: TypeAnnotationSyntax, block: BlockSyntax): GetMemberAccessorDeclarationSyntax {\n            return new GetMemberAccessorDeclarationSyntax(modifiers, getKeyword, propertyName, parameterList, typeAnnotation, block, /*parsedInStrictMode:*/ true);\n        }\n        setMemberAccessorDeclaration(modifiers: ISyntaxList, setKeyword: ISyntaxToken, propertyName: ISyntaxToken, parameterList: ParameterListSyntax, block: BlockSyntax): SetMemberAccessorDeclarationSyntax {\n            return new SetMemberAccessorDeclarationSyntax(modifiers, setKeyword, propertyName, parameterList, block, /*parsedInStrictMode:*/ true);\n        }\n        memberVariableDeclaration(modifiers: ISyntaxList, variableDeclarator: VariableDeclaratorSyntax, semicolonToken: ISyntaxToken): MemberVariableDeclarationSyntax {\n            return new MemberVariableDeclarationSyntax(modifiers, variableDeclarator, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        throwStatement(throwKeyword: ISyntaxToken, expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ThrowStatementSyntax {\n            return new ThrowStatementSyntax(throwKeyword, expression, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        returnStatement(returnKeyword: ISyntaxToken, expression: IExpressionSyntax, semicolonToken: ISyntaxToken): ReturnStatementSyntax {\n            return new ReturnStatementSyntax(returnKeyword, expression, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        objectCreationExpression(newKeyword: ISyntaxToken, expression: IExpressionSyntax, argumentList: ArgumentListSyntax): ObjectCreationExpressionSyntax {\n            return new ObjectCreationExpressionSyntax(newKeyword, expression, argumentList, /*parsedInStrictMode:*/ true);\n        }\n        switchStatement(switchKeyword: ISyntaxToken, openParenToken: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken, openBraceToken: ISyntaxToken, switchClauses: ISyntaxList, closeBraceToken: ISyntaxToken): SwitchStatementSyntax {\n            return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, switchClauses, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        caseSwitchClause(caseKeyword: ISyntaxToken, expression: IExpressionSyntax, colonToken: ISyntaxToken, statements: ISyntaxList): CaseSwitchClauseSyntax {\n            return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, statements, /*parsedInStrictMode:*/ true);\n        }\n        defaultSwitchClause(defaultKeyword: ISyntaxToken, colonToken: ISyntaxToken, statements: ISyntaxList): DefaultSwitchClauseSyntax {\n            return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, statements, /*parsedInStrictMode:*/ true);\n        }\n        breakStatement(breakKeyword: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): BreakStatementSyntax {\n            return new BreakStatementSyntax(breakKeyword, identifier, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        continueStatement(continueKeyword: ISyntaxToken, identifier: ISyntaxToken, semicolonToken: ISyntaxToken): ContinueStatementSyntax {\n            return new ContinueStatementSyntax(continueKeyword, identifier, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        forStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken, variableDeclaration: VariableDeclarationSyntax, initializer: IExpressionSyntax, firstSemicolonToken: ISyntaxToken, condition: IExpressionSyntax, secondSemicolonToken: ISyntaxToken, incrementor: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): ForStatementSyntax {\n            return new ForStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement, /*parsedInStrictMode:*/ true);\n        }\n        forInStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken, variableDeclaration: VariableDeclarationSyntax, left: IExpressionSyntax, inKeyword: ISyntaxToken, expression: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): ForInStatementSyntax {\n            return new ForInStatementSyntax(forKeyword, openParenToken, variableDeclaration, left, inKeyword, expression, closeParenToken, statement, /*parsedInStrictMode:*/ true);\n        }\n        whileStatement(whileKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): WhileStatementSyntax {\n            return new WhileStatementSyntax(whileKeyword, openParenToken, condition, closeParenToken, statement, /*parsedInStrictMode:*/ true);\n        }\n        withStatement(withKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, statement: IStatementSyntax): WithStatementSyntax {\n            return new WithStatementSyntax(withKeyword, openParenToken, condition, closeParenToken, statement, /*parsedInStrictMode:*/ true);\n        }\n        enumDeclaration(modifiers: ISyntaxList, enumKeyword: ISyntaxToken, identifier: ISyntaxToken, openBraceToken: ISyntaxToken, enumElements: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): EnumDeclarationSyntax {\n            return new EnumDeclarationSyntax(modifiers, enumKeyword, identifier, openBraceToken, enumElements, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        enumElement(propertyName: ISyntaxToken, equalsValueClause: EqualsValueClauseSyntax): EnumElementSyntax {\n            return new EnumElementSyntax(propertyName, equalsValueClause, /*parsedInStrictMode:*/ true);\n        }\n        castExpression(lessThanToken: ISyntaxToken, type: ITypeSyntax, greaterThanToken: ISyntaxToken, expression: IUnaryExpressionSyntax): CastExpressionSyntax {\n            return new CastExpressionSyntax(lessThanToken, type, greaterThanToken, expression, /*parsedInStrictMode:*/ true);\n        }\n        objectLiteralExpression(openBraceToken: ISyntaxToken, propertyAssignments: ISeparatedSyntaxList, closeBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax {\n            return new ObjectLiteralExpressionSyntax(openBraceToken, propertyAssignments, closeBraceToken, /*parsedInStrictMode:*/ true);\n        }\n        simplePropertyAssignment(propertyName: ISyntaxToken, colonToken: ISyntaxToken, expression: IExpressionSyntax): SimplePropertyAssignmentSyntax {\n            return new SimplePropertyAssignmentSyntax(propertyName, colonToken, expression, /*parsedInStrictMode:*/ true);\n        }\n        getAccessorPropertyAssignment(getKeyword: ISyntaxToken, propertyName: ISyntaxToken, openParenToken: ISyntaxToken, closeParenToken: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, block: BlockSyntax): GetAccessorPropertyAssignmentSyntax {\n            return new GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, typeAnnotation, block, /*parsedInStrictMode:*/ true);\n        }\n        setAccessorPropertyAssignment(setKeyword: ISyntaxToken, propertyName: ISyntaxToken, openParenToken: ISyntaxToken, parameter: ParameterSyntax, closeParenToken: ISyntaxToken, block: BlockSyntax): SetAccessorPropertyAssignmentSyntax {\n            return new SetAccessorPropertyAssignmentSyntax(setKeyword, propertyName, openParenToken, parameter, closeParenToken, block, /*parsedInStrictMode:*/ true);\n        }\n        functionExpression(functionKeyword: ISyntaxToken, identifier: ISyntaxToken, callSignature: CallSignatureSyntax, block: BlockSyntax): FunctionExpressionSyntax {\n            return new FunctionExpressionSyntax(functionKeyword, identifier, callSignature, block, /*parsedInStrictMode:*/ true);\n        }\n        emptyStatement(semicolonToken: ISyntaxToken): EmptyStatementSyntax {\n            return new EmptyStatementSyntax(semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        tryStatement(tryKeyword: ISyntaxToken, block: BlockSyntax, catchClause: CatchClauseSyntax, finallyClause: FinallyClauseSyntax): TryStatementSyntax {\n            return new TryStatementSyntax(tryKeyword, block, catchClause, finallyClause, /*parsedInStrictMode:*/ true);\n        }\n        catchClause(catchKeyword: ISyntaxToken, openParenToken: ISyntaxToken, identifier: ISyntaxToken, typeAnnotation: TypeAnnotationSyntax, closeParenToken: ISyntaxToken, block: BlockSyntax): CatchClauseSyntax {\n            return new CatchClauseSyntax(catchKeyword, openParenToken, identifier, typeAnnotation, closeParenToken, block, /*parsedInStrictMode:*/ true);\n        }\n        finallyClause(finallyKeyword: ISyntaxToken, block: BlockSyntax): FinallyClauseSyntax {\n            return new FinallyClauseSyntax(finallyKeyword, block, /*parsedInStrictMode:*/ true);\n        }\n        labeledStatement(identifier: ISyntaxToken, colonToken: ISyntaxToken, statement: IStatementSyntax): LabeledStatementSyntax {\n            return new LabeledStatementSyntax(identifier, colonToken, statement, /*parsedInStrictMode:*/ true);\n        }\n        doStatement(doKeyword: ISyntaxToken, statement: IStatementSyntax, whileKeyword: ISyntaxToken, openParenToken: ISyntaxToken, condition: IExpressionSyntax, closeParenToken: ISyntaxToken, semicolonToken: ISyntaxToken): DoStatementSyntax {\n            return new DoStatementSyntax(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n        typeOfExpression(typeOfKeyword: ISyntaxToken, expression: IExpressionSyntax): TypeOfExpressionSyntax {\n            return new TypeOfExpressionSyntax(typeOfKeyword, expression, /*parsedInStrictMode:*/ true);\n        }\n        deleteExpression(deleteKeyword: ISyntaxToken, expression: IExpressionSyntax): DeleteExpressionSyntax {\n            return new DeleteExpressionSyntax(deleteKeyword, expression, /*parsedInStrictMode:*/ true);\n        }\n        voidExpression(voidKeyword: ISyntaxToken, expression: IExpressionSyntax): VoidExpressionSyntax {\n            return new VoidExpressionSyntax(voidKeyword, expression, /*parsedInStrictMode:*/ true);\n        }\n        debuggerStatement(debuggerKeyword: ISyntaxToken, semicolonToken: ISyntaxToken): DebuggerStatementSyntax {\n            return new DebuggerStatementSyntax(debuggerKeyword, semicolonToken, /*parsedInStrictMode:*/ true);\n        }\n    }\n\n    export var normalModeFactory: IFactory = new NormalModeFactory();\n    export var strictModeFactory: IFactory = new StrictModeFactory();\n}\n// If you change anything in this enum, make sure you run SyntaxGenerator again!\n\nmodule TypeScript {\n    export enum SyntaxKind {\n        // Variable width tokens, trivia and lists.\n        None,\n        List,\n        SeparatedList,\n        TriviaList,\n\n        // Trivia\n        WhitespaceTrivia,\n        NewLineTrivia,\n        MultiLineCommentTrivia,\n        SingleLineCommentTrivia,\n        SkippedTextTrivia,\n\n        // Note: all variable width tokens must come before all fixed width tokens.\n\n        ErrorToken,\n        EndOfFileToken,\n\n        // Tokens\n        IdentifierName,\n\n        // LiteralTokens\n        RegularExpressionLiteral,\n        NumericLiteral,\n        StringLiteral,\n\n        // All fixed width tokens follow.\n\n        // Keywords\n        BreakKeyword,\n        CaseKeyword,\n        CatchKeyword,\n        ContinueKeyword,\n        DebuggerKeyword,\n        DefaultKeyword,\n        DeleteKeyword,\n        DoKeyword,\n        ElseKeyword,\n        FalseKeyword,\n        FinallyKeyword,\n        ForKeyword,\n        FunctionKeyword,\n        IfKeyword,\n        InKeyword,\n        InstanceOfKeyword,\n        NewKeyword,\n        NullKeyword,\n        ReturnKeyword,\n        SwitchKeyword,\n        ThisKeyword,\n        ThrowKeyword,\n        TrueKeyword,\n        TryKeyword,\n        TypeOfKeyword,\n        VarKeyword,\n        VoidKeyword,\n        WhileKeyword,\n        WithKeyword,\n\n        // FutureReservedWords.\n        ClassKeyword,\n        ConstKeyword,\n        EnumKeyword,\n        ExportKeyword,\n        ExtendsKeyword,\n        ImportKeyword,\n        SuperKeyword,\n\n        // FutureReservedStrictWords.\n        ImplementsKeyword,\n        InterfaceKeyword,\n        LetKeyword,\n        PackageKeyword,\n        PrivateKeyword,\n        ProtectedKeyword,\n        PublicKeyword,\n        StaticKeyword,\n        YieldKeyword,\n\n        // TypeScript keywords.\n        AnyKeyword,\n        BooleanKeyword,\n        BoolKeyword,\n        ConstructorKeyword,\n        DeclareKeyword,\n        GetKeyword,\n        ModuleKeyword,\n        NumberKeyword,\n        SetKeyword,\n        StringKeyword,\n\n        // Punctuators\n        OpenBraceToken,\n        CloseBraceToken,\n        OpenParenToken,\n        CloseParenToken,\n        OpenBracketToken,\n        CloseBracketToken,\n        DotToken,\n        DotDotDotToken,\n        SemicolonToken,\n        CommaToken,\n        LessThanToken,\n        GreaterThanToken,\n        LessThanEqualsToken,\n        GreaterThanEqualsToken,\n        EqualsEqualsToken,\n        EqualsGreaterThanToken,\n        ExclamationEqualsToken,\n        EqualsEqualsEqualsToken,\n        ExclamationEqualsEqualsToken,\n        PlusToken,\n        MinusToken,\n        AsteriskToken,\n        PercentToken,\n        PlusPlusToken,\n        MinusMinusToken,\n        LessThanLessThanToken,\n        GreaterThanGreaterThanToken,\n        GreaterThanGreaterThanGreaterThanToken,\n        AmpersandToken,\n        BarToken,\n        CaretToken,\n        ExclamationToken,\n        TildeToken,\n        AmpersandAmpersandToken,\n        BarBarToken,\n        QuestionToken,\n        ColonToken,\n        EqualsToken,\n        PlusEqualsToken,\n        MinusEqualsToken,\n        AsteriskEqualsToken,\n        PercentEqualsToken,\n        LessThanLessThanEqualsToken,\n        GreaterThanGreaterThanEqualsToken,\n        GreaterThanGreaterThanGreaterThanEqualsToken,\n        AmpersandEqualsToken,\n        BarEqualsToken,\n        CaretEqualsToken,\n        SlashToken,\n        SlashEqualsToken,\n\n        // SyntaxNodes\n        SourceUnit,\n\n        // Names\n        QualifiedName,\n\n        // Types\n        ObjectType,\n        FunctionType,\n        ArrayType,\n        ConstructorType,\n        GenericType,\n\n        // Module elements.\n        InterfaceDeclaration,\n        FunctionDeclaration,\n        ModuleDeclaration,\n        ClassDeclaration,\n        EnumDeclaration,\n        ImportDeclaration,\n        ExportAssignment,\n\n        // ClassElements\n        MemberFunctionDeclaration,\n        MemberVariableDeclaration,\n        ConstructorDeclaration,\n        GetMemberAccessorDeclaration,\n        SetMemberAccessorDeclaration,\n\n        // Type members.\n        PropertySignature,\n        CallSignature,\n        ConstructSignature,\n        IndexSignature,\n        MethodSignature,\n\n        // Statements\n        Block,\n        IfStatement,\n        VariableStatement,\n        ExpressionStatement,\n        ReturnStatement,\n        SwitchStatement,\n        BreakStatement,\n        ContinueStatement,\n        ForStatement,\n        ForInStatement,\n        EmptyStatement,\n        ThrowStatement,\n        WhileStatement,\n        TryStatement,\n        LabeledStatement,\n        DoStatement,\n        DebuggerStatement,\n        WithStatement,\n\n        // Expressions\n        PlusExpression,\n        NegateExpression,\n        BitwiseNotExpression,\n        LogicalNotExpression,\n        PreIncrementExpression,\n        PreDecrementExpression,\n        DeleteExpression,\n        TypeOfExpression,\n        VoidExpression,\n        CommaExpression,\n        AssignmentExpression,\n        AddAssignmentExpression,\n        SubtractAssignmentExpression,\n        MultiplyAssignmentExpression,\n        DivideAssignmentExpression,\n        ModuloAssignmentExpression,\n        AndAssignmentExpression,\n        ExclusiveOrAssignmentExpression,\n        OrAssignmentExpression,\n        LeftShiftAssignmentExpression,\n        SignedRightShiftAssignmentExpression,\n        UnsignedRightShiftAssignmentExpression,\n        ConditionalExpression,\n        LogicalOrExpression,\n        LogicalAndExpression,\n        BitwiseOrExpression,\n        BitwiseExclusiveOrExpression,\n        BitwiseAndExpression,\n        EqualsWithTypeConversionExpression,\n        NotEqualsWithTypeConversionExpression,\n        EqualsExpression,\n        NotEqualsExpression,\n        LessThanExpression,\n        GreaterThanExpression,\n        LessThanOrEqualExpression,\n        GreaterThanOrEqualExpression,\n        InstanceOfExpression,\n        InExpression,\n        LeftShiftExpression,\n        SignedRightShiftExpression,\n        UnsignedRightShiftExpression,\n        MultiplyExpression,\n        DivideExpression,\n        ModuloExpression,\n        AddExpression,\n        SubtractExpression,\n        PostIncrementExpression,\n        PostDecrementExpression,\n        MemberAccessExpression,\n        InvocationExpression,\n        ArrayLiteralExpression,\n        ObjectLiteralExpression,\n        ObjectCreationExpression,\n        ParenthesizedExpression,\n        ParenthesizedArrowFunctionExpression,\n        SimpleArrowFunctionExpression,\n        CastExpression,\n        ElementAccessExpression,\n        FunctionExpression,\n        OmittedExpression,\n\n        // Variable declarations\n        VariableDeclaration,\n        VariableDeclarator,\n\n        // Lists\n        ArgumentList,\n        ParameterList,\n        TypeArgumentList,\n        TypeParameterList,\n\n        // Clauses\n        HeritageClause,\n        EqualsValueClause,\n        CaseSwitchClause,\n        DefaultSwitchClause,\n        ElseClause,\n        CatchClause,\n        FinallyClause,\n\n        // Generics\n        TypeParameter,\n        Constraint,\n\n        // Misc.\n        Parameter,\n        EnumElement,\n        TypeAnnotation,\n        SimplePropertyAssignment,\n        ExternalModuleReference,\n        ModuleNameModuleReference,\n        GetAccessorPropertyAssignment,\n        SetAccessorPropertyAssignment,\n\n        FirstStandardKeyword = BreakKeyword,\n        LastStandardKeyword = WithKeyword,\n\n        FirstFutureReservedKeyword = ClassKeyword,\n        LastFutureReservedKeyword = SuperKeyword,\n\n        FirstFutureReservedStrictKeyword = ImplementsKeyword,\n        LastFutureReservedStrictKeyword = YieldKeyword,\n\n        FirstTypeScriptKeyword = AnyKeyword,\n        LastTypeScriptKeyword = StringKeyword,\n\n        FirstKeyword = FirstStandardKeyword,\n        LastKeyword = LastTypeScriptKeyword,\n\n        FirstToken = ErrorToken,\n        LastToken = SlashEqualsToken,\n\n        FirstPunctuation = OpenBraceToken,\n        LastPunctuation = SlashEqualsToken,\n\n        FirstFixedWidth = FirstKeyword,\n        LastFixedWidth = LastPunctuation,\n    }\n}\n///<reference path=\'SyntaxKind.ts\' />\n\nmodule TypeScript.SyntaxFacts {\n    var textToKeywordKind: any = {\n        \"any\": SyntaxKind.AnyKeyword,\n        \"bool\": SyntaxKind.BoolKeyword,\n        \"boolean\": SyntaxKind.BooleanKeyword,\n        \"break\": SyntaxKind.BreakKeyword,\n        \"case\": SyntaxKind.CaseKeyword,\n        \"catch\": SyntaxKind.CatchKeyword,\n        \"class\": SyntaxKind.ClassKeyword,\n        \"continue\": SyntaxKind.ContinueKeyword,\n        \"const\": SyntaxKind.ConstKeyword,\n        \"constructor\": SyntaxKind.ConstructorKeyword,\n        \"debugger\": SyntaxKind.DebuggerKeyword,\n        \"declare\": SyntaxKind.DeclareKeyword,\n        \"default\": SyntaxKind.DefaultKeyword,\n        \"delete\": SyntaxKind.DeleteKeyword,\n        \"do\": SyntaxKind.DoKeyword,\n        \"else\": SyntaxKind.ElseKeyword,\n        \"enum\": SyntaxKind.EnumKeyword,\n        \"export\": SyntaxKind.ExportKeyword,\n        \"extends\": SyntaxKind.ExtendsKeyword,\n        \"false\": SyntaxKind.FalseKeyword,\n        \"finally\": SyntaxKind.FinallyKeyword,\n        \"for\": SyntaxKind.ForKeyword,\n        \"function\": SyntaxKind.FunctionKeyword,\n        \"get\": SyntaxKind.GetKeyword,\n        \"if\": SyntaxKind.IfKeyword,\n        \"implements\": SyntaxKind.ImplementsKeyword,\n        \"import\": SyntaxKind.ImportKeyword,\n        \"in\": SyntaxKind.InKeyword,\n        \"instanceof\": SyntaxKind.InstanceOfKeyword,\n        \"interface\": SyntaxKind.InterfaceKeyword,\n        \"let\": SyntaxKind.LetKeyword,\n        \"module\": SyntaxKind.ModuleKeyword,\n        \"new\": SyntaxKind.NewKeyword,\n        \"null\": SyntaxKind.NullKeyword,\n        \"number\":SyntaxKind.NumberKeyword,\n        \"package\": SyntaxKind.PackageKeyword,\n        \"private\": SyntaxKind.PrivateKeyword,\n        \"protected\": SyntaxKind.ProtectedKeyword,\n        \"public\": SyntaxKind.PublicKeyword,\n        \"return\": SyntaxKind.ReturnKeyword,\n        \"set\": SyntaxKind.SetKeyword,\n        \"static\": SyntaxKind.StaticKeyword,\n        \"string\": SyntaxKind.StringKeyword,\n        \"super\": SyntaxKind.SuperKeyword,\n        \"switch\": SyntaxKind.SwitchKeyword,\n        \"this\": SyntaxKind.ThisKeyword,\n        \"throw\": SyntaxKind.ThrowKeyword,\n        \"true\": SyntaxKind.TrueKeyword,\n        \"try\": SyntaxKind.TryKeyword,\n        \"typeof\": SyntaxKind.TypeOfKeyword,\n        \"var\": SyntaxKind.VarKeyword,\n        \"void\": SyntaxKind.VoidKeyword,\n        \"while\": SyntaxKind.WhileKeyword,\n        \"with\": SyntaxKind.WithKeyword,\n        \"yield\": SyntaxKind.YieldKeyword,\n\n        \"{\": SyntaxKind.OpenBraceToken,\n        \"}\": SyntaxKind.CloseBraceToken,\n        \"(\": SyntaxKind.OpenParenToken,\n        \")\": SyntaxKind.CloseParenToken,\n        \"[\": SyntaxKind.OpenBracketToken,\n        \"]\": SyntaxKind.CloseBracketToken,\n        \".\": SyntaxKind.DotToken,\n        \"...\": SyntaxKind.DotDotDotToken,\n        \";\": SyntaxKind.SemicolonToken,\n        \",\": SyntaxKind.CommaToken,\n        \"<\": SyntaxKind.LessThanToken,\n        \">\": SyntaxKind.GreaterThanToken,\n        \"<=\": SyntaxKind.LessThanEqualsToken,\n        \">=\": SyntaxKind.GreaterThanEqualsToken,\n        \"==\": SyntaxKind.EqualsEqualsToken,\n        \"=>\": SyntaxKind.EqualsGreaterThanToken,\n        \"!=\": SyntaxKind.ExclamationEqualsToken,\n        \"===\": SyntaxKind.EqualsEqualsEqualsToken,\n        \"!==\": SyntaxKind.ExclamationEqualsEqualsToken,\n        \"+\": SyntaxKind.PlusToken,\n        \"-\": SyntaxKind.MinusToken,\n        \"*\": SyntaxKind.AsteriskToken,\n        \"%\": SyntaxKind.PercentToken,\n        \"++\": SyntaxKind.PlusPlusToken,\n        \"--\": SyntaxKind.MinusMinusToken,\n        \"<<\": SyntaxKind.LessThanLessThanToken,\n        \">>\": SyntaxKind.GreaterThanGreaterThanToken,\n        \">>>\": SyntaxKind.GreaterThanGreaterThanGreaterThanToken,\n        \"&\": SyntaxKind.AmpersandToken,\n        \"|\": SyntaxKind.BarToken,\n        \"^\": SyntaxKind.CaretToken,\n        \"!\": SyntaxKind.ExclamationToken,\n        \"~\": SyntaxKind.TildeToken,\n        \"&&\": SyntaxKind.AmpersandAmpersandToken,\n        \"||\": SyntaxKind.BarBarToken,\n        \"?\": SyntaxKind.QuestionToken,\n        \":\": SyntaxKind.ColonToken,\n        \"=\": SyntaxKind.EqualsToken,\n        \"+=\": SyntaxKind.PlusEqualsToken,\n        \"-=\": SyntaxKind.MinusEqualsToken,\n        \"*=\": SyntaxKind.AsteriskEqualsToken,\n        \"%=\": SyntaxKind.PercentEqualsToken,\n        \"<<=\": SyntaxKind.LessThanLessThanEqualsToken,\n        \">>=\": SyntaxKind.GreaterThanGreaterThanEqualsToken,\n        \">>>=\": SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken,\n        \"&=\": SyntaxKind.AmpersandEqualsToken,\n        \"|=\": SyntaxKind.BarEqualsToken,\n        \"^=\": SyntaxKind.CaretEqualsToken,\n        \"/\": SyntaxKind.SlashToken,\n        \"/=\": SyntaxKind.SlashEqualsToken,\n    };\n\n    var kindToText: string[] = [];\n\n    for (var name in textToKeywordKind) {\n        if (textToKeywordKind.hasOwnProperty(name)) {\n            // Debug.assert(kindToText[textToKeywordKind[name]] === undefined);\n            kindToText[textToKeywordKind[name]] = name;\n        }\n    }\n\n    // Manually work around a bug in the CScript 5.8 runtime where \'constructor\' is not\n    // listed when SyntaxFacts.textToKeywordKind is enumerated because it is the name of\n    // the constructor function.\n    kindToText[SyntaxKind.ConstructorKeyword] = \"constructor\";\n\n    export function getTokenKind(text: string): SyntaxKind {\n        if (textToKeywordKind.hasOwnProperty(text)) {\n            return textToKeywordKind[text];\n        }\n\n        return SyntaxKind.None;\n    }\n\n    export function getText(kind: SyntaxKind): string {\n        var result = kindToText[kind];\n        return result !== undefined ? result : null;\n    }\n\n    export function isTokenKind(kind: SyntaxKind): bool {\n        return kind >= SyntaxKind.FirstToken && kind <= SyntaxKind.LastToken;\n    }\n\n    export function isAnyKeyword(kind: SyntaxKind): bool {\n        return kind >= SyntaxKind.FirstKeyword && kind <= SyntaxKind.LastKeyword;\n    }\n\n    export function isStandardKeyword(kind: SyntaxKind): bool {\n        return kind >= SyntaxKind.FirstStandardKeyword && kind <= SyntaxKind.LastStandardKeyword;\n    }\n\n    export function isFutureReservedKeyword(kind: SyntaxKind): bool {\n        return kind >= SyntaxKind.FirstFutureReservedKeyword && kind <= SyntaxKind.LastFutureReservedKeyword;\n    }\n\n    export function isFutureReservedStrictKeyword(kind: SyntaxKind): bool {\n        return kind >= SyntaxKind.FirstFutureReservedStrictKeyword && kind <= SyntaxKind.LastFutureReservedStrictKeyword;\n    }\n\n    export function isAnyPunctuation(kind: SyntaxKind): bool {\n        return kind >= SyntaxKind.FirstPunctuation && kind <= SyntaxKind.LastPunctuation;\n    }\n\n    export function isPrefixUnaryExpressionOperatorToken(tokenKind: SyntaxKind): bool {\n        return getPrefixUnaryExpressionFromOperatorToken(tokenKind) !== SyntaxKind.None;\n    }\n\n    export function isBinaryExpressionOperatorToken(tokenKind: SyntaxKind): bool {\n        return getBinaryExpressionFromOperatorToken(tokenKind) !== SyntaxKind.None;\n    }\n\n    export function getPrefixUnaryExpressionFromOperatorToken(tokenKind: SyntaxKind): SyntaxKind {\n        switch (tokenKind) {\n            case SyntaxKind.PlusToken:\n                return SyntaxKind.PlusExpression;\n            case SyntaxKind.MinusToken:\n                return SyntaxKind.NegateExpression;\n            case SyntaxKind.TildeToken:\n                return SyntaxKind.BitwiseNotExpression;\n            case SyntaxKind.ExclamationToken:\n                return SyntaxKind.LogicalNotExpression;\n            case SyntaxKind.PlusPlusToken:\n                return SyntaxKind.PreIncrementExpression;\n            case SyntaxKind.MinusMinusToken:\n                return SyntaxKind.PreDecrementExpression;\n            //case SyntaxKind.DeleteKeyword:\n            //    return SyntaxKind.DeleteExpression;\n            //case SyntaxKind.TypeOfKeyword:\n            //    return SyntaxKind.TypeOfExpression;\n            //case SyntaxKind.VoidKeyword:\n            //    return SyntaxKind.VoidExpression;\n            default:\n                return SyntaxKind.None;\n        }\n    }\n\n    export function getPostfixUnaryExpressionFromOperatorToken(tokenKind: SyntaxKind): SyntaxKind {\n        switch (tokenKind) {\n            case SyntaxKind.PlusPlusToken:\n                return SyntaxKind.PostIncrementExpression;\n            case SyntaxKind.MinusMinusToken:\n                return SyntaxKind.PostDecrementExpression;\n            default:\n                return SyntaxKind.None;\n        }\n    }\n\n    export function getBinaryExpressionFromOperatorToken(tokenKind: SyntaxKind): SyntaxKind {\n        switch (tokenKind) {\n            case SyntaxKind.AsteriskToken:\n                return SyntaxKind.MultiplyExpression;\n\n            case SyntaxKind.SlashToken:\n                return SyntaxKind.DivideExpression;\n\n            case SyntaxKind.PercentToken:\n                return SyntaxKind.ModuloExpression;\n\n            case SyntaxKind.PlusToken:\n                return SyntaxKind.AddExpression;\n\n            case SyntaxKind.MinusToken:\n                return SyntaxKind.SubtractExpression;\n\n            case SyntaxKind.LessThanLessThanToken:\n                return SyntaxKind.LeftShiftExpression;\n\n            case SyntaxKind.GreaterThanGreaterThanToken:\n                return SyntaxKind.SignedRightShiftExpression;\n\n            case SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\n                return SyntaxKind.UnsignedRightShiftExpression;\n\n            case SyntaxKind.LessThanToken:\n                return SyntaxKind.LessThanExpression;\n\n            case SyntaxKind.GreaterThanToken:\n                return SyntaxKind.GreaterThanExpression;\n\n            case SyntaxKind.LessThanEqualsToken:\n                return SyntaxKind.LessThanOrEqualExpression;\n\n            case SyntaxKind.GreaterThanEqualsToken:\n                return SyntaxKind.GreaterThanOrEqualExpression;\n\n            case SyntaxKind.InstanceOfKeyword:\n                return SyntaxKind.InstanceOfExpression;\n\n            case SyntaxKind.InKeyword:\n                return SyntaxKind.InExpression;\n\n            case SyntaxKind.EqualsEqualsToken:\n                return SyntaxKind.EqualsWithTypeConversionExpression;\n\n            case SyntaxKind.ExclamationEqualsToken:\n                return SyntaxKind.NotEqualsWithTypeConversionExpression;\n\n            case SyntaxKind.EqualsEqualsEqualsToken:\n                return SyntaxKind.EqualsExpression;\n\n            case SyntaxKind.ExclamationEqualsEqualsToken:\n                return SyntaxKind.NotEqualsExpression;\n\n            case SyntaxKind.AmpersandToken:\n                return SyntaxKind.BitwiseAndExpression;\n\n            case SyntaxKind.CaretToken:\n                return SyntaxKind.BitwiseExclusiveOrExpression;\n\n            case SyntaxKind.BarToken:\n                return SyntaxKind.BitwiseOrExpression;\n\n            case SyntaxKind.AmpersandAmpersandToken:\n                return SyntaxKind.LogicalAndExpression;\n\n            case SyntaxKind.BarBarToken:\n                return SyntaxKind.LogicalOrExpression;\n\n            case SyntaxKind.BarEqualsToken:\n                return SyntaxKind.OrAssignmentExpression;\n\n            case SyntaxKind.AmpersandEqualsToken:\n                return SyntaxKind.AndAssignmentExpression;\n\n            case SyntaxKind.CaretEqualsToken:\n                return SyntaxKind.ExclusiveOrAssignmentExpression;\n\n            case SyntaxKind.LessThanLessThanEqualsToken:\n                return SyntaxKind.LeftShiftAssignmentExpression;\n\n            case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                return SyntaxKind.SignedRightShiftAssignmentExpression;\n\n            case SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:\n                return SyntaxKind.UnsignedRightShiftAssignmentExpression;\n\n            case SyntaxKind.PlusEqualsToken:\n                return SyntaxKind.AddAssignmentExpression;\n\n            case SyntaxKind.MinusEqualsToken:\n                return SyntaxKind.SubtractAssignmentExpression;\n\n            case SyntaxKind.AsteriskEqualsToken:\n                return SyntaxKind.MultiplyAssignmentExpression;\n\n            case SyntaxKind.SlashEqualsToken:\n                return SyntaxKind.DivideAssignmentExpression;\n\n            case SyntaxKind.PercentEqualsToken:\n                return SyntaxKind.ModuloAssignmentExpression;\n\n            case SyntaxKind.EqualsToken:\n                return SyntaxKind.AssignmentExpression;\n\n            case SyntaxKind.CommaToken:\n                return SyntaxKind.CommaExpression;\n\n            default:\n                return SyntaxKind.None;\n        }\n    }\n\n    export function isAnyDivideToken(kind: SyntaxKind): bool {\n        switch (kind) {\n            case SyntaxKind.SlashToken:\n            case SyntaxKind.SlashEqualsToken:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    export function isAnyDivideOrRegularExpressionToken(kind: SyntaxKind): bool {\n        switch (kind) {\n            case SyntaxKind.SlashToken:\n            case SyntaxKind.SlashEqualsToken:\n            case SyntaxKind.RegularExpressionLiteral:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    export function isParserGenerated(kind: SyntaxKind): bool {\n        switch (kind) {\n            case SyntaxKind.GreaterThanGreaterThanToken:\n            case SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\n            case SyntaxKind.GreaterThanEqualsToken:\n            case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n            case SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    export function isAnyBinaryExpression(kind: SyntaxKind): bool {\n        switch (kind) {\n            case SyntaxKind.CommaExpression:\n            case SyntaxKind.AssignmentExpression:\n            case SyntaxKind.AddAssignmentExpression:\n            case SyntaxKind.SubtractAssignmentExpression:\n            case SyntaxKind.MultiplyAssignmentExpression:\n            case SyntaxKind.DivideAssignmentExpression:\n            case SyntaxKind.ModuloAssignmentExpression:\n            case SyntaxKind.AndAssignmentExpression:\n            case SyntaxKind.ExclusiveOrAssignmentExpression:\n            case SyntaxKind.OrAssignmentExpression:\n            case SyntaxKind.LeftShiftAssignmentExpression:\n            case SyntaxKind.SignedRightShiftAssignmentExpression:\n            case SyntaxKind.UnsignedRightShiftAssignmentExpression:\n            case SyntaxKind.LogicalOrExpression:\n            case SyntaxKind.LogicalAndExpression:\n            case SyntaxKind.BitwiseOrExpression:\n            case SyntaxKind.BitwiseExclusiveOrExpression:\n            case SyntaxKind.BitwiseAndExpression:\n            case SyntaxKind.EqualsWithTypeConversionExpression:\n            case SyntaxKind.NotEqualsWithTypeConversionExpression:\n            case SyntaxKind.EqualsExpression:\n            case SyntaxKind.NotEqualsExpression:\n            case SyntaxKind.LessThanExpression:\n            case SyntaxKind.GreaterThanExpression:\n            case SyntaxKind.LessThanOrEqualExpression:\n            case SyntaxKind.GreaterThanOrEqualExpression:\n            case SyntaxKind.InstanceOfExpression:\n            case SyntaxKind.InExpression:\n            case SyntaxKind.LeftShiftExpression:\n            case SyntaxKind.SignedRightShiftExpression:\n            case SyntaxKind.UnsignedRightShiftExpression:\n            case SyntaxKind.MultiplyExpression:\n            case SyntaxKind.DivideExpression:\n            case SyntaxKind.ModuloExpression:\n            case SyntaxKind.AddExpression:\n            case SyntaxKind.SubtractExpression:\n                return true;\n        }\n\n        return false;\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript.SyntaxFacts {\n    export function isDirectivePrologueElement(node: ISyntaxNodeOrToken): bool {\n        if (node.kind() === SyntaxKind.ExpressionStatement) {\n            var expressionStatement = <ExpressionStatementSyntax>node;\n            var expression = expressionStatement.expression;\n\n            if (expression.kind() === SyntaxKind.StringLiteral) {\n                return true;\n            }\n        }\n\n        return false\n    }\n\n    export function isUseStrictDirective(node: ISyntaxNodeOrToken): bool {\n        var expressionStatement = <ExpressionStatementSyntax>node;\n        var stringLiteral = <ISyntaxToken>expressionStatement.expression;\n\n        var text = stringLiteral.text();\n        return text === \'\"use strict\"\' || text === \"\'use strict\'\";\n    }\n\n    export function isIdentifierNameOrAnyKeyword(token: ISyntaxToken): bool {\n        var tokenKind = token.tokenKind;\n        return tokenKind === SyntaxKind.IdentifierName || SyntaxFacts.isAnyKeyword(tokenKind);\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript.Syntax {\n    // TODO: stop exporting this once typecheck bug is fixed.\n    export class EmptySyntaxList implements ISyntaxList {\n        public kind(): SyntaxKind { return SyntaxKind.List; }\n\n        public isNode(): bool { return false; }\n        public isToken(): bool { return false; }\n        public isList(): bool { return true; }\n        public isSeparatedList(): bool { return false; }\n\n        public toJSON(key) {\n            return [];\n        }\n\n        public childCount(): number {\n            return 0;\n        }\n\n        public childAt(index: number): ISyntaxNodeOrToken {\n            throw Errors.argumentOutOfRange(\"index\");\n        }\n\n        public toArray(): ISyntaxNodeOrToken[] {\n            return [];\n        }\n\n        private collectTextElements(elements: string[]): void {\n        }\n\n        public firstToken(): ISyntaxToken {\n            return null;\n        }\n\n        public lastToken(): ISyntaxToken {\n            return null;\n        }\n\n        public fullWidth(): number {\n            return 0;\n        }\n\n        public width(): number {\n            return 0;\n        }\n\n        public leadingTrivia(): ISyntaxTriviaList {\n            return Syntax.emptyTriviaList;\n        }\n\n        public trailingTrivia(): ISyntaxTriviaList {\n            return Syntax.emptyTriviaList;\n        }\n\n        public leadingTriviaWidth(): number {\n            return 0;\n        }\n\n        public trailingTriviaWidth(): number {\n            return 0;\n        }\n\n        public fullText(): string {\n            return \"\";\n        }\n\n        public isTypeScriptSpecific(): bool {\n            return false;\n        }\n\n        public isIncrementallyUnusable(): bool {\n            return false;\n        }\n\n        public findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            // This should never have been called on this list.  It has a 0 width, so the client \n            // should have skipped over this.\n            throw Errors.invalidOperation();\n        }\n\n        public insertChildrenInto(array: ISyntaxElement[], index: number): void {\n        }\n    }\n\n    export var emptyList: ISyntaxList = new EmptySyntaxList();\n\n    class SingletonSyntaxList implements ISyntaxList {\n        private item: ISyntaxNodeOrToken;\n\n        constructor(item: ISyntaxNodeOrToken) {\n            this.item = item;\n        }\n\n        public kind(): SyntaxKind { return SyntaxKind.List; }\n\n        public isToken(): bool { return false; }\n        public isNode(): bool { return false; }\n        public isList(): bool { return true; }\n        public isSeparatedList(): bool { return false; }\n\n        public toJSON(key) {\n            return [this.item];\n        }\n\n        public childCount() {\n            return 1;\n        }\n\n        public childAt(index: number): ISyntaxNodeOrToken {\n            if (index !== 0) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.item;\n        }\n\n        public toArray(): ISyntaxNodeOrToken[] {\n            return [this.item];\n        }\n\n        private collectTextElements(elements: string[]): void {\n            this.item.collectTextElements(elements);\n        }\n\n        public firstToken(): ISyntaxToken {\n            return this.item.firstToken();\n        }\n\n        public lastToken(): ISyntaxToken {\n            return this.item.lastToken();\n        }\n\n        public fullWidth(): number {\n            return this.item.fullWidth();\n        }\n\n        public width(): number {\n            return this.item.width();\n        }\n        \n        public leadingTrivia(): ISyntaxTriviaList {\n            return this.item.leadingTrivia();\n        }\n\n        public trailingTrivia(): ISyntaxTriviaList {\n            return this.item.trailingTrivia();\n        }\n\n        public leadingTriviaWidth(): number {\n            return this.item.leadingTriviaWidth();\n        }\n\n        public trailingTriviaWidth(): number {\n            return this.item.trailingTriviaWidth();\n        }\n\n        public fullText(): string {\n            return this.item.fullText();\n        }\n\n        public isTypeScriptSpecific(): bool {\n            return this.item.isTypeScriptSpecific();\n        }\n\n        public isIncrementallyUnusable(): bool {\n            return this.item.isIncrementallyUnusable();\n        }\n\n        public findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            // Debug.assert(position >= 0 && position < this.item.fullWidth());\n            return (<any>this.item).findTokenInternal(\n                new PositionedList(parent, this, fullStart), position, fullStart);\n        }\n\n        public insertChildrenInto(array: ISyntaxElement[], index: number): void {\n            array.splice(index, 0, this.item);\n        }\n    }\n\n    class NormalSyntaxList implements ISyntaxList {\n        private nodeOrTokens: ISyntaxNodeOrToken[];\n        private _data: number = 0;\n\n        constructor(nodeOrTokens: ISyntaxNodeOrToken[]) {\n            this.nodeOrTokens = nodeOrTokens;\n        }\n\n        public kind(): SyntaxKind { return SyntaxKind.List; }\n\n        public isNode(): bool { return false; }\n        public isToken(): bool { return false; }\n        public isList(): bool { return true; }\n        public isSeparatedList(): bool { return false; }\n\n        public toJSON(key) {\n            return this.nodeOrTokens;\n        }\n\n        public childCount() {\n            return this.nodeOrTokens.length;\n        }\n\n        public childAt(index: number): ISyntaxNodeOrToken {\n            if (index < 0 || index >= this.nodeOrTokens.length) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.nodeOrTokens[index];\n        }\n\n        public toArray(): ISyntaxNodeOrToken[] {\n            return this.nodeOrTokens.slice(0);\n        }\n\n        private collectTextElements(elements: string[]): void {\n            for (var i = 0, n = this.nodeOrTokens.length; i < n; i++) {\n                var element = this.nodeOrTokens[i];\n                element.collectTextElements(elements);\n            }\n        }\n\n        public firstToken(): ISyntaxToken {\n            for (var i = 0, n = this.nodeOrTokens.length; i < n; i++) {\n                var token = this.nodeOrTokens[i].firstToken();\n                if (token !== null) {\n                    return token;\n                }\n            }\n\n            return null;\n        }\n\n        public lastToken(): ISyntaxToken {\n            for (var i = this.nodeOrTokens.length - 1; i >= 0; i--) {\n                var token = this.nodeOrTokens[i].lastToken();\n                if (token !== null) {\n                    return token;\n                }\n            }\n\n            return null;\n        }\n\n        public fullText(): string {\n            var elements: string[] = [];\n            this.collectTextElements(elements);\n            return elements.join(\"\");\n        }\n\n        public isTypeScriptSpecific(): bool {\n            for (var i = 0, n = this.nodeOrTokens.length; i < n; i++) {\n                if (this.nodeOrTokens[i].isTypeScriptSpecific()) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public isIncrementallyUnusable(): bool {\n            return (this.data() & SyntaxConstants.NodeIncrementallyUnusableMask) !== 0;\n        }\n\n        public fullWidth(): number {\n            return this.data() >>> SyntaxConstants.NodeFullWidthShift;\n        }\n\n        public width(): number {\n            var fullWidth = this.fullWidth();\n            return fullWidth - this.leadingTriviaWidth() - this.trailingTriviaWidth();\n        }\n\n        public leadingTrivia(): ISyntaxTriviaList {\n            return this.firstToken().leadingTrivia();\n        }\n\n        public trailingTrivia(): ISyntaxTriviaList {\n            return this.lastToken().trailingTrivia();\n        }\n\n        public leadingTriviaWidth(): number {\n            return this.firstToken().leadingTriviaWidth();\n        }\n\n        public trailingTriviaWidth(): number {\n            return this.lastToken().trailingTriviaWidth();\n        }\n\n        private computeData(): number {\n            var fullWidth = 0;\n            var isIncrementallyUnusable = false;\n\n            for (var i = 0, n = this.nodeOrTokens.length; i < n; i++) {\n                var node = this.nodeOrTokens[i];\n                fullWidth += node.fullWidth();\n                isIncrementallyUnusable = isIncrementallyUnusable || node.isIncrementallyUnusable();\n            }\n\n            return (fullWidth << SyntaxConstants.NodeFullWidthShift)\n                 | (isIncrementallyUnusable ? SyntaxConstants.NodeIncrementallyUnusableMask : 0)\n                 | SyntaxConstants.NodeDataComputed;\n        }\n\n        private data(): number {\n            if ((this._data & SyntaxConstants.NodeDataComputed) === 0) {\n                this._data = this.computeData();\n            }\n\n            return this._data;\n        }\n\n        public findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            // Debug.assert(position >= 0 && position < this.fullWidth());\n            \n            parent = new PositionedList(parent, this, fullStart);\n            for (var i = 0, n = this.nodeOrTokens.length; i < n; i++) {\n                var nodeOrToken = this.nodeOrTokens[i];\n\n                var childWidth = nodeOrToken.fullWidth();\n                if (position < childWidth) {\n                    return (<any>nodeOrToken).findTokenInternal(parent, position, fullStart);\n                }\n\n                position -= childWidth;\n                fullStart += childWidth;\n            }\n\n            throw Errors.invalidOperation();\n        }\n\n        public insertChildrenInto(array: ISyntaxElement[], index: number): void {\n            if (index === 0) {\n                array.unshift.apply(array, this.nodeOrTokens);\n            }\n            else {\n                // TODO: this seems awfully innefficient.  Can we do better here?\n                array.splice.apply(array, [index, <any>0].concat(this.nodeOrTokens));\n            }\n        }\n    }\n\n    export function list(nodes: ISyntaxNodeOrToken[]): ISyntaxList {\n        if (nodes === undefined || nodes === null || nodes.length === 0) {\n            return emptyList;\n        }\n\n        if (nodes.length === 1) {\n            var item = nodes[0];\n            return new SingletonSyntaxList(item);\n        }\n\n        return new NormalSyntaxList(nodes);\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class SyntaxNode implements ISyntaxNodeOrToken {\n        private _data: number;\n\n        constructor(parsedInStrictMode: bool) {\n            this._data = parsedInStrictMode ? SyntaxConstants.NodeParsedInStrictModeMask : 0;\n        }\n\n        public isNode(): bool { return true; }\n        public isToken(): bool { return false; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return false; }\n\n        public kind(): SyntaxKind {\n            throw Errors.abstract();\n        }\n\n        public childCount(): number {\n            throw Errors.abstract();\n        }\n\n        public childAt(slot: number): ISyntaxElement {\n            throw Errors.abstract();\n        }\n\n        // Returns the first non-missing token inside this node (or null if there are no such token).\n        public firstToken(): ISyntaxToken {\n            for (var i = 0, n = this.childCount(); i < n; i++) {\n                var element = this.childAt(i);\n\n                if (element != null) {\n                    if (element.fullWidth() > 0 || element.kind() === SyntaxKind.EndOfFileToken) {\n                        return element.firstToken();\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        // Returns the last non-missing token inside this node (or null if there are no such token).\n        public lastToken(): ISyntaxToken {\n            for (var i = this.childCount() - 1; i >= 0; i--) {\n                var element = this.childAt(i);\n\n                if (element != null) {\n                    if (element.fullWidth() > 0 || element.kind() === SyntaxKind.EndOfFileToken) {\n                        return element.lastToken();\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public insertChildrenInto(array: ISyntaxElement[], index: number) {\n            for (var i = this.childCount() - 1; i >= 0; i--) {\n                var element = this.childAt(i);\n\n                if (element !== null) {\n                    if (element.isNode() || element.isToken()) {\n                        array.splice(index, 0, element);\n                    }\n                    else if (element.isList()) {\n                        (<ISyntaxList>element).insertChildrenInto(array, index);\n                    }\n                    else if (element.isSeparatedList()) {\n                        (<ISeparatedSyntaxList>element).insertChildrenInto(array, index);\n                    }\n                    else {\n                        throw Errors.invalidOperation();\n                    }\n                }\n            }\n        }\n\n        public leadingTrivia(): ISyntaxTriviaList {\n            return this.firstToken().leadingTrivia();\n        }\n\n        public trailingTrivia(): ISyntaxTriviaList {\n            return this.lastToken().trailingTrivia();\n        }\n\n        public toJSON(key) {\n            var result: any = {\n                kind: (<any>SyntaxKind)._map[this.kind()],\n                fullWidth: this.fullWidth()\n            };\n\n            if (this.isIncrementallyUnusable()) {\n                result.isIncrementallyUnusable = true;\n            }\n\n            if (this.parsedInStrictMode()) {\n                result.parsedInStrictMode = true;\n            }\n\n            for (var i = 0, n = this.childCount(); i < n; i++) {\n                var value = this.childAt(i);\n\n                if (value) {\n                    for (var name in this) {\n                        if (value === this[name]) {\n                            result[name] = value;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        public accept(visitor: ISyntaxVisitor): any {\n            throw Errors.abstract();\n        }\n\n        public fullText(): string {\n            var elements: string[] = [];\n            this.collectTextElements(elements);\n            return elements.join(\"\");\n        }\n\n        public collectTextElements(elements: string[]): void {\n            for (var i = 0, n = this.childCount(); i < n; i++) {\n                var element = this.childAt(i);\n\n                if (element !== null) {\n                    element.collectTextElements(elements)\n                }\n            }\n        }\n\n        public replaceToken(token1: ISyntaxToken, token2: ISyntaxToken): SyntaxNode {\n            if (token1 === token2) {\n                return this;\n            }\n\n            return this.accept(new SyntaxTokenReplacer(token1, token2));\n        }\n\n        public withLeadingTrivia(trivia: ISyntaxTriviaList): SyntaxNode {\n            return this.replaceToken(this.firstToken(), this.firstToken().withLeadingTrivia(trivia));\n        }\n\n        public withTrailingTrivia(trivia: ISyntaxTriviaList): SyntaxNode {\n            return this.replaceToken(this.lastToken(), this.lastToken().withTrailingTrivia(trivia));\n        }\n\n        public hasLeadingTrivia(): bool {\n            return this.lastToken().hasLeadingTrivia();\n        }\n\n        public hasTrailingTrivia(): bool {\n            return this.lastToken().hasTrailingTrivia();\n        }\n\n        public isTypeScriptSpecific(): bool {\n            return false;\n        }\n\n        public isIncrementallyUnusable(): bool {\n            return (this.data() & SyntaxConstants.NodeIncrementallyUnusableMask) !== 0;\n        }\n\n        // True if this node was parsed while the parser was in \'strict\' mode.  A node parsed in strict\n        // mode cannot be reused if the parser is non-strict mode (and vice versa).  This is because \n        // the parser parses things differently in strict mode and thus the tokens may be interpretted\n        // differently if the mode is changed. \n        public parsedInStrictMode(): bool {\n            return (this.data() & SyntaxConstants.NodeParsedInStrictModeMask) !== 0;\n        }\n\n        public fullWidth(): number {\n            return this.data() >>> SyntaxConstants.NodeFullWidthShift;\n        }\n\n        private computeData(): number {\n            var slotCount = this.childCount();\n\n            var fullWidth = 0;\n            var childWidth = 0;\n\n            // If we\'re already set as incrementally unusable, then don\'t need to check children.\n            // If we have no children (like an OmmittedExpressionSyntax), we\'re automatically not reusable.\n            var isIncrementallyUnusable = ((this._data & SyntaxConstants.NodeIncrementallyUnusableMask) !== 0) || slotCount === 0;\n\n            for (var i = 0, n = slotCount; i < n; i++) {\n                var element = this.childAt(i);\n\n                if (element !== null) {\n                    childWidth = element.fullWidth();\n                    fullWidth += childWidth;\n\n                    if (!isIncrementallyUnusable) {\n                        isIncrementallyUnusable = element.isIncrementallyUnusable();\n                    }\n                }\n            }\n\n            return (fullWidth << SyntaxConstants.NodeFullWidthShift)\n                 | (isIncrementallyUnusable ? SyntaxConstants.NodeIncrementallyUnusableMask : 0)\n                 | SyntaxConstants.NodeDataComputed;\n        }\n\n        private data(): number {\n            if ((this._data & SyntaxConstants.NodeDataComputed) === 0) {\n                this._data |= this.computeData();\n            }\n\n            return this._data;\n        }\n\n        /// <summary>\n        /// Finds a token according to the following rules:\n        /// 1) If position matches the End of the node/s FullSpan and the node is SourceUnit,\n        ///    then the EOF token is returned. \n        /// \n        ///  2) If node.FullSpan.Contains(position) then the token that contains given position is\n        ///     returned.\n        /// \n        ///  3) Otherwise an ArgumentOutOfRangeException is thrown\n        ///\n        /// Note: findToken will always return a non missing token with width greater than or equal to\n        /// 1 (except for EOF).  Empty tokens syntehsized by teh parser are never returned.\n        /// </summary>\n        public findToken(position: number): PositionedToken {\n            var endOfFileToken = this.tryGetEndOfFileAt(position);\n            if (endOfFileToken !== null) {\n                return endOfFileToken;\n            }\n\n            if (position < 0 || position >= this.fullWidth()) {\n                throw Errors.argumentOutOfRange(\"position\");\n            }\n\n            return this.findTokenInternal(null, position, 0);\n        }\n\n        private tryGetEndOfFileAt(position: number): PositionedToken {\n            if (this.kind() === SyntaxKind.SourceUnit && position === this.fullWidth()) {\n                var sourceUnit = <SourceUnitSyntax>this;\n                return new PositionedToken(\n                    new PositionedNode(null, sourceUnit, 0),\n                    sourceUnit.endOfFileToken, sourceUnit.moduleElements.fullWidth());\n            }\n\n            return null;\n        }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            // Debug.assert(position >= 0 && position < this.fullWidth());\n\n            parent = new PositionedNode(parent, this, fullStart);\n            for (var i = 0, n = this.childCount(); i < n; i++) {\n                var element = this.childAt(i);\n\n                if (element !== null) {\n                    var childWidth = element.fullWidth();\n\n                    if (position < childWidth) {\n                        return (<any>element).findTokenInternal(parent, position, fullStart);\n                    }\n\n                    position -= childWidth;\n                    fullStart += childWidth;\n                }\n            }\n\n            throw Errors.invalidOperation();\n        }\n\n        public findTokenOnLeft(position: number): PositionedToken {\n            var positionedToken = this.findToken(position);\n            var start = positionedToken.start();\n\n            // Position better fall within this token.\n            // Debug.assert(position >= positionedToken.fullStart());\n            // Debug.assert(position < positionedToken.fullEnd() || positionedToken.token().tokenKind === SyntaxKind.EndOfFileToken);\n\n            // if position is after the start of the token, then this token is the token on the left.\n            if (position > start) {\n                return positionedToken;\n            }\n\n            // we\'re in the trivia before the start of the token.  Need to return the previous token.\n            if (positionedToken.fullStart() === 0) {\n                // Already on the first token.  Nothing before us.\n                return null;\n            }\n\n            var previousToken = this.findToken(positionedToken.fullStart() - 1);\n\n            // Position better be after this token.\n            // Debug.assert(previousToken.fullEnd() <= position);\n\n            return previousToken;\n        }\n\n        public isModuleElement(): bool {\n            return false;\n        }\n\n        public isClassElement(): bool {\n            return false;\n        }\n\n        public isTypeMember(): bool {\n            return false\n        }\n\n        public isStatement(): bool {\n            return false;\n        }\n\n        public isSwitchClause(): bool {\n            return false;\n        }\n\n        public structuralEquals(node: SyntaxNode): bool {\n            if (this === node) { return true; }\n            if (node === null) { return false; }\n            if (this.kind() !== node.kind()) { return false; }\n\n            for (var i = 0, n = this.childCount(); i < n; i++) {\n                var element1 = this.childAt(i);\n                var element2 = node.childAt(i);\n\n                if (!Syntax.elementStructuralEquals(element1, element2)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        public width(): number {\n            return this.fullWidth() - this.leadingTriviaWidth() - this.trailingTriviaWidth();\n        }\n\n        public leadingTriviaWidth() {\n            var firstToken = this.firstToken();\n            return firstToken === null ? 0 : firstToken.leadingTriviaWidth();\n        }\n\n        public trailingTriviaWidth() {\n            var lastToken = this.lastToken();\n            return lastToken === null ? 0 : lastToken.trailingTriviaWidth();\n        }\n    }\n}\n﻿///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class SourceUnitSyntax extends SyntaxNode {\n\n    constructor(public moduleElements: ISyntaxList,\n                public endOfFileToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitSourceUnit(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.SourceUnit;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.moduleElements;\n            case 1: return this.endOfFileToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(moduleElements: ISyntaxList,\n                  endOfFileToken: ISyntaxToken): SourceUnitSyntax {\n        if (this.moduleElements === moduleElements && this.endOfFileToken === endOfFileToken) {\n            return this;\n        }\n\n        return new SourceUnitSyntax(moduleElements, endOfFileToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(endOfFileToken: ISyntaxToken): SourceUnitSyntax {\n        return new SourceUnitSyntax(Syntax.emptyList, endOfFileToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(endOfFileToken: ISyntaxToken): SourceUnitSyntax {\n        return new SourceUnitSyntax(Syntax.emptyList, endOfFileToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SourceUnitSyntax {\n        return <SourceUnitSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SourceUnitSyntax {\n        return <SourceUnitSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModuleElements(moduleElements: ISyntaxList): SourceUnitSyntax {\n        return this.update(moduleElements, this.endOfFileToken);\n    }\n\n    public withModuleElement(moduleElement: IModuleElementSyntax): SourceUnitSyntax {\n        return this.withModuleElements(Syntax.list([moduleElement]));\n    }\n\n    public withEndOfFileToken(endOfFileToken: ISyntaxToken): SourceUnitSyntax {\n        return this.update(this.moduleElements, endOfFileToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.moduleElements.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ModuleReferenceSyntax extends SyntaxNode implements IModuleReferenceSyntax {\n    constructor(parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n    }\n\n    private isModuleReference(): bool {\n        return true;\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ModuleReferenceSyntax {\n        return <ModuleReferenceSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ModuleReferenceSyntax {\n        return <ModuleReferenceSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ExternalModuleReferenceSyntax extends ModuleReferenceSyntax {\n\n    constructor(public moduleKeyword: ISyntaxToken,\n                public openParenToken: ISyntaxToken,\n                public stringLiteral: ISyntaxToken,\n                public closeParenToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitExternalModuleReference(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ExternalModuleReference;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.moduleKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.stringLiteral;\n            case 3: return this.closeParenToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(moduleKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  stringLiteral: ISyntaxToken,\n                  closeParenToken: ISyntaxToken): ExternalModuleReferenceSyntax {\n        if (this.moduleKeyword === moduleKeyword && this.openParenToken === openParenToken && this.stringLiteral === stringLiteral && this.closeParenToken === closeParenToken) {\n            return this;\n        }\n\n        return new ExternalModuleReferenceSyntax(moduleKeyword, openParenToken, stringLiteral, closeParenToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(stringLiteral: ISyntaxToken): ExternalModuleReferenceSyntax {\n        return new ExternalModuleReferenceSyntax(Syntax.token(SyntaxKind.ModuleKeyword), Syntax.token(SyntaxKind.OpenParenToken), stringLiteral, Syntax.token(SyntaxKind.CloseParenToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ExternalModuleReferenceSyntax {\n        return <ExternalModuleReferenceSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ExternalModuleReferenceSyntax {\n        return <ExternalModuleReferenceSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModuleKeyword(moduleKeyword: ISyntaxToken): ExternalModuleReferenceSyntax {\n        return this.update(moduleKeyword, this.openParenToken, this.stringLiteral, this.closeParenToken);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): ExternalModuleReferenceSyntax {\n        return this.update(this.moduleKeyword, openParenToken, this.stringLiteral, this.closeParenToken);\n    }\n\n    public withStringLiteral(stringLiteral: ISyntaxToken): ExternalModuleReferenceSyntax {\n        return this.update(this.moduleKeyword, this.openParenToken, stringLiteral, this.closeParenToken);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): ExternalModuleReferenceSyntax {\n        return this.update(this.moduleKeyword, this.openParenToken, this.stringLiteral, closeParenToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ModuleNameModuleReferenceSyntax extends ModuleReferenceSyntax {\n\n    constructor(public moduleName: INameSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitModuleNameModuleReference(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ModuleNameModuleReference;\n    }\n\n    public childCount(): number {\n        return 1;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.moduleName;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(moduleName: INameSyntax): ModuleNameModuleReferenceSyntax {\n        if (this.moduleName === moduleName) {\n            return this;\n        }\n\n        return new ModuleNameModuleReferenceSyntax(moduleName, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ModuleNameModuleReferenceSyntax {\n        return <ModuleNameModuleReferenceSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ModuleNameModuleReferenceSyntax {\n        return <ModuleNameModuleReferenceSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModuleName(moduleName: INameSyntax): ModuleNameModuleReferenceSyntax {\n        return this.update(moduleName);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ImportDeclarationSyntax extends SyntaxNode implements IModuleElementSyntax {\n\n    constructor(public importKeyword: ISyntaxToken,\n                public identifier: ISyntaxToken,\n                public equalsToken: ISyntaxToken,\n                public moduleReference: ModuleReferenceSyntax,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitImportDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ImportDeclaration;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.importKeyword;\n            case 1: return this.identifier;\n            case 2: return this.equalsToken;\n            case 3: return this.moduleReference;\n            case 4: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(importKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  equalsToken: ISyntaxToken,\n                  moduleReference: ModuleReferenceSyntax,\n                  semicolonToken: ISyntaxToken): ImportDeclarationSyntax {\n        if (this.importKeyword === importKeyword && this.identifier === identifier && this.equalsToken === equalsToken && this.moduleReference === moduleReference && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ImportDeclarationSyntax(importKeyword, identifier, equalsToken, moduleReference, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(identifier: ISyntaxToken,\n                          moduleReference: ModuleReferenceSyntax): ImportDeclarationSyntax {\n        return new ImportDeclarationSyntax(Syntax.token(SyntaxKind.ImportKeyword), identifier, Syntax.token(SyntaxKind.EqualsToken), moduleReference, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ImportDeclarationSyntax {\n        return <ImportDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ImportDeclarationSyntax {\n        return <ImportDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withImportKeyword(importKeyword: ISyntaxToken): ImportDeclarationSyntax {\n        return this.update(importKeyword, this.identifier, this.equalsToken, this.moduleReference, this.semicolonToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): ImportDeclarationSyntax {\n        return this.update(this.importKeyword, identifier, this.equalsToken, this.moduleReference, this.semicolonToken);\n    }\n\n    public withEqualsToken(equalsToken: ISyntaxToken): ImportDeclarationSyntax {\n        return this.update(this.importKeyword, this.identifier, equalsToken, this.moduleReference, this.semicolonToken);\n    }\n\n    public withModuleReference(moduleReference: ModuleReferenceSyntax): ImportDeclarationSyntax {\n        return this.update(this.importKeyword, this.identifier, this.equalsToken, moduleReference, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ImportDeclarationSyntax {\n        return this.update(this.importKeyword, this.identifier, this.equalsToken, this.moduleReference, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ExportAssignmentSyntax extends SyntaxNode implements IModuleElementSyntax {\n\n    constructor(public exportKeyword: ISyntaxToken,\n                public equalsToken: ISyntaxToken,\n                public identifier: ISyntaxToken,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitExportAssignment(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ExportAssignment;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.exportKeyword;\n            case 1: return this.equalsToken;\n            case 2: return this.identifier;\n            case 3: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(exportKeyword: ISyntaxToken,\n                  equalsToken: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  semicolonToken: ISyntaxToken): ExportAssignmentSyntax {\n        if (this.exportKeyword === exportKeyword && this.equalsToken === equalsToken && this.identifier === identifier && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ExportAssignmentSyntax(exportKeyword, equalsToken, identifier, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(identifier: ISyntaxToken): ExportAssignmentSyntax {\n        return new ExportAssignmentSyntax(Syntax.token(SyntaxKind.ExportKeyword), Syntax.token(SyntaxKind.EqualsToken), identifier, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ExportAssignmentSyntax {\n        return <ExportAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ExportAssignmentSyntax {\n        return <ExportAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExportKeyword(exportKeyword: ISyntaxToken): ExportAssignmentSyntax {\n        return this.update(exportKeyword, this.equalsToken, this.identifier, this.semicolonToken);\n    }\n\n    public withEqualsToken(equalsToken: ISyntaxToken): ExportAssignmentSyntax {\n        return this.update(this.exportKeyword, equalsToken, this.identifier, this.semicolonToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): ExportAssignmentSyntax {\n        return this.update(this.exportKeyword, this.equalsToken, identifier, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ExportAssignmentSyntax {\n        return this.update(this.exportKeyword, this.equalsToken, this.identifier, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ClassDeclarationSyntax extends SyntaxNode implements IModuleElementSyntax {\n\n    constructor(public modifiers: ISyntaxList,\n                public classKeyword: ISyntaxToken,\n                public identifier: ISyntaxToken,\n                public typeParameterList: TypeParameterListSyntax,\n                public heritageClauses: ISyntaxList,\n                public openBraceToken: ISyntaxToken,\n                public classElements: ISyntaxList,\n                public closeBraceToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitClassDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ClassDeclaration;\n    }\n\n    public childCount(): number {\n        return 8;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.classKeyword;\n            case 2: return this.identifier;\n            case 3: return this.typeParameterList;\n            case 4: return this.heritageClauses;\n            case 5: return this.openBraceToken;\n            case 6: return this.classElements;\n            case 7: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  classKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  typeParameterList: TypeParameterListSyntax,\n                  heritageClauses: ISyntaxList,\n                  openBraceToken: ISyntaxToken,\n                  classElements: ISyntaxList,\n                  closeBraceToken: ISyntaxToken): ClassDeclarationSyntax {\n        if (this.modifiers === modifiers && this.classKeyword === classKeyword && this.identifier === identifier && this.typeParameterList === typeParameterList && this.heritageClauses === heritageClauses && this.openBraceToken === openBraceToken && this.classElements === classElements && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new ClassDeclarationSyntax(modifiers, classKeyword, identifier, typeParameterList, heritageClauses, openBraceToken, classElements, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(classKeyword: ISyntaxToken,\n                         identifier: ISyntaxToken,\n                         openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): ClassDeclarationSyntax {\n        return new ClassDeclarationSyntax(Syntax.emptyList, classKeyword, identifier, null, Syntax.emptyList, openBraceToken, Syntax.emptyList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): ClassDeclarationSyntax {\n        return new ClassDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.ClassKeyword), identifier, null, Syntax.emptyList, Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptyList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ClassDeclarationSyntax {\n        return <ClassDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ClassDeclarationSyntax {\n        return <ClassDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): ClassDeclarationSyntax {\n        return this.update(modifiers, this.classKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.openBraceToken, this.classElements, this.closeBraceToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): ClassDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withClassKeyword(classKeyword: ISyntaxToken): ClassDeclarationSyntax {\n        return this.update(this.modifiers, classKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.openBraceToken, this.classElements, this.closeBraceToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): ClassDeclarationSyntax {\n        return this.update(this.modifiers, this.classKeyword, identifier, this.typeParameterList, this.heritageClauses, this.openBraceToken, this.classElements, this.closeBraceToken);\n    }\n\n    public withTypeParameterList(typeParameterList: TypeParameterListSyntax): ClassDeclarationSyntax {\n        return this.update(this.modifiers, this.classKeyword, this.identifier, typeParameterList, this.heritageClauses, this.openBraceToken, this.classElements, this.closeBraceToken);\n    }\n\n    public withHeritageClauses(heritageClauses: ISyntaxList): ClassDeclarationSyntax {\n        return this.update(this.modifiers, this.classKeyword, this.identifier, this.typeParameterList, heritageClauses, this.openBraceToken, this.classElements, this.closeBraceToken);\n    }\n\n    public withHeritageClause(heritageClause: HeritageClauseSyntax): ClassDeclarationSyntax {\n        return this.withHeritageClauses(Syntax.list([heritageClause]));\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): ClassDeclarationSyntax {\n        return this.update(this.modifiers, this.classKeyword, this.identifier, this.typeParameterList, this.heritageClauses, openBraceToken, this.classElements, this.closeBraceToken);\n    }\n\n    public withClassElements(classElements: ISyntaxList): ClassDeclarationSyntax {\n        return this.update(this.modifiers, this.classKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.openBraceToken, classElements, this.closeBraceToken);\n    }\n\n    public withClassElement(classElement: IClassElementSyntax): ClassDeclarationSyntax {\n        return this.withClassElements(Syntax.list([classElement]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): ClassDeclarationSyntax {\n        return this.update(this.modifiers, this.classKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.openBraceToken, this.classElements, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class InterfaceDeclarationSyntax extends SyntaxNode implements IModuleElementSyntax {\n\n    constructor(public modifiers: ISyntaxList,\n                public interfaceKeyword: ISyntaxToken,\n                public identifier: ISyntaxToken,\n                public typeParameterList: TypeParameterListSyntax,\n                public heritageClauses: ISyntaxList,\n                public body: ObjectTypeSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitInterfaceDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.InterfaceDeclaration;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.interfaceKeyword;\n            case 2: return this.identifier;\n            case 3: return this.typeParameterList;\n            case 4: return this.heritageClauses;\n            case 5: return this.body;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  interfaceKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  typeParameterList: TypeParameterListSyntax,\n                  heritageClauses: ISyntaxList,\n                  body: ObjectTypeSyntax): InterfaceDeclarationSyntax {\n        if (this.modifiers === modifiers && this.interfaceKeyword === interfaceKeyword && this.identifier === identifier && this.typeParameterList === typeParameterList && this.heritageClauses === heritageClauses && this.body === body) {\n            return this;\n        }\n\n        return new InterfaceDeclarationSyntax(modifiers, interfaceKeyword, identifier, typeParameterList, heritageClauses, body, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(interfaceKeyword: ISyntaxToken,\n                         identifier: ISyntaxToken,\n                         body: ObjectTypeSyntax): InterfaceDeclarationSyntax {\n        return new InterfaceDeclarationSyntax(Syntax.emptyList, interfaceKeyword, identifier, null, Syntax.emptyList, body, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): InterfaceDeclarationSyntax {\n        return new InterfaceDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.InterfaceKeyword), identifier, null, Syntax.emptyList, ObjectTypeSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): InterfaceDeclarationSyntax {\n        return <InterfaceDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): InterfaceDeclarationSyntax {\n        return <InterfaceDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): InterfaceDeclarationSyntax {\n        return this.update(modifiers, this.interfaceKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.body);\n    }\n\n    public withModifier(modifier: ISyntaxToken): InterfaceDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withInterfaceKeyword(interfaceKeyword: ISyntaxToken): InterfaceDeclarationSyntax {\n        return this.update(this.modifiers, interfaceKeyword, this.identifier, this.typeParameterList, this.heritageClauses, this.body);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): InterfaceDeclarationSyntax {\n        return this.update(this.modifiers, this.interfaceKeyword, identifier, this.typeParameterList, this.heritageClauses, this.body);\n    }\n\n    public withTypeParameterList(typeParameterList: TypeParameterListSyntax): InterfaceDeclarationSyntax {\n        return this.update(this.modifiers, this.interfaceKeyword, this.identifier, typeParameterList, this.heritageClauses, this.body);\n    }\n\n    public withHeritageClauses(heritageClauses: ISyntaxList): InterfaceDeclarationSyntax {\n        return this.update(this.modifiers, this.interfaceKeyword, this.identifier, this.typeParameterList, heritageClauses, this.body);\n    }\n\n    public withHeritageClause(heritageClause: HeritageClauseSyntax): InterfaceDeclarationSyntax {\n        return this.withHeritageClauses(Syntax.list([heritageClause]));\n    }\n\n    public withBody(body: ObjectTypeSyntax): InterfaceDeclarationSyntax {\n        return this.update(this.modifiers, this.interfaceKeyword, this.identifier, this.typeParameterList, this.heritageClauses, body);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class HeritageClauseSyntax extends SyntaxNode {\n\n    constructor(public extendsOrImplementsKeyword: ISyntaxToken,\n                public typeNames: ISeparatedSyntaxList,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitHeritageClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.HeritageClause;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.extendsOrImplementsKeyword;\n            case 1: return this.typeNames;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(extendsOrImplementsKeyword: ISyntaxToken,\n                  typeNames: ISeparatedSyntaxList): HeritageClauseSyntax {\n        if (this.extendsOrImplementsKeyword === extendsOrImplementsKeyword && this.typeNames === typeNames) {\n            return this;\n        }\n\n        return new HeritageClauseSyntax(extendsOrImplementsKeyword, typeNames, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): HeritageClauseSyntax {\n        return <HeritageClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): HeritageClauseSyntax {\n        return <HeritageClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExtendsOrImplementsKeyword(extendsOrImplementsKeyword: ISyntaxToken): HeritageClauseSyntax {\n        return this.update(extendsOrImplementsKeyword, this.typeNames);\n    }\n\n    public withTypeNames(typeNames: ISeparatedSyntaxList): HeritageClauseSyntax {\n        return this.update(this.extendsOrImplementsKeyword, typeNames);\n    }\n\n    public withTypeName(typeName: INameSyntax): HeritageClauseSyntax {\n        return this.withTypeNames(Syntax.separatedList([typeName]));\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ModuleDeclarationSyntax extends SyntaxNode implements IModuleElementSyntax {\n\n    constructor(public modifiers: ISyntaxList,\n                public moduleKeyword: ISyntaxToken,\n                public moduleName: INameSyntax,\n                public stringLiteral: ISyntaxToken,\n                public openBraceToken: ISyntaxToken,\n                public moduleElements: ISyntaxList,\n                public closeBraceToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitModuleDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ModuleDeclaration;\n    }\n\n    public childCount(): number {\n        return 7;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.moduleKeyword;\n            case 2: return this.moduleName;\n            case 3: return this.stringLiteral;\n            case 4: return this.openBraceToken;\n            case 5: return this.moduleElements;\n            case 6: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  moduleKeyword: ISyntaxToken,\n                  moduleName: INameSyntax,\n                  stringLiteral: ISyntaxToken,\n                  openBraceToken: ISyntaxToken,\n                  moduleElements: ISyntaxList,\n                  closeBraceToken: ISyntaxToken): ModuleDeclarationSyntax {\n        if (this.modifiers === modifiers && this.moduleKeyword === moduleKeyword && this.moduleName === moduleName && this.stringLiteral === stringLiteral && this.openBraceToken === openBraceToken && this.moduleElements === moduleElements && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new ModuleDeclarationSyntax(modifiers, moduleKeyword, moduleName, stringLiteral, openBraceToken, moduleElements, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(moduleKeyword: ISyntaxToken,\n                         openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): ModuleDeclarationSyntax {\n        return new ModuleDeclarationSyntax(Syntax.emptyList, moduleKeyword, null, null, openBraceToken, Syntax.emptyList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ModuleDeclarationSyntax {\n        return new ModuleDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.ModuleKeyword), null, null, Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptyList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ModuleDeclarationSyntax {\n        return <ModuleDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ModuleDeclarationSyntax {\n        return <ModuleDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): ModuleDeclarationSyntax {\n        return this.update(modifiers, this.moduleKeyword, this.moduleName, this.stringLiteral, this.openBraceToken, this.moduleElements, this.closeBraceToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): ModuleDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withModuleKeyword(moduleKeyword: ISyntaxToken): ModuleDeclarationSyntax {\n        return this.update(this.modifiers, moduleKeyword, this.moduleName, this.stringLiteral, this.openBraceToken, this.moduleElements, this.closeBraceToken);\n    }\n\n    public withModuleName(moduleName: INameSyntax): ModuleDeclarationSyntax {\n        return this.update(this.modifiers, this.moduleKeyword, moduleName, this.stringLiteral, this.openBraceToken, this.moduleElements, this.closeBraceToken);\n    }\n\n    public withStringLiteral(stringLiteral: ISyntaxToken): ModuleDeclarationSyntax {\n        return this.update(this.modifiers, this.moduleKeyword, this.moduleName, stringLiteral, this.openBraceToken, this.moduleElements, this.closeBraceToken);\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): ModuleDeclarationSyntax {\n        return this.update(this.modifiers, this.moduleKeyword, this.moduleName, this.stringLiteral, openBraceToken, this.moduleElements, this.closeBraceToken);\n    }\n\n    public withModuleElements(moduleElements: ISyntaxList): ModuleDeclarationSyntax {\n        return this.update(this.modifiers, this.moduleKeyword, this.moduleName, this.stringLiteral, this.openBraceToken, moduleElements, this.closeBraceToken);\n    }\n\n    public withModuleElement(moduleElement: IModuleElementSyntax): ModuleDeclarationSyntax {\n        return this.withModuleElements(Syntax.list([moduleElement]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): ModuleDeclarationSyntax {\n        return this.update(this.modifiers, this.moduleKeyword, this.moduleName, this.stringLiteral, this.openBraceToken, this.moduleElements, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class FunctionDeclarationSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public modifiers: ISyntaxList,\n                public functionKeyword: ISyntaxToken,\n                public identifier: ISyntaxToken,\n                public callSignature: CallSignatureSyntax,\n                public block: BlockSyntax,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitFunctionDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.FunctionDeclaration;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.functionKeyword;\n            case 2: return this.identifier;\n            case 3: return this.callSignature;\n            case 4: return this.block;\n            case 5: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  functionKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  callSignature: CallSignatureSyntax,\n                  block: BlockSyntax,\n                  semicolonToken: ISyntaxToken): FunctionDeclarationSyntax {\n        if (this.modifiers === modifiers && this.functionKeyword === functionKeyword && this.identifier === identifier && this.callSignature === callSignature && this.block === block && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new FunctionDeclarationSyntax(modifiers, functionKeyword, identifier, callSignature, block, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(functionKeyword: ISyntaxToken,\n                         identifier: ISyntaxToken,\n                         callSignature: CallSignatureSyntax): FunctionDeclarationSyntax {\n        return new FunctionDeclarationSyntax(Syntax.emptyList, functionKeyword, identifier, callSignature, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): FunctionDeclarationSyntax {\n        return new FunctionDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.FunctionKeyword), identifier, CallSignatureSyntax.create1(), null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): FunctionDeclarationSyntax {\n        return <FunctionDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): FunctionDeclarationSyntax {\n        return <FunctionDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): FunctionDeclarationSyntax {\n        return this.update(modifiers, this.functionKeyword, this.identifier, this.callSignature, this.block, this.semicolonToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): FunctionDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withFunctionKeyword(functionKeyword: ISyntaxToken): FunctionDeclarationSyntax {\n        return this.update(this.modifiers, functionKeyword, this.identifier, this.callSignature, this.block, this.semicolonToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): FunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.functionKeyword, identifier, this.callSignature, this.block, this.semicolonToken);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): FunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.functionKeyword, this.identifier, callSignature, this.block, this.semicolonToken);\n    }\n\n    public withBlock(block: BlockSyntax): FunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.functionKeyword, this.identifier, this.callSignature, block, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): FunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.functionKeyword, this.identifier, this.callSignature, this.block, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.modifiers.isTypeScriptSpecific()) { return true; }\n        if (this.callSignature.isTypeScriptSpecific()) { return true; }\n        if (this.block !== null && this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class VariableStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public modifiers: ISyntaxList,\n                public variableDeclaration: VariableDeclarationSyntax,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitVariableStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.VariableStatement;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.variableDeclaration;\n            case 2: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  variableDeclaration: VariableDeclarationSyntax,\n                  semicolonToken: ISyntaxToken): VariableStatementSyntax {\n        if (this.modifiers === modifiers && this.variableDeclaration === variableDeclaration && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new VariableStatementSyntax(modifiers, variableDeclaration, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(variableDeclaration: VariableDeclarationSyntax,\n                         semicolonToken: ISyntaxToken): VariableStatementSyntax {\n        return new VariableStatementSyntax(Syntax.emptyList, variableDeclaration, semicolonToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(variableDeclaration: VariableDeclarationSyntax): VariableStatementSyntax {\n        return new VariableStatementSyntax(Syntax.emptyList, variableDeclaration, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): VariableStatementSyntax {\n        return <VariableStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): VariableStatementSyntax {\n        return <VariableStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): VariableStatementSyntax {\n        return this.update(modifiers, this.variableDeclaration, this.semicolonToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): VariableStatementSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withVariableDeclaration(variableDeclaration: VariableDeclarationSyntax): VariableStatementSyntax {\n        return this.update(this.modifiers, variableDeclaration, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): VariableStatementSyntax {\n        return this.update(this.modifiers, this.variableDeclaration, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.modifiers.isTypeScriptSpecific()) { return true; }\n        if (this.variableDeclaration.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class VariableDeclarationSyntax extends SyntaxNode {\n\n    constructor(public varKeyword: ISyntaxToken,\n                public variableDeclarators: ISeparatedSyntaxList,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitVariableDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.VariableDeclaration;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.varKeyword;\n            case 1: return this.variableDeclarators;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(varKeyword: ISyntaxToken,\n                  variableDeclarators: ISeparatedSyntaxList): VariableDeclarationSyntax {\n        if (this.varKeyword === varKeyword && this.variableDeclarators === variableDeclarators) {\n            return this;\n        }\n\n        return new VariableDeclarationSyntax(varKeyword, variableDeclarators, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(variableDeclarators: ISeparatedSyntaxList): VariableDeclarationSyntax {\n        return new VariableDeclarationSyntax(Syntax.token(SyntaxKind.VarKeyword), variableDeclarators, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): VariableDeclarationSyntax {\n        return <VariableDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): VariableDeclarationSyntax {\n        return <VariableDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withVarKeyword(varKeyword: ISyntaxToken): VariableDeclarationSyntax {\n        return this.update(varKeyword, this.variableDeclarators);\n    }\n\n    public withVariableDeclarators(variableDeclarators: ISeparatedSyntaxList): VariableDeclarationSyntax {\n        return this.update(this.varKeyword, variableDeclarators);\n    }\n\n    public withVariableDeclarator(variableDeclarator: VariableDeclaratorSyntax): VariableDeclarationSyntax {\n        return this.withVariableDeclarators(Syntax.separatedList([variableDeclarator]));\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.variableDeclarators.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class VariableDeclaratorSyntax extends SyntaxNode {\n\n    constructor(public identifier: ISyntaxToken,\n                public typeAnnotation: TypeAnnotationSyntax,\n                public equalsValueClause: EqualsValueClauseSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitVariableDeclarator(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.VariableDeclarator;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.identifier;\n            case 1: return this.typeAnnotation;\n            case 2: return this.equalsValueClause;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(identifier: ISyntaxToken,\n                  typeAnnotation: TypeAnnotationSyntax,\n                  equalsValueClause: EqualsValueClauseSyntax): VariableDeclaratorSyntax {\n        if (this.identifier === identifier && this.typeAnnotation === typeAnnotation && this.equalsValueClause === equalsValueClause) {\n            return this;\n        }\n\n        return new VariableDeclaratorSyntax(identifier, typeAnnotation, equalsValueClause, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(identifier: ISyntaxToken): VariableDeclaratorSyntax {\n        return new VariableDeclaratorSyntax(identifier, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): VariableDeclaratorSyntax {\n        return new VariableDeclaratorSyntax(identifier, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): VariableDeclaratorSyntax {\n        return <VariableDeclaratorSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): VariableDeclaratorSyntax {\n        return <VariableDeclaratorSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): VariableDeclaratorSyntax {\n        return this.update(identifier, this.typeAnnotation, this.equalsValueClause);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): VariableDeclaratorSyntax {\n        return this.update(this.identifier, typeAnnotation, this.equalsValueClause);\n    }\n\n    public withEqualsValueClause(equalsValueClause: EqualsValueClauseSyntax): VariableDeclaratorSyntax {\n        return this.update(this.identifier, this.typeAnnotation, equalsValueClause);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.typeAnnotation !== null) { return true; }\n        if (this.equalsValueClause !== null && this.equalsValueClause.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class EqualsValueClauseSyntax extends SyntaxNode {\n\n    constructor(public equalsToken: ISyntaxToken,\n                public value: IExpressionSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitEqualsValueClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.EqualsValueClause;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.equalsToken;\n            case 1: return this.value;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(equalsToken: ISyntaxToken,\n                  value: IExpressionSyntax): EqualsValueClauseSyntax {\n        if (this.equalsToken === equalsToken && this.value === value) {\n            return this;\n        }\n\n        return new EqualsValueClauseSyntax(equalsToken, value, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(value: IExpressionSyntax): EqualsValueClauseSyntax {\n        return new EqualsValueClauseSyntax(Syntax.token(SyntaxKind.EqualsToken), value, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): EqualsValueClauseSyntax {\n        return <EqualsValueClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): EqualsValueClauseSyntax {\n        return <EqualsValueClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withEqualsToken(equalsToken: ISyntaxToken): EqualsValueClauseSyntax {\n        return this.update(equalsToken, this.value);\n    }\n\n    public withValue(value: IExpressionSyntax): EqualsValueClauseSyntax {\n        return this.update(this.equalsToken, value);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.value.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class PrefixUnaryExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n    private _kind: SyntaxKind;\n\n    constructor(kind: SyntaxKind,\n                public operatorToken: ISyntaxToken,\n                public operand: IUnaryExpressionSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n        this._kind = kind;\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitPrefixUnaryExpression(this);\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.operatorToken;\n            case 1: return this.operand;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public kind(): SyntaxKind {\n        return this._kind;\n    }\n\n    public update(kind: SyntaxKind,\n                  operatorToken: ISyntaxToken,\n                  operand: IUnaryExpressionSyntax): PrefixUnaryExpressionSyntax {\n        if (this._kind === kind && this.operatorToken === operatorToken && this.operand === operand) {\n            return this;\n        }\n\n        return new PrefixUnaryExpressionSyntax(kind, operatorToken, operand, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): PrefixUnaryExpressionSyntax {\n        return <PrefixUnaryExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): PrefixUnaryExpressionSyntax {\n        return <PrefixUnaryExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withKind(kind: SyntaxKind): PrefixUnaryExpressionSyntax {\n        return this.update(kind, this.operatorToken, this.operand);\n    }\n\n    public withOperatorToken(operatorToken: ISyntaxToken): PrefixUnaryExpressionSyntax {\n        return this.update(this._kind, operatorToken, this.operand);\n    }\n\n    public withOperand(operand: IUnaryExpressionSyntax): PrefixUnaryExpressionSyntax {\n        return this.update(this._kind, this.operatorToken, operand);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.operand.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ArrayLiteralExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n    constructor(public openBracketToken: ISyntaxToken,\n                public expressions: ISeparatedSyntaxList,\n                public closeBracketToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitArrayLiteralExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ArrayLiteralExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openBracketToken;\n            case 1: return this.expressions;\n            case 2: return this.closeBracketToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(openBracketToken: ISyntaxToken,\n                  expressions: ISeparatedSyntaxList,\n                  closeBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax {\n        if (this.openBracketToken === openBracketToken && this.expressions === expressions && this.closeBracketToken === closeBracketToken) {\n            return this;\n        }\n\n        return new ArrayLiteralExpressionSyntax(openBracketToken, expressions, closeBracketToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openBracketToken: ISyntaxToken,\n                         closeBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax {\n        return new ArrayLiteralExpressionSyntax(openBracketToken, Syntax.emptySeparatedList, closeBracketToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ArrayLiteralExpressionSyntax {\n        return new ArrayLiteralExpressionSyntax(Syntax.token(SyntaxKind.OpenBracketToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.CloseBracketToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ArrayLiteralExpressionSyntax {\n        return <ArrayLiteralExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ArrayLiteralExpressionSyntax {\n        return <ArrayLiteralExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenBracketToken(openBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax {\n        return this.update(openBracketToken, this.expressions, this.closeBracketToken);\n    }\n\n    public withExpressions(expressions: ISeparatedSyntaxList): ArrayLiteralExpressionSyntax {\n        return this.update(this.openBracketToken, expressions, this.closeBracketToken);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ArrayLiteralExpressionSyntax {\n        return this.withExpressions(Syntax.separatedList([expression]));\n    }\n\n    public withCloseBracketToken(closeBracketToken: ISyntaxToken): ArrayLiteralExpressionSyntax {\n        return this.update(this.openBracketToken, this.expressions, closeBracketToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expressions.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class OmittedExpressionSyntax extends SyntaxNode implements IExpressionSyntax {\n    constructor(parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitOmittedExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.OmittedExpression;\n    }\n\n    public childCount(): number {\n        return 0;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        throw Errors.invalidOperation();\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(): OmittedExpressionSyntax {\n        return this;\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): OmittedExpressionSyntax {\n        return <OmittedExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): OmittedExpressionSyntax {\n        return <OmittedExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return false;\n    }\n    }\n\n    export class ParenthesizedExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n    constructor(public openParenToken: ISyntaxToken,\n                public expression: IExpressionSyntax,\n                public closeParenToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitParenthesizedExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ParenthesizedExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openParenToken;\n            case 1: return this.expression;\n            case 2: return this.closeParenToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(openParenToken: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken): ParenthesizedExpressionSyntax {\n        if (this.openParenToken === openParenToken && this.expression === expression && this.closeParenToken === closeParenToken) {\n            return this;\n        }\n\n        return new ParenthesizedExpressionSyntax(openParenToken, expression, closeParenToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): ParenthesizedExpressionSyntax {\n        return new ParenthesizedExpressionSyntax(Syntax.token(SyntaxKind.OpenParenToken), expression, Syntax.token(SyntaxKind.CloseParenToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ParenthesizedExpressionSyntax {\n        return <ParenthesizedExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ParenthesizedExpressionSyntax {\n        return <ParenthesizedExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): ParenthesizedExpressionSyntax {\n        return this.update(openParenToken, this.expression, this.closeParenToken);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ParenthesizedExpressionSyntax {\n        return this.update(this.openParenToken, expression, this.closeParenToken);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): ParenthesizedExpressionSyntax {\n        return this.update(this.openParenToken, this.expression, closeParenToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ArrowFunctionExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n    constructor(public equalsGreaterThanToken: ISyntaxToken,\n                public body: ISyntaxNodeOrToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ArrowFunctionExpressionSyntax {\n        return <ArrowFunctionExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ArrowFunctionExpressionSyntax {\n        return <ArrowFunctionExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class SimpleArrowFunctionExpressionSyntax extends ArrowFunctionExpressionSyntax {\n\n    constructor(public identifier: ISyntaxToken,\n                equalsGreaterThanToken: ISyntaxToken,\n                body: ISyntaxNodeOrToken,\n                parsedInStrictMode: bool) {\n        super(equalsGreaterThanToken, body, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitSimpleArrowFunctionExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.SimpleArrowFunctionExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.identifier;\n            case 1: return this.equalsGreaterThanToken;\n            case 2: return this.body;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(identifier: ISyntaxToken,\n                  equalsGreaterThanToken: ISyntaxToken,\n                  body: ISyntaxNodeOrToken): SimpleArrowFunctionExpressionSyntax {\n        if (this.identifier === identifier && this.equalsGreaterThanToken === equalsGreaterThanToken && this.body === body) {\n            return this;\n        }\n\n        return new SimpleArrowFunctionExpressionSyntax(identifier, equalsGreaterThanToken, body, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(identifier: ISyntaxToken,\n                          body: ISyntaxNodeOrToken): SimpleArrowFunctionExpressionSyntax {\n        return new SimpleArrowFunctionExpressionSyntax(identifier, Syntax.token(SyntaxKind.EqualsGreaterThanToken), body, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SimpleArrowFunctionExpressionSyntax {\n        return <SimpleArrowFunctionExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SimpleArrowFunctionExpressionSyntax {\n        return <SimpleArrowFunctionExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): SimpleArrowFunctionExpressionSyntax {\n        return this.update(identifier, this.equalsGreaterThanToken, this.body);\n    }\n\n    public withEqualsGreaterThanToken(equalsGreaterThanToken: ISyntaxToken): SimpleArrowFunctionExpressionSyntax {\n        return this.update(this.identifier, equalsGreaterThanToken, this.body);\n    }\n\n    public withBody(body: ISyntaxNodeOrToken): SimpleArrowFunctionExpressionSyntax {\n        return this.update(this.identifier, this.equalsGreaterThanToken, body);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ParenthesizedArrowFunctionExpressionSyntax extends ArrowFunctionExpressionSyntax {\n\n    constructor(public callSignature: CallSignatureSyntax,\n                equalsGreaterThanToken: ISyntaxToken,\n                body: ISyntaxNodeOrToken,\n                parsedInStrictMode: bool) {\n        super(equalsGreaterThanToken, body, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitParenthesizedArrowFunctionExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ParenthesizedArrowFunctionExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.callSignature;\n            case 1: return this.equalsGreaterThanToken;\n            case 2: return this.body;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(callSignature: CallSignatureSyntax,\n                  equalsGreaterThanToken: ISyntaxToken,\n                  body: ISyntaxNodeOrToken): ParenthesizedArrowFunctionExpressionSyntax {\n        if (this.callSignature === callSignature && this.equalsGreaterThanToken === equalsGreaterThanToken && this.body === body) {\n            return this;\n        }\n\n        return new ParenthesizedArrowFunctionExpressionSyntax(callSignature, equalsGreaterThanToken, body, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(body: ISyntaxNodeOrToken): ParenthesizedArrowFunctionExpressionSyntax {\n        return new ParenthesizedArrowFunctionExpressionSyntax(CallSignatureSyntax.create1(), Syntax.token(SyntaxKind.EqualsGreaterThanToken), body, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ParenthesizedArrowFunctionExpressionSyntax {\n        return <ParenthesizedArrowFunctionExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ParenthesizedArrowFunctionExpressionSyntax {\n        return <ParenthesizedArrowFunctionExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): ParenthesizedArrowFunctionExpressionSyntax {\n        return this.update(callSignature, this.equalsGreaterThanToken, this.body);\n    }\n\n    public withEqualsGreaterThanToken(equalsGreaterThanToken: ISyntaxToken): ParenthesizedArrowFunctionExpressionSyntax {\n        return this.update(this.callSignature, equalsGreaterThanToken, this.body);\n    }\n\n    public withBody(body: ISyntaxNodeOrToken): ParenthesizedArrowFunctionExpressionSyntax {\n        return this.update(this.callSignature, this.equalsGreaterThanToken, body);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class QualifiedNameSyntax extends SyntaxNode implements INameSyntax {\n\n    constructor(public left: INameSyntax,\n                public dotToken: ISyntaxToken,\n                public right: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitQualifiedName(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.QualifiedName;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.left;\n            case 1: return this.dotToken;\n            case 2: return this.right;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isName(): bool {\n        return true;\n    }\n\n    private isType(): bool {\n        return true;\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(left: INameSyntax,\n                  dotToken: ISyntaxToken,\n                  right: ISyntaxToken): QualifiedNameSyntax {\n        if (this.left === left && this.dotToken === dotToken && this.right === right) {\n            return this;\n        }\n\n        return new QualifiedNameSyntax(left, dotToken, right, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(left: INameSyntax,\n                          right: ISyntaxToken): QualifiedNameSyntax {\n        return new QualifiedNameSyntax(left, Syntax.token(SyntaxKind.DotToken), right, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): QualifiedNameSyntax {\n        return <QualifiedNameSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): QualifiedNameSyntax {\n        return <QualifiedNameSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withLeft(left: INameSyntax): QualifiedNameSyntax {\n        return this.update(left, this.dotToken, this.right);\n    }\n\n    public withDotToken(dotToken: ISyntaxToken): QualifiedNameSyntax {\n        return this.update(this.left, dotToken, this.right);\n    }\n\n    public withRight(right: ISyntaxToken): QualifiedNameSyntax {\n        return this.update(this.left, this.dotToken, right);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class TypeArgumentListSyntax extends SyntaxNode {\n\n    constructor(public lessThanToken: ISyntaxToken,\n                public typeArguments: ISeparatedSyntaxList,\n                public greaterThanToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitTypeArgumentList(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.TypeArgumentList;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.lessThanToken;\n            case 1: return this.typeArguments;\n            case 2: return this.greaterThanToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(lessThanToken: ISyntaxToken,\n                  typeArguments: ISeparatedSyntaxList,\n                  greaterThanToken: ISyntaxToken): TypeArgumentListSyntax {\n        if (this.lessThanToken === lessThanToken && this.typeArguments === typeArguments && this.greaterThanToken === greaterThanToken) {\n            return this;\n        }\n\n        return new TypeArgumentListSyntax(lessThanToken, typeArguments, greaterThanToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(lessThanToken: ISyntaxToken,\n                         greaterThanToken: ISyntaxToken): TypeArgumentListSyntax {\n        return new TypeArgumentListSyntax(lessThanToken, Syntax.emptySeparatedList, greaterThanToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): TypeArgumentListSyntax {\n        return new TypeArgumentListSyntax(Syntax.token(SyntaxKind.LessThanToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.GreaterThanToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): TypeArgumentListSyntax {\n        return <TypeArgumentListSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): TypeArgumentListSyntax {\n        return <TypeArgumentListSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withLessThanToken(lessThanToken: ISyntaxToken): TypeArgumentListSyntax {\n        return this.update(lessThanToken, this.typeArguments, this.greaterThanToken);\n    }\n\n    public withTypeArguments(typeArguments: ISeparatedSyntaxList): TypeArgumentListSyntax {\n        return this.update(this.lessThanToken, typeArguments, this.greaterThanToken);\n    }\n\n    public withTypeArgument(typeArgument: ITypeSyntax): TypeArgumentListSyntax {\n        return this.withTypeArguments(Syntax.separatedList([typeArgument]));\n    }\n\n    public withGreaterThanToken(greaterThanToken: ISyntaxToken): TypeArgumentListSyntax {\n        return this.update(this.lessThanToken, this.typeArguments, greaterThanToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ConstructorTypeSyntax extends SyntaxNode implements ITypeSyntax {\n\n    constructor(public newKeyword: ISyntaxToken,\n                public typeParameterList: TypeParameterListSyntax,\n                public parameterList: ParameterListSyntax,\n                public equalsGreaterThanToken: ISyntaxToken,\n                public type: ITypeSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitConstructorType(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ConstructorType;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.newKeyword;\n            case 1: return this.typeParameterList;\n            case 2: return this.parameterList;\n            case 3: return this.equalsGreaterThanToken;\n            case 4: return this.type;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isType(): bool {\n        return true;\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(newKeyword: ISyntaxToken,\n                  typeParameterList: TypeParameterListSyntax,\n                  parameterList: ParameterListSyntax,\n                  equalsGreaterThanToken: ISyntaxToken,\n                  type: ITypeSyntax): ConstructorTypeSyntax {\n        if (this.newKeyword === newKeyword && this.typeParameterList === typeParameterList && this.parameterList === parameterList && this.equalsGreaterThanToken === equalsGreaterThanToken && this.type === type) {\n            return this;\n        }\n\n        return new ConstructorTypeSyntax(newKeyword, typeParameterList, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(newKeyword: ISyntaxToken,\n                         parameterList: ParameterListSyntax,\n                         equalsGreaterThanToken: ISyntaxToken,\n                         type: ITypeSyntax): ConstructorTypeSyntax {\n        return new ConstructorTypeSyntax(newKeyword, null, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(type: ITypeSyntax): ConstructorTypeSyntax {\n        return new ConstructorTypeSyntax(Syntax.token(SyntaxKind.NewKeyword), null, ParameterListSyntax.create1(), Syntax.token(SyntaxKind.EqualsGreaterThanToken), type, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ConstructorTypeSyntax {\n        return <ConstructorTypeSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ConstructorTypeSyntax {\n        return <ConstructorTypeSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withNewKeyword(newKeyword: ISyntaxToken): ConstructorTypeSyntax {\n        return this.update(newKeyword, this.typeParameterList, this.parameterList, this.equalsGreaterThanToken, this.type);\n    }\n\n    public withTypeParameterList(typeParameterList: TypeParameterListSyntax): ConstructorTypeSyntax {\n        return this.update(this.newKeyword, typeParameterList, this.parameterList, this.equalsGreaterThanToken, this.type);\n    }\n\n    public withParameterList(parameterList: ParameterListSyntax): ConstructorTypeSyntax {\n        return this.update(this.newKeyword, this.typeParameterList, parameterList, this.equalsGreaterThanToken, this.type);\n    }\n\n    public withEqualsGreaterThanToken(equalsGreaterThanToken: ISyntaxToken): ConstructorTypeSyntax {\n        return this.update(this.newKeyword, this.typeParameterList, this.parameterList, equalsGreaterThanToken, this.type);\n    }\n\n    public withType(type: ITypeSyntax): ConstructorTypeSyntax {\n        return this.update(this.newKeyword, this.typeParameterList, this.parameterList, this.equalsGreaterThanToken, type);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class FunctionTypeSyntax extends SyntaxNode implements ITypeSyntax {\n\n    constructor(public typeParameterList: TypeParameterListSyntax,\n                public parameterList: ParameterListSyntax,\n                public equalsGreaterThanToken: ISyntaxToken,\n                public type: ITypeSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitFunctionType(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.FunctionType;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.typeParameterList;\n            case 1: return this.parameterList;\n            case 2: return this.equalsGreaterThanToken;\n            case 3: return this.type;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isType(): bool {\n        return true;\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(typeParameterList: TypeParameterListSyntax,\n                  parameterList: ParameterListSyntax,\n                  equalsGreaterThanToken: ISyntaxToken,\n                  type: ITypeSyntax): FunctionTypeSyntax {\n        if (this.typeParameterList === typeParameterList && this.parameterList === parameterList && this.equalsGreaterThanToken === equalsGreaterThanToken && this.type === type) {\n            return this;\n        }\n\n        return new FunctionTypeSyntax(typeParameterList, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(parameterList: ParameterListSyntax,\n                         equalsGreaterThanToken: ISyntaxToken,\n                         type: ITypeSyntax): FunctionTypeSyntax {\n        return new FunctionTypeSyntax(null, parameterList, equalsGreaterThanToken, type, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(type: ITypeSyntax): FunctionTypeSyntax {\n        return new FunctionTypeSyntax(null, ParameterListSyntax.create1(), Syntax.token(SyntaxKind.EqualsGreaterThanToken), type, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): FunctionTypeSyntax {\n        return <FunctionTypeSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): FunctionTypeSyntax {\n        return <FunctionTypeSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withTypeParameterList(typeParameterList: TypeParameterListSyntax): FunctionTypeSyntax {\n        return this.update(typeParameterList, this.parameterList, this.equalsGreaterThanToken, this.type);\n    }\n\n    public withParameterList(parameterList: ParameterListSyntax): FunctionTypeSyntax {\n        return this.update(this.typeParameterList, parameterList, this.equalsGreaterThanToken, this.type);\n    }\n\n    public withEqualsGreaterThanToken(equalsGreaterThanToken: ISyntaxToken): FunctionTypeSyntax {\n        return this.update(this.typeParameterList, this.parameterList, equalsGreaterThanToken, this.type);\n    }\n\n    public withType(type: ITypeSyntax): FunctionTypeSyntax {\n        return this.update(this.typeParameterList, this.parameterList, this.equalsGreaterThanToken, type);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ObjectTypeSyntax extends SyntaxNode implements ITypeSyntax {\n\n    constructor(public openBraceToken: ISyntaxToken,\n                public typeMembers: ISeparatedSyntaxList,\n                public closeBraceToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitObjectType(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ObjectType;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openBraceToken;\n            case 1: return this.typeMembers;\n            case 2: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isType(): bool {\n        return true;\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(openBraceToken: ISyntaxToken,\n                  typeMembers: ISeparatedSyntaxList,\n                  closeBraceToken: ISyntaxToken): ObjectTypeSyntax {\n        if (this.openBraceToken === openBraceToken && this.typeMembers === typeMembers && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new ObjectTypeSyntax(openBraceToken, typeMembers, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): ObjectTypeSyntax {\n        return new ObjectTypeSyntax(openBraceToken, Syntax.emptySeparatedList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ObjectTypeSyntax {\n        return new ObjectTypeSyntax(Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ObjectTypeSyntax {\n        return <ObjectTypeSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ObjectTypeSyntax {\n        return <ObjectTypeSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): ObjectTypeSyntax {\n        return this.update(openBraceToken, this.typeMembers, this.closeBraceToken);\n    }\n\n    public withTypeMembers(typeMembers: ISeparatedSyntaxList): ObjectTypeSyntax {\n        return this.update(this.openBraceToken, typeMembers, this.closeBraceToken);\n    }\n\n    public withTypeMember(typeMember: ITypeMemberSyntax): ObjectTypeSyntax {\n        return this.withTypeMembers(Syntax.separatedList([typeMember]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): ObjectTypeSyntax {\n        return this.update(this.openBraceToken, this.typeMembers, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ArrayTypeSyntax extends SyntaxNode implements ITypeSyntax {\n\n    constructor(public type: ITypeSyntax,\n                public openBracketToken: ISyntaxToken,\n                public closeBracketToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitArrayType(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ArrayType;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.type;\n            case 1: return this.openBracketToken;\n            case 2: return this.closeBracketToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isType(): bool {\n        return true;\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(type: ITypeSyntax,\n                  openBracketToken: ISyntaxToken,\n                  closeBracketToken: ISyntaxToken): ArrayTypeSyntax {\n        if (this.type === type && this.openBracketToken === openBracketToken && this.closeBracketToken === closeBracketToken) {\n            return this;\n        }\n\n        return new ArrayTypeSyntax(type, openBracketToken, closeBracketToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(type: ITypeSyntax): ArrayTypeSyntax {\n        return new ArrayTypeSyntax(type, Syntax.token(SyntaxKind.OpenBracketToken), Syntax.token(SyntaxKind.CloseBracketToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ArrayTypeSyntax {\n        return <ArrayTypeSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ArrayTypeSyntax {\n        return <ArrayTypeSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withType(type: ITypeSyntax): ArrayTypeSyntax {\n        return this.update(type, this.openBracketToken, this.closeBracketToken);\n    }\n\n    public withOpenBracketToken(openBracketToken: ISyntaxToken): ArrayTypeSyntax {\n        return this.update(this.type, openBracketToken, this.closeBracketToken);\n    }\n\n    public withCloseBracketToken(closeBracketToken: ISyntaxToken): ArrayTypeSyntax {\n        return this.update(this.type, this.openBracketToken, closeBracketToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class GenericTypeSyntax extends SyntaxNode implements ITypeSyntax {\n\n    constructor(public name: INameSyntax,\n                public typeArgumentList: TypeArgumentListSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitGenericType(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.GenericType;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.name;\n            case 1: return this.typeArgumentList;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isType(): bool {\n        return true;\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(name: INameSyntax,\n                  typeArgumentList: TypeArgumentListSyntax): GenericTypeSyntax {\n        if (this.name === name && this.typeArgumentList === typeArgumentList) {\n            return this;\n        }\n\n        return new GenericTypeSyntax(name, typeArgumentList, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(name: INameSyntax): GenericTypeSyntax {\n        return new GenericTypeSyntax(name, TypeArgumentListSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): GenericTypeSyntax {\n        return <GenericTypeSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): GenericTypeSyntax {\n        return <GenericTypeSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withName(name: INameSyntax): GenericTypeSyntax {\n        return this.update(name, this.typeArgumentList);\n    }\n\n    public withTypeArgumentList(typeArgumentList: TypeArgumentListSyntax): GenericTypeSyntax {\n        return this.update(this.name, typeArgumentList);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class TypeAnnotationSyntax extends SyntaxNode {\n\n    constructor(public colonToken: ISyntaxToken,\n                public type: ITypeSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitTypeAnnotation(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.TypeAnnotation;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.colonToken;\n            case 1: return this.type;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(colonToken: ISyntaxToken,\n                  type: ITypeSyntax): TypeAnnotationSyntax {\n        if (this.colonToken === colonToken && this.type === type) {\n            return this;\n        }\n\n        return new TypeAnnotationSyntax(colonToken, type, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(type: ITypeSyntax): TypeAnnotationSyntax {\n        return new TypeAnnotationSyntax(Syntax.token(SyntaxKind.ColonToken), type, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): TypeAnnotationSyntax {\n        return <TypeAnnotationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): TypeAnnotationSyntax {\n        return <TypeAnnotationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withColonToken(colonToken: ISyntaxToken): TypeAnnotationSyntax {\n        return this.update(colonToken, this.type);\n    }\n\n    public withType(type: ITypeSyntax): TypeAnnotationSyntax {\n        return this.update(this.colonToken, type);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class BlockSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public openBraceToken: ISyntaxToken,\n                public statements: ISyntaxList,\n                public closeBraceToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitBlock(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.Block;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openBraceToken;\n            case 1: return this.statements;\n            case 2: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(openBraceToken: ISyntaxToken,\n                  statements: ISyntaxList,\n                  closeBraceToken: ISyntaxToken): BlockSyntax {\n        if (this.openBraceToken === openBraceToken && this.statements === statements && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new BlockSyntax(openBraceToken, statements, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): BlockSyntax {\n        return new BlockSyntax(openBraceToken, Syntax.emptyList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): BlockSyntax {\n        return new BlockSyntax(Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptyList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): BlockSyntax {\n        return <BlockSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): BlockSyntax {\n        return <BlockSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): BlockSyntax {\n        return this.update(openBraceToken, this.statements, this.closeBraceToken);\n    }\n\n    public withStatements(statements: ISyntaxList): BlockSyntax {\n        return this.update(this.openBraceToken, statements, this.closeBraceToken);\n    }\n\n    public withStatement(statement: IStatementSyntax): BlockSyntax {\n        return this.withStatements(Syntax.list([statement]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): BlockSyntax {\n        return this.update(this.openBraceToken, this.statements, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.statements.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ParameterSyntax extends SyntaxNode {\n\n    constructor(public dotDotDotToken: ISyntaxToken,\n                public publicOrPrivateKeyword: ISyntaxToken,\n                public identifier: ISyntaxToken,\n                public questionToken: ISyntaxToken,\n                public typeAnnotation: TypeAnnotationSyntax,\n                public equalsValueClause: EqualsValueClauseSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitParameter(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.Parameter;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.dotDotDotToken;\n            case 1: return this.publicOrPrivateKeyword;\n            case 2: return this.identifier;\n            case 3: return this.questionToken;\n            case 4: return this.typeAnnotation;\n            case 5: return this.equalsValueClause;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(dotDotDotToken: ISyntaxToken,\n                  publicOrPrivateKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  questionToken: ISyntaxToken,\n                  typeAnnotation: TypeAnnotationSyntax,\n                  equalsValueClause: EqualsValueClauseSyntax): ParameterSyntax {\n        if (this.dotDotDotToken === dotDotDotToken && this.publicOrPrivateKeyword === publicOrPrivateKeyword && this.identifier === identifier && this.questionToken === questionToken && this.typeAnnotation === typeAnnotation && this.equalsValueClause === equalsValueClause) {\n            return this;\n        }\n\n        return new ParameterSyntax(dotDotDotToken, publicOrPrivateKeyword, identifier, questionToken, typeAnnotation, equalsValueClause, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(identifier: ISyntaxToken): ParameterSyntax {\n        return new ParameterSyntax(null, null, identifier, null, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): ParameterSyntax {\n        return new ParameterSyntax(null, null, identifier, null, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ParameterSyntax {\n        return <ParameterSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ParameterSyntax {\n        return <ParameterSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withDotDotDotToken(dotDotDotToken: ISyntaxToken): ParameterSyntax {\n        return this.update(dotDotDotToken, this.publicOrPrivateKeyword, this.identifier, this.questionToken, this.typeAnnotation, this.equalsValueClause);\n    }\n\n    public withPublicOrPrivateKeyword(publicOrPrivateKeyword: ISyntaxToken): ParameterSyntax {\n        return this.update(this.dotDotDotToken, publicOrPrivateKeyword, this.identifier, this.questionToken, this.typeAnnotation, this.equalsValueClause);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): ParameterSyntax {\n        return this.update(this.dotDotDotToken, this.publicOrPrivateKeyword, identifier, this.questionToken, this.typeAnnotation, this.equalsValueClause);\n    }\n\n    public withQuestionToken(questionToken: ISyntaxToken): ParameterSyntax {\n        return this.update(this.dotDotDotToken, this.publicOrPrivateKeyword, this.identifier, questionToken, this.typeAnnotation, this.equalsValueClause);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): ParameterSyntax {\n        return this.update(this.dotDotDotToken, this.publicOrPrivateKeyword, this.identifier, this.questionToken, typeAnnotation, this.equalsValueClause);\n    }\n\n    public withEqualsValueClause(equalsValueClause: EqualsValueClauseSyntax): ParameterSyntax {\n        return this.update(this.dotDotDotToken, this.publicOrPrivateKeyword, this.identifier, this.questionToken, this.typeAnnotation, equalsValueClause);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.dotDotDotToken !== null) { return true; }\n        if (this.publicOrPrivateKeyword !== null) { return true; }\n        if (this.questionToken !== null) { return true; }\n        if (this.typeAnnotation !== null) { return true; }\n        if (this.equalsValueClause !== null) { return true; }\n        return false;\n    }\n    }\n\n    export class MemberAccessExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n    constructor(public expression: IExpressionSyntax,\n                public dotToken: ISyntaxToken,\n                public name: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitMemberAccessExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.MemberAccessExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.expression;\n            case 1: return this.dotToken;\n            case 2: return this.name;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(expression: IExpressionSyntax,\n                  dotToken: ISyntaxToken,\n                  name: ISyntaxToken): MemberAccessExpressionSyntax {\n        if (this.expression === expression && this.dotToken === dotToken && this.name === name) {\n            return this;\n        }\n\n        return new MemberAccessExpressionSyntax(expression, dotToken, name, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax,\n                          name: ISyntaxToken): MemberAccessExpressionSyntax {\n        return new MemberAccessExpressionSyntax(expression, Syntax.token(SyntaxKind.DotToken), name, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): MemberAccessExpressionSyntax {\n        return <MemberAccessExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): MemberAccessExpressionSyntax {\n        return <MemberAccessExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExpression(expression: IExpressionSyntax): MemberAccessExpressionSyntax {\n        return this.update(expression, this.dotToken, this.name);\n    }\n\n    public withDotToken(dotToken: ISyntaxToken): MemberAccessExpressionSyntax {\n        return this.update(this.expression, dotToken, this.name);\n    }\n\n    public withName(name: ISyntaxToken): MemberAccessExpressionSyntax {\n        return this.update(this.expression, this.dotToken, name);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class PostfixUnaryExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n    private _kind: SyntaxKind;\n\n    constructor(kind: SyntaxKind,\n                public operand: IExpressionSyntax,\n                public operatorToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n        this._kind = kind;\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitPostfixUnaryExpression(this);\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.operand;\n            case 1: return this.operatorToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public kind(): SyntaxKind {\n        return this._kind;\n    }\n\n    public update(kind: SyntaxKind,\n                  operand: IExpressionSyntax,\n                  operatorToken: ISyntaxToken): PostfixUnaryExpressionSyntax {\n        if (this._kind === kind && this.operand === operand && this.operatorToken === operatorToken) {\n            return this;\n        }\n\n        return new PostfixUnaryExpressionSyntax(kind, operand, operatorToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): PostfixUnaryExpressionSyntax {\n        return <PostfixUnaryExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): PostfixUnaryExpressionSyntax {\n        return <PostfixUnaryExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withKind(kind: SyntaxKind): PostfixUnaryExpressionSyntax {\n        return this.update(kind, this.operand, this.operatorToken);\n    }\n\n    public withOperand(operand: IExpressionSyntax): PostfixUnaryExpressionSyntax {\n        return this.update(this._kind, operand, this.operatorToken);\n    }\n\n    public withOperatorToken(operatorToken: ISyntaxToken): PostfixUnaryExpressionSyntax {\n        return this.update(this._kind, this.operand, operatorToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.operand.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ElementAccessExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n    constructor(public expression: IExpressionSyntax,\n                public openBracketToken: ISyntaxToken,\n                public argumentExpression: IExpressionSyntax,\n                public closeBracketToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitElementAccessExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ElementAccessExpression;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.expression;\n            case 1: return this.openBracketToken;\n            case 2: return this.argumentExpression;\n            case 3: return this.closeBracketToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(expression: IExpressionSyntax,\n                  openBracketToken: ISyntaxToken,\n                  argumentExpression: IExpressionSyntax,\n                  closeBracketToken: ISyntaxToken): ElementAccessExpressionSyntax {\n        if (this.expression === expression && this.openBracketToken === openBracketToken && this.argumentExpression === argumentExpression && this.closeBracketToken === closeBracketToken) {\n            return this;\n        }\n\n        return new ElementAccessExpressionSyntax(expression, openBracketToken, argumentExpression, closeBracketToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax,\n                          argumentExpression: IExpressionSyntax): ElementAccessExpressionSyntax {\n        return new ElementAccessExpressionSyntax(expression, Syntax.token(SyntaxKind.OpenBracketToken), argumentExpression, Syntax.token(SyntaxKind.CloseBracketToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ElementAccessExpressionSyntax {\n        return <ElementAccessExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ElementAccessExpressionSyntax {\n        return <ElementAccessExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ElementAccessExpressionSyntax {\n        return this.update(expression, this.openBracketToken, this.argumentExpression, this.closeBracketToken);\n    }\n\n    public withOpenBracketToken(openBracketToken: ISyntaxToken): ElementAccessExpressionSyntax {\n        return this.update(this.expression, openBracketToken, this.argumentExpression, this.closeBracketToken);\n    }\n\n    public withArgumentExpression(argumentExpression: IExpressionSyntax): ElementAccessExpressionSyntax {\n        return this.update(this.expression, this.openBracketToken, argumentExpression, this.closeBracketToken);\n    }\n\n    public withCloseBracketToken(closeBracketToken: ISyntaxToken): ElementAccessExpressionSyntax {\n        return this.update(this.expression, this.openBracketToken, this.argumentExpression, closeBracketToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        if (this.argumentExpression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class InvocationExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n    constructor(public expression: IExpressionSyntax,\n                public argumentList: ArgumentListSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitInvocationExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.InvocationExpression;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.expression;\n            case 1: return this.argumentList;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(expression: IExpressionSyntax,\n                  argumentList: ArgumentListSyntax): InvocationExpressionSyntax {\n        if (this.expression === expression && this.argumentList === argumentList) {\n            return this;\n        }\n\n        return new InvocationExpressionSyntax(expression, argumentList, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): InvocationExpressionSyntax {\n        return new InvocationExpressionSyntax(expression, ArgumentListSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): InvocationExpressionSyntax {\n        return <InvocationExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): InvocationExpressionSyntax {\n        return <InvocationExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExpression(expression: IExpressionSyntax): InvocationExpressionSyntax {\n        return this.update(expression, this.argumentList);\n    }\n\n    public withArgumentList(argumentList: ArgumentListSyntax): InvocationExpressionSyntax {\n        return this.update(this.expression, argumentList);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        if (this.argumentList.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ArgumentListSyntax extends SyntaxNode {\n\n    constructor(public typeArgumentList: TypeArgumentListSyntax,\n                public openParenToken: ISyntaxToken,\n                public arguments: ISeparatedSyntaxList,\n                public closeParenToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitArgumentList(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ArgumentList;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.typeArgumentList;\n            case 1: return this.openParenToken;\n            case 2: return this.arguments;\n            case 3: return this.closeParenToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(typeArgumentList: TypeArgumentListSyntax,\n                  openParenToken: ISyntaxToken,\n                  _arguments: ISeparatedSyntaxList,\n                  closeParenToken: ISyntaxToken): ArgumentListSyntax {\n        if (this.typeArgumentList === typeArgumentList && this.openParenToken === openParenToken && this.arguments === _arguments && this.closeParenToken === closeParenToken) {\n            return this;\n        }\n\n        return new ArgumentListSyntax(typeArgumentList, openParenToken, _arguments, closeParenToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openParenToken: ISyntaxToken,\n                         closeParenToken: ISyntaxToken): ArgumentListSyntax {\n        return new ArgumentListSyntax(null, openParenToken, Syntax.emptySeparatedList, closeParenToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ArgumentListSyntax {\n        return new ArgumentListSyntax(null, Syntax.token(SyntaxKind.OpenParenToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.CloseParenToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ArgumentListSyntax {\n        return <ArgumentListSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ArgumentListSyntax {\n        return <ArgumentListSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withTypeArgumentList(typeArgumentList: TypeArgumentListSyntax): ArgumentListSyntax {\n        return this.update(typeArgumentList, this.openParenToken, this.arguments, this.closeParenToken);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): ArgumentListSyntax {\n        return this.update(this.typeArgumentList, openParenToken, this.arguments, this.closeParenToken);\n    }\n\n    public withArguments(_arguments: ISeparatedSyntaxList): ArgumentListSyntax {\n        return this.update(this.typeArgumentList, this.openParenToken, _arguments, this.closeParenToken);\n    }\n\n    public withArgument(_argument: IExpressionSyntax): ArgumentListSyntax {\n        return this.withArguments(Syntax.separatedList([_argument]));\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): ArgumentListSyntax {\n        return this.update(this.typeArgumentList, this.openParenToken, this.arguments, closeParenToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.typeArgumentList !== null && this.typeArgumentList.isTypeScriptSpecific()) { return true; }\n        if (this.arguments.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class BinaryExpressionSyntax extends SyntaxNode implements IExpressionSyntax {\n    private _kind: SyntaxKind;\n\n    constructor(kind: SyntaxKind,\n                public left: IExpressionSyntax,\n                public operatorToken: ISyntaxToken,\n                public right: IExpressionSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n        this._kind = kind;\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitBinaryExpression(this);\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.left;\n            case 1: return this.operatorToken;\n            case 2: return this.right;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public kind(): SyntaxKind {\n        return this._kind;\n    }\n\n    public update(kind: SyntaxKind,\n                  left: IExpressionSyntax,\n                  operatorToken: ISyntaxToken,\n                  right: IExpressionSyntax): BinaryExpressionSyntax {\n        if (this._kind === kind && this.left === left && this.operatorToken === operatorToken && this.right === right) {\n            return this;\n        }\n\n        return new BinaryExpressionSyntax(kind, left, operatorToken, right, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): BinaryExpressionSyntax {\n        return <BinaryExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): BinaryExpressionSyntax {\n        return <BinaryExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withKind(kind: SyntaxKind): BinaryExpressionSyntax {\n        return this.update(kind, this.left, this.operatorToken, this.right);\n    }\n\n    public withLeft(left: IExpressionSyntax): BinaryExpressionSyntax {\n        return this.update(this._kind, left, this.operatorToken, this.right);\n    }\n\n    public withOperatorToken(operatorToken: ISyntaxToken): BinaryExpressionSyntax {\n        return this.update(this._kind, this.left, operatorToken, this.right);\n    }\n\n    public withRight(right: IExpressionSyntax): BinaryExpressionSyntax {\n        return this.update(this._kind, this.left, this.operatorToken, right);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.left.isTypeScriptSpecific()) { return true; }\n        if (this.right.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ConditionalExpressionSyntax extends SyntaxNode implements IExpressionSyntax {\n\n    constructor(public condition: IExpressionSyntax,\n                public questionToken: ISyntaxToken,\n                public whenTrue: IExpressionSyntax,\n                public colonToken: ISyntaxToken,\n                public whenFalse: IExpressionSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitConditionalExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ConditionalExpression;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.condition;\n            case 1: return this.questionToken;\n            case 2: return this.whenTrue;\n            case 3: return this.colonToken;\n            case 4: return this.whenFalse;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(condition: IExpressionSyntax,\n                  questionToken: ISyntaxToken,\n                  whenTrue: IExpressionSyntax,\n                  colonToken: ISyntaxToken,\n                  whenFalse: IExpressionSyntax): ConditionalExpressionSyntax {\n        if (this.condition === condition && this.questionToken === questionToken && this.whenTrue === whenTrue && this.colonToken === colonToken && this.whenFalse === whenFalse) {\n            return this;\n        }\n\n        return new ConditionalExpressionSyntax(condition, questionToken, whenTrue, colonToken, whenFalse, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(condition: IExpressionSyntax,\n                          whenTrue: IExpressionSyntax,\n                          whenFalse: IExpressionSyntax): ConditionalExpressionSyntax {\n        return new ConditionalExpressionSyntax(condition, Syntax.token(SyntaxKind.QuestionToken), whenTrue, Syntax.token(SyntaxKind.ColonToken), whenFalse, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ConditionalExpressionSyntax {\n        return <ConditionalExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ConditionalExpressionSyntax {\n        return <ConditionalExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withCondition(condition: IExpressionSyntax): ConditionalExpressionSyntax {\n        return this.update(condition, this.questionToken, this.whenTrue, this.colonToken, this.whenFalse);\n    }\n\n    public withQuestionToken(questionToken: ISyntaxToken): ConditionalExpressionSyntax {\n        return this.update(this.condition, questionToken, this.whenTrue, this.colonToken, this.whenFalse);\n    }\n\n    public withWhenTrue(whenTrue: IExpressionSyntax): ConditionalExpressionSyntax {\n        return this.update(this.condition, this.questionToken, whenTrue, this.colonToken, this.whenFalse);\n    }\n\n    public withColonToken(colonToken: ISyntaxToken): ConditionalExpressionSyntax {\n        return this.update(this.condition, this.questionToken, this.whenTrue, colonToken, this.whenFalse);\n    }\n\n    public withWhenFalse(whenFalse: IExpressionSyntax): ConditionalExpressionSyntax {\n        return this.update(this.condition, this.questionToken, this.whenTrue, this.colonToken, whenFalse);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.condition.isTypeScriptSpecific()) { return true; }\n        if (this.whenTrue.isTypeScriptSpecific()) { return true; }\n        if (this.whenFalse.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ConstructSignatureSyntax extends SyntaxNode implements ITypeMemberSyntax {\n\n    constructor(public newKeyword: ISyntaxToken,\n                public callSignature: CallSignatureSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitConstructSignature(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ConstructSignature;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.newKeyword;\n            case 1: return this.callSignature;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isTypeMember(): bool {\n        return true;\n    }\n\n    public update(newKeyword: ISyntaxToken,\n                  callSignature: CallSignatureSyntax): ConstructSignatureSyntax {\n        if (this.newKeyword === newKeyword && this.callSignature === callSignature) {\n            return this;\n        }\n\n        return new ConstructSignatureSyntax(newKeyword, callSignature, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(): ConstructSignatureSyntax {\n        return new ConstructSignatureSyntax(Syntax.token(SyntaxKind.NewKeyword), CallSignatureSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ConstructSignatureSyntax {\n        return <ConstructSignatureSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ConstructSignatureSyntax {\n        return <ConstructSignatureSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withNewKeyword(newKeyword: ISyntaxToken): ConstructSignatureSyntax {\n        return this.update(newKeyword, this.callSignature);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): ConstructSignatureSyntax {\n        return this.update(this.newKeyword, callSignature);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class MethodSignatureSyntax extends SyntaxNode implements ITypeMemberSyntax {\n\n    constructor(public propertyName: ISyntaxToken,\n                public questionToken: ISyntaxToken,\n                public callSignature: CallSignatureSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitMethodSignature(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.MethodSignature;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.propertyName;\n            case 1: return this.questionToken;\n            case 2: return this.callSignature;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isTypeMember(): bool {\n        return true;\n    }\n\n    public update(propertyName: ISyntaxToken,\n                  questionToken: ISyntaxToken,\n                  callSignature: CallSignatureSyntax): MethodSignatureSyntax {\n        if (this.propertyName === propertyName && this.questionToken === questionToken && this.callSignature === callSignature) {\n            return this;\n        }\n\n        return new MethodSignatureSyntax(propertyName, questionToken, callSignature, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(propertyName: ISyntaxToken,\n                         callSignature: CallSignatureSyntax): MethodSignatureSyntax {\n        return new MethodSignatureSyntax(propertyName, null, callSignature, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): MethodSignatureSyntax {\n        return new MethodSignatureSyntax(propertyName, null, CallSignatureSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): MethodSignatureSyntax {\n        return <MethodSignatureSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): MethodSignatureSyntax {\n        return <MethodSignatureSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): MethodSignatureSyntax {\n        return this.update(propertyName, this.questionToken, this.callSignature);\n    }\n\n    public withQuestionToken(questionToken: ISyntaxToken): MethodSignatureSyntax {\n        return this.update(this.propertyName, questionToken, this.callSignature);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): MethodSignatureSyntax {\n        return this.update(this.propertyName, this.questionToken, callSignature);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.callSignature.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class IndexSignatureSyntax extends SyntaxNode implements ITypeMemberSyntax {\n\n    constructor(public openBracketToken: ISyntaxToken,\n                public parameter: ParameterSyntax,\n                public closeBracketToken: ISyntaxToken,\n                public typeAnnotation: TypeAnnotationSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitIndexSignature(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.IndexSignature;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openBracketToken;\n            case 1: return this.parameter;\n            case 2: return this.closeBracketToken;\n            case 3: return this.typeAnnotation;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isTypeMember(): bool {\n        return true;\n    }\n\n    public update(openBracketToken: ISyntaxToken,\n                  parameter: ParameterSyntax,\n                  closeBracketToken: ISyntaxToken,\n                  typeAnnotation: TypeAnnotationSyntax): IndexSignatureSyntax {\n        if (this.openBracketToken === openBracketToken && this.parameter === parameter && this.closeBracketToken === closeBracketToken && this.typeAnnotation === typeAnnotation) {\n            return this;\n        }\n\n        return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, typeAnnotation, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openBracketToken: ISyntaxToken,\n                         parameter: ParameterSyntax,\n                         closeBracketToken: ISyntaxToken): IndexSignatureSyntax {\n        return new IndexSignatureSyntax(openBracketToken, parameter, closeBracketToken, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(parameter: ParameterSyntax): IndexSignatureSyntax {\n        return new IndexSignatureSyntax(Syntax.token(SyntaxKind.OpenBracketToken), parameter, Syntax.token(SyntaxKind.CloseBracketToken), null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): IndexSignatureSyntax {\n        return <IndexSignatureSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): IndexSignatureSyntax {\n        return <IndexSignatureSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenBracketToken(openBracketToken: ISyntaxToken): IndexSignatureSyntax {\n        return this.update(openBracketToken, this.parameter, this.closeBracketToken, this.typeAnnotation);\n    }\n\n    public withParameter(parameter: ParameterSyntax): IndexSignatureSyntax {\n        return this.update(this.openBracketToken, parameter, this.closeBracketToken, this.typeAnnotation);\n    }\n\n    public withCloseBracketToken(closeBracketToken: ISyntaxToken): IndexSignatureSyntax {\n        return this.update(this.openBracketToken, this.parameter, closeBracketToken, this.typeAnnotation);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): IndexSignatureSyntax {\n        return this.update(this.openBracketToken, this.parameter, this.closeBracketToken, typeAnnotation);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class PropertySignatureSyntax extends SyntaxNode implements ITypeMemberSyntax {\n\n    constructor(public propertyName: ISyntaxToken,\n                public questionToken: ISyntaxToken,\n                public typeAnnotation: TypeAnnotationSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitPropertySignature(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.PropertySignature;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.propertyName;\n            case 1: return this.questionToken;\n            case 2: return this.typeAnnotation;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isTypeMember(): bool {\n        return true;\n    }\n\n    public update(propertyName: ISyntaxToken,\n                  questionToken: ISyntaxToken,\n                  typeAnnotation: TypeAnnotationSyntax): PropertySignatureSyntax {\n        if (this.propertyName === propertyName && this.questionToken === questionToken && this.typeAnnotation === typeAnnotation) {\n            return this;\n        }\n\n        return new PropertySignatureSyntax(propertyName, questionToken, typeAnnotation, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(propertyName: ISyntaxToken): PropertySignatureSyntax {\n        return new PropertySignatureSyntax(propertyName, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): PropertySignatureSyntax {\n        return new PropertySignatureSyntax(propertyName, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): PropertySignatureSyntax {\n        return <PropertySignatureSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): PropertySignatureSyntax {\n        return <PropertySignatureSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): PropertySignatureSyntax {\n        return this.update(propertyName, this.questionToken, this.typeAnnotation);\n    }\n\n    public withQuestionToken(questionToken: ISyntaxToken): PropertySignatureSyntax {\n        return this.update(this.propertyName, questionToken, this.typeAnnotation);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): PropertySignatureSyntax {\n        return this.update(this.propertyName, this.questionToken, typeAnnotation);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class CallSignatureSyntax extends SyntaxNode implements ITypeMemberSyntax {\n\n    constructor(public typeParameterList: TypeParameterListSyntax,\n                public parameterList: ParameterListSyntax,\n                public typeAnnotation: TypeAnnotationSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitCallSignature(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.CallSignature;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.typeParameterList;\n            case 1: return this.parameterList;\n            case 2: return this.typeAnnotation;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isTypeMember(): bool {\n        return true;\n    }\n\n    public update(typeParameterList: TypeParameterListSyntax,\n                  parameterList: ParameterListSyntax,\n                  typeAnnotation: TypeAnnotationSyntax): CallSignatureSyntax {\n        if (this.typeParameterList === typeParameterList && this.parameterList === parameterList && this.typeAnnotation === typeAnnotation) {\n            return this;\n        }\n\n        return new CallSignatureSyntax(typeParameterList, parameterList, typeAnnotation, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(parameterList: ParameterListSyntax): CallSignatureSyntax {\n        return new CallSignatureSyntax(null, parameterList, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): CallSignatureSyntax {\n        return new CallSignatureSyntax(null, ParameterListSyntax.create1(), null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): CallSignatureSyntax {\n        return <CallSignatureSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): CallSignatureSyntax {\n        return <CallSignatureSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withTypeParameterList(typeParameterList: TypeParameterListSyntax): CallSignatureSyntax {\n        return this.update(typeParameterList, this.parameterList, this.typeAnnotation);\n    }\n\n    public withParameterList(parameterList: ParameterListSyntax): CallSignatureSyntax {\n        return this.update(this.typeParameterList, parameterList, this.typeAnnotation);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): CallSignatureSyntax {\n        return this.update(this.typeParameterList, this.parameterList, typeAnnotation);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.typeParameterList !== null) { return true; }\n        if (this.parameterList.isTypeScriptSpecific()) { return true; }\n        if (this.typeAnnotation !== null) { return true; }\n        return false;\n    }\n    }\n\n    export class ParameterListSyntax extends SyntaxNode {\n\n    constructor(public openParenToken: ISyntaxToken,\n                public parameters: ISeparatedSyntaxList,\n                public closeParenToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitParameterList(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ParameterList;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openParenToken;\n            case 1: return this.parameters;\n            case 2: return this.closeParenToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(openParenToken: ISyntaxToken,\n                  parameters: ISeparatedSyntaxList,\n                  closeParenToken: ISyntaxToken): ParameterListSyntax {\n        if (this.openParenToken === openParenToken && this.parameters === parameters && this.closeParenToken === closeParenToken) {\n            return this;\n        }\n\n        return new ParameterListSyntax(openParenToken, parameters, closeParenToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openParenToken: ISyntaxToken,\n                         closeParenToken: ISyntaxToken): ParameterListSyntax {\n        return new ParameterListSyntax(openParenToken, Syntax.emptySeparatedList, closeParenToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ParameterListSyntax {\n        return new ParameterListSyntax(Syntax.token(SyntaxKind.OpenParenToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.CloseParenToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ParameterListSyntax {\n        return <ParameterListSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ParameterListSyntax {\n        return <ParameterListSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): ParameterListSyntax {\n        return this.update(openParenToken, this.parameters, this.closeParenToken);\n    }\n\n    public withParameters(parameters: ISeparatedSyntaxList): ParameterListSyntax {\n        return this.update(this.openParenToken, parameters, this.closeParenToken);\n    }\n\n    public withParameter(parameter: ParameterSyntax): ParameterListSyntax {\n        return this.withParameters(Syntax.separatedList([parameter]));\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): ParameterListSyntax {\n        return this.update(this.openParenToken, this.parameters, closeParenToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.parameters.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class TypeParameterListSyntax extends SyntaxNode {\n\n    constructor(public lessThanToken: ISyntaxToken,\n                public typeParameters: ISeparatedSyntaxList,\n                public greaterThanToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitTypeParameterList(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.TypeParameterList;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.lessThanToken;\n            case 1: return this.typeParameters;\n            case 2: return this.greaterThanToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(lessThanToken: ISyntaxToken,\n                  typeParameters: ISeparatedSyntaxList,\n                  greaterThanToken: ISyntaxToken): TypeParameterListSyntax {\n        if (this.lessThanToken === lessThanToken && this.typeParameters === typeParameters && this.greaterThanToken === greaterThanToken) {\n            return this;\n        }\n\n        return new TypeParameterListSyntax(lessThanToken, typeParameters, greaterThanToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(lessThanToken: ISyntaxToken,\n                         greaterThanToken: ISyntaxToken): TypeParameterListSyntax {\n        return new TypeParameterListSyntax(lessThanToken, Syntax.emptySeparatedList, greaterThanToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): TypeParameterListSyntax {\n        return new TypeParameterListSyntax(Syntax.token(SyntaxKind.LessThanToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.GreaterThanToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): TypeParameterListSyntax {\n        return <TypeParameterListSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): TypeParameterListSyntax {\n        return <TypeParameterListSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withLessThanToken(lessThanToken: ISyntaxToken): TypeParameterListSyntax {\n        return this.update(lessThanToken, this.typeParameters, this.greaterThanToken);\n    }\n\n    public withTypeParameters(typeParameters: ISeparatedSyntaxList): TypeParameterListSyntax {\n        return this.update(this.lessThanToken, typeParameters, this.greaterThanToken);\n    }\n\n    public withTypeParameter(typeParameter: TypeParameterSyntax): TypeParameterListSyntax {\n        return this.withTypeParameters(Syntax.separatedList([typeParameter]));\n    }\n\n    public withGreaterThanToken(greaterThanToken: ISyntaxToken): TypeParameterListSyntax {\n        return this.update(this.lessThanToken, this.typeParameters, greaterThanToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class TypeParameterSyntax extends SyntaxNode {\n\n    constructor(public identifier: ISyntaxToken,\n                public constraint: ConstraintSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitTypeParameter(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.TypeParameter;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.identifier;\n            case 1: return this.constraint;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(identifier: ISyntaxToken,\n                  constraint: ConstraintSyntax): TypeParameterSyntax {\n        if (this.identifier === identifier && this.constraint === constraint) {\n            return this;\n        }\n\n        return new TypeParameterSyntax(identifier, constraint, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(identifier: ISyntaxToken): TypeParameterSyntax {\n        return new TypeParameterSyntax(identifier, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): TypeParameterSyntax {\n        return new TypeParameterSyntax(identifier, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): TypeParameterSyntax {\n        return <TypeParameterSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): TypeParameterSyntax {\n        return <TypeParameterSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): TypeParameterSyntax {\n        return this.update(identifier, this.constraint);\n    }\n\n    public withConstraint(constraint: ConstraintSyntax): TypeParameterSyntax {\n        return this.update(this.identifier, constraint);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ConstraintSyntax extends SyntaxNode {\n\n    constructor(public extendsKeyword: ISyntaxToken,\n                public type: ITypeSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitConstraint(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.Constraint;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.extendsKeyword;\n            case 1: return this.type;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(extendsKeyword: ISyntaxToken,\n                  type: ITypeSyntax): ConstraintSyntax {\n        if (this.extendsKeyword === extendsKeyword && this.type === type) {\n            return this;\n        }\n\n        return new ConstraintSyntax(extendsKeyword, type, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(type: ITypeSyntax): ConstraintSyntax {\n        return new ConstraintSyntax(Syntax.token(SyntaxKind.ExtendsKeyword), type, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ConstraintSyntax {\n        return <ConstraintSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ConstraintSyntax {\n        return <ConstraintSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExtendsKeyword(extendsKeyword: ISyntaxToken): ConstraintSyntax {\n        return this.update(extendsKeyword, this.type);\n    }\n\n    public withType(type: ITypeSyntax): ConstraintSyntax {\n        return this.update(this.extendsKeyword, type);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ElseClauseSyntax extends SyntaxNode {\n\n    constructor(public elseKeyword: ISyntaxToken,\n                public statement: IStatementSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitElseClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ElseClause;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.elseKeyword;\n            case 1: return this.statement;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(elseKeyword: ISyntaxToken,\n                  statement: IStatementSyntax): ElseClauseSyntax {\n        if (this.elseKeyword === elseKeyword && this.statement === statement) {\n            return this;\n        }\n\n        return new ElseClauseSyntax(elseKeyword, statement, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(statement: IStatementSyntax): ElseClauseSyntax {\n        return new ElseClauseSyntax(Syntax.token(SyntaxKind.ElseKeyword), statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ElseClauseSyntax {\n        return <ElseClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ElseClauseSyntax {\n        return <ElseClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withElseKeyword(elseKeyword: ISyntaxToken): ElseClauseSyntax {\n        return this.update(elseKeyword, this.statement);\n    }\n\n    public withStatement(statement: IStatementSyntax): ElseClauseSyntax {\n        return this.update(this.elseKeyword, statement);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class IfStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public ifKeyword: ISyntaxToken,\n                public openParenToken: ISyntaxToken,\n                public condition: IExpressionSyntax,\n                public closeParenToken: ISyntaxToken,\n                public statement: IStatementSyntax,\n                public elseClause: ElseClauseSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitIfStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.IfStatement;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.ifKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.condition;\n            case 3: return this.closeParenToken;\n            case 4: return this.statement;\n            case 5: return this.elseClause;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(ifKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  condition: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  statement: IStatementSyntax,\n                  elseClause: ElseClauseSyntax): IfStatementSyntax {\n        if (this.ifKeyword === ifKeyword && this.openParenToken === openParenToken && this.condition === condition && this.closeParenToken === closeParenToken && this.statement === statement && this.elseClause === elseClause) {\n            return this;\n        }\n\n        return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(ifKeyword: ISyntaxToken,\n                         openParenToken: ISyntaxToken,\n                         condition: IExpressionSyntax,\n                         closeParenToken: ISyntaxToken,\n                         statement: IStatementSyntax): IfStatementSyntax {\n        return new IfStatementSyntax(ifKeyword, openParenToken, condition, closeParenToken, statement, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(condition: IExpressionSyntax,\n                          statement: IStatementSyntax): IfStatementSyntax {\n        return new IfStatementSyntax(Syntax.token(SyntaxKind.IfKeyword), Syntax.token(SyntaxKind.OpenParenToken), condition, Syntax.token(SyntaxKind.CloseParenToken), statement, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): IfStatementSyntax {\n        return <IfStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): IfStatementSyntax {\n        return <IfStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withIfKeyword(ifKeyword: ISyntaxToken): IfStatementSyntax {\n        return this.update(ifKeyword, this.openParenToken, this.condition, this.closeParenToken, this.statement, this.elseClause);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): IfStatementSyntax {\n        return this.update(this.ifKeyword, openParenToken, this.condition, this.closeParenToken, this.statement, this.elseClause);\n    }\n\n    public withCondition(condition: IExpressionSyntax): IfStatementSyntax {\n        return this.update(this.ifKeyword, this.openParenToken, condition, this.closeParenToken, this.statement, this.elseClause);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): IfStatementSyntax {\n        return this.update(this.ifKeyword, this.openParenToken, this.condition, closeParenToken, this.statement, this.elseClause);\n    }\n\n    public withStatement(statement: IStatementSyntax): IfStatementSyntax {\n        return this.update(this.ifKeyword, this.openParenToken, this.condition, this.closeParenToken, statement, this.elseClause);\n    }\n\n    public withElseClause(elseClause: ElseClauseSyntax): IfStatementSyntax {\n        return this.update(this.ifKeyword, this.openParenToken, this.condition, this.closeParenToken, this.statement, elseClause);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.condition.isTypeScriptSpecific()) { return true; }\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        if (this.elseClause !== null && this.elseClause.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ExpressionStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public expression: IExpressionSyntax,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitExpressionStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ExpressionStatement;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.expression;\n            case 1: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(expression: IExpressionSyntax,\n                  semicolonToken: ISyntaxToken): ExpressionStatementSyntax {\n        if (this.expression === expression && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ExpressionStatementSyntax(expression, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): ExpressionStatementSyntax {\n        return new ExpressionStatementSyntax(expression, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ExpressionStatementSyntax {\n        return <ExpressionStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ExpressionStatementSyntax {\n        return <ExpressionStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ExpressionStatementSyntax {\n        return this.update(expression, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ExpressionStatementSyntax {\n        return this.update(this.expression, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ConstructorDeclarationSyntax extends SyntaxNode implements IClassElementSyntax {\n\n    constructor(public constructorKeyword: ISyntaxToken,\n                public parameterList: ParameterListSyntax,\n                public block: BlockSyntax,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitConstructorDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ConstructorDeclaration;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.constructorKeyword;\n            case 1: return this.parameterList;\n            case 2: return this.block;\n            case 3: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isClassElement(): bool {\n        return true;\n    }\n\n    public update(constructorKeyword: ISyntaxToken,\n                  parameterList: ParameterListSyntax,\n                  block: BlockSyntax,\n                  semicolonToken: ISyntaxToken): ConstructorDeclarationSyntax {\n        if (this.constructorKeyword === constructorKeyword && this.parameterList === parameterList && this.block === block && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, block, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(constructorKeyword: ISyntaxToken,\n                         parameterList: ParameterListSyntax): ConstructorDeclarationSyntax {\n        return new ConstructorDeclarationSyntax(constructorKeyword, parameterList, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ConstructorDeclarationSyntax {\n        return new ConstructorDeclarationSyntax(Syntax.token(SyntaxKind.ConstructorKeyword), ParameterListSyntax.create1(), null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ConstructorDeclarationSyntax {\n        return <ConstructorDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ConstructorDeclarationSyntax {\n        return <ConstructorDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withConstructorKeyword(constructorKeyword: ISyntaxToken): ConstructorDeclarationSyntax {\n        return this.update(constructorKeyword, this.parameterList, this.block, this.semicolonToken);\n    }\n\n    public withParameterList(parameterList: ParameterListSyntax): ConstructorDeclarationSyntax {\n        return this.update(this.constructorKeyword, parameterList, this.block, this.semicolonToken);\n    }\n\n    public withBlock(block: BlockSyntax): ConstructorDeclarationSyntax {\n        return this.update(this.constructorKeyword, this.parameterList, block, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ConstructorDeclarationSyntax {\n        return this.update(this.constructorKeyword, this.parameterList, this.block, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class MemberFunctionDeclarationSyntax extends SyntaxNode implements IMemberDeclarationSyntax {\n\n    constructor(public modifiers: ISyntaxList,\n                public propertyName: ISyntaxToken,\n                public callSignature: CallSignatureSyntax,\n                public block: BlockSyntax,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitMemberFunctionDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.MemberFunctionDeclaration;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.propertyName;\n            case 2: return this.callSignature;\n            case 3: return this.block;\n            case 4: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isMemberDeclaration(): bool {\n        return true;\n    }\n\n    private isClassElement(): bool {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  propertyName: ISyntaxToken,\n                  callSignature: CallSignatureSyntax,\n                  block: BlockSyntax,\n                  semicolonToken: ISyntaxToken): MemberFunctionDeclarationSyntax {\n        if (this.modifiers === modifiers && this.propertyName === propertyName && this.callSignature === callSignature && this.block === block && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new MemberFunctionDeclarationSyntax(modifiers, propertyName, callSignature, block, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(propertyName: ISyntaxToken,\n                         callSignature: CallSignatureSyntax): MemberFunctionDeclarationSyntax {\n        return new MemberFunctionDeclarationSyntax(Syntax.emptyList, propertyName, callSignature, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): MemberFunctionDeclarationSyntax {\n        return new MemberFunctionDeclarationSyntax(Syntax.emptyList, propertyName, CallSignatureSyntax.create1(), null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): MemberFunctionDeclarationSyntax {\n        return <MemberFunctionDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): MemberFunctionDeclarationSyntax {\n        return <MemberFunctionDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): MemberFunctionDeclarationSyntax {\n        return this.update(modifiers, this.propertyName, this.callSignature, this.block, this.semicolonToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): MemberFunctionDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): MemberFunctionDeclarationSyntax {\n        return this.update(this.modifiers, propertyName, this.callSignature, this.block, this.semicolonToken);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): MemberFunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.propertyName, callSignature, this.block, this.semicolonToken);\n    }\n\n    public withBlock(block: BlockSyntax): MemberFunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.propertyName, this.callSignature, block, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): MemberFunctionDeclarationSyntax {\n        return this.update(this.modifiers, this.propertyName, this.callSignature, this.block, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class MemberAccessorDeclarationSyntax extends SyntaxNode implements IMemberDeclarationSyntax {\n    constructor(public modifiers: ISyntaxList,\n                public propertyName: ISyntaxToken,\n                public parameterList: ParameterListSyntax,\n                public block: BlockSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n    }\n\n    private isMemberDeclaration(): bool {\n        return true;\n    }\n\n    private isClassElement(): bool {\n        return true;\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): MemberAccessorDeclarationSyntax {\n        return <MemberAccessorDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): MemberAccessorDeclarationSyntax {\n        return <MemberAccessorDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class GetMemberAccessorDeclarationSyntax extends MemberAccessorDeclarationSyntax {\n\n    constructor(modifiers: ISyntaxList,\n                public getKeyword: ISyntaxToken,\n                propertyName: ISyntaxToken,\n                parameterList: ParameterListSyntax,\n                public typeAnnotation: TypeAnnotationSyntax,\n                block: BlockSyntax,\n                parsedInStrictMode: bool) {\n        super(modifiers, propertyName, parameterList, block, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitGetMemberAccessorDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.GetMemberAccessorDeclaration;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.getKeyword;\n            case 2: return this.propertyName;\n            case 3: return this.parameterList;\n            case 4: return this.typeAnnotation;\n            case 5: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(modifiers: ISyntaxList,\n                  getKeyword: ISyntaxToken,\n                  propertyName: ISyntaxToken,\n                  parameterList: ParameterListSyntax,\n                  typeAnnotation: TypeAnnotationSyntax,\n                  block: BlockSyntax): GetMemberAccessorDeclarationSyntax {\n        if (this.modifiers === modifiers && this.getKeyword === getKeyword && this.propertyName === propertyName && this.parameterList === parameterList && this.typeAnnotation === typeAnnotation && this.block === block) {\n            return this;\n        }\n\n        return new GetMemberAccessorDeclarationSyntax(modifiers, getKeyword, propertyName, parameterList, typeAnnotation, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(getKeyword: ISyntaxToken,\n                         propertyName: ISyntaxToken,\n                         parameterList: ParameterListSyntax,\n                         block: BlockSyntax): GetMemberAccessorDeclarationSyntax {\n        return new GetMemberAccessorDeclarationSyntax(Syntax.emptyList, getKeyword, propertyName, parameterList, null, block, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): GetMemberAccessorDeclarationSyntax {\n        return new GetMemberAccessorDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.GetKeyword), propertyName, ParameterListSyntax.create1(), null, BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): GetMemberAccessorDeclarationSyntax {\n        return <GetMemberAccessorDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): GetMemberAccessorDeclarationSyntax {\n        return <GetMemberAccessorDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): GetMemberAccessorDeclarationSyntax {\n        return this.update(modifiers, this.getKeyword, this.propertyName, this.parameterList, this.typeAnnotation, this.block);\n    }\n\n    public withModifier(modifier: ISyntaxToken): GetMemberAccessorDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withGetKeyword(getKeyword: ISyntaxToken): GetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, getKeyword, this.propertyName, this.parameterList, this.typeAnnotation, this.block);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): GetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.getKeyword, propertyName, this.parameterList, this.typeAnnotation, this.block);\n    }\n\n    public withParameterList(parameterList: ParameterListSyntax): GetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.getKeyword, this.propertyName, parameterList, this.typeAnnotation, this.block);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): GetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.getKeyword, this.propertyName, this.parameterList, typeAnnotation, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): GetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.getKeyword, this.propertyName, this.parameterList, this.typeAnnotation, block);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class SetMemberAccessorDeclarationSyntax extends MemberAccessorDeclarationSyntax {\n\n    constructor(modifiers: ISyntaxList,\n                public setKeyword: ISyntaxToken,\n                propertyName: ISyntaxToken,\n                parameterList: ParameterListSyntax,\n                block: BlockSyntax,\n                parsedInStrictMode: bool) {\n        super(modifiers, propertyName, parameterList, block, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitSetMemberAccessorDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.SetMemberAccessorDeclaration;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.setKeyword;\n            case 2: return this.propertyName;\n            case 3: return this.parameterList;\n            case 4: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(modifiers: ISyntaxList,\n                  setKeyword: ISyntaxToken,\n                  propertyName: ISyntaxToken,\n                  parameterList: ParameterListSyntax,\n                  block: BlockSyntax): SetMemberAccessorDeclarationSyntax {\n        if (this.modifiers === modifiers && this.setKeyword === setKeyword && this.propertyName === propertyName && this.parameterList === parameterList && this.block === block) {\n            return this;\n        }\n\n        return new SetMemberAccessorDeclarationSyntax(modifiers, setKeyword, propertyName, parameterList, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(setKeyword: ISyntaxToken,\n                         propertyName: ISyntaxToken,\n                         parameterList: ParameterListSyntax,\n                         block: BlockSyntax): SetMemberAccessorDeclarationSyntax {\n        return new SetMemberAccessorDeclarationSyntax(Syntax.emptyList, setKeyword, propertyName, parameterList, block, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): SetMemberAccessorDeclarationSyntax {\n        return new SetMemberAccessorDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.SetKeyword), propertyName, ParameterListSyntax.create1(), BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SetMemberAccessorDeclarationSyntax {\n        return <SetMemberAccessorDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SetMemberAccessorDeclarationSyntax {\n        return <SetMemberAccessorDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): SetMemberAccessorDeclarationSyntax {\n        return this.update(modifiers, this.setKeyword, this.propertyName, this.parameterList, this.block);\n    }\n\n    public withModifier(modifier: ISyntaxToken): SetMemberAccessorDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withSetKeyword(setKeyword: ISyntaxToken): SetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, setKeyword, this.propertyName, this.parameterList, this.block);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): SetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.setKeyword, propertyName, this.parameterList, this.block);\n    }\n\n    public withParameterList(parameterList: ParameterListSyntax): SetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.setKeyword, this.propertyName, parameterList, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): SetMemberAccessorDeclarationSyntax {\n        return this.update(this.modifiers, this.setKeyword, this.propertyName, this.parameterList, block);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class MemberVariableDeclarationSyntax extends SyntaxNode implements IMemberDeclarationSyntax {\n\n    constructor(public modifiers: ISyntaxList,\n                public variableDeclarator: VariableDeclaratorSyntax,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitMemberVariableDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.MemberVariableDeclaration;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.variableDeclarator;\n            case 2: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isMemberDeclaration(): bool {\n        return true;\n    }\n\n    private isClassElement(): bool {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  variableDeclarator: VariableDeclaratorSyntax,\n                  semicolonToken: ISyntaxToken): MemberVariableDeclarationSyntax {\n        if (this.modifiers === modifiers && this.variableDeclarator === variableDeclarator && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new MemberVariableDeclarationSyntax(modifiers, variableDeclarator, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(variableDeclarator: VariableDeclaratorSyntax,\n                         semicolonToken: ISyntaxToken): MemberVariableDeclarationSyntax {\n        return new MemberVariableDeclarationSyntax(Syntax.emptyList, variableDeclarator, semicolonToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(variableDeclarator: VariableDeclaratorSyntax): MemberVariableDeclarationSyntax {\n        return new MemberVariableDeclarationSyntax(Syntax.emptyList, variableDeclarator, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): MemberVariableDeclarationSyntax {\n        return <MemberVariableDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): MemberVariableDeclarationSyntax {\n        return <MemberVariableDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): MemberVariableDeclarationSyntax {\n        return this.update(modifiers, this.variableDeclarator, this.semicolonToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): MemberVariableDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withVariableDeclarator(variableDeclarator: VariableDeclaratorSyntax): MemberVariableDeclarationSyntax {\n        return this.update(this.modifiers, variableDeclarator, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): MemberVariableDeclarationSyntax {\n        return this.update(this.modifiers, this.variableDeclarator, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ThrowStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public throwKeyword: ISyntaxToken,\n                public expression: IExpressionSyntax,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitThrowStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ThrowStatement;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.throwKeyword;\n            case 1: return this.expression;\n            case 2: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(throwKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  semicolonToken: ISyntaxToken): ThrowStatementSyntax {\n        if (this.throwKeyword === throwKeyword && this.expression === expression && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ThrowStatementSyntax(throwKeyword, expression, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): ThrowStatementSyntax {\n        return new ThrowStatementSyntax(Syntax.token(SyntaxKind.ThrowKeyword), expression, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ThrowStatementSyntax {\n        return <ThrowStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ThrowStatementSyntax {\n        return <ThrowStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withThrowKeyword(throwKeyword: ISyntaxToken): ThrowStatementSyntax {\n        return this.update(throwKeyword, this.expression, this.semicolonToken);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ThrowStatementSyntax {\n        return this.update(this.throwKeyword, expression, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ThrowStatementSyntax {\n        return this.update(this.throwKeyword, this.expression, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ReturnStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public returnKeyword: ISyntaxToken,\n                public expression: IExpressionSyntax,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitReturnStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ReturnStatement;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.returnKeyword;\n            case 1: return this.expression;\n            case 2: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(returnKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  semicolonToken: ISyntaxToken): ReturnStatementSyntax {\n        if (this.returnKeyword === returnKeyword && this.expression === expression && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ReturnStatementSyntax(returnKeyword, expression, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(returnKeyword: ISyntaxToken,\n                         semicolonToken: ISyntaxToken): ReturnStatementSyntax {\n        return new ReturnStatementSyntax(returnKeyword, null, semicolonToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ReturnStatementSyntax {\n        return new ReturnStatementSyntax(Syntax.token(SyntaxKind.ReturnKeyword), null, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ReturnStatementSyntax {\n        return <ReturnStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ReturnStatementSyntax {\n        return <ReturnStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withReturnKeyword(returnKeyword: ISyntaxToken): ReturnStatementSyntax {\n        return this.update(returnKeyword, this.expression, this.semicolonToken);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ReturnStatementSyntax {\n        return this.update(this.returnKeyword, expression, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ReturnStatementSyntax {\n        return this.update(this.returnKeyword, this.expression, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression !== null && this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ObjectCreationExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n    constructor(public newKeyword: ISyntaxToken,\n                public expression: IExpressionSyntax,\n                public argumentList: ArgumentListSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitObjectCreationExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ObjectCreationExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.newKeyword;\n            case 1: return this.expression;\n            case 2: return this.argumentList;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(newKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  argumentList: ArgumentListSyntax): ObjectCreationExpressionSyntax {\n        if (this.newKeyword === newKeyword && this.expression === expression && this.argumentList === argumentList) {\n            return this;\n        }\n\n        return new ObjectCreationExpressionSyntax(newKeyword, expression, argumentList, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(newKeyword: ISyntaxToken,\n                         expression: IExpressionSyntax): ObjectCreationExpressionSyntax {\n        return new ObjectCreationExpressionSyntax(newKeyword, expression, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(expression: IExpressionSyntax): ObjectCreationExpressionSyntax {\n        return new ObjectCreationExpressionSyntax(Syntax.token(SyntaxKind.NewKeyword), expression, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ObjectCreationExpressionSyntax {\n        return <ObjectCreationExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ObjectCreationExpressionSyntax {\n        return <ObjectCreationExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withNewKeyword(newKeyword: ISyntaxToken): ObjectCreationExpressionSyntax {\n        return this.update(newKeyword, this.expression, this.argumentList);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ObjectCreationExpressionSyntax {\n        return this.update(this.newKeyword, expression, this.argumentList);\n    }\n\n    public withArgumentList(argumentList: ArgumentListSyntax): ObjectCreationExpressionSyntax {\n        return this.update(this.newKeyword, this.expression, argumentList);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        if (this.argumentList !== null && this.argumentList.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class SwitchStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public switchKeyword: ISyntaxToken,\n                public openParenToken: ISyntaxToken,\n                public expression: IExpressionSyntax,\n                public closeParenToken: ISyntaxToken,\n                public openBraceToken: ISyntaxToken,\n                public switchClauses: ISyntaxList,\n                public closeBraceToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitSwitchStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.SwitchStatement;\n    }\n\n    public childCount(): number {\n        return 7;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.switchKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.expression;\n            case 3: return this.closeParenToken;\n            case 4: return this.openBraceToken;\n            case 5: return this.switchClauses;\n            case 6: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(switchKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  openBraceToken: ISyntaxToken,\n                  switchClauses: ISyntaxList,\n                  closeBraceToken: ISyntaxToken): SwitchStatementSyntax {\n        if (this.switchKeyword === switchKeyword && this.openParenToken === openParenToken && this.expression === expression && this.closeParenToken === closeParenToken && this.openBraceToken === openBraceToken && this.switchClauses === switchClauses && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, switchClauses, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(switchKeyword: ISyntaxToken,\n                         openParenToken: ISyntaxToken,\n                         expression: IExpressionSyntax,\n                         closeParenToken: ISyntaxToken,\n                         openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): SwitchStatementSyntax {\n        return new SwitchStatementSyntax(switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, Syntax.emptyList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(expression: IExpressionSyntax): SwitchStatementSyntax {\n        return new SwitchStatementSyntax(Syntax.token(SyntaxKind.SwitchKeyword), Syntax.token(SyntaxKind.OpenParenToken), expression, Syntax.token(SyntaxKind.CloseParenToken), Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptyList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SwitchStatementSyntax {\n        return <SwitchStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SwitchStatementSyntax {\n        return <SwitchStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withSwitchKeyword(switchKeyword: ISyntaxToken): SwitchStatementSyntax {\n        return this.update(switchKeyword, this.openParenToken, this.expression, this.closeParenToken, this.openBraceToken, this.switchClauses, this.closeBraceToken);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): SwitchStatementSyntax {\n        return this.update(this.switchKeyword, openParenToken, this.expression, this.closeParenToken, this.openBraceToken, this.switchClauses, this.closeBraceToken);\n    }\n\n    public withExpression(expression: IExpressionSyntax): SwitchStatementSyntax {\n        return this.update(this.switchKeyword, this.openParenToken, expression, this.closeParenToken, this.openBraceToken, this.switchClauses, this.closeBraceToken);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): SwitchStatementSyntax {\n        return this.update(this.switchKeyword, this.openParenToken, this.expression, closeParenToken, this.openBraceToken, this.switchClauses, this.closeBraceToken);\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): SwitchStatementSyntax {\n        return this.update(this.switchKeyword, this.openParenToken, this.expression, this.closeParenToken, openBraceToken, this.switchClauses, this.closeBraceToken);\n    }\n\n    public withSwitchClauses(switchClauses: ISyntaxList): SwitchStatementSyntax {\n        return this.update(this.switchKeyword, this.openParenToken, this.expression, this.closeParenToken, this.openBraceToken, switchClauses, this.closeBraceToken);\n    }\n\n    public withSwitchClause(switchClause: SwitchClauseSyntax): SwitchStatementSyntax {\n        return this.withSwitchClauses(Syntax.list([switchClause]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): SwitchStatementSyntax {\n        return this.update(this.switchKeyword, this.openParenToken, this.expression, this.closeParenToken, this.openBraceToken, this.switchClauses, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        if (this.switchClauses.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class SwitchClauseSyntax extends SyntaxNode implements ISwitchClauseSyntax {\n    constructor(public colonToken: ISyntaxToken,\n                public statements: ISyntaxList,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n    }\n\n    private isSwitchClause(): bool {\n        return true;\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SwitchClauseSyntax {\n        return <SwitchClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SwitchClauseSyntax {\n        return <SwitchClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return false;\n    }\n    }\n\n    export class CaseSwitchClauseSyntax extends SwitchClauseSyntax {\n\n    constructor(public caseKeyword: ISyntaxToken,\n                public expression: IExpressionSyntax,\n                colonToken: ISyntaxToken,\n                statements: ISyntaxList,\n                parsedInStrictMode: bool) {\n        super(colonToken, statements, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitCaseSwitchClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.CaseSwitchClause;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.caseKeyword;\n            case 1: return this.expression;\n            case 2: return this.colonToken;\n            case 3: return this.statements;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(caseKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  colonToken: ISyntaxToken,\n                  statements: ISyntaxList): CaseSwitchClauseSyntax {\n        if (this.caseKeyword === caseKeyword && this.expression === expression && this.colonToken === colonToken && this.statements === statements) {\n            return this;\n        }\n\n        return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, statements, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(caseKeyword: ISyntaxToken,\n                         expression: IExpressionSyntax,\n                         colonToken: ISyntaxToken): CaseSwitchClauseSyntax {\n        return new CaseSwitchClauseSyntax(caseKeyword, expression, colonToken, Syntax.emptyList, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(expression: IExpressionSyntax): CaseSwitchClauseSyntax {\n        return new CaseSwitchClauseSyntax(Syntax.token(SyntaxKind.CaseKeyword), expression, Syntax.token(SyntaxKind.ColonToken), Syntax.emptyList, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): CaseSwitchClauseSyntax {\n        return <CaseSwitchClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): CaseSwitchClauseSyntax {\n        return <CaseSwitchClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withCaseKeyword(caseKeyword: ISyntaxToken): CaseSwitchClauseSyntax {\n        return this.update(caseKeyword, this.expression, this.colonToken, this.statements);\n    }\n\n    public withExpression(expression: IExpressionSyntax): CaseSwitchClauseSyntax {\n        return this.update(this.caseKeyword, expression, this.colonToken, this.statements);\n    }\n\n    public withColonToken(colonToken: ISyntaxToken): CaseSwitchClauseSyntax {\n        return this.update(this.caseKeyword, this.expression, colonToken, this.statements);\n    }\n\n    public withStatements(statements: ISyntaxList): CaseSwitchClauseSyntax {\n        return this.update(this.caseKeyword, this.expression, this.colonToken, statements);\n    }\n\n    public withStatement(statement: IStatementSyntax): CaseSwitchClauseSyntax {\n        return this.withStatements(Syntax.list([statement]));\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        if (this.statements.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class DefaultSwitchClauseSyntax extends SwitchClauseSyntax {\n\n    constructor(public defaultKeyword: ISyntaxToken,\n                colonToken: ISyntaxToken,\n                statements: ISyntaxList,\n                parsedInStrictMode: bool) {\n        super(colonToken, statements, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitDefaultSwitchClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.DefaultSwitchClause;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.defaultKeyword;\n            case 1: return this.colonToken;\n            case 2: return this.statements;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(defaultKeyword: ISyntaxToken,\n                  colonToken: ISyntaxToken,\n                  statements: ISyntaxList): DefaultSwitchClauseSyntax {\n        if (this.defaultKeyword === defaultKeyword && this.colonToken === colonToken && this.statements === statements) {\n            return this;\n        }\n\n        return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, statements, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(defaultKeyword: ISyntaxToken,\n                         colonToken: ISyntaxToken): DefaultSwitchClauseSyntax {\n        return new DefaultSwitchClauseSyntax(defaultKeyword, colonToken, Syntax.emptyList, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): DefaultSwitchClauseSyntax {\n        return new DefaultSwitchClauseSyntax(Syntax.token(SyntaxKind.DefaultKeyword), Syntax.token(SyntaxKind.ColonToken), Syntax.emptyList, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): DefaultSwitchClauseSyntax {\n        return <DefaultSwitchClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): DefaultSwitchClauseSyntax {\n        return <DefaultSwitchClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withDefaultKeyword(defaultKeyword: ISyntaxToken): DefaultSwitchClauseSyntax {\n        return this.update(defaultKeyword, this.colonToken, this.statements);\n    }\n\n    public withColonToken(colonToken: ISyntaxToken): DefaultSwitchClauseSyntax {\n        return this.update(this.defaultKeyword, colonToken, this.statements);\n    }\n\n    public withStatements(statements: ISyntaxList): DefaultSwitchClauseSyntax {\n        return this.update(this.defaultKeyword, this.colonToken, statements);\n    }\n\n    public withStatement(statement: IStatementSyntax): DefaultSwitchClauseSyntax {\n        return this.withStatements(Syntax.list([statement]));\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.statements.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class BreakStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public breakKeyword: ISyntaxToken,\n                public identifier: ISyntaxToken,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitBreakStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.BreakStatement;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.breakKeyword;\n            case 1: return this.identifier;\n            case 2: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(breakKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  semicolonToken: ISyntaxToken): BreakStatementSyntax {\n        if (this.breakKeyword === breakKeyword && this.identifier === identifier && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new BreakStatementSyntax(breakKeyword, identifier, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(breakKeyword: ISyntaxToken,\n                         semicolonToken: ISyntaxToken): BreakStatementSyntax {\n        return new BreakStatementSyntax(breakKeyword, null, semicolonToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): BreakStatementSyntax {\n        return new BreakStatementSyntax(Syntax.token(SyntaxKind.BreakKeyword), null, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): BreakStatementSyntax {\n        return <BreakStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): BreakStatementSyntax {\n        return <BreakStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withBreakKeyword(breakKeyword: ISyntaxToken): BreakStatementSyntax {\n        return this.update(breakKeyword, this.identifier, this.semicolonToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): BreakStatementSyntax {\n        return this.update(this.breakKeyword, identifier, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): BreakStatementSyntax {\n        return this.update(this.breakKeyword, this.identifier, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return false;\n    }\n    }\n\n    export class ContinueStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public continueKeyword: ISyntaxToken,\n                public identifier: ISyntaxToken,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitContinueStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ContinueStatement;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.continueKeyword;\n            case 1: return this.identifier;\n            case 2: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(continueKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  semicolonToken: ISyntaxToken): ContinueStatementSyntax {\n        if (this.continueKeyword === continueKeyword && this.identifier === identifier && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new ContinueStatementSyntax(continueKeyword, identifier, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(continueKeyword: ISyntaxToken,\n                         semicolonToken: ISyntaxToken): ContinueStatementSyntax {\n        return new ContinueStatementSyntax(continueKeyword, null, semicolonToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ContinueStatementSyntax {\n        return new ContinueStatementSyntax(Syntax.token(SyntaxKind.ContinueKeyword), null, Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ContinueStatementSyntax {\n        return <ContinueStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ContinueStatementSyntax {\n        return <ContinueStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withContinueKeyword(continueKeyword: ISyntaxToken): ContinueStatementSyntax {\n        return this.update(continueKeyword, this.identifier, this.semicolonToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): ContinueStatementSyntax {\n        return this.update(this.continueKeyword, identifier, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): ContinueStatementSyntax {\n        return this.update(this.continueKeyword, this.identifier, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return false;\n    }\n    }\n\n    export class IterationStatementSyntax extends SyntaxNode implements IStatementSyntax {\n    constructor(public openParenToken: ISyntaxToken,\n                public closeParenToken: ISyntaxToken,\n                public statement: IStatementSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): IterationStatementSyntax {\n        return <IterationStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): IterationStatementSyntax {\n        return <IterationStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return false;\n    }\n    }\n\n    export class BaseForStatementSyntax extends IterationStatementSyntax {\n    constructor(public forKeyword: ISyntaxToken,\n                openParenToken: ISyntaxToken,\n                public variableDeclaration: VariableDeclarationSyntax,\n                closeParenToken: ISyntaxToken,\n                statement: IStatementSyntax,\n                parsedInStrictMode: bool) {\n        super(openParenToken, closeParenToken, statement, parsedInStrictMode); \n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): BaseForStatementSyntax {\n        return <BaseForStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): BaseForStatementSyntax {\n        return <BaseForStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return false;\n    }\n    }\n\n    export class ForStatementSyntax extends BaseForStatementSyntax {\n\n    constructor(forKeyword: ISyntaxToken,\n                openParenToken: ISyntaxToken,\n                variableDeclaration: VariableDeclarationSyntax,\n                public initializer: IExpressionSyntax,\n                public firstSemicolonToken: ISyntaxToken,\n                public condition: IExpressionSyntax,\n                public secondSemicolonToken: ISyntaxToken,\n                public incrementor: IExpressionSyntax,\n                closeParenToken: ISyntaxToken,\n                statement: IStatementSyntax,\n                parsedInStrictMode: bool) {\n        super(forKeyword, openParenToken, variableDeclaration, closeParenToken, statement, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitForStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ForStatement;\n    }\n\n    public childCount(): number {\n        return 10;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.forKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.variableDeclaration;\n            case 3: return this.initializer;\n            case 4: return this.firstSemicolonToken;\n            case 5: return this.condition;\n            case 6: return this.secondSemicolonToken;\n            case 7: return this.incrementor;\n            case 8: return this.closeParenToken;\n            case 9: return this.statement;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(forKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  variableDeclaration: VariableDeclarationSyntax,\n                  initializer: IExpressionSyntax,\n                  firstSemicolonToken: ISyntaxToken,\n                  condition: IExpressionSyntax,\n                  secondSemicolonToken: ISyntaxToken,\n                  incrementor: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  statement: IStatementSyntax): ForStatementSyntax {\n        if (this.forKeyword === forKeyword && this.openParenToken === openParenToken && this.variableDeclaration === variableDeclaration && this.initializer === initializer && this.firstSemicolonToken === firstSemicolonToken && this.condition === condition && this.secondSemicolonToken === secondSemicolonToken && this.incrementor === incrementor && this.closeParenToken === closeParenToken && this.statement === statement) {\n            return this;\n        }\n\n        return new ForStatementSyntax(forKeyword, openParenToken, variableDeclaration, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(forKeyword: ISyntaxToken,\n                         openParenToken: ISyntaxToken,\n                         firstSemicolonToken: ISyntaxToken,\n                         secondSemicolonToken: ISyntaxToken,\n                         closeParenToken: ISyntaxToken,\n                         statement: IStatementSyntax): ForStatementSyntax {\n        return new ForStatementSyntax(forKeyword, openParenToken, null, null, firstSemicolonToken, null, secondSemicolonToken, null, closeParenToken, statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(statement: IStatementSyntax): ForStatementSyntax {\n        return new ForStatementSyntax(Syntax.token(SyntaxKind.ForKeyword), Syntax.token(SyntaxKind.OpenParenToken), null, null, Syntax.token(SyntaxKind.SemicolonToken), null, Syntax.token(SyntaxKind.SemicolonToken), null, Syntax.token(SyntaxKind.CloseParenToken), statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ForStatementSyntax {\n        return <ForStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ForStatementSyntax {\n        return <ForStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withForKeyword(forKeyword: ISyntaxToken): ForStatementSyntax {\n        return this.update(forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): ForStatementSyntax {\n        return this.update(this.forKeyword, openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withVariableDeclaration(variableDeclaration: VariableDeclarationSyntax): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withInitializer(initializer: IExpressionSyntax): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withFirstSemicolonToken(firstSemicolonToken: ISyntaxToken): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withCondition(condition: IExpressionSyntax): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withSecondSemicolonToken(secondSemicolonToken: ISyntaxToken): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, secondSemicolonToken, this.incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withIncrementor(incrementor: IExpressionSyntax): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, incrementor, this.closeParenToken, this.statement);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, closeParenToken, this.statement);\n    }\n\n    public withStatement(statement: IStatementSyntax): ForStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.initializer, this.firstSemicolonToken, this.condition, this.secondSemicolonToken, this.incrementor, this.closeParenToken, statement);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.variableDeclaration !== null && this.variableDeclaration.isTypeScriptSpecific()) { return true; }\n        if (this.initializer !== null && this.initializer.isTypeScriptSpecific()) { return true; }\n        if (this.condition !== null && this.condition.isTypeScriptSpecific()) { return true; }\n        if (this.incrementor !== null && this.incrementor.isTypeScriptSpecific()) { return true; }\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class ForInStatementSyntax extends BaseForStatementSyntax {\n\n    constructor(forKeyword: ISyntaxToken,\n                openParenToken: ISyntaxToken,\n                variableDeclaration: VariableDeclarationSyntax,\n                public left: IExpressionSyntax,\n                public inKeyword: ISyntaxToken,\n                public expression: IExpressionSyntax,\n                closeParenToken: ISyntaxToken,\n                statement: IStatementSyntax,\n                parsedInStrictMode: bool) {\n        super(forKeyword, openParenToken, variableDeclaration, closeParenToken, statement, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitForInStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ForInStatement;\n    }\n\n    public childCount(): number {\n        return 8;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.forKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.variableDeclaration;\n            case 3: return this.left;\n            case 4: return this.inKeyword;\n            case 5: return this.expression;\n            case 6: return this.closeParenToken;\n            case 7: return this.statement;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(forKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  variableDeclaration: VariableDeclarationSyntax,\n                  left: IExpressionSyntax,\n                  inKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  statement: IStatementSyntax): ForInStatementSyntax {\n        if (this.forKeyword === forKeyword && this.openParenToken === openParenToken && this.variableDeclaration === variableDeclaration && this.left === left && this.inKeyword === inKeyword && this.expression === expression && this.closeParenToken === closeParenToken && this.statement === statement) {\n            return this;\n        }\n\n        return new ForInStatementSyntax(forKeyword, openParenToken, variableDeclaration, left, inKeyword, expression, closeParenToken, statement, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(forKeyword: ISyntaxToken,\n                         openParenToken: ISyntaxToken,\n                         inKeyword: ISyntaxToken,\n                         expression: IExpressionSyntax,\n                         closeParenToken: ISyntaxToken,\n                         statement: IStatementSyntax): ForInStatementSyntax {\n        return new ForInStatementSyntax(forKeyword, openParenToken, null, null, inKeyword, expression, closeParenToken, statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(expression: IExpressionSyntax,\n                          statement: IStatementSyntax): ForInStatementSyntax {\n        return new ForInStatementSyntax(Syntax.token(SyntaxKind.ForKeyword), Syntax.token(SyntaxKind.OpenParenToken), null, null, Syntax.token(SyntaxKind.InKeyword), expression, Syntax.token(SyntaxKind.CloseParenToken), statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ForInStatementSyntax {\n        return <ForInStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ForInStatementSyntax {\n        return <ForInStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withForKeyword(forKeyword: ISyntaxToken): ForInStatementSyntax {\n        return this.update(forKeyword, this.openParenToken, this.variableDeclaration, this.left, this.inKeyword, this.expression, this.closeParenToken, this.statement);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): ForInStatementSyntax {\n        return this.update(this.forKeyword, openParenToken, this.variableDeclaration, this.left, this.inKeyword, this.expression, this.closeParenToken, this.statement);\n    }\n\n    public withVariableDeclaration(variableDeclaration: VariableDeclarationSyntax): ForInStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, variableDeclaration, this.left, this.inKeyword, this.expression, this.closeParenToken, this.statement);\n    }\n\n    public withLeft(left: IExpressionSyntax): ForInStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, left, this.inKeyword, this.expression, this.closeParenToken, this.statement);\n    }\n\n    public withInKeyword(inKeyword: ISyntaxToken): ForInStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.left, inKeyword, this.expression, this.closeParenToken, this.statement);\n    }\n\n    public withExpression(expression: IExpressionSyntax): ForInStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.left, this.inKeyword, expression, this.closeParenToken, this.statement);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): ForInStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.left, this.inKeyword, this.expression, closeParenToken, this.statement);\n    }\n\n    public withStatement(statement: IStatementSyntax): ForInStatementSyntax {\n        return this.update(this.forKeyword, this.openParenToken, this.variableDeclaration, this.left, this.inKeyword, this.expression, this.closeParenToken, statement);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.variableDeclaration !== null && this.variableDeclaration.isTypeScriptSpecific()) { return true; }\n        if (this.left !== null && this.left.isTypeScriptSpecific()) { return true; }\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class WhileStatementSyntax extends IterationStatementSyntax {\n\n    constructor(public whileKeyword: ISyntaxToken,\n                openParenToken: ISyntaxToken,\n                public condition: IExpressionSyntax,\n                closeParenToken: ISyntaxToken,\n                statement: IStatementSyntax,\n                parsedInStrictMode: bool) {\n        super(openParenToken, closeParenToken, statement, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitWhileStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.WhileStatement;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.whileKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.condition;\n            case 3: return this.closeParenToken;\n            case 4: return this.statement;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(whileKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  condition: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  statement: IStatementSyntax): WhileStatementSyntax {\n        if (this.whileKeyword === whileKeyword && this.openParenToken === openParenToken && this.condition === condition && this.closeParenToken === closeParenToken && this.statement === statement) {\n            return this;\n        }\n\n        return new WhileStatementSyntax(whileKeyword, openParenToken, condition, closeParenToken, statement, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(condition: IExpressionSyntax,\n                          statement: IStatementSyntax): WhileStatementSyntax {\n        return new WhileStatementSyntax(Syntax.token(SyntaxKind.WhileKeyword), Syntax.token(SyntaxKind.OpenParenToken), condition, Syntax.token(SyntaxKind.CloseParenToken), statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): WhileStatementSyntax {\n        return <WhileStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): WhileStatementSyntax {\n        return <WhileStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withWhileKeyword(whileKeyword: ISyntaxToken): WhileStatementSyntax {\n        return this.update(whileKeyword, this.openParenToken, this.condition, this.closeParenToken, this.statement);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): WhileStatementSyntax {\n        return this.update(this.whileKeyword, openParenToken, this.condition, this.closeParenToken, this.statement);\n    }\n\n    public withCondition(condition: IExpressionSyntax): WhileStatementSyntax {\n        return this.update(this.whileKeyword, this.openParenToken, condition, this.closeParenToken, this.statement);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): WhileStatementSyntax {\n        return this.update(this.whileKeyword, this.openParenToken, this.condition, closeParenToken, this.statement);\n    }\n\n    public withStatement(statement: IStatementSyntax): WhileStatementSyntax {\n        return this.update(this.whileKeyword, this.openParenToken, this.condition, this.closeParenToken, statement);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.condition.isTypeScriptSpecific()) { return true; }\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class WithStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public withKeyword: ISyntaxToken,\n                public openParenToken: ISyntaxToken,\n                public condition: IExpressionSyntax,\n                public closeParenToken: ISyntaxToken,\n                public statement: IStatementSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitWithStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.WithStatement;\n    }\n\n    public childCount(): number {\n        return 5;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.withKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.condition;\n            case 3: return this.closeParenToken;\n            case 4: return this.statement;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(withKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  condition: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  statement: IStatementSyntax): WithStatementSyntax {\n        if (this.withKeyword === withKeyword && this.openParenToken === openParenToken && this.condition === condition && this.closeParenToken === closeParenToken && this.statement === statement) {\n            return this;\n        }\n\n        return new WithStatementSyntax(withKeyword, openParenToken, condition, closeParenToken, statement, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(condition: IExpressionSyntax,\n                          statement: IStatementSyntax): WithStatementSyntax {\n        return new WithStatementSyntax(Syntax.token(SyntaxKind.WithKeyword), Syntax.token(SyntaxKind.OpenParenToken), condition, Syntax.token(SyntaxKind.CloseParenToken), statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): WithStatementSyntax {\n        return <WithStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): WithStatementSyntax {\n        return <WithStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withWithKeyword(withKeyword: ISyntaxToken): WithStatementSyntax {\n        return this.update(withKeyword, this.openParenToken, this.condition, this.closeParenToken, this.statement);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): WithStatementSyntax {\n        return this.update(this.withKeyword, openParenToken, this.condition, this.closeParenToken, this.statement);\n    }\n\n    public withCondition(condition: IExpressionSyntax): WithStatementSyntax {\n        return this.update(this.withKeyword, this.openParenToken, condition, this.closeParenToken, this.statement);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): WithStatementSyntax {\n        return this.update(this.withKeyword, this.openParenToken, this.condition, closeParenToken, this.statement);\n    }\n\n    public withStatement(statement: IStatementSyntax): WithStatementSyntax {\n        return this.update(this.withKeyword, this.openParenToken, this.condition, this.closeParenToken, statement);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.condition.isTypeScriptSpecific()) { return true; }\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class EnumDeclarationSyntax extends SyntaxNode implements IModuleElementSyntax {\n\n    constructor(public modifiers: ISyntaxList,\n                public enumKeyword: ISyntaxToken,\n                public identifier: ISyntaxToken,\n                public openBraceToken: ISyntaxToken,\n                public enumElements: ISeparatedSyntaxList,\n                public closeBraceToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitEnumDeclaration(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.EnumDeclaration;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.modifiers;\n            case 1: return this.enumKeyword;\n            case 2: return this.identifier;\n            case 3: return this.openBraceToken;\n            case 4: return this.enumElements;\n            case 5: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(modifiers: ISyntaxList,\n                  enumKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  openBraceToken: ISyntaxToken,\n                  enumElements: ISeparatedSyntaxList,\n                  closeBraceToken: ISyntaxToken): EnumDeclarationSyntax {\n        if (this.modifiers === modifiers && this.enumKeyword === enumKeyword && this.identifier === identifier && this.openBraceToken === openBraceToken && this.enumElements === enumElements && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new EnumDeclarationSyntax(modifiers, enumKeyword, identifier, openBraceToken, enumElements, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(enumKeyword: ISyntaxToken,\n                         identifier: ISyntaxToken,\n                         openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): EnumDeclarationSyntax {\n        return new EnumDeclarationSyntax(Syntax.emptyList, enumKeyword, identifier, openBraceToken, Syntax.emptySeparatedList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): EnumDeclarationSyntax {\n        return new EnumDeclarationSyntax(Syntax.emptyList, Syntax.token(SyntaxKind.EnumKeyword), identifier, Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): EnumDeclarationSyntax {\n        return <EnumDeclarationSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): EnumDeclarationSyntax {\n        return <EnumDeclarationSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withModifiers(modifiers: ISyntaxList): EnumDeclarationSyntax {\n        return this.update(modifiers, this.enumKeyword, this.identifier, this.openBraceToken, this.enumElements, this.closeBraceToken);\n    }\n\n    public withModifier(modifier: ISyntaxToken): EnumDeclarationSyntax {\n        return this.withModifiers(Syntax.list([modifier]));\n    }\n\n    public withEnumKeyword(enumKeyword: ISyntaxToken): EnumDeclarationSyntax {\n        return this.update(this.modifiers, enumKeyword, this.identifier, this.openBraceToken, this.enumElements, this.closeBraceToken);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): EnumDeclarationSyntax {\n        return this.update(this.modifiers, this.enumKeyword, identifier, this.openBraceToken, this.enumElements, this.closeBraceToken);\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): EnumDeclarationSyntax {\n        return this.update(this.modifiers, this.enumKeyword, this.identifier, openBraceToken, this.enumElements, this.closeBraceToken);\n    }\n\n    public withEnumElements(enumElements: ISeparatedSyntaxList): EnumDeclarationSyntax {\n        return this.update(this.modifiers, this.enumKeyword, this.identifier, this.openBraceToken, enumElements, this.closeBraceToken);\n    }\n\n    public withEnumElement(enumElement: EnumElementSyntax): EnumDeclarationSyntax {\n        return this.withEnumElements(Syntax.separatedList([enumElement]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): EnumDeclarationSyntax {\n        return this.update(this.modifiers, this.enumKeyword, this.identifier, this.openBraceToken, this.enumElements, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class EnumElementSyntax extends SyntaxNode {\n\n    constructor(public propertyName: ISyntaxToken,\n                public equalsValueClause: EqualsValueClauseSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitEnumElement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.EnumElement;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.propertyName;\n            case 1: return this.equalsValueClause;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(propertyName: ISyntaxToken,\n                  equalsValueClause: EqualsValueClauseSyntax): EnumElementSyntax {\n        if (this.propertyName === propertyName && this.equalsValueClause === equalsValueClause) {\n            return this;\n        }\n\n        return new EnumElementSyntax(propertyName, equalsValueClause, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(propertyName: ISyntaxToken): EnumElementSyntax {\n        return new EnumElementSyntax(propertyName, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): EnumElementSyntax {\n        return new EnumElementSyntax(propertyName, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): EnumElementSyntax {\n        return <EnumElementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): EnumElementSyntax {\n        return <EnumElementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): EnumElementSyntax {\n        return this.update(propertyName, this.equalsValueClause);\n    }\n\n    public withEqualsValueClause(equalsValueClause: EqualsValueClauseSyntax): EnumElementSyntax {\n        return this.update(this.propertyName, equalsValueClause);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.equalsValueClause !== null && this.equalsValueClause.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class CastExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n    constructor(public lessThanToken: ISyntaxToken,\n                public type: ITypeSyntax,\n                public greaterThanToken: ISyntaxToken,\n                public expression: IUnaryExpressionSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitCastExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.CastExpression;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.lessThanToken;\n            case 1: return this.type;\n            case 2: return this.greaterThanToken;\n            case 3: return this.expression;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(lessThanToken: ISyntaxToken,\n                  type: ITypeSyntax,\n                  greaterThanToken: ISyntaxToken,\n                  expression: IUnaryExpressionSyntax): CastExpressionSyntax {\n        if (this.lessThanToken === lessThanToken && this.type === type && this.greaterThanToken === greaterThanToken && this.expression === expression) {\n            return this;\n        }\n\n        return new CastExpressionSyntax(lessThanToken, type, greaterThanToken, expression, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(type: ITypeSyntax,\n                          expression: IUnaryExpressionSyntax): CastExpressionSyntax {\n        return new CastExpressionSyntax(Syntax.token(SyntaxKind.LessThanToken), type, Syntax.token(SyntaxKind.GreaterThanToken), expression, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): CastExpressionSyntax {\n        return <CastExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): CastExpressionSyntax {\n        return <CastExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withLessThanToken(lessThanToken: ISyntaxToken): CastExpressionSyntax {\n        return this.update(lessThanToken, this.type, this.greaterThanToken, this.expression);\n    }\n\n    public withType(type: ITypeSyntax): CastExpressionSyntax {\n        return this.update(this.lessThanToken, type, this.greaterThanToken, this.expression);\n    }\n\n    public withGreaterThanToken(greaterThanToken: ISyntaxToken): CastExpressionSyntax {\n        return this.update(this.lessThanToken, this.type, greaterThanToken, this.expression);\n    }\n\n    public withExpression(expression: IUnaryExpressionSyntax): CastExpressionSyntax {\n        return this.update(this.lessThanToken, this.type, this.greaterThanToken, expression);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return true;\n    }\n    }\n\n    export class ObjectLiteralExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n    constructor(public openBraceToken: ISyntaxToken,\n                public propertyAssignments: ISeparatedSyntaxList,\n                public closeBraceToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitObjectLiteralExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.ObjectLiteralExpression;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.openBraceToken;\n            case 1: return this.propertyAssignments;\n            case 2: return this.closeBraceToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(openBraceToken: ISyntaxToken,\n                  propertyAssignments: ISeparatedSyntaxList,\n                  closeBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax {\n        if (this.openBraceToken === openBraceToken && this.propertyAssignments === propertyAssignments && this.closeBraceToken === closeBraceToken) {\n            return this;\n        }\n\n        return new ObjectLiteralExpressionSyntax(openBraceToken, propertyAssignments, closeBraceToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(openBraceToken: ISyntaxToken,\n                         closeBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax {\n        return new ObjectLiteralExpressionSyntax(openBraceToken, Syntax.emptySeparatedList, closeBraceToken, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): ObjectLiteralExpressionSyntax {\n        return new ObjectLiteralExpressionSyntax(Syntax.token(SyntaxKind.OpenBraceToken), Syntax.emptySeparatedList, Syntax.token(SyntaxKind.CloseBraceToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): ObjectLiteralExpressionSyntax {\n        return <ObjectLiteralExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): ObjectLiteralExpressionSyntax {\n        return <ObjectLiteralExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withOpenBraceToken(openBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax {\n        return this.update(openBraceToken, this.propertyAssignments, this.closeBraceToken);\n    }\n\n    public withPropertyAssignments(propertyAssignments: ISeparatedSyntaxList): ObjectLiteralExpressionSyntax {\n        return this.update(this.openBraceToken, propertyAssignments, this.closeBraceToken);\n    }\n\n    public withPropertyAssignment(propertyAssignment: PropertyAssignmentSyntax): ObjectLiteralExpressionSyntax {\n        return this.withPropertyAssignments(Syntax.separatedList([propertyAssignment]));\n    }\n\n    public withCloseBraceToken(closeBraceToken: ISyntaxToken): ObjectLiteralExpressionSyntax {\n        return this.update(this.openBraceToken, this.propertyAssignments, closeBraceToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.propertyAssignments.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class PropertyAssignmentSyntax extends SyntaxNode {\n    constructor(public propertyName: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): PropertyAssignmentSyntax {\n        return <PropertyAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): PropertyAssignmentSyntax {\n        return <PropertyAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return false;\n    }\n    }\n\n    export class SimplePropertyAssignmentSyntax extends PropertyAssignmentSyntax {\n\n    constructor(propertyName: ISyntaxToken,\n                public colonToken: ISyntaxToken,\n                public expression: IExpressionSyntax,\n                parsedInStrictMode: bool) {\n        super(propertyName, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitSimplePropertyAssignment(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.SimplePropertyAssignment;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.propertyName;\n            case 1: return this.colonToken;\n            case 2: return this.expression;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(propertyName: ISyntaxToken,\n                  colonToken: ISyntaxToken,\n                  expression: IExpressionSyntax): SimplePropertyAssignmentSyntax {\n        if (this.propertyName === propertyName && this.colonToken === colonToken && this.expression === expression) {\n            return this;\n        }\n\n        return new SimplePropertyAssignmentSyntax(propertyName, colonToken, expression, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(propertyName: ISyntaxToken,\n                          expression: IExpressionSyntax): SimplePropertyAssignmentSyntax {\n        return new SimplePropertyAssignmentSyntax(propertyName, Syntax.token(SyntaxKind.ColonToken), expression, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SimplePropertyAssignmentSyntax {\n        return <SimplePropertyAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SimplePropertyAssignmentSyntax {\n        return <SimplePropertyAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): SimplePropertyAssignmentSyntax {\n        return this.update(propertyName, this.colonToken, this.expression);\n    }\n\n    public withColonToken(colonToken: ISyntaxToken): SimplePropertyAssignmentSyntax {\n        return this.update(this.propertyName, colonToken, this.expression);\n    }\n\n    public withExpression(expression: IExpressionSyntax): SimplePropertyAssignmentSyntax {\n        return this.update(this.propertyName, this.colonToken, expression);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class AccessorPropertyAssignmentSyntax extends PropertyAssignmentSyntax {\n    constructor(propertyName: ISyntaxToken,\n                public openParenToken: ISyntaxToken,\n                public closeParenToken: ISyntaxToken,\n                public block: BlockSyntax,\n                parsedInStrictMode: bool) {\n        super(propertyName, parsedInStrictMode); \n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): AccessorPropertyAssignmentSyntax {\n        return <AccessorPropertyAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): AccessorPropertyAssignmentSyntax {\n        return <AccessorPropertyAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return false;\n    }\n    }\n\n    export class GetAccessorPropertyAssignmentSyntax extends AccessorPropertyAssignmentSyntax {\n\n    constructor(public getKeyword: ISyntaxToken,\n                propertyName: ISyntaxToken,\n                openParenToken: ISyntaxToken,\n                closeParenToken: ISyntaxToken,\n                public typeAnnotation: TypeAnnotationSyntax,\n                block: BlockSyntax,\n                parsedInStrictMode: bool) {\n        super(propertyName, openParenToken, closeParenToken, block, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitGetAccessorPropertyAssignment(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.GetAccessorPropertyAssignment;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.getKeyword;\n            case 1: return this.propertyName;\n            case 2: return this.openParenToken;\n            case 3: return this.closeParenToken;\n            case 4: return this.typeAnnotation;\n            case 5: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(getKeyword: ISyntaxToken,\n                  propertyName: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  closeParenToken: ISyntaxToken,\n                  typeAnnotation: TypeAnnotationSyntax,\n                  block: BlockSyntax): GetAccessorPropertyAssignmentSyntax {\n        if (this.getKeyword === getKeyword && this.propertyName === propertyName && this.openParenToken === openParenToken && this.closeParenToken === closeParenToken && this.typeAnnotation === typeAnnotation && this.block === block) {\n            return this;\n        }\n\n        return new GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, typeAnnotation, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(getKeyword: ISyntaxToken,\n                         propertyName: ISyntaxToken,\n                         openParenToken: ISyntaxToken,\n                         closeParenToken: ISyntaxToken,\n                         block: BlockSyntax): GetAccessorPropertyAssignmentSyntax {\n        return new GetAccessorPropertyAssignmentSyntax(getKeyword, propertyName, openParenToken, closeParenToken, null, block, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(propertyName: ISyntaxToken): GetAccessorPropertyAssignmentSyntax {\n        return new GetAccessorPropertyAssignmentSyntax(Syntax.token(SyntaxKind.GetKeyword), propertyName, Syntax.token(SyntaxKind.OpenParenToken), Syntax.token(SyntaxKind.CloseParenToken), null, BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): GetAccessorPropertyAssignmentSyntax {\n        return <GetAccessorPropertyAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): GetAccessorPropertyAssignmentSyntax {\n        return <GetAccessorPropertyAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withGetKeyword(getKeyword: ISyntaxToken): GetAccessorPropertyAssignmentSyntax {\n        return this.update(getKeyword, this.propertyName, this.openParenToken, this.closeParenToken, this.typeAnnotation, this.block);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): GetAccessorPropertyAssignmentSyntax {\n        return this.update(this.getKeyword, propertyName, this.openParenToken, this.closeParenToken, this.typeAnnotation, this.block);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): GetAccessorPropertyAssignmentSyntax {\n        return this.update(this.getKeyword, this.propertyName, openParenToken, this.closeParenToken, this.typeAnnotation, this.block);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): GetAccessorPropertyAssignmentSyntax {\n        return this.update(this.getKeyword, this.propertyName, this.openParenToken, closeParenToken, this.typeAnnotation, this.block);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): GetAccessorPropertyAssignmentSyntax {\n        return this.update(this.getKeyword, this.propertyName, this.openParenToken, this.closeParenToken, typeAnnotation, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): GetAccessorPropertyAssignmentSyntax {\n        return this.update(this.getKeyword, this.propertyName, this.openParenToken, this.closeParenToken, this.typeAnnotation, block);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.typeAnnotation !== null && this.typeAnnotation.isTypeScriptSpecific()) { return true; }\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class SetAccessorPropertyAssignmentSyntax extends AccessorPropertyAssignmentSyntax {\n\n    constructor(public setKeyword: ISyntaxToken,\n                propertyName: ISyntaxToken,\n                openParenToken: ISyntaxToken,\n                public parameter: ParameterSyntax,\n                closeParenToken: ISyntaxToken,\n                block: BlockSyntax,\n                parsedInStrictMode: bool) {\n        super(propertyName, openParenToken, closeParenToken, block, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitSetAccessorPropertyAssignment(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.SetAccessorPropertyAssignment;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.setKeyword;\n            case 1: return this.propertyName;\n            case 2: return this.openParenToken;\n            case 3: return this.parameter;\n            case 4: return this.closeParenToken;\n            case 5: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(setKeyword: ISyntaxToken,\n                  propertyName: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  parameter: ParameterSyntax,\n                  closeParenToken: ISyntaxToken,\n                  block: BlockSyntax): SetAccessorPropertyAssignmentSyntax {\n        if (this.setKeyword === setKeyword && this.propertyName === propertyName && this.openParenToken === openParenToken && this.parameter === parameter && this.closeParenToken === closeParenToken && this.block === block) {\n            return this;\n        }\n\n        return new SetAccessorPropertyAssignmentSyntax(setKeyword, propertyName, openParenToken, parameter, closeParenToken, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(propertyName: ISyntaxToken,\n                          parameter: ParameterSyntax): SetAccessorPropertyAssignmentSyntax {\n        return new SetAccessorPropertyAssignmentSyntax(Syntax.token(SyntaxKind.SetKeyword), propertyName, Syntax.token(SyntaxKind.OpenParenToken), parameter, Syntax.token(SyntaxKind.CloseParenToken), BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): SetAccessorPropertyAssignmentSyntax {\n        return <SetAccessorPropertyAssignmentSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): SetAccessorPropertyAssignmentSyntax {\n        return <SetAccessorPropertyAssignmentSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withSetKeyword(setKeyword: ISyntaxToken): SetAccessorPropertyAssignmentSyntax {\n        return this.update(setKeyword, this.propertyName, this.openParenToken, this.parameter, this.closeParenToken, this.block);\n    }\n\n    public withPropertyName(propertyName: ISyntaxToken): SetAccessorPropertyAssignmentSyntax {\n        return this.update(this.setKeyword, propertyName, this.openParenToken, this.parameter, this.closeParenToken, this.block);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): SetAccessorPropertyAssignmentSyntax {\n        return this.update(this.setKeyword, this.propertyName, openParenToken, this.parameter, this.closeParenToken, this.block);\n    }\n\n    public withParameter(parameter: ParameterSyntax): SetAccessorPropertyAssignmentSyntax {\n        return this.update(this.setKeyword, this.propertyName, this.openParenToken, parameter, this.closeParenToken, this.block);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): SetAccessorPropertyAssignmentSyntax {\n        return this.update(this.setKeyword, this.propertyName, this.openParenToken, this.parameter, closeParenToken, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): SetAccessorPropertyAssignmentSyntax {\n        return this.update(this.setKeyword, this.propertyName, this.openParenToken, this.parameter, this.closeParenToken, block);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.parameter.isTypeScriptSpecific()) { return true; }\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class FunctionExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n    constructor(public functionKeyword: ISyntaxToken,\n                public identifier: ISyntaxToken,\n                public callSignature: CallSignatureSyntax,\n                public block: BlockSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitFunctionExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.FunctionExpression;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.functionKeyword;\n            case 1: return this.identifier;\n            case 2: return this.callSignature;\n            case 3: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(functionKeyword: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  callSignature: CallSignatureSyntax,\n                  block: BlockSyntax): FunctionExpressionSyntax {\n        if (this.functionKeyword === functionKeyword && this.identifier === identifier && this.callSignature === callSignature && this.block === block) {\n            return this;\n        }\n\n        return new FunctionExpressionSyntax(functionKeyword, identifier, callSignature, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(functionKeyword: ISyntaxToken,\n                         callSignature: CallSignatureSyntax,\n                         block: BlockSyntax): FunctionExpressionSyntax {\n        return new FunctionExpressionSyntax(functionKeyword, null, callSignature, block, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): FunctionExpressionSyntax {\n        return new FunctionExpressionSyntax(Syntax.token(SyntaxKind.FunctionKeyword), null, CallSignatureSyntax.create1(), BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): FunctionExpressionSyntax {\n        return <FunctionExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): FunctionExpressionSyntax {\n        return <FunctionExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withFunctionKeyword(functionKeyword: ISyntaxToken): FunctionExpressionSyntax {\n        return this.update(functionKeyword, this.identifier, this.callSignature, this.block);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): FunctionExpressionSyntax {\n        return this.update(this.functionKeyword, identifier, this.callSignature, this.block);\n    }\n\n    public withCallSignature(callSignature: CallSignatureSyntax): FunctionExpressionSyntax {\n        return this.update(this.functionKeyword, this.identifier, callSignature, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): FunctionExpressionSyntax {\n        return this.update(this.functionKeyword, this.identifier, this.callSignature, block);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.callSignature.isTypeScriptSpecific()) { return true; }\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class EmptyStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitEmptyStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.EmptyStatement;\n    }\n\n    public childCount(): number {\n        return 1;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(semicolonToken: ISyntaxToken): EmptyStatementSyntax {\n        if (this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new EmptyStatementSyntax(semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(): EmptyStatementSyntax {\n        return new EmptyStatementSyntax(Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): EmptyStatementSyntax {\n        return <EmptyStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): EmptyStatementSyntax {\n        return <EmptyStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): EmptyStatementSyntax {\n        return this.update(semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return false;\n    }\n    }\n\n    export class TryStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public tryKeyword: ISyntaxToken,\n                public block: BlockSyntax,\n                public catchClause: CatchClauseSyntax,\n                public finallyClause: FinallyClauseSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitTryStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.TryStatement;\n    }\n\n    public childCount(): number {\n        return 4;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.tryKeyword;\n            case 1: return this.block;\n            case 2: return this.catchClause;\n            case 3: return this.finallyClause;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(tryKeyword: ISyntaxToken,\n                  block: BlockSyntax,\n                  catchClause: CatchClauseSyntax,\n                  finallyClause: FinallyClauseSyntax): TryStatementSyntax {\n        if (this.tryKeyword === tryKeyword && this.block === block && this.catchClause === catchClause && this.finallyClause === finallyClause) {\n            return this;\n        }\n\n        return new TryStatementSyntax(tryKeyword, block, catchClause, finallyClause, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(tryKeyword: ISyntaxToken,\n                         block: BlockSyntax): TryStatementSyntax {\n        return new TryStatementSyntax(tryKeyword, block, null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(): TryStatementSyntax {\n        return new TryStatementSyntax(Syntax.token(SyntaxKind.TryKeyword), BlockSyntax.create1(), null, null, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): TryStatementSyntax {\n        return <TryStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): TryStatementSyntax {\n        return <TryStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withTryKeyword(tryKeyword: ISyntaxToken): TryStatementSyntax {\n        return this.update(tryKeyword, this.block, this.catchClause, this.finallyClause);\n    }\n\n    public withBlock(block: BlockSyntax): TryStatementSyntax {\n        return this.update(this.tryKeyword, block, this.catchClause, this.finallyClause);\n    }\n\n    public withCatchClause(catchClause: CatchClauseSyntax): TryStatementSyntax {\n        return this.update(this.tryKeyword, this.block, catchClause, this.finallyClause);\n    }\n\n    public withFinallyClause(finallyClause: FinallyClauseSyntax): TryStatementSyntax {\n        return this.update(this.tryKeyword, this.block, this.catchClause, finallyClause);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        if (this.catchClause !== null && this.catchClause.isTypeScriptSpecific()) { return true; }\n        if (this.finallyClause !== null && this.finallyClause.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class CatchClauseSyntax extends SyntaxNode {\n\n    constructor(public catchKeyword: ISyntaxToken,\n                public openParenToken: ISyntaxToken,\n                public identifier: ISyntaxToken,\n                public typeAnnotation: TypeAnnotationSyntax,\n                public closeParenToken: ISyntaxToken,\n                public block: BlockSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitCatchClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.CatchClause;\n    }\n\n    public childCount(): number {\n        return 6;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.catchKeyword;\n            case 1: return this.openParenToken;\n            case 2: return this.identifier;\n            case 3: return this.typeAnnotation;\n            case 4: return this.closeParenToken;\n            case 5: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(catchKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  identifier: ISyntaxToken,\n                  typeAnnotation: TypeAnnotationSyntax,\n                  closeParenToken: ISyntaxToken,\n                  block: BlockSyntax): CatchClauseSyntax {\n        if (this.catchKeyword === catchKeyword && this.openParenToken === openParenToken && this.identifier === identifier && this.typeAnnotation === typeAnnotation && this.closeParenToken === closeParenToken && this.block === block) {\n            return this;\n        }\n\n        return new CatchClauseSyntax(catchKeyword, openParenToken, identifier, typeAnnotation, closeParenToken, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create(catchKeyword: ISyntaxToken,\n                         openParenToken: ISyntaxToken,\n                         identifier: ISyntaxToken,\n                         closeParenToken: ISyntaxToken,\n                         block: BlockSyntax): CatchClauseSyntax {\n        return new CatchClauseSyntax(catchKeyword, openParenToken, identifier, null, closeParenToken, block, /*parsedInStrictMode:*/ false);\n    }\n\n    public static create1(identifier: ISyntaxToken): CatchClauseSyntax {\n        return new CatchClauseSyntax(Syntax.token(SyntaxKind.CatchKeyword), Syntax.token(SyntaxKind.OpenParenToken), identifier, null, Syntax.token(SyntaxKind.CloseParenToken), BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): CatchClauseSyntax {\n        return <CatchClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): CatchClauseSyntax {\n        return <CatchClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withCatchKeyword(catchKeyword: ISyntaxToken): CatchClauseSyntax {\n        return this.update(catchKeyword, this.openParenToken, this.identifier, this.typeAnnotation, this.closeParenToken, this.block);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): CatchClauseSyntax {\n        return this.update(this.catchKeyword, openParenToken, this.identifier, this.typeAnnotation, this.closeParenToken, this.block);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): CatchClauseSyntax {\n        return this.update(this.catchKeyword, this.openParenToken, identifier, this.typeAnnotation, this.closeParenToken, this.block);\n    }\n\n    public withTypeAnnotation(typeAnnotation: TypeAnnotationSyntax): CatchClauseSyntax {\n        return this.update(this.catchKeyword, this.openParenToken, this.identifier, typeAnnotation, this.closeParenToken, this.block);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): CatchClauseSyntax {\n        return this.update(this.catchKeyword, this.openParenToken, this.identifier, this.typeAnnotation, closeParenToken, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): CatchClauseSyntax {\n        return this.update(this.catchKeyword, this.openParenToken, this.identifier, this.typeAnnotation, this.closeParenToken, block);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.typeAnnotation !== null && this.typeAnnotation.isTypeScriptSpecific()) { return true; }\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class FinallyClauseSyntax extends SyntaxNode {\n\n    constructor(public finallyKeyword: ISyntaxToken,\n                public block: BlockSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitFinallyClause(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.FinallyClause;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.finallyKeyword;\n            case 1: return this.block;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(finallyKeyword: ISyntaxToken,\n                  block: BlockSyntax): FinallyClauseSyntax {\n        if (this.finallyKeyword === finallyKeyword && this.block === block) {\n            return this;\n        }\n\n        return new FinallyClauseSyntax(finallyKeyword, block, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(): FinallyClauseSyntax {\n        return new FinallyClauseSyntax(Syntax.token(SyntaxKind.FinallyKeyword), BlockSyntax.create1(), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): FinallyClauseSyntax {\n        return <FinallyClauseSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): FinallyClauseSyntax {\n        return <FinallyClauseSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withFinallyKeyword(finallyKeyword: ISyntaxToken): FinallyClauseSyntax {\n        return this.update(finallyKeyword, this.block);\n    }\n\n    public withBlock(block: BlockSyntax): FinallyClauseSyntax {\n        return this.update(this.finallyKeyword, block);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.block.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class LabeledStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public identifier: ISyntaxToken,\n                public colonToken: ISyntaxToken,\n                public statement: IStatementSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitLabeledStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.LabeledStatement;\n    }\n\n    public childCount(): number {\n        return 3;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.identifier;\n            case 1: return this.colonToken;\n            case 2: return this.statement;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(identifier: ISyntaxToken,\n                  colonToken: ISyntaxToken,\n                  statement: IStatementSyntax): LabeledStatementSyntax {\n        if (this.identifier === identifier && this.colonToken === colonToken && this.statement === statement) {\n            return this;\n        }\n\n        return new LabeledStatementSyntax(identifier, colonToken, statement, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(identifier: ISyntaxToken,\n                          statement: IStatementSyntax): LabeledStatementSyntax {\n        return new LabeledStatementSyntax(identifier, Syntax.token(SyntaxKind.ColonToken), statement, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): LabeledStatementSyntax {\n        return <LabeledStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): LabeledStatementSyntax {\n        return <LabeledStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withIdentifier(identifier: ISyntaxToken): LabeledStatementSyntax {\n        return this.update(identifier, this.colonToken, this.statement);\n    }\n\n    public withColonToken(colonToken: ISyntaxToken): LabeledStatementSyntax {\n        return this.update(this.identifier, colonToken, this.statement);\n    }\n\n    public withStatement(statement: IStatementSyntax): LabeledStatementSyntax {\n        return this.update(this.identifier, this.colonToken, statement);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class DoStatementSyntax extends IterationStatementSyntax {\n\n    constructor(public doKeyword: ISyntaxToken,\n                statement: IStatementSyntax,\n                public whileKeyword: ISyntaxToken,\n                openParenToken: ISyntaxToken,\n                public condition: IExpressionSyntax,\n                closeParenToken: ISyntaxToken,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(openParenToken, closeParenToken, statement, parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitDoStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.DoStatement;\n    }\n\n    public childCount(): number {\n        return 7;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.doKeyword;\n            case 1: return this.statement;\n            case 2: return this.whileKeyword;\n            case 3: return this.openParenToken;\n            case 4: return this.condition;\n            case 5: return this.closeParenToken;\n            case 6: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    public update(doKeyword: ISyntaxToken,\n                  statement: IStatementSyntax,\n                  whileKeyword: ISyntaxToken,\n                  openParenToken: ISyntaxToken,\n                  condition: IExpressionSyntax,\n                  closeParenToken: ISyntaxToken,\n                  semicolonToken: ISyntaxToken): DoStatementSyntax {\n        if (this.doKeyword === doKeyword && this.statement === statement && this.whileKeyword === whileKeyword && this.openParenToken === openParenToken && this.condition === condition && this.closeParenToken === closeParenToken && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new DoStatementSyntax(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(statement: IStatementSyntax,\n                          condition: IExpressionSyntax): DoStatementSyntax {\n        return new DoStatementSyntax(Syntax.token(SyntaxKind.DoKeyword), statement, Syntax.token(SyntaxKind.WhileKeyword), Syntax.token(SyntaxKind.OpenParenToken), condition, Syntax.token(SyntaxKind.CloseParenToken), Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): DoStatementSyntax {\n        return <DoStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): DoStatementSyntax {\n        return <DoStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withDoKeyword(doKeyword: ISyntaxToken): DoStatementSyntax {\n        return this.update(doKeyword, this.statement, this.whileKeyword, this.openParenToken, this.condition, this.closeParenToken, this.semicolonToken);\n    }\n\n    public withStatement(statement: IStatementSyntax): DoStatementSyntax {\n        return this.update(this.doKeyword, statement, this.whileKeyword, this.openParenToken, this.condition, this.closeParenToken, this.semicolonToken);\n    }\n\n    public withWhileKeyword(whileKeyword: ISyntaxToken): DoStatementSyntax {\n        return this.update(this.doKeyword, this.statement, whileKeyword, this.openParenToken, this.condition, this.closeParenToken, this.semicolonToken);\n    }\n\n    public withOpenParenToken(openParenToken: ISyntaxToken): DoStatementSyntax {\n        return this.update(this.doKeyword, this.statement, this.whileKeyword, openParenToken, this.condition, this.closeParenToken, this.semicolonToken);\n    }\n\n    public withCondition(condition: IExpressionSyntax): DoStatementSyntax {\n        return this.update(this.doKeyword, this.statement, this.whileKeyword, this.openParenToken, condition, this.closeParenToken, this.semicolonToken);\n    }\n\n    public withCloseParenToken(closeParenToken: ISyntaxToken): DoStatementSyntax {\n        return this.update(this.doKeyword, this.statement, this.whileKeyword, this.openParenToken, this.condition, closeParenToken, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): DoStatementSyntax {\n        return this.update(this.doKeyword, this.statement, this.whileKeyword, this.openParenToken, this.condition, this.closeParenToken, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.statement.isTypeScriptSpecific()) { return true; }\n        if (this.condition.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class TypeOfExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n    constructor(public typeOfKeyword: ISyntaxToken,\n                public expression: IExpressionSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitTypeOfExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.TypeOfExpression;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.typeOfKeyword;\n            case 1: return this.expression;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(typeOfKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax): TypeOfExpressionSyntax {\n        if (this.typeOfKeyword === typeOfKeyword && this.expression === expression) {\n            return this;\n        }\n\n        return new TypeOfExpressionSyntax(typeOfKeyword, expression, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): TypeOfExpressionSyntax {\n        return new TypeOfExpressionSyntax(Syntax.token(SyntaxKind.TypeOfKeyword), expression, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): TypeOfExpressionSyntax {\n        return <TypeOfExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): TypeOfExpressionSyntax {\n        return <TypeOfExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withTypeOfKeyword(typeOfKeyword: ISyntaxToken): TypeOfExpressionSyntax {\n        return this.update(typeOfKeyword, this.expression);\n    }\n\n    public withExpression(expression: IExpressionSyntax): TypeOfExpressionSyntax {\n        return this.update(this.typeOfKeyword, expression);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class DeleteExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n    constructor(public deleteKeyword: ISyntaxToken,\n                public expression: IExpressionSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitDeleteExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.DeleteExpression;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.deleteKeyword;\n            case 1: return this.expression;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(deleteKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax): DeleteExpressionSyntax {\n        if (this.deleteKeyword === deleteKeyword && this.expression === expression) {\n            return this;\n        }\n\n        return new DeleteExpressionSyntax(deleteKeyword, expression, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): DeleteExpressionSyntax {\n        return new DeleteExpressionSyntax(Syntax.token(SyntaxKind.DeleteKeyword), expression, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): DeleteExpressionSyntax {\n        return <DeleteExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): DeleteExpressionSyntax {\n        return <DeleteExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withDeleteKeyword(deleteKeyword: ISyntaxToken): DeleteExpressionSyntax {\n        return this.update(deleteKeyword, this.expression);\n    }\n\n    public withExpression(expression: IExpressionSyntax): DeleteExpressionSyntax {\n        return this.update(this.deleteKeyword, expression);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class VoidExpressionSyntax extends SyntaxNode implements IUnaryExpressionSyntax {\n\n    constructor(public voidKeyword: ISyntaxToken,\n                public expression: IExpressionSyntax,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitVoidExpression(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.VoidExpression;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.voidKeyword;\n            case 1: return this.expression;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isUnaryExpression(): bool {\n        return true;\n    }\n\n    private isExpression(): bool {\n        return true;\n    }\n\n    public update(voidKeyword: ISyntaxToken,\n                  expression: IExpressionSyntax): VoidExpressionSyntax {\n        if (this.voidKeyword === voidKeyword && this.expression === expression) {\n            return this;\n        }\n\n        return new VoidExpressionSyntax(voidKeyword, expression, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(expression: IExpressionSyntax): VoidExpressionSyntax {\n        return new VoidExpressionSyntax(Syntax.token(SyntaxKind.VoidKeyword), expression, /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): VoidExpressionSyntax {\n        return <VoidExpressionSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): VoidExpressionSyntax {\n        return <VoidExpressionSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withVoidKeyword(voidKeyword: ISyntaxToken): VoidExpressionSyntax {\n        return this.update(voidKeyword, this.expression);\n    }\n\n    public withExpression(expression: IExpressionSyntax): VoidExpressionSyntax {\n        return this.update(this.voidKeyword, expression);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        if (this.expression.isTypeScriptSpecific()) { return true; }\n        return false;\n    }\n    }\n\n    export class DebuggerStatementSyntax extends SyntaxNode implements IStatementSyntax {\n\n    constructor(public debuggerKeyword: ISyntaxToken,\n                public semicolonToken: ISyntaxToken,\n                parsedInStrictMode: bool) {\n        super(parsedInStrictMode); \n\n    }\n\n    public accept(visitor: ISyntaxVisitor): any {\n        return visitor.visitDebuggerStatement(this);\n    }\n\n    public kind(): SyntaxKind {\n        return SyntaxKind.DebuggerStatement;\n    }\n\n    public childCount(): number {\n        return 2;\n    }\n\n    public childAt(slot: number): ISyntaxElement {\n        switch (slot) {\n            case 0: return this.debuggerKeyword;\n            case 1: return this.semicolonToken;\n            default: throw Errors.invalidOperation();\n        }\n    }\n\n    private isStatement(): bool {\n        return true;\n    }\n\n    private isModuleElement(): bool {\n        return true;\n    }\n\n    public update(debuggerKeyword: ISyntaxToken,\n                  semicolonToken: ISyntaxToken): DebuggerStatementSyntax {\n        if (this.debuggerKeyword === debuggerKeyword && this.semicolonToken === semicolonToken) {\n            return this;\n        }\n\n        return new DebuggerStatementSyntax(debuggerKeyword, semicolonToken, /*parsedInStrictMode:*/ this.parsedInStrictMode());\n    }\n\n    public static create1(): DebuggerStatementSyntax {\n        return new DebuggerStatementSyntax(Syntax.token(SyntaxKind.DebuggerKeyword), Syntax.token(SyntaxKind.SemicolonToken), /*parsedInStrictMode:*/ false);\n    }\n\n    public withLeadingTrivia(trivia: ISyntaxTriviaList): DebuggerStatementSyntax {\n        return <DebuggerStatementSyntax>super.withLeadingTrivia(trivia);\n    }\n\n    public withTrailingTrivia(trivia: ISyntaxTriviaList): DebuggerStatementSyntax {\n        return <DebuggerStatementSyntax>super.withTrailingTrivia(trivia);\n    }\n\n    public withDebuggerKeyword(debuggerKeyword: ISyntaxToken): DebuggerStatementSyntax {\n        return this.update(debuggerKeyword, this.semicolonToken);\n    }\n\n    public withSemicolonToken(semicolonToken: ISyntaxToken): DebuggerStatementSyntax {\n        return this.update(this.debuggerKeyword, semicolonToken);\n    }\n\n    public isTypeScriptSpecific(): bool {\n        return false;\n    }\n    }\n}\n﻿///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class SyntaxRewriter implements ISyntaxVisitor {\n        public visitToken(token: ISyntaxToken): ISyntaxToken {\n            return token;\n        }\n\n        public visitNode(node: SyntaxNode): SyntaxNode {\n            return node.accept(this);\n        }\n\n        public visitNodeOrToken(node: ISyntaxNodeOrToken): ISyntaxNodeOrToken {\n            return node.isToken() ? <ISyntaxNodeOrToken>this.visitToken(<ISyntaxToken>node) : this.visitNode(<SyntaxNode>node);\n        }\n\n        public visitList(list: ISyntaxList): ISyntaxList {\n            var newItems: ISyntaxNodeOrToken[] = null;\n\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                var item = list.childAt(i);\n                var newItem = this.visitNodeOrToken(item);\n\n                if (item !== newItem && newItems === null) {\n                    newItems = [];\n                    for (var j = 0; j < i; j++) {\n                        newItems.push(list.childAt(j));\n                    }\n                }\n\n                if (newItems) {\n                    newItems.push(newItem);\n                }\n            }\n\n            // Debug.assert(newItems === null || newItems.length === list.childCount());\n            return newItems === null ? list : Syntax.list(newItems);\n        }\n\n        public visitSeparatedList(list: ISeparatedSyntaxList): ISeparatedSyntaxList {\n            var newItems: ISyntaxNodeOrToken[] = null;\n\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                var item = list.childAt(i);\n                var newItem = item.isToken() ? <ISyntaxNodeOrToken>this.visitToken(<ISyntaxToken>item) : this.visitNode(<SyntaxNode>item);\n\n                if (item !== newItem && newItems === null) {\n                    newItems = [];\n                    for (var j = 0; j < i; j++) {\n                        newItems.push(list.childAt(j));\n                    }\n                }\n\n                if (newItems) {\n                    newItems.push(newItem);\n                }\n            }\n\n            // Debug.assert(newItems === null || newItems.length === list.childCount());\n            return newItems === null ? list : Syntax.separatedList(newItems);\n        }\n\n        public visitSourceUnit(node: SourceUnitSyntax): any {\n            return node.update(\n                this.visitList(node.moduleElements),\n                this.visitToken(node.endOfFileToken));\n        }\n\n        public visitExternalModuleReference(node: ExternalModuleReferenceSyntax): any {\n            return node.update(\n                this.visitToken(node.moduleKeyword),\n                this.visitToken(node.openParenToken),\n                this.visitToken(node.stringLiteral),\n                this.visitToken(node.closeParenToken));\n        }\n\n        public visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): any {\n            return node.update(\n                <INameSyntax>this.visitNodeOrToken(node.moduleName));\n        }\n\n        public visitImportDeclaration(node: ImportDeclarationSyntax): any {\n            return node.update(\n                this.visitToken(node.importKeyword),\n                this.visitToken(node.identifier),\n                this.visitToken(node.equalsToken),\n                <ModuleReferenceSyntax>this.visitNode(node.moduleReference),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitExportAssignment(node: ExportAssignmentSyntax): any {\n            return node.update(\n                this.visitToken(node.exportKeyword),\n                this.visitToken(node.equalsToken),\n                this.visitToken(node.identifier),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitClassDeclaration(node: ClassDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.classKeyword),\n                this.visitToken(node.identifier),\n                node.typeParameterList === null ? null : <TypeParameterListSyntax>this.visitNode(node.typeParameterList),\n                this.visitList(node.heritageClauses),\n                this.visitToken(node.openBraceToken),\n                this.visitList(node.classElements),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.interfaceKeyword),\n                this.visitToken(node.identifier),\n                node.typeParameterList === null ? null : <TypeParameterListSyntax>this.visitNode(node.typeParameterList),\n                this.visitList(node.heritageClauses),\n                <ObjectTypeSyntax>this.visitNode(node.body));\n        }\n\n        public visitHeritageClause(node: HeritageClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.extendsOrImplementsKeyword),\n                this.visitSeparatedList(node.typeNames));\n        }\n\n        public visitModuleDeclaration(node: ModuleDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.moduleKeyword),\n                node.moduleName === null ? null : <INameSyntax>this.visitNodeOrToken(node.moduleName),\n                node.stringLiteral === null ? null : this.visitToken(node.stringLiteral),\n                this.visitToken(node.openBraceToken),\n                this.visitList(node.moduleElements),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitFunctionDeclaration(node: FunctionDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.functionKeyword),\n                this.visitToken(node.identifier),\n                <CallSignatureSyntax>this.visitNode(node.callSignature),\n                node.block === null ? null : <BlockSyntax>this.visitNode(node.block),\n                node.semicolonToken === null ? null : this.visitToken(node.semicolonToken));\n        }\n\n        public visitVariableStatement(node: VariableStatementSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                <VariableDeclarationSyntax>this.visitNode(node.variableDeclaration),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitVariableDeclaration(node: VariableDeclarationSyntax): any {\n            return node.update(\n                this.visitToken(node.varKeyword),\n                this.visitSeparatedList(node.variableDeclarators));\n        }\n\n        public visitVariableDeclarator(node: VariableDeclaratorSyntax): any {\n            return node.update(\n                this.visitToken(node.identifier),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation),\n                node.equalsValueClause === null ? null : <EqualsValueClauseSyntax>this.visitNode(node.equalsValueClause));\n        }\n\n        public visitEqualsValueClause(node: EqualsValueClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.equalsToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.value));\n        }\n\n        public visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): any {\n            return node.update(\n                node.kind(),\n                this.visitToken(node.operatorToken),\n                <IUnaryExpressionSyntax>this.visitNodeOrToken(node.operand));\n        }\n\n        public visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.openBracketToken),\n                this.visitSeparatedList(node.expressions),\n                this.visitToken(node.closeBracketToken));\n        }\n\n        public visitOmittedExpression(node: OmittedExpressionSyntax): any {\n            return node;\n        }\n\n        public visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.openParenToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.closeParenToken));\n        }\n\n        public visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.identifier),\n                this.visitToken(node.equalsGreaterThanToken),\n                <ISyntaxNodeOrToken>this.visitNodeOrToken(node.body));\n        }\n\n        public visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): any {\n            return node.update(\n                <CallSignatureSyntax>this.visitNode(node.callSignature),\n                this.visitToken(node.equalsGreaterThanToken),\n                <ISyntaxNodeOrToken>this.visitNodeOrToken(node.body));\n        }\n\n        public visitQualifiedName(node: QualifiedNameSyntax): any {\n            return node.update(\n                <INameSyntax>this.visitNodeOrToken(node.left),\n                this.visitToken(node.dotToken),\n                this.visitToken(node.right));\n        }\n\n        public visitTypeArgumentList(node: TypeArgumentListSyntax): any {\n            return node.update(\n                this.visitToken(node.lessThanToken),\n                this.visitSeparatedList(node.typeArguments),\n                this.visitToken(node.greaterThanToken));\n        }\n\n        public visitConstructorType(node: ConstructorTypeSyntax): any {\n            return node.update(\n                this.visitToken(node.newKeyword),\n                node.typeParameterList === null ? null : <TypeParameterListSyntax>this.visitNode(node.typeParameterList),\n                <ParameterListSyntax>this.visitNode(node.parameterList),\n                this.visitToken(node.equalsGreaterThanToken),\n                <ITypeSyntax>this.visitNodeOrToken(node.type));\n        }\n\n        public visitFunctionType(node: FunctionTypeSyntax): any {\n            return node.update(\n                node.typeParameterList === null ? null : <TypeParameterListSyntax>this.visitNode(node.typeParameterList),\n                <ParameterListSyntax>this.visitNode(node.parameterList),\n                this.visitToken(node.equalsGreaterThanToken),\n                <ITypeSyntax>this.visitNodeOrToken(node.type));\n        }\n\n        public visitObjectType(node: ObjectTypeSyntax): any {\n            return node.update(\n                this.visitToken(node.openBraceToken),\n                this.visitSeparatedList(node.typeMembers),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitArrayType(node: ArrayTypeSyntax): any {\n            return node.update(\n                <ITypeSyntax>this.visitNodeOrToken(node.type),\n                this.visitToken(node.openBracketToken),\n                this.visitToken(node.closeBracketToken));\n        }\n\n        public visitGenericType(node: GenericTypeSyntax): any {\n            return node.update(\n                <INameSyntax>this.visitNodeOrToken(node.name),\n                <TypeArgumentListSyntax>this.visitNode(node.typeArgumentList));\n        }\n\n        public visitTypeAnnotation(node: TypeAnnotationSyntax): any {\n            return node.update(\n                this.visitToken(node.colonToken),\n                <ITypeSyntax>this.visitNodeOrToken(node.type));\n        }\n\n        public visitBlock(node: BlockSyntax): any {\n            return node.update(\n                this.visitToken(node.openBraceToken),\n                this.visitList(node.statements),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitParameter(node: ParameterSyntax): any {\n            return node.update(\n                node.dotDotDotToken === null ? null : this.visitToken(node.dotDotDotToken),\n                node.publicOrPrivateKeyword === null ? null : this.visitToken(node.publicOrPrivateKeyword),\n                this.visitToken(node.identifier),\n                node.questionToken === null ? null : this.visitToken(node.questionToken),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation),\n                node.equalsValueClause === null ? null : <EqualsValueClauseSyntax>this.visitNode(node.equalsValueClause));\n        }\n\n        public visitMemberAccessExpression(node: MemberAccessExpressionSyntax): any {\n            return node.update(\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.dotToken),\n                this.visitToken(node.name));\n        }\n\n        public visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): any {\n            return node.update(\n                node.kind(),\n                <IExpressionSyntax>this.visitNodeOrToken(node.operand),\n                this.visitToken(node.operatorToken));\n        }\n\n        public visitElementAccessExpression(node: ElementAccessExpressionSyntax): any {\n            return node.update(\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.openBracketToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.argumentExpression),\n                this.visitToken(node.closeBracketToken));\n        }\n\n        public visitInvocationExpression(node: InvocationExpressionSyntax): any {\n            return node.update(\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                <ArgumentListSyntax>this.visitNode(node.argumentList));\n        }\n\n        public visitArgumentList(node: ArgumentListSyntax): any {\n            return node.update(\n                node.typeArgumentList === null ? null : <TypeArgumentListSyntax>this.visitNode(node.typeArgumentList),\n                this.visitToken(node.openParenToken),\n                this.visitSeparatedList(node.arguments),\n                this.visitToken(node.closeParenToken));\n        }\n\n        public visitBinaryExpression(node: BinaryExpressionSyntax): any {\n            return node.update(\n                node.kind(),\n                <IExpressionSyntax>this.visitNodeOrToken(node.left),\n                this.visitToken(node.operatorToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.right));\n        }\n\n        public visitConditionalExpression(node: ConditionalExpressionSyntax): any {\n            return node.update(\n                <IExpressionSyntax>this.visitNodeOrToken(node.condition),\n                this.visitToken(node.questionToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.whenTrue),\n                this.visitToken(node.colonToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.whenFalse));\n        }\n\n        public visitConstructSignature(node: ConstructSignatureSyntax): any {\n            return node.update(\n                this.visitToken(node.newKeyword),\n                <CallSignatureSyntax>this.visitNode(node.callSignature));\n        }\n\n        public visitMethodSignature(node: MethodSignatureSyntax): any {\n            return node.update(\n                this.visitToken(node.propertyName),\n                node.questionToken === null ? null : this.visitToken(node.questionToken),\n                <CallSignatureSyntax>this.visitNode(node.callSignature));\n        }\n\n        public visitIndexSignature(node: IndexSignatureSyntax): any {\n            return node.update(\n                this.visitToken(node.openBracketToken),\n                <ParameterSyntax>this.visitNode(node.parameter),\n                this.visitToken(node.closeBracketToken),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation));\n        }\n\n        public visitPropertySignature(node: PropertySignatureSyntax): any {\n            return node.update(\n                this.visitToken(node.propertyName),\n                node.questionToken === null ? null : this.visitToken(node.questionToken),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation));\n        }\n\n        public visitCallSignature(node: CallSignatureSyntax): any {\n            return node.update(\n                node.typeParameterList === null ? null : <TypeParameterListSyntax>this.visitNode(node.typeParameterList),\n                <ParameterListSyntax>this.visitNode(node.parameterList),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation));\n        }\n\n        public visitParameterList(node: ParameterListSyntax): any {\n            return node.update(\n                this.visitToken(node.openParenToken),\n                this.visitSeparatedList(node.parameters),\n                this.visitToken(node.closeParenToken));\n        }\n\n        public visitTypeParameterList(node: TypeParameterListSyntax): any {\n            return node.update(\n                this.visitToken(node.lessThanToken),\n                this.visitSeparatedList(node.typeParameters),\n                this.visitToken(node.greaterThanToken));\n        }\n\n        public visitTypeParameter(node: TypeParameterSyntax): any {\n            return node.update(\n                this.visitToken(node.identifier),\n                node.constraint === null ? null : <ConstraintSyntax>this.visitNode(node.constraint));\n        }\n\n        public visitConstraint(node: ConstraintSyntax): any {\n            return node.update(\n                this.visitToken(node.extendsKeyword),\n                <ITypeSyntax>this.visitNodeOrToken(node.type));\n        }\n\n        public visitElseClause(node: ElseClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.elseKeyword),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement));\n        }\n\n        public visitIfStatement(node: IfStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.ifKeyword),\n                this.visitToken(node.openParenToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.condition),\n                this.visitToken(node.closeParenToken),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement),\n                node.elseClause === null ? null : <ElseClauseSyntax>this.visitNode(node.elseClause));\n        }\n\n        public visitExpressionStatement(node: ExpressionStatementSyntax): any {\n            return node.update(\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitConstructorDeclaration(node: ConstructorDeclarationSyntax): any {\n            return node.update(\n                this.visitToken(node.constructorKeyword),\n                <ParameterListSyntax>this.visitNode(node.parameterList),\n                node.block === null ? null : <BlockSyntax>this.visitNode(node.block),\n                node.semicolonToken === null ? null : this.visitToken(node.semicolonToken));\n        }\n\n        public visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.propertyName),\n                <CallSignatureSyntax>this.visitNode(node.callSignature),\n                node.block === null ? null : <BlockSyntax>this.visitNode(node.block),\n                node.semicolonToken === null ? null : this.visitToken(node.semicolonToken));\n        }\n\n        public visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.getKeyword),\n                this.visitToken(node.propertyName),\n                <ParameterListSyntax>this.visitNode(node.parameterList),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.setKeyword),\n                this.visitToken(node.propertyName),\n                <ParameterListSyntax>this.visitNode(node.parameterList),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                <VariableDeclaratorSyntax>this.visitNode(node.variableDeclarator),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitThrowStatement(node: ThrowStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.throwKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitReturnStatement(node: ReturnStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.returnKeyword),\n                node.expression === null ? null : <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.newKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                node.argumentList === null ? null : <ArgumentListSyntax>this.visitNode(node.argumentList));\n        }\n\n        public visitSwitchStatement(node: SwitchStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.switchKeyword),\n                this.visitToken(node.openParenToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.closeParenToken),\n                this.visitToken(node.openBraceToken),\n                this.visitList(node.switchClauses),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitCaseSwitchClause(node: CaseSwitchClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.caseKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.colonToken),\n                this.visitList(node.statements));\n        }\n\n        public visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.defaultKeyword),\n                this.visitToken(node.colonToken),\n                this.visitList(node.statements));\n        }\n\n        public visitBreakStatement(node: BreakStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.breakKeyword),\n                node.identifier === null ? null : this.visitToken(node.identifier),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitContinueStatement(node: ContinueStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.continueKeyword),\n                node.identifier === null ? null : this.visitToken(node.identifier),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitForStatement(node: ForStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.forKeyword),\n                this.visitToken(node.openParenToken),\n                node.variableDeclaration === null ? null : <VariableDeclarationSyntax>this.visitNode(node.variableDeclaration),\n                node.initializer === null ? null : <IExpressionSyntax>this.visitNodeOrToken(node.initializer),\n                this.visitToken(node.firstSemicolonToken),\n                node.condition === null ? null : <IExpressionSyntax>this.visitNodeOrToken(node.condition),\n                this.visitToken(node.secondSemicolonToken),\n                node.incrementor === null ? null : <IExpressionSyntax>this.visitNodeOrToken(node.incrementor),\n                this.visitToken(node.closeParenToken),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement));\n        }\n\n        public visitForInStatement(node: ForInStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.forKeyword),\n                this.visitToken(node.openParenToken),\n                node.variableDeclaration === null ? null : <VariableDeclarationSyntax>this.visitNode(node.variableDeclaration),\n                node.left === null ? null : <IExpressionSyntax>this.visitNodeOrToken(node.left),\n                this.visitToken(node.inKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression),\n                this.visitToken(node.closeParenToken),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement));\n        }\n\n        public visitWhileStatement(node: WhileStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.whileKeyword),\n                this.visitToken(node.openParenToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.condition),\n                this.visitToken(node.closeParenToken),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement));\n        }\n\n        public visitWithStatement(node: WithStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.withKeyword),\n                this.visitToken(node.openParenToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.condition),\n                this.visitToken(node.closeParenToken),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement));\n        }\n\n        public visitEnumDeclaration(node: EnumDeclarationSyntax): any {\n            return node.update(\n                this.visitList(node.modifiers),\n                this.visitToken(node.enumKeyword),\n                this.visitToken(node.identifier),\n                this.visitToken(node.openBraceToken),\n                this.visitSeparatedList(node.enumElements),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitEnumElement(node: EnumElementSyntax): any {\n            return node.update(\n                this.visitToken(node.propertyName),\n                node.equalsValueClause === null ? null : <EqualsValueClauseSyntax>this.visitNode(node.equalsValueClause));\n        }\n\n        public visitCastExpression(node: CastExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.lessThanToken),\n                <ITypeSyntax>this.visitNodeOrToken(node.type),\n                this.visitToken(node.greaterThanToken),\n                <IUnaryExpressionSyntax>this.visitNodeOrToken(node.expression));\n        }\n\n        public visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.openBraceToken),\n                this.visitSeparatedList(node.propertyAssignments),\n                this.visitToken(node.closeBraceToken));\n        }\n\n        public visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): any {\n            return node.update(\n                this.visitToken(node.propertyName),\n                this.visitToken(node.colonToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression));\n        }\n\n        public visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): any {\n            return node.update(\n                this.visitToken(node.getKeyword),\n                this.visitToken(node.propertyName),\n                this.visitToken(node.openParenToken),\n                this.visitToken(node.closeParenToken),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): any {\n            return node.update(\n                this.visitToken(node.setKeyword),\n                this.visitToken(node.propertyName),\n                this.visitToken(node.openParenToken),\n                <ParameterSyntax>this.visitNode(node.parameter),\n                this.visitToken(node.closeParenToken),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitFunctionExpression(node: FunctionExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.functionKeyword),\n                node.identifier === null ? null : this.visitToken(node.identifier),\n                <CallSignatureSyntax>this.visitNode(node.callSignature),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitEmptyStatement(node: EmptyStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitTryStatement(node: TryStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.tryKeyword),\n                <BlockSyntax>this.visitNode(node.block),\n                node.catchClause === null ? null : <CatchClauseSyntax>this.visitNode(node.catchClause),\n                node.finallyClause === null ? null : <FinallyClauseSyntax>this.visitNode(node.finallyClause));\n        }\n\n        public visitCatchClause(node: CatchClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.catchKeyword),\n                this.visitToken(node.openParenToken),\n                this.visitToken(node.identifier),\n                node.typeAnnotation === null ? null : <TypeAnnotationSyntax>this.visitNode(node.typeAnnotation),\n                this.visitToken(node.closeParenToken),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitFinallyClause(node: FinallyClauseSyntax): any {\n            return node.update(\n                this.visitToken(node.finallyKeyword),\n                <BlockSyntax>this.visitNode(node.block));\n        }\n\n        public visitLabeledStatement(node: LabeledStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.identifier),\n                this.visitToken(node.colonToken),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement));\n        }\n\n        public visitDoStatement(node: DoStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.doKeyword),\n                <IStatementSyntax>this.visitNodeOrToken(node.statement),\n                this.visitToken(node.whileKeyword),\n                this.visitToken(node.openParenToken),\n                <IExpressionSyntax>this.visitNodeOrToken(node.condition),\n                this.visitToken(node.closeParenToken),\n                this.visitToken(node.semicolonToken));\n        }\n\n        public visitTypeOfExpression(node: TypeOfExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.typeOfKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression));\n        }\n\n        public visitDeleteExpression(node: DeleteExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.deleteKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression));\n        }\n\n        public visitVoidExpression(node: VoidExpressionSyntax): any {\n            return node.update(\n                this.visitToken(node.voidKeyword),\n                <IExpressionSyntax>this.visitNodeOrToken(node.expression));\n        }\n\n        public visitDebuggerStatement(node: DebuggerStatementSyntax): any {\n            return node.update(\n                this.visitToken(node.debuggerKeyword),\n                this.visitToken(node.semicolonToken));\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class SyntaxDedenter extends SyntaxRewriter {\n        private lastTriviaWasNewLine: bool;\n\n        constructor(dedentFirstToken: bool,\n                    private dedentationAmount: number,\n                    private minimumIndent: number,\n                    private options: FormattingOptions) {\n            super();\n            this.lastTriviaWasNewLine = dedentFirstToken;\n        }\n\n        private abort(): void {\n            this.lastTriviaWasNewLine = false;\n            this.dedentationAmount = 0;\n        }\n\n        private isAborted(): bool {\n            return this.dedentationAmount === 0;\n        }\n\n        private visitToken(token: ISyntaxToken): ISyntaxToken {\n            if (token.width() === 0) {\n                return token;\n            }\n\n            var result = token;\n            if (this.lastTriviaWasNewLine) {\n                // have to add our indentation to every line that this token hits.\n                result = token.withLeadingTrivia(this.dedentTriviaList(token.leadingTrivia()));\n            }\n\n            if (this.isAborted()) {\n                // If we\'ve decided to stop dedenting.  Then just return immediately.\n                return token;\n            }\n\n            this.lastTriviaWasNewLine = token.hasTrailingNewLine();\n            return result;\n        }\n\n        private dedentTriviaList(triviaList: ISyntaxTriviaList): ISyntaxTriviaList {\n            var result = [];\n            var dedentNextWhitespace = true;\n\n            // Keep walking through all our trivia (as long as we haven\'t decided to stop dedenting).\n            // Adjust the indentation on any whitespace trivia at the start of a line, or any multi-line\n            // trivia that span multiple lines.\n            for (var i = 0, n = triviaList.count(); i < n && !this.isAborted(); i++) {\n                var trivia = triviaList.syntaxTriviaAt(i);\n\n                var dedentThisTrivia = dedentNextWhitespace;\n                dedentNextWhitespace = false;\n\n                if (dedentThisTrivia) {\n                    if (trivia.kind() === SyntaxKind.WhitespaceTrivia) {\n                        // We pass in if there was a following newline after this whitespace.  If there \n                        // is, then it\'s fine if we dedent this newline all the way to 0.  Otherwise,\n                        // if the whitespace is followed by something, then we need to determine how \n                        // much of the whitespace we can remove.  If we can\'t remove all that we want,\n                        // we\'ll need to adjust the dedentAmount.  And, if we can\'t remove at all, then\n                        // we need to stop dedenting entirely.\n                        var hasFollowingNewLine = (i < triviaList.count() - 1) &&\n                                                  triviaList.syntaxTriviaAt(i + 1).kind() === SyntaxKind.NewLineTrivia;\n                        result.push(this.dedentWhitespace(trivia, hasFollowingNewLine));\n                        continue;\n                    }\n                    else if (trivia.kind() !== SyntaxKind.NewLineTrivia) {\n                        // We wanted to dedent, but the trivia we\'re on isn\'t whitespace and wasn\'t a \n                        // newline.  That means that we have something like a comment at the beginning\n                        // of the line that we can\'t dedent.  And, if we can\'t dedent it, then we \n                        // shouldn\'t dedent this token or any more tokens.\n                        this.abort();\n                        break;\n                    }\n                }\n\n                if (trivia.kind() === SyntaxKind.MultiLineCommentTrivia) {\n                    // This trivia may span multiple lines.  If it does, we need to dedent each \n                    // successive line of it until it terminates.\n                    result.push(this.dedentMultiLineComment(trivia));\n                    continue;\n                }\n\n                // All other trivia we just append to the list.\n                result.push(trivia);\n                if (trivia.kind() === SyntaxKind.NewLineTrivia) {\n                    // We hit a newline processing the trivia.  We need to add the indentation to the \n                    // next line as well.\n                    dedentNextWhitespace = true;\n                }\n            }\n\n            if (dedentNextWhitespace) {\n                // We hit a new line as the last trivia (or there was no trivia).  We want to dedent \n                // the next trivia, but we can\'t (because the token starts at the start of the line).\n                // If we can\'t dedent this, then we shouldn\'t dedent anymore.\n                this.abort();\n            }\n\n            if (this.isAborted()) {\n                return triviaList;\n            }\n\n            return Syntax.triviaList(result);\n        }\n\n        private dedentSegment(segment: string, hasFollowingNewLineTrivia: bool): string {\n            // Find the position of the first non whitespace character in the segment.\n            var firstNonWhitespacePosition = Indentation.firstNonWhitespacePosition(segment);\n\n            if (firstNonWhitespacePosition === segment.length) {\n                if (hasFollowingNewLineTrivia) {\n                    // It was entirely whitespace trivia, with a newline after it.  Just trim this down \n                    // to an empty string.\n                    return \"\";\n                }\n            }\n            else if (CharacterInfo.isLineTerminator(segment.charCodeAt(firstNonWhitespacePosition))) {\n                // It was entirely whitespace, with a newline after it.  Just trim this down to \n                // the newline\n                return segment.substring(firstNonWhitespacePosition);\n            }\n\n            // It was whitespace without a newline following it.  We need to try to dedent this a bit.\n\n            // Convert that position to a column.  \n            var firstNonWhitespaceColumn = Indentation.columnForPositionInString(segment, firstNonWhitespacePosition, this.options);\n\n            // Find the new column we want the nonwhitespace text to start at. Ideally it would be \n            // whatever column it was minus the dedentation amount.  However, we won\'t go below a \n            // specified minimum indent (hence, max(initial - dedentAmount, minIndent).  *But* if \n            // the initial column was less than that minimum indent, then we\'ll keep it at that column.\n            // (hence min(initial, desired)).\n            var newFirstNonWhitespaceColumn =\n                MathPrototype.min(firstNonWhitespaceColumn,\n                MathPrototype.max(firstNonWhitespaceColumn - this.dedentationAmount, this.minimumIndent));\n\n            if (newFirstNonWhitespaceColumn === firstNonWhitespaceColumn) {\n                // We aren\'t able to detent this token.  Abort what we\'re doing\n                this.abort();\n                return segment;\n            }\n\n            // Update the dedentation amount for all subsequent tokens we run into.\n            this.dedentationAmount = firstNonWhitespaceColumn - newFirstNonWhitespaceColumn;\n            Debug.assert(this.dedentationAmount >= 0);\n\n            // Compute an indentation string for that.\n            var indentationString = Indentation.indentationString(newFirstNonWhitespaceColumn, this.options);\n\n            // Join the new indentation and the original string without its indentation.\n            return indentationString + segment.substring(firstNonWhitespacePosition);\n        }\n\n        private dedentWhitespace(trivia: ISyntaxTrivia, hasFollowingNewLineTrivia): ISyntaxTrivia {\n            var newIndentation = this.dedentSegment(trivia.fullText(), hasFollowingNewLineTrivia);\n            return Syntax.whitespace(newIndentation);\n        }\n\n        private dedentMultiLineComment(trivia: ISyntaxTrivia): ISyntaxTrivia {\n            var segments = Syntax.splitMultiLineCommentTriviaIntoMultipleLines(trivia);\n            if (segments.length === 1) {\n                // If there was only one segment, then this wasn\'t multiline.\n                return trivia;\n            }\n\n            for (var i = 1; i < segments.length; i++) {\n                var segment = segments[i];\n                segments[i] = this.dedentSegment(segment, /*hasFollowingNewLineTrivia*/ false);\n            }\n\n            var result = segments.join(\"\");\n\n            // Create a new trivia token out of the indented lines.\n            return Syntax.multiLineComment(result);\n        }\n\n        public static dedentNode(node: ISyntaxNode, dedentFirstToken: bool, dedentAmount: number, minimumIndent: number, options: FormattingOptions): ISyntaxNode {\n            var dedenter = new SyntaxDedenter(dedentFirstToken, dedentAmount, minimumIndent, options);\n            var result = node.accept(dedenter);\n\n            if (dedenter.isAborted()) {\n                // We failed to dedent a token in this node.  Return the original node as is.\n                return node;\n            }\n\n            return result;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class SyntaxIndenter extends SyntaxRewriter {\n        private lastTriviaWasNewLine: bool;\n        private indentationTrivia: ISyntaxTrivia;\n\n        constructor(indentFirstToken: bool,\n                    private indentationAmount: number,\n                    private options: FormattingOptions) {\n            super();\n            this.lastTriviaWasNewLine = indentFirstToken;\n            this.indentationTrivia = Indentation.indentationTrivia(this.indentationAmount, this.options);\n        }\n\n        private visitToken(token: ISyntaxToken): ISyntaxToken {\n            if (token.width() === 0) {\n                return token;\n            }\n\n            var result = token;\n            if (this.lastTriviaWasNewLine) {\n                // have to add our indentation to every line that this token hits.\n                result = token.withLeadingTrivia(this.indentTriviaList(token.leadingTrivia()));\n            }\n\n            this.lastTriviaWasNewLine = token.hasTrailingNewLine();\n            return result;\n        }\n\n        private indentTriviaList(triviaList: ISyntaxTriviaList): ISyntaxTriviaList {\n            var result = [];\n\n            // First, update any existing trivia with the indent amount.  For example, combine the\n            // indent with any whitespace trivia, or prepend any comments with the trivia.\n            var indentNextTrivia = true;\n            for (var i = 0, n = triviaList.count(); i < n; i++) {\n                var trivia = triviaList.syntaxTriviaAt(i);\n\n                var indentThisTrivia = indentNextTrivia;\n                indentNextTrivia = false;\n\n                switch (trivia.kind()) {\n                    case SyntaxKind.MultiLineCommentTrivia:\n                        this.indentMultiLineComment(trivia, indentThisTrivia, result);\n                        continue;\n\n                    case SyntaxKind.SingleLineCommentTrivia:\n                    case SyntaxKind.SkippedTextTrivia:\n                        this.indentSingleLineOrSkippedText(trivia, indentThisTrivia, result);\n                        continue;\n\n                    case SyntaxKind.WhitespaceTrivia:\n                        this.indentWhitespace(trivia, indentThisTrivia, result);\n                        continue;\n\n                    case SyntaxKind.NewLineTrivia:\n                        // We hit a newline processing the trivia.  We need to add the indentation to the \n                        // next line as well.  Note: don\'t bother indenting the newline itself.  This will \n                        // just insert ugly whitespace that most users probably will not want.\n                        result.push(trivia);\n                        indentNextTrivia = true;\n                        continue;\n\n                    default:\n                        throw Errors.invalidOperation();\n                }\n            }\n\n            // Then, if the last trivia was a newline (or there was no trivia at all), then just add the\n            // indentation in right before the token.\n            if (indentNextTrivia) {\n                result.push(this.indentationTrivia);\n            }\n\n            return Syntax.triviaList(result);\n        }\n\n        private indentSegment(segment: string): string {\n            // Find the position of the first non whitespace character in the segment.\n            var firstNonWhitespacePosition = Indentation.firstNonWhitespacePosition(segment);\n\n            if (firstNonWhitespacePosition < segment.length &&\n                CharacterInfo.isLineTerminator(segment.charCodeAt(firstNonWhitespacePosition))) {\n\n                // If this segment was just a newline, then don\'t bother indenting it.  That will just\n                // leave the user with an ugly indent in their output that they probably do not want.\n                return segment;\n            }\n\n            // Convert that position to a column.  \n            var firstNonWhitespaceColumn = Indentation.columnForPositionInString(segment, firstNonWhitespacePosition, this.options);\n\n            // Find the new column we want the nonwhitespace text to start at.\n            var newFirstNonWhitespaceColumn = firstNonWhitespaceColumn + this.indentationAmount;\n\n            // Compute an indentation string for that.\n            var indentationString = Indentation.indentationString(newFirstNonWhitespaceColumn, this.options);\n\n            // Join the new indentation and the original string without its indentation.\n            return indentationString + segment.substring(firstNonWhitespacePosition);\n        }\n\n        private indentWhitespace(trivia: ISyntaxTrivia, indentThisTrivia: bool, result: ISyntaxTrivia[]): void {\n            if (!indentThisTrivia) {\n                // Line didn\'t start with this trivia.  So no need to touch it.  Just add to the result\n                // and continue on.\n                result.push(trivia);\n                return;\n            }\n\n            // Line started with this trivia.  We want to figure out what the final column this \n            // whitespace goes to will be.  To do that we add the column it is at now to the column we\n            // want to indent to.  We then compute the final tabs+whitespace string for that.\n            var newIndentation = this.indentSegment(trivia.fullText());\n            result.push(Syntax.whitespace(newIndentation));\n        }\n\n        private indentSingleLineOrSkippedText(trivia: ISyntaxTrivia, indentThisTrivia: bool, result: ISyntaxTrivia[]): void {\n            if (indentThisTrivia) {\n                // The line started with a comment or skipped text.  Add an indentation based \n                // on the desired settings, and then add the trivia itself.\n                result.push(this.indentationTrivia);\n            }\n\n            result.push(trivia);\n        }\n\n        private indentMultiLineComment(trivia: ISyntaxTrivia, indentThisTrivia: bool, result: ISyntaxTrivia[]): void {\n            if (indentThisTrivia) {\n                // The line started with a multiline comment.  Add an indentation based \n                // on the desired settings, and then add the trivia itself.\n                result.push(this.indentationTrivia);\n            }\n\n            // If the multiline comment spans multiple lines, we need to add the right indent amount to\n            // each successive line segment as well.\n            var segments = Syntax.splitMultiLineCommentTriviaIntoMultipleLines(trivia);\n\n            for (var i = 1; i < segments.length; i++) {\n                segments[i] = this.indentSegment(segments[i]);\n            }\n\n            var newText = segments.join(\"\");\n            result.push(Syntax.multiLineComment(newText));\n        }\n\n        public static indentNode(node: ISyntaxNode, indentFirstToken: bool, indentAmount: number, options: FormattingOptions): SyntaxNode {\n            var indenter = new SyntaxIndenter(indentFirstToken, indentAmount, options);\n            return node.accept(indenter);\n        }\n\n        public static indentNodes(nodes: SyntaxNode[], indentFirstToken: bool, indentAmount: number, options: FormattingOptions): SyntaxNode[] {\n            // Note: it is necessary for correctness that we reuse the same SyntaxIndenter here.  \n            // That\'s because when working on nodes 1-N, we need to know if the previous node ended\n            // with a newline.  The indenter will track that for us.\n\n            var indenter = new SyntaxIndenter(indentFirstToken, indentAmount, options);\n            var result = ArrayUtilities.select(nodes, n => n.accept(indenter));\n\n            return result;\n        }\n    }\n}\n﻿///<reference path=\'References.ts\' />\n\nmodule TypeScript.Syntax {\n    export class VariableWidthTokenWithNoTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _textOrWidth: any;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, textOrWidth: any) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._textOrWidth = textOrWidth;\n        }\n\n        public clone(): ISyntaxToken {\n            return new VariableWidthTokenWithNoTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._textOrWidth);\n        }\n\n        public isNode(): bool { return false; }\n        public isToken(): bool { return true; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return this.width(); }\n        private start(): number { return this._fullStart; }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return typeof this._textOrWidth === \'number\' ? this._textOrWidth : this._textOrWidth.length; }\n\n        public text(): string {\n            if (typeof this._textOrWidth === \'number\') {\n                this._textOrWidth = this._sourceText.substr(\n                    this.start(), this._textOrWidth, /*intern:*/ this.tokenKind === SyntaxKind.IdentifierName);\n            }\n\n            return this._textOrWidth;\n        }\n\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any {\n            if ((<any>this)._value === undefined) {\n                (<any>this)._value = value(this);\n            }\n\n            return (<any>this)._value;\n        }\n\n        public valueText(): string {\n            if ((<any>this)._valueText === undefined) {\n                (<any>this)._valueText = valueText(this);\n            }\n\n            return (<any>this)._valueText;\n        }\n\n        public hasLeadingTrivia(): bool { return false; }\n        public hasLeadingComment(): bool { return false; }\n        public hasLeadingNewLine(): bool { return false; }\n        public hasLeadingSkippedText(): bool { return false; }\n        public leadingTriviaWidth(): number { return 0; }\n        public leadingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasTrailingTrivia(): bool { return false; }\n        public hasTrailingComment(): bool { return false; }\n        public hasTrailingNewLine(): bool { return false; }\n        public hasTrailingSkippedText(): bool { return false; }\n        public trailingTriviaWidth(): number { return 0; }\n        public trailingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasSkippedText(): bool { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): bool { return false; }\n        public isIncrementallyUnusable(): bool { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        private collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class VariableWidthTokenWithLeadingTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _leadingTriviaInfo: number;\n        private _textOrWidth: any;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, leadingTriviaInfo: number, textOrWidth: any) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._leadingTriviaInfo = leadingTriviaInfo;\n            this._textOrWidth = textOrWidth;\n        }\n\n        public clone(): ISyntaxToken {\n            return new VariableWidthTokenWithLeadingTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._leadingTriviaInfo,\n                this._textOrWidth);\n        }\n\n        public isNode(): bool { return false; }\n        public isToken(): bool { return true; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return getTriviaWidth(this._leadingTriviaInfo) + this.width(); }\n        private start(): number { return this._fullStart + getTriviaWidth(this._leadingTriviaInfo); }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return typeof this._textOrWidth === \'number\' ? this._textOrWidth : this._textOrWidth.length; }\n\n        public text(): string {\n            if (typeof this._textOrWidth === \'number\') {\n                this._textOrWidth = this._sourceText.substr(\n                    this.start(), this._textOrWidth, /*intern:*/ this.tokenKind === SyntaxKind.IdentifierName);\n            }\n\n            return this._textOrWidth;\n        }\n\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any {\n            if ((<any>this)._value === undefined) {\n                (<any>this)._value = value(this);\n            }\n\n            return (<any>this)._value;\n        }\n\n        public valueText(): string {\n            if ((<any>this)._valueText === undefined) {\n                (<any>this)._valueText = valueText(this);\n            }\n\n            return (<any>this)._valueText;\n        }\n\n        public hasLeadingTrivia(): bool { return true; }\n        public hasLeadingComment(): bool { return hasTriviaComment(this._leadingTriviaInfo); }\n        public hasLeadingNewLine(): bool { return hasTriviaNewLine(this._leadingTriviaInfo); }\n        public hasLeadingSkippedText(): bool { return false; }\n        public leadingTriviaWidth(): number { return getTriviaWidth(this._leadingTriviaInfo); }\n        public leadingTrivia(): ISyntaxTriviaList { return Scanner1.scanTrivia(this._sourceText, this._fullStart, getTriviaWidth(this._leadingTriviaInfo), /*isTrailing:*/ false); }\n\n        public hasTrailingTrivia(): bool { return false; }\n        public hasTrailingComment(): bool { return false; }\n        public hasTrailingNewLine(): bool { return false; }\n        public hasTrailingSkippedText(): bool { return false; }\n        public trailingTriviaWidth(): number { return 0; }\n        public trailingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasSkippedText(): bool { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): bool { return false; }\n        public isIncrementallyUnusable(): bool { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        private collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class VariableWidthTokenWithTrailingTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _textOrWidth: any;\n        private _trailingTriviaInfo: number;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, textOrWidth: any, trailingTriviaInfo: number) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._textOrWidth = textOrWidth;\n            this._trailingTriviaInfo = trailingTriviaInfo;\n        }\n\n        public clone(): ISyntaxToken {\n            return new VariableWidthTokenWithTrailingTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._textOrWidth,\n                this._trailingTriviaInfo);\n        }\n\n        public isNode(): bool { return false; }\n        public isToken(): bool { return true; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return this.width() + getTriviaWidth(this._trailingTriviaInfo); }\n        private start(): number { return this._fullStart; }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return typeof this._textOrWidth === \'number\' ? this._textOrWidth : this._textOrWidth.length; }\n\n        public text(): string {\n            if (typeof this._textOrWidth === \'number\') {\n                this._textOrWidth = this._sourceText.substr(\n                    this.start(), this._textOrWidth, /*intern:*/ this.tokenKind === SyntaxKind.IdentifierName);\n            }\n\n            return this._textOrWidth;\n        }\n\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any {\n            if ((<any>this)._value === undefined) {\n                (<any>this)._value = value(this);\n            }\n\n            return (<any>this)._value;\n        }\n\n        public valueText(): string {\n            if ((<any>this)._valueText === undefined) {\n                (<any>this)._valueText = valueText(this);\n            }\n\n            return (<any>this)._valueText;\n        }\n\n        public hasLeadingTrivia(): bool { return false; }\n        public hasLeadingComment(): bool { return false; }\n        public hasLeadingNewLine(): bool { return false; }\n        public hasLeadingSkippedText(): bool { return false; }\n        public leadingTriviaWidth(): number { return 0; }\n        public leadingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasTrailingTrivia(): bool { return true; }\n        public hasTrailingComment(): bool { return hasTriviaComment(this._trailingTriviaInfo); }\n        public hasTrailingNewLine(): bool { return hasTriviaNewLine(this._trailingTriviaInfo); }\n        public hasTrailingSkippedText(): bool { return false; }\n        public trailingTriviaWidth(): number { return getTriviaWidth(this._trailingTriviaInfo); }\n        public trailingTrivia(): ISyntaxTriviaList { return Scanner1.scanTrivia(this._sourceText, this.end(), getTriviaWidth(this._trailingTriviaInfo), /*isTrailing:*/ true); }\n\n        public hasSkippedText(): bool { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): bool { return false; }\n        public isIncrementallyUnusable(): bool { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        private collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class VariableWidthTokenWithLeadingAndTrailingTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _leadingTriviaInfo: number;\n        private _textOrWidth: any;\n        private _trailingTriviaInfo: number;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, leadingTriviaInfo: number, textOrWidth: any, trailingTriviaInfo: number) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._leadingTriviaInfo = leadingTriviaInfo;\n            this._textOrWidth = textOrWidth;\n            this._trailingTriviaInfo = trailingTriviaInfo;\n        }\n\n        public clone(): ISyntaxToken {\n            return new VariableWidthTokenWithLeadingAndTrailingTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._leadingTriviaInfo,\n                this._textOrWidth,\n                this._trailingTriviaInfo);\n        }\n\n        public isNode(): bool { return false; }\n        public isToken(): bool { return true; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return getTriviaWidth(this._leadingTriviaInfo) + this.width() + getTriviaWidth(this._trailingTriviaInfo); }\n        private start(): number { return this._fullStart + getTriviaWidth(this._leadingTriviaInfo); }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return typeof this._textOrWidth === \'number\' ? this._textOrWidth : this._textOrWidth.length; }\n\n        public text(): string {\n            if (typeof this._textOrWidth === \'number\') {\n                this._textOrWidth = this._sourceText.substr(\n                    this.start(), this._textOrWidth, /*intern:*/ this.tokenKind === SyntaxKind.IdentifierName);\n            }\n\n            return this._textOrWidth;\n        }\n\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any {\n            if ((<any>this)._value === undefined) {\n                (<any>this)._value = value(this);\n            }\n\n            return (<any>this)._value;\n        }\n\n        public valueText(): string {\n            if ((<any>this)._valueText === undefined) {\n                (<any>this)._valueText = valueText(this);\n            }\n\n            return (<any>this)._valueText;\n        }\n\n        public hasLeadingTrivia(): bool { return true; }\n        public hasLeadingComment(): bool { return hasTriviaComment(this._leadingTriviaInfo); }\n        public hasLeadingNewLine(): bool { return hasTriviaNewLine(this._leadingTriviaInfo); }\n        public hasLeadingSkippedText(): bool { return false; }\n        public leadingTriviaWidth(): number { return getTriviaWidth(this._leadingTriviaInfo); }\n        public leadingTrivia(): ISyntaxTriviaList { return Scanner1.scanTrivia(this._sourceText, this._fullStart, getTriviaWidth(this._leadingTriviaInfo), /*isTrailing:*/ false); }\n\n        public hasTrailingTrivia(): bool { return true; }\n        public hasTrailingComment(): bool { return hasTriviaComment(this._trailingTriviaInfo); }\n        public hasTrailingNewLine(): bool { return hasTriviaNewLine(this._trailingTriviaInfo); }\n        public hasTrailingSkippedText(): bool { return false; }\n        public trailingTriviaWidth(): number { return getTriviaWidth(this._trailingTriviaInfo); }\n        public trailingTrivia(): ISyntaxTriviaList { return Scanner1.scanTrivia(this._sourceText, this.end(), getTriviaWidth(this._trailingTriviaInfo), /*isTrailing:*/ true); }\n\n        public hasSkippedText(): bool { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): bool { return false; }\n        public isIncrementallyUnusable(): bool { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        private collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class FixedWidthTokenWithNoTrivia implements ISyntaxToken {\n        public tokenKind: SyntaxKind;\n\n        constructor(kind: SyntaxKind) {\n            this.tokenKind = kind;\n        }\n\n        public clone(): ISyntaxToken {\n            return new FixedWidthTokenWithNoTrivia(\n                this.tokenKind);\n        }\n\n        public isNode(): bool { return false; }\n        public isToken(): bool { return true; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return this.width(); }\n        public width(): number { return this.text().length; }\n        public text(): string { return SyntaxFacts.getText(this.tokenKind); }\n        public fullText(): string { return this.text(); }\n\n        public value(): any { return value(this); }\n        public valueText(): string { return valueText(this); }\n        public hasLeadingTrivia(): bool { return false; }\n        public hasLeadingComment(): bool { return false; }\n        public hasLeadingNewLine(): bool { return false; }\n        public hasLeadingSkippedText(): bool { return false; }\n        public leadingTriviaWidth(): number { return 0; }\n        public leadingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasTrailingTrivia(): bool { return false; }\n        public hasTrailingComment(): bool { return false; }\n        public hasTrailingNewLine(): bool { return false; }\n        public hasTrailingSkippedText(): bool { return false; }\n        public trailingTriviaWidth(): number { return 0; }\n        public trailingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasSkippedText(): bool { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): bool { return false; }\n        public isIncrementallyUnusable(): bool { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        private collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class FixedWidthTokenWithLeadingTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _leadingTriviaInfo: number;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, leadingTriviaInfo: number) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._leadingTriviaInfo = leadingTriviaInfo;\n        }\n\n        public clone(): ISyntaxToken {\n            return new FixedWidthTokenWithLeadingTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._leadingTriviaInfo);\n        }\n\n        public isNode(): bool { return false; }\n        public isToken(): bool { return true; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return getTriviaWidth(this._leadingTriviaInfo) + this.width(); }\n        private start(): number { return this._fullStart + getTriviaWidth(this._leadingTriviaInfo); }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return this.text().length; }\n        public text(): string { return SyntaxFacts.getText(this.tokenKind); }\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any { return value(this); }\n        public valueText(): string { return valueText(this); }\n        public hasLeadingTrivia(): bool { return true; }\n        public hasLeadingComment(): bool { return hasTriviaComment(this._leadingTriviaInfo); }\n        public hasLeadingNewLine(): bool { return hasTriviaNewLine(this._leadingTriviaInfo); }\n        public hasLeadingSkippedText(): bool { return false; }\n        public leadingTriviaWidth(): number { return getTriviaWidth(this._leadingTriviaInfo); }\n        public leadingTrivia(): ISyntaxTriviaList { return Scanner1.scanTrivia(this._sourceText, this._fullStart, getTriviaWidth(this._leadingTriviaInfo), /*isTrailing:*/ false); }\n\n        public hasTrailingTrivia(): bool { return false; }\n        public hasTrailingComment(): bool { return false; }\n        public hasTrailingNewLine(): bool { return false; }\n        public hasTrailingSkippedText(): bool { return false; }\n        public trailingTriviaWidth(): number { return 0; }\n        public trailingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasSkippedText(): bool { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): bool { return false; }\n        public isIncrementallyUnusable(): bool { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        private collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class FixedWidthTokenWithTrailingTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _trailingTriviaInfo: number;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, trailingTriviaInfo: number) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._trailingTriviaInfo = trailingTriviaInfo;\n        }\n\n        public clone(): ISyntaxToken {\n            return new FixedWidthTokenWithTrailingTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._trailingTriviaInfo);\n        }\n\n        public isNode(): bool { return false; }\n        public isToken(): bool { return true; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return this.width() + getTriviaWidth(this._trailingTriviaInfo); }\n        private start(): number { return this._fullStart; }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return this.text().length; }\n        public text(): string { return SyntaxFacts.getText(this.tokenKind); }\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any { return value(this); }\n        public valueText(): string { return valueText(this); }\n        public hasLeadingTrivia(): bool { return false; }\n        public hasLeadingComment(): bool { return false; }\n        public hasLeadingNewLine(): bool { return false; }\n        public hasLeadingSkippedText(): bool { return false; }\n        public leadingTriviaWidth(): number { return 0; }\n        public leadingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n\n        public hasTrailingTrivia(): bool { return true; }\n        public hasTrailingComment(): bool { return hasTriviaComment(this._trailingTriviaInfo); }\n        public hasTrailingNewLine(): bool { return hasTriviaNewLine(this._trailingTriviaInfo); }\n        public hasTrailingSkippedText(): bool { return false; }\n        public trailingTriviaWidth(): number { return getTriviaWidth(this._trailingTriviaInfo); }\n        public trailingTrivia(): ISyntaxTriviaList { return Scanner1.scanTrivia(this._sourceText, this.end(), getTriviaWidth(this._trailingTriviaInfo), /*isTrailing:*/ true); }\n\n        public hasSkippedText(): bool { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): bool { return false; }\n        public isIncrementallyUnusable(): bool { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        private collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export class FixedWidthTokenWithLeadingAndTrailingTrivia implements ISyntaxToken {\n        private _sourceText: ISimpleText;\n        private _fullStart: number;\n        public tokenKind: SyntaxKind;\n        private _leadingTriviaInfo: number;\n        private _trailingTriviaInfo: number;\n\n        constructor(sourceText: ISimpleText, fullStart: number,kind: SyntaxKind, leadingTriviaInfo: number, trailingTriviaInfo: number) {\n            this._sourceText = sourceText;\n            this._fullStart = fullStart;\n            this.tokenKind = kind;\n            this._leadingTriviaInfo = leadingTriviaInfo;\n            this._trailingTriviaInfo = trailingTriviaInfo;\n        }\n\n        public clone(): ISyntaxToken {\n            return new FixedWidthTokenWithLeadingAndTrailingTrivia(\n                this._sourceText,\n                this._fullStart,\n                this.tokenKind,\n                this._leadingTriviaInfo,\n                this._trailingTriviaInfo);\n        }\n\n        public isNode(): bool { return false; }\n        public isToken(): bool { return true; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return false; }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n\n        public childCount(): number { return 0; }\n        public childAt(index: number): ISyntaxElement { throw Errors.argumentOutOfRange(\'index\'); }\n\n        public fullWidth(): number { return getTriviaWidth(this._leadingTriviaInfo) + this.width() + getTriviaWidth(this._trailingTriviaInfo); }\n        private start(): number { return this._fullStart + getTriviaWidth(this._leadingTriviaInfo); }\n        private end(): number { return this.start() + this.width(); }\n\n        public width(): number { return this.text().length; }\n        public text(): string { return SyntaxFacts.getText(this.tokenKind); }\n        public fullText(): string { return this._sourceText.substr(this._fullStart, this.fullWidth(), /*intern:*/ false); }\n\n        public value(): any { return value(this); }\n        public valueText(): string { return valueText(this); }\n        public hasLeadingTrivia(): bool { return true; }\n        public hasLeadingComment(): bool { return hasTriviaComment(this._leadingTriviaInfo); }\n        public hasLeadingNewLine(): bool { return hasTriviaNewLine(this._leadingTriviaInfo); }\n        public hasLeadingSkippedText(): bool { return false; }\n        public leadingTriviaWidth(): number { return getTriviaWidth(this._leadingTriviaInfo); }\n        public leadingTrivia(): ISyntaxTriviaList { return Scanner1.scanTrivia(this._sourceText, this._fullStart, getTriviaWidth(this._leadingTriviaInfo), /*isTrailing:*/ false); }\n\n        public hasTrailingTrivia(): bool { return true; }\n        public hasTrailingComment(): bool { return hasTriviaComment(this._trailingTriviaInfo); }\n        public hasTrailingNewLine(): bool { return hasTriviaNewLine(this._trailingTriviaInfo); }\n        public hasTrailingSkippedText(): bool { return false; }\n        public trailingTriviaWidth(): number { return getTriviaWidth(this._trailingTriviaInfo); }\n        public trailingTrivia(): ISyntaxTriviaList { return Scanner1.scanTrivia(this._sourceText, this.end(), getTriviaWidth(this._trailingTriviaInfo), /*isTrailing:*/ true); }\n\n        public hasSkippedText(): bool { return false; }\n        public toJSON(key) { return tokenToJSON(this); }\n        public firstToken(): ISyntaxToken { return this; }\n        public lastToken(): ISyntaxToken { return this; }\n        public isTypeScriptSpecific(): bool { return false; }\n        public isIncrementallyUnusable(): bool { return this.fullWidth() === 0 || SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind); }\n        public accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n        private realize(): ISyntaxToken { return realizeToken(this); }\n        private collectTextElements(elements: string[]): void { collectTokenTextElements(this, elements); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    function collectTokenTextElements(token: ISyntaxToken, elements: string[]): void {\n        token.leadingTrivia().collectTextElements(elements);\n        elements.push(token.text());\n        token.trailingTrivia().collectTextElements(elements);\n    }\n\n    export function fixedWidthToken(sourceText: ISimpleText, fullStart: number,\n        kind: SyntaxKind,\n        leadingTriviaInfo: number,\n        trailingTriviaInfo: number): ISyntaxToken {\n\n        if (leadingTriviaInfo === 0) {\n            if (trailingTriviaInfo === 0) {\n                return new FixedWidthTokenWithNoTrivia(kind);\n            }\n            else {\n                return new FixedWidthTokenWithTrailingTrivia(sourceText, fullStart, kind, trailingTriviaInfo);\n            }\n        }\n        else if (trailingTriviaInfo === 0) {\n            return new FixedWidthTokenWithLeadingTrivia(sourceText, fullStart, kind, leadingTriviaInfo);\n        }\n        else {\n            return new FixedWidthTokenWithLeadingAndTrailingTrivia(sourceText, fullStart, kind, leadingTriviaInfo, trailingTriviaInfo);\n        }\n    }\n\n    export function variableWidthToken(sourceText: ISimpleText, fullStart: number,\n        kind: SyntaxKind,\n        leadingTriviaInfo: number,\n        width: number,\n        trailingTriviaInfo: number): ISyntaxToken {\n\n        if (leadingTriviaInfo === 0) {\n            if (trailingTriviaInfo === 0) {\n                return new VariableWidthTokenWithNoTrivia(sourceText, fullStart, kind, width);\n            }\n            else {\n                return new VariableWidthTokenWithTrailingTrivia(sourceText, fullStart, kind, width, trailingTriviaInfo);\n            }\n        }\n        else if (trailingTriviaInfo === 0) {\n            return new VariableWidthTokenWithLeadingTrivia(sourceText, fullStart, kind, leadingTriviaInfo, width);\n        }\n        else {\n            return new VariableWidthTokenWithLeadingAndTrailingTrivia(sourceText, fullStart, kind, leadingTriviaInfo, width, trailingTriviaInfo);\n        }\n    }\n\n    function getTriviaWidth(value: number): number {\n        return value >>> SyntaxConstants.TriviaFullWidthShift;\n    }\n\n    function hasTriviaComment(value: number): bool {\n        return (value & SyntaxConstants.TriviaCommentMask) !== 0;\n    }\n\n    function hasTriviaNewLine(value: number): bool {\n        return (value & SyntaxConstants.TriviaNewLineMask) !== 0;\n    }\n}\n﻿///<reference path=\'References.ts\' />\n\nmodule TypeScript.Syntax {\n    export function realizeToken(token: ISyntaxToken): ISyntaxToken {\n        return new RealizedToken(token.tokenKind,\n            token.leadingTrivia(), token.text(), token.value(), token.valueText(), token.trailingTrivia());\n    }\n\n    export function convertToIdentifierName(token: ISyntaxToken): ISyntaxToken {\n        Debug.assert(SyntaxFacts.isAnyKeyword(token.tokenKind));\n        return new RealizedToken(SyntaxKind.IdentifierName,\n            token.leadingTrivia(), token.text(), token.text(), token.text(), token.trailingTrivia());\n    }\n\n    export function tokenToJSON(token: ISyntaxToken) {\n        var result: any = {};\n\n        result.kind = (<any>SyntaxKind)._map[token.kind()];\n\n        result.width = token.width();\n        if (token.fullWidth() !== token.width()) {\n            result.fullWidth = token.fullWidth();\n        }\n\n        result.text = token.text();\n\n        var value = token.value();\n        if (value !== null) {\n            result.value = value;\n            result.valueText = token.valueText();\n        }\n\n        if (token.hasLeadingTrivia()) {\n            result.hasLeadingTrivia = true;\n        }\n\n        if (token.hasLeadingComment()) {\n            result.hasLeadingComment = true;\n        }\n\n        if (token.hasLeadingNewLine()) {\n            result.hasLeadingNewLine = true;\n        }\n\n        if (token.hasLeadingSkippedText()) {\n            result.hasLeadingSkippedText = true;\n        }\n\n        if (token.hasTrailingTrivia()) {\n            result.hasTrailingTrivia = true;\n        }\n\n        if (token.hasTrailingComment()) {\n            result.hasTrailingComment = true;\n        }\n\n        if (token.hasTrailingNewLine()) {\n            result.hasTrailingNewLine = true;\n        }\n\n        if (token.hasTrailingSkippedText()) {\n            result.hasTrailingSkippedText = true;\n        }\n\n        var trivia = token.leadingTrivia();\n        if (trivia.count() > 0) {\n            result.leadingTrivia = trivia;\n        }\n\n        trivia = token.trailingTrivia();\n        if (trivia.count() > 0) {\n            result.trailingTrivia = trivia;\n        }\n\n        return result;\n    }\n\n    export function value(token: ISyntaxToken): any {\n        return value1(token.tokenKind, token.text());\n    }\n\n    function hexValue(text: string, start: number, length: number): number {\n        var intChar = 0\n        for (var i = 0; i < length; i++) {\n            var ch2 = text.charCodeAt(start + i);\n            if (!CharacterInfo.isHexDigit(ch2)) {\n                break;\n            }\n\n            intChar = (intChar << 4) + CharacterInfo.hexValue(ch2);\n        }\n\n        return intChar;\n    }\n\n    var characterArray: number[] = [];\n    function convertEscapes(text: string): string {\n        characterArray.length = 0;\n\n        for (var i = 0, n = text.length; i < n; i++) {\n            var ch = text.charCodeAt(i);\n\n            if (ch === CharacterCodes.backslash) {\n                i++;\n                if (i < n) {\n                    ch = text.charCodeAt(i);\n                    switch (ch) {\n                        case CharacterCodes._0:\n                            characterArray.push(CharacterCodes.nullCharacter);\n                            continue;\n\n                        case CharacterCodes.b:\n                            characterArray.push(CharacterCodes.backspace);\n                            continue;\n\n                        case CharacterCodes.f:\n                            characterArray.push(CharacterCodes.formFeed);\n                            continue;\n\n                        case CharacterCodes.n:\n                            characterArray.push(CharacterCodes.lineFeed);\n                            continue;\n\n                        case CharacterCodes.r:\n                            characterArray.push(CharacterCodes.carriageReturn);\n                            continue;\n\n                        case CharacterCodes.t:\n                            characterArray.push(CharacterCodes.tab);\n                            continue;\n\n                        case CharacterCodes.v:\n                            characterArray.push(CharacterCodes.verticalTab);\n                            continue;\n\n                        case CharacterCodes.x:\n                            characterArray.push(hexValue(text, /*start:*/ i + 1, /*length:*/ 2));\n                            i += 2;\n                            continue;\n\n                        case CharacterCodes.u:\n                            characterArray.push(hexValue(text, /*start:*/ i + 1, /*length:*/ 4));\n                            i += 4;\n                            continue;\n\n                        default:\n                            // Any other character is ok as well.  As per rule:\n                            // EscapeSequence :: CharacterEscapeSequence\n                            // CharacterEscapeSequence :: NonEscapeCharacter\n                            // NonEscapeCharacter :: SourceCharacter but notEscapeCharacter or LineTerminator\n                            //\n                            // Intentional fall through\n                        }\n                }\n            }\n\n            characterArray.push(ch);\n        }\n\n        return String.fromCharCode.apply(null, characterArray);\n    }\n\n    function massageEscapes(text: string): string {\n        return text.indexOf(\"\\\\\") >= 0 ? convertEscapes(text) : text;\n    }\n\n    function value1(kind: SyntaxKind, text: string): any {\n        if (kind === SyntaxKind.IdentifierName) {\n            return massageEscapes(text);\n        }\n\n        switch (kind) {\n            case SyntaxKind.TrueKeyword:\n                return true;\n            case SyntaxKind.FalseKeyword:\n                return false;\n            case SyntaxKind.NullKeyword:\n                return null;\n        }\n\n        if (SyntaxFacts.isAnyKeyword(kind) || SyntaxFacts.isAnyPunctuation(kind)) {\n            return SyntaxFacts.getText(kind);\n        }\n\n        if (kind === SyntaxKind.NumericLiteral) {\n            return parseFloat(text);\n        }\n        else if (kind === SyntaxKind.StringLiteral) {\n            if (text.length > 1 && text.charCodeAt(text.length - 1) === text.charCodeAt(0)) {\n                // Properly terminated.  Remove the quotes, and massage any escape characters we see.\n                return massageEscapes(text.substr(1, text.length - 2));\n            }\n            else {\n                // Not property terminated.  Remove the first quote and massage any escape characters we see.\n                return massageEscapes(text.substr(1));\n\n            }\n        }\n        else if (kind === SyntaxKind.RegularExpressionLiteral) {\n            try {\n                var lastSlash = text.lastIndexOf(\"/\");\n                var body = text.substring(1, lastSlash);\n                var flags = text.substring(lastSlash + 1);\n                return new RegExp(body, flags);\n            }\n            catch (e) {\n                return null;\n            }\n        }\n        else if (kind === SyntaxKind.EndOfFileToken || kind === SyntaxKind.ErrorToken) {\n            return null;\n        }\n        else {\n            throw Errors.invalidOperation();\n        }\n    }\n\n    function valueText1(kind: SyntaxKind, text: string): string {\n        var value = value1(kind, text);\n        return value === null ? \"\" : value.toString();\n    }\n\n    export function valueText(token: ISyntaxToken): string {\n        var value = token.value();\n        return value === null ? \"\" : value.toString();\n    }\n\n    class EmptyToken implements ISyntaxToken {\n        public tokenKind: SyntaxKind;\n\n        constructor(kind: SyntaxKind) {\n            this.tokenKind = kind;\n        }\n\n        public clone(): ISyntaxToken {\n            return new EmptyToken(this.tokenKind);\n        }\n\n        public kind() { return this.tokenKind; }\n\n        public isToken(): bool { return true; }\n        public isNode(): bool { return false; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return false; }\n\n        public childCount(): number {\n            return 0;\n        }\n\n        public childAt(index: number): ISyntaxElement {\n            throw Errors.argumentOutOfRange(\"index\");\n        }\n\n        public toJSON(key) { return tokenToJSON(this); }\n        private accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        private firstToken() { return this; }\n        private lastToken() { return this; }\n        private isTypeScriptSpecific() { return false; }\n\n        // Empty tokens are never incrementally reusable.\n        private isIncrementallyUnusable() { return true; }\n\n        public fullWidth() { return 0; }\n        public width() { return 0; }\n        public text() { return \"\"; }\n        public fullText(): string { return \"\"; }\n        public value() { return null; }\n        public valueText() { return \"\"; }\n\n        public hasLeadingTrivia() { return false; }\n        public hasLeadingComment() { return false; }\n        public hasLeadingNewLine() { return false; }\n        public hasLeadingSkippedText() { return false; }\n        public leadingTriviaWidth() { return 0; }\n        public hasTrailingTrivia() { return false; }\n        public hasTrailingComment() { return false; }\n        public hasTrailingNewLine() { return false; }\n        public hasTrailingSkippedText() { return false; }\n        public hasSkippedText() { return false; }\n\n        public trailingTriviaWidth() { return 0; }\n        public leadingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n        public trailingTrivia(): ISyntaxTriviaList { return Syntax.emptyTriviaList; }\n        public realize(): ISyntaxToken { return realizeToken(this); }\n        private collectTextElements(elements: string[]): void { }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withLeadingTrivia(leadingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return this.realize().withTrailingTrivia(trailingTrivia);\n        }\n    }\n\n    export function emptyToken(kind: SyntaxKind): ISyntaxToken {\n        return new EmptyToken(kind);\n    }\n\n    class RealizedToken implements ISyntaxToken {\n        public tokenKind: SyntaxKind;\n        // public tokenKeywordKind: SyntaxKind;\n        private _leadingTrivia: ISyntaxTriviaList;\n        private _text: string;\n        private _value: any;\n        private _valueText: string;\n        private _trailingTrivia: ISyntaxTriviaList;\n\n        constructor(tokenKind: SyntaxKind,\n                    leadingTrivia: ISyntaxTriviaList,\n                    text: string,\n                    value: any,\n                    valueText: string,\n                    trailingTrivia: ISyntaxTriviaList) {\n            this.tokenKind = tokenKind;\n            this._leadingTrivia = leadingTrivia;\n            this._text = text;\n            this._value = value;\n            this._valueText = valueText;\n            this._trailingTrivia = trailingTrivia;\n        }\n\n        public clone(): ISyntaxToken {\n            return new RealizedToken(this.tokenKind, /*this.tokenKeywordKind,*/ this._leadingTrivia,\n                this._text, this._value, this._valueText, this._trailingTrivia);\n        }\n\n        public kind(): SyntaxKind { return this.tokenKind; }\n        public toJSON(key) { return tokenToJSON(this); }\n        private firstToken() { return this; }\n        private lastToken() { return this; }\n        private isTypeScriptSpecific() { return false; }\n\n        // Realized tokens are created from the parser.  They are *never* incrementally reusable.\n        private isIncrementallyUnusable() { return true; }\n\n        private accept(visitor: ISyntaxVisitor): any { return visitor.visitToken(this); }\n\n        public childCount(): number {\n            return 0;\n        }\n\n        public childAt(index: number): ISyntaxElement {\n            throw Errors.argumentOutOfRange(\"index\");\n        }\n\n        public isToken(): bool { return true; }\n        public isNode(): bool { return false; }\n        public isList(): bool { return false; }\n        public isSeparatedList(): bool { return false; }\n        public isTrivia(): bool { return false; }\n        public isTriviaList(): bool { return false; }\n\n        public fullWidth(): number { return this._leadingTrivia.fullWidth() + this.width() + this._trailingTrivia.fullWidth(); }\n        public width(): number { return this.text().length; }\n\n        public text(): string { return this._text; }\n        public fullText(): string { return this._leadingTrivia.fullText() + this.text() + this._trailingTrivia.fullText(); }\n\n        public value(): any { return this._value; }\n        public valueText(): string { return this._valueText; }\n\n        public hasLeadingTrivia(): bool { return this._leadingTrivia.count() > 0; }\n        public hasLeadingComment(): bool { return this._leadingTrivia.hasComment(); }\n        public hasLeadingNewLine(): bool { return this._leadingTrivia.hasNewLine(); }\n        public hasLeadingSkippedText(): bool { return this._leadingTrivia.hasSkippedText(); }\n        public leadingTriviaWidth(): number { return this._leadingTrivia.fullWidth(); }\n\n        public hasTrailingTrivia(): bool { return this._trailingTrivia.count() > 0; }\n        public hasTrailingComment(): bool { return this._trailingTrivia.hasComment(); }\n        public hasTrailingNewLine(): bool { return this._trailingTrivia.hasNewLine(); }\n        public hasTrailingSkippedText(): bool { return this._trailingTrivia.hasSkippedText(); }\n        public trailingTriviaWidth(): number { return this._trailingTrivia.fullWidth(); }\n\n        public hasSkippedText(): bool { return this.hasLeadingSkippedText() || this.hasTrailingSkippedText(); }\n\n        public leadingTrivia(): ISyntaxTriviaList { return this._leadingTrivia; }\n        public trailingTrivia(): ISyntaxTriviaList { return this._trailingTrivia; }\n\n        private findTokenInternal(parent: PositionedElement, position: number, fullStart: number): PositionedToken {\n            return new PositionedToken(parent, this, fullStart);\n        }\n\n        private collectTextElements(elements: string[]): void {\n            this.leadingTrivia().collectTextElements(elements);\n            elements.push(this.text());\n            this.trailingTrivia().collectTextElements(elements);\n        }\n\n        public withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return new RealizedToken(\n                this.tokenKind, leadingTrivia, this._text, this._value, this._valueText, this._trailingTrivia);\n        }\n\n        public withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxToken {\n            return new RealizedToken(\n                this.tokenKind,  this._leadingTrivia, this._text, this._value, this._valueText, trailingTrivia);\n        }\n    }\n\n    export function token(kind: SyntaxKind, info: ITokenInfo = null): ISyntaxToken {\n        var text = (info !== null && info.text !== undefined) ? info.text : SyntaxFacts.getText(kind);\n\n        return new RealizedToken(\n            kind,\n            Syntax.triviaList(info === null ? null : info.leadingTrivia),\n            text,\n            value1(kind, text),\n            valueText1(kind, text),\n            Syntax.triviaList(info === null ? null : info.trailingTrivia));\n    }\n    \n    export function identifier(text: string, info: ITokenInfo = null): ISyntaxToken {\n        info = info || {};\n        info.text = text;\n        return token(SyntaxKind.IdentifierName, info);\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class SyntaxTokenReplacer extends SyntaxRewriter {\n        constructor(private token1: ISyntaxToken,\n                    private token2: ISyntaxToken) {\n            super();\n        }\n\n        private visitToken(token: ISyntaxToken): ISyntaxToken {\n            if (token === this.token1) {\n                // Found the token to replace.  Return the new token and null out our state.  This will \n                // let the later visit methods bail out earlier.\n                var result = this.token2;\n                this.token1 = null;\n                this.token2 = null;\n\n                return result;\n            }\n\n            return token;\n        }\n\n        private visitNode(node: SyntaxNode): SyntaxNode {\n            if (this.token1 === null) {\n                return node;\n            }\n\n            return super.visitNode(node);\n        }\n\n        private visitList(list: ISyntaxList): ISyntaxList {\n            if (this.token1 === null) {\n                return list;\n            }\n\n            return super.visitList(list);\n        }\n\n        private visitSeparatedList(list: ISeparatedSyntaxList): ISeparatedSyntaxList {\n            if (this.token1 === null) {\n                return list;\n            }\n\n            return super.visitSeparatedList(list);\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript.Syntax {\n    class SyntaxTrivia implements ISyntaxTrivia {\n        private _kind: SyntaxKind;\n        private _text: string;\n\n        constructor(kind: SyntaxKind, text: string) {\n            this._kind = kind;\n            this._text = text;\n        }\n\n        public toJSON(key) {\n            var result: any = {};\n            result.kind = (<any>SyntaxKind)._map[this._kind];\n            result.text = this._text;\n            return result;\n        }\n\n        public kind(): SyntaxKind {\n            return this._kind;\n        }\n\n        public fullWidth(): number {\n            return this._text.length;\n        }\n\n        public fullText(): string {\n            return this._text;\n        }\n\n        public isWhitespace(): bool {\n            return this.kind() === SyntaxKind.WhitespaceTrivia;\n        }\n\n        public isComment(): bool {\n            return this.kind() === SyntaxKind.SingleLineCommentTrivia || this.kind() === SyntaxKind.MultiLineCommentTrivia;\n        }\n\n        public isNewLine(): bool {\n            return this.kind() === SyntaxKind.NewLineTrivia;\n        }\n\n        public isSkippedText(): bool {\n            return this.kind() === SyntaxKind.SkippedTextTrivia;\n        }\n\n        public collectTextElements(elements: string[]): void {\n            elements.push(this.fullText());\n        }\n    }\n\n    export function trivia(kind: SyntaxKind, text: string): ISyntaxTrivia {\n        // Debug.assert(kind === SyntaxKind.MultiLineCommentTrivia || kind === SyntaxKind.NewLineTrivia || kind === SyntaxKind.SingleLineCommentTrivia || kind === SyntaxKind.WhitespaceTrivia || kind === SyntaxKind.SkippedTextTrivia);\n        // Debug.assert(text.length > 0);\n        return new SyntaxTrivia(kind, text);\n    }\n\n    export function spaces(count: number): ISyntaxTrivia {\n        return trivia(SyntaxKind.WhitespaceTrivia, StringUtilities.repeat(\" \", count));\n    }\n\n    export function whitespace(text: string): ISyntaxTrivia {\n        return trivia(SyntaxKind.WhitespaceTrivia, text);\n    }\n\n    export function multiLineComment(text: string): ISyntaxTrivia {\n        return trivia(SyntaxKind.MultiLineCommentTrivia, text);\n    }\n\n    export function singleLineComment(text: string): ISyntaxTrivia {\n        return trivia(SyntaxKind.SingleLineCommentTrivia, text);\n    }\n\n    export var spaceTrivia: ISyntaxTrivia = spaces(1);\n    export var lineFeedTrivia: ISyntaxTrivia = trivia(SyntaxKind.NewLineTrivia, \"\\n\");\n    export var carriageReturnTrivia: ISyntaxTrivia = trivia(SyntaxKind.NewLineTrivia, \"\\r\");\n    export var carriageReturnLineFeedTrivia: ISyntaxTrivia = trivia(SyntaxKind.NewLineTrivia, \"\\r\\n\");\n\n    // Breaks a multiline trivia up into individual line components.  If the trivia doesn\'t span\n    // any lines, then the result will be a single string with the entire text of the trivia. \n    // Otherwise, there will be one entry in the array for each line spanned by the trivia.  Each\n    // entry will contain the line separator at the end of the string.\n    export function splitMultiLineCommentTriviaIntoMultipleLines(trivia: ISyntaxTrivia): string[] {\n        // Debug.assert(trivia.kind() === SyntaxKind.MultiLineCommentTrivia);\n        var result: string[] = [];\n\n        var triviaText = trivia.fullText();\n        var currentIndex = 0;\n\n        for (var i = 0; i < triviaText.length; i++) {\n            var ch = triviaText.charCodeAt(i);\n\n            // When we run into a newline for the first time, create the string builder and copy\n            // all the values up to this newline into it.\n            var isCarriageReturnLineFeed = false;\n            switch (ch) {\n                case CharacterCodes.carriageReturn:\n                    if (i < triviaText.length - 1 && triviaText.charCodeAt(i + 1) === CharacterCodes.lineFeed) {\n                        // Consume the \\r\n                        i++;\n                    }\n\n                // Fall through.\n\n                case CharacterCodes.lineFeed:\n                case CharacterCodes.paragraphSeparator:\n                case CharacterCodes.lineSeparator:\n                    // Eat from the last stating position through to the end of the newline.\n                    result.push(triviaText.substring(currentIndex, i + 1));\n\n                    // Set the current index to *after* the newline.\n                    currentIndex = i + 1;\n                    continue;\n            }\n        }\n\n        result.push(triviaText.substring(currentIndex));\n        return result;\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript.Syntax {\n    export var emptyTriviaList: ISyntaxTriviaList = {\n        kind: (): SyntaxKind => SyntaxKind.TriviaList,\n\n        count: (): number => 0,\n\n        syntaxTriviaAt: (index: number): ISyntaxTrivia => {\n            throw Errors.argumentOutOfRange(\"index\");\n        },\n\n        last: (): ISyntaxTrivia => {\n            throw Errors.argumentOutOfRange(\"index\");\n        },\n\n        fullWidth: (): number => 0,\n        fullText: (): string => \"\",\n\n        hasComment: (): bool => false,\n        hasNewLine: (): bool => false,\n        hasSkippedText: (): bool => false,\n\n        toJSON: (key) => [],\n\n        collectTextElements: (elements: string[]): void => { },\n\n        toArray: (): ISyntaxTrivia[] => [],\n\n        concat: (trivia: ISyntaxTriviaList): ISyntaxTriviaList => trivia,\n    };\n\n    function concatTrivia(list1: ISyntaxTriviaList, list2: ISyntaxTriviaList): ISyntaxTriviaList {\n        if (list1.count() === 0) {\n            return list2;\n        }\n\n        if (list2.count() === 0) {\n            return list1;\n        }\n\n        var trivia = list1.toArray();\n        trivia.push.apply(trivia, list2.toArray());\n\n        return triviaList(trivia);\n    }\n\n    function isComment(trivia: ISyntaxTrivia): bool {\n        return trivia.kind() === SyntaxKind.MultiLineCommentTrivia || trivia.kind() === SyntaxKind.SingleLineCommentTrivia;\n    }\n\n    class SingletonSyntaxTriviaList implements ISyntaxTriviaList {\n        private item: ISyntaxTrivia;\n\n        constructor(item: ISyntaxTrivia) {\n            this.item = item;\n        }\n\n        public kind(): SyntaxKind { return SyntaxKind.TriviaList; }\n\n        public count(): number {\n            return 1;\n        }\n\n        public syntaxTriviaAt(index: number): ISyntaxTrivia {\n            if (index !== 0) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.item;\n        }\n\n        public last(): ISyntaxTrivia {\n            return this.item;\n        }\n\n        public fullWidth(): number {\n            return this.item.fullWidth();\n        }\n\n        public fullText(): string {\n            return this.item.fullText();\n        }\n\n        public hasComment(): bool {\n            return isComment(this.item);\n        }\n\n        public hasNewLine(): bool {\n            return this.item.kind() === SyntaxKind.NewLineTrivia;\n        }\n\n        public hasSkippedText(): bool {\n            return this.item.kind() === SyntaxKind.SkippedTextTrivia;\n        }\n\n        public toJSON(key) {\n            return [this.item];\n        }\n\n        private collectTextElements(elements: string[]): void {\n            (<any>this.item).collectTextElements(elements);\n        }\n\n        public toArray(): ISyntaxTrivia[] {\n            return [this.item];\n        }\n\n        public concat(trivia: ISyntaxTriviaList): ISyntaxTriviaList {\n            return concatTrivia(this, trivia);\n        }\n    }\n\n    class NormalSyntaxTriviaList implements ISyntaxTriviaList {\n        private trivia: ISyntaxTrivia[];\n\n        constructor(trivia: ISyntaxTrivia[]) {\n            this.trivia = trivia;\n        }\n\n        public kind(): SyntaxKind { return SyntaxKind.TriviaList; }\n\n        public count() {\n            return this.trivia.length;\n        }\n\n        public syntaxTriviaAt(index: number): ISyntaxTrivia {\n            if (index < 0 || index >= this.trivia.length) {\n                throw Errors.argumentOutOfRange(\"index\");\n            }\n\n            return this.trivia[index];\n        }\n        \n        public last(): ISyntaxTrivia {\n            return this.trivia[this.trivia.length - 1];\n        }\n\n        public fullWidth(): number {\n            return ArrayUtilities.sum(this.trivia, t => t.fullWidth());\n        }\n\n        public fullText(): string {\n            var result = \"\";\n\n            for (var i = 0, n = this.trivia.length; i < n; i++) {\n                result += this.trivia[i].fullText();\n            }\n\n            return result;\n        }\n\n        public hasComment(): bool {\n            for (var i = 0; i < this.trivia.length; i++) {\n                if (isComment(this.trivia[i])) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public hasNewLine(): bool {\n            for (var i = 0; i < this.trivia.length; i++) {\n                if (this.trivia[i].kind() === SyntaxKind.NewLineTrivia) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public hasSkippedText(): bool {\n            for (var i = 0; i < this.trivia.length; i++) {\n                if (this.trivia[i].kind() === SyntaxKind.SkippedTextTrivia) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public toJSON(key) {\n            return this.trivia;\n        }\n\n        private collectTextElements(elements: string[]): void {\n            for (var i = 0; i < this.trivia.length; i++) {\n                (<any>this.trivia[i]).collectTextElements(elements);\n            }\n        }\n\n        public toArray(): ISyntaxTrivia[] {\n            return this.trivia.slice(0);\n        }\n\n        public concat(trivia: ISyntaxTriviaList): ISyntaxTriviaList {\n            return concatTrivia(this, trivia);\n        }\n    }\n\n    export function triviaList(trivia: ISyntaxTrivia[]): ISyntaxTriviaList {\n        if (trivia === undefined || trivia === null || trivia.length === 0) {\n            return Syntax.emptyTriviaList;\n        }\n\n        if (trivia.length === 1) {\n            return new SingletonSyntaxTriviaList(trivia[0]);\n        }\n\n        return new NormalSyntaxTriviaList(trivia);\n    }\n\n    export var spaceTriviaList: ISyntaxTriviaList = triviaList([Syntax.spaceTrivia]);\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class SyntaxUtilities {\n        public static isAngleBracket(positionedElement: PositionedElement): bool {\n            var element = positionedElement.element();\n            var parent = positionedElement.parentElement();\n            if (parent !== null && (element.kind() === SyntaxKind.LessThanToken || element.kind() === SyntaxKind.GreaterThanToken)) {\n                switch (parent.kind()) {\n                    case SyntaxKind.TypeArgumentList:\n                    case SyntaxKind.TypeParameterList:\n                    case SyntaxKind.CastExpression:\n                        return true;\n                }\n            }\n\n            return false;\n        }\n    }\n}\n﻿///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxVisitor {\n        visitToken(token: ISyntaxToken): any;\n        visitSourceUnit(node: SourceUnitSyntax): any;\n        visitExternalModuleReference(node: ExternalModuleReferenceSyntax): any;\n        visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): any;\n        visitImportDeclaration(node: ImportDeclarationSyntax): any;\n        visitExportAssignment(node: ExportAssignmentSyntax): any;\n        visitClassDeclaration(node: ClassDeclarationSyntax): any;\n        visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): any;\n        visitHeritageClause(node: HeritageClauseSyntax): any;\n        visitModuleDeclaration(node: ModuleDeclarationSyntax): any;\n        visitFunctionDeclaration(node: FunctionDeclarationSyntax): any;\n        visitVariableStatement(node: VariableStatementSyntax): any;\n        visitVariableDeclaration(node: VariableDeclarationSyntax): any;\n        visitVariableDeclarator(node: VariableDeclaratorSyntax): any;\n        visitEqualsValueClause(node: EqualsValueClauseSyntax): any;\n        visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): any;\n        visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): any;\n        visitOmittedExpression(node: OmittedExpressionSyntax): any;\n        visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): any;\n        visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpressionSyntax): any;\n        visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): any;\n        visitQualifiedName(node: QualifiedNameSyntax): any;\n        visitTypeArgumentList(node: TypeArgumentListSyntax): any;\n        visitConstructorType(node: ConstructorTypeSyntax): any;\n        visitFunctionType(node: FunctionTypeSyntax): any;\n        visitObjectType(node: ObjectTypeSyntax): any;\n        visitArrayType(node: ArrayTypeSyntax): any;\n        visitGenericType(node: GenericTypeSyntax): any;\n        visitTypeAnnotation(node: TypeAnnotationSyntax): any;\n        visitBlock(node: BlockSyntax): any;\n        visitParameter(node: ParameterSyntax): any;\n        visitMemberAccessExpression(node: MemberAccessExpressionSyntax): any;\n        visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): any;\n        visitElementAccessExpression(node: ElementAccessExpressionSyntax): any;\n        visitInvocationExpression(node: InvocationExpressionSyntax): any;\n        visitArgumentList(node: ArgumentListSyntax): any;\n        visitBinaryExpression(node: BinaryExpressionSyntax): any;\n        visitConditionalExpression(node: ConditionalExpressionSyntax): any;\n        visitConstructSignature(node: ConstructSignatureSyntax): any;\n        visitMethodSignature(node: MethodSignatureSyntax): any;\n        visitIndexSignature(node: IndexSignatureSyntax): any;\n        visitPropertySignature(node: PropertySignatureSyntax): any;\n        visitCallSignature(node: CallSignatureSyntax): any;\n        visitParameterList(node: ParameterListSyntax): any;\n        visitTypeParameterList(node: TypeParameterListSyntax): any;\n        visitTypeParameter(node: TypeParameterSyntax): any;\n        visitConstraint(node: ConstraintSyntax): any;\n        visitElseClause(node: ElseClauseSyntax): any;\n        visitIfStatement(node: IfStatementSyntax): any;\n        visitExpressionStatement(node: ExpressionStatementSyntax): any;\n        visitConstructorDeclaration(node: ConstructorDeclarationSyntax): any;\n        visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): any;\n        visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): any;\n        visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): any;\n        visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): any;\n        visitThrowStatement(node: ThrowStatementSyntax): any;\n        visitReturnStatement(node: ReturnStatementSyntax): any;\n        visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): any;\n        visitSwitchStatement(node: SwitchStatementSyntax): any;\n        visitCaseSwitchClause(node: CaseSwitchClauseSyntax): any;\n        visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): any;\n        visitBreakStatement(node: BreakStatementSyntax): any;\n        visitContinueStatement(node: ContinueStatementSyntax): any;\n        visitForStatement(node: ForStatementSyntax): any;\n        visitForInStatement(node: ForInStatementSyntax): any;\n        visitWhileStatement(node: WhileStatementSyntax): any;\n        visitWithStatement(node: WithStatementSyntax): any;\n        visitEnumDeclaration(node: EnumDeclarationSyntax): any;\n        visitEnumElement(node: EnumElementSyntax): any;\n        visitCastExpression(node: CastExpressionSyntax): any;\n        visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): any;\n        visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): any;\n        visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): any;\n        visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): any;\n        visitFunctionExpression(node: FunctionExpressionSyntax): any;\n        visitEmptyStatement(node: EmptyStatementSyntax): any;\n        visitTryStatement(node: TryStatementSyntax): any;\n        visitCatchClause(node: CatchClauseSyntax): any;\n        visitFinallyClause(node: FinallyClauseSyntax): any;\n        visitLabeledStatement(node: LabeledStatementSyntax): any;\n        visitDoStatement(node: DoStatementSyntax): any;\n        visitTypeOfExpression(node: TypeOfExpressionSyntax): any;\n        visitDeleteExpression(node: DeleteExpressionSyntax): any;\n        visitVoidExpression(node: VoidExpressionSyntax): any;\n        visitDebuggerStatement(node: DebuggerStatementSyntax): any;\n    }\n\n    export class SyntaxVisitor implements ISyntaxVisitor {\n        public defaultVisit(node: ISyntaxNodeOrToken): any {\n            return null;\n        }\n\n        private visitToken(token: ISyntaxToken): any {\n            return this.defaultVisit(token);\n        }\n\n        private visitSourceUnit(node: SourceUnitSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitExternalModuleReference(node: ExternalModuleReferenceSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitImportDeclaration(node: ImportDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitExportAssignment(node: ExportAssignmentSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitClassDeclaration(node: ClassDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitHeritageClause(node: HeritageClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitModuleDeclaration(node: ModuleDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitFunctionDeclaration(node: FunctionDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitVariableStatement(node: VariableStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitVariableDeclaration(node: VariableDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitVariableDeclarator(node: VariableDeclaratorSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitEqualsValueClause(node: EqualsValueClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitOmittedExpression(node: OmittedExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitQualifiedName(node: QualifiedNameSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitTypeArgumentList(node: TypeArgumentListSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitConstructorType(node: ConstructorTypeSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitFunctionType(node: FunctionTypeSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitObjectType(node: ObjectTypeSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitArrayType(node: ArrayTypeSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitGenericType(node: GenericTypeSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitTypeAnnotation(node: TypeAnnotationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitBlock(node: BlockSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitParameter(node: ParameterSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitMemberAccessExpression(node: MemberAccessExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitElementAccessExpression(node: ElementAccessExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitInvocationExpression(node: InvocationExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitArgumentList(node: ArgumentListSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitBinaryExpression(node: BinaryExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitConditionalExpression(node: ConditionalExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitConstructSignature(node: ConstructSignatureSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitMethodSignature(node: MethodSignatureSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitIndexSignature(node: IndexSignatureSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitPropertySignature(node: PropertySignatureSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitCallSignature(node: CallSignatureSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitParameterList(node: ParameterListSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitTypeParameterList(node: TypeParameterListSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitTypeParameter(node: TypeParameterSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitConstraint(node: ConstraintSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitElseClause(node: ElseClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitIfStatement(node: IfStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitExpressionStatement(node: ExpressionStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitConstructorDeclaration(node: ConstructorDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitThrowStatement(node: ThrowStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitReturnStatement(node: ReturnStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitSwitchStatement(node: SwitchStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitCaseSwitchClause(node: CaseSwitchClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitBreakStatement(node: BreakStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitContinueStatement(node: ContinueStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitForStatement(node: ForStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitForInStatement(node: ForInStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitWhileStatement(node: WhileStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitWithStatement(node: WithStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitEnumDeclaration(node: EnumDeclarationSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitEnumElement(node: EnumElementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitCastExpression(node: CastExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitFunctionExpression(node: FunctionExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitEmptyStatement(node: EmptyStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitTryStatement(node: TryStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitCatchClause(node: CatchClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitFinallyClause(node: FinallyClauseSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitLabeledStatement(node: LabeledStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitDoStatement(node: DoStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitTypeOfExpression(node: TypeOfExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitDeleteExpression(node: DeleteExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitVoidExpression(node: VoidExpressionSyntax): any {\n            return this.defaultVisit(node);\n        }\n\n        private visitDebuggerStatement(node: DebuggerStatementSyntax): any {\n            return this.defaultVisit(node);\n        }\n    }\n}\n﻿///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class SyntaxWalker implements ISyntaxVisitor {\n        public visitToken(token: ISyntaxToken): void {\n        }\n\n        public visitNode(node: SyntaxNode): void {\n            node.accept(this);\n        }\n\n        public visitNodeOrToken(nodeOrToken: ISyntaxNodeOrToken): void {\n            if (nodeOrToken.isToken()) { \n                this.visitToken(<ISyntaxToken>nodeOrToken);\n            }\n            else {\n                this.visitNode(<SyntaxNode>nodeOrToken);\n            }\n        }\n\n        private visitOptionalToken(token: ISyntaxToken): void {\n            if (token === null) {\n                return;\n            }\n\n            this.visitToken(token);\n        }\n\n        public visitOptionalNode(node: SyntaxNode): void {\n            if (node === null) {\n                return;\n            }\n\n            this.visitNode(node);\n        }\n\n        public visitOptionalNodeOrToken(nodeOrToken: ISyntaxNodeOrToken): void {\n            if (nodeOrToken === null) {\n                return;\n            }\n\n            this.visitNodeOrToken(nodeOrToken);\n        }\n\n        public visitList(list: ISyntaxList): void {\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n               this.visitNodeOrToken(list.childAt(i));\n            }\n        }\n\n        public visitSeparatedList(list: ISeparatedSyntaxList): void {\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                var item = list.childAt(i);\n                this.visitNodeOrToken(item);\n            }\n        }\n\n        public visitSourceUnit(node: SourceUnitSyntax): void {\n            this.visitList(node.moduleElements);\n            this.visitToken(node.endOfFileToken);\n        }\n\n        public visitExternalModuleReference(node: ExternalModuleReferenceSyntax): void {\n            this.visitToken(node.moduleKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitToken(node.stringLiteral);\n            this.visitToken(node.closeParenToken);\n        }\n\n        public visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): void {\n            this.visitNodeOrToken(node.moduleName);\n        }\n\n        public visitImportDeclaration(node: ImportDeclarationSyntax): void {\n            this.visitToken(node.importKeyword);\n            this.visitToken(node.identifier);\n            this.visitToken(node.equalsToken);\n            this.visitNode(node.moduleReference);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitExportAssignment(node: ExportAssignmentSyntax): void {\n            this.visitToken(node.exportKeyword);\n            this.visitToken(node.equalsToken);\n            this.visitToken(node.identifier);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitClassDeclaration(node: ClassDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.classKeyword);\n            this.visitToken(node.identifier);\n            this.visitOptionalNode(node.typeParameterList);\n            this.visitList(node.heritageClauses);\n            this.visitToken(node.openBraceToken);\n            this.visitList(node.classElements);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.interfaceKeyword);\n            this.visitToken(node.identifier);\n            this.visitOptionalNode(node.typeParameterList);\n            this.visitList(node.heritageClauses);\n            this.visitNode(node.body);\n        }\n\n        public visitHeritageClause(node: HeritageClauseSyntax): void {\n            this.visitToken(node.extendsOrImplementsKeyword);\n            this.visitSeparatedList(node.typeNames);\n        }\n\n        public visitModuleDeclaration(node: ModuleDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.moduleKeyword);\n            this.visitOptionalNodeOrToken(node.moduleName);\n            this.visitOptionalToken(node.stringLiteral);\n            this.visitToken(node.openBraceToken);\n            this.visitList(node.moduleElements);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitFunctionDeclaration(node: FunctionDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.functionKeyword);\n            this.visitToken(node.identifier);\n            this.visitNode(node.callSignature);\n            this.visitOptionalNode(node.block);\n            this.visitOptionalToken(node.semicolonToken);\n        }\n\n        public visitVariableStatement(node: VariableStatementSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitNode(node.variableDeclaration);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitVariableDeclaration(node: VariableDeclarationSyntax): void {\n            this.visitToken(node.varKeyword);\n            this.visitSeparatedList(node.variableDeclarators);\n        }\n\n        public visitVariableDeclarator(node: VariableDeclaratorSyntax): void {\n            this.visitToken(node.identifier);\n            this.visitOptionalNode(node.typeAnnotation);\n            this.visitOptionalNode(node.equalsValueClause);\n        }\n\n        public visitEqualsValueClause(node: EqualsValueClauseSyntax): void {\n            this.visitToken(node.equalsToken);\n            this.visitNodeOrToken(node.value);\n        }\n\n        public visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): void {\n            this.visitToken(node.operatorToken);\n            this.visitNodeOrToken(node.operand);\n        }\n\n        public visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): void {\n            this.visitToken(node.openBracketToken);\n            this.visitSeparatedList(node.expressions);\n            this.visitToken(node.closeBracketToken);\n        }\n\n        public visitOmittedExpression(node: OmittedExpressionSyntax): void {\n        }\n\n        public visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): void {\n            this.visitToken(node.openParenToken);\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.closeParenToken);\n        }\n\n        public visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpressionSyntax): void {\n            this.visitToken(node.identifier);\n            this.visitToken(node.equalsGreaterThanToken);\n            this.visitNodeOrToken(node.body);\n        }\n\n        public visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): void {\n            this.visitNode(node.callSignature);\n            this.visitToken(node.equalsGreaterThanToken);\n            this.visitNodeOrToken(node.body);\n        }\n\n        public visitQualifiedName(node: QualifiedNameSyntax): void {\n            this.visitNodeOrToken(node.left);\n            this.visitToken(node.dotToken);\n            this.visitToken(node.right);\n        }\n\n        public visitTypeArgumentList(node: TypeArgumentListSyntax): void {\n            this.visitToken(node.lessThanToken);\n            this.visitSeparatedList(node.typeArguments);\n            this.visitToken(node.greaterThanToken);\n        }\n\n        public visitConstructorType(node: ConstructorTypeSyntax): void {\n            this.visitToken(node.newKeyword);\n            this.visitOptionalNode(node.typeParameterList);\n            this.visitNode(node.parameterList);\n            this.visitToken(node.equalsGreaterThanToken);\n            this.visitNodeOrToken(node.type);\n        }\n\n        public visitFunctionType(node: FunctionTypeSyntax): void {\n            this.visitOptionalNode(node.typeParameterList);\n            this.visitNode(node.parameterList);\n            this.visitToken(node.equalsGreaterThanToken);\n            this.visitNodeOrToken(node.type);\n        }\n\n        public visitObjectType(node: ObjectTypeSyntax): void {\n            this.visitToken(node.openBraceToken);\n            this.visitSeparatedList(node.typeMembers);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitArrayType(node: ArrayTypeSyntax): void {\n            this.visitNodeOrToken(node.type);\n            this.visitToken(node.openBracketToken);\n            this.visitToken(node.closeBracketToken);\n        }\n\n        public visitGenericType(node: GenericTypeSyntax): void {\n            this.visitNodeOrToken(node.name);\n            this.visitNode(node.typeArgumentList);\n        }\n\n        public visitTypeAnnotation(node: TypeAnnotationSyntax): void {\n            this.visitToken(node.colonToken);\n            this.visitNodeOrToken(node.type);\n        }\n\n        public visitBlock(node: BlockSyntax): void {\n            this.visitToken(node.openBraceToken);\n            this.visitList(node.statements);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitParameter(node: ParameterSyntax): void {\n            this.visitOptionalToken(node.dotDotDotToken);\n            this.visitOptionalToken(node.publicOrPrivateKeyword);\n            this.visitToken(node.identifier);\n            this.visitOptionalToken(node.questionToken);\n            this.visitOptionalNode(node.typeAnnotation);\n            this.visitOptionalNode(node.equalsValueClause);\n        }\n\n        public visitMemberAccessExpression(node: MemberAccessExpressionSyntax): void {\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.dotToken);\n            this.visitToken(node.name);\n        }\n\n        public visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): void {\n            this.visitNodeOrToken(node.operand);\n            this.visitToken(node.operatorToken);\n        }\n\n        public visitElementAccessExpression(node: ElementAccessExpressionSyntax): void {\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.openBracketToken);\n            this.visitNodeOrToken(node.argumentExpression);\n            this.visitToken(node.closeBracketToken);\n        }\n\n        public visitInvocationExpression(node: InvocationExpressionSyntax): void {\n            this.visitNodeOrToken(node.expression);\n            this.visitNode(node.argumentList);\n        }\n\n        public visitArgumentList(node: ArgumentListSyntax): void {\n            this.visitOptionalNode(node.typeArgumentList);\n            this.visitToken(node.openParenToken);\n            this.visitSeparatedList(node.arguments);\n            this.visitToken(node.closeParenToken);\n        }\n\n        public visitBinaryExpression(node: BinaryExpressionSyntax): void {\n            this.visitNodeOrToken(node.left);\n            this.visitToken(node.operatorToken);\n            this.visitNodeOrToken(node.right);\n        }\n\n        public visitConditionalExpression(node: ConditionalExpressionSyntax): void {\n            this.visitNodeOrToken(node.condition);\n            this.visitToken(node.questionToken);\n            this.visitNodeOrToken(node.whenTrue);\n            this.visitToken(node.colonToken);\n            this.visitNodeOrToken(node.whenFalse);\n        }\n\n        public visitConstructSignature(node: ConstructSignatureSyntax): void {\n            this.visitToken(node.newKeyword);\n            this.visitNode(node.callSignature);\n        }\n\n        public visitMethodSignature(node: MethodSignatureSyntax): void {\n            this.visitToken(node.propertyName);\n            this.visitOptionalToken(node.questionToken);\n            this.visitNode(node.callSignature);\n        }\n\n        public visitIndexSignature(node: IndexSignatureSyntax): void {\n            this.visitToken(node.openBracketToken);\n            this.visitNode(node.parameter);\n            this.visitToken(node.closeBracketToken);\n            this.visitOptionalNode(node.typeAnnotation);\n        }\n\n        public visitPropertySignature(node: PropertySignatureSyntax): void {\n            this.visitToken(node.propertyName);\n            this.visitOptionalToken(node.questionToken);\n            this.visitOptionalNode(node.typeAnnotation);\n        }\n\n        public visitCallSignature(node: CallSignatureSyntax): void {\n            this.visitOptionalNode(node.typeParameterList);\n            this.visitNode(node.parameterList);\n            this.visitOptionalNode(node.typeAnnotation);\n        }\n\n        public visitParameterList(node: ParameterListSyntax): void {\n            this.visitToken(node.openParenToken);\n            this.visitSeparatedList(node.parameters);\n            this.visitToken(node.closeParenToken);\n        }\n\n        public visitTypeParameterList(node: TypeParameterListSyntax): void {\n            this.visitToken(node.lessThanToken);\n            this.visitSeparatedList(node.typeParameters);\n            this.visitToken(node.greaterThanToken);\n        }\n\n        public visitTypeParameter(node: TypeParameterSyntax): void {\n            this.visitToken(node.identifier);\n            this.visitOptionalNode(node.constraint);\n        }\n\n        public visitConstraint(node: ConstraintSyntax): void {\n            this.visitToken(node.extendsKeyword);\n            this.visitNodeOrToken(node.type);\n        }\n\n        public visitElseClause(node: ElseClauseSyntax): void {\n            this.visitToken(node.elseKeyword);\n            this.visitNodeOrToken(node.statement);\n        }\n\n        public visitIfStatement(node: IfStatementSyntax): void {\n            this.visitToken(node.ifKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitNodeOrToken(node.condition);\n            this.visitToken(node.closeParenToken);\n            this.visitNodeOrToken(node.statement);\n            this.visitOptionalNode(node.elseClause);\n        }\n\n        public visitExpressionStatement(node: ExpressionStatementSyntax): void {\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitConstructorDeclaration(node: ConstructorDeclarationSyntax): void {\n            this.visitToken(node.constructorKeyword);\n            this.visitNode(node.parameterList);\n            this.visitOptionalNode(node.block);\n            this.visitOptionalToken(node.semicolonToken);\n        }\n\n        public visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.propertyName);\n            this.visitNode(node.callSignature);\n            this.visitOptionalNode(node.block);\n            this.visitOptionalToken(node.semicolonToken);\n        }\n\n        public visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.getKeyword);\n            this.visitToken(node.propertyName);\n            this.visitNode(node.parameterList);\n            this.visitOptionalNode(node.typeAnnotation);\n            this.visitNode(node.block);\n        }\n\n        public visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.setKeyword);\n            this.visitToken(node.propertyName);\n            this.visitNode(node.parameterList);\n            this.visitNode(node.block);\n        }\n\n        public visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitNode(node.variableDeclarator);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitThrowStatement(node: ThrowStatementSyntax): void {\n            this.visitToken(node.throwKeyword);\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitReturnStatement(node: ReturnStatementSyntax): void {\n            this.visitToken(node.returnKeyword);\n            this.visitOptionalNodeOrToken(node.expression);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): void {\n            this.visitToken(node.newKeyword);\n            this.visitNodeOrToken(node.expression);\n            this.visitOptionalNode(node.argumentList);\n        }\n\n        public visitSwitchStatement(node: SwitchStatementSyntax): void {\n            this.visitToken(node.switchKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.closeParenToken);\n            this.visitToken(node.openBraceToken);\n            this.visitList(node.switchClauses);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitCaseSwitchClause(node: CaseSwitchClauseSyntax): void {\n            this.visitToken(node.caseKeyword);\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.colonToken);\n            this.visitList(node.statements);\n        }\n\n        public visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): void {\n            this.visitToken(node.defaultKeyword);\n            this.visitToken(node.colonToken);\n            this.visitList(node.statements);\n        }\n\n        public visitBreakStatement(node: BreakStatementSyntax): void {\n            this.visitToken(node.breakKeyword);\n            this.visitOptionalToken(node.identifier);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitContinueStatement(node: ContinueStatementSyntax): void {\n            this.visitToken(node.continueKeyword);\n            this.visitOptionalToken(node.identifier);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitForStatement(node: ForStatementSyntax): void {\n            this.visitToken(node.forKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitOptionalNode(node.variableDeclaration);\n            this.visitOptionalNodeOrToken(node.initializer);\n            this.visitToken(node.firstSemicolonToken);\n            this.visitOptionalNodeOrToken(node.condition);\n            this.visitToken(node.secondSemicolonToken);\n            this.visitOptionalNodeOrToken(node.incrementor);\n            this.visitToken(node.closeParenToken);\n            this.visitNodeOrToken(node.statement);\n        }\n\n        public visitForInStatement(node: ForInStatementSyntax): void {\n            this.visitToken(node.forKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitOptionalNode(node.variableDeclaration);\n            this.visitOptionalNodeOrToken(node.left);\n            this.visitToken(node.inKeyword);\n            this.visitNodeOrToken(node.expression);\n            this.visitToken(node.closeParenToken);\n            this.visitNodeOrToken(node.statement);\n        }\n\n        public visitWhileStatement(node: WhileStatementSyntax): void {\n            this.visitToken(node.whileKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitNodeOrToken(node.condition);\n            this.visitToken(node.closeParenToken);\n            this.visitNodeOrToken(node.statement);\n        }\n\n        public visitWithStatement(node: WithStatementSyntax): void {\n            this.visitToken(node.withKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitNodeOrToken(node.condition);\n            this.visitToken(node.closeParenToken);\n            this.visitNodeOrToken(node.statement);\n        }\n\n        public visitEnumDeclaration(node: EnumDeclarationSyntax): void {\n            this.visitList(node.modifiers);\n            this.visitToken(node.enumKeyword);\n            this.visitToken(node.identifier);\n            this.visitToken(node.openBraceToken);\n            this.visitSeparatedList(node.enumElements);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitEnumElement(node: EnumElementSyntax): void {\n            this.visitToken(node.propertyName);\n            this.visitOptionalNode(node.equalsValueClause);\n        }\n\n        public visitCastExpression(node: CastExpressionSyntax): void {\n            this.visitToken(node.lessThanToken);\n            this.visitNodeOrToken(node.type);\n            this.visitToken(node.greaterThanToken);\n            this.visitNodeOrToken(node.expression);\n        }\n\n        public visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): void {\n            this.visitToken(node.openBraceToken);\n            this.visitSeparatedList(node.propertyAssignments);\n            this.visitToken(node.closeBraceToken);\n        }\n\n        public visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): void {\n            this.visitToken(node.propertyName);\n            this.visitToken(node.colonToken);\n            this.visitNodeOrToken(node.expression);\n        }\n\n        public visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): void {\n            this.visitToken(node.getKeyword);\n            this.visitToken(node.propertyName);\n            this.visitToken(node.openParenToken);\n            this.visitToken(node.closeParenToken);\n            this.visitOptionalNode(node.typeAnnotation);\n            this.visitNode(node.block);\n        }\n\n        public visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): void {\n            this.visitToken(node.setKeyword);\n            this.visitToken(node.propertyName);\n            this.visitToken(node.openParenToken);\n            this.visitNode(node.parameter);\n            this.visitToken(node.closeParenToken);\n            this.visitNode(node.block);\n        }\n\n        public visitFunctionExpression(node: FunctionExpressionSyntax): void {\n            this.visitToken(node.functionKeyword);\n            this.visitOptionalToken(node.identifier);\n            this.visitNode(node.callSignature);\n            this.visitNode(node.block);\n        }\n\n        public visitEmptyStatement(node: EmptyStatementSyntax): void {\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitTryStatement(node: TryStatementSyntax): void {\n            this.visitToken(node.tryKeyword);\n            this.visitNode(node.block);\n            this.visitOptionalNode(node.catchClause);\n            this.visitOptionalNode(node.finallyClause);\n        }\n\n        public visitCatchClause(node: CatchClauseSyntax): void {\n            this.visitToken(node.catchKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitToken(node.identifier);\n            this.visitOptionalNode(node.typeAnnotation);\n            this.visitToken(node.closeParenToken);\n            this.visitNode(node.block);\n        }\n\n        public visitFinallyClause(node: FinallyClauseSyntax): void {\n            this.visitToken(node.finallyKeyword);\n            this.visitNode(node.block);\n        }\n\n        public visitLabeledStatement(node: LabeledStatementSyntax): void {\n            this.visitToken(node.identifier);\n            this.visitToken(node.colonToken);\n            this.visitNodeOrToken(node.statement);\n        }\n\n        public visitDoStatement(node: DoStatementSyntax): void {\n            this.visitToken(node.doKeyword);\n            this.visitNodeOrToken(node.statement);\n            this.visitToken(node.whileKeyword);\n            this.visitToken(node.openParenToken);\n            this.visitNodeOrToken(node.condition);\n            this.visitToken(node.closeParenToken);\n            this.visitToken(node.semicolonToken);\n        }\n\n        public visitTypeOfExpression(node: TypeOfExpressionSyntax): void {\n            this.visitToken(node.typeOfKeyword);\n            this.visitNodeOrToken(node.expression);\n        }\n\n        public visitDeleteExpression(node: DeleteExpressionSyntax): void {\n            this.visitToken(node.deleteKeyword);\n            this.visitNodeOrToken(node.expression);\n        }\n\n        public visitVoidExpression(node: VoidExpressionSyntax): void {\n            this.visitToken(node.voidKeyword);\n            this.visitNodeOrToken(node.expression);\n        }\n\n        public visitDebuggerStatement(node: DebuggerStatementSyntax): void {\n            this.visitToken(node.debuggerKeyword);\n            this.visitToken(node.semicolonToken);\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class PositionTrackingWalker extends SyntaxWalker {\n        private _position: number = 0;\n\n        public visitToken(token: ISyntaxToken): void {\n            this._position += token.fullWidth();\n        }\n\n        public position(): number {\n            return this._position;\n        }\n\n        public skip(element: ISyntaxElement): void {\n            this._position += element.fullWidth();\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface ITokenInformation {\n        previousToken: ISyntaxToken;\n        nextToken: ISyntaxToken;\n    }\n\n    export class SyntaxInformationMap extends SyntaxWalker {\n        private tokenToInformation = Collections.createHashTable(Collections.DefaultHashTableCapacity, Collections.identityHashCode);\n        private elementToPosition = Collections.createHashTable(Collections.DefaultHashTableCapacity, Collections.identityHashCode);\n\n        private _previousToken = null;\n        private _previousTokenInformation: ITokenInformation = null;\n        private _currentPosition = 0;\n        private _elementToParent = Collections.createHashTable(Collections.DefaultHashTableCapacity, Collections.identityHashCode);\n\n        private _parentStack: SyntaxNode[] = [];\n\n        constructor(private trackParents: bool, private trackPreviousToken: bool) {\n            super();\n            this._parentStack.push(null);\n        }\n\n        public static create(node: SyntaxNode, trackParents: bool, trackPreviousToken: bool): SyntaxInformationMap {\n            var map = new SyntaxInformationMap(trackParents, trackPreviousToken);\n            map.visitNode(node);\n            return map;\n        }\n\n        private visitNode(node: SyntaxNode): void {\n            this.trackParents && this._elementToParent.add(node, ArrayUtilities.last(this._parentStack));\n            this.elementToPosition.add(node, this._currentPosition);\n\n            this.trackParents && this._parentStack.push(node);\n            super.visitNode(node);\n            this.trackParents && this._parentStack.pop();\n        }\n\n        private visitToken(token: ISyntaxToken): void {\n            this.trackParents && this._elementToParent.add(token, ArrayUtilities.last(this._parentStack));\n\n            if (this.trackPreviousToken) {\n                var tokenInformation: ITokenInformation = {\n                    previousToken: this._previousToken,\n                    nextToken: null\n                };\n\n                if (this._previousTokenInformation !== null) {\n                    this._previousTokenInformation.nextToken = token;\n                }\n\n                this._previousToken = token;\n                this._previousTokenInformation = tokenInformation;\n\n                this.tokenToInformation.add(token, tokenInformation);\n            }\n\n            this.elementToPosition.add(token, this._currentPosition);\n            this._currentPosition += token.fullWidth();\n        }\n\n        public parent(element: ISyntaxElement): SyntaxNode {\n            return this._elementToParent.get(element);\n        }\n\n        public fullStart(element: ISyntaxElement): number {\n            return this.elementToPosition.get(element);\n        }\n\n        public start(element: ISyntaxElement): number {\n            return this.fullStart(element) + element.leadingTriviaWidth();\n        }\n\n        public end(element: ISyntaxElement): number {\n            return this.start(element) + element.width();\n        }\n\n        public previousToken(token: ISyntaxToken): ISyntaxToken {\n            return this.tokenInformation(token).previousToken;\n        }\n\n        public tokenInformation(token: ISyntaxToken): ITokenInformation {\n            return this.tokenToInformation.get(token);\n        }\n\n        public firstTokenInLineContainingToken(token: ISyntaxToken): ISyntaxToken {\n            var current = token;\n            while (true) {\n                var information = this.tokenInformation(current);\n                if (this.isFirstTokenInLineWorker(information)) {\n                    break;\n                }\n\n                current = information.previousToken;\n            }\n\n            return current;\n        }\n\n        public isFirstTokenInLine(token: ISyntaxToken): bool {\n            var information = this.tokenInformation(token);\n            return this.isFirstTokenInLineWorker(information);\n\n        }\n\n        private isFirstTokenInLineWorker(information: ITokenInformation): bool {\n            return information.previousToken === null || information.previousToken.hasTrailingNewLine();\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\n// A debug class that we use to make sure a syntax node is valid.  Currently, this simply verifies\n// that the same token does not appear in the tree multiple times.  This is important for \n// subsystems that want to map between tokens and positions.  If a token shows up multiple times in\n// the node, then it will not have a unique position, previous token, etc. etc. and that can screw\n// many algorithms.  For this reason, when generating trees, it is important that nodes that are \n// reused are cloned before insertion.\nmodule TypeScript {\n    export class SyntaxNodeInvariantsChecker extends SyntaxWalker {\n        private tokenTable = Collections.createHashTable(Collections.DefaultHashTableCapacity, Collections.identityHashCode);\n\n        public static checkInvariants(node: SyntaxNode): void {\n            node.accept(new SyntaxNodeInvariantsChecker());\n        }\n\n        private visitToken(token: ISyntaxToken): void {\n            // We\'re calling \'add\', so the table will throw if we try to put the same token in multiple\n            // times. \n            this.tokenTable.add(token, token);\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class DepthLimitedWalker extends PositionTrackingWalker {\n        private _depth: number = 0;\n        private _maximumDepth: number = 0;\n\n        constructor(maximumDepth: number) {\n            super();\n            this._maximumDepth = maximumDepth;\n        }\n\n        public visitNode(node: SyntaxNode): void {\n            if (this._depth < this._maximumDepth) {\n                this._depth++;\n                super.visitNode(node);\n                this._depth--;\n            }\n            else {\n                // update the position\n                this.skip(node);\n            }\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript.Parser {\n    // Information the parser needs to effectively rewind.\n    interface IParserRewindPoint {\n        // Information used by normal parser source.\n        previousToken: ISyntaxToken;\n        absolutePosition: number;\n        slidingWindowIndex: number;\n\n        // Information used by the incremental parser source.\n        oldSourceUnitCursorIndex: number;\n        changeDelta: number;\n        changeRange: TextChangeRange;\n\n        // Information used by the parser itself.\n\n        // As we speculatively parser, we may build up diagnostics.  When we rewind we want to \n        // \'forget\' that information.In order to do that we store the count of diagnostics and \n        // when we start speculating, and we reset to that count when we\'re done.  That way the\n        // speculative parse does not affect any further results.\n        diagnosticsCount: number;\n\n        // For debug purposes only, we also track the following information. They help us assert \n        // that we\'re not doing anything unexpected.\n\n        // Rewind points should work like a stack.  The first rewind point given out should be the\n        // last one released.  By keeping track of the count of points out when this was created, \n        // we can ensure that invariant was preserved.\n        pinCount: number;\n\n        // isInStrictMode and listParsingState should not have to be tracked by a rewind point.\n        // Because they are naturally mutated and restored based on the normal stack movement of \n        // the parser, they should automatically return to whatever value they had to begin with\n        // if the parser decides to rewind or not.  However, to ensure that this is true, we track\n        // these variables and check if they have the same value when we\'re rewinding/releasing.\n        isInStrictMode: bool;\n        listParsingState: ListParsingState;\n    }\n\n    // The precedence of expressions in typescript.  While we\'re parsing an expression, we will \n    // continue to consume and form new trees if the precedence is greater than our current\n    // precedence.  For example, if we have: a + b * c, we will first parse \'a\' with precedence 0. \n    // We will then see the + with precedence 13.  13 is greater than 0 so we will decide to create\n    // a binary expression with the result of parsing the sub expression \"b * c\".  We\'ll then parse\n    // the term \'b\' (passing in precedence 13).  We will then see the * with precedence 14.  14 is\n    // greater than 13, so we will create a binary expression from \"b\" and \"c\", return that, and \n    // join it with \"a\" producing:\n    //\n    //      +\n    //     / \\\n    //    a   *\n    //       / \\\n    //      b   c\n    //\n    // If we instead had: \"a * b + c\", we would first parser \'a\' with precedence 0.  We would then see \n    // the * with precedence 14.  14 is greater than 0 so we will decide to create a binary expression\n    // with the result of parsing the sub expression \"b + c\".  We\'ll then parse the term \'b\' (passing in\n    // precedence 14).  We will then see the + with precedence 13.  13 is less than 14, so we won\'t \n    // continue parsing subexpressions and will just return the expression \'b\'.  The caller will join \n    // that into \"a * b\" (and will be back at precedence 0). It will then see the + with precedence 11.\n    // 11 is greater than 0 so it will parse the sub expression and make a binary expression out of it\n    // producing:\n    //\n    //        +\n    //       / \\\n    //      *   c\n    //     / \\\n    //    a   b\n    enum ExpressionPrecedence {\n        // Intuitively, commas have the lowest precedence.  \"a || b, c\" is \"(a || b), c\", not\n        // \"a || (b, c)\"\n        CommaExpressionPrecedence = 1,\n\n        AssignmentExpressionPrecedence = 2,\n\n        ConditionalExpressionPrecedence = 3,\n\n        // REVIEW: Should ArrowFunctions have higher, lower, or the same precedence as ternary?\n        ArrowFunctionPrecedence = 4,\n\n        LogicalOrExpressionPrecedence = 5,\n        LogicalAndExpressionPrecedence = 6,\n        BitwiseOrExpressionPrecedence = 7,\n        BitwiseExclusiveOrExpressionPrecedence = 8,\n        BitwiseAndExpressionPrecedence = 9,\n        EqualityExpressionPrecedence = 10,\n        RelationalExpressionPrecedence = 11,\n        ShiftExpressionPrecdence = 12,\n        AdditiveExpressionPrecedence = 13,\n        MultiplicativeExpressionPrecedence = 14,\n\n        // Intuitively, unary expressions have the highest precedence.  After all, if you have:\n        //   !foo || bar\n        //\n        // Then you have \"(!foo) || bar\", not \"!(foo || bar)\"\n        UnaryExpressionPrecedence = 15,\n    }\n\n    // The current state of the parser wrt to list parsing.  The way to read these is as:\n    // CurrentProduction_SubList.  i.e. \"Block_Statements\" means \"we\'re parsing a Block, and we\'re \n    // currently parsing list of statements within it\".  This is used by the list parsing mechanism\n    // to parse the elements of the lists, and recover from errors we encounter when we run into \n    // unexpected code.\n    // \n    // For example, when we are in ArgumentList_Arguments, we will continue trying to consume code \n    // as long as \"isArgument\" is true.  If we run into a token for which \"isArgument\" is not true \n    // we will do the following:\n    //\n    // If the token is a StopToken for ArgumentList_Arguments (like \")\" ) then we will stop parsing\n    // the list of arguments with no error.\n    //\n    // Otherwise, we *do* report an error for this unexpected token, and then enter error recovery \n    // mode to decide how to try to recover from this unexpected token.\n    //\n    // Error recovery will walk up the list of states we\'re in seeing if the token is a stop token\n    // for that construct *or* could start another element within what construct.  For example, if\n    // the unexpected token was \'}\' then that would be a stop token for Block_Statements. \n    // Alternatively, if the unexpected token was \'return\', then that would be a start token for \n    // the next statment in Block_Statements.\n    // \n    // If either of those cases are true, We will then return *without* consuming  that token. \n    // (Remember, we\'ve already reported an error).  Now we\'re just letting the higher up parse \n    // constructs eventually try to consume that token.\n    //\n    // If none of the higher up states consider this a stop or start token, then we will simply \n    // consume the token and add it to our list of \'skipped tokens\'.  We will then repeat the \n    // above algorithm until we resynchronize at some point.\n    enum ListParsingState {\n        SourceUnit_ModuleElements = 1 << 0,\n        ClassDeclaration_ClassElements = 1 << 1,\n        ModuleDeclaration_ModuleElements = 1 << 2,\n        SwitchStatement_SwitchClauses = 1 << 3,\n        SwitchClause_Statements = 1 << 4,\n        Block_Statements = 1 << 5,\n        TryBlock_Statements = 1 << 6,\n        CatchBlock_Statements = 1 << 7,\n        EnumDeclaration_EnumElements = 1 << 8,\n        ObjectType_TypeMembers = 1 << 9,\n        ClassOrInterfaceDeclaration_HeritageClauses = 1 << 10,\n        HeritageClause_TypeNameList = 1 << 11,\n        VariableDeclaration_VariableDeclarators_AllowIn = 1 << 12,\n        VariableDeclaration_VariableDeclarators_DisallowIn = 1 << 13,\n        ArgumentList_AssignmentExpressions = 1 << 14,\n        ObjectLiteralExpression_PropertyAssignments = 1 << 15,\n        ArrayLiteralExpression_AssignmentExpressions = 1 << 16,\n        ParameterList_Parameters = 1 << 17,\n        TypeArgumentList_Types = 1 << 18,\n        TypeParameterList_TypeParameters = 1 << 19,\n\n        FirstListParsingState = SourceUnit_ModuleElements,\n        LastListParsingState = TypeArgumentList_Types,\n    }\n\n    // Allows one to easily move over a syntax tree.  Used during incremental parsing to move over\n    // the previously parsed tree to provide nodes and tokens that can be reused when parsing the\n    // updated text.\n    class SyntaxCursor {\n        private _elements: ISyntaxElement[] = [];\n        private _index: number = 0;\n        private _pinCount: number = 0;\n\n        constructor(sourceUnit: SourceUnitSyntax) {\n            sourceUnit.insertChildrenInto(this._elements, 0);\n        }\n\n        public isFinished(): bool {\n            return this._index === this._elements.length;\n        }\n\n        public currentElement(): ISyntaxElement {\n            if (this.isFinished()) {\n                return null;\n            }\n\n            return this._elements[this._index];\n        }\n\n        public currentNode(): SyntaxNode {\n            var element = this.currentElement();\n            return element !== null && element.isNode() ? <SyntaxNode>element : null;\n        }\n\n        public moveToFirstChild() {\n            if (this.isFinished()) {\n                return;\n            }\n\n            var element = this._elements[this._index];\n            if (element.isToken()) {\n                // If we\'re already on a token, there\'s nothing to do.\n                return;\n            }\n\n            // Otherwise, break the node we\'re pointing at into its children.  We\'ll then be \n            // pointing at the first child\n            var node = <SyntaxNode>element;\n\n            // Remove the item that we\'re pointing at.\n            this._elements.splice(this._index, 1);\n\n            // And add its children into the position it was at.\n            node.insertChildrenInto(this._elements, this._index);\n        }\n\n        public moveToNextSibling() {\n            if (this.isFinished()) {\n                return;\n            }\n\n            if (this._pinCount > 0) {\n                // If we\'re currently pinned, then just move our index forward.  We\'ll then be \n                // pointing at the next sibling.\n                this._index++;\n                return;\n            }\n\n            // if we\'re not pinned, we better be pointed at the first item in the list.\n            // Debug.assert(this._index === 0);\n\n            // Just shift ourselves over so we forget the current element we\'re pointing at and \n            // we\'re pointing at the next slibing.\n            this._elements.shift();\n        }\n\n        public getAndPinCursorIndex(): number {\n            this._pinCount++;\n            return this._index;\n        }\n\n        public releaseAndUnpinCursorIndex(index: number) {\n            // this._index = index;\n\n            // Debug.assert(this._pinCount > 0);\n            this._pinCount--;\n            if (this._pinCount === 0) {\n                // The first pin was given out at index 0.  So we better be back at index 0.\n                // Debug.assert(this._index === 0);\n            }\n        }\n\n        public rewindToPinnedCursorIndex(index: number): void {\n            // Debug.assert(index >= 0 && index <= this._elements.length);\n            // Debug.assert(this._pinCount > 0);\n            this._index = index;\n        }\n\n        public pinCount(): number {\n            return this._pinCount;\n        }\n\n        private moveToFirstToken(): void {\n            var element: ISyntaxElement;\n\n            while (!this.isFinished()) {\n                element = this.currentElement();\n                if (element.isNode()) {\n                    this.moveToFirstChild();\n                    continue;\n                }\n\n                // Debug.assert(element.isToken());\n                return;\n            }\n        }\n\n        public currentToken(): ISyntaxToken {\n            this.moveToFirstToken();\n            if (this.isFinished()) {\n                return null;\n            }\n\n            var element = this.currentElement();\n\n            // Debug.assert(element.isToken());\n            return <ISyntaxToken>element;\n        }\n\n        public peekToken(n: number): ISyntaxToken {\n            this.moveToFirstToken();\n            var pin = this.getAndPinCursorIndex();\n            try {\n                for (var i = 0; i < n; i++) {\n                    this.moveToNextSibling();\n                    this.moveToFirstToken();\n                }\n\n                return this.currentToken();\n            }\n            finally {\n                this.rewindToPinnedCursorIndex(pin);\n                this.releaseAndUnpinCursorIndex(pin);\n            }\n        }\n    }\n    \n    // Interface that represents the source that the parser pulls tokens from.  Essentially, this \n    // is the interface that the parser needs an underlying scanner to provide.  This allows us to\n    // separate out \"what\" the parser does with the tokens it retrieves versus \"how\" it obtains\n    // the tokens.  i.e. all the logic for parsing language constructs sits in ParserImpl, while \n    // all the logic for retrieving tokens sits in individual IParserSources.\n    //\n    // By separating out this interface, we also make incremental parsing much easier.  Instead of\n    // having the parser directly sit on top of the scanner, we sit it on this abstraction.  Then\n    // in incremental scenarios, we can use the IncrementalParserSource to pull tokens (or even \n    // full nodes) from the previous tree when possible.  Of course, we\'ll still end up using a \n    // scanner for new text.  But that can all happen inside the source, with none of the logic in\n    // the parser having to be aware of it.\n    //\n    // In general terms, a parser source represents a position within a text.  At that position, \n    // one can ask for the \'currentToken\' that the source is pointing at.  The \'previousToken\' that\n    // precedes this token (generally used for automatic semicolon insertion, and other minor \n    // parsing decisions).  Then, once the parser consumes that token it can ask the source to\n    // \'moveToNextToken\'.\n    //\n    // Additional special abilities include:\n    //  1) Being able to peek an arbitrary number of tokens ahead efficiently.\n    //  2) Being able to retrieve fully parsed nodes from the source, not just tokens. This happens\n    //     in incremental scenarios when the source is certain that the node is completley safe to\n    //     reuse.\n    //  3) Being able to get a \'rewind point\' to the current location.  This allows the parser to\n    //     speculatively parse as much as it wants, and then reset itself back to that point, \n    //     ensuring that no state changes that occurred after getting the \'rewing point\' are \n    //     observable.\n    //  4) Being able to reinterpret the current token being pointed at as a regular expression \n    //     token.  This is necessary as the scanner does not have enough information to correctly\n    //     distinguish \"/\" or \"/=\" as divide tokens, versus \"/..../\" as a regex token.  If the \n    //     parser sees a \"/\" in a place where a divide is not allowed, but a regex would be, then\n    //     it can call into the source and ask if a regex token could be returned instead.  The \n    //     sources are smart enough to do that and not be affected by any additional work they may\n    //     have done when they originally scanned that token.\n    interface IParserSource {\n        // The absolute index that the current token starts at.  \'currentToken\' and \'currentNode\'\n        // have their fullStart at this position.  previousToken has it\'s fullEnd at this position.\n        absolutePosition(): number;\n\n        // The token that comes before the \'currentToken\' that hte source is pointing at. Initially\n        // null. \n        previousToken(): ISyntaxToken;\n\n        // The current syntax node the source is pointing at.  Only available in incremental settings.\n        // The source can point at a node if that node doesn\'t intersect any of the text changes in\n        // the file, and doesn\'t contain certain unacceptable constructs.  For example, if the node\n        // contains skipped text, then it will not be reused.\n        currentNode(): SyntaxNode;\n\n        // The current token the source is pointing at.\n        currentToken(): ISyntaxToken;\n\n        // The current token reinterpretted as a regex token.  This must only be called when the \n        // source is pointing at a \"/\" or \"/=\" token. \n        currentTokenAllowingRegularExpression(): ISyntaxToken;\n\n        // Peek any number of tokens ahead from the current location in source.  peekToken(0) is\n        // equivalent to \'currentToken\', peekToken(1) is the next token, peekToken(2) the token\n        // after that, etc.  If the caller peeks past the end of the text, then EndOfFile tokens\n        // will be returned.\n        peekToken(n: number): ISyntaxToken;\n\n        // Called to move the source to the next node or token once the parser has consumed the \n        // current one.\n        moveToNextNode(): void;\n        moveToNextToken(): void;\n\n        // Gets a rewind point that the parser can use to move back to after it speculatively \n        // parses something.  The source guarantees that if the parser calls \'rewind\' with that \n        // point that it will be mostly in the same state that it was in when \'getRewindPoint\'\n        // was called.  i.e. calling currentToken, peekToken, tokenDiagnostics, etc. will result\n        // in the same values.  One allowed exemption to this is \'currentNode\'.  If a rewind point\n        // is requested and rewound, then getting the currentNode may not be possible.  However,\n        // as this is purely a performance optimization, it will not affect correctness.\n        //\n        // Note: that rewind points are not free (but they should also not be too expensive).  So\n        // they should be used judiciously.  While a rewind point is held by the parser, the source\n        // is not free to do things that it would normally do.  For example, it cannot throw away\n        // tokens that it has scanned on or after the rewind point as it must keep them alive for\n        // the parser to move back to.\n        //\n        // Rewind points also work in a stack fashion.  The first rewind point given out must be\n        // the last rewind point released.  Do not release them out of order, or bad things can \n        // happen.\n        //\n        // Do *NOT* forget to release a rewind point.  Always put them in a finally block to ensure\n        // that they are released.  If they are not released, things will still work, you will just\n        // consume far more memory than necessary.\n        getRewindPoint(): IParserRewindPoint;\n\n        // Rewinds the source to the position and state it was at when this rewind point was created.\n        // This does not need to be called if the parser decides it does not need to rewind.  For \n        // example, the parser may speculatively parse out a lambda expression when it sees something\n        // ambiguous like \"(a = b, c = ...\".  If it succeeds parsing that as a lambda, then it will\n        // just return that result.  However, if it fails *then* it will rewind and try it again as\n        // a parenthesized expression.  \n        rewind(rewindPoint: IParserRewindPoint): void;\n\n        // Called when the parser is done speculative parsing and no longer needs the rewind point.\n        // Must be called for every rewing point retrived.\n        releaseRewindPoint(rewindPoint: IParserRewindPoint): void;\n\n        // Retrieves the diagnostics generated while the source was producing nodes or tokens. \n        // Should generally only be called after the document has been completely parsed.\n        tokenDiagnostics(): SyntaxDiagnostic[];\n        \n        languageVersion(): LanguageVersion;\n    }\n\n    // Parser source used in batch scenarios.  Directly calls into an underlying text scanner and\n    // supports none of the functionality to reuse nodes.  Good for when you just want want to do\n    // a single parse of a file.\n    class NormalParserSource implements IParserSource {\n        // The sliding window that we store tokens in.\n        private slidingWindow: SlidingWindow;\n\n        // The scanner we\'re pulling tokens from.\n        private scanner: Scanner1;\n\n        // The previous token to the current token.  Set when we advance to the next token.\n        private _previousToken: ISyntaxToken = null;\n\n        // The absolute position we\'re at in the text we\'re reading from.\n        private _absolutePosition: number = 0;\n\n        // The diagnostics we get while scanning.  Note: this never gets rewound when we do a normal\n        // rewind.  That\'s because rewinding doesn\'t affect the tokens created.  It only affects where\n        // in the token stream we\'re pointing at.  However, it will get modified if we we decide to\n        // reparse a / or /= as a regular expression.\n        private _tokenDiagnostics: SyntaxDiagnostic[] = [];\n\n        // Pool of rewind points we give out if the parser needs one.\n        private rewindPointPool: IParserRewindPoint[] = [];\n        private rewindPointPoolCount = 0;\n\n        constructor(fileName: string,\n                    text: ISimpleText,\n                    languageVersion: LanguageVersion) {\n            this.slidingWindow = new SlidingWindow(this, ArrayUtilities.createArray(/*defaultWindowSize:*/ 32, null), null);\n            this.scanner = new Scanner1(fileName, text, languageVersion);\n        }\n\n        public languageVersion(): LanguageVersion {\n            return this.scanner.languageVersion();\n        }\n\n        private currentNode(): SyntaxNode {\n            // The normal parser source never returns nodes.  They\'re only returned by the \n            // incremental parser source.\n            return null;\n        }\n\n        private moveToNextNode(): void {\n            // Should never get called.\n            throw Errors.invalidOperation();\n        }\n\n        public absolutePosition() {\n            return this._absolutePosition;\n        }\n\n        public previousToken(): ISyntaxToken {\n            return this._previousToken;\n        }\n\n        public tokenDiagnostics(): SyntaxDiagnostic[] {\n            return this._tokenDiagnostics;\n        }\n\n        private getOrCreateRewindPoint(): IParserRewindPoint {\n            if (this.rewindPointPoolCount === 0) {\n                return <IParserRewindPoint>{};\n            }\n\n            this.rewindPointPoolCount--;\n            var result = this.rewindPointPool[this.rewindPointPoolCount];\n            this.rewindPointPool[this.rewindPointPoolCount] = null;\n            return result;\n        }\n\n        public getRewindPoint(): IParserRewindPoint {\n            var slidingWindowIndex = this.slidingWindow.getAndPinAbsoluteIndex();\n\n            var rewindPoint = this.getOrCreateRewindPoint();\n\n            rewindPoint.slidingWindowIndex = slidingWindowIndex;\n            rewindPoint.previousToken = this._previousToken;\n            rewindPoint.absolutePosition = this._absolutePosition;\n\n            rewindPoint.pinCount = this.slidingWindow.pinCount();\n\n            return rewindPoint;\n        }\n\n        public isPinned(): bool {\n            return this.slidingWindow.pinCount() > 0;\n        }\n\n        public rewind(rewindPoint: IParserRewindPoint): void {\n            this.slidingWindow.rewindToPinnedIndex(rewindPoint.slidingWindowIndex);\n\n            this._previousToken = rewindPoint.previousToken;\n            this._absolutePosition = rewindPoint.absolutePosition;\n        }\n\n        public releaseRewindPoint(rewindPoint: IParserRewindPoint): void {\n            // Debug.assert(this.slidingWindow.pinCount() === rewindPoint.pinCount);\n            this.slidingWindow.releaseAndUnpinAbsoluteIndex((<any>rewindPoint).absoluteIndex);\n\n            this.rewindPointPool[this.rewindPointPoolCount] = rewindPoint;\n            this.rewindPointPoolCount++;\n        }\n\n        private fetchMoreItems(allowRegularExpression: bool, sourceIndex: number, window: any[], destinationIndex: number, spaceAvailable: number): number {\n            // Assert disabled because it is actually expensive enugh to affect perf.\n            // Debug.assert(spaceAvailable > 0);\n            window[destinationIndex] = this.scanner.scan(this._tokenDiagnostics, allowRegularExpression);\n            return 1;\n        }\n\n        public peekToken(n: number): ISyntaxToken {\n            return this.slidingWindow.peekItemN(n);\n        }\n\n        public moveToNextToken(): void {\n            var currentToken = this.currentToken();\n            this._absolutePosition += currentToken.fullWidth();\n            this._previousToken = currentToken;\n\n            this.slidingWindow.moveToNextItem();\n        }\n\n        public currentToken(): ISyntaxToken {\n            return this.slidingWindow.currentItem(/*allowRegularExpression:*/ false);\n        }\n\n        private removeDiagnosticsOnOrAfterPosition(position: number): void {\n            // walk backwards, removing any diagnostics that came after the the current token\'s\n            // full start position.\n            var tokenDiagnosticsLength = this._tokenDiagnostics.length;\n            while (tokenDiagnosticsLength > 0) {\n                var diagnostic = this._tokenDiagnostics[tokenDiagnosticsLength - 1];\n                if (diagnostic.start() >= position) {\n                    tokenDiagnosticsLength--;\n                }\n                else {\n                    break;\n                }\n            }\n\n            this._tokenDiagnostics.length = tokenDiagnosticsLength;\n        }\n\n        public resetToPosition(absolutePosition: number, previousToken: ISyntaxToken): void {\n            this._absolutePosition = absolutePosition;\n            this._previousToken = previousToken;\n\n            // First, remove any diagnostics that came after this position.\n            this.removeDiagnosticsOnOrAfterPosition(absolutePosition);\n\n            // Now, tell our sliding window to throw away all tokens after this position as well.\n            this.slidingWindow.disgardAllItemsFromCurrentIndexOnwards();\n\n            // Now tell the scanner to reset its position to this position as well.  That way\n            // when we try to scan the next item, we\'ll be at the right location.\n            this.scanner.setAbsoluteIndex(absolutePosition);\n        }\n\n        public currentTokenAllowingRegularExpression(): ISyntaxToken {\n            // We better be on a divide token right now.\n            // Debug.assert(SyntaxFacts.isAnyDivideToken(this.currentToken().tokenKind));\n\n            // First, we\'re going to rewind all our data to the point where this / or /= token started.\n            // That\'s because if it does turn out to be a regular expression, then any tokens or token \n            // diagnostics we produced after the original / may no longer be valid.  This would actually\n            // be a  fairly expected case.  For example, if you had:  / ... gibberish ... /, we may have \n            // produced several diagnostics in the process of scanning the tokens after the first / as\n            // they may not have been legal javascript okens.\n            //\n            // We also need to remove all the tokens we\'ve gotten from the slash and onwards.  They may\n            // not have been what the scanner would have produced if it decides that this is actually\n            // a regular expresion.\n            this.resetToPosition(this._absolutePosition, this._previousToken);\n\n            // Now actually fetch the token again from the scanner. This time let it know that it\n            // can scan it as a regex token if it wants to.\n            var token = this.slidingWindow.currentItem(/*allowRegularExpression:*/ true);\n\n            // We have better gotten some sort of regex token.  Otherwise, something *very* wrong has\n            // occurred.\n            // Debug.assert(SyntaxFacts.isAnyDivideOrRegularExpressionToken(token.tokenKind));\n\n            return token;\n        }\n    }\n\n    // Parser source used in incremental scenarios. This parser source wraps an old tree, text \n    // change and new text, and uses all three to provide nodes and tokens to the parser.  In\n    // general, nodes from the old tree are returned as long as they do not intersect with the text \n    // change.  Then, once the text change is reached, tokens from the old tree are returned as \n    // long as they do not intersect with the text change.  Then, the text that is actually changed\n    // will be scanned using a normal scanner.  Then, once the new text is scanned, the source will\n    // attempt to sync back up with nodes or tokens that started where the new tokens end. Once it\n    // can do that, then all subsequent data will come from the original tree.\n    //\n    // This allows for an enormous amount of tree reuse in common scenarios.  Situations that \n    // prevent this level of reuse include substantially destructive operations like introducing\n    // \"/*\" without a \"*/\" nearby to terminate the comment.\n    class IncrementalParserSource implements IParserSource {\n        // The underlying parser source that we will use to scan tokens from any new text, or any \n        // tokens from the old tree that we decide we can\'t use for any reason.  We will also \n        // continue scanning tokens from this source until we\'ve decided that we\'re resynchronized\n        // and can read in subsequent data from the old tree.\n        //\n        // This parser source also keeps track of the absolute position in the text that we\'re in,\n        // the previous token, and any token diagnostics produced.  That way we dont\' have to track\n        // that ourselves.\n        private _normalParserSource: NormalParserSource;\n\n        // The range of text in the *original* text that was changed, and the new length of it after\n        // the change.\n        private _changeRange: TextChangeRange;\n\n        // This number represents how our position in the old tree relates to the position we\'re \n        // pointing at in the new text.  If it is 0 then our positions are in sync and we can read\n        // nodes or tokens from the old tree.  If it is non-zero, then our positions are not in \n        // sync and we cannot use nodes or tokens from the old tree.\n        //\n        // Now, changeDelta could be negative or positive.  Negative means \'the position we\'re at\n        // in the original tree is behind the position we\'re at in the text\'.  In this case we \n        // keep throwing out old nodes or tokens (and thus move forward in the original tree) until\n        // changeDelta becomes 0 again or positive.  If it becomes 0 then we are resynched and can\n        // read nodes or tokesn from the tree.\n        //\n        // If changeDelta is positive, that means the current node or token we\'re pointing at in \n        // the old tree is at a further ahead position than the position we\'re pointing at in the\n        // new text.  In this case we have no choice but to scan tokens from teh new text.  We will\n        // continue to do so until, again, changeDelta becomes 0 and we\'ve resynced, or change delta\n        // becomes negative and we need to skip nodes or tokes in the original tree.\n        private _changeDelta: number = 0;\n\n        // The cursor we use to navigate through and retrieve nodes and tokens from the old tree.\n        private _oldSourceUnitCursor: SyntaxCursor;\n\n        constructor(oldSyntaxTree: SyntaxTree,\n                    textChangeRange: TextChangeRange,\n                    newText: ISimpleText) {\n            var oldSourceUnit = oldSyntaxTree.sourceUnit();\n            this._oldSourceUnitCursor = new SyntaxCursor(oldSourceUnit);\n\n            // In general supporting multiple individual edits is just not that important.  So we \n            // just collapse this all down to a single range to make the code here easier.  The only\n            // time this could be problematic would be if the user made a ton of discontinuous edits.\n            // For example, doing a column select on a *large* section of a code.  If this is a \n            // problem, we can always update this code to handle multiple changes.\n            this._changeRange = IncrementalParserSource.extendToAffectedRange(textChangeRange, oldSourceUnit);\n\n            // The old tree\'s length, plus whatever length change was caused by the edit better \n            // equal the new text\'s length!\n            // Debug.assert((oldSourceUnit.fullWidth() - this._changeRange.span().length() + this._changeRange.newLength()) === newText.length());\n\n            // Set up a scanner so that we can scan tokens out of the new text.\n            this._normalParserSource = new NormalParserSource(oldSyntaxTree.fileName(), newText, oldSyntaxTree.languageVersion());\n        }\n\n        private static extendToAffectedRange(changeRange:TextChangeRange,\n                                             sourceUnit: SourceUnitSyntax): TextChangeRange {\n            // Consider the following code:\n            //      void foo() { /; }\n            //\n            // If the text changes with an insertion of / just before the semicolon then we end up with:\n            //      void foo() { //; }\n            //\n            // If we were to just use the changeRange a is, then we would not rescan the { token \n            // (as it does not intersect hte actual original change range).  Because an edit may\n            // change the token touching it, we actually need to look back *at least* one token so\n            // that the prior token sees that change.  \n            //\n            // Note: i believe (outside of regex tokens) max lookahead is just one token for \n            // TypeScript.  However, if this turns out to be wrong, we may have to increase how much\n            // futher we look back. \n            //\n            // Note: lookahead handling for regex characters is handled specially in during \n            // incremental parsing, and does not need to be handled here.\n\n            var maxLookahead = 1;\n\n            var start = changeRange.span().start();\n\n            // the first iteration aligns us with the change start. subsequent iteration move us to\n            // the left by maxLookahead tokens.  We only need to do this as long as we\'re not at the\n            // start of the tree.\n            for (var i = 0; start > 0 && i <= maxLookahead; i++) {\n                var token = sourceUnit.findToken(start);\n\n                // Debug.assert(token.kind() !== SyntaxKind.None);\n                // Debug.assert(token.kind() === SyntaxKind.EndOfFileToken || token.fullWidth() > 0);\n\n                var position = token.fullStart();\n\n                start = MathPrototype.max(0, position - 1);\n            }\n\n            var finalSpan = TextSpan.fromBounds(start, changeRange.span().end());\n            var finalLength = changeRange.newLength() + (changeRange.span().start() - start);\n\n            return new TextChangeRange(finalSpan, finalLength);\n        }\n\n        public languageVersion(): LanguageVersion {\n            return this._normalParserSource.languageVersion();\n        }\n\n        public absolutePosition() {\n            return this._normalParserSource.absolutePosition();\n        }\n\n        public previousToken() {\n            return this._normalParserSource.previousToken();\n        }\n\n        private tokenDiagnostics(): SyntaxDiagnostic[] {\n            return this._normalParserSource.tokenDiagnostics();\n        }\n\n        private getRewindPoint(): IParserRewindPoint {\n            // Get a rewind point for our new text reader and for our old source unit cursor.\n            var rewindPoint = this._normalParserSource.getRewindPoint();\n            var oldSourceUnitCursorIndex = this._oldSourceUnitCursor.getAndPinCursorIndex();\n\n            // Store where we were when the rewind point was created.\n            rewindPoint.changeDelta = this._changeDelta;\n            rewindPoint.changeRange = this._changeRange;\n            rewindPoint.oldSourceUnitCursorIndex = oldSourceUnitCursorIndex;\n\n            // Debug.assert(rewindPoint.pinCount === this._oldSourceUnitCursor.pinCount());\n\n            return rewindPoint;\n        }\n\n        private rewind(rewindPoint: IParserRewindPoint): void {\n            // Restore our state to the values when the rewind point was created.\n            this._changeRange = rewindPoint.changeRange;\n            this._changeDelta = rewindPoint.changeDelta;\n            this._oldSourceUnitCursor.rewindToPinnedCursorIndex(rewindPoint.oldSourceUnitCursorIndex);\n\n            this._normalParserSource.rewind(rewindPoint);\n        }\n\n        private releaseRewindPoint(rewindPoint: IParserRewindPoint): void {\n            // Release both the new text reader and the old text cursor.\n            this._oldSourceUnitCursor.releaseAndUnpinCursorIndex(rewindPoint.oldSourceUnitCursorIndex);\n            this._normalParserSource.releaseRewindPoint(rewindPoint);\n        }\n\n        private canReadFromOldSourceUnit() {\n            // If we\'re currently pinned, then do not want to touch the cursor.  If we end up \n            // reading from the old source unit, we\'ll try to then set the position of the normal\n            // parser source to an absolute position (in moveToNextToken).  Doing is unsupported\n            // while the underlying source is pinned.\n            if (this._normalParserSource.isPinned()) {\n                return false;\n            }\n\n            // If our current absolute position is in the middle of the changed range in the new text\n            // then we definitely can\'t read from the old source unit right now.\n            if (this._changeRange !== null && this._changeRange.newSpan().intersectsWithPosition(this.absolutePosition())) {\n                return false;\n            }\n\n            // First, try to sync up with the new text if we\'re behind.\n            this.syncCursorToNewTextIfBehind();\n\n            // Now, if we\'re synced up *and* we\'re not currently pinned in the new text scanner,\n            // then we can read a node from the cursor.  If we\'re pinned in the scanner then we\n            // can\'t read a node from the cursor because we will mess up the pinned scanner when\n            // we try to move it forward past this node.\n            return this._changeDelta === 0 &&\n                   !this._oldSourceUnitCursor.isFinished();\n        }\n        \n        public currentNode(): SyntaxNode {\n            if (this.canReadFromOldSourceUnit()) {\n                // Try to read a node.  If we can\'t then our caller will call back in and just try\n                // to get a token.\n                return this.tryGetNodeFromOldSourceUnit();\n            }\n\n            // Either we were ahead of the old text, or we were pinned.  No node can be read here.\n            return null;\n        }\n\n        public currentToken(): ISyntaxToken {\n            if (this.canReadFromOldSourceUnit()) {\n                var token = this.tryGetTokenFromOldSourceUnit();\n                if (token !== null) {\n                    return token;\n                }\n            }\n\n            // Either we couldn\'t read from the old source unit, or we weren\'t able to successfully\n            // get a token from it.  In this case we need to read a token from the underlying text.\n            return this._normalParserSource.currentToken();\n        }\n\n        public currentTokenAllowingRegularExpression(): ISyntaxToken {\n            // Just delegate to the underlying source to handle this.\n            return this._normalParserSource.currentTokenAllowingRegularExpression();\n        }\n\n        private syncCursorToNewTextIfBehind() {\n            while (true) {\n                if (this._oldSourceUnitCursor.isFinished()) {\n                    // Can\'t sync up if the cursor is finished.\n                    break;\n                }\n\n                if (this._changeDelta >= 0) {\n                    // Nothing to do if we\'re synced up or ahead of the text.\n                    break;\n                }\n\n                // We\'re behind in the original tree.  Throw out a node or token in an attempt to \n                // catch up to the position we\'re at in the new text.\n\n                var currentElement = this._oldSourceUnitCursor.currentElement();\n\n                // If we\'re pointing at a node, and that node\'s width is less than our delta,\n                // then we can just skip that node.  Otherwise, if we\'re pointing at a node\n                // whose width is greater than the delta, then crumble it and try again.\n                // Otherwise, we must be pointing at a token.  Just skip it and try again.\n                    \n                if (currentElement.isNode() && (currentElement.fullWidth() > Math.abs(this._changeDelta))) {\n                    // We were pointing at a node whose width was more than changeDelta.  Crumble the \n                    // node and try again.  Note: we haven\'t changed changeDelta.  So the callers loop\n                    // will just repeat this until we get to a node or token that we can skip over.\n                    this._oldSourceUnitCursor.moveToFirstChild();\n                }\n                else {\n                    this._oldSourceUnitCursor.moveToNextSibling();\n\n                    // Get our change delta closer to 0 as we skip past this item.\n                    this._changeDelta += currentElement.fullWidth();\n\n                    // If this was a node, then our changeDelta is 0 or negative.  If this was a \n                    // token, then we could still be negative (and we have to read another token),\n                    // we could be zero (we\'re done), or we could be positive (we\'ve moved ahead\n                    // of the new text).  Only if we\'re negative will we continue looping.\n                }\n            }\n\n            // At this point, we must be either:\n            //   a) done with the cursor\n            //   b) (ideally) caught up to the new text position.\n            //   c) ahead of the new text position.\n            // In case \'b\' we can try to reuse a node from teh old tree.\n            // Debug.assert(this._oldSourceUnitCursor.isFinished() || this._changeDelta >= 0);\n        }\n\n        private intersectsWithChangeRangeSpanInOriginalText(start: number, length: number) {\n            return this._changeRange !== null && this._changeRange.span().intersectsWith(start, length);\n        }\n\n        private tryGetNodeFromOldSourceUnit(): SyntaxNode {\n            // Debug.assert(this.canReadFromOldSourceUnit());\n\n            // Keep moving the cursor down to the first node that is safe to return.  A node is \n            // safe to return if:\n            //  a) it does not intersect the changed text.\n            //  b) it does not contain skipped text.\n            //  c) it does not have any zero width tokens in it.\n            //  d) it does not have a regex token in it.\n            //\n            // TODO: we should also only be able to get a node if we\'re in the same \'strict\' \n            // context we were in when we parsed the node.\n            while (true) {\n                var node = this._oldSourceUnitCursor.currentNode();\n                if (node === null) {\n                    // Couldn\'t even read a node, nothing to return.\n                    return null;\n                }\n\n                if (!this.intersectsWithChangeRangeSpanInOriginalText(this.absolutePosition(), node.fullWidth())) {\n                    // Didn\'t intersect with the change range.\n                    if (!node.isIncrementallyUnusable()) {\n\n                        // Didn\'t contain anything that would make it unusable.  Awesome.  This is\n                        // a node we can reuse.\n                        return node;\n                    }\n                }\n\n                // We couldn\'t use currentNode. Try to move to its first child (in case that\'s a \n                // node).  If it is we can try using that.  Otherwise we\'ll just bail out in the\n                // next iteration of the loop.\n                this._oldSourceUnitCursor.moveToFirstChild();\n            }\n        }\n\n        private canReuseTokenFromOldSourceUnit(position: number, token: ISyntaxToken): bool {\n            // A token is safe to return if:\n            //  a) it does not intersect the changed text.\n            //  b) it does not contain skipped text.\n            //  c) it is not zero width.\n            //  d) it is not a regex token.\n            //  e) it is not a parser generated token.\n            //\n            // NOTE: It is safe to get a token regardless of what our strict context was/is.  That\'s \n            // because the strict context doesn\'t change what tokens are scanned, only how the \n            // parser reacts to them.\n\n            if (token !== null) {\n                if (!this.intersectsWithChangeRangeSpanInOriginalText(position, token.fullWidth())) {\n                    // Didn\'t intersect with the change range.\n                    if (!token.isIncrementallyUnusable()) {\n\n                        // Didn\'t contain anything that would make it unusable.  Awesome.  This is\n                        // a token we can reuse.\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        private tryGetTokenFromOldSourceUnit(): ISyntaxToken {\n            // Debug.assert(this.canReadFromOldSourceUnit());\n\n            // get the current token that the cursor is pointing at.\n            var token = this._oldSourceUnitCursor.currentToken();\n\n            return this.canReuseTokenFromOldSourceUnit(this.absolutePosition(), token) \n                ? token : null;\n        }\n\n        public peekToken(n: number): ISyntaxToken {\n            if (this.canReadFromOldSourceUnit()) {\n                var token = this.tryPeekTokenFromOldSourceUnit(n);\n                if (token !== null) {\n                    return token;\n                }\n            }\n\n            // Couldn\'t peek this far in the old tree.  Get the token from the new text.\n            return this._normalParserSource.peekToken(n);\n        }\n\n        private tryPeekTokenFromOldSourceUnit(n: number): ISyntaxToken {\n            // Debug.assert(this.canReadFromOldSourceUnit());\n\n            // In order to peek the \'nth\' token we need all the tokens up to that point.  That way\n            // we know we know position that the nth token is at.  The position is necessary so \n            // that we can test if this token (or any that precede it cross the change range).\n            var currentPosition = this.absolutePosition();\n            for (var i = 0; i < n; i++) {\n                var interimToken = this._oldSourceUnitCursor.peekToken(i);\n                if (!this.canReuseTokenFromOldSourceUnit(currentPosition, interimToken)) {\n                    return null;\n                }\n\n                currentPosition += interimToken.fullWidth();\n            }\n\n            var token = this._oldSourceUnitCursor.peekToken(n);\n            return this.canReuseTokenFromOldSourceUnit(currentPosition, token) \n                ? token : null;\n        }\n\n        private moveToNextNode(): void {\n            // A node could have only come from the old source unit cursor.  Update it and our \n            // current state.\n            // Debug.assert(this._changeDelta === 0);\n\n            // Get the current node we were pointing at, and move to the next element.\n            var currentElement = this._oldSourceUnitCursor.currentElement();\n            var currentNode = this._oldSourceUnitCursor.currentNode();\n\n            // We better still be pointing at the node.\n            // Debug.assert(currentElement === currentNode);\n            this._oldSourceUnitCursor.moveToNextSibling();\n\n            // Update the underlying source with where it should now be currently pointing, and \n            // what the previous token is before that position.\n            var absolutePosition = this.absolutePosition() + currentNode.fullWidth();\n            var previousToken = currentNode.lastToken();\n            this._normalParserSource.resetToPosition(absolutePosition, previousToken);\n\n            // Debug.assert(previousToken !== null);\n            // Debug.assert(previousToken.width() > 0);\n\n            if (this._changeRange !== null) {\n                // If we still have a change range, then this node must have ended before the \n                // change range starts.  Thus, we don\'t need to call \'skipPastChanges\'.\n                // Debug.assert(this.absolutePosition() < this._changeRange.span().start());\n            }\n        }\n\n        private moveToNextToken(): void {\n            // This token may have come from the old source unit, or from the new text.  Handle\n            // both accordingly.\n            var currentToken = this.currentToken();\n\n            if (this._oldSourceUnitCursor.currentToken() === currentToken) {\n                // The token came from the old source unit.  So our tree and text must be in sync.\n                // Debug.assert(this._changeDelta === 0);\n\n                // Move the cursor past this token.\n                this._oldSourceUnitCursor.moveToNextSibling();\n\n                // Debug.assert(!this._normalParserSource.isPinned());\n                \n                // Update the underlying source with where it should now be currently pointing, and \n                // what the previous token is before that position.  We don\'t need to do this when\n                // the token came from the new text as the source will automatically be placed in\n                // the right position.\n                var absolutePosition = this.absolutePosition() + currentToken.fullWidth();\n                var previousToken = currentToken;\n                this._normalParserSource.resetToPosition(absolutePosition, previousToken);\n\n                // Debug.assert(previousToken !== null);\n                // Debug.assert(previousToken.width() > 0);\n\n                if (this._changeRange !== null) {\n                    // If we still have a change range, then this token must have ended before the \n                    // change range starts.  Thus, we don\'t need to call \'skipPastChanges\'.\n                    // Debug.assert(this.absolutePosition() < this._changeRange.span().start());\n                }\n            }\n            else {\n                // the token came from the new text.  We have to update our delta appropriately.\n                this._changeDelta -= currentToken.fullWidth();\n\n                // Move our underlying source forward.\n                this._normalParserSource.moveToNextToken();\n\n                // Because we read a token from the new text, we may have moved ourselves past the\n                // change range.  If we did, then we may also have to update our change delta to\n                // compensate for the length change between the old and new text.\n                if (this._changeRange !== null) {\n                    // var changeEndInNewText = this._changeRange.span().start() + this._changeRange.newLength();\n                    var changeRangeSpanInNewText = this._changeRange.newSpan();\n                    if (this.absolutePosition() >= changeRangeSpanInNewText.end()) {\n                        this._changeDelta += this._changeRange.newLength() - this._changeRange.span().length();\n                        this._changeRange = null;\n                    }\n                }\n            }\n        }\n    }\n\n    // Contains the actual logic to parse typescript/javascript.  This is the code that generally\n    // represents the logic necessary to handle all the language grammar constructs.  When the \n    // language changes, this should generally only be the place necessary to fix up.\n    class ParserImpl {\n        // Underlying source where we pull nodes and tokens from.\n        private source: IParserSource;\n        private fileName: string;\n        private lineMap: LineMap;\n\n        private parseOptions: ParseOptions;\n\n        // TODO: do we need to store/restore this when speculative parsing?  I don\'t think so.  The\n        // parsing logic already handles storing/restoring this and should work properly even if we\'re\n        // speculative parsing.\n        private listParsingState: ListParsingState = 0;\n\n        // Whether or not we are in strict parsing mode.  All that changes in strict parsing mode is\n        // that some tokens that would be considered identifiers may be considered keywords.  When \n        // rewinding, we need to store and restore this as the mode may have changed.\n        //\n        // TODO: do we need to store/restore this when speculative parsing?  I don\'t think so.  The\n        // parsing logic already handles storing/restoring this and should work properly even if we\'re\n        // speculative parsing.\n        private isInStrictMode: bool = false;\n\n        // Current state of the parser.  If we need to rewind we will store and reset these values as\n        // appropriate.\n\n        // Diagnostics created when parsing invalid code.  Any diagnosics created when speculative \n        // parsing need to removed when rewinding.  To do this we store the count of diagnostics when \n        // we start speculative parsing.  And if we rewind, we restore this to the same count that we \n        // started at.\n        private diagnostics: SyntaxDiagnostic[] = [];\n\n        private factory: Syntax.IFactory = Syntax.normalModeFactory;\n\n        constructor(fileName: string, lineMap: LineMap, source: IParserSource, parseOptions: ParseOptions) {\n            this.fileName = fileName;\n            this.lineMap = lineMap;\n            this.source = source;\n            this.parseOptions = parseOptions;\n        }\n\n        private getRewindPoint(): IParserRewindPoint {\n            var rewindPoint = this.source.getRewindPoint();\n\n            rewindPoint.diagnosticsCount = this.diagnostics.length;\n\n            // Values we keep around for debug asserting purposes.\n            rewindPoint.isInStrictMode = this.isInStrictMode;\n            rewindPoint.listParsingState = this.listParsingState;\n\n            return rewindPoint;\n        }\n\n        private rewind(rewindPoint: IParserRewindPoint): void {\n            this.source.rewind(rewindPoint);\n\n            this.diagnostics.length = rewindPoint.diagnosticsCount;\n        }\n\n        private releaseRewindPoint(rewindPoint: IParserRewindPoint): void {\n            // Debug.assert(this.listParsingState === rewindPoint.listParsingState);\n            // Debug.assert(this.isInStrictMode === rewindPoint.isInStrictMode);\n\n            this.source.releaseRewindPoint(rewindPoint);\n        }\n\n        private currentTokenStart(): number {\n            return this.source.absolutePosition() + this.currentToken().leadingTriviaWidth();\n        }\n\n        private previousTokenStart(): number {\n            if (this.previousToken() === null) {\n                return 0;\n            }\n            \n            return this.source.absolutePosition() -\n                   this.previousToken().fullWidth() +\n                   this.previousToken().leadingTriviaWidth();\n        }\n\n        private previousTokenEnd(): number {\n            if (this.previousToken() === null) {\n                return 0;\n            }\n\n            return this.previousTokenStart() + this.previousToken().width();\n        }\n\n        private currentNode(): SyntaxNode {\n            var node = this.source.currentNode();\n\n            // We can only reuse a node if it was parsed under the same strict mode that we\'re \n            // currently in.  i.e. if we originally parsed a node in non-strict mode, but then\n            // the user added \'using strict\' at hte top of the file, then we can\'t use that node\n            // again as the presense of strict mode may cause us to parse the tokens in the file\n            // differetly.\n            //\n            // Note: we *can* reuse tokens when the strict mode changes.  That\'s because tokens\n            // are unaffected by strict mode.  It\'s just the parser will decide what to do with it\n            // differently depending on what mode it is in.\n            if (node === null || node.parsedInStrictMode() !== this.isInStrictMode) {\n                return null;\n            }\n\n            return node;\n        }\n\n        private currentToken(): ISyntaxToken {\n            return this.source.currentToken();\n        }\n\n        private currentTokenAllowingRegularExpression(): ISyntaxToken {\n            return this.source.currentTokenAllowingRegularExpression();\n        }\n\n        private peekToken(n: number): ISyntaxToken {\n            return this.source.peekToken(n);\n        }\n\n        private eatAnyToken(): ISyntaxToken {\n            var token = this.currentToken();\n            this.moveToNextToken();\n            return token;\n        }\n\n        private moveToNextToken(): void {\n            this.source.moveToNextToken();\n        }\n\n        private previousToken(): ISyntaxToken {\n            return this.source.previousToken();\n        }\n\n        private eatNode(): SyntaxNode {\n            var node = this.source.currentNode();\n            this.source.moveToNextNode();\n            return node;\n        }\n\n        //this method is called very frequently\n        //we should keep it simple so that it can be inlined.\n        private eatToken(kind: SyntaxKind): ISyntaxToken {\n            // Assert disabled because it is actually expensive enugh to affect perf.\n            // Debug.assert(SyntaxFacts.isTokenKind(kind))\n\n            var token = this.currentToken();\n            if (token.tokenKind === kind) {\n                this.moveToNextToken();\n                return token;\n            }\n\n            //slow part of EatToken(SyntaxKind kind)\n            return this.createMissingToken(kind, token);\n        }\n\n        // Eats the token if it is there.  Otherwise does nothing.  Will not report errors.\n        private tryEatToken(kind: SyntaxKind): ISyntaxToken {\n            if (this.currentToken().tokenKind === kind) {\n                return this.eatToken(kind);\n            }\n\n            return null;\n        }\n\n        // Eats the keyword if it is there.  Otherwise does nothing.  Will not report errors.\n        private tryEatKeyword(kind: SyntaxKind): ISyntaxToken {\n            if (this.currentToken().tokenKind === kind) {\n                return this.eatKeyword(kind);\n            }\n\n            return null;\n        }\n\n        private eatKeyword(kind: SyntaxKind): ISyntaxToken {\n            // Debug.assert(SyntaxFacts.isTokenKind(kind))\n\n            var token = this.currentToken();\n            if (token.tokenKind === kind) {\n                this.moveToNextToken();\n                return token;\n            }\n\n            //slow part of EatToken(SyntaxKind kind)\n            return this.createMissingToken(kind, token);\n        }\n\n        // An identifier is basically any word, unless it is a reserved keyword.  so \'foo\' is an \n        // identifier and \'return\' is not.  Note: a word may or may not be an identifier depending \n        // on the state of the parser.  For example, \'yield\' is an identifier *unless* the parser \n        // is in strict mode.\n        private isIdentifier(token: ISyntaxToken): bool {\n            var tokenKind = token.tokenKind;\n\n            if (tokenKind === SyntaxKind.IdentifierName) {\n                return true;\n            }\n\n            // Keywords are only identifiers if they\'re FutureReservedStrictWords and we\'re in \n            // strict mode.  *Or* if it\'s a typescript \'keyword\'. \n            if (tokenKind >= SyntaxKind.FirstFutureReservedStrictKeyword) {\n                if (tokenKind <= SyntaxKind.LastFutureReservedStrictKeyword) {\n                    // Could be a keyword or identifier.  It\'s an identifier if we\'re not in strict\n                    // mode.\n                    return !this.isInStrictMode;\n                }\n                \n                // If it\'s typescript keyword, then it\'s actually a javascript identifier.\n                return tokenKind <= SyntaxKind.LastTypeScriptKeyword;\n            }\n\n            // Anything else is not an identifier.\n            return false;\n        }\n\n        // This method should be called when the grammar calls for an *IdentifierName* and not an\n        // *Identifier*.\n        private eatIdentifierNameToken(): ISyntaxToken {\n            var token = this.currentToken();\n\n            // If we have an identifier name, then consume and return it.\n            if (token.tokenKind === SyntaxKind.IdentifierName) {\n                this.moveToNextToken();\n                return token;\n            }\n\n            // If we have a keyword, then it cna be used as an identifier name.  However, we need \n            // to convert it to an identifier so that no later parts of the systems see it as a \n            // keyword.\n            if (SyntaxFacts.isAnyKeyword(token.tokenKind)) {\n                this.moveToNextToken();\n                return Syntax.convertToIdentifierName(token);\n            }\n\n            return this.createMissingToken(SyntaxKind.IdentifierName, token);\n        }\n\n        // This method should be called when the grammar calls for an *Identifier* and not an\n        // *IdentifierName*.\n        private eatIdentifierToken(): ISyntaxToken {\n            var token = this.currentToken();\n            if (this.isIdentifier(token)) {\n                this.moveToNextToken();\n                return token;\n            }\n\n            return this.createMissingToken(SyntaxKind.IdentifierName, token);\n        }\n\n        private canEatAutomaticSemicolon(allowWithoutNewLine: bool): bool {\n            var token = this.currentToken();\n\n            // An automatic semicolon is always allowed if we\'re at the end of the file.\n            if (token.tokenKind === SyntaxKind.EndOfFileToken) {\n                return true;\n            }\n\n            // Or if the next token is a close brace (regardless of which line it is on).\n            if (token.tokenKind === SyntaxKind.CloseBraceToken) {\n                return true;\n            }\n\n            if (allowWithoutNewLine) {\n                return true;\n            }\n\n            // It is also allowed if there is a newline between the last token seen and the next one.\n            if (this.previousToken() !== null && this.previousToken().hasTrailingNewLine()) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private canEatExplicitOrAutomaticSemicolon(allowWithoutNewline: bool): bool {\n            var token = this.currentToken();\n\n            if (token.tokenKind === SyntaxKind.SemicolonToken) {\n                return true;\n            }\n\n            return this.canEatAutomaticSemicolon(allowWithoutNewline);\n        }\n\n        private eatExplicitOrAutomaticSemicolon(allowWithoutNewline: bool): ISyntaxToken {\n            var token = this.currentToken();\n\n            // If we see a semicolon, then we can definitely eat it.\n            if (token.tokenKind === SyntaxKind.SemicolonToken) {\n                return this.eatToken(SyntaxKind.SemicolonToken);\n            }\n\n            // Check if an automatic semicolon could go here.  If so, synthesize one.  However, if the\n            // user has the option set to error on automatic semicolons, then add an error to that\n            // token as well.\n            if (this.canEatAutomaticSemicolon(allowWithoutNewline)) {\n                // Note: the missing token needs to go between real tokens.  So we place it at the \n                // fullstart of the current token.\n                var semicolonToken = Syntax.emptyToken(SyntaxKind.SemicolonToken);\n\n                if (!this.parseOptions.allowAutomaticSemicolonInsertion()) {\n                    // Report the missing semicolon at the end of the *previous* token.\n\n                    this.addDiagnostic(\n                        new SyntaxDiagnostic(this.fileName, this.previousTokenEnd(), 0, DiagnosticCode.Automatic_semicolon_insertion_not_allowed, null));\n                }\n\n                return semicolonToken;\n            }\n\n            // No semicolon could be consumed here at all.  Just call the standard eating function\n            // so we get the token and the error for it.\n            return this.eatToken(SyntaxKind.SemicolonToken);\n        }\n\n        private isKeyword(kind: SyntaxKind): bool {\n            if (kind >= SyntaxKind.FirstKeyword) {\n                if (kind <= SyntaxKind.LastFutureReservedKeyword) {\n                    return true;\n                }\n\n                if (this.isInStrictMode) {\n                    return kind <= SyntaxKind.LastFutureReservedStrictKeyword;\n                }\n            }\n\n            return false;\n        }\n\n        private createMissingToken(expectedKind: SyntaxKind, actual: ISyntaxToken): ISyntaxToken {\n            var diagnostic = this.getExpectedTokenDiagnostic(expectedKind, actual);\n            this.addDiagnostic(diagnostic);\n\n            // The missing token will be at the full start of the current token.  That way empty tokens\n            // will always be between real tokens and not inside an actual token.\n            return Syntax.emptyToken(expectedKind);\n        }\n\n        private getExpectedTokenDiagnostic(expectedKind: SyntaxKind, actual: ISyntaxToken): SyntaxDiagnostic {\n            var token = this.currentToken();\n\n            // They wanted something specific, just report that that token was missing.\n            if (SyntaxFacts.isAnyKeyword(expectedKind) || SyntaxFacts.isAnyPunctuation(expectedKind)) {\n                return new SyntaxDiagnostic(this.fileName, this.currentTokenStart(), token.width(), DiagnosticCode._0_expected, [SyntaxFacts.getText(expectedKind)]);\n            }\n            else {\n                // They wanted an identifier.\n\n                // If the user supplied a keyword, give them a specialized message.\n                if (actual !== null && SyntaxFacts.isAnyKeyword(actual.tokenKind)) {\n                    return new SyntaxDiagnostic(this.fileName, this.currentTokenStart(), token.width(), DiagnosticCode.Identifier_expected__0_is_a_keyword, [SyntaxFacts.getText(actual.tokenKind)]);\n                }\n                else {\n                    // Otherwise just report that an identifier was expected.\n                    return new SyntaxDiagnostic(this.fileName, this.currentTokenStart(), token.width(), DiagnosticCode.Identifier_expected, null);\n                }\n            }\n\n            // throw Errors.notYetImplemented();\n        }\n\n        private static getPrecedence(expressionKind: SyntaxKind): ExpressionPrecedence {\n            switch (expressionKind) {\n                case SyntaxKind.CommaExpression:\n                    return ExpressionPrecedence.CommaExpressionPrecedence;\n\n                case SyntaxKind.AssignmentExpression:\n                case SyntaxKind.AddAssignmentExpression:\n                case SyntaxKind.SubtractAssignmentExpression:\n                case SyntaxKind.MultiplyAssignmentExpression:\n                case SyntaxKind.DivideAssignmentExpression:\n                case SyntaxKind.ModuloAssignmentExpression:\n                case SyntaxKind.AndAssignmentExpression:\n                case SyntaxKind.ExclusiveOrAssignmentExpression:\n                case SyntaxKind.OrAssignmentExpression:\n                case SyntaxKind.LeftShiftAssignmentExpression:\n                case SyntaxKind.SignedRightShiftAssignmentExpression:\n                case SyntaxKind.UnsignedRightShiftAssignmentExpression:\n                    return ExpressionPrecedence.AssignmentExpressionPrecedence;\n\n                case SyntaxKind.ConditionalExpression:\n                    return ExpressionPrecedence.ConditionalExpressionPrecedence;\n\n                case SyntaxKind.LogicalOrExpression:\n                    return ExpressionPrecedence.LogicalOrExpressionPrecedence;\n\n                case SyntaxKind.LogicalAndExpression:\n                    return ExpressionPrecedence.LogicalAndExpressionPrecedence;\n\n                case SyntaxKind.BitwiseOrExpression:\n                    return ExpressionPrecedence.BitwiseOrExpressionPrecedence;\n\n                case SyntaxKind.BitwiseExclusiveOrExpression:\n                    return ExpressionPrecedence.BitwiseExclusiveOrExpressionPrecedence;\n\n                case SyntaxKind.BitwiseAndExpression:\n                    return ExpressionPrecedence.BitwiseAndExpressionPrecedence;\n\n                case SyntaxKind.EqualsWithTypeConversionExpression:\n                case SyntaxKind.NotEqualsWithTypeConversionExpression:\n                case SyntaxKind.EqualsExpression:\n                case SyntaxKind.NotEqualsExpression:\n                    return ExpressionPrecedence.EqualityExpressionPrecedence;\n\n                case SyntaxKind.LessThanExpression:\n                case SyntaxKind.GreaterThanExpression:\n                case SyntaxKind.LessThanOrEqualExpression:\n                case SyntaxKind.GreaterThanOrEqualExpression:\n                case SyntaxKind.InstanceOfExpression:\n                case SyntaxKind.InExpression:\n                    return ExpressionPrecedence.RelationalExpressionPrecedence;\n\n                case SyntaxKind.LeftShiftExpression:\n                case SyntaxKind.SignedRightShiftExpression:\n                case SyntaxKind.UnsignedRightShiftExpression:\n                    return ExpressionPrecedence.ShiftExpressionPrecdence;\n\n                case SyntaxKind.AddExpression:\n                case SyntaxKind.SubtractExpression:\n                    return ExpressionPrecedence.AdditiveExpressionPrecedence;\n\n                case SyntaxKind.MultiplyExpression:\n                case SyntaxKind.DivideExpression:\n                case SyntaxKind.ModuloExpression:\n                    return ExpressionPrecedence.MultiplicativeExpressionPrecedence;\n\n                case SyntaxKind.PlusExpression:\n                case SyntaxKind.NegateExpression:\n                case SyntaxKind.BitwiseNotExpression:\n                case SyntaxKind.LogicalNotExpression:\n                case SyntaxKind.DeleteExpression:\n                case SyntaxKind.TypeOfExpression:\n                case SyntaxKind.VoidExpression:\n                case SyntaxKind.PreIncrementExpression:\n                case SyntaxKind.PreDecrementExpression:\n                    return ExpressionPrecedence.UnaryExpressionPrecedence;\n            }\n\n            throw Errors.invalidOperation();\n        }\n        \n        private addSkippedTokenAfterNodeOrToken(nodeOrToken: ISyntaxNodeOrToken, skippedToken: ISyntaxToken): ISyntaxNodeOrToken {\n            if (nodeOrToken.isToken()) {\n                return this.addSkippedTokenAfterToken(<ISyntaxToken>nodeOrToken, skippedToken);\n            }\n            else if (nodeOrToken.isNode()) {\n                return this.addSkippedTokenAfterNode(<SyntaxNode>nodeOrToken, skippedToken);\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private addSkippedTokenAfterNode(node: SyntaxNode, skippedToken: ISyntaxToken): SyntaxNode {\n            var oldToken = node.lastToken();\n            var newToken = this.addSkippedTokenAfterToken(oldToken, skippedToken);\n\n            return node.replaceToken(oldToken, newToken);\n        }\n\n        private addSkippedTokensBeforeNode(node: SyntaxNode, skippedTokens: ISyntaxToken[]): SyntaxNode {\n            if (skippedTokens.length > 0) {\n                var oldToken = node.firstToken();\n                var newToken = this.addSkippedTokensBeforeToken(oldToken, skippedTokens);\n\n                return node.replaceToken(oldToken, newToken);\n            }\n\n            return node;\n        }\n\n        private addSkippedTokensBeforeToken(token: ISyntaxToken, skippedTokens: ISyntaxToken[]): ISyntaxToken {\n            // Debug.assert(token.fullWidth() > 0 || token.tokenKind === SyntaxKind.EndOfFileToken);\n            // Debug.assert(skippedTokens.length > 0);\n\n            var leadingTrivia: ISyntaxTrivia[] = [];\n            for (var i = 0, n = skippedTokens.length; i < n; i++) {\n                this.addSkippedTokenToTriviaArray(leadingTrivia, skippedTokens[i]);\n            }\n\n            this.addTriviaTo(token.leadingTrivia(), leadingTrivia);\n\n            // Don\'t need this array anymore.  Give it back so we can reuse it.\n            this.returnArray(skippedTokens);\n            return token.withLeadingTrivia(Syntax.triviaList(leadingTrivia));\n        }\n\n        private addSkippedTokensAfterToken(token: ISyntaxToken, skippedTokens: ISyntaxToken[]): ISyntaxToken {\n            // Debug.assert(token.fullWidth() > 0);\n            if (skippedTokens.length === 0) {\n                this.returnArray(skippedTokens);\n                return token;\n            }\n\n            var trailingTrivia = token.trailingTrivia().toArray();\n\n            for (var i = 0, n = skippedTokens.length; i < n; i++) {\n                this.addSkippedTokenToTriviaArray(trailingTrivia, skippedTokens[i]);\n            }\n\n            // Don\'t need this array anymore.  Give it back so we can reuse it.\n            this.returnArray(skippedTokens);\n            return token.withTrailingTrivia(Syntax.triviaList(trailingTrivia));\n        }\n\n        private addSkippedTokenAfterToken(token: ISyntaxToken, skippedToken: ISyntaxToken): ISyntaxToken {\n            // Debug.assert(token.fullWidth() > 0);\n\n            var trailingTrivia = token.trailingTrivia().toArray();\n            this.addSkippedTokenToTriviaArray(trailingTrivia, skippedToken);\n\n            return token.withTrailingTrivia(Syntax.triviaList(trailingTrivia));\n        }\n\n        private addSkippedTokenToTriviaArray(array: ISyntaxTrivia[], skippedToken: ISyntaxToken): void {\n            // Debug.assert(skippedToken.text().length > 0);\n            \n            // first, add the leading trivia of the skipped token to the array\n            this.addTriviaTo(skippedToken.leadingTrivia(), array);\n\n            // now, add the text of the token as skipped text to the trivia array.\n            array.push(Syntax.trivia(SyntaxKind.SkippedTextTrivia, skippedToken.text()));\n\n            // Finally, add the trailing trivia of the skipped token to the trivia array.\n            this.addTriviaTo(skippedToken.trailingTrivia(), array);\n        }\n\n        private addTriviaTo(list: ISyntaxTriviaList, array: ISyntaxTrivia[]): void {\n            for (var i = 0, n = list.count(); i < n; i++) {\n                array.push(list.syntaxTriviaAt(i));\n            }\n        }\n\n        public parseSyntaxTree(isDeclaration: bool): SyntaxTree {\n            var sourceUnit = this.parseSourceUnit();\n\n            var allDiagnostics = this.source.tokenDiagnostics().concat(this.diagnostics);\n            allDiagnostics.sort((a: SyntaxDiagnostic, b: SyntaxDiagnostic) => a.start() - b.start());\n\n            return new SyntaxTree(sourceUnit, isDeclaration, allDiagnostics, this.fileName, this.lineMap, this.source.languageVersion(), this.parseOptions);\n        }\n\n        private setStrictMode(isInStrictMode: bool) {\n            this.isInStrictMode = isInStrictMode;\n            this.factory = isInStrictMode ? Syntax.strictModeFactory : Syntax.normalModeFactory;\n        }\n\n        private parseSourceUnit(): SourceUnitSyntax {\n            // Note: technically we don\'t need to save and restore this here.  After all, this the top\n            // level parsing entrypoint.  So it will always start as false and be reset to false when the\n            // loop ends.  However, for sake of symmetry and consistancy we do this.\n            var savedIsInStrictMode = this.isInStrictMode;\n\n            var result = this.parseSyntaxList(ListParsingState.SourceUnit_ModuleElements, ParserImpl.updateStrictModeState);\n            var moduleElements = result.list;\n\n            this.setStrictMode(savedIsInStrictMode);\n\n            var sourceUnit = this.factory.sourceUnit(moduleElements, this.currentToken());\n            sourceUnit = <SourceUnitSyntax>this.addSkippedTokensBeforeNode(sourceUnit, result.skippedTokens);\n\n            return sourceUnit;\n        }\n\n        private static updateStrictModeState(parser: ParserImpl, items: any[]): void {\n            if (!parser.isInStrictMode) {\n                // Check if all the items are directive prologue elements.\n                for (var i = 0; i < items.length; i++) {\n                    var item = items[i];\n                    if (!SyntaxFacts.isDirectivePrologueElement(item)) {\n                        return;\n                    }\n                }\n\n                parser.setStrictMode(SyntaxFacts.isUseStrictDirective(items[items.length - 1]));\n            }\n        }\n\n        private isModuleElement(inErrorRecovery: bool): bool {\n            if (this.currentNode() !== null && this.currentNode().isModuleElement()) {\n                return true;\n            }\n\n            return this.isImportDeclaration() ||\n                   this.isExportAssignment() ||\n                   this.isModuleDeclaration() ||\n                   this.isInterfaceDeclaration() ||\n                   this.isClassDeclaration() ||\n                   this.isEnumDeclaration() ||\n                   this.isStatement(inErrorRecovery);\n        }\n        \n        private parseModuleElement(): IModuleElementSyntax {\n            if (this.currentNode() !== null && this.currentNode().isModuleElement()) {\n                return <IModuleElementSyntax>this.eatNode();\n            }\n\n            if (this.isImportDeclaration()) {\n                return this.parseImportDeclaration();\n            }\n            else if (this.isExportAssignment()) {\n                return this.parseExportAssignment();\n            }\n            else if (this.isModuleDeclaration()) {\n                return this.parseModuleDeclaration();\n            }\n            else if (this.isInterfaceDeclaration()) {\n                return this.parseInterfaceDeclaration();\n            }\n            else if (this.isClassDeclaration()) {\n                return this.parseClassDeclaration();\n            }\n            else if (this.isEnumDeclaration()) {\n                return this.parseEnumDeclaration();\n            }\n            else if (this.isStatement(/*inErrorRecovery:*/ false)) {\n                return this.parseStatement();\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private isImportDeclaration(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.ImportKeyword;\n        }\n\n        private parseImportDeclaration(): ImportDeclarationSyntax {\n            // Debug.assert(this.isImportDeclaration());\n\n            var importKeyword = this.eatKeyword(SyntaxKind.ImportKeyword);\n            var identifier = this.eatIdentifierToken();\n            var equalsToken = this.eatToken(SyntaxKind.EqualsToken);\n            var moduleReference = this.parseModuleReference();\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.importDeclaration(importKeyword, identifier, equalsToken, moduleReference, semicolonToken);\n        }\n\n        private isExportAssignment(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.ExportKeyword &&\n                   this.peekToken(1).tokenKind === SyntaxKind.EqualsToken;\n        }\n\n        private parseExportAssignment(): ExportAssignmentSyntax {\n            // Debug.assert(this.isExportAssignment());\n\n            var exportKeyword = this.eatKeyword(SyntaxKind.ExportKeyword);\n            var equalsToken = this.eatToken(SyntaxKind.EqualsToken);\n            var identifier = this.eatIdentifierToken();\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.exportAssignment(exportKeyword, equalsToken, identifier, semicolonToken);\n        }\n\n        private parseModuleReference(): ModuleReferenceSyntax {\n            if (this.isExternalModuleReference()) {\n                return this.parseExternalModuleReference();\n            }\n            else {\n                return this.parseModuleNameModuleReference();\n            }\n        }\n\n        private isExternalModuleReference(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.ModuleKeyword &&\n                   this.peekToken(1).tokenKind === SyntaxKind.OpenParenToken;\n        }\n\n        private parseExternalModuleReference(): ExternalModuleReferenceSyntax {\n            // Debug.assert(this.isExternalModuleReference());\n\n            var moduleKeyword = this.eatKeyword(SyntaxKind.ModuleKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var stringLiteral = this.eatToken(SyntaxKind.StringLiteral);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n\n            return this.factory.externalModuleReference(moduleKeyword, openParenToken, stringLiteral, closeParenToken);\n        }\n\n        private parseModuleNameModuleReference(): ModuleNameModuleReferenceSyntax {\n            var name = this.parseName();\n            return this.factory.moduleNameModuleReference(name);\n        }\n\n        // NOTE: This will allow all identifier names.  Even the ones that are keywords.\n        private parseIdentifierName(): INameSyntax {\n            var identifierName = this.eatIdentifierNameToken();\n            return identifierName;\n        }\n\n        private isName(): bool {\n            return this.isIdentifier(this.currentToken());\n        }\n\n        private tryParseTypeArgumentList(inExpression: bool): TypeArgumentListSyntax {\n            if (this.currentToken().kind() !== SyntaxKind.LessThanToken) {\n                return null;\n            }\n\n            var lessThanToken: ISyntaxToken;\n            var greaterThanToken: ISyntaxToken;\n            var result: { skippedTokens: ISyntaxToken[]; list: ISeparatedSyntaxList; };\n            var typeArguments: ISeparatedSyntaxList;\n\n            if (!inExpression) {\n                // if we\'re not in an expression, this must be a type argument list.  Just parse\n                // it out as such.\n                lessThanToken = this.eatToken(SyntaxKind.LessThanToken);\n                // Debug.assert(lessThanToken.fullWidth() > 0);\n\n                result = this.parseSeparatedSyntaxList(ListParsingState.TypeArgumentList_Types);\n                typeArguments = result.list;\n                lessThanToken = this.addSkippedTokensAfterToken(lessThanToken, result.skippedTokens);\n\n                greaterThanToken = this.eatToken(SyntaxKind.GreaterThanToken);\n\n                return this.factory.typeArgumentList(lessThanToken, typeArguments, greaterThanToken);\n            }\n\n            // If we\'re in an expression, then we only want to consume this as a type argument list\n            // if we\'re sure that it\'s a type arg list and not an arithmetic expression.\n\n            var rewindPoint = this.getRewindPoint();\n            try {\n                // We\'ve seen a \'<\'.  Try to parse it out as a type argument list.\n                lessThanToken = this.eatToken(SyntaxKind.LessThanToken);\n                // Debug.assert(lessThanToken.fullWidth() > 0);\n\n                result = this.parseSeparatedSyntaxList(ListParsingState.TypeArgumentList_Types);\n                typeArguments = result.list;\n                lessThanToken = this.addSkippedTokensAfterToken(lessThanToken, result.skippedTokens);\n\n                greaterThanToken = this.eatToken(SyntaxKind.GreaterThanToken);\n\n                // We\'re in a context where \'<\' could be the start of a type argument list, or part\n                // of an arithmetic expression.  We\'ll presume it\'s the latter unless we see the \'>\'\n                // and a following token that guarantees that it\'s supposed to be a type argument list.\n                if (greaterThanToken.fullWidth() === 0 || !this.canFollowTypeArgumentListInExpression(this.currentToken().kind())) {\n                    this.rewind(rewindPoint);\n                    return null;\n                }\n\n                return this.factory.typeArgumentList(lessThanToken, typeArguments, greaterThanToken);\n            }\n            finally {\n                this.releaseRewindPoint(rewindPoint);\n            }\n        }\n\n        private canFollowTypeArgumentListInExpression(kind: SyntaxKind): bool {\n            switch (kind) {\n                case SyntaxKind.OpenParenToken:                 // foo<x>(   \n                case SyntaxKind.DotToken:                       // foo<x>.\n                    // These two cases are the only cases where this token can legally follow a\n                    // type argument list.  So we definitely want to treat this as a type arg list.\n\n                case SyntaxKind.CloseParenToken:                // foo<x>)\n                case SyntaxKind.CloseBracketToken:              // foo<x>]\n                case SyntaxKind.ColonToken:                     // foo<x>:\n                case SyntaxKind.SemicolonToken:                 // foo<x>;\n                case SyntaxKind.CommaToken:                     // foo<x>,\n                case SyntaxKind.QuestionToken:                  // foo<x>?\n                case SyntaxKind.EqualsEqualsToken:              // foo<x> ==\n                case SyntaxKind.EqualsEqualsEqualsToken:        // foo<x> ===\n                case SyntaxKind.ExclamationEqualsToken:         // foo<x> !=\n                case SyntaxKind.ExclamationEqualsEqualsToken:   // foo<x> !==\n                case SyntaxKind.AmpersandAmpersandToken:        // foo<x> &&\n                case SyntaxKind.BarBarToken:                    // foo<x> ||\n                case SyntaxKind.CaretToken:                     // foo<x> ^\n                case SyntaxKind.AmpersandToken:                 // foo<x> &\n                case SyntaxKind.BarToken:                       // foo<x> |\n                case SyntaxKind.CloseBraceToken:                // foo<x> }\n                case SyntaxKind.EndOfFileToken:                 // foo<x>\n                    // these cases can\'t legally follow a type arg list.  However, they\'re not legal \n                    // expressions either.  The user is probably in the middle of a generic type. So\n                    // treat it as such.\n                    return true;\n\n                default:\n                    // Anything else treat as an expression.\n                    return false;\n            }\n        }\n\n        private parseName(): INameSyntax {\n            var shouldContinue = this.isIdentifier(this.currentToken());\n            var current: INameSyntax = this.eatIdentifierToken();\n\n            while (shouldContinue && this.currentToken().tokenKind === SyntaxKind.DotToken) {\n                var dotToken = this.eatToken(SyntaxKind.DotToken);\n\n                shouldContinue = SyntaxFacts.isIdentifierNameOrAnyKeyword(this.currentToken());\n                var identifier = this.eatIdentifierNameToken();\n\n                current = this.factory.qualifiedName(current, dotToken, identifier);\n            }\n\n            return current;\n        }\n\n        private isEnumDeclaration(): bool {\n            var index = this.modifierCount();\n\n            // If we have at least one modifier, and we see \'enum\', then consider this an enum\n            // declaration.\n            if (index > 0 &&\n                this.peekToken(index).tokenKind === SyntaxKind.EnumKeyword) {\n                return true;\n            }\n\n            // \'enum\' is not a javascript keyword.  So we need to use a bit of lookahead here to ensure\n            // that we\'re actually looking at a enum construct and not some javascript expression.\n            return this.currentToken().tokenKind === SyntaxKind.EnumKeyword &&\n                   this.isIdentifier(this.peekToken(1));\n        }\n\n        private parseEnumDeclaration(): EnumDeclarationSyntax {\n            // Debug.assert(this.isEnumDeclaration());\n\n            var modifiers = this.parseModifiers();\n            var enumKeyword = this.eatKeyword(SyntaxKind.EnumKeyword);\n            var identifier = this.eatIdentifierToken();\n\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n            var enumElements: ISeparatedSyntaxList = Syntax.emptySeparatedList;\n\n            if (openBraceToken.width() > 0) {\n                var result = this.parseSeparatedSyntaxList(ListParsingState.EnumDeclaration_EnumElements);\n                enumElements = result.list;\n                openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n            }\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n\n            return this.factory.enumDeclaration(modifiers, enumKeyword, identifier,\n                openBraceToken, enumElements, closeBraceToken);\n        }\n\n        private isEnumElement(inErrorRecovery: bool): bool {\n            if (this.currentNode() !== null && this.currentNode().kind() === SyntaxKind.EnumElement) {\n                return true;\n            }\n\n            return this.isPropertyName(this.currentToken(), inErrorRecovery);\n        }\n\n        private parseEnumElement(): EnumElementSyntax {\n            // Debug.assert(this.isEnumElement());\n            if (this.currentNode() !== null && this.currentNode().kind() === SyntaxKind.EnumElement) {\n                return <EnumElementSyntax>this.eatNode();\n            }\n\n            var propertyName = this.eatPropertyName();\n            var equalsValueClause: EqualsValueClauseSyntax = null;\n            if (this.isEqualsValueClause(/*inParameter*/ false)) {\n                equalsValueClause = this.parseEqualsValueClause(/*allowIn:*/ true);\n            }\n\n            return this.factory.enumElement(propertyName, equalsValueClause);\n        }\n\n        private static isModifier(token: ISyntaxToken): bool {\n            switch (token.tokenKind) {\n                case SyntaxKind.PublicKeyword:\n                case SyntaxKind.PrivateKeyword:\n                case SyntaxKind.StaticKeyword:\n                case SyntaxKind.ExportKeyword:\n                case SyntaxKind.DeclareKeyword:\n                    return true;\n\n                default:\n                    return false;\n            }\n        }\n\n        private modifierCount(): number {\n            var modifierCount = 0;\n            while (true) {\n                if (ParserImpl.isModifier(this.peekToken(modifierCount))) {\n                    modifierCount++;\n                    continue;\n                }\n\n                break;\n            }\n\n            return modifierCount\n        }\n\n        private parseModifiers(): ISyntaxList {\n            var tokens: ISyntaxToken[] = this.getArray();\n\n            while (true) {\n                if (ParserImpl.isModifier(this.currentToken())) {\n                    tokens.push(this.eatAnyToken());\n                    continue;\n                }\n\n                break;\n            }\n\n            var result = Syntax.list(tokens);\n\n            // If the tokens array is greater than one, then we can\'t return it.  It will have been \n            // copied directly into the syntax list.\n            this.returnZeroOrOneLengthArray(tokens);\n\n            return result;\n        }\n\n        private isClassDeclaration(): bool {\n            var index = this.modifierCount();\n\n            // If we have at least one modifier, and we see \'class\', then consider this a class\n            // declaration.\n            if (index > 0 &&\n                this.peekToken(index).tokenKind === SyntaxKind.ClassKeyword) {\n                return true;\n            }\n\n            // \'class\' is not a javascript keyword.  So we need to use a bit of lookahead here to ensure\n            // that we\'re actually looking at a class construct and not some javascript expression.\n            return this.currentToken().tokenKind === SyntaxKind.ClassKeyword &&\n                   this.isIdentifier(this.peekToken(1));\n        }\n\n        private parseHeritageClauses(): ISyntaxList {\n            var heritageClauses: ISyntaxList = Syntax.emptyList;\n            \n            if (this.isHeritageClause()) {\n                var result = this.parseSyntaxList(ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses);\n                heritageClauses = result.list;\n                Debug.assert(result.skippedTokens.length === 0);\n            }\n\n            return heritageClauses;\n        }\n\n        private parseClassDeclaration(): ClassDeclarationSyntax {\n            // Debug.assert(this.isClassDeclaration());\n\n            var modifiers = this.parseModifiers();\n\n            var classKeyword = this.eatKeyword(SyntaxKind.ClassKeyword);\n            var identifier = this.eatIdentifierToken();\n            var typeParameterList = this.parseOptionalTypeParameterList(/*requireCompleteTypeParameterList:*/ false);\n            var heritageClauses = this.parseHeritageClauses();\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n            var classElements: ISyntaxList = Syntax.emptyList;\n\n            if (openBraceToken.width() > 0) {\n                var result = this.parseSyntaxList(ListParsingState.ClassDeclaration_ClassElements);\n\n                classElements = result.list;\n                openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n            }\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n            return this.factory.classDeclaration(\n                modifiers, classKeyword, identifier, typeParameterList, heritageClauses, openBraceToken, classElements, closeBraceToken);\n        }\n\n        private isConstructorDeclaration(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.ConstructorKeyword;\n        }\n\n        private static isPublicOrPrivateKeyword(token: ISyntaxToken): bool {\n            return token.tokenKind === SyntaxKind.PublicKeyword || token.tokenKind === SyntaxKind.PrivateKeyword;\n        }\n\n        private isMemberAccessorDeclaration(inErrorRecovery: bool): bool {\n            var index = this.modifierCount();\n\n            if (this.peekToken(index).tokenKind !== SyntaxKind.GetKeyword &&\n                this.peekToken(index).tokenKind !== SyntaxKind.SetKeyword) {\n                return false;\n            }\n\n            index++;\n            return this.isPropertyName(this.peekToken(index), inErrorRecovery);\n        }\n\n        private parseMemberAccessorDeclaration(): MemberAccessorDeclarationSyntax {\n            // Debug.assert(this.isMemberAccessorDeclaration());\n\n            var modifiers = this.parseModifiers();\n\n            if (this.currentToken().tokenKind === SyntaxKind.GetKeyword) {\n                return this.parseGetMemberAccessorDeclaration(modifiers);\n            }\n            else if (this.currentToken().tokenKind === SyntaxKind.SetKeyword) {\n                return this.parseSetMemberAccessorDeclaration(modifiers);\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private parseGetMemberAccessorDeclaration(modifiers: ISyntaxList): GetMemberAccessorDeclarationSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.GetKeyword);\n\n            var getKeyword = this.eatKeyword(SyntaxKind.GetKeyword);\n            var propertyName = this.eatPropertyName();\n            var parameterList = this.parseParameterList();\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n\n            return this.factory.getMemberAccessorDeclaration(\n                modifiers, getKeyword, propertyName, parameterList, typeAnnotation, block);\n        }\n\n        private parseSetMemberAccessorDeclaration(modifiers: ISyntaxList): SetMemberAccessorDeclarationSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.SetKeyword);\n\n            var setKeyword = this.eatKeyword(SyntaxKind.SetKeyword);\n            var propertyName = this.eatPropertyName();\n            var parameterList = this.parseParameterList();\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n\n            return this.factory.setMemberAccessorDeclaration(\n                modifiers, setKeyword, propertyName, parameterList, block);\n        }\n\n        private isClassElement(inErrorRecovery: bool): bool {\n            if (this.currentNode() !== null && this.currentNode().isClassElement()) {\n                return true;\n            }\n\n            // Note: the order of these calls is important.  Specifically, isMemberVariableDeclaration\n            // checks for a subset of the conditions of the previous two calls.\n            return this.isConstructorDeclaration() ||\n                   this.isMemberFunctionDeclaration(inErrorRecovery) ||\n                   this.isMemberAccessorDeclaration(inErrorRecovery) ||\n                   this.isMemberVariableDeclaration(inErrorRecovery);\n        }\n\n        private parseConstructorDeclaration(): ConstructorDeclarationSyntax {\n            // Debug.assert(this.isConstructorDeclaration());\n\n            var constructorKeyword = this.eatKeyword(SyntaxKind.ConstructorKeyword);\n            var parameterList = this.parseParameterList();\n\n            var semicolonToken: ISyntaxToken = null;\n            var block: BlockSyntax = null;\n\n            if (this.isBlock()) {\n                block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n            }\n            else {\n                semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n            }\n\n            return this.factory.constructorDeclaration(constructorKeyword, parameterList, block, semicolonToken);\n        }\n\n        private isMemberFunctionDeclaration(inErrorRecovery: bool): bool {\n            var index = 0;\n\n            // Note: typescript is highly ambiguous here.  We may have things like:\n            //      public()\n            //      public public()\n            //      public static()\n            //      public static public()\n            //\n            // etc.\n            //\n            // This means we can\'t just blindly consume and move past modifier tokens.  Instead, we \n            // need to see if we\'re at the function\'s name, and only skip it if we\'re not.\n            while (true) {\n                var token = this.peekToken(index);\n                if (this.isPropertyName(token, inErrorRecovery) &&\n                    this.isCallSignature(index + 1)) {\n                    return true;\n                }\n\n                // We weren\'t at the name of the function.  If we have a modifier token, then \n                // consume it and try again.\n                if (ParserImpl.isModifier(token)) {\n                    index++;\n                    continue;\n                }\n\n                // Wasn\'t a member function.\n                return false;\n            }\n        }\n\n        private parseMemberFunctionDeclaration(): MemberFunctionDeclarationSyntax {\n            // Debug.assert(this.isMemberFunctionDeclaration());\n            \n            var modifierArray: ISyntaxToken[] = this.getArray();\n\n            while (true) {\n                var currentToken = this.currentToken();\n                if (this.isPropertyName(currentToken, /*inErrorRecovery:*/ false) &&\n                    this.isCallSignature(1)) {\n                    break;\n                }\n\n                Debug.assert(ParserImpl.isModifier(currentToken));\n                modifierArray.push(this.eatAnyToken());\n            }\n\n            var modifiers = Syntax.list(modifierArray);\n            this.returnZeroOrOneLengthArray(modifierArray);\n            \n            var propertyName = this.eatPropertyName();\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n\n            // If we got an errant => then we want to parse what\'s coming up without requiring an\n            // open brace.\n            var newCallSignature = this.tryAddUnexpectedEqualsGreaterThanToken(callSignature);\n            var parseBlockEvenWithNoOpenBrace = callSignature !== newCallSignature;\n            callSignature = newCallSignature;\n\n            var block: BlockSyntax = null;\n            var semicolon: ISyntaxToken = null;\n\n            if (parseBlockEvenWithNoOpenBrace || this.isBlock()) {\n                block = this.parseBlock(parseBlockEvenWithNoOpenBrace, /*checkForStrictMode:*/ false);\n            }\n            else {\n                semicolon = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n            }\n\n            return this.factory.memberFunctionDeclaration(modifiers, propertyName, callSignature, block, semicolon);\n        }\n        \n        private isDefinitelyMemberVariablePropertyName(index: number): bool {\n            // keywords are also property names.  Only accept a keyword as a property \n            // name if is of the form:\n            //      public;\n            //      public=\n            //      public:\n            //      public }\n            //      public <eof>\n            if (SyntaxFacts.isAnyKeyword(this.peekToken(index).tokenKind)) {\n                switch (this.peekToken(index + 1).tokenKind) {\n                    case SyntaxKind.SemicolonToken:\n                    case SyntaxKind.EqualsToken:\n                    case SyntaxKind.ColonToken:\n                    case SyntaxKind.CloseBraceToken:\n                    case SyntaxKind.EndOfFileToken:\n                       return true;\n                    default:\n                        return false;\n                }\n            }\n            else {\n                // If was a property name and not a keyword, then we\'re good to go.\n                return true;\n            }\n        }\n\n        private isMemberVariableDeclaration(inErrorRecovery: bool): bool {\n            var index = 0;\n\n            // Note: typescript is highly ambiguous here.  We may have things like:\n            //      public;\n            //      public public;\n            //      public static;\n            //      public static public;\n            //\n            // etc.\n            //\n            // This means we can\'t just blindly consume and move past modifier tokens.  Instead, we \n            // need to see if we\'re at the function\'s name, and only skip it if we\'re not.\n            while (true) {\n                var token = this.peekToken(index);\n                if (this.isPropertyName(token, inErrorRecovery) &&\n                    this.isDefinitelyMemberVariablePropertyName(index)) {\n                        return true;\n                }\n\n                // We weren\'t at the name of the variable.  If we have a modifier token, then \n                // consume it and try again.\n                if (ParserImpl.isModifier(this.peekToken(index))) {\n                    index++;\n                    continue;\n                }\n\n                // Wasn\'t a member variable.\n                return false;\n            }\n        }\n\n        private parseMemberVariableDeclaration(): MemberVariableDeclarationSyntax {\n            // Debug.assert(this.isMemberVariableDeclaration());\n\n            var modifierArray: ISyntaxToken[] = this.getArray();\n\n            while (true) {\n                var currentToken = this.currentToken();\n                if (this.isPropertyName(currentToken, /*inErrorRecovery:*/ false) &&\n                    this.isDefinitelyMemberVariablePropertyName(0)) {\n                    break;\n                }\n\n                Debug.assert(ParserImpl.isModifier(currentToken));\n                modifierArray.push(this.eatAnyToken());\n            }\n\n            var modifiers = Syntax.list(modifierArray);\n            this.returnZeroOrOneLengthArray(modifierArray);\n\n            var variableDeclarator = this.parseVariableDeclarator(/*allowIn:*/ true, /*allowPropertyName:*/ true);\n            var semicolon = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.memberVariableDeclaration(modifiers, variableDeclarator, semicolon);\n        }\n\n        private parseClassElement(inErrorRecovery: bool): IClassElementSyntax {\n            // Debug.assert(this.isClassElement());\n\n            if (this.currentNode() !== null && this.currentNode().isClassElement()) {\n                return <IClassElementSyntax>this.eatNode();\n            }\n\n            if (this.isConstructorDeclaration()) {\n                return this.parseConstructorDeclaration();\n            }\n            else if (this.isMemberFunctionDeclaration(inErrorRecovery)) {\n                return this.parseMemberFunctionDeclaration();\n            }\n            else if (this.isMemberAccessorDeclaration(inErrorRecovery)) {\n                return this.parseMemberAccessorDeclaration();\n            }\n            else if (this.isMemberVariableDeclaration(inErrorRecovery)) {\n                return this.parseMemberVariableDeclaration();\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private tryAddUnexpectedEqualsGreaterThanToken(callSignature: CallSignatureSyntax): CallSignatureSyntax {\n            var token0 = this.currentToken();\n\n            var hasEqualsGreaterThanToken = token0.tokenKind === SyntaxKind.EqualsGreaterThanToken;\n            if (hasEqualsGreaterThanToken) {\n                // Previously the language allowed \"function f() => expr;\" as a shorthand for \n                // \"function f() { return expr; }.\n                // \n                // Detect if the user is typing this and attempt recovery.\n                var diagnostic = new SyntaxDiagnostic(this.fileName,\n                    this.currentTokenStart(), token0.width(), DiagnosticCode.Unexpected_token_, []);\n                this.addDiagnostic(diagnostic);\n\n                var token = this.eatAnyToken();\n                return <CallSignatureSyntax>this.addSkippedTokenAfterNode(callSignature, token0);\n            }\n\n            return callSignature;\n        }\n\n        private isFunctionDeclaration(): bool {\n            var index = this.modifierCount();\n            return this.peekToken(index).tokenKind === SyntaxKind.FunctionKeyword;\n        }\n\n        private parseFunctionDeclaration(): FunctionDeclarationSyntax {\n            // Debug.assert(this.isFunctionDeclaration());\n\n            var modifiers = this.parseModifiers();\n            var functionKeyword = this.eatKeyword(SyntaxKind.FunctionKeyword);\n            var identifier = this.eatIdentifierToken();\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n\n            // If we got an errant => then we want to parse what\'s coming up without requiring an\n            // open brace.\n            var newCallSignature = this.tryAddUnexpectedEqualsGreaterThanToken(callSignature);\n            var parseBlockEvenWithNoOpenBrace = callSignature !== newCallSignature;\n            callSignature = newCallSignature;\n\n            var semicolonToken: ISyntaxToken = null;\n            var block: BlockSyntax = null;\n\n            // Parse a block if we\'re on a bock, or if we saw a \'=>\'\n            if (parseBlockEvenWithNoOpenBrace || this.isBlock()) {\n                block = this.parseBlock(parseBlockEvenWithNoOpenBrace, /*checkForStrictMode:*/ true);\n            }\n            else {\n                semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n            }\n\n            return this.factory.functionDeclaration(modifiers, functionKeyword, identifier, callSignature, block, semicolonToken);\n        }\n\n        private isModuleDeclaration(): bool {\n            var index = this.modifierCount();\n\n            // If we have at least one modifier, and we see \'module\', then consider this a module\n            // declaration.\n            if (index > 0 &&\n                this.peekToken(index).tokenKind === SyntaxKind.ModuleKeyword) {\n                return true;\n            }\n\n            // \'module\' is not a javascript keyword.  So we need to use a bit of lookahead here to ensure\n            // that we\'re actually looking at a module construct and not some javascript expression.\n            if (this.currentToken().tokenKind === SyntaxKind.ModuleKeyword) {\n                var token1 = this.peekToken(1);\n                return this.isIdentifier(token1) || token1.tokenKind === SyntaxKind.StringLiteral;\n            }\n\n            return false;\n        }\n\n        private parseModuleDeclaration(): ModuleDeclarationSyntax {\n            // Debug.assert(this.isModuleDeclaration());\n\n            var modifiers = this.parseModifiers();\n            var moduleKeyword = this.eatKeyword(SyntaxKind.ModuleKeyword);\n\n            var moduleName: INameSyntax = null;\n            var stringLiteral: ISyntaxToken = null;\n\n            if (this.currentToken().tokenKind === SyntaxKind.StringLiteral) {\n                stringLiteral = this.eatToken(SyntaxKind.StringLiteral);\n            }\n            else {\n                moduleName = this.parseName();\n            }\n\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n\n            var moduleElements: ISyntaxList = Syntax.emptyList;\n            if (openBraceToken.width() > 0) {\n                var result = this.parseSyntaxList(ListParsingState.ModuleDeclaration_ModuleElements);\n                moduleElements = result.list;\n                openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n            }\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n\n            return this.factory.moduleDeclaration(\n                modifiers, moduleKeyword, moduleName, stringLiteral,\n                openBraceToken, moduleElements, closeBraceToken);\n        }\n\n        private isInterfaceDeclaration(): bool {\n            var index = this.modifierCount();\n\n            // If we have at least one modifier, and we see \'interface\', then consider this an interface\n            // declaration.\n            if (index > 0 &&\n                this.peekToken(index).tokenKind === SyntaxKind.InterfaceKeyword) {\n                return true\n            }\n\n            // \'interface\' is not a javascript keyword.  So we need to use a bit of lookahead here to ensure\n            // that we\'re actually looking at a interface construct and not some javascript expression.\n            return this.currentToken().tokenKind === SyntaxKind.InterfaceKeyword &&\n                   this.isIdentifier(this.peekToken(1));\n        }\n\n        private parseInterfaceDeclaration(): InterfaceDeclarationSyntax {\n            // Debug.assert(this.isInterfaceDeclaration());\n\n            var modifiers = this.parseModifiers();\n            var interfaceKeyword = this.eatKeyword(SyntaxKind.InterfaceKeyword);\n            var identifier = this.eatIdentifierToken();\n            var typeParameterList = this.parseOptionalTypeParameterList(/*requireCompleteTypeParameterList:*/ false);\n            var heritageClauses = this.parseHeritageClauses();\n\n            var objectType = this.parseObjectType();\n            return this.factory.interfaceDeclaration(\n                modifiers, interfaceKeyword, identifier, typeParameterList, heritageClauses, objectType);\n        }\n\n        private parseObjectType(): ObjectTypeSyntax {\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n\n            var typeMembers: ISeparatedSyntaxList = Syntax.emptySeparatedList;\n            if (openBraceToken.width() > 0) {\n                var result = this.parseSeparatedSyntaxList(ListParsingState.ObjectType_TypeMembers);\n                typeMembers = result.list;\n                openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n            }\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n            return this.factory.objectType(openBraceToken, typeMembers, closeBraceToken);\n        }\n\n        private isTypeMember(inErrorRecovery: bool): bool {\n            if (this.currentNode() !== null && this.currentNode().isTypeMember()) {\n                return true;\n            }\n\n            return this.isCallSignature(/*tokenIndex:*/ 0) ||\n                   this.isConstructSignature() ||\n                   this.isIndexSignature() ||\n                   this.isMethodSignature(inErrorRecovery) ||\n                   this.isPropertySignature(inErrorRecovery);\n        }\n\n        private parseTypeMember(): ITypeMemberSyntax {\n            if (this.currentNode() !== null && this.currentNode().isTypeMember()) {\n                return <ITypeMemberSyntax>this.eatNode();\n            }\n\n            if (this.isCallSignature(/*tokenIndex:*/ 0)) {\n                return this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n            }\n            else if (this.isConstructSignature()) {\n                return this.parseConstructSignature();\n            }\n            else if (this.isIndexSignature()) {\n                return this.parseIndexSignature();\n            }\n            else if (this.isMethodSignature(/*inErrorRecovery:*/ false)) {\n                // Note: it is important that isFunctionSignature is called before isPropertySignature.\n                // isPropertySignature checks for a subset of isFunctionSignature.\n                return this.parseMethodSignature();\n            }\n            else if (this.isPropertySignature(/*inErrorRecovery:*/ false)) {\n                return this.parsePropertySignature();\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private parseConstructSignature(): ConstructSignatureSyntax {\n            // Debug.assert(this.isConstructSignature());\n\n            var newKeyword = this.eatKeyword(SyntaxKind.NewKeyword);\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n\n            return this.factory.constructSignature(newKeyword, callSignature);\n        }\n\n        private parseIndexSignature(): IndexSignatureSyntax {\n            // Debug.assert(this.isIndexSignature());\n\n            var openBracketToken = this.eatToken(SyntaxKind.OpenBracketToken);\n            var parameter = this.parseParameter();\n            var closeBracketToken = this.eatToken(SyntaxKind.CloseBracketToken);\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n\n            return this.factory.indexSignature(openBracketToken, parameter, closeBracketToken, typeAnnotation);\n        }\n\n        private parseMethodSignature(): MethodSignatureSyntax {\n            // Debug.assert(this.isMethodSignature());\n\n            var propertyName = this.eatPropertyName();\n            var questionToken = this.tryEatToken(SyntaxKind.QuestionToken);\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n\n            return this.factory.methodSignature(propertyName, questionToken, callSignature);\n        }\n\n        private parsePropertySignature(): PropertySignatureSyntax {\n            // Debug.assert(this.isPropertySignature());\n\n            var propertyName = this.eatPropertyName();\n            var questionToken = this.tryEatToken(SyntaxKind.QuestionToken);\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n\n            return this.factory.propertySignature(propertyName, questionToken, typeAnnotation);\n        }\n\n        private isCallSignature(tokenIndex: number): bool {\n            var tokenKind = this.peekToken(tokenIndex).tokenKind;\n            return tokenKind === SyntaxKind.OpenParenToken || tokenKind === SyntaxKind.LessThanToken;\n        }\n\n        private isConstructSignature(): bool {\n            if (this.currentToken().tokenKind !== SyntaxKind.NewKeyword) {\n                return false;\n            }\n\n            var token1 = this.peekToken(1);\n            return token1.tokenKind === SyntaxKind.LessThanToken || token1.tokenKind === SyntaxKind.OpenParenToken;\n        }\n\n        private isIndexSignature(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.OpenBracketToken;\n        }\n\n        private isMethodSignature(inErrorRecovery: bool): bool {\n            if (this.isPropertyName(this.currentToken(), inErrorRecovery)) {\n                // id(\n                if (this.isCallSignature(1)) {\n                    return true;\n                }\n\n                // id?(\n                if (this.peekToken(1).tokenKind === SyntaxKind.QuestionToken &&\n                    this.isCallSignature(2)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private isPropertySignature(inErrorRecovery: bool): bool {\n            // Note: property names also start function signatures.  So it\'s important that we call this\n            // after we calll isFunctionSignature.\n            return this.isPropertyName(this.currentToken(), inErrorRecovery);\n        }\n\n        private isHeritageClause(): bool {\n            var token0 = this.currentToken();\n            return token0.tokenKind === SyntaxKind.ExtendsKeyword || token0.tokenKind === SyntaxKind.ImplementsKeyword;\n        }\n\n        private isNotHeritageClauseTypeName(): bool {\n            if (this.currentToken().tokenKind === SyntaxKind.ImplementsKeyword ||\n                this.currentToken().tokenKind === SyntaxKind.ExtendsKeyword) {\n\n                return this.isIdentifier(this.peekToken(1));\n            }\n\n            return false;\n        }\n\n        private isHeritageClauseTypeName(): bool {\n            if (this.isName()) {\n                // We want to make sure that the \"extends\" in \"extends foo\" or the \"implements\" in\n                // \"implements foo\" is not considered a type name.\n                return !this.isNotHeritageClauseTypeName();\n            }\n            \n            return false;\n        }\n\n        private parseHeritageClause(): HeritageClauseSyntax {\n            // Debug.assert(this.isHeritageClause());\n\n            var extendsOrImplementsKeyword = this.eatAnyToken();\n            Debug.assert(extendsOrImplementsKeyword.tokenKind === SyntaxKind.ExtendsKeyword || extendsOrImplementsKeyword.tokenKind === SyntaxKind.ImplementsKeyword);\n\n            var result = this.parseSeparatedSyntaxList(ListParsingState.HeritageClause_TypeNameList);\n            var typeNames = result.list;\n            extendsOrImplementsKeyword = this.addSkippedTokensAfterToken(extendsOrImplementsKeyword, result.skippedTokens);\n\n            return this.factory.heritageClause(extendsOrImplementsKeyword, typeNames);\n        }\n\n        private isStatement(inErrorRecovery: bool): bool {\n            if (this.currentNode() !== null && this.currentNode().isStatement()) {\n                return true;\n            }\n\n            // ERROR RECOVERY\n            switch (this.currentToken().tokenKind) {\n                case SyntaxKind.PublicKeyword:\n                case SyntaxKind.PrivateKeyword:\n                case SyntaxKind.StaticKeyword:\n                    // None of hte above are actually keywords.  And they might show up in a real\n                    // statement (i.e. \"public();\").  However, if we can determine that they\'re\n                    // parsable as a ClassElement then don\'t consider them a statement.  Note:\n                    //\n                    // It should not be possible for any class element that starts with public, private\n                    // or static to be parsed as a statement.  So this is safe to do.\n                    if (this.isClassElement(inErrorRecovery)) {\n                        return false;\n                    }\n            }\n\n            return this.isVariableStatement() ||\n                   this.isLabeledStatement() ||\n                   this.isFunctionDeclaration() ||\n                   this.isIfStatement() ||\n                   this.isBlock() ||\n                   this.isExpressionStatement() ||\n                   this.isReturnStatement() ||\n                   this.isSwitchStatement() ||\n                   this.isThrowStatement() ||\n                   this.isBreakStatement() ||\n                   this.isContinueStatement() ||\n                   this.isForOrForInStatement() ||\n                   this.isEmptyStatement(inErrorRecovery) ||\n                   this.isWhileStatement() ||\n                   this.isWithStatement() ||\n                   this.isDoStatement() ||\n                   this.isTryStatement() ||\n                   this.isDebuggerStatement();\n        }\n\n        private parseStatement(): IStatementSyntax {\n            if (this.currentNode() !== null && this.currentNode().isStatement()) {\n                return <IStatementSyntax>this.eatNode();\n            }\n\n            if (this.isVariableStatement()) {\n                return this.parseVariableStatement();\n            }\n            else if (this.isLabeledStatement()) {\n                return this.parseLabeledStatement();\n            }\n            else if (this.isFunctionDeclaration()) {\n                return this.parseFunctionDeclaration();\n            }\n            else if (this.isIfStatement()) {\n                return this.parseIfStatement();\n            }\n            else if (this.isBlock()) {\n                return this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n            }\n            else if (this.isReturnStatement()) {\n                return this.parseReturnStatement();\n            }\n            else if (this.isSwitchStatement()) {\n                return this.parseSwitchStatement();\n            }\n            else if (this.isThrowStatement()) {\n                return this.parseThrowStatement();\n            }\n            else if (this.isBreakStatement()) {\n                return this.parseBreakStatement();\n            }\n            else if (this.isContinueStatement()) {\n                return this.parseContinueStatement();\n            }\n            else if (this.isForOrForInStatement()) {\n                return this.parseForOrForInStatement();\n            }\n            else if (this.isEmptyStatement(/*inErrorRecovery:*/ false)) {\n                return this.parseEmptyStatement();\n            }\n            else if (this.isWhileStatement()) {\n                return this.parseWhileStatement();\n            }\n            else if (this.isWithStatement()) {\n                return this.parseWithStatement();\n            }\n            else if (this.isDoStatement()) {\n                return this.parseDoStatement();\n            }\n            else if (this.isTryStatement()) {\n                return this.parseTryStatement();\n            }\n            else if (this.isDebuggerStatement()) {\n                return this.parseDebuggerStatement();\n            }\n            else {\n                // Fall back to parsing this as expression statement.\n                return this.parseExpressionStatement();\n            }\n        }\n\n        private isDebuggerStatement(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.DebuggerKeyword;\n        }\n\n        private parseDebuggerStatement(): DebuggerStatementSyntax {\n            // Debug.assert(this.isDebuggerStatement());\n\n            var debuggerKeyword = this.eatKeyword(SyntaxKind.DebuggerKeyword);\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.debuggerStatement(debuggerKeyword, semicolonToken);\n        }\n\n        private isDoStatement(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.DoKeyword;\n        }\n\n        private parseDoStatement(): DoStatementSyntax {\n            // Debug.assert(this.isDoStatement());\n\n            var doKeyword = this.eatKeyword(SyntaxKind.DoKeyword);\n            var statement = this.parseStatement();\n            var whileKeyword = this.eatKeyword(SyntaxKind.WhileKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var condition = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n\n            // From: https://mail.mozilla.org/pipermail/es-discuss/2011-August/016188.html\n            // 157 min --- All allen at wirfs-brock.com CONF --- \"do{;}while(false)false\" prohibited in \n            // spec but allowed in consensus reality. Approved -- this is the de-facto standard whereby\n            //  do;while(0)x will have a semicolon inserted before x.\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ true);\n\n            return this.factory.doStatement(doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken);\n        }\n\n        private isLabeledStatement(): bool {\n            return this.isIdentifier(this.currentToken()) && this.peekToken(1).tokenKind === SyntaxKind.ColonToken;\n        }\n\n        private parseLabeledStatement(): LabeledStatementSyntax {\n            // Debug.assert(this.isLabeledStatement());\n\n            var identifier = this.eatIdentifierToken();\n            var colonToken = this.eatToken(SyntaxKind.ColonToken);\n            var statement = this.parseStatement();\n\n            return this.factory.labeledStatement(identifier, colonToken, statement);\n        }\n\n        private isTryStatement(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.TryKeyword;\n        }\n\n        private parseTryStatement(): TryStatementSyntax {\n            // Debug.assert(this.isTryStatement());\n\n            var tryKeyword = this.eatKeyword(SyntaxKind.TryKeyword);\n\n            var savedListParsingState = this.listParsingState;\n            this.listParsingState |= ListParsingState.TryBlock_Statements;\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n            this.listParsingState = savedListParsingState;\n\n            var catchClause: CatchClauseSyntax = null;\n            if (this.isCatchClause()) {\n                catchClause = this.parseCatchClause();\n            }\n\n            // If we don\'t have a catch clause, then we must have a finally clause.  Try to parse\n            // one out no matter what.\n            var finallyClause: FinallyClauseSyntax = null;\n            if (catchClause === null || this.isFinallyClause()) {\n                finallyClause = this.parseFinallyClause();\n            }\n\n            return this.factory.tryStatement(tryKeyword, block, catchClause, finallyClause);\n        }\n\n        private isCatchClause(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.CatchKeyword;\n        }\n\n        private parseCatchClause(): CatchClauseSyntax {\n            // Debug.assert(this.isCatchClause());\n\n            var catchKeyword = this.eatKeyword(SyntaxKind.CatchKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var identifier = this.eatIdentifierToken();\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n\n            var savedListParsingState = this.listParsingState;\n            this.listParsingState |= ListParsingState.CatchBlock_Statements;\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n            this.listParsingState = savedListParsingState;\n\n            return this.factory.catchClause(catchKeyword, openParenToken, identifier, typeAnnotation, closeParenToken, block);\n        }\n\n        private isFinallyClause(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.FinallyKeyword;\n        }\n\n        private parseFinallyClause(): FinallyClauseSyntax {\n            var finallyKeyword = this.eatKeyword(SyntaxKind.FinallyKeyword);\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n\n            return this.factory.finallyClause(finallyKeyword, block);\n        }\n\n        private isWithStatement(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.WithKeyword;\n        }\n\n        private parseWithStatement(): WithStatementSyntax {\n            // Debug.assert(this.isWithStatement());\n\n            var withKeyword = this.eatKeyword(SyntaxKind.WithKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var condition = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var statement = this.parseStatement();\n\n            return this.factory.withStatement(withKeyword, openParenToken, condition, closeParenToken, statement);\n        }\n\n        private isWhileStatement(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.WhileKeyword;\n        }\n\n        private parseWhileStatement(): WhileStatementSyntax {\n            // Debug.assert(this.isWhileStatement());\n\n            var whileKeyword = this.eatKeyword(SyntaxKind.WhileKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var condition = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var statement = this.parseStatement();\n\n            return this.factory.whileStatement(whileKeyword, openParenToken, condition, closeParenToken, statement);\n        }\n\n        private isEmptyStatement(inErrorRecovery: bool): bool {\n            // If we\'re in error recovery, then we don\'t want to treat \';\' as an empty statement.\n            // The problem is that \';\' can show up in far too many contexts, and if we see one \n            // and assume it\'s a statement, then we may bail out innapropriately from whatever \n            // we\'re parsing.  For example, if we have a semicolon in the middle of a class, then\n            // we really don\'t want to assume the class is over and we\'re on a statement in the\n            // outer module.  We just want to consume and move on.\n            if (inErrorRecovery) {\n                return false;\n            }\n\n            return this.currentToken().tokenKind === SyntaxKind.SemicolonToken;\n        }\n\n        private parseEmptyStatement(): EmptyStatementSyntax {\n            // Debug.assert(this.isEmptyStatement());\n\n            var semicolonToken = this.eatToken(SyntaxKind.SemicolonToken);\n            return this.factory.emptyStatement(semicolonToken);\n        }\n\n        private isForOrForInStatement(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.ForKeyword;\n        }\n\n        private parseForOrForInStatement(): BaseForStatementSyntax {\n            // Debug.assert(this.isForOrForInStatement());\n\n            var forKeyword = this.eatKeyword(SyntaxKind.ForKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n\n            var currentToken = this.currentToken();\n            if (currentToken.tokenKind === SyntaxKind.VarKeyword) {\n                // for ( var VariableDeclarationListNoIn; Expressionopt ; Expressionopt ) Statement\n                // for ( var VariableDeclarationNoIn in Expression ) Statement\n                return this.parseForOrForInStatementWithVariableDeclaration(forKeyword, openParenToken);\n            }\n            else if (currentToken.tokenKind === SyntaxKind.SemicolonToken) {\n                // for ( ; Expressionopt ; Expressionopt ) Statement\n                return this.parseForStatement(forKeyword, openParenToken);\n            }\n            else {\n                // for ( ExpressionNoInopt; Expressionopt ; Expressionopt ) Statement\n                // for ( LeftHandSideExpression in Expression ) Statement\n                return this.parseForOrForInStatementWithInitializer(forKeyword, openParenToken);\n            }\n        }\n\n        private parseForOrForInStatementWithVariableDeclaration(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken): BaseForStatementSyntax {\n            // Debug.assert(forKeyword.tokenKind === SyntaxKind.ForKeyword && openParenToken.tokenKind === SyntaxKind.OpenParenToken);\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.VarKeyword);\n\n            // for ( var VariableDeclarationListNoIn; Expressionopt ; Expressionopt ) Statement\n            // for ( var VariableDeclarationNoIn in Expression ) Statement\n\n            var variableDeclaration = this.parseVariableDeclaration(/*allowIn:*/ false);\n\n            if (this.currentToken().tokenKind === SyntaxKind.InKeyword) {\n                return this.parseForInStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, variableDeclaration, null);\n            }\n\n            return this.parseForStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, variableDeclaration, null);\n        }\n\n        private parseForInStatementWithVariableDeclarationOrInitializer(\n                forKeyword: ISyntaxToken,\n                openParenToken: ISyntaxToken,\n                variableDeclaration: VariableDeclarationSyntax,\n                initializer: IExpressionSyntax): ForInStatementSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.InKeyword);\n\n            // for ( var VariableDeclarationNoIn in Expression ) Statement\n            var inKeyword = this.eatKeyword(SyntaxKind.InKeyword);\n            var expression = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var statement = this.parseStatement();\n\n            return this.factory.forInStatement(forKeyword, openParenToken, variableDeclaration,\n                initializer, inKeyword, expression, closeParenToken, statement);\n        }\n\n        private parseForOrForInStatementWithInitializer(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken): BaseForStatementSyntax {\n            // Debug.assert(forKeyword.tokenKind === SyntaxKind.ForKeyword && openParenToken.tokenKind === SyntaxKind.OpenParenToken);\n\n            // for ( ExpressionNoInopt; Expressionopt ; Expressionopt ) Statement\n            // for ( LeftHandSideExpression in Expression ) Statement\n\n            var initializer = this.parseExpression(/*allowIn:*/ false);\n            if (this.currentToken().tokenKind === SyntaxKind.InKeyword) {\n                return this.parseForInStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, null, initializer);\n            }\n            else {\n                return this.parseForStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, null, initializer);\n            }\n        }\n\n        private parseForStatement(forKeyword: ISyntaxToken, openParenToken: ISyntaxToken): ForStatementSyntax {\n            // Debug.assert(forKeyword.tokenKind === SyntaxKind.ForKeyword && openParenToken.tokenKind === SyntaxKind.OpenParenToken);\n\n            // for ( ExpressionNoInopt; Expressionopt ; Expressionopt ) Statement\n            var initializer: IExpressionSyntax = null;\n\n            if (this.currentToken().tokenKind !== SyntaxKind.SemicolonToken &&\n                this.currentToken().tokenKind !== SyntaxKind.CloseParenToken &&\n                this.currentToken().tokenKind !== SyntaxKind.EndOfFileToken) {\n                initializer = this.parseExpression(/*allowIn:*/ false);\n            }\n\n            return this.parseForStatementWithVariableDeclarationOrInitializer(forKeyword, openParenToken, null, initializer);\n        }\n\n        private parseForStatementWithVariableDeclarationOrInitializer(\n                    forKeyword: ISyntaxToken,\n                    openParenToken: ISyntaxToken,\n                    variableDeclaration: VariableDeclarationSyntax,\n                    initializer: IExpressionSyntax): ForStatementSyntax {\n\n            // NOTE: From the es5 section on Automatic Semicolon Insertion.\n            // a semicolon is never inserted automatically if the semicolon would then ... become \n            // one of the two semicolons in the header of a for statement\n            var firstSemicolonToken = this.eatToken(SyntaxKind.SemicolonToken);\n\n            var condition: IExpressionSyntax = null;\n            if (this.currentToken().tokenKind !== SyntaxKind.SemicolonToken &&\n                this.currentToken().tokenKind !== SyntaxKind.CloseParenToken &&\n                this.currentToken().tokenKind !== SyntaxKind.EndOfFileToken) {\n                condition = this.parseExpression(/*allowIn:*/ true);\n            }\n\n            // NOTE: See above.  Semicolons in for statements don\'t participate in automatic \n            // semicolon insertion.\n            var secondSemicolonToken = this.eatToken(SyntaxKind.SemicolonToken);\n\n            var incrementor: IExpressionSyntax = null;\n            if (this.currentToken().tokenKind !== SyntaxKind.CloseParenToken &&\n                this.currentToken().tokenKind !== SyntaxKind.EndOfFileToken) {\n                incrementor = this.parseExpression(/*allowIn:*/ true);\n            }\n\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var statement = this.parseStatement();\n\n            return this.factory.forStatement(forKeyword, openParenToken, variableDeclaration, initializer,\n                firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement);\n        }\n\n        private isBreakStatement(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.BreakKeyword;\n        }\n\n        private parseBreakStatement(): BreakStatementSyntax {\n            // Debug.assert(this.isBreakStatement());\n\n            var breakKeyword = this.eatKeyword(SyntaxKind.BreakKeyword);\n\n            // If there is no newline after the break keyword, then we can consume an optional \n            // identifier.\n            var identifier: ISyntaxToken = null;\n            if (!this.canEatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false)) {\n                if (this.isIdentifier(this.currentToken())) {\n                    identifier = this.eatIdentifierToken();\n                }\n            }\n\n            var semicolon = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n            return this.factory.breakStatement(breakKeyword, identifier, semicolon);\n        }\n\n        private isContinueStatement(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.ContinueKeyword;\n        }\n\n        private parseContinueStatement(): ContinueStatementSyntax {\n            // Debug.assert(this.isContinueStatement());\n\n            var continueKeyword = this.eatKeyword(SyntaxKind.ContinueKeyword);\n\n            // If there is no newline after the break keyword, then we can consume an optional \n            // identifier.\n            var identifier: ISyntaxToken = null;\n            if (!this.canEatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false)) {\n                if (this.isIdentifier(this.currentToken())) {\n                    identifier = this.eatIdentifierToken();\n                }\n            }\n\n            var semicolon = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n            return this.factory.continueStatement(continueKeyword, identifier, semicolon);\n        }\n\n        private isSwitchStatement(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.SwitchKeyword;\n        }\n\n        private parseSwitchStatement() {\n            // Debug.assert(this.isSwitchStatement());\n\n            var switchKeyword = this.eatKeyword(SyntaxKind.SwitchKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var expression = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n\n            var switchClauses: ISyntaxList = Syntax.emptyList;\n            if (openBraceToken.width() > 0) {\n                var result = this.parseSyntaxList(ListParsingState.SwitchStatement_SwitchClauses);\n                switchClauses = result.list;\n                openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n            }\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n            return this.factory.switchStatement(switchKeyword, openParenToken, expression,\n                closeParenToken, openBraceToken, switchClauses, closeBraceToken);\n        }\n\n        private isCaseSwitchClause(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.CaseKeyword;\n        }\n\n        private isDefaultSwitchClause(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.DefaultKeyword;\n        }\n\n        private isSwitchClause(): bool {\n            if (this.currentNode() !== null && this.currentNode().isSwitchClause()) {\n                return true;\n            }\n\n            return this.isCaseSwitchClause() || this.isDefaultSwitchClause();\n        }\n\n        private parseSwitchClause(): SwitchClauseSyntax {\n            // Debug.assert(this.isSwitchClause());\n            if (this.currentNode() !== null && this.currentNode().isSwitchClause()) {\n                return <SwitchClauseSyntax>this.eatNode();\n            }\n\n            if (this.isCaseSwitchClause()) {\n                return this.parseCaseSwitchClause();\n            }\n            else if (this.isDefaultSwitchClause()) {\n                return this.parseDefaultSwitchClause();\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private parseCaseSwitchClause(): CaseSwitchClauseSyntax {\n            // Debug.assert(this.isCaseSwitchClause());\n\n            var caseKeyword = this.eatKeyword(SyntaxKind.CaseKeyword);\n            var expression = this.parseExpression(/*allowIn:*/ true);\n            var colonToken = this.eatToken(SyntaxKind.ColonToken);\n            var statements = Syntax.emptyList;\n\n            // TODO: allow parsing of the list evne if there\'s no colon.  However, we have to make \n            // sure we add any skipped tokens to the right previous node or token.\n            if (colonToken.fullWidth() > 0) {\n                var result = this.parseSyntaxList(ListParsingState.SwitchClause_Statements);\n                statements = result.list;\n                colonToken = this.addSkippedTokensAfterToken(colonToken, result.skippedTokens);\n            }\n\n            return this.factory.caseSwitchClause(caseKeyword, expression, colonToken, statements);\n        }\n\n        private parseDefaultSwitchClause(): DefaultSwitchClauseSyntax {\n            // Debug.assert(this.isDefaultSwitchClause());\n\n            var defaultKeyword = this.eatKeyword(SyntaxKind.DefaultKeyword);\n            var colonToken = this.eatToken(SyntaxKind.ColonToken);\n            var statements = Syntax.emptyList;\n\n            // TODO: Allow parsing witha colon here.  However, ensure that we attach any skipped \n            // tokens to the defaultKeyword.\n            if (colonToken.fullWidth() > 0) {\n                var result = this.parseSyntaxList(ListParsingState.SwitchClause_Statements);\n                statements = result.list;\n                colonToken = this.addSkippedTokensAfterToken(colonToken, result.skippedTokens);\n            }\n\n            return this.factory.defaultSwitchClause(defaultKeyword, colonToken, statements);\n        }\n\n        private isThrowStatement(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.ThrowKeyword;\n        }\n\n        private parseThrowStatement(): ThrowStatementSyntax {\n            // Debug.assert(this.isThrowStatement());\n\n            var throwKeyword = this.eatKeyword(SyntaxKind.ThrowKeyword);\n\n            var expression: IExpressionSyntax = null;\n            if (this.canEatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false)) {\n                // Because of automatic semicolon insertion, we need to report error if this \n                // throw could be terminated with a semicolon.  Note: we can\'t call \'parseExpression\'\n                // directly as that might consume an expression on the following line.  \n                var token = this.createMissingToken(SyntaxKind.IdentifierName, null);\n                expression = token;\n            }\n            else {\n                expression = this.parseExpression(/*allowIn:*/ true);\n            }\n\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.throwStatement(throwKeyword, expression, semicolonToken);\n        }\n\n        private isReturnStatement(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.ReturnKeyword;\n        }\n\n        private parseReturnStatement(): ReturnStatementSyntax {\n            // Debug.assert(this.isReturnStatement());\n\n            var returnKeyword = this.eatKeyword(SyntaxKind.ReturnKeyword);\n\n            var expression: IExpressionSyntax = null;\n            if (!this.canEatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false)) {\n                expression = this.parseExpression(/*allowIn:*/ true);\n            }\n\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.returnStatement(returnKeyword, expression, semicolonToken);\n        }\n\n        private isExpressionStatement(): bool {\n            // As per the gramar, neither { nor \'function\' can start an expression statement.\n            var currentToken = this.currentToken();\n\n            var kind = currentToken.tokenKind;\n            if (kind === SyntaxKind.OpenBraceToken || kind === SyntaxKind.FunctionKeyword) {\n                return false;\n            }\n\n            return this.isExpression();\n        }\n\n        private isAssignmentOrOmittedExpression(): bool {\n            if (this.currentToken().tokenKind === SyntaxKind.CommaToken) {\n                return true;\n            }\n\n            return this.isExpression();\n        }\n\n        private parseAssignmentOrOmittedExpression(): IExpressionSyntax {\n            // Debug.assert(this.isAssignmentOrOmittedExpression());\n\n            if (this.currentToken().tokenKind === SyntaxKind.CommaToken) {\n                return this.factory.omittedExpression();\n            }\n\n            return this.parseAssignmentExpression(/*allowIn:*/ true);\n        }\n\n        private isExpression(): bool {\n            var currentToken = this.currentToken();\n            var kind = currentToken.tokenKind;\n\n            switch (kind) {\n                case SyntaxKind.NumericLiteral:\n                case SyntaxKind.StringLiteral:\n                case SyntaxKind.RegularExpressionLiteral:\n                    return true;\n\n                case SyntaxKind.OpenBracketToken: // For array literals.\n                case SyntaxKind.OpenParenToken: // For parenthesized expressions\n                    return true;\n\n                case SyntaxKind.LessThanToken: // For cast expressions.\n                    return true;\n\n                // Prefix unary expressions.\n                case SyntaxKind.PlusPlusToken:\n                case SyntaxKind.MinusMinusToken:\n                case SyntaxKind.PlusToken:\n                case SyntaxKind.MinusToken:\n                case SyntaxKind.TildeToken:\n                case SyntaxKind.ExclamationToken:\n                    return true;\n\n                case SyntaxKind.OpenBraceToken: // For object type literal expressions.\n                    return true;\n\n                // ERROR TOLERANCE:\n                // If we see a => then we know the user was probably trying to type in an arrow \n                // function.  So allow this as the start of an expression, knowing that when we \n                // actually try to parse it we\'ll report the missing identifier.\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return true;\n\n                case SyntaxKind.SlashToken:\n                case SyntaxKind.SlashEqualsToken:\n                    // Note: if we see a / or /= token then we always consider this an expression.  Why?\n                    // Well, either that / or /= is actually a regular expression, in which case we\'re \n                    // definitely an expression.  Or, it\'s actually a divide.  In which case, we *still*\n                    // want to think of ourself as an expression.  \"But wait\", you say.  \'/\' doesn\'t\n                    // start an expression.  That\'s true.  BUt like the above check for =>, for error\n                    // tolerance, we will consider ourselves in an expression.  We\'ll then parse out an\n                    // missing identifier and then will consume the / token naturally as a binary \n                    // expression.\n                    return true;\n\n                case SyntaxKind.SuperKeyword:\n                case SyntaxKind.ThisKeyword:\n                case SyntaxKind.TrueKeyword:\n                case SyntaxKind.FalseKeyword:\n                case SyntaxKind.NullKeyword:\n                    return true;\n\n                case SyntaxKind.NewKeyword: // For object creation expressions.\n                    return true;\n\n                // Prefix unary expressions\n                case SyntaxKind.DeleteKeyword:\n                case SyntaxKind.VoidKeyword:\n                case SyntaxKind.TypeOfKeyword:\n                    return true;\n\n                // For function expressions.\n                case SyntaxKind.FunctionKeyword:\n                    return true;\n            }\n\n            if (this.isIdentifier(this.currentToken())) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private parseExpressionStatement(): ExpressionStatementSyntax {\n            var expression = this.parseExpression(/*allowIn:*/ true);\n\n            var semicolon = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.expressionStatement(expression, semicolon);\n        }\n\n        private isIfStatement(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.IfKeyword;\n        }\n\n        private parseIfStatement(): IfStatementSyntax {\n            // Debug.assert(this.isIfStatement());\n\n            var ifKeyword = this.eatKeyword(SyntaxKind.IfKeyword);\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var condition = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var statement = this.parseStatement();\n\n            var elseClause: ElseClauseSyntax = null;\n            if (this.isElseClause()) {\n                elseClause = this.parseElseClause();\n            }\n\n            return this.factory.ifStatement(ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause);\n        }\n\n        private isElseClause(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.ElseKeyword;\n        }\n\n        private parseElseClause(): ElseClauseSyntax {\n            // Debug.assert(this.isElseClause());\n\n            var elseKeyword = this.eatKeyword(SyntaxKind.ElseKeyword);\n            var statement = this.parseStatement();\n\n            return this.factory.elseClause(elseKeyword, statement);\n        }\n\n        private isVariableStatement(): bool {\n            var index = this.modifierCount();\n            return this.peekToken(index).tokenKind === SyntaxKind.VarKeyword;\n        }\n\n        private parseVariableStatement(): VariableStatementSyntax {\n            // Debug.assert(this.isVariableStatement());\n\n            var modifiers = this.parseModifiers();\n            var variableDeclaration = this.parseVariableDeclaration(/*allowIn:*/ true);\n            var semicolonToken = this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n\n            return this.factory.variableStatement(modifiers, variableDeclaration, semicolonToken);\n        }\n\n        private parseVariableDeclaration(allowIn: bool): VariableDeclarationSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.VarKeyword);\n\n            var varKeyword = this.eatKeyword(SyntaxKind.VarKeyword);\n            // Debug.assert(varKeyword.fullWidth() > 0);\n\n            var listParsingState = allowIn\n                ? ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn\n                : ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn;\n\n            var result = this.parseSeparatedSyntaxList(listParsingState);\n            var variableDeclarators = result.list;\n            varKeyword = this.addSkippedTokensAfterToken(varKeyword, result.skippedTokens);\n\n            return this.factory.variableDeclaration(varKeyword, variableDeclarators);\n        }\n\n        private isVariableDeclarator(): bool {\n            if (this.currentNode() !== null && this.currentNode().kind() === SyntaxKind.VariableDeclarator) {\n                return true;\n            }\n\n            return this.isIdentifier(this.currentToken());\n        }\n\n        private canReuseVariableDeclaratorNode(node: ISyntaxNode) {\n            if (node === null || node.kind() !== SyntaxKind.VariableDeclarator) {\n                return false;\n            }\n\n            // Very subtle incremental parsing bug.  Consider the following code:\n            //\n            //      var v = new List < A, B\n            //\n            // This is actually legal code.  It\'s a list of variable declarators \"v = new List<A\" \n            // on one side and \"B\" on the other. If you then change that to:\n            //\n            //      var v = new List < A, B >()\n            // \n            // then we have a problem.  \"v = new List<A\" doesn\'t intersect the change range, so we\n            // start reparsing at \"B\" and we completely fail to handle this properly.\n            //\n            // In order to prevent this, we do not allow a variable declarator to be reused if it\n            // has an initializer.\n            var variableDeclarator = <VariableDeclaratorSyntax>node;\n            return variableDeclarator.equalsValueClause === null;\n        }\n\n        private parseVariableDeclarator(allowIn: bool, allowPropertyName: bool): VariableDeclaratorSyntax {\n            // TODO(cyrusn): What if the \'allowIn\' context has changed between when we last parsed \n            // and now?  We could end up with an incorrect tree.  For example, say we had in the old \n            // tree \"var i = a in b\".  Then, in the new tree the declarator portion moved into:\n            // \"for (var i = a in b\".  We would not want to reuse the declarator as the \"in b\" portion \n            // would need to be consumed by the for declaration instead.  Need to see if it is possible\n            // to hit this case.\n            if (this.canReuseVariableDeclaratorNode(this.currentNode())) {\n                return <VariableDeclaratorSyntax>this.eatNode();\n            }\n\n            var propertyName = allowPropertyName ? this.eatPropertyName() : this.eatIdentifierToken();\n            var equalsValueClause: EqualsValueClauseSyntax = null;\n            var typeAnnotation: TypeAnnotationSyntax = null;\n\n            if (propertyName.width() > 0) {\n                typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n\n                if (this.isEqualsValueClause(/*inParameter*/ false)) {\n                    equalsValueClause = this.parseEqualsValueClause(allowIn);\n                }\n            }\n\n            return this.factory.variableDeclarator(propertyName, typeAnnotation, equalsValueClause);\n        }\n\n        private isColonValueClause(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.ColonToken;\n        }\n\n        private isEqualsValueClause(inParameter: bool): bool {\n            var token0 = this.currentToken();\n            if (token0.tokenKind === SyntaxKind.EqualsToken) {\n                return true;\n            }\n\n            // It\'s not uncommon during typing for the user to miss writing the \'=\' token.  Check if\n            // there is no newline after the last token and if we\'re on an expression.  If so, parse\n            // this as an equals-value clause with a missing equals.\n            if (!this.previousToken().hasTrailingNewLine()) {\n\n                // The \'isExpression\' call below returns true for \"=>\".  That\'s because it smartly\n                // assumes that there is just a missing identifier and the user wanted a lambda.  \n                // While this is sensible, we don\'t want to allow that here as that would mean we\'re\n                // glossing over multiple erorrs and we\'re probably making things worse.  So don\'t\n                // treat this as an equals value clause and let higher up code handle things.\n                if (token0.tokenKind === SyntaxKind.EqualsGreaterThanToken) {\n                    return false;\n                }\n\n\n                // There are two places where we allow equals-value clauses.  The first is in a \n                // variable declarator.  The second is with a parameter.  For variable declarators\n                // it\'s more likely that a { would be a allowed (as an object literal).  While this\n                // is also allowed for parameters, the risk is that we consume the { as an object\n                // literal when it really will be for the block following the parameter.\n                if (token0.tokenKind === SyntaxKind.OpenBraceToken &&\n                    inParameter) {\n                    return false;\n                }\n\n                return this.isExpression();\n            }\n\n            return false;\n        }\n\n        private parseEqualsValueClause(allowIn: bool): EqualsValueClauseSyntax {\n            // Debug.assert(this.isEqualsValueClause());\n\n            var equalsToken = this.eatToken(SyntaxKind.EqualsToken);\n            var value = this.parseAssignmentExpression(allowIn);\n\n            return this.factory.equalsValueClause(equalsToken, value);\n        }\n\n        private parseExpression(allowIn: bool): IExpressionSyntax {\n            return this.parseSubExpression(0, allowIn);\n        }\n\n        // Called when you need to parse an expression, but you do not want to allow \'CommaExpressions\'.\n        // i.e. if you have \"var a = 1, b = 2\" then when we parse \'1\' we want to parse with higher \n        // precedence than \'comma\'.  Otherwise we\'ll get: \"var a = (1, (b = 2))\", instead of\n        // \"var a = (1), b = (2)\");\n        private parseAssignmentExpression(allowIn: bool): IExpressionSyntax {\n            return this.parseSubExpression(ExpressionPrecedence.AssignmentExpressionPrecedence, allowIn);\n        }\n\n        private parseUnaryExpression(): IUnaryExpressionSyntax {\n            var currentTokenKind = this.currentToken().tokenKind; \n            if (SyntaxFacts.isPrefixUnaryExpressionOperatorToken(currentTokenKind)) {\n                var operatorKind = SyntaxFacts.getPrefixUnaryExpressionFromOperatorToken(currentTokenKind);\n\n                var operatorToken = this.eatAnyToken();\n\n                var operand = this.parseUnaryExpression();\n                return this.factory.prefixUnaryExpression(operatorKind, operatorToken, operand);\n            }\n            else {\n                return this.parseTerm(/*allowInvocation*/ true);\n            }\n        }\n\n        private parseSubExpression(precedence: ExpressionPrecedence, allowIn: bool): IExpressionSyntax {\n            // Because unary expression have the highest precedence, we can always parse one, regardless \n            // of what precedence was passed in.\n            var leftOperand: IExpressionSyntax = this.parseUnaryExpression();\n            leftOperand = this.parseBinaryOrConditionalExpressions(precedence, allowIn, leftOperand);\n\n            return leftOperand;\n        }\n\n        private parseBinaryOrConditionalExpressions(precedence: number, allowIn: bool, leftOperand: IExpressionSyntax): IExpressionSyntax {\n            while (true) {\n                // We either have a binary operator here, or we\'re finished.\n                var token0 = this.currentToken();\n                var token0Kind = token0.tokenKind;\n\n                // Check for binary expressions.\n                if (SyntaxFacts.isBinaryExpressionOperatorToken(token0Kind)) {\n                    // also, if it\'s the \'in\' operator, only allow if our caller allows it.\n                    if (token0Kind === SyntaxKind.InKeyword && !allowIn) {\n                        break;\n                    }\n\n                    // check for >= or >> or >>= or >>> or >>>=.\n                    //\n                    // These are not created by the scanner since we want the individual > tokens for\n                    // generics.\n                    var mergedToken = this.tryMergeBinaryExpressionTokens();\n                    var tokenKind = mergedToken === null ? token0Kind : mergedToken.syntaxKind;\n\n                    var binaryExpressionKind = SyntaxFacts.getBinaryExpressionFromOperatorToken(tokenKind);\n                    var newPrecedence = ParserImpl.getPrecedence(binaryExpressionKind);\n\n                    // All binary operators must have precedence > 0!\n                    // Debug.assert(newPrecedence > 0);\n\n                    // Check the precedence to see if we should \"take\" this operator\n                    if (newPrecedence < precedence) {\n                        break;\n                    }\n\n                    // Same precedence, but not right-associative -- deal with this higher up in our stack \"later\"\n                    if (newPrecedence === precedence && !this.isRightAssociative(binaryExpressionKind)) {\n                        break;\n                    }\n\n                    // Precedence is okay, so we\'ll \"take\" this operator.  If we have a merged token, \n                    // then create a new synthesized token with all the operators combined.  In that \n                    // case make sure it has the right trivia associated with it.\n                    var operatorToken = mergedToken === null\n                        ? token0\n                        : Syntax.token(mergedToken.syntaxKind)\n                                .withLeadingTrivia(token0.leadingTrivia())\n                                .withTrailingTrivia(this.peekToken(mergedToken.tokenCount - 1).trailingTrivia());\n\n                    // Now skip the operator token we\'re on, or the tokens we merged.\n                    var skipCount = mergedToken === null ? 1 : mergedToken.tokenCount;\n                    for (var i = 0; i < skipCount; i++) {\n                        this.eatAnyToken();\n                    }\n\n                    leftOperand = this.factory.binaryExpression(\n                        binaryExpressionKind, leftOperand, operatorToken, this.parseSubExpression(newPrecedence, allowIn));\n                    continue;\n                }\n\n                // Now check for conditional expression.\n                // Only consume this as a ternary expression if our precedence is higher than the ternary \n                // level.  i.e. if we have \"!f ? a : b\" then we would not want to \n                // consume the \"?\" as part of \"f\" because the precedence of \"!\" is far too high.  However,\n                // if we have: \"x = f ? a : b\", then we would want to consume the \"?\" as part of \"f\".\n                //\n                // Note: if we have \"m = f ? x ? y : z : b, then we do want the second \"?\" to go with \'x\'.\n                if (token0Kind === SyntaxKind.QuestionToken && precedence <= ExpressionPrecedence.ConditionalExpressionPrecedence) {\n                    var questionToken = this.eatToken(SyntaxKind.QuestionToken);\n\n                    var whenTrueExpression = this.parseAssignmentExpression(allowIn);\n                    var colon = this.eatToken(SyntaxKind.ColonToken);\n\n                    var whenFalseExpression = this.parseAssignmentExpression(allowIn);\n                    leftOperand = this.factory.conditionalExpression(\n                        leftOperand, questionToken, whenTrueExpression, colon, whenFalseExpression);\n                    continue;\n                }\n\n                // Not binary or ternary.  Nothing more to consume here.\n                break;\n            }\n\n            return leftOperand;\n        }\n\n        private mergeTokensStorage: SyntaxKind[] = [];\n\n        private tryMergeBinaryExpressionTokens(): { tokenCount: number; syntaxKind: SyntaxKind; } {\n            var token0 = this.currentToken();\n\n            // Only merge if we have a \'>\' token with no trailing trivia.\n            if (token0.tokenKind === SyntaxKind.GreaterThanToken && !token0.hasTrailingTrivia()) {\n                var storage = this.mergeTokensStorage;\n                storage[0] = SyntaxKind.None;\n                storage[1] = SyntaxKind.None;\n                storage[2] = SyntaxKind.None;\n\n                for (var i = 0; i < storage.length; i++) {\n                    var nextToken = this.peekToken(i + 1);\n\n                    // We can merge with the next token if it doesn\'t have any leading trivia.\n                    if (!nextToken.hasLeadingTrivia()) {\n                        storage[i] = nextToken.tokenKind;\n                    }\n\n                    // Stop merging additional tokens if this token has any trailing trivia.\n                    if (nextToken.hasTrailingTrivia()) {\n                        break;\n                    }\n                }\n\n                if (storage[0] === SyntaxKind.GreaterThanToken) {\n                    if (storage[1] === SyntaxKind.GreaterThanToken) {\n                        if (storage[2] === SyntaxKind.EqualsToken) {\n                            // >>>=\n                            return { tokenCount: 4, syntaxKind: SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken };\n                        }\n                        else {\n                            // >>>\n                            return { tokenCount: 3, syntaxKind: SyntaxKind.GreaterThanGreaterThanGreaterThanToken };\n                        }\n                    }\n                    else if (storage[1] === SyntaxKind.EqualsToken) {\n                        // >>=\n                        return { tokenCount: 3, syntaxKind: SyntaxKind.GreaterThanGreaterThanEqualsToken };\n                    }\n                    else {\n                        // >>\n                        return { tokenCount: 2, syntaxKind: SyntaxKind.GreaterThanGreaterThanToken };\n                    }\n                }\n                else if (storage[0] === SyntaxKind.EqualsToken) {\n                    // >=\n                    return { tokenCount: 2, syntaxKind: SyntaxKind.GreaterThanEqualsToken };\n                }\n            }\n\n            // Just use the normal logic as we\'re not merging the \'>\' with anything.\n            return null;\n        }\n\n        private isRightAssociative(expressionKind: SyntaxKind): bool {\n            switch (expressionKind) {\n                case SyntaxKind.AssignmentExpression:\n                case SyntaxKind.AddAssignmentExpression:\n                case SyntaxKind.SubtractAssignmentExpression:\n                case SyntaxKind.MultiplyAssignmentExpression:\n                case SyntaxKind.DivideAssignmentExpression:\n                case SyntaxKind.ModuloAssignmentExpression:\n                case SyntaxKind.AndAssignmentExpression:\n                case SyntaxKind.ExclusiveOrAssignmentExpression:\n                case SyntaxKind.OrAssignmentExpression:\n                case SyntaxKind.LeftShiftAssignmentExpression:\n                case SyntaxKind.SignedRightShiftAssignmentExpression:\n                case SyntaxKind.UnsignedRightShiftAssignmentExpression:\n                    return true;\n                default:\n                    return false;\n            }\n        }\n\n        private parseTerm(allowInvocation: bool): IUnaryExpressionSyntax {\n            // NOTE: allowInvocation and insideObjectCreation are always the negation of the other.\n            // We could remove one of them and just use the other.  However, i think this is much\n            // easier to read and understand in this form.\n\n            var term = this.parseTermWorker();\n            if (term === null) {\n                // Nothing else worked, just try to consume an identifier so we report an error.\n                return this.eatIdentifierToken();\n            }\n\n            return this.parsePostFixExpression(term, allowInvocation);\n        }\n\n        private parsePostFixExpression(expression: IUnaryExpressionSyntax, allowInvocation: bool): IUnaryExpressionSyntax {\n            while (true) {\n                var currentTokenKind = this.currentToken().tokenKind;\n                switch (currentTokenKind) {\n                    case SyntaxKind.OpenParenToken:\n                        if (!allowInvocation) {\n                            return expression;\n                        }\n\n                        expression = this.factory.invocationExpression(expression, this.parseArgumentList(/*typeArgumentList:*/ null));\n                        continue;\n\n                    case SyntaxKind.LessThanToken:\n                        if (!allowInvocation) {\n                            return expression;\n                        }\n\n                        // See if this is the start of a generic invocation.  If so, consume it and\n                        // keep checking for postfix expressions.  Otherwise, it\'s just a \'<\' that\'s \n                        // part of an arithmetic expression.  Break out so we consume it higher in the\n                        // stack.\n                        var argumentList = this.tryParseArgumentList();\n                        if (argumentList !== null) {\n                            expression = this.factory.invocationExpression(expression, argumentList);\n                            continue;\n                        }\n\n                        break;\n\n                    case SyntaxKind.OpenBracketToken:\n                        expression = this.parseElementAccessExpression(expression);\n                        continue;\n\n                    case SyntaxKind.PlusPlusToken:\n                    case SyntaxKind.MinusMinusToken:\n                        // Because of automatic semicolon insertion, we should only consume the ++ or -- \n                        // if it is on the same line as the previous token.\n                        if (this.previousToken() !== null && this.previousToken().hasTrailingNewLine()) {\n                            break;\n                        }\n\n                        expression = this.factory.postfixUnaryExpression(\n                            SyntaxFacts.getPostfixUnaryExpressionFromOperatorToken(currentTokenKind), expression, this.eatAnyToken());\n                        continue;\n\n                    case SyntaxKind.DotToken:\n                        expression = this.factory.memberAccessExpression(\n                            expression, this.eatToken(SyntaxKind.DotToken), this.eatIdentifierNameToken());\n                        continue;\n                }\n\n                return expression;\n            }\n        }\n\n        private tryParseArgumentList(): ArgumentListSyntax {\n            var typeArgumentList: TypeArgumentListSyntax = null;\n\n            if (this.currentToken().tokenKind === SyntaxKind.LessThanToken) {\n                // If we have a \'<\', then only parse this as a arugment list if the type arguments\n                // are complete and we have an open paren.  if we don\'t, rewind and return nothing.\n                var rewindPoint = this.getRewindPoint();\n                try {\n                    typeArgumentList = this.tryParseTypeArgumentList(/*inExpression:*/ true);\n                    if (typeArgumentList === null || this.currentToken().tokenKind !== SyntaxKind.OpenParenToken) {\n                        this.rewind(rewindPoint);\n                        return null;\n                    }\n                }\n                finally {\n                    this.releaseRewindPoint(rewindPoint);\n                }\n            }\n\n            if (this.currentToken().tokenKind === SyntaxKind.OpenParenToken) {\n                return this.parseArgumentList(typeArgumentList);\n            }\n\n            return null;\n        }\n\n        private parseArgumentList(typeArgumentList: TypeArgumentListSyntax): ArgumentListSyntax {\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var arguments = Syntax.emptySeparatedList;\n\n            if (openParenToken.fullWidth() > 0) {\n                var result = this.parseSeparatedSyntaxList(ListParsingState.ArgumentList_AssignmentExpressions);\n                arguments = result.list;\n                openParenToken = this.addSkippedTokensAfterToken(openParenToken, result.skippedTokens);\n            }\n\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n\n            return this.factory.argumentList(typeArgumentList, openParenToken, arguments, closeParenToken);\n        }\n\n        private parseElementAccessExpression(expression: IExpressionSyntax): ElementAccessExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.OpenBracketToken);\n\n            var openBracketToken = this.eatToken(SyntaxKind.OpenBracketToken);\n            var argumentExpression = this.parseExpression(/*allowIn:*/ true);\n            var closeBracketToken = this.eatToken(SyntaxKind.CloseBracketToken);\n\n            return this.factory.elementAccessExpression(expression, openBracketToken, argumentExpression, closeBracketToken);\n        }\n\n        private parseTermWorker(): IUnaryExpressionSyntax {\n            var currentToken = this.currentToken();\n\n            // ERROR RECOVERY TWEAK:\n            // If we see a standalone => try to parse it as an arrow function as that\'s likely what\n            // the user intended to write.\n            if (currentToken.tokenKind === SyntaxKind.EqualsGreaterThanToken) {\n                return this.parseSimpleArrowFunctionExpression();\n            }\n\n            if (this.isIdentifier(currentToken)) {\n                if (this.isSimpleArrowFunctionExpression()) {\n                    return this.parseSimpleArrowFunctionExpression();\n                }\n                else {\n                    var identifier = this.eatIdentifierToken();\n                    return identifier;\n                }\n            }\n\n            var currentTokenKind = currentToken.tokenKind;\n            switch (currentTokenKind) {\n                case SyntaxKind.ThisKeyword:\n                    return this.parseThisExpression();\n\n                case SyntaxKind.TrueKeyword:\n                case SyntaxKind.FalseKeyword:\n                    return this.parseLiteralExpression();\n\n                case SyntaxKind.NullKeyword:\n                    return this.parseLiteralExpression();\n\n                case SyntaxKind.NewKeyword:\n                    return this.parseObjectCreationExpression();\n\n                case SyntaxKind.FunctionKeyword:\n                    return this.parseFunctionExpression();\n\n                case SyntaxKind.SuperKeyword:\n                    return this.parseSuperExpression();\n\n                case SyntaxKind.TypeOfKeyword:\n                    return this.parseTypeOfExpression();\n\n                case SyntaxKind.DeleteKeyword:\n                    return this.parseDeleteExpression();\n\n                case SyntaxKind.VoidKeyword:\n                    return this.parseVoidExpression();\n\n                case SyntaxKind.NumericLiteral:\n                    return this.parseLiteralExpression();\n\n                case SyntaxKind.RegularExpressionLiteral:\n                    return this.parseLiteralExpression();\n\n                case SyntaxKind.StringLiteral:\n                    return this.parseLiteralExpression();\n\n                case SyntaxKind.OpenBracketToken:\n                    return this.parseArrayLiteralExpression();\n\n                case SyntaxKind.OpenBraceToken:\n                    return this.parseObjectLiteralExpression();\n\n                case SyntaxKind.OpenParenToken:\n                    return this.parseParenthesizedOrArrowFunctionExpression();\n\n                case SyntaxKind.LessThanToken:\n                    return this.parseCastOrArrowFunctionExpression();\n\n                case SyntaxKind.SlashToken:\n                case SyntaxKind.SlashEqualsToken:\n                    // If we see a standalone / or /= and we\'re expecting a term, then try to reparse\n                    // it as a regular expression.  If we succeed, then return that.  Otherwise, fall\n                    // back and just return a missing identifier as usual.  We\'ll then form a binary\n                    // expression out of of the / as usual.\n                    var result = this.tryReparseDivideAsRegularExpression();\n                    if (result !== null) {\n                        return result;\n                    }\n                    break;\n            }\n\n            // Wasn\'t able to parse this as a term. \n            return null;\n        }\n\n        private tryReparseDivideAsRegularExpression(): IUnaryExpressionSyntax {\n            // If we see a / or /= token, then that may actually be the start of a regex in certain \n            // contexts.\n\n            var currentToken = this.currentToken();\n            // Debug.assert(SyntaxFacts.isAnyDivideToken(currentToken.tokenKind));\n\n            // There are several contexts where we could never see a regex.  Don\'t even bother \n            // reinterpretting the / in these contexts.\n            if (this.previousToken() !== null) {\n                var previousTokenKind = this.previousToken().tokenKind;\n                switch (previousTokenKind) {\n                    case SyntaxKind.IdentifierName:\n                        // Regular expressions can\'t follow identifiers.\n                        return null;\n\n                    // Regexs also can\'t follow certain keywords:\n                    case SyntaxKind.ThisKeyword:\n                    case SyntaxKind.TrueKeyword:\n                    case SyntaxKind.FalseKeyword:\n                        return null;\n\n                    // A regular expression could follow other keywords.  i.e. \"return /blah/;\"\n                    // TODO: be more specific about the keywords that a regex could follow.\n\n                    case SyntaxKind.StringLiteral:\n                    case SyntaxKind.NumericLiteral:\n                    case SyntaxKind.RegularExpressionLiteral:\n                    case SyntaxKind.PlusPlusToken:\n                    case SyntaxKind.MinusMinusToken:\n                    case SyntaxKind.CloseBracketToken:\n                    case SyntaxKind.CloseBraceToken:\n                        // A regular expression can\'t follow any of these.  It must be a divide. Note: this\n                        // list *may* be incorrect (especially in the context of typescript).  We need to\n                        // carefully review it.\n                        return null;\n\n                    // case SyntaxKind.CloseParenToken:\n                    // It is tempting to say that if we have a slash after a close paren that it can\'t be \n                    // a regular expression.  after all, the normal case where we see that is \"(1 + 2) / 3\".\n                    // However, it can appear in legal code.  Specifically:\n                    //\n                    //      for (...)\n                    //          /regex/.Stuff...\n                    //\n                    // So we have to see if we can get a regular expression in that case.\n                }\n            }\n\n            // Ok, from our quick lexical check, this could be a place where a regular expression could\n            // go.  Now we have to do a bunch of work.  Ask the source to retrive the token at the \n            // current position again.  But this time allow it to retrieve it as a regular expression.\n            currentToken = this.currentTokenAllowingRegularExpression();\n\n            // Note: we *must* have gotten a /, /= or regular expression.  Or else something went *very*\n            // wrong with our logic above.\n            // Debug.assert(SyntaxFacts.isAnyDivideOrRegularExpressionToken(currentToken.tokenKind));\n\n            if (currentToken.tokenKind === SyntaxKind.SlashToken || currentToken.tokenKind === SyntaxKind.SlashEqualsToken) {\n                // Still came back as a / or /=.   This is not a regular expression literal.\n                return null;\n            }\n            else if (currentToken.tokenKind === SyntaxKind.RegularExpressionLiteral) {\n                return this.parseLiteralExpression();\n            }\n            else {\n                // Something *very* wrong happened.  This is an internal parser fault that we need \n                // to figure out and fix.\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private parseTypeOfExpression(): TypeOfExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.TypeOfKeyword);\n\n            var typeOfKeyword = this.eatKeyword(SyntaxKind.TypeOfKeyword);\n            var expression = this.parseUnaryExpression();\n\n            return this.factory.typeOfExpression(typeOfKeyword, expression);\n        }\n\n        private parseDeleteExpression(): DeleteExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.DeleteKeyword);\n\n            var deleteKeyword = this.eatKeyword(SyntaxKind.DeleteKeyword);\n            var expression = this.parseUnaryExpression();\n\n            return this.factory.deleteExpression(deleteKeyword, expression);\n        }\n\n        private parseVoidExpression(): VoidExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.VoidKeyword);\n\n            var voidKeyword = this.eatKeyword(SyntaxKind.VoidKeyword);\n            var expression = this.parseUnaryExpression();\n\n            return this.factory.voidExpression(voidKeyword, expression);\n        }\n\n        private parseSuperExpression(): IUnaryExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.SuperKeyword);\n\n            var superKeyword = this.eatKeyword(SyntaxKind.SuperKeyword);\n            return superKeyword;\n        }\n\n        private parseFunctionExpression(): FunctionExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.FunctionKeyword);\n\n            var functionKeyword = this.eatKeyword(SyntaxKind.FunctionKeyword);\n            var identifier: ISyntaxToken = null;\n\n            if (this.isIdentifier(this.currentToken())) {\n                identifier = this.eatIdentifierToken();\n            }\n\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ false);\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ true);\n\n            return this.factory.functionExpression(functionKeyword, identifier, callSignature, block);\n        }\n\n        private parseObjectCreationExpression(): ObjectCreationExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.NewKeyword);\n            var newKeyword = this.eatKeyword(SyntaxKind.NewKeyword);\n\n            // While parsing the sub term we don\'t want to allow invocations to be parsed.  that\'s because\n            // we want \"new Foo()\" to parse as \"new Foo()\" (one node), not \"new (Foo())\".\n            var expression = this.parseTerm(/*allowInvocation:*/ false);\n            var argumentList = this.tryParseArgumentList();\n\n            return this.factory.objectCreationExpression(newKeyword, expression, argumentList);\n        }\n\n        private parseCastOrArrowFunctionExpression(): IUnaryExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.LessThanToken);\n\n            // We\'ve got a \'<\'.  that could start a cast or an arrow function.  As it is highly\n            // ambiguous, we need to check for enough data to indicate that\'s it\'s an arrow \n            // function.  Otherwise, we assume it\'s a cast.\n            var rewindPoint = this.getRewindPoint();\n            try {\n                var arrowFunction = this.tryParseArrowFunctionExpression();\n                if (arrowFunction !== null) {\n                    return arrowFunction;\n                }\n\n                // wasn\'t an arrow function.  Try again as a cast expression.\n                this.rewind(rewindPoint);\n                return this.parseCastExpression();\n            }\n            finally {\n                this.releaseRewindPoint(rewindPoint);\n            }\n        }\n        \n        private parseCastExpression(): CastExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.LessThanToken);\n\n            var lessThanToken = this.eatToken(SyntaxKind.LessThanToken);\n            var type = this.parseType();\n            var greaterThanToken = this.eatToken(SyntaxKind.GreaterThanToken);\n            var expression = this.parseUnaryExpression();\n\n            return this.factory.castExpression(lessThanToken, type, greaterThanToken, expression);\n        }\n\n        private parseParenthesizedOrArrowFunctionExpression(): IUnaryExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.OpenParenToken);\n\n            var result = this.tryParseArrowFunctionExpression();\n            if (result !== null) {\n                return result;\n            }\n\n            // Doesn\'t look like an arrow function, so parse this as a parenthesized expression.\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var expression = this.parseExpression(/*allowIn:*/ true);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n\n            return this.factory.parenthesizedExpression(openParenToken, expression, closeParenToken);\n        }\n\n        private tryParseArrowFunctionExpression(): ArrowFunctionExpressionSyntax {\n            var tokenKind = this.currentToken().tokenKind;\n            // Debug.assert(tokenKind === SyntaxKind.OpenParenToken || tokenKind === SyntaxKind.LessThanToken);\n\n            // Because arrow functions and parenthesized expressions look similar, we have to check far\n            // enough ahead to be sure we\'ve actually got an arrow function. For example, both nodes can\n            // start with:\n            //    (a = b, c = d, ..., e = f).\n            //So we effectively need infinite lookahead to decide which node we\'re in.\n            //\n            // First, check for things that definitely have enough information to let us know it\'s an\n            // arrow function.\n\n            if (this.isDefinitelyArrowFunctionExpression()) {\n                // We have something like \"() =>\" or \"(a) =>\".  Definitely a lambda, so parse it\n                // unilaterally as such.\n                return this.parseParenthesizedArrowFunctionExpression(/*requiresArrow:*/ false);\n            }\n\n            // Now, look for cases where we\'re sure it\'s not an arrow function.  This will help save us\n            // a costly parse.\n            if (!this.isPossiblyArrowFunctionExpression()) {\n                return null;\n            }\n\n            // Then, try to actually parse it as a arrow function, and only return if we see an => \n            var rewindPoint = this.getRewindPoint();\n            try {\n                var arrowFunction = this.parseParenthesizedArrowFunctionExpression(/*requiresArrow:*/ true);\n                if (arrowFunction === null) {\n                    this.rewind(rewindPoint);\n                }\n                return arrowFunction;\n            }\n            finally {\n                this.releaseRewindPoint(rewindPoint);\n            }\n        }\n\n        private parseParenthesizedArrowFunctionExpression(requireArrow: bool): ParenthesizedArrowFunctionExpressionSyntax {\n            var currentToken = this.currentToken();\n            // Debug.assert(currentToken.tokenKind === SyntaxKind.OpenParenToken || currentToken.tokenKind === SyntaxKind.LessThanToken);\n\n            var callSignature = this.parseCallSignature(/*requireCompleteTypeParameterList:*/ true);\n\n            if (requireArrow && this.currentToken().tokenKind !== SyntaxKind.EqualsGreaterThanToken) {\n                return null;\n            }\n\n            var equalsGreaterThanToken = this.eatToken(SyntaxKind.EqualsGreaterThanToken);\n            var body = this.parseArrowFunctionBody();\n\n            return this.factory.parenthesizedArrowFunctionExpression(callSignature, equalsGreaterThanToken, body);\n        }\n\n        private parseArrowFunctionBody(): ISyntaxNodeOrToken {\n            if (this.isBlock()) {\n                return this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ false);\n            }\n            else {\n                return this.parseAssignmentExpression(/*allowIn:*/ true);\n            }\n        }\n\n        private isSimpleArrowFunctionExpression(): bool {\n            // ERROR RECOVERY TWEAK:\n            if (this.currentToken().tokenKind === SyntaxKind.EqualsGreaterThanToken) {\n                return true;\n            }\n\n            return this.isIdentifier(this.currentToken()) &&\n                   this.peekToken(1).tokenKind === SyntaxKind.EqualsGreaterThanToken;\n        }\n\n        private parseSimpleArrowFunctionExpression(): SimpleArrowFunctionExpressionSyntax {\n            // Debug.assert(this.isSimpleArrowFunctionExpression());\n\n            var identifier = this.eatIdentifierToken();\n            var equalsGreaterThanToken = this.eatToken(SyntaxKind.EqualsGreaterThanToken);\n            var body = this.parseArrowFunctionBody();\n\n            return this.factory.simpleArrowFunctionExpression(\n                identifier, equalsGreaterThanToken, body);\n        }\n\n        private isBlock(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.OpenBraceToken;\n        }\n\n        private isDefinitelyArrowFunctionExpression(): bool {\n            var token0 = this.currentToken();\n            if (token0.tokenKind !== SyntaxKind.OpenParenToken) {\n                // If it didn\'t start with an (, then it could be generic.  That\'s too complicated \n                // and we can\'t say it\'s \'definitely\' an arrow function.             \n                return false;\n            }\n\n            var token1 = this.peekToken(1);\n            var token2: ISyntaxToken;\n\n            if (token1.tokenKind === SyntaxKind.CloseParenToken) {\n                // ()\n                // Definitely an arrow function.  Could never be a parenthesized expression.  \n                // *However*, because of error situations, we could end up with things like \"().foo\".\n                // In this case, we don\'t want to think of this as the start of an arrow function.\n                // To prevent this, we are a little stricter, and we require that we at least see:\n                //      \"():\"  or  \"() =>\"  or \"() {}\".  Note: the last one is illegal.  However it\n                // most likely is a missing => and not a parenthesized expression.\n                token2 = this.peekToken(2);\n                return token2.tokenKind === SyntaxKind.ColonToken ||\n                       token2.tokenKind === SyntaxKind.EqualsGreaterThanToken ||\n                       token2.tokenKind === SyntaxKind.OpenBraceToken;\n            }\n\n            if (token1.tokenKind === SyntaxKind.DotDotDotToken) {\n                // (...\n                // Definitely an arrow function.  Could never be a parenthesized expression.\n                return true;\n            }\n\n            if (!this.isIdentifier(token1)) {\n                // All other arrow functions must start with (id\n                // so this is definitely not an arrow function.\n                return false;\n            }\n\n            // (id\n            //\n            // Lots of options here.  Check for things that make us certain it\'s an\n            // arrow function.\n            token2 = this.peekToken(2);\n            if (token2.tokenKind === SyntaxKind.ColonToken) {\n                // (id:\n                // Definitely an arrow function.  Could never be a parenthesized expression.\n                return true;\n            }\n\n            var token3 = this.peekToken(3);\n            if (token2.tokenKind === SyntaxKind.QuestionToken) {\n                // (id?\n                // Could be an arrow function, or a parenthesized conditional expression.\n\n                // Check for the things that could only be arrow functions.\n                if (token3.tokenKind === SyntaxKind.ColonToken ||\n                    token3.tokenKind === SyntaxKind.CloseParenToken ||\n                    token3.tokenKind === SyntaxKind.CommaToken) {\n                    // (id?:\n                    // (id?)\n                    // (id?,\n                    // These are the only cases where this could be an arrow function.\n                    // And none of them can be parenthesized expression.\n                    return true;\n                }\n            }\n\n            if (token2.tokenKind === SyntaxKind.CloseParenToken) {\n                // (id)\n                // Could be an arrow function, or a parenthesized conditional expression.\n\n                if (token3.tokenKind === SyntaxKind.EqualsGreaterThanToken) {\n                    // (id) =>\n                    // Definitely an arrow function.  Could not be a parenthesized expression.\n                    return true;\n                }\n\n                // Note: \"(id):\" *looks* like it could be an arrow function.  However, it could\n                // show up in:  \"foo ? (id): \n                // So we can\'t return true here for that case.\n            }\n\n            // TODO: Add more cases if you\'re sure that there is enough information to know to \n            // parse this as an arrow function.  Note: be very careful here.\n\n            // Anything else wasn\'t clear enough.  Try to parse the expression as an arrow function and bail out\n            // if we fail.\n            return false;\n        }\n\n        private isPossiblyArrowFunctionExpression(): bool {\n            var token0 = this.currentToken();\n            if (token0.tokenKind !== SyntaxKind.OpenParenToken) {\n                // If it didn\'t start with an (, then it could be generic.  That\'s too complicated \n                // and we have to say it\'s possibly an arrow function.\n                return true;\n            }\n\n            var token1 = this.peekToken(1);\n\n            if (!this.isIdentifier(token1)) {\n                // All other arrow functions must start with (id\n                // so this is definitely not an arrow function.\n                return false;\n            }\n\n            var token2 = this.peekToken(2);\n            if (token2.tokenKind === SyntaxKind.EqualsToken) {\n                // (id =\n                //\n                // This *could* be an arrow function.  i.e. (id = 0) => { }\n                // Or it could be a parenthesized expression.  So we\'ll have to actually\n                // try to parse it.\n                return true;\n            }\n\n            if (token2.tokenKind === SyntaxKind.CommaToken) {\n                // (id,\n\n                // This *could* be an arrow function.  i.e. (id, id2) => { }\n                // Or it could be a parenthesized expression (as javascript supports\n                // the comma operator).  So we\'ll have to actually try to parse it.\n                return true;\n            }\n\n            if (token2.tokenKind === SyntaxKind.CloseParenToken) {\n                // (id)\n\n                var token3 = this.peekToken(3);\n                if (token3.tokenKind === SyntaxKind.ColonToken) {\n                    // (id):\n                    //\n                    // This could be an arrow function. i.e. (id): number => { }\n                    // Or it could be parenthesized exprssion: foo ? (id) :\n                    // So we\'ll have to actually try to parse it.\n                    return true;\n                }\n            }\n\n            // Nothing else could be an arrow function.\n            return false;\n        }\n\n        private parseObjectLiteralExpression(): ObjectLiteralExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.OpenBraceToken);\n\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n            // Debug.assert(openBraceToken.fullWidth() > 0);\n\n            var result = this.parseSeparatedSyntaxList(ListParsingState.ObjectLiteralExpression_PropertyAssignments);\n            var propertyAssignments = result.list;\n            openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n\n            return this.factory.objectLiteralExpression(\n                openBraceToken, propertyAssignments, closeBraceToken);\n        }\n\n        private parsePropertyAssignment(): PropertyAssignmentSyntax {\n            // Debug.assert(this.isPropertyAssignment(/*inErrorRecovery:*/ false));\n\n            if (this.isGetAccessorPropertyAssignment(/*inErrorRecovery:*/ false)) {\n                return this.parseGetAccessorPropertyAssignment();\n            }\n            else if (this.isSetAccessorPropertyAssignment(/*inErrorRecovery:*/ false)) {\n                return this.parseSetAccessorPropertyAssignment();\n            }\n            else if (this.isSimplePropertyAssignment(/*inErrorRecovery:*/ false)) {\n                return this.parseSimplePropertyAssignment();\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private isPropertyAssignment(inErrorRecovery: bool): bool {\n            return this.isGetAccessorPropertyAssignment(inErrorRecovery) ||\n                   this.isSetAccessorPropertyAssignment(inErrorRecovery) ||\n                   this.isSimplePropertyAssignment(inErrorRecovery);\n        }\n\n        private isGetAccessorPropertyAssignment(inErrorRecovery: bool): bool {\n            return this.currentToken().tokenKind === SyntaxKind.GetKeyword &&\n                   this.isPropertyName(this.peekToken(1), inErrorRecovery);\n        }\n\n        private parseGetAccessorPropertyAssignment(): GetAccessorPropertyAssignmentSyntax {\n            // Debug.assert(this.isGetAccessorPropertyAssignment());\n\n            var getKeyword = this.eatKeyword(SyntaxKind.GetKeyword);\n            var propertyName = this.eatPropertyName();\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ true);\n\n            return this.factory.getAccessorPropertyAssignment(getKeyword, propertyName, openParenToken, closeParenToken, typeAnnotation, block);\n        }\n\n        private isSetAccessorPropertyAssignment(inErrorRecovery: bool): bool {\n            return this.currentToken().tokenKind === SyntaxKind.SetKeyword &&\n                   this.isPropertyName(this.peekToken(1), inErrorRecovery);\n        }\n\n        private parseSetAccessorPropertyAssignment(): SetAccessorPropertyAssignmentSyntax {\n            // Debug.assert(this.isSetAccessorPropertyAssignment());\n\n            var setKeyword = this.eatKeyword(SyntaxKind.SetKeyword);\n            var propertyName = this.eatPropertyName();\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var parameter = this.parseParameter();\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            var block = this.parseBlock(/*parseStatementsEvenWithNoOpenBrace:*/ false, /*checkForStrictMode:*/ true);\n\n            return this.factory.setAccessorPropertyAssignment(setKeyword, propertyName, openParenToken, parameter, closeParenToken, block);\n        }\n\n        private isSimplePropertyAssignment(inErrorRecovery: bool): bool {\n            return this.isPropertyName(this.currentToken(), inErrorRecovery);\n        }\n\n        private eatPropertyName(): ISyntaxToken {\n            return SyntaxFacts.isIdentifierNameOrAnyKeyword(this.currentToken())\n                ? this.eatIdentifierNameToken()\n                : this.eatAnyToken();\n        }\n\n        private parseSimplePropertyAssignment(): SimplePropertyAssignmentSyntax {\n            // Debug.assert(this.isSimplePropertyAssignment(/*inErrorRecovery:*/ false));\n\n            var propertyName = this.eatPropertyName();\n            var colonToken = this.eatToken(SyntaxKind.ColonToken);\n            var expression = this.parseAssignmentExpression(/*allowIn:*/ true);\n\n            return this.factory.simplePropertyAssignment(propertyName, colonToken, expression);\n        }\n\n        private isPropertyName(token: ISyntaxToken, inErrorRecovery: bool): bool {\n            // NOTE: we do *not* want to check \"this.isIdentifier\" here.  Any IdentifierName is \n            // allowed here, even reserved words like keywords.\n            if (SyntaxFacts.isIdentifierNameOrAnyKeyword(token)) {\n                // Except: if we\'re in error recovery, then we don\'t want to consider keywords. \n                // After all, if we have:\n                //\n                //      { a: 1\n                //      return\n                //\n                // we don\'t want consider \'return\' to be the next property in the object literal.\n                if (inErrorRecovery) {\n                    return this.isIdentifier(token);\n                }\n                else {\n                    return true;\n                }\n            }\n\n            switch (token.tokenKind) {\n                case SyntaxKind.StringLiteral:\n                case SyntaxKind.NumericLiteral:\n                    return true;\n\n                default:\n                    return false;\n            }\n        }\n\n        private parseArrayLiteralExpression(): ArrayLiteralExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.OpenBracketToken);\n\n            var openBracketToken = this.eatToken(SyntaxKind.OpenBracketToken);\n            // Debug.assert(openBracketToken.fullWidth() > 0);\n\n            var result = this.parseSeparatedSyntaxList(ListParsingState.ArrayLiteralExpression_AssignmentExpressions);\n            var expressions = result.list;\n            openBracketToken = this.addSkippedTokensAfterToken(openBracketToken, result.skippedTokens);\n\n            var closeBracketToken = this.eatToken(SyntaxKind.CloseBracketToken);\n\n            return this.factory.arrayLiteralExpression(openBracketToken, expressions, closeBracketToken);\n        }\n\n        private parseLiteralExpression(): IUnaryExpressionSyntax {\n            // TODO: add appropriate asserts here.\n            return this.eatAnyToken();\n        }\n\n        private parseThisExpression(): IUnaryExpressionSyntax {\n            // Debug.assert(this.currentToken().tokenKind === SyntaxKind.ThisKeyword);\n            var thisKeyword = this.eatKeyword(SyntaxKind.ThisKeyword);\n            return thisKeyword;\n        }\n\n        private parseBlock(parseBlockEvenWithNoOpenBrace: bool, checkForStrictMode: bool): BlockSyntax {\n            var openBraceToken = this.eatToken(SyntaxKind.OpenBraceToken);\n\n            var statements: ISyntaxList = Syntax.emptyList;\n\n            if (parseBlockEvenWithNoOpenBrace || openBraceToken.width() > 0) {\n                var savedIsInStrictMode = this.isInStrictMode;\n                \n                var processItems = checkForStrictMode ? ParserImpl.updateStrictModeState : null;\n                var result = this.parseSyntaxList(ListParsingState.Block_Statements, processItems);\n                statements = result.list;\n                openBraceToken = this.addSkippedTokensAfterToken(openBraceToken, result.skippedTokens);\n\n                this.setStrictMode(savedIsInStrictMode);\n            }\n\n            var closeBraceToken = this.eatToken(SyntaxKind.CloseBraceToken);\n\n            return this.factory.block(openBraceToken, statements, closeBraceToken);\n        }\n\n        private parseCallSignature(requireCompleteTypeParameterList: bool): CallSignatureSyntax {\n            var typeParameterList = this.parseOptionalTypeParameterList(requireCompleteTypeParameterList);\n            var parameterList = this.parseParameterList();\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ false);\n\n            return this.factory.callSignature(typeParameterList, parameterList, typeAnnotation);\n        }\n\n        private parseOptionalTypeParameterList(requireCompleteTypeParameterList: bool): TypeParameterListSyntax {\n            if (this.currentToken().tokenKind !== SyntaxKind.LessThanToken) {\n                return null;\n            }\n\n            var rewindPoint = this.getRewindPoint();\n            try {\n                var lessThanToken = this.eatToken(SyntaxKind.LessThanToken);\n                // Debug.assert(lessThanToken.fullWidth() > 0);\n                \n                var result = this.parseSeparatedSyntaxList(ListParsingState.TypeParameterList_TypeParameters);\n                var typeParameterList = result.list;\n                lessThanToken = this.addSkippedTokensAfterToken(lessThanToken, result.skippedTokens);\n\n                var greaterThanToken = this.eatToken(SyntaxKind.GreaterThanToken);\n\n                // return null if we were required to have a \'>\' token and we did not  have one.\n                if (requireCompleteTypeParameterList && greaterThanToken.fullWidth() === 0) {\n                    this.rewind(rewindPoint);\n                    return null;\n                }\n\n                return this.factory.typeParameterList(lessThanToken, typeParameterList, greaterThanToken);\n            }\n            finally {\n                this.releaseRewindPoint(rewindPoint);\n            }\n        }\n\n        private isTypeParameter(): bool {\n            return this.isIdentifier(this.currentToken());\n        }\n        \n        private parseTypeParameter(): TypeParameterSyntax {\n            // Debug.assert(this.isTypeParameter());\n            var identifier = this.eatIdentifierToken();\n            var constraint = this.parseOptionalConstraint();\n\n            return this.factory.typeParameter(identifier, constraint);\n        }\n\n        private parseOptionalConstraint(): ConstraintSyntax {\n            if (this.currentToken().kind() !== SyntaxKind.ExtendsKeyword) {\n                return null;\n            }\n\n            var extendsKeyword = this.eatKeyword(SyntaxKind.ExtendsKeyword);\n            var type = this.parseType();\n\n            return this.factory.constraint(extendsKeyword, type);\n        }\n\n        private parseParameterList(): ParameterListSyntax {\n            var openParenToken = this.eatToken(SyntaxKind.OpenParenToken);\n            var parameters: ISeparatedSyntaxList = Syntax.emptySeparatedList;\n\n            if (openParenToken.width() > 0) {\n                var result = this.parseSeparatedSyntaxList(ListParsingState.ParameterList_Parameters);\n                parameters = result.list;\n                openParenToken = this.addSkippedTokensAfterToken(openParenToken, result.skippedTokens);\n            }\n\n            var closeParenToken = this.eatToken(SyntaxKind.CloseParenToken);\n            return this.factory.parameterList(openParenToken, parameters, closeParenToken);\n        }\n\n        private isTypeAnnotation(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.ColonToken;\n        }\n\n        private parseOptionalTypeAnnotation(allowStringLiteral: bool): TypeAnnotationSyntax {\n            return this.isTypeAnnotation()\n                ? this.parseTypeAnnotation(allowStringLiteral)\n                : null;\n        }\n\n        private parseTypeAnnotation(allowStringLiteral: bool): TypeAnnotationSyntax {\n            // Debug.assert(this.isTypeAnnotation());\n\n            var colonToken = this.eatToken(SyntaxKind.ColonToken);\n            var type = allowStringLiteral && this.currentToken().tokenKind === SyntaxKind.StringLiteral\n                ? this.eatToken(SyntaxKind.StringLiteral)\n                : this.parseType();\n\n            return this.factory.typeAnnotation(colonToken, type);\n        }\n\n        private isType(): bool {\n            return this.isPredefinedType() ||\n                   this.isTypeLiteral() ||\n                   this.isName();\n        }\n\n        private parseType(): ITypeSyntax {\n            var type = this.parseNonArrayType();\n\n            while (this.currentToken().tokenKind === SyntaxKind.OpenBracketToken) {\n                var openBracketToken = this.eatToken(SyntaxKind.OpenBracketToken);\n                var closeBracketToken = this.eatToken(SyntaxKind.CloseBracketToken);\n\n                type = this.factory.arrayType(type, openBracketToken, closeBracketToken);\n            }\n\n            return type;\n        }\n\n        private parseNonArrayType(): ITypeSyntax {\n            if (this.isPredefinedType()) {\n                return this.parsePredefinedType();\n            }\n            else if (this.isTypeLiteral()) {\n                return this.parseTypeLiteral();\n            }\n            else {\n                return this.parseNameOrGenericType();\n            }\n        }\n\n        private parseNameOrGenericType(): ITypeSyntax {\n            var name = this.parseName();\n            var typeArgumentList = this.tryParseTypeArgumentList(/*inExpression:*/ false);\n\n            return typeArgumentList === null\n                ? name\n                : this.factory.genericType(name, typeArgumentList);\n        }\n\n        private parseTypeLiteral(): ITypeSyntax {\n            // Debug.assert(this.isTypeLiteral(/*allowFunctionType:*/ true, /*allowConstructorType:*/ true));\n            if (this.isObjectType()) {\n                return this.parseObjectType();\n            }\n            else if (this.isFunctionType()) {\n                return this.parseFunctionType();\n            }\n            else if (this.isConstructorType()) {\n                return this.parseConstructorType();\n            }\n            else {\n                throw Errors.invalidOperation();\n            }\n        }\n\n        private parseFunctionType(): FunctionTypeSyntax {\n            // Debug.assert(this.isFunctionType());\n\n            var typeParameterList = this.parseOptionalTypeParameterList(/*requireCompleteTypeParameterList:*/ false);\n            var parameterList = this.parseParameterList();\n            var equalsGreaterThanToken = this.eatToken(SyntaxKind.EqualsGreaterThanToken);\n            var returnType = this.parseType();\n\n            return this.factory.functionType(typeParameterList, parameterList, equalsGreaterThanToken, returnType);\n        }\n\n        private parseConstructorType(): ConstructorTypeSyntax {\n            // Debug.assert(this.isConstructorType());\n\n            var newKeyword = this.eatKeyword(SyntaxKind.NewKeyword);\n            var parameterList = this.parseParameterList();\n            var equalsGreaterThanToken = this.eatToken(SyntaxKind.EqualsGreaterThanToken);\n            var type = this.parseType();\n\n            return this.factory.constructorType(newKeyword, null, parameterList, equalsGreaterThanToken, type);\n        }\n\n        private isTypeLiteral(): bool {\n            return this.isObjectType() ||\n                   this.isFunctionType() ||\n                   this.isConstructorType();\n        }\n\n        private isObjectType(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.OpenBraceToken;\n        }\n\n        private isFunctionType(): bool {\n            var tokenKind = this.currentToken().tokenKind;\n            return tokenKind === SyntaxKind.OpenParenToken || tokenKind === SyntaxKind.LessThanToken;\n        }\n\n        private isConstructorType(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.NewKeyword;\n        }\n\n        private parsePredefinedType(): ITypeSyntax {\n            // Debug.assert(this.isPredefinedType());\n            return this.eatAnyToken();\n        }\n\n        private isPredefinedType(): bool {\n            switch (this.currentToken().tokenKind) {\n                case SyntaxKind.AnyKeyword:\n                case SyntaxKind.NumberKeyword:\n                case SyntaxKind.BooleanKeyword:\n                case SyntaxKind.BoolKeyword:\n                case SyntaxKind.StringKeyword:\n                case SyntaxKind.VoidKeyword:\n                    return true;\n            }\n\n            return false;\n        }\n\n        private isParameter(): bool {\n            if (this.currentNode() !== null && this.currentNode().kind() === SyntaxKind.Parameter) {\n                return true;\n            }\n\n            var token = this.currentToken();\n            if (token.tokenKind === SyntaxKind.DotDotDotToken) {\n                return true;\n            }\n\n            if (ParserImpl.isPublicOrPrivateKeyword(token)) {\n                return true;\n            }\n\n            return this.isIdentifier(token);\n        }\n\n        private parseParameter(): ParameterSyntax {\n            if (this.currentNode() !== null && this.currentNode().kind() === SyntaxKind.Parameter) {\n                return <ParameterSyntax>this.eatNode();\n            }\n\n            var dotDotDotToken = this.tryEatToken(SyntaxKind.DotDotDotToken);\n\n            var publicOrPrivateToken: ISyntaxToken = null;\n            if (ParserImpl.isPublicOrPrivateKeyword(this.currentToken())) {\n                publicOrPrivateToken = this.eatAnyToken();\n            }\n\n            var identifier = this.eatIdentifierToken();\n            var questionToken = this.tryEatToken(SyntaxKind.QuestionToken);\n            var typeAnnotation = this.parseOptionalTypeAnnotation(/*allowStringLiteral:*/ true);\n\n            var equalsValueClause: EqualsValueClauseSyntax = null;\n            if (this.isEqualsValueClause(/*inParameter*/ true)) {\n                equalsValueClause = this.parseEqualsValueClause(/*allowIn:*/ true);\n            }\n\n            return this.factory.parameter(\n                dotDotDotToken, publicOrPrivateToken, identifier, questionToken, typeAnnotation, equalsValueClause);\n        }\n\n        private parseSyntaxList(currentListType: ListParsingState,\n                                processItems: (parser: ParserImpl, items: any[]) => void = null): { skippedTokens: ISyntaxToken[]; list: ISyntaxList; } {\n            var savedListParsingState = this.listParsingState;\n            this.listParsingState |= currentListType;\n\n            var result = this.parseSyntaxListWorker(currentListType, processItems);\n\n            this.listParsingState = savedListParsingState;\n\n            return result;\n        }\n\n        private parseSeparatedSyntaxList(currentListType: ListParsingState): { skippedTokens: ISyntaxToken[]; list: ISeparatedSyntaxList; } {\n            var savedListParsingState = this.listParsingState;\n            this.listParsingState |= currentListType;\n\n            var result = this.parseSeparatedSyntaxListWorker(currentListType);\n\n            this.listParsingState = savedListParsingState;\n\n            return result;\n        }\n\n        // Returns true if we should abort parsing.\n        private abortParsingListOrMoveToNextToken(currentListType: ListParsingState,\n                                                  itemCount: number,\n                                                  items: ISyntaxNodeOrToken[],\n                                                  skippedTokens: ISyntaxToken[]): bool {\n            // Ok.  We\'re at a token that is not a terminator for the list and wasn\'t the start of \n            // an item in the list. Definitely report an error for this token.\n            this.reportUnexpectedTokenDiagnostic(currentListType);\n\n            // Now, check if the token is a terminator for one our parent lists, or the start of an\n            // item in one of our parent lists.  If so, we won\'t want to consume the token.  We\'ve \n            // already reported the error, so just return to our caller so that a higher up \n            // production can consume it.\n            for (var state = ListParsingState.LastListParsingState;\n                 state >= ListParsingState.FirstListParsingState;\n                 state >>= 1) {\n\n                if ((this.listParsingState & state) !== 0) {\n                    if (this.isExpectedListTerminator(state, itemCount) || this.isExpectedListItem(state, /*inErrorRecovery:*/ true)) {\n                        // Abort parsing this list.\n                        return true;\n                    }\n                }\n            }\n\n            // Otherwise, if none of the lists we\'re in can capture this token, then we need to \n            // unilaterally skip it.  Note: we\'ve already reported an error above.\n            var skippedToken = this.currentToken();\n\n            // Consume this token and move onto the next item in the list.\n            this.moveToNextToken();\n\n            this.addSkippedTokenToList(items, skippedTokens, skippedToken);\n\n            // Continue parsing this list.  Attach this token to whatever we\'ve seen already.\n            return false;\n        }\n        \n        private addSkippedTokenToList(items: ISyntaxNodeOrToken[], skippedTokens: ISyntaxToken[], skippedToken: ISyntaxToken): void {\n            // Now, add this skipped token to the last item we successfully parsed in the list.  Or\n            // add it to the list of skipped tokens if we haven\'t parsed anything.  Our caller will\n            // have to deal with them.\n            for (var i = items.length - 1; i >= 0; i--) {\n                var item = items[i];\n                var lastToken = item.lastToken();\n                if (lastToken.fullWidth() > 0) {\n                    items[i] = this.addSkippedTokenAfterNodeOrToken(item, skippedToken);\n                    return;\n                }\n            }\n            \n            // Didn\'t have anything in the list we could add to.  Add to the skipped items array\n            // for our caller to handle.\n            skippedTokens.push(skippedToken);\n        }\n\n        private tryParseExpectedListItem(currentListType: ListParsingState,\n                                         inErrorRecovery: bool,\n                                         items: ISyntaxElement[],\n                                         processItems: (parser: ParserImpl, items: any[]) => void ): void {\n            if (this.isExpectedListItem(currentListType, inErrorRecovery)) {\n                var item = this.parseExpectedListItem(currentListType);\n                // Debug.assert(item !== null);\n\n                items.push(item);\n\n                if (processItems !== null) {\n                    processItems(this, items);\n                }\n            }\n        }\n\n        private listIsTerminated(currentListType: ListParsingState, itemCount: number): bool {\n            return this.isExpectedListTerminator(currentListType, itemCount) ||\n                   this.currentToken().tokenKind === SyntaxKind.EndOfFileToken;\n        }\n\n        private arrayPool: any[][] = [];\n        private getArray(): any[] {\n            if (this.arrayPool.length > 0) {\n                return this.arrayPool.pop();\n            }\n\n            return [];\n        }\n\n        private returnZeroOrOneLengthArray(array: any[]) {\n            if (array.length <= 1) {\n                this.returnArray(array);\n            }\n        }\n\n        private returnArray(array: any[]) {\n            array.length = 0;\n            this.arrayPool.push(array);\n        }\n\n        private parseSyntaxListWorker(currentListType: ListParsingState,\n                                      processItems: (parser: ParserImpl, items: any[]) => void ): { skippedTokens: ISyntaxToken[]; list: ISyntaxList; } {\n            var items: SyntaxNode[] = this.getArray();\n            var skippedTokens: ISyntaxToken[] = this.getArray();\n\n            while (true) {\n                // Try to parse an item of the list.  If we fail then decide if we need to abort or \n                // continue parsing.\n                var oldItemsCount = items.length;\n                this.tryParseExpectedListItem(currentListType, /*inErrorRecovery:*/ false, items, processItems);\n\n                var newItemsCount = items.length;\n                if (newItemsCount === oldItemsCount) {\n                    // We weren\'t able to parse out a list element.\n\n                    // That may have been because the list is complete.  In that case, break out \n                    // and return the items we were able parse.\n                    if (this.listIsTerminated(currentListType, newItemsCount)) {\n                        break\n                    }\n\n                    // List wasn\'t complete and we didn\'t get an item.  Figure out if we should bail out\n                    // or skip a token and continue.\n                    var abort = this.abortParsingListOrMoveToNextToken(currentListType, newItemsCount, items, skippedTokens);\n                    if (abort) {\n                        break;\n                    }\n                }\n\n                // We either parsed an element.  Or we failed to, but weren\'t at the end of the list\n                // and didn\'t want to abort. Continue parsing elements.\n            }\n\n            var result = Syntax.list(items);\n\n            // Can\'t return if it has more then 1 element.  In that case, the list will have been\n            // copied into the SyntaxList.\n            this.returnZeroOrOneLengthArray(items);\n\n            return { skippedTokens: skippedTokens, list: result };\n        }\n\n        private parseSeparatedSyntaxListWorker(currentListType: ListParsingState): { skippedTokens: ISyntaxToken[]; list: ISeparatedSyntaxList; } {\n            var items: ISyntaxNodeOrToken[] = this.getArray();\n            var skippedTokens: ISyntaxToken[] = this.getArray();\n            Debug.assert(items.length === 0);\n            Debug.assert(skippedTokens.length === 0);\n            Debug.assert(skippedTokens !== items);\n\n            var allowAutomaticSemicolonInsertion = this.allowsAutomaticSemicolonInsertion(currentListType);\n            var separatorKind = this.separatorKind(currentListType);\n\n            var inErrorRecovery = false;\n            var listWasTerminated = false;\n            while (true) {\n                // Try to parse an item of the list.  If we fail then decide if we need to abort or \n                // continue parsing.\n                var oldItemsCount = items.length;\n                // Debug.assert(oldItemsCount % 2 === 0);\n                this.tryParseExpectedListItem(currentListType, inErrorRecovery, items, null);\n                \n                var newItemsCount = items.length;\n                if (newItemsCount === oldItemsCount) {\n                    // We weren\'t able to parse out a list element.\n                    // Debug.assert(items === null || items.length % 2 === 0);\n                    \n                    // That may have been because the list is complete.  In that case, break out \n                    // and return the items we were able parse.\n                    if (this.listIsTerminated(currentListType, newItemsCount)) {\n                        listWasTerminated = true;\n                        break;\n                    }\n                    \n                    // List wasn\'t complete and we didn\'t get an item.  Figure out if we should bail out\n                    // or skip a token and continue.\n                    var abort = this.abortParsingListOrMoveToNextToken(currentListType, oldItemsCount, items, skippedTokens);\n                    if (abort) {\n                        break;\n                    }\n                    else {\n                        // We just skipped a token.  We\'re now in error recovery mode.\n                        inErrorRecovery = true;\n                        continue;\n                    }\n                }\n\n                // Debug.assert(newItemsCount % 2 === 1);\n\n                // We were able to successfully parse out a list item.  So we\'re no longer in error\n                // recovery.\n                inErrorRecovery = false;\n\n                // Now, we have to see if we have a separator or not.  If we do have a separator\n                // we\'ve got to consume it and continue trying to parse list items.\n                if (this.currentToken().tokenKind === separatorKind) {\n                    // Consume the last separator and continue parsing list elements.\n                    items.push(this.eatToken(separatorKind));\n                    continue;\n                }\n\n                // We didn\'t see the expected separator.  There are two reasons this might happen.\n                // First, we may actually be at the end of the list.  If we are, then we\'re done\n                // parsing list elements.  \n                if (this.listIsTerminated(currentListType, newItemsCount)) {\n                    listWasTerminated = true;\n                    break;\n                }\n\n                // Otherwise, it might be a case where we can parse out an implicit semicolon.\n\n                // Note: it\'s important that we check this *after* the check above for\n                // \'listIsTerminated\'.  Consider the following case:\n                //\n                //      {\n                //          a       // <-- just finished parsing \'a\'\n                //      }\n                //\n                // Automatic semicolon insertion rules state: \"When, as the program is parsed from\n                // left to right, a token (called the offending token) is encountered that is not \n                // allowed by any production of the grammar\".  So we should only ever insert a \n                // semicolon if we couldn\'t consume something normally.  in the above case, we can\n                // consume the \'}\' just fine.  So ASI doesn\'t apply.\n\n                if (allowAutomaticSemicolonInsertion && this.canEatAutomaticSemicolon(/*allowWithoutNewline:*/ false)) {\n                    items.push(this.eatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false));\n                    // Debug.assert(items.length % 2 === 0);\n                    continue;\n                }\n\n                // We weren\'t at the end of the list.  And thre was no separator we could parse out.\n                // Try parse the separator we expected, and continue parsing more list elements.\n                // This time mark that we\'re in error recovery mode though.\n                //\n                // Note: trying to eat this token will emit the appropriate diagnostic.\n                items.push(this.eatToken(separatorKind));\n\n                // Now that we\'re in \'error recovery\' mode we cantweak some parsing rules as \n                // appropriate.  For example, if we have:\n                //\n                //      var v = { a\n                //      return\n                //\n                // Then we\'ll be missing the comma.  As such, we want to parse \'return\' in a less\n                // tolerant manner.  Normally \'return\' could be a property in an object literal.\n                // However, in error recovery mode, we do *not* want it to be.\n                //\n                // Continue trying to parse out list elements.\n                inErrorRecovery = true;\n            }\n\n            // Now that we\'re done parsing, ensure the list is properly formed.\n            var allowTrailingSeparator = this.allowsTrailingSeparator(currentListType);\n            var requiresAtLeastOneItem = this.requiresAtLeastOneItem(currentListType);\n\n            // If this list requires at least one argument, then report an error if we haven\'t \n            // gotten any.\n            if (requiresAtLeastOneItem && items.length === 0) {\n                this.reportUnexpectedTokenDiagnostic(currentListType);\n            }\n            else {\n                // If the list ended with a trailing separator, and that\'s not allowed, then report\n                // an error for it.  Only do this if the list was successfully terminated.  We don\'t\n                // want to report multiple errors if we\'re missing the closing terminator and we \n                // have a trailing separator.\n                if (listWasTerminated &&\n                    !allowTrailingSeparator &&\n                    items.length > 0 &&\n                    items.length % 2 === 0 &&\n                    items[items.length - 1] === this.previousToken()) {\n\n                    this.addDiagnostic(new SyntaxDiagnostic(this.fileName,\n                        this.previousTokenStart(), this.previousToken().width(), DiagnosticCode.Trailing_separator_not_allowed, null));\n                }\n            }\n            \n            var result = Syntax.separatedList(items);\n\n            // Can\'t return if it has more then 1 element.  In that case, the list will have been\n            // copied into the SyntaxList.\n            this.returnZeroOrOneLengthArray(items);\n\n            return { skippedTokens: skippedTokens, list: result };\n        }\n\n        private allowsTrailingSeparator(currentListType: ListParsingState): bool {\n            switch (currentListType) {\n                case ListParsingState.EnumDeclaration_EnumElements:\n                case ListParsingState.ObjectType_TypeMembers:\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                    return true;\n\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                case ListParsingState.HeritageClause_TypeNameList:\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                case ListParsingState.ParameterList_Parameters:\n                    // TODO: It would be great to allow trailing separators for parameters.\n                case ListParsingState.TypeArgumentList_Types:\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return false;\n\n                case ListParsingState.SourceUnit_ModuleElements:\n                case ListParsingState.ClassDeclaration_ClassElements:\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                case ListParsingState.SwitchClause_Statements:\n                case ListParsingState.Block_Statements:\n                default:\n                    throw Errors.notYetImplemented();\n            }\n        }\n\n        private requiresAtLeastOneItem(currentListType: ListParsingState): bool {\n            switch (currentListType) {\n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                case ListParsingState.HeritageClause_TypeNameList:\n                case ListParsingState.TypeArgumentList_Types:\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return true;\n\n                case ListParsingState.ObjectType_TypeMembers:\n                case ListParsingState.EnumDeclaration_EnumElements:\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                case ListParsingState.ParameterList_Parameters:\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                    return false;\n\n                case ListParsingState.SourceUnit_ModuleElements:\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                case ListParsingState.ClassDeclaration_ClassElements:\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                case ListParsingState.SwitchClause_Statements:\n                case ListParsingState.Block_Statements:\n                default:\n                    throw Errors.notYetImplemented();\n            }\n        }\n\n        private allowsAutomaticSemicolonInsertion(currentListType: ListParsingState): bool {\n            switch (currentListType) {\n                case ListParsingState.ObjectType_TypeMembers:\n                    return true;\n\n                case ListParsingState.HeritageClause_TypeNameList:\n                case ListParsingState.EnumDeclaration_EnumElements:\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                case ListParsingState.ParameterList_Parameters:\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                case ListParsingState.TypeArgumentList_Types:\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return false;\n\n                case ListParsingState.SourceUnit_ModuleElements:\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                case ListParsingState.ClassDeclaration_ClassElements:\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                case ListParsingState.SwitchClause_Statements:\n                case ListParsingState.Block_Statements:\n                default:\n                    throw Errors.notYetImplemented();\n            }\n        }\n\n        private separatorKind(currentListType: ListParsingState): SyntaxKind {\n            switch (currentListType) {\n                case ListParsingState.HeritageClause_TypeNameList:\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                case ListParsingState.EnumDeclaration_EnumElements:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                case ListParsingState.ParameterList_Parameters:\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                case ListParsingState.TypeArgumentList_Types:\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return SyntaxKind.CommaToken;\n\n                case ListParsingState.ObjectType_TypeMembers:\n                    return SyntaxKind.SemicolonToken;\n\n                case ListParsingState.SourceUnit_ModuleElements:\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                case ListParsingState.ClassDeclaration_ClassElements:\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                case ListParsingState.SwitchClause_Statements:\n                case ListParsingState.Block_Statements:\n                default:\n                    throw Errors.notYetImplemented();\n            }\n        }\n\n        private reportUnexpectedTokenDiagnostic(listType: ListParsingState): void {\n            var token = this.currentToken();\n\n            var diagnostic = new SyntaxDiagnostic(this.fileName,\n                this.currentTokenStart(), token.width(), DiagnosticCode.Unexpected_token__0_expected, [this.getExpectedListElementType(listType)]);\n            this.addDiagnostic(diagnostic);\n        }\n\n        private addDiagnostic(diagnostic: SyntaxDiagnostic): void {\n            // Except: if we already have a diagnostic for this position, don\'t report another one.\n            if (this.diagnostics.length > 0 &&\n                this.diagnostics[this.diagnostics.length - 1].start() === diagnostic.start()) {\n                return;\n            }\n\n            this.diagnostics.push(diagnostic);\n        }\n\n        private isExpectedListTerminator(currentListType: ListParsingState, itemCount: number): bool {\n            switch (currentListType) {\n                case ListParsingState.SourceUnit_ModuleElements:\n                    return this.isExpectedSourceUnit_ModuleElementsTerminator();\n\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                    return this.isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator();\n\n                case ListParsingState.ClassDeclaration_ClassElements:\n                    return this.isExpectedClassDeclaration_ClassElementsTerminator();\n\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                    return this.isExpectedModuleDeclaration_ModuleElementsTerminator();\n\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                    return this.isExpectedSwitchStatement_SwitchClausesTerminator();\n\n                case ListParsingState.SwitchClause_Statements:\n                    return this.isExpectedSwitchClause_StatementsTerminator();\n\n                case ListParsingState.Block_Statements:\n                    return this.isExpectedBlock_StatementsTerminator();\n\n                case ListParsingState.TryBlock_Statements:\n                    return this.isExpectedTryBlock_StatementsTerminator();\n\n                case ListParsingState.CatchBlock_Statements:\n                    return this.isExpectedCatchBlock_StatementsTerminator();\n\n                case ListParsingState.EnumDeclaration_EnumElements:\n                    return this.isExpectedEnumDeclaration_EnumElementsTerminator();\n\n                case ListParsingState.ObjectType_TypeMembers:\n                    return this.isExpectedObjectType_TypeMembersTerminator();\n\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                    return this.isExpectedArgumentList_AssignmentExpressionsTerminator();\n\n                case ListParsingState.HeritageClause_TypeNameList:\n                    return this.isExpectedHeritageClause_TypeNameListTerminator();\n\n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                    return this.isExpectedVariableDeclaration_VariableDeclarators_AllowInTerminator(itemCount);\n\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                    return this.isExpectedVariableDeclaration_VariableDeclarators_DisallowInTerminator();\n\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                    return this.isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator();\n\n                case ListParsingState.ParameterList_Parameters:\n                    return this.isExpectedParameterList_ParametersTerminator();\n\n                case ListParsingState.TypeArgumentList_Types:\n                    return this.isExpectedTypeArgumentList_TypesTerminator();\n\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return this.isExpectedTypeParameterList_TypeParametersTerminator();\n\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                    return this.isExpectedLiteralExpression_AssignmentExpressionsTerminator();\n\n                default:\n                    throw Errors.invalidOperation();\n            }\n        }\n\n        private isExpectedSourceUnit_ModuleElementsTerminator(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.EndOfFileToken;\n        }\n\n        private isExpectedEnumDeclaration_EnumElementsTerminator(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedModuleDeclaration_ModuleElementsTerminator(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedObjectType_TypeMembersTerminator(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedLiteralExpression_AssignmentExpressionsTerminator(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBracketToken;\n        }\n\n        private isExpectedTypeArgumentList_TypesTerminator(): bool {\n            var token = this.currentToken();\n            if (token.tokenKind === SyntaxKind.GreaterThanToken) {\n                return true;\n            }\n\n            // If we\'re at a token that can follow the type argument list, then we\'ll also consider\n            // the list terminated.\n            if (this.canFollowTypeArgumentListInExpression(token.tokenKind)) {\n                return true;\n            }\n\n            // TODO: add more cases as necessary for error tolerance.\n            return false;\n        }\n\n        private isExpectedTypeParameterList_TypeParametersTerminator(): bool {\n            var token = this.currentToken();\n            if (token.tokenKind === SyntaxKind.GreaterThanToken) {\n                return true;\n            }\n\n            // These commonly follow type parameter lists.\n            if (token.tokenKind === SyntaxKind.OpenParenToken ||\n                token.tokenKind === SyntaxKind.OpenBraceToken ||\n                token.tokenKind === SyntaxKind.ExtendsKeyword ||\n                token.tokenKind === SyntaxKind.ImplementsKeyword) {\n                return true;\n            }\n\n            // TODO: add more cases as necessary for error tolerance.\n            return false;\n        }\n\n        private isExpectedParameterList_ParametersTerminator(): bool {\n            var token = this.currentToken();\n            if (token.tokenKind === SyntaxKind.CloseParenToken) {\n                return true;\n            }\n\n            // We may also see a { in an error case.  i.e.:\n            // function (a, b, c  {\n            if (token.tokenKind === SyntaxKind.OpenBraceToken) {\n                return true;\n            }\n\n            // We may also see a => in an error case.  i.e.:\n            // (f: number => { ... }\n            if (token.tokenKind === SyntaxKind.EqualsGreaterThanToken) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private isExpectedVariableDeclaration_VariableDeclarators_DisallowInTerminator(): bool {\n            // This is the case when we\'re parsing variable declarations in a for/for-in statement.\n            if (this.currentToken().tokenKind === SyntaxKind.SemicolonToken ||\n                this.currentToken().tokenKind === SyntaxKind.CloseParenToken) {\n                return true;\n            }\n\n            if (this.currentToken().tokenKind === SyntaxKind.InKeyword) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private isExpectedVariableDeclaration_VariableDeclarators_AllowInTerminator(itemCount: number): bool {\n            //// This is the case when we\'re parsing variable declarations in a variable statement.\n\n            // If we just parsed a comma, then we can\'t terminate this list.  i.e.:\n            //      var a = bar, // <-- just consumed the comma\n            //          b = baz;\n            if (this.previousToken().tokenKind === SyntaxKind.CommaToken) {\n                return false;\n            }\n\n            // ERROR RECOVERY TWEAK:\n            // For better error recovery, if we see a => then we just stop immediately.  We\'ve got an\n            // arrow function here and it\'s going to be veyr unlikely that we\'ll resynchronize and get\n            // another variable declaration.\n            if (this.currentToken().tokenKind === SyntaxKind.EqualsGreaterThanToken) {\n                return true;\n            }\n\n            // We\'re done when we can eat a semicolon and we\'ve parsed at least one item.\n            return itemCount > 0 && this.canEatExplicitOrAutomaticSemicolon(/*allowWithoutNewline:*/ false);\n        }\n\n        private isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator(): bool {\n            var token0 = this.currentToken();\n            if (token0.tokenKind === SyntaxKind.OpenBraceToken ||\n                token0.tokenKind === SyntaxKind.CloseBraceToken) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private isExpectedHeritageClause_TypeNameListTerminator(): bool {\n            var token0 = this.currentToken();\n            if (token0.tokenKind === SyntaxKind.ExtendsKeyword ||\n                token0.tokenKind === SyntaxKind.ImplementsKeyword) {\n                return true;\n            }\n\n            if (this.isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator()) {\n                return true;\n            }\n\n            return false;\n        }\n\n        private isExpectedArgumentList_AssignmentExpressionsTerminator(): bool {\n            var token0 = this.currentToken();\n            return token0.tokenKind === SyntaxKind.CloseParenToken ||\n                   token0.tokenKind === SyntaxKind.SemicolonToken;\n        }\n\n        private isExpectedClassDeclaration_ClassElementsTerminator(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedSwitchStatement_SwitchClausesTerminator(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedSwitchClause_StatementsTerminator(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken ||\n                   this.isSwitchClause();\n        }\n\n        private isExpectedBlock_StatementsTerminator(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.CloseBraceToken;\n        }\n\n        private isExpectedTryBlock_StatementsTerminator(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.CatchKeyword ||\n                   this.currentToken().tokenKind === SyntaxKind.FinallyKeyword;\n        }\n\n        private isExpectedCatchBlock_StatementsTerminator(): bool {\n            return this.currentToken().tokenKind === SyntaxKind.FinallyKeyword;\n        }\n\n        private isExpectedListItem(currentListType: ListParsingState, inErrorRecovery: bool): any {\n            switch (currentListType) {\n                case ListParsingState.SourceUnit_ModuleElements:\n                    return this.isModuleElement(inErrorRecovery);\n\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                    return this.isHeritageClause();\n\n                case ListParsingState.ClassDeclaration_ClassElements:\n                    return this.isClassElement(inErrorRecovery);\n\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                    return this.isModuleElement(inErrorRecovery);\n\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                    return this.isSwitchClause();\n\n                case ListParsingState.SwitchClause_Statements:\n                    return this.isStatement(inErrorRecovery);\n\n                case ListParsingState.Block_Statements:\n                    return this.isStatement(inErrorRecovery);\n\n                case ListParsingState.TryBlock_Statements:\n                case ListParsingState.CatchBlock_Statements:\n                    // These two are special.  They\'re just augmentations of \"Block_Statements\" \n                    // used so we can abort out of the try block if we see a \'catch\' or \'finally\'\n                    // keyword.  There are no additional list items that they add, so we just\n                    // return \'false\' here.\n                    return false;\n\n                case ListParsingState.EnumDeclaration_EnumElements:\n                    return this.isEnumElement(inErrorRecovery);\n                \n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                    return this.isVariableDeclarator();\n\n                case ListParsingState.ObjectType_TypeMembers:\n                    return this.isTypeMember(inErrorRecovery);\n\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                    return this.isExpression();\n\n                case ListParsingState.HeritageClause_TypeNameList:\n                    return this.isHeritageClauseTypeName();\n\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                    return this.isPropertyAssignment(inErrorRecovery);\n\n                case ListParsingState.ParameterList_Parameters:\n                    return this.isParameter();\n\n                case ListParsingState.TypeArgumentList_Types:\n                    return this.isType();\n\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return this.isTypeParameter();\n\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                    return this.isAssignmentOrOmittedExpression();\n\n                default:\n                    throw Errors.invalidOperation();\n            }\n        }\n\n        private parseExpectedListItem(currentListType: ListParsingState): ISyntaxNodeOrToken {\n            switch (currentListType) {\n                case ListParsingState.SourceUnit_ModuleElements:\n                    return this.parseModuleElement();\n\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                    return this.parseHeritageClause();\n\n                case ListParsingState.ClassDeclaration_ClassElements:\n                    return this.parseClassElement(/*inErrorRecovery:*/ false);\n\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                    return this.parseModuleElement();\n\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                    return this.parseSwitchClause();\n\n                case ListParsingState.SwitchClause_Statements:\n                    return this.parseStatement();\n\n                case ListParsingState.Block_Statements:\n                    return this.parseStatement();\n\n                case ListParsingState.EnumDeclaration_EnumElements:\n                    return this.parseEnumElement();\n\n                case ListParsingState.ObjectType_TypeMembers:\n                    return this.parseTypeMember();\n\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                    return this.parseAssignmentExpression(/*allowIn:*/ true);\n\n                case ListParsingState.HeritageClause_TypeNameList:\n                    return this.parseNameOrGenericType();\n\n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                    return this.parseVariableDeclarator(/*allowIn:*/ true, /*allowIdentifierName:*/ false);\n\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                    return this.parseVariableDeclarator(/*allowIn:*/ false, /*allowIdentifierName:*/ false);\n\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                    return this.parsePropertyAssignment();\n\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                    return this.parseAssignmentOrOmittedExpression();\n\n                case ListParsingState.ParameterList_Parameters:\n                    return this.parseParameter();\n\n                case ListParsingState.TypeArgumentList_Types:\n                    return this.parseType();\n\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return this.parseTypeParameter();\n\n                default:\n                    throw Errors.invalidOperation();\n            }\n        }\n\n        private getExpectedListElementType(currentListType: ListParsingState): string {\n            switch (currentListType) {\n                case ListParsingState.SourceUnit_ModuleElements:\n                    return Strings.module__class__interface__enum__import_or_statement;\n\n                case ListParsingState.ClassOrInterfaceDeclaration_HeritageClauses:\n                    return \'{\';\n\n                case ListParsingState.ClassDeclaration_ClassElements:\n                    return Strings.constructor__function__accessor_or_variable;\n\n                case ListParsingState.ModuleDeclaration_ModuleElements:\n                    return Strings.module__class__interface__enum__import_or_statement;\n\n                case ListParsingState.SwitchStatement_SwitchClauses:\n                    return Strings.case_or_default_clause;\n\n                case ListParsingState.SwitchClause_Statements:\n                    return Strings.statement;\n\n                case ListParsingState.Block_Statements:\n                    return Strings.statement;\n\n                case ListParsingState.VariableDeclaration_VariableDeclarators_AllowIn:\n                case ListParsingState.VariableDeclaration_VariableDeclarators_DisallowIn:\n                    return Strings.identifier;\n\n                case ListParsingState.EnumDeclaration_EnumElements:\n                    return Strings.identifier;\n\n                case ListParsingState.ObjectType_TypeMembers:\n                    return Strings.call__construct__index__property_or_function_signature;\n\n                case ListParsingState.ArgumentList_AssignmentExpressions:\n                    return Strings.expression;\n\n                case ListParsingState.HeritageClause_TypeNameList:\n                    return Strings.type_name;\n\n                case ListParsingState.ObjectLiteralExpression_PropertyAssignments:\n                    return Strings.property_or_accessor;\n\n                case ListParsingState.ParameterList_Parameters:\n                    return Strings.parameter;\n\n                case ListParsingState.TypeArgumentList_Types:\n                    return Strings.type;\n\n                case ListParsingState.TypeParameterList_TypeParameters:\n                    return Strings.type_parameter;\n\n                case ListParsingState.ArrayLiteralExpression_AssignmentExpressions:\n                    return Strings.expression;\n\n                default:\n                    throw Errors.invalidOperation();\n            }\n        }\n    }\n\n    export function parse(fileName: string,\n                          text: ISimpleText,\n                          isDeclaration: bool,\n                          languageVersion: LanguageVersion = LanguageVersion.EcmaScript5,\n                          options: ParseOptions = null): SyntaxTree {\n        var source = new NormalParserSource(fileName, text, languageVersion);\n        options = options || new ParseOptions();\n\n        return new ParserImpl(fileName, text.lineMap(), source, options).parseSyntaxTree(isDeclaration);\n    }\n\n    export function incrementalParse(oldSyntaxTree: SyntaxTree,\n                                     textChangeRange: TextChangeRange,\n                                     newText: ISimpleText): SyntaxTree {\n        if (textChangeRange.isUnchanged()) {\n            return oldSyntaxTree;\n        }\n        \n        var source = new IncrementalParserSource(oldSyntaxTree, textChangeRange, newText);\n\n        return new ParserImpl(oldSyntaxTree.fileName(), newText.lineMap(), source, oldSyntaxTree.parseOptions()).parseSyntaxTree(oldSyntaxTree.isDeclaration());\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class SyntaxTree {\n        private _sourceUnit: SourceUnitSyntax;\n        private _isDeclaration: bool;\n        private _parserDiagnostics: SyntaxDiagnostic[];\n        private _allDiagnostics: SyntaxDiagnostic[] = null;\n        private _fileName: string;\n        private _lineMap: LineMap;\n        private _languageVersion: LanguageVersion;\n        private _parseOptions: ParseOptions;\n\n        constructor(sourceUnit: SourceUnitSyntax,\n                    isDeclaration: bool,\n                    diagnostics: SyntaxDiagnostic[],\n                    fileName: string,\n                    lineMap: LineMap,\n                    languageVersion: LanguageVersion,\n                    parseOtions: ParseOptions) {\n            this._sourceUnit = sourceUnit;\n            this._isDeclaration = isDeclaration;\n            this._parserDiagnostics = diagnostics;\n            this._fileName = fileName;\n            this._lineMap = lineMap;\n            this._languageVersion = languageVersion;\n            this._parseOptions = parseOtions;\n        }\n\n        public toJSON(key) {\n            var result: any = {};\n\n            result.isDeclaration = this._isDeclaration;\n            result.languageVersion = (<any>LanguageVersion)._map[this._languageVersion];\n            result.parseOptions = this._parseOptions;\n\n            if (this.diagnostics().length > 0) {\n                result.diagnostics = this.diagnostics();\n            }\n\n            result.sourceUnit = this._sourceUnit;\n            result.lineMap = this._lineMap;\n\n            return result;\n        }\n\n        public sourceUnit(): SourceUnitSyntax {\n            return this._sourceUnit;\n        }\n\n        public isDeclaration(): bool {\n            return this._isDeclaration;\n        }\n\n        private computeDiagnostics(): SyntaxDiagnostic[]{\n            if (this._parserDiagnostics.length > 0) {\n                return this._parserDiagnostics;\n            }\n\n            // No parser reported diagnostics.  Check for any additional grammar diagnostics.\n            var diagnostics: SyntaxDiagnostic[] = [];\n            this.sourceUnit().accept(new GrammarCheckerWalker(this.fileName(), diagnostics, this.isDeclaration()));\n\n            return diagnostics;\n        }\n\n        public diagnostics(): SyntaxDiagnostic[] {\n            if (this._allDiagnostics === null) {\n                this._allDiagnostics = this.computeDiagnostics();\n            }\n\n            return this._allDiagnostics;\n        }\n\n        public fileName(): string {\n            return this._fileName;\n        }\n\n        public lineMap(): LineMap {\n            return this._lineMap;\n        }\n\n        public languageVersion(): LanguageVersion {\n            return this._languageVersion;\n        }\n\n        public parseOptions(): ParseOptions {\n            return this._parseOptions;\n        }\n\n        public structuralEquals(tree: SyntaxTree): bool {\n            return ArrayUtilities.sequenceEquals(this.diagnostics(), tree.diagnostics(), SyntaxDiagnostic.equals) &&\n                this.sourceUnit().structuralEquals(tree.sourceUnit());\n        }\n    }\n\n    class GrammarCheckerWalker extends PositionTrackingWalker {\n        private inAmbientDeclaration: bool = false;\n        private currentConstructor: ConstructorDeclarationSyntax = null;\n\n        constructor(private fileName: string,\n                    private diagnostics: IDiagnostic[],\n                    private isDeclaration: bool) {\n            super();\n        }\n\n        private childFullStart(parent: ISyntaxElement, child: ISyntaxElement): number {\n            return this.position() + Syntax.childOffset(parent, child);\n        }\n\n        private childStart(parent: ISyntaxNode, child: ISyntaxElement): number {\n            return this.childFullStart(parent, child) + child.leadingTriviaWidth();\n        }\n\n        private getToken(list: ISyntaxList, kind: SyntaxKind): ISyntaxToken {\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                var token = <ISyntaxToken>list.childAt(i);\n                if (token.tokenKind === kind) {\n                    return token;\n                }\n            }\n\n            return null;\n        }\n\n        private containsToken(list: ISyntaxList, kind: SyntaxKind): bool {\n            return this.getToken(list, kind) !== null;\n        }\n\n        private pushDiagnostic(start: number, length: number, diagnosticCode: DiagnosticCode, args: any[] = null): void {\n            this.diagnostics.push(new SyntaxDiagnostic(\n                this.fileName, start, length, diagnosticCode, args));\n        }\n\n        private pushDiagnostic1(elementFullStart: number, element: ISyntaxElement, diagnosticCode: DiagnosticCode, args: any[] = null): void {\n            this.diagnostics.push(new SyntaxDiagnostic(\n                this.fileName, elementFullStart + element.leadingTriviaWidth(), element.width(), diagnosticCode, args));\n        }\n\n        private visitCatchClause(node: CatchClauseSyntax): void {\n            if (node.typeAnnotation) {\n                this.pushDiagnostic(\n                    this.childStart(node, node.typeAnnotation),\n                    node.typeAnnotation.width(),\n                    DiagnosticCode.A_catch_clause_variable_cannot_have_a_type_annotation);\n            }\n\n            super.visitCatchClause(node);\n        }\n\n        private checkParameterListOrder(node: ParameterListSyntax): bool {\n            var parameterFullStart = this.childFullStart(node, node.parameters);\n\n            var seenOptionalParameter = false;\n            var parameterCount = node.parameters.nonSeparatorCount();\n\n            for (var i = 0, n = node.parameters.childCount(); i < n; i++) {\n                var nodeOrToken = node.parameters.childAt(i);\n                if (i % 2 === 0) {\n                    var parameterIndex = i / 2;\n                    var parameter = <ParameterSyntax>node.parameters.childAt(i);\n\n                    if (parameter.dotDotDotToken) {\n                        if (parameterIndex != (parameterCount - 1)) {\n                            this.pushDiagnostic1(\n                                parameterFullStart, parameter,\n                                DiagnosticCode.Rest_parameter_must_be_last_in_list);\n                            return true;\n                        }\n                    }\n                    else if (parameter.questionToken || parameter.equalsValueClause) {\n                        seenOptionalParameter = true;\n\n                        if (parameter.questionToken && parameter.equalsValueClause) {\n                            this.pushDiagnostic1(\n                                parameterFullStart, parameter,\n                                DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer);\n                            return true;\n                        }\n                    }\n                    else {\n                        if (seenOptionalParameter) {\n                            this.pushDiagnostic1(\n                                parameterFullStart, parameter,\n                                DiagnosticCode.Required_parameter_cannot_follow_optional_parameter);\n                            return true;\n                        }\n                    }\n                }\n\n                parameterFullStart += nodeOrToken.fullWidth();\n            }\n\n            return false;\n        }\n\n        private checkParameterListAcessibilityModifiers(node: ParameterListSyntax): bool {\n            // Only constructor parameters can have public/private modifiers.  Also, the constructor\n            // needs to have a body, and it can\'t be in an ambient context.\n            if (this.currentConstructor !== null &&\n                this.currentConstructor.parameterList === node &&\n                this.currentConstructor.block &&\n                !this.inAmbientDeclaration) {\n\n                return false;\n            }\n\n            var parameterFullStart = this.childFullStart(node, node.parameters);\n\n            for (var i = 0, n = node.parameters.childCount(); i < n; i++) {\n                var nodeOrToken = node.parameters.childAt(i);\n                if (i % 2 === 0) {\n                    var parameter = <ParameterSyntax>node.parameters.childAt(i);\n\n                    if (parameter.publicOrPrivateKeyword) {\n                        var keywordFullStart = parameterFullStart + Syntax.childOffset(parameter, parameter.publicOrPrivateKeyword);\n                        this.pushDiagnostic1(keywordFullStart, parameter.publicOrPrivateKeyword,\n                            DiagnosticCode.Overload_and_ambient_signatures_cannot_specify_parameter_properties);\n                    }\n                }\n\n                parameterFullStart += nodeOrToken.fullWidth();\n            }\n\n            return false;\n        }\n\n        private visitParameterList(node: ParameterListSyntax): void {\n            if (this.checkParameterListAcessibilityModifiers(node) ||\n                this.checkParameterListOrder(node)) {\n\n                this.skip(node);\n                return;\n            }\n\n            super.visitParameterList(node);\n        }\n\n        private checkIndexSignatureParameter(node: IndexSignatureSyntax): bool {\n            var parameterFullStart = this.childFullStart(node, node.parameter);\n            var parameter = node.parameter;\n\n            if (parameter.dotDotDotToken) {\n                this.pushDiagnostic1(\n                    parameterFullStart, parameter,\n                    DiagnosticCode.Index_signatures_cannot_have_rest_parameters);\n                return true;\n            }\n            else if (parameter.publicOrPrivateKeyword) {\n                this.pushDiagnostic1(\n                    parameterFullStart, parameter,\n                    DiagnosticCode.Index_signature_parameter_cannot_have_accessibility_modifierss);\n                return true;\n            }\n            else if (parameter.questionToken) {\n                this.pushDiagnostic1(\n                    parameterFullStart, parameter,\n                    DiagnosticCode.Index_signature_parameter_cannot_have_a_question_mark);\n                return true;\n            }\n            else if (parameter.equalsValueClause) {\n                this.pushDiagnostic1(\n                    parameterFullStart, parameter,\n                    DiagnosticCode.Index_signature_parameter_cannot_have_an_initializer);\n                return true;\n            }\n            else if (!parameter.typeAnnotation) {\n                this.pushDiagnostic1(\n                    parameterFullStart, parameter,\n                    DiagnosticCode.Index_signature_parameter_must_have_a_type_annotation);\n                return true;\n            }\n            else if (parameter.typeAnnotation.type.kind() !== SyntaxKind.StringKeyword &&\n                     parameter.typeAnnotation.type.kind() !== SyntaxKind.NumberKeyword) {\n                this.pushDiagnostic1(\n                    parameterFullStart, parameter,\n                    DiagnosticCode.Index_signature_parameter_type_must_be__string__or__number_);\n                return true;\n            }\n\n            return false;\n        }\n\n        private visitIndexSignature(node: IndexSignatureSyntax): void {\n            if (this.checkIndexSignatureParameter(node)) {\n                this.skip(node);\n                return;\n            }\n\n            if (!node.typeAnnotation) {\n                this.pushDiagnostic1(this.position(), node,\n                    DiagnosticCode.Index_signature_must_have_a_type_annotation);\n                this.skip(node);\n                return;\n            }\n\n            super.visitIndexSignature(node);\n        }\n\n        private checkClassDeclarationHeritageClauses(node: ClassDeclarationSyntax): bool {\n            var heritageClauseFullStart = this.childFullStart(node, node.heritageClauses);\n\n            var seenExtendsClause = false;\n            var seenImplementsClause = false;\n\n            for (var i = 0, n = node.heritageClauses.childCount(); i < n; i++) {\n                Debug.assert(i <= 2);\n                var heritageClause = <HeritageClauseSyntax>node.heritageClauses.childAt(i);\n\n                if (heritageClause.extendsOrImplementsKeyword.tokenKind === SyntaxKind.ExtendsKeyword) {\n                    if (seenExtendsClause) {\n                        this.pushDiagnostic1(heritageClauseFullStart, heritageClause,\n                            DiagnosticCode._extends__clause_already_seen);\n                        return true;\n                    }\n\n                    if (seenImplementsClause) {\n                        this.pushDiagnostic1(heritageClauseFullStart, heritageClause,\n                            DiagnosticCode._extends__clause_must_precede__implements__clause);\n                        return true;\n                    }\n\n                    if (heritageClause.typeNames.nonSeparatorCount() > 1) {\n                        this.pushDiagnostic1(heritageClauseFullStart, heritageClause,\n                            DiagnosticCode.Class_can_only_extend_single_type);\n                        return true;\n                    }\n\n                    seenExtendsClause = true;\n                }\n                else {\n                    Debug.assert(heritageClause.extendsOrImplementsKeyword.tokenKind === SyntaxKind.ImplementsKeyword);\n                    if (seenImplementsClause) {\n                        this.pushDiagnostic1(heritageClauseFullStart, heritageClause,\n                            DiagnosticCode._implements__clause_already_seen);\n                        return true;\n                    }\n\n                    seenImplementsClause = true;\n                }\n\n                heritageClauseFullStart += heritageClause.fullWidth();\n            }\n\n            return false;\n        }\n\n        private checkForDisallowedDeclareModifier(modifiers: ISyntaxList): bool {\n            if (this.inAmbientDeclaration) {\n                // If we\'re already in an ambient declaration, then \'declare\' is not allowed.\n                var declareToken = this.getToken(modifiers, SyntaxKind.DeclareKeyword);\n\n                if (declareToken) {\n                    this.pushDiagnostic1(this.childFullStart(modifiers, declareToken), declareToken,\n                        DiagnosticCode._declare__modifier_not_allowed_for_code_already_in_an_ambient_context);\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private checkForRequiredDeclareModifier(moduleElement: IModuleElementSyntax,\n                                                typeKeyword: ISyntaxElement,\n                                                modifiers: ISyntaxList): bool {\n            if (!this.inAmbientDeclaration && this.isDeclaration) {\n                // We\'re at the top level in a declaration file, a \'declare\' modifiers is required\n                // on most module elements.\n                if (!this.containsToken(modifiers, SyntaxKind.DeclareKeyword)) {\n                    this.pushDiagnostic1(this.childFullStart(moduleElement, typeKeyword), typeKeyword.firstToken(),\n                        DiagnosticCode._declare__modifier_required_for_top_level_element);\n                    return true;\n                }\n            }\n        }\n\n        private checkClassOverloads(node: ClassDeclarationSyntax): bool {\n            if (!this.inAmbientDeclaration && !this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword)) {\n                var classElementFullStart = this.childFullStart(node, node.classElements);\n\n                var inFunctionOverloadChain = false;\n                var inConstructorOverloadChain = false;\n\n                var functionOverloadChainName: string = null;\n                var memberFunctionDeclaration: MemberFunctionDeclarationSyntax = null;\n\n                for (var i = 0, n = node.classElements.childCount(); i < n; i++) {\n                    var classElement = <IClassElementSyntax>node.classElements.childAt(i);\n                    var lastElement = i === (n - 1);\n\n                    if (inFunctionOverloadChain) {\n                        if (classElement.kind() !== SyntaxKind.MemberFunctionDeclaration) {\n                            this.pushDiagnostic1(classElementFullStart, classElement.firstToken(),\n                                DiagnosticCode.Function_implementation_expected);\n                            return true;\n                        }\n\n                        memberFunctionDeclaration = <MemberFunctionDeclarationSyntax>classElement;\n                        if (memberFunctionDeclaration.propertyName.valueText() !== functionOverloadChainName) {\n                            var propertyNameFullStart = classElementFullStart + Syntax.childOffset(classElement, memberFunctionDeclaration.propertyName);\n                            this.pushDiagnostic1(propertyNameFullStart, memberFunctionDeclaration.propertyName,\n                                DiagnosticCode.Function_overload_name_must_be__0_, [functionOverloadChainName]);\n                            return true;\n                        }\n                    }\n                    else if (inConstructorOverloadChain) {\n                        if (classElement.kind() !== SyntaxKind.ConstructorDeclaration) {\n                            this.pushDiagnostic1(classElementFullStart, classElement.firstToken(),\n                                DiagnosticCode.Constructor_implementation_expected);\n                            return true;\n                        }\n                    }\n\n                    if (classElement.kind() === SyntaxKind.MemberFunctionDeclaration) {\n                        memberFunctionDeclaration = <MemberFunctionDeclarationSyntax>classElement;\n\n                        inFunctionOverloadChain = memberFunctionDeclaration.block === null;\n                        functionOverloadChainName = memberFunctionDeclaration.propertyName.valueText();\n\n                        if (lastElement && inFunctionOverloadChain) {\n                            this.pushDiagnostic1(classElementFullStart, classElement.firstToken(),\n                                DiagnosticCode.Function_implementation_expected);\n                            return true;\n                        }\n                    }\n                    else if (classElement.kind() === SyntaxKind.ConstructorDeclaration) {\n                        var constructorDeclaration = <ConstructorDeclarationSyntax>classElement;\n\n                        inConstructorOverloadChain = constructorDeclaration.block === null;\n                        if (lastElement && inConstructorOverloadChain) {\n                            this.pushDiagnostic1(classElementFullStart, classElement.firstToken(),\n                                DiagnosticCode.Constructor_implementation_expected);\n                            return true;\n                        }\n                    }\n\n                    classElementFullStart += classElement.fullWidth();\n                }\n            }\n\n            return false;\n        }\n\n        private visitClassDeclaration(node: ClassDeclarationSyntax): void {\n            if (this.checkForDisallowedDeclareModifier(node.modifiers) ||\n                this.checkForRequiredDeclareModifier(node, node.classKeyword, node.modifiers) ||\n                this.checkModuleElementModifiers(node.modifiers) ||\n                this.checkClassDeclarationHeritageClauses(node) ||\n                this.checkClassOverloads(node)) {\n\n                this.skip(node);\n                return;\n            }\n\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = this.inAmbientDeclaration || this.isDeclaration || this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword);\n            super.visitClassDeclaration(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        private checkInterfaceDeclarationHeritageClauses(node: InterfaceDeclarationSyntax): bool {\n            var heritageClauseFullStart = this.childFullStart(node, node.heritageClauses);\n\n            var seenExtendsClause = false;\n\n            for (var i = 0, n = node.heritageClauses.childCount(); i < n; i++) {\n                Debug.assert(i <= 1);\n                var heritageClause = <HeritageClauseSyntax>node.heritageClauses.childAt(i);\n\n                if (heritageClause.extendsOrImplementsKeyword.tokenKind === SyntaxKind.ExtendsKeyword) {\n                    if (seenExtendsClause) {\n                        this.pushDiagnostic1(heritageClauseFullStart, heritageClause,\n                            DiagnosticCode._extends__clause_already_seen);\n                        return true;\n                    }\n\n                    seenExtendsClause = true;\n                }\n                else {\n                    Debug.assert(heritageClause.extendsOrImplementsKeyword.tokenKind === SyntaxKind.ImplementsKeyword);\n                    this.pushDiagnostic1(heritageClauseFullStart, heritageClause,\n                        DiagnosticCode.Interface_declaration_cannot_have__implements__clause);\n                    return true;\n                }\n\n                heritageClauseFullStart += heritageClause.fullWidth();\n            }\n\n            return false;\n        }\n\n        private checkInterfaceModifiers(modifiers: ISyntaxList): bool {\n            var modifierFullStart = this.position();\n\n            for (var i = 0, n = modifiers.childCount(); i < n; i++) {\n                var modifier = <ISyntaxToken>modifiers.childAt(i);\n                if (modifier.tokenKind === SyntaxKind.DeclareKeyword) {\n                    this.pushDiagnostic1(modifierFullStart, modifier,\n                        DiagnosticCode._declare__modifier_cannot_appear_on_an_interface_declaration);\n                    return true;\n                }\n\n                modifierFullStart += modifier.fullWidth();\n            }\n\n            return false;\n        }\n\n        private visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): void {\n            if (this.checkInterfaceModifiers(node.modifiers) ||\n                this.checkModuleElementModifiers(node.modifiers) ||\n                this.checkInterfaceDeclarationHeritageClauses(node)) {\n\n                this.skip(node);\n                return;\n            }\n\n            super.visitInterfaceDeclaration(node);\n        }\n\n        private checkClassElementModifiers(list: ISyntaxList): void {\n            var modifierFullStart = this.position();\n\n            var seenAccessibilityModifier = false;\n            var seenStaticModifier = false;\n\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                var modifier = <ISyntaxToken>list.childAt(i);\n                if (modifier.tokenKind === SyntaxKind.PublicKeyword ||\n                    modifier.tokenKind === SyntaxKind.PrivateKeyword) {\n\n                    if (seenAccessibilityModifier) {\n                        this.pushDiagnostic1(modifierFullStart, modifier,\n                            DiagnosticCode.Accessibility_modifier_already_seen);\n                        return;\n                    }\n\n                    if (seenStaticModifier) {\n                        var previousToken = <ISyntaxToken>list.childAt(i - 1);\n                        this.pushDiagnostic1(modifierFullStart, modifier,\n                            DiagnosticCode._0__modifier_must_precede__1__modifier, [modifier.text(), previousToken.text()]);\n                        return;\n                    }\n\n                    seenAccessibilityModifier = true;\n                }\n                else if (modifier.tokenKind === SyntaxKind.StaticKeyword) {\n                    if (seenStaticModifier) {\n                        this.pushDiagnostic1(modifierFullStart, modifier,\n                            DiagnosticCode._0__modifier_already_seen, [modifier.text()]);\n                        return;\n                    }\n\n                    seenStaticModifier = true;\n                }\n                else {\n                    this.pushDiagnostic1(modifierFullStart, modifier,\n                        DiagnosticCode._0__modifier_cannot_appear_on_a_class_element, [modifier.text()]);\n                    return;\n                }\n\n                modifierFullStart += modifier.fullWidth();\n            }\n        }\n\n        private visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): void {\n            this.checkClassElementModifiers(node.modifiers);\n\n            super.visitMemberVariableDeclaration(node);\n        }\n\n        private visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): void {\n            this.checkClassElementModifiers(node.modifiers);\n\n            super.visitMemberFunctionDeclaration(node);\n        }\n\n        private visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): void {\n            this.checkClassElementModifiers(node.modifiers);\n\n            super.visitGetMemberAccessorDeclaration(node);\n        }\n\n        private visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): void {\n            this.checkClassElementModifiers(node.modifiers);\n\n            super.visitSetMemberAccessorDeclaration(node);\n        }\n\n        private checkEnumDeclarationElements(node: EnumDeclarationSyntax): bool {\n            var enumElementFullStart = this.childFullStart(node, node.enumElements);\n            var seenExplicitMember = false;\n            for (var i = 0, n = node.enumElements.childCount(); i < n; i++) {\n                var nodeOrToken = node.enumElements.childAt(i);\n                if (i % 2 === 0) {\n                    var enumElement = <EnumElementSyntax>nodeOrToken;\n\n                    if (enumElement.equalsValueClause) {\n                        seenExplicitMember = true;\n                    }\n                    else if (seenExplicitMember) {\n                        this.pushDiagnostic1(enumElementFullStart, enumElement,\n                            DiagnosticCode.Enum_element_must_have_initializer);\n                        return true;\n                    }\n                }\n\n                enumElementFullStart += nodeOrToken.fullWidth();\n            }\n\n            return false;\n        }\n\n        private visitEnumDeclaration(node: EnumDeclarationSyntax): void {\n            if (this.checkForDisallowedDeclareModifier(node.modifiers) ||\n                this.checkForRequiredDeclareModifier(node, node.enumKeyword, node.modifiers) ||\n                this.checkModuleElementModifiers(node.modifiers) ||\n                this.checkEnumDeclarationElements(node)) {\n\n                this.skip(node);\n                return;\n            }\n\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = this.inAmbientDeclaration || this.isDeclaration || this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword);\n            super.visitEnumDeclaration(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        private visitInvocationExpression(node: InvocationExpressionSyntax): void {\n            if (node.expression.kind() === SyntaxKind.SuperKeyword &&\n                node.argumentList.typeArgumentList !== null) {\n                this.pushDiagnostic1(this.position(), node,\n                    DiagnosticCode._super__invocation_cannot_have_type_arguments);\n            }\n\n            super.visitInvocationExpression(node);\n        }\n\n        private checkModuleElementModifiers(modifiers: ISyntaxList): bool {\n            var modifierFullStart = this.position();\n            var seenExportModifier = false;\n            var seenDeclareModifier = false;\n\n            for (var i = 0, n = modifiers.childCount(); i < n; i++) {\n                var modifier = <ISyntaxToken>modifiers.childAt(i);\n                if (modifier.tokenKind === SyntaxKind.PublicKeyword ||\n                    modifier.tokenKind === SyntaxKind.PrivateKeyword ||\n                    modifier.tokenKind === SyntaxKind.StaticKeyword) {\n                    this.pushDiagnostic1(modifierFullStart, modifier,\n                        DiagnosticCode._0__modifier_cannot_appear_on_a_module_element, [modifier.text()]);\n                    return true;\n                }\n\n                if (modifier.tokenKind === SyntaxKind.DeclareKeyword) {\n                    if (seenDeclareModifier) {\n                        this.pushDiagnostic1(modifierFullStart, modifier,\n                            DiagnosticCode.Accessibility_modifier_already_seen);\n                        return;\n                    }\n\n                    if (seenExportModifier) {\n                        this.pushDiagnostic1(modifierFullStart, modifier,\n                            DiagnosticCode._0__modifier_must_precede__1__modifier,\n                            [SyntaxFacts.getText(SyntaxKind.DeclareKeyword), SyntaxFacts.getText(SyntaxKind.ExportKeyword)]);\n                        return;\n                    }\n\n                    seenDeclareModifier = true;\n                }\n                else if (modifier.tokenKind === SyntaxKind.ExportKeyword) {\n                    if (seenExportModifier) {\n                        this.pushDiagnostic1(modifierFullStart, modifier,\n                            DiagnosticCode._0__modifier_already_seen, [modifier.text()]);\n                        return;\n                    }\n\n                    seenExportModifier = true;\n                }\n\n                modifierFullStart += modifier.fullWidth();\n            }\n\n            return false;\n        }\n\n        private visitModuleDeclaration(node: ModuleDeclarationSyntax): void {\n            if (this.checkForDisallowedDeclareModifier(node.modifiers) ||\n                this.checkForRequiredDeclareModifier(node, node.moduleKeyword, node.modifiers) ||\n                this.checkModuleElementModifiers(node.modifiers)) {\n\n                this.skip(node);\n                return;\n            }\n\n            if (node.stringLiteral && !this.inAmbientDeclaration && !this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword)) {\n                var stringLiteralFullStart = this.childFullStart(node, node.stringLiteral);\n                this.pushDiagnostic1(stringLiteralFullStart, node.stringLiteral,\n                    DiagnosticCode.Non_ambient_modules_cannot_use_quoted_names);\n                this.skip(node);\n                return;\n            }\n\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = this.inAmbientDeclaration || this.isDeclaration || this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword);\n            super.visitModuleDeclaration(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        private visitBlock(node: BlockSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Implementations_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitBlock(node);\n        }\n\n        private visitBreakStatement(node: BreakStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node,\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitBreakStatement(node);\n        }\n\n        private visitContinueStatement(node: ContinueStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node,\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitContinueStatement(node);\n        }\n\n        private visitDebuggerStatement(node: DebuggerStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node,\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitDebuggerStatement(node);\n        }\n\n        private visitDoStatement(node: DoStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitDoStatement(node);\n        }\n\n        private visitEmptyStatement(node: EmptyStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node,\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitEmptyStatement(node);\n        }\n\n        private visitExpressionStatement(node: ExpressionStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node,\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitExpressionStatement(node);\n        }\n\n        private visitForInStatement(node: ForInStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitForInStatement(node);\n        }\n\n        private visitForStatement(node: ForStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitForStatement(node);\n        }\n\n        private visitIfStatement(node: IfStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitIfStatement(node);\n        }\n\n        private visitLabeledStatement(node: LabeledStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitLabeledStatement(node);\n        }\n\n        private visitReturnStatement(node: ReturnStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitReturnStatement(node);\n        }\n\n        private visitSwitchStatement(node: SwitchStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitSwitchStatement(node);\n        }\n\n        private visitThrowStatement(node: ThrowStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitThrowStatement(node);\n        }\n\n        private visitTryStatement(node: TryStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitTryStatement(node);\n        }\n\n        private visitWhileStatement(node: WhileStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitWhileStatement(node);\n        }\n\n        private visitWithStatement(node: WithStatementSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitWithStatement(node);\n        }\n\n        private visitFunctionDeclaration(node: FunctionDeclarationSyntax): void {\n            if (this.checkForDisallowedDeclareModifier(node.modifiers) ||\n                this.checkForRequiredDeclareModifier(node, node.functionKeyword, node.modifiers) ||\n                this.checkModuleElementModifiers(node.modifiers)) {\n\n                this.skip(node);\n                return;\n            }\n\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = this.inAmbientDeclaration || this.isDeclaration || this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword);\n            super.visitFunctionDeclaration(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        private visitVariableStatement(node: VariableStatementSyntax): void {\n            if (this.checkForDisallowedDeclareModifier(node.modifiers) ||\n                this.checkForRequiredDeclareModifier(node, node.variableDeclaration, node.modifiers) ||\n                this.checkModuleElementModifiers(node.modifiers)) {\n\n                this.skip(node);\n                return;\n            }\n\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = this.inAmbientDeclaration || this.isDeclaration || this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword);\n            super.visitVariableStatement(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        private visitObjectType(node: ObjectTypeSyntax): void {\n            // All code in an object type is implicitly ambient. (i.e. parameters can\'t have initializer, etc.)\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = true;\n            super.visitObjectType(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        private visitArrayType(node: ArrayTypeSyntax): void {\n            // All code in an object type is implicitly ambient. (i.e. parameters can\'t have initializer, etc.)\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = true;\n            super.visitArrayType(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        private visitFunctionType(node: FunctionTypeSyntax): void {\n            // All code in an object type is implicitly ambient. (i.e. parameters can\'t have initializer, etc.)\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = true;\n            super.visitFunctionType(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        private visitConstructorType(node: ConstructorTypeSyntax): void {\n            // All code in an object type is implicitly ambient. (i.e. parameters can\'t have initializer, etc.)\n            var savedInAmbientDeclaration = this.inAmbientDeclaration;\n            this.inAmbientDeclaration = true;\n            super.visitConstructorType(node);\n            this.inAmbientDeclaration = savedInAmbientDeclaration;\n        }\n\n        private visitEqualsValueClause(node: EqualsValueClauseSyntax): void {\n            if (this.inAmbientDeclaration) {\n                this.pushDiagnostic1(this.position(), node.firstToken(),\n                    DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts);\n                this.skip(node);\n                return;\n            }\n\n            super.visitEqualsValueClause(node);\n        }\n\n        private visitConstructorDeclaration(node: ConstructorDeclarationSyntax): void {\n            var savedCurrentConstructor = this.currentConstructor;\n            this.currentConstructor = node;\n            super.visitConstructorDeclaration(node);\n            this.currentConstructor = savedCurrentConstructor;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    class TextSpanWalker extends SyntaxWalker {\n        private _position: number = 0;\n\n        constructor(private textSpan: TextSpan) {\n            super();\n        }\n\n        public visitToken(token: ISyntaxToken): void {\n            this._position += token.fullWidth();\n        }\n\n        public visitNode(node: SyntaxNode): void {\n            var nodeSpan = new TextSpan(this.position(), node.fullWidth());\n\n            if (nodeSpan.intersectsWithTextSpan(this.textSpan)) {\n                node.accept(this);\n            }\n            else {\n                // We\'re skipping the node, so update our position accordingly.\n                this._position += node.fullWidth();\n            }\n        }\n\n        public position(): number {\n            return this._position;\n        }\n    }\n}\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export class Unicode {\n        // Unicode range maps\n        // REVIEW: These range maps have been extracted from the Unicode specifications, they might be missing values, and/or include \n        //         incorrect ranges. but for the most they seem to be correct. A more accurate and thorough review is needed.\n\n        /*\n            As per ECMAScript Language Specification 3th Edition, Section 7.6: Identifiers\n            IdentifierStart :: Can contain Unicode 3.0.0  categories �Uppercase letter (Lu)�, �Lowercase letter (Ll)�, �Titlecase letter (Lt)�, �Modifier letter (Lm)�, �Other letter (Lo)�, or �Letter number (Nl)�.\n            IdentifierPart :: Can contain IdentifierStart + Unicode 3.0.0  categories �Non-spacing mark (Mn)�, �Combining spacing mark (Mc)�, �Decimal number (Nd)�, or �Connector punctuation (Pc)�.\n                        \n            Codepoint ranges for ES3 Identifiers are extracted from the Unicode 3.0.0 specification at:\n            http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\n        */\n        static unicodeES3IdentifierStart = [\n            170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n            1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611,\n            2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970,\n            2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517,\n            3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138,\n            4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885,\n            4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147,\n            8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588,\n            12593, 12686, 12704, 12727, 13312, 13312, 19893, 19893, 19968, 19968, 40869, 40869, 40960, 42124, 44032, 44032, 55203, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967,\n            65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500\n        ];\n\n        static unicodeES3IdentifierPart = [\n            768, 846, 864, 866, 1155, 1158, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1611, 1621, 1632, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 2305, 2307, 2364, 2364, 2366, 2381, 2385, 2388, 2402, 2403, 2406, 2415, 2433, 2435, 2492, 2492,\n            2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 2562, 2562, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2662, 2673, 2689, 2691, 2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2790, 2799, 2817, 2819, 2876, 2876, 2878, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2918, 2927, 2946, 2947, 3006, 3010, 3014, 3016,\n            3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3174, 3183, 3202, 3203, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3302, 3311, 3330, 3331, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3633, 3633,\n            3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903, 3953, 3972, 3974, 3975, 3984, 3991, 3993, 4028, 4038, 4038, 4140, 4146, 4150, 4153, 4160, 4169, 4182, 4185, 4969, 4977, 6068, 6099, 6112, 6121, 6160, 6169, 6313, 6313,\n            8255, 8256, 8400, 8412, 8417, 8417, 12330, 12335, 12441, 12442, 12539, 12539, 64286, 64286, 65056, 65059, 65075, 65076, 65101, 65103, 65296, 65305, 65343, 65343, 65381, 65381\n        ];\n\n\n        /*\n            As per ECMAScript Language Specification 5th Edition, Section 7.6: Identifier Names and Identifiers\n            IdentifierStart :: Can contain Unicode 6.2  categories �Uppercase letter (Lu)�, �Lowercase letter (Ll)�, �Titlecase letter (Lt)�, �Modifier letter (Lm)�, �Other letter (Lo)�, or �Letter number (Nl)�.\n            IdentifierPart :: Can contain IdentifierStart + Unicode 6.2  categories �Non-spacing mark (Mn)�, �Combining spacing mark (Mc)�, �Decimal number (Nd)�, �Connector punctuation (Pc)�, <ZWNJ>, or <ZWJ>.\n                        \n            Codepoint ranges for ES5 Identifiers are extracted from the Unicode 6.2 specification at:\n            http://www.unicode.org/Public/6.2.0/ucd/UnicodeData.txt\n        */\n        static unicodeES5IdentifierStart = [\n            170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775,\n            1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489,\n            2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864,\n            2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n            3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743,\n            3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680,\n            4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000,\n            6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957,\n            7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486,\n            8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726,\n            11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 13312, 19893, 19893, 19968, 19968, 40908, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527,\n            42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560,\n            43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 44032, 55203, 55203, 55216, 55238, 55243, 55291,\n            63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487,\n            65490, 65495, 65498, 65500\n        ];\n\n        static unicodeES5IdentifierPart = [\n            768, 879, 1155, 1159, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1552, 1562, 1611, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 1984, 1993, 2027, 2035, 2070, 2073, 2075, 2083, 2085, 2087, 2089, 2093, 2137, 2139, 2276, 2302, 2304, 2307, 2362, 2364,\n            2366, 2383, 2385, 2391, 2402, 2403, 2406, 2415, 2433, 2435, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2534, 2543, 2561, 2563, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2662, 2673, 2677, 2677, 2689, 2691, 2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2786, 2787, 2790, 2799, 2817, 2819,\n            2876, 2876, 2878, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2914, 2915, 2918, 2927, 2946, 2946, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3046, 3055, 3073, 3075, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3170, 3171, 3174, 3183, 3202, 3203, 3260, 3260, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3298, 3299, 3302, 3311,\n            3330, 3331, 3390, 3396, 3398, 3400, 3402, 3405, 3415, 3415, 3426, 3427, 3430, 3439, 3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3633, 3633, 3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3769, 3771, 3772, 3784, 3789, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903,\n            3953, 3972, 3974, 3975, 3981, 3991, 3993, 4028, 4038, 4038, 4139, 4158, 4160, 4169, 4182, 4185, 4190, 4192, 4194, 4196, 4199, 4205, 4209, 4212, 4226, 4237, 4239, 4253, 4957, 4959, 5906, 5908, 5938, 5940, 5970, 5971, 6002, 6003, 6068, 6099, 6109, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6313, 6313, 6432, 6443, 6448, 6459, 6470, 6479,\n            6576, 6592, 6600, 6601, 6608, 6617, 6679, 6683, 6741, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6912, 6916, 6964, 6980, 6992, 7001, 7019, 7027, 7040, 7042, 7073, 7085, 7088, 7097, 7142, 7155, 7204, 7223, 7232, 7241, 7248, 7257, 7376, 7378, 7380, 7400, 7405, 7405, 7410, 7412, 7616, 7654, 7676, 7679, 8204, 8205, 8255, 8256, 8276, 8276,\n            8400, 8412, 8417, 8417, 8421, 8432, 11503, 11505, 11647, 11647, 11744, 11775, 12330, 12335, 12441, 12442, 42528, 42537, 42607, 42607, 42612, 42621, 42655, 42655, 42736, 42737, 43010, 43010, 43014, 43014, 43019, 43019, 43043, 43047, 43136, 43137, 43188, 43204, 43216, 43225, 43232, 43249, 43264, 43273, 43302, 43309, 43335, 43347,\n            43392, 43395, 43443, 43456, 43472, 43481, 43561, 43574, 43587, 43587, 43596, 43597, 43600, 43609, 43643, 43643, 43696, 43696, 43698, 43700, 43703, 43704, 43710, 43711, 43713, 43713, 43755, 43759, 43765, 43766, 44003, 44010, 44012, 44013, 44016, 44025, 64286, 64286, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103,\n            65296, 65305, 65343, 65343\n        ];\n\n        static lookupInUnicodeMap(code: number, map: number[]): bool {\n            // Bail out quickly if it couldn\'t possibly be in the map.\n            if (code < map[0]) {\n                return false;\n            }\n\n            // Perform binary search in one of the unicode range maps\n            var lo: number = 0;\n            var hi: number = map.length;\n            var mid: number;\n\n            while (lo + 1 < hi) {\n                mid = lo + (hi - lo) / 2;\n                // mid has to be even to catch a range\'s beginning\n                mid -= mid % 2;\n                if (map[mid] <= code && code <= map[mid + 1]) {\n                    return true;\n                }\n\n                if (code < map[mid]) {\n                    hi = mid;\n                }\n                else {\n                    lo = mid + 2;\n                }\n            }\n\n            return false;\n        }\n\n        public static isIdentifierStart(code: number, languageVersion: LanguageVersion) {\n            if (languageVersion === LanguageVersion.EcmaScript3) {\n                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES3IdentifierStart);\n            }\n            else if (languageVersion === LanguageVersion.EcmaScript5) {\n                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES5IdentifierStart);\n            }\n            else {\n                throw Errors.argumentOutOfRange(\"languageVersion\");\n            }\n        }\n\n        public static isIdentifierPart(code: number, languageVersion: LanguageVersion) {\n            if (languageVersion === LanguageVersion.EcmaScript3) {\n                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES3IdentifierPart);\n            }\n            else if (languageVersion === LanguageVersion.EcmaScript5) {\n                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES5IdentifierPart);\n            }\n            else {\n                throw Errors.argumentOutOfRange(\"languageVersion\");\n            }\n        }\n    }\n}\n///<reference path=\'..\\Text\\References.ts\' />\n\n///<reference path=\'..\\..\\harness\\external\\json2stringify.ts\' />\n///<reference path=\'CharacterInfo.ts\' />\n///<reference path=\'Constants.ts\' />\n///<reference path=\'Diagnostic.ts\' />\n///<reference path=\'FormattingOptions.ts\' />\n///<reference path=\'Indentation.ts\' />\n///<reference path=\'ISeparatedSyntaxList.ts\' />\n///<reference path=\'ISyntaxElement.ts\' />\n///<reference path=\'ISyntaxList.ts\' />\n///<reference path=\'ISyntaxNodeOrToken.ts\' />\n///<reference path=\'ISyntaxToken.ts\' />\n///<reference path=\'ISyntaxTrivia.ts\' />\n///<reference path=\'ISyntaxTriviaList.ts\' />\n///<reference path=\'LanguageVersion.ts\' />\n///<reference path=\'ParseOptions.ts\' />\n///<reference path=\'PositionedElement.ts\' />\n///<reference path=\'Scanner.ts\' />\n///<reference path=\'ScannerUtilities.generated.ts\' />\n///<reference path=\'SeparatedSyntaxList.ts\' />\n///<reference path=\'SlidingWindow.ts\' />\n///<reference path=\'Strings.ts\' />\n///<reference path=\'Syntax.ts\' />\n///<reference path=\'SyntaxDiagnostic.ts\' />\n///<reference path=\'SyntaxFactory.generated.ts\' />\n///<reference path=\'SyntaxFacts.ts\' />\n///<reference path=\'SyntaxFacts2.ts\' />\n///<reference path=\'SyntaxKind.ts\' />\n///<reference path=\'SyntaxList.ts\' />\n///<reference path=\'SyntaxNode.ts\' />\n///<reference path=\'SyntaxNodes.generated.ts\' />\n///<reference path=\'SyntaxRewriter.generated.ts\' />\n\n// SyntaxDedenter depends on SyntaxRewriter\n///<reference path=\'SyntaxDedenter.ts\' />\n// SyntaxIndenter depends on SyntaxRewriter\n///<reference path=\'SyntaxIndenter.ts\' />\n\n///<reference path=\'SyntaxToken.generated.ts\' />\n///<reference path=\'SyntaxToken.ts\' />\n///<reference path=\'SyntaxTokenReplacer.ts\' />\n///<reference path=\'SyntaxTrivia.ts\' />\n///<reference path=\'SyntaxTriviaList.ts\' />\n///<reference path=\'SyntaxUtilities.ts\' />\n///<reference path=\'SyntaxVisitor.generated.ts\' />\n///<reference path=\'SyntaxWalker.generated.ts\' />\n\n// PositionTrackingWalker depends on SyntaxWalker\n///<reference path=\'PositionTrackingWalker.ts\' />\n\n// SyntaxInformationMap depends on SyntaxWalker\n///<reference path=\'SyntaxInformationMap.ts\' />\n\n// SyntaxInformationMap depends on SyntaxWalker\n///<reference path=\'SyntaxNodeInvariantsChecker.ts\' />\n\n// DepthLimitedWalker depends on PositionTrackingWalker\n///<reference path=\'DepthLimitedWalker.ts\' />\n\n// Parser depends on PositionTrackingWalker\n///<reference path=\'Parser.ts\' />\n\n// SyntaxTree depends on PositionTrackingWalker\n///<reference path=\'SyntaxTree.ts\' />\n\n///<reference path=\'TextSpanWalker.ts\' />\n///<reference path=\'Unicode.ts\' />\n///<reference path=\'References.ts\' />\n\nmodule TypeScript {\n    export interface ISyntaxNodeOrToken extends ISyntaxElement {\n        withLeadingTrivia(leadingTrivia: ISyntaxTriviaList): ISyntaxNodeOrToken;\n        withTrailingTrivia(trailingTrivia: ISyntaxTriviaList): ISyntaxNodeOrToken;\n\n        accept(visitor: ISyntaxVisitor): any;\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export class DataMap {\n        public map: any = {};\n\n        public link(id: string, data: any) {\n            this.map[id] = data;\n        }\n\n        public unlink(id: string) {\n            this.map[id] = undefined;\n        }\n\n        //public unlinkChildren(ast:AST) {\n        //    TypeScript.getAstWalkerFactory().walk(ast, (ast: AST, parent: AST): AST => { this.unlink(ast); });\n        //}\n\n        public read(id: string) {\n            return this.map[id];\n        }\n\n        public flush() {\n            this.map = {};\n        }\n\n        public unpatch() { return null; }\n    }\n\n    export class PatchedDataMap extends DataMap {\n        public diffs: any = {};\n\n        constructor(public parent: DataMap) {\n            super();\n        }\n\n        public link(id: string, data: any) {\n            this.diffs[id] = data;\n        }\n\n        public unlink(id: string) {\n            this.diffs[id] = undefined;\n        }\n\n        public read(id: string) {\n\n            var data = this.diffs[id];\n\n            if (data) {\n                return data;\n            }\n\n            return this.parent.read(id);\n        }\n\n        public flush() {\n            this.diffs = {};\n        }\n\n        public unpatch() {\n            this.flush();\n            return this.parent;\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n\n    export enum PullElementFlags {\n        None = 0,\n        Exported = 1,\n        Private = 1 << 1,\n        Public = 1 << 2,\n        Ambient = 1 << 3,\n        Static = 1 << 4,\n        GetAccessor = 1 << 5,\n        SetAccessor = 1 << 6,\n        Optional = 1 << 7,\n        Call = 1 << 8,\n        Constructor = 1 << 9,\n        Index = 1 << 10,\n        Signature = 1 << 11,\n        Enum = 1 << 12,\n        FatArrow = 1 << 13,\n\n        ClassConstructorVariable = 1 << 14,\n        InitializedModule = 1 << 15,\n        InitializedDynamicModule = 1 << 16,\n\n        MustCaptureThis = 1 << 17,\n        Constant = 1 << 18,\n\n        ExpressionElement = 1 << 19,\n\n        ImplicitVariable = ClassConstructorVariable | InitializedModule | InitializedDynamicModule,\n        SomeInitializedModule = InitializedModule | InitializedDynamicModule,\n    }\n\n    export enum PullElementKind {\n        None = 0,\n\n        Script = 1,\n        Global = 1 << 1,\n        Primitive = 1 << 2,\n\n        Container = 1 << 3,\n        Class = 1 << 4,\n        Interface = 1 << 5,\n        DynamicModule = 1 << 6,\n        Enum = 1 << 7,\n        Array = 1 << 8,\n        TypeAlias = 1 << 9,\n        ObjectLiteral = 1 << 10,\n\n        Variable = 1 << 11,\n        Parameter = 1 << 12,\n        Property = 1 << 13,\n        TypeParameter = 1 << 14,\n\n        Function = 1 << 15,\n        ConstructorMethod = 1 << 16,\n        Method = 1 << 17,\n        FunctionExpression = 1 << 18,\n\n        GetAccessor = 1 << 19,\n        SetAccessor = 1 << 20,\n\n        CallSignature = 1 << 21,\n        ConstructSignature = 1 << 22,\n        IndexSignature = 1 << 23,\n\n        ObjectType = 1 << 24,\n        FunctionType = 1 << 25,\n        ConstructorType = 1 << 26,\n\n        EnumMember = 1 << 27,\n        ErrorType = 1 << 28,\n\n        Expression = 1 << 29,\n\n        SomeFunction = Function | ConstructorMethod | Method | FunctionExpression | GetAccessor | SetAccessor | CallSignature | ConstructSignature | IndexSignature,\n\n        // Warning: SomeValue and SomeType (along with their constituents) must be disjoint\n        SomeValue = Variable | Parameter | Property | EnumMember | SomeFunction,\n\n        SomeType = Script | Global | Primitive | Container | Class | Interface | DynamicModule |\n                    Enum | Array | TypeAlias | ObjectType | FunctionType | ConstructorType | TypeParameter | ErrorType,\n\n        SomeContainer = Container | DynamicModule,\n\n        SomeSignature = CallSignature | ConstructSignature | IndexSignature,\n\n        SomeAccessor = GetAccessor | SetAccessor,\n\n        SomeLHS = Variable | Property | Parameter | SetAccessor | Method,\n    }\n\n    export enum SymbolLinkKind {\n        TypedAs,\n        ContextuallyTypedAs,\n        ProvidesInferredType,\n        ArrayType,\n\n        ArrayOf,\n\n        PublicMember,\n        PrivateMember,\n\n        ConstructorMethod,\n\n        Aliases,\n\n        ContainedBy,\n\n        Extends,\n        Implements,\n\n        Parameter,\n        ReturnType,\n\n        CallSignature,\n        ConstructSignature,\n        IndexSignature,\n\n        TypeParameter,\n        TypeArgument,\n        TypeParameterSpecializedTo,\n        SpecializedTo,\n\n        TypeConstraint,\n\n        ContributesToExpression,\n\n        GetterFunction,\n        SetterFunction,\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export var pullDeclID = 0;\n    export var lastBoundPullDeclId = 0;\n\n    export class PullDecl {\n        private declType: PullElementKind;\n\n        private declName: string;\n\n        private symbol: PullSymbol = null;\n\n        // use this to store the signature symbol for a function declaration\n        private signatureSymbol: PullSignatureSymbol = null;\n\n        private childDecls: PullDecl[] = [];\n        private typeParameters: PullDecl[] = [];\n\n        // Mappings from names to decls.  Public only for diffing purposes.\n        public childDeclTypeCache: any = new BlockIntrinsics();\n        public childDeclValueCache: any = new BlockIntrinsics();\n        public childDeclTypeParameterCache: any = new BlockIntrinsics();\n\n        private declID = pullDeclID++;\n\n        private declFlags: PullElementFlags = PullElementFlags.None;\n\n        private span: TextSpan;\n\n        private scriptName: string;\n\n        private diagnostics: IDiagnostic[] = null;\n\n        private parentDecl: PullDecl = null;\n\n        // In the case of classes, initialized modules and enums, we need to track the implicit\n        // value set to the constructor or instance type.  We can use this field to make sure that on\n        // edits and updates we don\'t leak the val decl or symbol\n        private synthesizedValDecl: PullDecl = null;\n\n        constructor(declName: string, declType: PullElementKind, declFlags: PullElementFlags, span: TextSpan, scriptName: string) {\n            this.declName = declName;\n            this.declType = declType;\n            this.declFlags = declFlags;\n            this.span = span;\n            this.scriptName = scriptName;\n        }\n\n        public getDeclID() { return this.declID; }\n\n        public getName() { return this.declName; }\n        public getKind() { return this.declType }\n\n        public setSymbol(symbol: PullSymbol) { this.symbol = symbol; }\n        public getSymbol(): PullSymbol { return this.symbol; }\n\n        public setSignatureSymbol(signature: PullSignatureSymbol): void { this.signatureSymbol = signature; }\n        public getSignatureSymbol(): PullSignatureSymbol { return this.signatureSymbol; }\n\n        public getFlags(): PullElementFlags { return this.declFlags; }\n        public setFlags(flags: PullElementFlags) { this.declFlags = flags; }\n\n        public getSpan(): TextSpan { return this.span; }\n        public setSpan(span: TextSpan) { this.span = span; }\n\n        public getScriptName(): string { return this.scriptName; }\n\n        public setValueDecl(valDecl: PullDecl) { this.synthesizedValDecl = valDecl; }\n        public getValueDecl() { return this.synthesizedValDecl; }\n\n        public isEqual(other: PullDecl) {\n            return  (this.declName == other.declName) &&\n                    (this.declType == other.declType) &&\n                    (this.declFlags == other.declFlags) &&\n                    (this.scriptName == other.scriptName) &&\n                    (this.span.start() == other.span.start()) &&\n                    (this.span.end() == other.span.end());\n        }\n\n        public getParentDecl(): PullDecl {\n            return this.parentDecl;\n        }\n\n        public setParentDecl(parentDecl: PullDecl) {\n            this.parentDecl = parentDecl;\n        }\n\n        public addDiagnostic(diagnostic: IDiagnostic) {\n            if (!this.diagnostics) {\n                this.diagnostics = [];\n            }\n\n            //error.adjustOffset(this.span.start());\n\n            this.diagnostics[this.diagnostics.length] = diagnostic;\n        }\n\n        public getDiagnostics(): IDiagnostic[] {\n            return this.diagnostics;\n        }\n\n        public setErrors(diagnostics: PullDiagnostic[]) {\n            if (diagnostics) {\n                this.diagnostics = [];\n\n                // adjust the spans as we parent the errors to the new decl\n                for (var i = 0; i < diagnostics.length; i++) {\n                    diagnostics[i].adjustOffset(this.span.start());\n                    this.diagnostics[this.diagnostics.length] = diagnostics[i];\n                }\n            }\n        }\n\n        public resetErrors() {\n            this.diagnostics = [];\n        }\n\n        private getChildDeclCache(declKind: PullElementKind): any {\n            return declKind === PullElementKind.TypeParameter\n                ? this.childDeclTypeParameterCache\n                : hasFlag(declKind, PullElementKind.SomeType)\n                    ? this.childDeclTypeCache\n                    : this.childDeclValueCache;\n        }\n\n        // returns \'true\' if the child decl was successfully added\n        // (\'false\' is returned if addIfDuplicate is false and there is a collision)\n        public addChildDecl(childDecl: PullDecl): void {\n            // check if decl exists\n            // merge if necessary\n\n            if (childDecl.getKind() === PullElementKind.TypeParameter) {\n                this.typeParameters[this.typeParameters.length] = childDecl;\n            }\n            else {\n                this.childDecls[this.childDecls.length] = childDecl;\n            }\n\n            // add to the appropriate cache\n            var declName = childDecl.getName();\n            var cache = this.getChildDeclCache(childDecl.getKind());\n            var childrenOfName = <PullDecl[]>cache[declName];\n            if (!childrenOfName) {\n                childrenOfName = [];\n            }\n\n            childrenOfName.push(childDecl);\n            cache[declName] = childrenOfName;\n        }\n\n        //public lookupChildDecls(declName: string, declKind: PullElementKind): PullDecl[] {\n        //    // find the decl with the optional type\n        //    // if necessary, cache the decl\n        //    // may be wise to return a chain of decls, or take a parent decl as a parameter\n        //    var cache = this.getChildDeclCache(declKind);\n        //    var childrenOfName = <PullDecl[]>cache[declName];\n\n        //    return childrenOfName ? childrenOfName : [];\n        //}\n\n        // Search for a child decl with the given name.  \'isType\' is used to specify whether or \n        // not child types or child values are returned.\n        public searchChildDecls(declName: string, isType: bool): PullDecl[]{\n             // find the decl with the optional type\n             // if necessary, cache the decl\n             // may be wise to return a chain of decls, or take a parent decl as a parameter\n            var cache = isType ? this.childDeclTypeCache : this.childDeclValueCache;\n            var cacheVal = <PullDecl[]>cache[declName];\n\n            if (cacheVal) {\n                return cacheVal;\n            }\n            else {\n                // If we didn\'t find it, and they were searchign for types, then also check the \n                // type parameter cache.\n                if (isType) {\n                    cacheVal = this.childDeclTypeParameterCache[declName];\n\n                    if (cacheVal) {\n                        return cacheVal;\n                    }\n                }\n\n                return [];\n            }\n         }\n\n        public getChildDecls() { return this.childDecls; }\n        public getTypeParameters() { return this.typeParameters; }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export var pullSymbolID = 0\n    export var lastBoundPullSymbolID = 0;\n    export var globalTyvarID = 0;\n\n    export class PullSymbol {\n\n        // private state\n        private pullSymbolID = pullSymbolID++;\n\n        private outgoingLinks: LinkList = new LinkList();\n        private incomingLinks: LinkList = new LinkList();\n        private declarations: LinkList = new LinkList();\n\n        private name: string;\n\n        private cachedPathIDs: any = {};\n\n        private declKind: PullElementKind;\n\n        // caches - free these on invalidate\n        private cachedContainerLink: PullSymbolLink = null;\n        private cachedTypeLink: PullSymbolLink = null;\n\n        private hasBeenResolved = false;\n\n        private isOptional = false;\n\n        private inResolution = false;\n\n        private isSynthesized = false;\n\n        private resolvingTypeArguments = false;\n\n        private isBound = false;\n\n        private rebindingID = 0;\n\n        private isVarArg = false;\n\n        private isSpecialized = false;\n        private isBeingSpecialized = false;\n\n        public typeChangeUpdateVersion = -1;\n        public addUpdateVersion = -1;\n        public removeUpdateVersion = -1;\n\n        public docComments: string = null;\n\n        public isPrinting = false;\n\n        // public surface area\n        public getSymbolID() { return this.pullSymbolID; }\n\n        public isType() {\n            return (this.declKind & PullElementKind.SomeType) != 0;\n        }\n\n        public isSignature() {\n            return (this.declKind & PullElementKind.SomeSignature) != 0;\n        }\n\n        public isArray() {\n            return (this.declKind & PullElementKind.Array) != 0;\n        }\n\n        public isPrimitive() {\n            return this.declKind == PullElementKind.Primitive;\n        }\n\n        public isAccessor() {\n            return false;\n        }\n\n        constructor(name: string, declKind: PullElementKind) {\n            this.name = name;\n            this.declKind = declKind;\n        }\n\n        public isAlias() { return false; }\n        public isContainer() { return false; }        \n\n        public getName(scopeSymbol?: PullSymbol, useConstraintInName?: bool) { return this.name; }\n\n        public getKind() { return this.declKind; }\n        public setKind(declType: PullElementKind) { this.declKind = declType; }\n\n        public setIsOptional() { this.isOptional = true; }\n        public getIsOptional() { return this.isOptional; }\n\n        public getIsVarArg() { return this.isVarArg; }\n        public setIsVarArg() { this.isVarArg = true; }\n\n        public setIsSynthesized() { this.isSynthesized = true; }\n        public getIsSynthesized() { return this.isSynthesized; }\n\n        public setIsSpecialized() { this.isSpecialized = true; this.isBeingSpecialized = false; }\n        public getIsSpecialized() { return this.isSpecialized; }\n        public currentlyBeingSpecialized() { return this.isBeingSpecialized; }\n        public setIsBeingSpecialized() { this.isBeingSpecialized = true; }        \n\n        public setIsBound(rebindingID: number) {\n            this.isBound = true;\n            this.rebindingID = rebindingID;\n        }\n\n        public getRebindingID() {\n            return this.rebindingID;\n        }\n\n        public getIsBound() { return this.isBound; }\n\n        public addCacheID(cacheID: string) {\n            if (!this.cachedPathIDs[cacheID]) {\n                this.cachedPathIDs[cacheID] = true;\n            }\n        }\n\n        public invalidateCachedIDs(cache: any) {\n            for (var id in this.cachedPathIDs) {\n                if (cache[id]) {\n                    cache[id] = undefined;\n                }\n            }\n        }\n\n        // declaration methods\n        public addDeclaration(decl: PullDecl) { \n            Debug.assert(!!decl);\n            this.declarations.addItem(decl);\n        }\n\n        public getDeclarations() { return <PullDecl[]>this.declarations.find(d => d); }\n\n        public removeDeclaration(decl: PullDecl) { this.declarations.remove(d => d === decl); }\n\n        public updateDeclarations(map: (item: PullDecl, context: any) => void , context: any) {\n            this.declarations.update(map, context);\n        }\n\n        // link methods\n        public addOutgoingLink(linkTo: PullSymbol, kind: SymbolLinkKind) {\n            var link = new PullSymbolLink(this, linkTo, kind);\n            this.outgoingLinks.addItem(link);\n            linkTo.incomingLinks.addItem(link);\n\n            return link;\n        }\n\n        public findOutgoingLinks(p: (psl: PullSymbolLink) => bool) {\n            return <PullSymbolLink[]>this.outgoingLinks.find(p);\n        }\n\n        public findIncomingLinks(p: (psl: PullSymbolLink) => bool) {\n            return <PullSymbolLink[]>this.incomingLinks.find(p);\n        }\n\n        public removeOutgoingLink(link: PullSymbolLink) {\n            if (link) {\n                this.outgoingLinks.remove(p => p === link);\n\n                if (link.end.incomingLinks) {\n                    link.end.incomingLinks.remove(p => p === link);\n                }\n            }\n        }\n\n        public updateOutgoingLinks(map: (item: PullSymbolLink, context: any) => void , context: any) {\n            if (this.outgoingLinks) {\n                this.outgoingLinks.update(map, context);\n            }\n        }\n\n        public updateIncomingLinks(map: (item: PullSymbolLink, context: any) => void , context: any) {\n            if (this.incomingLinks) {\n                this.incomingLinks.update(map, context);\n            }\n        }\n\n        // remove all outgoing, as well as incoming, links\n        public removeAllLinks() {\n            this.updateOutgoingLinks((item) => this.removeOutgoingLink(item), null);\n            this.updateIncomingLinks((item) => item.start.removeOutgoingLink(item), null);\n        }        \n\n        public setContainer(containerSymbol: PullTypeSymbol) {\n            //containerSymbol.addOutgoingLink(this, relationshipKind);\n\n            var link = this.addOutgoingLink(containerSymbol, SymbolLinkKind.ContainedBy);\n            this.cachedContainerLink = link;\n\n            containerSymbol.addContainedByLink(link);\n        }\n\n        public getContainer(): PullTypeSymbol {\n            if (this.cachedContainerLink) {\n                return <PullTypeSymbol>this.cachedContainerLink.end;\n            }\n\n            var containerList = this.findOutgoingLinks(link => link.kind == SymbolLinkKind.ContainedBy);\n\n            if (containerList.length) {\n                this.cachedContainerLink = containerList[0];\n                return <PullTypeSymbol>this.cachedContainerLink.end;\n            }\n\n            return null;\n        }\n\n        public unsetContainer() {\n            if (this.cachedContainerLink) {\n                this.removeOutgoingLink(this.cachedContainerLink);\n            }\n            else {\n\n                // PULLTODO: If we can guarantee that no link will exist without caching, we won\'t need to search\n                var containerList = this.findOutgoingLinks(link => link.kind == SymbolLinkKind.ContainedBy);\n\n                if (containerList.length) {\n                    this.removeOutgoingLink(containerList[0]);\n                }\n            }\n\n            this.invalidate();\n        }\n\n        public setType(typeRef: PullTypeSymbol) {\n\n            // PULLTODO: Remove once we\'re certain that duplicate types can never be set\n            //if (this.cachedTypeLink) {\n            //    CompilerDiagnostics.Alert(\"Type \'\" + this.name + \"\' is having its type reset from \'\" + this.cachedTypeLink.end.getName() + \"\' to \'\" + typeRef.getName() + \"\'\");\n            //}\n\n            if (this.cachedTypeLink) {\n                this.unsetType();\n            }\n\n            var link = this.addOutgoingLink(typeRef, SymbolLinkKind.TypedAs);\n            this.cachedTypeLink = link;\n        }\n\n        public getType(): PullTypeSymbol {\n            if (this.cachedTypeLink) {\n                return <PullTypeSymbol>this.cachedTypeLink.end;\n            }\n\n            var typeList = this.findOutgoingLinks(link => link.kind == SymbolLinkKind.TypedAs);\n\n            if (typeList.length) {\n                this.cachedTypeLink = typeList[0];\n                return <PullTypeSymbol>this.cachedTypeLink.end;\n            }\n\n            return null;\n        }\n\n        public unsetType() {\n            var foundType = false;\n\n            if (this.cachedTypeLink) {\n                this.removeOutgoingLink(this.cachedTypeLink);\n                foundType = true;\n            }\n            else {\n                var typeList = this.findOutgoingLinks(link => link.kind == SymbolLinkKind.TypedAs);\n\n                if (typeList.length) {\n                    this.removeOutgoingLink(typeList[0]);\n                }\n\n                foundType = true;\n            }\n\n            if (foundType) {\n                this.invalidate();\n            }\n        }\n\n        public isTyped() {\n            return this.getType() != null;\n        }\n\n        public setResolved() {\n            this.hasBeenResolved = true;\n            this.inResolution = false;\n        }\n        public isResolved() { return this.hasBeenResolved; }\n\n        public startResolving() {\n            this.inResolution = true;\n        }\n        public isResolving() {\n            return this.inResolution;\n        }\n\n        public startResolvingTypeArguments() {\n            this.resolvingTypeArguments = true;\n        }\n\n        public isResolvingTypeArguments() {\n            return this.resolvingTypeArguments;\n        }\n\n        public doneResolvingTypeArguments() {\n            this.resolvingTypeArguments = false;\n        }\n\n        public setUnresolved() {\n            this.hasBeenResolved = false;\n            this.isBound = false;\n        }\n\n        public invalidate() {\n\n            //this.removeOutgoingLink(this.cachedContainerLink);\n            //this.removeOutgoingLink(this.cachedTypeLink);\n\n            //this.cachedContainerLink = null;\n\n            this.docComments = null;\n\n            this.hasBeenResolved = false;\n            this.isBound = false;\n\n            // reset the errors for its decl\n            this.declarations.update((pullDecl: PullDecl) => pullDecl.resetErrors(), null);\n        }\n\n        public hasFlag(flag: PullElementFlags): bool {\n            var declarations = this.getDeclarations();\n            for (var i = 0, n = declarations.length; i < n; i++) {\n                if ((declarations[i].getFlags() & flag) !== PullElementFlags.None) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public allDeclsHaveFlag(flag: PullElementFlags): bool {\n            var declarations = this.getDeclarations();\n            for (var i = 0, n = declarations.length; i < n; i++) {\n                if (!((declarations[i].getFlags() & flag) !== PullElementFlags.None)) {\n                    return false;\n                }\n            }\n            return true;\n        }        \n\n        public pathToRoot() {\n            var path: PullSymbol[] = [];\n            var node = this;\n            while (node) {\n                if (node.isType()) {\n                    var associatedContainerSymbol = (<PullTypeSymbol>node).getAssociatedContainerType();\n                    if (associatedContainerSymbol) {\n                        node = associatedContainerSymbol;\n                    }\n                }\n                path[path.length] = node;\n                node = node.getContainer();\n            }\n            return path;\n        }\n\n        public findCommonAncestorPath(b: PullSymbol): PullSymbol[] {\n            var aPath = this.pathToRoot();\n            if (aPath.length == 1) {\n                // Global symbol\n                return aPath;\n            }\n\n            var bPath: PullSymbol[];\n            if (b) {\n                bPath = b.pathToRoot();\n            } else {\n                return aPath;\n            }\n\n            var commonNodeIndex = -1;\n            for (var i = 0, aLen = aPath.length; i < aLen; i++) {\n                var aNode = aPath[i];\n                for (var j = 0, bLen = bPath.length; j < bLen; j++) {\n                    var bNode = bPath[j];\n                    if (aNode == bNode) {\n                        commonNodeIndex = i;\n                        break;\n                    }\n                }\n                if (commonNodeIndex >= 0) {\n                    break;\n                }\n            }\n\n            if (commonNodeIndex >= 0) {\n                return aPath.slice(0, commonNodeIndex);\n            }\n            else {\n                return aPath;\n            }\n        }\n\n        public toString(useConstraintInName?: bool) {\n            var str = this.getNameAndTypeName();\n            return str;\n        }\n\n        private getPrettyNameInScope(scopeSymbol?: PullSymbol) {\n            var scopedName = this.getName(scopeSymbol);\n            if (this.getKind() == PullElementKind.DynamicModule) {\n                if (!isQuoted(scopedName) && scopedName == this.getName()) {\n                    return null;\n                }\n            }\n\n            return scopedName;\n        }\n\n        public fullName(scopeSymbol?: PullSymbol) {\n            var path = this.pathToRoot();\n            var fullName = \"\";\n            for (var i = 1; i < path.length; i++) {\n                var scopedName = path[i].getPrettyNameInScope(scopeSymbol);\n                if (!scopedName) {\n                    // Same file as dynamic module - do not include this name\n                    break;\n                }\n\n                fullName = scopedName + \".\" + fullName;\n            }\n            fullName = fullName + this.getName(scopeSymbol, true);\n            return fullName;\n        }\n\n        public getScopedName(scopeSymbol?: PullSymbol, useConstraintInName?: bool) {\n            var path = this.findCommonAncestorPath(scopeSymbol);\n            var fullName = \"\";\n            for (var i = 1; i < path.length; i++) {\n                var kind = path[i].getKind();\n                if (kind == PullElementKind.Container) {\n                    fullName = path[i].getName() + \".\" + fullName;\n                } else if (kind == PullElementKind.DynamicModule) {\n                    var scopedName = path[i].getPrettyNameInScope(scopeSymbol);\n                    if (scopedName) {\n                        fullName = scopedName + \".\" + fullName;\n                    }\n                    break;\n                } else {\n                    break;\n                }\n            }\n            fullName = fullName + this.getName(scopeSymbol, useConstraintInName);\n            return fullName;\n        }\n\n        public getScopedNameEx(scopeSymbol?: PullSymbol, useConstraintInName?: bool, getPrettyTypeName?: bool) {\n            var name = this.getScopedName(scopeSymbol, useConstraintInName);\n            return MemberName.create(name);\n        }\n\n        public getTypeName(scopeSymbol?: PullSymbol, getPrettyTypeName?: bool) {\n            var memberName = this.getTypeNameEx(scopeSymbol, getPrettyTypeName);\n            return memberName.toString();\n        }\n\n        public getTypeNameEx(scopeSymbol?: PullSymbol, getPrettyTypeName?: bool) {\n            var type = this.getType();\n            if (type) {\n                var memberName: MemberName = getPrettyTypeName ? this.getTypeNameForFunctionSignature(\"\", scopeSymbol, getPrettyTypeName) : null;\n                if (!memberName) {\n                    memberName = type.getScopedNameEx(scopeSymbol, false, getPrettyTypeName);\n                }\n\n                return memberName;\n            }\n            return MemberName.create(\"\");\n        }\n\n        private getTypeNameForFunctionSignature(prefix: string, scopeSymbol?: PullSymbol, getPrettyTypeName?: bool) {\n            var type = this.getType();\n            if (type && !type.isNamedTypeSymbol() && this.declKind != PullElementKind.Property && this.declKind != PullElementKind.Variable && this.declKind != PullElementKind.Parameter) {\n                var signatures = type.getCallSignatures();\n                var typeName = new MemberNameArray();\n                var signatureName = PullSignatureSymbol.getSignaturesTypeNameEx(signatures, prefix, false, false, scopeSymbol, getPrettyTypeName);\n                typeName.addAll(signatureName);\n                return typeName;\n            }\n\n            return null;\n        }\n\n        public getNameAndTypeName(scopeSymbol?: PullSymbol) {\n            var nameAndTypeName = this.getNameAndTypeNameEx(scopeSymbol);\n            return nameAndTypeName.toString();\n        }\n\n        public getNameAndTypeNameEx(scopeSymbol?: PullSymbol) {\n            var type = this.getType();\n            var nameEx = this.getScopedNameEx(scopeSymbol);\n            if (type) {\n                var nameStr = nameEx.toString() + (this.getIsOptional() ? \"?\" : \"\");\n                var memberName: MemberName = this.getTypeNameForFunctionSignature(nameStr, scopeSymbol);\n                if (!memberName) {\n                    var typeNameEx = type.getScopedNameEx(scopeSymbol);\n                    memberName = MemberName.create(typeNameEx, nameStr + \": \", \"\");\n                }\n                return memberName;\n            }\n            return nameEx;\n        }\n\n        static getTypeParameterString(typars: PullTypeSymbol[], scopeSymbol?: PullSymbol) {\n            var typarString = \"\";\n            if (typars && typars.length) {\n                typarString = \"<\";\n                for (var i = 0; i < typars.length; i++) {\n                    if (i) {\n                        typarString += \", \";\n                    }\n                    typarString += typars[i].getScopedNameEx(scopeSymbol, true).toString();\n                }\n                typarString += \">\";\n            }\n            return typarString;\n        }\n\n        static getIsExternallyVisible(symbol: PullSymbol, fromIsExternallyVisibleSymbol: PullSymbol, inIsExternallyVisibleSymbols: PullSymbol[]) {\n            if (inIsExternallyVisibleSymbols) {\n                for (var i = 0; i < inIsExternallyVisibleSymbols.length; i++) {\n                    if (inIsExternallyVisibleSymbols[i] == symbol) {\n                        return true;\n                    }\n                }\n            } else {\n                inIsExternallyVisibleSymbols = [];\n            }\n\n            if (fromIsExternallyVisibleSymbol == symbol) {\n                return true;\n            }\n            inIsExternallyVisibleSymbols = inIsExternallyVisibleSymbols.concat(fromIsExternallyVisibleSymbol);\n\n            return symbol.isExternallyVisible(inIsExternallyVisibleSymbols);\n        }\n\n        public isExternallyVisible(inIsExternallyVisibleSymbols?: PullSymbol[]): bool {\n            // Primitive\n            var kind = this.getKind();\n            if (kind == PullElementKind.Primitive) {\n                return true;\n            }\n\n            // Type - use container to determine privacy info\n            if (this.isType()) {\n                var associatedContainerSymbol = (<PullTypeSymbol>this).getAssociatedContainerType();\n                if (associatedContainerSymbol) {\n                    return PullSymbol.getIsExternallyVisible(associatedContainerSymbol, this, inIsExternallyVisibleSymbols);\n                }\n            }\n\n            // Private member\n            if (this.hasFlag(PullElementFlags.Private)) {\n                return false;\n            }\n\n            // If the container for this symbol is null, then this symbol is visible\n            var container = this.getContainer();\n            if (container == null) {\n                return true;\n            }\n\n            // If non exported member and is not class properties and method, it is not visible\n            if (!this.hasFlag(PullElementFlags.Exported) && kind != PullElementKind.Property && kind != PullElementKind.Method) {\n                return false;\n            }\n\n            // Visible if parent is visible\n            return PullSymbol.getIsExternallyVisible(container, this, inIsExternallyVisibleSymbols);\n        }\n    }\n\n    export class PullExpressionSymbol extends PullSymbol {\n        contributingSymbols: PullSymbol[] = [];\n\n        constructor() {\n            super(\"\", PullElementKind.Expression);\n        }\n\n        public addContributingSymbol(symbol: PullSymbol) {\n            var link = this.addOutgoingLink(symbol, SymbolLinkKind.ContributesToExpression);\n\n            this.contributingSymbols[this.contributingSymbols.length] = symbol;\n        }\n\n        public getContributingSymbols() {\n            return this.contributingSymbols;\n        }\n    }\n\n    export class PullSignatureSymbol extends PullSymbol {\n        private parameterLinks: PullSymbolLink[] = null;\n        private typeParameterLinks: PullSymbolLink[] = null;\n\n        private returnTypeLink: PullSymbolLink = null;\n\n        private hasOptionalParam = false;\n        private nonOptionalParamCount = 0;\n\n        private hasVarArgs = false;\n\n        private specializationCache: any = {}\n\n        private memberTypeParameterNameCache: any = null;\n\n        private hasAGenericParameter = false;\n\n        constructor(kind: PullElementKind) {\n            super(\"\", kind);\n        }\n\n        public isDefinition() { return false; }\n\n        public hasVariableParamList() { return this.hasVarArgs; }\n        public setHasVariableParamList() { this.hasVarArgs = true; }\n\n        public setHasGenericParameter() { this.hasAGenericParameter = true; }\n        public hasGenericParameter() { return this.hasAGenericParameter; }\n\n        public isGeneric() { return this.hasAGenericParameter || (this.typeParameterLinks && this.typeParameterLinks.length != 0); }\n\n        public addParameter(parameter: PullSymbol, isOptional = false) {\n            if (!this.parameterLinks) {\n                this.parameterLinks = [];\n            }\n\n            var link = this.addOutgoingLink(parameter, SymbolLinkKind.Parameter);\n            this.parameterLinks[this.parameterLinks.length] = link;\n            this.hasOptionalParam = isOptional;\n\n            if (!isOptional) {\n                this.nonOptionalParamCount++;\n            }\n        }\n\n        public addSpecialization(signature: PullSignatureSymbol, typeArguments: PullTypeSymbol[]) {\n            if (typeArguments && typeArguments.length) {\n                this.specializationCache[getIDForTypeSubstitutions(typeArguments)] = signature;\n            }\n        }\n\n        public getSpecialization(typeArguments): PullSignatureSymbol {\n            var sig = <PullSignatureSymbol>this.specializationCache[getIDForTypeSubstitutions(typeArguments)];\n\n            if (sig) {\n                return sig;\n            }\n\n            return null;\n        }\n\n        public addTypeParameter(parameter: PullTypeParameterSymbol) {\n            if (!this.typeParameterLinks) {\n                this.typeParameterLinks = [];\n            }\n\n            if (!this.memberTypeParameterNameCache) {\n                this.memberTypeParameterNameCache = new BlockIntrinsics();\n            }\n\n            var link = this.addOutgoingLink(parameter, SymbolLinkKind.TypeParameter);\n            this.typeParameterLinks[this.typeParameterLinks.length] = link;\n\n            this.memberTypeParameterNameCache[link.end.getName()] = link.end;\n        }\n\n        public getNonOptionalParameterCount() { return this.nonOptionalParamCount; }\n\n        public setReturnType(returnType: PullTypeSymbol) {\n\n            if (returnType) {\n                if (this.returnTypeLink) {\n                    this.removeOutgoingLink(this.returnTypeLink);\n                }\n                this.returnTypeLink = this.addOutgoingLink(returnType, SymbolLinkKind.ReturnType);\n            }\n        }\n\n        public getParameters() {\n            var params: PullSymbol[] = [];\n\n            if (this.parameterLinks) {\n                for (var i = 0; i < this.parameterLinks.length; i++) {\n                    params[params.length] = this.parameterLinks[i].end;\n                }\n            }\n\n            return params;\n        }\n\n        public getTypeParameters(): PullTypeParameterSymbol[] {\n            var params: PullTypeParameterSymbol[] = [];\n\n            if (this.typeParameterLinks) {\n                for (var i = 0; i < this.typeParameterLinks.length; i++) {\n                    params[params.length] = <PullTypeParameterSymbol>this.typeParameterLinks[i].end;\n                }\n            }\n\n            return params;\n        }\n\n        public findTypeParameter(name: string): PullTypeParameterSymbol {\n            var memberSymbol: PullTypeParameterSymbol;\n\n            if (!this.memberTypeParameterNameCache) {\n                this.memberTypeParameterNameCache = new BlockIntrinsics();\n\n                if (this.typeParameterLinks) {\n                    for (var i = 0; i < this.typeParameterLinks.length; i++) {\n                        this.memberTypeParameterNameCache[this.typeParameterLinks[i].end.getName()] = this.typeParameterLinks[i].end;\n                    }\n                }\n            }\n\n            memberSymbol = this.memberTypeParameterNameCache[name];\n\n            return memberSymbol;\n        }\n\n        public removeParameter(parameterSymbol: PullSymbol) {\n            var paramLink: PullSymbolLink;\n\n            if (this.parameterLinks) {\n                for (var i = 0; i < this.parameterLinks.length; i++) {\n                    if (parameterSymbol == this.parameterLinks[i].end) {\n                        paramLink = this.parameterLinks[i];\n                        this.removeOutgoingLink(paramLink);\n                        break;\n                    }\n                }\n            }\n\n            this.invalidate();\n        }\n\n        public mimicSignature(signature: PullSignatureSymbol) {\n            // mimic type parameters\n            var typeParameters = signature.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n\n            if (typeParameters) {\n                for (var i = 0; i < typeParameters.length; i++) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n                    typeParameter.addDeclaration(typeParameters[i].getDeclarations()[0]);\n                    this.addTypeParameter(typeParameter);\n                }\n            }\n\n            // mimic paremeteres (optionality, varargs)\n            var parameters = signature.getParameters();\n            var parameter: PullSymbol;\n\n            if (parameters) {\n                for (var j = 0; j < parameters.length; j++) {\n                    parameter = new PullSymbol(parameters[j].getName(), PullElementKind.Parameter);\n                    parameter.addDeclaration(parameters[j].getDeclarations()[0]);\n                    if (parameters[j].getIsOptional()) {\n                        parameter.setIsOptional();\n                    }\n                    if (parameters[j].getIsVarArg()) {\n                        parameter.setIsVarArg();\n                        this.setHasVariableParamList();\n                    }\n                    this.addParameter(parameter);\n                }\n            }\n\n            // Don\'t set the return type, since that will just lead to redundant\n            // calls to setReturnType when we re-resolve the signature for\n            // specialization\n\n            // var returnType = signature.getReturnType();\n\n            // if (returnType) {\n            //     this.setReturnType(returnType);\n            // }\n        }\n\n        public getReturnType(): PullTypeSymbol {\n            if (this.returnTypeLink) {\n                return <PullTypeSymbol> this.returnTypeLink.end;\n            }\n            else {\n                var rtl = this.findOutgoingLinks((p) => p.kind == SymbolLinkKind.ReturnType);\n\n                if (rtl.length) {\n                    this.returnTypeLink = rtl[0];\n                    return <PullTypeSymbol> this.returnTypeLink.end;\n                }\n\n                return null;\n            }\n        }\n\n        public invalidate() {\n\n            this.parameterLinks = this.findOutgoingLinks(psl => psl.kind == SymbolLinkKind.Parameter);\n            this.nonOptionalParamCount = 0;\n            this.hasOptionalParam = false;\n            this.hasAGenericParameter = false;\n\n            // re-compute non-optional arg count, etc\n            if (this.parameterLinks) {\n                for (var i = 0; i < this.parameterLinks.length; i++) {\n\n                    this.parameterLinks[i].end.invalidate();\n\n                    if (!this.parameterLinks[i].end.getIsOptional()) {\n                        this.nonOptionalParamCount++;\n                    }\n                    else {\n                        this.hasOptionalParam;\n                        break;\n                    }\n                }\n            }\n\n            super.invalidate();\n        }\n\n        static getSignatureTypeMemberName(candidateSignature: PullSignatureSymbol, signatures: PullSignatureSymbol[], scopeSymbol: PullSymbol) {\n            var allMemberNames = new MemberNameArray();\n            var signatureMemberName = PullSignatureSymbol.getSignaturesTypeNameEx(signatures, \"\", false, false, scopeSymbol, true, candidateSignature);\n            allMemberNames.addAll(signatureMemberName);\n            return allMemberNames;\n        }\n\n        static getSignaturesTypeNameEx(signatures: PullSignatureSymbol[], prefix: string, shortform: bool, brackets: bool, scopeSymbol?: PullSymbol, getPrettyTypeName?: bool, candidateSignature?: PullSignatureSymbol) {\n            var result: MemberName[] = [];\n            var len = signatures.length;\n            if (!getPrettyTypeName && len > 1) {\n                shortform = false;\n            }\n\n            var i = 0\n            var foundDefinition = false;\n            if (candidateSignature && candidateSignature.isDefinition() && len > 1) {\n                // Overloaded signature with candidateSignature = definition - cannot be used.\n                candidateSignature = null;\n            }\n\n            for (; i < len; i++) {\n                // the definition signature shouldn\'t be printed if there are overloads\n                if (len > 1 && signatures[i].isDefinition()) {\n                    foundDefinition = true;\n                    continue;\n                }\n\n                var signature = signatures[i];\n                if (getPrettyTypeName && candidateSignature) {\n                    signature = candidateSignature;\n                }\n\n                result.push(signature.getSignatureTypeNameEx(prefix, shortform, brackets, scopeSymbol));\n                if (getPrettyTypeName) {\n                    break;\n                }\n            }\n\n            if (getPrettyTypeName && result.length && len > 1) {\n                var lastMemberName = <MemberNameArray>result[result.length - 1];\n                for (i = i + 1; i < len; i++) {\n                    if (signatures[i].isDefinition()) {\n                        foundDefinition = true;\n                        break;\n                    }\n                }\n                var overloadString = \" (+ \" + (foundDefinition ? len - 2 : len - 1) + \" overload(s))\";\n                lastMemberName.add(MemberName.create(overloadString));\n            }\n\n            return result;\n        }\n\n        public toString(useConstraintInName?: bool) {\n            var s = this.getSignatureTypeNameEx(this.getScopedNameEx().toString(), false, false).toString();\n            return s;\n        }\n\n        public getSignatureTypeNameEx(prefix: string, shortform: bool, brackets: bool, scopeSymbol?: PullSymbol) {\n            var builder = new MemberNameArray();\n            var typeParameters = this.getTypeParameters();\n            var typeParameterString = PullSymbol.getTypeParameterString(typeParameters, scopeSymbol);\n            if (brackets) {\n                builder.prefix = prefix + typeParameterString + \"[\";\n            }\n            else {\n                builder.prefix = prefix + typeParameterString + \"(\";\n            }\n\n            var params = this.getParameters();\n            var paramLen = params.length;\n            for (var i = 0 ; i < paramLen; i++) {\n                var paramType = params[i].getType();\n                var typeString = paramType ? \": \" : \"\";\n                var paramIsVarArg = params[i].getIsVarArg();\n                var varArgPrefix = paramIsVarArg ? \"...\" : \"\";\n                var optionalString = (!paramIsVarArg && params[i].getIsOptional()) ? \"?\" : \"\";\n                builder.add(MemberName.create(varArgPrefix + params[i].getScopedNameEx(scopeSymbol).toString() + optionalString + typeString));\n                if (paramType) {\n                    builder.add(paramType.getScopedNameEx(scopeSymbol));\n                }\n                if (i < paramLen - 1) {\n                    builder.add(MemberName.create(\", \"));\n                }\n            }\n\n            if (shortform) {\n                if (brackets) {\n                    builder.add(MemberName.create(\"] => \"));\n                }\n                else {\n                    builder.add(MemberName.create(\") => \"));\n                }\n            }\n            else {\n                if (brackets) {\n                    builder.add(MemberName.create(\"]: \"));\n                }\n                else {\n                    builder.add(MemberName.create(\"): \"));\n                }\n            }\n\n            var returnType = this.getReturnType();\n\n            if (returnType) {\n                builder.add(returnType.getScopedNameEx(scopeSymbol));\n            }\n            else {\n                builder.add(MemberName.create(\"any\"));\n            }\n\n            return builder;\n        }\n    }\n\n    export class PullTypeSymbol extends PullSymbol {\n        private memberLinks: PullSymbolLink[] = null;\n        private typeParameterLinks: PullSymbolLink[] = null;\n        private specializationLinks: PullSymbolLink[] = null;\n        private containedByLinks: PullSymbolLink[] = null;\n\n        private memberNameCache: any = null;\n        private memberTypeNameCache: any = null;\n        private memberTypeParameterNameCache: any = null;\n        private containedMemberCache: any = null;\n\n        private typeArguments: PullTypeSymbol[] = null;\n\n        private specializedTypeCache: any = null;\n\n        private memberCache: PullSymbol[] = null;\n\n        private implementedTypeLinks: PullSymbolLink[] = null;\n        private extendedTypeLinks: PullSymbolLink[] = null;\n\n        private callSignatureLinks: PullSymbolLink[] = null;\n        private constructSignatureLinks: PullSymbolLink[] = null;\n        private indexSignatureLinks: PullSymbolLink[] = null;\n\n        private arrayType: PullTypeSymbol = null;\n\n        private isSpecialized = false;\n        private isBeingSpecialized = false;\n        private hasGenericSignature = false;\n\n        private invalidatedSpecializations = false;\n\n        private associatedContainerTypeSymbol: PullTypeSymbol = null;\n\n        public isType() { return true; }\n        public isClass() { return false; }\n        public hasMembers() { return this.memberLinks && this.memberLinks.length != 0; }\n        public isFunction() { return false; }\n        public isTypeParameter() { return false; }\n        public isTypeVariable() { return false; }\n        public isError() { return false; }\n\n        public setHasGenericSignature() { this.hasGenericSignature = true; }\n\n        public setAssociatedContainerType(type: PullTypeSymbol) {\n            this.associatedContainerTypeSymbol = type;\n        }\n\n        public getAssociatedContainerType() {\n            return this.associatedContainerTypeSymbol;\n        }\n\n        public getType() { return this; }\n\n        public getArrayType() { return this.arrayType; }\n\n        public getElementType(): PullTypeSymbol {\n            var arrayOfLinks = this.findOutgoingLinks(link => link.kind == SymbolLinkKind.ArrayOf);\n\n            if (arrayOfLinks.length) {\n                return <PullTypeSymbol>arrayOfLinks[0].end;\n            }\n\n            return null;\n        }\n        public setArrayType(arrayType: PullTypeSymbol) {\n            this.arrayType = arrayType;\n\n            arrayType.addOutgoingLink(this, SymbolLinkKind.ArrayOf);\n        }\n\n        public addContainedByLink(containedByLink: PullSymbolLink) {\n            if (!this.containedByLinks) {\n                this.containedByLinks = [];\n            }\n\n            if (!this.containedMemberCache) {\n                this.containedMemberCache = {};\n            }\n\n            this.containedByLinks[this.containedByLinks.length] = containedByLink;\n            this.containedMemberCache[containedByLink.start.getName()] = containedByLink.start;\n        }\n\n        public findContainedMember(name: string): PullSymbol {\n\n            if (!this.containedByLinks) {\n                this.containedByLinks = this.findIncomingLinks(psl => psl.kind == SymbolLinkKind.ContainedBy);\n                this.containedMemberCache = {};\n\n                for (var i = 0; i < this.containedByLinks.length; i++) {\n                    this.containedMemberCache[this.containedByLinks[i].start.getName()] = this.containedByLinks[i].start;\n                }\n            }\n\n            return this.containedMemberCache[name];\n        }\n\n        public addMember(memberSymbol: PullSymbol, linkKind: SymbolLinkKind) {\n\n            var link = this.addOutgoingLink(memberSymbol, linkKind);\n\n            memberSymbol.setContainer(this);\n            \n            if (!this.memberCache) {\n                this.memberCache = [];\n            }\n\n            if (!this.memberNameCache) {\n                this.memberNameCache = new BlockIntrinsics();\n            }\n\n            if (!this.memberLinks) {\n                this.memberLinks = [];\n            }\n\n            if (!memberSymbol.isType()) {\n                this.memberLinks[this.memberLinks.length] = link;\n\n                this.memberCache[this.memberCache.length] = memberSymbol;\n\n                if (!this.memberNameCache) {\n                    this.memberNameCache = new BlockIntrinsics();\n                }\n                this.memberNameCache[memberSymbol.getName()] = memberSymbol;\n            }\n            else {\n                if ((<PullTypeSymbol>memberSymbol).isTypeParameter()) {\n                    if (!this.typeParameterLinks) {\n                        this.typeParameterLinks = [];\n                    }\n                    if (!this.memberTypeParameterNameCache) {\n                        this.memberTypeParameterNameCache = new BlockIntrinsics();\n                    }\n                    this.typeParameterLinks[this.typeParameterLinks.length] = link;\n                    this.memberTypeParameterNameCache[memberSymbol.getName()] = memberSymbol;\n                }\n                else {\n                    if (!this.memberTypeNameCache) {\n                        this.memberTypeNameCache = new BlockIntrinsics();\n                    }\n                    this.memberLinks[this.memberLinks.length] = link;\n                    this.memberTypeNameCache[memberSymbol.getName()] = memberSymbol;\n                    this.memberCache[this.memberCache.length] = memberSymbol;\n                }\n            }\n        }\n\n        public removeMember(memberSymbol: PullSymbol) {\n            var memberLink: PullSymbolLink;\n            var child: PullSymbol;\n\n            var links = (memberSymbol.isType() && (<PullTypeSymbol>memberSymbol).isTypeParameter()) ? this.typeParameterLinks : this.memberLinks;\n\n            if (links) {\n                for (var i = 0; i < links.length; i++) {\n                    if (memberSymbol == links[i].end) {\n                        memberLink = links[i];\n                        child = memberLink.end;\n                        child.unsetContainer();\n                        this.removeOutgoingLink(memberLink);\n                        break;\n                    }\n                }\n            }\n\n            this.invalidate();\n        }\n\n        public getMembers(): PullSymbol[] {\n\n            if (this.memberCache) {\n                return this.memberCache;\n            }\n            else {\n                var members: PullSymbol[] = [];\n\n                if (this.memberLinks) {\n                    for (var i = 0; i < this.memberLinks.length; i++) {\n                        members[members.length] = this.memberLinks[i].end;\n                    }\n                }\n\n                if (members.length) {\n                    this.memberCache = members;\n                }\n\n                return members;\n            }\n        }\n\n        public getTypeParameters(): PullTypeParameterSymbol[] {\n            var members: PullTypeParameterSymbol[] = [];\n\n            if (this.typeParameterLinks) {\n                for (var i = 0; i < this.typeParameterLinks.length; i++) {\n                    members[members.length] = <PullTypeParameterSymbol>this.typeParameterLinks[i].end;\n                }\n            }\n\n            return members;\n        }\n\n        public isGeneric(): bool { return (this.typeParameterLinks && this.typeParameterLinks.length != 0) || this.hasGenericSignature; }\n\n        public addSpecialization(specializedVersionOfThisType: PullTypeSymbol, substitutingTypes: PullTypeSymbol[]): void {\n\n            if (!substitutingTypes || !substitutingTypes.length) {\n                return;\n            }\n\n            if (!this.specializedTypeCache) {\n                this.specializedTypeCache = {};\n            }\n\n            if (!this.specializationLinks) {\n                this.specializationLinks = [];\n            }\n\n            this.specializationLinks[this.specializationLinks.length] = this.addOutgoingLink(specializedVersionOfThisType, SymbolLinkKind.SpecializedTo);\n\n            this.specializedTypeCache[getIDForTypeSubstitutions(substitutingTypes)] = specializedVersionOfThisType;\n        }\n\n        public getSpecialization(substitutingTypes: PullTypeSymbol[]): PullTypeSymbol {\n            if (!this.specializedTypeCache) {\n                this.specializedTypeCache = {};\n\n                return null;\n            }\n\n            var specialization = <PullTypeSymbol>this.specializedTypeCache[getIDForTypeSubstitutions(substitutingTypes)];\n\n            if (!specialization) {\n                return null;\n            }\n\n            return specialization;\n        }\n\n        public getKnownSpecializations(): PullTypeSymbol[] {\n            var specializations: PullTypeSymbol[] = [];\n\n            if (this.specializedTypeCache) {\n                for (var specializationID in this.specializedTypeCache) {\n                    specializations[specializations.length] = this.specializedTypeCache[specializationID];\n                }\n            }\n\n            return specializations;\n        }\n\n        public invalidateSpecializations() {\n\n            if (this.invalidatedSpecializations) {\n                return;\n            }\n\n            var specializations = this.getKnownSpecializations();\n            var i = 0;\n\n            for (i = 0; i < specializations.length; i++) {\n                specializations[i].invalidate();\n            }\n\n            if (this.specializationLinks && this.specializationLinks.length) {\n            \n                for (i = 0; i < this.specializationLinks.length; i++) {\n                    this.removeOutgoingLink(this.specializationLinks[i]);\n                }\n            }\n\n            this.specializedTypeCache = null;\n\n            this.invalidatedSpecializations = true;\n        }\n\n        public getTypeArguments() { return this.typeArguments; }\n        public setTypeArguments(typeArgs: PullTypeSymbol[]) { this.typeArguments = typeArgs; }\n\n        public addCallSignature(callSignature: PullSignatureSymbol) {\n\n            if (!this.callSignatureLinks) {\n                this.callSignatureLinks = [];\n            }\n\n            var link = this.addOutgoingLink(callSignature, SymbolLinkKind.CallSignature);\n            this.callSignatureLinks[this.callSignatureLinks.length] = link;\n\n            if (callSignature.isGeneric()) {\n                this.hasGenericSignature = true;\n            }\n        }\n\n        public addCallSignatures(callSignatures: PullSignatureSymbol[]) {\n\n            if (!this.callSignatureLinks) {\n                this.callSignatureLinks = [];\n            }\n\n            for (var i = 0; i < callSignatures.length; i++) {\n                this.addCallSignature(callSignatures[i]);\n            }\n        }\n\n        public addConstructSignature(constructSignature: PullSignatureSymbol) {\n\n            if (!this.constructSignatureLinks) {\n                this.constructSignatureLinks = [];\n            }\n\n            var link = this.addOutgoingLink(constructSignature, SymbolLinkKind.ConstructSignature);\n            this.constructSignatureLinks[this.constructSignatureLinks.length] = link;\n\n            if (constructSignature.isGeneric()) {\n                this.hasGenericSignature = true;\n            }\n        }\n\n        public addConstructSignatures(constructSignatures: PullSignatureSymbol[]) {\n\n            if (!this.constructSignatureLinks) {\n                this.constructSignatureLinks = [];\n            }\n\n            for (var i = 0; i < constructSignatures.length; i++) {\n                this.addConstructSignature(constructSignatures[i]);\n            }\n        }\n\n        public addIndexSignature(indexSignature: PullSignatureSymbol) {\n            if (!this.indexSignatureLinks) {\n                this.indexSignatureLinks = [];\n            }\n\n            var link = this.addOutgoingLink(indexSignature, SymbolLinkKind.IndexSignature);\n            this.indexSignatureLinks[this.indexSignatureLinks.length] = link;\n\n            if (indexSignature.isGeneric()) {\n                this.hasGenericSignature = true;\n            }\n        }\n\n        public addIndexSignatures(indexSignatures: PullSignatureSymbol[]) {\n            if (!this.indexSignatureLinks) {\n                this.indexSignatureLinks = [];\n            }\n\n            for (var i = 0; i < indexSignatures.length; i++) {\n                this.addIndexSignature(indexSignatures[i]);\n            }\n        }\n\n        public getCallSignatures(): PullSignatureSymbol[] {\n            var members: PullSymbol[] = [];\n\n            if (this.callSignatureLinks) {\n                for (var i = 0; i < this.callSignatureLinks.length; i++) {\n                    members[members.length] = this.callSignatureLinks[i].end;\n                }\n            }\n\n            return <PullSignatureSymbol[]>members;\n        }\n\n        public getConstructSignatures(): PullSignatureSymbol[] {\n            var members: PullSymbol[] = [];\n\n            if (this.constructSignatureLinks) {\n                for (var i = 0; i < this.constructSignatureLinks.length; i++) {\n                    members[members.length] = this.constructSignatureLinks[i].end;\n                }\n            }\n\n            return <PullSignatureSymbol[]>members;\n        }\n\n        public getIndexSignatures(): PullSignatureSymbol[] {\n            var members: PullSymbol[] = [];\n\n            if (this.indexSignatureLinks) {\n                for (var i = 0; i < this.indexSignatureLinks.length; i++) {\n                    members[members.length] = this.indexSignatureLinks[i].end;\n                }\n            }\n\n            return <PullSignatureSymbol[]>members;\n        }\n\n        public removeCallSignature(signature: PullSignatureSymbol, invalidate = true) {\n            var signatureLink: PullSymbolLink;\n\n            if (this.callSignatureLinks) {\n                for (var i = 0; i < this.callSignatureLinks.length; i++) {\n                    if (signature == this.callSignatureLinks[i].end) {\n                        signatureLink = this.callSignatureLinks[i];\n                        this.removeOutgoingLink(signatureLink);\n                        break;\n                    }\n                }\n            }\n\n            if (invalidate) {\n                this.invalidate();\n            }\n        }\n\n        public recomputeCallSignatures() {\n            this.callSignatureLinks = this.findOutgoingLinks(psl => psl.kind == SymbolLinkKind.CallSignature);\n        }\n\n        public removeConstructSignature(signature: PullSignatureSymbol, invalidate = true) {\n            var signatureLink: PullSymbolLink;\n\n            if (this.constructSignatureLinks) {\n                for (var i = 0; i < this.constructSignatureLinks.length; i++) {\n                    if (signature == this.constructSignatureLinks[i].end) {\n                        signatureLink = this.constructSignatureLinks[i];\n                        this.removeOutgoingLink(signatureLink);\n                        break;\n                    }\n                }\n            }\n\n            if (invalidate) {\n                this.invalidate();\n            }\n        }\n\n        public recomputeConstructSignatures() {\n            this.constructSignatureLinks = this.findOutgoingLinks(psl => psl.kind == SymbolLinkKind.ConstructSignature);\n        }\n\n        public removeIndexSignature(signature: PullSignatureSymbol, invalidate = true) {\n            var signatureLink: PullSymbolLink;\n\n            if (this.indexSignatureLinks) {\n                for (var i = 0; i < this.indexSignatureLinks.length; i++) {\n                    if (signature == this.indexSignatureLinks[i].end) {\n                        signatureLink = this.indexSignatureLinks[i];\n                        this.removeOutgoingLink(signatureLink);\n                        break;\n                    }\n                }\n            }\n\n            if (invalidate) {\n                this.invalidate();\n            }\n        }\n\n        public recomputeIndexSignatures() {\n            this.indexSignatureLinks = this.findOutgoingLinks(psl => psl.kind == SymbolLinkKind.IndexSignature);\n        }\n\n        public addImplementedType(interfaceType: PullTypeSymbol) {\n            if (!this.implementedTypeLinks) {\n                this.implementedTypeLinks = [];\n            }\n\n            var link = this.addOutgoingLink(interfaceType, SymbolLinkKind.Implements);\n            this.implementedTypeLinks[this.implementedTypeLinks.length] = link;\n        }\n\n        public getImplementedTypes(): PullTypeSymbol[] {\n            var members: PullSymbol[] = [];\n\n            if (this.implementedTypeLinks) {\n                for (var i = 0; i < this.implementedTypeLinks.length; i++) {\n                    members[members.length] = this.implementedTypeLinks[i].end;\n                }\n            }\n\n            return <PullTypeSymbol[]>members;\n        }\n\n        public removeImplementedType(implementedType: PullTypeSymbol) {\n            var typeLink: PullSymbolLink;\n\n            if (this.implementedTypeLinks) {\n                for (var i = 0; i < this.implementedTypeLinks.length; i++) {\n                    if (implementedType == this.implementedTypeLinks[i].end) {\n                        typeLink = this.implementedTypeLinks[i];\n                        this.removeOutgoingLink(typeLink);\n                        break;\n                    }\n                }\n            }\n\n            this.invalidate();\n        }\n\n        public addExtendedType(extendedType: PullTypeSymbol) {\n            if (!this.extendedTypeLinks) {\n                this.extendedTypeLinks = [];\n            }\n\n            var link = this.addOutgoingLink(extendedType, SymbolLinkKind.Extends);\n            this.extendedTypeLinks[this.extendedTypeLinks.length] = link;\n\n            // var parentMembers = extendedType.getMembers();\n\n            // PULLTODO: Restrict member list to public properties only\n            // for (var i = 0; i < parentMembers.length; i++) {\n            //     this.addMember(parentMembers[i], SymbolLinkKind.PublicMember);\n            // }\n        }\n\n        public getExtendedTypes(): PullTypeSymbol[] {\n            var members: PullSymbol[] = [];\n\n            if (this.extendedTypeLinks) {\n                for (var i = 0; i < this.extendedTypeLinks.length; i++) {\n                    members[members.length] = this.extendedTypeLinks[i].end;\n                }\n            }\n\n            return <PullTypeSymbol[]>members;\n        }\n\n        public hasBase(potentialBase: PullTypeSymbol) {\n\n            if (this == potentialBase) {\n                return true;\n            }\n\n            var extendedTypes = this.getExtendedTypes();\n            var i = 0;\n\n            for (i = 0; i < extendedTypes.length; i++) {\n                if (extendedTypes[i].hasBase(potentialBase)) {\n                    return true;\n                }\n            }\n\n            var implementedTypes = this.getImplementedTypes();\n\n            for (i = 0; i < implementedTypes.length; i++) {\n                if (implementedTypes[i].hasBase(potentialBase)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        public removeExtendedType(extendedType: PullTypeSymbol) {\n            var typeLink: PullSymbolLink;\n\n            if (this.extendedTypeLinks) {\n                for (var i = 0; i < this.extendedTypeLinks.length; i++) {\n                    if (extendedType == this.extendedTypeLinks[i].end) {\n                        typeLink = this.extendedTypeLinks[i];\n                        this.removeOutgoingLink(typeLink);\n                        break;\n                    }\n                }\n            }\n\n            this.invalidate();\n        }\n\n        public findMember(name: string): PullSymbol {\n            var memberSymbol: PullSymbol;\n            var i = 0;\n\n            if (!this.memberNameCache) {\n                this.populateMemberCache();\n            }\n\n            memberSymbol = this.memberNameCache[name];\n\n            if (memberSymbol) {\n                return memberSymbol;\n            }\n\n            // check parents\n            if (!memberSymbol && this.extendedTypeLinks) {\n\n                for (i = 0 ; i < this.extendedTypeLinks.length; i++) {\n                    memberSymbol = (<PullTypeSymbol>this.extendedTypeLinks[i].end).findMember(name);\n\n                    if (memberSymbol) {\n                        return memberSymbol;\n                    }\n                }\n            }\n\n            if (!memberSymbol && this.implementedTypeLinks) {\n\n                for (i = 0 ; i < this.implementedTypeLinks.length; i++) {\n                    memberSymbol = (<PullTypeSymbol>this.implementedTypeLinks[i].end).findMember(name);\n\n                    if (memberSymbol) {\n                        return memberSymbol;\n                    }\n                }\n            }\n\n            // when all else fails, look for a nested type name\n            return this.findNestedType(name);\n        }\n\n        public findNestedType(name: string, kind = PullElementKind.None): PullTypeSymbol {\n            var memberSymbol: PullTypeSymbol;\n\n            if (!this.memberTypeNameCache) {\n                this.populateMemberTypeCache();\n            }\n\n            memberSymbol = this.memberTypeNameCache[name];\n\n            if (memberSymbol && kind != PullElementKind.None) {\n                memberSymbol = ((memberSymbol.getKind() & kind) != 0) ? memberSymbol : null;\n            }\n\n            return memberSymbol;\n        }\n\n        private populateMemberCache() {\n            if (!this.memberNameCache) {\n                this.memberNameCache = new BlockIntrinsics();\n                this.memberCache = [];\n\n                if (this.memberLinks) {\n                    for (var i = 0; i < this.memberLinks.length; i++) {\n                        this.memberNameCache[this.memberLinks[i].end.getName()] = this.memberLinks[i].end;\n                        this.memberCache[this.memberCache.length] = this.memberLinks[i].end;\n                    }\n                }\n            }\n        }\n\n        private populateMemberTypeCache() {\n            if (!this.memberTypeNameCache) {\n                this.memberTypeNameCache = new BlockIntrinsics();\n\n                var setAll = false;\n\n                if (!this.memberCache) {\n                    this.memberCache = [];\n                    this.memberNameCache = new BlockIntrinsics();\n                    setAll = true;\n                }\n\n                if (this.memberLinks) {\n                    for (var i = 0; i < this.memberLinks.length; i++) {\n                        if (this.memberLinks[i].end.isType()) {\n                            this.memberTypeNameCache[this.memberLinks[i].end.getName()] = this.memberLinks[i].end;\n                            this.memberCache[this.memberCache.length] = this.memberLinks[i].end;\n                        }\n                        else if (setAll) {\n                            this.memberNameCache[this.memberLinks[i].end.getName()] = this.memberLinks[i].end;\n                            this.memberCache[this.memberCache.length] = this.memberLinks[i].end;\n                        }\n                    }\n                }\n            }\n        }\n\n        public getAllMembers(searchDeclKind: PullElementKind, includePrivate: bool): PullSymbol[] {\n\n            var allMembers: PullSymbol[] = [];\n            var i = 0;\n            var j = 0;\n            var m = 0;\n            var n = 0;\n\n            // Update the cache id needed\n            if (!this.memberCache) {\n                this.populateMemberCache();\n            }\n            // Update the cache id needed\n            if (!this.memberTypeNameCache) {\n                this.populateMemberTypeCache();\n            }\n\n            // Add members\n            for (i = 0, n = this.memberCache.length; i < n; i++) {\n                var member = this.memberCache[i];\n                if ((member.getKind() & searchDeclKind) && (includePrivate || !member.hasFlag(PullElementFlags.Private))) {\n                    allMembers[allMembers.length] = member;\n                }\n            }\n\n            // Add parent members\n            if (this.extendedTypeLinks) {\n\n                for (i = 0, n = this.extendedTypeLinks.length; i < n; i++) {\n                    var extendedMembers = (<PullTypeSymbol>this.extendedTypeLinks[i].end).getAllMembers(searchDeclKind, includePrivate);\n\n                    for (j = 0, m = extendedMembers.length; j < m; j++) {\n                        var extendedMember = extendedMembers[j];\n                        if (!this.memberNameCache[extendedMember.getName()]) {\n                            allMembers[allMembers.length] = extendedMember;\n                        }\n                    }\n                }\n            }\n\n            if (this.implementedTypeLinks) {\n\n                for (i = 0 ; i < this.implementedTypeLinks.length; i++) {\n                    var implementedMembers = (<PullTypeSymbol>this.implementedTypeLinks[i].end).getAllMembers(searchDeclKind, includePrivate);\n\n                    for (j = 0, m = implementedMembers.length; j < m; j++) {\n                        var implementedMember = implementedMembers[j];\n                        if (!this.memberNameCache[implementedMember.getName()]) {\n                            allMembers[allMembers.length] = implementedMember;\n                        }\n                    }\n                }\n            }\n\n            return allMembers;\n        }\n\n        public findTypeParameter(name: string): PullTypeParameterSymbol {\n            var memberSymbol: PullTypeParameterSymbol;\n\n            if (!this.memberTypeParameterNameCache) {\n                this.memberTypeParameterNameCache = new BlockIntrinsics();\n\n                if (this.typeParameterLinks) {\n                    for (var i = 0; i < this.typeParameterLinks.length; i++) {\n                        this.memberTypeParameterNameCache[this.typeParameterLinks[i].end.getName()] = this.typeParameterLinks[i].end;\n                    }\n                }\n            }\n\n            memberSymbol = this.memberTypeParameterNameCache[name];\n\n            return memberSymbol;\n        }\n\n        public cleanTypeParameters() {\n            if (this.typeParameterLinks) {\n                for (var i = 0; i < this.typeParameterLinks.length; i++) {\n                    this.removeOutgoingLink(this.typeParameterLinks[i]);\n                }\n            }\n\n            this.typeParameterLinks = null;\n            this.memberTypeParameterNameCache = null;\n        }\n\n        public setResolved() {\n            this.invalidatedSpecializations = true;\n            super.setResolved();\n        }\n\n        public invalidate() {\n\n            this.memberNameCache = null;\n            this.memberCache = null;\n            this.memberTypeNameCache = null;\n            this.containedMemberCache = null;\n\n            this.invalidatedSpecializations = false;\n\n            this.containedByLinks = null;\n\n            this.memberLinks = this.findOutgoingLinks(psl => psl.kind == SymbolLinkKind.PrivateMember ||\n                                                              psl.kind == SymbolLinkKind.PublicMember);\n\n            this.typeParameterLinks = this.findOutgoingLinks(psl => psl.kind == SymbolLinkKind.TypeParameter);\n\n            this.callSignatureLinks = this.findOutgoingLinks(psl => psl.kind == SymbolLinkKind.CallSignature);\n\n            this.constructSignatureLinks = this.findOutgoingLinks(psl => psl.kind == SymbolLinkKind.ConstructSignature);\n\n            this.indexSignatureLinks = this.findOutgoingLinks(psl => psl.kind == SymbolLinkKind.IndexSignature);\n\n            this.implementedTypeLinks = this.findOutgoingLinks(psl => psl.kind == SymbolLinkKind.Implements);\n\n            this.extendedTypeLinks = this.findOutgoingLinks(psl => psl.kind == SymbolLinkKind.Extends);\n\n            super.invalidate();\n        }\n\n        public getScopedName(scopeSymbol?: PullSymbol, useConstraintInName?: bool): string {\n            var name = super.getScopedName(scopeSymbol, useConstraintInName);\n\n            var typars = this.getTypeArguments();\n            if (!typars || !typars.length) {\n                typars = this.getTypeParameters();\n            }\n\n            var typarString = PullSymbol.getTypeParameterString(typars);\n            return name + typarString;\n        }\n\n        public isNamedTypeSymbol() {\n            var kind = this.getKind();\n            if (kind == PullElementKind.Primitive || // primitives\n                kind == PullElementKind.Class || // class\n                kind == PullElementKind.Container || // module\n                kind == PullElementKind.DynamicModule || // dynamic module\n                kind == PullElementKind.Enum || // enum\n                kind == PullElementKind.TypeParameter || //TypeParameter\n                ((kind == PullElementKind.Interface || kind == PullElementKind.ObjectType) && this.getName() != \"\")) {\n                return true;\n            }\n\n            return false;\n        }\n\n        public toString(useConstraintInName?: bool) {\n            var s = this.getScopedNameEx(null, useConstraintInName).toString();\n            return s;\n        }\n\n        public getScopedNameEx(scopeSymbol?: PullSymbol, useConstraintInName?: bool, getPrettyTypeName?: bool) {\n            if (!this.isNamedTypeSymbol()) {\n                return this.getMemberTypeNameEx(true, scopeSymbol, getPrettyTypeName);\n            }\n\n            return super.getScopedNameEx(scopeSymbol, useConstraintInName, getPrettyTypeName);\n        }\n\n        public hasOnlyOverloadCallSignatures() {\n            var members = this.getMembers();\n            var callSignatures = this.getCallSignatures();\n            var constructSignatures = this.getConstructSignatures();\n            return members.length == 0 && constructSignatures.length == 0 && callSignatures.length > 1;\n        }\n\n        public getMemberTypeNameEx(topLevel: bool, scopeSymbol?: PullSymbol, getPrettyTypeName?: bool): MemberName {\n            var members = this.getMembers();\n            var callSignatures = this.getCallSignatures();\n            var constructSignatures = this.getConstructSignatures();\n            var indexSignatures = this.getIndexSignatures();\n\n            if (members.length > 0 || callSignatures.length > 0 || constructSignatures.length > 0 || indexSignatures.length > 0) {\n                var allMemberNames = new MemberNameArray();\n                var curlies = !topLevel || indexSignatures.length != 0;\n                var delim = \"; \";\n                for (var i = 0; i < members.length; i++) {\n                    var memberTypeName = members[i].getNameAndTypeNameEx(scopeSymbol);\n\n                    if (memberTypeName.isArray() && (<MemberNameArray>memberTypeName).delim == delim) {\n                        allMemberNames.addAll((<MemberNameArray>memberTypeName).entries);\n                    } else {\n                        allMemberNames.add(memberTypeName);\n                    }\n                    curlies = true;\n                }\n\n                // Use pretty Function overload signature if this is just a call overload\n                var getPrettyFunctionOverload = getPrettyTypeName && !curlies && this.hasOnlyOverloadCallSignatures();\n\n                var signatureCount = callSignatures.length + constructSignatures.length + indexSignatures.length;\n                if (signatureCount != 0 || members.length != 0) {\n                    var useShortFormSignature = !curlies && (signatureCount == 1);\n                    var signatureMemberName: MemberName[];\n\n                    if (callSignatures.length > 0) {\n                        signatureMemberName =\n                            PullSignatureSymbol.getSignaturesTypeNameEx(callSignatures, \"\", useShortFormSignature, false, scopeSymbol, getPrettyFunctionOverload);\n                        allMemberNames.addAll(signatureMemberName);\n                    }\n\n                    if (constructSignatures.length > 0) {\n                        signatureMemberName =\n                            PullSignatureSymbol.getSignaturesTypeNameEx(constructSignatures, \"new\", useShortFormSignature, false, scopeSymbol);\n                        allMemberNames.addAll(signatureMemberName);\n                    }\n\n                    if (indexSignatures.length > 0) {\n                        signatureMemberName =\n                            PullSignatureSymbol.getSignaturesTypeNameEx(indexSignatures, \"\", useShortFormSignature, true, scopeSymbol);\n                        allMemberNames.addAll(signatureMemberName);\n                    }\n\n                    if ((curlies) || (!getPrettyFunctionOverload && (signatureCount > 1) && topLevel)) {\n                        allMemberNames.prefix = \"{ \";\n                        allMemberNames.suffix = \"}\";\n                        allMemberNames.delim = delim;\n                    } else if (allMemberNames.entries.length > 1) {\n                        allMemberNames.delim = delim;\n                    }\n\n                    return allMemberNames;\n                }\n            }\n\n            return MemberName.create(\"{}\");\n        }\n\n        public isExternallyVisible(inIsExternallyVisibleSymbols?: PullSymbol[]): bool {\n            var isVisible = super.isExternallyVisible(inIsExternallyVisibleSymbols);\n            if (isVisible) {\n                // Get type parameters\n                var typars = this.getTypeArguments();\n                if (!typars || !typars.length) {\n                    typars = this.getTypeParameters();\n                }\n\n                if (typars) {\n                    // If any of the type parameter is not visible the type is invisible\n                    for (var i = 0; i < typars.length; i++) {\n                        isVisible = PullSymbol.getIsExternallyVisible(typars[i], this, inIsExternallyVisibleSymbols);\n                        if (!isVisible) {\n                            break;\n                        }\n                    }\n                }\n            }\n            \n            return isVisible;\n        }\n    }\n\n    export class PullPrimitiveTypeSymbol extends PullTypeSymbol {\n        constructor(name: string) {\n            super(name, PullElementKind.Primitive);\n        }\n\n        public isResolved() { return true; }\n        \n        public invalidate() {\n            // do nothing...\n        }\n    }\n\n    export class PullErrorTypeSymbol extends PullPrimitiveTypeSymbol {\n        constructor(public diagnostic: PullDiagnostic, public delegateType: PullTypeSymbol) {\n            super(\"error\");\n        }\n\n        public isError() {\n            return true;\n        }\n\n        public getDiagnostic() {\n            return this.diagnostic;\n        }\n\n        public toString() {\n            return this.delegateType.toString();\n        }\n    }\n\n    // PULLTODO: Unify concepts of constructor method and container\n    // type instance types\n    export class PullClassTypeSymbol extends PullTypeSymbol {\n\n        private constructorMethod: PullSymbol = null;\n        private hasDefaultConstructor = false;\n\n        constructor(name: string) {\n            super(name, PullElementKind.Class);\n        }\n\n        public isClass() {\n            return true;\n        }\n\n        public setHasDefaultConstructor(hasOne=true) {\n            this.hasDefaultConstructor = hasOne;\n        }\n\n        public getHasDefaultConstructor() {\n            return this.hasDefaultConstructor;\n        }\n\n        public getConstructorMethod() {\n            return this.constructorMethod;\n        }\n\n        public setConstructorMethod(constructorMethod: PullSymbol) {\n            this.constructorMethod = constructorMethod;\n        }\n\n        public invalidate() {\n\n            if (this.constructorMethod) {\n                this.constructorMethod.invalidate();\n            }\n\n            super.invalidate();\n        }\n    }\n\n    // represents the module \"namespace\" type\n    export class PullContainerTypeSymbol extends PullTypeSymbol {\n        public instanceSymbol: PullSymbol  = null;\n\n        constructor(name: string, kind = PullElementKind.Container) {\n            super(name, kind);\n        }\n\n        public isContainer() { return true; }\n\n        public setInstanceSymbol(symbol: PullSymbol) {\n            this.instanceSymbol = symbol;\n        }\n\n        public getInstanceSymbol(): PullSymbol {\n            return this.instanceSymbol;\n        }\n\n        public invalidate() {\n\n            if (this.instanceSymbol) {\n                this.instanceSymbol.invalidate();\n            }\n\n            super.invalidate();\n        }\n\n        private findAliasedType(decls: PullDecl[]) {\n            for (var i = 0; i < decls.length; i++) {\n                var childDecls = decls[i].getChildDecls();\n                for (var j = 0; j < childDecls.length; j++) {\n                    if (childDecls[j].getKind() == PullElementKind.TypeAlias) {\n                        var symbol = childDecls[j].getSymbol();\n                        if (symbol.getType() == this) {\n                            return symbol;\n                        }\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public getAliasedSymbol(scopeSymbol: PullSymbol) {\n            var scopePath = scopeSymbol.pathToRoot();\n            if (scopePath.length && scopePath[scopePath.length - 1].getKind() == PullElementKind.DynamicModule) {\n                var decls = scopePath[scopePath.length - 1].getDeclarations();\n                var symbol = this.findAliasedType(decls);\n                return symbol;\n            }\n\n            return null;\n        }\n        \n        public getName(scopeSymbol?: PullSymbol, useConstraintInName?: bool): string {\n            if (scopeSymbol && this.getKind() == PullElementKind.DynamicModule) {\n                var symbol = this.getAliasedSymbol(scopeSymbol);\n                if (symbol) {\n                    return symbol.getName();\n                }\n            }\n            return super.getName();\n        }\n    }\n\n    export class PullTypeAliasSymbol extends PullTypeSymbol {\n\n        private typeAliasLink: PullSymbolLink = null;\n        private isUsedAsValue = false;\n        private typeUsedExternally = false;\n\n        constructor(name: string) {\n            super(name, PullElementKind.TypeAlias);\n        }\n\n        public isAlias() { return true; }\n\n        public setAliasedType(type: PullTypeSymbol) {\n            if (this.typeAliasLink) {\n                this.removeOutgoingLink(this.typeAliasLink);\n            }\n\n            this.typeAliasLink = this.addOutgoingLink(type, SymbolLinkKind.Aliases);\n        }\n\n        public getType(): PullTypeSymbol {\n            if (this.typeAliasLink) {\n                return <PullTypeSymbol>this.typeAliasLink.end;\n            }\n\n            return null;\n        }\n\n        public setType(type: PullTypeSymbol) {\n            this.setAliasedType(type);\n        }\n\n        public setIsUsedAsValue() {\n            this.isUsedAsValue = true;\n        }\n\n        public getIsUsedAsValue() {\n            return this.isUsedAsValue;\n        }\n\n        public setIsTypeUsedExternally() {\n            this.typeUsedExternally = true;\n        }\n\n        public getTypeUsedExternally() {\n            return this.typeUsedExternally;\n        }\n\n        public getMembers(): PullSymbol[] {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).getMembers();\n            }\n\n            return [];\n        }\n\n        public getCallSignatures(): PullSignatureSymbol[] {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).getCallSignatures();\n            }\n\n            return [];\n        }\n\n        public getConstructSignatures(): PullSignatureSymbol[] {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).getConstructSignatures();\n            }\n\n            return [];\n        }\n\n        public getIndexSignatures(): PullSignatureSymbol[] {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).getIndexSignatures();\n            }\n\n            return [];\n        }        \n\n        public findMember(name: string): PullSymbol {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).findMember(name);\n            }\n\n            return null;\n        }\n\n        public findNestedType(name: string): PullTypeSymbol {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).findNestedType(name);\n            }\n\n            return null;\n        }\n\n        public getAllMembers(searchDeclKind: PullElementKind, includePrivate: bool): PullSymbol[] {\n            if (this.typeAliasLink) {\n                return (<PullTypeSymbol>this.typeAliasLink.end).getAllMembers(searchDeclKind, includePrivate);\n            }\n\n            return [];\n        }\n\n        public invalidate() {\n            this.isUsedAsValue = false;\n\n            super.invalidate();\n        }\n    }\n\n    export class PullDefinitionSignatureSymbol extends PullSignatureSymbol {\n        public isDefinition() { return true; }\n    }\n\n    export class PullFunctionTypeSymbol extends PullTypeSymbol {\n        private definitionSignature: PullDefinitionSignatureSymbol = null;\n\n        constructor() {\n            super(\"\", PullElementKind.FunctionType);\n        }\n\n        public isFunction() { return true; }\n\n        public invalidate() {\n\n            var callSignatures = this.getCallSignatures();\n\n            if (callSignatures.length) {\n                for (var i = 0; i < callSignatures.length; i++) {\n                    callSignatures[i].invalidate();\n                }\n            }\n\n            this.definitionSignature = null;\n\n            super.invalidate();\n        }\n\n        public addSignature(signature: PullSignatureSymbol) {\n            this.addCallSignature(signature);\n\n            if (signature.isDefinition()) {\n                this.definitionSignature = <PullDefinitionSignatureSymbol>signature;\n            }\n        }\n\n        public getDefinitionSignature() { return this.definitionSignature; }\n    }\n\n    export class PullConstructorTypeSymbol extends PullTypeSymbol {\n        private definitionSignature: PullDefinitionSignatureSymbol = null;\n\n        constructor() {\n            super(\"\", PullElementKind.ConstructorType);\n        }\n\n        public isFunction() { return true; }\n        public isConstructor() { return true; }\n\n        public invalidate() {\n\n            this.definitionSignature = null;\n\n            super.invalidate();\n        }\n\n        public addSignature(signature: PullSignatureSymbol) {\n            this.addConstructSignature(signature);\n\n            if (signature.isDefinition()) {\n                this.definitionSignature = <PullDefinitionSignatureSymbol>signature;\n            }\n        }\n\n        public addTypeParameter(typeParameter: PullTypeParameterSymbol) {\n\n            this.addMember(typeParameter, SymbolLinkKind.TypeParameter);\n\n            var constructSignatures = this.getConstructSignatures();\n\n            for (var i = 0; i < constructSignatures.length; i++) {\n                constructSignatures[i].addTypeParameter(typeParameter);\n            }\n        }\n\n        public getDefinitionSignature() { return this.definitionSignature; }\n    }\n\n    export class PullTypeParameterSymbol extends PullTypeSymbol {\n        private constraintLink: PullSymbolLink = null;\n\n        constructor(name: string) {\n            super(name, PullElementKind.TypeParameter);\n        }\n\n        public isTypeParameter() { return true; }\n\n        public setConstraint(constraintType: PullTypeSymbol) {\n\n            if (this.constraintLink) {\n                this.removeOutgoingLink(this.constraintLink);\n            }\n\n            this.constraintLink = this.addOutgoingLink(constraintType, SymbolLinkKind.TypeConstraint);\n        }\n\n        public getConstraint(): PullTypeSymbol {\n            if (this.constraintLink) {\n                return <PullTypeSymbol>this.constraintLink.end;\n            }\n\n            return null;\n        }\n\n        public isGeneric() { return true; }\n\n        public getName(scopeSymbol?: PullSymbol, useConstraintInName?: bool) {\n\n            var name = super.getName(scopeSymbol);\n\n            if (this.isPrinting) {\n                return name;\n            }\n\n            this.isPrinting = true;         \n\n            if (useConstraintInName && this.constraintLink) {\n                name += \" extends \" + this.constraintLink.end.toString();\n            }\n\n            this.isPrinting = false;\n        \n            return name;\n        }\n\n        public isExternallyVisible(inIsExternallyVisibleSymbols?: PullSymbol[]): bool {\n            var constraint = this.getConstraint();\n            if (constraint) {\n                return PullSymbol.getIsExternallyVisible(constraint, this, inIsExternallyVisibleSymbols);\n            }\n\n            return true;          \n        }\n    }\n\n    // transient type variables...\n    export class PullTypeVariableSymbol extends PullTypeParameterSymbol {\n\n        constructor(name: string) {\n            super(name);\n        }\n\n        private tyvarID =  globalTyvarID++;\n\n        public isTypeParameter() { return true; }\n        public isTypeVariable() { return true; }\n    }\n\n\n    export class PullAccessorSymbol extends PullSymbol {\n\n        private getterSymbolLink: PullSymbolLink = null;\n        private setterSymbolLink: PullSymbolLink = null;\n\n        constructor(name: string) {\n            super(name, PullElementKind.Property);\n        }\n\n        public isAccessor() { return true; }\n\n        public setSetter(setter: PullSymbol) {\n            this.setterSymbolLink = this.addOutgoingLink(setter, SymbolLinkKind.SetterFunction);\n        }\n\n        public getSetter(): PullSymbol {\n            var setter: PullSymbol = null;\n\n            if (this.setterSymbolLink) {\n                setter = this.setterSymbolLink.end;\n            }\n\n            return setter;\n        }\n\n        public removeSetter() {\n            if (this.setterSymbolLink) {\n                this.removeOutgoingLink(this.setterSymbolLink);\n            }\n        }\n\n        public setGetter(getter: PullSymbol) {\n            this.getterSymbolLink = this.addOutgoingLink(getter, SymbolLinkKind.GetterFunction);\n        }\n\n        public getGetter(): PullSymbol {\n            var getter: PullSymbol = null;\n\n            if (this.getterSymbolLink) {\n                getter = this.getterSymbolLink.end;\n            }\n\n            return getter;\n        }\n\n        public removeGetter() {\n            if (this.getterSymbolLink) {\n                this.removeOutgoingLink(this.getterSymbolLink);\n            }\n        }\n\n        public invalidate() {\n            if (this.getterSymbolLink) {\n                this.getterSymbolLink.end.invalidate();\n            }\n\n            if (this.setterSymbolLink) {\n                this.setterSymbolLink.end.invalidate();\n            }\n\n            super.invalidate();\n        }\n    }\n\n    export class PullArrayTypeSymbol extends PullTypeSymbol {\n        private elementType: PullTypeSymbol = null;\n\n        public isArray() { return true; }\n        public getElementType() { return this.elementType; }\n        public isGeneric() { return true; }\n\n        constructor() {\n            super(\"Array\", PullElementKind.Array);\n        }\n\n        public setElementType(type: PullTypeSymbol) {\n            this.elementType = type;\n        }\n\n        public getScopedNameEx(scopeSymbol?: PullSymbol, useConstraintInName?: bool, getPrettyTypeName?: bool) {\n            var elementMemberName = this.elementType ? this.elementType.getScopedNameEx(scopeSymbol, false, getPrettyTypeName) : MemberName.create(\"any\");\n            return MemberName.create(elementMemberName, \"\", \"[]\");\n        }\n\n        public getMemberTypeNameEx(topLevel: bool, scopeSymbol?: PullSymbol, getPrettyTypeName?: bool): MemberName {\n            var elementMemberName = this.elementType ? this.elementType.getMemberTypeNameEx(false, scopeSymbol, getPrettyTypeName) : MemberName.create(\"any\");\n            return MemberName.create(elementMemberName, \"\", \"[]\");\n        }\n    }\n\n    // PULLTODO: This should be a part of the resolver class\n    export function specializeToArrayType(typeToReplace: PullTypeSymbol, typeToSpecializeTo: PullTypeSymbol, resolver: PullTypeResolver, context: PullTypeResolutionContext) {\n\n        var arrayInterfaceType = resolver.getCachedArrayType();\n\n        // For the time-being, only specialize interface types\n        // this way we can assume only public members and non-static methods\n        if (!arrayInterfaceType || (arrayInterfaceType.getKind() & PullElementKind.Interface) == 0) {\n            return null;\n        }\n\n        // PULLREVIEW: Accept both generic and non-generic arrays for now\n        if (arrayInterfaceType.isGeneric()) {\n            var enclosingDecl = arrayInterfaceType.getDeclarations()[0];\n            return specializeType(arrayInterfaceType, [typeToSpecializeTo], resolver, enclosingDecl, context);\n        }\n\n        if (typeToSpecializeTo.getArrayType()) {\n            return typeToSpecializeTo.getArrayType();\n        }\n\n        // PULLTODO: Recursive reference bug\n        var newArrayType: PullTypeSymbol = new PullArrayTypeSymbol();\n        newArrayType.addDeclaration(arrayInterfaceType.getDeclarations()[0]);\n\n        typeToSpecializeTo.setArrayType(newArrayType);\n        newArrayType.addOutgoingLink(typeToSpecializeTo, SymbolLinkKind.ArrayOf);\n\n        var field: PullSymbol = null;\n        var newField: PullSymbol = null;\n        var fieldType: PullTypeSymbol = null;\n\n        var method: PullSymbol = null;\n        var methodType: PullFunctionTypeSymbol = null;\n        var newMethod: PullSymbol = null;\n        var newMethodType: PullFunctionTypeSymbol = null;\n\n        var signatures: PullSignatureSymbol[] = null;\n        var newSignature: PullSignatureSymbol = null;\n\n        var parameters: PullSymbol[] = null;\n        var newParameter: PullSymbol = null;\n        var parameterType: PullTypeSymbol = null;\n\n        var returnType: PullTypeSymbol = null;\n        var newReturnType: PullTypeSymbol = null;\n\n        var members = arrayInterfaceType.getMembers();\n\n        for (var i = 0; i < members.length; i++) {\n            resolver.resolveDeclaredSymbol(members[i], null, context);\n\n            if (members[i].getKind() == PullElementKind.Method) { // must be a method\n                method = <PullFunctionTypeSymbol> members[i];\n\n                resolver.resolveDeclaredSymbol(method, null, context);\n\n                methodType = <PullFunctionTypeSymbol>method.getType();\n\n                newMethod = new PullSymbol(method.getName(), PullElementKind.Method);\n                newMethodType = new PullFunctionTypeSymbol();\n                newMethod.setType(newMethodType);\n\n                newMethod.addDeclaration(method.getDeclarations()[0]);\n\n                signatures = methodType.getCallSignatures();\n\n                // specialize each signature\n                for (var j = 0; j < signatures.length; j++) {\n\n                    newSignature = new PullSignatureSymbol(PullElementKind.CallSignature);\n                    newSignature.addDeclaration(signatures[j].getDeclarations()[0]);\n\n                    parameters = signatures[j].getParameters();\n                    returnType = signatures[j].getReturnType();\n\n                    if (returnType == typeToReplace) {\n                        newSignature.setReturnType(typeToSpecializeTo);\n                    }\n                    else {\n                        newSignature.setReturnType(returnType);\n                    }\n\n                    for (var k = 0; k < parameters.length; k++) {\n                        newParameter = new PullSymbol(parameters[k].getName(), parameters[k].getKind());\n\n                        parameterType = parameters[k].getType();\n\n                        if (parameterType === null) { continue; }\n\n\n                        if (parameterType == typeToReplace) {\n                            newParameter.setType(typeToSpecializeTo);\n                        }\n                        else {\n                            newParameter.setType(parameterType);\n                        }\n\n                        newSignature.addParameter(newParameter);\n                    }\n\n                    newMethodType.addSignature(newSignature);\n                }\n\n                newArrayType.addMember(newMethod, SymbolLinkKind.PublicMember);\n            }\n\n            else { // must be a field\n                field = members[i];\n\n                newField = new PullSymbol(field.getName(), field.getKind());\n                newField.addDeclaration(field.getDeclarations()[0]);\n\n                fieldType = field.getType();\n\n                if (fieldType == typeToReplace) {\n                    newField.setType(typeToSpecializeTo);\n                }\n                else {\n                    newField.setType(fieldType);\n                }\n\n                newArrayType.addMember(newField, SymbolLinkKind.PublicMember);\n            }\n        }\n        newArrayType.addOutgoingLink(arrayInterfaceType, SymbolLinkKind.ArrayType);\n        return newArrayType;\n    }\n\n    export function specializeType(typeToSpecialize: PullTypeSymbol, typeArguments: PullTypeSymbol[], resolver: PullTypeResolver, enclosingDecl: PullDecl, context: PullTypeResolutionContext, ast?: AST): PullTypeSymbol {\n\n        if (typeToSpecialize.isPrimitive() || !typeToSpecialize.isGeneric()) {\n            return typeToSpecialize;\n        }\n\n        if (typeToSpecialize.currentlyBeingSpecialized()) {\n            return typeToSpecialize;\n        }\n\n        if (typeToSpecialize.isTypeParameter()) {\n\n            if (context.specializingToAny) {\n                return resolver.semanticInfoChain.anyTypeSymbol;\n            }\n\n            var subsitution = context.findSpecializationForType(typeToSpecialize);\n\n            if (subsitution != typeToSpecialize) {\n                return subsitution;\n            }\n\n            if (typeArguments.length) {\n                return typeArguments[0];\n            }\n        }\n\n        // In this case, we have an array type that may have been specialized to a type variable\n        if (typeToSpecialize.isArray()) {\n\n            var elementType = (<PullArrayTypeSymbol>typeToSpecialize).getElementType();\n\n            var newElementType = specializeType(elementType, typeArguments, resolver, enclosingDecl, context, ast);\n\n            // we re-specialize so that we can re-use any cached array type symbols\n            var newArrayType = specializeType(resolver.getCachedArrayType(), [newElementType], resolver, enclosingDecl, context);\n\n            return newArrayType;\n        }\n\n        var typeParameters = typeToSpecialize.getTypeParameters();\n\n        var isArray = typeToSpecialize == resolver.getCachedArrayType() || typeToSpecialize.isArray();\n\n        //if (!typeParameters.length) {\n        //    return typeToSpecialize;\n        //}\n\n        var i = 0;\n        var j = 0;\n\n        if (!typeArguments.length) {\n            for (i = 0; i < typeParameters.length; i++) {\n                typeArguments[typeArguments.length] = resolver.semanticInfoChain.anyTypeSymbol;\n            }\n        }\n\n        var newType: PullTypeSymbol = isArray ? typeArguments[0].getArrayType() : typeToSpecialize.getSpecialization(typeArguments);\n\n        if (newType) {\n            if (!newType.isResolved() && !newType.currentlyBeingSpecialized()) {\n                typeToSpecialize.invalidateSpecializations();\n            }\n            else {\n                return newType;\n            }\n        }\n\n        var newTypeDecl = typeToSpecialize.getDeclarations()[0];\n        \n        var prevInSpecialization = context.inSpecialization;\n\n        newType = typeToSpecialize.isClass() ? new PullClassTypeSymbol(typeToSpecialize.getName()) :\n                    isArray ? new PullArrayTypeSymbol() :\n                    typeToSpecialize.isTypeParameter() ? // watch out for replacing one tyvar with another\n                        new PullTypeVariableSymbol(typeToSpecialize.getName()) :\n                        new PullTypeSymbol(typeToSpecialize.getName(), typeToSpecialize.getKind());\n        newType.addDeclaration(newTypeDecl);\n\n        newType.setIsBeingSpecialized();\n\n        newType.setTypeArguments(typeArguments);\n\n        typeToSpecialize.addSpecialization(newType, typeArguments);\n\n        if (isArray) {\n            (<PullArrayTypeSymbol>newType).setElementType(typeArguments[0]);\n            typeArguments[0].setArrayType(newType);\n        }\n\n        // create the type replacement map\n\n        var typeReplacementMap: any = {};\n\n        for (i = 0; i < typeParameters.length; i++) {\n            if (typeParameters[i] != typeArguments[i]) {\n                typeReplacementMap[typeParameters[i].getSymbolID().toString()] = typeArguments[i];\n            }\n            newType.addMember(typeParameters[i], SymbolLinkKind.TypeParameter);\n        }\n\n        // specialize any extends/implements types\n        var extendedTypesToSpecialize = typeToSpecialize.getExtendedTypes();\n        var typeDecl: PullDecl;\n        var typeAST: TypeDeclaration;\n        var unitPath: string;\n\n        if (extendedTypesToSpecialize.length) {\n            typeDecl = typeToSpecialize.getDeclarations()[0];\n            typeAST = <TypeDeclaration>resolver.semanticInfoChain.getASTForDecl(typeDecl, typeDecl.getScriptName());\n            unitPath = resolver.getUnitPath();\n            resolver.setUnitPath(typeDecl.getScriptName());\n            context.pushTypeSpecializationCache(typeReplacementMap);\n            var extendTypeSymbol = resolver.resolveTypeReference(new TypeReference(typeAST.extendsList.members[0], 0), typeDecl, context);\n            resolver.setUnitPath(unitPath);\n            context.popTypeSpecializationCache();\n\n            newType.addExtendedType(extendTypeSymbol);\n        }\n\n        var implementedTypesToSpecialize = typeToSpecialize.getImplementedTypes();\n\n        if (implementedTypesToSpecialize.length) {\n            typeDecl = typeToSpecialize.getDeclarations()[0];\n            typeAST = <TypeDeclaration>resolver.semanticInfoChain.getASTForDecl(typeDecl, typeDecl.getScriptName());\n            unitPath = resolver.getUnitPath();\n            resolver.setUnitPath(typeDecl.getScriptName());\n            context.pushTypeSpecializationCache(typeReplacementMap);\n            var implementedTypeSymbol = resolver.resolveTypeReference(new TypeReference(typeAST.implementsList.members[0], 0), typeDecl, context);\n            resolver.setUnitPath(unitPath);\n            context.popTypeSpecializationCache();\n\n            newType.addImplementedType(implementedTypeSymbol);\n        }\n\n        var callSignatures = typeToSpecialize.getCallSignatures();\n        var constructSignatures = typeToSpecialize.getConstructSignatures();\n        var indexSignatures = typeToSpecialize.getIndexSignatures();\n        var members = typeToSpecialize.getMembers();\n\n        // specialize call signatures\n        var newSignature: PullSignatureSymbol;\n        var signature: PullSignatureSymbol;\n\n        var decl: PullDecl = null;\n        var decls: PullDecl[] = null;\n        var declAST: AST = null;\n        var parameters: PullSymbol[];\n        var newParameters: PullSymbol[];\n        var returnType: PullTypeSymbol = null;\n        var p = 0;\n\n        for (i = 0; i < callSignatures.length; i++) {\n            signature = callSignatures[i];\n\n            if (signature.currentlyBeingSpecialized()) {\n                newType.addCallSignature(signature);\n                continue;\n            }\n\n            context.pushTypeSpecializationCache(typeReplacementMap);\n\n            decl = signature.getDeclarations()[0];\n            unitPath = resolver.getUnitPath();\n            resolver.setUnitPath(decl.getScriptName());\n\n            newSignature = new PullSignatureSymbol(signature.getKind());\n\n            newSignature.mimicSignature(signature);\n            declAST = resolver.semanticInfoChain.getASTForDecl(decl, decl.getScriptName());\n\n            decl.setSignatureSymbol(newSignature);\n            resolver.resolveAST(declAST, false, newTypeDecl, context);\n            decl.setSignatureSymbol(signature);\n\n            parameters = signature.getParameters();\n            newParameters = newSignature.getParameters();\n\n            for (p = 0; p < parameters.length; p++) {\n                newParameters[p].setType(parameters[p].getType());\n            }\n            newSignature.setResolved();\n\n            resolver.setUnitPath(unitPath);\n\n            returnType = newSignature.getReturnType();\n\n            if (!returnType) {\n                newSignature.setReturnType(signature.getReturnType());\n            }\n\n            signature.setIsBeingSpecialized();\n            newSignature.addDeclaration(decl);\n            newSignature = specializeSignature(newSignature, true, typeReplacementMap, [], resolver, newTypeDecl, context);\n            signature.setIsSpecialized();\n\n            context.popTypeSpecializationCache();\n\n            if (!newSignature) {\n                context.inSpecialization = prevInSpecialization;\n                return resolver.semanticInfoChain.anyTypeSymbol;\n            }            \n\n            newType.addCallSignature(newSignature);\n\n            if (newSignature.hasGenericParameter()) {\n                newType.setHasGenericSignature();\n            }\n        }\n\n        // specialize construct signatures\n        for (i = 0; i < constructSignatures.length; i++) {\n            signature = constructSignatures[i];\n\n            context.pushTypeSpecializationCache(typeReplacementMap);\n\n            decl = signature.getDeclarations()[0];\n            unitPath = resolver.getUnitPath();\n            resolver.setUnitPath(decl.getScriptName());\n\n            newSignature = new PullSignatureSymbol(signature.getKind());\n\n            newSignature.mimicSignature(signature);\n            declAST = resolver.semanticInfoChain.getASTForDecl(decl, decl.getScriptName());\n\n            decl.setSignatureSymbol(newSignature);\n            resolver.resolveAST(declAST, false, newTypeDecl, context);\n            decl.setSignatureSymbol(signature);\n\n            parameters = signature.getParameters();\n            newParameters = newSignature.getParameters();\n\n            // we need to clone the parameter types, but the return type\n            // was set during resolution\n            for (p = 0; p < parameters.length; p++) {\n                newParameters[p].setType(parameters[p].getType());\n            }\n            newSignature.setResolved();\n\n            resolver.setUnitPath(unitPath);\n\n            returnType = newSignature.getReturnType();\n\n            if (!returnType) {\n                newSignature.setReturnType(signature.getReturnType());\n            }            \n\n            signature.setIsBeingSpecialized();\n            newSignature.addDeclaration(decl);\n            newSignature = specializeSignature(newSignature, true, typeReplacementMap, [], resolver, newTypeDecl, context);\n            signature.setIsSpecialized();\n\n            context.popTypeSpecializationCache();\n\n            if (!newSignature) {\n                context.inSpecialization = prevInSpecialization;\n                return resolver.semanticInfoChain.anyTypeSymbol;\n            }\n\n            newType.addConstructSignature(newSignature);\n\n            if (newSignature.hasGenericParameter()) {\n                newType.setHasGenericSignature();\n            }\n        }\n\n        // specialize index signatures\n        for (i = 0; i < indexSignatures.length; i++) {\n            signature = indexSignatures[i];\n\n            context.pushTypeSpecializationCache(typeReplacementMap);\n\n            decl = signature.getDeclarations()[0];\n            unitPath = resolver.getUnitPath();\n            resolver.setUnitPath(decl.getScriptName());\n\n            newSignature = new PullSignatureSymbol(signature.getKind());\n\n            newSignature.mimicSignature(signature);\n            declAST = resolver.semanticInfoChain.getASTForDecl(decl, decl.getScriptName());\n\n            decl.setSignatureSymbol(newSignature);\n            resolver.resolveAST(declAST, false, newTypeDecl, context);\n            decl.setSignatureSymbol(signature);\n\n            parameters = signature.getParameters();\n            newParameters = newSignature.getParameters();\n\n            // we need to clone the parameter types, but the return type\n            // was set during resolution\n            for (p = 0; p < parameters.length; p++) {\n                newParameters[p].setType(parameters[p].getType());\n            }\n            newSignature.setResolved();\n\n            resolver.setUnitPath(unitPath);\n\n            returnType = newSignature.getReturnType();\n\n            if (!returnType) {\n                newSignature.setReturnType(signature.getReturnType());\n            }            \n\n            signature.setIsBeingSpecialized();\n            newSignature.addDeclaration(decl);\n            newSignature = specializeSignature(newSignature, true, typeReplacementMap, [], resolver, newTypeDecl, context);\n            signature.setIsSpecialized();\n\n            context.popTypeSpecializationCache();\n\n            if (!newSignature) {\n                context.inSpecialization = prevInSpecialization;\n                return resolver.semanticInfoChain.anyTypeSymbol;\n            }\n            \n            newType.addIndexSignature(newSignature);\n\n            if (newSignature.hasGenericParameter()) {\n                newType.setHasGenericSignature();\n            }\n        }        \n\n        // specialize members\n\n        var field: PullSymbol = null;\n        var newField: PullSymbol = null;\n\n        var fieldType: PullTypeSymbol = null;\n        var newFieldType: PullTypeSymbol = null;\n        var replacementType: PullTypeSymbol = null;\n\n        var fieldSignatureSymbol: PullSignatureSymbol = null;\n\n        for (i = 0; i < members.length; i++) {\n            field = members[i];\n\n            decls = field.getDeclarations();\n\n            newField = new PullSymbol(field.getName(), field.getKind());\n\n            for (j = 0; j < decls.length; j++) {\n                newField.addDeclaration(decls[j]);\n            }\n\n            if (field.getIsOptional()) {\n                newField.setIsOptional();\n            }\n\n            if (!field.isResolved()) {\n                resolver.resolveDeclaredSymbol(field, newTypeDecl, context);\n            }            \n\n            fieldType = field.getType();\n\n            if (!fieldType) {\n                fieldType = new PullTypeVariableSymbol(\"tyvar\" + globalTyvarID);\n            }\n\n            replacementType = <PullTypeSymbol>typeReplacementMap[fieldType.getSymbolID().toString()];\n\n            if (replacementType) {\n                newField.setType(replacementType);\n                decl = decls[0];\n\n                for (j = 0; j < decls.length; j++) {\n                    newField.addDeclaration(decls[j]);\n                }\n            }\n            else {\n                // re-resolve all field decls using the current replacements\n                if (fieldType.isGeneric()) {\n                    unitPath = resolver.getUnitPath();\n                    resolver.setUnitPath(decls[0].getScriptName());\n\n                    context.pushTypeSpecializationCache(typeReplacementMap);\n\n                    newFieldType = specializeType(fieldType, typeArguments, resolver, newTypeDecl, context, ast);\n\n                    resolver.setUnitPath(unitPath);\n\n                    context.popTypeSpecializationCache();\n\n                    newField.setType(newFieldType);\n                }\n                else {\n                    newField.setType(fieldType);\n                }\n            }\n\n            newType.addMember(newField, (field.hasFlag(PullElementFlags.Private)) ? SymbolLinkKind.PrivateMember : SymbolLinkKind.PublicMember);\n        }\n\n        // specialize the constructor and statics, if need be\n        if (typeToSpecialize.isClass()) {\n            var constructorMethod = (<PullClassTypeSymbol>typeToSpecialize).getConstructorMethod();\n            var newConstructorMethod = new PullSymbol(constructorMethod.getName(), PullElementKind.ConstructorMethod);\n            var newConstructorType = specializeType(constructorMethod.getType(), typeArguments, resolver, newTypeDecl, context, ast);\n\n            newConstructorMethod.setType(newConstructorType);\n\n            var constructorDecls: PullDecl[] = constructorMethod.getDeclarations();\n\n            for (i = 0; i < constructorDecls.length; i++) {\n                newConstructorMethod.addDeclaration(constructorDecls[i]);\n                newConstructorType.addDeclaration(constructorDecls[i]);\n            }\n\n            (<PullClassTypeSymbol>newType).setConstructorMethod(newConstructorMethod);\n        }\n\n        newType.setIsSpecialized();\n\n        newType.setResolved();\n\n        context.inSpecialization = prevInSpecialization;\n        return newType;\n    }\n\n    // PULLTODO: Replace typeReplacementMap with use of context\n    export function specializeSignature(signature: PullSignatureSymbol,\n        skipLocalTypeParameters: bool,\n        typeReplacementMap: any,\n        typeArguments: PullTypeSymbol[],\n        resolver: PullTypeResolver,\n        enclosingDecl: PullDecl,\n        context: PullTypeResolutionContext,\n        ast?: AST): PullSignatureSymbol {\n\n        if (signature.currentlyBeingSpecialized()) {\n            return signature;\n        }        \n\n        var newSignature = signature.getSpecialization(typeArguments);\n        var i = 0;\n\n        if (newSignature) {\n            return newSignature;\n        }\n\n        signature.setIsBeingSpecialized();\n\n        var prevInSpecialization = context.inSpecialization;\n        context.inSpecialization = true;\n\n        newSignature = new PullSignatureSymbol(signature.getKind());\n        newSignature.addDeclaration(signature.getDeclarations()[0]);\n\n        if (signature.hasVariableParamList()) {\n            newSignature.setHasVariableParamList();\n        }\n\n        if (signature.hasGenericParameter()) {\n            newSignature.setHasGenericParameter();\n        }\n\n        signature.addSpecialization(newSignature, typeArguments);      \n\n        var parameters = signature.getParameters();\n        var typeParameters = signature.getTypeParameters();\n        var returnType = signature.getReturnType();\n\n        // if (!returnType) {\n        //     returnType = new PullTypeVariableSymbol();\n        // }\n\n        for (i = 0; i < typeParameters.length; i++) {\n            newSignature.addTypeParameter(typeParameters[i]);\n        }\n\n        if (signature.hasGenericParameter()) {\n            newSignature.setHasGenericParameter();\n        }\n\n        context.pushTypeSpecializationCache(typeReplacementMap);\n        var newReturnType = specializeType(returnType, typeArguments, resolver, enclosingDecl, context, ast);\n        context.popTypeSpecializationCache();      \n\n        // if (newReturnType != returnType) {\n\n        //     newReturnType.addDeclaration(returnType.getDeclarations()[0]);\n        // }\n\n        newSignature.setReturnType(newReturnType);\n\n        var newParameter: PullSymbol;\n        var newParameterType: PullTypeSymbol;\n        var newParameterElementType: PullTypeSymbol;\n        var parameterType: PullTypeSymbol;\n        var replacementParameterType: PullTypeSymbol;\n        var localTypeParameters: any = {};\n\n        // if we specialize the signature recursive (through, say, the specialization of a method whilst specializing\n        // its class), we need to prevent accidental specialization of type parameters that shadow type parameters in the\n        // enclosing type.  (E.g., \"class C<T> { public m<T>() {...} }\" )\n        if (skipLocalTypeParameters) {\n            for (i = 0; i < typeParameters.length; i++) {\n                localTypeParameters[typeParameters[i].getName()] = true;\n            }\n        }\n\n        for (var k = 0; k < parameters.length; k++) {\n\n            newParameter = new PullSymbol(parameters[k].getName(), parameters[k].getKind());\n            newParameter.addDeclaration(parameters[k].getDeclarations()[0]);\n\n            parameterType = parameters[k].getType();\n\n            context.pushTypeSpecializationCache(typeReplacementMap);\n            newParameterType = !localTypeParameters[parameterType.getName()] ? specializeType(parameterType, typeArguments, resolver, enclosingDecl, context, ast) : parameterType;\n            context.popTypeSpecializationCache();\n\n            // if (newParameterType != parameterType) {\n            //     newParameterType.addDeclaration(parameterType.getDeclarations()[0]);\n            // }\n\n            if (parameters[k].getIsOptional()) {\n                newParameter.setIsOptional();\n            }\n\n            newParameter.setType(newParameterType);\n            newSignature.addParameter(newParameter, newParameter.getIsOptional());\n        }\n\n        signature.setIsSpecialized();\n\n        context.inSpecialization = prevInSpecialization;\n\n        return newSignature;\n    }\n\n    export function getIDForTypeSubstitutions(types: PullTypeSymbol[]): string {\n        var substitution = \"\";\n\n        for (var i = 0; i < types.length; i++) {\n            substitution += types[i].getSymbolID().toString() + \"#\";\n        }\n\n        return substitution;\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n\n    export class PullSymbolBindingContext {\n\n        private parentChain: PullTypeSymbol[] = [];\n        private declPath: string[] = [];\n        public semanticInfo: SemanticInfo;\n        public reBindingAfterChange = false;\n        public startingDeclForRebind = pullDeclID; // note that this gets set on creation\n\n        constructor(public semanticInfoChain: SemanticInfoChain, public scriptName: string) {\n            this.semanticInfo = this.semanticInfoChain.getUnit(this.scriptName);\n        }\n\n        public getParent(n = 0): PullTypeSymbol { return this.parentChain ? this.parentChain[this.parentChain.length - 1 - n] : null; }\n        public getDeclPath() { return this.declPath; }\n\n        public pushParent(parentDecl: PullTypeSymbol) {\n            if (parentDecl) {\n                this.parentChain[this.parentChain.length] = parentDecl;\n                this.declPath[this.declPath.length] = parentDecl.getName();\n            }\n        }\n\n        public popParent() {\n            if (this.parentChain.length) {\n                this.parentChain.length--;\n                this.declPath.length--;\n            }\n        }\n    }\n\n    export var time_in_findSymbol = 0;\n\n    export function findSymbolInContext(name: string, declKind: PullElementKind, context: PullSymbolBindingContext, typeLookupPath: string[]): PullSymbol {\n        var startTime = new Date().getTime();\n        var contextSymbolPath: string[] = context.getDeclPath();\n        var nestedSymbolPath: string[] = [];\n        var copyOfContextSymbolPath = [];\n        var symbol: PullSymbol = null;\n        var i = 0;\n        var endTime: number;\n\n        // first, search within the given symbol path\n        if (typeLookupPath.length) {\n\n            for (i = 0; i < typeLookupPath.length; i++) {\n                nestedSymbolPath[nestedSymbolPath.length] = typeLookupPath[i];\n            }\n\n            nestedSymbolPath[nestedSymbolPath.length] = name;\n\n            while (nestedSymbolPath.length >= 2) {\n                symbol = context.semanticInfoChain.findSymbol(nestedSymbolPath, declKind);\n\n                if (symbol) {\n                    endTime = new Date().getTime();\n                    time_in_findSymbol += endTime - startTime;\n                    return symbol;\n                }\n                nestedSymbolPath.length -= 2;\n                nestedSymbolPath[nestedSymbolPath.length] = name;\n            }\n        }\n\n        // next, link back up to the enclosing context\n        if (contextSymbolPath.length) {\n            \n            for (i = 0; i < contextSymbolPath.length; i++) {\n                copyOfContextSymbolPath[copyOfContextSymbolPath.length] = contextSymbolPath[i];\n            }\n\n            for (i = 0; i < typeLookupPath.length; i++) {\n                copyOfContextSymbolPath[copyOfContextSymbolPath.length] = typeLookupPath[i];\n            }\n\n            copyOfContextSymbolPath[copyOfContextSymbolPath.length] = name;\n\n            while (copyOfContextSymbolPath.length >= 2) {\n                symbol = context.semanticInfoChain.findSymbol(copyOfContextSymbolPath, declKind);\n\n                if (symbol) {\n                    endTime = new Date().getTime();\n                    time_in_findSymbol += endTime - startTime;\n                    return symbol;\n                }\n\n                copyOfContextSymbolPath.length -= 2;\n                copyOfContextSymbolPath[copyOfContextSymbolPath.length] = name;\n            }\n        }\n\n        // finally, try searching globally\n        symbol = context.semanticInfoChain.findSymbol([name], declKind);\n\n        endTime = new Date().getTime();\n        time_in_findSymbol += endTime - startTime;\n\n        return symbol;\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export class CandidateInferenceInfo {\n        public typeParameter: PullTypeParameterSymbol = null;\n        public isFixed = false;\n        public inferenceCandidates: PullTypeSymbol[] = [];\n\n        public addCandidate(candidate: PullTypeSymbol) {\n            if (!this.isFixed) {\n                this.inferenceCandidates[this.inferenceCandidates.length] = candidate;\n            }\n        }\n    }\n\n    export class ArgumentInferenceContext {\n        public inferenceCache: any = {};\n        public candidateCache: any = {};\n\n\n        public alreadyRelatingTypes(objectType: PullTypeSymbol, parameterType: PullTypeSymbol) {\n            var comboID = (objectType.getSymbolID() << 16) | parameterType.getSymbolID();\n\n            if (this.inferenceCache[comboID]) {\n                return true;\n            }\n            else {\n                this.inferenceCache[comboID] = true;\n                return false;\n            }            \n        }\n\n        public getInferenceInfo(param: PullTypeParameterSymbol) {\n            var info = <CandidateInferenceInfo>this.candidateCache[param.getSymbolID().toString()];\n\n            if (!info) {\n                info = new CandidateInferenceInfo();\n                info.typeParameter = param;\n                this.candidateCache[param.getSymbolID().toString()] = info;\n            }\n\n            return info;\n        }\n\n        public addCandidateForInference(param: PullTypeParameterSymbol, candidate: PullTypeSymbol, fix: bool) {\n            var info = this.getInferenceInfo(param);\n\n            if (candidate) {\n                info.addCandidate(candidate);\n            }\n\n            if (!info.isFixed) {\n                info.isFixed = fix;\n            }\n        }\n\n        public getInferenceCandidates(): any[] {\n            var inferenceCandidates: any[] = [];\n            var info: CandidateInferenceInfo;\n            var val;\n\n            for (var infoKey in this.candidateCache) {\n                info = <CandidateInferenceInfo>this.candidateCache[infoKey];\n\n                for (var i = 0; i < info.inferenceCandidates.length; i++) {\n                    val = {};\n                    val[info.typeParameter.getSymbolID().toString()] = info.inferenceCandidates[i];\n                    inferenceCandidates[inferenceCandidates.length] = val;\n                }\n            }\n\n            return inferenceCandidates;\n        }\n\n        public inferArgumentTypes(resolver: PullTypeResolver, context: PullTypeResolutionContext): { results: { param: PullTypeParameterSymbol; type: PullTypeSymbol; }[]; unfit: bool; } {\n            var info: CandidateInferenceInfo = null;\n\n            var collection: IPullTypeCollection;\n\n            var bestCommonType: PullTypeSymbol;\n\n            var results: { param: PullTypeParameterSymbol; type: PullTypeSymbol; }[] = [];\n\n            var unfit = false;\n\n            for (var infoKey in this.candidateCache) {\n                info = <CandidateInferenceInfo>this.candidateCache[infoKey];\n\n                if (!info.inferenceCandidates.length) {\n                    continue;\n                }\n\n                collection = {\n                    getLength: () => { return info.inferenceCandidates.length; },\n                    setTypeAtIndex: (index: number, type: PullTypeSymbol) => { },\n                    getTypeAtIndex: (index: number) => {\n                        return info.inferenceCandidates[index].getType();\n                    }\n                }\n\n                bestCommonType = resolver.findBestCommonType(info.inferenceCandidates[0], null, collection, true, context, new TypeComparisonInfo());\n\n                if (!bestCommonType) {\n                    bestCommonType = resolver.semanticInfoChain.undefinedTypeSymbol;\n                }\n\n                if (bestCommonType == resolver.semanticInfoChain.undefinedTypeSymbol) {\n                    unfit = true;\n                }\n\n                results[results.length] = { param: info.typeParameter, type: bestCommonType };\n            }\n\n            return { results: results, unfit: unfit };\n        }\n    }\n\n    export class PullContextualTypeContext {\n\n        public provisionallyTypedSymbols: PullSymbol[] = [];\n        public provisionalDiagnostic: PullDiagnostic[] = [];\n\n        constructor(public contextualType: PullTypeSymbol,\n                     public provisional: bool,\n                     public substitutions: any) { }\n\n        public recordProvisionallyTypedSymbol(symbol: PullSymbol) {\n            this.provisionallyTypedSymbols[this.provisionallyTypedSymbols.length] = symbol;\n        }\n\n        public invalidateProvisionallyTypedSymbols() {\n            for (var i = 0; i < this.provisionallyTypedSymbols.length; i++) {\n                this.provisionallyTypedSymbols[i].invalidate();\n            }\n        }\n\n        public postDiagnostic(error: PullDiagnostic) {\n            this.provisionalDiagnostic[this.provisionalDiagnostic.length] = error;\n        }\n\n        public hadProvisionalErrors() {\n            return this.provisionalDiagnostic.length > 0;\n        }\n    }\n\n    export class PullTypeResolutionContext {\n        private contextStack: PullContextualTypeContext[] = [];\n        private typeSpecializationStack: any[] = [];\n\n        public resolvingTypeReference = false;\n\n        public resolveAggressively = false;\n\n        public searchTypeSpace = false;\n\n        public specializingToAny = false;\n\n        constructor (public emitting = false) {}\n\n        public pushContextualType(type: PullTypeSymbol, provisional: bool, substitutions: any) {\n            this.contextStack.push(new PullContextualTypeContext(type, provisional, substitutions));\n        }\n\n        public popContextualType(): PullContextualTypeContext {\n            var tc = this.contextStack.pop();\n\n            tc.invalidateProvisionallyTypedSymbols();\n\n            return tc;\n        }\n\n        public findSubstitution(type: PullTypeSymbol) {\n            var substitution: PullTypeSymbol = null;\n\n            if (this.contextStack.length) {\n                for (var i = this.contextStack.length - 1; i >= 0; i--) {\n                    if (this.contextStack[i].substitutions) {\n                        substitution = this.contextStack[i].substitutions[type.getSymbolID().toString()];\n\n                        if (substitution) {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return substitution;\n        }\n\n        public getContextualType(): PullTypeSymbol {\n            var context = !this.contextStack.length ? null : this.contextStack[this.contextStack.length - 1];\n\n            if (context) {\n                var type = context.contextualType;\n\n                // if it\'s a type parameter, return the upper bound\n                if (type.isTypeParameter() && (<PullTypeParameterSymbol>type).getConstraint()) {\n                    type = (<PullTypeParameterSymbol>type).getConstraint();\n                }\n\n                var substitution = this.findSubstitution(type);\n\n                return substitution ? substitution : type;\n            }\n\n            return null;\n        }\n\n        public inProvisionalResolution() {\n            return (!this.contextStack.length ? false : this.contextStack[this.contextStack.length - 1].provisional);\n        }\n\n        public inSpecialization = false;\n\n        public setTypeInContext(symbol: PullSymbol, type: PullTypeSymbol) {\n            var substitution: PullTypeSymbol = this.findSubstitution(type);\n\n            symbol.setType(substitution ? substitution : type);\n\n            if (this.contextStack.length && this.inProvisionalResolution()) {\n                this.contextStack[this.contextStack.length - 1].recordProvisionallyTypedSymbol(symbol);\n            }\n        }\n\n        public pushTypeSpecializationCache(cache) {\n            this.typeSpecializationStack[this.typeSpecializationStack.length] = cache;\n        }\n\n        public popTypeSpecializationCache() {\n            if (this.typeSpecializationStack.length) {\n                this.typeSpecializationStack.length--;\n            }\n        }\n\n        public findSpecializationForType(type: PullTypeSymbol) {\n            var specialization: PullTypeSymbol = null;\n\n            for (var i = this.typeSpecializationStack.length - 1; i >= 0; i--) {\n                specialization = (this.typeSpecializationStack[i])[type.getSymbolID().toString()];\n\n                if (specialization) {\n                    return specialization;\n                }\n            }\n\n            return type;\n        }\n\n        public postError(offset: number, length: number, fileName: string, message: string, enclosingDecl: PullDecl) {\n\n            if (this.emitting) {\n                return;\n            }\n            \n            var diagnostic = new PullDiagnostic(offset, length, fileName, message);\n\n            if (this.inProvisionalResolution()) {\n                (this.contextStack[this.contextStack.length - 1]).postDiagnostic(diagnostic);\n            }\n            //else if (enclosingDecl) {\n            //    enclosingDecl.addDiagnostic(error);\n            //}\n\n            return diagnostic;\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\n\nmodule TypeScript {\n    export interface IPullTypeCollection {\n        // returns null when types are exhausted\n        getLength(): number;\n        setTypeAtIndex(index: number, type: PullTypeSymbol): void;\n        getTypeAtIndex(index: number): PullTypeSymbol;\n    }\n\n    export interface IPullResolutionData {\n        actuals: PullTypeSymbol[];\n        exactCandidates: PullSignatureSymbol[];\n        conversionCandidates: PullSignatureSymbol[];\n\n        id: number;\n    }\n\n    export class PullResolutionDataCache {\n        public cacheSize = 16;\n        public rdCache: IPullResolutionData[] = [];\n        public nextUp: number = 0;\n\n        constructor() {\n            for (var i = 0; i < this.cacheSize; i++) {\n                this.rdCache[i] = {\n                    actuals: <PullTypeSymbol[]>[],\n                    exactCandidates: <PullSignatureSymbol[]>[],\n                    conversionCandidates: <PullSignatureSymbol[]>[],\n                    id: i\n                };\n            }\n        }\n\n        public getResolutionData(): IPullResolutionData {\n            var rd: IPullResolutionData = null;\n\n            if (this.nextUp < this.cacheSize) {\n                rd = this.rdCache[this.nextUp];\n            }\n\n            if (rd == null) {\n                this.cacheSize++;\n                rd = {\n                    actuals: <PullTypeSymbol[]>[],\n                    exactCandidates: <PullSignatureSymbol[]>[],\n                    conversionCandidates: <PullSignatureSymbol[]>[],\n                    id: this.cacheSize\n                };\n                this.rdCache[this.cacheSize] = rd;\n            }\n\n            // cache operates as a stack - RD is always served up in-order\n            this.nextUp++;\n\n            return rd;\n        }\n\n        public returnResolutionData(rd: IPullResolutionData) {\n            // Pop to save on array allocations, which are a bottleneck\n            // REVIEW: On some VMs, Array.pop doesn\'t always pop the last value in the array\n            rd.actuals.length = 0;\n            rd.exactCandidates.length = 0;\n            rd.conversionCandidates.length = 0;\n\n            this.nextUp = rd.id;\n        }\n    }\n\n    export interface PullApplicableSignature {\n        signature: PullSignatureSymbol;\n        hadProvisionalErrors: bool;\n    }\n\n    export interface PullAdditionalCallResolutionData {\n        targetSymbol: PullSymbol;\n        resolvedSignatures: PullSignatureSymbol[];\n        candidateSignature: PullSignatureSymbol;\n    }\n\n    // The resolver associates types with a given AST\n    export class PullTypeResolver {\n        private cachedArrayInterfaceType: PullTypeSymbol = null;\n        private cachedNumberInterfaceType: PullTypeSymbol = null;\n        private cachedStringInterfaceType: PullTypeSymbol = null;\n        private cachedBooleanInterfaceType: PullTypeSymbol = null;\n        private cachedObjectInterfaceType: PullTypeSymbol = null;\n        private cachedFunctionInterfaceType: PullTypeSymbol = null;\n        private cachedIArgumentsInterfaceType: PullTypeSymbol = null;\n        private cachedRegExpInterfaceType: PullTypeSymbol = null;\n\n        private cachedFunctionArgumentsSymbol: PullSymbol = null;\n\n        private assignableCache: any[] = <any>{};\n        private subtypeCache: any[] = <any>{};\n        private identicalCache: any[] = <any>{};\n\n        private resolutionDataCache = new PullResolutionDataCache();\n\n        private currentUnit: SemanticInfo = null;\n\n        constructor(private compilationSettings: CompilationSettings,\n                    public semanticInfoChain: SemanticInfoChain,\n                    private unitPath: string) {\n            this.cachedArrayInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Array\", [], PullElementKind.Interface);\n            this.cachedNumberInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Number\", [], PullElementKind.Interface);\n            this.cachedStringInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"String\", [], PullElementKind.Interface);\n            this.cachedBooleanInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Boolean\", [], PullElementKind.Interface);\n            this.cachedObjectInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Object\", [], PullElementKind.Interface);\n            this.cachedFunctionInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Function\", [], PullElementKind.Interface);\n            this.cachedIArgumentsInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"IArguments\", [], PullElementKind.Interface);\n            this.cachedRegExpInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"RegExp\", [], PullElementKind.Interface);\n\n            this.cachedFunctionArgumentsSymbol = new PullSymbol(\"arguments\", PullElementKind.Variable);\n            this.cachedFunctionArgumentsSymbol.setType(this.cachedIArgumentsInterfaceType ? this.cachedIArgumentsInterfaceType : this.semanticInfoChain.anyTypeSymbol);\n            this.cachedFunctionArgumentsSymbol.setResolved();\n\n            this.currentUnit = this.semanticInfoChain.getUnit(unitPath);\n        }\n\n        public getUnitPath() { return this.unitPath; }\n\n        public setUnitPath(unitPath: string) {\n            this.unitPath = unitPath;\n\n            this.currentUnit = this.semanticInfoChain.getUnit(unitPath);\n        }\n\n        public getDeclForAST(ast: AST, unitPath?: string) {\n            return this.semanticInfoChain.getDeclForAST(ast, unitPath ? unitPath : this.unitPath);\n        }\n\n        public getSymbolForAST(ast: AST, context: PullTypeResolutionContext, unitPath?: string) {\n            return this.semanticInfoChain.getSymbolForAST(ast, unitPath ? unitPath : this.unitPath);\n        }\n\n        public setSymbolForAST(ast: AST, symbol: PullSymbol, context: PullTypeResolutionContext, unitPath?: string): void {\n\n            if (context && (context.inProvisionalResolution() || context.inSpecialization)) {\n                return;\n            }\n\n            this.semanticInfoChain.setSymbolForAST(ast, symbol, unitPath ? unitPath : this.unitPath);\n        }\n\n        public getASTForSymbol(symbol: PullSymbol, unitPath?: string) {\n            return this.semanticInfoChain.getASTForSymbol(symbol, unitPath ? unitPath : this.unitPath);\n        }\n\n        public getASTForDecl(decl: PullDecl) {\n            return this.semanticInfoChain.getASTForDecl(decl, decl.getScriptName());\n        }\n\n        public getCachedArrayType() {\n            return this.cachedArrayInterfaceType;\n        }\n\n        private getNewErrorTypeSymbol(diagnostic: PullDiagnostic): PullErrorTypeSymbol {\n            return new PullErrorTypeSymbol(diagnostic, this.semanticInfoChain.anyTypeSymbol);\n        }\n\n        // returns a list of decls leading up to decl, inclusive\n        // PULLTODO: Don\'t bother using spans - obtain cached Decls from syntax nodes\n        public getPathToDecl(decl: PullDecl): PullDecl[] {\n\n            if (!decl) {\n                return [];\n            }\n\n            //var parentDecl: PullDecl = decl.getParentDecl();\n            //var decls: PullDecl[] = [];\n\n            //while (parentDecl) {\n            //    decls[decls.length] = parentDecl;\n            //    parentDecl = parentDecl.getParentDecl();\n            //}\n\n            //return decls;\n\n            var decls: PullDecl[] = [];\n            var searchDecls = this.semanticInfoChain.getUnit(decl.getScriptName()).getTopLevelDecls();\n\n            var spanToFind = decl.getSpan();\n            var candidateSpan: TextSpan = null;\n            var searchKinds = PullElementKind.SomeType | PullElementKind.SomeFunction;\n            var found = false;\n\n            while (true) {\n                // Of the top-level decls, find the one to search off of\n                found = false;\n                for (var i = 0; i < searchDecls.length; i++) {\n                    candidateSpan = searchDecls[i].getSpan();\n\n                    if (spanToFind.start() >= candidateSpan.start() && spanToFind.end() <= candidateSpan.end()) {\n                        if (searchDecls[i].getKind() & searchKinds) { // only consider types, which have scopes\n                            if (!(searchDecls[i].getKind() & PullElementKind.ObjectLiteral)) {\n                                decls[decls.length] = searchDecls[i];\n                            }\n                            searchDecls = searchDecls[i].getChildDecls();\n                            found = true;\n                        }\n                    }\n                }\n\n                if (!found) {\n                    break;\n                }\n            }\n\n            // if the decl is a function expression, it would not have been parented during binding\n            if (decls.length && (decl.getKind() & (PullElementKind.SomeFunction |\n                                                    PullElementKind.ObjectType |\n                                                    PullElementKind.FunctionType |\n                                                    PullElementKind.ConstructorType)) &&\n                (decls[decls.length - 1] != decl)) {\n\n                var parent = decl.getParentDecl();\n\n                if (parent && decls[decls.length - 1] != parent && !(parent.getKind() & PullElementKind.ObjectLiteral)) {\n                    decls[decls.length] = parent;\n                }\n\n                decls[decls.length] = decl;\n            }\n\n            return decls;\n        }\n\n        public getEnclosingDecl(decl: PullDecl): PullDecl {\n            var declPath = this.getPathToDecl(decl);\n\n            if (!declPath.length) {\n                return null;\n            }\n            else if (declPath.length > 1 && declPath[declPath.length - 1] == decl) {\n                return declPath[declPath.length - 2];\n            }\n            else {\n                return declPath[declPath.length - 1];\n            }\n        }\n\n        //  Given a path to a name, e.g. [\"foo\"] or [\"Foo\", \"Baz\", \"bar\"], find the associated symbol\n        public findSymbolForPath(pathToName: string[], enclosingDecl: PullDecl, declKind: PullElementKind): PullSymbol {\n\n            if (!pathToName.length) {\n                return null;\n            }\n\n            var symbolName = pathToName[pathToName.length - 1];\n            var contextDeclPath = this.getPathToDecl(enclosingDecl);\n\n            var contextSymbolPath: string[] = [];\n            var nestedSymbolPath: string[] = [];\n\n            var i = 0;\n\n            // first, search within the given symbol path\n            // (copy path to name so as not to mutate the input array)\n            for (i = 0; i < pathToName.length; i++) {\n                nestedSymbolPath[nestedSymbolPath.length] = pathToName[i];\n            }\n\n            var symbol: PullSymbol = null;\n\n            while (nestedSymbolPath.length >= 2) {\n                symbol = this.semanticInfoChain.findSymbol(nestedSymbolPath, declKind);\n\n                if (symbol) {\n                    return symbol;\n                }\n                nestedSymbolPath.length -= 2;\n                nestedSymbolPath[nestedSymbolPath.length] = symbolName;\n            }\n\n            // next, try the enclosing context\n            for (i = 0; i < contextDeclPath.length; i++) {\n                contextSymbolPath[contextSymbolPath.length] = contextDeclPath[i].getName();\n            }\n\n            for (i = 0; i < pathToName.length; i++) {\n                contextSymbolPath[contextSymbolPath.length] = pathToName[i];\n            }\n\n            while (contextSymbolPath.length >= 2) {\n                symbol = this.semanticInfoChain.findSymbol(contextSymbolPath, declKind);\n\n                if (symbol) {\n                    return symbol;\n                }\n                contextSymbolPath.length -= 2;\n                contextSymbolPath[contextSymbolPath.length] = symbolName;\n            }\n\n            // finally, try searching globally\n            symbol = this.semanticInfoChain.findSymbol([symbolName], declKind);\n\n            return symbol;\n        }\n\n        // search for an unqualified symbol name within a given decl path\n        public getSymbolFromDeclPath(symbolName: string, declPath: PullDecl[], declSearchKind: PullElementKind): PullSymbol {\n            var symbol: PullSymbol = null;\n\n            // search backwards through the decl list\n            //  - if the decl in question is a function, search its members\n            //  - if the decl in question is a module, search the decl then the symbol\n            //  - Otherwise, search globally\n\n            var decl: PullDecl = null;\n            var childDecls: PullDecl[];\n            var declSymbol: PullTypeSymbol = null;\n            var declMembers: PullSymbol[];\n            var pathDeclKind: PullElementKind;\n            var valDecl: PullDecl = null;\n            var kind: PullElementKind;\n            var instanceSymbol: PullSymbol = null;\n            var instanceType: PullTypeSymbol = null;\n\n            for (var i = declPath.length - 1; i >= 0; i--) {\n                decl = declPath[i];\n                pathDeclKind = decl.getKind();\n\n                if (pathDeclKind & PullElementKind.Container) {\n\n                    // first check locally\n                    childDecls = decl.searchChildDecls(symbolName, (declSearchKind & PullElementKind.SomeType) !== 0);\n\n                    if (childDecls.length) {\n                        return childDecls[0].getSymbol();\n                    }\n\n                    if (declSearchKind & PullElementKind.SomeValue) {\n                        valDecl = decl.getValueDecl();\n\n                        if (valDecl) {\n                            decl = valDecl;\n                        }\n                    }\n\n                    // otherwise, check the members\n                    declSymbol = decl.getSymbol().getType();\n                    declMembers = declSymbol.getMembers();\n\n                    for (var j = 0; j < declMembers.length; j++) {\n                        // PULLTODO: declkind should equal declkind, or is it ok to just mask the value?\n                        if (declMembers[j].getName() == symbolName) {\n                            kind = declMembers[j].getKind();\n\n                            if ((kind & declSearchKind) != 0) {\n                                return declMembers[j];\n                            }\n                        }\n                    }\n\n                }\n                else if ((declSearchKind & PullElementKind.SomeType) || !(pathDeclKind & PullElementKind.Class)) {\n                    childDecls = decl.searchChildDecls(symbolName, (declSearchKind & PullElementKind.SomeType) !== 0);\n\n                    if (childDecls.length) {\n                        return childDecls[0].getSymbol();\n                    }\n                }\n            }\n\n            // otherwise, search globally\n            symbol = this.semanticInfoChain.findSymbol([symbolName], declSearchKind);\n\n            return symbol;\n        }\n\n        public getVisibleSymbolsFromDeclPath(declPath: PullDecl[]): PullSymbol[] {\n            var symbols: PullSymbol[] = [];\n\n            var decl: PullDecl = null;\n            var childDecls: PullDecl[];\n            var pathDeclKind: PullElementKind;\n            var declSearchKind: PullElementKind = PullElementKind.SomeType | PullElementKind.SomeValue;\n            var i = 0;\n            var j = 0;\n            var m = 0;\n            var n = 0;\n\n            var addSymbolsFromDecls = (decls: PullDecl[]) => {\n                if (decls.length) {\n                    var n = decls.length;\n                    for (var j = 0; j < n; j++) {\n                        if (decls[j].getKind() & declSearchKind) {\n                            var symbol = decls[j].getSymbol();\n                            if (symbol) {\n                                symbols.push(symbol);\n                            }\n                        }\n                    }\n                }\n            };\n\n            for (i = declPath.length - 1; i >= 0; i--) {\n                decl = declPath[i];\n                pathDeclKind = decl.getKind();\n\n                if (pathDeclKind & PullElementKind.SomeContainer) {\n                    // Add locals\n                    addSymbolsFromDecls(decl.getChildDecls())\n\n                    // Add members\n                    var declSymbol = <PullTypeSymbol>decl.getSymbol();\n                    var members: PullSymbol[] = [];\n                    if (declSymbol) {\n                        // Look up all symbols on the module type\n                        members = declSymbol.getMembers();\n                    }\n\n                    // Look up all symbols on the module instance type if it exists\n                    var instanceSymbol = (<PullContainerTypeSymbol > declSymbol).getInstanceSymbol();\n                    var searchTypeSymbol = instanceSymbol && instanceSymbol.getType();\n\n                    if (searchTypeSymbol) {\n                        members = members.concat(searchTypeSymbol.getMembers());\n                    }\n\n                    for (j = 0; j < members.length; j++) {\n                        // PULLTODO: declkind should equal declkind, or is it ok to just mask the value?\n                        if ((members[j].getKind() & declSearchKind) != 0) {\n                            symbols.push(members[j]);\n                        }\n                    }\n                    \n                }\n                else /*if (pathDeclKind & DeclKind.Function)*/ {\n                    addSymbolsFromDecls(decl.getChildDecls())\n                }\n            }\n\n            // Get the global symbols\n            var units = this.semanticInfoChain.units;\n\n            for (i = 0, n = units.length; i < n; i++) {\n                var unit = units[i];\n                if (unit === this.currentUnit && declPath.length != 0) {\n                    // Current unit has already been processed. skip it.\n                    continue;\n                }\n                var topLevelDecls = unit.getTopLevelDecls();\n                if (topLevelDecls.length) {\n                    for (j = 0, m = topLevelDecls.length; j < m; j++) {\n                        var topLevelDecl = topLevelDecls[j];\n                        if (topLevelDecl.getKind() === PullElementKind.Script || topLevelDecl.getKind() === PullElementKind.Global) {\n                            addSymbolsFromDecls(topLevelDecl.getChildDecls());\n                        }\n                    }\n                }\n            }\n\n            return symbols;\n        }\n\n        public getVisibleSymbols(enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol[] {\n\n            var declPath: PullDecl[] = enclosingDecl !== null ? this.getPathToDecl(enclosingDecl) : [];\n\n            if (enclosingDecl && !declPath.length) {\n                declPath = [enclosingDecl];\n            }\n\n            return this.getVisibleSymbolsFromDeclPath(declPath);\n        }\n\n        public getVisibleMembersFromExpression(expression: AST, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol[] {\n            var lhs: PullSymbol = this.resolveStatementOrExpression(expression, false, enclosingDecl, context);\n            var lhsType = lhs.getType();\n\n            if (!lhsType) {\n                return null;\n            }\n\n            if (lhsType == this.semanticInfoChain.anyTypeSymbol) {\n                return null;\n            }\n\n            // Figure out if privates are available under the current scope\n            var includePrivate = false;\n            var containerSymbol = lhsType;\n            if (containerSymbol.getKind() === PullElementKind.ConstructorType) {\n                containerSymbol = containerSymbol.getConstructSignatures()[0].getReturnType();\n            }\n\n            if (containerSymbol && containerSymbol.isClass()) {\n                var declPath = this.getPathToDecl(enclosingDecl);\n                if (declPath && declPath.length) {\n                    var declarations = containerSymbol.getDeclarations();\n                    for (var i = 0, n = declarations.length; i < n; i++) {\n                        var declaration = declarations[i];\n                        if (declPath.indexOf(declaration) >= 0) {\n                            includePrivate = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (context.searchTypeSpace) {\n                return lhsType.getAllMembers(PullElementKind.SomeType, includePrivate);\n            }\n            else {\n                if (lhsType == this.semanticInfoChain.numberTypeSymbol && this.cachedNumberInterfaceType) {\n                    lhsType = this.cachedNumberInterfaceType;\n                }\n                else if (lhsType == this.semanticInfoChain.stringTypeSymbol && this.cachedStringInterfaceType) {\n                    lhsType = this.cachedStringInterfaceType;\n                }\n                else if (lhsType == this.semanticInfoChain.boolTypeSymbol && this.cachedBooleanInterfaceType) {\n                    lhsType = this.cachedBooleanInterfaceType;\n                }\n\n                if (!lhsType.isResolved()) {\n                    var potentiallySpecializedType = <PullTypeSymbol>this.resolveDeclaredSymbol(lhsType, enclosingDecl, context);\n\n                    if (potentiallySpecializedType != lhsType) {\n                        if (!lhs.isType()) {\n                            context.setTypeInContext(lhs, potentiallySpecializedType);\n                        }\n\n                        lhsType = potentiallySpecializedType;\n                    }\n                }\n\n                var members = lhsType.getAllMembers(PullElementKind.SomeValue, includePrivate);\n                if (lhsType.isContainer()) {\n                    var associatedInstance = (<PullContainerTypeSymbol>lhsType).getInstanceSymbol();\n                    if (associatedInstance) {\n                        var instanceType = associatedInstance.getType();\n                        var instanceMembers = instanceType.getAllMembers(PullElementKind.SomeValue, includePrivate);\n                        members = members.concat(instanceMembers);\n                    }\n                }\n\n                // Add any additional members\n                /// TODO: add \"prototype\" for classes\n                //if (lhsType.isClass()) {\n                //    memebers.push(\"prototype\");\n                //}\n\n                // could be an enum\n                if ((lhsType.getKind() == PullElementKind.Enum) && this.cachedNumberInterfaceType) {\n                    members = members.concat(this.cachedNumberInterfaceType.getAllMembers(PullElementKind.SomeValue, false));\n                }\n\n                return members;\n            }\n        }\n\n        public isTypeArgumentOrWrapper(type: PullTypeSymbol) {\n            if (!type) {\n                return false;\n            }\n\n            if (!type.isGeneric()) {\n                return false;\n            }\n\n            if (type.isTypeParameter()) {\n                return true;\n            }\n\n            if (type.isArray()) {\n                return this.isTypeArgumentOrWrapper((<PullArrayTypeSymbol>type).getElementType());\n            }\n\n            var typeArguments = type.getTypeArguments();\n\n            if (typeArguments) {\n                for (var i = 0; i < typeArguments.length; i++) {\n                    if (this.isTypeArgumentOrWrapper(typeArguments[i])) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        public findTypeSymbolForDynamicModule(idText: string, currentFileName: string, search: (id: string) =>PullTypeSymbol): PullTypeSymbol {\n            var originalIdText = idText;\n            var symbol = search(idText);\n           \n            if (symbol === null) {\n                // perhaps it\'s a dynamic module?\n                if (!symbol) {\n                    idText = swapQuotes(originalIdText);\n                    symbol = search(idText);\n                }\n\n                // Check the literal path first\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + \".ts\";\n                    symbol = search(idText);\n                }\n\n                if (!symbol) {\n                    idText = stripQuotes(originalIdText) + \".d.ts\";\n                    symbol = search(idText);\n                }\n\n                // If the literal path doesn\'t work, begin the search\n                if (!symbol && !isRelative(originalIdText)) {\n                    // check the full path first, as this is the most likely scenario\n                    idText = originalIdText;\n\n                    var strippedIdText = stripQuotes(idText);\n\n                    // REVIEW: Technically, we shouldn\'t have to normalize here - we should normalize in addUnit.\n                    // Still, normalizing here alows any language services to be free of assumptions\n                    var path = getRootFilePath(switchToForwardSlashes(currentFileName));\n\n                    while (symbol === null && path != \"\") {\n                        idText = normalizePath(path + strippedIdText + \".ts\");\n                        symbol = search(idText);\n\n                        // check for .d.ts\n                        if (symbol === null) {\n                            idText = changePathToDTS(idText);\n                            symbol = search(idText);\n                        }\n\n                        if (symbol === null) {\n                            if(path === \'/\') {\n                                path = \'\';\n                            } else {\n                                path = normalizePath(path + \"..\");\n                                path = path && path != \'/\' ? path + \'/\' : path;\n                            }\n                        }\n                    }\n                }\n            }\n\n            return symbol;\n        }\n\n        // Declaration Resolution\n\n        public resolveDeclaration(declAST: AST, context: PullTypeResolutionContext, enclosingDecl?: PullDecl): PullSymbol {\n            switch (declAST.nodeType) {\n                case NodeType.Script:\n                    return null;\n\n                case NodeType.ModuleDeclaration:\n                    return this.resolveModuleDeclaration(<ModuleDeclaration>declAST, context);\n                case NodeType.InterfaceDeclaration:\n                    return this.resolveInterfaceDeclaration(<TypeDeclaration>declAST, context);\n                case NodeType.ClassDeclaration:\n                    return this.resolveClassDeclaration(<ClassDeclaration>declAST, context);\n                case NodeType.FuncDecl:\n                    {\n                        var funcDecl = <FuncDecl>declAST;\n\n                        if (funcDecl.isGetAccessor()) {\n                            return this.resolveGetAccessorDeclaration(funcDecl, context);\n                        }\n                        else if (funcDecl.isSetAccessor()) {\n                            return this.resolveSetAccessorDeclaration(funcDecl, context);\n                        }\n                        else {\n                            return this.resolveFunctionDeclaration(<FuncDecl>declAST, context);\n                        }\n                    }\n                case NodeType.VarDecl:\n                case NodeType.ArgDecl:\n                    return this.resolveVariableDeclaration(<BoundDecl>declAST, context, enclosingDecl);\n\n                case NodeType.TypeParameter:\n                    return this.resolveTypeParameterDeclaration(<TypeParameter>declAST, context);\n\n                case NodeType.ImportDeclaration:\n                    return this.resolveImportDeclaration(<ImportDeclaration>declAST, context);\n\n                default:\n                    throw new Error(\"Invalid declaration type\");\n            }\n        }\n\n        // PULLTODO: VERY IMPORTANT\n        // Right now, the assumption is that the declaration\'s parse tree is still in memory\n        // we need to add a cache-in/cache-out mechanism so that we can break the dependency on in-memory ASTs\n        public resolveDeclaredSymbol(symbol: PullSymbol, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            if (!symbol || symbol.isResolved()) {\n                return;\n            }\n\n            if (symbol.isResolving()) {\n                symbol.setType(this.semanticInfoChain.anyTypeSymbol);\n\n                return symbol;\n            }\n\n            var thisUnit = this.unitPath;\n\n            var decls = symbol.getDeclarations();\n\n            var ast: AST = null;\n\n            var i = 0;\n\n            // We want to walk and resolve all associated decls, so we can catch\n            // cases like function overloads that may be spread across multiple\n            // logical declarations\n            for (i = 0; i < decls.length; i++) {\n                var decl = decls[i];\n\n                ast = this.semanticInfoChain.getASTForDecl(decl, decl.getScriptName());\n\n                // if it\'s an object literal member, just return the symbol and wait for\n                // the object lit to be resolved\n                if (!ast || ast.nodeType == NodeType.Member) {\n                    //var span = decl.getSpan();\n                    //context.postError(span.minChar, span.limChar - span.minChar, this.unitPath, \"Could not resolve location for symbol \'\" + symbol.getName() +\"\'\", enclosingDecl);\n\n                    // We\'ll return the cached results, and let the decl be corrected on the next invalidation\n                    this.setUnitPath(thisUnit);\n                    return symbol;\n                }\n\n                this.setUnitPath(decl.getScriptName());\n                this.resolveDeclaration(ast, context, enclosingDecl);\n            }\n\n            var typeArgs = symbol.isType() ? (<PullTypeSymbol>symbol).getTypeArguments() : null;\n\n            if (typeArgs && typeArgs.length) {\n                var typeParameters = (<PullTypeSymbol>symbol).getTypeParameters();\n                var typeCache: any = {}\n\n                for (i = 0; i < typeParameters.length; i++) {\n                    typeCache[typeParameters[i].getSymbolID().toString()] = typeArgs[i];\n                }\n\n                context.pushTypeSpecializationCache(typeCache);\n\n                var specializedSymbol = specializeType((<PullTypeSymbol>symbol), typeArgs, this, enclosingDecl, context, ast);\n\n                context.popTypeSpecializationCache();\n\n                symbol = specializedSymbol;\n            }\n\n            this.setUnitPath(thisUnit);\n\n            return symbol;\n        }\n\n        //\n        // Resolve a module declaration\n        //\n        // The module and its members are pre-bound, so no further resolution is necessary\n        //\n        public resolveModuleDeclaration(ast: ModuleDeclaration, context: PullTypeResolutionContext): PullTypeSymbol {\n            var declSymbol = <PullTypeSymbol>this.getSymbolForAST(ast, context, this.unitPath);\n\n            return declSymbol;\n        }\n\n        //\n        // Resolve a class declaration\n        //\n        // A class\'s implements and extends lists are not pre-bound, so they must be bound here\n        // Once bound, we can add the parent type\'s members to the class\n        //\n        public resolveClassDeclaration(classDeclAST: ClassDeclaration, context: PullTypeResolutionContext): PullTypeSymbol {\n            var classDecl: PullDecl = this.getDeclForAST(classDeclAST);\n            var enclosingDecl = this.getEnclosingDecl(classDecl);\n            var classDeclSymbol = <PullClassTypeSymbol>classDecl.getSymbol();\n            var parentType: PullTypeSymbol = null;\n\n            if (classDeclSymbol.isResolved()) {\n                return classDeclSymbol;\n            }\n            \n            var i = 0;\n\n            if (classDeclAST.extendsList) {\n                for (i = 0; i < classDeclAST.extendsList.members.length; i++) {\n                    parentType = this.resolveTypeReference(new TypeReference(classDeclAST.extendsList.members[i], 0), classDecl, context);\n\n                    if ((parentType.getKind() & (PullElementKind.Interface | PullElementKind.Class)) == 0) {\n                        context.postError(classDeclAST.extendsList.members[i].minChar, classDeclAST.extendsList.members[i].getLength(), this.unitPath, \"A class may only extend other class or interface types\", enclosingDecl);\n                    }\n\n                    if (parentType.isGeneric() && parentType.isResolved() && !parentType.getIsSpecialized()) {\n                        parentType = this.specializeTypeToAny(parentType, enclosingDecl, context);\n                    }\n\n                    classDeclSymbol.addExtendedType(parentType);\n                }\n            }\n\n            if (classDeclAST.implementsList) {\n                var implementedType: PullTypeSymbol = null;\n\n                for (i = 0; i < classDeclAST.implementsList.members.length; i++) {\n                    implementedType = this.resolveTypeReference(new TypeReference(classDeclAST.implementsList.members[i], 0), classDecl, context);\n\n                    if (implementedType.isGeneric() && implementedType.isResolved() && !implementedType.getIsSpecialized()) {\n                        implementedType = this.specializeTypeToAny(implementedType, enclosingDecl, context);\n                    }\n\n                    classDeclSymbol.addImplementedType(implementedType);\n\n                    if ((implementedType.getKind() & (PullElementKind.Interface | PullElementKind.Class)) == 0) {\n                        context.postError(classDeclAST.implementsList.members[i].minChar, classDeclAST.implementsList.members[i].getLength(), this.unitPath, \"A class may only implement other class or interface types\", enclosingDecl);\n                    }\n                }\n            }\n\n            classDeclSymbol.setResolved();\n\n            var classMembers = classDeclSymbol.getMembers();\n            var constructorMethod = classDeclSymbol.getConstructorMethod();\n            var classTypeParameters = classDeclSymbol.getTypeParameters();\n\n            for (i = 0; i < classTypeParameters.length; i++) {\n                this.resolveDeclaredSymbol(classTypeParameters[i], classDecl, context);\n            }\n\n            if (constructorMethod) {\n                var constructorTypeSymbol = constructorMethod.getType();\n\n                var constructSignatures = constructorTypeSymbol.getConstructSignatures();\n\n                if (!constructSignatures.length) {\n                    var constructorSignature: PullSignatureSymbol;\n                    \n                    // inherit parent\'s constructor signatures\n                    if (parentType && parentType.isClass()) {\n                        var parentClass = <PullClassTypeSymbol>parentType;\n                        var parentConstructor = parentClass.getConstructorMethod();\n                        var parentConstructorType = parentConstructor.getType();\n                        var parentConstructSignatures = parentConstructorType.getConstructSignatures();\n\n                        var parentConstructSignature: PullSignatureSymbol;\n                        var parentParameters: PullSymbol[];\n                        for (i = 0; i < parentConstructSignatures.length; i++) {\n                            // create a new signature for each parent constructor\n                            parentConstructSignature = parentConstructSignatures[i];\n                            parentParameters = parentConstructSignature.getParameters();\n\n                            constructorSignature = new PullSignatureSymbol(PullElementKind.ConstructSignature);\n                            constructorSignature.setReturnType(classDeclSymbol);\n\n                            for (var j = 0; j < parentParameters.length; j++) {\n                                constructorSignature.addParameter(parentParameters[j], parentParameters[j].getIsOptional());\n                            }\n\n                            constructorTypeSymbol.addConstructSignature(constructorSignature);\n                            constructorSignature.addDeclaration(classDecl);\n                        }\n                    }\n                    else { // PULLREVIEW: This likely won\'t execute, unless there\'s some serious out-of-order resolution issues\n                        constructorSignature = new PullSignatureSymbol(PullElementKind.ConstructSignature);\n                        constructorSignature.setReturnType(classDeclSymbol);\n                        constructorTypeSymbol.addConstructSignature(constructorSignature);\n                        constructorSignature.addDeclaration(classDecl);\n                    }\n                }\n\n                var constructorMembers = constructorTypeSymbol.getMembers();\n\n                this.resolveDeclaredSymbol(constructorMethod, classDecl, context);\n\n                for (i = 0; i < constructorMembers.length; i++) {\n                    this.resolveDeclaredSymbol(constructorMembers[i], classDecl, context);\n                }\n            }\n\n            for (i = 0; i < classMembers.length; i++) {\n                this.resolveDeclaredSymbol(classMembers[i], classDecl, context);\n            }\n\n            return classDeclSymbol;\n        }\n\n        public resolveInterfaceDeclaration(interfaceDeclAST: TypeDeclaration, context: PullTypeResolutionContext): PullTypeSymbol {\n            var interfaceDecl: PullDecl = this.getDeclForAST(interfaceDeclAST);\n            var enclosingDecl = this.getEnclosingDecl(interfaceDecl);\n            var interfaceDeclSymbol = <PullTypeSymbol>interfaceDecl.getSymbol();\n\n            if (interfaceDeclSymbol.isResolved()) {\n                return interfaceDeclSymbol;\n            }\n\n            var i = 0;\n\n            if (interfaceDeclAST.extendsList) {\n                var parentType: PullTypeSymbol = null;\n\n                for (i = 0; i < interfaceDeclAST.extendsList.members.length; i++) {\n                    parentType = this.resolveTypeReference(new TypeReference(interfaceDeclAST.extendsList.members[i], 0), interfaceDecl, context);\n\n                    if ((parentType.getKind() & (PullElementKind.Interface | PullElementKind.Class)) == 0) {\n                        context.postError(interfaceDeclAST.extendsList.members[i].minChar, interfaceDeclAST.extendsList.members[i].getLength(), this.unitPath, \"An interface may only extend other class or interface types\", enclosingDecl);\n                    }\n\n                    if (parentType.isGeneric() && parentType.isResolved() && !parentType.getIsSpecialized()) {\n                        parentType = this.specializeTypeToAny(parentType, enclosingDecl, context);\n                    }\n\n                    interfaceDeclSymbol.addExtendedType(parentType);\n                }                \n            }\n\n            if (interfaceDeclAST.implementsList) {\n                context.postError(interfaceDeclAST.implementsList.minChar, interfaceDeclAST.implementsList.getLength(), this.unitPath, \"An interface may not implement other types\", enclosingDecl);\n            }\n\n            interfaceDeclSymbol.setResolved();\n\n            var interfaceMembers = interfaceDeclSymbol.getMembers();\n            var interfaceTypeParameters = interfaceDeclSymbol.getTypeParameters();\n\n            for (i = 0; i < interfaceMembers.length; i++) {\n                this.resolveDeclaredSymbol(interfaceMembers[i], interfaceDecl, context);\n            }\n\n            for (i = 0; i < interfaceTypeParameters.length; i++) {\n                this.resolveDeclaredSymbol(interfaceTypeParameters[i], interfaceDecl, context);\n            }\n\n            var callSignatures = interfaceDeclSymbol.getCallSignatures();\n            var constructSignatures = interfaceDeclSymbol.getConstructSignatures();\n            var indexSignatures = interfaceDeclSymbol.getIndexSignatures();\n\n            for (i = 0; i < callSignatures.length; i++) {\n                this.resolveDeclaredSymbol(callSignatures[i], interfaceDecl, context);\n            }\n\n            for (i = 0; i < constructSignatures.length; i++) {\n                this.resolveDeclaredSymbol(constructSignatures[i], interfaceDecl, context);\n            }\n\n            for (i = 0; i < indexSignatures.length; i++) {\n                this.resolveDeclaredSymbol(indexSignatures[i], interfaceDecl, context);\n            }\n\n            return interfaceDeclSymbol;\n        }\n\n        public resolveImportDeclaration(importStatementAST: ImportDeclaration, context: PullTypeResolutionContext): PullTypeSymbol {\n            // internal or external? (Does it matter?)\n            var importDecl: PullDecl = this.getDeclForAST(importStatementAST);\n            var enclosingDecl = this.getEnclosingDecl(importDecl);\n            var importDeclSymbol = <PullTypeAliasSymbol>importDecl.getSymbol();\n            \n            var aliasName = importStatementAST.id.text;\n            var aliasedType: PullTypeSymbol = null;\n\n            if (importDeclSymbol.isResolved()) {\n                return importDeclSymbol;\n            }\n\n            importDeclSymbol.startResolving();\n\n            // the alias name may be a string literal, in which case we\'ll need to convert it to a type\n            // reference\n            if (importStatementAST.alias.nodeType == NodeType.TypeRef) { // dotted name\n                aliasedType = this.resolveTypeReference(<TypeReference>importStatementAST.alias, enclosingDecl, context);\n            }\n            else if (importStatementAST.alias.nodeType == NodeType.Name) { // name or dynamic module name\n                var text = (<Identifier>importStatementAST.alias).actualText;\n\n                if (!isQuoted(text)) {\n                    aliasedType = this.resolveTypeReference(new TypeReference(importStatementAST.alias, 0), enclosingDecl, context);\n                }\n                else { // dynamic module name (string literal)\n                    var modPath = (<StringLiteral>importStatementAST.alias).text;\n                    var declPath = this.getPathToDecl(enclosingDecl);\n\n                    importStatementAST.isDynamicImport = true;\n\n                    aliasedType = this.findTypeSymbolForDynamicModule(modPath, importDecl.getScriptName(), (s: string) => <PullTypeSymbol>this.getSymbolFromDeclPath(s, declPath, PullElementKind.SomeType));\n\n                    if (aliasedType) {\n                        this.currentUnit.addDynamicModuleImport(importDeclSymbol);\n                    }\n                }\n            }\n\n            if (aliasedType) {\n\n                if (!aliasedType.isContainer()) {\n                    importDecl.addDiagnostic(new PullDiagnostic(importStatementAST.minChar, importStatementAST.getLength(), this.currentUnit.getPath(), \"A module cannot be aliased to a non-module type\"));\n                }\n\n                importDeclSymbol.setAliasedType(aliasedType);\n                importDeclSymbol.setResolved();\n\n                this.setSymbolForAST(importStatementAST.alias, aliasedType, context);\n            }\n         \n            return importDeclSymbol;\n        }\n\n        public resolveFunctionTypeSignature(funcDeclAST: FuncDecl, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullTypeSymbol {\n            var funcDeclSymbol = <PullFunctionTypeSymbol>this.getSymbolForAST(funcDeclAST, context, this.unitPath);\n\n            if (!funcDeclSymbol) {\n                var semanticInfo = this.semanticInfoChain.getUnit(this.unitPath);\n                var declCollectionContext = new DeclCollectionContext(semanticInfo);\n\n                declCollectionContext.scriptName = this.unitPath;\n\n                if (enclosingDecl) {\n                    declCollectionContext.pushParent(enclosingDecl);\n                }\n\n                getAstWalkerFactory().walk(funcDeclAST, preCollectDecls, postCollectDecls, null, declCollectionContext);\n\n                var functionDecl = this.getDeclForAST(funcDeclAST);\n\n                var binder = new PullSymbolBinder(this.compilationSettings, this.semanticInfoChain);\n                binder.setUnit(this.unitPath);\n                if (functionDecl.getKind() == PullElementKind.ConstructorType) {\n                    binder.bindConstructorTypeDeclarationToPullSymbol(functionDecl);\n                }\n                else {\n                    binder.bindFunctionTypeDeclarationToPullSymbol(functionDecl);\n                }\n\n                funcDeclSymbol = <PullFunctionTypeSymbol>functionDecl.getSymbol();\n            }\n\n            var signature = funcDeclSymbol.getKind() == PullElementKind.ConstructorType ?  funcDeclSymbol.getConstructSignatures()[0] : funcDeclSymbol.getCallSignatures()[0];\n\n            // resolve the return type annotation\n            if (funcDeclAST.returnTypeAnnotation) {\n                var returnTypeRef = <TypeReference>funcDeclAST.returnTypeAnnotation;\n                var returnTypeSymbol = this.resolveTypeReference(returnTypeRef, enclosingDecl, context);\n\n                signature.setReturnType(returnTypeSymbol);\n\n                if (this.isTypeArgumentOrWrapper(returnTypeSymbol)) {\n                    signature.setHasGenericParameter();\n\n                    if (funcDeclSymbol) {\n                        funcDeclSymbol.getType().setHasGenericSignature();\n                    }\n                }\n            }\n            else {\n                signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n            }\n\n            // link parameters and resolve their annotations\n            if (funcDeclAST.arguments) {\n                for (var i = 0; i < funcDeclAST.arguments.members.length; i++) {\n                    this.resolveFunctionTypeSignatureParameter(<ArgDecl>funcDeclAST.arguments.members[i], null, signature, enclosingDecl, context);\n                }\n            }\n\n            if (signature.hasGenericParameter()) {\n                // PULLREVIEW: This is split into a spearate if statement to make debugging slightly easier...\n                if (funcDeclSymbol) {\n                    funcDeclSymbol.getType().setHasGenericSignature();\n                }\n            }\n\n            funcDeclSymbol.setResolved();\n\n            return funcDeclSymbol;\n        }\n\n        public resolveFunctionTypeSignatureParameter(argDeclAST: ArgDecl, contextParam: PullSymbol, signature: PullSignatureSymbol, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n\n            var paramSymbol = this.getSymbolForAST(argDeclAST, context, this.unitPath);\n\n            if (argDeclAST.typeExpr) {\n                var typeRef = this.resolveTypeReference(<TypeReference>argDeclAST.typeExpr, enclosingDecl, context);\n\n                context.setTypeInContext(paramSymbol, typeRef);\n\n                // if the typeExprSymbol is generic, set the \"hasGenericParameter\" field on the enclosing signature\n                if (this.isTypeArgumentOrWrapper(typeRef)) {\n                    signature.setHasGenericParameter();\n                }\n            } // PULLTODO: default values?\n            else {\n                if (contextParam) {\n                    context.setTypeInContext(paramSymbol, contextParam.getType());\n                }\n                else {\n                    context.setTypeInContext(paramSymbol, this.semanticInfoChain.anyTypeSymbol);\n                }\n            }\n\n            paramSymbol.setResolved();\n        }\n\n        public resolveFunctionExpressionParameter(argDeclAST: ArgDecl, contextParam: PullSymbol, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n\n            var paramSymbol = this.getSymbolForAST(argDeclAST, context);\n\n            if (argDeclAST.typeExpr) {\n                var typeRef = this.resolveTypeReference(<TypeReference>argDeclAST.typeExpr, enclosingDecl, context);\n\n                context.setTypeInContext(paramSymbol, typeRef);\n\n            } // PULLTODO: default values?\n            else {\n                if (contextParam) {\n                    context.setTypeInContext(paramSymbol, contextParam.getType());\n                }\n                else {\n                    context.setTypeInContext(paramSymbol, this.semanticInfoChain.anyTypeSymbol);\n                }\n            }\n\n            paramSymbol.setResolved();\n        }\n\n        public resolveInterfaceTypeReference(interfaceDeclAST: NamedDeclaration, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullTypeSymbol {\n\n            var interfaceSymbol = <PullTypeSymbol>this.getSymbolForAST(interfaceDeclAST, context, this.unitPath);//new PullTypeSymbol(\"\", PullElementKind.Interface);\n\n            if (!interfaceSymbol) {\n                var semanticInfo = this.semanticInfoChain.getUnit(this.unitPath);\n                var declCollectionContext = new DeclCollectionContext(semanticInfo);\n\n                declCollectionContext.scriptName = this.unitPath;\n\n                if (enclosingDecl) {\n                    declCollectionContext.pushParent(enclosingDecl);\n                }\n\n                getAstWalkerFactory().walk(interfaceDeclAST, preCollectDecls, postCollectDecls, null, declCollectionContext);\n\n                var interfaceDecl = this.getDeclForAST(interfaceDeclAST);\n\n                var binder = new PullSymbolBinder(this.compilationSettings, this.semanticInfoChain);\n\n                binder.setUnit(this.unitPath);\n                binder.bindObjectTypeDeclarationToPullSymbol(interfaceDecl);\n\n                interfaceSymbol = <PullFunctionTypeSymbol>interfaceDecl.getSymbol();\n            }\n\n            if (interfaceDeclAST.members) {\n\n                var memberSymbol: PullSymbol = null;\n                var typeMembers = <ASTList> interfaceDeclAST.members;\n\n                for (var i = 0; i < typeMembers.members.length; i++) {\n                    memberSymbol = this.getSymbolForAST(typeMembers.members[i], context, this.unitPath);\n\n                    this.resolveDeclaredSymbol(memberSymbol, enclosingDecl, context);\n                }\n            }\n\n            interfaceSymbol.setResolved();\n\n            return interfaceSymbol;\n        }\n\n        public resolveTypeReference(typeRef: TypeReference, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullTypeSymbol {\n            // the type reference can be\n            // a name\n            // a function\n            // an interface\n            // a dotted name\n            // an array of any of the above\n\n            if (!typeRef) {\n                return null;\n            }\n\n            var previousResolutionSymbol = this.getSymbolForAST(typeRef, context);\n\n            if (previousResolutionSymbol) {\n                //CompilerDiagnostics.Alert(\"Call get hit\");\n                return <PullTypeSymbol>previousResolutionSymbol;\n            }            \n\n            var typeDeclSymbol: PullTypeSymbol = null;\n            var prevResolvingTypeReference = context.resolvingTypeReference;\n            var diagnostic: PullDiagnostic = null;\n\n            // a name\n            if (typeRef.term.nodeType == NodeType.Name) {\n                var typeName = <Identifier>typeRef.term;\n\n                // if it\'s a known primitive name, cheat\n                if (typeName.actualText == \"any\") {\n                    typeDeclSymbol = this.semanticInfoChain.anyTypeSymbol;\n                }\n                else if (typeName.actualText == \"string\") {\n                    typeDeclSymbol = this.semanticInfoChain.stringTypeSymbol;\n                }\n                else if (typeName.actualText == \"number\") {\n                    typeDeclSymbol = this.semanticInfoChain.numberTypeSymbol;\n                }\n                else if (typeName.actualText == \"bool\") {\n                    typeDeclSymbol = this.semanticInfoChain.boolTypeSymbol;\n                }\n                else if (typeName.actualText == \"null\") {\n                    typeDeclSymbol = this.semanticInfoChain.nullTypeSymbol;\n                }\n                else if (typeName.actualText == \"undefined\") {\n                    typeDeclSymbol = this.semanticInfoChain.undefinedTypeSymbol;\n                }\n                else if (typeName.actualText == \"void\") {\n                    typeDeclSymbol = this.semanticInfoChain.voidTypeSymbol;\n                }\n                else if (typeName.actualText == \"_element\") {\n                    typeDeclSymbol = this.semanticInfoChain.elementTypeSymbol;\n                }\n                else {\n                    context.resolvingTypeReference = true;\n\n                    typeDeclSymbol = <PullTypeSymbol>this.resolveTypeNameExpression(typeName, enclosingDecl, context);\n\n                    context.resolvingTypeReference = prevResolvingTypeReference;\n                }\n\n                if (!typeDeclSymbol) {\n                    diagnostic = context.postError(typeName.minChar, typeName.getLength(), this.unitPath, \"Could not find type \'\" + typeName.actualText + \"\'\", enclosingDecl);\n                    return this.getNewErrorTypeSymbol(diagnostic);\n                }\n            }\n\n                // a function\n            else if (typeRef.term.nodeType == NodeType.FuncDecl) {\n\n                typeDeclSymbol = this.resolveFunctionTypeSignature(<FuncDecl>typeRef.term, enclosingDecl, context);\n            }\n\n                // an interface\n            else if (typeRef.term.nodeType == NodeType.InterfaceDeclaration) {\n\n                typeDeclSymbol = this.resolveInterfaceTypeReference(<NamedDeclaration>typeRef.term, enclosingDecl, context);\n            }\n            else if (typeRef.term.nodeType == NodeType.GenericType) {\n                typeDeclSymbol = this.resolveGenericTypeReference(<GenericType>typeRef.term, enclosingDecl, context);\n            }\n                // a dotted name\n            else if (typeRef.term.nodeType == NodeType.Dot) {\n\n                // assemble the dotted name path\n                var dottedName = <BinaryExpression> typeRef.term;\n\n                // find the decl\n                prevResolvingTypeReference = context.resolvingTypeReference;\n\n                typeDeclSymbol = <PullTypeSymbol>this.resolveDottedTypeNameExpression(dottedName, enclosingDecl, context);              \n\n                context.resolvingTypeReference = prevResolvingTypeReference;\n\n                if (!typeDeclSymbol) {\n                    diagnostic = context.postError(dottedName.operand2.minChar, dottedName.operand2.getLength(), this.unitPath, \"Could not find dotted type \'\" + (<Identifier>dottedName.operand2).actualText + \"\'\", enclosingDecl);\n                    return this.getNewErrorTypeSymbol(diagnostic);\n                }\n            }\n\n            if (!typeDeclSymbol) {\n                diagnostic = context.postError(typeRef.term.minChar, typeRef.term.getLength(), this.unitPath, \"Could not resolve type reference\", enclosingDecl);\n                return this.getNewErrorTypeSymbol(diagnostic);\n            }\n\n            // an array of any of the above\n            // PULLTODO: Arity > 1\n            if (typeRef.arrayCount) {\n\n                var arraySymbol: PullTypeSymbol = typeDeclSymbol.getArrayType();\n\n                // otherwise, create a new array symbol\n                if (!arraySymbol) {\n                    // for each member in the array interface symbol, substitute in the the typeDecl symbol for \"_element\"\n\n                    if (!this.cachedArrayInterfaceType) {\n                        this.cachedArrayInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Array\", this.getPathToDecl(enclosingDecl), PullElementKind.Interface);\n                    }\n\n                    if (this.cachedArrayInterfaceType && !this.cachedArrayInterfaceType.isResolved()) {\n                        this.resolveDeclaredSymbol(this.cachedArrayInterfaceType, enclosingDecl, context);\n                    }\n\n                    arraySymbol = specializeToArrayType(this.semanticInfoChain.elementTypeSymbol, typeDeclSymbol, this, context);\n\n                    if (!arraySymbol) {\n                        arraySymbol = this.semanticInfoChain.anyTypeSymbol;\n                    }\n                }\n\n                if (typeRef.arrayCount > 1) {\n                    var arity = typeRef.arrayCount - 1;\n                    var existingArraySymbol: PullTypeSymbol = null;\n\n                    while (arity) {\n                        existingArraySymbol = arraySymbol.getArrayType();\n\n                        if (!existingArraySymbol) {\n                            arraySymbol = specializeToArrayType(this.semanticInfoChain.elementTypeSymbol, arraySymbol, this, context);\n                        }\n                        else {\n                            arraySymbol = existingArraySymbol;\n                        }\n\n                        arity--;\n                    }\n                }\n\n                typeDeclSymbol = arraySymbol;\n            }\n\n            this.setSymbolForAST(typeRef, typeDeclSymbol, context);\n\n            return typeDeclSymbol;\n        }\n\n        // Also resolves parameter declarations\n        public resolveVariableDeclaration(varDecl: BoundDecl, context: PullTypeResolutionContext, enclosingDecl?: PullDecl): PullSymbol {\n\n            var decl: PullDecl = this.getDeclForAST(varDecl);\n            var declSymbol = decl.getSymbol();\n            var declParameterSymbol: PullSymbol = decl.getValueDecl() ? decl.getValueDecl().getSymbol() : null;\n            var hadError = false;\n\n            if (declSymbol.isResolved()) {\n                return declSymbol.getType();\n            }\n\n            if (declSymbol.isResolving()) {\n                // PULLTODO: Error or warning?\n                declSymbol.setType(this.semanticInfoChain.anyTypeSymbol);\n                declSymbol.setResolved();\n\n                return this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            declSymbol.startResolving();\n\n            var wrapperDecl = this.getEnclosingDecl(decl);\n            wrapperDecl = wrapperDecl ? wrapperDecl : enclosingDecl;\n\n            var diagnostic: PullDiagnostic = null;\n\n            // Does this have a type expression? If so, that\'s the type\n            if (varDecl.typeExpr) {\n                var typeExprSymbol = this.resolveTypeReference(<TypeReference>varDecl.typeExpr, wrapperDecl, context);\n\n                if (!typeExprSymbol) {\n                    diagnostic = context.postError(varDecl.minChar, varDecl.getLength(), this.unitPath, \"Could not resolve type expression for variable \'\" + varDecl.id.actualText + \"\'\", decl);\n                    declSymbol.setType(this.getNewErrorTypeSymbol(diagnostic));\n\n                    if (declParameterSymbol) {\n                        context.setTypeInContext(declParameterSymbol, this.semanticInfoChain.anyTypeSymbol);\n                    }\n\n                    hadError = true;\n                }\n                else {\n\n                    if (typeExprSymbol.isNamedTypeSymbol() && typeExprSymbol.isGeneric() && !typeExprSymbol.isTypeParameter() && typeExprSymbol.isResolved() && !typeExprSymbol.getIsSpecialized()) {\n                        typeExprSymbol = this.specializeTypeToAny(typeExprSymbol, enclosingDecl, context);\n                    }              \n\n                    // PULLREVIEW: If the type annotation is a container type, use the module instance type\n                    if (typeExprSymbol.isContainer()) {\n                        var instanceSymbol = (<PullContainerTypeSymbol>typeExprSymbol).getInstanceSymbol()\n\n                        if (!instanceSymbol) {\n                            diagnostic = context.postError(varDecl.minChar, varDecl.getLength(), this.unitPath, \"Tried to set variable type to uninitialized module type\'\" + typeExprSymbol.toString() + \"\'\", decl);\n                            typeExprSymbol = this.getNewErrorTypeSymbol(diagnostic);\n                        }\n                        else {\n                            typeExprSymbol = instanceSymbol.getType();\n                        }\n                    }\n\n                    context.setTypeInContext(declSymbol, typeExprSymbol);\n\n                    if (declParameterSymbol) {\n                        declParameterSymbol.setType(typeExprSymbol);\n                    }\n\n                    // if the typeExprSymbol is generic, set the \"hasGenericParameter\" field on the enclosing signature\n                    // we filter out arrays, since for those we just want to know if their element type is a type parameter...\n                    if ((varDecl.nodeType == NodeType.ArgDecl) && enclosingDecl && ((typeExprSymbol.isGeneric() && !typeExprSymbol.isArray()) || this.isTypeArgumentOrWrapper(typeExprSymbol))) {\n                        var signature = enclosingDecl.getSignatureSymbol();\n\n                        if (signature) {\n                            signature.setHasGenericParameter();\n                        }\n                    }\n                }\n            }\n\n                // Does it have an initializer? If so, typecheck and use that\n            else if (varDecl.init) {\n\n                var initExprSymbol = this.resolveStatementOrExpression(varDecl.init, false, wrapperDecl, context);\n\n                if (!initExprSymbol) {\n                    diagnostic = context.postError(varDecl.minChar, varDecl.getLength(), this.unitPath, \"Could not resolve type of initializer expression for variable \'\" + varDecl.id.actualText + \"\'\", decl);\n\n                    context.setTypeInContext(declSymbol, this.getNewErrorTypeSymbol(diagnostic));\n\n                    if (declParameterSymbol) {\n                        context.setTypeInContext(declParameterSymbol, this.semanticInfoChain.anyTypeSymbol);\n                    }\n\n                    hadError = true;\n                }\n                else {\n\n                    context.setTypeInContext(declSymbol, this.widenType(initExprSymbol.getType()));\n                    initExprSymbol.addOutgoingLink(declSymbol, SymbolLinkKind.ProvidesInferredType);\n\n                    if (declParameterSymbol) {\n                        context.setTypeInContext(declParameterSymbol, initExprSymbol.getType());\n                        initExprSymbol.addOutgoingLink(declParameterSymbol, SymbolLinkKind.ProvidesInferredType);\n                    }\n                }\n            }\n            else if (declSymbol.getKind() == PullElementKind.Container) { // module instance value\n                instanceSymbol = (<PullContainerTypeSymbol>declSymbol).getInstanceSymbol();\n                var instanceType = instanceSymbol.getType();\n\n                if (instanceType) {\n                    context.setTypeInContext(declSymbol, instanceType);\n                }\n                else {\n                    context.setTypeInContext(declSymbol, this.semanticInfoChain.anyTypeSymbol);\n                }\n            }\n            //else if () {} // class instance value\n                // Otherwise, it\'s of type \'any\'\n            else {\n                context.setTypeInContext(declSymbol, this.semanticInfoChain.anyTypeSymbol);\n                if (declParameterSymbol) {\n                    declParameterSymbol.setType(this.semanticInfoChain.anyTypeSymbol);\n                }\n            }\n\n            if (!hadError) {\n                declSymbol.setResolved();\n\n                if (declParameterSymbol) {\n                    declParameterSymbol.setResolved();\n                }\n            }\n\n            return declSymbol;\n        }\n\n        public resolveTypeParameterDeclaration(typeParameterAST: TypeParameter, context: PullTypeResolutionContext): PullTypeSymbol {\n            var typeParameterDecl = this.getDeclForAST(typeParameterAST);\n            var typeParameterSymbol = <PullTypeParameterSymbol>typeParameterDecl.getSymbol();\n\n            if (typeParameterSymbol.isResolved() || typeParameterSymbol.isResolving()) {\n                return typeParameterSymbol;\n            }\n\n            typeParameterSymbol.startResolving();\n\n            if (typeParameterAST.constraint) {\n                var enclosingDecl = this.getEnclosingDecl(typeParameterDecl);\n                var constraintTypeSymbol = this.resolveTypeReference(<TypeReference>typeParameterAST.constraint, enclosingDecl, context);\n\n                if (!constraintTypeSymbol) {\n                    context.postError(typeParameterAST.minChar, typeParameterAST.getLength(), this.unitPath, \"Could not resolve constraint for type parameter \'\" + typeParameterDecl.getName() + \"\'\", enclosingDecl);\n                }\n                else if (constraintTypeSymbol.isPrimitive()) {\n                    context.postError(typeParameterAST.constraint.minChar, typeParameterAST.constraint.getLength(), this.unitPath, \"Type parameter constraints may not be primitive types\", enclosingDecl);\n                }\n                else {\n                    typeParameterSymbol.setConstraint(constraintTypeSymbol);\n                }\n            }\n\n            typeParameterSymbol.setResolved();\n\n            return typeParameterSymbol;\n        }\n\n        public resolveFunctionBodyReturnTypes(funcDeclAST: FuncDecl, signature: PullSignatureSymbol, useContextualType: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n            var returnStatements: ReturnStatement[] = [];\n\n            var preFindReturnExpressionTypes = function (ast: AST, parent: AST, walker: IAstWalker) {\n                var go = true;\n\n                switch (ast.nodeType) {\n                    case NodeType.FuncDecl:\n                        // don\'t recurse into a function decl - we don\'t want to confuse a nested\n                        // return type with the top-level function\'s return type\n                        go = false;\n                        break;\n\n                    case NodeType.ReturnStatement:\n                        var returnStatement: ReturnStatement = <ReturnStatement>ast;\n                        returnStatements[returnStatements.length] = returnStatement;\n                        go = false;\n                        break;\n\n                    default:\n                        break;\n                }\n\n                walker.options.goChildren = go;\n\n                return ast;\n            }\n\n            getAstWalkerFactory().walk(funcDeclAST.bod, preFindReturnExpressionTypes);\n\n            if (!returnStatements.length) {\n                if (useContextualType) {\n                    var contextualType = this.widenType(context.getContextualType());\n\n                    signature.setReturnType(contextualType);\n\n                    var isVoidOrAny = contextualType == this.semanticInfoChain.anyTypeSymbol || contextualType == this.semanticInfoChain.voidTypeSymbol;\n               \n                    if (!isVoidOrAny) {\n                        context.postError(funcDeclAST.minChar, funcDeclAST.getLength(), this.unitPath, \"Function declared a non-void return type, but has no return expression\", enclosingDecl);\n                    }                    \n                }\n                else {\n                    signature.setReturnType(this.semanticInfoChain.voidTypeSymbol);\n                }\n            }\n\n            else {\n                var returnExpressionSymbols: PullTypeSymbol[] = [];\n                var i = 0;\n\n                for (i = 0; i < returnStatements.length; i++) {\n                    if (returnStatements[i].returnExpression) {\n                        returnExpressionSymbols[returnExpressionSymbols.length] = this.resolveStatementOrExpression(returnStatements[i].returnExpression, useContextualType, enclosingDecl, context).getType();\n                    }\n                }\n\n                if (!returnExpressionSymbols.length) {\n                    signature.setReturnType(this.semanticInfoChain.voidTypeSymbol);\n                }\n                else {\n\n                    // combine return expression types for best common type\n                    var collection: IPullTypeCollection = {\n                        getLength: () => { return returnExpressionSymbols.length; },\n                        setTypeAtIndex: (index: number, type: PullTypeSymbol) => { },\n                        getTypeAtIndex: (index: number) => {\n                            return returnExpressionSymbols[index].getType();\n                        }\n                    }\n\n                    var returnType = this.findBestCommonType(returnExpressionSymbols[0], null, collection, true, context, new TypeComparisonInfo());\n\n                    signature.setReturnType(returnType ? this.widenType(returnType) : this.semanticInfoChain.anyTypeSymbol);\n\n                    // link return expressions to signature type to denote inference\n                    for (i = 0; i < returnExpressionSymbols.length; i++) {\n                        returnExpressionSymbols[i].addOutgoingLink(signature, SymbolLinkKind.ProvidesInferredType);\n                    }\n                }\n            }\n        }\n\n        public resolveFunctionDeclaration(funcDeclAST: FuncDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            var funcDecl: PullDecl = this.getDeclForAST(funcDeclAST);\n\n            var funcSymbol = <PullFunctionTypeSymbol>funcDecl.getSymbol();\n\n            var signature: PullSignatureSymbol = funcDecl.getSignatureSymbol();\n\n            var hadError = false;\n\n            var isConstructor = funcDeclAST.isConstructor || hasFlag(funcDeclAST.getFunctionFlags(), FunctionFlags.ConstructMember);\n\n            if (signature) {\n\n                if (signature.isResolved()) {\n                    return funcSymbol;\n                }\n\n                var diagnostic: PullDiagnostic;\n\n                if (signature.isResolving()) {\n                    \n                    // try to set the return type, even though we may be lacking in some information\n                    if (funcDeclAST.returnTypeAnnotation) {\n                        var returnTypeRef = <TypeReference>funcDeclAST.returnTypeAnnotation;\n                        var returnTypeSymbol = this.resolveTypeReference(returnTypeRef, funcDecl, context);\n                        if (!returnTypeSymbol) {\n                            diagnostic = context.postError(funcDeclAST.returnTypeAnnotation.minChar, funcDeclAST.returnTypeAnnotation.getLength(), this.unitPath, \"Could not resolve return type reference for some reason...\", funcDecl);\n                            signature.setReturnType(this.getNewErrorTypeSymbol(diagnostic));\n                            hadError = true;\n                        } else {\n                            if (this.isTypeArgumentOrWrapper(returnTypeSymbol)) {\n                                signature.setHasGenericParameter();\n                                if (funcSymbol) {\n                                    funcSymbol.getType().setHasGenericSignature();\n                                }\n                            }\n                            signature.setReturnType(returnTypeSymbol);\n\n                            if (isConstructor && returnTypeSymbol == this.semanticInfoChain.voidTypeSymbol) {\n                                context.postError(funcDeclAST.minChar, funcDeclAST.getLength(), this.unitPath, \"Constructors may not have a return type of \'void\'\", funcDecl);\n                            }                            \n                        }\n                    } \n                    else {\n                        signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n\n                    signature.setResolved();\n                    return funcSymbol;\n                }\n\n                signature.startResolving();\n\n                // resolve parameter type annotations as necessary\n                if (funcDeclAST.arguments) {\n                    for (var i = 0; i < funcDeclAST.arguments.members.length; i++) {\n                        this.resolveVariableDeclaration(<BoundDecl>funcDeclAST.arguments.members[i], context, funcDecl);\n                    }\n                }\n\n                if (signature.isGeneric()) {\n                    // PULLREVIEW: This is split into a spearate if statement to make debugging slightly easier...\n                    if (funcSymbol) {\n                        funcSymbol.getType().setHasGenericSignature();\n                    }\n                }\n\n                // resolve the return type annotation\n                if (funcDeclAST.returnTypeAnnotation) {\n                    returnTypeRef = <TypeReference>funcDeclAST.returnTypeAnnotation;\n\n                    // use the funcDecl for the enclosing decl, since we want to pick up any type parameters \n                    // on the function when resolving the return type\n                    returnTypeSymbol = this.resolveTypeReference(returnTypeRef, funcDecl, context);\n\n                    if (!returnTypeSymbol) {\n                        diagnostic = context.postError(funcDeclAST.returnTypeAnnotation.minChar, funcDeclAST.returnTypeAnnotation.getLength(), this.unitPath, \"Could not resolve return type reference for some reason...\", funcDecl);\n                        signature.setReturnType(this.getNewErrorTypeSymbol(diagnostic));\n\n                        hadError = true;\n                    }\n                    else {\n                        if (this.isTypeArgumentOrWrapper(returnTypeSymbol)) {\n                            signature.setHasGenericParameter();\n\n                            if (funcSymbol) {\n                                funcSymbol.getType().setHasGenericSignature();\n                            }\n                        }\n\n                        signature.setReturnType(returnTypeSymbol);\n\n                        if (isConstructor && returnTypeSymbol == this.semanticInfoChain.voidTypeSymbol) {\n                            context.postError(funcDeclAST.minChar, funcDeclAST.getLength(), this.unitPath, \"Constructors may not have a return type of \'void\'\", funcDecl);\n                        }                           \n                    }\n                }\n                // if there\'s no return-type annotation\n                //     - if it\'s not a definition signature, set the return type to \'any\'\n                //     - if it\'s a definition sigature, take the best common type of all return expressions\n                //     - if it\'s a constructor, we set the return type link during binding\n                else if (!funcDeclAST.isConstructor) {\n                    if (funcDeclAST.isSignature()) {\n                        signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n                    else {\n                        this.resolveFunctionBodyReturnTypes(funcDeclAST, signature, false, funcDecl, new PullTypeResolutionContext());\n                    }\n                }\n\n                if (!hadError) {\n                    signature.setResolved();\n                }\n            }\n\n            // don\'t resolve anything here that\'s not relevant to the type of the function!\n\n            return funcSymbol;\n        }\n\n        public resolveGetAccessorDeclaration(funcDeclAST: FuncDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            var funcDecl: PullDecl = this.getDeclForAST(funcDeclAST);\n            var accessorSymbol = <PullAccessorSymbol> funcDecl.getSymbol();\n\n            var getterSymbol = accessorSymbol.getGetter();\n            var getterTypeSymbol = <PullFunctionTypeSymbol>getterSymbol.getType();\n\n            var signature: PullSignatureSymbol = getterTypeSymbol.getCallSignatures()[0];\n\n            var hadError = false;\n            var diagnostic: PullDiagnostic;\n\n            if (signature) {\n\n                if (signature.isResolved()) {\n                    return accessorSymbol;\n                }\n\n                if (signature.isResolving()) {\n                    // PULLTODO: Error or warning?\n                    signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n                    signature.setResolved();\n\n                    return accessorSymbol;\n                }\n\n                signature.startResolving();\n\n                // resolve parameter type annotations as necessary\n                if (funcDeclAST.arguments) {\n                    for (var i = 0; i < funcDeclAST.arguments.members.length; i++) {\n                        this.resolveVariableDeclaration(<BoundDecl>funcDeclAST.arguments.members[i], context, funcDecl);\n                    }\n                }\n\n                if (signature.hasGenericParameter()) {\n                    // PULLREVIEW: This is split into a spearate if statement to make debugging slightly easier...\n                    if (getterSymbol) {\n                        getterTypeSymbol.setHasGenericSignature();\n                    }\n                }\n\n                // resolve the return type annotation\n                if (funcDeclAST.returnTypeAnnotation) {\n                    var returnTypeRef = <TypeReference>funcDeclAST.returnTypeAnnotation;\n\n                    // use the funcDecl for the enclosing decl, since we want to pick up any type parameters \n                    // on the function when resolving the return type\n                    var returnTypeSymbol = this.resolveTypeReference(returnTypeRef, funcDecl, context);\n\n                    if (!returnTypeSymbol) {\n                        diagnostic = context.postError(funcDeclAST.returnTypeAnnotation.minChar, funcDeclAST.returnTypeAnnotation.getLength(), this.unitPath, \"Could not resolve return type reference for some reason...\", funcDecl);\n                        signature.setReturnType(this.getNewErrorTypeSymbol(diagnostic));\n\n                        hadError = true;\n                    }\n                    else {\n\n                        if (this.isTypeArgumentOrWrapper(returnTypeSymbol)) {\n                            signature.setHasGenericParameter();\n\n                            if (getterSymbol) {\n                                getterTypeSymbol.setHasGenericSignature();\n                            }\n                        }\n\n                        signature.setReturnType(returnTypeSymbol);\n                    }\n                }\n\n                    // if there\'s no return-type annotation\n                    //     - if it\'s not a definition signature, set the return type to \'any\'\n                    //     - if it\'s a definition sigature, take the best common type of all return expressions\n                else {\n                    if (funcDeclAST.isSignature()) {\n                        signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n                    else {\n                        this.resolveFunctionBodyReturnTypes(funcDeclAST, signature, false, funcDecl, new PullTypeResolutionContext());\n                    }\n                }\n\n\n                if (!hadError) {\n                    signature.setResolved();\n                }\n            }\n\n            var accessorType = signature.getReturnType();\n\n            var setter = accessorSymbol.getSetter();\n\n            if (setter) {\n                var setterType = setter.getType();\n                var setterSig = setterType.getCallSignatures()[0];\n\n                if (setterSig.isResolved()) {\n                    // compare setter parameter type and getter return type\n                    var setterParameters = setterSig.getParameters();\n\n                    if (setterParameters.length) {\n                        var setterParameter = setterParameters[0];\n                        var setterParameterType = setterParameter.getType();\n\n                        if (!this.typesAreIdentical(accessorType, setterParameterType)) {\n                            diagnostic = context.postError(funcDeclAST.minChar, funcDeclAST.getLength(), this.unitPath, \"Getter and setter types do not agree\", this.getEnclosingDecl(funcDecl));\n                            accessorSymbol.setType(this.getNewErrorTypeSymbol(diagnostic));\n                        }\n                    }\n                }\n                else {\n                    accessorSymbol.setType(accessorType);\n                }\n\n            }\n            else {\n                accessorSymbol.setType(accessorType);\n            }\n\n            return accessorSymbol;\n        }\n\n        public resolveSetAccessorDeclaration(funcDeclAST: FuncDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            var funcDecl: PullDecl = this.getDeclForAST(funcDeclAST);\n            var accessorSymbol = <PullAccessorSymbol> funcDecl.getSymbol();\n\n            var setterSymbol = accessorSymbol.getSetter();\n            var setterTypeSymbol = <PullFunctionTypeSymbol>setterSymbol.getType();\n\n            var signature: PullSignatureSymbol = setterTypeSymbol.getCallSignatures()[0];\n\n            var hadError = false;\n\n            if (signature) {\n\n                if (signature.isResolved()) {\n                    return accessorSymbol;\n                }\n\n                if (signature.isResolving()) {\n                    // PULLTODO: Error or warning?\n                    signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n                    signature.setResolved();\n\n                    return accessorSymbol;\n                }\n\n                signature.startResolving();\n\n                // resolve parameter type annotations as necessary\n                if (funcDeclAST.arguments) {\n                    for (var i = 0; i < funcDeclAST.arguments.members.length; i++) {\n                        this.resolveVariableDeclaration(<BoundDecl>funcDeclAST.arguments.members[i], context, funcDecl);\n                    }\n                }\n                else {\n                    context.postError(funcDeclAST.minChar, funcDeclAST.getLength(), this.unitPath, \"Setters must take arguments\", this.getEnclosingDecl(funcDecl));\n                }\n\n                if (signature.hasGenericParameter()) {\n                    // PULLREVIEW: This is split into a spearate if statement to make debugging slightly easier...\n                    if (setterSymbol) {\n                        setterTypeSymbol.setHasGenericSignature();\n                    }\n                }\n\n                // resolve the return type annotation\n                if (funcDeclAST.returnTypeAnnotation) {\n                    context.postError(funcDeclAST.minChar, funcDeclAST.getLength(), this.unitPath, \"Setters may not contain return type annotations\", this.getEnclosingDecl(funcDecl));\n                }\n\n                if (!hadError) {\n                    signature.setResolved();\n                }\n            }\n\n            var parameters = signature.getParameters();\n\n            if (parameters.length) {\n                var accessorType = parameters[0].getType();\n\n                var getter = accessorSymbol.getGetter();\n\n                if (getter) {\n                    var getterType = getter.getType();\n                    var getterSig = getterType.getCallSignatures()[0];\n\n                    if (getterSig.isResolved()) {\n                        // compare setter parameter type and getter return type\n                        var getterReturnType = getterSig.getReturnType();\n\n                        if (!this.typesAreIdentical(accessorType, getterReturnType)) {\n\n                            if (accessorType == this.semanticInfoChain.anyTypeSymbol) {\n                                accessorSymbol.setType(getterReturnType);\n                            }\n                            else {\n                                var diagnostic = context.postError(funcDeclAST.minChar, funcDeclAST.getLength(), this.unitPath, \"Getter and setter types do not agree\", this.getEnclosingDecl(funcDecl));\n                                accessorSymbol.setType(this.getNewErrorTypeSymbol(diagnostic));\n                            }\n                        }\n                    }\n                    else {\n                        accessorSymbol.setType(accessorType);\n                    }\n                }\n                else {\n                    accessorSymbol.setType(accessorType);\n                }\n            }\n\n            return accessorSymbol;\n        }\n\n\n        // Expression resolution\n\n        public resolveAST(ast: AST, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n            switch (ast.nodeType) {\n                case NodeType.ModuleDeclaration:\n                case NodeType.InterfaceDeclaration:\n                case NodeType.ClassDeclaration:\n                case NodeType.VarDecl:\n                case NodeType.ArgDecl:\n                    return this.resolveDeclaration(ast, context, enclosingDecl);\n\n                case NodeType.FuncDecl:\n                    if (isTypedAssignment || ((<FuncDecl>ast).getFunctionFlags() & FunctionFlags.IsFunctionExpression)) {\n                        return this.resolveStatementOrExpression(ast, isTypedAssignment, enclosingDecl, context);\n                    }\n                    else {\n                        return this.resolveDeclaration(ast, context, enclosingDecl);\n                    }\n\n                default:\n                    return this.resolveStatementOrExpression(ast, isTypedAssignment, enclosingDecl, context);\n            }\n        }\n\n        public resolveStatementOrExpression(expressionAST: AST, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n            switch (expressionAST.nodeType) {\n                case NodeType.Name:\n                    if (context.searchTypeSpace) {\n                        return this.resolveTypeNameExpression(<Identifier>expressionAST, enclosingDecl, context);\n                    }\n                    else {\n                        return this.resolveNameExpression(<Identifier>expressionAST, enclosingDecl, context);\n                    }\n                case GenericType:\n                    return this.resolveGenericTypeReference(<GenericType>expressionAST, enclosingDecl, context);\n                case NodeType.Dot:\n                    if (context.searchTypeSpace) {\n                        return this.resolveDottedTypeNameExpression(<BinaryExpression>expressionAST, enclosingDecl, context);\n                    }\n                    else {\n                        return this.resolveDottedNameExpression(<BinaryExpression>expressionAST, enclosingDecl, context);\n                    }\n\n                case NodeType.FuncDecl:\n                    {\n                        var funcDecl = <FuncDecl>expressionAST;\n\n                        if (funcDecl.isGetAccessor()) {\n                            return this.resolveGetAccessorDeclaration(funcDecl, context);\n                        }\n                        else if (funcDecl.isSetAccessor()) {\n                            return this.resolveSetAccessorDeclaration(funcDecl, context);\n                        }\n                        else {\n                            return this.resolveFunctionExpression(funcDecl, isTypedAssignment, enclosingDecl, context);\n                        }\n                    }\n\n                case NodeType.ObjectLit:\n                    return this.resolveObjectLiteralExpression(expressionAST, isTypedAssignment, enclosingDecl, context);\n\n                case NodeType.ArrayLit:\n                    return this.resolveArrayLiteralExpression(expressionAST, isTypedAssignment, enclosingDecl, context);\n\n                case NodeType.ThisExpression:\n                    return this.resolveThisExpression(expressionAST, enclosingDecl, context);\n                case NodeType.SuperExpression:\n                    return this.resolveSuperExpression(expressionAST, enclosingDecl, context);\n\n                case NodeType.Call:\n                    return this.resolveCallExpression(<CallExpression>expressionAST, isTypedAssignment, enclosingDecl, context);\n\n                case NodeType.New:\n                    return this.resolveNewExpression(<CallExpression>expressionAST, isTypedAssignment, enclosingDecl, context);\n\n                case NodeType.CastExpression:\n                    return this.resolveTypeAssertionExpression(expressionAST, isTypedAssignment, enclosingDecl, context);\n\n                case NodeType.TypeRef:\n                    return this.resolveTypeReference(<TypeReference>expressionAST, enclosingDecl, context);\n\n                // primitives\n                case NodeType.NumberLit:\n                    return this.semanticInfoChain.numberTypeSymbol;\n                case NodeType.StringLiteral:\n                    return this.semanticInfoChain.stringTypeSymbol;\n                case NodeType.Null:\n                    return this.semanticInfoChain.nullTypeSymbol;\n                case NodeType.TrueLiteral:\n                case NodeType.FalseLiteral:\n                    return this.semanticInfoChain.boolTypeSymbol;\n                case NodeType.Void:\n                    return this.semanticInfoChain.voidTypeSymbol;\n\n                // assignment\n                case NodeType.Asg:\n                    return this.resolveAssignmentStatement(expressionAST, isTypedAssignment, enclosingDecl, context);\n\n                // boolean operations\n                case NodeType.LogNot:\n                case NodeType.Ne:\n                case NodeType.Eq:\n                case NodeType.Eqv:\n                case NodeType.NEqv:\n                case NodeType.Lt:\n                case NodeType.Le:\n                case NodeType.Ge:\n                case NodeType.Gt:\n                    return this.semanticInfoChain.boolTypeSymbol;\n\n                case NodeType.Add:\n                case NodeType.AsgAdd:                \n                    return this.resolveArithmeticExpression(expressionAST, isTypedAssignment, enclosingDecl, context);\n\n                case NodeType.AsgSub:\n                case NodeType.AsgMul:\n                case NodeType.AsgDiv:\n                case NodeType.AsgMod:\n                case NodeType.AsgOr:\n                case NodeType.AsgAnd:\n\n                case NodeType.Not:\n                case NodeType.Sub:\n                case NodeType.Mul:\n                case NodeType.Div:\n                case NodeType.Mod:\n                case NodeType.Or:\n                case NodeType.And:\n                case NodeType.Pos:\n                case NodeType.Neg:\n                case NodeType.IncPost:\n                case NodeType.IncPre:\n                case NodeType.DecPost:\n                case NodeType.DecPre:\n                    return this.semanticInfoChain.numberTypeSymbol;\n\n                case NodeType.Lsh:\n                case NodeType.Rsh:\n                case NodeType.Rs2:\n                case NodeType.AsgLsh:\n                case NodeType.AsgRsh:\n                case NodeType.AsgRs2:\n                    return this.semanticInfoChain.numberTypeSymbol;\n\n                case NodeType.Index:\n                    return this.resolveIndexExpression(expressionAST, isTypedAssignment, enclosingDecl, context);\n\n                case NodeType.LogOr:\n                    return this.resolveLogicalOrExpression(expressionAST, isTypedAssignment, enclosingDecl, context);\n                case NodeType.LogAnd:\n                    return this.resolveLogicalAndExpression(expressionAST, isTypedAssignment, enclosingDecl, context);\n\n                case NodeType.Typeof:\n                    return this.semanticInfoChain.stringTypeSymbol;\n\n                case NodeType.ThrowStatement:\n                    return this.semanticInfoChain.voidTypeSymbol;\n\n                case NodeType.Delete:\n                    return this.semanticInfoChain.boolTypeSymbol;\n\n                case NodeType.ConditionalExpression:\n                    return this.resolveConditionalExpression(<ConditionalExpression>expressionAST, enclosingDecl, context);\n\n                case NodeType.RegularExpressionLiteral:\n                    return this.cachedRegExpInterfaceType ? this.cachedRegExpInterfaceType : this.semanticInfoChain.anyTypeSymbol;\n\n                case NodeType.ParenthesizedExpression:\n                    return this.resolveParenthesizedExpression(<ParenthesizedExpression>expressionAST, enclosingDecl, context);\n\n                case NodeType.ExpressionStatement:\n                    return this.resolveExpressionStatement(<ExpressionStatement>expressionAST, isTypedAssignment, enclosingDecl, context);\n            }\n\n            return this.semanticInfoChain.anyTypeSymbol;\n        }\n\n        public resolveNameExpression(nameAST: Identifier, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            if (nameAST.isMissing()) {\n                return this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            var nameSymbol: PullSymbol = this.getSymbolForAST(nameAST, context);\n\n            if (nameSymbol /*&& nameSymbol.isResolved()*/) {\n                return nameSymbol;\n            }\n\n            var id = nameAST.text;\n\n            var declPath: PullDecl[] = enclosingDecl !== null ? this.getPathToDecl(enclosingDecl) : [];\n\n            if (enclosingDecl && !declPath.length) {\n                declPath = [enclosingDecl];\n            }\n\n            nameSymbol = this.getSymbolFromDeclPath(id, declPath, PullElementKind.SomeValue);\n\n            // PULLREVIEW: until further notice, search out for modules or enums\n            if (!nameSymbol) {\n                nameSymbol = this.getSymbolFromDeclPath(id, declPath, PullElementKind.SomeType);\n\n                //if (nameSymbol && nameSymbol.getKind() == PullElementKind.Interface) {\n                //    nameSymbol = null;\n                //}\n            }\n\n            if (!nameSymbol && id === \"arguments\" && enclosingDecl && (enclosingDecl.getKind() & PullElementKind.SomeFunction)) {\n                nameSymbol = this.cachedFunctionArgumentsSymbol;\n            }            \n\n            if (!nameSymbol) {\n                var diagnostic = context.postError(nameAST.minChar, nameAST.getLength(), this.unitPath, \"Could not find symbol \'\" + id + \"\'\", enclosingDecl);\n                return this.getNewErrorTypeSymbol(diagnostic);\n            }\n\n            if (!nameSymbol.isResolved()) {\n                this.resolveDeclaredSymbol(nameSymbol, enclosingDecl, context);\n            }\n\n            this.setSymbolForAST(nameAST, nameSymbol, context);\n\n            return nameSymbol;\n        }\n\n        public resolveDottedNameExpression(dottedNameAST: BinaryExpression, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n\n            if ((<Identifier>dottedNameAST.operand2).isMissing()) {\n                return this.semanticInfoChain.anyTypeSymbol;\n            }            \n\n            var nameSymbol: PullSymbol = this.getSymbolForAST(dottedNameAST, context);\n\n            if (nameSymbol /*&& nameSymbol.isResolved()*/) {\n                return nameSymbol;\n            }\n\n            // assemble the dotted name path\n            var rhsName = (<Identifier>dottedNameAST.operand2).text;\n\n            var lhs: PullSymbol = this.resolveStatementOrExpression(dottedNameAST.operand1, false, enclosingDecl, context);\n            var lhsType = lhs.getType();\n            var diagnostic: PullDiagnostic;\n\n            if (lhs.isAlias()) {\n                (<PullTypeAliasSymbol>lhs).setIsUsedAsValue();\n            }\n\n            if (lhsType == this.semanticInfoChain.anyTypeSymbol) {\n                return lhsType;\n            }\n\n            if (!lhsType) {\n                diagnostic = context.postError(dottedNameAST.operand2.minChar, dottedNameAST.operand2.getLength(), this.unitPath, \"Could not find enclosing symbol for dotted name \'\" + rhsName + \"\'\", enclosingDecl);\n                return this.getNewErrorTypeSymbol(diagnostic);\n            }\n\n            // if we\'re resolving a type reference, we really only want to check the constructor type\n            if (lhsType == this.semanticInfoChain.numberTypeSymbol && this.cachedNumberInterfaceType) {\n                lhsType = this.cachedNumberInterfaceType;\n            }\n            else if (lhsType == this.semanticInfoChain.stringTypeSymbol && this.cachedStringInterfaceType) {\n                lhsType = this.cachedStringInterfaceType;\n            }\n            else if (lhsType == this.semanticInfoChain.boolTypeSymbol && this.cachedBooleanInterfaceType) {\n                lhsType = this.cachedBooleanInterfaceType;\n            }\n\n            if (!lhsType.isResolved()) {\n                var potentiallySpecializedType = <PullTypeSymbol>this.resolveDeclaredSymbol(lhsType, enclosingDecl, context);\n\n                if (potentiallySpecializedType != lhsType) {\n                    if (!lhs.isType()) {\n                        context.setTypeInContext(lhs, potentiallySpecializedType);\n                    }\n\n                    lhsType = potentiallySpecializedType;\n                }\n            }\n\n            if (rhsName == \"prototype\") {\n\n                if (lhsType.isClass()) {\n                    return lhsType;\n                }\n                else {\n                    var classInstanceType = lhsType.getAssociatedContainerType();\n\n                    if (classInstanceType && classInstanceType.isClass()) {\n                        return classInstanceType;\n                    }\n                }\n            }\n\n            // now for the name...\n            // For classes, check the statics first below\n            if (!(lhs.isType() && lhs.isClass()) && !nameSymbol) {\n                nameSymbol = lhsType.findMember(rhsName);\n            }\n\n            if (!nameSymbol) {\n\n                // could be a static\n                if (lhsType.isClass()) {\n                    var staticType = (<PullClassTypeSymbol>lhsType).getConstructorMethod().getType();\n\n                    nameSymbol = staticType.findMember(rhsName);\n\n                    if (!nameSymbol) {\n                        nameSymbol = lhsType.findMember(rhsName);\n                    }\n                }\n                    // could be an enum\n                else if ((lhsType.getKind() == PullElementKind.Enum) && this.cachedNumberInterfaceType) {\n                    lhsType = this.cachedNumberInterfaceType;\n\n                    nameSymbol = lhsType.findMember(rhsName);\n                }\n                // could be a function symbol\n                else if (lhsType.getCallSignatures().length && this.cachedFunctionInterfaceType) {\n                    lhsType = this.cachedFunctionInterfaceType;\n\n                    nameSymbol = lhsType.findMember(rhsName);\n                }\n                // could be a type parameter with a contraint\n                else if (lhsType.isTypeParameter()) {\n                    var constraint = (<PullTypeParameterSymbol>lhsType).getConstraint();\n\n                    if (constraint) {\n                        nameSymbol = constraint.findMember(rhsName);\n                    }\n                }\n                else if (lhsType.isContainer()) {\n                    var associatedInstance = (<PullContainerTypeSymbol>lhsType).getInstanceSymbol();\n\n                    if (associatedInstance) {\n                        var instanceType = associatedInstance.getType();\n\n                        nameSymbol = instanceType.findMember(rhsName);\n                    }\n                }\n                // could be a module instance\n                else {\n                    var associatedType = lhsType.getAssociatedContainerType();\n\n                    if (associatedType) {\n                        nameSymbol = associatedType.findMember(rhsName);\n                    }\n                }\n\n                // could be an object member\n                if (!nameSymbol && !lhsType.isPrimitive() && this.cachedObjectInterfaceType) {\n                    nameSymbol = this.cachedObjectInterfaceType.findMember(rhsName);\n                }                \n\n                if (!nameSymbol) {\n                    diagnostic = context.postError(dottedNameAST.operand2.minChar, dottedNameAST.operand2.getLength(), this.unitPath, \"Could not find dotted symbol name \'\" + rhsName + \"\'\", enclosingDecl);\n                    return this.getNewErrorTypeSymbol(diagnostic);\n                }\n            }\n\n            if (!nameSymbol.isResolved()) {\n                this.resolveDeclaredSymbol(nameSymbol, enclosingDecl, context);\n            }\n\n            this.setSymbolForAST(dottedNameAST, nameSymbol, context);\n            this.setSymbolForAST(dottedNameAST.operand2, nameSymbol, context);\n\n            return nameSymbol;\n        }\n\n        public resolveTypeNameExpression(nameAST: Identifier, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            if (nameAST.isMissing()) {\n                return this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            var typeNameSymbol: PullTypeSymbol = <PullTypeSymbol>this.getSymbolForAST(nameAST, context);\n\n            if (typeNameSymbol /*&& typeNameSymbol.isResolved()*/) {\n                return typeNameSymbol;\n            }\n\n            var id = nameAST.text;\n\n            var declPath: PullDecl[] = enclosingDecl !== null ? this.getPathToDecl(enclosingDecl) : [];\n            var diagnostic: PullDiagnostic;\n\n            if (enclosingDecl && !declPath.length) {\n                declPath = [enclosingDecl];\n            }\n\n            typeNameSymbol = <PullTypeSymbol>this.getSymbolFromDeclPath(id, declPath, PullElementKind.SomeType);\n\n            if (!typeNameSymbol) {\n                diagnostic = context.postError(nameAST.minChar, nameAST.getLength(), this.unitPath, \"Could not find type \'\" + id + \"\'\", enclosingDecl);\n                return this.getNewErrorTypeSymbol(diagnostic);\n            }\n\n            typeNameSymbol = context.findSpecializationForType(typeNameSymbol);\n\n            if (!typeNameSymbol.isResolved()) {\n                this.resolveDeclaredSymbol(typeNameSymbol, enclosingDecl, context);\n            }\n\n            this.setSymbolForAST(nameAST, typeNameSymbol, context);\n\n            return typeNameSymbol;\n        }\n\n        public resolveGenericTypeReference(genericTypeAST: GenericType, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullTypeSymbol {          \n\n            var nameAST = <Identifier> genericTypeAST.name;\n\n            if (nameAST.isMissing()) {\n                return this.semanticInfoChain.anyTypeSymbol;\n            }  \n\n            var id = nameAST.text;\n\n            var declPath: PullDecl[] = enclosingDecl !== null ? this.getPathToDecl(enclosingDecl) : [];\n\n            var diagnostic: PullDiagnostic;\n\n            if (enclosingDecl && !declPath.length) {\n                declPath = [enclosingDecl];\n            }\n\n            var genericTypeSymbol: PullTypeSymbol = null\n\n            genericTypeSymbol = <PullTypeSymbol>this.getSymbolFromDeclPath(id, declPath, PullElementKind.SomeType);\n\n            if (!genericTypeSymbol) {\n                diagnostic = context.postError(nameAST.minChar, nameAST.getLength(), this.unitPath, \"Could not find generic type \'\" + id + \"\'\", enclosingDecl);\n                return this.getNewErrorTypeSymbol(diagnostic);\n            }\n\n            if (genericTypeSymbol.isResolving()) {\n                return genericTypeSymbol;\n            }\n\n            if (!genericTypeSymbol.isResolved()) {\n                //genericTypeSymbol.startResolving();\n                this.resolveDeclaredSymbol(genericTypeSymbol, enclosingDecl, context);\n                //genericTypeSymbol.setResolved();\n            }\n\n            // specialize the type arguments\n            var typeArgs: PullTypeSymbol[] = [];\n            var typeArg: PullTypeSymbol = null;\n\n            if (!genericTypeSymbol.isResolvingTypeArguments()) {\n\n                genericTypeSymbol.startResolvingTypeArguments();\n\n                if (genericTypeAST.typeArguments && genericTypeAST.typeArguments.members.length) {\n                    for (var i = 0; i < genericTypeAST.typeArguments.members.length; i++) {\n                        typeArg = this.resolveTypeReference(<TypeReference>genericTypeAST.typeArguments.members[i], enclosingDecl, context);\n                        typeArgs[i] = context.findSpecializationForType(typeArg);\n                    }\n                }\n\n                genericTypeSymbol.doneResolvingTypeArguments();\n            }\n\n            var typeParameters = genericTypeSymbol.getTypeParameters();\n\n            if (typeArgs.length && typeArgs.length != typeParameters.length) {\n                diagnostic = context.postError(genericTypeAST.minChar, genericTypeAST.getLength(), this.unitPath, \"Generic type \'\" + genericTypeSymbol.toString() + \"\' expects \" + genericTypeSymbol.getTypeParameters().length + \" type arguments, but \" + typeArgs.length + \" arguments were supplied\", enclosingDecl);\n\n                return this.getNewErrorTypeSymbol(diagnostic);\n            }\n\n            var specializedSymbol = specializeType(genericTypeSymbol, typeArgs, this, enclosingDecl, context, genericTypeAST);\n\n            // check constraints, if appropriate\n            var typeConstraint: PullTypeSymbol = null;\n            var upperBound: PullTypeSymbol = null;\n\n            for (var iArg = 0; (iArg < typeArgs.length) && (iArg < typeParameters.length); iArg++) {\n                typeArg = typeArgs[iArg];\n\n                typeConstraint = typeParameters[iArg].getConstraint();\n\n                // test specialization type for assignment compatibility with the constraint\n                if (typeConstraint) {\n\n                    if (typeArg.isTypeParameter()) {\n                        upperBound = (<PullTypeParameterSymbol>typeArg).getConstraint();\n\n                        if (upperBound) {\n                            typeArg = upperBound;\n                        }\n                    }\n\n                    if (!this.sourceIsAssignableToTarget(typeArg, typeConstraint, context)) {\n                        context.postError(genericTypeAST.minChar, genericTypeAST.getLength(), this.getUnitPath(), \"Type \'\" + typeArg.toString(true) + \"\' does not satisfy the constraint \'\" + typeConstraint.toString(true) + \"\' for type parameter \'\" + typeParameters[iArg].toString(true) + \"\'\", enclosingDecl);\n                    }\n                }\n            }\n\n            return specializedSymbol;\n        }\n\n        public resolveDottedTypeNameExpression(dottedNameAST: BinaryExpression, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n\n            if ((<Identifier>dottedNameAST.operand2).isMissing()) {\n                return this.semanticInfoChain.anyTypeSymbol;\n            }  \n\n            var childTypeSymbol: PullTypeSymbol = <PullTypeSymbol>this.getSymbolForAST(dottedNameAST, context);\n\n            if (childTypeSymbol /*&& childTypeSymbol.isResolved()*/) {\n                return childTypeSymbol;\n            }\n\n            var diagnostic: PullDiagnostic;\n\n            // assemble the dotted name path\n            var rhsName = (<Identifier>dottedNameAST.operand2).text;\n\n            var prevSearchTypeSpace = context.searchTypeSpace;\n            context.searchTypeSpace = true;\n\n            var lhs: PullSymbol = this.resolveStatementOrExpression(dottedNameAST.operand1, false, enclosingDecl, context);\n\n            context.searchTypeSpace = prevSearchTypeSpace;\n\n            var lhsType = lhs.getType();\n\n            if (lhsType == this.semanticInfoChain.anyTypeSymbol) {\n                return lhsType;\n            }\n\n            if (!lhsType) {\n                diagnostic = context.postError(dottedNameAST.operand2.minChar, dottedNameAST.operand2.getLength(), this.unitPath, \"Could not find enclosing type for dotted type name \'\" + rhsName + \"\'\", enclosingDecl);\n                return this.getNewErrorTypeSymbol(diagnostic);\n            }\n\n            // now for the name...\n            childTypeSymbol = lhsType.findNestedType(rhsName);\n\n            if (!childTypeSymbol) {\n                diagnostic = context.postError(dottedNameAST.operand2.minChar, dottedNameAST.operand2.getLength(), this.unitPath, \"Could not find dotted type name \'\" + rhsName + \"\'\", enclosingDecl);\n                return this.getNewErrorTypeSymbol(diagnostic);\n            }\n\n            if (!childTypeSymbol.isResolved()) {\n                this.resolveDeclaredSymbol(childTypeSymbol, enclosingDecl, context);\n            }\n\n            this.setSymbolForAST(dottedNameAST, childTypeSymbol, context);\n\n            return childTypeSymbol;\n        }\n\n        public resolveFunctionExpression(funcDeclAST: FuncDecl, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            var functionDecl = this.getDeclForAST(funcDeclAST);\n            var funcDeclSymbol: PullSymbol = null;\n\n            if (functionDecl) {\n                funcDeclSymbol = functionDecl.getSymbol();\n                if (funcDeclSymbol.isResolved()) {\n                    return funcDeclSymbol;\n                }\n            }\n\n            // if we have an assigning AST with a type, and the funcDecl has no parameter types or return type annotation\n            // we\'ll contextually type it\n            // otherwise, just process it as a normal function declaration\n\n            var shouldContextuallyType = isTypedAssignment;\n\n            var assigningFunctionTypeSymbol: PullFunctionTypeSymbol = null;\n            var assigningFunctionSignature: PullSignatureSymbol = null;\n            var i = 0;\n\n            if (funcDeclAST.returnTypeAnnotation) {\n                shouldContextuallyType = false;\n            }\n\n            if (shouldContextuallyType && funcDeclAST.arguments) {\n\n                for (i = 0; i < funcDeclAST.arguments.members.length; i++) {\n                    if ((<ArgDecl>funcDeclAST.arguments.members[i]).typeExpr) {\n                        shouldContextuallyType = false;\n                        break;\n                    }\n                }\n            }\n\n            if (shouldContextuallyType) {\n\n                assigningFunctionTypeSymbol = <PullFunctionTypeSymbol>context.getContextualType();\n\n                if (assigningFunctionTypeSymbol) {\n                    this.resolveDeclaredSymbol(assigningFunctionTypeSymbol, enclosingDecl, context);\n\n                    if (assigningFunctionTypeSymbol) {\n                        assigningFunctionSignature = assigningFunctionTypeSymbol.getCallSignatures()[0];\n                    }\n                }\n            }\n\n            // create a new function decl and symbol\n\n            if (!funcDeclSymbol) {\n                var semanticInfo = this.semanticInfoChain.getUnit(this.unitPath);\n                var declCollectionContext = new DeclCollectionContext(semanticInfo);\n\n                declCollectionContext.scriptName = this.unitPath;\n\n                if (enclosingDecl) {\n                    declCollectionContext.pushParent(enclosingDecl);\n                }\n\n                getAstWalkerFactory().walk(funcDeclAST, preCollectDecls, postCollectDecls, null, declCollectionContext);\n\n                functionDecl = this.getDeclForAST(funcDeclAST);\n\n                var binder = new PullSymbolBinder(this.compilationSettings, this.semanticInfoChain);\n                binder.setUnit(this.unitPath);\n                binder.bindFunctionExpressionToPullSymbol(functionDecl);\n\n                funcDeclSymbol = <PullFunctionTypeSymbol>functionDecl.getSymbol();\n            }\n\n            var signature = funcDeclSymbol.getType().getCallSignatures()[0];\n\n            // link parameters and resolve their annotations\n            if (funcDeclAST.arguments) {\n\n                var contextParams: PullSymbol[] = [];\n                var contextParam: PullSymbol = null;\n\n                if (assigningFunctionSignature) {\n                    contextParams = assigningFunctionSignature.getParameters();\n                }\n\n                for (i = 0; i < funcDeclAST.arguments.members.length; i++) {\n\n                    if (i < contextParams.length) {\n                        contextParam = contextParams[i];\n                    }\n\n                    this.resolveFunctionExpressionParameter(<ArgDecl>funcDeclAST.arguments.members[i], contextParam, enclosingDecl, context);\n                }\n            }\n\n            // resolve the return type annotation\n            if (funcDeclAST.returnTypeAnnotation) {\n                var returnTypeRef = <TypeReference>funcDeclAST.returnTypeAnnotation;\n                var returnTypeSymbol = this.resolveTypeReference(returnTypeRef, enclosingDecl, context);\n\n                signature.setReturnType(returnTypeSymbol);\n\n            }\n            else {\n                if (assigningFunctionSignature) {\n                    var returnType = assigningFunctionSignature.getReturnType();\n\n                    if (returnType) {\n                        context.pushContextualType(returnType, context.inProvisionalResolution(), null);\n                        //signature.setReturnType(returnType);\n                        this.resolveFunctionBodyReturnTypes(funcDeclAST, signature, true, functionDecl, context);\n                        context.popContextualType();\n                    }\n                    else {\n                        signature.setReturnType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n                }\n                else {\n                    this.resolveFunctionBodyReturnTypes(funcDeclAST, signature, false, functionDecl, context);\n                }\n            }\n\n            // set contextual type link\n            if (assigningFunctionTypeSymbol) {\n                funcDeclSymbol.addOutgoingLink(assigningFunctionTypeSymbol, SymbolLinkKind.ContextuallyTypedAs);\n            }\n\n            funcDeclSymbol.setResolved();\n\n            return funcDeclSymbol;\n        }\n\n        static setSelfReferenceOnDecl(pullDecl: PullDecl) {\n            pullDecl.setFlags(pullDecl.getFlags() | PullElementFlags.MustCaptureThis);\n            return true;\n        }\n\n        // PULLTODO: Optimization: cache this for a given decl path\n        public resolveThisExpression(ast: AST, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullTypeSymbol {\n            if (!enclosingDecl) {\n                return this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            var previousResolutionSymbol = this.getSymbolForAST(ast, context);\n\n            if (previousResolutionSymbol) {\n                //CompilerDiagnostics.Alert(\"Call get hit\");\n                return <PullTypeSymbol>previousResolutionSymbol;\n            }    \n\n            var enclosingDeclKind = enclosingDecl.getKind();\n            var diagnostic: PullDiagnostic = null;\n\n            if (enclosingDeclKind == PullElementKind.Container) { // Dynamic modules are ok, though\n                diagnostic = new PullDiagnostic(ast.minChar, ast.getLength(), this.currentUnit.getPath(), \"\'this\' may not be referenced within module bodies\");\n                return this.getNewErrorTypeSymbol(diagnostic);\n\n            }\n            else if (!(enclosingDeclKind & (PullElementKind.SomeFunction | PullElementKind.Script))) {\n                diagnostic = new PullDiagnostic(ast.minChar, ast.getLength(), this.currentUnit.getPath(), \"Keyword \'this\' cannot be referenced in initializers in a class body, or in super constructor calls\");\n                return this.getNewErrorTypeSymbol(diagnostic);\n            }\n\n            var declPath: PullDecl[] = this.getPathToDecl(enclosingDecl);\n            var decl: PullDecl;\n            var classSymbol: PullClassTypeSymbol;\n\n            // work back up the decl path, until you can find a class\n            // PULLTODO: Obviously not completely correct, but this sufficiently unblocks testing of the pull model\n            if (declPath.length) {\n                var isFatArrowFunction = declPath[declPath.length - 1].getKind() == PullElementKind.FunctionExpression && (declPath[declPath.length - 1].getFlags() & PullElementFlags.FatArrow);\n                var hasSetSelfReference = !isFatArrowFunction;\n                var firstFncDecl: PullDecl = null;\n                var i = 0;\n                var declKind: PullElementKind;\n                var declFlags: PullElementFlags;\n\n                if (!hasSetSelfReference) {\n                    for (i = declPath.length - 2; i >= 0; i--) {\n                        decl = declPath[i];\n                        declKind = decl.getKind();\n\n                        if (declKind == PullElementKind.Function || declKind == PullElementKind.Method ||\n                            declKind == PullElementKind.ConstructorMethod || declKind == PullElementKind.GetAccessor ||\n                            declKind == PullElementKind.SetAccessor) {\n                            hasSetSelfReference = PullTypeResolver.setSelfReferenceOnDecl(decl);\n                        }\n                        else if (declKind == PullElementKind.FunctionExpression) {\n                            if (!(decl.getFlags() & PullElementFlags.FatArrow)) {\n                                hasSetSelfReference = PullTypeResolver.setSelfReferenceOnDecl(decl);\n                            }\n                            else if (decl.getFlags() & PullElementFlags.MustCaptureThis) {\n                                firstFncDecl = null;\n                                break;\n                            }\n                            else if (!firstFncDecl) {\n                                firstFncDecl = decl;\n                            }\n                        }\n                        else {\n                            break;\n                        }\n                    }\n\n                    if (!hasSetSelfReference && firstFncDecl) {\n                        hasSetSelfReference = PullTypeResolver.setSelfReferenceOnDecl(firstFncDecl);\n                    }\n                }\n\n                var hadFatArrow = false;\n\n                for (i = declPath.length - 1; i >= 0; i--) {\n                    decl = declPath[i];\n                    declKind = decl.getKind();\n                    declFlags = decl.getFlags();\n\n                    if (declFlags & PullElementFlags.Static) {\n                        this.setSymbolForAST(ast, this.semanticInfoChain.anyTypeSymbol, context);\n                        return this.semanticInfoChain.anyTypeSymbol;\n                    }\n\n                    if (declKind == PullElementKind.FunctionExpression) {\n                        if (!(declFlags & PullElementFlags.FatArrow) && !hadFatArrow) {\n                            this.setSymbolForAST(ast, this.semanticInfoChain.anyTypeSymbol, context);\n                            return this.semanticInfoChain.anyTypeSymbol;\n                        }\n                        else {\n                            hadFatArrow = true;\n                        }\n                    }\n\n                    if (declKind == PullElementKind.Function) {\n                        this.setSymbolForAST(ast, this.semanticInfoChain.anyTypeSymbol, context);\n                        return this.semanticInfoChain.anyTypeSymbol;\n                    }\n\n                    if (declKind == PullElementKind.Class) {\n                        classSymbol = <PullClassTypeSymbol>decl.getSymbol();\n\n                        if (!hasSetSelfReference) {\n                            hasSetSelfReference = PullTypeResolver.setSelfReferenceOnDecl(decl);\n                        }\n                        this.setSymbolForAST(ast, classSymbol, context);\n                        return classSymbol;\n                    }\n\n                    if (!hasSetSelfReference &&\n                        (declKind == PullElementKind.Container ||\n                        declKind == PullElementKind.DynamicModule ||\n                        declKind == PullElementKind.Script)) {\n                        hasSetSelfReference = PullTypeResolver.setSelfReferenceOnDecl(decl);\n                        break;\n                    }\n                }\n            }\n            this.setSymbolForAST(ast, this.semanticInfoChain.anyTypeSymbol, context);\n            return this.semanticInfoChain.anyTypeSymbol;\n        }\n\n        // PULLTODO: Optimization: cache this for a given decl path\n        public resolveSuperExpression(ast: AST, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n            if (!enclosingDecl) {\n                return this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            var declPath: PullDecl[] = enclosingDecl !== null ? this.getPathToDecl(enclosingDecl) : [];\n            var decl: PullDecl;\n            var declFlags: PullElementFlags;\n            var classSymbol: PullClassTypeSymbol = null;\n\n            // work back up the decl path, until you can find a class\n            if (declPath.length) {\n                for (var i = declPath.length - 1; i >= 0; i--) {\n                    decl = declPath[i];\n                    declFlags = decl.getFlags();\n\n                    if (decl.getKind() == PullElementKind.FunctionExpression &&\n                        !(declFlags & PullElementFlags.FatArrow)) {\n\n                        break;\n                    }\n                    else if (declFlags & PullElementFlags.Static) {\n                        break;\n                    }\n                    else if (decl.getKind() == PullElementKind.Class) {\n                        classSymbol = <PullClassTypeSymbol>decl.getSymbol();\n\n                        break;\n                    }\n                }\n            }\n\n            if (classSymbol) {\n                var parents = classSymbol.getExtendedTypes();\n\n                if (parents.length) {\n                    return parents[0];\n                }\n            }\n\n            return this.semanticInfoChain.anyTypeSymbol;\n        }\n\n        // if there\'s no type annotation on the assigning AST, we need to create a type from each binary expression\n        // in the object literal\n        public resolveObjectLiteralExpression(expressionAST: AST, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            var previousResolutionSymbol = this.getSymbolForAST(expressionAST, context);\n\n            if (previousResolutionSymbol) {\n                //CompilerDiagnostics.Alert(\"Call get hit\");\n                return <PullTypeSymbol>previousResolutionSymbol;\n            }   \n\n            var typeSymbol: PullTypeSymbol = <PullTypeSymbol>this.getSymbolForAST(expressionAST, context);\n            var span: TextSpan;\n\n            if (typeSymbol && typeSymbol.isResolved()) {\n                return typeSymbol.getType();\n            }\n\n            // PULLTODO: Create a decl for the object literal\n\n            // walk the members of the object literal,\n            // create fields for each based on the value assigned in\n            var objectLitAST = <UnaryExpression>expressionAST;\n\n            span = TextSpan.fromBounds(objectLitAST.minChar, objectLitAST.limChar);\n\n            var objectLitDecl = new PullDecl(\"\", PullElementKind.ObjectLiteral, PullElementFlags.None, span, this.unitPath);\n\n            if (enclosingDecl) {\n                objectLitDecl.setParentDecl(enclosingDecl);\n            }\n\n            this.currentUnit.setDeclForAST(objectLitAST, objectLitDecl);\n            this.currentUnit.setASTForDecl(objectLitDecl, objectLitAST);\n\n            typeSymbol = new PullTypeSymbol(\"\", PullElementKind.Interface);\n            typeSymbol.addDeclaration(objectLitDecl);\n            objectLitDecl.setSymbol(typeSymbol);\n\n            var memberDecls = <ASTList>objectLitAST.operand;\n\n            var contextualType: PullTypeSymbol = null;\n\n            if (isTypedAssignment) {\n                contextualType = context.getContextualType();\n\n                this.resolveDeclaredSymbol(contextualType, enclosingDecl, context);\n            }\n\n            if (memberDecls) {\n                var binex: BinaryExpression;\n                var id: AST;\n                var text: string;\n                var idText: string;\n                var memberSymbol: PullSymbol;\n                var memberExprType: PullSymbol;\n                var assigningSymbol: PullSymbol = null;\n                var acceptedContextualType = false;\n\n                for (var i = 0, len = memberDecls.members.length; i < len; i++) {\n                    binex = <BinaryExpression>memberDecls.members[i];\n\n                    id = binex.operand1;\n\n                    if (id.nodeType == NodeType.Name) {\n                        text = (<Identifier>id).text;\n                    }\n                    else if (id.nodeType == NodeType.StringLiteral) {\n                        idText = (<StringLiteral>id).text;\n                        text = idText.substring(1, idText.length - 1);\n                    }\n                    else {\n                        return this.semanticInfoChain.anyTypeSymbol;\n                    }\n\n                    // PULLTODO: Collect these at decl collection time, add them to the var decl\n                    span = TextSpan.fromBounds(binex.minChar, binex.limChar);\n\n                    var decl = new PullDecl(text, PullElementKind.Property, PullElementFlags.Public, span, this.unitPath);\n\n                    objectLitDecl.addChildDecl(decl);\n                    decl.setParentDecl(objectLitDecl);\n\n                    this.semanticInfoChain.getUnit(this.unitPath).setDeclForAST(binex, decl);\n                    this.semanticInfoChain.getUnit(this.unitPath).setASTForDecl(decl, binex);\n\n                    memberSymbol = new PullSymbol(text, PullElementKind.Property);\n\n                    memberSymbol.addDeclaration(decl);\n                    decl.setSymbol(memberSymbol);\n\n                    if (contextualType) {\n                        assigningSymbol = contextualType.findMember(text);\n\n                        if (assigningSymbol) {\n\n                            this.resolveDeclaredSymbol(assigningSymbol, enclosingDecl, context);\n\n                            context.pushContextualType(assigningSymbol.getType(), context.inProvisionalResolution(), null);\n\n                            acceptedContextualType = true;\n                        }\n                    }\n\n                    // if operand 2 is a getter or a setter, we need to resolve it properly\n                    if (binex.operand2.nodeType == NodeType.FuncDecl) {\n                        var funcDeclAST = <FuncDecl>binex.operand2;\n\n                        if (funcDeclAST.isAccessor()) {\n                            var semanticInfo = this.semanticInfoChain.getUnit(this.unitPath);\n                            var declCollectionContext = new DeclCollectionContext(semanticInfo);\n\n                            declCollectionContext.scriptName = this.unitPath;\n\n                            declCollectionContext.pushParent(objectLitDecl);\n\n                            getAstWalkerFactory().walk(funcDeclAST, preCollectDecls, postCollectDecls, null, declCollectionContext);\n\n                            var functionDecl = this.getDeclForAST(funcDeclAST);\n\n                            var binder = new PullSymbolBinder(this.compilationSettings, this.semanticInfoChain);\n                            binder.setUnit(this.unitPath);\n                            binder.pushParent(typeSymbol, objectLitDecl);\n\n                            if (funcDeclAST.isGetAccessor()) {\n                                binder.bindGetAccessorDeclarationToPullSymbol(functionDecl);\n                            }\n                            else {\n                                binder.bindSetAccessorDeclarationToPullSymbol(functionDecl);\n                            }\n                        }\n                    }\n\n                    memberExprType = this.resolveStatementOrExpression(binex.operand2, assigningSymbol != null, enclosingDecl, context);\n\n                    if (acceptedContextualType) {\n                        context.popContextualType();\n                        acceptedContextualType = false;\n                    }\n\n                    context.setTypeInContext(memberSymbol, memberExprType.getType());\n\n                    memberSymbol.setResolved();\n\n                    this.setSymbolForAST(binex.operand1, memberSymbol, context);\n\n                    typeSymbol.addMember(memberSymbol, SymbolLinkKind.PublicMember);\n                }\n            }\n\n            typeSymbol.setResolved();\n\n            this.setSymbolForAST(expressionAST, typeSymbol, context);\n\n            return typeSymbol;\n        }\n\n        public resolveArrayLiteralExpression(expressionAST: AST, isTypedAssignment, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            var previousResolutionSymbol = this.getSymbolForAST(expressionAST, context);\n\n            if (previousResolutionSymbol) {\n                return <PullTypeSymbol>previousResolutionSymbol;\n            }   \n\n            var arrayLit = <UnaryExpression>expressionAST;\n\n            var elements = <ASTList>arrayLit.operand;\n            var elementType = this.semanticInfoChain.anyTypeSymbol;\n            var elementTypes: PullTypeSymbol[] = [];\n            var targetElementType: PullTypeSymbol = null;\n            var comparisonInfo = new TypeComparisonInfo();\n            comparisonInfo.onlyCaptureFirstError = true;\n\n            // if the target type is an array type, extract the element type\n            if (isTypedAssignment) {\n                var contextualType = context.getContextualType();\n\n                this.resolveDeclaredSymbol(contextualType, enclosingDecl, context);\n\n                if (contextualType.isArray()) {\n                    contextualType = contextualType.getElementType();\n                }\n\n                context.pushContextualType(contextualType, context.inProvisionalResolution(), null);\n            }\n\n            if (elements) {\n\n                for (var i = 0; i < elements.members.length; i++) {\n                    elementTypes[elementTypes.length] = this.resolveStatementOrExpression(elements.members[i], isTypedAssignment, enclosingDecl, context).getType();\n                }\n\n                if (isTypedAssignment) {\n                    context.popContextualType();\n                }\n\n                if (elementTypes.length) {\n                    elementType = elementTypes[0];\n                }\n\n                var collection: IPullTypeCollection = {\n                    getLength: () => { return elements.members.length; },\n                    setTypeAtIndex: (index: number, type: PullTypeSymbol) => { elementTypes[index] = type; },\n                    getTypeAtIndex: (index: number) => { return elementTypes[index]; }\n                }\n\n                elementType = this.findBestCommonType(elementType, targetElementType, collection, false, context, comparisonInfo);\n\n                // if the array type is the undefined type, we should widen it to any\n                // if it\'s of the null type, only widen it if it\'s not in a nested array element, so as not to \n                // short-circuit any checks for the best common type\n                if (elementType == this.semanticInfoChain.undefinedTypeSymbol || elementType == this.semanticInfoChain.nullTypeSymbol) {\n                    elementType = this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n            if (!elementType) {\n                var diagnostic = context.postError(expressionAST.minChar, expressionAST.getLength(), this.unitPath, \"Incompatible types in array literal expression\", enclosingDecl);\n\n                elementType = this.getNewErrorTypeSymbol(diagnostic);\n            }\n            else if (targetElementType) {\n                // for the case of zero-length \'any\' arrays, we still want to set the contextual type, if\n                // need be\n                if (this.sourceIsAssignableToTarget(elementType, targetElementType, context)) {\n                    elementType = targetElementType;\n                }\n            }\n\n            var arraySymbol = elementType.getArrayType();\n\n            // ...But in case we haven\'t...\n            if (!arraySymbol) {\n\n                if (!this.cachedArrayInterfaceType) {\n                    this.cachedArrayInterfaceType = <PullTypeSymbol>this.getSymbolFromDeclPath(\"Array\", this.getPathToDecl(enclosingDecl), PullElementKind.Interface);\n                }\n\n                if (this.cachedArrayInterfaceType && !this.cachedArrayInterfaceType.isResolved()) {\n                    this.resolveDeclaredSymbol(this.cachedArrayInterfaceType, enclosingDecl, context);\n                }\n\n                arraySymbol = specializeToArrayType(this.semanticInfoChain.elementTypeSymbol, elementType, this, context);\n\n                if (!arraySymbol) {\n                    arraySymbol = this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n\n            this.setSymbolForAST(expressionAST, arraySymbol, context);\n\n            return arraySymbol;\n        }\n\n        public resolveIndexExpression(expressionAST: AST, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            var previousResolutionSymbol = this.getSymbolForAST(expressionAST, context);\n\n            if (previousResolutionSymbol) {\n                return <PullTypeSymbol>previousResolutionSymbol;\n            }   \n\n            var indexType = <PullTypeSymbol>this.resolveStatementOrExpression((<BinaryExpression>expressionAST).operand1, isTypedAssignment, enclosingDecl, context).getType();\n            var elementType = indexType.getElementType();\n\n            if (elementType) {\n                this.setSymbolForAST(expressionAST, elementType, context);\n                return elementType;\n            }\n\n            return this.semanticInfoChain.anyTypeSymbol;\n        }\n\n        public resolveBitwiseOperator(expressionAST: AST, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            var binex = <BinaryExpression>expressionAST;\n\n            var leftType = <PullTypeSymbol>this.resolveStatementOrExpression(binex.operand1, isTypedAssignment, enclosingDecl, context).getType();\n            var rightType = <PullTypeSymbol>this.resolveStatementOrExpression(binex.operand2, isTypedAssignment, enclosingDecl, context).getType();\n\n            if (this.sourceIsSubtypeOfTarget(leftType, this.semanticInfoChain.numberTypeSymbol, context) &&\n                this.sourceIsSubtypeOfTarget(rightType, this.semanticInfoChain.numberTypeSymbol, context)) {\n\n                return this.semanticInfoChain.numberTypeSymbol;\n            }\n            else if ((leftType == this.semanticInfoChain.boolTypeSymbol) &&\n                     (rightType == this.semanticInfoChain.boolTypeSymbol)) {\n\n                return this.semanticInfoChain.boolTypeSymbol;\n            }\n            else if (leftType == this.semanticInfoChain.anyTypeSymbol) {\n                if ((rightType == this.semanticInfoChain.anyTypeSymbol) ||\n                    (rightType == this.semanticInfoChain.numberTypeSymbol) ||\n                    (rightType == this.semanticInfoChain.boolTypeSymbol)) {\n\n                    return this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n            else if (rightType == this.semanticInfoChain.anyTypeSymbol) {\n                if ((leftType == this.semanticInfoChain.numberTypeSymbol) ||\n                    (leftType == this.semanticInfoChain.boolTypeSymbol)) {\n\n                    return this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n\n            return this.semanticInfoChain.anyTypeSymbol;\n        }\n\n        public resolveArithmeticExpression(expressionAST: AST, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n            var binex = <BinaryExpression>expressionAST;\n\n            var leftType = <PullTypeSymbol>this.resolveStatementOrExpression(binex.operand1, isTypedAssignment, enclosingDecl, context).getType();\n            var rightType = <PullTypeSymbol>this.resolveStatementOrExpression(binex.operand2, isTypedAssignment, enclosingDecl, context).getType();\n\n            // PULLREVIEW: Eh?  I\'ve preserved the logic from the current implementation, but it could use cleaning up\n            if (this.isNullOrUndefinedType(leftType)) {\n                leftType = rightType;\n            }\n            if (this.isNullOrUndefinedType(rightType)) {\n                rightType = leftType;\n            }\n\n            leftType = this.widenType(leftType);\n            rightType = this.widenType(rightType);\n\n            if (expressionAST.nodeType == NodeType.Add || expressionAST.nodeType == NodeType.AsgAdd) {\n                if (leftType == this.semanticInfoChain.stringTypeSymbol || rightType == this.semanticInfoChain.stringTypeSymbol) {\n                    return this.semanticInfoChain.stringTypeSymbol;\n                }\n                else if (leftType == this.semanticInfoChain.numberTypeSymbol && rightType == this.semanticInfoChain.numberTypeSymbol) {\n                    return this.semanticInfoChain.numberTypeSymbol;\n                }\n                else if (this.sourceIsSubtypeOfTarget(leftType, this.semanticInfoChain.numberTypeSymbol, context) && this.sourceIsSubtypeOfTarget(rightType, this.semanticInfoChain.numberTypeSymbol, context)) {\n                    return this.semanticInfoChain.numberTypeSymbol;\n                }\n                else {\n                    // could be an error\n                    return this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n            else {\n                if (leftType == this.semanticInfoChain.numberTypeSymbol && rightType == this.semanticInfoChain.numberTypeSymbol) {\n                    return this.semanticInfoChain.numberTypeSymbol;\n                }\n                else if (this.sourceIsSubtypeOfTarget(leftType, this.semanticInfoChain.numberTypeSymbol, context) && this.sourceIsSubtypeOfTarget(rightType, this.semanticInfoChain.numberTypeSymbol, context)) {\n                    return this.semanticInfoChain.numberTypeSymbol;\n                }\n                else if (leftType == this.semanticInfoChain.anyTypeSymbol || rightType == this.semanticInfoChain.anyTypeSymbol) {\n                    return this.semanticInfoChain.numberTypeSymbol;\n                }\n                else {\n                    // error\n                    return this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n        }\n\n        public resolveLogicalOrExpression(expressionAST: AST, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n            var binex = <BinaryExpression>expressionAST;\n\n            var leftType = <PullTypeSymbol>this.resolveStatementOrExpression(binex.operand1, isTypedAssignment, enclosingDecl, context).getType();\n            var rightType = <PullTypeSymbol>this.resolveStatementOrExpression(binex.operand2, isTypedAssignment, enclosingDecl, context).getType();\n\n            if (leftType == this.semanticInfoChain.anyTypeSymbol || rightType == this.semanticInfoChain.anyTypeSymbol) {\n                return this.semanticInfoChain.anyTypeSymbol;\n            }\n            else if (leftType == this.semanticInfoChain.boolTypeSymbol) {\n                if (rightType == this.semanticInfoChain.boolTypeSymbol) {\n                    return this.semanticInfoChain.boolTypeSymbol;\n                }\n                else {\n                    return this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n            else if (leftType == this.semanticInfoChain.numberTypeSymbol) {\n                if (rightType == this.semanticInfoChain.numberTypeSymbol) {\n                    return this.semanticInfoChain.numberTypeSymbol;\n                }\n                else {\n                    return this.semanticInfoChain.anyTypeSymbol\n                }\n            }\n            else if (leftType == this.semanticInfoChain.stringTypeSymbol) {\n                if (rightType == this.semanticInfoChain.stringTypeSymbol) {\n                    return this.semanticInfoChain.stringTypeSymbol;\n                }\n                else {\n                    return this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n            else if (this.sourceIsSubtypeOfTarget(leftType, rightType, context)) {\n                return rightType;\n            }\n            else if (this.sourceIsSubtypeOfTarget(rightType, leftType, context)) {\n                return leftType;\n            }\n\n            return this.semanticInfoChain.anyTypeSymbol;\n        }\n\n        public resolveLogicalAndExpression(expressionAST: AST, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n            var binex = <BinaryExpression>expressionAST;\n\n            var leftType = <PullTypeSymbol>this.resolveStatementOrExpression(binex.operand1, isTypedAssignment, enclosingDecl, context).getType();\n            var rightType = <PullTypeSymbol>this.resolveStatementOrExpression(binex.operand2, isTypedAssignment, enclosingDecl, context).getType();\n\n            return rightType;\n        }\n\n        public resolveConditionalExpression(trinex: ConditionalExpression, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n            var previousResolutionSymbol = this.getSymbolForAST(trinex, context);\n\n            if (previousResolutionSymbol) {\n                return <PullTypeSymbol>previousResolutionSymbol;\n            }   \n\n            var condType = this.resolveAST(trinex.operand1, false, enclosingDecl, context).getType();\n            var leftType = this.resolveAST(trinex.operand2, false, enclosingDecl, context).getType();\n            var rightType = this.resolveAST(trinex.operand3, false, enclosingDecl, context).getType();\n\n            if (this.typesAreIdentical(leftType, rightType)) {\n                return leftType;\n            }\n\n            var collection: IPullTypeCollection = {\n                getLength: () => { return 2; },\n                setTypeAtIndex: (index: number, type: PullTypeSymbol) => { }, // no contextual typing here, so no need to do anything\n                getTypeAtIndex: (index: number) => { return rightType; } // we only want the \"second\" type - the \"first\" is skipped\n            }\n\n            var bct = this.findBestCommonType(leftType, null, collection, false, context);\n\n            if (bct) {\n                this.setSymbolForAST(trinex, bct, context);\n                return bct;\n            }\n\n            var diagnostic = context.postError(trinex.minChar, trinex.getLength(), this.getUnitPath(), \"Conditional expression types do not agree\", enclosingDecl);\n\n            return this.getNewErrorTypeSymbol(diagnostic);\n        }\n\n        public resolveParenthesizedExpression(ast: ParenthesizedExpression, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n            return this.resolveAST(ast.expression, false, enclosingDecl, context);\n        }\n\n        public resolveExpressionStatement(ast: ExpressionStatement, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext) {\n            return this.resolveAST(ast.expression, isTypedAssignment, enclosingDecl, context);\n        }\n\n        public resolveCallExpression(callEx: CallExpression, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext, additionalResults?: PullAdditionalCallResolutionData): PullSymbol {\n\n            var previousResolutionSymbol = this.getSymbolForAST(callEx, context);\n\n            if (previousResolutionSymbol) {\n                //CompilerDiagnostics.Alert(\"Call get hit\");\n                return previousResolutionSymbol;\n            }\n\n            // resolve the target\n            var targetSymbol = this.resolveStatementOrExpression(callEx.target, isTypedAssignment, enclosingDecl, context).getType();\n\n            if (targetSymbol == this.semanticInfoChain.anyTypeSymbol) {\n                this.setSymbolForAST(callEx, this.semanticInfoChain.anyTypeSymbol, context);\n                return targetSymbol;\n            }\n\n            var isSuperCall = false;\n            var diagnostic: PullDiagnostic;\n\n            if (callEx.target.nodeType == NodeType.SuperExpression) {\n                isSuperCall = true;\n\n                if (targetSymbol.isClass()) { \n                    targetSymbol = (<PullClassTypeSymbol>targetSymbol).getConstructorMethod().getType();\n                }\n                else {\n                    diagnostic = context.postError(callEx.minChar, callEx.getLength(), this.unitPath, \"Invalid super call on non-class type \'\"+ targetSymbol.toString() + \"\'\", enclosingDecl);\n                    return this.getNewErrorTypeSymbol(diagnostic);                    \n                }\n            }\n\n            var signatures = isSuperCall ? (<PullFunctionTypeSymbol>targetSymbol).getConstructSignatures() : (<PullFunctionTypeSymbol>targetSymbol).getCallSignatures();\n\n            var typeArgs: PullTypeSymbol[] = null;\n            var typeReplacementMap: any = null;\n            var i = 0;\n\n            // resolve the type arguments, specializing if necessary\n            if (callEx.typeArguments) {\n                // specialize the type arguments\n                typeArgs = [];\n\n                var typeArg: PullTypeSymbol = null;\n\n                if (callEx.typeArguments && callEx.typeArguments.members.length) {\n                    for (i = 0; i < callEx.typeArguments.members.length; i++) {\n                        typeArg = this.resolveTypeReference(<TypeReference>callEx.typeArguments.members[i], enclosingDecl, context);\n                        typeArgs[i] = context.findSpecializationForType(typeArg);\n                    }\n                }\n            }\n\n            // next, walk the available signatures\n            // if any are generic, and we don\'t have type arguments, try to infer\n            // otherwise, try to specialize to the type arguments above\n            if (targetSymbol.isGeneric()) {\n\n                var resolvedSignatures: PullSignatureSymbol[] = [];\n                var inferredTypeArgs: PullTypeSymbol[];\n                var specializedSignature: PullSignatureSymbol;\n                var typeParameters: PullTypeParameterSymbol[];\n                var typeConstraint: PullTypeSymbol = null;\n\n                for (i = 0; i < signatures.length; i++) {\n                    typeParameters = signatures[i].getTypeParameters();\n                    \n                    if (signatures[i].isGeneric() && typeParameters.length) {\n                        if (typeArgs) {\n                            inferredTypeArgs = typeArgs;\n                        }\n                        else if (callEx.arguments) {\n                            inferredTypeArgs = this.inferArgumentTypesForSignature(signatures[i], callEx.arguments, new TypeComparisonInfo(), enclosingDecl, context);\n                        }\n\n                        // if we could infer Args, or we have type arguments, then attempt to specialize the signature\n                        if (inferredTypeArgs) {\n\n                            if (inferredTypeArgs.length < typeParameters.length) {\n                                continue;\n                            }\n\n                            typeReplacementMap = {};\n\n                            for (var j = 0; j < typeParameters.length; j++) {\n                                typeReplacementMap[typeParameters[j].getSymbolID().toString()] = inferredTypeArgs[j];\n\n                                typeConstraint = typeParameters[j].getConstraint();\n\n                                // test specialization type for assignment compatibility with the constraint\n                                if (typeConstraint) {\n                                    if (typeConstraint.isTypeParameter()) {\n                                        context.pushTypeSpecializationCache(typeReplacementMap);\n                                        typeConstraint = specializeType(typeConstraint, inferredTypeArgs, this, enclosingDecl, context);  //<PullTypeSymbol>this.resolveDeclaredSymbol(typeConstraint, enclosingDecl, context);\n                                        context.popTypeSpecializationCache();\n                                    }\n                                    if (!this.sourceIsAssignableToTarget(inferredTypeArgs[j], typeConstraint, context)) {\n                                        context.postError(callEx.target.minChar, callEx.target.getLength(), this.getUnitPath(), \"Type \'\" + inferredTypeArgs[j].toString(true) + \"\' does not satisfy the constraint \'\" + typeConstraint.toString(true) + \"\' for type parameter \'\" + typeParameters[j].toString(true) + \"\'\", enclosingDecl);\n                                    }\n                                }\n                            }\n\n                            specializedSignature = specializeSignature(signatures[i], false, typeReplacementMap, inferredTypeArgs, this, enclosingDecl, context);\n\n                            if (specializedSignature) {\n                                resolvedSignatures[resolvedSignatures.length] = specializedSignature;\n                            }\n                        }\n                    }\n                    else {\n                        resolvedSignatures[resolvedSignatures.length] = signatures[i];\n                    }\n                }\n                // PULLTODO: Try to avoid copying here...\n                signatures = resolvedSignatures;\n            }\n\n            // the target should be a function\n            //if (!targetSymbol.isType()) {\n            //    this.log(\"Attempting to call a non-function symbol\");\n            //    return this.semanticInfoChain.anyTypeSymbol;\n            //}\n\n            if (!signatures.length) {\n\n                // if there are no call signatures, but the target is a subtype of \'Function\', return \'any\'\n                if (this.cachedFunctionInterfaceType && this.sourceIsSubtypeOfTarget(targetSymbol, this.cachedFunctionInterfaceType, context)) {\n                    return this.semanticInfoChain.anyTypeSymbol;\n                }\n\n                diagnostic = context.postError(callEx.minChar, callEx.getLength(), this.unitPath, \"Attempting to call on a type with no call signatures\", enclosingDecl);\n                return this.getNewErrorTypeSymbol(diagnostic);\n            }\n\n            var signature = this.resolveOverloads(callEx, signatures, enclosingDecl, context);\n\n            // Store any additional resolution results if needed before we return\n            if (additionalResults) {\n                additionalResults.targetSymbol = targetSymbol;\n                additionalResults.resolvedSignatures = signatures;\n                additionalResults.candidateSignature = signature;\n            }\n\n            if (!signature) {\n                diagnostic = context.postError(callEx.minChar, callEx.getLength(), this.unitPath, \"Could not select overload for call expression\", enclosingDecl);\n                return this.getNewErrorTypeSymbol(diagnostic);\n            }\n\n            var returnType = signature.getReturnType();\n\n            // contextually type arguments\n            if (callEx.arguments) {\n                var len = callEx.arguments.members.length;\n                var params = signature.getParameters();\n                var contextualType: PullTypeSymbol = null;\n                var signatureDecl = signature.getDeclarations()[0];\n                    \n                for (i = 0; i < len; i++) {\n\n                    if (params.length && i < params.length) {\n                        if (typeReplacementMap) {\n                            context.pushTypeSpecializationCache(typeReplacementMap);\n                        }\n                        this.resolveDeclaredSymbol(params[i], signatureDecl, context);\n                        if (typeReplacementMap) {\n                            context.popTypeSpecializationCache();\n                        }\n                        contextualType = params[i].getType();\n                    }\n                    else if (params.length) {\n                        contextualType = params[params.length - 1].getType();\n                        if (contextualType.isArray()) {\n                            contextualType = contextualType.getElementType();\n                        }\n                    }\n\n                    if (contextualType) {\n                        context.pushContextualType(contextualType, context.inProvisionalResolution(), null);\n                    }\n\n                    this.resolveStatementOrExpression(callEx.arguments.members[i], contextualType != null, enclosingDecl, context);\n\n                    if (contextualType) {\n                        context.popContextualType();\n                        contextualType = null;\n                    }\n                }\n            }\n\n            if (!returnType) {\n                returnType = this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            this.setSymbolForAST(callEx, returnType, context);\n\n            return returnType;\n        }\n\n        public resolveNewExpression(callEx: CallExpression, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext, additionalResults?: PullAdditionalCallResolutionData): PullSymbol {\n\n            var previousResolutionSymbol = this.getSymbolForAST(callEx, context);\n\n            if (previousResolutionSymbol) {\n                //CompilerDiagnostics.Alert(\"New get hit\");\n                return previousResolutionSymbol;\n            }\n\n            var returnType: PullTypeSymbol = null;\n\n            // resolve the target\n            var targetSymbol = this.resolveStatementOrExpression(callEx.target, isTypedAssignment, enclosingDecl, context);\n\n            var targetTypeSymbol = targetSymbol.isType() ? <PullTypeSymbol>targetSymbol : targetSymbol.getType();\n\n            var i = 0;\n\n            // PULLREVIEW: In the case of a generic instantiation of a class type,\n            // we\'ll have gotten a \'GenericType\' node, which will be resolved as the class type and not\n            // the constructor type.  In this case, set the targetTypeSymbol to the constructor type\n            if (targetTypeSymbol.isClass()) {\n                targetTypeSymbol = (<PullClassTypeSymbol>targetTypeSymbol).getConstructorMethod().getType();\n            }\n\n            var constructSignatures = targetTypeSymbol.getConstructSignatures();\n\n            var typeArgs: PullTypeSymbol[] = null;\n            var typeReplacementMap: any = null;\n            var usedCallSignaturesInstead = false;\n\n            if (targetTypeSymbol == this.semanticInfoChain.anyTypeSymbol) {\n                this.setSymbolForAST(callEx, this.semanticInfoChain.anyTypeSymbol, context);\n                return this.semanticInfoChain.anyTypeSymbol;\n            }            \n\n            var diagnostic: PullDiagnostic;\n\n            if (!constructSignatures.length) {\n                constructSignatures = targetTypeSymbol.getCallSignatures();\n                usedCallSignaturesInstead = true;\n            }            \n\n            if (constructSignatures.length) {\n\n                // resolve the type arguments, specializing if necessary\n                if (callEx.typeArguments) {\n                    // specialize the type arguments\n                    typeArgs = [];\n\n                    var typeArg: PullTypeSymbol = null;\n\n                    if (callEx.typeArguments && callEx.typeArguments.members.length) {\n                        for (i = 0; i < callEx.typeArguments.members.length; i++) {\n                            typeArg = this.resolveTypeReference(<TypeReference>callEx.typeArguments.members[i], enclosingDecl, context);\n                            typeArgs[i] = context.findSpecializationForType(typeArg);\n                        }\n                    }\n                }\n\n                // next, walk the available signatures\n                // if any are generic, and we don\'t have type arguments, try to infer\n                // otherwise, try to specialize to the type arguments above\n                if (targetTypeSymbol.isGeneric()) {\n\n                    var resolvedSignatures: PullSignatureSymbol[] = [];\n                    var inferredTypeArgs: PullTypeSymbol[];\n                    var specializedSignature: PullSignatureSymbol;\n                    var typeParameters: PullTypeParameterSymbol[];\n                    var typeConstraint: PullTypeSymbol = null;\n\n                    for (i = 0; i < constructSignatures.length; i++) {\n                        if (constructSignatures[i].isGeneric()) {\n                            if (typeArgs) {\n                                inferredTypeArgs = typeArgs;\n                            }\n                            else if (callEx.arguments) {\n                                inferredTypeArgs = this.inferArgumentTypesForSignature(constructSignatures[i], callEx.arguments, new TypeComparisonInfo(), enclosingDecl, context);\n                            }\n\n                            // if we could infer Args, or we have type arguments, then attempt to specialize the signature\n                            if (inferredTypeArgs) {\n                                typeParameters = constructSignatures[i].getTypeParameters();\n\n                                if (inferredTypeArgs.length != typeParameters.length) {\n                                    continue;\n                                }\n\n                                typeReplacementMap = {};\n\n                                for (var j = 0; j < typeParameters.length; j++) {\n                                    typeReplacementMap[typeParameters[j].getSymbolID().toString()] = inferredTypeArgs[j];\n\n                                    typeConstraint = typeParameters[j].getConstraint();\n\n                                    // test specialization type for assignment compatibility with the constraint\n                                    if (typeConstraint) {\n                                        \n                                        if (typeConstraint.isTypeParameter()) {\n                                            context.pushTypeSpecializationCache(typeReplacementMap);\n                                            typeConstraint = specializeType(typeConstraint, inferredTypeArgs, this, enclosingDecl, context);  //<PullTypeSymbol>this.resolveDeclaredSymbol(typeConstraint, enclosingDecl, context);\n                                            context.popTypeSpecializationCache();\n                                        }\n\n                                        if (!this.sourceIsAssignableToTarget(inferredTypeArgs[j], typeConstraint, context)) {\n                                            context.postError(callEx.target.minChar, callEx.target.getLength(), this.getUnitPath(), \"Type \'\" + inferredTypeArgs[j].toString(true) + \"\' does not satisfy the constraint \'\" + typeConstraint.toString(true) + \"\' for type parameter \'\" + typeParameters[j].toString(true) + \"\'\", enclosingDecl);\n                                        }\n\n                                    }\n                                }\n\n                                specializedSignature = specializeSignature(constructSignatures[i], false, typeReplacementMap, inferredTypeArgs, this, enclosingDecl, context);\n\n                                if (specializedSignature) {\n                                    resolvedSignatures[resolvedSignatures.length] = specializedSignature;\n                                }\n                            }\n                        }\n                        else {\n                            resolvedSignatures[resolvedSignatures.length] = constructSignatures[i];\n                        }\n                    }\n                    // PULLTODO: Try to avoid copying here...\n                    constructSignatures = resolvedSignatures;\n                }\n\n                // the target should be a function\n                //if (!targetSymbol.isType()) {\n                //    this.log(\"Attempting to call a non-function symbol\");\n                //    return this.semanticInfoChain.anyTypeSymbol;\n                //}\n\n                var signature = this.resolveOverloads(callEx, constructSignatures, enclosingDecl, context);\n\n                // Store any additional resolution results if needed before we return\n                if (additionalResults) {\n                    additionalResults.targetSymbol = targetTypeSymbol;\n                    additionalResults.resolvedSignatures = constructSignatures;\n                    additionalResults.candidateSignature = signature;\n                }\n\n                // if we haven\'t been able to choose an overload, default to the first one\n                if (!signature) {\n                    //signature = constructSignatures[0];\n                    diagnostic = context.postError(callEx.minChar, callEx.getLength(), this.unitPath, \"Could not select overload for \'new\' expression\", enclosingDecl);\n                    return this.getNewErrorTypeSymbol(diagnostic);\n                }\n\n                returnType = signature.getReturnType();\n\n                // if it\'s a default constructor, and we have a type argument, we need to specialize\n                if (returnType && !signature.isGeneric() && returnType.isGeneric() && !returnType.getIsSpecialized()) {\n                    if (typeArgs.length) {\n                        returnType = specializeType(returnType, typeArgs, this, enclosingDecl, context, callEx);\n                    }\n                    else {\n                        returnType = this.specializeTypeToAny(returnType, enclosingDecl, context);\n                    }\n                }\n\n                if (usedCallSignaturesInstead) {\n                    if (returnType != this.semanticInfoChain.voidTypeSymbol) {\n                        diagnostic = context.postError(callEx.minChar, callEx.getLength(), this.unitPath, \"Call signatures used in a \'new\' expression must have a return type of \'void\'\", enclosingDecl);\n                        return this.getNewErrorTypeSymbol(diagnostic);                        \n                    }\n                }\n\n                if (!returnType) {\n                    returnType = signature.getReturnType();\n\n                    if (!returnType) {\n                        returnType = targetTypeSymbol;\n                    }\n                }\n\n                // contextually type arguments\n                if (callEx.arguments) {\n                    var len = callEx.arguments.members.length;\n                    var params = signature.getParameters();\n                    var contextualType: PullTypeSymbol = null;\n                    var signatureDecl = signature.getDeclarations()[0];\n\n                    for (i = 0; i < len; i++) {\n\n                        if (params.length && i < params.length) {\n                            if (typeReplacementMap) {\n                                context.pushTypeSpecializationCache(typeReplacementMap);\n                            }\n                            this.resolveDeclaredSymbol(params[i], signatureDecl, context);\n                            if (typeReplacementMap) {\n                                context.popTypeSpecializationCache();\n                            }\n                            contextualType = params[i].getType();\n                        }\n                        else if (params.length) {\n                            contextualType = params[params.length - 1].getType();\n                            if (contextualType.isArray()) {\n                                contextualType = contextualType.getElementType();\n                            }\n                        }\n\n                        if (contextualType) {\n                            context.pushContextualType(contextualType, context.inProvisionalResolution(), null);\n                        }\n\n                        this.resolveStatementOrExpression(callEx.arguments.members[i], contextualType != null, enclosingDecl, context);\n\n                        if (contextualType) {\n                            context.popContextualType();\n                            contextualType = null;\n                        }\n                    }\n                }\n\n                if (!returnType) {\n                    returnType = this.semanticInfoChain.anyTypeSymbol;\n                }\n\n                this.setSymbolForAST(callEx, returnType, context);\n\n                return returnType;\n            }\n            else if (targetTypeSymbol.isClass()) {\n\n                this.setSymbolForAST(callEx, returnType, context);\n\n                // implicit constructor\n                return returnType;\n            }\n\n            diagnostic = context.postError(callEx.minChar, callEx.getLength(), this.unitPath, \"Invalid \'new\' expression\", enclosingDecl);\n\n            return this.getNewErrorTypeSymbol(diagnostic);\n\n        }\n\n        public resolveTypeAssertionExpression(expressionAST: AST, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n\n            var assertionExpression = <UnaryExpression>expressionAST;\n            var typeReference = this.resolveTypeReference(<TypeReference>assertionExpression.castTerm, enclosingDecl, context);\n\n            // PULLTODO: We don\'t technically need to resolve the operand, since the type of the\n            // expression is the type of the cast term.  Still, it makes life a bit easier for the LS\n            if (context.resolveAggressively && assertionExpression.operand.nodeType !== NodeType.ParenthesizedExpression) {\n                context.pushContextualType(typeReference, context.inProvisionalResolution(), null);\n                this.resolveStatementOrExpression(assertionExpression.operand, true, enclosingDecl, context);\n                context.popContextualType();\n            }\n\n            return typeReference;\n        }\n\n        public resolveAssignmentStatement(statementAST: AST, isTypedAssignment: bool, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSymbol {\n            var previousResolutionSymbol = this.getSymbolForAST(statementAST, context);\n\n            if (previousResolutionSymbol) {\n                return <PullTypeSymbol>previousResolutionSymbol;\n            }\n\n            var binex = <BinaryExpression>statementAST;\n\n            var leftType = this.resolveStatementOrExpression(binex.operand1, isTypedAssignment, enclosingDecl, context).getType();\n\n            context.pushContextualType(leftType, context.inProvisionalResolution(), null);\n            this.resolveStatementOrExpression(binex.operand2, true, enclosingDecl, context);\n            context.popContextualType();\n\n            this.setSymbolForAST(statementAST, leftType, context);\n\n            return leftType;\n        }\n\n        public resolveBoundDecls(decl: PullDecl, context: PullTypeResolutionContext): void {\n\n            if (!decl) {\n                return;\n            }\n            \n            switch (decl.getKind()) {\n                case PullElementKind.Script:\n                    var childDecls = decl.getChildDecls();\n                    for (var i = 0; i < childDecls.length; i++) {\n                        this.resolveBoundDecls(childDecls[i], context);\n                    }\n                    break;\n                case PullElementKind.DynamicModule:\n                case PullElementKind.Container:\n                    var moduleDecl = <ModuleDeclaration>this.semanticInfoChain.getASTForDecl(decl, this.unitPath);\n                    this.resolveModuleDeclaration(moduleDecl, context);\n                    break;\n                case PullElementKind.Interface:\n                // case PullElementKind.ObjectType:\n                    var interfaceDecl = <TypeDeclaration>this.semanticInfoChain.getASTForDecl(decl, this.unitPath);\n                    this.resolveInterfaceDeclaration(interfaceDecl, context);\n                    break;\n                case PullElementKind.Class:\n                    var classDecl = <ClassDeclaration>this.semanticInfoChain.getASTForDecl(decl, this.unitPath);\n                    this.resolveClassDeclaration(classDecl, context);\n                    break;\n                case PullElementKind.Method:\n                case PullElementKind.Function:\n                    var funcDecl = <FuncDecl>this.semanticInfoChain.getASTForDecl(decl, this.unitPath);\n                    this.resolveFunctionDeclaration(funcDecl, context);\n                    break;\n                case PullElementKind.GetAccessor:\n                    funcDecl = <FuncDecl>this.semanticInfoChain.getASTForDecl(decl, this.unitPath);\n                    this.resolveGetAccessorDeclaration(funcDecl, context);\n                    break;\n                case PullElementKind.SetAccessor:\n                    funcDecl = <FuncDecl>this.semanticInfoChain.getASTForDecl(decl, this.unitPath);\n                    this.resolveSetAccessorDeclaration(funcDecl, context);\n                    break;\n                case PullElementKind.Property:\n                case PullElementKind.Variable:\n                case PullElementKind.Parameter:\n                    var varDecl = <BoundDecl>this.semanticInfoChain.getASTForDecl(decl, this.unitPath);\n\n                    // varDecl may be null if we\'re dealing with an implicit variable created for a class,\n                    // module or enum\n                    if (varDecl) {\n                        this.resolveVariableDeclaration(varDecl, context);\n                    }\n                    break;\n            }\n        }\n\n        // type relationships\n\n        public mergeOrdered(a: PullTypeSymbol, b: PullTypeSymbol, acceptVoid: bool, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo): PullTypeSymbol {\n            if ((a == this.semanticInfoChain.anyTypeSymbol) || (b == this.semanticInfoChain.anyTypeSymbol) || a.isError() || b.isError()) {\n                return this.semanticInfoChain.anyTypeSymbol;\n            }\n            else if (a == b) {\n                return a;\n            }\n            else if ((b == this.semanticInfoChain.nullTypeSymbol) && a != this.semanticInfoChain.nullTypeSymbol) {\n                return a;\n            }\n            else if ((a == this.semanticInfoChain.nullTypeSymbol) && (b != this.semanticInfoChain.nullTypeSymbol)) {\n                return b;\n            }\n            else if (acceptVoid && (b == this.semanticInfoChain.voidTypeSymbol) && a != this.semanticInfoChain.voidTypeSymbol) {\n                return a;\n            }\n            else if (acceptVoid && (a == this.semanticInfoChain.voidTypeSymbol) && (b != this.semanticInfoChain.voidTypeSymbol)) {\n                return b;\n            }\n            else if ((b == this.semanticInfoChain.undefinedTypeSymbol) && a != this.semanticInfoChain.voidTypeSymbol) {\n                return a;\n            }\n            else if ((a == this.semanticInfoChain.undefinedTypeSymbol) && (b != this.semanticInfoChain.undefinedTypeSymbol)) {\n                return b;\n            }\n            else if (a.isTypeParameter() && !b.isTypeParameter()) {\n                return b;\n            }\n            else if (!a.isTypeParameter() && b.isTypeParameter()) {\n                return a;\n            }\n            else if (a.isArray() && b.isArray()) {\n                if (a.getElementType() == b.getElementType()) {\n                    return a;\n                }\n                else {\n                    var mergedET = this.mergeOrdered(a.getElementType(), b.getElementType(), acceptVoid, context, comparisonInfo);\n                    var mergedArrayType = mergedET.getArrayType();\n\n                    if (!mergedArrayType) {\n                        mergedArrayType = specializeToArrayType(this.semanticInfoChain.elementTypeSymbol, mergedET, this, context);\n                    }\n\n                    return mergedArrayType;\n                }\n            }\n            else if (this.sourceIsSubtypeOfTarget(a, b, context, comparisonInfo)) {\n                return b;\n            }\n            else if (this.sourceIsSubtypeOfTarget(b, a, context, comparisonInfo)) {\n                return a;\n            }\n            else {\n                return this.semanticInfoChain.anyTypeSymbol;\n            }\n        }\n\n        public widenType(type: PullTypeSymbol): PullTypeSymbol {\n            if (type == this.semanticInfoChain.undefinedTypeSymbol ||\n                type == this.semanticInfoChain.nullTypeSymbol ||\n                type.isError()) {\n\n                return this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            return type;\n        }\n\n        public isNullOrUndefinedType(type: PullTypeSymbol) {\n            return type == this.semanticInfoChain.nullTypeSymbol ||\n                    type == this.semanticInfoChain.undefinedTypeSymbol;\n        }\n\n        public findBestCommonType(initialType: PullTypeSymbol, targetType: PullTypeSymbol, collection: IPullTypeCollection, acceptVoid: bool, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            var i = 0;\n            var len = collection.getLength();\n            var nlastChecked = 0;\n            var bestCommonType = initialType;\n\n            if (targetType) {\n                bestCommonType = bestCommonType ? this.mergeOrdered(bestCommonType, targetType, acceptVoid, context) : targetType;\n            }\n\n            // it\'s important that we set the convergence type here, and not in the loop,\n            // since the first element considered may be the contextual type\n            var convergenceType: PullTypeSymbol = bestCommonType;\n\n            while (nlastChecked < len) {\n\n                for (i = 0; i < len; i++) {\n\n                    // no use in comparing a type against itself\n                    if (i == nlastChecked) {\n                        continue;\n                    }\n\n                    if (convergenceType && (bestCommonType = this.mergeOrdered(convergenceType, collection.getTypeAtIndex(i), acceptVoid, context, comparisonInfo))) {\n                        convergenceType = bestCommonType;\n                    }\n\n                    if (bestCommonType == this.semanticInfoChain.anyTypeSymbol || bestCommonType == null) {\n                        break;\n                    }\n                    else if (targetType) { // set the element type to the target type\n                        collection.setTypeAtIndex(i, targetType);\n                    }\n                }\n\n                // use the type if we\'ve agreed upon it\n                if (convergenceType && bestCommonType) {\n                    break;\n                }\n\n                nlastChecked++;\n                if (nlastChecked < len) {\n                    convergenceType = collection.getTypeAtIndex(nlastChecked);\n                }\n            }\n\n            return acceptVoid ? bestCommonType : (bestCommonType == this.semanticInfoChain.voidTypeSymbol ? null : bestCommonType);\n        }\n\n        // Type Identity\n\n        public typesAreIdentical(t1: PullTypeSymbol, t2: PullTypeSymbol) {\n\n            // This clause will cover both primitive types (since the type objects are shared),\n            // as well as shared brands\n            if (t1 == t2) {\n                return true;\n            }\n\n            if (!t1 || !t2) {\n                return false;\n            }\n\n            if (t1.isPrimitive() || t2.isPrimitive()) {\n                return false;\n            }\n\n            if (t1.isClass()) {\n                return false;\n            }\n\n            if (t1.isError() && t2.isError()) {\n                return true;\n            }\n\n            var comboId = (t2.getSymbolID() << 16) | t1.getSymbolID();\n\n            if (this.identicalCache[comboId]) {\n                return true;\n            }\n\n            // If one is an enum, and they\'re not the same type, they\'re not identical\n            if ((t1.getKind() & PullElementKind.Enum) || (t2.getKind() & PullElementKind.Enum)) {\n                return false;\n            }\n\n            if (t1.isArray() || t2.isArray()) {\n                if (!(t1.isArray() && t2.isArray())) {\n                    return false;\n                }\n                this.identicalCache[comboId] = false;\n                var ret = this.typesAreIdentical(t1.getElementType(), t2.getElementType());\n                if (ret) {\n                    this.subtypeCache[comboId] = true;\n                }\n                else {\n                    this.subtypeCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            if (t1.isPrimitive() != t2.isPrimitive()) {\n                return false;\n            }\n\n            this.identicalCache[comboId] = false;\n\n            // properties are identical in name, optionality, and type\n            if (t1.hasMembers() && t2.hasMembers()) {\n                var t1Members = t1.getMembers();\n                var t2Members = t2.getMembers();\n\n                if (t1Members.length != t2Members.length) {\n                    this.identicalCache[comboId] = undefined;\n                    return false;\n                }\n\n                var t1MemberSymbol: PullSymbol = null;\n                var t2MemberSymbol: PullSymbol = null;\n\n                var t1MemberType: PullTypeSymbol = null;\n                var t2MemberType: PullTypeSymbol = null;\n\n                for (var iMember = 0; iMember < t1Members.length; iMember++) {\n\n                    t1MemberSymbol = t1Members[iMember];\n                    t2MemberSymbol = t2.findMember(t1MemberSymbol.getName());\n\n                    if (!t2MemberSymbol || (t1MemberSymbol.getIsOptional() != t2MemberSymbol.getIsOptional())) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n\n                    t1MemberType = t1MemberSymbol.getType();\n                    t2MemberType = t2MemberSymbol.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (t1MemberType && t2MemberType && (this.identicalCache[(t2MemberType.getSymbolID() << 16) | t1MemberType.getSymbolID()] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.typesAreIdentical(t1MemberType, t2MemberType)) {\n                        this.identicalCache[comboId] = undefined;\n                        return false;\n                    }\n                }\n            }\n            else if (t1.hasMembers() || t2.hasMembers()) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            var t1CallSigs = t1.getCallSignatures();\n            var t2CallSigs = t2.getCallSignatures();\n\n            var t1ConstructSigs = t1.getConstructSignatures();\n            var t2ConstructSigs = t2.getConstructSignatures();\n\n            var t1IndexSigs = t1.getIndexSignatures();\n            var t2IndexSigs = t2.getIndexSignatures();\n\n            if (!this.signatureGroupsAreIdentical(t1CallSigs, t2CallSigs)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1ConstructSigs, t2ConstructSigs)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            if (!this.signatureGroupsAreIdentical(t1IndexSigs, t2IndexSigs)) {\n                this.identicalCache[comboId] = undefined;\n                return false;\n            }\n\n            this.identicalCache[comboId] = true;\n            return true;\n        }\n\n        public signatureGroupsAreIdentical(sg1: PullSignatureSymbol[], sg2: PullSignatureSymbol[]) {\n\n            // covers the null case\n            if (sg1 == sg2) {\n                return true;\n            }\n\n            // covers the mixed-null case\n            if (!sg1 || !sg2) {\n                return false;\n            }\n\n            if (sg1.length != sg2.length) {\n                return false;\n            }\n\n            var sig1: PullSignatureSymbol = null;\n            var sig2: PullSignatureSymbol = null;\n            var sigsMatch = false;\n\n            // The signatures in the signature group may not be ordered...\n            // REVIEW: Should definition signatures be required to be identical as well?\n            for (var iSig1 = 0; iSig1 < sg1.length; iSig1++) {\n                sig1 = sg1[iSig1];\n\n                for (var iSig2 = 0; iSig2 < sg2.length; iSig2++) {\n                    sig2 = sg2[iSig2];\n\n                    if (this.signaturesAreIdentical(sig1, sig2)) {\n                        sigsMatch = true;\n                        break;\n                    }\n                }\n\n                if (sigsMatch) {\n                    sigsMatch = false;\n                    continue;\n                }\n\n                // no match found for a specific signature\n                return false;\n            }\n\n            return true;\n        }\n\n        public signaturesAreIdentical(s1: PullSignatureSymbol, s2: PullSignatureSymbol) {\n\n            if (s1.hasVariableParamList() != s2.hasVariableParamList()) {\n                return false;\n            }\n\n            if (s1.getNonOptionalParameterCount() != s2.getNonOptionalParameterCount()) {\n                return false;\n            }\n\n            var s1Params = s1.getParameters();\n            var s2Params = s2.getParameters();\n\n            if (s1Params.length != s2Params.length) {\n                return false;\n            }\n\n            if (!this.typesAreIdentical(s1.getReturnType(), s2.getReturnType())) {\n                return false;\n            }\n\n            for (var iParam = 0; iParam < s1Params.length; iParam++) {\n                if (!this.typesAreIdentical(s1Params[iParam].getType(), s2Params[iParam].getType())) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        // Assignment Compatibility and Subtyping\n\n        public sourceIsSubtypeOfTarget(source: PullTypeSymbol, target: PullTypeSymbol, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            return this.sourceIsRelatableToTarget(source, target, false, this.subtypeCache, context, comparisonInfo);\n        }\n\n        public typeIsSubtypeOfFunction(source: PullTypeSymbol, context): bool {\n            if (this.cachedFunctionInterfaceType) {\n                return this.sourceIsSubtypeOfTarget(source, this.cachedFunctionInterfaceType, context);\n            }\n\n            return false;\n        }\n\n        public signatureGroupIsSubtypeOfTarget(sg1: PullSignatureSymbol[], sg2: PullSignatureSymbol[], context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            return this.signatureGroupIsRelatableToTarget(sg1, sg2, false, this.subtypeCache, context, comparisonInfo);\n        }\n\n        public signatureIsSubtypeOfTarget(s1: PullSignatureSymbol, s2: PullSignatureSymbol, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            return this.signatureIsRelatableToTarget(s1, s2, false, this.subtypeCache, context, comparisonInfo);\n        }\n\n        public sourceIsAssignableToTarget(source: PullTypeSymbol, target: PullTypeSymbol, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo): bool {\n            return this.sourceIsRelatableToTarget(source, target, true, this.assignableCache, context, comparisonInfo);\n        }\n\n        public signatureGroupIsAssignableToTarget(sg1: PullSignatureSymbol[], sg2: PullSignatureSymbol[], context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo): bool {\n            return this.signatureGroupIsRelatableToTarget(sg1, sg2, true, this.assignableCache, context, comparisonInfo);\n        }\n\n        public signatureIsAssignableToTarget(s1: PullSignatureSymbol, s2: PullSignatureSymbol, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo): bool {\n            return this.signatureIsRelatableToTarget(s1, s2, true, this.assignableCache, context, comparisonInfo);\n        }\n\n        public sourceIsRelatableToTarget(source: PullTypeSymbol, target: PullTypeSymbol, assignableTo: bool, comparisonCache: any, context: PullTypeResolutionContext, comparisonInfo: TypeComparisonInfo): bool {\n\n            // REVIEW: Does this check even matter?\n            //if (this.typesAreIdentical(source, target)) {\n            //    return true;\n            //}\n            if (source == target) {\n                return true;\n            }\n\n            // An error has already been reported in this case\n            if (!(source && target)) {\n                return true;\n            }\n\n            var comboId = (source.getSymbolID() << 16) | target.getSymbolID();\n\n            // In the case of a \'false\', we want to short-circuit a recursive typecheck\n            if (comparisonCache[comboId] != undefined) {\n                return true;\n            }\n\n            // this is one difference between subtyping and assignment compatibility\n            if (assignableTo) {\n                if (source == this.semanticInfoChain.anyTypeSymbol || target == this.semanticInfoChain.anyTypeSymbol) {\n                    return true;\n                }\n\n                if (source.isError() || target.isError()) {\n                    return true;\n                }\n            }\n            else {\n                // This is one difference between assignment compatibility and subtyping\n                if (target == this.semanticInfoChain.anyTypeSymbol || target.isError()) {\n                    return true;\n                }\n            }\n\n            if (source == this.semanticInfoChain.undefinedTypeSymbol) {\n                return true;\n            }\n\n            if ((source == this.semanticInfoChain.nullTypeSymbol) && (target != this.semanticInfoChain.undefinedTypeSymbol && target != this.semanticInfoChain.voidTypeSymbol)) {\n                return true;\n            }\n\n            // REVIEW: enum types aren\'t explicitly covered in the spec\n            if (target == this.semanticInfoChain.numberTypeSymbol && (source.getKind() & PullElementKind.Enum)) {\n                return true;\n            }\n            if (source == this.semanticInfoChain.numberTypeSymbol && (target.getKind() & PullElementKind.Enum)) {\n                return true;\n            }\n            if ((source.getKind() & PullElementKind.Enum) || (target.getKind() & PullElementKind.Enum)) {\n                return false;\n            }\n\n            if (source.isArray() || target.isArray()) {\n                if (!(source.isArray() && target.isArray())) {\n                    return false;\n                }\n                comparisonCache[comboId] = false;\n                var ret = this.sourceIsRelatableToTarget(source.getElementType(), target.getElementType(), assignableTo, comparisonCache, context, comparisonInfo);\n                if (ret) {\n                    comparisonCache[comboId] = true;\n                }\n                else {\n                    comparisonCache[comboId] = undefined;\n                }\n\n                return ret;\n            }\n\n            if (target.isTypeParameter()) {\n                return true;\n            }            \n\n            // this check ensures that we only operate on object types from this point forward,\n            // since the checks involving primitives occurred above\n            if (source.isPrimitive() && target.isPrimitive()) {\n\n                // we already know that they\'re not the same, and that neither is \'any\'\n                return false;\n            }\n            else if (source.isPrimitive() != target.isPrimitive()) {\n\n                if (!target.isPrimitive()) {\n                    if (source == this.semanticInfoChain.numberTypeSymbol && this.cachedNumberInterfaceType) {\n\n                        if (!this.cachedNumberInterfaceType.isResolved()) {\n                            this.resolveDeclaredSymbol(this.cachedNumberInterfaceType, null, context);\n                        }\n\n                        source = this.cachedNumberInterfaceType;\n                    }\n                    else if (source == this.semanticInfoChain.stringTypeSymbol && this.cachedStringInterfaceType) {\n\n                        if (!this.cachedStringInterfaceType.isResolved()) {\n                            this.resolveDeclaredSymbol(this.cachedStringInterfaceType, null, context);\n                        }\n\n                        source = this.cachedStringInterfaceType;\n                    }\n                    else if (source == this.semanticInfoChain.boolTypeSymbol && this.cachedBooleanInterfaceType) {\n\n                        if (!this.cachedBooleanInterfaceType.isResolved()) {\n                            this.resolveDeclaredSymbol(this.cachedBooleanInterfaceType, null, context);\n                        }\n\n                        source = this.cachedBooleanInterfaceType;\n                    }\n                    else {\n                        return false;\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = false;\n\n            if (source.hasBase(target)) {\n                comparisonCache[comboId] = true;\n                return true;\n            }\n\n            if (this.cachedObjectInterfaceType && target == this.cachedObjectInterfaceType) {\n                return true;\n            }\n\n            if (this.cachedFunctionInterfaceType && (source.getCallSignatures().length || source.getConstructSignatures().length) && target == this.cachedFunctionInterfaceType) {\n                return true;\n            }\n\n            if (target.hasMembers()) {\n                var mProps = target.getMembers();\n                var mProp: PullSymbol = null;\n                var nProp: PullSymbol = null;\n                var mPropType: PullTypeSymbol = null;\n                var nPropType: PullTypeSymbol = null;\n\n                for (var iMProp = 0; iMProp < mProps.length; iMProp++) {\n\n                    mProp = mProps[iMProp];\n                    nProp = source.findMember(mProp.getName());\n\n                    // PULLTODO:\n                    // methods do not have the \"arguments\" field\n                    //if (mProp.getName() == \"arguments\" &&\n                    //    this.cachedIArgumentsInterfaceType &&\n                    //    (this.typeFlow.iargumentsInterfaceType.symbol.flags & SymbolFlags.CompilerGenerated) &&\n                    //    mProp.kind() == SymbolKind.Variable &&\n                    //    (<VariableSymbol>mProp).variable.typeLink.type == this.typeFlow.iargumentsInterfaceType) {\n                    //    continue;\n                    //}\n\n                    if (!mProp.isResolved()) {\n                        this.resolveDeclaredSymbol(mProp, null, context);\n                    }\n\n                    mPropType = mProp.getType();\n\n                    if (!nProp) {\n                        // If it\'s not present on the type in question, look for the property on \'Object\'\n                        if (this.cachedObjectInterfaceType) {\n                            nProp = this.cachedObjectInterfaceType.findMember(mProp.getName());\n                        }\n\n                        if (!nProp) {\n                            // Now, the property was not found on Object, but the type in question is a function, look\n                            // for it on function\n                            if (this.cachedFunctionInterfaceType && (mPropType.getCallSignatures().length || mPropType.getConstructSignatures().length)) {\n                                nProp = this.cachedFunctionInterfaceType.findMember(mProp.getName());\n                            }\n\n                            // finally, check to see if the property is optional\n                            if (!nProp) {\n                                if (!(mProp.getIsOptional())) {\n                                    comparisonCache[comboId] = undefined;\n                                    if (comparisonInfo) { // only surface the first error\n                                        comparisonInfo.flags |= TypeRelationshipFlags.RequiredPropertyIsMissing;\n                                        comparisonInfo.addMessageToFront(\"Type \'\" + source.toString() + \"\' is missing property \'\" + mProp.getScopedNameEx().toString() + \"\' from type \'\" + target.toString() + \"\'\");\n                                    }\n                                    return false;\n                                }\n                                else {\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    // if both are private members, test to ensure that they share a declaration\n                    if (nProp.hasFlag(PullElementFlags.Private) && mProp.hasFlag(PullElementFlags.Private)) {\n                        var mDecl = mProp.getDeclarations()[0];\n                        var nDecl = nProp.getDeclarations()[0];\n\n                        if (!mDecl.isEqual(nDecl)) {\n                            return false;\n                        }\n                    }\n\n                    if (!nProp.isResolved()) {\n                        this.resolveDeclaredSymbol(nProp, null, context);\n                    }\n\n\n                    nPropType = nProp.getType();\n\n                    // catch the mutually recursive or cached cases\n                    if (mPropType && nPropType && (comparisonCache[(nPropType.getSymbolID() << 16) | mPropType.getSymbolID()] != undefined)) {\n                        continue;\n                    }\n\n                    if (!this.sourceIsRelatableToTarget(nPropType, mPropType, assignableTo, comparisonCache, context, comparisonInfo)) {\n                        comparisonCache[comboId] = undefined;\n                        if (comparisonInfo) { // only surface the first error\n                            comparisonInfo.flags |= TypeRelationshipFlags.IncompatiblePropertyTypes;\n                            comparisonInfo.addMessageToFront(\"Types of property \'\" + mProp.getScopedNameEx().toString() + \"\' of types \'\" + source.toString() + \"\' and \'\" + target.toString() + \"\' are incompatible\");\n                        }\n                        return false;\n                    }\n                }\n            }\n\n            var sourceCallSigs = source.getCallSignatures();\n            var targetCallSigs = target.getCallSignatures();\n\n            var sourceConstructSigs = source.getConstructSignatures();\n            var targetConstructSigs = target.getConstructSignatures();\n\n            var sourceIndexSigs = source.getIndexSignatures();\n            var targetIndexSigs = target.getIndexSignatures();\n            \n            var hasSig: string;\n            var lacksSig: string;\n\n            // check signature groups\n            if (targetCallSigs.length) {\n                if (!this.signatureGroupIsRelatableToTarget(sourceCallSigs, targetCallSigs, assignableTo, comparisonCache, context, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        if (sourceCallSigs.length && targetCallSigs.length) {\n                            comparisonInfo.addMessageToFront(\"Call signatures of types \'\" + source.toString() + \"\' and \'\" + target.toString() + \"\' are incompatible\");\n                        }\n                        else {\n                            hasSig = targetCallSigs.length ? target.toString() : source.toString();\n                            lacksSig = !targetCallSigs.length ? target.toString() : source.toString();\n                            comparisonInfo.setMessage(\"Type \'\" + hasSig + \"\' requires a call signature, but Type \'\" + lacksSig + \"\' lacks one\");\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            if (targetConstructSigs.length) {\n                if (!this.signatureGroupIsRelatableToTarget(sourceConstructSigs, targetConstructSigs, assignableTo, comparisonCache, context, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        if (sourceConstructSigs.length && targetConstructSigs.length) {\n                            comparisonInfo.addMessageToFront(\"Construct signatures of types \'\" + source.toString() + \"\' and \'\" + target.toString() + \"\' are incompatible\");\n                        }\n                        else {\n                            hasSig = targetConstructSigs.length ? target.toString() : source.toString();\n                            lacksSig = !targetConstructSigs.length ? target.toString() : source.toString();\n                            comparisonInfo.setMessage(\"Type \'\" + hasSig + \"\' requires a construct signature, but Type \'\" + lacksSig + \"\' lacks one\");\n                        }\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            if (targetIndexSigs.length) {\n                var targetIndex = !targetIndexSigs.length && this.cachedObjectInterfaceType ? this.cachedObjectInterfaceType.getIndexSignatures() : targetIndexSigs;\n                var sourceIndex = !sourceIndexSigs.length && this.cachedObjectInterfaceType ? this.cachedObjectInterfaceType.getIndexSignatures() : sourceIndexSigs;\n\n                if (!this.signatureGroupIsRelatableToTarget(sourceIndex, targetIndex, assignableTo, comparisonCache, context, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.addMessageToFront(\"Index signatures of types \'\" + source.toString() + \"\' and \'\" + target.toString() + \"\' are incompatible\");\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleSignatures;\n                    }\n                    comparisonCache[comboId] = undefined;\n                    return false;\n                }\n            }\n\n            comparisonCache[comboId] = true;\n            return true;\n        }\n\n        // REVIEW: TypeChanges: Return an error context object so the user can get better diagnostic info\n        public signatureGroupIsRelatableToTarget(sourceSG: PullSignatureSymbol[], targetSG: PullSignatureSymbol[], assignableTo: bool, comparisonCache: any, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n            if (sourceSG == targetSG) {\n                return true;\n            }\n\n            if (!(sourceSG.length && targetSG.length)) {\n                return false;\n            }\n\n            var mSig: PullSignatureSymbol = null;\n            var nSig: PullSignatureSymbol = null;\n            var foundMatch = false;\n\n            for (var iMSig = 0; iMSig < targetSG.length; iMSig++) {\n                mSig = targetSG[iMSig];\n\n                for (var iNSig = 0; iNSig < sourceSG.length; iNSig++) {\n                    nSig = sourceSG[iNSig];\n                    if (this.signatureIsRelatableToTarget(nSig, mSig, assignableTo, comparisonCache, context, comparisonInfo)) {\n                        foundMatch = true;\n                        break;\n                    }\n                }\n\n                if (foundMatch) {\n                    foundMatch = false;\n                    continue;\n                }\n                return false;\n            }\n\n            return true;\n        }\n\n        public signatureIsRelatableToTarget(sourceSig: PullSignatureSymbol, targetSig: PullSignatureSymbol, assignableTo: bool, comparisonCache: any, context: PullTypeResolutionContext, comparisonInfo?: TypeComparisonInfo) {\n\n            var sourceParameters = sourceSig.getParameters();\n            var targetParameters = targetSig.getParameters();\n\n            if (!sourceParameters || !targetParameters) {\n                return false;\n            }\n\n            var targetVarArgCount = /*targetSig.hasVariableParamList() ? targetSig.getNonOptionalParameterCount() - 1 :*/ targetSig.getNonOptionalParameterCount();\n            var sourceVarArgCount = /*sourceSig.hasVariableParamList() ? sourceSig.getNonOptionalParameterCount() - 1 :*/ sourceSig.getNonOptionalParameterCount();\n\n            if (sourceVarArgCount > targetVarArgCount && !targetSig.hasVariableParamList()) {\n                if (comparisonInfo) {\n                    comparisonInfo.flags |= TypeRelationshipFlags.SourceSignatureHasTooManyParameters;\n                    comparisonInfo.addMessageToFront(\"Call signature expects \" + targetVarArgCount + \" or fewer parameters\");\n                }\n                return false;\n            }\n\n            var sourceReturnType = sourceSig.getReturnType();\n            var targetReturnType = targetSig.getReturnType();\n\n            if (targetReturnType != this.semanticInfoChain.voidTypeSymbol) {\n                if (!this.sourceIsRelatableToTarget(sourceReturnType, targetReturnType, assignableTo, comparisonCache, context, comparisonInfo)) {\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleReturnTypes;\n                        // No need to print this one here - it\'s printed as part of the signature error in sourceIsRelatableToTarget\n                        //comparisonInfo.addMessageToFront(\"Incompatible return types: \'\" + sourceReturnType.getTypeName() + \"\' and \'\" + targetReturnType.getTypeName() + \"\'\");\n                    }\n                    return false;\n                }\n            }\n\n            var len = (sourceVarArgCount < targetVarArgCount && sourceSig.hasVariableParamList()) ? targetVarArgCount : sourceVarArgCount;\n            var sourceParamType: PullTypeSymbol = null;\n            var targetParamType: PullTypeSymbol = null;\n            var sourceParamName = \"\";\n            var targetParamName = \"\";\n\n            for (var iSource = 0, iTarget = 0; iSource < len; iSource++, iTarget++) {\n\n                if (!sourceSig.hasVariableParamList || iSource < sourceVarArgCount) {\n                    sourceParamType = sourceParameters[iSource].getType();\n                    sourceParamName = sourceParameters[iSource].getName();\n                }\n                else if (iSource == sourceVarArgCount) {\n                    sourceParamType = sourceParameters[iSource].getType();\n                    if (sourceParamType.isArray()) {\n                        sourceParamType = sourceParamType.getElementType();\n                    }\n                    sourceParamName = sourceParameters[iSource].getName();\n                }\n\n                if (iTarget < targetParameters.length && iTarget < targetVarArgCount) {\n                    targetParamType = targetParameters[iTarget].getType();\n                    targetParamName = targetParameters[iTarget].getName();\n                }\n                else if (targetSig.hasVariableParamList && iTarget == targetVarArgCount) {\n                    targetParamType = targetParameters[iTarget].getType();\n                    if (targetParamType.isArray()) {\n                        targetParamType = targetParamType.getElementType();\n                    }\n                    targetParamName = targetParameters[iTarget].getName();\n                }\n\n                if (!(this.sourceIsRelatableToTarget(sourceParamType, targetParamType, assignableTo, comparisonCache, context, comparisonInfo) ||\n                        this.sourceIsRelatableToTarget(targetParamType, sourceParamType, assignableTo, comparisonCache, context, comparisonInfo))) {\n\n                    if (comparisonInfo) {\n                        comparisonInfo.flags |= TypeRelationshipFlags.IncompatibleParameterTypes;\n                    }\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        // Overload resolution\n\n        public resolveOverloads(application: AST, group: PullSignatureSymbol[], enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSignatureSymbol {\n            var rd = this.resolutionDataCache.getResolutionData();\n            var actuals = rd.actuals;\n            var exactCandidates = rd.exactCandidates;\n            var conversionCandidates = rd.conversionCandidates;\n            var candidate: PullSignatureSymbol = null;\n            var hasOverloads = group.length > 1;\n            var comparisonInfo = new TypeComparisonInfo();\n            var args: ASTList = null;\n            var target: AST = null;\n            var argSym: PullSymbol;\n            var i = 0;\n\n            if (application.nodeType == NodeType.Call || application.nodeType == NodeType.New) {\n                var callEx = <CallExpression>application;\n\n                args = callEx.arguments;\n                target = callEx.target;\n\n                if (callEx.arguments) {\n                    var len = callEx.arguments.members.length;\n                    \n                    for (i = 0; i < len; i++) {\n                        argSym = this.resolveStatementOrExpression(callEx.arguments.members[i], false, enclosingDecl, context);\n                        actuals[i] = argSym.getType();\n                    }\n                }\n            }\n            else if (application.nodeType == NodeType.Index) {\n                var binExp = <BinaryExpression>application;\n                target = binExp.operand1;\n                args = new ASTList();\n                args.members[0] = binExp.operand2;\n                argSym = this.resolveStatementOrExpression(args.members[0], false, enclosingDecl, context);\n                actuals[0] = argSym.getType();\n            }\n\n            var signature: PullSignatureSymbol;\n            var returnType: PullTypeSymbol;\n            var candidateInfo: { sig: PullSignatureSymbol; ambiguous: bool; };\n\n            for (var j = 0, groupLen = group.length; j < groupLen; j++) {\n                signature = group[j];\n                if (hasOverloads && signature.isDefinition()) {\n                    continue;\n                }\n\n                returnType = signature.getReturnType();\n\n                this.getCandidateSignatures(signature, actuals, exactCandidates, conversionCandidates, enclosingDecl, context, comparisonInfo);\n            }\n            if (exactCandidates.length == 0) {\n\n                var applicableCandidates = this.getApplicableSignaturesFromCandidates(conversionCandidates, args, comparisonInfo, enclosingDecl, context);\n                if (applicableCandidates.length > 0) {\n                    candidateInfo = this.findMostApplicableSignature(applicableCandidates, args, enclosingDecl, context);\n                    if (candidateInfo.ambiguous) {\n                        //this.errorReporter.simpleError(target, \"Ambiguous call expression - could not choose overload\");\n                        context.postError(application.minChar, application.getLength(), this.unitPath, \"Ambiguous call expression - could not choose overload\", enclosingDecl);\n                    }\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    var emsg = \"Supplied parameters do not match any signature of call target\";\n                    if (comparisonInfo.message) {\n                        //this.checker.errorReporter.simpleError(target, emsg + \":\\n\\t\" + comparisonInfo.message);\n                        context.postError(application.minChar, application.getLength(), this.unitPath, emsg + \":\\n\\t\" + comparisonInfo.message, enclosingDecl);\n                    }\n                    else {\n                        context.postError(application.minChar, application.getLength(), this.unitPath, emsg, enclosingDecl);\n                        //this.checker.errorReporter.simpleError(target, emsg);\n                    }\n                }\n            }\n            else {\n                if (exactCandidates.length > 1) {\n                    var applicableSigs: PullApplicableSignature[] = [];\n                    for (i = 0; i < exactCandidates.length; i++) {\n                        applicableSigs[i] = { signature: exactCandidates[i], hadProvisionalErrors: false };\n                    }\n                    candidateInfo = this.findMostApplicableSignature(applicableSigs, args, enclosingDecl, context);\n                    if (candidateInfo.ambiguous) {\n                        //this.checker.errorReporter.simpleError(target, \"Ambiguous call expression - could not choose overload\");\n                        context.postError(application.minChar, application.getLength(), this.unitPath, \"Ambiguous call expression - could not choose overload\", enclosingDecl);\n                    }\n                    candidate = candidateInfo.sig;\n                }\n                else {\n                    candidate = exactCandidates[0];\n                }\n            }\n\n            this.resolutionDataCache.returnResolutionData(rd);\n            return candidate;\n        }\n\n        public getCandidateSignatures(signature: PullSignatureSymbol, actuals: PullTypeSymbol[], exactCandidates: PullSignatureSymbol[], conversionCandidates: PullSignatureSymbol[], enclosingDecl: PullDecl, context: PullTypeResolutionContext, comparisonInfo: TypeComparisonInfo): void {\n            var parameters = signature.getParameters();\n            var lowerBound = signature.getNonOptionalParameterCount(); // required parameters\n            var upperBound = parameters.length; // required and optional parameters\n            var formalLen = lowerBound;\n            var acceptable = false;\n\n            if ((actuals.length >= lowerBound) && (signature.hasVariableParamList() || actuals.length <= upperBound)) {\n                formalLen = (signature.hasVariableParamList() ? parameters.length : actuals.length);\n                acceptable = true;\n            }\n\n            var repeatType: PullTypeSymbol = null;\n\n            if (acceptable || signature.hasVariableParamList()) {\n                // assumed structure here is checked when signature is formed\n                if (signature.hasVariableParamList()) {\n                    formalLen -= 1;\n                    repeatType = parameters[formalLen].getType();\n                    repeatType = repeatType.getElementType();\n                    acceptable = actuals.length >= formalLen;\n                }\n                var len = actuals.length;\n\n                var exact = acceptable;\n                var convert = acceptable;\n\n                var typeA: PullTypeSymbol;\n                var typeB: PullTypeSymbol;\n\n                for (var i = 0; i < len; i++) {\n\n                    if (i < formalLen) {\n                        typeA = parameters[i].getType();\n                    }\n                    else {\n                        typeA = repeatType;\n                    }\n\n                    typeB = actuals[i];\n\n                    if (typeA && !typeA.isResolved()) {\n                        this.resolveDeclaredSymbol(typeA, enclosingDecl, context);\n                    }\n\n                    if (typeB && !typeB.isResolved()) {\n                        this.resolveDeclaredSymbol(typeB, enclosingDecl, context);\n                    }\n\n                    if (!typeA || !typeB || !(this.typesAreIdentical(typeA, typeB))) {\n                        exact = false;\n                    }\n                    // is the argument assignable to the parameter?\n                    if (!this.sourceIsAssignableToTarget(typeB, typeA, context, comparisonInfo)) {\n                        convert = false;\n                    }\n                    if (!(exact || convert)) {\n                        break;\n                    }\n                }\n                if (exact) {\n                    exactCandidates[exactCandidates.length] = signature;\n                }\n                else if (convert && (exactCandidates.length == 0)) {\n                    conversionCandidates[conversionCandidates.length] = signature;\n                }\n            }\n        }\n\n        public getApplicableSignaturesFromCandidates(candidateSignatures: PullSignatureSymbol[],\n                                                     args: ASTList,\n                                                     comparisonInfo: TypeComparisonInfo,\n                                                     enclosingDecl: PullDecl,\n                                                     context: PullTypeResolutionContext): PullApplicableSignature[] {\n\n            var applicableSigs: PullApplicableSignature[] = [];\n            var memberType: PullTypeSymbol = null;\n            var miss = false;\n            var cxt: PullContextualTypeContext = null;\n            var hadProvisionalErrors = false;\n\n            var parameters: PullSymbol[];\n            var signature: PullSignatureSymbol;\n            var argSym: PullSymbol;\n\n            for (var i = 0; i < candidateSignatures.length; i++) {\n                miss = false;\n\n                signature = candidateSignatures[i];\n                parameters = signature.getParameters();\n\n                for (var j = 0; j < args.members.length; j++) {\n\n                    if (j >= parameters.length) {\n                        continue;\n                    }\n\n                    if (!parameters[j].isResolved()) {\n                        this.resolveDeclaredSymbol(parameters[j], enclosingDecl, context);\n                    }\n\n                    memberType = parameters[j].getType();\n\n                    // account for varargs\n                    if (signature.hasVariableParamList() && (j >= signature.getNonOptionalParameterCount() - 1) && memberType.isArray()) {\n                        memberType = memberType.getElementType();\n                    }\n\n                    if (memberType == this.semanticInfoChain.anyTypeSymbol) {\n                        continue;\n                    }\n                    else if (args.members[j].nodeType == NodeType.FuncDecl) {\n\n                        if (this.cachedFunctionInterfaceType && memberType == this.cachedFunctionInterfaceType) {\n                            continue;\n                        }\n\n                        argSym = this.resolveFunctionExpression(<FuncDecl>args.members[j], false, enclosingDecl, context);\n\n                        if (!this.canApplyContextualTypeToFunction(memberType, <FuncDecl>args.members[j], true)) {\n                            // if it\'s just annotations that are blocking us, typecheck the function and add it to the list\n                            if (this.canApplyContextualTypeToFunction(memberType, <FuncDecl>args.members[j], false)) {\n                                if (!this.sourceIsAssignableToTarget(argSym.getType(), memberType, context, comparisonInfo)) {\n                                    break;\n                                }\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        else { // if it can be contextually typed, try it out...\n                            //argSym.invalidate();\n                            context.pushContextualType(memberType, true, null);\n\n                            argSym = this.resolveFunctionExpression(<FuncDecl>args.members[j], true, enclosingDecl, context);\n\n                            if (!this.sourceIsAssignableToTarget(argSym.getType(), memberType, context, comparisonInfo)) {\n                                if (comparisonInfo) {\n                                    comparisonInfo.setMessage(\"Could not apply type \'\" + memberType.toString() + \"\' to argument \" + (j + 1) + \", which is of type \'\" + argSym.getTypeName() + \"\'\");\n                                }\n                                miss = true;\n                            }\n                            argSym.invalidate();\n                            cxt = context.popContextualType();\n                            hadProvisionalErrors = cxt.hadProvisionalErrors();\n\n                            //argSym.invalidate();\n\n                            //this.resetProvisionalErrors();\n                            if (miss) {\n                                break;\n                            }\n                        }\n                    }\n                    else if (args.members[j].nodeType == NodeType.ObjectLit) {\n                        // now actually attempt to typecheck as the contextual type\n                        if (this.cachedObjectInterfaceType && memberType == this.cachedObjectInterfaceType) {\n                            continue;\n                        }\n                        context.pushContextualType(memberType, true, null);\n                        argSym = this.resolveObjectLiteralExpression(args.members[j], true, enclosingDecl, context);\n\n\n                        if (!this.sourceIsAssignableToTarget(argSym.getType(), memberType, context, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage(\"Could not apply type \'\" + memberType.toString() + \"\' to argument \" + (j + 1) + \", which is of type \'\" + argSym.getTypeName() + \"\'\");\n                            }\n                            miss = true;\n                        }\n                        argSym.invalidate();\n                        cxt = context.popContextualType();\n                        hadProvisionalErrors = cxt.hadProvisionalErrors();\n\n                        //argSym.invalidate();\n\n                        //this.resetProvisionalErrors();\n                        if (miss) {\n                            break;\n                        }\n                    }\n                    else if (args.members[j].nodeType == NodeType.ArrayLit) {\n                        // attempt to contextually type the array literal\n                        if (this.cachedArrayInterfaceType && memberType == this.cachedArrayInterfaceType) {\n                            continue;\n                        }\n\n                        context.pushContextualType(memberType, true, null);\n                        argSym = this.resolveArrayLiteralExpression(args.members[j], true, enclosingDecl, context);\n\n                        if (!this.sourceIsAssignableToTarget(argSym.getType(), memberType, context, comparisonInfo)) {\n                            if (comparisonInfo) {\n                                comparisonInfo.setMessage(\"Could not apply type \'\" + memberType.toString() + \"\' to argument \" + (j + 1) + \", which is of type \'\" + argSym.getTypeName() + \"\'\");\n                            }\n                            break;\n                        }\n                        argSym.invalidate();\n                        cxt = context.popContextualType();\n\n                        hadProvisionalErrors = cxt.hadProvisionalErrors();\n\n                        //argSym.invalidate();\n\n                        if (miss) {\n                            break;\n                        }\n                    }\n                }\n\n                if (j == args.members.length) {\n                    applicableSigs[applicableSigs.length] = { signature: candidateSignatures[i], hadProvisionalErrors: hadProvisionalErrors };\n                }\n                hadProvisionalErrors = false;\n            }\n\n            return applicableSigs;\n        }\n\n        public findMostApplicableSignature(signatures: PullApplicableSignature[], args: ASTList, enclosingDecl: PullDecl, context: PullTypeResolutionContext): { sig: PullSignatureSymbol; ambiguous: bool; } {\n\n            if (signatures.length == 1) {\n                return { sig: signatures[0].signature, ambiguous: false };\n            }\n\n            var best: PullApplicableSignature = signatures[0];\n            var Q: PullApplicableSignature = null;\n\n            var AType: PullTypeSymbol = null;\n            var PType: PullTypeSymbol = null;\n            var QType: PullTypeSymbol = null;\n\n            var ambiguous = false;\n\n            var argSym: PullSymbol;\n\n            var bestParams: PullSymbol[];\n            var qParams: PullSymbol[];\n\n            for (var qSig = 1; qSig < signatures.length; qSig++) {\n                Q = signatures[qSig];\n                var i = 0;\n\n                // find the better conversion\n                for (i = 0; args && i < args.members.length; i++) {\n\n                    argSym = this.resolveStatementOrExpression(args.members[i], false, enclosingDecl, context);\n\n                    AType = argSym.getType();\n\n                    // invalidate the argument so that we may correctly resolve it later as part of the call expression\n                    argSym.invalidate();\n\n                    bestParams = best.signature.getParameters();\n                    qParams = Q.signature.getParameters();\n\n                    PType = i < bestParams.length ? bestParams[i].getType() : bestParams[bestParams.length - 1].getType().getElementType();\n                    QType = i < qParams.length ? qParams[i].getType() : qParams[qParams.length - 1].getType().getElementType();\n\n                    if (this.typesAreIdentical(PType, QType)) {\n                        continue;\n                    }\n                    else if (this.typesAreIdentical(AType, PType)) {\n                        break;\n                    }\n                    else if (this.typesAreIdentical(AType, QType)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(PType, QType, context)) {\n                        break;\n                    }\n                    else if (this.sourceIsSubtypeOfTarget(QType, PType, context)) {\n                        best = Q;\n                        break;\n                    }\n                    else if (Q.hadProvisionalErrors) {\n                        break;\n                    }\n                    else if (best.hadProvisionalErrors) {\n                        best = Q;\n                        break;\n                    }\n                }\n\n                if (!args || i == args.members.length) {\n                    var collection: IPullTypeCollection = {\n                        getLength: () => { return 2; },\n                        setTypeAtIndex: (index: number, type: PullTypeSymbol) => { }, // no contextual typing here, so no need to do anything\n                        getTypeAtIndex: (index: number) => { return index ? Q.signature.getReturnType() : best.signature.getReturnType(); } // we only want the \"second\" type - the \"first\" is skipped\n                    }\n                    var bct = this.findBestCommonType(best.signature.getReturnType(), null, collection, false, context);\n                    ambiguous = !bct;\n                }\n                else {\n                    ambiguous = false;\n                }\n            }\n\n            return { sig: best.signature, ambiguous: ambiguous };\n        }\n\n        public canApplyContextualTypeToFunction(candidateType: PullTypeSymbol, funcDecl: FuncDecl, beStringent: bool): bool {\n\n            // in these cases, we do not attempt to apply a contextual type\n            //  RE: isInlineCallLiteral - if the call target is a function literal, we don\'t want to apply the target type\n            //  to its body - instead, it should be applied to its return type\n            if (funcDecl.isMethod() ||\n                beStringent && funcDecl.returnTypeAnnotation) {\n                return false;\n            }\n\n            beStringent = beStringent || (this.cachedFunctionInterfaceType == candidateType);\n\n            // At this point, if we\'re not being stringent, there\'s no need to check for multiple call sigs\n            // or count parameters - we just want to unblock typecheck\n            if (!beStringent) {\n                return true;\n            }\n\n            var signature = this.getSymbolForAST(funcDecl, null).getType().getCallSignatures()[0];\n            var parameters = signature.getParameters();\n            var paramLen = parameters.length;\n\n            // Check that the argument declarations have no type annotations\n            for (var i = 0; i < paramLen; i++) {\n                var param = parameters[i];\n                var argDecl = <ArgDecl>this.getASTForSymbol(param);\n\n                // REVIEW: a valid typeExpr is a requirement for varargs,\n                // so we may want to revise our invariant\n                if (beStringent && argDecl.typeExpr) {\n                    return false;\n                }\n            }\n\n            if (candidateType.getConstructSignatures().length && candidateType.getCallSignatures().length) {\n                return false;\n            }\n\n            var candidateSigs = candidateType.getConstructSignatures().length ? candidateType.getConstructSignatures() : candidateType.getCallSignatures();\n\n            if (!candidateSigs || candidateSigs.length > 1) {\n                return false;\n            }\n\n            // if we\'re here, the contextual type can be applied to the function\n            return true;\n        }\n\n        public inferArgumentTypesForSignature(signature: PullSignatureSymbol,\n                                              args: ASTList,\n                                              comparisonInfo: TypeComparisonInfo,\n                                              enclosingDecl: PullDecl,\n                                              context: PullTypeResolutionContext): PullTypeSymbol[] {\n\n            var cxt: PullContextualTypeContext = null;\n            var hadProvisionalErrors = false;\n\n            var argSym: PullSymbol;\n\n            var parameters = signature.getParameters();\n            var typeParameters = signature.getTypeParameters();\n            var argContext = new ArgumentInferenceContext();\n\n            var parameterType: PullTypeSymbol = null;\n\n            var i = 0;\n\n            // seed each type parameter with the undefined type, so that we can widen it to \'any\'\n            // if no inferences can be made\n            for (i = 0; i < typeParameters.length; i++) {\n                argContext.addCandidateForInference(typeParameters[i], null, false);\n            }\n\n            var substitutions: any;\n            var inferenceCandidates: PullTypeSymbol[];\n            var inferenceCandidate: PullTypeSymbol;\n\n            for (i = 0; i < args.members.length; i++) {\n\n                if (i >= parameters.length) {\n                    break;\n                }\n\n                parameterType = parameters[i].getType();\n\n                // account for varargs\n                if (signature.hasVariableParamList() && (i >= signature.getNonOptionalParameterCount() - 1) && parameterType.isArray()) {\n                    parameterType = parameterType.getElementType();\n                }\n\n                inferenceCandidates = argContext.getInferenceCandidates();\n                substitutions = {};\n\n                if (inferenceCandidates.length) {\n                    for (var j = 0; j < inferenceCandidates.length; j++) {\n\n                        inferenceCandidate = inferenceCandidates[j];\n\n                        substitutions = inferenceCandidates[j];\n\n                        context.pushContextualType(parameterType, true, substitutions);\n                        argSym = this.resolveStatementOrExpression(args.members[i], true, enclosingDecl, context);\n\n                        this.relateTypeToTypeParameters(argSym.getType(), parameterType, false, argContext, enclosingDecl, context);\n\n                        cxt = context.popContextualType();\n\n                        argSym.invalidate();\n\n                        hadProvisionalErrors = cxt.hadProvisionalErrors();\n                    }\n                }\n                else {\n                    context.pushContextualType(parameterType, true, {});\n                    argSym = this.resolveStatementOrExpression(args.members[i], true, enclosingDecl, context);\n\n                    this.relateTypeToTypeParameters(argSym.getType(), parameterType, false, argContext, enclosingDecl, context);\n\n                    cxt = context.popContextualType();\n\n                    argSym.invalidate();\n\n                    hadProvisionalErrors = cxt.hadProvisionalErrors();\n                }\n            }\n\n            hadProvisionalErrors = false;\n\n            var inferenceResults = argContext.inferArgumentTypes(this, context);\n\n\n            if (inferenceResults.unfit) {\n                return null;\n            }\n\n            var resultTypes: PullTypeSymbol[] = [];\n\n            for (i = 0; i < inferenceResults.results.length; i++) {\n                resultTypes[resultTypes.length] = inferenceResults.results[i].type;\n            }\n\n            return resultTypes;\n        }\n\n        public relateTypeToTypeParameters(expressionType: PullTypeSymbol,\n                                          parameterType: PullTypeSymbol,\n                                          shouldFix: bool,\n                                          argContext: ArgumentInferenceContext,\n                                          enclosingDecl: PullDecl,\n                                          context: PullTypeResolutionContext): void {\n\n            if (parameterType == expressionType) {\n                return;\n            }\n\n            if (parameterType.isTypeParameter()) {\n                argContext.addCandidateForInference(<PullTypeParameterSymbol>parameterType, expressionType, shouldFix);\n                return;\n            }\n\n            // if the expression and parameter type, with type arguments of \'any\', are not assignment compatible, ignore\n            var anyExpressionType = this.specializeTypeToAny(expressionType, enclosingDecl, context);\n            var anyParameterType = this.specializeTypeToAny(parameterType, enclosingDecl, context);\n\n            if (!this.sourceIsAssignableToTarget(anyExpressionType, anyParameterType, context)) {\n                return;\n            }\n\n            if (expressionType.isArray() && parameterType.isArray()) {\n                this.relateArrayTypeToTypeParameters(expressionType, parameterType, shouldFix, argContext, enclosingDecl, context);\n\n                return;\n            }\n\n            this.relateObjectTypeToTypeParameters(expressionType, parameterType, shouldFix, argContext, enclosingDecl, context);\n        }\n\n        public relateFunctionSignatureToTypeParameters(expressionSignature: PullSignatureSymbol,\n                                                       parameterSignature: PullSignatureSymbol,\n                                                       argContext: ArgumentInferenceContext,\n                                                       enclosingDecl: PullDecl,\n                                                       context: PullTypeResolutionContext): void {\n            // Sub in \'any\' for type parameters\n\n            var anyExpressionSignature = this.specializeSignatureToAny(expressionSignature, enclosingDecl, context);\n            var anyParamExpressionSignature = this.specializeSignatureToAny(parameterSignature, enclosingDecl, context);\n\n            if (!this.signatureIsAssignableToTarget(anyExpressionSignature, anyParamExpressionSignature, context)) {\n                return;\n            }\n\n            var expressionParams = expressionSignature.getParameters();\n            var expressionReturnType = expressionSignature.getReturnType();\n\n            var parameterParams = parameterSignature.getParameters();\n            var parameterReturnType = parameterSignature.getReturnType();\n\n            var len = parameterParams.length < expressionParams.length ? parameterParams.length : expressionParams.length;\n\n            for (var i = 0; i < len; i++) {\n                this.relateTypeToTypeParameters(expressionParams[i].getType(), parameterParams[i].getType(), true, argContext, enclosingDecl, context);\n            }\n\n            this.relateTypeToTypeParameters(expressionReturnType, parameterReturnType, true, argContext, enclosingDecl, context);\n        }\n\n        public relateObjectTypeToTypeParameters(objectType: PullTypeSymbol,\n                                                parameterType: PullTypeSymbol,\n                                                shouldFix: bool,\n                                                argContext: ArgumentInferenceContext,\n                                                enclosingDecl: PullDecl,\n                                                context: PullTypeResolutionContext): void {\n\n            var parameterTypeMembers = parameterType.getMembers();\n            var parameterSignatures: PullSignatureSymbol[];\n            var parameterSignature: PullSignatureSymbol;\n\n            var objectMember: PullSymbol;\n            var objectSignatures: PullSignatureSymbol[];\n\n\n            if (argContext.alreadyRelatingTypes(objectType, parameterType)) {\n                return;\n            }\n\n            var i = 0;\n            var j = 0;\n\n            var objectTypeArguments = objectType.getTypeArguments();\n            var parameterTypeParameters = parameterType.getTypeParameters();\n\n            if (objectTypeArguments && (objectTypeArguments.length == parameterTypeParameters.length)) {\n                for (i = 0; i < objectTypeArguments.length; i++) {\n                    argContext.addCandidateForInference(parameterTypeParameters[i], objectTypeArguments[i], shouldFix);\n                }\n            }\n\n            for (i = 0; i < parameterTypeMembers.length; i++) {\n                objectMember = objectType.findMember(parameterTypeMembers[i].getName());\n\n                if (objectMember) {\n                    this.relateTypeToTypeParameters(objectMember.getType(), parameterTypeMembers[i].getType(), shouldFix, argContext, enclosingDecl, context);\n                }\n            }\n\n            parameterSignatures = parameterType.getCallSignatures();\n            objectSignatures = objectType.getCallSignatures();\n\n            for (i = 0; i < parameterSignatures.length; i++) {\n                parameterSignature = parameterSignatures[i];\n\n                for (j = 0; j < objectSignatures.length; j++) {\n                    this.relateFunctionSignatureToTypeParameters(objectSignatures[j], parameterSignature, argContext, enclosingDecl, context);\n                }\n            }\n\n            parameterSignatures = parameterType.getConstructSignatures();\n            objectSignatures = objectType.getConstructSignatures();\n\n            for (i = 0; i < parameterSignatures.length; i++) {\n                parameterSignature = parameterSignatures[i];\n\n                for (j = 0; j < objectSignatures.length; j++) {\n                    this.relateFunctionSignatureToTypeParameters(objectSignatures[j], parameterSignature, argContext, enclosingDecl, context);\n                }\n            }\n\n            parameterSignatures = parameterType.getIndexSignatures();\n            objectSignatures = objectType.getIndexSignatures();\n\n            for (i = 0; i < parameterSignatures.length; i++) {\n                parameterSignature = parameterSignatures[i];\n\n                for (j = 0; j < objectSignatures.length; j++) {\n                    this.relateFunctionSignatureToTypeParameters(objectSignatures[j], parameterSignature, argContext, enclosingDecl, context);\n                }\n            }\n        }\n\n        public relateArrayTypeToTypeParameters(argArrayType: PullTypeSymbol,\n                                               parameterArrayType: PullTypeSymbol,\n                                               shouldFix: bool,\n                                               argContext: ArgumentInferenceContext,\n                                               enclosingDecl: PullDecl,\n                                               context: PullTypeResolutionContext): void {\n\n            var argElement = argArrayType.getElementType();\n            var paramElement = parameterArrayType.getElementType();\n\n            this.relateTypeToTypeParameters(argElement, paramElement, shouldFix, argContext, enclosingDecl, context);\n        }\n\n        public specializeTypeToAny(typeToSpecialize: PullTypeSymbol, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullTypeSymbol {\n            var prevSpecialize = context.specializingToAny;\n\n            context.specializingToAny = true;\n            var type = specializeType(typeToSpecialize, [], this, enclosingDecl, context);\n            context.specializingToAny = prevSpecialize;\n\n            return type;\n        }\n\n        public specializeSignatureToAny(signatureToSpecialize: PullSignatureSymbol, enclosingDecl: PullDecl, context: PullTypeResolutionContext): PullSignatureSymbol {\n            var typeParameters = signatureToSpecialize.getTypeParameters();\n            var typeReplacementMap: any = {};\n            var typeArguments: PullTypeSymbol[] = []; // PULLTODO - may be expensive, but easy to cache\n\n            for (var i = 0; i < typeParameters.length; i++) {\n                typeArguments[i] = this.semanticInfoChain.anyTypeSymbol;\n                typeReplacementMap[typeParameters[i].getSymbolID().toString()] = typeArguments[i];\n            }\n            if (!typeArguments.length) {\n                typeArguments[0] = this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            // no need to worry about returning \'null\', since \'any\' satisfies all constraints\n            return specializeSignature(signatureToSpecialize, false, typeReplacementMap, typeArguments, this, enclosingDecl, context);\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n\n    export class PullTypeCheckContext {\n        public enclosingDeclStack: PullDecl[] = [];\n        public enclosingDeclReturnStack: bool[] = [];\n        public semanticInfo: SemanticInfo = null;\n\n        constructor(public compiler: TypeScriptCompiler, public script: Script, public scriptName: string) { }\n\n        public pushEnclosingDecl(decl: PullDecl) {\n            this.enclosingDeclStack[this.enclosingDeclStack.length] = decl;\n            this.enclosingDeclReturnStack[this.enclosingDeclReturnStack.length] = false;\n        }\n\n        public popEnclosingDecl() {\n            this.enclosingDeclStack.length--;\n            this.enclosingDeclReturnStack.length--;\n        }\n\n        public getEnclosingDecl() {\n            if (this.enclosingDeclStack.length) {\n                return this.enclosingDeclStack[this.enclosingDeclStack.length - 1];\n            }\n\n            return null;\n        }\n\n        public getEnclosingDeclHasReturn() {\n            return this.enclosingDeclReturnStack[this.enclosingDeclReturnStack.length - 1];\n        }\n        public setEnclosingDeclHasReturn() {\n            return this.enclosingDeclReturnStack[this.enclosingDeclReturnStack.length - 1] = true;\n        }        \n    }\n\n    export class PullTypeChecker {\n\n        static globalPullTypeCheckPhase = 0;\n\n        public resolver: PullTypeResolver = null;\n\n        public context: PullTypeResolutionContext = new PullTypeResolutionContext();\n\n        constructor(private compilationSettings: CompilationSettings,\n                    public semanticInfoChain: SemanticInfoChain) { }\n\n        public setUnit(unitPath: string) {\n            this.resolver = new PullTypeResolver(this.compilationSettings, this.semanticInfoChain, unitPath);\n        }\n\n        public getScriptDecl(fileName: string): PullDecl {\n            return this.semanticInfoChain.getUnit(fileName).getTopLevelDecls()[0];\n        }\n\n        public checkForResolutionError(typeSymbol: PullTypeSymbol, decl: PullDecl): void {\n            if (typeSymbol && typeSymbol.isError()) {\n                decl.addDiagnostic((<PullErrorTypeSymbol>typeSymbol).getDiagnostic());\n            }\n        }\n\n        public postError(offset: number, length: number, fileName: string, message: string, enclosingDecl: PullDecl) {\n            enclosingDecl.addDiagnostic(new PullDiagnostic(offset, length, fileName, message));\n        }\n\n        // declarations\n\n        public typeCheckAST(ast: AST, typeCheckContext: PullTypeCheckContext, inTypedAssignment = false): PullTypeSymbol {\n\n            if (!ast) {\n                return null;\n            }\n\n            if (ast.typeCheckPhase >= PullTypeChecker.globalPullTypeCheckPhase) {\n                return null;\n            }\n            else {\n                ast.typeCheckPhase = PullTypeChecker.globalPullTypeCheckPhase;\n            }\n\n            switch (ast.nodeType) {\n\n                // lists\n                case NodeType.List:\n                    return this.typeCheckList(ast, typeCheckContext);\n\n                // decarations\n\n                case NodeType.VarDecl:\n                case NodeType.ArgDecl:\n                    return this.typeCheckBoundDecl(ast, typeCheckContext);\n\n                case NodeType.FuncDecl:\n                    return this.typeCheckFunction(ast, typeCheckContext, inTypedAssignment);\n\n                case NodeType.ClassDeclaration:\n                    return this.typeCheckClass(ast, typeCheckContext);\n\n                case NodeType.InterfaceDeclaration:\n                    return this.typeCheckInterface(ast, typeCheckContext);\n\n                case NodeType.ModuleDeclaration:\n                    return this.typeCheckModule(ast, typeCheckContext);\n\n                // expressions\n\n                // assignment\n                case NodeType.Asg:\n                    return this.typeCheckAssignment(ast, typeCheckContext);\n\n                case GenericType:\n                    return this.typeCheckGenericType(ast, typeCheckContext);\n\n                case NodeType.ObjectLit:\n                    return this.typeCheckObjectLiteral(ast, typeCheckContext, inTypedAssignment);\n\n                case NodeType.ArrayLit:\n                    return this.typeCheckArrayLiteral(ast, typeCheckContext, inTypedAssignment);\n\n                case NodeType.ThisExpression:\n                    return this.typeCheckThis(ast, typeCheckContext);\n\n                case NodeType.SuperExpression:\n                    return this.typeCheckSuper(ast, typeCheckContext);\n\n                case NodeType.Call:\n                    return this.typeCheckCall(ast, typeCheckContext);\n\n                case NodeType.New:\n                    return this.typeCheckNew(ast, typeCheckContext);\n\n                case NodeType.CastExpression:\n                    return this.typeCheckTypeAssertion(ast, typeCheckContext);\n\n                case NodeType.TypeRef:\n                    return this.typeCheckTypeReference(ast, typeCheckContext);\n\n                // boolean operations\n                case NodeType.Ne:\n                case NodeType.Eq:\n                case NodeType.Eqv:\n                case NodeType.NEqv:\n                case NodeType.Lt:\n                case NodeType.Le:\n                case NodeType.Ge:\n                case NodeType.Gt:\n                    return this.typeCheckLogicalOperation(ast, typeCheckContext);\n\n                case NodeType.Add:\n                case NodeType.AsgAdd:\n                    return this.typeCheckBinaryAdditionOperation(ast, typeCheckContext);\n\n                case NodeType.Sub:\n                case NodeType.Mul:\n                case NodeType.Div:\n                case NodeType.Mod:\n                case NodeType.Or:\n                case NodeType.And:\n                case NodeType.Lsh:\n                case NodeType.Rsh:\n                case NodeType.Rs2:\n                case NodeType.Xor:\n                case NodeType.AsgLsh:\n                case NodeType.AsgRsh:\n                case NodeType.AsgRs2:\n                case NodeType.AsgSub:\n                case NodeType.AsgMul:\n                case NodeType.AsgDiv:\n                case NodeType.AsgMod:\n                case NodeType.AsgOr:\n                case NodeType.AsgAnd:\n                    return this.typeCheckBinaryArithmeticOperation(ast, typeCheckContext);\n\n                case NodeType.Pos:\n                case NodeType.Neg:\n                case NodeType.Not:\n                    return this.semanticInfoChain.numberTypeSymbol;\n\n                case NodeType.IncPost:\n                case NodeType.IncPre:\n                case NodeType.DecPost:\n                case NodeType.DecPre:\n                    return this.typeCheckUnaryArithmeticOperation(ast, typeCheckContext);\n\n                case NodeType.Index:\n                    return this.typeCheckIndex(ast, typeCheckContext);\n\n                case NodeType.LogNot:\n                    return this.semanticInfoChain.boolTypeSymbol;\n\n                case NodeType.LogOr:\n                case NodeType.LogAnd:\n                    return this.typeCheckLogicalAndOrExpression(ast, typeCheckContext);\n\n                case NodeType.Typeof:\n                    return this.typeCheckTypeOf(ast, typeCheckContext);\n\n                case NodeType.ConditionalExpression:\n                    return this.typeCheckConditionalExpression(ast, typeCheckContext);\n\n                case NodeType.Void:\n                    return this.typeCheckVoidExpression(ast, typeCheckContext);\n\n                case NodeType.ThrowStatement:\n                    return this.typeCheckThrowExpression(ast, typeCheckContext);\n\n                case NodeType.Delete:\n                    return this.typeCheckDeleteExpression(ast, typeCheckContext);\n\n                case NodeType.RegularExpressionLiteral:\n                    return this.typeCheckRegExpExpression(ast, typeCheckContext);\n\n                case NodeType.In:\n                    return this.typeCheckInExpression(ast, typeCheckContext);\n\n                case NodeType.InstOf:\n                    return this.typeCheckInstanceOfExpression(ast, typeCheckContext);\n\n                case NodeType.ParenthesizedExpression:\n                    return this.typeCheckParenthesizedExpression(<ParenthesizedExpression>ast, typeCheckContext);\n\n                // statements\n                case NodeType.ForStatement:\n                    return this.typeCheckForStatement(ast, typeCheckContext);\n\n                case NodeType.ForInStatement:\n                    return this.typeCheckForInStatement(ast, typeCheckContext);\n\n                case NodeType.WhileStatement:\n                    return this.typeCheckWhileStatement(ast, typeCheckContext);\n\n                case NodeType.DoStatement:\n                    return this.typeCheckDoWhileStatement(ast, typeCheckContext);\n\n                case NodeType.IfStatement:\n                    return this.typeCheckIfStatement(ast, typeCheckContext);\n\n                case NodeType.Block:\n                    return this.typeCheckBlockStatement(ast, typeCheckContext);\n\n                case NodeType.WithStatement:\n                    return this.typeCheckWithStatement(ast, typeCheckContext);\n\n                case NodeType.TryStatement:\n                    return this.typeCheckTryStatement(ast, typeCheckContext);\n\n                case NodeType.CatchClause:\n                    return this.typeCheckCatchClause(ast, typeCheckContext);\n\n                case NodeType.ReturnStatement:\n                    return this.typeCheckReturnExpression(ast, typeCheckContext);\n\n                case NodeType.Name:\n                    return this.typeCheckNameExpression(ast, typeCheckContext);\n\n                case NodeType.Dot:\n                    return this.typeCheckDottedNameExpression(ast, typeCheckContext);\n\n                case NodeType.SwitchStatement:\n                    return this.typeCheckSwitchStatement(ast, typeCheckContext);\n\n                case NodeType.ExpressionStatement:\n                    return this.typeCheckExpressionStatement(<ExpressionStatement>ast, typeCheckContext, inTypedAssignment);\n\n                case NodeType.CaseClause:\n                    return this.typeCheckCaseClause(ast, typeCheckContext);\n\n                // primitives\n                case NodeType.NumberLit:\n                    return this.semanticInfoChain.numberTypeSymbol;\n                case NodeType.StringLiteral:\n                    return this.semanticInfoChain.stringTypeSymbol;\n                case NodeType.Null:\n                    return this.semanticInfoChain.nullTypeSymbol;\n                case NodeType.TrueLiteral:\n                case NodeType.FalseLiteral:\n                    return this.semanticInfoChain.boolTypeSymbol;\n                case NodeType.Void:\n                    return this.semanticInfoChain.voidTypeSymbol;\n\n                default:\n                    break;\n            }\n\n            return null;\n        }\n\n        //\n        // Validation\n        //\n\n        // scripts\n        public typeCheckScript(script: Script, scriptName: string, compiler: TypeScriptCompiler) {\n            var typeCheckContext = new PullTypeCheckContext(compiler, script, scriptName);\n\n            this.setUnit(scriptName);\n\n            typeCheckContext.semanticInfo = typeCheckContext.compiler.semanticInfoChain.getUnit(typeCheckContext.scriptName);\n            var scriptDecl = typeCheckContext.semanticInfo.getTopLevelDecls()[0];\n            typeCheckContext.pushEnclosingDecl(scriptDecl);\n\n            PullTypeChecker.globalPullTypeCheckPhase++;\n\n            if (script.bod.members) {\n                for (var i = 0; i < script.bod.members.length; i++) {\n                    this.typeCheckAST(script.bod.members[i], typeCheckContext);\n                }\n            }\n\n            typeCheckContext.popEnclosingDecl();\n        }\n\n        // lists\n        public typeCheckList(ast: AST, typeCheckContext: PullTypeCheckContext) {\n            var list = <ASTList>ast;\n\n            if (!list) {\n                return null;\n            }\n\n            for (var i = 0; i < list.members.length; i++) {\n                this.typeCheckAST(list.members[i], typeCheckContext);\n            }\n        }\n\n        // variable and argument declarations\n        // validate:\n        //  - lhs and rhs types agree (if lhs has no type annotation)\n        public typeCheckBoundDecl(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var boundDeclAST = <BoundDecl>ast;\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var varTypeSymbol = this.resolver.resolveAST(boundDeclAST, false, enclosingDecl, this.context).getType();\n\n            this.checkForResolutionError(varTypeSymbol, enclosingDecl);\n\n            // if there\'s a type expr and an initializer, resolve the initializer\n            if (boundDeclAST.init) {\n                this.context.pushContextualType(varTypeSymbol, this.context.inProvisionalResolution(), null);\n                //var initTypeSymbol = this.resolver.resolveAST(boundDeclAST.init, true, enclosingDecl, this.context).getType();\n                var initTypeSymbol = this.typeCheckAST(boundDeclAST.init, typeCheckContext, true);\n                this.context.popContextualType();\n\n                //getAstWalkerFactory().walk(boundDeclAST.init, prePullTypeCheck, postPullTypeCheck, null, typeCheckContext);\n\n                var comparisonInfo = new TypeComparisonInfo();\n\n                var isAssignable = this.resolver.sourceIsAssignableToTarget(initTypeSymbol, varTypeSymbol, this.context, comparisonInfo);\n\n                if (!isAssignable) {\n                    var errorMessage = comparisonInfo.message;\n\n                    // ignore comparison info for now\n                    var message = getDiagnosticMessage(DiagnosticCode.Cannot_convert__0__to__1_, [initTypeSymbol.toString(), varTypeSymbol.toString()]);\n\n                    this.postError(boundDeclAST.minChar, boundDeclAST.getLength(), typeCheckContext.scriptName, message, enclosingDecl);\n                }\n            }\n\n            var decl: PullDecl = this.resolver.getDeclForAST(boundDeclAST);\n            var declSymbol = decl.getSymbol();\n\n            // Check if variable satisfies type privacy\n            if (declSymbol.getKind() != PullElementKind.Parameter &&\n                (declSymbol.getKind() != PullElementKind.Property || declSymbol.getContainer().isNamedTypeSymbol())) {\n                this.checkTypePrivacy(declSymbol, varTypeSymbol, (typeSymbol: PullTypeSymbol) =>\n                    this.variablePrivacyErrorReporter(declSymbol, typeSymbol, typeCheckContext));\n            }\n\n            return varTypeSymbol;\n        }\n\n        // functions \n        // validate:\n        //  - use of super calls \n        //  - signatures agree in optionality\n        //  - getter/setter type agreement\n        //  - body members expr\n        //  - getter/setter flags agree\n        //  - getters have no parameters \n        //  - getters return a value\n        //  - setters return no value\n        // PULLTODO: split up into separate functions for constructors, indexers, expressions, signatures, etc.\n        public typeCheckFunction(ast: AST, typeCheckContext: PullTypeCheckContext, inTypedAssignment = false): PullTypeSymbol {\n\n            var funcDeclAST = <FuncDecl>ast;\n\n            if (funcDeclAST.isConstructor || hasFlag(funcDeclAST.getFunctionFlags(), FunctionFlags.ConstructMember)) {\n                return this.typeCheckConstructor(ast, typeCheckContext, inTypedAssignment);\n            }\n            else if (hasFlag(funcDeclAST.getFunctionFlags(), FunctionFlags.IndexerMember)) {\n                return this.typeCheckIndexer(ast, typeCheckContext, inTypedAssignment);\n            }\n            else if (funcDeclAST.isAccessor()) {\n                return this.typeCheckAccessor(ast, typeCheckContext, inTypedAssignment);\n            }\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var functionSymbol = this.resolver.resolveAST(ast, inTypedAssignment, enclosingDecl, this.context);\n\n            var functionDecl = typeCheckContext.semanticInfo.getDeclForAST(funcDeclAST);\n\n            typeCheckContext.pushEnclosingDecl(functionDecl);\n\n            this.typeCheckAST(funcDeclAST.bod, typeCheckContext);\n            var hasReturn = typeCheckContext.getEnclosingDeclHasReturn();\n            typeCheckContext.popEnclosingDecl();\n\n            var functionSignature = functionDecl.getSignatureSymbol();\n\n            // check for optionality\n            var parameters = functionSignature.getParameters();\n\n            if (parameters.length) {\n                var lastWasOptional = false;\n\n                for (var i = 0; i < parameters.length; i++) {\n                    this.checkForResolutionError(parameters[i].getType(), enclosingDecl);\n                    if (parameters[i].getIsOptional()) {\n                        lastWasOptional = true;\n                    }\n                    else if (lastWasOptional) {\n                        this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Optional parameters may only be followed by other optional parameters\", typeCheckContext.getEnclosingDecl());\n                    }\n                }\n            }\n\n\n            var returnType = functionSignature.getReturnType();\n\n            this.checkForResolutionError(returnType, enclosingDecl);\n\n            if (funcDeclAST.bod && funcDeclAST.returnTypeAnnotation != null && !hasReturn) {\n                var isVoidOrAny = returnType == this.semanticInfoChain.anyTypeSymbol || returnType == this.semanticInfoChain.voidTypeSymbol;\n\n                if (!isVoidOrAny && !(funcDeclAST.bod.members.length > 0 && funcDeclAST.bod.members[0].nodeType === NodeType.ThrowStatement)) {\n                    var funcName = functionDecl.getName();\n                    funcName = funcName ? \"\'\" + funcName + \"\'\" : \"expression\";\n\n                    this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Function \"+ funcName +\" declared a non-void return type, but has no return expression\", typeCheckContext.getEnclosingDecl());\n                }\n            }\n\n            this.checkFunctionTypePrivacy(funcDeclAST, inTypedAssignment, typeCheckContext);\n\n            return functionSymbol ? functionSymbol.getType() : null;\n        }\n\n        public typeCheckAccessor(ast: AST, typeCheckContext: PullTypeCheckContext, inTypedAssignment = false): PullTypeSymbol {\n            var funcDeclAST = <FuncDecl>ast;\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var accessorSymbol = <PullAccessorSymbol>this.resolver.resolveAST(ast, inTypedAssignment, enclosingDecl, this.context);\n\n            var isGetter = hasFlag(funcDeclAST.getFunctionFlags(), FunctionFlags.GetAccessor);\n            var isSetter = !isGetter;\n\n            var getter = accessorSymbol.getGetter();\n            var setter = accessorSymbol.getSetter();\n\n            var functionDecl = typeCheckContext.semanticInfo.getDeclForAST(funcDeclAST);\n\n            typeCheckContext.pushEnclosingDecl(functionDecl);\n\n            this.typeCheckAST(funcDeclAST.bod, typeCheckContext);\n            var hasReturn = typeCheckContext.getEnclosingDeclHasReturn();\n            typeCheckContext.popEnclosingDecl();\n\n            var functionSignature = functionDecl.getSignatureSymbol();\n\n            // check for optionality\n            var parameters = functionSignature.getParameters();\n\n            if (parameters.length) {\n\n                if (isGetter) {\n                    this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Getters may not take arguments\", typeCheckContext.getEnclosingDecl());\'\'\n                }\n                else {\n\n                    if (parameters.length > 1) {\n                        this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Setters may have one and only one argument\", typeCheckContext.getEnclosingDecl());\'\'\n                    }\n\n                    for (var i = 0; i < parameters.length; i++) {\n                        this.checkForResolutionError(parameters[i].getType(), enclosingDecl);\n                        if (parameters[i].getIsOptional()) {\n                            this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Setters may not take optional parameters\", typeCheckContext.getEnclosingDecl());\n                            break;\n                        }\n                    }\n                }\n            }\n\n            var returnType = functionSignature.getReturnType();\n\n            this.checkForResolutionError(returnType, enclosingDecl);\n\n            // PULLREVIEW: Should we also raise an error if the setter returns a value?\n            if (isGetter && !hasReturn) {\n                if (!(funcDeclAST.bod.members.length > 0 && funcDeclAST.bod.members[0].nodeType === NodeType.ThrowStatement)) {\n                    this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Getters must return a value\", typeCheckContext.getEnclosingDecl());\n                }\n            }\n            else if (isSetter && hasReturn) {\n                this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Setters may not return a value\", typeCheckContext.getEnclosingDecl());\n            }\n\n            if (getter && setter) {\n                var getterDecl = getter.getDeclarations()[0];\n                var setterDecl = setter.getDeclarations()[0];\n\n                var getterIsPrivate = getterDecl.getFlags() & PullElementFlags.Private;\n                var setterIsPrivate = setterDecl.getFlags() & PullElementFlags.Private;\n\n                if (getterIsPrivate != setterIsPrivate) {\n                    this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Getter and setter accessors do not agree in visibility\", typeCheckContext.getEnclosingDecl());\n                }\n            }\n\n            this.checkFunctionTypePrivacy(funcDeclAST, inTypedAssignment, typeCheckContext);\n\n            return null;\n        }\n\n        public typeCheckConstructor(ast: AST, typeCheckContext: PullTypeCheckContext, inTypedAssignment = false): PullTypeSymbol {\n\n            // PULLTODOERROR: \"Calls to \'super\' constructor are not allowed in classes that either inherit directly from \'Object\' or have no base class\"\n            // PULLTODOERROR: \"If a derived class contains initialized properties or constructor parameter properties, the first statement in the constructor body must be a call to the super constructor\"\n            // PULLTODOERROR: \"Constructors for derived classes must contain a call to the class\'s \'super\' constructor\"            \n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var functionSymbol = this.resolver.resolveAST(ast, inTypedAssignment, enclosingDecl, this.context);\n\n            var funcDeclAST = <FuncDecl>ast;\n\n            var functionDecl = typeCheckContext.semanticInfo.getDeclForAST(funcDeclAST);\n\n            typeCheckContext.pushEnclosingDecl(functionDecl);\n\n            this.typeCheckAST(funcDeclAST.bod, typeCheckContext);\n\n            typeCheckContext.popEnclosingDecl();\n\n            var constructorSignature = functionDecl.getSignatureSymbol();\n\n            // check for optionality\n            var parameters = constructorSignature.getParameters();\n\n            if (parameters.length) {\n                var lastWasOptional = false;\n\n                for (var i = 0; i < parameters.length; i++) {\n                    this.checkForResolutionError(parameters[i].getType(), enclosingDecl);\n                    if (parameters[i].getIsOptional()) {\n                        lastWasOptional = true;\n                    }\n                    else if (lastWasOptional) {\n                        this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Optional parameters may only be followed by other optional parameters\", typeCheckContext.getEnclosingDecl());\n                    }\n\n                }\n            }\n\n            this.checkFunctionTypePrivacy(funcDeclAST, inTypedAssignment, typeCheckContext);\n\n            this.checkForResolutionError(constructorSignature.getReturnType(), enclosingDecl);\n\n            return functionSymbol ? functionSymbol.getType() : null;\n        }\n\n        public typeCheckIndexer(ast: AST, typeCheckContext: PullTypeCheckContext, inTypedAssignment = false): PullTypeSymbol {\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            // resolve the index signature, even though we won\'t be needing its type\n            this.resolver.resolveAST(ast, inTypedAssignment, enclosingDecl, this.context);\n\n            var funcDeclAST = <FuncDecl>ast;\n\n            var functionDecl = typeCheckContext.semanticInfo.getDeclForAST(funcDeclAST);\n\n            typeCheckContext.pushEnclosingDecl(functionDecl);\n\n            this.typeCheckAST(funcDeclAST.bod, typeCheckContext);\n\n            typeCheckContext.popEnclosingDecl();\n\n            var indexSignature = functionDecl.getSignatureSymbol();\n            var parameters = indexSignature.getParameters();\n\n            if (parameters.length) {\n\n                if (parameters.length > 1) {\n                    this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Index signatures may take one and only one parameter\", typeCheckContext.getEnclosingDecl());\n                }\n\n                var parameterType: PullTypeSymbol = null;\n\n                for (var i = 0; i < parameters.length; i++) {\n                    this.checkForResolutionError(parameters[i].getType(), enclosingDecl);\n                    if (parameters[i].getIsOptional() || parameters[i].getIsVarArg()) {\n                        this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Index signatures may not have optional parameters\", typeCheckContext.getEnclosingDecl());\n                    }\n\n                    parameterType = parameters[i].getType();\n\n                    if (parameterType != this.semanticInfoChain.stringTypeSymbol && parameterType != this.semanticInfoChain.numberTypeSymbol) {\n                        this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Index signatures may not have optional parameters\", typeCheckContext.getEnclosingDecl());\n                    }\n                }\n            }\n            else {\n                this.postError(funcDeclAST.minChar, funcDeclAST.getLength(), typeCheckContext.scriptName, \"Index signatures may take one and only one parameter\", typeCheckContext.getEnclosingDecl());\n            }\n\n            this.checkForResolutionError(indexSignature.getReturnType(), enclosingDecl);\n\n            return null;\n        }\n\n        // Classes\n        // validate:\n        //  - mutually recursive base classes\n        //  - duplicate implemented interfaces\n        //  - mutually recursive type parameters\n        //  - bases are interfaces or classes\n        //  - properties satisfy implemented interfaces\n        //  - properties of base class and implemented interfaces agree\n        //  - type of overridden member is subtype of original\n        //  - method does not overrided field, or vice-versa\n        //  - body members\n        public typeCheckClass(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var classAST = <ClassDeclaration>ast;\n            // resolving the class also resolves its members...\n            var classSymbol = <PullClassTypeSymbol>this.resolver.resolveAST(ast, false, typeCheckContext.getEnclosingDecl(), this.context).getType();\n            this.checkBaseListTypePrivacy(classAST, classSymbol, true, typeCheckContext);\n            this.checkBaseListTypePrivacy(classAST, classSymbol, false, typeCheckContext);\n\n            \n            this.checkForResolutionError(classSymbol, typeCheckContext.getEnclosingDecl());\n            \n            if (classAST.members) {\n                for (var i = 0; i < classAST.members.members.length; i++) {\n                    this.typeCheckAST(classAST.members.members[i], typeCheckContext);\n                }\n            }\n\n            return classSymbol;\n        }\n\n        // Interfaces\n        // validate:\n        //  - mutually recursive bases\n        //  - duplicate implemented or extended interfaces\n        //  - mutually recursive type parameters\n        //  - properties of extended interfaces do not conflict\n        //  - bases are interfaces or classes\n        //  - declarations agree in generic parameters \n        public typeCheckInterface(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var interfaceAST = <InterfaceDeclaration>ast;\n            // resolving the interface also resolves its members...\n            var interfaceType = this.resolver.resolveAST(ast, false, typeCheckContext.getEnclosingDecl(), this.context).getType();\n            this.checkBaseListTypePrivacy(interfaceAST, interfaceType, true, typeCheckContext);\n\n            this.checkForResolutionError(interfaceType, typeCheckContext.getEnclosingDecl());\n\n            if (interfaceAST.members) {\n                for (var i = 0; i < interfaceAST.members.members.length; i++) {\n                    this.typeCheckAST(interfaceAST.members.members[i], typeCheckContext);\n                }\n            }\n\n            return interfaceType;\n        }\n\n        // Modules\n        // validate:\n        //  - No type parameters?\n        public typeCheckModule(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n\n            // we resolve here because resolving a module *does not* resolve its MemberScopeContext\n            // PULLREVIEW: Perhaps it should?\n            var moduleDeclAST = <ModuleDeclaration>ast;\n            var moduleType = <PullTypeSymbol>this.resolver.resolveAST(ast, false, typeCheckContext.getEnclosingDecl(), this.context);\n\n            this.checkForResolutionError(moduleType, typeCheckContext.getEnclosingDecl());\n\n            var moduleDecl = typeCheckContext.semanticInfo.getDeclForAST(moduleDeclAST);\n            typeCheckContext.pushEnclosingDecl(moduleDecl);\n\n            if (moduleDeclAST.members) {\n                this.typeCheckAST(moduleDeclAST.members, typeCheckContext);\n            }\n\n            typeCheckContext.popEnclosingDecl();\n\n            return moduleType;\n        }\n\n        // expressions\n\n        // Assignment\n        // validate:\n        //  - lhs and rhs types agree\n        //  - lhs is a valid value type\n        public typeCheckAssignment(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var assignmentAST = <BinaryExpression>ast;\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var leftExpr = this.resolver.resolveAST(assignmentAST.operand1, false, typeCheckContext.getEnclosingDecl(), this.context);\n            var leftType = this.resolver.widenType(leftExpr.getType()); //this.typeCheckAST(assignmentAST.operand1, typeCheckContext);\n\n            this.checkForResolutionError(leftType, enclosingDecl);\n\n            this.context.pushContextualType(leftType, this.context.inProvisionalResolution(), null);\n            var rightType = this.resolver.widenType(this.typeCheckAST(assignmentAST.operand2, typeCheckContext, true));\n            this.context.popContextualType();\n\n            var isValidLHS = assignmentAST.operand1.nodeType == NodeType.Index ||\n                            leftType == this.semanticInfoChain.anyTypeSymbol ||\n                            ((!leftExpr.isType() || leftType.isArray()) &&\n                                (leftExpr.getKind() & PullElementKind.SomeLHS) != 0) ||\n                            hasFlag(ast.getFlags(), ASTFlags.EnumInitializer);\n\n            if (!isValidLHS) {\n                this.postError(assignmentAST.operand1.minChar, assignmentAST.operand1.getLength(), typeCheckContext.scriptName, \"Invalid left-hand side of assignment expression\", enclosingDecl);\n            }\n\n            var comparisonInfo = new TypeComparisonInfo();\n\n            var isAssignable = this.resolver.sourceIsAssignableToTarget(rightType, leftType, this.context, comparisonInfo);\n\n            if (!isAssignable) {\n                var errorMessage = comparisonInfo.message;\n\n                // ignore comparison info for now\n                var message = getDiagnosticMessage(DiagnosticCode.Cannot_convert__0__to__1_, [rightType.toString(), leftType.toString()]);\n\n                this.postError(assignmentAST.operand1.minChar, assignmentAST.operand1.getLength(), typeCheckContext.scriptName, message, enclosingDecl);\n            }\n\n            return leftType;\n        }\n\n        // Generic Type references\n        // validate:\n        //\n        public typeCheckGenericType(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            // validate:\n            //  - mutually recursive type parameters and constraints\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var genericType = this.resolver.resolveAST(ast, false, enclosingDecl, this.context).getType();\n            this.checkForResolutionError(genericType, enclosingDecl);\n\n            return genericType;\n        }\n\n        // Object literals\n        // validate:\n        //\n        public typeCheckObjectLiteral(ast: AST, typeCheckContext: PullTypeCheckContext, inTypedAssignment = false): PullTypeSymbol {\n            var objectLitAST = <UnaryExpression>ast;\n\n            // PULLTODO: We\'re really resolving these expressions twice - need a better way...\n            var objectLitType = this.resolver.resolveAST(ast, inTypedAssignment, typeCheckContext.getEnclosingDecl(), this.context).getType();\n            var memberDecls = <ASTList>objectLitAST.operand;\n\n            var contextualType = this.context.getContextualType();\n            var memberType: PullTypeSymbol;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            // PULLTODO: Contextually type the members\n            if (memberDecls) {\n                var binex: BinaryExpression;\n                var text: string;\n                var member: PullSymbol = null;\n\n                for (var i = 0; i < memberDecls.members.length; i++) {\n                    binex = <BinaryExpression>memberDecls.members[i];\n\n                    if (contextualType) {\n                        if (binex.operand1.nodeType == NodeType.Name) {\n                            text = (<Identifier>binex.operand1).text;\n                        }\n                        else if (binex.operand1.nodeType == NodeType.StringLiteral) {\n                            text = (<StringLiteral>binex.operand1).text;\n                            text = text.substring(1, text.length - 1);\n                        }\n\n                        member = contextualType.findMember(text);\n\n                        if (member) {\n                            this.context.pushContextualType(member.getType(), this.context.inProvisionalResolution(), null);\n                        }\n                    }\n\n                    this.typeCheckAST(binex.operand2, typeCheckContext, member != null);\n                    \n                    if (member) {\n                        this.context.popContextualType();\n                        member = null;\n                    }\n                }\n            }\n\n            this.checkForResolutionError(objectLitType, enclosingDecl);\n            \n            return objectLitType;\n        }\n\n        // Array literals\n        // validate:\n        //  - incompatible types in expression\n        public typeCheckArrayLiteral(ast: AST, typeCheckContext: PullTypeCheckContext, inTypedAssignment = false): PullTypeSymbol {\n            return this.resolver.resolveAST(ast, inTypedAssignment, typeCheckContext.getEnclosingDecl(), this.context).getType();\n        }\n\n        // \'This\' expressions \n        // validate:\n        //\n        public typeCheckThis(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            return this.resolver.resolveAST(ast, false, typeCheckContext.getEnclosingDecl(), this.context).getType();\n        }\n\n        // \'Super\' expressions \n        // validate:\n        //\n        public typeCheckSuper(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            return this.resolver.resolveAST(ast, false, typeCheckContext.getEnclosingDecl(), this.context).getType();\n        }\n\n        // Call expressions \n        // validate:\n        //\n        public typeCheckCall(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            // \"use of new expression as a statement\"\n            var callEx = <CallExpression>ast;\n            var resultType = this.resolver.resolveAST(callEx, false, typeCheckContext.getEnclosingDecl(), this.context).getType();\n\n            this.typeCheckAST(callEx.target, typeCheckContext);\n\n            var args = callEx.arguments;\n\n            if (args) {\n                for (var i = 0; i < args.members.length; i++) {\n                    this.typeCheckAST(args.members[i], typeCheckContext);\n                }\n            }\n\n            return resultType;\n        }\n\n        // \'New\' expressions \n        // validate:\n        //\n        public typeCheckNew(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var callEx = <CallExpression>ast;\n            var resultType = this.resolver.resolveAST(callEx, false, typeCheckContext.getEnclosingDecl(), this.context).getType();\n\n            var args = callEx.arguments;\n\n            if (args) {\n                for (var i = 0; i < args.members.length; i++) {\n                    this.typeCheckAST(args.members[i], typeCheckContext);\n                }\n            }\n\n            return resultType;\n        }\n\n        // Type assertion expressions \n        // validate:\n        //  - the type assertion and the expression it\'s applied to are assignment compatible\n        public typeCheckTypeAssertion(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var returnType = this.resolver.resolveAST(ast, false, enclosingDecl, this.context).getType();\n\n            this.checkForResolutionError(returnType, enclosingDecl);\n\n            this.context.pushContextualType(returnType, this.context.inProvisionalResolution(), null);\n            var exprType = this.typeCheckAST((<UnaryExpression>ast).operand, typeCheckContext);\n            this.context.popContextualType();\n\n            var isAssignable = this.resolver.sourceIsAssignableToTarget(returnType, exprType, this.context, comparisonInfo) ||\n                                this.resolver.sourceIsAssignableToTarget(exprType, returnType, this.context, comparisonInfo);\n\n            if (!isAssignable) {\n                var comparisonInfo = new TypeComparisonInfo();\n                var errorMessage = comparisonInfo.message;\n\n                // ignore comparison info for now\n                var message = getDiagnosticMessage(DiagnosticCode.Cannot_convert__0__to__1_, [exprType.toString(), returnType.toString()]);\n\n                this.postError(ast.minChar, ast.getLength(), typeCheckContext.scriptName, message, typeCheckContext.getEnclosingDecl());\n            }\n\n            return returnType;\n        }\n\n        // Logical operations\n        // validate:\n        //  - lhs and rhs are compatible\n        public typeCheckLogicalOperation(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var binex = <BinaryExpression>ast;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            \n            var type = this.resolver.resolveAST(ast, false, typeCheckContext.getEnclosingDecl(), this.context).getType();\n\n            this.checkForResolutionError(type, enclosingDecl);\n\n            this.typeCheckAST(binex.operand1, typeCheckContext);\n            this.typeCheckAST(binex.operand2, typeCheckContext);\n\n            return type;\n        }\n\n        // Logical \'And\' and \'Or\' expressions \n        // validate:\n        // - lhs and rhs are compatible\n        public typeCheckLogicalAndOrExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var binex = <BinaryExpression>ast;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var type = this.resolver.resolveAST(ast, false, enclosingDecl, this.context).getType();\n\n            this.checkForResolutionError(type, enclosingDecl);\n\n            this.typeCheckAST(binex.operand1, typeCheckContext);\n            this.typeCheckAST(binex.operand2, typeCheckContext);\n\n            return type;\n        }\n\n        public typeCheckBinaryAdditionOperation(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var binex = <BinaryExpression>ast;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var type = this.resolver.resolveAST(ast, false, enclosingDecl, this.context).getType();\n\n            this.checkForResolutionError(type, enclosingDecl);\n\n            var lhsType = this.typeCheckAST(binex.operand1, typeCheckContext);\n            var rhsType = this.typeCheckAST(binex.operand2, typeCheckContext);\n\n            if (lhsType.getKind() == PullElementKind.Enum) {\n                lhsType = this.semanticInfoChain.numberTypeSymbol;\n            }\n            else if (lhsType == this.semanticInfoChain.nullTypeSymbol || lhsType == this.semanticInfoChain.nullTypeSymbol) {\n                if (rhsType != this.semanticInfoChain.nullTypeSymbol && rhsType != this.semanticInfoChain.nullTypeSymbol) {\n                    lhsType = rhsType;\n                }\n                else {\n                    lhsType = this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n\n            if (rhsType.getKind() == PullElementKind.Enum) {\n                rhsType = this.semanticInfoChain.numberTypeSymbol;\n            }\n            else if (rhsType == this.semanticInfoChain.nullTypeSymbol || rhsType == this.semanticInfoChain.nullTypeSymbol) {\n                if (lhsType != this.semanticInfoChain.nullTypeSymbol && lhsType != this.semanticInfoChain.nullTypeSymbol) {\n                    rhsType = lhsType;\n                }\n                else {\n                    rhsType = this.semanticInfoChain.anyTypeSymbol;\n                }\n            }\n\n            var exprType: PullTypeSymbol = null;\n\n            if (lhsType == this.semanticInfoChain.stringTypeSymbol || rhsType == this.semanticInfoChain.stringTypeSymbol) {\n                exprType = this.semanticInfoChain.stringTypeSymbol;\n            }\n            else if (lhsType == this.semanticInfoChain.anyTypeSymbol || rhsType == this.semanticInfoChain.anyTypeSymbol) {\n                exprType = this.semanticInfoChain.anyTypeSymbol;\n            }\n            else if (rhsType == this.semanticInfoChain.numberTypeSymbol && lhsType == this.semanticInfoChain.numberTypeSymbol) {\n                exprType = this.semanticInfoChain.numberTypeSymbol;\n            }\n\n            if (!exprType) {\n                this.postError(binex.operand1.minChar, binex.operand1.getLength(), typeCheckContext.scriptName, \"Invalid \'+\' expression - types do not agree\", typeCheckContext.getEnclosingDecl());\n                exprType = this.semanticInfoChain.anyTypeSymbol;\n            }\n\n            return exprType;\n        }\n\n        // Binary arithmetic expressions \n        // validate:\n        //  - lhs and rhs are compatible\n        public typeCheckBinaryArithmeticOperation(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var binex = <BinaryExpression>ast;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var type = this.resolver.resolveAST(ast, false, enclosingDecl, this.context).getType();\n\n            this.checkForResolutionError(type, enclosingDecl);\n\n            var lhsType = this.typeCheckAST(binex.operand1, typeCheckContext);\n            var rhsType = this.typeCheckAST(binex.operand2, typeCheckContext);\n\n            var lhsIsFit = lhsType == this.semanticInfoChain.anyTypeSymbol || lhsType == this.semanticInfoChain.numberTypeSymbol || lhsType.getKind() == PullElementKind.Enum;\n            var rhsIsFit = rhsType == this.semanticInfoChain.anyTypeSymbol || rhsType == this.semanticInfoChain.numberTypeSymbol || rhsType.getKind() == PullElementKind.Enum;\n\n            if (!rhsIsFit) {\n                this.postError(binex.operand1.minChar, binex.operand1.getLength(), typeCheckContext.scriptName, \"The right-hand side of an arithmetic operation must be of type \'any\', \'number\' or an enum type\", typeCheckContext.getEnclosingDecl());\n            }\n\n            if (!lhsIsFit) {\n                this.postError(binex.operand2.minChar, binex.operand2.getLength(), typeCheckContext.scriptName, \"The left-hand side of an arithmetic operation must be of type \'any\', \'number\' or an enum type\", typeCheckContext.getEnclosingDecl());\n            }\n\n            // check for assignment compatibility\n            // PULLREVIEW: given the errors above, is this really necessary?\n            // switch (ast.nodeType) {\n            //     case NodeType.AsgLsh:\n            //     case NodeType.AsgRsh:\n            //     case NodeType.AsgRs2:\n            //     case NodeType.AsgSub:\n            //     case NodeType.AsgMul:\n            //     case NodeType.AsgDiv:\n            //     case NodeType.AsgMod:\n            //     case NodeType.AsgOr:\n            //     case NodeType.AsgAnd:\n            //         var comparisonInfo = new TypeComparisonInfo();\n\n            //         var isAssignable = this.resolver.sourceIsAssignableToTarget(rhsType, lhsType, this.context, comparisonInfo);\n\n            //         if (!isAssignable) {\n            //             var errorMessage = comparisonInfo.message;\n            //             var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            //             var span = enclosingDecl.getSpan();\n\n            //             // ignore comparison info for now\n            //             var message = getDiagnosticMessage(PullDiagnosticMessages.incompatibleTypes_2, [rhsType.toString(), lhsType.toString()]);\n\n            //             this.context.postError(binex.operand1.minChar, binex.operand1.getLength(), typeCheckContext.scriptName, message, enclosingDecl);\n            //         }\n\n            //     default:\n            //         break;\n            // }\n\n            return this.semanticInfoChain.numberTypeSymbol;\n        }\n\n        // Unary arithmetic expressions \n        // validate:\n        //  -\n        public typeCheckUnaryArithmeticOperation(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var unex = <UnaryExpression>ast;\n            var lhsType = this.typeCheckAST(unex.operand, typeCheckContext);\n                        \n            var lhsIsFit = lhsType == this.semanticInfoChain.anyTypeSymbol || lhsType == this.semanticInfoChain.numberTypeSymbol || lhsType.getKind() == PullElementKind.Enum;\n\n            if (!lhsIsFit) {\n                this.postError(unex.operand.minChar, unex.operand.getLength(), typeCheckContext.scriptName, \"The type of a unary arithmetic operation operand must be of type \'any\', \'number\' or an enum type\", typeCheckContext.getEnclosingDecl());\n            }           \n\n            return lhsType;\n        }\n\n        // Index expression \n        // validate:\n        //  -\n        public typeCheckIndex(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var type = this.resolver.resolveAST(ast, false, typeCheckContext.getEnclosingDecl(), this.context).getType();\n            this.checkForResolutionError(type, typeCheckContext.getEnclosingDecl());\n            return type;\n        }\n\n        // \'typeof\' expression \n        // validate:\n        //  -\n        public typeCheckTypeOf(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            this.typeCheckAST((<UnaryExpression>ast).operand, typeCheckContext);\n\n            return this.semanticInfoChain.stringTypeSymbol;\n        }\n\n        // Type reference expression\n        // validate:\n        //  -\n        public typeCheckTypeReference(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var type = this.resolver.resolveAST(ast, false, typeCheckContext.getEnclosingDecl(), this.context).getType();\n            this.checkForResolutionError(type, typeCheckContext.getEnclosingDecl());\n            return type;\n        }\n\n        // Conditional expressions\n        // validate:\n        //  -\n        public typeCheckConditionalExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n\n            var condAST = <ConditionalExpression>ast;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var type = this.resolver.resolveAST(ast, false, enclosingDecl, this.context).getType();\n\n            this.checkForResolutionError(type, enclosingDecl);\n\n            this.typeCheckAST(condAST.operand1, typeCheckContext);\n            this.typeCheckAST(condAST.operand2, typeCheckContext);\n            this.typeCheckAST(condAST.operand3, typeCheckContext);\n\n            return type;\n        }\n\n        // new expression types\n        public typeCheckThrowExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var type = this.resolver.resolveAST((<UnaryExpression>ast).operand, false, typeCheckContext.getEnclosingDecl(), this.context).getType();\n            this.checkForResolutionError(type, typeCheckContext.getEnclosingDecl());\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        public typeCheckDeleteExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var unex = <UnaryExpression>ast;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var type = this.resolver.resolveAST(ast, false, enclosingDecl, this.context).getType();\n            this.checkForResolutionError(type, enclosingDecl);\n            this.typeCheckAST(unex.operand, typeCheckContext);\n\n            return type;\n        }\n\n        public typeCheckVoidExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var unex = <UnaryExpression>ast;\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var type = this.resolver.resolveAST(ast, false, enclosingDecl, this.context).getType();\n            this.checkForResolutionError(type, enclosingDecl);\n            this.typeCheckAST(unex.operand, typeCheckContext);\n\n            return type;\n        }\n\n        public typeCheckRegExpExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var type = this.resolver.resolveStatementOrExpression(ast, false, typeCheckContext.getEnclosingDecl(), this.context).getType();\n            this.checkForResolutionError(type, typeCheckContext.getEnclosingDecl());\n            return type;\n        }\n\n        // statements\n\n        public typeCheckForStatement(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var forStatementAST = <ForStatement>ast;\n\n            this.typeCheckAST(forStatementAST.init, typeCheckContext);\n            this.typeCheckAST(forStatementAST.cond, typeCheckContext);\n            this.typeCheckAST(forStatementAST.body, typeCheckContext);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        public typeCheckForInStatement(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n\n            var forInStatement = <ForInStatement>ast;\n\n            var rhsType = this.resolver.widenType(this.typeCheckAST(forInStatement.obj, typeCheckContext));\n\n            var varDecl = <VarDecl>forInStatement.lval;\n\n            if (varDecl.typeExpr) {\n                this.postError(varDecl.minChar, varDecl.getLength(), typeCheckContext.scriptName, \"Variable declarations for for/in expressions may not contain a type annotation\", typeCheckContext.getEnclosingDecl());\n            }\n\n            var varSym = this.resolver.resolveAST(varDecl, false, typeCheckContext.getEnclosingDecl(), this.context);\n            this.checkForResolutionError(varSym.getType(), typeCheckContext.getEnclosingDecl());\n\n            var isStringOrAny = varSym.getType() == this.semanticInfoChain.stringTypeSymbol || varSym.getType() == this.semanticInfoChain.anyTypeSymbol;\n            var isValidRHS = rhsType && (rhsType == this.semanticInfoChain.anyTypeSymbol || !rhsType.isPrimitive());\n\n            if (!isStringOrAny) {\n                this.postError(varDecl.minChar, varDecl.getLength(), typeCheckContext.scriptName, \"Variable declarations for for/in expressions may only be of types \'string\' or \'any\'\", typeCheckContext.getEnclosingDecl());\n            }\n\n            if (!isValidRHS) {\n                this.postError(forInStatement.obj.minChar, forInStatement.obj.getLength(), typeCheckContext.scriptName, \"The right operand of a for/in expression must be of type \'any\', an object type or a type parameter\", typeCheckContext.getEnclosingDecl());\n            }\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        public typeCheckInExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var binex = <BinaryExpression>ast;\n\n            var lhsType = this.resolver.widenType(this.typeCheckAST(binex.operand1, typeCheckContext));\n            var rhsType = this.resolver.widenType(this.typeCheckAST(binex.operand2, typeCheckContext));\n\n            var isStringOrAny = lhsType.getType() == this.semanticInfoChain.stringTypeSymbol || lhsType.getType() == this.semanticInfoChain.anyTypeSymbol;\n            var isValidRHS = rhsType && (rhsType == this.semanticInfoChain.anyTypeSymbol || !rhsType.isPrimitive());\n\n            if (!isStringOrAny) {\n                this.postError(binex.operand1.minChar, binex.operand1.getLength(), typeCheckContext.scriptName, \"The left-hand side of an \'in\' expression may only be of types \'string\' or \'any\'\", typeCheckContext.getEnclosingDecl());\n            }\n\n            if (!isValidRHS) {\n\n                this.postError(binex.operand1.minChar, binex.operand1.getLength(), typeCheckContext.scriptName, \"The right-hand side of an \'in\' expression must be of type \'any\', an object type or a type parameter\", typeCheckContext.getEnclosingDecl());\n            }        \n\n            return this.semanticInfoChain.boolTypeSymbol;\n        }\n\n        public typeCheckInstanceOfExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var binex = <BinaryExpression>ast;\n\n            var lhsType = this.resolver.widenType(this.typeCheckAST(binex.operand1, typeCheckContext));\n            var rhsType = this.typeCheckAST(binex.operand2, typeCheckContext);\n\n            var isValidLHS = lhsType && (lhsType == this.semanticInfoChain.anyTypeSymbol || !lhsType.isPrimitive());\n            var isValidRHS = rhsType && (rhsType == this.semanticInfoChain.anyTypeSymbol || this.resolver.typeIsSubtypeOfFunction(rhsType, this.context))\n\n            if (!isValidLHS) {\n                this.postError(binex.operand1.minChar, binex.operand1.getLength(), typeCheckContext.scriptName, \"The left-hand side of an \'instanceOf\' expression must be of type \'any\', an object type or a type parameter\", typeCheckContext.getEnclosingDecl());\n            }\n\n            if (!isValidRHS) {\n                this.postError(binex.operand1.minChar, binex.operand1.getLength(), typeCheckContext.scriptName, \"The right-hand side of an \'instanceOf\' expression must be of type Any or a subtype of the \'Function\' interface type\", typeCheckContext.getEnclosingDecl());\n            }\n\n            return this.semanticInfoChain.boolTypeSymbol;\n        }\n\n        private typeCheckParenthesizedExpression(ast: ParenthesizedExpression, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            return this.typeCheckAST(ast.expression, typeCheckContext);\n        }\n\n        public typeCheckWhileStatement(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var whileStatementAST = <WhileStatement>ast;\n\n            this.typeCheckAST(whileStatementAST.cond, typeCheckContext);\n            this.typeCheckAST(whileStatementAST.body, typeCheckContext);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        public typeCheckDoWhileStatement(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var whileStatementAST = <DoWhileStatement>ast;\n\n            this.typeCheckAST(whileStatementAST.cond, typeCheckContext);\n            this.typeCheckAST(whileStatementAST.body, typeCheckContext);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        public typeCheckIfStatement(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n\n            var ifStatementAST = <IfStatement>ast;\n\n            this.typeCheckAST(ifStatementAST.cond, typeCheckContext);\n            this.typeCheckAST(ifStatementAST.thenBod, typeCheckContext);\n            this.typeCheckAST(ifStatementAST.elseBod, typeCheckContext);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        public typeCheckBlockStatement(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var blockStatement = <Block>ast;\n\n            this.typeCheckAST(blockStatement.statements, typeCheckContext);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        public typeCheckWithStatement(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            // PULLTODO: \"With\" statements\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        public typeCheckTryStatement(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var tryStatementAST = <TryStatement>ast;\n\n            this.typeCheckAST(tryStatementAST.tryBody, typeCheckContext);\n            this.typeCheckAST(tryStatementAST.catchClause, typeCheckContext);\n            this.typeCheckAST(tryStatementAST.finallyBody, typeCheckContext);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        public typeCheckCatchClause(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var catchAST = <CatchClause>ast;\n\n            this.typeCheckAST(catchAST.body, typeCheckContext);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        public typeCheckReturnExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var returnAST = <ReturnStatement>ast;\n            typeCheckContext.setEnclosingDeclHasReturn();\n            var returnType = this.typeCheckAST(returnAST.returnExpression, typeCheckContext);\n\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            if (enclosingDecl.getKind() & PullElementKind.SomeFunction) {\n                var signatureSymbol = enclosingDecl.getSignatureSymbol();\n                var sigReturnType = signatureSymbol.getReturnType();\n\n                if (returnType && sigReturnType) {\n                    var comparisonInfo = new TypeComparisonInfo();\n                    var upperBound: PullTypeSymbol = null;\n\n                    if (returnType.isTypeParameter()) {\n                        upperBound = (<PullTypeParameterSymbol>returnType).getConstraint();\n\n                        if (upperBound) {\n                            returnType = upperBound;\n                        }\n                    }\n\n                    if (sigReturnType.isTypeParameter()) {\n                        upperBound = (<PullTypeParameterSymbol>sigReturnType).getConstraint();\n\n                        if (upperBound) {\n                            sigReturnType = upperBound;\n                        }\n                    }\n\n                    if (!returnType.isResolved()) {\n                        this.resolver.resolveDeclaredSymbol(returnType, enclosingDecl, this.context);\n                    }\n\n                    if (!sigReturnType.isResolved()) {\n                        this.resolver.resolveDeclaredSymbol(sigReturnType, enclosingDecl, this.context);\n                    }\n\n                    var isAssignable = this.resolver.sourceIsAssignableToTarget(returnType, sigReturnType, this.context, comparisonInfo);\n\n                    if (!isAssignable) {\n\n                        // ignore comparison info for now\n                        var message = getDiagnosticMessage(DiagnosticCode.Cannot_convert__0__to__1_, [returnType.toString(), sigReturnType.toString()]);\n\n                        this.postError(ast.minChar, ast.getLength(), typeCheckContext.scriptName, message, enclosingDecl);\n                    }\n                }\n            }\n\n            return returnType;\n        }\n\n        public typeCheckNameExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var type = this.resolver.resolveNameExpression(<Identifier>ast, enclosingDecl, this.context).getType();\n            this.checkForResolutionError(type, enclosingDecl);\n            return type;\n        }\n\n        public typeCheckDottedNameExpression(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var type = this.resolver.resolveDottedNameExpression(<BinaryExpression>ast, enclosingDecl, this.context).getType();\n            this.checkForResolutionError(type, enclosingDecl);\n            return type;\n        }\n\n        public typeCheckSwitchStatement(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var switchAST = <SwitchStatement>ast;\n\n            this.typeCheckAST(switchAST.val, typeCheckContext);\n            this.typeCheckAST(switchAST.caseList, typeCheckContext);\n            this.typeCheckAST(switchAST.defaultCase, typeCheckContext);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private typeCheckExpressionStatement(ast: ExpressionStatement, typeCheckContext: PullTypeCheckContext, inTypedAssignment: bool): PullTypeSymbol {\n            return this.typeCheckAST(ast.expression, typeCheckContext, inTypedAssignment);\n        }\n\n        public typeCheckCaseClause(ast: AST, typeCheckContext: PullTypeCheckContext): PullTypeSymbol {\n            var caseAST = <CaseClause>ast;\n\n            this.typeCheckAST(caseAST.expr, typeCheckContext);\n            this.typeCheckAST(caseAST.body, typeCheckContext);\n\n            return this.semanticInfoChain.voidTypeSymbol;\n        }\n\n        private checkTypePrivacy(declSymbol: PullSymbol, typeSymbol: PullTypeSymbol, privacyErrorReporter: (typeSymbol: PullTypeSymbol) => void ) {\n            if (!typeSymbol || typeSymbol.getKind() == PullElementKind.Primitive) {\n                return;\n            }\n\n            if (typeSymbol.isArray()) {\n                this.checkTypePrivacy(declSymbol, (<PullArrayTypeSymbol>typeSymbol).getElementType(), privacyErrorReporter);\n                return;\n            }\n\n            if (!typeSymbol.isNamedTypeSymbol()) {\n                // Check the privacy of members, constructors, calls, index signatures\n                var members = typeSymbol.getMembers();\n                for (var i = 0; i < members.length; i++) {\n                    this.checkTypePrivacy(declSymbol, members[i].getType(), privacyErrorReporter);\n                }\n\n                this.checkTypePrivacyOfSignatures(declSymbol, typeSymbol.getCallSignatures(), privacyErrorReporter);\n                this.checkTypePrivacyOfSignatures(declSymbol, typeSymbol.getConstructSignatures(), privacyErrorReporter);\n                this.checkTypePrivacyOfSignatures(declSymbol, typeSymbol.getIndexSignatures(), privacyErrorReporter);\n\n                return;\n            }\n\n            // Check flags for the symbol itself\n            if (declSymbol.isExternallyVisible()) {\n                // Check if type symbol is externally visible\n                var typeSymbolIsVisible = typeSymbol.isExternallyVisible();\n                // If Visible check if the type is part of dynamic module\n                if (typeSymbolIsVisible) {\n                    var typeSymbolPath = typeSymbol.pathToRoot();\n                    if (typeSymbolPath.length && typeSymbolPath[typeSymbolPath.length - 1].getKind() == PullElementKind.DynamicModule) {\n                        // Type from the dynamic module\n                        var declSymbolPath = declSymbol.pathToRoot();\n                        if (declSymbolPath.length && declSymbolPath[declSymbolPath.length - 1] != typeSymbolPath[typeSymbolPath.length - 1]) {\n                            // Declaration symbol is from different unit\n                            var aliasSymbol = (<PullContainerTypeSymbol>typeSymbolPath[typeSymbolPath.length - 1]).getAliasedSymbol(declSymbol);\n                            if (aliasSymbol) {\n                                // Visible type.\n                                // Also mark this Import declaration as visible\n                                CompilerDiagnostics.assert(aliasSymbol.getKind() == PullElementKind.TypeAlias, \"dynamic module need to be referenced by type alias\");\n                                (<PullTypeAliasSymbol>aliasSymbol).setIsTypeUsedExternally();\n                            } else {\n                                // Type from different module without import statement\n                                typeSymbolIsVisible = false;\n                            }\n                        }\n                    }\n                }\n\n                if (!typeSymbolIsVisible) {\n                    // declaration is visible from outside but the type isnt - Report error\n                    privacyErrorReporter(typeSymbol);\n                }\n            }\n        }\n\n\n        private checkTypePrivacyOfSignatures(declSymbol: PullSymbol, signatures: PullSignatureSymbol[], privacyErrorReporter: (typeSymbol: PullTypeSymbol) => void ) {\n            for (var i = 0; i < signatures.length; i++) {\n                var signature = signatures[i];\n                if (signatures.length && signature.isDefinition()) {\n                    continue;\n                }\n\n                var typeParams = signature.getTypeParameters();\n                for (var j = 0; j < typeParams.length; j++) {\n                    this.checkTypePrivacy(declSymbol, typeParams[j], privacyErrorReporter);\n                }\n\n                var params = signature.getParameters();\n                for (j = 0 ; j < params.length; j++) {\n                    var paramType = params[j].getType();\n                    this.checkTypePrivacy(declSymbol, paramType, privacyErrorReporter);\n                }\n\n                var returnType = signature.getReturnType();\n                this.checkTypePrivacy(declSymbol, returnType, privacyErrorReporter);\n            }\n        }\n\n        private checkBaseListTypePrivacy(declAST: TypeDeclaration, declSymbol: PullTypeSymbol, extendsList: bool, typeCheckContext: PullTypeCheckContext) {\n            var basesList: PullTypeSymbol[];\n            if (extendsList) {\n                basesList = declSymbol.getExtendedTypes();\n            } else {\n                basesList = declSymbol.getImplementedTypes();\n            }\n\n            for (var i = 0; i < basesList.length; i++) {\n                this.checkTypePrivacy(declSymbol, basesList[i], (typeSymbol: PullTypeSymbol) =>\n                    this.baseListPrivacyErrorReporter(declAST, declSymbol, extendsList, i, typeSymbol, typeCheckContext));\n            }\n        }\n\n        private baseListPrivacyErrorReporter(declAST: TypeDeclaration, declSymbol: PullTypeSymbol, extendsList: bool, index: number, typeSymbol: PullTypeSymbol, typeCheckContext: PullTypeCheckContext) {\n            var baseList = extendsList ? declAST.extendsList : declAST.implementsList;\n            var decl: PullDecl = this.resolver.getDeclForAST(declAST);\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n            var message: string;\n\n            var typeSymbolName = typeSymbol.getScopedName();\n            if (typeSymbol.isContainer()) {\n                if (!isQuoted(typeSymbolName)) {\n                    typeSymbolName = \"\'\" + typeSymbolName + \"\'\";\n                }\n                if (declAST.nodeType == NodeType.ClassDeclaration) {\n                    // Class\n                    if (extendsList) {\n                        message = getDiagnosticMessage(DiagnosticCode.Exported_class__0__extends_class_from_private_module__1_, [declSymbol.getScopedName(), typeSymbolName]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Exported_class__0__implements_interface_from_private_module__1_, [declSymbol.getScopedName(), typeSymbolName]);\n                    }\n                } else {\n                    // Interface\n                    message = getDiagnosticMessage(DiagnosticCode.Exported_interface__0__extends_interface_from_private_module__1_, [declSymbol.getName(), typeSymbolName]);\n                }\n            } else {\n                if (declAST.nodeType == NodeType.ClassDeclaration) {\n                    // Class\n                    if (extendsList) {\n                        message = getDiagnosticMessage(DiagnosticCode.Exported_class__0__extends_private_class__1_, [declSymbol.getScopedName(), typeSymbolName]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Exported_class__0__implements_private_interface__1_, [declSymbol.getScopedName(), typeSymbolName]);\n                    }\n                } else {\n                    // Interface\n                    message = getDiagnosticMessage(DiagnosticCode.Exported_interface__0__extends_private_interface__1_, [declSymbol.getName(), typeSymbolName]);\n                }\n            }\n\n            this.context.postError(baseList.members[index].minChar, baseList.members[index].getLength(), typeCheckContext.scriptName, message, enclosingDecl);\n        }\n\n        private variablePrivacyErrorReporter(declSymbol: PullSymbol, typeSymbol: PullTypeSymbol, typeCheckContext: PullTypeCheckContext) {\n            var declAST = <VarDecl>this.resolver.getASTForSymbol(declSymbol);\n            var decl: PullDecl = this.resolver.getDeclForAST(declAST);\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var isProperty = declSymbol.getKind() == PullElementKind.Property;\n            var isPropertyOfClass = false;\n            var declParent = declSymbol.getContainer();\n            if (declParent && (declParent.getKind() == PullElementKind.Class || declParent.getKind() == PullElementKind.ConstructorMethod)) {\n                isPropertyOfClass = true;\n            }\n\n            var message: string;\n            var typeSymbolName = typeSymbol.getScopedName();\n            if (typeSymbol.isContainer()) {\n                if (!isQuoted(typeSymbolName)) {\n                    typeSymbolName = \"\'\" + typeSymbolName + \"\'\";\n                }\n\n                if (decl.getFlags() & PullElementFlags.Static) {\n                    message = getDiagnosticMessage(DiagnosticCode.Public_static_property__0__of__exported_class_is_using_inaccessible_module__1_, [declSymbol.getScopedName(), typeSymbolName]);\n                } else if (isProperty) {\n                    if (isPropertyOfClass) {\n                        message = getDiagnosticMessage(DiagnosticCode.Public_property__0__of__exported_class_is_using_inaccessible_module__1_, [declSymbol.getScopedName(), typeSymbolName]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Property__0__of__exported_interface_is_using_inaccessible_module__1_, [declSymbol.getScopedName(), typeSymbolName]);\n                    }\n                } else {\n                    message = getDiagnosticMessage(DiagnosticCode.Exported_variable__0__is_using_inaccessible_module__1_, [declSymbol.getScopedName(), typeSymbolName]);\n                }\n            } else {\n                if (decl.getFlags() & PullElementFlags.Static) {\n                    message = getDiagnosticMessage(DiagnosticCode.Public_static_property__0__of__exported_class_has_or_is_using_private_type__1_, [declSymbol.getScopedName(), typeSymbolName]);\n                } else if (isProperty) {\n                    if (isPropertyOfClass) {\n                        message = getDiagnosticMessage(DiagnosticCode.Public_property__0__of__exported_class_has_or_is_using_private_type__1_, [declSymbol.getScopedName(), typeSymbolName]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Property__0__of__exported_interface_has_or_is_using_private_type__1_, [declSymbol.getScopedName(), typeSymbolName]);\n                    }\n                } else {\n                    message = getDiagnosticMessage(DiagnosticCode.Exported_variable__0__has_or_is_using_private_type__1_, [declSymbol.getScopedName(), typeSymbolName]);\n                }\n            }\n\n            this.context.postError(declAST.minChar, declAST.getLength(), typeCheckContext.scriptName, message, enclosingDecl);\n        }\n\n        private checkFunctionTypePrivacy(funcDeclAST: FuncDecl, inTypedAssignment: bool, typeCheckContext: PullTypeCheckContext) {\n            if (inTypedAssignment || (funcDeclAST.getFunctionFlags() & FunctionFlags.IsFunctionExpression)) {\n                return;\n            }\n\n            var functionDecl = typeCheckContext.semanticInfo.getDeclForAST(funcDeclAST);\n            var functionSymbol = functionDecl.getSymbol();;\n            var functionSignature: PullSignatureSymbol;\n\n            var isGetter = funcDeclAST.isGetAccessor();\n            var isSetter = funcDeclAST.isSetAccessor();\n            \n            if (isGetter || isSetter) {\n                var accessorSymbol = <PullAccessorSymbol> functionSymbol;\n                functionSignature = (isGetter ? accessorSymbol.getGetter() : accessorSymbol.getSetter()).getType().getCallSignatures()[0];\n            } else {\n                if (!functionSymbol) {\n                    var parentDecl = functionDecl.getParentDecl();\n                    functionSymbol = parentDecl.getSymbol();\n                    if (functionSymbol && functionSymbol.isType() && !(<PullTypeSymbol>functionSymbol).isNamedTypeSymbol()) {\n                        // Signature from the non named type\n                        return;\n                    }\n                }\n                functionSignature = functionDecl.getSignatureSymbol();\n            }\n\n            // Check function parameters\n            if (!isGetter) {\n                var funcParams = functionSignature.getParameters();\n                for (var i = 0; i < funcParams.length; i++) {\n                    this.checkTypePrivacy(functionSymbol, funcParams[i].getType(), (typeSymbol: PullTypeSymbol) =>\n                        this.functionArgumentTypePrivacyErrorReporter(funcDeclAST, i, funcParams[i], typeSymbol, typeCheckContext));\n                }\n            }\n\n            // Check return type\n            if (!isSetter) {\n                this.checkTypePrivacy(functionSymbol, functionSignature.getReturnType(), (typeSymbol: PullTypeSymbol) =>\n                    this.functionReturnTypePrivacyErrorReporter(funcDeclAST, functionSignature.getReturnType(), typeSymbol, typeCheckContext));\n            }\n        }\n\n        private functionArgumentTypePrivacyErrorReporter(declAST: FuncDecl, argIndex: number, paramSymbol: PullSymbol, typeSymbol: PullTypeSymbol, typeCheckContext: PullTypeCheckContext) {\n            var decl: PullDecl = this.resolver.getDeclForAST(declAST);\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var isGetter = declAST.isAccessor() && hasFlag(declAST.getFunctionFlags(), FunctionFlags.GetAccessor);\n            var isSetter = declAST.isAccessor() && hasFlag(declAST.getFunctionFlags(), FunctionFlags.SetAccessor);\n            var isStatic = (decl.getFlags() & PullElementFlags.Static) == PullElementFlags.Static;\n            var isMethod = decl.getKind() == PullElementKind.Method;\n            var isMethodOfClass = false;\n            var declParent = decl.getParentDecl();\n            if (declParent && (declParent.getKind() == PullElementKind.Class || declParent.getKind() == PullElementKind.ConstructorMethod)) {\n                isMethodOfClass = true;\n            }\n\n            var message: string = null;\n            var typeSymbolName = typeSymbol.getScopedName();\n            if (typeSymbol.isContainer()) {\n                if (!isQuoted(typeSymbolName)) {\n                    typeSymbolName = \"\'\" + typeSymbolName + \"\'\";\n                }\n\n                if (declAST.isConstructor) {\n                    message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_constructor_from_exported_class_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                } else if (isSetter) {\n                    if (isStatic) {\n                        message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_public_static_property_setter_from_exported_class_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_public_property_setter_from_exported_class_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                    }\n                } else if (declAST.isConstructMember()) {\n                    message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_constructor_signature_from_exported_interface_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                } else if (declAST.isCallMember()) {\n                    message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_call_signature_from_exported_interface_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                } else if (isMethod) {\n                    if (isStatic) {\n                        message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_public_static_method_from_exported_class_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                    } else if (isMethodOfClass) {\n                        message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_public_method_from_exported_class_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_method_from_exported_interface_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                    }\n                } else if (!isGetter) {\n                    message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_exported_function_is_using_inaccessible_module__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                }\n            } else {\n                if (declAST.isConstructor) {\n                    message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_constructor_from_exported_class_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                } else if (isSetter) {\n                    if (isStatic) {\n                        message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_public_static_property_setter_from_exported_class_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_public_property_setter_from_exported_class_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                    }\n                } else if (declAST.isConstructMember()) {\n                    message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_constructor_signature_from_exported_interface_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                } else if (declAST.isCallMember()) {\n                    message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_call_signature_from_exported_interface_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                } else if (isMethod) {\n                    if (isStatic) {\n                        message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_public_static_method_from_exported_class_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                    } else if (isMethodOfClass) {\n                        message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_public_method_from_exported_class_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_method_from_exported_interface_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                    }\n                } else if (!isGetter && !declAST.isIndexerMember()) {\n                    message = getDiagnosticMessage(DiagnosticCode.Parameter__0__of_exported_function_has_or_is_using_private_type__1_, [paramSymbol.getScopedName(), typeSymbolName]);\n                }\n            }\n\n            if (message) {\n                this.context.postError(declAST.arguments.members[argIndex].minChar, declAST.arguments.members[argIndex].getLength(), typeCheckContext.scriptName, message, enclosingDecl);\n            }\n        }\n\n        private functionReturnTypePrivacyErrorReporter(declAST: FuncDecl, funcReturnType: PullTypeSymbol, typeSymbol: PullTypeSymbol, typeCheckContext: PullTypeCheckContext) {\n            var decl: PullDecl = this.resolver.getDeclForAST(declAST);\n            var enclosingDecl = typeCheckContext.getEnclosingDecl();\n\n            var isGetter = declAST.isAccessor() && hasFlag(declAST.getFunctionFlags(), FunctionFlags.GetAccessor);\n            var isSetter = declAST.isAccessor() && hasFlag(declAST.getFunctionFlags(), FunctionFlags.SetAccessor);\n            var isStatic = (decl.getFlags() & PullElementFlags.Static) == PullElementFlags.Static;\n            var isMethod = decl.getKind() == PullElementKind.Method;\n            var isMethodOfClass = false;\n            var declParent = decl.getParentDecl();\n            if (declParent && (declParent.getKind() == PullElementKind.Class || declParent.getKind() == PullElementKind.ConstructorMethod)) {\n                isMethodOfClass = true;\n            }\n\n            var message: string = null;\n            var typeSymbolName = typeSymbol.getScopedName();\n            if (typeSymbol.isContainer()) {\n                if (!isQuoted(typeSymbolName)) {\n                    typeSymbolName = \"\'\" + typeSymbolName + \"\'\";\n                }\n\n                if (isGetter) {\n                    if (isStatic) {\n                        message = getDiagnosticMessage(DiagnosticCode.Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module__0_, [typeSymbolName]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module__0_, [typeSymbolName]);\n                    }\n                } else if (declAST.isConstructMember()) {\n                    message = getDiagnosticMessage(DiagnosticCode.Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module__0_, [typeSymbolName]);\n                } else if (declAST.isCallMember()) {\n                    message = getDiagnosticMessage(DiagnosticCode.Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module__0_, [typeSymbolName]);\n                } else if (declAST.isIndexerMember()) {\n                    message = getDiagnosticMessage(DiagnosticCode.Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module__0_, [typeSymbolName]);\n                } else if (isMethod) {\n                    if (isStatic) {\n                        message = getDiagnosticMessage(DiagnosticCode.Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module__0_, [typeSymbolName]);\n                    } else if (isMethodOfClass) {\n                        message = getDiagnosticMessage(DiagnosticCode.Return_type_of_public_method_from_exported_class_is_using_inaccessible_module__0_, [typeSymbolName]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Return_type_of_method_from_exported_interface_is_using_inaccessible_module__0_, [typeSymbolName]);\n                    }\n                } else if (!isSetter && !declAST.isConstructor) {\n                    message = getDiagnosticMessage(DiagnosticCode.Return_type_of_exported_function_is_using_inaccessible_module__0_, [typeSymbolName]);\n                }\n            } else {\n                if (isGetter) {\n                    if (isStatic) {\n                        message = getDiagnosticMessage(DiagnosticCode.Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type__0_, [typeSymbolName]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type__0_, [typeSymbolName]);\n                    }\n                } else if (declAST.isConstructMember()) {\n                    message = getDiagnosticMessage(DiagnosticCode.Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type__0_, [typeSymbolName]);\n                } else if (declAST.isCallMember()) {\n                    message = getDiagnosticMessage(DiagnosticCode.Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type__0_, [typeSymbolName]);\n                } else if (declAST.isIndexerMember()) {\n                    message = getDiagnosticMessage(DiagnosticCode.Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type__0_, [typeSymbolName]);\n                } else if (isMethod) {\n                    if (isStatic) {\n                        message = getDiagnosticMessage(DiagnosticCode.Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type__0_, [typeSymbolName]);\n                    } else if (isMethodOfClass) {\n                        message = getDiagnosticMessage(DiagnosticCode.Return_type_of_public_method_from_exported_class_has_or_is_using_private_type__0_, [typeSymbolName]);\n                    } else {\n                        message = getDiagnosticMessage(DiagnosticCode.Return_type_of_method_from_exported_interface_has_or_is_using_private_type__0_, [typeSymbolName]);\n                    }\n                } else if (!isSetter && !declAST.isConstructor) {\n                    message = getDiagnosticMessage(DiagnosticCode.Return_type_of_exported_function_has_or_is_using_private_type__0_, [typeSymbolName]);\n                }\n            }\n\n            if (message) {\n                var reportOnFuncDecl = false;\n                var contextForReturnTypeResolution = new PullTypeResolutionContext();\n                var returnExpressionSymbol: PullTypeSymbol;\n                if (declAST.returnTypeAnnotation != null) {\n                    var returnTypeRef = <TypeReference>declAST.returnTypeAnnotation;\n                    returnExpressionSymbol = this.resolver.resolveTypeReference(returnTypeRef, decl, contextForReturnTypeResolution);\n                    if (returnExpressionSymbol == funcReturnType) {\n                        // Error coming from return annotation\n                        this.context.postError(declAST.returnTypeAnnotation.minChar, declAST.returnTypeAnnotation.getLength(), typeCheckContext.scriptName, message, enclosingDecl);\n                    }\n                }\n\n                if (declAST.bod) {\n                    var reportErrorOnReturnExpressions = (ast: AST, parent: AST, walker: IAstWalker) => {\n                        var go = true;\n                        switch (ast.nodeType) {\n                            case NodeType.FuncDecl:\n                                // don\'t recurse into a function decl - we don\'t want to confuse a nested\n                                // return type with the top-level function\'s return type\n                                go = false;\n                                break;\n\n                            case NodeType.ReturnStatement:\n                                var returnStatement: ReturnStatement = <ReturnStatement>ast;\n                                returnExpressionSymbol = this.resolver.resolveStatementOrExpression(returnStatement.returnExpression, false, decl, contextForReturnTypeResolution).getType();\n                                // Check if return statement\'s type matches the one that we concluded\n                                if (returnExpressionSymbol == funcReturnType) {\n                                    this.context.postError(returnStatement.minChar, returnStatement.getLength(), typeCheckContext.scriptName, message, enclosingDecl);\n                                } else {\n                                    reportOnFuncDecl = true;\n                                }\n                                go = false;\n                                break;\n\n                            default:\n                                break;\n                        }\n\n                        walker.options.goChildren = go;\n                        return ast;\n                    }\n\n                    getAstWalkerFactory().walk(declAST.bod, reportErrorOnReturnExpressions);\n                }\n\n                if (reportOnFuncDecl) {\n                    // Show on function decl\n                    this.context.postError(declAST.minChar, declAST.getLength(), typeCheckContext.scriptName, message, enclosingDecl);\n                }\n            }\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export enum PullDeclEdit {\n        NoChanges,\n        DeclAdded,\n        DeclRemoved,\n        DeclChanged,\n    }\n\n    export class PullDeclDiff {\n        constructor(public oldDecl: PullDecl, public newDecl: PullDecl, public kind: PullDeclEdit) {\n        }\n    }\n\n    export class PullDeclDiffer {\n        private differences: PullDeclDiff[] = [];\n\n        constructor(private oldSemanticInfo: SemanticInfo,\n                    private newSemanticInfo: SemanticInfo) {\n        }\n\n        public static diffDecls(oldDecl: PullDecl,\n                                oldSemanticInfo: SemanticInfo,\n                                newDecl: PullDecl,\n                                newSemanticInfo: SemanticInfo): PullDeclDiff[]{\n            var declDiffer = new PullDeclDiffer(oldSemanticInfo, newSemanticInfo);\n            declDiffer.diff(oldDecl, newDecl);\n            return declDiffer.differences;\n        }\n\n        // For now, just check for there/not there - we\'ll invalidate the inference symbols anyway\n        // next up, we\'ll want to use this data to find the decl that changed\n        private diff(oldDecl: PullDecl, newDecl: PullDecl): void {\n            Debug.assert(oldDecl.getName() === newDecl.getName());\n            Debug.assert(oldDecl.getKind() === newDecl.getKind());\n\n            var oldAST = this.oldSemanticInfo.getASTForDecl(oldDecl);\n            var newAST = this.newSemanticInfo.getASTForDecl(newDecl);\n            Debug.assert(oldAST !== undefined);\n            Debug.assert(newAST !== undefined);\n\n            // If the AST\'s are the same, then there\'s nothing we need to do.\n            if (oldAST === newAST) {\n                return;\n            }\n\n            // Not the same ast, walk this decl and find all the differences.\n            this.diff1(oldDecl, newDecl, oldAST, newAST, oldDecl.childDeclTypeCache, newDecl.childDeclTypeCache);\n            this.diff1(oldDecl, newDecl, oldAST, newAST, oldDecl.childDeclTypeParameterCache, newDecl.childDeclTypeParameterCache);\n            this.diff1(oldDecl, newDecl, oldAST, newAST, oldDecl.childDeclValueCache, newDecl.childDeclValueCache);\n\n            if (!this.isEquivalent(oldAST, newAST)) {\n                this.differences.push(new PullDeclDiff(oldDecl, newDecl, PullDeclEdit.DeclChanged));\n            }\n        }\n\n        private static emptyDeclArray: PullDecl[] = [];\n\n        private diff1(oldDecl: PullDecl,\n                      newDecl: PullDecl,\n                      oldAST: AST,\n                      newAST: AST,\n                      oldNameToDecls: any,\n                      newNameToDecls: any): void {\n            var i = 0;\n            var n = 0;\n            var oldChildrenOfName: PullDecl[];\n            var newChildrenOfName: PullDecl[];\n            var oldChild: PullDecl;\n            var newChild: PullDecl;\n            var name: string;\n\n            // The old decl and new decl have names mapping to lists of children with that name.  \n            // For each name we can have the following cases:\n            //\n            //      name -> [oldDeclChild1,      ...,           oldDeclChild_n]\n            //      name -> [newDeclChild1, ..., newDeclChild_j]\n            //\n            //  or\n            //\n            //      name -> [oldDeclChild1, ..., oldDeclChild_n]\n            //      name -> [newDeclChild1, ..., newDeclChild_j]\n            //\n            //  or\n            //\n            //      name -> [oldDeclChild1, ..., oldDeclChild_n]\n            //      name -> [newDeclChild1,      ...,           newDeclChild_j]\n            //\n            //\n            // i.e. n > j, n == j, n < j.\n            //\n            // For the first case, we we check all the child decls from 0 to j in the old list and \n            // the new list.  Anything past j is a decl we\'ve removed.\n            //\n            // For the last case, we check all the child decls from 0 to n in the old list and the\n            // new list.  Anything past that is an added decl.\n\n            // We have to iterate over both collections as each may have names the other does not\n            // know about.  \n            //\n            // First, use the names the old decl knows about. \n            for (name in oldNameToDecls) {\n                oldChildrenOfName = oldNameToDecls[name] || PullDeclDiffer.emptyDeclArray;\n                newChildrenOfName = newNameToDecls[name] || PullDeclDiffer.emptyDeclArray;\n\n                for (i = 0, n = oldChildrenOfName.length; i < n; i++) {\n                    oldChild = oldChildrenOfName[i];\n\n                    switch (oldChild.getKind()) {\n                        // These are decls created for ephemeral expressions.  The new decl tree\n                        // won\'t have them yet.  So we don\'t want to find diffs here.  The \n                        // compiler already knows to remove these decls and compute new ones\n                        // later.\n                        case PullElementKind.FunctionExpression:\n                        case PullElementKind.ObjectLiteral:\n                        case PullElementKind.ObjectType:\n                        case PullElementKind.FunctionType:\n                        case PullElementKind.ConstructorType:\n                            continue;\n                    }\n\n                    if (i < newChildrenOfName.length) {\n                        // Both the old decl and new decl have a child of this name.  If they\'re\n                        // the same type, check them for differences.  Otherwise, consider this\n                        // a remove/add.\n                        newChild = newChildrenOfName[i];\n\n                        if (oldChild.getKind() === newChild.getKind()) {\n                            this.diff(oldChild, newChildrenOfName[i]);\n                        }\n                        else {\n                            this.differences.push(new PullDeclDiff(oldChild, null, PullDeclEdit.DeclRemoved));\n                            this.differences.push(new PullDeclDiff(oldDecl, newChild, PullDeclEdit.DeclAdded));\n                        }\n                    }\n                    else {\n                        // Child was removed.\n                        this.differences.push(new PullDeclDiff(oldChild, null, PullDeclEdit.DeclRemoved));\n                    }\n                }\n            }\n\n            // Now use the names the new decl knows about.  \n            for (name in newNameToDecls) {\n                oldChildrenOfName = oldNameToDecls[name] || PullDeclDiffer.emptyDeclArray;\n                newChildrenOfName = newNameToDecls[name] || PullDeclDiffer.emptyDeclArray;\n\n                // If the old decl also knew about this name, then we would have taken care of this \n                // name in the loop above.  So, start iterating *after* all the children of the \n                // old decl.  \n                for (i = oldChildrenOfName.length, n = newChildrenOfName.length; i < n; i++) {\n                    newChild = newChildrenOfName[i];\n                    this.differences.push(new PullDeclDiff(oldDecl, newChild, PullDeclEdit.DeclAdded));\n                }\n            }\n        }\n\n        private isEquivalent(oldAST: AST, newAST: AST): bool {\n            Debug.assert(oldAST !== null);\n            Debug.assert(newAST !== null);\n            Debug.assert(oldAST !== newAST);\n\n            //if (oldAST === undefined || newAST === undefined) {\n            //    Debug.assert(oldAST === newAST);\n            //    return true;\n            //}\n\n            if (oldAST.nodeType !== newAST.nodeType ||\n                oldAST.getFlags() !== newAST.getFlags()) {\n                return false;\n            }\n\n            switch (oldAST.nodeType) {\n                case NodeType.ImportDeclaration:\n                    return this.importDeclarationIsEquivalent(<ImportDeclaration>oldAST, <ImportDeclaration>newAST);\n                case NodeType.ModuleDeclaration:\n                    return this.moduleDeclarationIsEquivalent(<ModuleDeclaration>oldAST, <ModuleDeclaration>newAST);\n                case NodeType.ClassDeclaration:\n                    return this.classDeclarationIsEquivalent(<ClassDeclaration>oldAST, <ClassDeclaration>newAST);\n                case NodeType.InterfaceDeclaration:\n                    return this.interfaceDeclarationIsEquivalent(<InterfaceDeclaration>oldAST, <InterfaceDeclaration>newAST);\n                case NodeType.ArgDecl:\n                    return this.argumentDeclarationIsEquivalent(<ArgDecl>oldAST, <ArgDecl>newAST);\n                case NodeType.VarDecl:\n                    return this.variableDeclarationIsEquivalent(<VarDecl>oldAST, <VarDecl>newAST);\n                case NodeType.TypeParameter:\n                    return this.typeParameterIsEquivalent(<TypeParameter>oldAST, <TypeParameter>newAST);\n                case NodeType.FuncDecl:\n                    return this.functionDeclarationIsEquivalent(<FuncDecl>oldAST, <FuncDecl>newAST);\n                case NodeType.Script:\n                    return this.scriptIsEquivalent(<Script>oldAST, <Script>newAST);\n                default:\n                    throw Errors.invalidOperation();\n            }\n        }\n\n        private importDeclarationIsEquivalent(decl1: ImportDeclaration, decl2: ImportDeclaration): bool {\n            return structuralEqualsNotIncludingPosition(decl1.alias, decl2.alias);\n        }\n\n        private typeDeclarationIsEquivalent(decl1: TypeDeclaration, decl2: TypeDeclaration): bool {\n            return decl1.getVarFlags() === decl2.getVarFlags() &&\n                   structuralEqualsNotIncludingPosition(decl1.typeParameters, decl2.typeParameters) &&\n                   structuralEqualsNotIncludingPosition(decl1.extendsList, decl2.extendsList) &&\n                   structuralEqualsNotIncludingPosition(decl1.implementsList, decl2.implementsList);\n        }\n\n        private classDeclarationIsEquivalent(decl1: ClassDeclaration, decl2: ClassDeclaration): bool {\n            return this.typeDeclarationIsEquivalent(decl1, decl2);\n        }\n\n        private interfaceDeclarationIsEquivalent(decl1: InterfaceDeclaration, decl2: InterfaceDeclaration): bool {\n            return this.typeDeclarationIsEquivalent(decl1, decl2);\n        }\n\n        private typeParameterIsEquivalent(decl1: TypeParameter, decl2: TypeParameter): bool {\n            return structuralEqualsNotIncludingPosition(decl1.constraint, decl2.constraint);\n        }\n\n        private boundDeclarationIsEquivalent(decl1: BoundDecl, decl2: BoundDecl): bool {\n            if (decl1.getVarFlags() === decl2.getVarFlags() &&\n                structuralEqualsNotIncludingPosition(decl1.typeExpr, decl2.typeExpr)) {\n\n                // So far they\'re structurally equivalent.  However, in teh case where the decls \n                // don\'t have a specified type annotation, we have to look further.  Specifically,\n                // we have to check if the initializers are the same as well. If they\'re not, \n                // then the type of the decl may have changed.\n                if (decl1.typeExpr === null) {\n                    return structuralEqualsNotIncludingPosition(decl1.init, decl2.init);\n                }\n                else {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private argumentDeclarationIsEquivalent(decl1: ArgDecl, decl2: ArgDecl): bool {\n            return this.boundDeclarationIsEquivalent(decl1, decl2) &&\n                   decl1.isOptional === decl2.isOptional;\n        }\n\n        private variableDeclarationIsEquivalent(decl1: VarDecl, decl2: VarDecl): bool {\n            return this.boundDeclarationIsEquivalent(decl1, decl2);\n        }\n\n        private baseFunctionDeclarationIsEquivalent(decl1: FuncDecl, decl2: FuncDecl, ignoreReturnType: bool): bool {\n            if (decl1.hint === decl2.hint &&\n                decl1.getFunctionFlags() === decl2.getFunctionFlags() &&\n                decl1.variableArgList === decl2.variableArgList &&\n                decl1.isConstructor === decl2.isConstructor &&\n                structuralEqualsNotIncludingPosition(decl1.returnTypeAnnotation, decl2.returnTypeAnnotation) &&\n                structuralEqualsNotIncludingPosition(decl1.typeArguments, decl2.typeArguments) &&\n                structuralEqualsNotIncludingPosition(decl1.arguments, decl2.arguments)) {\n\n                // So far they\'re structurally equivalent.  However, in teh case where the \n                // functions don\'t have a specified return type annotation, we have to look\n                // further.  Specifically, we have to check if the bodies are the same as well.\n                // If they\'re not, then the return type of the function may have changed.\n                if (!ignoreReturnType && decl1.returnTypeAnnotation === null) {\n                    return structuralEqualsNotIncludingPosition(decl1.bod, decl2.bod);\n                }\n                else {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private functionDeclarationIsEquivalent(decl1: FuncDecl, decl2: FuncDecl): bool {\n            return this.baseFunctionDeclarationIsEquivalent(decl1, decl2, /*ignoreReturnType:*/ false);\n        }\n\n        private scriptIsEquivalent(decl1: Script, decl2: Script): bool {\n            // TODO: should we check Script.referencedFiles here?  I don\'t think we need to.  \n            // After all, if that changes, then the LS will just tear us down and start over again,\n            // so we won\'t be comparing decls anyways.\n            return this.baseFunctionDeclarationIsEquivalent(decl1, decl2, /*ignoreReturnType:*/ true);\n        }\n\n        private moduleDeclarationIsEquivalent(decl1: ModuleDeclaration, decl2: ModuleDeclaration): bool {\n            // TODO: Remove withoutFlag code once ShouldEmitModuleDecl is removed.\n            return withoutFlag(decl1.getModuleFlags(), ModuleFlags.ShouldEmitModuleDecl) === withoutFlag(decl2.getModuleFlags(), ModuleFlags.ShouldEmitModuleDecl) &&\n                   decl2.prettyName === decl2.prettyName &&\n                   ArrayUtilities.sequenceEquals(decl1.amdDependencies, decl2.amdDependencies, StringUtilities.stringEquals);\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n///<reference path=\'..\\Core\\HashTable.ts\' />\n///<reference path=\'..\\Syntax\\ISyntaxElement.ts\' />\n\nmodule TypeScript {\n\n    // per-file info on \n    //  decls\n    //  bindings\n    //  scopes\n\n    // PULLTODO: Get rid of these\n    export var declCacheHit = 0;\n    export var declCacheMiss = 0;\n    export var symbolCacheHit = 0;\n    export var symbolCacheMiss = 0;\n\n    export class SemanticInfo {\n        private compilationUnitPath: string;  // the \"file\" this is associated with\n\n        private topLevelDecls: PullDecl[] = [];\n\n        private astDeclMap: DataMap = new DataMap();\n        private declASTMap: DataMap = new DataMap();\n\n        private syntaxElementDeclMap: DataMap = new DataMap();\n        private declSyntaxElementMap: DataMap = new DataMap();\n\n        private declSymbolMap: DataMap = new DataMap();\n\n        private astSymbolMap: DataMap = new DataMap();\n        private symbolASTMap: DataMap = new DataMap();\n\n        private syntaxElementSymbolMap: DataMap = new DataMap();\n        private symbolSyntaxElementMap: DataMap = new DataMap();\n\n        private dynamicModuleImports: PullTypeAliasSymbol[] = [];\n\n        constructor(compilationUnitPath: string, public locationInfo: LocationInfo = null) {\n            this.compilationUnitPath = compilationUnitPath;\n        }\n\n        public addTopLevelDecl(decl: PullDecl) {\n            this.topLevelDecls[this.topLevelDecls.length] = decl;\n        }\n\n        public getTopLevelDecls() { return this.topLevelDecls; }\n\n        public getPath(): string {\n            return this.compilationUnitPath;\n        }\n\n        public getDeclForAST(ast: AST): PullDecl {\n            return <PullDecl>this.astDeclMap.read(ast.getID().toString());\n        }\n\n        public setDeclForAST(ast: AST, decl: PullDecl): void {\n            this.astDeclMap.link(ast.getID().toString(), decl);\n        }\n\n        private getDeclKey(decl: PullDecl): string {\n            var decl1: any = decl;\n\n            if (!decl1.__declKey) {\n                decl1.__declKey = decl.getDeclID().toString() + \"-\" + decl.getKind().toString();\n            }\n\n            return decl1.__declKey;\n        }\n\n        public getASTForDecl(decl: PullDecl): AST {\n            return <AST>this.declASTMap.read(this.getDeclKey(decl));\n        }\n\n        public setASTForDecl(decl: PullDecl, ast: AST): void {\n            this.declASTMap.link(this.getDeclKey(decl), ast);\n        }\n\n        public setSymbolForAST(ast: AST, symbol: PullSymbol): void {\n            this.astSymbolMap.link(ast.getID().toString(), symbol);\n            this.symbolASTMap.link(symbol.getSymbolID().toString(), ast)\n        }\n\n        public getSymbolForAST(ast: AST): PullSymbol {\n            return <PullSymbol>this.astSymbolMap.read(ast.getID().toString());\n        }\n\n        public getASTForSymbol(symbol: PullSymbol): AST {\n            return <AST>this.symbolASTMap.read(symbol.getSymbolID().toString());\n        }\n\n        public getSyntaxElementForDecl(decl: PullDecl): ISyntaxElement {\n            return <ISyntaxElement>this.declSyntaxElementMap.read(this.getDeclKey(decl));\n        }\n\n        public setSyntaxElementForDecl(decl: PullDecl, syntaxElement: ISyntaxElement): void {\n            this.declSyntaxElementMap.link(this.getDeclKey(decl), syntaxElement);\n        }\n\n        public getDeclForSyntaxElement(syntaxElement: ISyntaxElement): PullDecl {\n            return <PullDecl>this.syntaxElementDeclMap.read(Collections.identityHashCode(syntaxElement).toString());\n        }\n\n        public setDeclForSyntaxElement(syntaxElement: ISyntaxElement, decl: PullDecl): void {\n            this.syntaxElementDeclMap.link(Collections.identityHashCode(syntaxElement).toString(), decl);\n        }\n\n        public getSyntaxElementForSymbol(symbol: PullSymbol): ISyntaxElement {\n            return <ISyntaxElement> this.symbolSyntaxElementMap.read(symbol.getSymbolID().toString());\n        }\n\n        public getSymbolForSyntaxElement(syntaxElement: ISyntaxElement): PullSymbol {\n            return <PullSymbol>this.syntaxElementSymbolMap.read(Collections.identityHashCode(syntaxElement).toString());\n        }\n\n        public setSymbolForSyntaxElement(syntaxElement: ISyntaxElement, symbol: PullSymbol) {\n            this.syntaxElementSymbolMap.link(Collections.identityHashCode(syntaxElement).toString(), symbol);\n            this.symbolSyntaxElementMap.link(symbol.getSymbolID().toString(), syntaxElement);\n        }\n\n        public addDynamicModuleImport(importSymbol: PullTypeAliasSymbol) {\n            this.dynamicModuleImports[this.dynamicModuleImports.length] = importSymbol;\n        }\n\n        public getDynamicModuleImports() {\n            return this.dynamicModuleImports;\n        }\n\n        public getDiagnostics(semanticErrors: IDiagnostic[]) {\n\n            for (var i = 0; i < this.topLevelDecls.length; i++) {\n                getDiagnosticsFromEnclosingDecl(this.topLevelDecls[i], semanticErrors);\n            }\n        }\n    }\n\n    export class SemanticInfoChain {\n        public units: SemanticInfo[] = [new SemanticInfo(\"\")];\n        private declCache = <any>new BlockIntrinsics();\n        private symbolCache = <any>new BlockIntrinsics();\n        private unitCache = <any>new BlockIntrinsics();\n\n        public anyTypeSymbol: PullTypeSymbol = null;\n        public boolTypeSymbol: PullTypeSymbol = null;\n        public numberTypeSymbol: PullTypeSymbol = null;\n        public stringTypeSymbol: PullTypeSymbol = null;\n        public nullTypeSymbol: PullTypeSymbol = null;\n        public undefinedTypeSymbol: PullTypeSymbol = null;\n        public elementTypeSymbol: PullTypeSymbol = null;\n        public voidTypeSymbol: PullTypeSymbol = null;\n\n        public addPrimitive(name: string, globalDecl: PullDecl) {\n            var span = new TextSpan(0, 0);\n            var decl = new PullDecl(name, PullElementKind.Primitive, PullElementFlags.None, span, \"\");\n            var symbol = new PullPrimitiveTypeSymbol(name);\n\n            symbol.addDeclaration(decl);\n            decl.setSymbol(symbol);\n\n            symbol.setResolved();\n\n            globalDecl.addChildDecl(decl);\n\n            return symbol;\n        }\n\n        constructor() {\n            var span = new TextSpan(0, 0);\n            var globalDecl = new PullDecl(\"\", PullElementKind.Global, PullElementFlags.None, span, \"\");\n            var globalInfo = this.units[0];\n            globalInfo.addTopLevelDecl(globalDecl);\n\n            // add primitive types\n            this.anyTypeSymbol = this.addPrimitive(\"any\", globalDecl);\n            this.boolTypeSymbol = this.addPrimitive(\"bool\", globalDecl);\n            this.numberTypeSymbol = this.addPrimitive(\"number\", globalDecl);\n            this.stringTypeSymbol = this.addPrimitive(\"string\", globalDecl);\n            this.nullTypeSymbol = this.addPrimitive(\"null\", globalDecl);\n            this.undefinedTypeSymbol = this.addPrimitive(\"undefined\", globalDecl);\n            this.voidTypeSymbol = this.addPrimitive(\"void\", globalDecl);\n            this.elementTypeSymbol = this.addPrimitive(\"_element\", globalDecl);\n        }\n\n        public addUnit(unit: SemanticInfo) {\n            this.units[this.units.length] = unit;\n            this.unitCache[unit.getPath()] = unit;\n        }\n\n        public getUnit(compilationUnitPath: string) {\n            // PULLTODO: Replace this with a hash so we don\'t have a linear walk going on here.\n            for (var i = 0; i < this.units.length; i++) {\n                if (this.units[i].getPath() == compilationUnitPath) {\n                    return this.units[i];\n                }\n            }\n\n            return null;\n        }\n\n        // PULLTODO: compilationUnitPath is only really there for debug purposes\n        public updateUnit(oldUnit: SemanticInfo, newUnit: SemanticInfo) {\n            for (var i = 0; i < this.units.length; i++) {\n                if (this.units[i].getPath() == oldUnit.getPath()) {\n                    this.units[i] = newUnit;\n                    this.unitCache[oldUnit.getPath()] = newUnit;\n                    return;\n                }\n            }\n        }\n\n        private collectAllTopLevelDecls() {\n            var decls: PullDecl[] = [];\n            var unitDecls: PullDecl[];\n\n            for (var i = 0; i < this.units.length; i++) {\n                unitDecls = this.units[i].getTopLevelDecls();\n                for (var j = 0; j < unitDecls.length; j++) {\n                    decls[decls.length] = unitDecls[j];\n                }\n            }\n\n            return decls;\n        }\n\n        private getDeclPathCacheID(declPath: string[], declKind: PullElementKind) {\n            var cacheID = \"\";\n\n            for (var i = 0; i < declPath.length; i++) {\n                cacheID += \"#\" + declPath[i];\n            }\n\n            return cacheID + \"#\" + declKind.toString();\n        }\n\n        // a decl path is a list of decls that reference the components of a declaration from the global scope down\n        // E.g., string would be \"[\'string\']\" and \"A.B.C\" would be \"[\'A\',\'B\',\'C\']\"\n        public findDecls(declPath: string[], declKind: PullElementKind): PullDecl[] {\n\n            var cacheID = this.getDeclPathCacheID(declPath, declKind);\n\n            if (declPath.length) {\n                var cachedDecls = this.declCache[cacheID];\n\n                if (cachedDecls && cachedDecls.length) {\n                    declCacheHit++;\n                    return <PullDecl[]> cachedDecls;\n                }\n            }\n\n            declCacheMiss++;\n\n            var declsToSearch = this.collectAllTopLevelDecls();\n\n            var decls: PullDecl[] = [];\n            var path: string;\n            var foundDecls: PullDecl[] = [];\n            var keepSearching = (declKind & PullElementKind.Container) || (declKind & PullElementKind.Interface);\n\n            for (var i = 0; i < declPath.length; i++) {\n                path = declPath[i];\n                decls = [];\n\n                for (var j = 0; j < declsToSearch.length; j++) {\n                    var kind = (i == declPath.length - 1) ? declKind : PullElementKind.SomeType;\n                    foundDecls = declsToSearch[j].searchChildDecls(path, (kind & PullElementKind.SomeType) !== 0);\n\n                    for (var k = 0; k < foundDecls.length; k++) {\n                        decls[decls.length] = foundDecls[k];\n                    }\n\n                    // Unless we\'re searching for an interface or module, we\'ve found the one true\n                    // decl, so don\'t bother searching the rest of the top-level decls\n                    if (foundDecls.length && !keepSearching) {\n                        break;\n                    }\n                }\n\n                declsToSearch = decls;\n\n                if (!declsToSearch) {\n                    break;\n                }\n            }\n\n            if (decls.length) {\n                this.declCache[cacheID] = decls;\n            }\n\n            return decls;\n        }\n\n        public findSymbol(declPath: string[], declType: PullElementKind): PullSymbol {\n\n            var cacheID = this.getDeclPathCacheID(declPath, declType);\n\n            if (declPath.length) {\n\n                var cachedSymbol = this.symbolCache[cacheID];\n\n                if (cachedSymbol) {\n                    symbolCacheHit++;\n                    return cachedSymbol;\n                }\n            }\n\n            symbolCacheMiss++;\n\n            // symbol wasn\'t cached, so get the decl\n            var decls: PullDecl[] = this.findDecls(declPath, declType);\n            var symbol: PullSymbol = null;\n\n            if (decls.length) {\n                symbol = decls[0].getSymbol();\n\n                if (symbol) {\n                    this.symbolCache[cacheID] = symbol;\n\n                    symbol.addCacheID(cacheID);\n                }\n            }\n\n            return symbol;\n        }\n\n        public update(compilationUnitPath: string) {\n\n            // PULLTODO: Be less aggressive about clearing the cache\n            this.declCache = <any>new BlockIntrinsics();\n            //this.symbolCache = <any>{};\n            //this.unitCache[compilationUnitPath] = undefined;\n        }\n\n        public getDeclForAST(ast: AST, unitPath: string): PullDecl {\n            var unit = <SemanticInfo>this.unitCache[unitPath];\n\n            if (unit) {\n                return unit.getDeclForAST(ast);\n            }\n\n            return null;\n        }\n\n        public getASTForDecl(decl: PullDecl, unitPath: string): AST {\n            var unit = <SemanticInfo>this.unitCache[unitPath];\n\n            if (unit) {\n                return unit.getASTForDecl(decl);\n            }\n\n            return null;\n        }\n\n        public getSymbolForAST(ast: AST, unitPath: string) {\n            var unit = <SemanticInfo>this.unitCache[unitPath];\n\n            if (unit) {\n                return unit.getSymbolForAST(ast);\n            }\n\n            return null;\n        }\n\n        public getASTForSymbol(symbol: PullSymbol, unitPath: string) {\n            var unit = <SemanticInfo>this.unitCache[unitPath];\n\n            if (unit) {\n                return unit.getASTForSymbol(symbol);\n            }\n\n            return null;\n        }\n\n        public setSymbolForAST(ast: AST, typeSymbol: PullSymbol, unitPath: string) {\n            var unit = <SemanticInfo>this.unitCache[unitPath];\n\n            if (unit) {\n                unit.setSymbolForAST(ast, typeSymbol);\n            }\n        }\n\n        public removeSymbolFromCache(symbol: PullSymbol) {\n\n            var path = [symbol.getName()];\n            var kind = (symbol.getKind() & PullElementKind.SomeType) != 0 ? PullElementKind.SomeType : PullElementKind.SomeValue;\n\n            var kindID = this.getDeclPathCacheID(path, kind);\n            var symID = this.getDeclPathCacheID(path, symbol.getKind());\n\n            symbol.addCacheID(kindID);\n            symbol.addCacheID(symID);\n\n            symbol.invalidateCachedIDs(this.symbolCache);\n        }\n\n        public postDiagnostics(): IDiagnostic[] {\n            var errors: IDiagnostic[] = [];\n\n            // PULLTODO: Why are we indexing from 1?\n            for (var i = 1; i < this.units.length; i++) {\n                this.units[i].getDiagnostics(errors);\n            }\n\n            return errors;\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n///<reference path=\'..\\Syntax\\SyntaxWalker.generated.ts\' />\n///<reference path=\'..\\Text\\TextSpan.ts\' />\n\nmodule TypeScript {\n    export class DeclCollectionContext {\n        public parentChain: PullDecl[] = [];\n\n        constructor(public semanticInfo: SemanticInfo, public scriptName = \"\") {\n        }\n\n        public getParent() { return this.parentChain ? this.parentChain[this.parentChain.length - 1] : null; }\n\n        public pushParent(parentDecl: PullDecl) { if (parentDecl) { this.parentChain[this.parentChain.length] = parentDecl; } }\n\n        public popParent() { this.parentChain.length--; }\n\n        public foundValueDecl = false;\n    }\n\n    export function preCollectImportDecls(ast: AST, parentAST: AST, context: DeclCollectionContext) {\n        var importDecl = <ImportDeclaration>ast;\n        var declFlags = PullElementFlags.None;\n        var span = TextSpan.fromBounds(importDecl.minChar, importDecl.limChar);\n\n        var decl = new PullDecl(importDecl.id.text, PullElementKind.TypeAlias, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(ast, decl);\n        context.semanticInfo.setASTForDecl(decl, ast);\n\n        var parent = context.getParent();\n\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        return false;\n    }\n\n    export function preCollectModuleDecls(ast: AST, parentAST: AST, context: DeclCollectionContext) {\n        var moduleDecl: ModuleDeclaration = <ModuleDeclaration>ast;\n        var declFlags = PullElementFlags.None;\n        var modName = (<Identifier>moduleDecl.name).text;\n        var isDynamic = isQuoted(modName) || hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsDynamic);\n        var kind: PullElementKind = PullElementKind.Container;\n\n        if (hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.Ambient)) {\n            declFlags |= PullElementFlags.Ambient;\n        }\n\n        if (hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.Exported)) {\n            declFlags |= PullElementFlags.Exported;\n        }\n\n        if (hasFlag(moduleDecl.getModuleFlags(), ModuleFlags.IsEnum)) {\n            declFlags |= PullElementFlags.Enum;\n            kind = PullElementKind.Enum;\n        }\n        else {\n            kind = isDynamic ? PullElementKind.DynamicModule : PullElementKind.Container;\n        }\n\n        var span = TextSpan.fromBounds(moduleDecl.minChar, moduleDecl.limChar);\n\n        var decl = new PullDecl(modName, kind, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(ast, decl);\n        context.semanticInfo.setASTForDecl(decl, ast);\n\n        var parent = context.getParent();\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        context.pushParent(decl);\n\n        return true;\n    }\n\n    export function preCollectClassDecls(classDecl: ClassDeclaration, parentAST: AST, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var constructorDeclKind = PullElementKind.Variable;\n\n        if (hasFlag(classDecl.getVarFlags(), VariableFlags.Ambient)) {\n            declFlags |= PullElementFlags.Ambient;\n        }\n\n        if (hasFlag(classDecl.getVarFlags(), VariableFlags.Exported)) {\n            declFlags |= PullElementFlags.Exported;\n            constructorDeclKind = PullElementKind.Property;\n        }\n\n        var span = TextSpan.fromBounds(classDecl.minChar, classDecl.limChar);\n\n        var decl = new PullDecl(classDecl.name.text, PullElementKind.Class, declFlags, span, context.scriptName);\n\n        var constructorDecl = new PullDecl(classDecl.name.text, constructorDeclKind, declFlags | PullElementFlags.ClassConstructorVariable, span, context.scriptName);\n\n        decl.setValueDecl(constructorDecl);\n\n        var parent = context.getParent();\n        parent.addChildDecl(decl);\n        parent.addChildDecl(constructorDecl);\n        decl.setParentDecl(parent);\n        constructorDecl.setParentDecl(parent);\n\n        context.pushParent(decl);\n\n        context.semanticInfo.setDeclForAST(classDecl, decl);\n        context.semanticInfo.setASTForDecl(decl, classDecl);\n        context.semanticInfo.setASTForDecl(constructorDecl, classDecl);\n\n        return true;\n    }\n\n    export function createObjectTypeDeclaration(interfaceDecl: InterfaceDeclaration, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n\n        var span = TextSpan.fromBounds(interfaceDecl.minChar, interfaceDecl.limChar);\n\n        var decl = new PullDecl(\"\", PullElementKind.ObjectType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(interfaceDecl, decl);\n        context.semanticInfo.setASTForDecl(decl, interfaceDecl);\n\n        var parent = context.getParent();\n\n        // if we\'re collecting a decl for a type annotation, we don\'t want to add the decl to the parent scope\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        return true;\n    }\n\n    export function preCollectInterfaceDecls(interfaceDecl: InterfaceDeclaration, parentAST: AST, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n\n        // PULLTODO\n        if (interfaceDecl.getFlags() & ASTFlags.TypeReference) {\n            return createObjectTypeDeclaration(interfaceDecl, context);\n        }\n\n        if (hasFlag(interfaceDecl.getVarFlags(), VariableFlags.Exported)) {\n            declFlags |= PullElementFlags.Exported;\n        }\n\n        var span = TextSpan.fromBounds(interfaceDecl.minChar, interfaceDecl.limChar);\n\n        var decl = new PullDecl(interfaceDecl.name.text, PullElementKind.Interface, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(interfaceDecl, decl);\n        context.semanticInfo.setASTForDecl(decl, interfaceDecl);\n\n        var parent = context.getParent();\n\n        // if we\'re collecting a decl for a type annotation, we don\'t want to add the decl to the parent scope\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        return true;\n    }\n\n    export function preCollectParameterDecl(argDecl: ArgDecl, parentAST: AST, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n\n        if (hasFlag(argDecl.getVarFlags(), VariableFlags.Private)) {\n            declFlags |= PullElementFlags.Private;\n        }\n        else {\n            declFlags |= PullElementFlags.Public;\n        }\n\n        if (hasFlag(argDecl.getFlags(), ASTFlags.OptionalName) || hasFlag(argDecl.id.getFlags(), ASTFlags.OptionalName)) {\n            declFlags |= PullElementFlags.Optional;\n        }\n\n        var span = TextSpan.fromBounds(argDecl.minChar, argDecl.limChar);\n\n        var decl = new PullDecl(argDecl.id.text, PullElementKind.Parameter, declFlags, span, context.scriptName);\n\n        var parent = context.getParent();\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        // if it\'s a property type, we\'ll need to add it to the parent\'s parent as well\n        if (hasFlag(argDecl.getVarFlags(), VariableFlags.Property)) {\n            var propDecl = new PullDecl(argDecl.id.text, PullElementKind.Property, declFlags, span, context.scriptName);\n            propDecl.setValueDecl(decl);\n            context.parentChain[context.parentChain.length - 2].addChildDecl(propDecl);\n            propDecl.setParentDecl(context.parentChain[context.parentChain.length - 2]);\n            context.semanticInfo.setASTForDecl(decl, argDecl);\n            context.semanticInfo.setASTForDecl(propDecl, argDecl);\n            context.semanticInfo.setDeclForAST(argDecl, propDecl);\n        }\n        else {\n            context.semanticInfo.setASTForDecl(decl, argDecl);\n            context.semanticInfo.setDeclForAST(argDecl, decl);\n        }\n\n        if (argDecl.typeExpr &&\n            ((<TypeReference>argDecl.typeExpr).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>argDecl.typeExpr).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>argDecl.typeExpr).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return false;\n    }\n\n    export function preCollectTypeParameterDecl(typeParameterDecl: TypeParameter, parentAST: AST, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n\n        var span = TextSpan.fromBounds(typeParameterDecl.minChar, typeParameterDecl.limChar);\n\n        var decl = new PullDecl(typeParameterDecl.name.text, PullElementKind.TypeParameter, declFlags, span, context.scriptName);\n        context.semanticInfo.setASTForDecl(decl, typeParameterDecl);\n        context.semanticInfo.setDeclForAST(typeParameterDecl, decl);\n\n        var parent = context.getParent();\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        if (typeParameterDecl.constraint &&\n            ((<TypeReference>typeParameterDecl.constraint).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>typeParameterDecl.constraint).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>typeParameterDecl.constraint).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // interface properties\n    export function createPropertySignature(propertyDecl: VarDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Public;\n        var parent = context.getParent();\n        var declType = parent.getKind() == PullElementKind.Enum ? PullElementKind.EnumMember : PullElementKind.Property;\n\n        if (hasFlag(propertyDecl.id.getFlags(), ASTFlags.OptionalName)) {\n            declFlags |= PullElementFlags.Optional;\n        }\n\n        if (hasFlag(propertyDecl.getVarFlags(), VariableFlags.Constant)) {\n            declFlags |= PullElementFlags.Constant;\n        }\n\n        var span = TextSpan.fromBounds(propertyDecl.minChar, propertyDecl.limChar);\n\n        var decl = new PullDecl(propertyDecl.id.text, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(propertyDecl, decl);\n        context.semanticInfo.setASTForDecl(decl, propertyDecl);\n\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        if (propertyDecl.typeExpr &&\n            ((<TypeReference>propertyDecl.typeExpr).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>propertyDecl.typeExpr).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>propertyDecl.typeExpr).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return false;\n    }\n\n    // class member variables\n    export function createMemberVariableDeclaration(memberDecl: VarDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.Property;\n\n        if (hasFlag(memberDecl.getVarFlags(), VariableFlags.Private)) {\n            declFlags |= PullElementFlags.Private;\n        }\n        else {\n            declFlags |= PullElementFlags.Public;\n        }\n\n        if (hasFlag(memberDecl.getVarFlags(), VariableFlags.Static)) {\n            declFlags |= PullElementFlags.Static;\n        }\n\n        var span = TextSpan.fromBounds(memberDecl.minChar, memberDecl.limChar);\n\n        var decl = new PullDecl(memberDecl.id.text, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(memberDecl, decl);\n        context.semanticInfo.setASTForDecl(decl, memberDecl);\n\n        var parent = context.getParent();\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        if (memberDecl.typeExpr &&\n            ((<TypeReference>memberDecl.typeExpr).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>memberDecl.typeExpr).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>memberDecl.typeExpr).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return false;\n    }\n\n    export function createVariableDeclaration(varDecl: VarDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.Variable;\n\n        if (hasFlag(varDecl.getVarFlags(), VariableFlags.Ambient)) {\n            declFlags |= PullElementFlags.Ambient;\n        }\n\n        if (hasFlag(varDecl.getVarFlags(), VariableFlags.Exported)) {\n            declFlags |= PullElementFlags.Exported;\n        }\n\n        var span = TextSpan.fromBounds(varDecl.minChar, varDecl.limChar);\n\n        var decl = new PullDecl(varDecl.id.text, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(varDecl, decl);\n        context.semanticInfo.setASTForDecl(decl, varDecl);\n\n        var parent = context.getParent();\n        parent.addChildDecl(decl);\n        decl.setParentDecl(parent);\n\n        if (varDecl.typeExpr &&\n            ((<TypeReference>varDecl.typeExpr).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>varDecl.typeExpr).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>varDecl.typeExpr).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return false;\n    }\n\n    export function preCollectVarDecls(ast: AST, parentAST: AST, context: DeclCollectionContext) {\n        var varDecl = <VarDecl>ast;\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.Variable;\n        var isProperty = false;\n        var isStatic = false;\n\n        if (hasFlag(varDecl.getVarFlags(), VariableFlags.ClassProperty)) {\n            return createMemberVariableDeclaration(varDecl, context);\n        }\n        else if (hasFlag(varDecl.getVarFlags(), VariableFlags.Property)) {\n            return createPropertySignature(varDecl, context);\n        }\n\n        return createVariableDeclaration(varDecl, context);\n    }\n\n    // function type expressions\n    export function createFunctionTypeDeclaration(functionTypeDeclAST: FuncDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.FunctionType;\n\n        var span = TextSpan.fromBounds(functionTypeDeclAST.minChar, functionTypeDeclAST.limChar);\n\n        var decl = new PullDecl(\"\", declType, declFlags, span, context.semanticInfo.getPath());\n        context.semanticInfo.setDeclForAST(functionTypeDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, functionTypeDeclAST);\n\n        // parent could be null if we\'re collecting decls for a lambda expression\n        var parent = context.getParent();\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (functionTypeDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>functionTypeDeclAST.returnTypeAnnotation).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>functionTypeDeclAST.returnTypeAnnotation).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>functionTypeDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // constructor types\n    export function createConstructorTypeDeclaration(constructorTypeDeclAST: FuncDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.ConstructorType;\n\n        var span = TextSpan.fromBounds(constructorTypeDeclAST.minChar, constructorTypeDeclAST.limChar);\n\n        var decl = new PullDecl(\"{new}\", declType, declFlags, span, context.semanticInfo.getPath());\n        context.semanticInfo.setDeclForAST(constructorTypeDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, constructorTypeDeclAST);\n\n        // parent could be null if we\'re collecting decls for a lambda expression\n        var parent = context.getParent();\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (constructorTypeDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>constructorTypeDeclAST.returnTypeAnnotation).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>constructorTypeDeclAST.returnTypeAnnotation).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>constructorTypeDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // function declaration\n    export function createFunctionDeclaration(funcDeclAST: FuncDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.Function;\n\n        if (hasFlag(funcDeclAST.getFunctionFlags(), FunctionFlags.Ambient)) {\n            declFlags |= PullElementFlags.Ambient;\n        }\n\n        if (hasFlag(funcDeclAST.getFunctionFlags(), FunctionFlags.Exported)) {\n            declFlags |= PullElementFlags.Exported;\n        }\n\n        if (!funcDeclAST.bod) {\n            declFlags |= PullElementFlags.Signature;\n        }\n\n        var span = TextSpan.fromBounds(funcDeclAST.minChar, funcDeclAST.limChar);\n\n        var decl = new PullDecl(funcDeclAST.name.text, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(funcDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, funcDeclAST);\n\n        var parent = context.getParent();\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (funcDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>funcDeclAST.returnTypeAnnotation).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>funcDeclAST.returnTypeAnnotation).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>funcDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // function expression\n    export function createFunctionExpressionDeclaration(functionExpressionDeclAST: FuncDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n\n        if (hasFlag(functionExpressionDeclAST.getFunctionFlags(), FunctionFlags.IsFatArrowFunction)) {\n            declFlags |= PullElementFlags.FatArrow;\n        }\n\n        var span = TextSpan.fromBounds(functionExpressionDeclAST.minChar, functionExpressionDeclAST.limChar);\n\n        var decl = new PullDecl(\"\", PullElementKind.FunctionExpression, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(functionExpressionDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, functionExpressionDeclAST);\n\n        var parent = context.getParent();\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (functionExpressionDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>functionExpressionDeclAST.returnTypeAnnotation).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>functionExpressionDeclAST.returnTypeAnnotation).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>functionExpressionDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // methods\n    export function createMemberFunctionDeclaration(memberFunctionDeclAST: FuncDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.None;\n        var declType = PullElementKind.Method;\n\n        if (hasFlag(memberFunctionDeclAST.getFunctionFlags(), FunctionFlags.Static)) {\n            declFlags |= PullElementFlags.Static;\n        }\n\n        if (hasFlag(memberFunctionDeclAST.getFunctionFlags(), FunctionFlags.Private)) {\n            declFlags |= PullElementFlags.Private;\n        }\n        else {\n            declFlags |= PullElementFlags.Public;\n        }\n\n        if (!memberFunctionDeclAST.bod || !memberFunctionDeclAST.bod.members.length) {\n            declFlags |= PullElementFlags.Signature;\n        }\n\n        if (hasFlag(memberFunctionDeclAST.name.getFlags(), ASTFlags.OptionalName)) {\n            declFlags |= PullElementFlags.Optional;\n        }\n\n        var span = TextSpan.fromBounds(memberFunctionDeclAST.minChar, memberFunctionDeclAST.limChar);\n\n        var decl = new PullDecl(memberFunctionDeclAST.name.text, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(memberFunctionDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, memberFunctionDeclAST);\n\n        var parent = context.getParent();\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (memberFunctionDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>memberFunctionDeclAST.returnTypeAnnotation).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>memberFunctionDeclAST.returnTypeAnnotation).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>memberFunctionDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // index signatures\n    export function createIndexSignatureDeclaration(indexSignatureDeclAST: FuncDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Signature | PullElementFlags.Index;\n        var declType = PullElementKind.IndexSignature;\n\n        var span = TextSpan.fromBounds(indexSignatureDeclAST.minChar, indexSignatureDeclAST.limChar);\n\n        var decl = new PullDecl(\"[]\", declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(indexSignatureDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, indexSignatureDeclAST);\n\n        var parent = context.getParent();\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (indexSignatureDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>indexSignatureDeclAST.returnTypeAnnotation).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>indexSignatureDeclAST.returnTypeAnnotation).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>indexSignatureDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // call signatures\n    export function createCallSignatureDeclaration(callSignatureDeclAST: FuncDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Signature | PullElementFlags.Call;\n        var declType = PullElementKind.CallSignature;\n\n        var span = TextSpan.fromBounds(callSignatureDeclAST.minChar, callSignatureDeclAST.limChar);\n\n        var decl = new PullDecl(\"()\", declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(callSignatureDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, callSignatureDeclAST);\n\n        var parent = context.getParent();\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (callSignatureDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>callSignatureDeclAST.returnTypeAnnotation).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>callSignatureDeclAST.returnTypeAnnotation).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>callSignatureDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // construct signatures\n    export function createConstructSignatureDeclaration(constructSignatureDeclAST: FuncDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Signature | PullElementFlags.Call;\n        var declType = PullElementKind.ConstructSignature;\n\n        var span = TextSpan.fromBounds(constructSignatureDeclAST.minChar, constructSignatureDeclAST.limChar);\n\n        var decl = new PullDecl(\"new\", declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(constructSignatureDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, constructSignatureDeclAST);\n\n        var parent = context.getParent();\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (constructSignatureDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>constructSignatureDeclAST.returnTypeAnnotation).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>constructSignatureDeclAST.returnTypeAnnotation).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>constructSignatureDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // class constructors\n    export function createClassConstructorDeclaration(constructorDeclAST: FuncDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Constructor;\n        var declType = PullElementKind.ConstructorMethod;\n\n        if (!constructorDeclAST.bod) {\n            declFlags |= PullElementFlags.Signature;\n        }\n\n        var span = TextSpan.fromBounds(constructorDeclAST.minChar, constructorDeclAST.limChar);\n\n        var parent = context.getParent();\n\n        if (parent) {\n            // if the parent is exported, the constructor decl must be as well\n            var parentFlags = parent.getFlags();\n\n            if (parentFlags & PullElementFlags.Exported) {\n                declFlags |= PullElementFlags.Exported;\n            }\n        }\n\n        var decl = new PullDecl(constructorDeclAST.name.text, declType, declFlags, span, context.scriptName);        \n        context.semanticInfo.setDeclForAST(constructorDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, constructorDeclAST);\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (constructorDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>constructorDeclAST.returnTypeAnnotation).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>constructorDeclAST.returnTypeAnnotation).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>constructorDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    export function createGetAccessorDeclaration(getAccessorDeclAST: FuncDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Public;\n        var declType = PullElementKind.GetAccessor;\n\n        if (hasFlag(getAccessorDeclAST.getFunctionFlags(), FunctionFlags.Static)) {\n            declFlags |= PullElementFlags.Static;\n        }\n\n        if (hasFlag(getAccessorDeclAST.name.getFlags(), ASTFlags.OptionalName)) {\n            declFlags |= PullElementFlags.Optional;\n        }\n\n        if (hasFlag(getAccessorDeclAST.getFunctionFlags(), FunctionFlags.Private)) {\n            declFlags |= PullElementFlags.Private;\n        }\n        else {\n            declFlags |= PullElementFlags.Public;\n        }        \n\n        var span = TextSpan.fromBounds(getAccessorDeclAST.minChar, getAccessorDeclAST.limChar);\n\n        var decl = new PullDecl(getAccessorDeclAST.name.text, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(getAccessorDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, getAccessorDeclAST);\n\n        var parent = context.getParent();\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        if (getAccessorDeclAST.returnTypeAnnotation &&\n            ((<TypeReference>getAccessorDeclAST.returnTypeAnnotation).term.nodeType == NodeType.InterfaceDeclaration ||\n            (<TypeReference>getAccessorDeclAST.returnTypeAnnotation).term.nodeType == NodeType.FuncDecl)) {\n\n            var declCollectionContext = new DeclCollectionContext(context.semanticInfo);\n\n            declCollectionContext.scriptName = context.scriptName;\n\n            getAstWalkerFactory().walk((<TypeReference>getAccessorDeclAST.returnTypeAnnotation).term, preCollectDecls, postCollectDecls, null, declCollectionContext);\n        }\n\n        return true;\n    }\n\n    // set accessors\n    export function createSetAccessorDeclaration(setAccessorDeclAST: FuncDecl, context: DeclCollectionContext) {\n        var declFlags = PullElementFlags.Public;\n        var declType = PullElementKind.SetAccessor;\n\n        if (hasFlag(setAccessorDeclAST.getFunctionFlags(), FunctionFlags.Static)) {\n            declFlags |= PullElementFlags.Static;\n        }\n\n        if (hasFlag(setAccessorDeclAST.name.getFlags(), ASTFlags.OptionalName)) {\n            declFlags |= PullElementFlags.Optional;\n        }\n\n        if (hasFlag(setAccessorDeclAST.getFunctionFlags(), FunctionFlags.Private)) {\n            declFlags |= PullElementFlags.Private;\n        }\n        else {\n            declFlags |= PullElementFlags.Public;\n        }         \n\n        var span = TextSpan.fromBounds(setAccessorDeclAST.minChar, setAccessorDeclAST.limChar);\n\n        var decl = new PullDecl(setAccessorDeclAST.name.actualText, declType, declFlags, span, context.scriptName);\n        context.semanticInfo.setDeclForAST(setAccessorDeclAST, decl);\n        context.semanticInfo.setASTForDecl(decl, setAccessorDeclAST);\n\n        var parent = context.getParent();\n\n        if (parent) {\n            parent.addChildDecl(decl);\n            decl.setParentDecl(parent);\n        }\n\n        context.pushParent(decl);\n\n        return true;\n    }\n\n    export function preCollectFuncDecls(ast: AST, parentAST: AST, context: DeclCollectionContext) {\n\n        var funcDecl = <FuncDecl>ast;\n\n        if (hasFlag(funcDecl.getFunctionFlags(), (FunctionFlags.IsFunctionExpression | FunctionFlags.IsFatArrowFunction))) {\n            return createFunctionExpressionDeclaration(funcDecl, context);\n        }\n        else if (funcDecl.isConstructor) {\n            return createClassConstructorDeclaration(funcDecl, context);\n        }\n        else if (funcDecl.isGetAccessor()) {\n            return createGetAccessorDeclaration(funcDecl, context);\n        }\n        else if (funcDecl.isSetAccessor()) {\n            return createSetAccessorDeclaration(funcDecl, context);\n        }\n        else if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ConstructMember)) {\n            return hasFlag(funcDecl.getFlags(), ASTFlags.TypeReference) ?\n                createConstructorTypeDeclaration(funcDecl, context) :\n                createConstructSignatureDeclaration(funcDecl, context);\n        }\n        else if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.CallMember)) {\n            return createCallSignatureDeclaration(funcDecl, context);\n        }\n        else if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.IndexerMember)) {\n            return createIndexSignatureDeclaration(funcDecl, context);\n        }\n        else if (hasFlag(funcDecl.getFlags(), ASTFlags.TypeReference)) {\n            return createFunctionTypeDeclaration(funcDecl, context);\n        }\n        else if (hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.Method) ||\n                 hasFlag(funcDecl.getFunctionFlags(), FunctionFlags.ClassMethod)) {\n            return createMemberFunctionDeclaration(funcDecl, context);\n        }\n\n        return createFunctionDeclaration(funcDecl, context);\n    }\n\n    export function preCollectDecls(ast: AST, parentAST: AST, walker: IAstWalker) {\n        var context: DeclCollectionContext = walker.state;\n        var go = false;\n\n        if (ast.nodeType == NodeType.Script) {\n            var script: Script = <Script>ast;\n            var span = TextSpan.fromBounds(script.minChar, script.limChar);\n\n            var decl = new PullDecl(context.scriptName, PullElementKind.Script, PullElementFlags.None, span, context.scriptName);\n            context.semanticInfo.setDeclForAST(ast, decl);\n            context.semanticInfo.setASTForDecl(decl, ast);\n\n            context.pushParent(decl);\n\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.List) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.Block) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.ModuleDeclaration) {\n            go = preCollectModuleDecls(ast, parentAST, context);\n        }\n        else if (ast.nodeType == NodeType.ClassDeclaration) {\n            go = preCollectClassDecls(<ClassDeclaration>ast, parentAST, context);\n        }\n        else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n            go = preCollectInterfaceDecls(<InterfaceDeclaration>ast, parentAST, context);\n        }\n        else if (ast.nodeType == NodeType.ArgDecl) {\n            go = preCollectParameterDecl(<ArgDecl>ast, parentAST, context);\n        }\n        else if (ast.nodeType == NodeType.VarDecl) {\n            go = preCollectVarDecls(ast, parentAST, context);\n        }\n        else if (ast.nodeType == NodeType.FuncDecl) {\n            go = preCollectFuncDecls(ast, parentAST, context);\n        }\n        else if (ast.nodeType == NodeType.ImportDeclaration) {\n            go = preCollectImportDecls(ast, parentAST, context);\n        }\n        else if (ast.nodeType == NodeType.TypeParameter) {\n            go = preCollectTypeParameterDecl(<TypeParameter>ast, parentAST, context);\n        }\n        else if (ast.nodeType == NodeType.IfStatement) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.ForStatement) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.ForInStatement) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.WhileStatement) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.DoStatement) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.Comma) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.ReturnStatement) {\n            // want to be able to bind lambdas in return positions\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.SwitchStatement || ast.nodeType == NodeType.CaseClause) {\n            go = true;\n        }\n\n            // call and \'new\' expressions may contain lambdas with bindings...\n        else if (ast.nodeType == NodeType.Call) {\n            // want to be able to bind lambdas in return positions\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.New) {\n            // want to be able to bind lambdas in return positions\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.TryStatement) {\n            go = true;\n        }\n        else if (ast.nodeType == NodeType.CatchClause) {\n            go = true;\n        }\n\n        walker.options.goChildren = go;\n\n        return ast;\n    }\n\n    function isContainer(decl: PullDecl): bool {\n        return decl.getKind() == PullElementKind.Container || decl.getKind() == PullElementKind.DynamicModule;\n    }\n\n    function getInitializationFlag(decl: PullDecl): PullElementFlags {\n        if (decl.getKind() & PullElementKind.Container) {\n            return PullElementFlags.InitializedModule;\n        }\n        else if (decl.getKind() & PullElementKind.DynamicModule) {\n            return PullElementFlags.InitializedDynamicModule;\n        }\n\n        return PullElementFlags.None;\n    }\n\n    function hasInitializationFlag(decl: PullDecl): bool {\n        if (decl.getKind() & PullElementKind.Container) {\n            return (decl.getFlags() & PullElementFlags.InitializedModule) !== 0;\n        }\n        else if (decl.getKind() & PullElementKind.DynamicModule) {\n            return (decl.getFlags() & PullElementFlags.InitializedDynamicModule) !== 0;\n        }\n\n        return false;\n    }\n\n    export function postCollectDecls(ast: AST, parentAST: AST, walker: IAstWalker) {\n        var context: DeclCollectionContext = walker.state;\n        var parentDecl: PullDecl;\n        var initFlag = PullElementFlags.None;\n\n        // Note that we never pop the Script - after the traversal, it should be the\n        // one parent left in the context\n\n\n        if (ast.nodeType == NodeType.ModuleDeclaration) {\n            var thisModule = context.getParent();\n            context.popParent();\n            parentDecl = context.getParent();\n\n            if (hasInitializationFlag(thisModule)) {\n\n                if (parentDecl && isContainer(parentDecl)) {\n                    initFlag = getInitializationFlag(parentDecl);\n                    parentDecl.setFlags(parentDecl.getFlags() | initFlag);\n                }\n\n                // create the value decl\n                var valueDecl = new PullDecl(thisModule.getName(), PullElementKind.Variable, thisModule.getFlags(), thisModule.getSpan(), context.scriptName);\n\n                thisModule.setValueDecl(valueDecl);\n\n                context.semanticInfo.setASTForDecl(valueDecl, ast);\n\n                if (parentDecl) {\n                    parentDecl.addChildDecl(valueDecl);\n                    valueDecl.setParentDecl(parentDecl);\n                }\n            }\n        }\n        else if (ast.nodeType == NodeType.ClassDeclaration) {\n            context.popParent();\n\n            parentDecl = context.getParent();\n\n            if (parentDecl && isContainer(parentDecl)) {\n                initFlag = getInitializationFlag(parentDecl);\n                parentDecl.setFlags(parentDecl.getFlags() | initFlag);\n            }\n        }\n        else if (ast.nodeType == NodeType.InterfaceDeclaration) {\n            context.popParent();\n        }\n        else if (ast.nodeType == NodeType.FuncDecl) {\n            context.popParent();\n\n            parentDecl = context.getParent();\n\n            if (parentDecl && isContainer(parentDecl)) {\n                initFlag = getInitializationFlag(parentDecl);\n                parentDecl.setFlags(parentDecl.getFlags() | initFlag);\n            }\n        }\n        else if (ast.nodeType == NodeType.VarDecl) { // PULLREVIEW: What if we just have a for loop in a module body?\n            parentDecl = context.getParent();\n\n            if (parentDecl && isContainer(parentDecl)) {\n                initFlag = getInitializationFlag(parentDecl);\n                parentDecl.setFlags(parentDecl.getFlags() | initFlag);\n            }\n        }\n\n        return ast;\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export var globalBindingPhase = 0;\n\n    export class PullSymbolBinder {\n        private parentChain: PullTypeSymbol[] = [];\n        private parentDeclChain: PullDecl[] = [];\n        private declPath: string[] = [];\n\n        private bindingPhase = globalBindingPhase++;\n\n        private staticClassMembers: PullSymbol[] = [];\n\n        public semanticInfo: SemanticInfo;\n\n        public reBindingAfterChange = false;\n        public startingDeclForRebind = pullDeclID; // note that this gets set on creation\n        public startingSymbolForRebind = pullSymbolID; // note that this gets set on creation\n\n        constructor(private compilationSettings: CompilationSettings,\n                    public semanticInfoChain: SemanticInfoChain) {\n        }\n\n        public setUnit(fileName: string) {\n            this.semanticInfo = this.semanticInfoChain.getUnit(fileName);\n        }\n\n        public getParent(returnInstanceType = false): PullTypeSymbol {\n            var parent = this.parentChain ? this.parentChain[this.parentChain.length - 1] : null;\n\n            if (parent && parent.isContainer() && returnInstanceType) {\n                var instanceSymbol = (<PullContainerTypeSymbol>parent).getInstanceSymbol();\n\n                if (instanceSymbol) {\n                    parent = instanceSymbol.getType();\n                }\n            }\n\n            return parent;\n        }\n\n        public getParentDecl(): PullDecl {\n            return this.parentDeclChain.length ? this.parentDeclChain[this.parentDeclChain.length - 1] : null;\n        }\n\n        public getDeclPath() { return this.declPath; }\n\n        public pushParent(parentType: PullTypeSymbol, parentDecl: PullDecl) {\n            if (parentType) {\n                this.parentChain[this.parentChain.length] = parentType;\n                this.parentDeclChain[this.parentDeclChain.length] = parentDecl;\n                this.declPath[this.declPath.length] = parentType.getName();\n            }\n        }\n\n        public popParent() {\n            if (this.parentChain.length) {\n                this.parentChain.length--;\n                this.parentDeclChain.length--;\n                this.declPath.length--;\n            }\n        }\n\n        public findSymbolInContext(name: string, declKind: PullElementKind, typeLookupPath: string[]): PullSymbol {\n            var startTime = new Date().getTime();\n            var contextSymbolPath: string[] = this.getDeclPath();\n            var nestedSymbolPath: string[] = [];\n            var copyOfContextSymbolPath = [];\n            var symbol: PullSymbol = null;\n\n            var i = 0;\n            var endTime = 0;\n\n\n            // first, search within the given symbol path\n            if (typeLookupPath.length) {\n\n                for (i = 0; i < typeLookupPath.length; i++) {\n                    nestedSymbolPath[nestedSymbolPath.length] = typeLookupPath[i];\n                }\n\n                nestedSymbolPath[nestedSymbolPath.length] = name;\n\n                while (nestedSymbolPath.length >= 2) {\n                    symbol = this.semanticInfoChain.findSymbol(nestedSymbolPath, declKind);\n\n                    if (symbol) {\n                        endTime = new Date().getTime();\n                        time_in_findSymbol += endTime - startTime;\n\n                        return symbol;\n                    }\n                    nestedSymbolPath.length -= 2;\n                    nestedSymbolPath[nestedSymbolPath.length] = name;\n                }\n            }\n\n            // next, link back up to the enclosing context\n            if (contextSymbolPath.length) {\n\n                for (i = 0; i < contextSymbolPath.length; i++) {\n                    copyOfContextSymbolPath[copyOfContextSymbolPath.length] = contextSymbolPath[i];\n                }\n\n                for (i = 0; i < typeLookupPath.length; i++) {\n                    copyOfContextSymbolPath[copyOfContextSymbolPath.length] = typeLookupPath[i];\n                }\n\n                copyOfContextSymbolPath[copyOfContextSymbolPath.length] = name;\n\n                while (copyOfContextSymbolPath.length >= 2) {\n                    symbol = this.semanticInfoChain.findSymbol(copyOfContextSymbolPath, declKind);\n\n                    if (symbol) {\n                        endTime = new Date().getTime();\n                        time_in_findSymbol += endTime - startTime;\n\n                        return symbol;\n                    }\n                    copyOfContextSymbolPath.length -= 2;\n                    copyOfContextSymbolPath[copyOfContextSymbolPath.length] = name;\n                }\n            }\n\n            // finally, try searching globally\n            symbol = this.semanticInfoChain.findSymbol([name], declKind);\n\n            endTime = new Date().getTime();\n            time_in_findSymbol += endTime - startTime;\n\n            return symbol;\n        }\n\n        private recordNonInterfaceParentModule() {\n            var parent = this.getParent();\n            if (parent) {\n                var ast = this.semanticInfo.getASTForSymbol(parent);\n                if (ast && ast.nodeType == NodeType.ModuleDeclaration) {\n                    (<ModuleDeclaration>ast).recordNonInterface();\n                }\n            }\n        }\n\n        public symbolIsRedeclaration(sym: PullSymbol): bool {\n            var symID = sym.getSymbolID();\n            return (symID > this.startingSymbolForRebind) ||\n                    ((sym.getRebindingID() == this.bindingPhase) && (symID != this.startingSymbolForRebind));\n        }\n\n        //\n        // decl binding\n        //\n\n        public bindModuleDeclarationToPullSymbol(moduleContainerDecl: PullDecl) {\n\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n\n            var modName = moduleContainerDecl.getName();\n\n            var moduleContainerTypeSymbol: PullContainerTypeSymbol = null;\n            var moduleInstanceSymbol: PullSymbol = null;\n            var moduleInstanceTypeSymbol: PullTypeSymbol = null;\n\n            var moduleInstanceDecl: PullDecl = moduleContainerDecl.getValueDecl();\n\n            var moduleKind = moduleContainerDecl.getKind();\n\n            var parent = this.getParent();\n            var parentInstanceSymbol = this.getParent(true);\n            var moduleAST = <ModuleDeclaration>this.semanticInfo.getASTForDecl(moduleContainerDecl);\n\n            var createdNewSymbol = false;\n            var i = 0;\n\n            if (parent) {\n                moduleContainerTypeSymbol = <PullContainerTypeSymbol>parent.findNestedType(modName, PullElementKind.SomeType);\n            }\n            else if (!(moduleContainerDecl.getFlags() & PullElementFlags.Exported) || moduleContainerDecl.getKind() == PullElementKind.DynamicModule) {\n                moduleContainerTypeSymbol = <PullContainerTypeSymbol>this.findSymbolInContext(modName, PullElementKind.SomeType, []);\n            }\n\n            if (moduleContainerTypeSymbol && moduleContainerTypeSymbol.getKind() != moduleKind) {\n                // duplicate symbol error\n                moduleContainerDecl.addDiagnostic(new PullDiagnostic(\n                    moduleAST.minChar, moduleAST.getLength(), this.semanticInfo.getPath(), getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [modName])));\n\n                moduleContainerTypeSymbol = null;\n            }\n\n            if (moduleContainerTypeSymbol) {\n                moduleInstanceSymbol = moduleContainerTypeSymbol.getInstanceSymbol();\n            }\n            else { \n                moduleContainerTypeSymbol = new PullContainerTypeSymbol(modName, moduleKind);\n                createdNewSymbol = true;\n            }\n\n            if (!moduleInstanceSymbol && (moduleContainerDecl.getFlags() & PullElementFlags.SomeInitializedModule)) {\n                moduleInstanceTypeSymbol = new PullTypeSymbol(modName, PullElementKind.ObjectType);\n                moduleInstanceTypeSymbol.addDeclaration(moduleContainerDecl);\n\n                moduleInstanceTypeSymbol.setAssociatedContainerType(moduleContainerTypeSymbol);\n\n                // The instance symbol is further set up in bindVariableDeclaration\n                moduleInstanceSymbol = new PullSymbol(modName, PullElementKind.Variable);\n                moduleInstanceSymbol.setType(moduleInstanceTypeSymbol);\n                moduleInstanceSymbol.addDeclaration(moduleContainerDecl);\n\n                moduleContainerTypeSymbol.setInstanceSymbol(moduleInstanceSymbol);\n            } else if (moduleInstanceSymbol) {\n                moduleInstanceSymbol.addDeclaration(moduleContainerDecl);\n            }\n\n            moduleContainerTypeSymbol.addDeclaration(moduleContainerDecl);\n            moduleContainerDecl.setSymbol(moduleContainerTypeSymbol);\n\n            this.semanticInfo.setSymbolForAST(moduleAST.name, moduleContainerTypeSymbol);\n            this.semanticInfo.setSymbolForAST(moduleAST, moduleContainerTypeSymbol);\n\n            if (createdNewSymbol) {\n\n                if (parent) {\n                    var linkKind = moduleContainerDecl.getFlags() & PullElementFlags.Exported ? SymbolLinkKind.PublicMember : SymbolLinkKind.PrivateMember;\n\n                    if (linkKind == SymbolLinkKind.PublicMember) {\n                        parent.addMember(moduleContainerTypeSymbol, linkKind);\n\n                        if (moduleInstanceSymbol && parentInstanceSymbol && (parentInstanceSymbol != moduleInstanceSymbol)) {\n                            parentInstanceSymbol.addMember(moduleInstanceSymbol, linkKind);\n                        }\n                    }\n                    else {\n                        moduleContainerTypeSymbol.setContainer(parent);\n\n                        if (moduleInstanceSymbol && parentInstanceSymbol && (parentInstanceSymbol != moduleInstanceSymbol)) {\n                            moduleInstanceSymbol.setContainer(parentInstanceSymbol);\n                        }\n                    }\n                }\n            }\n            else if (this.reBindingAfterChange) {\n                // clear out the old decls...\n                var decls = moduleContainerTypeSymbol.getDeclarations();\n                var scriptName = moduleContainerDecl.getScriptName();\n\n                for (i = 0; i < decls.length; i++) {\n                    if (decls[i].getScriptName() == scriptName && decls[i].getDeclID() < this.startingDeclForRebind) {\n                        moduleContainerTypeSymbol.removeDeclaration(decls[i]);\n                    }\n                }\n\n                if (moduleInstanceSymbol) {\n                    decls = moduleInstanceSymbol.getDeclarations();\n\n                    for (i = 0; i < decls.length; i++) {\n                        if (decls[i].getScriptName() == scriptName && decls[i].getDeclID() < this.startingDeclForRebind) {\n                            moduleInstanceSymbol.removeDeclaration(decls[i]);\n                        }\n                    }\n\n                    moduleInstanceTypeSymbol = moduleInstanceSymbol.getType();\n\n                    decls = moduleInstanceTypeSymbol.getDeclarations();\n\n                    for (i = 0; i < decls.length; i++) {\n                        if (decls[i].getScriptName() == scriptName && decls[i].getDeclID() < this.startingDeclForRebind) {\n                            moduleInstanceTypeSymbol.removeDeclaration(decls[i]);\n                        }\n                    }\n\n                    // add the current module decl to the declaration list, to make up for the ones we just deleted\n                    moduleInstanceTypeSymbol.addDeclaration(moduleContainerDecl);\n\n                    moduleInstanceSymbol.invalidate();\n                }\n\n                moduleContainerTypeSymbol.invalidate();\n            }\n            this.recordNonInterfaceParentModule();\n\n            this.pushParent(moduleContainerTypeSymbol, moduleContainerDecl);\n\n            var childDecls = moduleContainerDecl.getChildDecls();\n\n            for (i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n\n            this.popParent();\n        }\n\n        // aliases\n        public bindImportDeclaration(importDeclaration: PullDecl) {\n            var declFlags = importDeclaration.getFlags();\n            var declKind = importDeclaration.getKind();\n            var importDeclAST = <VarDecl>this.semanticInfo.getASTForDecl(importDeclaration);\n\n            var isExported = false;\n            var linkKind = SymbolLinkKind.PrivateMember;\n            var importSymbol: PullTypeAliasSymbol = null;\n            var declName = importDeclaration.getName();\n            var parentHadSymbol = false;\n            var parent = this.getParent();\n\n            if (parent) {\n                importSymbol = <PullTypeAliasSymbol>parent.findMember(declName);\n\n                if (!importSymbol) {\n                    importSymbol = <PullTypeAliasSymbol>parent.findContainedMember(declName);\n                }\n            }\n            else if (!(importDeclaration.getFlags() & PullElementFlags.Exported)) {\n                importSymbol = <PullTypeAliasSymbol>this.findSymbolInContext(declName, PullElementKind.SomeType, []);\n            }\n\n            if (importSymbol) {\n                parentHadSymbol = true;\n            }\n\n            if (importSymbol && this.symbolIsRedeclaration(importSymbol)) {\n                importDeclaration.addDiagnostic(new PullDiagnostic(importDeclAST.minChar, importDeclAST.getLength(), this.semanticInfo.getPath(), getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [declName])));\n                importSymbol = null;\n            }\n\n            if (this.reBindingAfterChange && importSymbol) {\n\n                // prune out-of-date decls...\n                var decls = importSymbol.getDeclarations();\n                var scriptName = importDeclaration.getScriptName();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        importSymbol.removeDeclaration(decls[j]);\n                    }\n                }\n\n                importSymbol.setUnresolved();\n            }\n\n            if (!importSymbol) {\n                importSymbol = new PullTypeAliasSymbol(declName);\n            }\n\n            importSymbol.addDeclaration(importDeclaration);\n            importDeclaration.setSymbol(importSymbol);\n\n            this.semanticInfo.setSymbolForAST(importDeclAST, importSymbol);\n\n            if (parent && !parentHadSymbol) {\n\n                if (declFlags & PullElementFlags.Exported) {\n                    parent.addMember(importSymbol, SymbolLinkKind.PublicMember);\n                }\n                else {\n                    importSymbol.setContainer(parent);\n                }\n            }\n            this.recordNonInterfaceParentModule();\n\n            importSymbol.setIsBound(this.bindingPhase);\n        }\n\n        // enums\n        public bindEnumDeclarationToPullSymbol(enumDeclaration: PullDecl) {\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n            var enumName = enumDeclaration.getName();\n            var enumSymbol = <PullTypeSymbol>this.findSymbolInContext(enumName, PullElementKind.Enum, []);\n\n            var enumAST = <ModuleDeclaration>this.semanticInfo.getASTForDecl(enumDeclaration);\n            var createdNewSymbol = false;\n            var parent = this.getParent();\n\n            var i = 0;\n\n            if (parent) {\n                enumSymbol = parent.findNestedType(enumName);\n            }\n            else if (!(enumDeclaration.getFlags() & PullElementFlags.Exported)) {\n                enumSymbol = <PullTypeSymbol>this.findSymbolInContext(enumName, PullElementKind.SomeType, []);\n            }\n\n            if (enumSymbol && (enumSymbol.getKind() != PullElementKind.Enum || !this.reBindingAfterChange || this.symbolIsRedeclaration(enumSymbol))) {\n                enumDeclaration.addDiagnostic(new PullDiagnostic(enumAST.minChar, enumAST.getLength(), this.semanticInfo.getPath(),\n                    getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [enumName])));\n                enumSymbol = null;\n            }\n\n            if (!enumSymbol) {\n                enumSymbol = new PullTypeSymbol(enumName, PullElementKind.Enum);\n\n                enumSymbol.addDeclaration(enumDeclaration);\n                enumDeclaration.setSymbol(enumSymbol);\n\n                createdNewSymbol = true;\n            }\n\n            enumSymbol.addDeclaration(enumDeclaration);\n            enumDeclaration.setSymbol(enumSymbol);\n\n            this.semanticInfo.setSymbolForAST(enumAST.name, enumSymbol);\n            this.semanticInfo.setSymbolForAST(enumAST, enumSymbol);\n\n            if (createdNewSymbol) {\n\n                if (parent) {\n                    var linkKind = enumDeclaration.getFlags() & PullElementFlags.Exported ? SymbolLinkKind.PublicMember : SymbolLinkKind.PrivateMember;\n\n                    if (linkKind == SymbolLinkKind.PublicMember) {\n                        parent.addMember(enumSymbol, linkKind);\n                    }\n                    else {\n                        enumSymbol.setContainer(parent);\n                    }\n                }\n            }\n            else if (this.reBindingAfterChange) {\n                // clear out the old decls...\n                var decls = enumSymbol.getDeclarations();\n                var scriptName = enumDeclaration.getScriptName();\n\n                for (i = 0; i < decls.length; i++) {\n                    if (decls[i].getScriptName() == scriptName && decls[i].getDeclID() < this.startingDeclForRebind) {\n                        enumSymbol.removeDeclaration(decls[i]);\n                    }\n                }\n\n                enumSymbol.invalidate();\n            }\n            this.recordNonInterfaceParentModule();\n\n            this.pushParent(enumSymbol, enumDeclaration);\n\n            var childDecls = enumDeclaration.getChildDecls();\n\n            for (i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n\n            this.popParent();\n\n            enumSymbol.setIsBound(this.bindingPhase);\n        }\n\n        private cleanClassSignatures(classSymbol: PullClassTypeSymbol) {\n            var callSigs = classSymbol.getCallSignatures();\n            var constructSigs = classSymbol.getConstructSignatures();\n            var indexSigs = classSymbol.getIndexSignatures();\n\n            for (var i = 0; i < callSigs.length; i++) {\n                classSymbol.removeCallSignature(callSigs[i], false);\n            }\n            for (i = 0; i < constructSigs.length; i++) {\n                classSymbol.removeConstructSignature(constructSigs[i], false);\n            }\n            for (i = 0; i < indexSigs.length; i++) {\n                classSymbol.removeIndexSignature(indexSigs[i], false);\n            }\n\n            classSymbol.recomputeCallSignatures();\n            classSymbol.recomputeConstructSignatures();\n            classSymbol.recomputeIndexSignatures();\n\n            var constructorSymbol = classSymbol.getConstructorMethod();\n            var constructorTypeSymbol = <PullConstructorTypeSymbol>(constructorSymbol ? constructorSymbol.getType() : null);\n\n            if (constructorTypeSymbol) {\n                constructSigs = constructorTypeSymbol.getConstructSignatures();\n\n                for (i = 0; i < constructSigs.length; i++) {\n                    constructorTypeSymbol.removeConstructSignature(constructSigs[i], false);\n                }\n\n                constructorTypeSymbol.recomputeConstructSignatures();\n                constructorTypeSymbol.invalidate();\n                constructorSymbol.invalidate();\n            }\n\n            // just invalidate this once, so we don\'t pay the cost of rebuilding caches\n            // for each signature removed\n            classSymbol.invalidate();            \n        }\n\n        // classes\n        public bindClassDeclarationToPullSymbol(classDecl: PullDecl) {\n\n            var className = classDecl.getName();\n            var classSymbol: PullClassTypeSymbol = null;\n\n            var constructorSymbol: PullSymbol = null;\n            var constructorTypeSymbol: PullConstructorTypeSymbol = null;\n\n            var classAST = <ClassDeclaration>this.semanticInfo.getASTForDecl(classDecl);\n            var parentHadSymbol = false;\n\n            var parent = this.getParent();\n            var cleanedPreviousDecls = false;\n            var isExported = classDecl.getFlags() & PullElementFlags.Exported;\n            var isGeneric = false;\n\n            var i = 0;\n            var j = 0;\n\n            if (parent) {\n                if (isExported) {\n                    classSymbol = <PullClassTypeSymbol>parent.findMember(className);\n                }\n                else {\n                    classSymbol = <PullClassTypeSymbol>parent.findContainedMember(className);\n                }\n            }\n            else {\n                classSymbol = <PullClassTypeSymbol>this.findSymbolInContext(className, PullElementKind.SomeType, []);\n            }\n\n            if (classSymbol && (classSymbol.getKind() != PullElementKind.Class || !this.reBindingAfterChange || this.symbolIsRedeclaration(classSymbol))) {\n                classDecl.addDiagnostic(new PullDiagnostic(classAST.minChar, classAST.getLength(), this.semanticInfo.getPath(),\n                    getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [className])));\n                classSymbol = null;\n            }\n            else if (classSymbol) {\n                parentHadSymbol = true;\n            }\n\n            var decls: PullDecl[];\n\n            if (this.reBindingAfterChange && classSymbol) {\n\n                // prune out-of-date decls\n                decls = classSymbol.getDeclarations();\n                var scriptName = classDecl.getScriptName();\n\n                for (j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        classSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                constructorSymbol = classSymbol.getConstructorMethod();\n                constructorTypeSymbol = <PullConstructorTypeSymbol>constructorSymbol.getType();\n\n                decls = constructorSymbol.getDeclarations();\n\n                for (j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        constructorSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                if (constructorSymbol.getIsSynthesized()) {\n                    //constructorSymbol.addDeclaration(classDecl);\n                    classSymbol.setConstructorMethod(null);\n                }\n\n                if (classSymbol.isGeneric()) {\n                    //classSymbol.invalidateSpecializations();\n                    isGeneric = true;\n\n                    var specializations = classSymbol.getKnownSpecializations();\n                    var specialization: PullTypeSymbol = null;\n\n                    for (i = 0; i < specializations.length; i++) {\n                        specialization = specializations[i];\n\n                        decls = specialization.getDeclarations();\n\n                        for (j = 0; j < decls.length; j++) {\n                            if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                                specialization.removeDeclaration(decls[j]);\n\n                                cleanedPreviousDecls = true;\n                            }\n                        }\n\n                        specialization.addDeclaration(classDecl);\n                    }\n\n                    classSymbol.cleanTypeParameters();\n                    constructorTypeSymbol.cleanTypeParameters();\n                }\n\n                classSymbol.setUnresolved();\n                constructorSymbol.setUnresolved();\n                constructorTypeSymbol.setUnresolved();\n            }\n\n            if (!parentHadSymbol) {\n                classSymbol = new PullClassTypeSymbol(className);\n            }\n\n            classSymbol.addDeclaration(classDecl);\n\n            classDecl.setSymbol(classSymbol);\n\n            this.semanticInfo.setSymbolForAST(classAST.name, classSymbol);\n            this.semanticInfo.setSymbolForAST(classAST, classSymbol);\n\n            if (parent && !parentHadSymbol) {\n                var linkKind = classDecl.getFlags() & PullElementFlags.Exported ? SymbolLinkKind.PublicMember : SymbolLinkKind.PrivateMember;\n\n                if (linkKind == SymbolLinkKind.PublicMember) {\n                    parent.addMember(classSymbol, linkKind);\n                }\n                else {\n                    classSymbol.setContainer(parent);\n                }\n            }\n            this.recordNonInterfaceParentModule();\n\n            // PULLTODO: For now, remove stale signatures from the function type, but we want to be smarter about this when\n            // incremental parsing comes online\n            // PULLTODO: For now, classes should have none of these, though a pre-existing constructor might\n            if (parentHadSymbol && cleanedPreviousDecls) {\n\n                this.cleanClassSignatures(classSymbol);\n\n                if (isGeneric) {\n                    specializations = classSymbol.getKnownSpecializations();\n\n                    for (i = 0; i < specializations.length; i++) {\n                        this.cleanClassSignatures(<PullClassTypeSymbol>specializations[i]);\n                    }                 \n                }\n            }\n\n            this.pushParent(classSymbol, classDecl);\n\n            var childDecls = classDecl.getChildDecls();\n\n            for (i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n\n            this.popParent();\n\n            // create the default constructor symbol, if necessary\n\n            // even if we\'ve already tried to set these, we want to try again after we\'ve walked the class members\n            constructorSymbol = classSymbol.getConstructorMethod();\n            constructorTypeSymbol = <PullConstructorTypeSymbol>(constructorSymbol ? constructorSymbol.getType() : null);\n\n            if (!constructorSymbol) {\n                constructorSymbol = new PullSymbol(className, PullElementKind.ConstructorMethod);\n                constructorTypeSymbol = new PullConstructorTypeSymbol();\n\n                constructorSymbol.setIsSynthesized();\n\n                constructorSymbol.setType(constructorTypeSymbol);\n                constructorSymbol.addDeclaration(classDecl);\n                classSymbol.setConstructorMethod(constructorSymbol);\n\n                constructorTypeSymbol.addDeclaration(classDecl);\n\n                classSymbol.setHasDefaultConstructor();\n\n                if (!classAST.extendsList || !classAST.extendsList.members.length) {\n                    var constructorSignature = new PullSignatureSymbol(PullElementKind.ConstructSignature);\n                    constructorSignature.setReturnType(classSymbol);\n                    constructorTypeSymbol.addConstructSignature(constructorSignature);\n                    constructorSignature.addDeclaration(classDecl);\n                }\n\n                // set the class decl\'s AST to the class declaration\n                //this.semanticInfo.setASTForDecl(classDecl, classAST);\n            }\n\n            constructorTypeSymbol.setAssociatedContainerType(classSymbol);\n\n            // bind statics to the constructor symbol\n            if (this.staticClassMembers.length) {\n                var member: PullSymbol;\n                var isPrivate = false;\n                var memberMap: any = {};\n                var memberDecl: PullDecl;\n                var memberAST: AST;\n\n                for (i = 0; i < this.staticClassMembers.length; i++) {\n\n                    member = this.staticClassMembers[i];\n\n                    if (memberMap[member.getName()]) {\n                        memberDecl = member.getDeclarations()[0];\n                        memberAST = this.semanticInfo.getASTForDecl(memberDecl);\n                        memberDecl.addDiagnostic(new PullDiagnostic(memberAST.minChar, memberAST.getLength(), this.semanticInfo.getPath(),\n                            getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [member.getName()])));\n                    }\n                    else {\n                        memberMap[member.getName()] = true;\n                    }\n\n                    isPrivate = member.hasFlag(PullElementFlags.Private);\n\n                    constructorTypeSymbol.addMember(member, isPrivate ? SymbolLinkKind.PrivateMember : SymbolLinkKind.PublicMember);\n                }\n\n                this.staticClassMembers.length = 0;\n            }\n\n            var typeParameters = classDecl.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            // PULLREVIEW: Now that we clean type paramters, searching is redundant\n            for (i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = classSymbol.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n\n                    classSymbol.addMember(typeParameter, SymbolLinkKind.TypeParameter);\n                    constructorTypeSymbol.addTypeParameter(typeParameter);\n                }\n                else {\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            classSymbol.setIsBound(this.bindingPhase);\n        }\n\n        // interfaces\n        public bindInterfaceDeclarationToPullSymbol(interfaceDecl: PullDecl) {\n\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n            var interfaceName = interfaceDecl.getName();\n            var interfaceSymbol: PullTypeSymbol = <PullTypeSymbol>this.findSymbolInContext(interfaceName, PullElementKind.SomeType, []);\n\n            var interfaceAST = <TypeDeclaration>this.semanticInfo.getASTForDecl(interfaceDecl);\n            var createdNewSymbol = false;\n            var parent = this.getParent();\n\n            var i = 0;\n            var j = 0;\n\n            if (parent) {\n                interfaceSymbol = parent.findNestedType(interfaceName);\n            }\n            else if (!(interfaceDecl.getFlags() & PullElementFlags.Exported)) {\n                interfaceSymbol = <PullClassTypeSymbol>this.findSymbolInContext(interfaceName, PullElementKind.SomeType, []);\n            }\n\n            if (interfaceSymbol && (interfaceSymbol.getKind() != PullElementKind.Interface)) {\n                interfaceDecl.addDiagnostic(new PullDiagnostic(interfaceAST.minChar, interfaceAST.getLength(), this.semanticInfo.getPath(),\n                    getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [interfaceName])));\n                interfaceSymbol = null;\n            }\n\n            if (!interfaceSymbol) {\n                interfaceSymbol = new PullTypeSymbol(interfaceName, PullElementKind.Interface);\n                createdNewSymbol = true;\n            }\n\n            interfaceSymbol.addDeclaration(interfaceDecl);\n            interfaceDecl.setSymbol(interfaceSymbol);\n\n            this.semanticInfo.setSymbolForAST(interfaceAST.name, interfaceSymbol);\n            this.semanticInfo.setSymbolForAST(interfaceAST, interfaceSymbol);\n\n            if (createdNewSymbol) {\n\n                if (parent) {\n                    var linkKind = interfaceDecl.getFlags() & PullElementFlags.Exported ? SymbolLinkKind.PublicMember : SymbolLinkKind.PrivateMember;\n\n                    if (linkKind == SymbolLinkKind.PublicMember) {\n                        parent.addMember(interfaceSymbol, linkKind);\n                    }\n                    else {\n                        interfaceSymbol.setContainer(parent);\n                    }\n                }\n            }\n            else if (this.reBindingAfterChange) {\n                // clear out the old decls...\n                var decls = interfaceSymbol.getDeclarations();\n                var scriptName = interfaceDecl.getScriptName();\n\n                for (i = 0; i < decls.length; i++) {\n                    if (decls[i].getScriptName() == scriptName && decls[i].getDeclID() < this.startingDeclForRebind) {\n                        interfaceSymbol.removeDeclaration(decls[i]);\n                    }\n                }\n\n                if (interfaceSymbol.isGeneric()) {\n\n                    //interfaceSymbol.invalidateSpecializations();\n\n                    var specializations = interfaceSymbol.getKnownSpecializations();\n                    var specialization: PullTypeSymbol = null;\n\n                    for (i = 0; i < specializations.length; i++) {\n                        specialization = specializations[i];\n\n                        decls = specialization.getDeclarations();\n\n                        for (j = 0; j < decls.length; j++) {\n                            if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                                specialization.removeDeclaration(decls[j]);\n                            }\n                        }\n\n                        specialization.addDeclaration(interfaceDecl);\n                    }\n\n                    interfaceSymbol.cleanTypeParameters();\n\n                    interfaceSymbol.setUnresolved();\n                }\n            }\n\n            this.pushParent(interfaceSymbol, interfaceDecl);\n\n            var childDecls = interfaceDecl.getChildDecls();\n\n            for (i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n\n            this.popParent();\n\n            var typeParameters = interfaceDecl.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            // PULLREVIEW: Now that we clean type paramters, searching is redundant\n            for (i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = interfaceSymbol.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n\n                    interfaceSymbol.addMember(typeParameter, SymbolLinkKind.TypeParameter);\n                }\n                else {\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n        }\n\n        public bindObjectTypeDeclarationToPullSymbol(objectDecl: PullDecl) {\n            var objectSymbolAST: AST = this.semanticInfo.getASTForDecl(objectDecl);\n\n            var objectSymbol = new PullTypeSymbol(\"\", PullElementKind.ObjectType);\n\n            objectSymbol.addDeclaration(objectDecl);\n            objectDecl.setSymbol(objectSymbol);\n\n            this.semanticInfo.setSymbolForAST(objectSymbolAST, objectSymbol);\n\n            this.pushParent(objectSymbol, objectDecl);\n\n            var childDecls = objectDecl.getChildDecls();\n\n            var i = 0;\n\n            for (i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n\n            this.popParent();\n\n            var typeParameters = objectDecl.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = objectSymbol.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n\n                    objectSymbol.addMember(typeParameter, SymbolLinkKind.TypeParameter);\n                }\n                else {\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n        }\n\n        public bindConstructorTypeDeclarationToPullSymbol(constructorTypeDeclaration: PullDecl) {\n            var declKind = constructorTypeDeclaration.getKind();\n            var declFlags = constructorTypeDeclaration.getFlags();\n            var constructorTypeAST = this.semanticInfo.getASTForDecl(constructorTypeDeclaration);\n\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n\n            var constructorTypeSymbol = new PullConstructorTypeSymbol();\n\n            constructorTypeDeclaration.setSymbol(constructorTypeSymbol);\n            constructorTypeSymbol.addDeclaration(constructorTypeDeclaration);\n            this.semanticInfo.setSymbolForAST(constructorTypeAST, constructorTypeSymbol);\n\n            var signature = new PullDefinitionSignatureSymbol(PullElementKind.ConstructSignature);\n\n            signature.addDeclaration(constructorTypeDeclaration);\n            constructorTypeDeclaration.setSignatureSymbol(signature);\n\n            this.bindParameterSymbols(<FuncDecl>this.semanticInfo.getASTForDecl(constructorTypeDeclaration), constructorTypeSymbol, signature);\n\n            // add the implicit construct member for this function type\n            constructorTypeSymbol.addSignature(signature);\n\n            var typeParameters = constructorTypeDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = constructorTypeSymbol.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n\n                    constructorTypeSymbol.addTypeParameter(typeParameter);\n                }\n                else {\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n        }\n\n        // variables\n        public bindVariableDeclarationToPullSymbol(variableDeclaration: PullDecl) {\n            var declFlags = variableDeclaration.getFlags();\n            var declKind = variableDeclaration.getKind();\n            var varDeclAST = <VarDecl>this.semanticInfo.getASTForDecl(variableDeclaration);\n\n            var isExported = false;\n\n            var linkKind = SymbolLinkKind.PrivateMember;\n\n            var variableSymbol: PullSymbol = null;\n\n            var declName = variableDeclaration.getName();\n\n            var parentHadSymbol = false;\n\n            var parent = this.getParent(true);\n\n            var i = 0;\n\n            // The code below accounts for the variable symbol being a type because\n            // modules may create instance variables\n\n            if (parent) {\n                variableSymbol = parent.findMember(declName);\n\n                if (!variableSymbol) {\n                    variableSymbol = parent.findContainedMember(declName);\n                    var parentDecl = this.getParentDecl();\n\n                    if (variableSymbol && (parentDecl != variableSymbol.getDeclarations()[0].getParentDecl())) {\n                        variableSymbol = null;\n                    }\n                }\n\n            }\n            else if (!(variableDeclaration.getFlags() & PullElementFlags.Exported)) {\n                variableSymbol = this.findSymbolInContext(declName, PullElementKind.SomeValue, []);\n            }\n\n            if (variableSymbol && !variableSymbol.isType()) {\n                parentHadSymbol = true;\n            }\n\n            var span: TextSpan;\n            var decl: PullDecl;\n            var decls: PullDecl[];\n            var ast: AST;\n            var members: PullSymbol[];\n\n            // PULLTODO: Keeping these two error clauses separate for now, so that we can add a better error message later\n            if (variableSymbol && this.symbolIsRedeclaration(variableSymbol)) {\n                // if it\'s an implicit variable, then this variable symbol will actually be a class constructor\n                // or container type that was just defined, so we don\'t want to raise an error\n                if ((declFlags & PullElementFlags.ImplicitVariable) == 0) {\n                    span = variableDeclaration.getSpan();\n\n                    variableDeclaration.addDiagnostic(new PullDiagnostic(span.start(), span.length(), this.semanticInfo.getPath(),\n                        getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [declName])));\n                    variableSymbol = null;\n                    parentHadSymbol = false;\n                }\n            }\n            else if (variableSymbol && (variableSymbol.getKind() != PullElementKind.Variable) && ((declFlags & PullElementFlags.ImplicitVariable) == 0)) {\n                span = variableDeclaration.getSpan();\n\n                variableDeclaration.addDiagnostic(new PullDiagnostic(span.start(), span.length(), this.semanticInfo.getPath(),\n                    getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [declName])));\n                variableSymbol = null;\n                parentHadSymbol = false;\n            }\n\n            if (this.reBindingAfterChange && variableSymbol && !variableSymbol.isType()) {\n\n                // prune out-of-date decls...\n                decls = variableSymbol.getDeclarations();\n                var scriptName = variableDeclaration.getScriptName();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        variableSymbol.removeDeclaration(decls[j]);\n                    }\n                }\n\n                variableSymbol.invalidate();\n            }\n\n            if ((declFlags & PullElementFlags.ImplicitVariable) == 0) {\n                if (!variableSymbol) {\n                    variableSymbol = new PullSymbol(declName, declKind);\n                }\n\n                variableSymbol.addDeclaration(variableDeclaration);\n                variableDeclaration.setSymbol(variableSymbol);\n\n                this.semanticInfo.setSymbolForAST(varDeclAST.id, variableSymbol);\n                this.semanticInfo.setSymbolForAST(varDeclAST, variableSymbol);\n            }\n            else if (!parentHadSymbol) {\n\n                if ((declFlags & PullElementFlags.ClassConstructorVariable)) {\n                    // it\'s really an implicit class decl, so we need to set the type of the symbol to\n                    // the constructor type\n                    // Note that we would have already found the class symbol in the search above\n                    var classTypeSymbol: PullClassTypeSymbol = <PullClassTypeSymbol>variableSymbol;\n\n                    // PULLTODO: In both this case and the case below, we should have already received the\n                    // class or module symbol as the variableSymbol found above\n                    if (parent) {\n                        members = parent.getMembers();\n\n                        for (i = 0; i < members.length; i++) {\n                            if ((members[i].getName() == declName) && (members[i].getKind() == PullElementKind.Class)) {\n                                classTypeSymbol = <PullClassTypeSymbol>members[i];\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!classTypeSymbol) {\n                        classTypeSymbol = <PullClassTypeSymbol>this.findSymbolInContext(declName, PullElementKind.SomeType, []);\n\n                        if (classTypeSymbol && (classTypeSymbol.getKind() != PullElementKind.Class)) {\n                            classTypeSymbol = null;\n                        }\n                    }\n\n                    if (classTypeSymbol && classTypeSymbol.isClass()) { // protect against duplicate declarations\n                        variableSymbol = classTypeSymbol.getConstructorMethod();\n                        variableDeclaration.setSymbol(variableSymbol);\n\n                        // set the AST to the constructor method\'s if possible\n                        decls = classTypeSymbol.getDeclarations();\n\n                        if (decls.length) {\n\n                            decl = decls[decls.length - 1];\n                            ast = this.semanticInfo.getASTForDecl(decl);\n\n                            if (ast) {\n                                this.semanticInfo.setASTForDecl(variableDeclaration, ast);\n                            }\n                        }\n                    }\n                    else {\n                        // PULLTODO: Clodules/Interfaces on classes\n                        if (!variableSymbol) {\n                            variableSymbol = new PullSymbol(declName, declKind);\n                        }\n\n                        variableSymbol.addDeclaration(variableDeclaration);\n                        variableDeclaration.setSymbol(variableSymbol);\n\n                        variableSymbol.setType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n                }\n                else if (declFlags & PullElementFlags.SomeInitializedModule) {\n                    var moduleContainerTypeSymbol: PullContainerTypeSymbol = null;\n                    var moduleParent = this.getParent(false);\n\n                    if (moduleParent) {\n                        members = moduleParent.getMembers();\n\n                        for (i = 0; i < members.length; i++) {\n                            if ((members[i].getName() == declName) && (members[i].isContainer())) {\n                                moduleContainerTypeSymbol = <PullContainerTypeSymbol>members[i];\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!moduleContainerTypeSymbol) {\n                        moduleContainerTypeSymbol = <PullContainerTypeSymbol>this.findSymbolInContext(declName, PullElementKind.SomeType, []);\n\n                        if (moduleContainerTypeSymbol && (!moduleContainerTypeSymbol.isContainer())) {\n                            moduleContainerTypeSymbol = null;\n                        }\n                    }\n\n                    if (moduleContainerTypeSymbol) {\n                        variableSymbol = moduleContainerTypeSymbol.getInstanceSymbol();\n\n                        variableSymbol.addDeclaration(variableDeclaration);\n                        variableDeclaration.setSymbol(variableSymbol);\n\n                        // set the AST to the constructor method\'s if possible\n                        decls = moduleContainerTypeSymbol.getDeclarations();\n\n                        if (decls.length) {\n\n                            decl = decls[decls.length - 1];\n                            ast = this.semanticInfo.getASTForDecl(decl);\n\n                            if (ast) {\n                                this.semanticInfo.setASTForDecl(variableDeclaration, ast);\n                            }\n                        }\n\n                        // we added the variable to the parent when binding the module\n                        parentHadSymbol = true;\n                    }\n                    else {\n                        // PULLTODO: Raise an Error here\n                        variableSymbol.setType(this.semanticInfoChain.anyTypeSymbol);\n                    }\n                }\n            }\n            else {\n                variableSymbol.addDeclaration(variableDeclaration);\n                variableDeclaration.setSymbol(variableSymbol);\n            }\n\n            if (parent && !parentHadSymbol) {\n\n                if (declFlags & PullElementFlags.Exported) {\n                    parent.addMember(variableSymbol, SymbolLinkKind.PublicMember);\n                }\n                else {\n                    variableSymbol.setContainer(parent);\n                }\n            }\n            this.recordNonInterfaceParentModule();\n\n            variableSymbol.setIsBound(this.bindingPhase);\n        }\n\n        // properties\n        public bindPropertyDeclarationToPullSymbol(propertyDeclaration: PullDecl) {\n            var declFlags = propertyDeclaration.getFlags();\n            var declKind = propertyDeclaration.getKind();\n            var propDeclAST = <VarDecl>this.semanticInfo.getASTForDecl(propertyDeclaration);\n\n            var isStatic = false;\n            var isOptional = false;\n            var isImplicit = (declFlags & PullElementFlags.ImplicitVariable) != 0;\n\n            var linkKind = SymbolLinkKind.PublicMember;\n\n            var propertySymbol: PullSymbol = null;\n\n            if (hasFlag(declFlags, PullElementFlags.Static)) {\n                isStatic = true;\n            }\n\n            if (hasFlag(declFlags, PullElementFlags.Private)) {\n                linkKind = SymbolLinkKind.PrivateMember;\n            }\n\n            if (hasFlag(declFlags, PullElementFlags.Optional)) {\n                isOptional = true;\n            }\n\n            var declName = propertyDeclaration.getName();\n\n            var parentHadSymbol = false;\n\n            var parent = this.getParent(true);\n\n            if (parent.isClass() && isStatic) {\n\n                for (i = 0; i < this.staticClassMembers.length; i++) {\n                    if (this.staticClassMembers[i].getName() == declName) {\n                        propertySymbol = this.staticClassMembers[i];\n                        break;\n                    }\n                }\n            }\n            else {\n                propertySymbol = parent.findMember(declName);\n            }\n\n            if (propertySymbol && (!this.reBindingAfterChange || this.symbolIsRedeclaration(propertySymbol))) {\n\n                if (!propertySymbol.isType() || \n                    !isImplicit ||\n                    (!(<PullTypeSymbol>propertySymbol).isClass() && isImplicit)) {\n\n                    // use the span, since we may not have an AST if this is a class constructor property for a class\n                    // with an implicit constructor...\n                    var span = propertyDeclaration.getSpan();\n\n                    propertyDeclaration.addDiagnostic(new PullDiagnostic(span.start(), span.length(), this.semanticInfo.getPath(), getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [declName])));\n                }\n                \n                propertySymbol = null;\n            }\n\n            if (propertySymbol) {\n                parentHadSymbol = true;\n            }\n\n            if (this.reBindingAfterChange && propertySymbol) {\n\n                // prune out-of-date decls...\n                var decls = propertySymbol.getDeclarations();\n                var scriptName = propertyDeclaration.getScriptName();\n\n                for (var j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        propertySymbol.removeDeclaration(decls[j]);\n                    }\n                }\n\n                propertySymbol.setUnresolved();\n            }\n\n            var classTypeSymbol: PullClassTypeSymbol;\n\n            if ((declFlags & PullElementFlags.ImplicitVariable) == 0) {\n                if (!parentHadSymbol) {\n                    propertySymbol = new PullSymbol(declName, declKind);\n                }\n\n                propertySymbol.addDeclaration(propertyDeclaration);\n                propertyDeclaration.setSymbol(propertySymbol);\n\n                this.semanticInfo.setSymbolForAST(propDeclAST.id, propertySymbol);\n                this.semanticInfo.setSymbolForAST(propDeclAST, propertySymbol);\n            }\n            else {\n                // it\'s really an implicit class decl, so we need to set the type of the symbol to\n                // the constructor type\n\n                if (parent) {\n                    var members = parent.getMembers();\n\n                    for (var i = 0; i < members.length; i++) {\n                        if ((members[i].getName() == declName) && (members[i].getKind() == PullElementKind.Class)) {\n                            classTypeSymbol = <PullClassTypeSymbol>members[i];\n                            break;\n                        }\n                    }\n                }\n\n                if (!classTypeSymbol) {\n                    classTypeSymbol = <PullClassTypeSymbol>this.findSymbolInContext(declName, PullElementKind.SomeType, []);\n\n                    if (classTypeSymbol && (classTypeSymbol.getKind() != PullElementKind.Class)) {\n                        classTypeSymbol = null;\n                    }\n                }\n\n                if (classTypeSymbol) {\n                    propertySymbol = classTypeSymbol.getConstructorMethod();\n                    propertyDeclaration.setSymbol(propertySymbol);\n                }\n                else {\n                    propertySymbol.setType(this.semanticInfoChain.anyTypeSymbol);\n                }\n\n                propertySymbol.setResolved();\n            }\n\n            if (isOptional) {\n                propertySymbol.setIsOptional();\n            }\n\n            if (parent && !parentHadSymbol) {\n                if (parent.isClass()) {\n                    classTypeSymbol = <PullClassTypeSymbol>parent;\n\n                    if (isStatic) {\n                        this.staticClassMembers[this.staticClassMembers.length] = propertySymbol;\n                    }\n                    else {\n                        classTypeSymbol.addMember(propertySymbol, linkKind);\n                    }\n                }\n                else {\n                    parent.addMember(propertySymbol, linkKind);\n                }\n            }\n\n            propertySymbol.setIsBound(this.bindingPhase);\n        }\n\n        // parameters\n        public bindParameterSymbols(funcDecl: FuncDecl, funcType: PullTypeSymbol, signatureSymbol: PullSignatureSymbol) {\n            // create a symbol for each ast\n            // if it\'s a property, add the symbol to the enclosing type\'s member list\n            var parameters: PullSymbol[] = [];\n            var decl: PullDecl = null;\n            var argDecl: BoundDecl = null;\n            var parameterSymbol: PullSymbol = null;\n            var isProperty = false;\n            var params: any = new BlockIntrinsics();\n\n            if (funcDecl.arguments) {\n\n                for (var i = 0; i < funcDecl.arguments.members.length; i++) {\n                    argDecl = <BoundDecl>funcDecl.arguments.members[i];\n                    decl = this.semanticInfo.getDeclForAST(argDecl);\n                    isProperty = hasFlag(argDecl.getVarFlags(), VariableFlags.Property);\n                    parameterSymbol = new PullSymbol(argDecl.id.text, PullElementKind.Parameter);\n\n                    if (funcDecl.variableArgList && i == funcDecl.arguments.members.length - 1) {\n                        parameterSymbol.setIsVarArg();\n\n                        if (argDecl.init || hasFlag(argDecl.id.getFlags(), ASTFlags.OptionalName)) {\n                            decl.addDiagnostic(new PullDiagnostic(argDecl.minChar, argDecl.getLength(), this.semanticInfo.getPath(), \"Varargs may not be optional or have default parameters\"));\n                        }\n                    }\n\n                    if (decl.getFlags() & PullElementFlags.Optional) {\n                        parameterSymbol.setIsOptional();\n                    }\n\n                    if (params[argDecl.id.text]) {\n                        decl.addDiagnostic(new PullDiagnostic(argDecl.minChar, argDecl.getLength(), this.semanticInfo.getPath(),\n                            getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [argDecl.id.actualText])));\n                    }\n                    else {\n                        params[argDecl.id.text] = true;\n                    }\n                    if (decl) {\n                        parameterSymbol.addDeclaration(decl);\n                        decl.setSymbol(parameterSymbol);\n\n                        var valDecl = decl.getValueDecl();\n\n                        // if this is a parameter property, we still need to set the value decl\n                        // for the function parameter\n                        if (valDecl) {\n                            valDecl.setSymbol(parameterSymbol);\n                            parameterSymbol.addDeclaration(valDecl);\n                        }\n                    }\n                    this.semanticInfo.setSymbolForAST(argDecl.id, parameterSymbol);\n                    this.semanticInfo.setSymbolForAST(argDecl, parameterSymbol);\n\n                    signatureSymbol.addParameter(parameterSymbol, parameterSymbol.getIsOptional());\n\n                    if (signatureSymbol.isDefinition()) {\n                        parameterSymbol.setContainer(funcType);\n                    }\n\n                    // PULLREVIEW: Shouldn\'t need this, since parameters are created off of decl collection\n                    // add a member to the parent type\n                    //if (decl && isProperty) {\n                    //    parameterSymbol = new PullSymbol(argDecl.id.text, PullElementKind.Field);\n\n                    //    parameterSymbol.addDeclaration(decl);\n                    //    decl.setPropertySymbol(parameterSymbol);\n\n                    //    var linkKind = (decl.getDeclFlags() & PullElementFlags.Private) ? SymbolLinkKind.PrivateProperty : SymbolLinkKind.PublicProperty;\n                    //    var parent = context.getParent(1);\n                    //    if (parent.hasBrand()) {\n                    //        (<PullClassSymbol>parent).getInstanceType().addMember(parameterSymbol, linkKind);\n                    //    }\n                    //    else {\n                    //        // PULLTODO: I don\'t think we ever even take this branch...\n                    //        parent.addMember(parameterSymbol, linkKind);\n                    //    }\n                    //}\n                }\n            }\n        }\n\n        // function declarations\n        public bindFunctionDeclarationToPullSymbol(functionDeclaration: PullDecl) {\n            var declKind = functionDeclaration.getKind();\n            var declFlags = functionDeclaration.getFlags();\n            var funcDeclAST = <FuncDecl>this.semanticInfo.getASTForDecl(functionDeclaration);\n\n            var isExported = (declFlags & PullElementFlags.Exported) != 0;\n\n            var funcName = functionDeclaration.getName();\n\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n\n            var isSignature: bool = (declFlags & PullElementFlags.Signature) != 0;\n\n            var parent = this.getParent(true);\n            var parentHadSymbol = false;\n            var cleanedPreviousDecls = false;\n\n            // PULLREVIEW: On a re-bind, there\'s no need to search far-and-wide: just look in the parent\'s member list\n            var functionSymbol: PullSymbol = null;\n            var functionTypeSymbol: PullFunctionTypeSymbol = null;\n\n            var i = 0;\n            var j = 0;\n\n            if (parent) {\n                functionSymbol = parent.findMember(funcName);\n\n                if (!functionSymbol) {\n                    functionSymbol = parent.findContainedMember(funcName);\n                    var parentDecl = this.getParentDecl();\n\n                    if (functionSymbol && (parentDecl != functionSymbol.getDeclarations()[0].getParentDecl())) {\n                        functionSymbol = null;\n                    }\n                }\n            }\n            else if (!(functionDeclaration.getFlags() & PullElementFlags.Exported)) {\n                functionSymbol = this.findSymbolInContext(funcName, PullElementKind.SomeValue, []);\n            }\n\n            if (functionSymbol && \n                (functionSymbol.getKind() != PullElementKind.Function ||\n                    (this.symbolIsRedeclaration(functionSymbol) && !isSignature && !functionSymbol.allDeclsHaveFlag(PullElementFlags.Signature)))) {\n                functionDeclaration.addDiagnostic(new PullDiagnostic(funcDeclAST.minChar, funcDeclAST.getLength(), this.semanticInfo.getPath(),\n                    getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [funcName])));\n                functionSymbol = null;\n            }\n\n            if (functionSymbol) {\n                functionTypeSymbol = <PullFunctionTypeSymbol>functionSymbol.getType();\n                parentHadSymbol = true;\n            }\n\n            if (this.reBindingAfterChange && functionSymbol) {\n\n                // prune out-of-date decls...\n                var decls = functionSymbol.getDeclarations();\n                var scriptName = functionDeclaration.getScriptName();\n                var isGeneric = functionTypeSymbol.isGeneric();\n\n                for (j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        functionSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                decls = functionTypeSymbol.getDeclarations();\n\n                for (j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        functionTypeSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                if (isGeneric) {\n                    var specializations = functionTypeSymbol.getKnownSpecializations();\n\n                    for (i = 0; i < specializations.length; i++) {\n                        decls = specializations[i].getDeclarations();\n\n                        for (j = 0; j < decls.length; j++) {\n                            if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                                specializations[i].removeDeclaration(decls[j]);\n                                specializations[i].addDeclaration(functionDeclaration);\n                                specializations[i].invalidate();\n                                cleanedPreviousDecls = true;\n                            }                    \n                        }\n                    }\n                }\n\n                functionSymbol.invalidate();\n                functionTypeSymbol.invalidate();\n            }\n\n            if (!functionSymbol) {\n                // PULLTODO: Make sure that we properly flag signature decl types when collecting decls\n                functionSymbol = new PullSymbol(funcName, PullElementKind.Function);\n            }\n\n            if (!functionTypeSymbol) {\n                functionTypeSymbol = new PullFunctionTypeSymbol();\n                functionSymbol.setType(functionTypeSymbol);\n            }\n\n            functionDeclaration.setSymbol(functionSymbol);\n            functionSymbol.addDeclaration(functionDeclaration);\n            functionTypeSymbol.addDeclaration(functionDeclaration);\n\n            this.semanticInfo.setSymbolForAST(funcDeclAST.name, functionSymbol);\n            this.semanticInfo.setSymbolForAST(funcDeclAST, functionSymbol);\n\n            if (parent && !parentHadSymbol) {\n                if (isExported) {\n                    parent.addMember(functionSymbol, SymbolLinkKind.PublicMember);\n                }\n                else {\n                    functionSymbol.setContainer(parent);\n                }\n            }\n            this.recordNonInterfaceParentModule();\n\n            if (!isSignature) {\n                this.pushParent(functionTypeSymbol, functionDeclaration);\n            }\n\n            // PULLTODO: For now, remove stale signatures from the function type, but we want to be smarter about this when\n            // incremental parsing comes online\n            if (parentHadSymbol && cleanedPreviousDecls) {\n                var callSigs = functionTypeSymbol.getCallSignatures();\n\n                for (i = 0; i < callSigs.length; i++) {\n                    functionTypeSymbol.removeCallSignature(callSigs[i], false);\n                }\n\n                // just invalidate this once, so we don\'t pay the cost of rebuilding caches\n                // for each signature removed\n                functionSymbol.invalidate();\n                functionTypeSymbol.invalidate();\n                functionTypeSymbol.recomputeCallSignatures();\n            }\n\n            var signature = isSignature ? new PullSignatureSymbol(PullElementKind.CallSignature) : new PullDefinitionSignatureSymbol(PullElementKind.CallSignature);\n\n            signature.addDeclaration(functionDeclaration);\n            functionDeclaration.setSignatureSymbol(signature);\n\n            if (funcDeclAST.variableArgList) {\n                signature.setHasVariableParamList();\n            }\n\n            this.bindParameterSymbols(<FuncDecl>this.semanticInfo.getASTForDecl(functionDeclaration), functionTypeSymbol, signature);\n\n            var typeParameters = functionDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = signature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n\n                    signature.addTypeParameter(typeParameter);\n                }\n                else {\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            // add the implicit call member for this function type\n            functionTypeSymbol.addSignature(signature);\n\n            if (!isSignature) {\n                var childDecls = functionDeclaration.getChildDecls();\n\n                for (i = 0; i < childDecls.length; i++) {\n                    this.bindDeclToPullSymbol(childDecls[i]);\n                }\n\n                this.popParent();\n            }\n\n            //functionSymbol.setIsBound(this.bindingPhase);\n        }\n\n        public bindFunctionExpressionToPullSymbol(functionExpressionDeclaration: PullDecl) {\n            var declKind = functionExpressionDeclaration.getKind();\n            var declFlags = functionExpressionDeclaration.getFlags();\n            var funcExpAST = <FuncDecl>this.semanticInfo.getASTForDecl(functionExpressionDeclaration);\n\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n\n            var functionSymbol: PullSymbol = new PullSymbol(functionExpressionDeclaration.getName(), PullElementKind.Function);\n            var functionTypeSymbol = new PullFunctionTypeSymbol();\n\n            functionSymbol.setType(functionTypeSymbol);\n\n            functionExpressionDeclaration.setSymbol(functionSymbol);\n            functionSymbol.addDeclaration(functionExpressionDeclaration);\n\n            if (funcExpAST.name) {\n                this.semanticInfo.setSymbolForAST(funcExpAST.name, functionSymbol);\n            }\n            this.semanticInfo.setSymbolForAST(funcExpAST, functionSymbol);\n\n            this.pushParent(functionTypeSymbol, functionExpressionDeclaration);\n\n            var signature = new PullDefinitionSignatureSymbol(PullElementKind.CallSignature);\n\n            if (funcExpAST.variableArgList) {\n                signature.setHasVariableParamList();\n            }\n\n            var typeParameters = functionExpressionDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = signature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n\n                    signature.addTypeParameter(typeParameter);\n                }\n                else {\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            signature.addDeclaration(functionExpressionDeclaration);\n            functionExpressionDeclaration.setSignatureSymbol(signature);\n\n            this.bindParameterSymbols(<FuncDecl>this.semanticInfo.getASTForDecl(functionExpressionDeclaration), functionTypeSymbol, signature);\n\n            // add the implicit call member for this function type\n            functionTypeSymbol.addSignature(signature);\n\n            var childDecls = functionExpressionDeclaration.getChildDecls();\n\n            for (i = 0; i < childDecls.length; i++) {\n                this.bindDeclToPullSymbol(childDecls[i]);\n            }\n\n            this.popParent();\n        }\n\n        public bindFunctionTypeDeclarationToPullSymbol(functionTypeDeclaration: PullDecl) {\n            var declKind = functionTypeDeclaration.getKind();\n            var declFlags = functionTypeDeclaration.getFlags();\n            var funcTypeAST = <FuncDecl>this.semanticInfo.getASTForDecl(functionTypeDeclaration);\n\n            // 1. Test for existing decl - if it exists, use its symbol\n            // 2. If no other decl exists, create a new symbol and use that one\n\n            var functionTypeSymbol = new PullFunctionTypeSymbol();\n\n            functionTypeDeclaration.setSymbol(functionTypeSymbol);\n            functionTypeSymbol.addDeclaration(functionTypeDeclaration);\n            this.semanticInfo.setSymbolForAST(funcTypeAST, functionTypeSymbol);\n\n            this.pushParent(functionTypeSymbol, functionTypeDeclaration);\n\n            var signature = new PullDefinitionSignatureSymbol(PullElementKind.CallSignature);\n\n            if (funcTypeAST.variableArgList) {\n                signature.setHasVariableParamList();\n            }\n\n            var typeParameters = functionTypeDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = signature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n\n                    signature.addTypeParameter(typeParameter);\n                }\n                else {\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            signature.addDeclaration(functionTypeDeclaration);\n            functionTypeDeclaration.setSignatureSymbol(signature);\n\n            this.bindParameterSymbols(<FuncDecl>this.semanticInfo.getASTForDecl(functionTypeDeclaration), functionTypeSymbol, signature);\n\n            // add the implicit call member for this function type\n            functionTypeSymbol.addSignature(signature);\n\n            this.popParent();\n        }\n\n        // method declarations\n        public bindMethodDeclarationToPullSymbol(methodDeclaration: PullDecl) {\n            var declKind = methodDeclaration.getKind();\n            var declFlags = methodDeclaration.getFlags();\n            var methodAST = <FuncDecl>this.semanticInfo.getASTForDecl(methodDeclaration);\n\n            var isPrivate = (declFlags & PullElementFlags.Private) != 0;\n            var isStatic = (declFlags & PullElementFlags.Static) != 0;\n\n            var methodName = methodDeclaration.getName();\n\n            var isSignature: bool = (declFlags & PullElementFlags.Signature) != 0;\n\n            var parent = this.getParent(true);\n            var parentHadSymbol = false;\n\n            var cleanedPreviousDecls = false;\n\n            var methodSymbol: PullSymbol = null;\n            var methodTypeSymbol: PullFunctionTypeSymbol = null;\n\n            var linkKind = isPrivate ? SymbolLinkKind.PrivateMember : SymbolLinkKind.PublicMember;\n\n            var i = 0;\n            var j = 0;\n\n            if (parent.isClass() && isStatic) {\n\n                for (i = 0; i < this.staticClassMembers.length; i++) {\n                    if (this.staticClassMembers[i].getName() == methodName) {\n                        methodSymbol = this.staticClassMembers[i];\n                        break;\n                    }\n                }\n            }\n            else {\n                methodSymbol = parent.findMember(methodName);\n            }\n\n            if (methodSymbol &&\n                (methodSymbol.getKind() != PullElementKind.Method ||\n                (this.symbolIsRedeclaration(methodSymbol) && !isSignature && !methodSymbol.allDeclsHaveFlag(PullElementFlags.Signature)))) {\n                methodDeclaration.addDiagnostic(new PullDiagnostic(methodAST.minChar, methodAST.getLength(), this.semanticInfo.getPath(), getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [methodName])));\n                methodSymbol = null;\n            }\n\n            if (methodSymbol) {\n                methodTypeSymbol = <PullFunctionTypeSymbol>methodSymbol.getType();\n                parentHadSymbol = true;\n            }\n\n            if (this.reBindingAfterChange && methodSymbol) {\n\n                // prune out-of-date decls...\n                var decls = methodSymbol.getDeclarations();\n                var scriptName = methodDeclaration.getScriptName();\n                var isGeneric = methodTypeSymbol.isGeneric();\n\n                for (j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        methodSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                decls = methodTypeSymbol.getDeclarations();\n                for (j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        methodTypeSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                if (isGeneric) {\n                    var specializations = methodTypeSymbol.getKnownSpecializations();\n\n                    for (i = 0; i < specializations.length; i++) {\n                        decls = specializations[i].getDeclarations();\n\n                        for (j = 0; j < decls.length; j++) {\n                            if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                                specializations[i].removeDeclaration(decls[j]);\n                                specializations[i].addDeclaration(methodDeclaration);\n                                specializations[i].invalidate();\n                                cleanedPreviousDecls = true;\n                            }                    \n                        }\n                    }\n                }\n\n                methodSymbol.invalidate();\n                methodTypeSymbol.invalidate();\n            }\n\n            if (!methodSymbol) {\n                // PULLTODO: Make sure that we properly flag signature decl types when collecting decls\n                methodSymbol = new PullSymbol(methodName, PullElementKind.Method);\n            }\n\n            if (!methodTypeSymbol) {\n                methodTypeSymbol = new PullFunctionTypeSymbol();\n                methodSymbol.setType(methodTypeSymbol);\n            }\n\n            methodDeclaration.setSymbol(methodSymbol);\n            methodSymbol.addDeclaration(methodDeclaration);\n            methodTypeSymbol.addDeclaration(methodDeclaration);\n            this.semanticInfo.setSymbolForAST(methodAST.name, methodSymbol);\n            this.semanticInfo.setSymbolForAST(methodAST, methodSymbol);\n\n            if (!parentHadSymbol) {\n\n                if (isStatic) {\n                    this.staticClassMembers[this.staticClassMembers.length] = methodSymbol;\n                }\n                else {\n                    parent.addMember(methodSymbol, linkKind);\n                }\n            }\n\n            if (!isSignature) {\n                this.pushParent(methodTypeSymbol, methodDeclaration);\n            }\n\n            if (parentHadSymbol && cleanedPreviousDecls) {\n                var callSigs = methodTypeSymbol.getCallSignatures();\n                var constructSigs = methodTypeSymbol.getConstructSignatures();\n                var indexSigs = methodTypeSymbol.getIndexSignatures();\n\n                for (i = 0; i < callSigs.length; i++) {\n                    methodTypeSymbol.removeCallSignature(callSigs[i], false);\n                }\n                for (i = 0; i < constructSigs.length; i++) {\n                    methodTypeSymbol.removeConstructSignature(constructSigs[i], false);\n                }\n                for (i = 0; i < indexSigs.length; i++) {\n                    methodTypeSymbol.removeIndexSignature(indexSigs[i], false);\n                }\n\n                methodSymbol.invalidate();\n                methodTypeSymbol.invalidate();\n                methodTypeSymbol.recomputeCallSignatures();\n                methodTypeSymbol.recomputeConstructSignatures();\n                methodTypeSymbol.recomputeIndexSignatures();\n            }\n\n            var sigKind = PullElementKind.CallSignature;\n\n            var signature = isSignature ? new PullSignatureSymbol(sigKind) : new PullDefinitionSignatureSymbol(sigKind);\n\n            if (methodAST.variableArgList) {\n                signature.setHasVariableParamList();\n            }\n\n            var typeParameters = methodDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = signature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n\n                    signature.addTypeParameter(typeParameter);\n                }\n                else {\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            signature.addDeclaration(methodDeclaration);\n            methodDeclaration.setSignatureSymbol(signature);\n\n            this.bindParameterSymbols(<FuncDecl>this.semanticInfo.getASTForDecl(methodDeclaration), methodTypeSymbol, signature);\n\n            // add the implicit call member for this function type\n            methodTypeSymbol.addSignature(signature);\n\n            if (!isSignature) {\n                var childDecls = methodDeclaration.getChildDecls();\n\n                for (i = 0; i < childDecls.length; i++) {\n                    this.bindDeclToPullSymbol(childDecls[i]);\n                }\n\n                this.popParent();\n            }\n\n            //methodSymbol.setIsBound(this.bindingPhase);\n        }\n\n        // class constructor declarations\n        public bindConstructorDeclarationToPullSymbol(constructorDeclaration: PullDecl) {\n            var declKind = constructorDeclaration.getKind();\n            var declFlags = constructorDeclaration.getFlags();\n            var constructorAST = <FuncDecl>this.semanticInfo.getASTForDecl(constructorDeclaration);\n\n            var constructorName = constructorDeclaration.getName();\n\n            var isSignature: bool = (declFlags & PullElementFlags.Signature) != 0;\n\n            var parent = <PullClassTypeSymbol>this.getParent(true);\n\n            var parentHadSymbol = false;\n            var cleanedPreviousDecls = false;\n\n            var constructorSymbol: PullSymbol = parent.getConstructorMethod();\n            var constructorTypeSymbol: PullConstructorTypeSymbol = null;\n\n            var linkKind = SymbolLinkKind.ConstructorMethod;\n\n            if (constructorSymbol &&\n                (constructorSymbol.getKind() != PullElementKind.ConstructorMethod ||\n                (this.symbolIsRedeclaration(constructorSymbol) && !isSignature && !constructorSymbol.allDeclsHaveFlag(PullElementFlags.Signature)))) {\n                constructorDeclaration.addDiagnostic(new PullDiagnostic(constructorAST.minChar, constructorAST.getLength(), this.semanticInfo.getPath(),\n                    \"Duplicate constructor definition\"));\n                constructorSymbol = null;\n            }            \n\n            if (constructorSymbol) {\n\n                constructorTypeSymbol = <PullConstructorTypeSymbol>constructorSymbol.getType();\n\n                if (this.reBindingAfterChange) {\n                    // prune out-of-date decls...\n                    var decls = constructorSymbol.getDeclarations();\n                    var scriptName = constructorDeclaration.getScriptName();\n                    var isGeneric = constructorTypeSymbol.isGeneric();\n\n                    for (var j = 0; j < decls.length; j++) {\n                        if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                            constructorSymbol.removeDeclaration(decls[j]);\n\n                            cleanedPreviousDecls = true;\n                        }\n                    }\n\n                    decls = constructorTypeSymbol.getDeclarations();\n\n                    for (j = 0; j < decls.length; j++) {\n                        if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                            constructorTypeSymbol.removeDeclaration(decls[j]);\n\n                            cleanedPreviousDecls = true;\n                        }\n                    }\n\n                    if (isGeneric) {\n                        var specializations = constructorTypeSymbol.getKnownSpecializations();\n\n                        for (i = 0; i < specializations.length; i++) {\n                            decls = specializations[i].getDeclarations();\n\n                            for (j = 0; j < decls.length; j++) {\n                                if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                                    specializations[i].removeDeclaration(decls[j]);\n                                    specializations[i].addDeclaration(constructorDeclaration);\n                                    specializations[i].invalidate();\n                                    cleanedPreviousDecls = true;\n                                }                    \n                            }\n                        }\n                    }                          \n\n                    constructorSymbol.invalidate();\n                    constructorTypeSymbol.invalidate();\n                }\n            }\n\n            if (!constructorSymbol) {\n                constructorSymbol = new PullSymbol(constructorName, PullElementKind.ConstructorMethod);\n                constructorTypeSymbol = new PullConstructorTypeSymbol();\n            }\n\n            // Even if we\'re reusing the symbol, it would have been cleared by the call to invalidate above\n            parent.setConstructorMethod(constructorSymbol);\n            constructorSymbol.setType(constructorTypeSymbol);\n\n            constructorDeclaration.setSymbol(constructorSymbol);\n            constructorSymbol.addDeclaration(constructorDeclaration);\n            constructorTypeSymbol.addDeclaration(constructorDeclaration);\n            this.semanticInfo.setSymbolForAST(constructorAST, constructorSymbol);\n\n            var i = 0;\n\n            if (!isSignature) {\n                this.pushParent(constructorTypeSymbol, constructorDeclaration);\n            }\n\n            if (parentHadSymbol && cleanedPreviousDecls) {\n                var constructSigs = constructorTypeSymbol.getConstructSignatures();\n\n                for (i = 0; i < constructSigs.length; i++) {\n                    constructorTypeSymbol.removeConstructSignature(constructSigs[i]);\n                }\n\n                constructorSymbol.invalidate();\n                constructorTypeSymbol.invalidate();\n                constructorTypeSymbol.recomputeConstructSignatures();\n            }\n\n            // add a call signature to the constructor method, and a construct signature to the parent class type\n            var constructSignature = isSignature ? new PullSignatureSymbol(PullElementKind.ConstructSignature) : new PullDefinitionSignatureSymbol(PullElementKind.ConstructSignature);\n\n            constructSignature.setReturnType(parent);\n\n            constructSignature.addDeclaration(constructorDeclaration);\n            constructorDeclaration.setSignatureSymbol(constructSignature);\n\n            this.bindParameterSymbols(constructorAST, constructorTypeSymbol, constructSignature);\n\n            if (constructorAST.variableArgList) {\n                constructSignature.setHasVariableParamList();\n            }\n\n            constructorTypeSymbol.addSignature(constructSignature);\n\n            if (!isSignature) {\n                var childDecls = constructorDeclaration.getChildDecls();\n\n                for (i = 0; i < childDecls.length; i++) {\n                    this.bindDeclToPullSymbol(childDecls[i]);\n                }\n\n                this.popParent();\n            }\n\n            //constructorSymbol.setIsBound(this.bindingPhase);\n        }\n\n        public bindConstructSignatureDeclarationToPullSymbol(constructSignatureDeclaration: PullDecl) {\n            var parent = this.getParent(true);\n            var constructorAST = <FuncDecl>this.semanticInfo.getASTForDecl(constructSignatureDeclaration);\n\n            var constructSigs = parent.getConstructSignatures();\n\n            var i = 0;\n\n            for (i = 0; i < constructSigs.length; i++) {\n                if (constructSigs[i].getSymbolID() < this.startingSymbolForRebind) {\n                    parent.removeConstructSignature(constructSigs[i], false);\n                }\n            }\n\n            // update the construct signature list\n            parent.recomputeConstructSignatures();\n            var constructSignature = new PullSignatureSymbol(PullElementKind.ConstructSignature);\n\n            if (constructorAST.variableArgList) {\n                constructSignature.setHasVariableParamList();\n            }\n\n            var typeParameters = constructSignatureDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = constructSignature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n\n                    constructSignature.addTypeParameter(typeParameter);\n                }\n                else {\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            constructSignature.addDeclaration(constructSignatureDeclaration);\n            constructSignatureDeclaration.setSignatureSymbol(constructSignature);\n\n            this.bindParameterSymbols(<FuncDecl>this.semanticInfo.getASTForDecl(constructSignatureDeclaration), null, constructSignature);\n\n            this.semanticInfo.setSymbolForAST(this.semanticInfo.getASTForDecl(constructSignatureDeclaration), constructSignature);\n\n            parent.addConstructSignature(constructSignature);\n        }\n\n        public bindCallSignatureDeclarationToPullSymbol(callSignatureDeclaration: PullDecl) {\n            var parent = this.getParent(true);\n            var callSignatureAST = <FuncDecl>this.semanticInfo.getASTForDecl(callSignatureDeclaration);\n\n            // PULLTODO: For now, remove stale signatures from the function type, but we want to be smarter about this when\n            // incremental parsing comes online\n            var callSigs = parent.getCallSignatures();\n\n            var i = 0;\n\n            for (i = 0; i < callSigs.length; i++) {\n                if (callSigs[i].getSymbolID() < this.startingSymbolForRebind) {\n                    parent.removeCallSignature(callSigs[i], false);\n                }\n            }\n\n            // update the call signature list\n            parent.recomputeCallSignatures();\n\n            var callSignature = new PullSignatureSymbol(PullElementKind.CallSignature);\n\n            if (callSignatureAST.variableArgList) {\n                callSignature.setHasVariableParamList();\n            }\n\n            var typeParameters = callSignatureDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = callSignature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n\n                    callSignature.addTypeParameter(typeParameter);\n                }\n                else {\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            callSignature.addDeclaration(callSignatureDeclaration);\n            callSignatureDeclaration.setSignatureSymbol(callSignature);\n\n            this.bindParameterSymbols(<FuncDecl>this.semanticInfo.getASTForDecl(callSignatureDeclaration), null, callSignature);\n\n            this.semanticInfo.setSymbolForAST(this.semanticInfo.getASTForDecl(callSignatureDeclaration), callSignature);\n\n            parent.addCallSignature(callSignature);\n        }\n\n        public bindIndexSignatureDeclarationToPullSymbol(indexSignatureDeclaration: PullDecl) {\n            var parent = this.getParent(true);\n\n            var indexSigs = parent.getIndexSignatures();\n\n            var i = 0;\n\n            for (i = 0; i < indexSigs.length; i++) {\n                if (indexSigs[i].getSymbolID() < this.startingSymbolForRebind) {\n                    parent.removeIndexSignature(indexSigs[i], false);\n                }\n            }\n\n            // update the index signature list\n            parent.recomputeIndexSignatures();\n\n            var indexSignature = new PullSignatureSymbol(PullElementKind.IndexSignature);\n\n            var typeParameters = indexSignatureDeclaration.getTypeParameters();\n            var typeParameter: PullTypeParameterSymbol;\n            var typeParameterDecls: PullDecl[] = null;\n\n            for (i = 0; i < typeParameters.length; i++) {\n\n                typeParameter = indexSignature.findTypeParameter(typeParameters[i].getName());\n\n                if (!typeParameter) {\n                    typeParameter = new PullTypeParameterSymbol(typeParameters[i].getName());\n\n                    indexSignature.addTypeParameter(typeParameter);\n                }\n                else {\n                    // clean the decls\n                    typeParameterDecls = typeParameter.getDeclarations();\n\n                    for (var j = 0; j < typeParameterDecls.length; j++) {\n                        if (typeParameterDecls[j].getDeclID() < this.startingDeclForRebind) {\n                            typeParameter.removeDeclaration(typeParameterDecls[j]);\n                        }\n                    }\n                }\n\n                typeParameter.addDeclaration(typeParameters[i]);\n                typeParameters[i].setSymbol(typeParameter);\n            }\n\n            indexSignature.addDeclaration(indexSignatureDeclaration);\n            indexSignatureDeclaration.setSignatureSymbol(indexSignature);\n\n            this.bindParameterSymbols(<FuncDecl>this.semanticInfo.getASTForDecl(indexSignatureDeclaration), null, indexSignature);\n\n            this.semanticInfo.setSymbolForAST(this.semanticInfo.getASTForDecl(indexSignatureDeclaration), indexSignature);\n\n            parent.addIndexSignature(indexSignature);\n        }\n\n        // getters and setters\n\n        public bindGetAccessorDeclarationToPullSymbol(getAccessorDeclaration: PullDecl) {\n            var declKind = getAccessorDeclaration.getKind();\n            var declFlags = getAccessorDeclaration.getFlags();\n            var funcDeclAST = <FuncDecl>this.semanticInfo.getASTForDecl(getAccessorDeclaration);\n\n            var isExported = (declFlags & PullElementFlags.Exported) != 0;\n\n            var funcName = getAccessorDeclaration.getName();\n\n            var isSignature: bool = (declFlags & PullElementFlags.Signature) != 0;\n            var isStatic = false;\n            var linkKind = SymbolLinkKind.PublicMember;\n\n            if (hasFlag(declFlags, PullElementFlags.Static)) {\n                isStatic = true;\n            }\n\n            if (hasFlag(declFlags, PullElementFlags.Private)) {\n                linkKind = SymbolLinkKind.PrivateMember;\n            }\n\n            var parent = this.getParent(true);\n            var parentHadSymbol = false;\n            var hadOtherAccessor = false;\n            var cleanedPreviousDecls = false;\n\n            var accessorSymbol: PullAccessorSymbol = null;\n            var getterSymbol: PullSymbol = null;\n            var getterTypeSymbol: PullFunctionTypeSymbol = null;\n\n            var i = 0;\n            var j = 0;\n\n            if (!isStatic) {\n                accessorSymbol = <PullAccessorSymbol>parent.findMember(funcName);\n            }\n            else {\n                var candidate: PullSymbol;\n\n                for (var m = 0; m < this.staticClassMembers.length; m++) {\n                    candidate = this.staticClassMembers[m];\n\n                    if (candidate.getName() == funcName) {\n                        accessorSymbol = <PullAccessorSymbol>candidate;\n                        hadOtherAccessor = accessorSymbol.isAccessor();\n                        break;\n                    }\n                }\n            }\n\n            if (this.compilationSettings.codeGenTarget < LanguageVersion.EcmaScript5) {\n                getAccessorDeclaration.addDiagnostic(new PullDiagnostic(funcDeclAST.minChar, funcDeclAST.getLength(), this.semanticInfo.getPath(),\n                    \"Property accessors are only available when targeting ES5 or greater\"));\n            }\n\n            if (accessorSymbol) {\n                if (!accessorSymbol.isAccessor()) {\n                    getAccessorDeclaration.addDiagnostic(new PullDiagnostic(funcDeclAST.minChar, funcDeclAST.getLength(), this.semanticInfo.getPath(),\n                        getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [funcName])));\n                    accessorSymbol = null;\n                }\n                else {\n                    getterSymbol = accessorSymbol.getGetter();\n\n                    if (getterSymbol && (!this.reBindingAfterChange || this.symbolIsRedeclaration(getterSymbol))) {\n                        getAccessorDeclaration.addDiagnostic(new PullDiagnostic(funcDeclAST.minChar, funcDeclAST.getLength(), this.semanticInfo.getPath(),\n                            getDiagnosticMessage(DiagnosticCode.Getter__0__already_declared, [funcName])));\n                        accessorSymbol = null;\n                        getterSymbol = null;\n                    }\n                }\n            }\n\n            // we have an accessor we can use...\n            if (accessorSymbol && getterSymbol) {\n                getterTypeSymbol = <PullFunctionTypeSymbol>getterSymbol.getType();\n                parentHadSymbol = true;\n            }\n\n            if (this.reBindingAfterChange && accessorSymbol) {\n\n                // prune out-of-date decls...\n                var decls = accessorSymbol.getDeclarations();\n                var scriptName = getAccessorDeclaration.getScriptName();\n\n                for (j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        accessorSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                if (getterSymbol) {\n                    decls = getterSymbol.getDeclarations();\n\n                    for (j = 0; j < decls.length; j++) {\n                        if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                            getterSymbol.removeDeclaration(decls[j]);\n\n                            cleanedPreviousDecls = true;\n                        }\n                    }\n                }\n\n                accessorSymbol.invalidate();\n            }\n\n            if (!accessorSymbol) {\n                accessorSymbol = new PullAccessorSymbol(funcName);\n            }\n\n            if (!getterSymbol) {\n                getterSymbol = new PullSymbol(funcName, PullElementKind.Function);\n                getterTypeSymbol = new PullFunctionTypeSymbol();\n\n                getterSymbol.setType(getterTypeSymbol);\n\n                accessorSymbol.setGetter(getterSymbol);\n            }\n\n            getAccessorDeclaration.setSymbol(accessorSymbol);\n            accessorSymbol.addDeclaration(getAccessorDeclaration);\n            getterSymbol.addDeclaration(getAccessorDeclaration);\n\n            this.semanticInfo.setSymbolForAST(funcDeclAST.name, getterSymbol);\n            this.semanticInfo.setSymbolForAST(funcDeclAST, getterSymbol);\n\n            // PULLTODO: Verify parent is a class or object literal\n            // PULLTODO: Verify static/non-static between getter and setter\n\n            if (!parentHadSymbol && !hadOtherAccessor) {\n\n                if (isStatic) {\n                    this.staticClassMembers[this.staticClassMembers.length] = accessorSymbol;\n                }\n                else {\n                    parent.addMember(accessorSymbol, linkKind);\n                }\n            }\n\n            if (!isSignature) {\n                this.pushParent(getterTypeSymbol, getAccessorDeclaration);\n            }\n\n            // PULLTODO: For now, remove stale signatures from the function type, but we want to be smarter about this when\n            // incremental parsing comes online\n            if (parentHadSymbol && cleanedPreviousDecls) {\n                var callSigs = getterTypeSymbol.getCallSignatures();\n\n                for (i = 0; i < callSigs.length; i++) {\n                    getterTypeSymbol.removeCallSignature(callSigs[i], false);\n                }\n\n                // just invalidate this once, so we don\'t pay the cost of rebuilding caches\n                // for each signature removed\n                getterSymbol.invalidate();\n                getterTypeSymbol.invalidate();\n                getterTypeSymbol.recomputeCallSignatures();\n            }\n\n            var signature = isSignature ? new PullSignatureSymbol(PullElementKind.CallSignature) : new PullDefinitionSignatureSymbol(PullElementKind.CallSignature);\n\n            signature.addDeclaration(getAccessorDeclaration);\n            getAccessorDeclaration.setSignatureSymbol(signature);\n\n            this.bindParameterSymbols(<FuncDecl>this.semanticInfo.getASTForDecl(getAccessorDeclaration), getterTypeSymbol, signature);\n\n            var typeParameters = getAccessorDeclaration.getTypeParameters();\n\n            if (typeParameters.length) {\n                getAccessorDeclaration.addDiagnostic(new PullDiagnostic(funcDeclAST.minChar, funcDeclAST.getLength(), this.semanticInfo.getPath(),\n                    getDiagnosticMessage(DiagnosticCode.Accessor_may_not_take_type_parameters, null)));\n            }\n\n            // add the implicit call member for this function type\n            getterTypeSymbol.addSignature(signature);\n\n            if (!isSignature) {\n                var childDecls = getAccessorDeclaration.getChildDecls();\n\n                for (i = 0; i < childDecls.length; i++) {\n                    this.bindDeclToPullSymbol(childDecls[i]);\n                }\n\n                this.popParent();\n            }\n\n            getterSymbol.setIsBound(this.bindingPhase);\n        }\n\n        public bindSetAccessorDeclarationToPullSymbol(setAccessorDeclaration: PullDecl) {\n            var declKind = setAccessorDeclaration.getKind();\n            var declFlags = setAccessorDeclaration.getFlags();\n            var funcDeclAST = <FuncDecl>this.semanticInfo.getASTForDecl(setAccessorDeclaration);\n\n            var isExported = (declFlags & PullElementFlags.Exported) != 0;\n\n            var funcName = setAccessorDeclaration.getName();\n\n            var isSignature: bool = (declFlags & PullElementFlags.Signature) != 0;\n            var isStatic = false;\n            var linkKind = SymbolLinkKind.PublicMember;\n\n            if (hasFlag(declFlags, PullElementFlags.Static)) {\n                isStatic = true;\n            }\n\n            if (hasFlag(declFlags, PullElementFlags.Private)) {\n                linkKind = SymbolLinkKind.PrivateMember;\n            }\n\n            var parent = this.getParent(true);\n            var parentHadSymbol = false;\n            var hadOtherAccessor = false;\n            var cleanedPreviousDecls = false;\n\n            var accessorSymbol: PullAccessorSymbol = null;\n            var setterSymbol: PullSymbol = null;\n            var setterTypeSymbol: PullFunctionTypeSymbol = null;\n\n            var i = 0;\n            var j = 0;\n\n            if (!isStatic) {\n                accessorSymbol = <PullAccessorSymbol>parent.findMember(funcName);\n            }\n            else {\n                var candidate: PullSymbol;\n\n                for (var m = 0; m < this.staticClassMembers.length; m++) {\n                    candidate = this.staticClassMembers[m];\n\n                    if (candidate.getName() == funcName) {\n                        accessorSymbol = <PullAccessorSymbol>candidate;\n                        hadOtherAccessor = accessorSymbol.isAccessor();\n                        break;\n                    }\n                }\n            }\n\n            if (this.compilationSettings.codeGenTarget < LanguageVersion.EcmaScript5) {\n                setAccessorDeclaration.addDiagnostic(new PullDiagnostic(\n                    funcDeclAST.minChar, funcDeclAST.getLength(), this.semanticInfo.getPath(), \"Property accessors are only available when targeting ES5 or greater\"));\n            }\n\n            if (accessorSymbol) {\n                if (!accessorSymbol.isAccessor()) {\n                    setAccessorDeclaration.addDiagnostic(new PullDiagnostic(funcDeclAST.minChar, funcDeclAST.getLength(), this.semanticInfo.getPath(),\n                        getDiagnosticMessage(DiagnosticCode.Duplicate_identifier__0_, [funcName])));\n                    accessorSymbol = null;\n                }\n                else {\n                    setterSymbol = accessorSymbol.getSetter();\n\n                    if (setterSymbol && (!this.reBindingAfterChange || this.symbolIsRedeclaration(setterSymbol))) {\n                        setAccessorDeclaration.addDiagnostic(new PullDiagnostic(funcDeclAST.minChar, funcDeclAST.getLength(), this.semanticInfo.getPath(),\n                            getDiagnosticMessage(DiagnosticCode.Setter__0__already_declared, [funcName])));\n                        accessorSymbol = null;\n                        setterSymbol = null;\n                    }\n                }\n            }\n\n            // we have an accessor we can use...\n            if (accessorSymbol && setterSymbol) {\n                setterTypeSymbol = <PullFunctionTypeSymbol>setterSymbol.getType();\n                parentHadSymbol = true;\n            }\n\n            if (this.reBindingAfterChange && accessorSymbol) {\n\n                // prune out-of-date decls...\n                var decls = accessorSymbol.getDeclarations();\n                var scriptName = setAccessorDeclaration.getScriptName();\n\n                for (j = 0; j < decls.length; j++) {\n                    if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                        accessorSymbol.removeDeclaration(decls[j]);\n\n                        cleanedPreviousDecls = true;\n                    }\n                }\n\n                if (setterSymbol) {\n                    decls = setterSymbol.getDeclarations();\n\n                    for (j = 0; j < decls.length; j++) {\n                        if (decls[j].getScriptName() == scriptName && decls[j].getDeclID() < this.startingDeclForRebind) {\n                            setterSymbol.removeDeclaration(decls[j]);\n\n                            cleanedPreviousDecls = true;\n                        }\n                    }\n                }\n\n                accessorSymbol.invalidate();\n            }\n\n            if (!accessorSymbol) {\n                // PULLTODO: Make sure that we properly flag signature decl types when collecting decls\n                accessorSymbol = new PullAccessorSymbol(funcName);\n            }\n\n            if (!setterSymbol) {\n                setterSymbol = new PullSymbol(funcName, PullElementKind.Function);\n                setterTypeSymbol = new PullFunctionTypeSymbol();\n\n                setterSymbol.setType(setterTypeSymbol);\n\n                accessorSymbol.setSetter(setterSymbol);\n            }\n\n            setAccessorDeclaration.setSymbol(accessorSymbol);\n            accessorSymbol.addDeclaration(setAccessorDeclaration);\n            setterSymbol.addDeclaration(setAccessorDeclaration);\n\n            this.semanticInfo.setSymbolForAST(funcDeclAST.name, setterSymbol);\n            this.semanticInfo.setSymbolForAST(funcDeclAST, setterSymbol);\n\n            // PULLTODO: Verify parent is a class or object literal\n            // PULLTODO: Verify static/non-static between getter and setter\n\n            if (!parentHadSymbol && !hadOtherAccessor) {\n\n                if (isStatic) {\n                    this.staticClassMembers[this.staticClassMembers.length] = accessorSymbol;\n                }\n                else {\n                    parent.addMember(accessorSymbol, linkKind);\n                }\n            }\n\n            if (!isSignature) {\n                this.pushParent(setterTypeSymbol, setAccessorDeclaration);\n            }\n\n            // PULLTODO: For now, remove stale signatures from the function type, but we want to be smarter about this when\n            // incremental parsing comes online\n            if (parentHadSymbol && cleanedPreviousDecls) {\n                var callSigs = setterTypeSymbol.getCallSignatures();\n\n                for (i = 0; i < callSigs.length; i++) {\n                    setterTypeSymbol.removeCallSignature(callSigs[i], false);\n                }\n\n                // just invalidate this once, so we don\'t pay the cost of rebuilding caches\n                // for each signature removed\n                setterSymbol.invalidate();\n                setterTypeSymbol.invalidate();\n                setterTypeSymbol.recomputeCallSignatures();\n            }\n\n            var signature = isSignature ? new PullSignatureSymbol(PullElementKind.CallSignature) : new PullDefinitionSignatureSymbol(PullElementKind.CallSignature);\n\n            signature.addDeclaration(setAccessorDeclaration);\n            setAccessorDeclaration.setSignatureSymbol(signature);\n\n            // PULLTODO: setter should not have a parameters\n            this.bindParameterSymbols(<FuncDecl>this.semanticInfo.getASTForDecl(setAccessorDeclaration), setterTypeSymbol, signature);\n\n            var typeParameters = setAccessorDeclaration.getTypeParameters();\n\n            if (typeParameters.length) {\n                setAccessorDeclaration.addDiagnostic(new PullDiagnostic(funcDeclAST.minChar, funcDeclAST.getLength(), this.semanticInfo.getPath(),\n                    getDiagnosticMessage(DiagnosticCode.Accessor_may_not_take_type_parameters, null)));\n            }\n\n            // add the implicit call member for this function type\n            setterTypeSymbol.addSignature(signature);\n\n            if (!isSignature) {\n                var childDecls = setAccessorDeclaration.getChildDecls();\n\n                for (i = 0; i < childDecls.length; i++) {\n                    this.bindDeclToPullSymbol(childDecls[i]);\n                }\n\n                this.popParent();\n            }\n\n            setterSymbol.setIsBound(this.bindingPhase);\n        }\n\n        // binding\n        public bindDeclToPullSymbol(decl: PullDecl, rebind = false) {\n\n            if (rebind) {\n                this.startingDeclForRebind = lastBoundPullDeclId;\n                this.startingSymbolForRebind = lastBoundPullSymbolID;\n                this.reBindingAfterChange = true;\n            }\n\n            switch (decl.getKind()) {\n\n                case PullElementKind.Script:\n                    var childDecls = decl.getChildDecls();\n                    for (var i = 0; i < childDecls.length; i++) {\n                        this.bindDeclToPullSymbol(childDecls[i]);\n                    }\n                    break;\n\n                case PullElementKind.DynamicModule:\n                case PullElementKind.Container:\n                    this.bindModuleDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.Interface:\n                    this.bindInterfaceDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.Class:\n                    this.bindClassDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.Function:\n                    this.bindFunctionDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.Variable:\n                    this.bindVariableDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.EnumMember:\n                case PullElementKind.Property:\n                    this.bindPropertyDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.Method:\n                    this.bindMethodDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.ConstructorMethod:\n                    this.bindConstructorDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.CallSignature:\n                    this.bindCallSignatureDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.ConstructSignature:\n                    this.bindConstructSignatureDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.IndexSignature:\n                    this.bindIndexSignatureDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.Enum:\n                    this.bindEnumDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.GetAccessor:\n                    this.bindGetAccessorDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.SetAccessor:\n                    this.bindSetAccessorDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.ObjectType:\n                    this.bindObjectTypeDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.FunctionType:\n                    this.bindFunctionTypeDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.ConstructorType:\n                    this.bindConstructorTypeDeclarationToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.FunctionExpression:\n                    this.bindFunctionExpressionToPullSymbol(decl);\n                    break;\n\n                case PullElementKind.TypeAlias:\n                    this.bindImportDeclaration(decl);\n                    break;\n\n                case PullElementKind.Parameter:\n                    // parameters are bound by their enclosing function\n                    break;\n\n                default:\n                    throw new Error(\"Unrecognized type declaration\");\n            }\n        }\n\n        public bindDeclsForUnit(filePath: string, rebind = false) {\n            this.setUnit(filePath);\n\n            var topLevelDecls = this.semanticInfo.getTopLevelDecls();\n\n            for (var i = 0; i < topLevelDecls.length; i++) {\n                this.bindDeclToPullSymbol(topLevelDecls[i], rebind);\n            }\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n\nmodule TypeScript {\n    export var linkID = 0; // PULLTODO: Prune these if not in use\n\n    export class IListItem {\n        public next: IListItem = null;\n        public prev: IListItem = null;\n\n        constructor(public value: any) { }\n    }\n\n    export class LinkList {\n        public head: IListItem = null;\n        public last: IListItem = null;\n        public length = 0;\n\n        public addItem(item: any) {\n            if (!this.head) {\n                this.head = new IListItem(item);\n                this.last = this.head;\n            }\n            else {\n                this.last.next = new IListItem(item);\n                this.last.next.prev = this.last;\n                this.last = this.last.next;\n            }\n\n            this.length++;\n        }\n\n        // PULLTODO: Register callbacks for caching\n        public find(p: (rn: any) => bool) {\n            var node = this.head;\n            var vals: any[] = [];\n\n            while (node) {\n\n                if (p(node.value)) {\n                    vals[vals.length] = node.value;\n                }\n                node = node.next;\n            }\n\n            return vals;\n        }\n\n        public remove(p: (item: any) => bool) {\n            var node = this.head;\n            var prev: IListItem = null;\n            var next: IListItem = null;\n\n            while (node) {\n\n                if (p(node.value)) {\n\n                    if (node == this.head) {\n\n                        if (this.last == this.head) {\n                            this.last = null;\n                        }\n\n                        this.head = this.head.next;\n\n                        if (this.head) {\n                            this.head.prev = null;\n                        }\n                    }\n                    else {\n                        prev = node.prev;\n                        next = node.next;\n\n                        if (prev) {\n                            prev.next = next;\n                        }\n                        if (next) {\n                            next.prev = prev;\n                        }\n\n                        if (node == this.last) {\n                            this.last = prev;\n                        }\n                    }\n\n                    this.length--;\n                }\n                node = node.next;\n            }\n        }\n\n        public update(map: (item: any, context: any) => void , context: any) {\n            var node = this.head;\n\n            while (node) {\n                map(node.value, context);\n\n                node = node.next;\n            }\n        }\n    }\n\n    export class PullSymbolLink {\n        public id = linkID++;\n        public data: any;\n        constructor(public start: PullSymbol, public end: PullSymbol, public kind: SymbolLinkKind) { }\n    }\n\n    export enum GraphUpdateKind {\n        NoUpdate,\n\n        SymbolRemoved,\n        SymbolAdded,\n\n        TypeChanged,\n    }\n\n    export class PullSymbolUpdate {\n\n        constructor(public updateKind: GraphUpdateKind, public symbolToUpdate: PullSymbol, public updater: PullSymbolGraphUpdater) { }\n\n    }\n\n    export var updateVersion = 0;\n\n    export class PullSymbolGraphUpdater {\n\n        constructor(public semanticInfoChain: SemanticInfoChain) { }\n\n        public removeDecl(declToRemove: PullDecl) {\n            var declSymbol = declToRemove.getSymbol();\n\n            if (declSymbol) {\n                declSymbol.removeDeclaration(declToRemove);\n\n                var childDecls = declToRemove.getChildDecls();\n\n                for (var i = 0; i < childDecls.length; i++) {\n                    this.removeDecl(childDecls[i]);\n                }\n\n                this.removeSymbol(declSymbol);\n\n                this.semanticInfoChain.removeSymbolFromCache(declSymbol);\n            }\n\n            // if we\'re removing a class, enum, etc., remove the implicit\n            // value decl as well\n            var valDecl = declToRemove.getValueDecl();\n\n            if (valDecl) {\n                this.removeDecl(valDecl);\n            }\n\n            updateVersion++;\n        }\n\n        public addDecl(declToAdd: PullDecl) {\n            // the decl has been bound to a symbol already, so we just need to trigger an update\n\n            var symbolToAdd = declToAdd.getSymbol();\n\n            this.addSymbol(symbolToAdd);\n\n            updateVersion++;\n        }\n\n        // for now, remove all links - later on, see what happens if we leave stuff \'dangling\'\n        public removeSymbol(symbolToRemove: PullSymbol) {\n\n            if (symbolToRemove.removeUpdateVersion == updateVersion) {\n                return;\n            }\n\n            symbolToRemove.removeUpdateVersion = updateVersion;\n\n            symbolToRemove.updateOutgoingLinks(propagateRemovalToOutgoingLinks, new PullSymbolUpdate(GraphUpdateKind.SymbolRemoved, symbolToRemove, this));\n\n            symbolToRemove.updateIncomingLinks(propagateRemovalToIncomingLinks, new PullSymbolUpdate(GraphUpdateKind.SymbolRemoved, symbolToRemove, this));\n\n            symbolToRemove.unsetContainer();\n\n            this.semanticInfoChain.removeSymbolFromCache(symbolToRemove);\n\n            var container = symbolToRemove.getContainer();\n\n            if (container) {\n                container.removeMember(symbolToRemove);\n                this.semanticInfoChain.removeSymbolFromCache(symbolToRemove);\n            }\n\n            if (symbolToRemove.isAccessor()) {\n                var getterSymbol = (<PullAccessorSymbol>symbolToRemove).getGetter();\n                var setterSymbol = (<PullAccessorSymbol>symbolToRemove).getSetter();\n\n                if (getterSymbol) {\n                    this.removeSymbol(getterSymbol);\n                }\n\n                if (setterSymbol) {\n                    this.removeSymbol(setterSymbol);\n                }\n            }\n\n            symbolToRemove.removeAllLinks();\n        }\n\n        public addSymbol(symbolToAdd: PullSymbol) {\n\n            if (symbolToAdd.addUpdateVersion == updateVersion) {\n                return;\n            }\n\n            symbolToAdd.addUpdateVersion = updateVersion;\n\n            symbolToAdd.updateOutgoingLinks(propagateAdditionToOutgoingLinks, new PullSymbolUpdate(GraphUpdateKind.SymbolAdded, symbolToAdd, this));\n\n            symbolToAdd.updateIncomingLinks(propagateAdditionToIncomingLinks, new PullSymbolUpdate(GraphUpdateKind.SymbolAdded, symbolToAdd, this));\n\n        }\n\n        public invalidateType(symbolWhoseTypeChanged: PullSymbol) {\n            if (!symbolWhoseTypeChanged) {\n                return;\n            }\n\n            if (symbolWhoseTypeChanged.isPrimitive()) {\n                return;\n            }\n\n            if (symbolWhoseTypeChanged.typeChangeUpdateVersion == updateVersion) {\n                return;\n            }\n\n            symbolWhoseTypeChanged.typeChangeUpdateVersion = updateVersion;\n\n            symbolWhoseTypeChanged.updateOutgoingLinks(propagateChangedTypeToOutgoingLinks, new PullSymbolUpdate(GraphUpdateKind.TypeChanged, symbolWhoseTypeChanged, this));\n\n            symbolWhoseTypeChanged.updateIncomingLinks(propagateChangedTypeToIncomingLinks, new PullSymbolUpdate(GraphUpdateKind.TypeChanged, symbolWhoseTypeChanged, this));\n\n            if (symbolWhoseTypeChanged.getKind() == PullElementKind.Container) {\n                var instanceSymbol = (<PullContainerTypeSymbol>symbolWhoseTypeChanged).getInstanceSymbol();\n                \n                this.invalidateType(instanceSymbol);\n            }\n\n\n            symbolWhoseTypeChanged.invalidate();\n\n        }\n    }\n\n    export function propagateRemovalToOutgoingLinks(link: PullSymbolLink, update: PullSymbolUpdate) {\n\n        var symbolToRemove = update.symbolToUpdate;\n        var affectedSymbol = link.end;\n\n        if (affectedSymbol.removeUpdateVersion == updateVersion || affectedSymbol.isPrimitive()) {\n            return;\n        }\n\n        // carry out the update based on the update kind, the affected symbol kind and the relationship\n        if (link.kind == SymbolLinkKind.TypedAs) {\n            // no action...\n        }\n        else if (link.kind == SymbolLinkKind.ContextuallyTypedAs) {\n            // no action...\n        }\n        else if (link.kind == SymbolLinkKind.ProvidesInferredType) {\n\n            // if another type infers its type from this one, unset the link\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeParameter) {\n            // no action...\n        }\n        else if (link.kind == SymbolLinkKind.TypeArgument) {\n            // no action...\n        }\n        else if (link.kind == SymbolLinkKind.TypeParameterSpecializedTo) {\n            // no action...\n        }\n        else if (link.kind == SymbolLinkKind.SpecializedTo) {\n            update.updater.removeSymbol(affectedSymbol);\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeConstraint) {\n            // no action...\n        }\n        else if (link.kind == SymbolLinkKind.ArrayOf) {\n\n            // shouldn\'t affect the other type - we\'d remove the parent type as an\n            // incoming link\n        }\n        else if (link.kind == SymbolLinkKind.PublicMember) {\n            update.updater.removeSymbol(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.PrivateMember) {\n            update.updater.removeSymbol(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ConstructorMethod) {\n            //update.updater.removeSymbol(affectedSymbol);\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Aliases) {\n            // PULLTODO\n        }\n        else if (link.kind == SymbolLinkKind.ContainedBy) {\n            (<PullTypeSymbol>affectedSymbol).removeMember(symbolToRemove);\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Extends) {\n            // no action...\n        }\n        else if (link.kind == SymbolLinkKind.Implements) {\n            // no action...\n        }\n        else if (link.kind == SymbolLinkKind.Parameter) {\n            update.updater.removeSymbol(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ReturnType) {\n            // no action...\n        }\n        else if (link.kind == SymbolLinkKind.CallSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ConstructSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.IndexSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n\n        symbolToRemove.removeOutgoingLink(link);\n    }\n\n    export function propagateRemovalToIncomingLinks(link: PullSymbolLink, update: PullSymbolUpdate) {\n        var symbolToRemove = update.symbolToUpdate;\n        var affectedSymbol = link.start;\n\n        if (affectedSymbol.removeUpdateVersion == updateVersion || affectedSymbol.isPrimitive()) {\n            return;\n        }\n\n        // carry out the update based on the update kind, the affected symbol kind and the relationship\n        if (link.kind == SymbolLinkKind.TypedAs) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ContextuallyTypedAs) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ProvidesInferredType) {\n            // no action...\n        }\n        else if (link.kind == SymbolLinkKind.TypeParameter) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeArgument) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeParameterSpecializedTo) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.SpecializedTo) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeConstraint) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ArrayType) {\n            update.updater.removeSymbol(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ArrayOf) {\n            update.updater.removeSymbol(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.PublicMember) {\n            (<PullTypeSymbol>affectedSymbol).removeMember(symbolToRemove);\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.PrivateMember) {\n            (<PullTypeSymbol>affectedSymbol).removeMember(symbolToRemove);\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ConstructorMethod) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Aliases) {\n            // PULLTODO\n        }\n        else if (link.kind == SymbolLinkKind.ContainedBy) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Extends) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Implements) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Parameter) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ReturnType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.CallSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ConstructSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.IndexSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n    }\n\n    export function propagateAdditionToOutgoingLinks(link: PullSymbolLink, update: PullSymbolUpdate) {\n\n        var symbolToAdd = update.symbolToUpdate;\n        var affectedSymbol = link.end;\n\n        if (affectedSymbol.addUpdateVersion == updateVersion || affectedSymbol.isPrimitive()) {\n            return;\n        }\n\n        // carry out the update based on the update kind, the affected symbol kind and the relationship\n        if (link.kind == SymbolLinkKind.TypedAs) {\n        }\n        else if (link.kind == SymbolLinkKind.ContextuallyTypedAs) {\n        }\n        else if (link.kind == SymbolLinkKind.ProvidesInferredType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeParameter) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeArgument) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeParameterSpecializedTo) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.SpecializedTo) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeConstraint) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ArrayOf) {\n            // how could this happen?\n            //update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.PublicMember) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.PrivateMember) {\n            // Don\'t invalidate the type in this case - we only care about\n            // public properties\n        }\n        else if (link.kind == SymbolLinkKind.ConstructorMethod) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Aliases) {\n            // PULLTODO\n        }\n        else if (link.kind == SymbolLinkKind.ContainedBy) {\n            // Don\'t invalidate the type in this case - we only care about\n            // public properties\n        }\n        else if (link.kind == SymbolLinkKind.Extends) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.Implements) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.Parameter) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.ReturnType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.CallSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ConstructSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.IndexSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n    }\n\n    export function propagateAdditionToIncomingLinks(link: PullSymbolLink, update: PullSymbolUpdate) {\n        var symbolToAdd = update.symbolToUpdate;\n        var affectedSymbol = link.start;\n\n        if (affectedSymbol.addUpdateVersion == updateVersion || affectedSymbol.isPrimitive()) {\n            return;\n        }\n\n        // carry out the update based on the update kind, the affected symbol kind and the relationship\n        if (link.kind == SymbolLinkKind.TypedAs) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ContextuallyTypedAs) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ProvidesInferredType) {\n            //update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeParameter) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeArgument) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeParameterSpecializedTo) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.SpecializedTo) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeConstraint) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ArrayOf) {\n            // shouldn\'t change anything...\n        }\n        else if (link.kind == SymbolLinkKind.PublicMember) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.PrivateMember) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.ConstructorMethod) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Aliases) {\n            // PULLTODO\n        }\n        else if (link.kind == SymbolLinkKind.ContainedBy) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.Extends) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Implements) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Parameter) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.ReturnType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.CallSignature) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.ConstructSignature) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.IndexSignature) {\n            // do nothing...\n        }\n    }\n\n    export function propagateChangedTypeToOutgoingLinks(link: PullSymbolLink, update: PullSymbolUpdate) {\n        var symbolWhoseTypeChanged = update.symbolToUpdate;\n        var affectedSymbol = link.end;\n\n        if (affectedSymbol.typeChangeUpdateVersion == updateVersion || affectedSymbol.isPrimitive()) {\n            return;\n        }\n\n        // carry out the update based on the update kind, the affected symbol kind and the relationship\n        if (link.kind == SymbolLinkKind.TypedAs) {\n            //update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ContextuallyTypedAs) {\n            //update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ProvidesInferredType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeParameter) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeArgument) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeParameterSpecializedTo) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.SpecializedTo) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeConstraint) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ArrayOf) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.PublicMember) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.PrivateMember) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.ConstructorMethod) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.Aliases) {\n            // PULLTODO\n        }\n        else if (link.kind == SymbolLinkKind.ContainedBy) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.Extends) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.Implements) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.Parameter) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.ReturnType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.CallSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ConstructSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.IndexSignature) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n    }\n\n    export function propagateChangedTypeToIncomingLinks(link: PullSymbolLink, update: PullSymbolUpdate) {\n        var symbolWhoseTypeChanged = update.symbolToUpdate;\n        var affectedSymbol = link.start;\n\n        if (affectedSymbol.typeChangeUpdateVersion == updateVersion || affectedSymbol.isPrimitive()) {\n            return;\n        }\n\n        // carry out the update based on the update kind, the affected symbol kind and the relationship\n        if (link.kind == SymbolLinkKind.TypedAs) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ContextuallyTypedAs) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ProvidesInferredType) {\n            //update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ArrayType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeParameter) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeArgument) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeParameterSpecializedTo) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.SpecializedTo) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.TypeConstraint) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.ArrayOf) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.PublicMember) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.PrivateMember) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.ConstructorMethod) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Aliases) {\n            // PULLTODO\n        }\n        else if (link.kind == SymbolLinkKind.ContainedBy) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.Extends) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Implements) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.Parameter) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.ReturnType) {\n            update.updater.invalidateType(affectedSymbol);\n        }\n        else if (link.kind == SymbolLinkKind.CallSignature) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.ConstructSignature) {\n            // do nothing...\n        }\n        else if (link.kind == SymbolLinkKind.IndexSignature) {\n            // do nothing...\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n///<reference path=\'..\\Core\\IDiagnostic.ts\' />\n\nmodule TypeScript {\n\n    // pull errors are declared at a specific offset from a given decl\n    // adjustedOffset is set when the error is added to a decl\n\n    export class PullDiagnostic implements IDiagnostic {\n        private _originalStart: number;\n        private _fileName: string;\n        private _start: number;\n        private _length: number;\n        private _message: string;\n\n        constructor(start: number, length: number, fileName: string, message: string) {\n            this._originalStart = start;\n            this._fileName = fileName;\n            this._start = start;\n            this._length = length;\n            this._message = message;\n        }\n\n        public fileName(): string {\n            return this._fileName;\n        }\n\n        public start(): number {\n            return this._start;\n        }\n\n        public length(): number {\n            return this._length;\n        }\n\n        public message(): string {\n            return this._message;\n        }\n\n        public adjustOffset(pos: number) {\n            this._start = this._originalStart + pos;\n        }\n    }\n\n    export function getDiagnosticsFromEnclosingDecl(enclosingDecl: PullDecl, errors: IDiagnostic[]) {\n        var declErrors = enclosingDecl.getDiagnostics();\n        var i = 0;\n\n        if (declErrors) {\n            for (i = 0; i < declErrors.length; i++) {\n                errors[errors.length] = declErrors[i];\n            }\n        }\n\n        var childDecls = enclosingDecl.getChildDecls();\n\n        for (i = 0; i < childDecls.length; i++) {\n            getDiagnosticsFromEnclosingDecl(childDecls[i], errors);\n        }\n    }\n}\n// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n\n///<reference path=\'..\\typescript.ts\' />\n///<reference path=\'..\\Core\\HashTable.ts\' />\n///<reference path=\'..\\Syntax\\ISyntaxElement.ts\' />\n\nmodule TypeScript {\n\n    export module PullHelpers {\n        export interface SignatureInfoForFuncDecl {\n            signature: PullSignatureSymbol;\n            allSignatures: PullSignatureSymbol[];\n        }\n\n        export function getSignatureForFuncDecl(funcDecl: FuncDecl, semanticInfoChain: SemanticInfoChain, unitPath: string) {\n            var funcSymbol = semanticInfoChain.getSymbolForAST(funcDecl, unitPath);\n            var result: SignatureInfoForFuncDecl = { signature: null, allSignatures: null };\n            if (funcSymbol.isSignature()) {\n                result.signature = <PullSignatureSymbol>funcSymbol;\n                result.allSignatures = [<PullSignatureSymbol>funcSymbol];\n                return result;\n            }\n            var funcTypeSymbol = funcSymbol.getType();\n            var signatures: PullSignatureSymbol[];\n            if (funcDecl.isConstructor || funcDecl.isConstructMember()) {\n                signatures = funcTypeSymbol.getConstructSignatures();\n            } else if (funcDecl.isIndexerMember()) {\n                signatures = funcTypeSymbol.getIndexSignatures();\n            } else {\n                signatures = funcTypeSymbol.getCallSignatures();\n            }\n            for (var i = 0; i < signatures.length; i++) {\n                var signatureDecl = signatures[i].getDeclarations()[0];\n                var signatureAST = semanticInfoChain.getASTForDecl(signatureDecl, signatureDecl.getScriptName());\n                if (signatureAST == funcDecl) {\n                    result.signature = signatures[i];\n                    result.allSignatures = signatures;\n                    return result;\n                }\n            }\n\n            return null;\n        }\n\n        export function getAccessorSymbol(getterOrSetter: FuncDecl, semanticInfoChain: SemanticInfoChain, unitPath: string) {\n            var getterOrSetterSymbol = semanticInfoChain.getSymbolForAST(getterOrSetter, unitPath);\n            var linkKind: SymbolLinkKind;\n            if (hasFlag(getterOrSetter.getFunctionFlags(), FunctionFlags.GetAccessor)) {\n                linkKind = SymbolLinkKind.GetterFunction;\n            } else {\n                linkKind = SymbolLinkKind.SetterFunction;\n            }\n\n            var accessorSymbolLinks = getterOrSetterSymbol.findIncomingLinks((psl) => psl.kind == linkKind);\n            if (accessorSymbolLinks.length) {\n                return <PullAccessorSymbol>accessorSymbolLinks[0].start;\n            }\n\n            return null;\n        }\n\n        export function getASTForDecl(decl: PullDecl, semanticInfoChain: SemanticInfoChain) {\n            return semanticInfoChain.getASTForDecl(decl, decl.getScriptName());\n        }\n        \n        export function getGetterAndSetterFunction(funcDecl: FuncDecl, semanticInfoChain: SemanticInfoChain, unitPath: string): { getter: FuncDecl; setter: FuncDecl; } {\n            var accessorSymbol = PullHelpers.getAccessorSymbol(funcDecl, semanticInfoChain, unitPath);\n            var result: { getter: FuncDecl; setter: FuncDecl; } = {\n                getter: null,\n                setter: null\n            };\n            var getter = accessorSymbol.getGetter();\n            if (getter) {\n                var getterDecl = getter.getDeclarations()[0];\n                result.getter = <FuncDecl>PullHelpers.getASTForDecl(getterDecl, semanticInfoChain);\n            }\n            var setter = accessorSymbol.getSetter();\n            if (setter) {\n                var setterDecl = setter.getDeclarations()[0];\n                result.setter = <FuncDecl>PullHelpers.getASTForDecl(setterDecl, semanticInfoChain);\n            }\n\n            return result;\n        }\n    }\n}\n﻿/// <reference path=\'Syntax\\SyntaxVisitor.generated.ts\' />\n/// <reference path=\'Syntax\\SyntaxWalker.generated.ts\' />\n/// <reference path=\'Syntax\\SyntaxInformationMap.ts\' />\n/// <reference path=\'ast.ts\' />\n\nmodule TypeScript {\n    var incrementalAst = true;\n    export class SyntaxPositionMap {\n        private position = 0;\n        private elementToPosition = Collections.createHashTable(2048, Collections.identityHashCode);\n\n        constructor(node: SyntaxNode) {\n            this.process(node);\n        }\n\n        private process(element: ISyntaxElement) {\n            if (element !== null) {\n                if (element.isToken()) {\n                    this.elementToPosition.add(element, this.position);\n                    this.position += element.fullWidth();\n                }\n                else {\n                    if (element.isNode()) {\n                        this.elementToPosition.add(element, this.position);\n                    }\n\n                    for (var i = 0, n = element.childCount(); i < n; i++) {\n                        this.process(element.childAt(i));\n                    }\n                }\n            }\n        }\n\n        public static create(node: SyntaxNode): SyntaxPositionMap {\n            var map = new SyntaxPositionMap(node);\n            return map;\n        }\n\n        public fullStart(element: ISyntaxElement): number {\n            return this.elementToPosition.get(element);\n        }\n\n        public start(element: ISyntaxElement): number {\n            return this.fullStart(element) + element.leadingTriviaWidth();\n        }\n\n        public end(element: ISyntaxElement): number {\n            return this.start(element) + element.width();\n        }\n\n        public fullEnd(element: ISyntaxElement): number {\n            return this.fullStart(element) + element.fullWidth();\n        }\n    }\n\n    export class SyntaxTreeToAstVisitor implements ISyntaxVisitor {\n        public static checkPositions = false;\n\n        private position = 0;\n\n        private requiresExtendsBlock: bool = false;\n        private previousTokenTrailingComments: Comment[] = null;\n\n        private isParsingDeclareFile: bool;\n        private isParsingAmbientModule = false;\n\n        constructor(private syntaxPositionMap: SyntaxPositionMap,\n                    private fileName: string,\n                    private lineMap: LineMap,\n                    private compilationSettings: CompilationSettings) {\n            this.isParsingDeclareFile = isDTSFile(fileName);\n        }\n\n        public static visit(syntaxTree: SyntaxTree, fileName: string, compilationSettings: CompilationSettings): Script {\n            var map = SyntaxTreeToAstVisitor.checkPositions ? SyntaxPositionMap.create(syntaxTree.sourceUnit()) : null;\n            var visitor = new SyntaxTreeToAstVisitor(map, fileName, syntaxTree.lineMap(), compilationSettings);\n            return syntaxTree.sourceUnit().accept(visitor);\n        }\n\n        private assertElementAtPosition(element: ISyntaxElement) {\n            if (SyntaxTreeToAstVisitor.checkPositions) {\n                Debug.assert(this.position === this.syntaxPositionMap.fullStart(element));\n            }\n        }\n\n        private movePast(element: ISyntaxElement): void {\n            if (element !== null) {\n                this.assertElementAtPosition(element);\n                this.position += element.fullWidth();\n            }\n        }\n\n        private moveTo(element1: ISyntaxNodeOrToken, element2: ISyntaxElement): void {\n            if (element2 !== null) {\n                this.position += Syntax.childOffset(element1, element2);\n            }\n        }\n\n        private applyDelta(ast: TypeScript.AST, delta: number) {\n            if (delta === 0) {\n                return;\n            }\n\n            var applyDelta = (ast: TypeScript.AST) => {\n                if (ast.minChar !== -1) {\n                    ast.minChar += delta;\n                }\n                if (ast.limChar !== -1) {\n                    ast.limChar += delta;\n                }\n            }\n\n            var applyDeltaToComments = (comments: TypeScript.Comment[]) => {\n                if (comments && comments.length > 0) {\n                    for (var i = 0; i < comments.length; i++) {\n                        var comment = comments[i];\n                        applyDelta(comment);\n                        comment.minLine = this.lineMap.getLineNumberFromPosition(comment.minChar);\n                        comment.limLine = this.lineMap.getLineNumberFromPosition(comment.limChar);\n                    }\n                }\n            }\n\n            var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {\n                // Apply delta to this node\n                applyDelta(cur);\n                applyDeltaToComments(cur.preComments);\n                applyDeltaToComments(cur.postComments);\n\n                return cur;\n            }\n\n            TypeScript.getAstWalkerFactory().walk(ast, pre);\n        }\n\n        private setSpan(span: AST, fullStart: number, element: ISyntaxElement): void {\n            var desiredMinChar = fullStart + element.leadingTriviaWidth();\n            var desiredLimChar = fullStart + element.fullWidth();\n            Debug.assert(!isNaN(desiredMinChar));\n            Debug.assert(!isNaN(desiredLimChar));\n\n            if (span.minChar !== -1) {\n                Debug.assert(span.limChar !== -1);\n\n                // Have an existing span.  We need to adjust it so that it starts at the provided\n                // desiredMinChar.\n                \n                var delta = desiredMinChar - span.minChar;\n                this.applyDelta(span, delta);\n\n                span.limChar = desiredLimChar;\n\n                Debug.assert(span.minChar === desiredMinChar);\n                Debug.assert(span.limChar === desiredLimChar);\n            }\n            else {\n                Debug.assert(span.limChar === -1);\n                // Have a new span, just set it to the lim/min we were given.\n                span.minChar = desiredMinChar;\n                span.limChar = desiredLimChar;\n            }\n\n            Debug.assert(span.minChar !== -1);\n            Debug.assert(span.limChar !== -1);\n        }\n\n        private setSpan1(span: IASTSpan, fullStart: number, element: ISyntaxElement): void {\n            var desiredMinChar = fullStart + element.leadingTriviaWidth();\n            var desiredLimChar = fullStart + element.fullWidth();\n            Debug.assert(!isNaN(desiredMinChar));\n            Debug.assert(!isNaN(desiredLimChar));\n\n            span.minChar = desiredMinChar;\n            span.limChar = desiredLimChar;\n\n            Debug.assert(span.minChar !== -1);\n            Debug.assert(span.limChar !== -1);\n        }\n\n\n        private setSpanExplicit(span: IASTSpan, start: number, end: number): void {\n            span.minChar = start;\n            span.limChar = end;\n            Debug.assert(!isNaN(span.minChar));\n            Debug.assert(!isNaN(span.limChar));\n            Debug.assert(span.minChar !== -1);\n            Debug.assert(span.limChar !== -1);\n        }\n\n        private identifierFromToken(token: ISyntaxToken, isOptional: bool, useValueText: bool): Identifier {\n            this.assertElementAtPosition(token);\n\n            var result: Identifier = null;\n            if (token.fullWidth() === 0) {\n                result = new MissingIdentifier();\n            }\n            else {\n                result = new Identifier(token.text());\n                result.text = useValueText ? token.valueText() : result.text;\n            }\n\n            if (isOptional) {\n                result.setFlags(result.getFlags() | ASTFlags.OptionalName);\n            }\n\n            var start = this.position + token.leadingTriviaWidth();\n            this.setSpanExplicit(result, start, start + token.width());\n\n            return result;\n        }\n\n        private getAST(element: ISyntaxElement): any {\n            if (incrementalAst) {\n                var result = (<any>element)._ast;\n                return result ? result : null;\n            }\n            else {\n                return null;\n            }\n        }\n\n        private setAST(element: ISyntaxElement, ast: IASTSpan): void {\n            if (incrementalAst) {\n                (<any>element)._ast = ast;\n            }\n        }\n\n        private visitSyntaxList(list: ISyntaxList): ASTList {\n            var start = this.position;\n            var result: ASTList = this.getAST(list);\n            if (result) {\n                this.movePast(list);\n            }\n            else {\n                result = new ASTList();\n\n                for (var i = 0, n = list.childCount(); i < n; i++) {\n                    result.append(list.childAt(i).accept(this));\n                }\n\n                if (n > 0) {\n                    this.setAST(list, result);\n                }\n            }\n\n            this.setSpan(result, start, list);\n            return result;\n        }\n\n        private visitSeparatedSyntaxList(list: ISeparatedSyntaxList): ASTList {\n            var start = this.position;\n            var result: ASTList = this.getAST(list);\n            if (result) {\n                this.movePast(list);\n            }\n            else {\n                result = new ASTList();\n\n                for (var i = 0, n = list.childCount(); i < n; i++) {\n                    if (i % 2 === 0) {\n                        result.append(list.childAt(i).accept(this));\n                        this.previousTokenTrailingComments = null;\n                    }\n                    else {\n                        var separatorToken = <ISyntaxToken>list.childAt(i);\n                        this.previousTokenTrailingComments = this.convertTokenTrailingComments(\n                            separatorToken, this.position + separatorToken.leadingTriviaWidth() + separatorToken.width());\n                        this.movePast(separatorToken);\n                    }\n                }\n\n                this.previousTokenTrailingComments = null;\n\n                if (n > 0) {\n                    this.setAST(list, result);\n                }\n            }\n\n            this.setSpan(result, start, list);\n            return result;\n        }\n\n        private createRef(text: string, minChar: number): Identifier {\n            var id = new Identifier(text);\n            id.minChar = minChar;\n            return id;\n        }\n\n        private convertComment(trivia: ISyntaxTrivia, commentStartPosition: number, hasTrailingNewLine: bool): Comment {\n            var comment = new Comment(trivia.fullText(), trivia.kind() === SyntaxKind.MultiLineCommentTrivia, hasTrailingNewLine);\n\n            comment.minChar = commentStartPosition;\n            comment.limChar = commentStartPosition + trivia.fullWidth();\n            comment.minLine = this.lineMap.getLineNumberFromPosition(comment.minChar);\n            comment.limLine = this.lineMap.getLineNumberFromPosition(comment.limChar);\n\n            return comment;\n        }\n\n        private convertComments(triviaList: ISyntaxTriviaList, commentStartPosition: number): Comment[] {\n            var result: Comment[] = [];\n\n            for (var i = 0, n = triviaList.count(); i < n; i++) {\n                var trivia = triviaList.syntaxTriviaAt(i);\n\n                if (trivia.isComment()) {\n                    var hasTrailingNewLine = ((i + 1) < n) && triviaList.syntaxTriviaAt(i + 1).isNewLine();\n                    result.push(this.convertComment(trivia, commentStartPosition, hasTrailingNewLine));\n                }\n\n                commentStartPosition += trivia.fullWidth();\n            }\n\n            return result;\n        }\n\n        private mergeComments(comments1: Comment[], comments2: Comment[]): Comment[] {\n            if (comments1 === null) {\n                return comments2;\n            }\n\n            if (comments2 === null) {\n                return comments1;\n            }\n\n            return comments1.concat(comments2);\n\n        }\n\n        private convertTokenLeadingComments(token: ISyntaxToken, commentStartPosition: number): Comment[] {\n            if (token === null) {\n                return null;\n            }\n\n            var preComments = token.hasLeadingComment()\n                ? this.convertComments(token.leadingTrivia(), commentStartPosition)\n                : null;\n\n            var previousTokenTrailingComments = this.previousTokenTrailingComments;\n            this.previousTokenTrailingComments = null;\n\n            return this.mergeComments(previousTokenTrailingComments, preComments);\n        }\n\n        private convertTokenTrailingComments(token: ISyntaxToken, commentStartPosition: number): Comment[] {\n            if (token === null || !token.hasTrailingComment() || token.hasTrailingNewLine()) {\n                return null;\n            }\n\n            return this.convertComments(token.trailingTrivia(), commentStartPosition);\n        }\n\n        private convertNodeLeadingComments(node: SyntaxNode, nodeStart: number): Comment[] {\n            return this.convertTokenLeadingComments(node.firstToken(), nodeStart);\n        }\n\n        private convertNodeTrailingComments(node: SyntaxNode, nodeStart: number): Comment[] {\n            return this.convertTokenTrailingComments(node.lastToken(), nodeStart + node.leadingTriviaWidth() + node.width());\n        }\n\n        private containsToken(list: ISyntaxList, kind: SyntaxKind): bool {\n            for (var i = 0, n = list.childCount(); i < n; i++) {\n                if (list.childAt(i).kind() === kind) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private visitToken(token: ISyntaxToken): AST {\n            this.assertElementAtPosition(token);\n\n            var result: AST = this.getAST(token);\n            var fullStart = this.position;\n\n            if (result) {\n                this.movePast(token);\n            }\n            else {\n                if (token.kind() === SyntaxKind.ThisKeyword) {\n                    result = new AST(NodeType.ThisExpression);\n                }\n                else if (token.kind() === SyntaxKind.SuperKeyword) {\n                    result = new AST(NodeType.SuperExpression);\n                }\n                else if (token.kind() === SyntaxKind.TrueKeyword) {\n                    result = new AST(NodeType.TrueLiteral);\n                }\n                else if (token.kind() === SyntaxKind.FalseKeyword) {\n                    result = new AST(NodeType.FalseLiteral);\n                }\n                else if (token.kind() === SyntaxKind.NullKeyword) {\n                    result = new AST(NodeType.Null);\n                }\n                else if (token.kind() === SyntaxKind.StringLiteral) {\n                    result = new StringLiteral(token.text());\n                }\n                else if (token.kind() === SyntaxKind.RegularExpressionLiteral) {\n                    result = new RegexLiteral(token.text());\n                }\n                else if (token.kind() === SyntaxKind.NumericLiteral) {\n                    var preComments = this.convertTokenLeadingComments(token, fullStart);\n                    \n                    var value = token.text().indexOf(\".\") > 0 ? parseFloat(token.text()) : parseInt(token.text());\n                    result = new NumberLiteral(value, token.text());\n\n                    result.preComments = preComments;\n                }\n                else {\n                    result = this.identifierFromToken(token, /*isOptional:*/ false, /*useValueText:*/ true);\n                }\n\n                this.movePast(token);\n            }\n\n            var start = fullStart + token.leadingTriviaWidth();\n            this.setAST(token, result);\n            this.setSpanExplicit(result, start, start + token.width());\n            return result;\n        }\n\n        private hasTopLevelImportOrExport(node: SourceUnitSyntax): bool {\n            // TODO: implement this.\n\n            var firstToken: ISyntaxToken;\n            var i = 0;\n            var n = 0;\n\n            for (i = 0, n = node.moduleElements.childCount(); i < n; i++) {\n                var moduleElement = node.moduleElements.childAt(i);\n\n                firstToken = moduleElement.firstToken();\n                if (firstToken !== null && firstToken.kind() === SyntaxKind.ExportKeyword) {\n                    return true;\n                }\n\n                if (moduleElement.kind() === SyntaxKind.ImportDeclaration) {\n                    var importDecl = <ImportDeclarationSyntax>moduleElement;\n                    if (importDecl.moduleReference.kind() === SyntaxKind.ExternalModuleReference) {\n                        return true;\n                    }\n                }\n            }\n\n            firstToken = node.firstToken();\n\n            if (firstToken.hasLeadingComment()) {\n                var leadingTrivia = firstToken.leadingTrivia();\n\n                for (i = 0, n = leadingTrivia.count(); i < n; i++) {\n                    var trivia = leadingTrivia.syntaxTriviaAt(i);\n\n                    if (trivia.isComment()) {\n                        // var dependencyPath = getAdditionalDependencyPath(trivia.text());\n\n                        //if (dependencyPath) {\n                        //    this.amdDependencies.push(dependencyPath);\n                        //}\n\n                        if (getImplicitImport(trivia.fullText())) {\n                            return true;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        private hasUseStrictDirective(list: ISyntaxList): bool {\n            // Check if all the items are directive prologue elements.\n            for (var i = 0; i < list.childCount(); i++) {\n                var item = list.childAt(i);\n                if (!SyntaxFacts.isDirectivePrologueElement(item)) {\n                    return false;\n                }\n\n                if (SyntaxFacts.isUseStrictDirective(item)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private visitSourceUnit(node: SourceUnitSyntax): Script {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var members;\n\n            var bod = this.visitSyntaxList(node.moduleElements);\n\n            if (this.hasUseStrictDirective(node.moduleElements)) {\n                bod.setFlags(bod.getFlags() | ASTFlags.StrictMode);\n            }\n\n            var topLevelMod: ModuleDeclaration = null;\n            if (this.compilationSettings.moduleGenTarget != ModuleGenTarget.Local && this.hasTopLevelImportOrExport(node)) {\n                var correctedFileName = switchToForwardSlashes(this.fileName);\n                var id: Identifier = new Identifier(correctedFileName);\n                topLevelMod = new ModuleDeclaration(id, bod, null);\n                this.setSpanExplicit(topLevelMod, start, this.position);\n\n                topLevelMod.setModuleFlags(topLevelMod.getModuleFlags() | ModuleFlags.IsDynamic);\n                topLevelMod.setModuleFlags(topLevelMod.getModuleFlags() | ModuleFlags.IsWholeFile);\n                topLevelMod.setModuleFlags(topLevelMod.getModuleFlags() | ModuleFlags.Exported);\n\n                if (this.isParsingDeclareFile) {\n                    topLevelMod.setModuleFlags(topLevelMod.getModuleFlags() | ModuleFlags.Ambient);\n                }\n\n                topLevelMod.prettyName = getPrettyName(correctedFileName);\n                //topLevelMod.containsUnicodeChar = this.scanner.seenUnicodeChar;\n                //topLevelMod.containsUnicodeCharInComment = this.scanner.seenUnicodeCharInComment;\n\n                // topLevelMod.amdDependencies = this.amdDependencies;\n\n                bod = new ASTList();\n                this.setSpanExplicit(bod, start, this.position);\n                bod.append(topLevelMod);\n            }\n\n            var result = new Script();\n            this.setSpanExplicit(result, start, this.position);\n\n            result.bod = bod;\n            result.locationInfo = new LocationInfo(this.fileName, this.lineMap);\n            result.topLevelMod = topLevelMod;\n            result.isDeclareFile = this.isParsingDeclareFile;\n            result.requiresExtendsBlock = this.requiresExtendsBlock;\n\n            return result;\n        }\n\n        private visitExternalModuleReference(node: ExternalModuleReferenceSyntax): any {\n            this.assertElementAtPosition(node);\n            this.moveTo(node, node.stringLiteral);\n            var result = this.identifierFromToken(node.stringLiteral, /*isOptional:*/ false, /*useValueText:*/ false);\n            this.movePast(node.stringLiteral);\n            this.movePast(node.closeParenToken);\n\n            return result;\n        }\n\n        private visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): any {\n            this.assertElementAtPosition(node);\n            return node.moduleName.accept(this);\n        }\n\n        private visitClassDeclaration(node: ClassDeclarationSyntax): ClassDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ClassDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n                this.moveTo(node, node.identifier);\n                var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n\n                var typeParameters = node.typeParameterList === null ? null : node.typeParameterList.accept(this);\n                var extendsList = new ASTList();\n                var implementsList = new ASTList();\n\n                var i = 0;\n                var n = 0;\n\n                for (i = 0, n = node.heritageClauses.childCount(); i < n; i++) {\n                    var heritageClause = <HeritageClauseSyntax>node.heritageClauses.childAt(i);\n                    if (heritageClause.extendsOrImplementsKeyword.tokenKind === SyntaxKind.ExtendsKeyword) {\n                        extendsList = heritageClause.accept(this);\n                    }\n                    else {\n                        Debug.assert(heritageClause.extendsOrImplementsKeyword.tokenKind === SyntaxKind.ImplementsKeyword);\n                        implementsList = heritageClause.accept(this);\n                    }\n                }\n\n                this.movePast(node.openBraceToken);\n                var members = this.visitSyntaxList(node.classElements);\n                this.movePast(node.closeBraceToken);\n\n                result = new ClassDeclaration(name, typeParameters, members, extendsList, implementsList);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n\n                for (i = 0; i < members.members.length; i++) {\n                    var member = members.members[i];\n                    if (member.nodeType === NodeType.FuncDecl) {\n                        var funcDecl = <FuncDecl>member;\n\n                        if (funcDecl.isConstructor) {\n                            funcDecl.name = name;\n                            funcDecl.classDecl = result;\n\n                            result.constructorDecl = funcDecl;\n                        }\n                    }\n                }\n            }\n\n            this.requiresExtendsBlock = this.requiresExtendsBlock || result.extendsList.members.length > 0;\n\n            if (this.containsToken(node.modifiers, SyntaxKind.ExportKeyword) || this.isParsingAmbientModule) {\n                result.setVarFlags(result.getVarFlags() | VariableFlags.Exported);\n            }\n\n            if (this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword) || this.isParsingAmbientModule || this.isParsingDeclareFile) {\n                result.setVarFlags(result.getVarFlags() | VariableFlags.Ambient);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): InterfaceDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: InterfaceDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n                this.moveTo(node, node.identifier);\n                var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                var typeParameters = node.typeParameterList === null ? null : node.typeParameterList.accept(this);\n\n                var i = 0;\n                var n = 0;\n                var extendsList: ASTList = null;\n\n                for (i = 0, n = node.heritageClauses.childCount(); i < n; i++) {\n                    var heritageClause = <HeritageClauseSyntax>node.heritageClauses.childAt(i);\n                    if (i === 0) {\n                        extendsList = heritageClause.accept(this);\n                    }\n                    else {\n                        this.movePast(heritageClause);\n                    }\n                }\n\n                this.movePast(node.body.openBraceToken);\n                var members = this.visitSeparatedSyntaxList(node.body.typeMembers);\n\n                this.movePast(node.body.closeBraceToken);\n\n                result = new InterfaceDeclaration(name, typeParameters, members, extendsList, null);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n            }\n\n            if (this.containsToken(node.modifiers, SyntaxKind.ExportKeyword) || this.isParsingAmbientModule) {\n                result.setVarFlags(result.getVarFlags() | VariableFlags.Exported);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitHeritageClause(node: HeritageClauseSyntax): ASTList {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ASTList = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                result = new ASTList();\n\n                this.movePast(node.extendsOrImplementsKeyword);\n                for (var i = 0, n = node.typeNames.childCount(); i < n; i++) {\n                    if (i % 2 === 1) {\n                        this.movePast(node.typeNames.childAt(i));\n                    }\n                    else {\n                        var type = this.visitType(node.typeNames.childAt(i));\n                        if (type.nodeType === NodeType.TypeRef) {\n                            type = (<TypeReference>type).term;\n                        }\n\n                        result.append(type);\n                    }\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private getModuleNames(node: ModuleDeclarationSyntax): Identifier[] {\n            var result: Identifier[] = [];\n\n            if (node.stringLiteral !== null) {\n                result.push(this.identifierFromToken(node.stringLiteral, /*isOptional:*/false, /*useValueText:*/ false));\n                this.movePast(node.stringLiteral);\n            }\n            else {\n                this.getModuleNamesHelper(node.moduleName, result);\n            }\n\n            return result;\n        }\n\n        private getModuleNamesHelper(name: INameSyntax, result: Identifier[]): void {\n            this.assertElementAtPosition(name);\n\n            if (name.kind() === SyntaxKind.QualifiedName) {\n                var qualifiedName = <QualifiedNameSyntax>name;\n                this.getModuleNamesHelper(qualifiedName.left, result);\n                this.movePast(qualifiedName.dotToken);\n                result.push(this.identifierFromToken(qualifiedName.right, /*isOptional:*/ false, /*useValueText:*/ false));\n                this.movePast(qualifiedName.right);\n            }\n            else {\n                result.push(this.identifierFromToken(<ISyntaxToken>name, /*isOptional:*/ false, /*useValueText:*/ false));\n                this.movePast(name);\n            }\n        }\n\n        private visitModuleDeclaration(node: ModuleDeclarationSyntax): ModuleDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ModuleDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.moduleKeyword);\n                this.movePast(node.moduleKeyword);\n                var names = this.getModuleNames(node);\n                this.movePast(node.openBraceToken);\n                var svIsParsingAmbientModule = this.isParsingAmbientModule;\n                if (this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword) || this.isParsingDeclareFile) {\n                    this.isParsingAmbientModule = true;\n                }\n                var members = this.visitSyntaxList(node.moduleElements);\n                this.isParsingAmbientModule = svIsParsingAmbientModule;\n                var closeBracePosition = this.position;\n                this.movePast(node.closeBraceToken);\n\n                for (var i = names.length - 1; i >= 0; i--) {\n                    var innerName = names[i];\n\n                    var closeBraceSpan = new ASTSpan();\n                    closeBraceSpan.minChar = closeBracePosition;\n                    closeBraceSpan.limChar = this.position;\n\n                    result = new ModuleDeclaration(innerName, members, closeBraceSpan);\n                    this.setSpan(result, start, node);\n\n                    result.preComments = preComments;\n                    result.postComments = postComments;\n\n                    preComments = null;\n                    postComments = null;\n\n                    // mark the inner module declarations as exported\n                    if (i) {\n                        result.setModuleFlags(result.getModuleFlags() | ModuleFlags.Exported);\n                    } else if (this.containsToken(node.modifiers, SyntaxKind.ExportKeyword) || this.isParsingAmbientModule) {\n                        // outer module is exported if export key word or parsing ambient module\n                        result.setModuleFlags(result.getModuleFlags() | ModuleFlags.Exported);\n                    }\n\n                    // REVIEW: will also possibly need to re-parent comments as well\n\n                    members = new ASTList();\n                    members.append(result);\n                }\n            }\n\n            // mark ambient if declare keyword or parsing ambient module or parsing declare file\n            if (this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword) || this.isParsingAmbientModule || this.isParsingDeclareFile) {\n                result.setModuleFlags(result.getModuleFlags() | ModuleFlags.Ambient);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private hasDotDotDotParameter(parameters: ISeparatedSyntaxList): bool {\n            for (var i = 0, n = parameters.nonSeparatorCount(); i < n; i++) {\n                if ((<ParameterSyntax>parameters.nonSeparatorAt(i)).dotDotDotToken) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        private convertBlock(node: BlockSyntax): ASTList {\n            if (!node) {\n                return null;\n            }\n\n            this.movePast(node.openBraceToken);\n            var statements = this.visitSyntaxList(node.statements);\n            this.movePast(node.closeBraceToken);\n\n            return statements;\n        }\n\n        private visitFunctionDeclaration(node: FunctionDeclarationSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FuncDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.identifier);\n                var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n\n                this.movePast(node.identifier);\n\n                var typeParameters = node.callSignature.typeParameterList === null ? null : node.callSignature.typeParameterList.accept(this);\n                var parameters = node.callSignature.parameterList.accept(this);\n\n                var returnType = node.callSignature.typeAnnotation\n                    ? node.callSignature.typeAnnotation.accept(this)\n                    : null;\n\n                var bod = this.convertBlock(node.block);\n                if (bod) {\n                    bod.append(new EndCode());\n                }\n\n                if (node.block) {\n                    if (this.hasUseStrictDirective(node.block.statements)) {\n                        bod.setFlags(bod.getFlags() | ASTFlags.StrictMode);\n                    }\n                }\n\n                this.movePast(node.semicolonToken);\n\n                result = new FuncDecl(name, bod, false, typeParameters, parameters, NodeType.FuncDecl);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.callSignature.parameterList.parameters);\n                result.returnTypeAnnotation = returnType;\n\n                if (node.semicolonToken) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n                }\n            }\n\n            if (this.containsToken(node.modifiers, SyntaxKind.ExportKeyword) || this.isParsingAmbientModule) {\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Exported);\n            }\n\n            if (this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword) || this.isParsingAmbientModule || this.isParsingDeclareFile) {\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Ambient);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitEnumDeclaration(node: EnumDeclarationSyntax): ModuleDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n\n            var preComments = this.convertNodeLeadingComments(node, start);\n            var postComments = this.convertNodeTrailingComments(node, start);\n\n            this.moveTo(node, node.identifier);\n            var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n            this.movePast(node.identifier);\n\n            this.movePast(node.openBraceToken);\n            var members = new ASTList();\n\n            var mapDecl = new VarDecl(new Identifier(\"_map\"));\n\n            mapDecl.setVarFlags(mapDecl.getVarFlags() | VariableFlags.Exported);\n            mapDecl.setVarFlags(mapDecl.getVarFlags() | VariableFlags.Private);\n\n            // REVIEW: Is this still necessary?\n            mapDecl.setVarFlags(mapDecl.getVarFlags() | (VariableFlags.Property | VariableFlags.Public));\n            mapDecl.init = new UnaryExpression(NodeType.ArrayLit, null);\n            members.append(mapDecl);\n            var lastValue: NumberLiteral = null;\n            var memberNames: Identifier[] = [];\n            var memberName: Identifier;\n\n            for (var i = 0, n = node.enumElements.childCount(); i < n; i++) {\n                if (i % 2 === 1) {\n                    this.movePast(node.enumElements.childAt(i));\n                }\n                else {\n                    var enumElement = <EnumElementSyntax>node.enumElements.childAt(i);\n\n                    var memberValue: AST = null;\n\n                    memberName = this.identifierFromToken(enumElement.propertyName, /*isOptional:*/ false, /*useValueText:*/ true);\n                    this.movePast(enumElement.propertyName);\n\n                    if (enumElement.equalsValueClause !== null) {\n                        memberValue = enumElement.equalsValueClause.accept(this);\n                        lastValue = <NumberLiteral>memberValue;\n                    }\n\n                    var memberStart = this.position;\n\n                    if (memberValue === null) {\n                        if (lastValue === null) {\n                            memberValue = new NumberLiteral(0, \"0\");\n                            lastValue = <NumberLiteral>memberValue;\n                        }\n                        else {\n                            var nextValue = lastValue.value + 1;\n                            memberValue = new NumberLiteral(nextValue, nextValue.toString());\n                            lastValue = <NumberLiteral>memberValue;\n                        }\n                        var map: BinaryExpression =\n                            new BinaryExpression(NodeType.Asg,\n                                     new BinaryExpression(NodeType.Index,\n                                              new Identifier(\"_map\"),\n                                              memberValue),\n                                     new StringLiteral(\'\"\' + memberName.actualText + \'\"\'));\n                        map.setFlags(map.getFlags() | ASTFlags.EnumInitializer);\n                        members.append(new ExpressionStatement(map));\n                        this.setSpanExplicit(map, memberStart, this.position);\n                        this.setSpanExplicit(map.operand1, memberStart, this.position);\n                        this.setSpanExplicit(map.operand2, memberStart, this.position);\n                    }\n\n                    var member = new VarDecl(memberName);\n                    member.init = memberValue;\n                    // Note: Leave minChar, limChar as \"-1\" on typeExpr as this is a parsing artifact.\n                    member.typeExpr = new TypeReference(this.createRef(name.actualText, -1), 0);\n                    member.setVarFlags(member.getVarFlags() | VariableFlags.Property);\n                    this.setSpanExplicit(member, memberStart, this.position);\n\n                    if (memberValue.nodeType === NodeType.NumberLit) {\n                        member.setVarFlags(member.getVarFlags() | VariableFlags.Constant);\n                    }\n                    else if (memberValue.nodeType === NodeType.Lsh) {\n                        // If the initializer is of the form \"value << value\" then treat it as a constant\n                        // as well.\n                        var binop = <BinaryExpression>memberValue;\n                        if (binop.operand1.nodeType === NodeType.NumberLit && binop.operand2.nodeType === NodeType.NumberLit) {\n                            member.setVarFlags(member.getVarFlags() | VariableFlags.Constant);\n                        }\n                    }\n                    else if (memberValue.nodeType === NodeType.Name) {\n                        // If the initializer refers to an earlier enum value, then treat it as a constant\n                        // as well.\n                        var nameNode = <Identifier>memberValue;\n                        for (var j = 0; j < memberNames.length; j++) {\n                            memberName = memberNames[j];\n                            if (memberName.text === nameNode.text) {\n                                member.setVarFlags(member.getVarFlags() | VariableFlags.Constant);\n                                break;\n                            }\n                        }\n                    }\n\n                    members.append(member);\n                    memberNames.push(memberName);\n                    // all enum members are exported\n                    member.setVarFlags(member.getVarFlags() | VariableFlags.Exported);\n                }\n            }\n\n            this.movePast(node.closeBraceToken);\n\n            var endingToken = new ASTSpan();\n            var modDecl = new ModuleDeclaration(name, members, endingToken);\n            this.setSpan(modDecl, start, node);\n            this.setSpan(mapDecl, start, node);\n\n            modDecl.preComments = preComments;\n            modDecl.postComments = postComments;\n            modDecl.setModuleFlags(modDecl.getModuleFlags() | ModuleFlags.IsEnum);\n            modDecl.recordNonInterface();\n\n            if (this.containsToken(node.modifiers, SyntaxKind.ExportKeyword) || this.isParsingAmbientModule) {\n                modDecl.setModuleFlags(modDecl.getModuleFlags() | ModuleFlags.Exported);\n            }\n\n            return modDecl;\n        }\n\n        private visitEnumElement(node: EnumElementSyntax): void {\n            // Processing enum elements should be handled from inside visitEnumDeclaration.\n            throw Errors.invalidOperation();\n        }\n\n        private visitImportDeclaration(node: ImportDeclarationSyntax): ImportDeclaration {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ImportDeclaration = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.identifier);\n                var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                this.movePast(node.equalsToken);\n                var alias = node.moduleReference.accept(this);\n                this.movePast(node.semicolonToken);\n\n                result = new ImportDeclaration(name, alias);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.isDynamicImport = node.moduleReference.kind() === SyntaxKind.ExternalModuleReference;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitExportAssignment(node: ExportAssignmentSyntax): ExportAssignment {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ExportAssignment = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.moveTo(node, node.identifier);\n                var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                this.movePast(node.semicolonToken);\n\n                result = new ExportAssignment(name);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitVariableStatement(node: VariableStatementSyntax): AST {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n\n            var preComments: Comment[] = null;\n            if (node.modifiers.childCount() > 0) {\n                preComments = this.convertTokenLeadingComments(node.modifiers.firstToken(), start);\n            }\n\n            this.moveTo(node, node.variableDeclaration);\n\n            var varList = node.variableDeclaration.accept(this);\n            this.movePast(node.semicolonToken);\n\n            if (varList.nodeType === NodeType.VarDecl) {\n                varDecl = <VarDecl>varList;\n                varList = new ASTList();\n                varList.append(varDecl);\n            }\n\n            for (var i = 0, n = varList.members.length; i < n; i++) {\n                var varDecl = <VarDecl>varList.members[i];\n\n                if (i === 0) {\n                    varDecl.preComments = this.mergeComments(preComments, varDecl.preComments);\n                }\n\n                if (this.containsToken(node.modifiers, SyntaxKind.ExportKeyword) || this.isParsingAmbientModule) {\n                    varDecl.setVarFlags(varDecl.getVarFlags() | VariableFlags.Exported);\n                }\n\n                if (this.containsToken(node.modifiers, SyntaxKind.DeclareKeyword) || this.isParsingAmbientModule || this.isParsingDeclareFile) {\n                    varDecl.setVarFlags(varDecl.getVarFlags() | VariableFlags.Ambient);\n                }\n            }\n\n            if (node.variableDeclaration.variableDeclarators.nonSeparatorCount() === 1) {\n                return varList.members[0];\n            }\n            else {\n                var result = new Block(varList, /*isStatementBlock:*/ false);\n                this.setSpan(result, start, node);\n\n                return result;\n            }\n        }\n\n        private visitVariableDeclaration(node: VariableDeclarationSyntax): AST {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n\n            var preComments = this.convertNodeLeadingComments(node, start);\n            var postComments = this.convertNodeTrailingComments(node, start);\n\n            this.moveTo(node, node.variableDeclarators);\n            var variableDecls = this.visitSeparatedSyntaxList(node.variableDeclarators);\n\n            for (var i = 0; i < variableDecls.members.length; i++) {\n                if (i === 0) {\n                    variableDecls.members[i].preComments = preComments;\n                    variableDecls.members[i].postComments = postComments;\n                }\n            }\n\n            if (variableDecls.members.length === 1) {\n                return variableDecls.members[0];\n            }\n\n            return variableDecls;\n        }\n\n        private visitVariableDeclarator(node: VariableDeclaratorSyntax): VarDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var name = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n            this.movePast(node.identifier);\n            var typeExpr = node.typeAnnotation ? node.typeAnnotation.accept(this) : null;\n            var init = node.equalsValueClause ? node.equalsValueClause.accept(this) : null;\n\n            var result = new VarDecl(name);\n            this.setSpan(result, start, node);\n\n            result.typeExpr = typeExpr;\n            result.init = init;\n            if (init && init.nodeType === NodeType.FuncDecl) {\n                var funcDecl = <FuncDecl>init;\n                funcDecl.hint = name.actualText;\n            }\n\n            // TODO: more flags\n\n            return result;\n        }\n\n        private visitEqualsValueClause(node: EqualsValueClauseSyntax): AST {\n            this.assertElementAtPosition(node);\n\n            this.previousTokenTrailingComments = this.convertTokenTrailingComments(node.equalsToken,\n                this.position + node.equalsToken.leadingTriviaWidth() + node.equalsToken.width());\n\n            this.movePast(node.equalsToken);\n            var result = node.value.accept(this);\n\n            this.previousTokenTrailingComments = null;\n            return result;\n        }\n\n        private getUnaryExpressionNodeType(kind: SyntaxKind): NodeType {\n            switch (kind) {\n                case SyntaxKind.PlusExpression: return NodeType.Pos;\n                case SyntaxKind.NegateExpression: return NodeType.Neg;\n                case SyntaxKind.BitwiseNotExpression: return NodeType.Not;\n                case SyntaxKind.LogicalNotExpression: return NodeType.LogNot;\n                case SyntaxKind.PreIncrementExpression: return NodeType.IncPre;\n                case SyntaxKind.PreDecrementExpression: return NodeType.DecPre;\n                default:\n                    throw Errors.invalidOperation();\n            }\n        }\n\n        private visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.operatorToken);\n                var operand = node.operand.accept(this);\n\n                result = new UnaryExpression(this.getUnaryExpressionNodeType(node.kind()), operand);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.openBracketToken);\n                var expressions = this.visitSeparatedSyntaxList(node.expressions);\n                this.movePast(node.closeBracketToken);\n\n                if (node.expressions.childCount() > 0 && node.expressions.childAt(node.expressions.childCount() - 1).kind() === SyntaxKind.CommaToken) {\n                    expressions.append(new AST(NodeType.EmptyExpr));\n                }\n\n                result = new UnaryExpression(NodeType.ArrayLit, expressions);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitOmittedExpression(node: OmittedExpressionSyntax): AST {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: AST = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                result = new AST(NodeType.EmptyExpr);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): ParenthesizedExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ParenthesizedExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n\n                this.movePast(node.openParenToken);\n                var expr = node.expression.accept(this);\n                this.movePast(node.closeParenToken);\n\n                result = new ParenthesizedExpression(expr);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private getArrowFunctionStatements(body: ISyntaxNodeOrToken): ASTList {\n            var statements: ASTList = null;\n\n            if (body.kind() === SyntaxKind.Block) {\n                var block = <BlockSyntax>body;\n\n                statements = this.convertBlock(block);\n            }\n            else {\n                statements = new ASTList();\n\n                var retStmt = new ReturnStatement(body.accept(this));\n                statements.append(retStmt);\n            }\n\n            statements.append(new EndCode());\n\n            return statements;\n        }\n\n        private visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpressionSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FuncDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var identifier = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                this.movePast(node.equalsGreaterThanToken);\n\n                var parameters = new ASTList();\n\n                var parameter = new ArgDecl(identifier);\n                this.setSpanExplicit(parameter, identifier.minChar, identifier.limChar);\n\n                parameters.append(parameter);\n\n                var statements = this.getArrowFunctionStatements(node.body);\n\n                result = new FuncDecl(null, statements, /*isConstructor:*/ false, null, parameters, NodeType.FuncDecl);\n\n                result.returnTypeAnnotation = null;\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.IsFunctionExpression);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.IsFatArrowFunction);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FuncDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                var typeParameters = node.callSignature.typeParameterList === null ? null : node.callSignature.typeParameterList.accept(this);\n                var parameters = node.callSignature.parameterList.accept(this);\n                var returnType = node.callSignature.typeAnnotation ? node.callSignature.typeAnnotation.accept(this) : null;\n                this.movePast(node.equalsGreaterThanToken);\n\n                var statements = this.getArrowFunctionStatements(node.body);\n\n                result = new FuncDecl(null, statements, /*isConstructor:*/ false, typeParameters, parameters, NodeType.FuncDecl);\n\n                result.preComments = preComments;\n                result.returnTypeAnnotation = returnType;\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.IsFunctionExpression);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.IsFatArrowFunction);\n                result.variableArgList = this.hasDotDotDotParameter(node.callSignature.parameterList.parameters);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitType(type: ITypeSyntax): AST {\n            this.assertElementAtPosition(type);\n\n            if (type.isToken()) {\n                var start = this.position;\n                var result = new TypeReference(type.accept(this), 0);\n                this.setSpan(result, start, type);\n\n                return result;\n            }\n            else {\n                return type.accept(this);\n            }\n        }\n\n        private visitQualifiedName(node: QualifiedNameSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeReference = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n\n                var left = this.visitType(node.left);\n                this.movePast(node.dotToken);\n                var right = this.identifierFromToken(node.right, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.right);\n\n                if (left.nodeType === NodeType.TypeRef) {\n                    left = (<TypeReference>left).term;\n                }\n\n                var term = new BinaryExpression(NodeType.Dot, left, right);\n                this.setSpan(term, start, node);\n\n                result = new TypeReference(term, 0);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitTypeArgumentList(node: TypeArgumentListSyntax): ASTList {\n            this.assertElementAtPosition(node);\n\n            var result = new ASTList();\n\n            this.movePast(node.lessThanToken);\n            for (var i = 0, n = node.typeArguments.childCount(); i < n; i++) {\n                if (i % 2 === 1) {\n                    this.movePast(node.typeArguments.childAt(i));\n                }\n                else {\n                    result.append(this.visitType(node.typeArguments.childAt(i)));\n                }\n            }\n            this.movePast(node.greaterThanToken);\n\n            return result;\n        }\n\n        private visitConstructorType(node: ConstructorTypeSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeReference = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.newKeyword);\n                var typeParameters = node.typeParameterList === null ? null : node.typeParameterList.accept(this);\n                var parameters = node.parameterList.accept(this);\n                this.movePast(node.equalsGreaterThanToken);\n                var returnType = node.type ? this.visitType(node.type) : null;\n\n                var funcDecl = new FuncDecl(null, null, false, typeParameters, parameters, NodeType.FuncDecl);\n                this.setSpan(funcDecl, start, node);\n\n                funcDecl.returnTypeAnnotation = returnType;\n                funcDecl.setFunctionFlags(funcDecl.getFunctionFlags() | FunctionFlags.Signature);\n                funcDecl.variableArgList = this.hasDotDotDotParameter(node.parameterList.parameters);\n\n                funcDecl.setFunctionFlags(funcDecl.getFunctionFlags() | FunctionFlags.ConstructMember);\n                funcDecl.setFlags(funcDecl.getFlags() | ASTFlags.TypeReference);\n                funcDecl.hint = \"_construct\";\n                funcDecl.classDecl = null;\n\n                result = new TypeReference(funcDecl, 0);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitFunctionType(node: FunctionTypeSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeReference = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var typeParameters = node.typeParameterList === null ? null : node.typeParameterList.accept(this);\n                var parameters = node.parameterList.accept(this);\n                this.movePast(node.equalsGreaterThanToken);\n                var returnType = node.type ? this.visitType(node.type) : null;\n\n                var funcDecl = new FuncDecl(null, null, false, typeParameters, parameters, NodeType.FuncDecl);\n                this.setSpan(funcDecl, start, node);\n\n                funcDecl.returnTypeAnnotation = returnType;\n                // funcDecl.variableArgList = variableArgList;\n                funcDecl.setFlags(funcDecl.getFunctionFlags() | FunctionFlags.Signature);\n                funcDecl.setFlags(funcDecl.getFlags() | ASTFlags.TypeReference);\n                funcDecl.variableArgList = this.hasDotDotDotParameter(node.parameterList.parameters);\n\n                result = new TypeReference(funcDecl, 0);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitObjectType(node: ObjectTypeSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeReference = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.openBraceToken);\n                var typeMembers = this.visitSeparatedSyntaxList(node.typeMembers);\n                this.movePast(node.closeBraceToken);\n\n                var interfaceDecl = new InterfaceDeclaration(\n                    new Identifier(\"__anonymous\"), null, typeMembers, null, null);\n                this.setSpan(interfaceDecl, start, node);\n\n                interfaceDecl.setFlags(interfaceDecl.getFlags() | ASTFlags.TypeReference);\n\n                result = new TypeReference(interfaceDecl, 0);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitArrayType(node: ArrayTypeSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeReference = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var underlying = this.visitType(node.type);\n                this.movePast(node.openBracketToken);\n                this.movePast(node.closeBracketToken);\n\n                if (underlying.nodeType === NodeType.TypeRef) {\n                    result = <TypeReference>underlying;\n                    result.arrayCount++;\n                }\n                else {\n                    result = new TypeReference(underlying, 1);\n                }\n\n                result.setFlags(result.getFlags() | ASTFlags.TypeReference);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitGenericType(node: GenericTypeSyntax): TypeReference {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeReference = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var underlying = this.visitType(node.name);\n                var typeArguments = node.typeArgumentList.accept(this);\n\n                if (underlying.nodeType === NodeType.TypeRef) {\n                    underlying = (<TypeReference>underlying).term;\n                }\n\n                var genericType = new GenericType(underlying, typeArguments);\n                this.setSpan(genericType, start, node);\n\n                genericType.setFlags(genericType.getFlags() | ASTFlags.TypeReference);\n\n                result = new TypeReference(genericType, 0);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitTypeAnnotation(node: TypeAnnotationSyntax): AST {\n            this.assertElementAtPosition(node);\n\n            this.movePast(node.colonToken);\n            return this.visitType(node.type);\n        }\n\n        private visitBlock(node: BlockSyntax): Block {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: Block = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var statements = this.convertBlock(node);\n                result = new Block(statements, /*isStatementBlock:*/ true);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitParameter(node: ParameterSyntax): ArgDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ArgDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.identifier);\n                var identifier = this.identifierFromToken(node.identifier, !!node.questionToken, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                this.movePast(node.questionToken);\n                var typeExpr = node.typeAnnotation ? node.typeAnnotation.accept(this) : null;\n                var init = node.equalsValueClause ? node.equalsValueClause.accept(this) : null;\n\n                result = new ArgDecl(identifier);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.isOptional = !!node.questionToken;\n                result.init = init;\n                result.typeExpr = typeExpr;\n\n                if (node.publicOrPrivateKeyword) {\n                    result.setVarFlags(result.getVarFlags() | VariableFlags.Property);\n\n                    if (node.publicOrPrivateKeyword.kind() === SyntaxKind.PublicKeyword) {\n                        result.setVarFlags(result.getVarFlags() | VariableFlags.Public);\n                    }\n                    else {\n                        result.setVarFlags(result.getVarFlags() | VariableFlags.Private);\n                    }\n                }\n\n                if (node.equalsValueClause || node.dotDotDotToken) {\n                    result.setFlags(result.getFlags() | ASTFlags.OptionalName);\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitMemberAccessExpression(node: MemberAccessExpressionSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var expression: AST = node.expression.accept(this);\n                this.movePast(node.dotToken);\n                var name = this.identifierFromToken(node.name, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.name);\n\n                result = new BinaryExpression(NodeType.Dot, expression, name);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var operand = node.operand.accept(this);\n                this.movePast(node.operatorToken);\n\n                result = new UnaryExpression(node.kind() === SyntaxKind.PostIncrementExpression ? NodeType.IncPost : NodeType.DecPost, operand);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitElementAccessExpression(node: ElementAccessExpressionSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var expression = node.expression.accept(this);\n                this.movePast(node.openBracketToken);\n                var argumentExpression = node.argumentExpression.accept(this);\n                this.movePast(node.closeBracketToken);\n\n                result = new BinaryExpression(NodeType.Index, expression, argumentExpression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private convertArgumentListArguments(node: ArgumentListSyntax): ASTList {\n            if (node === null) {\n                return null;\n            }\n\n            this.movePast(node.openParenToken);\n            var result = this.visitSeparatedSyntaxList(node.arguments);\n            this.movePast(node.closeParenToken);\n            return result;\n        }\n\n        private visitInvocationExpression(node: InvocationExpressionSyntax): CallExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: CallExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var expression = node.expression.accept(this);\n                var typeArguments = node.argumentList.typeArgumentList !== null\n                    ? node.argumentList.typeArgumentList.accept(this)\n                    : null;\n                var argumentList = this.convertArgumentListArguments(node.argumentList);\n\n                result = new CallExpression(NodeType.Call, expression, typeArguments, argumentList);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitArgumentList(node: ArgumentListSyntax): ASTList {\n            // Processing argument lists should be handled from inside visitInvocationExpression or \n            // visitObjectCreationExpression.\n            throw Errors.invalidOperation();\n        }\n\n        private getBinaryExpressionNodeType(node: BinaryExpressionSyntax): NodeType {\n            switch (node.kind()) {\n                case SyntaxKind.CommaExpression: return NodeType.Comma;\n                case SyntaxKind.AssignmentExpression: return NodeType.Asg;\n                case SyntaxKind.AddAssignmentExpression: return NodeType.AsgAdd;\n                case SyntaxKind.SubtractAssignmentExpression: return NodeType.AsgSub;\n                case SyntaxKind.MultiplyAssignmentExpression: return NodeType.AsgMul;\n                case SyntaxKind.DivideAssignmentExpression: return NodeType.AsgDiv;\n                case SyntaxKind.ModuloAssignmentExpression: return NodeType.AsgMod;\n                case SyntaxKind.AndAssignmentExpression: return NodeType.AsgAnd;\n                case SyntaxKind.ExclusiveOrAssignmentExpression: return NodeType.AsgXor;\n                case SyntaxKind.OrAssignmentExpression: return NodeType.AsgOr;\n                case SyntaxKind.LeftShiftAssignmentExpression: return NodeType.AsgLsh;\n                case SyntaxKind.SignedRightShiftAssignmentExpression: return NodeType.AsgRsh;\n                case SyntaxKind.UnsignedRightShiftAssignmentExpression: return NodeType.AsgRs2;\n                case SyntaxKind.LogicalOrExpression: return NodeType.LogOr;\n                case SyntaxKind.LogicalAndExpression: return NodeType.LogAnd;\n                case SyntaxKind.BitwiseOrExpression: return NodeType.Or;\n                case SyntaxKind.BitwiseExclusiveOrExpression: return NodeType.Xor;\n                case SyntaxKind.BitwiseAndExpression: return NodeType.And;\n                case SyntaxKind.EqualsWithTypeConversionExpression: return NodeType.Eq;\n                case SyntaxKind.NotEqualsWithTypeConversionExpression: return NodeType.Ne;\n                case SyntaxKind.EqualsExpression: return NodeType.Eqv;\n                case SyntaxKind.NotEqualsExpression: return NodeType.NEqv;\n                case SyntaxKind.LessThanExpression: return NodeType.Lt;\n                case SyntaxKind.GreaterThanExpression: return NodeType.Gt;\n                case SyntaxKind.LessThanOrEqualExpression: return NodeType.Le;\n                case SyntaxKind.GreaterThanOrEqualExpression: return NodeType.Ge;\n                case SyntaxKind.InstanceOfExpression: return NodeType.InstOf;\n                case SyntaxKind.InExpression: return NodeType.In;\n                case SyntaxKind.LeftShiftExpression: return NodeType.Lsh;\n                case SyntaxKind.SignedRightShiftExpression: return NodeType.Rsh;\n                case SyntaxKind.UnsignedRightShiftExpression: return NodeType.Rs2;\n                case SyntaxKind.MultiplyExpression: return NodeType.Mul;\n                case SyntaxKind.DivideExpression: return NodeType.Div;\n                case SyntaxKind.ModuloExpression: return NodeType.Mod;\n                case SyntaxKind.AddExpression: return NodeType.Add;\n                case SyntaxKind.SubtractExpression: return NodeType.Sub;\n            }\n\n            throw Errors.invalidOperation();\n        }\n\n        private visitBinaryExpression(node: BinaryExpressionSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var nodeType = this.getBinaryExpressionNodeType(node);\n                var left = node.left.accept(this);\n                this.movePast(node.operatorToken);\n                var right = node.right.accept(this);\n\n                result = new BinaryExpression(nodeType, left, right);\n\n                if (right.nodeType === NodeType.FuncDecl) {\n                    var id = left.nodeType === NodeType.Dot ? (<BinaryExpression>left).operand2 : left;\n                    var idHint: string = id.nodeType === NodeType.Name ? id.actualText : null;\n\n                    var funcDecl = <FuncDecl>right;\n                    funcDecl.hint = idHint;\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitConditionalExpression(node: ConditionalExpressionSyntax): ConditionalExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ConditionalExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var condition = node.condition.accept(this);\n                this.movePast(node.questionToken);\n                var whenTrue = node.whenTrue.accept(this);\n                this.movePast(node.colonToken);\n                var whenFalse = node.whenFalse.accept(this)\n\n                result = new ConditionalExpression(condition, whenTrue, whenFalse);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitConstructSignature(node: ConstructSignatureSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FuncDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                this.movePast(node.newKeyword);\n                var typeParameters = node.callSignature.typeParameterList === null ? null : node.callSignature.typeParameterList.accept(this);\n                var parameters = node.callSignature.parameterList.accept(this);\n                var returnType = node.callSignature.typeAnnotation ? node.callSignature.typeAnnotation.accept(this) : null;\n\n                result = new FuncDecl(null, null, /*isConstructor:*/ false, typeParameters, parameters, NodeType.FuncDecl);\n\n                result.preComments = preComments;\n                result.returnTypeAnnotation = returnType;\n\n                result.hint = \"_construct\";\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.ConstructMember);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Method);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n                result.variableArgList = this.hasDotDotDotParameter(node.callSignature.parameterList.parameters);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitMethodSignature(node: MethodSignatureSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FuncDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                var name = this.identifierFromToken(node.propertyName, !!node.questionToken, /*useValueText:*/ true);\n                this.movePast(node.propertyName);\n                this.movePast(node.questionToken);\n\n                var typeParameters = node.callSignature.typeParameterList ? node.callSignature.typeParameterList.accept(this) : null;\n                var parameters = node.callSignature.parameterList.accept(this);\n                var returnType = node.callSignature.typeAnnotation ? node.callSignature.typeAnnotation.accept(this) : null;\n\n                result = new FuncDecl(name, null, false, typeParameters, parameters, NodeType.FuncDecl);\n\n                result.preComments = preComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.callSignature.parameterList.parameters);\n                result.returnTypeAnnotation = returnType;\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Method);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitIndexSignature(node: IndexSignatureSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FuncDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                this.movePast(node.openBracketToken);\n\n                var parameter = node.parameter.accept(this);\n\n                this.movePast(node.closeBracketToken);\n                var returnType = node.typeAnnotation ? node.typeAnnotation.accept(this) : null;\n\n                var name = new Identifier(\"__item\");\n                this.setSpanExplicit(name, start, start);   // 0 length name.\n\n                var parameters = new ASTList();\n                parameters.append(parameter);\n\n                result = new FuncDecl(name, null, /*isConstructor:*/ false, null, parameters, NodeType.FuncDecl);\n\n                result.preComments = preComments;\n                result.variableArgList = false;\n                result.returnTypeAnnotation = returnType;\n\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.IndexerMember);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Method);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitPropertySignature(node: PropertySignatureSyntax): VarDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: VarDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                var name = this.identifierFromToken(node.propertyName, !!node.questionToken, /*useValueText:*/ true);\n                this.movePast(node.propertyName);\n                this.movePast(node.questionToken);\n                var typeExpr = node.typeAnnotation ? node.typeAnnotation.accept(this) : null;\n\n                result = new VarDecl(name);\n\n                result.preComments = preComments;\n                result.typeExpr = typeExpr;\n                result.setVarFlags(result.getVarFlags() | VariableFlags.Property);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitParameterList(node: ParameterListSyntax): ASTList {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n\n            var openParenToken = node.openParenToken;\n            this.previousTokenTrailingComments = this.convertTokenTrailingComments(\n                openParenToken, start + openParenToken.leadingTriviaWidth() + openParenToken.width());\n\n            this.movePast(node.openParenToken);\n            var result = this.visitSeparatedSyntaxList(node.parameters);\n            this.movePast(node.closeParenToken);\n\n            return result;\n        }\n\n        private visitCallSignature(node: CallSignatureSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FuncDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                var typeParameters = node.typeParameterList === null ? null : node.typeParameterList.accept(this);\n                var parameters = node.parameterList.accept(this);\n                var returnType = node.typeAnnotation ? node.typeAnnotation.accept(this) : null;\n\n                result = new FuncDecl(null, null, /*isConstructor:*/ false, typeParameters, parameters, NodeType.FuncDecl);\n\n                result.preComments = preComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.parameterList.parameters);\n                result.returnTypeAnnotation = returnType;\n\n                result.hint = \"_call\";\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.CallMember);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Method);\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitTypeParameterList(node: TypeParameterListSyntax): ASTList {\n            this.assertElementAtPosition(node);\n\n            this.movePast(node.lessThanToken);\n            var result = this.visitSeparatedSyntaxList(node.typeParameters);\n            this.movePast(node.greaterThanToken);\n\n            return result;\n        }\n\n        private visitTypeParameter(node: TypeParameterSyntax): TypeParameter {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TypeParameter = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var identifier = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                var constraint = node.constraint ? node.constraint.accept(this) : null;\n\n                result = new TypeParameter(identifier, constraint);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitConstraint(node: ConstraintSyntax): any {\n            this.assertElementAtPosition(node);\n\n            this.movePast(node.extendsKeyword);\n            return this.visitType(node.type);\n        }\n\n        private visitIfStatement(node: IfStatementSyntax): IfStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: IfStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.moveTo(node, node.condition);\n                var condition = node.condition.accept(this);\n                this.movePast(node.closeParenToken);\n                var thenBod = node.statement.accept(this);\n                var elseBod = node.elseClause ? node.elseClause.accept(this) : null;\n\n                result = new IfStatement(condition, thenBod, elseBod);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitElseClause(node: ElseClauseSyntax): Statement {\n            this.assertElementAtPosition(node);\n\n            this.movePast(node.elseKeyword);\n            return node.statement.accept(this);\n        }\n\n        private visitExpressionStatement(node: ExpressionStatementSyntax): ExpressionStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ExpressionStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                var expression = node.expression.accept(this);\n                this.movePast(node.semicolonToken);\n\n                result = new ExpressionStatement(expression);\n                result.preComments = preComments;\n                result.postComments = postComments;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitConstructorDeclaration(node: ConstructorDeclarationSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FuncDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.parameterList);\n                var parameters = node.parameterList.accept(this);\n\n                var statements = this.convertBlock(node.block);\n                if (statements) {\n                    statements.append(new EndCode());\n                }\n                this.movePast(node.semicolonToken);\n\n                result = new FuncDecl(null, statements, /*isConstructor:*/ true, null, parameters, NodeType.FuncDecl);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.parameterList.parameters);\n\n                if (node.semicolonToken) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n                }\n\n                // REVIEW: Should we have a separate flag for class constructors?  (Constructors are not methods)\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.ClassMethod);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FuncDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.propertyName);\n                var name = this.identifierFromToken(node.propertyName, /*isOptional:*/ false, /*useValueText:*/ true);\n\n                this.movePast(node.propertyName);\n\n                var typeParameters = node.callSignature.typeParameterList === null ? null : node.callSignature.typeParameterList.accept(this);\n                var parameters = node.callSignature.parameterList.accept(this);\n                var returnType = node.callSignature.typeAnnotation\n                    ? node.callSignature.typeAnnotation.accept(this)\n                    : null;\n\n                var statements = this.convertBlock(node.block);\n                if (statements) {\n                    statements.append(new EndCode());\n                }\n                this.movePast(node.semicolonToken);\n\n                result = new FuncDecl(name, statements, /*isConstructor:*/ false, typeParameters, parameters, NodeType.FuncDecl);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.callSignature.parameterList.parameters);\n                result.returnTypeAnnotation = returnType;\n\n                if (node.semicolonToken) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Signature);\n                }\n\n                if (this.containsToken(node.modifiers, SyntaxKind.PrivateKeyword)) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Private);\n                }\n                else {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Public);\n                }\n\n                if (this.containsToken(node.modifiers, SyntaxKind.StaticKeyword)) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Static);\n                }\n\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Method);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitMemberAccessorDeclaration(node: MemberAccessorDeclarationSyntax, typeAnnotation: TypeAnnotationSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FuncDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.propertyName);\n                var name = this.identifierFromToken(node.propertyName, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.propertyName);\n                var parameters = node.parameterList.accept(this);\n                var returnType = typeAnnotation ? typeAnnotation.accept(this) : null;\n\n                var statements = this.convertBlock(node.block);\n                if (statements) {\n                    statements.append(new EndCode());\n                }\n\n                result = new FuncDecl(name, statements, /*isConstructor:*/ false, null, parameters, NodeType.FuncDecl);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.parameterList.parameters);\n                result.returnTypeAnnotation = returnType;\n\n                if (this.containsToken(node.modifiers, SyntaxKind.PrivateKeyword)) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Private);\n                }\n                else {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Public);\n                }\n\n                if (this.containsToken(node.modifiers, SyntaxKind.StaticKeyword)) {\n                    result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Static);\n                }\n\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.Method);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitGetMemberAccessorDeclaration(node: GetMemberAccessorDeclarationSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var result = this.visitMemberAccessorDeclaration(node, node.typeAnnotation);\n\n            result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.GetAccessor);\n            result.hint = \"get\" + result.name.actualText;\n\n            return result;\n        }\n\n        private visitSetMemberAccessorDeclaration(node: SetMemberAccessorDeclarationSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var result = this.visitMemberAccessorDeclaration(node, null);\n\n            result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.SetAccessor);\n            result.hint = \"set\" + result.name.actualText;\n\n            return result;\n        }\n\n        private visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): VarDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: VarDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n                var postComments = this.convertNodeTrailingComments(node, start);\n\n                this.moveTo(node, node.variableDeclarator);\n                this.moveTo(node.variableDeclarator, node.variableDeclarator.identifier);\n\n                var name = this.identifierFromToken(node.variableDeclarator.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.variableDeclarator.identifier);\n                var typeExpr = node.variableDeclarator.typeAnnotation ? node.variableDeclarator.typeAnnotation.accept(this) : null;\n                var init = node.variableDeclarator.equalsValueClause ? node.variableDeclarator.equalsValueClause.accept(this) : null;\n                this.movePast(node.semicolonToken);\n\n                result = new VarDecl(name);\n\n                result.preComments = preComments;\n                result.postComments = postComments;\n                result.typeExpr = typeExpr;\n                result.init = init;\n\n                if (this.containsToken(node.modifiers, SyntaxKind.StaticKeyword)) {\n                    result.setVarFlags(result.getVarFlags() | VariableFlags.Static);\n                }\n\n                if (this.containsToken(node.modifiers, SyntaxKind.PrivateKeyword)) {\n                    result.setVarFlags(result.getVarFlags() | VariableFlags.Private);\n                }\n                else {\n                    result.setVarFlags(result.getVarFlags() | VariableFlags.Public);\n                }\n\n                result.setVarFlags(result.getVarFlags() | VariableFlags.ClassProperty);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitThrowStatement(node: ThrowStatementSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.throwKeyword);\n                var expression = node.expression.accept(this);\n                this.movePast(node.semicolonToken);\n\n                result = new UnaryExpression(NodeType.ThrowStatement, expression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitReturnStatement(node: ReturnStatementSyntax): ReturnStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ReturnStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.returnKeyword);\n                var expression = node.expression ? node.expression.accept(this) : null;\n                this.movePast(node.semicolonToken);\n\n                result = new ReturnStatement(expression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): CallExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: CallExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.newKeyword);\n                var expression = node.expression.accept(this);\n                var typeArgumentList = node.argumentList === null || node.argumentList.typeArgumentList === null ? null : node.argumentList.typeArgumentList.accept(this);\n                var argumentList = this.convertArgumentListArguments(node.argumentList);\n\n                result = new CallExpression(NodeType.New, expression, typeArgumentList, argumentList);\n\n                if (expression.nodeType === NodeType.TypeRef) {\n                    var typeRef = <TypeReference>expression;\n\n                    if (typeRef.arrayCount === 0) {\n                        var term = typeRef.term;\n                        if (term.nodeType === NodeType.Dot || term.nodeType === NodeType.Name) {\n                            expression = term;\n                        }\n                    }\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitSwitchStatement(node: SwitchStatementSyntax): SwitchStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: SwitchStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.switchKeyword);\n                this.movePast(node.openParenToken);\n                var expression = node.expression.accept(this);\n                this.movePast(node.closeParenToken);\n                var closeParenPosition = this.position;\n                this.movePast(node.openBraceToken);\n\n                result = new SwitchStatement(expression);\n\n                result.statement.minChar = start;\n                result.statement.limChar = closeParenPosition;\n\n                result.caseList = new ASTList()\n\n                for (var i = 0, n = node.switchClauses.childCount(); i < n; i++) {\n                    var switchClause = node.switchClauses.childAt(i);\n                    var translated = switchClause.accept(this);\n\n                    if (switchClause.kind() === SyntaxKind.DefaultSwitchClause) {\n                        result.defaultCase = translated;\n                    }\n\n                    result.caseList.append(translated);\n                }\n\n                this.movePast(node.closeBraceToken);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitCaseSwitchClause(node: CaseSwitchClauseSyntax): CaseClause {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: CaseClause = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.caseKeyword);\n                var expression = node.expression.accept(this);\n                this.movePast(node.colonToken);\n                var statements = this.visitSyntaxList(node.statements);\n\n                result = new CaseClause();\n\n                result.expr = expression;\n                result.body = statements;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): CaseClause {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: CaseClause = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.defaultKeyword);\n                this.movePast(node.colonToken);\n                var statements = this.visitSyntaxList(node.statements);\n\n                result = new CaseClause();\n                result.body = statements;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitBreakStatement(node: BreakStatementSyntax): Jump {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: Jump = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.breakKeyword);\n                this.movePast(node.identifier);\n                this.movePast(node.semicolonToken);\n\n                result = new Jump(NodeType.BreakStatement);\n\n                if (node.identifier !== null) {\n                    result.target = node.identifier.valueText();\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitContinueStatement(node: ContinueStatementSyntax): Jump {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: Jump = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.continueKeyword);\n                this.movePast(node.identifier);\n                this.movePast(node.semicolonToken);\n\n                result = new Jump(NodeType.ContinueStatement);\n\n                if (node.identifier !== null) {\n                    result.target = node.identifier.valueText();\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitForStatement(node: ForStatementSyntax): ForStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ForStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.forKeyword);\n                this.movePast(node.openParenToken);\n                var init = node.variableDeclaration\n                    ? node.variableDeclaration.accept(this)\n                    : node.initializer\n                        ? node.initializer.accept(this)\n                        : null;\n                this.movePast(node.firstSemicolonToken);\n                var cond = node.condition ? node.condition.accept(this) : null;\n                this.movePast(node.secondSemicolonToken);\n                var incr = node.incrementor ? node.incrementor.accept(this) : null;\n                this.movePast(node.closeParenToken);\n                var body = node.statement.accept(this);\n\n                result = new ForStatement(init, cond, incr, body);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitForInStatement(node: ForInStatementSyntax): ForInStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: ForInStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.forKeyword);\n                this.movePast(node.openParenToken);\n                var init = node.variableDeclaration ? node.variableDeclaration.accept(this) : node.left.accept(this);\n                this.movePast(node.inKeyword);\n                var expression = node.expression.accept(this);\n                this.movePast(node.closeParenToken);\n                var body = node.statement.accept(this);\n\n                result = new ForInStatement(init, expression, body);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitWhileStatement(node: WhileStatementSyntax): WhileStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: WhileStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.moveTo(node, node.condition);\n                var condition = node.condition.accept(this);\n                this.movePast(node.closeParenToken);\n                var statement = node.statement.accept(this);\n\n                result = new WhileStatement(condition, statement);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitWithStatement(node: WithStatementSyntax): WithStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: WithStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.moveTo(node, node.condition);\n                var condition = node.condition.accept(this);\n                this.movePast(node.closeParenToken);\n                var statement = node.statement.accept(this);\n\n                result = new WithStatement(condition, statement);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitCastExpression(node: CastExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.lessThanToken);\n                var castTerm = this.visitType(node.type);\n                this.movePast(node.greaterThanToken);\n                var expression = node.expression.accept(this);\n\n                result = new UnaryExpression(NodeType.CastExpression, expression);\n                result.castTerm = castTerm;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.openBraceToken);\n                var propertyAssignments = this.visitSeparatedSyntaxList(node.propertyAssignments);\n                this.movePast(node.closeBraceToken);\n\n                result = new UnaryExpression(NodeType.ObjectLit, propertyAssignments);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                var left = node.propertyName.accept(this);\n\n                this.previousTokenTrailingComments = this.convertTokenTrailingComments(\n                    node.colonToken, this.position + node.colonToken.leadingTriviaWidth() + node.colonToken.width());\n\n                this.movePast(node.colonToken);\n                var right = node.expression.accept(this);\n\n                result = new BinaryExpression(NodeType.Member, left, right);\n                result.preComments = preComments;\n\n                if (right.nodeType === NodeType.FuncDecl) {\n                    var funcDecl = <FuncDecl>right;\n                    funcDecl.hint = left.text;\n                }\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitGetAccessorPropertyAssignment(node: GetAccessorPropertyAssignmentSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.moveTo(node, node.propertyName);\n                var name = this.identifierFromToken(node.propertyName, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.propertyName);\n                this.movePast(node.openParenToken);\n                this.movePast(node.closeParenToken);\n                var returnType = node.typeAnnotation\n                    ? node.typeAnnotation.accept(this)\n                    : null;\n\n                var statements = this.convertBlock(node.block);\n                statements.append(new EndCode());\n\n                var funcDecl = new FuncDecl(name, statements, /*isConstructor:*/ false, null, new ASTList(), NodeType.FuncDecl);\n                this.setSpan(funcDecl, start, node);\n\n                funcDecl.setFunctionFlags(funcDecl.getFunctionFlags() | FunctionFlags.GetAccessor);\n                funcDecl.setFunctionFlags(funcDecl.getFunctionFlags() | FunctionFlags.IsFunctionExpression);\n                funcDecl.hint = \"get\" + node.propertyName.valueText();\n                funcDecl.returnTypeAnnotation = returnType;\n\n                result = new BinaryExpression(NodeType.Member, name, funcDecl);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitSetAccessorPropertyAssignment(node: SetAccessorPropertyAssignmentSyntax): BinaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: BinaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.moveTo(node, node.propertyName);\n                var name = this.identifierFromToken(node.propertyName, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.propertyName);\n                this.movePast(node.openParenToken);\n                var parameter = node.parameter.accept(this);\n                this.movePast(node.closeParenToken);\n\n                var parameters = new ASTList();\n                parameters.append(parameter);\n\n                var statements = this.convertBlock(node.block);\n                statements.append(new EndCode());\n\n                var funcDecl = new FuncDecl(name, statements, /*isConstructor:*/ false, null, parameters, NodeType.FuncDecl);\n                this.setSpan(funcDecl, start, node);\n\n                funcDecl.setFunctionFlags(funcDecl.getFunctionFlags() | FunctionFlags.SetAccessor);\n                funcDecl.setFunctionFlags(funcDecl.getFunctionFlags() | FunctionFlags.IsFunctionExpression);\n                funcDecl.hint = \"set\" + node.propertyName.valueText();\n\n                result = new BinaryExpression(NodeType.Member, name, funcDecl);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitFunctionExpression(node: FunctionExpressionSyntax): FuncDecl {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: FuncDecl = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var preComments = this.convertNodeLeadingComments(node, start);\n\n                this.movePast(node.functionKeyword);\n                var name = node.identifier === null ? null : this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                var typeParameters = node.callSignature.typeParameterList === null ? null : node.callSignature.typeParameterList.accept(this);\n                var parameters = node.callSignature.parameterList.accept(this);\n                var returnType = node.callSignature.typeAnnotation\n                    ? node.callSignature.typeAnnotation.accept(this)\n                    : null;\n\n                var bod = this.convertBlock(node.block);\n                if (bod) {\n                    bod.append(new EndCode());\n                }\n\n                if (node.block) {\n                    if (this.hasUseStrictDirective(node.block.statements)) {\n                        bod.setFlags(bod.getFlags() | ASTFlags.StrictMode);\n                    }\n                }\n\n                result = new FuncDecl(name, bod, false, typeParameters, parameters, NodeType.FuncDecl);\n\n                result.preComments = preComments;\n                result.variableArgList = this.hasDotDotDotParameter(node.callSignature.parameterList.parameters);\n                result.returnTypeAnnotation = returnType;\n                result.setFunctionFlags(result.getFunctionFlags() | FunctionFlags.IsFunctionExpression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitEmptyStatement(node: EmptyStatementSyntax): AST {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: AST = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.semicolonToken);\n\n                result = new AST(NodeType.Empty);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitTryStatement(node: TryStatementSyntax): TryStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: TryStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.tryKeyword);\n                var tryBody = node.block.accept(this);\n\n                // var tryPart: AST = new Try(block);\n                // this.setSpanExplicit(tryPart, start, this.position);\n\n                var catchClause: CatchClause = null;\n                if (node.catchClause !== null) {\n                    catchClause = node.catchClause.accept(this);\n                }\n\n                var finallyBody: AST = null;\n                if (node.finallyClause !== null) {\n                    finallyBody = node.finallyClause.accept(this);\n                }\n\n                result = new TryStatement(tryBody, catchClause, finallyBody);\n            }\n\n            Debug.assert(result !== null);\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitCatchClause(node: CatchClauseSyntax): CatchClause {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: CatchClause = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.catchKeyword);\n                this.movePast(node.openParenToken);\n                var identifier = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                var typeExpr = node.typeAnnotation ? node.typeAnnotation.accept(this) : null;\n                this.movePast(node.closeParenToken);\n                var block = node.block.accept(this);\n\n                var varDecl = new VarDecl(identifier);\n                this.setSpanExplicit(varDecl, identifier.minChar, identifier.limChar);\n\n                varDecl.typeExpr = typeExpr;\n\n                result = new CatchClause(varDecl, block);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitFinallyClause(node: FinallyClauseSyntax): AST {\n            this.movePast(node.finallyKeyword);\n            return node.block.accept(this);\n        }\n\n        private visitLabeledStatement(node: LabeledStatementSyntax): LabeledStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: LabeledStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                var identifier = this.identifierFromToken(node.identifier, /*isOptional:*/ false, /*useValueText:*/ true);\n                this.movePast(node.identifier);\n                this.movePast(node.colonToken);\n                var statement = node.statement.accept(this);\n\n                result = new LabeledStatement(identifier, statement);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitDoStatement(node: DoStatementSyntax): DoWhileStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: DoWhileStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.doKeyword);\n                var statement = node.statement.accept(this);\n                var whileSpan = new ASTSpan();\n                this.setSpan1(whileSpan, this.position, node.whileKeyword);\n\n                this.movePast(node.whileKeyword);\n                this.movePast(node.openParenToken);\n                var condition = node.condition.accept(this);\n                this.movePast(node.closeParenToken);\n                this.movePast(node.semicolonToken);\n\n                result = new DoWhileStatement(statement, condition);\n                result.whileSpan = whileSpan;\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitTypeOfExpression(node: TypeOfExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.typeOfKeyword);\n                var expression = node.expression.accept(this);\n\n                result = new UnaryExpression(NodeType.Typeof, expression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitDeleteExpression(node: DeleteExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.deleteKeyword);\n                var expression = node.expression.accept(this);\n\n                result = new UnaryExpression(NodeType.Delete, expression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitVoidExpression(node: VoidExpressionSyntax): UnaryExpression {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: UnaryExpression = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.voidKeyword);\n                var expression = node.expression.accept(this);\n\n                result = new UnaryExpression(NodeType.Void, expression);\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n\n        private visitDebuggerStatement(node: DebuggerStatementSyntax): DebuggerStatement {\n            this.assertElementAtPosition(node);\n\n            var start = this.position;\n            var result: DebuggerStatement = this.getAST(node);\n            if (result) {\n                this.movePast(node);\n            }\n            else {\n                this.movePast(node.debuggerKeyword);\n                this.movePast(node.semicolonToken);\n\n                result = new DebuggerStatement();\n            }\n\n            this.setAST(node, result);\n            this.setSpan(result, start, node);\n            return result;\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n \n///<reference path=\'diagnostics.ts\' />\n///<reference path=\'flags.ts\' />\n///<reference path=\'nodeTypes.ts\' />\n///<reference path=\'hashTable.ts\' />\n///<reference path=\'ast.ts\' />\n///<reference path=\'astWalker.ts\' />\n///<reference path=\'astWalkerCallback.ts\' />\n///<reference path=\'astPath.ts\' />\n///<reference path=\'binder.ts\' />\n///<reference path=\'base64.ts\' />\n///<reference path=\'sourceMapping.ts\' />\n///<reference path=\'emitter.ts\' />\n///<reference path=\'errorReporter.ts\' />\n///<reference path=\'printContext.ts\' />\n///<reference path=\'scanner.ts\' />\n///<reference path=\'scopeAssignment.ts\' />\n///<reference path=\'scopeWalk.ts\' />\n///<reference path=\'signatures.ts\' />\n///<reference path=\'symbols.ts\' />\n///<reference path=\'symbolScope.ts\' />\n///<reference path=\'tokens.ts\' />\n///<reference path=\'typeChecker.ts\' />\n///<reference path=\'typeCollection.ts\' />\n///<reference path=\'typeFlow.ts\' />\n///<reference path=\'types.ts\' />\n///<reference path=\'pathUtils.ts\' />\n///<reference path=\'referenceResolution.ts\' />\n///<reference path=\'precompile.ts\' />\n///<reference path=\'declarationEmitter.ts\' />\n///<reference path=\'Syntax\\ISyntaxNodeOrToken.ts\' />\n///<reference path=\'Syntax\\Parser.ts\' />\n///<reference path=\'Text\\TextFactory.ts\' />\n///<reference path=\'typecheck\\dataMap.ts\' />\n///<reference path=\'typecheck\\pullFlags.ts\' />\n///<reference path=\'typecheck\\pullDecls.ts\' />\n///<reference path=\'typecheck\\pullSymbols.ts\' />\n///<reference path=\'typecheck\\pullSymbolBindingContext.ts\' />\n///<reference path=\'typecheck\\pullTypeResolutionContext.ts\' />\n///<reference path=\'typecheck\\pullTypeResolution.ts\' />\n///<reference path=\'typecheck\\pullTypeChecker.ts\' />\n///<reference path=\'typecheck\\pullDeclDiffer.ts\' />\n///<reference path=\'typecheck\\pullSemanticInfo.ts\' />\n///<reference path=\'typecheck\\pullDeclCollection.ts\' />\n///<reference path=\'typecheck\\pullSymbolBinder.ts\' />\n///<reference path=\'typecheck\\pullSymbolGraph.ts\' />\n///<reference path=\'typecheck\\pullErrors.ts\' />\n///<reference path=\'typecheck\\pullHelpers.ts\' />\n///<reference path=\'SyntaxTreeToAstVisitor.ts\' />\n///<reference path=\'Core\\Timer.ts\' />\n\nmodule TypeScript {\n\n    declare var IO;\n\n    export interface EmitterIOHost {\n        // function that can even create a folder structure if needed\n        createFile(path: string, useUTF8?: bool): ITextWriter;\n\n        // function to check if file exists on the disk\n        fileExists(path: string): bool;\n\n        // Function to check if the directory exists on the disk\n        directoryExists(path: string): bool;\n\n        // Resolves the path\n        resolvePath(path: string): string;\n    }\n\n    export interface PullTypeInfoAtPositionInfo {\n        symbol: PullSymbol;\n        ast: AST;\n        enclosingScopeSymbol: PullSymbol;\n        candidateSignature: PullSignatureSymbol;\n        callSignatures: PullSignatureSymbol[];\n        isConstructorCall: bool;\n    }\n\n    export interface PullVisibleSymbolsInfo {\n        symbols: PullSymbol[];\n        enclosingScopeSymbol: PullSymbol;\n    }\n\n    export class TypeScriptCompiler {\n        public pullTypeChecker: PullTypeChecker = null;\n        public semanticInfoChain: SemanticInfoChain = null;\n\n        public emitOptions: EmitOptions;\n\n        public fileNameToScript = new TypeScript.StringHashTable();\n        public fileNameToLocationInfo = new TypeScript.StringHashTable();\n        public fileNameToSyntaxTree = new TypeScript.StringHashTable();\n\n        constructor(public logger: ILogger = new NullLogger(),\n                    public settings: CompilationSettings = new CompilationSettings(),\n                    public diagnosticMessages: IDiagnosticMessages = null) {\n            this.emitOptions = new EmitOptions(this.settings);\n\n            if (this.diagnosticMessages) {\n                TypeScript.diagnosticMessages = this.diagnosticMessages\n            }\n        }\n\n        public timeFunction(funcDescription: string, func: () => any): any {\n            return TypeScript.timeFunction(this.logger, funcDescription, func);\n        }\n\n        public addSourceUnit(fileName: string, sourceText: IScriptSnapshot, referencedFiles: IFileReference[] = []): Script {\n            return this.timeFunction(\"addSourceUnit(\" + fileName + \")\", () => {\n                var syntaxTree = Parser.parse(fileName, SimpleText.fromScriptSnapshot(sourceText), TypeScript.isDTSFile(fileName), LanguageVersion.EcmaScript5);\n                var script = SyntaxTreeToAstVisitor.visit(syntaxTree, fileName, this.emitOptions.compilationSettings);\n                script.referencedFiles = referencedFiles;\n\n                this.fileNameToSyntaxTree.addOrUpdate(fileName, syntaxTree);\n                this.fileNameToLocationInfo.addOrUpdate(fileName, script.locationInfo);\n                this.fileNameToScript.addOrUpdate(fileName, script);\n\n                return script;\n            });\n        }\n\n        public updateSourceUnit(fileName: string, scriptSnapshot: IScriptSnapshot, textChangeRange: TextChangeRange): void {\n            this.timeFunction(\"pullUpdateUnit(\" + fileName + \")\", () => {\n                var oldScript = <Script>this.fileNameToScript.lookup(fileName);\n                var oldSyntaxTree = this.fileNameToSyntaxTree.lookup(fileName);\n\n                var text = SimpleText.fromScriptSnapshot(scriptSnapshot);\n\n                var syntaxTree = textChangeRange === null\n                    ? TypeScript.Parser.parse(fileName, text, TypeScript.isDTSFile(fileName))\n                    : TypeScript.Parser.incrementalParse(oldSyntaxTree, textChangeRange, text);\n\n                var newScript = SyntaxTreeToAstVisitor.visit(syntaxTree, fileName, this.emitOptions.compilationSettings);\n\n                this.fileNameToSyntaxTree.addOrUpdate(fileName, syntaxTree);\n                this.fileNameToScript.addOrUpdate(fileName, newScript);\n                this.fileNameToLocationInfo.addOrUpdate(fileName, newScript.locationInfo);\n\n                this.pullUpdateScript(oldScript, newScript);\n            });\n        }\n\n        private isDynamicModuleCompilation() {\n            var fileNames = this.fileNameToScript.getAllKeys();\n            for (var i = 0, len = fileNames.length; i < len; i++) {\n                var script = <Script>this.fileNameToScript.lookup(fileNames[i]);\n                if (!script.isDeclareFile && script.topLevelMod != null) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private updateCommonDirectoryPath(): IDiagnostic {\n            var commonComponents: string[] = [];\n            var commonComponentsLength = -1;\n\n            var fileNames = this.fileNameToScript.getAllKeys();\n            for (var i = 0, len = fileNames.length; i < len; i++) {\n                var script = <Script>this.fileNameToScript.lookup(fileNames[i]);\n\n                if (script.emitRequired(this.emitOptions)) {\n                    var fileName = script.locationInfo.fileName;\n                    var fileComponents = filePathComponents(fileName);\n                    if (commonComponentsLength === -1) {\n                        // First time at finding common path\n                        // So common path = directory of file\n                        commonComponents = fileComponents;\n                        commonComponentsLength = commonComponents.length;\n                    } else {\n                        var updatedPath = false;\n                        for (var j = 0; j < commonComponentsLength && j < fileComponents.length; j++) {\n                            if (commonComponents[j] != fileComponents[j]) {\n                                // The new components = 0 ... j -1\n                                commonComponentsLength = j;\n                                updatedPath = true;\n\n                                if (j === 0) {\n                                    // Its error to not have common path\n                                    return new Diagnostic(0, 0, null, \"Cannot find the common subdirectory path for the input files\");\n                                }\n\n                                break;\n                            }\n                        }\n\n                        // If the fileComponent path completely matched and less than already found update the length\n                        if (!updatedPath && fileComponents.length < commonComponentsLength) {\n                            commonComponentsLength = fileComponents.length;\n                        }\n                    }\n                }\n            }\n\n            this.emitOptions.commonDirectoryPath = commonComponents.slice(0, commonComponentsLength).join(\"/\") + \"/\";\n            if (this.emitOptions.compilationSettings.outputOption.charAt(this.emitOptions.compilationSettings.outputOption.length - 1) != \"/\") {\n                this.emitOptions.compilationSettings.outputOption += \"/\";\n            }\n\n            return null;\n        }\n\n        public parseEmitOption(ioHost: EmitterIOHost): IDiagnostic {\n            this.emitOptions.ioHost = ioHost;\n            if (this.emitOptions.compilationSettings.outputOption === \"\") {\n                this.emitOptions.outputMany = true;\n                this.emitOptions.commonDirectoryPath = \"\";\n                return null;\n            }\n\n            this.emitOptions.compilationSettings.outputOption = switchToForwardSlashes(this.emitOptions.ioHost.resolvePath(this.emitOptions.compilationSettings.outputOption));\n\n            // Determine if output options is directory or file\n            if (this.emitOptions.ioHost.directoryExists(this.emitOptions.compilationSettings.outputOption)) {\n                // Existing directory\n                this.emitOptions.outputMany = true;\n            } else if (this.emitOptions.ioHost.fileExists(this.emitOptions.compilationSettings.outputOption)) {\n                // Existing file\n                this.emitOptions.outputMany = false;\n            }\n            else {\n                // New File/directory\n                this.emitOptions.outputMany = !isJSFile(this.emitOptions.compilationSettings.outputOption);\n            }\n\n            // Verify if options are correct\n            if (this.isDynamicModuleCompilation() && !this.emitOptions.outputMany) {\n                return new Diagnostic(0, 0, null, \"Cannot compile dynamic modules when emitting into single file\");\n            }\n\n            // Parse the directory structure\n            if (this.emitOptions.outputMany) {\n                return this.updateCommonDirectoryPath();\n            }\n\n            return null;\n        }\n\n        public getScripts(): Script[] {\n            var result: TypeScript.Script[] = [];\n            var fileNames = this.fileNameToScript.getAllKeys();\n\n            for (var i = 0; i < fileNames.length; i++) {\n                result.push(this.fileNameToScript.lookup(fileNames[i]));\n            }\n\n            return result;\n        }\n\n        private useUTF8ForFile(script: Script) {\n            if (this.emitOptions.outputMany) {\n                return this.outputScriptToUTF8(script);\n            } else {\n                return this.outputScriptsToUTF8(this.getScripts());\n            }\n        }\n\n        static mapToDTSFileName(fileName: string, wholeFileNameReplaced: bool) {\n            return getDeclareFilePath(fileName);\n        }\n\n        private canEmitDeclarations(script?: Script) {\n            if (!this.settings.generateDeclarationFiles) {\n                return false;\n            }\n\n            // If its already a declare file or is resident or does not contain body \n            if (!!script && (script.isDeclareFile || script.bod === null)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        // Caller is responsible for closing emitter.\n        private emitDeclarationsUnit(script: Script, declarationEmitter?: DeclarationEmitter): DeclarationEmitter {\n            if (this.canEmitDeclarations(script)) {\n                if (!declarationEmitter) {\n                    var declareFileName = this.emitOptions.mapOutputFileName(script.locationInfo.fileName, TypeScriptCompiler.mapToDTSFileName);\n                    declarationEmitter = new DeclarationEmitter(\n                        declareFileName, this.useUTF8ForFile(script), this.semanticInfoChain, this.emitOptions);\n                }\n\n                declarationEmitter.emitDeclarations(script);\n            }\n\n            return declarationEmitter;\n        }\n\n        // Will not throw exceptions.\n        public emitDeclarations(): IDiagnostic[] {\n            if (this.canEmitDeclarations()) {\n                var sharedEmitter: DeclarationEmitter = null;\n                var fileNames = this.fileNameToScript.getAllKeys();\n\n                for (var i = 0, n = fileNames.length; i < n; i++) {\n                    var fileName = fileNames[i];\n\n                    try {\n                        var script = <Script>this.fileNameToScript.lookup(fileNames[i]);\n\n                        if (this.emitOptions.outputMany) {\n                            var singleEmitter = this.emitDeclarationsUnit(script);\n                            if (singleEmitter) {\n                                singleEmitter.close();\n                            }\n                        }\n                        else {\n                            // Create or reuse file\n                            sharedEmitter = this.emitDeclarationsUnit(script, sharedEmitter);\n                        }\n                    }\n                    catch (ex1) {\n                        return Emitter.handleEmitterError(fileName, ex1);\n                    }\n                }\n\n                if (sharedEmitter) {\n                    try {\n                        sharedEmitter.close();\n                    }\n                    catch (ex2) {\n                        return Emitter.handleEmitterError(sharedEmitter.locationInfo.fileName, ex2);\n                    }\n                }\n            }\n\n            return [];\n        }\n\n        static mapToFileNameExtension(extension: string, fileName: string, wholeFileNameReplaced: bool) {\n            if (wholeFileNameReplaced) {\n                // The complete output is redirected in this file so do not change extension\n                return fileName;\n            } else {\n                // Change the extension of the file\n                var splitFname = fileName.split(\".\");\n                splitFname.pop();\n                return splitFname.join(\".\") + extension;\n            }\n        }\n\n        static mapToJSFileName(fileName: string, wholeFileNameReplaced: bool) {\n            return TypeScriptCompiler.mapToFileNameExtension(\".js\", fileName, wholeFileNameReplaced);\n        }\n\n        // Caller is responsible for closing the returned emitter.\n        // May throw exceptions.\n        private emitUnit(script: Script,\n                         inputOutputMapper?: (inputName: string, outputName: string) => void,\n                         emitter?: Emitter): Emitter {\n\n            if (script.emitRequired(this.emitOptions)) {\n                var typeScriptFileName = script.locationInfo.fileName;\n                if (!emitter) {\n                    var javaScriptFileName = this.emitOptions.mapOutputFileName(typeScriptFileName, TypeScriptCompiler.mapToJSFileName);\n                    var outFile = this.createFile(javaScriptFileName, this.useUTF8ForFile(script));\n\n                    emitter = new Emitter(javaScriptFileName, outFile, this.emitOptions, this.semanticInfoChain);\n\n                    if (this.settings.mapSourceFiles) {\n                        var sourceMapFileName = javaScriptFileName + SourceMapper.MapFileExtension;\n                        emitter.setSourceMappings(new SourceMapper(typeScriptFileName, javaScriptFileName, sourceMapFileName, outFile,\n                            this.createFile(sourceMapFileName, /*isUTF8:*/ false), this.settings.emitFullSourceMapPath));\n                    }\n\n                    if (inputOutputMapper) {\n                        // Remember the name of the outfile for this source file\n                        inputOutputMapper(typeScriptFileName, javaScriptFileName);\n                    }\n                }\n                else if (this.settings.mapSourceFiles) {\n                    emitter.setSourceMappings(new SourceMapper(typeScriptFileName, emitter.emittingFileName, emitter.sourceMapper.sourceMapFileName, emitter.outfile,\n                        emitter.sourceMapper.sourceMapOut, this.settings.emitFullSourceMapPath));\n                }\n\n                // Set location info\n                emitter.setUnit(script.locationInfo);\n                emitter.emitJavascript(script, TokenID.Comma, false);\n            }\n\n            return emitter;\n        }\n\n        // Will not throw exceptions.\n        public emit(ioHost: EmitterIOHost, inputOutputMapper?: (inputFile: string, outputFile: string) => void ): IDiagnostic[] {\n            var optionsDiagnostic = this.parseEmitOption(ioHost);\n            if (optionsDiagnostic) {\n                return [optionsDiagnostic];\n            }\n\n            var startEmitTime = (new Date()).getTime();\n\n            var fileNames = this.fileNameToScript.getAllKeys();\n            var sharedEmitter: Emitter = null;\n\n            // Iterate through the files, as long as we don\'t get an error.\n            for (var i = 0, n = fileNames.length; i < n; i++) {\n                var fileName = fileNames[i];\n\n                var script = <Script>this.fileNameToScript.lookup(fileName);\n\n                try {\n                    if (this.emitOptions.outputMany) {\n                        // We\'re outputting to mulitple files.  We don\'t want to reuse an emitter in that case.\n                        var singleEmitter = this.emitUnit(script, inputOutputMapper);\n\n                        // Close the emitter after each emitted file.\n                        if (singleEmitter) {\n                            singleEmitter.emitSourceMapsAndClose();\n                        }\n                    }\n                    else {\n                        // We\'re not outputting to multiple files.  Keep using the same emitter and don\'t\n                        // close until below.\n                        sharedEmitter = this.emitUnit(script, inputOutputMapper, sharedEmitter);\n                    }\n                }\n                catch (ex1) {\n                    return Emitter.handleEmitterError(fileName, ex1);\n                }\n            }\n\n            this.logger.log(\"Emit: \" + ((new Date()).getTime() - startEmitTime));\n\n            if (sharedEmitter) {\n                try {\n                    sharedEmitter.emitSourceMapsAndClose();\n                }\n                catch (ex2) {\n                    return Emitter.handleEmitterError(sharedEmitter.locationInfo.fileName, ex2);\n                }\n            }\n\n            return [];\n        }\n\n        private outputScriptToUTF8(script: Script): bool {\n            return script.containsUnicodeChar || (this.emitOptions.compilationSettings.emitComments && script.containsUnicodeCharInComment);\n        }\n\n        private outputScriptsToUTF8(scripts: Script[]): bool {\n            for (var i = 0, len = scripts.length; i < len; i++) {\n                var script = scripts[i];\n                if (this.outputScriptToUTF8(script)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private createFile(fileName: string, useUTF8: bool): ITextWriter {\n            // Creating files can cause exceptions, they will be caught higher up in TypeScriptCompiler.emit\n            return this.emitOptions.ioHost.createFile(fileName, useUTF8);\n        }\n\n        //\n        // Pull typecheck infrastructure\n        //\n\n        private pullResolveFile(fileName: string): bool {\n            if (!this.pullTypeChecker) {\n                return false;\n            }\n\n            var unit = this.semanticInfoChain.getUnit(fileName);\n\n            if (!unit) {\n                return false;\n            }\n\n            this.pullTypeChecker.setUnit(fileName);\n            this.pullTypeChecker.resolver.resolveBoundDecls(unit.getTopLevelDecls()[0], new PullTypeResolutionContext());\n\n            return true;\n        }\n\n        public getSyntacticDiagnostics(fileName: string): IDiagnostic[]{\n            return this.fileNameToSyntaxTree.lookup(fileName).diagnostics();\n        }\n\n\n        /** Used for diagnostics in tests */\n        private getSyntaxTree(fileName: string): SyntaxTree{\n            return this.fileNameToSyntaxTree.lookup(fileName);\n        }\n\n        public getSemanticDiagnostics(fileName: string): IDiagnostic[]{\n            return this.timeFunction(\"getSemanticDiagnostics - \" + fileName +\": \", () => {\n                var errors: IDiagnostic[] = [];\n\n                var unit = this.semanticInfoChain.getUnit(fileName);\n\n                if (unit) {\n                    var script: Script = this.fileNameToScript.lookup(fileName);\n\n                    if (script) {\n                        this.pullTypeChecker.typeCheckScript(script, fileName, this);\n\n                        unit.getDiagnostics(errors);\n                    }\n                }\n\n                return errors;\n            });\n        }\n\n        public pullTypeCheck() {\n            return this.timeFunction(\"pullTypeCheck()\", () => {\n\n                this.semanticInfoChain = new SemanticInfoChain();\n                this.pullTypeChecker = new PullTypeChecker(this.settings, this.semanticInfoChain);\n\n                var declCollectionContext: DeclCollectionContext = null;\n                var i: number;\n\n                var createDeclsStartTime = new Date().getTime();\n\n                var fileNames = this.fileNameToScript.getAllKeys();\n                for (i = 0; i < fileNames.length; i++) {\n                    var fileName = fileNames[i];\n                    var semanticInfo = new SemanticInfo(fileName, this.fileNameToLocationInfo.lookup(fileName));\n\n                    declCollectionContext = new DeclCollectionContext(semanticInfo);\n                    declCollectionContext.scriptName = fileName;\n\n                    // create decls\n                    getAstWalkerFactory().walk(this.fileNameToScript.lookup(fileName), preCollectDecls, postCollectDecls, null, declCollectionContext);\n\n                    semanticInfo.addTopLevelDecl(declCollectionContext.getParent());\n\n                    this.semanticInfoChain.addUnit(semanticInfo);\n                }\n\n                var createDeclsEndTime = new Date().getTime();\n\n                // bind declaration symbols\n                var bindStartTime = new Date().getTime();\n\n                var binder = new PullSymbolBinder(this.settings, this.semanticInfoChain);\n\n                // start at \'1\', so as to skip binding for global primitives such as \'any\'\n                for (i = 1; i < this.semanticInfoChain.units.length; i++) {\n                    binder.bindDeclsForUnit(this.semanticInfoChain.units[i].getPath());\n                }\n\n                var bindEndTime = new Date().getTime();\n\n                var findErrorsStartTime = new Date().getTime();\n\n                // type check\n                fileNames = this.fileNameToScript.getAllKeys();\n                for (i = 0; i < fileNames.length; i++) {\n                    fileName = fileNames[i];\n\n                    this.logger.log(\"Resolving \" + fileName);\n                    this.pullResolveFile(fileName);\n                    //this.pullTypeChecker.typeCheckScript(<Script>this.fileNameToScript.lookup(fileName), fileName, this);\n\n                }\n\n                var findErrorsEndTime = new Date().getTime();\n\n                this.logger.log(\"Decl creation: \" + (createDeclsEndTime - createDeclsStartTime));\n                this.logger.log(\"Binding: \" + (bindEndTime - bindStartTime));\n                this.logger.log(\"    Time in findSymbol: \" + time_in_findSymbol);\n                this.logger.log(\"Find errors: \" + (findErrorsEndTime - findErrorsStartTime));\n            });\n        }\n\n        // returns \'true\' if diffs were detected\n        private pullUpdateScript(oldScript: Script, newScript: Script): void {\n            this.timeFunction(\"pullUpdateScript: \", () => {\n\n                // want to name the new script semantic info the same as the old one\n                var newScriptSemanticInfo = new SemanticInfo(oldScript.locationInfo.fileName, newScript.locationInfo);\n                var oldScriptSemanticInfo = this.semanticInfoChain.getUnit(oldScript.locationInfo.fileName);\n\n                lastBoundPullDeclId = pullDeclID;\n                lastBoundPullSymbolID = pullSymbolID;\n\n                var declCollectionContext = new DeclCollectionContext(newScriptSemanticInfo);\n\n                declCollectionContext.scriptName = oldScript.locationInfo.fileName;\n\n                // create decls\n                getAstWalkerFactory().walk(newScript, preCollectDecls, postCollectDecls, null, declCollectionContext);\n\n                var oldTopLevelDecl = oldScriptSemanticInfo.getTopLevelDecls()[0];\n                var newTopLevelDecl = declCollectionContext.getParent();\n\n                newScriptSemanticInfo.addTopLevelDecl(newTopLevelDecl);\n\n                var diffStartTime = new Date().getTime();\n                var diffResults = PullDeclDiffer.diffDecls(oldTopLevelDecl, oldScriptSemanticInfo, newTopLevelDecl, newScriptSemanticInfo);\n\n                var diffEndTime = new Date().getTime();\n                this.logger.log(\"Update Script - Diff time: \" + (diffEndTime - diffStartTime));\n\n                // replace the old semantic info\n                this.semanticInfoChain.updateUnit(oldScriptSemanticInfo, newScriptSemanticInfo);\n\n                // Re-bind - we do this even if there aren\'t changes in the decls so as to relate the\n                // existing symbols to new decls and ASTs\n                var innerBindStartTime = new Date().getTime();\n\n                var topLevelDecls = newScriptSemanticInfo.getTopLevelDecls();\n\n                this.semanticInfoChain.update(newScript.locationInfo.fileName);\n\n                var binder = new PullSymbolBinder(this.settings, this.semanticInfoChain);\n                binder.setUnit(newScript.locationInfo.fileName);\n\n                var i = 0;\n\n                for (i = 0; i < topLevelDecls.length; i++) {\n                    binder.bindDeclToPullSymbol(topLevelDecls[i], true);\n                }\n\n                var innerBindEndTime = new Date().getTime();\n\n                this.logger.log(\"Update Script - Inner bind time: \" + (innerBindEndTime - innerBindStartTime));\n                if (diffResults.length) {\n\n                    // propagate changes\n                    var graphUpdater = new PullSymbolGraphUpdater(this.semanticInfoChain);\n                    var diff: PullDeclDiff;\n\n                    var traceStartTime = new Date().getTime();\n                    for (i = 0; i < diffResults.length; i++) {\n                        diff = diffResults[i];\n\n                        if (diff.kind === PullDeclEdit.DeclRemoved) {\n                            graphUpdater.removeDecl(diff.oldDecl);\n                        }\n                        else if (diff.kind === PullDeclEdit.DeclAdded) {\n                            graphUpdater.addDecl(diff.newDecl);\n                            graphUpdater.invalidateType(diff.oldDecl.getSymbol());\n                        }\n                        else {\n                            // PULLTODO: Other kinds of edits\n                            graphUpdater.invalidateType(diff.newDecl.getSymbol());\n                        }\n                    }\n\n                    var traceEndTime = new Date().getTime();\n                    \n                    // Don\'t re-typecheck or re-report errors just yet\n                    //this.pullTypeChecker.typeCheckScript(newScript, newScript.locationInfo.fileName, this);\n\n                    this.logger.log(\"Update Script - Trace time: \" + (traceEndTime - traceStartTime));\n                    this.logger.log(\"Update Script - Number of diffs: \" + diffResults.length);\n                }\n            });\n        }\n\n        public getSymbolOfDeclaration(decl: PullDecl) {\n            if (!decl) {\n                return null;\n            }\n            var ast = this.pullTypeChecker.resolver.getASTForDecl(decl);\n            if (!ast) {\n                return null;\n            }\n            var enlosingDecl = this.pullTypeChecker.resolver.getEnclosingDecl(decl);\n            if (ast.nodeType == NodeType.Member) {\n                return this.getSymbolOfDeclaration(enlosingDecl);\n            }\n            var resolutionContext = new PullTypeResolutionContext();\n            return this.pullTypeChecker.resolver.resolveDeclaration(ast, resolutionContext, enlosingDecl);\n        }\n\n        public resolvePosition(pos: number, script: Script, scriptName?: string): PullTypeInfoAtPositionInfo {\n\n            // find the enclosing decl\n            var declStack: PullDecl[] = [];\n            var resultASTs: AST[] = [];\n            if (!scriptName) {\n                scriptName = script.locationInfo.fileName;\n            }\n            var semanticInfo = this.semanticInfoChain.getUnit(scriptName);\n            var lastDeclAST: AST = null;\n            var foundAST: AST = null;\n            var symbol: PullSymbol = null;\n            var candidateSignature: PullSignatureSymbol = null;\n            var callSignatures: PullSignatureSymbol[] = null;\n\n            // these are used to track intermediate nodes so that we can properly apply contextual types\n            var lambdaAST: FuncDecl = null;\n            var declarationInitASTs: VarDecl[] = [];\n            var objectLitAST: UnaryExpression = null;\n            var asgAST: BinaryExpression = null;\n            var typeAssertionASTs: UnaryExpression[] = [];\n            var resolutionContext = new PullTypeResolutionContext();\n            var inTypeReference = false;\n            var enclosingDecl: PullDecl = null;\n            var isConstructorCall = false;\n\n            var pre = (cur: AST, parent: AST): AST => {\n                if (isValidAstNode(cur)) {\n                    if (pos >= cur.minChar && pos <= cur.limChar) {\n\n                        var previous = resultASTs[resultASTs.length - 1];\n\n                        if (previous === undefined || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {\n\n                            var decl = semanticInfo.getDeclForAST(cur);\n\n                            if (decl) {\n                                declStack[declStack.length] = decl;\n                                lastDeclAST = cur;\n                            }\n\n                            if (cur.nodeType === NodeType.FuncDecl && hasFlag((<FuncDecl>cur).getFunctionFlags(), FunctionFlags.IsFunctionExpression)) {\n                                lambdaAST = <FuncDecl>cur;\n                            }\n                            else if (cur.nodeType === NodeType.VarDecl) {\n                                declarationInitASTs[declarationInitASTs.length] = <VarDecl>cur;\n                            }\n                            else if (cur.nodeType === NodeType.ObjectLit) {\n                                objectLitAST = <UnaryExpression>cur;\n                            }\n                            else if (cur.nodeType === NodeType.CastExpression) {\n                                typeAssertionASTs[typeAssertionASTs.length] = <UnaryExpression>cur;\n                            }\n                            else if (cur.nodeType === NodeType.Asg) {\n                                asgAST = <BinaryExpression>cur;\n                            }\n                            else if (cur.nodeType === NodeType.TypeRef) {\n                                inTypeReference = true;\n                            }\n\n                            resultASTs[resultASTs.length] = cur;\n                        }\n                    }\n                }\n                return cur;\n            }\n\n            getAstWalkerFactory().walk(script, pre);\n\n            if (resultASTs.length) {\n                this.pullTypeChecker.setUnit(scriptName);\n\n                foundAST = resultASTs[resultASTs.length - 1];\n\n                // Check if is a name of a container\n                if (foundAST.nodeType === NodeType.Name && resultASTs.length > 1) {\n                    var previousAST = resultASTs[resultASTs.length - 2];\n                    switch (previousAST.nodeType) {\n                        case NodeType.InterfaceDeclaration:\n                        case NodeType.ClassDeclaration:\n                        case NodeType.ModuleDeclaration:\n                            if (foundAST === (<NamedDeclaration>previousAST).name) {\n                                foundAST = previousAST;\n                            }\n                            break;\n\n                        case NodeType.VarDecl:\n                            if (foundAST === (<VarDecl>previousAST).id) {\n                                foundAST = previousAST;\n                            }\n                            break;\n\n                        case NodeType.FuncDecl:\n                            if (foundAST === (<FuncDecl>previousAST).name) {\n                                foundAST = previousAST;\n                            }\n                            break;\n                    }\n                }\n\n                // are we within a decl?  if so, just grab its symbol\n                var funcDecl: FuncDecl = null;\n                if (lastDeclAST === foundAST) {\n                    symbol = declStack[declStack.length - 1].getSymbol();\n                    this.pullTypeChecker.resolver.resolveDeclaredSymbol(symbol, null, resolutionContext);\n                    enclosingDecl = declStack[declStack.length - 1].getParentDecl();\n                    if (foundAST.nodeType === NodeType.FuncDecl) {\n                        funcDecl = <FuncDecl>foundAST;\n                    }\n                }\n                else {\n                    // otherwise, it\'s an expression that needs to be resolved, so we must pull...\n                    var i = 0;\n\n                    // first, find the enclosing decl\n                    for (i = declStack.length - 1; i >= 0; i--) {\n                        if (!(declStack[i].getKind() & (PullElementKind.Variable | PullElementKind.Parameter))) {\n                            enclosingDecl = declStack[i];\n                            break;\n                        }\n                    }\n\n                    // next, obtain the assigning AST, if applicable\n                    // (this would be the ast for the last decl on the decl stack)\n\n                    // if the found AST is a named, we want to check for previous dotted expressions,\n                    // since those will give us the right typing\n                    var callExpression: CallExpression = null;\n                    if ((foundAST.nodeType == NodeType.SuperExpression || foundAST.nodeType == NodeType.ThisExpression || foundAST.nodeType == NodeType.Name) &&\n                        resultASTs.length > 1) {\n                        for (i = resultASTs.length - 2; i >= 0; i--) {\n                            if (resultASTs[i].nodeType === NodeType.Dot &&\n                                (<BinaryExpression>resultASTs[i]).operand2 === resultASTs[i + 1]) {\n                                foundAST = resultASTs[i];\n                            }\n                            else if ((resultASTs[i].nodeType === NodeType.Call || resultASTs[i].nodeType === NodeType.New) &&\n                                (<CallExpression>resultASTs[i]).target === resultASTs[i + 1]) {\n                                callExpression = <CallExpression>resultASTs[i];\n                                break;\n                            } else if (resultASTs[i].nodeType === NodeType.FuncDecl && (<FuncDecl>resultASTs[i]).name === resultASTs[i + 1]) {\n                                funcDecl = <FuncDecl>resultASTs[i];\n                                break;\n                            } else {\n                                break;\n                            }\n                        }\n                    }\n\n                    // if it\'s a list, we may not have an exact AST, so find the next nearest one\n                    if (foundAST.nodeType === NodeType.List) {\n                        for (i = 0; i < (<ASTList>foundAST).members.length; i++) {\n                            if ((<ASTList>foundAST).members[i].minChar > pos) {\n                                foundAST = (<ASTList>foundAST).members[i];\n                                break;\n                            }\n                        }\n                    }\n\n                    resolutionContext.resolveAggressively = true;\n                    resolutionContext.searchTypeSpace = inTypeReference;\n\n                    var isTypedAssignment = false;\n\n                    if (declarationInitASTs.length) {\n                        var assigningAST: VarDecl;\n                        var varSymbol: PullSymbol;\n\n                        for (i = 0; i < declarationInitASTs.length; i++) {\n\n                            assigningAST = declarationInitASTs[i];\n                            isTypedAssignment = (assigningAST != null) && (assigningAST.typeExpr != null);\n\n                            this.pullTypeChecker.resolver.resolveDeclaration(assigningAST, resolutionContext);\n                            varSymbol = this.semanticInfoChain.getSymbolForAST(assigningAST, scriptName);\n\n                            if (varSymbol && isTypedAssignment) {\n                                var contextualType = varSymbol.getType();\n                                resolutionContext.pushContextualType(contextualType, false, null);\n                            }\n\n                            if (assigningAST.init) {\n                                this.pullTypeChecker.resolver.resolveAST(assigningAST.init, isTypedAssignment, enclosingDecl, resolutionContext);\n                            }\n                        }\n                    }\n\n                    if (typeAssertionASTs.length) {\n                        for (i = 0; i < typeAssertionASTs.length; i++) {\n                            this.pullTypeChecker.resolver.resolveAST(typeAssertionASTs[i], isTypedAssignment, enclosingDecl, resolutionContext);\n                        }\n                    }\n\n                    if (asgAST) {\n                        this.pullTypeChecker.resolver.resolveAST(asgAST, isTypedAssignment, enclosingDecl, resolutionContext);\n                    }\n\n                    if (objectLitAST) {\n                        this.pullTypeChecker.resolver.resolveAST(objectLitAST, isTypedAssignment, enclosingDecl, resolutionContext);\n                    }\n\n                    if (lambdaAST) {\n                        this.pullTypeChecker.resolver.resolveAST(lambdaAST, true, enclosingDecl, resolutionContext);\n                        enclosingDecl = semanticInfo.getDeclForAST(lambdaAST);\n                    }\n\n                    symbol = this.pullTypeChecker.resolver.resolveAST(foundAST, isTypedAssignment, enclosingDecl, resolutionContext);\n                    if (callExpression) {\n                        var isPropertyOrVar = symbol.getKind() == PullElementKind.Property || symbol.getKind() == PullElementKind.Variable;\n                        var typeSymbol = symbol.getType();\n                        if (isPropertyOrVar) {\n                            isPropertyOrVar = (typeSymbol.getKind() != PullElementKind.Interface && typeSymbol.getKind() != PullElementKind.ObjectType) || typeSymbol.getName() == \"\";\n                        }\n\n                        if (!isPropertyOrVar) {\n                            isConstructorCall = foundAST.nodeType == NodeType.SuperExpression || callExpression.nodeType === NodeType.New;\n\n                            if (foundAST.nodeType == NodeType.SuperExpression) {\n                                if (symbol.getKind() == PullElementKind.Class) {\n                                    callSignatures = (<PullClassTypeSymbol>symbol).getConstructorMethod().getType().getConstructSignatures();\n                                }\n                            } else {\n                                callSignatures = callExpression.nodeType === NodeType.Call ? typeSymbol.getCallSignatures() : typeSymbol.getConstructSignatures();\n                            }\n                            var callResolutionResults: PullAdditionalCallResolutionData = {\n                                targetSymbol: null,\n                                resolvedSignatures: null,\n                                candidateSignature: null\n                            };\n\n                            if (callExpression.nodeType === NodeType.Call) {\n                                this.pullTypeChecker.resolver.resolveCallExpression(callExpression, isTypedAssignment, enclosingDecl, resolutionContext, callResolutionResults);\n                            } else {\n                                this.pullTypeChecker.resolver.resolveNewExpression(callExpression, isTypedAssignment, enclosingDecl, resolutionContext, callResolutionResults);\n                            }\n\n                            if (callResolutionResults.candidateSignature) {\n                                candidateSignature = callResolutionResults.candidateSignature;\n                            }\n                            if (callResolutionResults.targetSymbol && callResolutionResults.targetSymbol.getName() != \"\") {\n                                symbol = callResolutionResults.targetSymbol;\n                            }\n                            foundAST = callExpression;\n                        }\n                    }\n                }\n\n                if (funcDecl) {\n                    if (symbol && symbol.getKind() != PullElementKind.Property) {\n                        var signatureInfo = PullHelpers.getSignatureForFuncDecl(funcDecl, this.semanticInfoChain, scriptName);\n                        candidateSignature = signatureInfo.signature;\n                        callSignatures = signatureInfo.allSignatures;\n                    }\n                } else if (!callSignatures && symbol &&\n                    (symbol.getKind() === PullElementKind.Method || symbol.getKind() == PullElementKind.Function)) {\n                    var typeSym = symbol.getType()\n                    if (typeSym) {\n                        callSignatures = typeSym.getCallSignatures();\n                    }\n                }\n            }\n\n            var enclosingScopeSymbol = this.getSymbolOfDeclaration(enclosingDecl);\n\n            return {\n                symbol: symbol,\n                ast: foundAST,\n                enclosingScopeSymbol: enclosingScopeSymbol,\n                candidateSignature: candidateSignature,\n                callSignatures: callSignatures,\n                isConstructorCall: isConstructorCall\n            };\n        }\n\n        private extractResolutionContextFromPath(path: AstPath, script: Script, scriptName?: string): { ast: AST; enclosingDecl: PullDecl; resolutionContext: PullTypeResolutionContext; isTypedAssignment: bool; } {\n            if (!scriptName) {\n                scriptName = script.locationInfo.fileName;\n            }\n\n            var semanticInfo = this.semanticInfoChain.getUnit(scriptName);\n            var enclosingDecl: PullDecl = null;\n            var isTypedAssignment = false;\n\n            var resolutionContext = new PullTypeResolutionContext();\n            resolutionContext.resolveAggressively = true;\n\n            if (path.count() === 0) {\n                return null;\n            }\n\n            var i = 0;\n            var n = 0;\n\n            this.pullTypeChecker.resolver.setUnitPath(semanticInfo.getPath());\n\n            // Extract infromation from path\n            for (i = 0, n = path.count(); i < n; i++) {\n                var current = path.asts[i];\n                var decl = semanticInfo.getDeclForAST(current);\n\n                if (decl && !(decl.getKind() & (PullElementKind.Variable | PullElementKind.Parameter))) {\n                    enclosingDecl = decl;\n                }\n\n                switch (current.nodeType) {\n                    case NodeType.FuncDecl:\n                        if (hasFlag((<FuncDecl>current).getFunctionFlags(), FunctionFlags.IsFunctionExpression)) {\n                            this.pullTypeChecker.resolver.resolveAST((<FuncDecl>current), true, enclosingDecl, resolutionContext);\n                        }\n\n                        break;\n\n                    case NodeType.VarDecl:\n                        var assigningAST = <VarDecl> current;\n                        isTypedAssignment = (assigningAST.typeExpr != null);\n\n                        this.pullTypeChecker.resolver.resolveDeclaration(assigningAST, resolutionContext);\n                        var varSymbol = this.semanticInfoChain.getSymbolForAST(assigningAST, scriptName);\n\n                        if (varSymbol && isTypedAssignment) {\n                            var contextualType = varSymbol.getType();\n                            resolutionContext.pushContextualType(contextualType, false, null);\n                        }\n\n                        if (assigningAST.init) {\n                            this.pullTypeChecker.resolver.resolveAST(assigningAST.init, isTypedAssignment, enclosingDecl, resolutionContext);\n                        }\n\n                        break;\n\n                    case NodeType.ObjectLit:\n                        this.pullTypeChecker.resolver.resolveAST((<UnaryExpression>current), isTypedAssignment, enclosingDecl, resolutionContext);\n                        break;\n\n                    case NodeType.Asg:\n                        this.pullTypeChecker.resolver.resolveAST((<BinaryExpression>current), isTypedAssignment, enclosingDecl, resolutionContext);\n                        break;\n\n                    case NodeType.CastExpression:\n                        this.pullTypeChecker.resolver.resolveAST((<UnaryExpression>current), isTypedAssignment, enclosingDecl, resolutionContext);\n                        resolutionContext.searchTypeSpace = true;\n                        break;\n\n                    case NodeType.TypeRef:\n                    case NodeType.TypeParameter:\n                        resolutionContext.searchTypeSpace = true;\n                        break;\n                }\n\n            }\n\n            // Other possible type space references\n            if (path.isNameOfInterface() || path.isInClassImplementsList() || path.isInInterfaceExtendsList()) {\n                resolutionContext.searchTypeSpace = true;\n            }\n\n            // if the found AST is a named, we want to check for previous dotted expressions,\n            // since those will give us the right typing\n            if (path.ast().nodeType === NodeType.Name && path.count() > 1) {\n                for (i = path.count() - 1; i >= 0; i--) {\n                    if (path.asts[path.top - 1].nodeType === NodeType.Dot &&\n                        (<BinaryExpression>path.asts[path.top - 1]).operand2 === path.asts[path.top]) {\n                        path.pop();\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n\n            return {\n                ast: path.ast(),\n                enclosingDecl: enclosingDecl,\n                resolutionContext: resolutionContext,\n                isTypedAssignment: isTypedAssignment\n            };\n        }\n\n        public pullGetSymbolInformationFromPath(path: AstPath, script: Script, scriptName?: string): { symbol: PullSymbol; ast: AST; } {\n            var context = this.extractResolutionContextFromPath(path, script, scriptName);\n            if (!context) {\n                return null;\n            }\n\n            var symbol = this.pullTypeChecker.resolver.resolveAST(path.ast(), context.isTypedAssignment, context.enclosingDecl, context.resolutionContext);\n\n            return { symbol: symbol, ast: path.ast() };\n        }\n\n        public pullGetCallInformationFromPath(path: AstPath, script: Script, scriptName?: string): { targetSymbol: PullSymbol; resolvedSignatures: PullSignatureSymbol[]; candidateSignature: PullSignatureSymbol; ast: AST; enclosingScopeSymbol: PullSymbol; } {\n            // AST has to be a call expression\n            if (path.ast().nodeType !== NodeType.Call && path.ast().nodeType !== NodeType.New) {\n                return null;\n            }\n\n            var isNew = (path.ast().nodeType === NodeType.New);\n\n            var context = this.extractResolutionContextFromPath(path, script, scriptName);\n            if (!context) {\n                return null;\n            }\n\n            var callResolutionResults = {\n                targetSymbol: null,\n                resolvedSignatures: null,\n                candidateSignature: null,\n                ast: path.ast(),\n                enclosingScopeSymbol: this.getSymbolOfDeclaration(context.enclosingDecl)\n            };\n\n            if (isNew) {\n                this.pullTypeChecker.resolver.resolveNewExpression(<CallExpression>path.ast(), context.isTypedAssignment, context.enclosingDecl, context.resolutionContext, callResolutionResults);\n            }\n            else {\n                this.pullTypeChecker.resolver.resolveCallExpression(<CallExpression>path.ast(), context.isTypedAssignment, context.enclosingDecl, context.resolutionContext, callResolutionResults);\n            }\n            return callResolutionResults;\n        }\n\n        public pullGetVisibleMemberSymbolsFromPath(path: AstPath, script: Script, scriptName?: string): PullVisibleSymbolsInfo {\n            var context = this.extractResolutionContextFromPath(path, script, scriptName);\n            if (!context) {\n                return null;\n            }\n\n            var symbols = this.pullTypeChecker.resolver.getVisibleMembersFromExpression(path.ast(), context.enclosingDecl, context.resolutionContext);\n            if (!symbols) {\n                return null;\n            }\n\n            return {\n                symbols: symbols,\n                enclosingScopeSymbol: this.getSymbolOfDeclaration(context.enclosingDecl)\n            };\n        }\n\n        public pullGetVisibleSymbolsFromPath(path: AstPath, script: Script, scriptName?: string): PullVisibleSymbolsInfo {\n            var context = this.extractResolutionContextFromPath(path, script, scriptName);\n            if (!context) {\n                return null;\n            }\n\n            var symbols = this.pullTypeChecker.resolver.getVisibleSymbols(context.enclosingDecl, context.resolutionContext);\n            if (!symbols) {\n                return null;\n            }\n\n            return {\n                symbols: symbols,\n                enclosingScopeSymbol: this.getSymbolOfDeclaration(context.enclosingDecl)\n            };\n        }\n\n        public pullGetTypeInfoAtPosition(pos: number, script: Script, scriptName?: string): PullTypeInfoAtPositionInfo {\n            return this.timeFunction(\"pullGetTypeInfoAtPosition for pos \" + pos + \":\", () => {\n\n                var info = this.resolvePosition(pos, script, scriptName);\n                return info;\n            });\n        }\n\n        public getTopLevelDeclarations(scriptName: string): PullDecl[] {\n            this.pullResolveFile(scriptName);\n\n            var unit = this.semanticInfoChain.getUnit(scriptName);\n\n            if (!unit) {\n                return null;\n            }\n\n            return unit.getTopLevelDecls();\n        }\n\n        private reportDiagnostic(error: IDiagnostic, textWriter: ITextWriter) {\n            if (error.fileName()) {\n                var lineCol = { line: -1, character: -1 };\n                var lineMap = this.fileNameToLocationInfo.lookup(error.fileName()).lineMap;\n                lineMap.fillLineAndCharacterFromPosition(error.start(), lineCol);\n\n                textWriter.Write(error.fileName() + \"(\" + (lineCol.line + 1) + \",\" + lineCol.character + \"): \");\n            }\n\n            textWriter.WriteLine(error.message());\n        }\n\n        public reportDiagnostics(errors: IDiagnostic[], textWriter: ITextWriter): void {\n            for (var i = 0; i < errors.length; i++) {\n                this.reportDiagnostic(errors[i], textWriter);\n            }\n        }\n    }\n}\ndeclare class Enumerator {\n    public atEnd(): bool;\n    public moveNext();\n    public item(): any;\n    constructor (o: any);\n}\ndeclare module process {\n    export var argv: string[];\n    export var platform: string;\n    export function on(event: string, handler: (any) => void ): void;\n    export module stdout {\n        export function write(str: string);\n    }\n    export module stderr {\n        export function write(str: string);\n    }\n    export module mainModule {\n        export var filename: string;\n    }\n    export function exit(exitCode?: number);\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'Enumerator.ts\' />\n///<reference path=\'process.ts\' />\n///<reference path=\'Core\\References.ts\' />\n\ninterface IResolvedFile {\n    content: string;\n    path: string;\n}\n\ninterface IFileWatcher {\n    close(): void;\n}\n\ninterface IIO {\n    readFile(path: string): string;\n    writeFile(path: string, contents: string): void;\n    createFile(path: string, useUTF8?: bool): ITextWriter;\n    deleteFile(path: string): void;\n    dir(path: string, re?: RegExp, options?: { recursive?: bool; }): string[];\n    fileExists(path: string): bool;\n    directoryExists(path: string): bool;\n    createDirectory(path: string): void;\n    resolvePath(path: string): string;\n    dirName(path: string): string;\n    findFile(rootPath: string, partialFilePath: string): IResolvedFile;\n    print(str: string): void;\n    printLine(str: string): void;\n    arguments: string[];\n    stderr: ITextWriter;\n    stdout: ITextWriter;\n    watchFile(fileName: string, callback: (string) => void ): IFileWatcher;\n    run(source: string, fileName: string): void;\n    getExecutingFilePath(): string;\n    quit(exitCode?: number);\n}\n\nmodule IOUtils {\n    // Creates the directory including its parent if not already present\n    function createDirectoryStructure(ioHost: IIO, dirName: string) {\n        if (ioHost.directoryExists(dirName)) {\n            return;\n        }\n\n        var parentDirectory = ioHost.dirName(dirName);\n        if (parentDirectory != \"\") {\n            createDirectoryStructure(ioHost, parentDirectory);\n        }\n        ioHost.createDirectory(dirName);\n    }\n\n    // Creates a file including its directory structure if not already present\n    export function createFileAndFolderStructure(ioHost: IIO, fileName: string, useUTF8?: bool) {\n        var path = ioHost.resolvePath(fileName);\n        var dirName = ioHost.dirName(path);\n        createDirectoryStructure(ioHost, dirName);\n        return ioHost.createFile(path, useUTF8);\n    }\n\n    export function throwIOError(message: string, error: Error) {\n        var errorMessage = message;\n        if (error && error.message) {\n            errorMessage += (\" \" + error.message);\n        }\n        throw new Error(errorMessage);\n    }\n\n    export class BufferedTextWriter implements ITextWriter {\n        public buffer = \"\";\n        // Inner writer does not need a WriteLine method, since the BufferedTextWriter wraps it itself\n        constructor(public writer: { Write: (str: string) => void; Close: () => void; }, public capacity = 1024) { }\n        Write(str) {\n            this.buffer += str;\n            if (this.buffer.length >= this.capacity) {\n                this.writer.Write(this.buffer);\n                this.buffer = \"\";\n            }\n        }\n        WriteLine(str) {\n            this.Write(str + \'\\r\\n\');\n        }\n        Close() {\n            this.writer.Write(this.buffer);\n            this.writer.Close();\n            this.buffer = null;\n        }\n    }\n}\n\n// Declare dependencies needed for all supported hosts\ndeclare function setTimeout(callback: () =>void , ms?: number);\n\nvar IO = (function() {\n\n    // Create an IO object for use inside WindowsScriptHost hosts\n    // Depends on WSCript and FileSystemObject\n    function getWindowsScriptHostIO(): IIO {\n        var fso = new ActiveXObject(\"Scripting.FileSystemObject\");        \n        var streamObjectPool = [];\n\n        function getStreamObject(): any { \n            if (streamObjectPool.length > 0) {\n                return streamObjectPool.pop();\n            }  else {\n                return new ActiveXObject(\"ADODB.Stream\");\n            }\n        }\n\n        function releaseStreamObject(obj: any) { \n            streamObjectPool.push(obj);\n        }\n\n        var args = [];\n        for (var i = 0; i < WScript.Arguments.length; i++) {\n            args[i] = WScript.Arguments.Item(i);\n        }\n\n        return {\n            readFile: function(path) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Open();\n                    streamObj.Type = 2; // Text data\n                    streamObj.Charset = \'x-ansi\'; // Assume we are reading ansi text\n                    streamObj.LoadFromFile(path);\n                    var bomChar = streamObj.ReadText(2); // Read the BOM char\n                    streamObj.Position = 0; // Position has to be at 0 before changing the encoding\n                    if ((bomChar.charCodeAt(0) == 0xFE && bomChar.charCodeAt(1) == 0xFF)\n                        || (bomChar.charCodeAt(0) == 0xFF && bomChar.charCodeAt(1) == 0xFE)) {\n                        streamObj.Charset = \'unicode\';\n                    } else if (bomChar.charCodeAt(0) == 0xEF && bomChar.charCodeAt(1) == 0xBB) {\n                        streamObj.Charset = \'utf-8\'; \n                    }\n\n                    // Read the whole file\n                    var str = streamObj.ReadText(-1 /* read from the current position to EOS */);\n                    streamObj.Close();\n                    releaseStreamObject(streamObj);\n                    return <string>str;\n                }\n                catch (err) {\n                    IOUtils.throwIOError(\"Error reading file \\\"\" + path + \"\\\".\", err);\n                }\n            },\n\n            writeFile: function(path, contents) {\n                var file = this.createFile(path);\n                file.Write(contents);\n                file.Close();\n            },\n\n            fileExists: function(path: string): bool {\n                return fso.FileExists(path);\n            },\n\n            resolvePath: function(path: string): string {\n                return fso.GetAbsolutePathName(path);\n            },\n\n            dirName: function(path: string): string {\n                return fso.GetParentFolderName(path);\n            },\n\n            findFile: function(rootPath: string, partialFilePath: string): IResolvedFile {\n                var path = fso.GetAbsolutePathName(rootPath) + \"/\" + partialFilePath;\n\n                while (true) {\n                    if (fso.FileExists(path)) {\n                        try {\n                            var content = this.readFile(path);\n                            return { content: content, path: path };\n                        }\n                        catch (err) {\n                            //Tools.CompilerDiagnostics.debugPrint(\"Could not find \" + path + \", trying parent\");\n                        }\n                    }\n                    else {\n                        rootPath = fso.GetParentFolderName(fso.GetAbsolutePathName(rootPath));\n\n                        if (rootPath == \"\") {\n                            return null;\n                        }\n                        else {\n                            path = fso.BuildPath(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n\n            deleteFile: function(path: string): void {\n                try {\n                    if (fso.FileExists(path)) {\n                        fso.DeleteFile(path, true); // true: delete read-only files\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn\'t delete file \'\" + path + \"\'.\", e);\n                }\n            },\n\n            createFile: function (path, useUTF8?) {\n                try {\n                    var streamObj = getStreamObject();\n                    streamObj.Charset = useUTF8 ? \'utf-8\' : \'x-ansi\';\n                    streamObj.Open();\n                    return {\n                        Write: function (str) { streamObj.WriteText(str, 0); },\n                        WriteLine: function (str) { streamObj.WriteText(str, 1); },\n                        Close: function() {\n                            try {\n                                streamObj.SaveToFile(path, 2);\n                            } catch (saveError) {\n                                IOUtils.throwIOError(\"Couldn\'t write to file \'\" + path + \"\'.\", saveError);\n                            }\n                            finally {\n                                if (streamObj.State != 0 /*adStateClosed*/) {\n                                    streamObj.Close();\n                                }\n                                releaseStreamObject(streamObj);\n                            }\n                        }\n                    };\n                } catch (creationError) {\n                    IOUtils.throwIOError(\"Couldn\'t write to file \'\" + path + \"\'.\", creationError);\n                }\n            },\n\n            directoryExists: function(path) {\n                return <bool>fso.FolderExists(path);\n            },\n\n            createDirectory: function(path) {\n                try {\n                    if (!this.directoryExists(path)) {\n                        fso.CreateFolder(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn\'t create directory \'\" + path + \"\'.\", e);\n                }\n            },\n\n            dir: function(path, spec?, options?) {\n                options = options || <{ recursive?: bool; }>{};\n                function filesInFolder(folder, root): string[]{\n                    var paths = [];\n                    var fc: Enumerator;\n\n                    if (options.recursive) {\n                        fc = new Enumerator(folder.subfolders);\n\n                        for (; !fc.atEnd() ; fc.moveNext()) {\n                            paths = paths.concat(filesInFolder(fc.item(), root + \"/\" + fc.item().Name));\n                        }\n                    }\n\n                    fc = new Enumerator(folder.files);\n\n                    for (; !fc.atEnd() ; fc.moveNext()) {\n                        if (!spec || fc.item().Name.match(spec)) {\n                            paths.push(root + \"/\" + fc.item().Name);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                var folder = fso.GetFolder(path);\n                var paths = [];\n\n                return filesInFolder(folder, path);\n            },\n\n            print: function(str) {\n                WScript.StdOut.Write(str);\n            },\n\n            printLine: function(str) {\n                WScript.Echo(str);\n            },\n\n            arguments: <string[]>args,\n            stderr: WScript.StdErr,\n            stdout: WScript.StdOut,\n            watchFile: null,\n            run: function(source, fileName) {\n                try {\n                    eval(source);\n                } catch (e) {\n                    IOUtils.throwIOError(\"Error while executing file \'\" + fileName + \"\'.\", e);\n                }\n            },\n            getExecutingFilePath: function () {\n                return WScript.ScriptFullName;\n            },\n            quit: function (exitCode: number = 0) {\n                try {\n                    WScript.Quit(exitCode);\n                } catch (e) {\n                }\n            }\n        }\n\n    };\n\n    // Create an IO object for use inside Node.js hosts\n    // Depends on \'fs\' and \'path\' modules\n    function getNodeIO(): IIO {\n\n        var _fs = require(\'fs\');\n        var _path = require(\'path\');\n        var _module = require(\'module\');\n\n        return {\n            readFile: function(file) {\n                try {\n                    var buffer = _fs.readFileSync(file);\n                    switch (buffer[0]) {\n                        case 0xFE:\n                            if (buffer[1] == 0xFF) {\n                                // utf16-be. Reading the buffer as big endian is not supported, so convert it to \n                                // Little Endian first\n                                var i = 0;\n                                while ((i + 1) < buffer.length) {\n                                    var temp = buffer[i]\n                                    buffer[i] = buffer[i + 1];\n                                    buffer[i + 1] = temp;\n                                    i += 2;\n                                }\n                                return buffer.toString(\"ucs2\", 2);\n                            }\n                            break;\n                        case 0xFF:\n                            if (buffer[1] == 0xFE) {\n                                // utf16-le \n                                return buffer.toString(\"ucs2\", 2);\n                            }\n                            break;\n                        case 0xEF:\n                            if (buffer[1] == 0xBB) {\n                                // utf-8\n                                return buffer.toString(\"utf8\", 3);\n                            }\n                    }\n                    // Default behaviour\n                    return buffer.toString();\n                } catch (e) {\n                    IOUtils.throwIOError(\"Error reading file \\\"\" + file + \"\\\".\", e);\n                }\n            },\n\n            writeFile: <(path: string, contents: string) => void >_fs.writeFileSync,\n            deleteFile: function(path) {\n                try {\n                    _fs.unlinkSync(path);\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn\'t delete file \'\" + path + \"\'.\", e);\n                }\n            },\n            fileExists: function(path): bool {\n                return _fs.existsSync(path);\n            },\n            createFile: function(path, useUTF8?) {\n                function mkdirRecursiveSync(path) {\n                    var stats = _fs.statSync(path);\n                    if (stats.isFile()) {\n                        IOUtils.throwIOError(\"\\\"\" + path + \"\\\" exists but isn\'t a directory.\", null);\n                    } else if (stats.isDirectory()) {\n                        return;\n                    } else {\n                        mkdirRecursiveSync(_path.dirname(path));\n                        _fs.mkdirSync(path, 0775);\n                    }\n                }\n\n                mkdirRecursiveSync(_path.dirname(path));\n\n                try {\n                    var fd = _fs.openSync(path, \'w\');\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn\'t write to file \'\" + path + \"\'.\", e);\n                }\n                // Writing to a buffer to improve performance\n                return new IOUtils.BufferedTextWriter({\n                    Write: function (str) { _fs.writeSync(fd, str); },\n                    Close: function () { _fs.closeSync(fd); fd = null; }\n                });\n            },\n            dir: function dir(path, spec?, options?) {\n                options = options || <{ recursive?: bool; }>{};\n\n                function filesInFolder(folder: string): string[]{\n                    var paths = [];\n\n                    try {\n                        var files = _fs.readdirSync(folder);\n                        for (var i = 0; i < files.length; i++) {\n                            var stat = _fs.statSync(folder + \"/\" + files[i]);\n                            if (options.recursive && stat.isDirectory()) {\n                                paths = paths.concat(filesInFolder(folder + \"/\" + files[i]));\n                            } else if (stat.isFile() && (!spec || files[i].match(spec))) {\n                                paths.push(folder + \"/\" + files[i]);\n                            }\n                        }\n                    } catch (err) {\n                        /*\n                        *   Skip folders that are inaccessible\n                        */\n                    }\n\n                    return paths;\n                }\n\n                return filesInFolder(path);\n            },\n            createDirectory: function(path: string): void {\n                try {\n                    if (!this.directoryExists(path)) {\n                        _fs.mkdirSync(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn\'t create directory \'\" + path + \"\'.\", e);\n                }\n            },\n\n            directoryExists: function(path: string): bool {\n                return _fs.existsSync(path) && _fs.lstatSync(path).isDirectory();\n            },\n            resolvePath: function(path: string): string {\n                return _path.resolve(path);\n            },\n            dirName: function(path: string): string {\n                return _path.dirname(path);\n            },\n            findFile: function(rootPath: string, partialFilePath): IResolvedFile {\n                var path = rootPath + \"/\" + partialFilePath;\n\n                while (true) {\n                    if (_fs.existsSync(path)) {\n                        try {\n                            var content = this.readFile(path);\n                            return { content: content, path: path };\n                        } catch (err) {\n                            //Tools.CompilerDiagnostics.debugPrint((\"Could not find \" + path) + \", trying parent\");\n                        }\n                    }\n                    else {\n                        var parentPath = _path.resolve(rootPath, \"..\");\n\n                        // Node will just continue to repeat the root path, rather than return null\n                        if (rootPath === parentPath) {\n                            return null;\n                        }\n                        else {\n                            rootPath = parentPath;\n                            path = _path.resolve(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n            print: function(str) { process.stdout.write(str) },\n            printLine: function(str) { process.stdout.write(str + \'\\n\') },\n            arguments: process.argv.slice(2),\n            stderr: {\n                Write: function(str) { process.stderr.write(str); },\n                WriteLine: function(str) { process.stderr.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n            stdout: {\n                Write: function(str) { process.stdout.write(str); },\n                WriteLine: function(str) { process.stdout.write(str + \'\\n\'); },\n                Close: function() { }\n            },\n            watchFile: function(fileName: string, callback: (string) => void ): IFileWatcher {\n                var firstRun = true;\n                var processingChange = false;\n\n                var fileChanged: any = function(curr, prev) {\n                    if (!firstRun) {\n                        if (curr.mtime < prev.mtime) {\n                            return;\n                        }\n\n                        _fs.unwatchFile(fileName, fileChanged);\n                        if (!processingChange) {\n                            processingChange = true;\n                            callback(fileName);\n                            setTimeout(function() { processingChange = false; }, 100);\n                        }\n                    }\n                    firstRun = false;\n                    _fs.watchFile(fileName, { persistent: true, interval: 500 }, fileChanged);\n                };\n\n                fileChanged();\n                return {\n                    fileName: fileName,\n                    close: function() {\n                        _fs.unwatchFile(fileName, fileChanged);\n                    }\n                };\n            },\n            run: function(source, fileName) {\n                require.main.fileName = fileName;\n                require.main.paths = _module._nodeModulePaths(_path.dirname(_fs.realpathSync(fileName)));\n                require.main._compile(source, fileName);\n            }, \n            getExecutingFilePath: function () {\n                return process.mainModule.filename;\n            },\n            quit: process.exit\n        }\n    };\n\n    if (typeof ActiveXObject === \"function\")\n        return getWindowsScriptHostIO();\n    else if (typeof require === \"function\")\n        return getNodeIO();\n    else\n        return null; // Unsupported host\n})();\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\"io.ts\" />\n\ninterface IOptions {\n    name?: string;\n    flag?: bool;\n    short?: string;\n    usage?: string;\n    set?: (s: string) => void;\n    type?: string;\n    experimental?: bool;\n}\n\nclass OptionsParser {\n    private DEFAULT_SHORT_FLAG = \"-\";\n    private DEFAULT_LONG_FLAG = \"--\";\n\n    // Find the option record for the given string. Returns null if not found.\n    private findOption(arg: string) {\n\n        for (var i = 0; i < this.options.length; i++) {\n\n            if (arg === this.options[i].short || arg === this.options[i].name) {\n                return this.options[i];\n            }\n        }\n\n        return null;\n    }\n\n    public unnamed: string[] = [];\n\n    public options: IOptions[] = [];\n\n    constructor (public host: IIO) {\n    }\n\n    public printUsage() {\n        this.host.printLine(\"Syntax:   tsc [options] [file ..]\");\n        this.host.printLine(\"\");\n        this.host.printLine(\"Examples: tsc hello.ts\");\n        this.host.printLine(\"          tsc --out foo.js foo.ts\");\n        this.host.printLine(\"          tsc @args.txt\");\n        this.host.printLine(\"\");\n        this.host.printLine(\"Options:\");\n\n        var output = [];\n        var maxLength = 0;\n        var i = 0;\n\n        this.options = this.options.sort(function(a, b) {\n            var aName = a.name.toLowerCase();\n            var bName = b.name.toLowerCase();\n\n            if (aName > bName) {\n                return 1;\n            } else if (aName < bName) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n\n        // Build up output array\n        for (i = 0; i < this.options.length; i++) {\n            var option = this.options[i];\n\n            if (option.experimental) {\n                continue;\n            }\n\n            if (!option.usage) {\n                break;\n            }\n\n            var usageString = \"  \";\n            var type = option.type ? \" \" + option.type.toUpperCase() : \"\";\n\n            if (option.short) {\n                usageString += this.DEFAULT_SHORT_FLAG + option.short + type + \", \";\n            }\n\n            usageString += this.DEFAULT_LONG_FLAG + option.name + type;\n\n            output.push([usageString, option.usage]);\n\n            if (usageString.length > maxLength) {\n                maxLength = usageString.length;\n            }\n        }\n\n        output.push([\"  @<file>\", \"Insert command line options and files from a file.\"]);\n\n        // Print padded output\n        for (i = 0; i < output.length; i++) {\n            this.host.printLine(output[i][0] + (new Array(maxLength - output[i][0].length + 3)).join(\" \") + output[i][1]);\n        }\n    }\n\n    public option(name: string, config: IOptions, short?: string) {\n        if (!config) {\n            config = <any>short;\n            short = null;\n        }\n\n        config.name = name;\n        config.short = short;\n        config.flag = false;\n\n        this.options.push(config);\n    }\n\n    public flag(name: string, config: IOptions, short?: string) {\n        if (!config) {\n            config = <any>short;\n            short = null;\n        }\n\n        config.name = name;\n        config.short = short;\n        config.flag = true\n\n        this.options.push(config);\n    }\n\n    // Parse an arguments string\n    public parseString(argString: string) {\n        var position = 0;\n        var tokens = argString.match(/\\s+|\"|[^\\s\"]+/g);\n\n        function peek() {\n            return tokens[position];\n        }\n\n        function consume() {\n            return tokens[position++];\n        }\n\n        function consumeQuotedString() {\n            var value = \'\';\n            consume(); // skip opening quote.\n\n            var token = peek();\n\n            while (token && token !== \'\"\') {\n                consume();\n\n                value += token;\n\n                token = peek();\n            }\n\n            consume(); // skip ending quote;\n\n            return value;\n        }\n\n        var args: string[] = [];\n        var currentArg = \'\';\n\n        while (position < tokens.length) {\n            var token = peek();\n\n            if (token === \'\"\') {\n                currentArg += consumeQuotedString();\n            } else if (token.match(/\\s/)) {\n                if (currentArg.length > 0) {\n                    args.push(currentArg);\n                    currentArg = \'\';\n                }\n\n                consume();\n            } else {\n                consume();\n                currentArg += token;\n            }\n        }\n\n        if (currentArg.length > 0) {\n            args.push(currentArg);\n        }\n\n        this.parse(args);\n    }\n\n    // Parse arguments as they come from the platform: split into arguments.\n    public parse(args: string[]) {\n        var position = 0;\n\n        function consume() {\n            return args[position++];\n        }\n\n        while (position < args.length) {\n            var current = consume();\n            var match = current.match(/^(--?|@)(.*)/);\n            var value = null;\n\n            if (match) {\n                if (match[1] === \'@\') {\n                    this.parseString(this.host.readFile(match[2]));\n                } else {\n                    var arg = match[2];\n                    var option = this.findOption(arg);\n\n                    if (option === null) {\n                        this.host.printLine(\"Unknown option \'\" + arg +\"\'\");\n                        this.host.printLine(\"Use the \'--help\' flag to see options\");\n                    } else {\n                        if (!option.flag)\n                            value = consume();\n\n                        option.set(value);\n                    }\n                }\n            } else {\n                this.unnamed.push(current);\n            }\n        }\n    }\n}\n﻿//﻿\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n///<reference path=\'typescript.ts\'/>\n///<reference path=\'io.ts\'/>\n///<reference path=\'optionsParser.ts\'/>\n\ndeclare var localizedDiagnosticMessages: TypeScript.IDiagnosticMessages;\n\nclass DiagnosticsLogger implements TypeScript.ILogger {\n    constructor(public ioHost: IIO) {\n    }\n    public information(): bool { return false; }\n    public debug(): bool { return false; }\n    public warning(): bool { return false; }\n    public error(): bool { return false; }\n    public fatal(): bool { return false; }\n    public log(s: string): void {\n        this.ioHost.stdout.WriteLine(s);\n    }\n}\n\nclass ErrorReporter implements ITextWriter {\n    public hasErrors: bool;\n\n    constructor(public ioHost: IIO) {\n        this.hasErrors = false;\n    }\n\n    public Write(s: string) {\n        this.hasErrors = true;\n        this.ioHost.stderr.Write(s);\n    }\n\n    public WriteLine(s: string) {\n        this.hasErrors = true;\n        this.ioHost.stderr.WriteLine(s);\n    }\n\n    public Close() {\n    }\n\n    public reset() {\n        this.hasErrors = false;\n    }\n}\n\nclass CommandLineHost implements TypeScript.IResolverHost {\n\n    public pathMap: any = {};\n    public resolvedPaths: any = {};\n\n    constructor(public compilationSettings: TypeScript.CompilationSettings, public errorReporter: (err:string)=>void) { \n    }\n\n    public getPathIdentifier(path: string) {\n        return this.compilationSettings.useCaseSensitiveFileResolution ? path : path.toLocaleUpperCase();\n    }\n\n    public isResolved(path: string) {\n        return this.resolvedPaths[this.getPathIdentifier(this.pathMap[path])] != undefined;\n    }\n\n    public resolveCompilationEnvironment(preEnv: TypeScript.CompilationEnvironment,\n                                         resolver: TypeScript.ICodeResolver,\n                                         traceDependencies: bool): TypeScript.CompilationEnvironment {\n        var resolvedEnv = new TypeScript.CompilationEnvironment(preEnv.compilationSettings, preEnv.ioHost);\n\n        var nCode = preEnv.code.length;\n        var path = \"\";\n\n        var postResolutionError = \n            (errorFile: string, errorMessage: string) => {\n                this.errorReporter(errorFile + (errorMessage === \"\" ? \"\" : \": \" + errorMessage));\n            }\n\n        var resolutionDispatcher: TypeScript.IResolutionDispatcher = {\n            postResolutionError: (errorFile, fileReference, errorMessage) => {\n                this.errorReporter(errorFile + \"(\" + (fileReference.line + 1) + \",\" + (fileReference.character + 1) + \") \" + (errorMessage === \"\" ? \"\" : \": \" + errorMessage));\n            },\n            postResolution: (path: string, code: TypeScript.IScriptSnapshot) => {\n                var pathId = this.getPathIdentifier(path);\n                if (!this.resolvedPaths[pathId]) {\n                    resolvedEnv.code.push(<TypeScript.SourceUnit>code);\n                    this.resolvedPaths[pathId] = true;\n                }\n            }\n        };\n\n        for (var i = 0; i < nCode; i++) {\n            path = TypeScript.switchToForwardSlashes(preEnv.ioHost.resolvePath(preEnv.code[i].path));\n            this.pathMap[preEnv.code[i].path] = path;\n            resolver.resolveCode(path, \"\", false, resolutionDispatcher);\n        }\n\n        return resolvedEnv;\n    }\n}\n\nclass BatchCompiler {\n    public compilationSettings: TypeScript.CompilationSettings;\n    public compilationEnvironment: TypeScript.CompilationEnvironment;\n    public resolvedEnvironment: TypeScript.CompilationEnvironment = null;\n    public hasResolveErrors: bool = false;\n    public compilerVersion = \"0.9.0.0\";\n    public printedVersion = false;\n    public errorReporter: ErrorReporter = null;\n\n    constructor(public ioHost: IIO) {\n        this.compilationSettings = new TypeScript.CompilationSettings();\n        this.compilationEnvironment = new TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);\n        this.errorReporter = new ErrorReporter(this.ioHost);\n    }\n\n    public resolve() {\n        var resolver = new TypeScript.CodeResolver(this.compilationEnvironment);\n        var commandLineHost = new CommandLineHost(this.compilationSettings, (err) => this.errorReporter.WriteLine(err));\n        var ret = commandLineHost.resolveCompilationEnvironment(this.compilationEnvironment, resolver, true);\n\n        for (var i = 0; i < this.compilationEnvironment.code.length; i++) {\n            if (!commandLineHost.isResolved(this.compilationEnvironment.code[i].path)) {\n                var path = this.compilationEnvironment.code[i].path;\n                if (!TypeScript.isTSFile(path) && !TypeScript.isDTSFile(path)) {\n                    this.errorReporter.WriteLine(\"Unknown extension for file: \\\"\" + path + \"\\\". Only .ts and .d.ts extensions are allowed.\");\n                }\n                else {\n                    this.errorReporter.WriteLine(\"Error reading file \\\"\" + path + \"\\\": File not found\");\n                }\n            }\n        }\n\n        return ret;\n    }\n    \n    /// Do the actual compilation reading from input files and\n    /// writing to output file(s).\n    public compile(): bool {\n        if (typeof localizedDiagnosticMessages === \"undefined\") {\n            localizedDiagnosticMessages = null;\n        }\n\n        var logger = this.compilationSettings.gatherDiagnostics ? <TypeScript.ILogger>new DiagnosticsLogger(this.ioHost) : new TypeScript.NullLogger();\n        var compiler = new TypeScript.TypeScriptCompiler(logger, this.compilationSettings, localizedDiagnosticMessages);\n\n        var anySyntacticErrors = false;\n        var anySemanticErrors = false;\n\n        for (var iCode = 0 ; iCode < this.resolvedEnvironment.code.length; iCode++) {\n            var code = this.resolvedEnvironment.code[iCode];\n\n            // if file resolving is disabled, the file\'s content will not yet be loaded\n\n            if (!this.compilationSettings.resolve) {\n                code.content = this.ioHost.readFile(code.path);\n                // If declaration files are going to be emitted, \n                // preprocess the file contents and add in referenced files as well\n                if (this.compilationSettings.generateDeclarationFiles) {\n                    TypeScript.CompilerDiagnostics.assert(code.referencedFiles === null, \"With no resolve option, referenced files need to null\");\n                    code.referencedFiles = TypeScript.getReferencedFiles(code.path, code);\n                }\n            }\n\n            if (code.content != null) {\n                compiler.addSourceUnit(code.path, TypeScript.ScriptSnapshot.fromString(code.content), code.referencedFiles);\n\n                var syntacticDiagnostics = compiler.getSyntacticDiagnostics(code.path);\n                compiler.reportDiagnostics(syntacticDiagnostics, this.errorReporter);\n\n                if (syntacticDiagnostics.length > 0) {\n                    anySyntacticErrors = true;\n                }\n            }\n        }\n\n        if (anySyntacticErrors) {\n            return true;\n        }\n\n        compiler.pullTypeCheck();\n        var fileNames = compiler.fileNameToSyntaxTree.getAllKeys();\n        var typeCheckStart = (new Date()).getTime();\n        for (var i = 0, n = fileNames.length; i < n; i++) {\n            var fileName = fileNames[i];\n            var semanticDiagnostics = compiler.getSemanticDiagnostics(fileName);\n            if (semanticDiagnostics.length > 0) {\n                anySemanticErrors = true;\n                compiler.reportDiagnostics(semanticDiagnostics, this.errorReporter);\n            }\n        }\n        var typeCheckEnd = (new Date()).getTime();\n\n        //if (this.compilationSettings.gatherDiagnostics) {\n            this.ioHost.printLine(\"Type check time: \" + (typeCheckEnd - typeCheckStart));\n        //}\n\n        var emitterIOHost = {\n            createFile: (fileName: string, useUTF8?: bool) => IOUtils.createFileAndFolderStructure(this.ioHost, fileName, useUTF8),\n            directoryExists: this.ioHost.directoryExists,\n            fileExists: this.ioHost.fileExists,\n            resolvePath: this.ioHost.resolvePath\n        } ;\n\n        var mapInputToOutput = (inputFile: string, outputFile: string): void => {\n            this.compilationEnvironment.inputFileNameToOutputFileName.addOrUpdate(inputFile, outputFile);\n        };\n\n        // TODO: if there are any emit diagnostics.  Don\'t proceed.\n        var emitDiagnostics = compiler.emit(emitterIOHost, mapInputToOutput);\n        compiler.reportDiagnostics(emitDiagnostics, this.errorReporter);\n        if (emitDiagnostics.length > 0) {\n            return true;\n        }\n\n        // Don\'t emit declarations if we have any semantic diagnostics.\n        if (anySemanticErrors) {\n            return true;\n        }\n\n        var emitDeclarationsDiagnostics = compiler.emitDeclarations();\n        compiler.reportDiagnostics(emitDeclarationsDiagnostics, this.errorReporter);\n        if (emitDeclarationsDiagnostics.length > 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public updateCompile(): bool {\n        if (typeof localizedDiagnosticMessages === \"undefined\") {\n            localizedDiagnosticMessages = null;\n        }\n\n        var logger = this.compilationSettings.gatherDiagnostics ? <TypeScript.ILogger>new DiagnosticsLogger(this.ioHost) : new TypeScript.NullLogger();\n        var compiler = new TypeScript.TypeScriptCompiler(logger, this.compilationSettings, localizedDiagnosticMessages);\n\n        var anySyntacticErrors = false;\n        var foundLib = false;\n\n        for (var iCode = 0; iCode <= this.resolvedEnvironment.code.length; iCode++) {\n            var code = this.resolvedEnvironment.code[iCode];\n\n            if (code.path.indexOf(\"lib.d.ts\") != -1) {\n                foundLib = true;\n            }\n            else if ((foundLib && iCode > 1) || (!foundLib && iCode > 0)) {\n                break;\n            }\n\n            this.ioHost.stdout.WriteLine(\"Consuming \" + this.resolvedEnvironment.code[iCode].path + \"...\");\n\n            // if file resolving is disabled, the file\'s content will not yet be loaded\n\n            if (!this.compilationSettings.resolve) {\n                code.content = this.ioHost.readFile(code.path);\n                // If declaration files are going to be emitted, \n                // preprocess the file contents and add in referenced files as well\n                if (this.compilationSettings.generateDeclarationFiles) {\n                    TypeScript.CompilerDiagnostics.assert(code.referencedFiles === null, \"With no resolve option, referenced files need to null\");\n                    code.referencedFiles = TypeScript.getReferencedFiles(code.path, code);\n                }\n            }\n\n            if (code.content != null) {\n                compiler.addSourceUnit(code.path, TypeScript.ScriptSnapshot.fromString(code.content), code.referencedFiles);\n\n                var syntacticDiagnostics = compiler.getSyntacticDiagnostics(code.path);\n                compiler.reportDiagnostics(syntacticDiagnostics, this.errorReporter);\n\n                if (syntacticDiagnostics.length > 0) {\n                    anySyntacticErrors = true;\n                }\n            }\n        }\n\n        //if (anySyntacticErrors) {\n        //    return true;\n        //}\n\n        this.ioHost.stdout.WriteLine(\"Initial type check errors:\");\n        compiler.pullTypeCheck();\n\n        // Note: we continue even if there were type check warnings.\n\n        // ok, now we got through the remaining files, 1-by-1, substituting the new code in for the old\n        if (iCode && iCode <= this.resolvedEnvironment.code.length - 1) {\n            var lastTypecheckedFileName = this.resolvedEnvironment.code[iCode - 1].path;\n            var snapshot: TypeScript.IScriptSnapshot;\n\n            for (; iCode < this.resolvedEnvironment.code.length; iCode++) {\n                this.ioHost.stdout.WriteLine(\"Update type check and errors for \" + this.resolvedEnvironment.code[iCode].path + \":\");\n                var text = this.resolvedEnvironment.code[iCode].getText(0, this.resolvedEnvironment.code[iCode].getLength());\n                snapshot = TypeScript.ScriptSnapshot.fromString(text);\n\n                compiler.updateSourceUnit(lastTypecheckedFileName, snapshot, null);\n                var semanticDiagnostics = compiler.getSemanticDiagnostics(lastTypecheckedFileName);\n                compiler.reportDiagnostics(semanticDiagnostics, this.errorReporter);\n            }\n        }\n\n        return false;    \n    }\n\n    // Execute the provided inputs\n    private run() {\n        for (var i in this.compilationEnvironment.code) {\n            var outputFileName: string = this.compilationEnvironment.inputFileNameToOutputFileName.lookup(i);\n            if (this.ioHost.fileExists(outputFileName)) {\n                var unitRes = this.ioHost.readFile(outputFileName)\n                this.ioHost.run(unitRes, outputFileName);\n            }\n        }\n    }\n\n    /// Begin batch compilation\n    public batchCompile() {\n        TypeScript.CompilerDiagnostics.diagnosticWriter = { Alert: (s: string) => { this.ioHost.printLine(s); } }\n\n        var code: TypeScript.SourceUnit;\n\n        var opts = new OptionsParser(this.ioHost);\n\n        opts.option(\'out\', {\n            usage: \'Concatenate and emit output to single file | Redirect output structure to the directory\',\n            type: \'file|directory\',\n            set: (str) => {\n                this.compilationSettings.outputOption = str;\n            }\n        });\n\n        opts.option(\'style\', {\n            usage: \'Select style checking options (examples --style requireSemi:off or --style \"eqeqeq;bitwise:off\")\',\n            experimental: true,\n            set: (str) => {\n                this.compilationSettings.setStyleOptions(str);\n            }\n        });\n\n        opts.flag(\'sourcemap\', {\n            usage: \'Generates corresponding .map file\',\n            set: () => {\n                this.compilationSettings.mapSourceFiles = true;\n            }\n        });\n\n        opts.flag(\'fullSourceMapPath\', {\n            usage: \'Writes the full path of map file in the generated js file\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.emitFullSourceMapPath = true;\n            }\n        });\n\n        opts.flag(\'declaration\', {\n            usage: \'Generates corresponding .d.ts file\',\n            set: () => {\n                this.compilationSettings.generateDeclarationFiles = true;\n            }\n        });\n\n        if (this.ioHost.watchFile) {\n            opts.flag(\'watch\', {\n                usage: \'Watch output files\',\n                set: () => {\n                    this.compilationSettings.watch = true;\n                }\n            }, \'w\');\n        }\n\n        opts.flag(\'exec\', {\n            usage: \'Execute the script after compilation\',\n            set: () => {\n                this.compilationSettings.exec = true;\n            }\n        }, \'e\');\n\n        opts.flag(\'minw\', {\n            usage: \'Minimize whitespace\',\n            experimental: true,\n            set: () => { this.compilationSettings.minWhitespace = true; }\n        }, \'mw\');\n\n        opts.flag(\'const\', {\n            usage: \'Propagate constants to emitted code\',\n            experimental: true,\n            set: () => { this.compilationSettings.propagateConstants = true; }\n        });\n\n        opts.flag(\'comments\', {\n            usage: \'Emit comments to output\',\n            set: () => {\n                this.compilationSettings.emitComments = true;\n            }\n        }, \'c\');\n\n        opts.flag(\'cflow\', {\n            usage: \'Control flow\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.controlFlow = true;\n            }\n        });\n\n        opts.flag(\'cflowp\', {\n            usage: \'Print control flow\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.controlFlow = true;\n                this.compilationSettings.printControlFlow = true;\n            }\n        });\n\n        opts.flag(\'cflowu\', {\n            usage: \'Print Use Def control flow\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.controlFlow = true;\n                this.compilationSettings.controlFlowUseDef = true;\n            }\n        });\n\n        opts.flag(\'noerroronwith\', {\n            usage: \'Allow with statements\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.errorOnWith = false;\n            }\n        });\n\n        opts.flag(\'noresolve\', {\n            usage: \'Skip resolution and preprocessing\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.resolve = false;\n            }\n        });\n\n        opts.flag(\'debug\', {\n            usage: \'Print debug output\',\n            experimental: true,\n            set: () => {\n                TypeScript.CompilerDiagnostics.debug = true;\n            }\n        });\n\n        opts.flag(\'canCallDefinitionSignature\', {\n            usage: \'Allows you to call the definition signature of an overload group\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.canCallDefinitionSignature = true;\n            }\n        });\n\n        opts.flag(\'nooptimizemodules\', {\n            usage: \'Do not optimize module codegen\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.optimizeModuleCodeGen = false;\n            }\n        });\n\n        opts.flag(\'nolib\', {\n            usage: \'Do not include a default lib.d.ts with global declarations\',\n            set: () => {\n                this.compilationSettings.useDefaultLib = false;\n            }\n        });\n\n        opts.flag(\'diagnostics\', {\n            usage: \'gather diagnostic info about the compilation process\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.gatherDiagnostics = true;\n            }\n        });\n\n        opts.flag(\'update\', {\n            usage: \'Typecheck each file as an update on the first\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.updateTC = true;\n            }\n        });\n\n        opts.option(\'target\', {\n            usage: \'Specify ECMAScript target version: \"ES3\" (default), or \"ES5\"\',\n            type: \'VER\',\n            set: (type) => {\n                type = type.toLowerCase();\n\n                if (type === \'es3\') {\n                    this.compilationSettings.codeGenTarget = TypeScript.LanguageVersion.EcmaScript3;\n                }\n                else if (type === \'es5\') {\n                    this.compilationSettings.codeGenTarget = TypeScript.LanguageVersion.EcmaScript5;\n                }\n                else {\n                    this.errorReporter.WriteLine(\"ECMAScript target version \'\" + type + \"\' not supported.  Using default \'ES3\' code generation\");\n                }\n            }\n        });\n\n        opts.option(\'module\', {\n            usage: \'Specify module code generation: \"commonjs\" (default) or \"amd\"\',\n            type: \'kind\',\n            set: (type) => {\n                type = type.toLowerCase();\n\n                if (type === \'commonjs\' || type === \'node\') {\n                    this.compilationSettings.moduleGenTarget = TypeScript.ModuleGenTarget.Synchronous;\n                }\n                else if (type === \'amd\') {\n                    this.compilationSettings.moduleGenTarget = TypeScript.ModuleGenTarget.Asynchronous;\n                }\n                else {\n                    this.errorReporter.WriteLine(\"Module code generation \'\" + type + \"\' not supported.  Using default \'commonjs\' code generation\");\n                }\n            }\n        });\n\n        var printedUsage = false;\n\n        opts.flag(\'help\', {\n            usage: \'Print this message\',\n            set: () => {\n                this.printVersion();\n                opts.printUsage();\n                printedUsage = true;\n            }\n        }, \'h\');\n\n        opts.flag(\'useCaseSensitiveFileResolution\', {\n            usage: \'Force file resolution to be case sensitive\',\n            experimental: true,\n            set: () => {\n                this.compilationSettings.useCaseSensitiveFileResolution = true;\n            }\n        });\n\n        opts.flag(\'version\', {\n            usage: \'Print the compiler\\\'s version: \' + this.compilerVersion,\n            set: () => {\n                this.printVersion();\n            }\n        }, \'v\');\n\n        opts.parse(this.ioHost.arguments);\n        \n        if (this.compilationSettings.useDefaultLib) {\n            var compilerFilePath = this.ioHost.getExecutingFilePath()\n            var binDirPath = this.ioHost.dirName(compilerFilePath);\n            var libStrPath = this.ioHost.resolvePath(binDirPath + \"/lib.d.ts\");\n            code = new TypeScript.SourceUnit(libStrPath, null);\n            this.compilationEnvironment.code.push(code);\n        }\n\n        for (var i = 0; i < opts.unnamed.length; i++) {\n            code = new TypeScript.SourceUnit(opts.unnamed[i], null);\n            this.compilationEnvironment.code.push(code);\n        }\n\n        // If no source files provided to compiler - print usage information\n        if (this.compilationEnvironment.code.length === (this.compilationSettings.useDefaultLib ? 1 : 0)) {\n            if (!printedUsage && !this.printedVersion) {\n                this.printVersion();\n                opts.printUsage();\n                this.ioHost.quit(1);\n            }\n            return;\n        }\n\n        var sourceFiles: TypeScript.SourceUnit[] = [];\n        if (this.compilationSettings.watch) {\n            // Capture the state before calling resolve\n            sourceFiles = this.compilationEnvironment.code.slice(0);\n        }\n\n        // Resolve file dependencies, if requested\n        this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;\n\n        if (!this.compilationSettings.updateTC) {\n            this.compile();\n        }\n        else {\n            this.updateCompile();\n        }\n\n        if (!this.errorReporter.hasErrors) {\n            if (this.compilationSettings.exec) {\n                this.run();\n            }\n        }\n\n        if (this.compilationSettings.watch) {\n            // Watch will cause the program to stick around as long as the files exist\n            this.watchFiles(sourceFiles);\n        }\n        else {  \n            // Exit with the appropriate error code\n            this.ioHost.quit(this.errorReporter.hasErrors ? 1 : 0);\n        }\n    }\n\n    public printVersion() {\n        if (!this.printedVersion) {\n            this.ioHost.printLine(\"Version \" + this.compilerVersion);\n            this.printedVersion = true;\n        }\n    }\n\n    private watchFiles(sourceFiles: TypeScript.SourceUnit[]) {\n        if (!this.ioHost.watchFile) {\n            this.errorReporter.WriteLine(\"Error: Current host does not support -w[atch] option\");\n            return;\n        }\n\n        var resolvedFiles: string[] = []\n        var watchers: { [x: string]: IFileWatcher; } = {};\n\n        var addWatcher = (fileName: string) => {\n            if (!watchers[fileName]) {\n                var watcher = this.ioHost.watchFile(fileName, onWatchedFileChange);\n                watchers[fileName] = watcher;\n            }\n            else {\n                TypeScript.CompilerDiagnostics.debugPrint(\"Cannot watch file, it is already watched.\");\n            }\n        };\n\n        var removeWatcher = (fileName: string) => {\n            if (watchers[fileName]) {\n                watchers[fileName].close();\n                delete watchers[fileName];\n            }\n            else {\n                TypeScript.CompilerDiagnostics.debugPrint(\"Cannot stop watching file, it is not being watched.\");\n            }\n        };\n\n        var onWatchedFileChange = () => {\n            // Reset the state\n            this.compilationEnvironment.code = sourceFiles;\n\n            // Clean errors for previous compilation\n            this.errorReporter.reset();\n\n            // Resolve file dependencies, if requested\n            this.resolvedEnvironment = this.compilationSettings.resolve ? this.resolve() : this.compilationEnvironment;\n\n            // Check if any new files were added to the environment as a result of the file change\n            var oldFiles = resolvedFiles;\n            var newFiles: string[] = [];\n            this.resolvedEnvironment.code.forEach((sf) => newFiles.push(sf.path));\n            newFiles = newFiles.sort();\n\n            var i = 0, j = 0;\n            while (i < oldFiles.length && j < newFiles.length) {\n\n                var compareResult = oldFiles[i].localeCompare(newFiles[j]);\n                if (compareResult === 0) {\n                    // No change here\n                    i++;\n                    j++;\n                }\n                else if (compareResult < 0) {\n                    // Entry in old list does not exist in the new one, it was removed\n                    removeWatcher(oldFiles[i]);\n                    i++;\n                }\n                else {\n                    // Entry in new list does exist in the new one, it was added\n                    addWatcher(newFiles[j]);\n                    j++;\n                }\n            }\n\n            // All remaining unmatched items in the old list have been removed\n            for (var k = i; k < oldFiles.length; k++) {\n                removeWatcher(oldFiles[k]);\n            }\n\n            // All remaing unmatched items in the new list have been added\n            for (k = j; k < newFiles.length; k++) {\n                addWatcher(newFiles[k]);\n            }\n\n            // Update the state\n            resolvedFiles = newFiles;\n\n            // Print header\n            this.ioHost.printLine(\"\");\n            this.ioHost.printLine(\"Recompiling (\" + new Date() + \"): \");\n            resolvedFiles.forEach((f) => this.ioHost.printLine(\"    \" + f));\n\n            // Trigger a new compilation\n            this.compile();\n\n            if (!this.errorReporter.hasErrors) {\n                if (this.compilationSettings.exec) {\n                    this.run();\n                }\n            }\n        };\n\n        // Switch to using stdout for all error messages\n        this.ioHost.stderr = this.ioHost.stdout;\n\n        // Initialize the initial list of resolved files, and add watches to them\n        this.resolvedEnvironment.code.forEach((sf) => {\n            resolvedFiles.push(sf.path);\n            addWatcher(sf.path);\n        });\n        resolvedFiles.sort();\n    }\n}\n\n// Start the batch compilation using the current hosts IO\nvar batch = new BatchCompiler(IO);\nbatch.batchCompile();\n";