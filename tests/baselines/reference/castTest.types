=== tests/cases/compiler/castTest.ts ===
Line 2 col 8 CastExpression "<number> x" = number
Line 2 col 17 IdentifierName "x" = any
Line 3 col 8 AddExpression "x + z" = any
Line 3 col 8 IdentifierName "x" = any
Line 3 col 12 IdentifierName "z" = number
Line 5 col 8 CastExpression "<any>0" = any
Line 6 col 8 CastExpression "<boolean>true" = boolean
Line 7 col 8 CastExpression "<string>""" = string
Line 9 col 9 CastExpression "<any[]>null" = any[]
Line 11 col 8 CastExpression "<(res : number) => void>null" = (res: number) => void
Line 11 col 10 IdentifierName "res" = any
Line 17 col 8 IdentifierName "dx" = any
Line 17 col 20 IdentifierName "dy" = any
Line 17 col 33 IdentifierName "Point" = Point
Line 18 col 9 IdentifierName "p" = any
Line 18 col 12 IdentifierName "Point" = Point
Line 18 col 20 IdentifierName "Point" = Point
Line 19 col 16 IdentifierName "x" = any
Line 19 col 27 IdentifierName "y" = any
Line 22 col 13 CastExpression "<Point> ({
    x: 0,
    y: 0,
    add: function(dx, dy) {
        return new Point(this.x + dx, this.y + dy);
    },
    mult: function(p) { return p; }
})" = Point
Line 22 col 14 IdentifierName "Point" = Point
Line 22 col 21 ParenthesizedExpression "({
    x: 0,
    y: 0,
    add: function(dx, dy) {
        return new Point(this.x + dx, this.y + dy);
    },
    mult: function(p) { return p; }
})" = { x: number; y: number; add: (dx: any, dy: any) => Point; mult: (p: any) => any; }
Line 22 col 22 ObjectLiteralExpression "{
    x: 0,
    y: 0,
    add: function(dx, dy) {
        return new Point(this.x + dx, this.y + dy);
    },
    mult: function(p) { return p; }
}" = { x: number; y: number; add: (dx: any, dy: any) => Point; mult: (p: any) => any; }
Line 25 col 9 FunctionExpression "function(dx, dy) {
        return new Point(this.x + dx, this.y + dy);
    }" = (dx: any, dy: any) => Point
Line 25 col 18 IdentifierName "dx" = any
Line 25 col 22 IdentifierName "dy" = any
Line 26 col 15 ObjectCreationExpression "new Point(this.x + dx, this.y + dy)" = Point
Line 26 col 19 IdentifierName "Point" = new(x: number, y: number) => Point
Line 26 col 25 AddExpression "this.x + dx" = any
Line 26 col 25 MemberAccessExpression "this.x" = any
Line 26 col 25 ThisKeyword "this" = any
Line 26 col 30 IdentifierName "x" = any
Line 26 col 34 IdentifierName "dx" = any
Line 26 col 38 AddExpression "this.y + dy" = any
Line 26 col 38 MemberAccessExpression "this.y" = any
Line 26 col 38 ThisKeyword "this" = any
Line 26 col 43 IdentifierName "y" = any
Line 26 col 47 IdentifierName "dy" = any
Line 28 col 10 FunctionExpression "function(p) { return p; }" = (p: any) => any
Line 28 col 19 IdentifierName "p" = any
Line 28 col 31 IdentifierName "p" = any