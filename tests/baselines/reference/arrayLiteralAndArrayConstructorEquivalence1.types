=== tests/cases/compiler/arrayLiteralAndArrayConstructorEquivalence1.ts ===
Line 0 col 11 ObjectCreationExpression "new Array()" = any[]
Line 0 col 15 IdentifierName "Array" = { isArray(arg: any): boolean; prototype: any[]; <T>(arrayLength: number): T[]; <T>(...items: T[]): T[]; new<T>(arrayLength: number): T[]; new<T>(...items: T[]): T[]; }
Line 1 col 14 ObjectCreationExpression "new Array({})" = {}[]
Line 1 col 18 IdentifierName "Array" = { isArray(arg: any): boolean; prototype: any[]; <T>(arrayLength: number): T[]; <T>(...items: T[]): T[]; new<T>(arrayLength: number): T[]; new<T>(...items: T[]): T[]; }
Line 1 col 24 ObjectLiteralExpression "{}" = {}
Line 2 col 13 IdentifierName "Array" = Array<T>
Line 3 col 13 IdentifierName "Array" = Array<T>
Line 4 col 0 AssignmentExpression "myCars = myCars3" = {}[]
Line 4 col 0 IdentifierName "myCars" = any[]
Line 5 col 9 IdentifierName "myCars3" = {}[]
Line 6 col 0 AssignmentExpression "myCars = myCars4" = Array<T>
Line 6 col 0 IdentifierName "myCars" = any[]
Line 6 col 9 IdentifierName "myCars4" = Array<T>
Line 7 col 0 AssignmentExpression "myCars = myCars5" = any[][]
Line 7 col 0 IdentifierName "myCars" = any[]
Line 7 col 9 IdentifierName "myCars5" = any[][]
Line 8 col 0 AssignmentExpression "myCars3 = myCars" = any[]
Line 8 col 0 IdentifierName "myCars3" = {}[]
Line 9 col 10 IdentifierName "myCars" = any[]
Line 10 col 0 AssignmentExpression "myCars3 = myCars4" = Array<T>
Line 10 col 0 IdentifierName "myCars3" = {}[]
Line 10 col 10 IdentifierName "myCars4" = Array<T>
Line 11 col 0 AssignmentExpression "myCars3 = myCars5" = any[][]
Line 11 col 0 IdentifierName "myCars3" = {}[]
Line 11 col 10 IdentifierName "myCars5" = any[][]